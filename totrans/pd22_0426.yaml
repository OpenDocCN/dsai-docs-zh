- en: pandas arrays, scalars, and data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/arrays.html](https://pandas.pydata.org/docs/reference/arrays.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Objects'
  prefs: []
  type: TYPE_NORMAL
- en: For most data types, pandas uses NumPy arrays as the concrete objects contained
    with a [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index"), [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series"), or [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: For some data types, pandas extends NumPy’s type system. String aliases for
    these types can be found at [dtypes](../user_guide/basics.html#basics-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: '| Kind of Data | pandas Data Type | Scalar | Array |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| TZ-aware datetime | [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [Datetimes](#api-arrays-datetime) |'
  prefs: []
  type: TYPE_TB
- en: '| Timedeltas | (none) | [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") | [Timedeltas](#api-arrays-timedelta) |'
  prefs: []
  type: TYPE_TB
- en: '| Period (time spans) | [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype") | [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    | [Periods](#api-arrays-period) |'
  prefs: []
  type: TYPE_TB
- en: '| Intervals | [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype
    "pandas.IntervalDtype") | [`Interval`](api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") | [Intervals](#api-arrays-interval) |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Integer | [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype"), … | (none) | [Nullable integer](#api-arrays-integer-na)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Float | [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype"), … | (none) | [Nullable float](#api-arrays-float-na) |'
  prefs: []
  type: TYPE_TB
- en: '| Categorical | [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) | [Categoricals](#api-arrays-categorical)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Sparse | [`SparseDtype`](api/pandas.SparseDtype.html#pandas.SparseDtype "pandas.SparseDtype")
    | (none) | [Sparse](#api-arrays-sparse) |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") | [Strings](#api-arrays-string) |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Boolean | [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") | [Nullable Boolean](#api-arrays-bool) |'
  prefs: []
  type: TYPE_TB
- en: '| PyArrow | [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")
    | Python Scalars or [`NA`](api/pandas.NA.html#pandas.NA "pandas.NA") | [PyArrow](#api-arrays-arrow)
    |'
  prefs: []
  type: TYPE_TB
- en: pandas and third-party libraries can extend NumPy’s type system (see [Extension
    types](../development/extending.html#extending-extension-types)). The top-level
    [`array()`](api/pandas.array.html#pandas.array "pandas.array") method can be used
    to create a new array, which may be stored in a [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series"), [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index"),
    or as a column in a [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`array`](api/pandas.array.html#pandas.array "pandas.array")(data[, dtype, copy])
    | Create an array. |'
  prefs: []
  type: TYPE_TB
- en: '### PyArrow'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This feature is experimental, and the API can change in a future release without
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: The [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is backed by a [`pyarrow.ChunkedArray`](https://arrow.apache.org/docs/python/generated/pyarrow.ChunkedArray.html#pyarrow.ChunkedArray
    "(in Apache Arrow v15.0.2)") with a [`pyarrow.DataType`](https://arrow.apache.org/docs/python/generated/pyarrow.DataType.html#pyarrow.DataType
    "(in Apache Arrow v15.0.2)") instead of a NumPy array and data type. The `.dtype`
    of a [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is an [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '[Pyarrow](https://arrow.apache.org/docs/python/index.html) provides similar
    array and [data type](https://arrow.apache.org/docs/python/api/datatypes.html)
    support as NumPy including first-class nullability support for all data types,
    immutability and more.'
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows the equivalent pyarrow-backed (`pa`), pandas extension,
    and numpy (`np`) types that are recognized by pandas. Pyarrow-backed types below
    need to be passed into [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") to be recognized by pandas e.g. `pd.ArrowDtype(pa.bool_())`
  prefs: []
  type: TYPE_NORMAL
- en: '| PyArrow type | pandas extension type | NumPy type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.bool_()`](https://arrow.apache.org/docs/python/generated/pyarrow.bool_.html#pyarrow.bool_
    "(in Apache Arrow v15.0.2)") | [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | `np.bool_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int8()`](https://arrow.apache.org/docs/python/generated/pyarrow.int8.html#pyarrow.int8
    "(in Apache Arrow v15.0.2)") | [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype
    "pandas.Int8Dtype") | `np.int8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int16()`](https://arrow.apache.org/docs/python/generated/pyarrow.int16.html#pyarrow.int16
    "(in Apache Arrow v15.0.2)") | [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype
    "pandas.Int16Dtype") | `np.int16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int32()`](https://arrow.apache.org/docs/python/generated/pyarrow.int32.html#pyarrow.int32
    "(in Apache Arrow v15.0.2)") | [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype
    "pandas.Int32Dtype") | `np.int32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int64()`](https://arrow.apache.org/docs/python/generated/pyarrow.int64.html#pyarrow.int64
    "(in Apache Arrow v15.0.2)") | [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") | `np.int64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint8()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint8.html#pyarrow.uint8
    "(in Apache Arrow v15.0.2)") | [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype
    "pandas.UInt8Dtype") | `np.uint8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint16()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint16.html#pyarrow.uint16
    "(in Apache Arrow v15.0.2)") | [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype
    "pandas.UInt16Dtype") | `np.uint16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint32()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint32.html#pyarrow.uint32
    "(in Apache Arrow v15.0.2)") | [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype
    "pandas.UInt32Dtype") | `np.uint32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint64()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint64.html#pyarrow.uint64
    "(in Apache Arrow v15.0.2)") | [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype
    "pandas.UInt64Dtype") | `np.uint64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float32()`](https://arrow.apache.org/docs/python/generated/pyarrow.float32.html#pyarrow.float32
    "(in Apache Arrow v15.0.2)") | [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype
    "pandas.Float32Dtype") | `np.float32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float64()`](https://arrow.apache.org/docs/python/generated/pyarrow.float64.html#pyarrow.float64
    "(in Apache Arrow v15.0.2)") | [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype") | `np.float64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time32()`](https://arrow.apache.org/docs/python/generated/pyarrow.time32.html#pyarrow.time32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time64()`](https://arrow.apache.org/docs/python/generated/pyarrow.time64.html#pyarrow.time64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.timestamp()`](https://arrow.apache.org/docs/python/generated/pyarrow.timestamp.html#pyarrow.timestamp
    "(in Apache Arrow v15.0.2)") | [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | `np.datetime64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date32()`](https://arrow.apache.org/docs/python/generated/pyarrow.date32.html#pyarrow.date32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date64()`](https://arrow.apache.org/docs/python/generated/pyarrow.date64.html#pyarrow.date64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.duration()`](https://arrow.apache.org/docs/python/generated/pyarrow.duration.html#pyarrow.duration
    "(in Apache Arrow v15.0.2)") | (none) | `np.timedelta64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.binary()`](https://arrow.apache.org/docs/python/generated/pyarrow.binary.html#pyarrow.binary
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.string()`](https://arrow.apache.org/docs/python/generated/pyarrow.string.html#pyarrow.string
    "(in Apache Arrow v15.0.2)") | [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | `np.str_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.decimal128()`](https://arrow.apache.org/docs/python/generated/pyarrow.decimal128.html#pyarrow.decimal128
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.list_()`](https://arrow.apache.org/docs/python/generated/pyarrow.list_.html#pyarrow.list_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.map_()`](https://arrow.apache.org/docs/python/generated/pyarrow.map_.html#pyarrow.map_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.dictionary()`](https://arrow.apache.org/docs/python/generated/pyarrow.dictionary.html#pyarrow.dictionary
    "(in Apache Arrow v15.0.2)") | [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Pyarrow-backed string support is provided by both `pd.StringDtype("pyarrow")`
    and `pd.ArrowDtype(pa.string())`. `pd.StringDtype("pyarrow")` is described below
    in the [string section](#api-arrays-string) and will be returned if the string
    alias `"string[pyarrow]"` is specified. `pd.ArrowDtype(pa.string())` generally
    has better interoperability with [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") of different types.
  prefs: []
  type: TYPE_NORMAL
- en: While individual values in an [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") are stored as a PyArrow objects, scalars
    are **returned** as Python scalars corresponding to the data type, e.g. a PyArrow
    int64 will be returned as Python int, or [`NA`](api/pandas.NA.html#pandas.NA "pandas.NA")
    for missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray")(values) | Pandas ExtensionArray backed by
    a PyArrow ChunkedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")(pyarrow_dtype)
    | An ExtensionDtype for PyArrow data types. |'
  prefs: []
  type: TYPE_TB
- en: 'For more information, please see the [PyArrow user guide](../user_guide/pyarrow.html#pyarrow)  ###
    Datetimes'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy cannot natively represent timezone-aware datetimes. pandas supports this
    with the [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") extension array, which can hold timezone-naive
    or timezone-aware values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp"),
    a subclass of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"), is pandas’ scalar type for timezone-naive or timezone-aware
    datetime data. [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the missing
    value for datetime data.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")([ts_input, year, month, day, ...])
    | Pandas replacement for python datetime.datetime object. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.asm8`](api/pandas.Timestamp.asm8.html#pandas.Timestamp.asm8 "pandas.Timestamp.asm8")
    | Return numpy datetime64 format in nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day`](api/pandas.Timestamp.day.html#pandas.Timestamp.day "pandas.Timestamp.day")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofweek`](api/pandas.Timestamp.dayofweek.html#pandas.Timestamp.dayofweek
    "pandas.Timestamp.dayofweek") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_week`](api/pandas.Timestamp.day_of_week.html#pandas.Timestamp.day_of_week
    "pandas.Timestamp.day_of_week") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofyear`](api/pandas.Timestamp.dayofyear.html#pandas.Timestamp.dayofyear
    "pandas.Timestamp.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_year`](api/pandas.Timestamp.day_of_year.html#pandas.Timestamp.day_of_year
    "pandas.Timestamp.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.days_in_month`](api/pandas.Timestamp.days_in_month.html#pandas.Timestamp.days_in_month
    "pandas.Timestamp.days_in_month") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.daysinmonth`](api/pandas.Timestamp.daysinmonth.html#pandas.Timestamp.daysinmonth
    "pandas.Timestamp.daysinmonth") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fold`](api/pandas.Timestamp.fold.html#pandas.Timestamp.fold "pandas.Timestamp.fold")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.hour`](api/pandas.Timestamp.hour.html#pandas.Timestamp.hour "pandas.Timestamp.hour")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_leap_year`](api/pandas.Timestamp.is_leap_year.html#pandas.Timestamp.is_leap_year
    "pandas.Timestamp.is_leap_year") | Return True if year is a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_end`](api/pandas.Timestamp.is_month_end.html#pandas.Timestamp.is_month_end
    "pandas.Timestamp.is_month_end") | Check if the date is the last day of the month.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_start`](api/pandas.Timestamp.is_month_start.html#pandas.Timestamp.is_month_start
    "pandas.Timestamp.is_month_start") | Check if the date is the first day of the
    month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_end`](api/pandas.Timestamp.is_quarter_end.html#pandas.Timestamp.is_quarter_end
    "pandas.Timestamp.is_quarter_end") | Check if date is last day of the quarter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_start`](api/pandas.Timestamp.is_quarter_start.html#pandas.Timestamp.is_quarter_start
    "pandas.Timestamp.is_quarter_start") | Check if the date is the first day of the
    quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_end`](api/pandas.Timestamp.is_year_end.html#pandas.Timestamp.is_year_end
    "pandas.Timestamp.is_year_end") | Return True if date is last day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_start`](api/pandas.Timestamp.is_year_start.html#pandas.Timestamp.is_year_start
    "pandas.Timestamp.is_year_start") | Return True if date is first day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.max`](api/pandas.Timestamp.max.html#pandas.Timestamp.max "pandas.Timestamp.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.microsecond`](api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.min`](api/pandas.Timestamp.min.html#pandas.Timestamp.min "pandas.Timestamp.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.minute`](api/pandas.Timestamp.minute.html#pandas.Timestamp.minute
    "pandas.Timestamp.minute") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month`](api/pandas.Timestamp.month.html#pandas.Timestamp.month
    "pandas.Timestamp.month") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.nanosecond`](api/pandas.Timestamp.nanosecond.html#pandas.Timestamp.nanosecond
    "pandas.Timestamp.nanosecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.quarter`](api/pandas.Timestamp.quarter.html#pandas.Timestamp.quarter
    "pandas.Timestamp.quarter") | Return the quarter of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.resolution`](api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.second`](api/pandas.Timestamp.second.html#pandas.Timestamp.second
    "pandas.Timestamp.second") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz`](api/pandas.Timestamp.tz.html#pandas.Timestamp.tz "pandas.Timestamp.tz")
    | Alias for tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzinfo`](api/pandas.Timestamp.tzinfo.html#pandas.Timestamp.tzinfo
    "pandas.Timestamp.tzinfo") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.unit`](api/pandas.Timestamp.unit.html#pandas.Timestamp.unit "pandas.Timestamp.unit")
    | The abbreviation associated with self._creso. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.value`](api/pandas.Timestamp.value.html#pandas.Timestamp.value
    "pandas.Timestamp.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.week`](api/pandas.Timestamp.week.html#pandas.Timestamp.week "pandas.Timestamp.week")
    | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekofyear`](api/pandas.Timestamp.weekofyear.html#pandas.Timestamp.weekofyear
    "pandas.Timestamp.weekofyear") | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.year`](api/pandas.Timestamp.year.html#pandas.Timestamp.year "pandas.Timestamp.year")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.as_unit`](api/pandas.Timestamp.as_unit.html#pandas.Timestamp.as_unit
    "pandas.Timestamp.as_unit")(unit[, round_ok]) | Convert the underlying int64 representaton
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.astimezone`](api/pandas.Timestamp.astimezone.html#pandas.Timestamp.astimezone
    "pandas.Timestamp.astimezone")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ceil`](api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil "pandas.Timestamp.ceil")(freq[, ambiguous, nonexistent])
    | Return a new Timestamp ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.combine`](api/pandas.Timestamp.combine.html#pandas.Timestamp.combine
    "pandas.Timestamp.combine")(date, time) | Combine date, time into datetime with
    same date and time fields. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ctime`](api/pandas.Timestamp.ctime.html#pandas.Timestamp.ctime
    "pandas.Timestamp.ctime")() | Return ctime() style string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.date`](api/pandas.Timestamp.date.html#pandas.Timestamp.date "pandas.Timestamp.date")()
    | Return date object with same year, month and day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_name`](api/pandas.Timestamp.day_name.html#pandas.Timestamp.day_name
    "pandas.Timestamp.day_name")([locale]) | Return the day name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dst`](api/pandas.Timestamp.dst.html#pandas.Timestamp.dst "pandas.Timestamp.dst")()
    | Return the daylight saving time (DST) adjustment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.floor`](api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")(freq[, ambiguous, nonexistent]) | Return a new Timestamp
    floored to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromordinal`](api/pandas.Timestamp.fromordinal.html#pandas.Timestamp.fromordinal
    "pandas.Timestamp.fromordinal")(ordinal[, tz]) | Construct a timestamp from a
    a proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromtimestamp`](api/pandas.Timestamp.fromtimestamp.html#pandas.Timestamp.fromtimestamp
    "pandas.Timestamp.fromtimestamp")(ts) | Transform timestamp[, tz] to tz''s local
    time from POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isocalendar`](api/pandas.Timestamp.isocalendar.html#pandas.Timestamp.isocalendar
    "pandas.Timestamp.isocalendar")() | Return a named tuple containing ISO year,
    week number, and weekday. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoformat`](api/pandas.Timestamp.isoformat.html#pandas.Timestamp.isoformat
    "pandas.Timestamp.isoformat")([sep, timespec]) | Return the time formatted according
    to ISO 8601. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoweekday`](api/pandas.Timestamp.isoweekday.html#pandas.Timestamp.isoweekday
    "pandas.Timestamp.isoweekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month_name`](api/pandas.Timestamp.month_name.html#pandas.Timestamp.month_name
    "pandas.Timestamp.month_name")([locale]) | Return the month name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.normalize`](api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize")() | Normalize Timestamp to midnight, preserving
    tz information. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.now`](api/pandas.Timestamp.now.html#pandas.Timestamp.now "pandas.Timestamp.now")([tz])
    | Return new Timestamp object representing current time local to tz. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.replace`](api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace")([year, month, day, hour, ...]) | Implements datetime.replace,
    handles nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.round`](api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round")(freq[, ambiguous, nonexistent]) | Round the Timestamp
    to the specified resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strftime`](api/pandas.Timestamp.strftime.html#pandas.Timestamp.strftime
    "pandas.Timestamp.strftime")(format) | Return a formatted string of the Timestamp.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strptime`](api/pandas.Timestamp.strptime.html#pandas.Timestamp.strptime
    "pandas.Timestamp.strptime")(string, format) | Function is not implemented. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.time`](api/pandas.Timestamp.time.html#pandas.Timestamp.time "pandas.Timestamp.time")()
    | Return time object with same time but with tzinfo=None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timestamp`](api/pandas.Timestamp.timestamp.html#pandas.Timestamp.timestamp
    "pandas.Timestamp.timestamp")() | Return POSIX timestamp as float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetuple`](api/pandas.Timestamp.timetuple.html#pandas.Timestamp.timetuple
    "pandas.Timestamp.timetuple")() | Return time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetz`](api/pandas.Timestamp.timetz.html#pandas.Timestamp.timetz
    "pandas.Timestamp.timetz")() | Return time object with same time and tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_datetime64`](api/pandas.Timestamp.to_datetime64.html#pandas.Timestamp.to_datetime64
    "pandas.Timestamp.to_datetime64")() | Return a numpy.datetime64 object with same
    precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_numpy`](api/pandas.Timestamp.to_numpy.html#pandas.Timestamp.to_numpy
    "pandas.Timestamp.to_numpy")([dtype, copy]) | Convert the Timestamp to a NumPy
    datetime64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_julian_date`](api/pandas.Timestamp.to_julian_date.html#pandas.Timestamp.to_julian_date
    "pandas.Timestamp.to_julian_date")() | Convert TimeStamp to a Julian Date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_period`](api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period")([freq]) | Return an period of which this timestamp
    is an observation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_pydatetime`](api/pandas.Timestamp.to_pydatetime.html#pandas.Timestamp.to_pydatetime
    "pandas.Timestamp.to_pydatetime")([warn]) | Convert a Timestamp object to a native
    Python datetime object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.today`](api/pandas.Timestamp.today.html#pandas.Timestamp.today
    "pandas.Timestamp.today")([tz]) | Return the current time in the local timezone.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.toordinal`](api/pandas.Timestamp.toordinal.html#pandas.Timestamp.toordinal
    "pandas.Timestamp.toordinal")() | Return proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_convert`](api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_localize`](api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")(tz[, ambiguous, ...]) | Localize the Timestamp
    to a timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzname`](api/pandas.Timestamp.tzname.html#pandas.Timestamp.tzname
    "pandas.Timestamp.tzname")() | Return time zone name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcfromtimestamp`](api/pandas.Timestamp.utcfromtimestamp.html#pandas.Timestamp.utcfromtimestamp
    "pandas.Timestamp.utcfromtimestamp")(ts) | Construct a timezone-aware UTC datetime
    from a POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcnow`](api/pandas.Timestamp.utcnow.html#pandas.Timestamp.utcnow
    "pandas.Timestamp.utcnow")() | Return a new Timestamp representing UTC day and
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcoffset`](api/pandas.Timestamp.utcoffset.html#pandas.Timestamp.utcoffset
    "pandas.Timestamp.utcoffset")() | Return utc offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utctimetuple`](api/pandas.Timestamp.utctimetuple.html#pandas.Timestamp.utctimetuple
    "pandas.Timestamp.utctimetuple")() | Return UTC time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekday`](api/pandas.Timestamp.weekday.html#pandas.Timestamp.weekday
    "pandas.Timestamp.weekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: A collection of timestamps may be stored in a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray"). For timezone-aware data, the `.dtype` of a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") is a [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype"). For timezone-naive data, `np.dtype("datetime64[ns]")`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: If the data are timezone-aware, then every value in the array must have the
    same timezone.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for tz-naive or tz-aware datetime data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype")([unit, tz]) | An ExtensionDtype for timezone-aware datetime
    data. |  ### Timedeltas'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy can natively represent timedeltas. pandas provides [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") for symmetry with [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"). [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the
    missing value for timedelta data.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")([value, unit])
    | Represents a duration, the difference between two dates or times. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.asm8`](api/pandas.Timedelta.asm8.html#pandas.Timedelta.asm8 "pandas.Timedelta.asm8")
    | Return a numpy timedelta64 array scalar view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.components`](api/pandas.Timedelta.components.html#pandas.Timedelta.components
    "pandas.Timedelta.components") | Return a components namedtuple-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.days`](api/pandas.Timedelta.days.html#pandas.Timedelta.days "pandas.Timedelta.days")
    | Returns the days of the timedelta. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.max`](api/pandas.Timedelta.max.html#pandas.Timedelta.max "pandas.Timedelta.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.microseconds`](api/pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds
    "pandas.Timedelta.microseconds") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.min`](api/pandas.Timedelta.min.html#pandas.Timedelta.min "pandas.Timedelta.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.nanoseconds`](api/pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds
    "pandas.Timedelta.nanoseconds") | Return the number of nanoseconds (n), where
    0 <= n < 1 microsecond. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.resolution`](api/pandas.Timedelta.resolution.html#pandas.Timedelta.resolution
    "pandas.Timedelta.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.seconds`](api/pandas.Timedelta.seconds.html#pandas.Timedelta.seconds
    "pandas.Timedelta.seconds") | Return the total hours, minutes, and seconds of
    the timedelta as seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.unit`](api/pandas.Timedelta.unit.html#pandas.Timedelta.unit "pandas.Timedelta.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.value`](api/pandas.Timedelta.value.html#pandas.Timedelta.value
    "pandas.Timedelta.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.view`](api/pandas.Timedelta.view.html#pandas.Timedelta.view "pandas.Timedelta.view")(dtype)
    | Array view compatibility. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.as_unit`](api/pandas.Timedelta.as_unit.html#pandas.Timedelta.as_unit
    "pandas.Timedelta.as_unit")(unit[, round_ok]) | Convert the underlying int64 representation
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.ceil`](api/pandas.Timedelta.ceil.html#pandas.Timedelta.ceil "pandas.Timedelta.ceil")(freq)
    | Return a new Timedelta ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.floor`](api/pandas.Timedelta.floor.html#pandas.Timedelta.floor
    "pandas.Timedelta.floor")(freq) | Return a new Timedelta floored to this resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.isoformat`](api/pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat
    "pandas.Timedelta.isoformat")() | Format the Timedelta as ISO 8601 Duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.round`](api/pandas.Timedelta.round.html#pandas.Timedelta.round
    "pandas.Timedelta.round")(freq) | Round the Timedelta to the specified resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_pytimedelta`](api/pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta
    "pandas.Timedelta.to_pytimedelta")() | Convert a pandas Timedelta object into
    a python `datetime.timedelta` object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_timedelta64`](api/pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64
    "pandas.Timedelta.to_timedelta64")() | Return a numpy.timedelta64 object with
    ''ns'' precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_numpy`](api/pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy
    "pandas.Timedelta.to_numpy")([dtype, copy]) | Convert the Timedelta to a NumPy
    timedelta64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.total_seconds`](api/pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds
    "pandas.Timedelta.total_seconds")() | Total seconds in the duration. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")
    may be stored in a `TimedeltaArray`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.TimedeltaArray`](api/pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray")(values[, dtype, freq, ...]) | Pandas ExtensionArray
    for timedelta data. |  ### Periods'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents spans of times as [`Period`](api/pandas.Period.html#pandas.Period
    "pandas.Period") objects.
  prefs: []
  type: TYPE_NORMAL
- en: Period
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")([value, freq, ordinal, year, month, ...])
    | Represents a period of time. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.day`](api/pandas.Period.day.html#pandas.Period.day "pandas.Period.day")
    | Get day of the month that a Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofweek`](api/pandas.Period.dayofweek.html#pandas.Period.dayofweek
    "pandas.Period.dayofweek") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_week`](api/pandas.Period.day_of_week.html#pandas.Period.day_of_week
    "pandas.Period.day_of_week") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofyear`](api/pandas.Period.dayofyear.html#pandas.Period.dayofyear
    "pandas.Period.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_year`](api/pandas.Period.day_of_year.html#pandas.Period.day_of_year
    "pandas.Period.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.days_in_month`](api/pandas.Period.days_in_month.html#pandas.Period.days_in_month
    "pandas.Period.days_in_month") | Get the total number of days in the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.daysinmonth`](api/pandas.Period.daysinmonth.html#pandas.Period.daysinmonth
    "pandas.Period.daysinmonth") | Get the total number of days of the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.end_time`](api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freq`](api/pandas.Period.freq.html#pandas.Period.freq "pandas.Period.freq")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freqstr`](api/pandas.Period.freqstr.html#pandas.Period.freqstr "pandas.Period.freqstr")
    | Return a string representation of the frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.hour`](api/pandas.Period.hour.html#pandas.Period.hour "pandas.Period.hour")
    | Get the hour of the day component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.is_leap_year`](api/pandas.Period.is_leap_year.html#pandas.Period.is_leap_year
    "pandas.Period.is_leap_year") | Return True if the period''s year is in a leap
    year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.minute`](api/pandas.Period.minute.html#pandas.Period.minute "pandas.Period.minute")
    | Get minute of the hour component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.month`](api/pandas.Period.month.html#pandas.Period.month "pandas.Period.month")
    | Return the month this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.ordinal`](api/pandas.Period.ordinal.html#pandas.Period.ordinal "pandas.Period.ordinal")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.quarter`](api/pandas.Period.quarter.html#pandas.Period.quarter "pandas.Period.quarter")
    | Return the quarter this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.qyear`](api/pandas.Period.qyear.html#pandas.Period.qyear "pandas.Period.qyear")
    | Fiscal year the Period lies in according to its starting-quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.second`](api/pandas.Period.second.html#pandas.Period.second "pandas.Period.second")
    | Get the second component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.start_time`](api/pandas.Period.start_time.html#pandas.Period.start_time
    "pandas.Period.start_time") | Get the Timestamp for the start of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.week`](api/pandas.Period.week.html#pandas.Period.week "pandas.Period.week")
    | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekday`](api/pandas.Period.weekday.html#pandas.Period.weekday "pandas.Period.weekday")
    | Day of the week the period lies in, with Monday=0 and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekofyear`](api/pandas.Period.weekofyear.html#pandas.Period.weekofyear
    "pandas.Period.weekofyear") | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.year`](api/pandas.Period.year.html#pandas.Period.year "pandas.Period.year")
    | Return the year this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.asfreq`](api/pandas.Period.asfreq.html#pandas.Period.asfreq "pandas.Period.asfreq")(freq[, how])
    | Convert Period to desired frequency, at the start or end of the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.now`](api/pandas.Period.now.html#pandas.Period.now "pandas.Period.now")(freq)
    | Return the period of now''s date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.strftime`](api/pandas.Period.strftime.html#pandas.Period.strftime
    "pandas.Period.strftime")(fmt) | Returns a formatted string representation of
    the [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.to_timestamp`](api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp")([freq, how]) | Return the Timestamp representation
    of the Period. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    may be stored in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"). Every period in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") must have the same `freq`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for storing Period data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype "pandas.PeriodDtype")(freq)
    | An ExtensionDtype for Period data. |'
  prefs: []
  type: TYPE_TB
- en: '### Intervals'
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary intervals can be represented as [`Interval`](api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Interval`](api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    | Immutable object implementing an Interval, a bounded slice-like interval. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Interval.closed`](api/pandas.Interval.closed.html#pandas.Interval.closed
    "pandas.Interval.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_left`](api/pandas.Interval.closed_left.html#pandas.Interval.closed_left
    "pandas.Interval.closed_left") | Check if the interval is closed on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_right`](api/pandas.Interval.closed_right.html#pandas.Interval.closed_right
    "pandas.Interval.closed_right") | Check if the interval is closed on the right
    side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.is_empty`](api/pandas.Interval.is_empty.html#pandas.Interval.is_empty
    "pandas.Interval.is_empty") | Indicates if an interval is empty, meaning it contains
    no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.left`](api/pandas.Interval.left.html#pandas.Interval.left "pandas.Interval.left")
    | Left bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.length`](api/pandas.Interval.length.html#pandas.Interval.length
    "pandas.Interval.length") | Return the length of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.mid`](api/pandas.Interval.mid.html#pandas.Interval.mid "pandas.Interval.mid")
    | Return the midpoint of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_left`](api/pandas.Interval.open_left.html#pandas.Interval.open_left
    "pandas.Interval.open_left") | Check if the interval is open on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_right`](api/pandas.Interval.open_right.html#pandas.Interval.open_right
    "pandas.Interval.open_right") | Check if the interval is open on the right side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.overlaps`](api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps")(other) | Check whether two Interval objects overlap.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.right`](api/pandas.Interval.right.html#pandas.Interval.right "pandas.Interval.right")
    | Right bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: A collection of intervals may be stored in an [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray")(data[, closed, dtype, ...]) | Pandas array for
    interval data that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype "pandas.IntervalDtype")([subtype, closed])
    | An ExtensionDtype for Interval data. |  ### Nullable integer'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") cannot natively represent integer-data with missing values.
    pandas provides this through [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray").'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray")(values, mask[, copy]) | Array of integer (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")()
    | An ExtensionDtype for int8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")()
    | An ExtensionDtype for int16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")()
    | An ExtensionDtype for int32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")()
    | An ExtensionDtype for int64 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype "pandas.UInt8Dtype")()
    | An ExtensionDtype for uint8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype "pandas.UInt16Dtype")()
    | An ExtensionDtype for uint16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype "pandas.UInt32Dtype")()
    | An ExtensionDtype for uint32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype "pandas.UInt64Dtype")()
    | An ExtensionDtype for uint64 integer data. |  ### Nullable float'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.FloatingArray`](api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray")(values, mask[, copy]) | Array of floating (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype "pandas.Float32Dtype")()
    | An ExtensionDtype for float32 data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype "pandas.Float64Dtype")()
    | An ExtensionDtype for float64 data. |  ### Categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: pandas defines a custom data type for representing data that can take only a
    limited, fixed set of values. The dtype of a [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") can be described by a [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype")([categories, ordered]) | Type for categorical data
    with the categories and orderedness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.categories`](api/pandas.CategoricalDtype.categories.html#pandas.CategoricalDtype.categories
    "pandas.CategoricalDtype.categories") | An `Index` containing the unique categories
    allowed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.ordered`](api/pandas.CategoricalDtype.ordered.html#pandas.CategoricalDtype.ordered
    "pandas.CategoricalDtype.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: Categorical data can be stored in a [`pandas.Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")(values[, categories, ordered, ...])
    | Represent a categorical variable in classic R / S-plus fashion. |'
  prefs: []
  type: TYPE_TB
- en: 'The alternative [`Categorical.from_codes()`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") constructor can be used when you have the categories
    and integer codes already:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.from_codes`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes")(codes[, categories, ...]) | Make a Categorical
    type from codes and categories or dtype. |'
  prefs: []
  type: TYPE_TB
- en: The dtype information is available on the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.dtype`](api/pandas.Categorical.dtype.html#pandas.Categorical.dtype
    "pandas.Categorical.dtype") | The `CategoricalDtype` for this instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.categories`](api/pandas.Categorical.categories.html#pandas.Categorical.categories
    "pandas.Categorical.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.ordered`](api/pandas.Categorical.ordered.html#pandas.Categorical.ordered
    "pandas.Categorical.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.codes`](api/pandas.Categorical.codes.html#pandas.Categorical.codes
    "pandas.Categorical.codes") | The category codes of this categorical index. |'
  prefs: []
  type: TYPE_TB
- en: '`np.asarray(categorical)` works by implementing the array interface. Be aware,
    that this converts the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") back to a NumPy array, so categories and order information
    is not preserved!'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.__array__`](api/pandas.Categorical.__array__.html#pandas.Categorical.__array__
    "pandas.Categorical.__array__")([dtype, copy]) | The numpy array interface. |'
  prefs: []
  type: TYPE_TB
- en: A [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")
    can be stored in a [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    To create a Series of dtype `category`, use `cat = s.astype(dtype)` or `Series(...,
    dtype=dtype)` where `dtype` is either
  prefs: []
  type: TYPE_NORMAL
- en: the string `'category'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an instance of [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series") is
    of dtype [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype"), `Series.cat` can be used to change the categorical
    data. See [Categorical accessor](series.html#api-series-cat) for more.  ### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Data where a single value is repeated many times (e.g. `0` or `NaN`) may be
    stored efficiently as a [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")(data[, sparse_index, ...]) | An ExtensionArray for
    storing sparse data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SparseDtype`](api/pandas.SparseDtype.html#pandas.SparseDtype "pandas.SparseDtype")([dtype, fill_value])
    | Dtype for data stored in `SparseArray`. |'
  prefs: []
  type: TYPE_TB
- en: 'The `Series.sparse` accessor may be used to access sparse-specific attributes
    and methods if the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    contains sparse values. See [Sparse accessor](series.html#api-series-sparse) and
    [the user guide](../user_guide/sparse.html#sparse) for more.  ### Strings'
  prefs: []
  type: TYPE_NORMAL
- en: When working with text data, where each valid element is a string or missing,
    we recommend using [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") (with the alias `"string"`).
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")(values[, copy]) | Extension array for string data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`arrays.ArrowStringArray`](api/pandas.arrays.ArrowStringArray.html#pandas.arrays.ArrowStringArray
    "pandas.arrays.ArrowStringArray")(values) | Extension array for string data in
    a `pyarrow.ChunkedArray`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype "pandas.StringDtype")([storage])
    | Extension dtype for string data. |'
  prefs: []
  type: TYPE_TB
- en: 'The `Series.str` accessor is available for [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by a [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray"). See [String handling](series.html#api-series-str)
    for more.  ### Nullable Boolean'
  prefs: []
  type: TYPE_NORMAL
- en: The boolean dtype (with the alias `"boolean"`) provides support for storing
    boolean data (`True`, `False`) with missing values, which is not possible with
    a bool [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.BooleanArray`](api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray")(values, mask[, copy]) | Array of boolean (True/False)
    data with missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype "pandas.BooleanDtype")()
    | Extension dtype for boolean data. |'
  prefs: []
  type: TYPE_TB
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`api.types.union_categoricals`](api/pandas.api.types.union_categoricals.html#pandas.api.types.union_categoricals
    "pandas.api.types.union_categoricals")(to_union[, ...]) | Combine list-like of
    Categorical-like, unioning categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.infer_dtype`](api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype")(value[, skipna]) | Return a string label of the
    type of a scalar or list-like of values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.pandas_dtype`](api/pandas.api.types.pandas_dtype.html#pandas.api.types.pandas_dtype
    "pandas.api.types.pandas_dtype")(dtype) | Convert input into a pandas only dtype
    object or a numpy dtype object. |'
  prefs: []
  type: TYPE_TB
- en: Data type introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_any_real_numeric_dtype`](api/pandas.api.types.is_any_real_numeric_dtype.html#pandas.api.types.is_any_real_numeric_dtype
    "pandas.api.types.is_any_real_numeric_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a real number dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_bool_dtype`](api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype")(arr_or_dtype) | Check whether the provided array
    or dtype is of a boolean dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_categorical_dtype`](api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Categorical dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex_dtype`](api/pandas.api.types.is_complex_dtype.html#pandas.api.types.is_complex_dtype
    "pandas.api.types.is_complex_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a complex dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_any_dtype`](api/pandas.api.types.is_datetime64_any_dtype.html#pandas.api.types.is_datetime64_any_dtype
    "pandas.api.types.is_datetime64_any_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_dtype`](api/pandas.api.types.is_datetime64_dtype.html#pandas.api.types.is_datetime64_dtype
    "pandas.api.types.is_datetime64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_ns_dtype`](api/pandas.api.types.is_datetime64_ns_dtype.html#pandas.api.types.is_datetime64_ns_dtype
    "pandas.api.types.is_datetime64_ns_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the datetime64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64tz_dtype`](api/pandas.api.types.is_datetime64tz_dtype.html#pandas.api.types.is_datetime64tz_dtype
    "pandas.api.types.is_datetime64tz_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of a DatetimeTZDtype dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_extension_array_dtype`](api/pandas.api.types.is_extension_array_dtype.html#pandas.api.types.is_extension_array_dtype
    "pandas.api.types.is_extension_array_dtype")(arr_or_dtype) | Check if an object
    is a pandas extension array type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float_dtype`](api/pandas.api.types.is_float_dtype.html#pandas.api.types.is_float_dtype
    "pandas.api.types.is_float_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a float dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_int64_dtype`](api/pandas.api.types.is_int64_dtype.html#pandas.api.types.is_int64_dtype
    "pandas.api.types.is_int64_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    the provided array or dtype is of the int64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer_dtype`](api/pandas.api.types.is_integer_dtype.html#pandas.api.types.is_integer_dtype
    "pandas.api.types.is_integer_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of an integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval_dtype`](api/pandas.api.types.is_interval_dtype.html#pandas.api.types.is_interval_dtype
    "pandas.api.types.is_interval_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Interval dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_numeric_dtype`](api/pandas.api.types.is_numeric_dtype.html#pandas.api.types.is_numeric_dtype
    "pandas.api.types.is_numeric_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a numeric dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_object_dtype`](api/pandas.api.types.is_object_dtype.html#pandas.api.types.is_object_dtype
    "pandas.api.types.is_object_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the object dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_period_dtype`](api/pandas.api.types.is_period_dtype.html#pandas.api.types.is_period_dtype
    "pandas.api.types.is_period_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Period dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_signed_integer_dtype`](api/pandas.api.types.is_signed_integer_dtype.html#pandas.api.types.is_signed_integer_dtype
    "pandas.api.types.is_signed_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a signed integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_string_dtype`](api/pandas.api.types.is_string_dtype.html#pandas.api.types.is_string_dtype
    "pandas.api.types.is_string_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the string dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_dtype`](api/pandas.api.types.is_timedelta64_dtype.html#pandas.api.types.is_timedelta64_dtype
    "pandas.api.types.is_timedelta64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the timedelta64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_ns_dtype`](api/pandas.api.types.is_timedelta64_ns_dtype.html#pandas.api.types.is_timedelta64_ns_dtype
    "pandas.api.types.is_timedelta64_ns_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the timedelta64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_unsigned_integer_dtype`](api/pandas.api.types.is_unsigned_integer_dtype.html#pandas.api.types.is_unsigned_integer_dtype
    "pandas.api.types.is_unsigned_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of an unsigned integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_sparse`](api/pandas.api.types.is_sparse.html#pandas.api.types.is_sparse
    "pandas.api.types.is_sparse")(arr) | (DEPRECATED) Check whether an array-like
    is a 1-D pandas sparse array. |'
  prefs: []
  type: TYPE_TB
- en: Iterable introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_dict_like`](api/pandas.api.types.is_dict_like.html#pandas.api.types.is_dict_like
    "pandas.api.types.is_dict_like")(obj) | Check if the object is dict-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_file_like`](api/pandas.api.types.is_file_like.html#pandas.api.types.is_file_like
    "pandas.api.types.is_file_like")(obj) | Check if the object is a file-like object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_list_like`](api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like")(obj[, allow_sets]) | Check if the object is list-like.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_named_tuple`](api/pandas.api.types.is_named_tuple.html#pandas.api.types.is_named_tuple
    "pandas.api.types.is_named_tuple")(obj) | Check if the object is a named tuple.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_iterator`](api/pandas.api.types.is_iterator.html#pandas.api.types.is_iterator
    "pandas.api.types.is_iterator")(obj) | Check if the object is an iterator. |'
  prefs: []
  type: TYPE_TB
- en: Scalar introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_bool`](api/pandas.api.types.is_bool.html#pandas.api.types.is_bool
    "pandas.api.types.is_bool")(obj) | Return True if given object is boolean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex`](api/pandas.api.types.is_complex.html#pandas.api.types.is_complex
    "pandas.api.types.is_complex")(obj) | Return True if given object is complex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float`](api/pandas.api.types.is_float.html#pandas.api.types.is_float
    "pandas.api.types.is_float")(obj) | Return True if given object is float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_hashable`](api/pandas.api.types.is_hashable.html#pandas.api.types.is_hashable
    "pandas.api.types.is_hashable")(obj) | Return True if hash(obj) will succeed,
    False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer`](api/pandas.api.types.is_integer.html#pandas.api.types.is_integer
    "pandas.api.types.is_integer")(obj) | Return True if given object is integer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval`](api/pandas.api.types.is_interval.html#pandas.api.types.is_interval
    "pandas.api.types.is_interval")(obj) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_number`](api/pandas.api.types.is_number.html#pandas.api.types.is_number
    "pandas.api.types.is_number")(obj) | Check if the object is a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re`](api/pandas.api.types.is_re.html#pandas.api.types.is_re
    "pandas.api.types.is_re")(obj) | Check if the object is a regex pattern instance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re_compilable`](api/pandas.api.types.is_re_compilable.html#pandas.api.types.is_re_compilable
    "pandas.api.types.is_re_compilable")(obj) | Check if the object can be compiled
    into a regex pattern instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_scalar`](api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar")(val) | Return True if given object is scalar. |'
  prefs: []
  type: TYPE_TB
- en: Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For most data types, pandas uses NumPy arrays as the concrete objects contained
    with a [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index"), [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series"), or [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: For some data types, pandas extends NumPy’s type system. String aliases for
    these types can be found at [dtypes](../user_guide/basics.html#basics-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: '| Kind of Data | pandas Data Type | Scalar | Array |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| TZ-aware datetime | [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [Datetimes](#api-arrays-datetime) |'
  prefs: []
  type: TYPE_TB
- en: '| Timedeltas | (none) | [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") | [Timedeltas](#api-arrays-timedelta) |'
  prefs: []
  type: TYPE_TB
- en: '| Period (time spans) | [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype") | [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    | [Periods](#api-arrays-period) |'
  prefs: []
  type: TYPE_TB
- en: '| Intervals | [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype
    "pandas.IntervalDtype") | [`Interval`](api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") | [Intervals](#api-arrays-interval) |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Integer | [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype"), … | (none) | [Nullable integer](#api-arrays-integer-na)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Float | [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype"), … | (none) | [Nullable float](#api-arrays-float-na) |'
  prefs: []
  type: TYPE_TB
- en: '| Categorical | [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) | [Categoricals](#api-arrays-categorical)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Sparse | [`SparseDtype`](api/pandas.SparseDtype.html#pandas.SparseDtype "pandas.SparseDtype")
    | (none) | [Sparse](#api-arrays-sparse) |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") | [Strings](#api-arrays-string) |'
  prefs: []
  type: TYPE_TB
- en: '| Nullable Boolean | [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") | [Nullable Boolean](#api-arrays-bool) |'
  prefs: []
  type: TYPE_TB
- en: '| PyArrow | [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")
    | Python Scalars or [`NA`](api/pandas.NA.html#pandas.NA "pandas.NA") | [PyArrow](#api-arrays-arrow)
    |'
  prefs: []
  type: TYPE_TB
- en: pandas and third-party libraries can extend NumPy’s type system (see [Extension
    types](../development/extending.html#extending-extension-types)). The top-level
    [`array()`](api/pandas.array.html#pandas.array "pandas.array") method can be used
    to create a new array, which may be stored in a [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series"), [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index"),
    or as a column in a [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`array`](api/pandas.array.html#pandas.array "pandas.array")(data[, dtype, copy])
    | Create an array. |'
  prefs: []
  type: TYPE_TB
- en: '### PyArrow'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This feature is experimental, and the API can change in a future release without
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: The [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is backed by a [`pyarrow.ChunkedArray`](https://arrow.apache.org/docs/python/generated/pyarrow.ChunkedArray.html#pyarrow.ChunkedArray
    "(in Apache Arrow v15.0.2)") with a [`pyarrow.DataType`](https://arrow.apache.org/docs/python/generated/pyarrow.DataType.html#pyarrow.DataType
    "(in Apache Arrow v15.0.2)") instead of a NumPy array and data type. The `.dtype`
    of a [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is an [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '[Pyarrow](https://arrow.apache.org/docs/python/index.html) provides similar
    array and [data type](https://arrow.apache.org/docs/python/api/datatypes.html)
    support as NumPy including first-class nullability support for all data types,
    immutability and more.'
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows the equivalent pyarrow-backed (`pa`), pandas extension,
    and numpy (`np`) types that are recognized by pandas. Pyarrow-backed types below
    need to be passed into [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") to be recognized by pandas e.g. `pd.ArrowDtype(pa.bool_())`
  prefs: []
  type: TYPE_NORMAL
- en: '| PyArrow type | pandas extension type | NumPy type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.bool_()`](https://arrow.apache.org/docs/python/generated/pyarrow.bool_.html#pyarrow.bool_
    "(in Apache Arrow v15.0.2)") | [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | `np.bool_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int8()`](https://arrow.apache.org/docs/python/generated/pyarrow.int8.html#pyarrow.int8
    "(in Apache Arrow v15.0.2)") | [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype
    "pandas.Int8Dtype") | `np.int8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int16()`](https://arrow.apache.org/docs/python/generated/pyarrow.int16.html#pyarrow.int16
    "(in Apache Arrow v15.0.2)") | [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype
    "pandas.Int16Dtype") | `np.int16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int32()`](https://arrow.apache.org/docs/python/generated/pyarrow.int32.html#pyarrow.int32
    "(in Apache Arrow v15.0.2)") | [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype
    "pandas.Int32Dtype") | `np.int32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int64()`](https://arrow.apache.org/docs/python/generated/pyarrow.int64.html#pyarrow.int64
    "(in Apache Arrow v15.0.2)") | [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") | `np.int64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint8()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint8.html#pyarrow.uint8
    "(in Apache Arrow v15.0.2)") | [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype
    "pandas.UInt8Dtype") | `np.uint8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint16()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint16.html#pyarrow.uint16
    "(in Apache Arrow v15.0.2)") | [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype
    "pandas.UInt16Dtype") | `np.uint16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint32()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint32.html#pyarrow.uint32
    "(in Apache Arrow v15.0.2)") | [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype
    "pandas.UInt32Dtype") | `np.uint32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint64()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint64.html#pyarrow.uint64
    "(in Apache Arrow v15.0.2)") | [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype
    "pandas.UInt64Dtype") | `np.uint64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float32()`](https://arrow.apache.org/docs/python/generated/pyarrow.float32.html#pyarrow.float32
    "(in Apache Arrow v15.0.2)") | [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype
    "pandas.Float32Dtype") | `np.float32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float64()`](https://arrow.apache.org/docs/python/generated/pyarrow.float64.html#pyarrow.float64
    "(in Apache Arrow v15.0.2)") | [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype") | `np.float64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time32()`](https://arrow.apache.org/docs/python/generated/pyarrow.time32.html#pyarrow.time32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time64()`](https://arrow.apache.org/docs/python/generated/pyarrow.time64.html#pyarrow.time64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.timestamp()`](https://arrow.apache.org/docs/python/generated/pyarrow.timestamp.html#pyarrow.timestamp
    "(in Apache Arrow v15.0.2)") | [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | `np.datetime64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date32()`](https://arrow.apache.org/docs/python/generated/pyarrow.date32.html#pyarrow.date32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date64()`](https://arrow.apache.org/docs/python/generated/pyarrow.date64.html#pyarrow.date64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.duration()`](https://arrow.apache.org/docs/python/generated/pyarrow.duration.html#pyarrow.duration
    "(in Apache Arrow v15.0.2)") | (none) | `np.timedelta64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.binary()`](https://arrow.apache.org/docs/python/generated/pyarrow.binary.html#pyarrow.binary
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.string()`](https://arrow.apache.org/docs/python/generated/pyarrow.string.html#pyarrow.string
    "(in Apache Arrow v15.0.2)") | [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | `np.str_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.decimal128()`](https://arrow.apache.org/docs/python/generated/pyarrow.decimal128.html#pyarrow.decimal128
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.list_()`](https://arrow.apache.org/docs/python/generated/pyarrow.list_.html#pyarrow.list_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.map_()`](https://arrow.apache.org/docs/python/generated/pyarrow.map_.html#pyarrow.map_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.dictionary()`](https://arrow.apache.org/docs/python/generated/pyarrow.dictionary.html#pyarrow.dictionary
    "(in Apache Arrow v15.0.2)") | [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Pyarrow-backed string support is provided by both `pd.StringDtype("pyarrow")`
    and `pd.ArrowDtype(pa.string())`. `pd.StringDtype("pyarrow")` is described below
    in the [string section](#api-arrays-string) and will be returned if the string
    alias `"string[pyarrow]"` is specified. `pd.ArrowDtype(pa.string())` generally
    has better interoperability with [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") of different types.
  prefs: []
  type: TYPE_NORMAL
- en: While individual values in an [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") are stored as a PyArrow objects, scalars
    are **returned** as Python scalars corresponding to the data type, e.g. a PyArrow
    int64 will be returned as Python int, or [`NA`](api/pandas.NA.html#pandas.NA "pandas.NA")
    for missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray")(values) | Pandas ExtensionArray backed by
    a PyArrow ChunkedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")(pyarrow_dtype)
    | An ExtensionDtype for PyArrow data types. |'
  prefs: []
  type: TYPE_TB
- en: 'For more information, please see the [PyArrow user guide](../user_guide/pyarrow.html#pyarrow)  ###
    Datetimes'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy cannot natively represent timezone-aware datetimes. pandas supports this
    with the [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") extension array, which can hold timezone-naive
    or timezone-aware values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp"),
    a subclass of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"), is pandas’ scalar type for timezone-naive or timezone-aware
    datetime data. [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the missing
    value for datetime data.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")([ts_input, year, month, day, ...])
    | Pandas replacement for python datetime.datetime object. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.asm8`](api/pandas.Timestamp.asm8.html#pandas.Timestamp.asm8 "pandas.Timestamp.asm8")
    | Return numpy datetime64 format in nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day`](api/pandas.Timestamp.day.html#pandas.Timestamp.day "pandas.Timestamp.day")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofweek`](api/pandas.Timestamp.dayofweek.html#pandas.Timestamp.dayofweek
    "pandas.Timestamp.dayofweek") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_week`](api/pandas.Timestamp.day_of_week.html#pandas.Timestamp.day_of_week
    "pandas.Timestamp.day_of_week") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofyear`](api/pandas.Timestamp.dayofyear.html#pandas.Timestamp.dayofyear
    "pandas.Timestamp.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_year`](api/pandas.Timestamp.day_of_year.html#pandas.Timestamp.day_of_year
    "pandas.Timestamp.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.days_in_month`](api/pandas.Timestamp.days_in_month.html#pandas.Timestamp.days_in_month
    "pandas.Timestamp.days_in_month") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.daysinmonth`](api/pandas.Timestamp.daysinmonth.html#pandas.Timestamp.daysinmonth
    "pandas.Timestamp.daysinmonth") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fold`](api/pandas.Timestamp.fold.html#pandas.Timestamp.fold "pandas.Timestamp.fold")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.hour`](api/pandas.Timestamp.hour.html#pandas.Timestamp.hour "pandas.Timestamp.hour")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_leap_year`](api/pandas.Timestamp.is_leap_year.html#pandas.Timestamp.is_leap_year
    "pandas.Timestamp.is_leap_year") | Return True if year is a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_end`](api/pandas.Timestamp.is_month_end.html#pandas.Timestamp.is_month_end
    "pandas.Timestamp.is_month_end") | Check if the date is the last day of the month.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_start`](api/pandas.Timestamp.is_month_start.html#pandas.Timestamp.is_month_start
    "pandas.Timestamp.is_month_start") | Check if the date is the first day of the
    month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_end`](api/pandas.Timestamp.is_quarter_end.html#pandas.Timestamp.is_quarter_end
    "pandas.Timestamp.is_quarter_end") | Check if date is last day of the quarter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_start`](api/pandas.Timestamp.is_quarter_start.html#pandas.Timestamp.is_quarter_start
    "pandas.Timestamp.is_quarter_start") | Check if the date is the first day of the
    quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_end`](api/pandas.Timestamp.is_year_end.html#pandas.Timestamp.is_year_end
    "pandas.Timestamp.is_year_end") | Return True if date is last day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_start`](api/pandas.Timestamp.is_year_start.html#pandas.Timestamp.is_year_start
    "pandas.Timestamp.is_year_start") | Return True if date is first day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.max`](api/pandas.Timestamp.max.html#pandas.Timestamp.max "pandas.Timestamp.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.microsecond`](api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.min`](api/pandas.Timestamp.min.html#pandas.Timestamp.min "pandas.Timestamp.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.minute`](api/pandas.Timestamp.minute.html#pandas.Timestamp.minute
    "pandas.Timestamp.minute") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month`](api/pandas.Timestamp.month.html#pandas.Timestamp.month
    "pandas.Timestamp.month") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.nanosecond`](api/pandas.Timestamp.nanosecond.html#pandas.Timestamp.nanosecond
    "pandas.Timestamp.nanosecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.quarter`](api/pandas.Timestamp.quarter.html#pandas.Timestamp.quarter
    "pandas.Timestamp.quarter") | Return the quarter of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.resolution`](api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.second`](api/pandas.Timestamp.second.html#pandas.Timestamp.second
    "pandas.Timestamp.second") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz`](api/pandas.Timestamp.tz.html#pandas.Timestamp.tz "pandas.Timestamp.tz")
    | Alias for tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzinfo`](api/pandas.Timestamp.tzinfo.html#pandas.Timestamp.tzinfo
    "pandas.Timestamp.tzinfo") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.unit`](api/pandas.Timestamp.unit.html#pandas.Timestamp.unit "pandas.Timestamp.unit")
    | The abbreviation associated with self._creso. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.value`](api/pandas.Timestamp.value.html#pandas.Timestamp.value
    "pandas.Timestamp.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.week`](api/pandas.Timestamp.week.html#pandas.Timestamp.week "pandas.Timestamp.week")
    | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekofyear`](api/pandas.Timestamp.weekofyear.html#pandas.Timestamp.weekofyear
    "pandas.Timestamp.weekofyear") | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.year`](api/pandas.Timestamp.year.html#pandas.Timestamp.year "pandas.Timestamp.year")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.as_unit`](api/pandas.Timestamp.as_unit.html#pandas.Timestamp.as_unit
    "pandas.Timestamp.as_unit")(unit[, round_ok]) | Convert the underlying int64 representaton
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.astimezone`](api/pandas.Timestamp.astimezone.html#pandas.Timestamp.astimezone
    "pandas.Timestamp.astimezone")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ceil`](api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil "pandas.Timestamp.ceil")(freq[, ambiguous, nonexistent])
    | Return a new Timestamp ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.combine`](api/pandas.Timestamp.combine.html#pandas.Timestamp.combine
    "pandas.Timestamp.combine")(date, time) | Combine date, time into datetime with
    same date and time fields. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ctime`](api/pandas.Timestamp.ctime.html#pandas.Timestamp.ctime
    "pandas.Timestamp.ctime")() | Return ctime() style string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.date`](api/pandas.Timestamp.date.html#pandas.Timestamp.date "pandas.Timestamp.date")()
    | Return date object with same year, month and day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_name`](api/pandas.Timestamp.day_name.html#pandas.Timestamp.day_name
    "pandas.Timestamp.day_name")([locale]) | Return the day name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dst`](api/pandas.Timestamp.dst.html#pandas.Timestamp.dst "pandas.Timestamp.dst")()
    | Return the daylight saving time (DST) adjustment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.floor`](api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")(freq[, ambiguous, nonexistent]) | Return a new Timestamp
    floored to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromordinal`](api/pandas.Timestamp.fromordinal.html#pandas.Timestamp.fromordinal
    "pandas.Timestamp.fromordinal")(ordinal[, tz]) | Construct a timestamp from a
    a proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromtimestamp`](api/pandas.Timestamp.fromtimestamp.html#pandas.Timestamp.fromtimestamp
    "pandas.Timestamp.fromtimestamp")(ts) | Transform timestamp[, tz] to tz''s local
    time from POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isocalendar`](api/pandas.Timestamp.isocalendar.html#pandas.Timestamp.isocalendar
    "pandas.Timestamp.isocalendar")() | Return a named tuple containing ISO year,
    week number, and weekday. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoformat`](api/pandas.Timestamp.isoformat.html#pandas.Timestamp.isoformat
    "pandas.Timestamp.isoformat")([sep, timespec]) | Return the time formatted according
    to ISO 8601. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoweekday`](api/pandas.Timestamp.isoweekday.html#pandas.Timestamp.isoweekday
    "pandas.Timestamp.isoweekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month_name`](api/pandas.Timestamp.month_name.html#pandas.Timestamp.month_name
    "pandas.Timestamp.month_name")([locale]) | Return the month name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.normalize`](api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize")() | Normalize Timestamp to midnight, preserving
    tz information. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.now`](api/pandas.Timestamp.now.html#pandas.Timestamp.now "pandas.Timestamp.now")([tz])
    | Return new Timestamp object representing current time local to tz. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.replace`](api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace")([year, month, day, hour, ...]) | Implements datetime.replace,
    handles nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.round`](api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round")(freq[, ambiguous, nonexistent]) | Round the Timestamp
    to the specified resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strftime`](api/pandas.Timestamp.strftime.html#pandas.Timestamp.strftime
    "pandas.Timestamp.strftime")(format) | Return a formatted string of the Timestamp.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strptime`](api/pandas.Timestamp.strptime.html#pandas.Timestamp.strptime
    "pandas.Timestamp.strptime")(string, format) | Function is not implemented. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.time`](api/pandas.Timestamp.time.html#pandas.Timestamp.time "pandas.Timestamp.time")()
    | Return time object with same time but with tzinfo=None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timestamp`](api/pandas.Timestamp.timestamp.html#pandas.Timestamp.timestamp
    "pandas.Timestamp.timestamp")() | Return POSIX timestamp as float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetuple`](api/pandas.Timestamp.timetuple.html#pandas.Timestamp.timetuple
    "pandas.Timestamp.timetuple")() | Return time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetz`](api/pandas.Timestamp.timetz.html#pandas.Timestamp.timetz
    "pandas.Timestamp.timetz")() | Return time object with same time and tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_datetime64`](api/pandas.Timestamp.to_datetime64.html#pandas.Timestamp.to_datetime64
    "pandas.Timestamp.to_datetime64")() | Return a numpy.datetime64 object with same
    precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_numpy`](api/pandas.Timestamp.to_numpy.html#pandas.Timestamp.to_numpy
    "pandas.Timestamp.to_numpy")([dtype, copy]) | Convert the Timestamp to a NumPy
    datetime64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_julian_date`](api/pandas.Timestamp.to_julian_date.html#pandas.Timestamp.to_julian_date
    "pandas.Timestamp.to_julian_date")() | Convert TimeStamp to a Julian Date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_period`](api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period")([freq]) | Return an period of which this timestamp
    is an observation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_pydatetime`](api/pandas.Timestamp.to_pydatetime.html#pandas.Timestamp.to_pydatetime
    "pandas.Timestamp.to_pydatetime")([warn]) | Convert a Timestamp object to a native
    Python datetime object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.today`](api/pandas.Timestamp.today.html#pandas.Timestamp.today
    "pandas.Timestamp.today")([tz]) | Return the current time in the local timezone.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.toordinal`](api/pandas.Timestamp.toordinal.html#pandas.Timestamp.toordinal
    "pandas.Timestamp.toordinal")() | Return proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_convert`](api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_localize`](api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")(tz[, ambiguous, ...]) | Localize the Timestamp
    to a timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzname`](api/pandas.Timestamp.tzname.html#pandas.Timestamp.tzname
    "pandas.Timestamp.tzname")() | Return time zone name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcfromtimestamp`](api/pandas.Timestamp.utcfromtimestamp.html#pandas.Timestamp.utcfromtimestamp
    "pandas.Timestamp.utcfromtimestamp")(ts) | Construct a timezone-aware UTC datetime
    from a POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcnow`](api/pandas.Timestamp.utcnow.html#pandas.Timestamp.utcnow
    "pandas.Timestamp.utcnow")() | Return a new Timestamp representing UTC day and
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcoffset`](api/pandas.Timestamp.utcoffset.html#pandas.Timestamp.utcoffset
    "pandas.Timestamp.utcoffset")() | Return utc offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utctimetuple`](api/pandas.Timestamp.utctimetuple.html#pandas.Timestamp.utctimetuple
    "pandas.Timestamp.utctimetuple")() | Return UTC time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekday`](api/pandas.Timestamp.weekday.html#pandas.Timestamp.weekday
    "pandas.Timestamp.weekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: A collection of timestamps may be stored in a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray"). For timezone-aware data, the `.dtype` of a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") is a [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype"). For timezone-naive data, `np.dtype("datetime64[ns]")`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: If the data are timezone-aware, then every value in the array must have the
    same timezone.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for tz-naive or tz-aware datetime data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype")([unit, tz]) | An ExtensionDtype for timezone-aware datetime
    data. |  ### Timedeltas'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy can natively represent timedeltas. pandas provides [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") for symmetry with [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"). [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the
    missing value for timedelta data.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")([value, unit])
    | Represents a duration, the difference between two dates or times. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.asm8`](api/pandas.Timedelta.asm8.html#pandas.Timedelta.asm8 "pandas.Timedelta.asm8")
    | Return a numpy timedelta64 array scalar view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.components`](api/pandas.Timedelta.components.html#pandas.Timedelta.components
    "pandas.Timedelta.components") | Return a components namedtuple-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.days`](api/pandas.Timedelta.days.html#pandas.Timedelta.days "pandas.Timedelta.days")
    | Returns the days of the timedelta. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.max`](api/pandas.Timedelta.max.html#pandas.Timedelta.max "pandas.Timedelta.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.microseconds`](api/pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds
    "pandas.Timedelta.microseconds") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.min`](api/pandas.Timedelta.min.html#pandas.Timedelta.min "pandas.Timedelta.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.nanoseconds`](api/pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds
    "pandas.Timedelta.nanoseconds") | Return the number of nanoseconds (n), where
    0 <= n < 1 microsecond. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.resolution`](api/pandas.Timedelta.resolution.html#pandas.Timedelta.resolution
    "pandas.Timedelta.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.seconds`](api/pandas.Timedelta.seconds.html#pandas.Timedelta.seconds
    "pandas.Timedelta.seconds") | Return the total hours, minutes, and seconds of
    the timedelta as seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.unit`](api/pandas.Timedelta.unit.html#pandas.Timedelta.unit "pandas.Timedelta.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.value`](api/pandas.Timedelta.value.html#pandas.Timedelta.value
    "pandas.Timedelta.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.view`](api/pandas.Timedelta.view.html#pandas.Timedelta.view "pandas.Timedelta.view")(dtype)
    | Array view compatibility. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.as_unit`](api/pandas.Timedelta.as_unit.html#pandas.Timedelta.as_unit
    "pandas.Timedelta.as_unit")(unit[, round_ok]) | Convert the underlying int64 representation
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.ceil`](api/pandas.Timedelta.ceil.html#pandas.Timedelta.ceil "pandas.Timedelta.ceil")(freq)
    | Return a new Timedelta ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.floor`](api/pandas.Timedelta.floor.html#pandas.Timedelta.floor
    "pandas.Timedelta.floor")(freq) | Return a new Timedelta floored to this resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.isoformat`](api/pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat
    "pandas.Timedelta.isoformat")() | Format the Timedelta as ISO 8601 Duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.round`](api/pandas.Timedelta.round.html#pandas.Timedelta.round
    "pandas.Timedelta.round")(freq) | Round the Timedelta to the specified resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_pytimedelta`](api/pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta
    "pandas.Timedelta.to_pytimedelta")() | Convert a pandas Timedelta object into
    a python `datetime.timedelta` object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_timedelta64`](api/pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64
    "pandas.Timedelta.to_timedelta64")() | Return a numpy.timedelta64 object with
    ''ns'' precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_numpy`](api/pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy
    "pandas.Timedelta.to_numpy")([dtype, copy]) | Convert the Timedelta to a NumPy
    timedelta64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.total_seconds`](api/pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds
    "pandas.Timedelta.total_seconds")() | Total seconds in the duration. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")
    may be stored in a `TimedeltaArray`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.TimedeltaArray`](api/pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray")(values[, dtype, freq, ...]) | Pandas ExtensionArray
    for timedelta data. |  ### Periods'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents spans of times as [`Period`](api/pandas.Period.html#pandas.Period
    "pandas.Period") objects.
  prefs: []
  type: TYPE_NORMAL
- en: Period
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")([value, freq, ordinal, year, month, ...])
    | Represents a period of time. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.day`](api/pandas.Period.day.html#pandas.Period.day "pandas.Period.day")
    | Get day of the month that a Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofweek`](api/pandas.Period.dayofweek.html#pandas.Period.dayofweek
    "pandas.Period.dayofweek") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_week`](api/pandas.Period.day_of_week.html#pandas.Period.day_of_week
    "pandas.Period.day_of_week") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofyear`](api/pandas.Period.dayofyear.html#pandas.Period.dayofyear
    "pandas.Period.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_year`](api/pandas.Period.day_of_year.html#pandas.Period.day_of_year
    "pandas.Period.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.days_in_month`](api/pandas.Period.days_in_month.html#pandas.Period.days_in_month
    "pandas.Period.days_in_month") | Get the total number of days in the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.daysinmonth`](api/pandas.Period.daysinmonth.html#pandas.Period.daysinmonth
    "pandas.Period.daysinmonth") | Get the total number of days of the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.end_time`](api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freq`](api/pandas.Period.freq.html#pandas.Period.freq "pandas.Period.freq")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freqstr`](api/pandas.Period.freqstr.html#pandas.Period.freqstr "pandas.Period.freqstr")
    | Return a string representation of the frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.hour`](api/pandas.Period.hour.html#pandas.Period.hour "pandas.Period.hour")
    | Get the hour of the day component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.is_leap_year`](api/pandas.Period.is_leap_year.html#pandas.Period.is_leap_year
    "pandas.Period.is_leap_year") | Return True if the period''s year is in a leap
    year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.minute`](api/pandas.Period.minute.html#pandas.Period.minute "pandas.Period.minute")
    | Get minute of the hour component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.month`](api/pandas.Period.month.html#pandas.Period.month "pandas.Period.month")
    | Return the month this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.ordinal`](api/pandas.Period.ordinal.html#pandas.Period.ordinal "pandas.Period.ordinal")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.quarter`](api/pandas.Period.quarter.html#pandas.Period.quarter "pandas.Period.quarter")
    | Return the quarter this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.qyear`](api/pandas.Period.qyear.html#pandas.Period.qyear "pandas.Period.qyear")
    | Fiscal year the Period lies in according to its starting-quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.second`](api/pandas.Period.second.html#pandas.Period.second "pandas.Period.second")
    | Get the second component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.start_time`](api/pandas.Period.start_time.html#pandas.Period.start_time
    "pandas.Period.start_time") | Get the Timestamp for the start of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.week`](api/pandas.Period.week.html#pandas.Period.week "pandas.Period.week")
    | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekday`](api/pandas.Period.weekday.html#pandas.Period.weekday "pandas.Period.weekday")
    | Day of the week the period lies in, with Monday=0 and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekofyear`](api/pandas.Period.weekofyear.html#pandas.Period.weekofyear
    "pandas.Period.weekofyear") | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.year`](api/pandas.Period.year.html#pandas.Period.year "pandas.Period.year")
    | Return the year this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.asfreq`](api/pandas.Period.asfreq.html#pandas.Period.asfreq "pandas.Period.asfreq")(freq[, how])
    | Convert Period to desired frequency, at the start or end of the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.now`](api/pandas.Period.now.html#pandas.Period.now "pandas.Period.now")(freq)
    | Return the period of now''s date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.strftime`](api/pandas.Period.strftime.html#pandas.Period.strftime
    "pandas.Period.strftime")(fmt) | Returns a formatted string representation of
    the [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.to_timestamp`](api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp")([freq, how]) | Return the Timestamp representation
    of the Period. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    may be stored in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"). Every period in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") must have the same `freq`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for storing Period data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype "pandas.PeriodDtype")(freq)
    | An ExtensionDtype for Period data. |'
  prefs: []
  type: TYPE_TB
- en: '### Intervals'
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary intervals can be represented as [`Interval`](api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Interval`](api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    | Immutable object implementing an Interval, a bounded slice-like interval. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Interval.closed`](api/pandas.Interval.closed.html#pandas.Interval.closed
    "pandas.Interval.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_left`](api/pandas.Interval.closed_left.html#pandas.Interval.closed_left
    "pandas.Interval.closed_left") | Check if the interval is closed on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_right`](api/pandas.Interval.closed_right.html#pandas.Interval.closed_right
    "pandas.Interval.closed_right") | Check if the interval is closed on the right
    side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.is_empty`](api/pandas.Interval.is_empty.html#pandas.Interval.is_empty
    "pandas.Interval.is_empty") | Indicates if an interval is empty, meaning it contains
    no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.left`](api/pandas.Interval.left.html#pandas.Interval.left "pandas.Interval.left")
    | Left bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.length`](api/pandas.Interval.length.html#pandas.Interval.length
    "pandas.Interval.length") | Return the length of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.mid`](api/pandas.Interval.mid.html#pandas.Interval.mid "pandas.Interval.mid")
    | Return the midpoint of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_left`](api/pandas.Interval.open_left.html#pandas.Interval.open_left
    "pandas.Interval.open_left") | Check if the interval is open on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_right`](api/pandas.Interval.open_right.html#pandas.Interval.open_right
    "pandas.Interval.open_right") | Check if the interval is open on the right side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.overlaps`](api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps")(other) | Check whether two Interval objects overlap.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.right`](api/pandas.Interval.right.html#pandas.Interval.right "pandas.Interval.right")
    | Right bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: A collection of intervals may be stored in an [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray")(data[, closed, dtype, ...]) | Pandas array for
    interval data that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype "pandas.IntervalDtype")([subtype, closed])
    | An ExtensionDtype for Interval data. |  ### Nullable integer'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") cannot natively represent integer-data with missing values.
    pandas provides this through [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray").'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray")(values, mask[, copy]) | Array of integer (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")()
    | An ExtensionDtype for int8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")()
    | An ExtensionDtype for int16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")()
    | An ExtensionDtype for int32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")()
    | An ExtensionDtype for int64 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype "pandas.UInt8Dtype")()
    | An ExtensionDtype for uint8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype "pandas.UInt16Dtype")()
    | An ExtensionDtype for uint16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype "pandas.UInt32Dtype")()
    | An ExtensionDtype for uint32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype "pandas.UInt64Dtype")()
    | An ExtensionDtype for uint64 integer data. |  ### Nullable float'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.FloatingArray`](api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray")(values, mask[, copy]) | Array of floating (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype "pandas.Float32Dtype")()
    | An ExtensionDtype for float32 data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype "pandas.Float64Dtype")()
    | An ExtensionDtype for float64 data. |  ### Categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: pandas defines a custom data type for representing data that can take only a
    limited, fixed set of values. The dtype of a [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") can be described by a [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype")([categories, ordered]) | Type for categorical data
    with the categories and orderedness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.categories`](api/pandas.CategoricalDtype.categories.html#pandas.CategoricalDtype.categories
    "pandas.CategoricalDtype.categories") | An `Index` containing the unique categories
    allowed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.ordered`](api/pandas.CategoricalDtype.ordered.html#pandas.CategoricalDtype.ordered
    "pandas.CategoricalDtype.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: Categorical data can be stored in a [`pandas.Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")(values[, categories, ordered, ...])
    | Represent a categorical variable in classic R / S-plus fashion. |'
  prefs: []
  type: TYPE_TB
- en: 'The alternative [`Categorical.from_codes()`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") constructor can be used when you have the categories
    and integer codes already:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.from_codes`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes")(codes[, categories, ...]) | Make a Categorical
    type from codes and categories or dtype. |'
  prefs: []
  type: TYPE_TB
- en: The dtype information is available on the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.dtype`](api/pandas.Categorical.dtype.html#pandas.Categorical.dtype
    "pandas.Categorical.dtype") | The `CategoricalDtype` for this instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.categories`](api/pandas.Categorical.categories.html#pandas.Categorical.categories
    "pandas.Categorical.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.ordered`](api/pandas.Categorical.ordered.html#pandas.Categorical.ordered
    "pandas.Categorical.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.codes`](api/pandas.Categorical.codes.html#pandas.Categorical.codes
    "pandas.Categorical.codes") | The category codes of this categorical index. |'
  prefs: []
  type: TYPE_TB
- en: '`np.asarray(categorical)` works by implementing the array interface. Be aware,
    that this converts the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") back to a NumPy array, so categories and order information
    is not preserved!'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.__array__`](api/pandas.Categorical.__array__.html#pandas.Categorical.__array__
    "pandas.Categorical.__array__")([dtype, copy]) | The numpy array interface. |'
  prefs: []
  type: TYPE_TB
- en: A [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")
    can be stored in a [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    To create a Series of dtype `category`, use `cat = s.astype(dtype)` or `Series(...,
    dtype=dtype)` where `dtype` is either
  prefs: []
  type: TYPE_NORMAL
- en: the string `'category'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an instance of [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series") is
    of dtype [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype"), `Series.cat` can be used to change the categorical
    data. See [Categorical accessor](series.html#api-series-cat) for more.  ### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Data where a single value is repeated many times (e.g. `0` or `NaN`) may be
    stored efficiently as a [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")(data[, sparse_index, ...]) | An ExtensionArray for
    storing sparse data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SparseDtype`](api/pandas.SparseDtype.html#pandas.SparseDtype "pandas.SparseDtype")([dtype, fill_value])
    | Dtype for data stored in `SparseArray`. |'
  prefs: []
  type: TYPE_TB
- en: 'The `Series.sparse` accessor may be used to access sparse-specific attributes
    and methods if the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    contains sparse values. See [Sparse accessor](series.html#api-series-sparse) and
    [the user guide](../user_guide/sparse.html#sparse) for more.  ### Strings'
  prefs: []
  type: TYPE_NORMAL
- en: When working with text data, where each valid element is a string or missing,
    we recommend using [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") (with the alias `"string"`).
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")(values[, copy]) | Extension array for string data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`arrays.ArrowStringArray`](api/pandas.arrays.ArrowStringArray.html#pandas.arrays.ArrowStringArray
    "pandas.arrays.ArrowStringArray")(values) | Extension array for string data in
    a `pyarrow.ChunkedArray`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype "pandas.StringDtype")([storage])
    | Extension dtype for string data. |'
  prefs: []
  type: TYPE_TB
- en: 'The `Series.str` accessor is available for [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by a [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray"). See [String handling](series.html#api-series-str)
    for more.  ### Nullable Boolean'
  prefs: []
  type: TYPE_NORMAL
- en: The boolean dtype (with the alias `"boolean"`) provides support for storing
    boolean data (`True`, `False`) with missing values, which is not possible with
    a bool [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.BooleanArray`](api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray")(values, mask[, copy]) | Array of boolean (True/False)
    data with missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype "pandas.BooleanDtype")()
    | Extension dtype for boolean data. |  ### PyArrow'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This feature is experimental, and the API can change in a future release without
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: The [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is backed by a [`pyarrow.ChunkedArray`](https://arrow.apache.org/docs/python/generated/pyarrow.ChunkedArray.html#pyarrow.ChunkedArray
    "(in Apache Arrow v15.0.2)") with a [`pyarrow.DataType`](https://arrow.apache.org/docs/python/generated/pyarrow.DataType.html#pyarrow.DataType
    "(in Apache Arrow v15.0.2)") instead of a NumPy array and data type. The `.dtype`
    of a [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") is an [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '[Pyarrow](https://arrow.apache.org/docs/python/index.html) provides similar
    array and [data type](https://arrow.apache.org/docs/python/api/datatypes.html)
    support as NumPy including first-class nullability support for all data types,
    immutability and more.'
  prefs: []
  type: TYPE_NORMAL
- en: The table below shows the equivalent pyarrow-backed (`pa`), pandas extension,
    and numpy (`np`) types that are recognized by pandas. Pyarrow-backed types below
    need to be passed into [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") to be recognized by pandas e.g. `pd.ArrowDtype(pa.bool_())`
  prefs: []
  type: TYPE_NORMAL
- en: '| PyArrow type | pandas extension type | NumPy type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.bool_()`](https://arrow.apache.org/docs/python/generated/pyarrow.bool_.html#pyarrow.bool_
    "(in Apache Arrow v15.0.2)") | [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | `np.bool_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int8()`](https://arrow.apache.org/docs/python/generated/pyarrow.int8.html#pyarrow.int8
    "(in Apache Arrow v15.0.2)") | [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype
    "pandas.Int8Dtype") | `np.int8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int16()`](https://arrow.apache.org/docs/python/generated/pyarrow.int16.html#pyarrow.int16
    "(in Apache Arrow v15.0.2)") | [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype
    "pandas.Int16Dtype") | `np.int16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int32()`](https://arrow.apache.org/docs/python/generated/pyarrow.int32.html#pyarrow.int32
    "(in Apache Arrow v15.0.2)") | [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype
    "pandas.Int32Dtype") | `np.int32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.int64()`](https://arrow.apache.org/docs/python/generated/pyarrow.int64.html#pyarrow.int64
    "(in Apache Arrow v15.0.2)") | [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") | `np.int64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint8()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint8.html#pyarrow.uint8
    "(in Apache Arrow v15.0.2)") | [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype
    "pandas.UInt8Dtype") | `np.uint8` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint16()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint16.html#pyarrow.uint16
    "(in Apache Arrow v15.0.2)") | [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype
    "pandas.UInt16Dtype") | `np.uint16` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint32()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint32.html#pyarrow.uint32
    "(in Apache Arrow v15.0.2)") | [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype
    "pandas.UInt32Dtype") | `np.uint32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.uint64()`](https://arrow.apache.org/docs/python/generated/pyarrow.uint64.html#pyarrow.uint64
    "(in Apache Arrow v15.0.2)") | [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype
    "pandas.UInt64Dtype") | `np.uint64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float32()`](https://arrow.apache.org/docs/python/generated/pyarrow.float32.html#pyarrow.float32
    "(in Apache Arrow v15.0.2)") | [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype
    "pandas.Float32Dtype") | `np.float32` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.float64()`](https://arrow.apache.org/docs/python/generated/pyarrow.float64.html#pyarrow.float64
    "(in Apache Arrow v15.0.2)") | [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype") | `np.float64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time32()`](https://arrow.apache.org/docs/python/generated/pyarrow.time32.html#pyarrow.time32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.time64()`](https://arrow.apache.org/docs/python/generated/pyarrow.time64.html#pyarrow.time64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.timestamp()`](https://arrow.apache.org/docs/python/generated/pyarrow.timestamp.html#pyarrow.timestamp
    "(in Apache Arrow v15.0.2)") | [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | `np.datetime64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date32()`](https://arrow.apache.org/docs/python/generated/pyarrow.date32.html#pyarrow.date32
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.date64()`](https://arrow.apache.org/docs/python/generated/pyarrow.date64.html#pyarrow.date64
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.duration()`](https://arrow.apache.org/docs/python/generated/pyarrow.duration.html#pyarrow.duration
    "(in Apache Arrow v15.0.2)") | (none) | `np.timedelta64` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.binary()`](https://arrow.apache.org/docs/python/generated/pyarrow.binary.html#pyarrow.binary
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.string()`](https://arrow.apache.org/docs/python/generated/pyarrow.string.html#pyarrow.string
    "(in Apache Arrow v15.0.2)") | [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | `np.str_` |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.decimal128()`](https://arrow.apache.org/docs/python/generated/pyarrow.decimal128.html#pyarrow.decimal128
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.list_()`](https://arrow.apache.org/docs/python/generated/pyarrow.list_.html#pyarrow.list_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.map_()`](https://arrow.apache.org/docs/python/generated/pyarrow.map_.html#pyarrow.map_
    "(in Apache Arrow v15.0.2)") | (none) | (none) |'
  prefs: []
  type: TYPE_TB
- en: '| [`pyarrow.dictionary()`](https://arrow.apache.org/docs/python/generated/pyarrow.dictionary.html#pyarrow.dictionary
    "(in Apache Arrow v15.0.2)") | [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Pyarrow-backed string support is provided by both `pd.StringDtype("pyarrow")`
    and `pd.ArrowDtype(pa.string())`. `pd.StringDtype("pyarrow")` is described below
    in the [string section](#api-arrays-string) and will be returned if the string
    alias `"string[pyarrow]"` is specified. `pd.ArrowDtype(pa.string())` generally
    has better interoperability with [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") of different types.
  prefs: []
  type: TYPE_NORMAL
- en: While individual values in an [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray") are stored as a PyArrow objects, scalars
    are **returned** as Python scalars corresponding to the data type, e.g. a PyArrow
    int64 will be returned as Python int, or [`NA`](api/pandas.NA.html#pandas.NA "pandas.NA")
    for missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.ArrowExtensionArray`](api/pandas.arrays.ArrowExtensionArray.html#pandas.arrays.ArrowExtensionArray
    "pandas.arrays.ArrowExtensionArray")(values) | Pandas ExtensionArray backed by
    a PyArrow ChunkedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ArrowDtype`](api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")(pyarrow_dtype)
    | An ExtensionDtype for PyArrow data types. |'
  prefs: []
  type: TYPE_TB
- en: For more information, please see the [PyArrow user guide](../user_guide/pyarrow.html#pyarrow)
  prefs: []
  type: TYPE_NORMAL
- en: '### Datetimes'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy cannot natively represent timezone-aware datetimes. pandas supports this
    with the [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") extension array, which can hold timezone-naive
    or timezone-aware values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp"),
    a subclass of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"), is pandas’ scalar type for timezone-naive or timezone-aware
    datetime data. [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the missing
    value for datetime data.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")([ts_input, year, month, day, ...])
    | Pandas replacement for python datetime.datetime object. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.asm8`](api/pandas.Timestamp.asm8.html#pandas.Timestamp.asm8 "pandas.Timestamp.asm8")
    | Return numpy datetime64 format in nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day`](api/pandas.Timestamp.day.html#pandas.Timestamp.day "pandas.Timestamp.day")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofweek`](api/pandas.Timestamp.dayofweek.html#pandas.Timestamp.dayofweek
    "pandas.Timestamp.dayofweek") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_week`](api/pandas.Timestamp.day_of_week.html#pandas.Timestamp.day_of_week
    "pandas.Timestamp.day_of_week") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofyear`](api/pandas.Timestamp.dayofyear.html#pandas.Timestamp.dayofyear
    "pandas.Timestamp.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_year`](api/pandas.Timestamp.day_of_year.html#pandas.Timestamp.day_of_year
    "pandas.Timestamp.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.days_in_month`](api/pandas.Timestamp.days_in_month.html#pandas.Timestamp.days_in_month
    "pandas.Timestamp.days_in_month") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.daysinmonth`](api/pandas.Timestamp.daysinmonth.html#pandas.Timestamp.daysinmonth
    "pandas.Timestamp.daysinmonth") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fold`](api/pandas.Timestamp.fold.html#pandas.Timestamp.fold "pandas.Timestamp.fold")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.hour`](api/pandas.Timestamp.hour.html#pandas.Timestamp.hour "pandas.Timestamp.hour")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_leap_year`](api/pandas.Timestamp.is_leap_year.html#pandas.Timestamp.is_leap_year
    "pandas.Timestamp.is_leap_year") | Return True if year is a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_end`](api/pandas.Timestamp.is_month_end.html#pandas.Timestamp.is_month_end
    "pandas.Timestamp.is_month_end") | Check if the date is the last day of the month.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_start`](api/pandas.Timestamp.is_month_start.html#pandas.Timestamp.is_month_start
    "pandas.Timestamp.is_month_start") | Check if the date is the first day of the
    month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_end`](api/pandas.Timestamp.is_quarter_end.html#pandas.Timestamp.is_quarter_end
    "pandas.Timestamp.is_quarter_end") | Check if date is last day of the quarter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_start`](api/pandas.Timestamp.is_quarter_start.html#pandas.Timestamp.is_quarter_start
    "pandas.Timestamp.is_quarter_start") | Check if the date is the first day of the
    quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_end`](api/pandas.Timestamp.is_year_end.html#pandas.Timestamp.is_year_end
    "pandas.Timestamp.is_year_end") | Return True if date is last day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_start`](api/pandas.Timestamp.is_year_start.html#pandas.Timestamp.is_year_start
    "pandas.Timestamp.is_year_start") | Return True if date is first day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.max`](api/pandas.Timestamp.max.html#pandas.Timestamp.max "pandas.Timestamp.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.microsecond`](api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.min`](api/pandas.Timestamp.min.html#pandas.Timestamp.min "pandas.Timestamp.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.minute`](api/pandas.Timestamp.minute.html#pandas.Timestamp.minute
    "pandas.Timestamp.minute") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month`](api/pandas.Timestamp.month.html#pandas.Timestamp.month
    "pandas.Timestamp.month") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.nanosecond`](api/pandas.Timestamp.nanosecond.html#pandas.Timestamp.nanosecond
    "pandas.Timestamp.nanosecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.quarter`](api/pandas.Timestamp.quarter.html#pandas.Timestamp.quarter
    "pandas.Timestamp.quarter") | Return the quarter of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.resolution`](api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.second`](api/pandas.Timestamp.second.html#pandas.Timestamp.second
    "pandas.Timestamp.second") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz`](api/pandas.Timestamp.tz.html#pandas.Timestamp.tz "pandas.Timestamp.tz")
    | Alias for tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzinfo`](api/pandas.Timestamp.tzinfo.html#pandas.Timestamp.tzinfo
    "pandas.Timestamp.tzinfo") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.unit`](api/pandas.Timestamp.unit.html#pandas.Timestamp.unit "pandas.Timestamp.unit")
    | The abbreviation associated with self._creso. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.value`](api/pandas.Timestamp.value.html#pandas.Timestamp.value
    "pandas.Timestamp.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.week`](api/pandas.Timestamp.week.html#pandas.Timestamp.week "pandas.Timestamp.week")
    | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekofyear`](api/pandas.Timestamp.weekofyear.html#pandas.Timestamp.weekofyear
    "pandas.Timestamp.weekofyear") | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.year`](api/pandas.Timestamp.year.html#pandas.Timestamp.year "pandas.Timestamp.year")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.as_unit`](api/pandas.Timestamp.as_unit.html#pandas.Timestamp.as_unit
    "pandas.Timestamp.as_unit")(unit[, round_ok]) | Convert the underlying int64 representaton
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.astimezone`](api/pandas.Timestamp.astimezone.html#pandas.Timestamp.astimezone
    "pandas.Timestamp.astimezone")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ceil`](api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil "pandas.Timestamp.ceil")(freq[, ambiguous, nonexistent])
    | Return a new Timestamp ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.combine`](api/pandas.Timestamp.combine.html#pandas.Timestamp.combine
    "pandas.Timestamp.combine")(date, time) | Combine date, time into datetime with
    same date and time fields. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ctime`](api/pandas.Timestamp.ctime.html#pandas.Timestamp.ctime
    "pandas.Timestamp.ctime")() | Return ctime() style string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.date`](api/pandas.Timestamp.date.html#pandas.Timestamp.date "pandas.Timestamp.date")()
    | Return date object with same year, month and day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_name`](api/pandas.Timestamp.day_name.html#pandas.Timestamp.day_name
    "pandas.Timestamp.day_name")([locale]) | Return the day name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dst`](api/pandas.Timestamp.dst.html#pandas.Timestamp.dst "pandas.Timestamp.dst")()
    | Return the daylight saving time (DST) adjustment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.floor`](api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")(freq[, ambiguous, nonexistent]) | Return a new Timestamp
    floored to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromordinal`](api/pandas.Timestamp.fromordinal.html#pandas.Timestamp.fromordinal
    "pandas.Timestamp.fromordinal")(ordinal[, tz]) | Construct a timestamp from a
    a proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromtimestamp`](api/pandas.Timestamp.fromtimestamp.html#pandas.Timestamp.fromtimestamp
    "pandas.Timestamp.fromtimestamp")(ts) | Transform timestamp[, tz] to tz''s local
    time from POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isocalendar`](api/pandas.Timestamp.isocalendar.html#pandas.Timestamp.isocalendar
    "pandas.Timestamp.isocalendar")() | Return a named tuple containing ISO year,
    week number, and weekday. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoformat`](api/pandas.Timestamp.isoformat.html#pandas.Timestamp.isoformat
    "pandas.Timestamp.isoformat")([sep, timespec]) | Return the time formatted according
    to ISO 8601. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoweekday`](api/pandas.Timestamp.isoweekday.html#pandas.Timestamp.isoweekday
    "pandas.Timestamp.isoweekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month_name`](api/pandas.Timestamp.month_name.html#pandas.Timestamp.month_name
    "pandas.Timestamp.month_name")([locale]) | Return the month name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.normalize`](api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize")() | Normalize Timestamp to midnight, preserving
    tz information. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.now`](api/pandas.Timestamp.now.html#pandas.Timestamp.now "pandas.Timestamp.now")([tz])
    | Return new Timestamp object representing current time local to tz. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.replace`](api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace")([year, month, day, hour, ...]) | Implements datetime.replace,
    handles nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.round`](api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round")(freq[, ambiguous, nonexistent]) | Round the Timestamp
    to the specified resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strftime`](api/pandas.Timestamp.strftime.html#pandas.Timestamp.strftime
    "pandas.Timestamp.strftime")(format) | Return a formatted string of the Timestamp.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strptime`](api/pandas.Timestamp.strptime.html#pandas.Timestamp.strptime
    "pandas.Timestamp.strptime")(string, format) | Function is not implemented. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.time`](api/pandas.Timestamp.time.html#pandas.Timestamp.time "pandas.Timestamp.time")()
    | Return time object with same time but with tzinfo=None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timestamp`](api/pandas.Timestamp.timestamp.html#pandas.Timestamp.timestamp
    "pandas.Timestamp.timestamp")() | Return POSIX timestamp as float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetuple`](api/pandas.Timestamp.timetuple.html#pandas.Timestamp.timetuple
    "pandas.Timestamp.timetuple")() | Return time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetz`](api/pandas.Timestamp.timetz.html#pandas.Timestamp.timetz
    "pandas.Timestamp.timetz")() | Return time object with same time and tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_datetime64`](api/pandas.Timestamp.to_datetime64.html#pandas.Timestamp.to_datetime64
    "pandas.Timestamp.to_datetime64")() | Return a numpy.datetime64 object with same
    precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_numpy`](api/pandas.Timestamp.to_numpy.html#pandas.Timestamp.to_numpy
    "pandas.Timestamp.to_numpy")([dtype, copy]) | Convert the Timestamp to a NumPy
    datetime64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_julian_date`](api/pandas.Timestamp.to_julian_date.html#pandas.Timestamp.to_julian_date
    "pandas.Timestamp.to_julian_date")() | Convert TimeStamp to a Julian Date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_period`](api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period")([freq]) | Return an period of which this timestamp
    is an observation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_pydatetime`](api/pandas.Timestamp.to_pydatetime.html#pandas.Timestamp.to_pydatetime
    "pandas.Timestamp.to_pydatetime")([warn]) | Convert a Timestamp object to a native
    Python datetime object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.today`](api/pandas.Timestamp.today.html#pandas.Timestamp.today
    "pandas.Timestamp.today")([tz]) | Return the current time in the local timezone.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.toordinal`](api/pandas.Timestamp.toordinal.html#pandas.Timestamp.toordinal
    "pandas.Timestamp.toordinal")() | Return proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_convert`](api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_localize`](api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")(tz[, ambiguous, ...]) | Localize the Timestamp
    to a timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzname`](api/pandas.Timestamp.tzname.html#pandas.Timestamp.tzname
    "pandas.Timestamp.tzname")() | Return time zone name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcfromtimestamp`](api/pandas.Timestamp.utcfromtimestamp.html#pandas.Timestamp.utcfromtimestamp
    "pandas.Timestamp.utcfromtimestamp")(ts) | Construct a timezone-aware UTC datetime
    from a POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcnow`](api/pandas.Timestamp.utcnow.html#pandas.Timestamp.utcnow
    "pandas.Timestamp.utcnow")() | Return a new Timestamp representing UTC day and
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcoffset`](api/pandas.Timestamp.utcoffset.html#pandas.Timestamp.utcoffset
    "pandas.Timestamp.utcoffset")() | Return utc offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utctimetuple`](api/pandas.Timestamp.utctimetuple.html#pandas.Timestamp.utctimetuple
    "pandas.Timestamp.utctimetuple")() | Return UTC time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekday`](api/pandas.Timestamp.weekday.html#pandas.Timestamp.weekday
    "pandas.Timestamp.weekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: A collection of timestamps may be stored in a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray"). For timezone-aware data, the `.dtype` of a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") is a [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype"). For timezone-naive data, `np.dtype("datetime64[ns]")`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: If the data are timezone-aware, then every value in the array must have the
    same timezone.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for tz-naive or tz-aware datetime data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype")([unit, tz]) | An ExtensionDtype for timezone-aware datetime
    data. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.asm8`](api/pandas.Timestamp.asm8.html#pandas.Timestamp.asm8 "pandas.Timestamp.asm8")
    | Return numpy datetime64 format in nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day`](api/pandas.Timestamp.day.html#pandas.Timestamp.day "pandas.Timestamp.day")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofweek`](api/pandas.Timestamp.dayofweek.html#pandas.Timestamp.dayofweek
    "pandas.Timestamp.dayofweek") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_week`](api/pandas.Timestamp.day_of_week.html#pandas.Timestamp.day_of_week
    "pandas.Timestamp.day_of_week") | Return day of the week. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dayofyear`](api/pandas.Timestamp.dayofyear.html#pandas.Timestamp.dayofyear
    "pandas.Timestamp.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_of_year`](api/pandas.Timestamp.day_of_year.html#pandas.Timestamp.day_of_year
    "pandas.Timestamp.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.days_in_month`](api/pandas.Timestamp.days_in_month.html#pandas.Timestamp.days_in_month
    "pandas.Timestamp.days_in_month") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.daysinmonth`](api/pandas.Timestamp.daysinmonth.html#pandas.Timestamp.daysinmonth
    "pandas.Timestamp.daysinmonth") | Return the number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fold`](api/pandas.Timestamp.fold.html#pandas.Timestamp.fold "pandas.Timestamp.fold")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.hour`](api/pandas.Timestamp.hour.html#pandas.Timestamp.hour "pandas.Timestamp.hour")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_leap_year`](api/pandas.Timestamp.is_leap_year.html#pandas.Timestamp.is_leap_year
    "pandas.Timestamp.is_leap_year") | Return True if year is a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_end`](api/pandas.Timestamp.is_month_end.html#pandas.Timestamp.is_month_end
    "pandas.Timestamp.is_month_end") | Check if the date is the last day of the month.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_month_start`](api/pandas.Timestamp.is_month_start.html#pandas.Timestamp.is_month_start
    "pandas.Timestamp.is_month_start") | Check if the date is the first day of the
    month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_end`](api/pandas.Timestamp.is_quarter_end.html#pandas.Timestamp.is_quarter_end
    "pandas.Timestamp.is_quarter_end") | Check if date is last day of the quarter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_quarter_start`](api/pandas.Timestamp.is_quarter_start.html#pandas.Timestamp.is_quarter_start
    "pandas.Timestamp.is_quarter_start") | Check if the date is the first day of the
    quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_end`](api/pandas.Timestamp.is_year_end.html#pandas.Timestamp.is_year_end
    "pandas.Timestamp.is_year_end") | Return True if date is last day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.is_year_start`](api/pandas.Timestamp.is_year_start.html#pandas.Timestamp.is_year_start
    "pandas.Timestamp.is_year_start") | Return True if date is first day of the year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.max`](api/pandas.Timestamp.max.html#pandas.Timestamp.max "pandas.Timestamp.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.microsecond`](api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.min`](api/pandas.Timestamp.min.html#pandas.Timestamp.min "pandas.Timestamp.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.minute`](api/pandas.Timestamp.minute.html#pandas.Timestamp.minute
    "pandas.Timestamp.minute") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month`](api/pandas.Timestamp.month.html#pandas.Timestamp.month
    "pandas.Timestamp.month") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.nanosecond`](api/pandas.Timestamp.nanosecond.html#pandas.Timestamp.nanosecond
    "pandas.Timestamp.nanosecond") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.quarter`](api/pandas.Timestamp.quarter.html#pandas.Timestamp.quarter
    "pandas.Timestamp.quarter") | Return the quarter of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.resolution`](api/pandas.Timestamp.resolution.html#pandas.Timestamp.resolution
    "pandas.Timestamp.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.second`](api/pandas.Timestamp.second.html#pandas.Timestamp.second
    "pandas.Timestamp.second") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz`](api/pandas.Timestamp.tz.html#pandas.Timestamp.tz "pandas.Timestamp.tz")
    | Alias for tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzinfo`](api/pandas.Timestamp.tzinfo.html#pandas.Timestamp.tzinfo
    "pandas.Timestamp.tzinfo") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.unit`](api/pandas.Timestamp.unit.html#pandas.Timestamp.unit "pandas.Timestamp.unit")
    | The abbreviation associated with self._creso. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.value`](api/pandas.Timestamp.value.html#pandas.Timestamp.value
    "pandas.Timestamp.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.week`](api/pandas.Timestamp.week.html#pandas.Timestamp.week "pandas.Timestamp.week")
    | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekofyear`](api/pandas.Timestamp.weekofyear.html#pandas.Timestamp.weekofyear
    "pandas.Timestamp.weekofyear") | Return the week number of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.year`](api/pandas.Timestamp.year.html#pandas.Timestamp.year "pandas.Timestamp.year")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timestamp.as_unit`](api/pandas.Timestamp.as_unit.html#pandas.Timestamp.as_unit
    "pandas.Timestamp.as_unit")(unit[, round_ok]) | Convert the underlying int64 representaton
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.astimezone`](api/pandas.Timestamp.astimezone.html#pandas.Timestamp.astimezone
    "pandas.Timestamp.astimezone")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ceil`](api/pandas.Timestamp.ceil.html#pandas.Timestamp.ceil "pandas.Timestamp.ceil")(freq[, ambiguous, nonexistent])
    | Return a new Timestamp ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.combine`](api/pandas.Timestamp.combine.html#pandas.Timestamp.combine
    "pandas.Timestamp.combine")(date, time) | Combine date, time into datetime with
    same date and time fields. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.ctime`](api/pandas.Timestamp.ctime.html#pandas.Timestamp.ctime
    "pandas.Timestamp.ctime")() | Return ctime() style string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.date`](api/pandas.Timestamp.date.html#pandas.Timestamp.date "pandas.Timestamp.date")()
    | Return date object with same year, month and day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.day_name`](api/pandas.Timestamp.day_name.html#pandas.Timestamp.day_name
    "pandas.Timestamp.day_name")([locale]) | Return the day name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.dst`](api/pandas.Timestamp.dst.html#pandas.Timestamp.dst "pandas.Timestamp.dst")()
    | Return the daylight saving time (DST) adjustment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.floor`](api/pandas.Timestamp.floor.html#pandas.Timestamp.floor
    "pandas.Timestamp.floor")(freq[, ambiguous, nonexistent]) | Return a new Timestamp
    floored to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromordinal`](api/pandas.Timestamp.fromordinal.html#pandas.Timestamp.fromordinal
    "pandas.Timestamp.fromordinal")(ordinal[, tz]) | Construct a timestamp from a
    a proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.fromtimestamp`](api/pandas.Timestamp.fromtimestamp.html#pandas.Timestamp.fromtimestamp
    "pandas.Timestamp.fromtimestamp")(ts) | Transform timestamp[, tz] to tz''s local
    time from POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isocalendar`](api/pandas.Timestamp.isocalendar.html#pandas.Timestamp.isocalendar
    "pandas.Timestamp.isocalendar")() | Return a named tuple containing ISO year,
    week number, and weekday. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoformat`](api/pandas.Timestamp.isoformat.html#pandas.Timestamp.isoformat
    "pandas.Timestamp.isoformat")([sep, timespec]) | Return the time formatted according
    to ISO 8601. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.isoweekday`](api/pandas.Timestamp.isoweekday.html#pandas.Timestamp.isoweekday
    "pandas.Timestamp.isoweekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.month_name`](api/pandas.Timestamp.month_name.html#pandas.Timestamp.month_name
    "pandas.Timestamp.month_name")([locale]) | Return the month name of the Timestamp
    with specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.normalize`](api/pandas.Timestamp.normalize.html#pandas.Timestamp.normalize
    "pandas.Timestamp.normalize")() | Normalize Timestamp to midnight, preserving
    tz information. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.now`](api/pandas.Timestamp.now.html#pandas.Timestamp.now "pandas.Timestamp.now")([tz])
    | Return new Timestamp object representing current time local to tz. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.replace`](api/pandas.Timestamp.replace.html#pandas.Timestamp.replace
    "pandas.Timestamp.replace")([year, month, day, hour, ...]) | Implements datetime.replace,
    handles nanoseconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.round`](api/pandas.Timestamp.round.html#pandas.Timestamp.round
    "pandas.Timestamp.round")(freq[, ambiguous, nonexistent]) | Round the Timestamp
    to the specified resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strftime`](api/pandas.Timestamp.strftime.html#pandas.Timestamp.strftime
    "pandas.Timestamp.strftime")(format) | Return a formatted string of the Timestamp.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.strptime`](api/pandas.Timestamp.strptime.html#pandas.Timestamp.strptime
    "pandas.Timestamp.strptime")(string, format) | Function is not implemented. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.time`](api/pandas.Timestamp.time.html#pandas.Timestamp.time "pandas.Timestamp.time")()
    | Return time object with same time but with tzinfo=None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timestamp`](api/pandas.Timestamp.timestamp.html#pandas.Timestamp.timestamp
    "pandas.Timestamp.timestamp")() | Return POSIX timestamp as float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetuple`](api/pandas.Timestamp.timetuple.html#pandas.Timestamp.timetuple
    "pandas.Timestamp.timetuple")() | Return time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.timetz`](api/pandas.Timestamp.timetz.html#pandas.Timestamp.timetz
    "pandas.Timestamp.timetz")() | Return time object with same time and tzinfo. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_datetime64`](api/pandas.Timestamp.to_datetime64.html#pandas.Timestamp.to_datetime64
    "pandas.Timestamp.to_datetime64")() | Return a numpy.datetime64 object with same
    precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_numpy`](api/pandas.Timestamp.to_numpy.html#pandas.Timestamp.to_numpy
    "pandas.Timestamp.to_numpy")([dtype, copy]) | Convert the Timestamp to a NumPy
    datetime64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_julian_date`](api/pandas.Timestamp.to_julian_date.html#pandas.Timestamp.to_julian_date
    "pandas.Timestamp.to_julian_date")() | Convert TimeStamp to a Julian Date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_period`](api/pandas.Timestamp.to_period.html#pandas.Timestamp.to_period
    "pandas.Timestamp.to_period")([freq]) | Return an period of which this timestamp
    is an observation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.to_pydatetime`](api/pandas.Timestamp.to_pydatetime.html#pandas.Timestamp.to_pydatetime
    "pandas.Timestamp.to_pydatetime")([warn]) | Convert a Timestamp object to a native
    Python datetime object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.today`](api/pandas.Timestamp.today.html#pandas.Timestamp.today
    "pandas.Timestamp.today")([tz]) | Return the current time in the local timezone.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.toordinal`](api/pandas.Timestamp.toordinal.html#pandas.Timestamp.toordinal
    "pandas.Timestamp.toordinal")() | Return proleptic Gregorian ordinal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_convert`](api/pandas.Timestamp.tz_convert.html#pandas.Timestamp.tz_convert
    "pandas.Timestamp.tz_convert")(tz) | Convert timezone-aware Timestamp to another
    time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tz_localize`](api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")(tz[, ambiguous, ...]) | Localize the Timestamp
    to a timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.tzname`](api/pandas.Timestamp.tzname.html#pandas.Timestamp.tzname
    "pandas.Timestamp.tzname")() | Return time zone name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcfromtimestamp`](api/pandas.Timestamp.utcfromtimestamp.html#pandas.Timestamp.utcfromtimestamp
    "pandas.Timestamp.utcfromtimestamp")(ts) | Construct a timezone-aware UTC datetime
    from a POSIX timestamp. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcnow`](api/pandas.Timestamp.utcnow.html#pandas.Timestamp.utcnow
    "pandas.Timestamp.utcnow")() | Return a new Timestamp representing UTC day and
    time. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utcoffset`](api/pandas.Timestamp.utcoffset.html#pandas.Timestamp.utcoffset
    "pandas.Timestamp.utcoffset")() | Return utc offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.utctimetuple`](api/pandas.Timestamp.utctimetuple.html#pandas.Timestamp.utctimetuple
    "pandas.Timestamp.utctimetuple")() | Return UTC time tuple, compatible with time.localtime().
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timestamp.weekday`](api/pandas.Timestamp.weekday.html#pandas.Timestamp.weekday
    "pandas.Timestamp.weekday")() | Return the day of the week represented by the
    date. |'
  prefs: []
  type: TYPE_TB
- en: A collection of timestamps may be stored in a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray"). For timezone-aware data, the `.dtype` of a [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") is a [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype"). For timezone-naive data, `np.dtype("datetime64[ns]")`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: If the data are timezone-aware, then every value in the array must have the
    same timezone.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.DatetimeArray`](api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for tz-naive or tz-aware datetime data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeTZDtype`](api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype")([unit, tz]) | An ExtensionDtype for timezone-aware datetime
    data. |'
  prefs: []
  type: TYPE_TB
- en: '### Timedeltas'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy can natively represent timedeltas. pandas provides [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") for symmetry with [`Timestamp`](api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"). [`NaT`](api/pandas.NaT.html#pandas.NaT "pandas.NaT") is the
    missing value for timedelta data.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")([value, unit])
    | Represents a duration, the difference between two dates or times. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.asm8`](api/pandas.Timedelta.asm8.html#pandas.Timedelta.asm8 "pandas.Timedelta.asm8")
    | Return a numpy timedelta64 array scalar view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.components`](api/pandas.Timedelta.components.html#pandas.Timedelta.components
    "pandas.Timedelta.components") | Return a components namedtuple-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.days`](api/pandas.Timedelta.days.html#pandas.Timedelta.days "pandas.Timedelta.days")
    | Returns the days of the timedelta. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.max`](api/pandas.Timedelta.max.html#pandas.Timedelta.max "pandas.Timedelta.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.microseconds`](api/pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds
    "pandas.Timedelta.microseconds") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.min`](api/pandas.Timedelta.min.html#pandas.Timedelta.min "pandas.Timedelta.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.nanoseconds`](api/pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds
    "pandas.Timedelta.nanoseconds") | Return the number of nanoseconds (n), where
    0 <= n < 1 microsecond. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.resolution`](api/pandas.Timedelta.resolution.html#pandas.Timedelta.resolution
    "pandas.Timedelta.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.seconds`](api/pandas.Timedelta.seconds.html#pandas.Timedelta.seconds
    "pandas.Timedelta.seconds") | Return the total hours, minutes, and seconds of
    the timedelta as seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.unit`](api/pandas.Timedelta.unit.html#pandas.Timedelta.unit "pandas.Timedelta.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.value`](api/pandas.Timedelta.value.html#pandas.Timedelta.value
    "pandas.Timedelta.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.view`](api/pandas.Timedelta.view.html#pandas.Timedelta.view "pandas.Timedelta.view")(dtype)
    | Array view compatibility. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.as_unit`](api/pandas.Timedelta.as_unit.html#pandas.Timedelta.as_unit
    "pandas.Timedelta.as_unit")(unit[, round_ok]) | Convert the underlying int64 representation
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.ceil`](api/pandas.Timedelta.ceil.html#pandas.Timedelta.ceil "pandas.Timedelta.ceil")(freq)
    | Return a new Timedelta ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.floor`](api/pandas.Timedelta.floor.html#pandas.Timedelta.floor
    "pandas.Timedelta.floor")(freq) | Return a new Timedelta floored to this resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.isoformat`](api/pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat
    "pandas.Timedelta.isoformat")() | Format the Timedelta as ISO 8601 Duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.round`](api/pandas.Timedelta.round.html#pandas.Timedelta.round
    "pandas.Timedelta.round")(freq) | Round the Timedelta to the specified resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_pytimedelta`](api/pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta
    "pandas.Timedelta.to_pytimedelta")() | Convert a pandas Timedelta object into
    a python `datetime.timedelta` object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_timedelta64`](api/pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64
    "pandas.Timedelta.to_timedelta64")() | Return a numpy.timedelta64 object with
    ''ns'' precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_numpy`](api/pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy
    "pandas.Timedelta.to_numpy")([dtype, copy]) | Convert the Timedelta to a NumPy
    timedelta64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.total_seconds`](api/pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds
    "pandas.Timedelta.total_seconds")() | Total seconds in the duration. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")
    may be stored in a `TimedeltaArray`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.TimedeltaArray`](api/pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray")(values[, dtype, freq, ...]) | Pandas ExtensionArray
    for timedelta data. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.asm8`](api/pandas.Timedelta.asm8.html#pandas.Timedelta.asm8 "pandas.Timedelta.asm8")
    | Return a numpy timedelta64 array scalar view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.components`](api/pandas.Timedelta.components.html#pandas.Timedelta.components
    "pandas.Timedelta.components") | Return a components namedtuple-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.days`](api/pandas.Timedelta.days.html#pandas.Timedelta.days "pandas.Timedelta.days")
    | Returns the days of the timedelta. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.max`](api/pandas.Timedelta.max.html#pandas.Timedelta.max "pandas.Timedelta.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.microseconds`](api/pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds
    "pandas.Timedelta.microseconds") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.min`](api/pandas.Timedelta.min.html#pandas.Timedelta.min "pandas.Timedelta.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.nanoseconds`](api/pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds
    "pandas.Timedelta.nanoseconds") | Return the number of nanoseconds (n), where
    0 <= n < 1 microsecond. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.resolution`](api/pandas.Timedelta.resolution.html#pandas.Timedelta.resolution
    "pandas.Timedelta.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.seconds`](api/pandas.Timedelta.seconds.html#pandas.Timedelta.seconds
    "pandas.Timedelta.seconds") | Return the total hours, minutes, and seconds of
    the timedelta as seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.unit`](api/pandas.Timedelta.unit.html#pandas.Timedelta.unit "pandas.Timedelta.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.value`](api/pandas.Timedelta.value.html#pandas.Timedelta.value
    "pandas.Timedelta.value") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.view`](api/pandas.Timedelta.view.html#pandas.Timedelta.view "pandas.Timedelta.view")(dtype)
    | Array view compatibility. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Timedelta.as_unit`](api/pandas.Timedelta.as_unit.html#pandas.Timedelta.as_unit
    "pandas.Timedelta.as_unit")(unit[, round_ok]) | Convert the underlying int64 representation
    to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.ceil`](api/pandas.Timedelta.ceil.html#pandas.Timedelta.ceil "pandas.Timedelta.ceil")(freq)
    | Return a new Timedelta ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.floor`](api/pandas.Timedelta.floor.html#pandas.Timedelta.floor
    "pandas.Timedelta.floor")(freq) | Return a new Timedelta floored to this resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.isoformat`](api/pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat
    "pandas.Timedelta.isoformat")() | Format the Timedelta as ISO 8601 Duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.round`](api/pandas.Timedelta.round.html#pandas.Timedelta.round
    "pandas.Timedelta.round")(freq) | Round the Timedelta to the specified resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_pytimedelta`](api/pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta
    "pandas.Timedelta.to_pytimedelta")() | Convert a pandas Timedelta object into
    a python `datetime.timedelta` object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_timedelta64`](api/pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64
    "pandas.Timedelta.to_timedelta64")() | Return a numpy.timedelta64 object with
    ''ns'' precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.to_numpy`](api/pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy
    "pandas.Timedelta.to_numpy")([dtype, copy]) | Convert the Timedelta to a NumPy
    timedelta64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Timedelta.total_seconds`](api/pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds
    "pandas.Timedelta.total_seconds")() | Total seconds in the duration. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Timedelta`](api/pandas.Timedelta.html#pandas.Timedelta "pandas.Timedelta")
    may be stored in a `TimedeltaArray`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.TimedeltaArray`](api/pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray")(values[, dtype, freq, ...]) | Pandas ExtensionArray
    for timedelta data. |'
  prefs: []
  type: TYPE_TB
- en: '### Periods'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents spans of times as [`Period`](api/pandas.Period.html#pandas.Period
    "pandas.Period") objects.
  prefs: []
  type: TYPE_NORMAL
- en: Period
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")([value, freq, ordinal, year, month, ...])
    | Represents a period of time. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.day`](api/pandas.Period.day.html#pandas.Period.day "pandas.Period.day")
    | Get day of the month that a Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofweek`](api/pandas.Period.dayofweek.html#pandas.Period.dayofweek
    "pandas.Period.dayofweek") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_week`](api/pandas.Period.day_of_week.html#pandas.Period.day_of_week
    "pandas.Period.day_of_week") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofyear`](api/pandas.Period.dayofyear.html#pandas.Period.dayofyear
    "pandas.Period.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_year`](api/pandas.Period.day_of_year.html#pandas.Period.day_of_year
    "pandas.Period.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.days_in_month`](api/pandas.Period.days_in_month.html#pandas.Period.days_in_month
    "pandas.Period.days_in_month") | Get the total number of days in the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.daysinmonth`](api/pandas.Period.daysinmonth.html#pandas.Period.daysinmonth
    "pandas.Period.daysinmonth") | Get the total number of days of the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.end_time`](api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freq`](api/pandas.Period.freq.html#pandas.Period.freq "pandas.Period.freq")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freqstr`](api/pandas.Period.freqstr.html#pandas.Period.freqstr "pandas.Period.freqstr")
    | Return a string representation of the frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.hour`](api/pandas.Period.hour.html#pandas.Period.hour "pandas.Period.hour")
    | Get the hour of the day component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.is_leap_year`](api/pandas.Period.is_leap_year.html#pandas.Period.is_leap_year
    "pandas.Period.is_leap_year") | Return True if the period''s year is in a leap
    year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.minute`](api/pandas.Period.minute.html#pandas.Period.minute "pandas.Period.minute")
    | Get minute of the hour component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.month`](api/pandas.Period.month.html#pandas.Period.month "pandas.Period.month")
    | Return the month this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.ordinal`](api/pandas.Period.ordinal.html#pandas.Period.ordinal "pandas.Period.ordinal")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.quarter`](api/pandas.Period.quarter.html#pandas.Period.quarter "pandas.Period.quarter")
    | Return the quarter this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.qyear`](api/pandas.Period.qyear.html#pandas.Period.qyear "pandas.Period.qyear")
    | Fiscal year the Period lies in according to its starting-quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.second`](api/pandas.Period.second.html#pandas.Period.second "pandas.Period.second")
    | Get the second component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.start_time`](api/pandas.Period.start_time.html#pandas.Period.start_time
    "pandas.Period.start_time") | Get the Timestamp for the start of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.week`](api/pandas.Period.week.html#pandas.Period.week "pandas.Period.week")
    | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekday`](api/pandas.Period.weekday.html#pandas.Period.weekday "pandas.Period.weekday")
    | Day of the week the period lies in, with Monday=0 and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekofyear`](api/pandas.Period.weekofyear.html#pandas.Period.weekofyear
    "pandas.Period.weekofyear") | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.year`](api/pandas.Period.year.html#pandas.Period.year "pandas.Period.year")
    | Return the year this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.asfreq`](api/pandas.Period.asfreq.html#pandas.Period.asfreq "pandas.Period.asfreq")(freq[, how])
    | Convert Period to desired frequency, at the start or end of the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.now`](api/pandas.Period.now.html#pandas.Period.now "pandas.Period.now")(freq)
    | Return the period of now''s date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.strftime`](api/pandas.Period.strftime.html#pandas.Period.strftime
    "pandas.Period.strftime")(fmt) | Returns a formatted string representation of
    the [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.to_timestamp`](api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp")([freq, how]) | Return the Timestamp representation
    of the Period. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    may be stored in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"). Every period in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") must have the same `freq`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for storing Period data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype "pandas.PeriodDtype")(freq)
    | An ExtensionDtype for Period data. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.day`](api/pandas.Period.day.html#pandas.Period.day "pandas.Period.day")
    | Get day of the month that a Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofweek`](api/pandas.Period.dayofweek.html#pandas.Period.dayofweek
    "pandas.Period.dayofweek") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_week`](api/pandas.Period.day_of_week.html#pandas.Period.day_of_week
    "pandas.Period.day_of_week") | Day of the week the period lies in, with Monday=0
    and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.dayofyear`](api/pandas.Period.dayofyear.html#pandas.Period.dayofyear
    "pandas.Period.dayofyear") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.day_of_year`](api/pandas.Period.day_of_year.html#pandas.Period.day_of_year
    "pandas.Period.day_of_year") | Return the day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.days_in_month`](api/pandas.Period.days_in_month.html#pandas.Period.days_in_month
    "pandas.Period.days_in_month") | Get the total number of days in the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.daysinmonth`](api/pandas.Period.daysinmonth.html#pandas.Period.daysinmonth
    "pandas.Period.daysinmonth") | Get the total number of days of the month that
    this period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.end_time`](api/pandas.Period.end_time.html#pandas.Period.end_time
    "pandas.Period.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freq`](api/pandas.Period.freq.html#pandas.Period.freq "pandas.Period.freq")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.freqstr`](api/pandas.Period.freqstr.html#pandas.Period.freqstr "pandas.Period.freqstr")
    | Return a string representation of the frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.hour`](api/pandas.Period.hour.html#pandas.Period.hour "pandas.Period.hour")
    | Get the hour of the day component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.is_leap_year`](api/pandas.Period.is_leap_year.html#pandas.Period.is_leap_year
    "pandas.Period.is_leap_year") | Return True if the period''s year is in a leap
    year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.minute`](api/pandas.Period.minute.html#pandas.Period.minute "pandas.Period.minute")
    | Get minute of the hour component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.month`](api/pandas.Period.month.html#pandas.Period.month "pandas.Period.month")
    | Return the month this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.ordinal`](api/pandas.Period.ordinal.html#pandas.Period.ordinal "pandas.Period.ordinal")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.quarter`](api/pandas.Period.quarter.html#pandas.Period.quarter "pandas.Period.quarter")
    | Return the quarter this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.qyear`](api/pandas.Period.qyear.html#pandas.Period.qyear "pandas.Period.qyear")
    | Fiscal year the Period lies in according to its starting-quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.second`](api/pandas.Period.second.html#pandas.Period.second "pandas.Period.second")
    | Get the second component of the Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.start_time`](api/pandas.Period.start_time.html#pandas.Period.start_time
    "pandas.Period.start_time") | Get the Timestamp for the start of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.week`](api/pandas.Period.week.html#pandas.Period.week "pandas.Period.week")
    | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekday`](api/pandas.Period.weekday.html#pandas.Period.weekday "pandas.Period.weekday")
    | Day of the week the period lies in, with Monday=0 and Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.weekofyear`](api/pandas.Period.weekofyear.html#pandas.Period.weekofyear
    "pandas.Period.weekofyear") | Get the week of the year on the given Period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.year`](api/pandas.Period.year.html#pandas.Period.year "pandas.Period.year")
    | Return the year this Period falls on. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Period.asfreq`](api/pandas.Period.asfreq.html#pandas.Period.asfreq "pandas.Period.asfreq")(freq[, how])
    | Convert Period to desired frequency, at the start or end of the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.now`](api/pandas.Period.now.html#pandas.Period.now "pandas.Period.now")(freq)
    | Return the period of now''s date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.strftime`](api/pandas.Period.strftime.html#pandas.Period.strftime
    "pandas.Period.strftime")(fmt) | Returns a formatted string representation of
    the [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Period.to_timestamp`](api/pandas.Period.to_timestamp.html#pandas.Period.to_timestamp
    "pandas.Period.to_timestamp")([freq, how]) | Return the Timestamp representation
    of the Period. |'
  prefs: []
  type: TYPE_TB
- en: A collection of [`Period`](api/pandas.Period.html#pandas.Period "pandas.Period")
    may be stored in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray"). Every period in a [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") must have the same `freq`.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.PeriodArray`](api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray")(values[, dtype, freq, copy]) | Pandas ExtensionArray
    for storing Period data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodDtype`](api/pandas.PeriodDtype.html#pandas.PeriodDtype "pandas.PeriodDtype")(freq)
    | An ExtensionDtype for Period data. |'
  prefs: []
  type: TYPE_TB
- en: '### Intervals'
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary intervals can be represented as [`Interval`](api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Interval`](api/pandas.Interval.html#pandas.Interval "pandas.Interval")
    | Immutable object implementing an Interval, a bounded slice-like interval. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Interval.closed`](api/pandas.Interval.closed.html#pandas.Interval.closed
    "pandas.Interval.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_left`](api/pandas.Interval.closed_left.html#pandas.Interval.closed_left
    "pandas.Interval.closed_left") | Check if the interval is closed on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_right`](api/pandas.Interval.closed_right.html#pandas.Interval.closed_right
    "pandas.Interval.closed_right") | Check if the interval is closed on the right
    side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.is_empty`](api/pandas.Interval.is_empty.html#pandas.Interval.is_empty
    "pandas.Interval.is_empty") | Indicates if an interval is empty, meaning it contains
    no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.left`](api/pandas.Interval.left.html#pandas.Interval.left "pandas.Interval.left")
    | Left bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.length`](api/pandas.Interval.length.html#pandas.Interval.length
    "pandas.Interval.length") | Return the length of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.mid`](api/pandas.Interval.mid.html#pandas.Interval.mid "pandas.Interval.mid")
    | Return the midpoint of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_left`](api/pandas.Interval.open_left.html#pandas.Interval.open_left
    "pandas.Interval.open_left") | Check if the interval is open on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_right`](api/pandas.Interval.open_right.html#pandas.Interval.open_right
    "pandas.Interval.open_right") | Check if the interval is open on the right side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.overlaps`](api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps")(other) | Check whether two Interval objects overlap.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.right`](api/pandas.Interval.right.html#pandas.Interval.right "pandas.Interval.right")
    | Right bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: A collection of intervals may be stored in an [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray")(data[, closed, dtype, ...]) | Pandas array for
    interval data that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype "pandas.IntervalDtype")([subtype, closed])
    | An ExtensionDtype for Interval data. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Interval.closed`](api/pandas.Interval.closed.html#pandas.Interval.closed
    "pandas.Interval.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_left`](api/pandas.Interval.closed_left.html#pandas.Interval.closed_left
    "pandas.Interval.closed_left") | Check if the interval is closed on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.closed_right`](api/pandas.Interval.closed_right.html#pandas.Interval.closed_right
    "pandas.Interval.closed_right") | Check if the interval is closed on the right
    side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.is_empty`](api/pandas.Interval.is_empty.html#pandas.Interval.is_empty
    "pandas.Interval.is_empty") | Indicates if an interval is empty, meaning it contains
    no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.left`](api/pandas.Interval.left.html#pandas.Interval.left "pandas.Interval.left")
    | Left bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.length`](api/pandas.Interval.length.html#pandas.Interval.length
    "pandas.Interval.length") | Return the length of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.mid`](api/pandas.Interval.mid.html#pandas.Interval.mid "pandas.Interval.mid")
    | Return the midpoint of the Interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_left`](api/pandas.Interval.open_left.html#pandas.Interval.open_left
    "pandas.Interval.open_left") | Check if the interval is open on the left side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.open_right`](api/pandas.Interval.open_right.html#pandas.Interval.open_right
    "pandas.Interval.open_right") | Check if the interval is open on the right side.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.overlaps`](api/pandas.Interval.overlaps.html#pandas.Interval.overlaps
    "pandas.Interval.overlaps")(other) | Check whether two Interval objects overlap.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Interval.right`](api/pandas.Interval.right.html#pandas.Interval.right "pandas.Interval.right")
    | Right bound for the interval. |'
  prefs: []
  type: TYPE_TB
- en: A collection of intervals may be stored in an [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntervalArray`](api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray")(data[, closed, dtype, ...]) | Pandas array for
    interval data that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalDtype`](api/pandas.IntervalDtype.html#pandas.IntervalDtype "pandas.IntervalDtype")([subtype, closed])
    | An ExtensionDtype for Interval data. |'
  prefs: []
  type: TYPE_TB
- en: '### Nullable integer'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") cannot natively represent integer-data with missing values.
    pandas provides this through [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray").'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.IntegerArray`](api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray")(values, mask[, copy]) | Array of integer (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int8Dtype`](api/pandas.Int8Dtype.html#pandas.Int8Dtype "pandas.Int8Dtype")()
    | An ExtensionDtype for int8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int16Dtype`](api/pandas.Int16Dtype.html#pandas.Int16Dtype "pandas.Int16Dtype")()
    | An ExtensionDtype for int16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int32Dtype`](api/pandas.Int32Dtype.html#pandas.Int32Dtype "pandas.Int32Dtype")()
    | An ExtensionDtype for int32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Int64Dtype`](api/pandas.Int64Dtype.html#pandas.Int64Dtype "pandas.Int64Dtype")()
    | An ExtensionDtype for int64 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt8Dtype`](api/pandas.UInt8Dtype.html#pandas.UInt8Dtype "pandas.UInt8Dtype")()
    | An ExtensionDtype for uint8 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt16Dtype`](api/pandas.UInt16Dtype.html#pandas.UInt16Dtype "pandas.UInt16Dtype")()
    | An ExtensionDtype for uint16 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt32Dtype`](api/pandas.UInt32Dtype.html#pandas.UInt32Dtype "pandas.UInt32Dtype")()
    | An ExtensionDtype for uint32 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`UInt64Dtype`](api/pandas.UInt64Dtype.html#pandas.UInt64Dtype "pandas.UInt64Dtype")()
    | An ExtensionDtype for uint64 integer data. |'
  prefs: []
  type: TYPE_TB
- en: '### Nullable float'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.FloatingArray`](api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray")(values, mask[, copy]) | Array of floating (optional
    missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float32Dtype`](api/pandas.Float32Dtype.html#pandas.Float32Dtype "pandas.Float32Dtype")()
    | An ExtensionDtype for float32 data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Float64Dtype`](api/pandas.Float64Dtype.html#pandas.Float64Dtype "pandas.Float64Dtype")()
    | An ExtensionDtype for float64 data. |'
  prefs: []
  type: TYPE_TB
- en: '### Categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: pandas defines a custom data type for representing data that can take only a
    limited, fixed set of values. The dtype of a [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") can be described by a [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype")([categories, ordered]) | Type for categorical data
    with the categories and orderedness. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.categories`](api/pandas.CategoricalDtype.categories.html#pandas.CategoricalDtype.categories
    "pandas.CategoricalDtype.categories") | An `Index` containing the unique categories
    allowed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalDtype.ordered`](api/pandas.CategoricalDtype.ordered.html#pandas.CategoricalDtype.ordered
    "pandas.CategoricalDtype.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: Categorical data can be stored in a [`pandas.Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")(values[, categories, ordered, ...])
    | Represent a categorical variable in classic R / S-plus fashion. |'
  prefs: []
  type: TYPE_TB
- en: 'The alternative [`Categorical.from_codes()`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes") constructor can be used when you have the categories
    and integer codes already:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.from_codes`](api/pandas.Categorical.from_codes.html#pandas.Categorical.from_codes
    "pandas.Categorical.from_codes")(codes[, categories, ...]) | Make a Categorical
    type from codes and categories or dtype. |'
  prefs: []
  type: TYPE_TB
- en: The dtype information is available on the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical")
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.dtype`](api/pandas.Categorical.dtype.html#pandas.Categorical.dtype
    "pandas.Categorical.dtype") | The `CategoricalDtype` for this instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.categories`](api/pandas.Categorical.categories.html#pandas.Categorical.categories
    "pandas.Categorical.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.ordered`](api/pandas.Categorical.ordered.html#pandas.Categorical.ordered
    "pandas.Categorical.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Categorical.codes`](api/pandas.Categorical.codes.html#pandas.Categorical.codes
    "pandas.Categorical.codes") | The category codes of this categorical index. |'
  prefs: []
  type: TYPE_TB
- en: '`np.asarray(categorical)` works by implementing the array interface. Be aware,
    that this converts the [`Categorical`](api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") back to a NumPy array, so categories and order information
    is not preserved!'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Categorical.__array__`](api/pandas.Categorical.__array__.html#pandas.Categorical.__array__
    "pandas.Categorical.__array__")([dtype, copy]) | The numpy array interface. |'
  prefs: []
  type: TYPE_TB
- en: A [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical")
    can be stored in a [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    To create a Series of dtype `category`, use `cat = s.astype(dtype)` or `Series(...,
    dtype=dtype)` where `dtype` is either
  prefs: []
  type: TYPE_NORMAL
- en: the string `'category'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an instance of [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series") is of
    dtype [`CategoricalDtype`](api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype"), `Series.cat` can be used to change the categorical
    data. See [Categorical accessor](series.html#api-series-cat) for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Sparse'
  prefs: []
  type: TYPE_NORMAL
- en: Data where a single value is repeated many times (e.g. `0` or `NaN`) may be
    stored efficiently as a [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.SparseArray`](api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")(data[, sparse_index, ...]) | An ExtensionArray for
    storing sparse data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SparseDtype`](api/pandas.SparseDtype.html#pandas.SparseDtype "pandas.SparseDtype")([dtype, fill_value])
    | Dtype for data stored in `SparseArray`. |'
  prefs: []
  type: TYPE_TB
- en: The `Series.sparse` accessor may be used to access sparse-specific attributes
    and methods if the [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    contains sparse values. See [Sparse accessor](series.html#api-series-sparse) and
    [the user guide](../user_guide/sparse.html#sparse) for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Strings'
  prefs: []
  type: TYPE_NORMAL
- en: When working with text data, where each valid element is a string or missing,
    we recommend using [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") (with the alias `"string"`).
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")(values[, copy]) | Extension array for string data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`arrays.ArrowStringArray`](api/pandas.arrays.ArrowStringArray.html#pandas.arrays.ArrowStringArray
    "pandas.arrays.ArrowStringArray")(values) | Extension array for string data in
    a `pyarrow.ChunkedArray`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StringDtype`](api/pandas.StringDtype.html#pandas.StringDtype "pandas.StringDtype")([storage])
    | Extension dtype for string data. |'
  prefs: []
  type: TYPE_TB
- en: The `Series.str` accessor is available for [`Series`](api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by a [`arrays.StringArray`](api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray"). See [String handling](series.html#api-series-str)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Nullable Boolean'
  prefs: []
  type: TYPE_NORMAL
- en: The boolean dtype (with the alias `"boolean"`) provides support for storing
    boolean data (`True`, `False`) with missing values, which is not possible with
    a bool [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`arrays.BooleanArray`](api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray")(values, mask[, copy]) | Array of boolean (True/False)
    data with missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`BooleanDtype`](api/pandas.BooleanDtype.html#pandas.BooleanDtype "pandas.BooleanDtype")()
    | Extension dtype for boolean data. |'
  prefs: []
  type: TYPE_TB
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`api.types.union_categoricals`](api/pandas.api.types.union_categoricals.html#pandas.api.types.union_categoricals
    "pandas.api.types.union_categoricals")(to_union[, ...]) | Combine list-like of
    Categorical-like, unioning categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.infer_dtype`](api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype")(value[, skipna]) | Return a string label of the
    type of a scalar or list-like of values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.pandas_dtype`](api/pandas.api.types.pandas_dtype.html#pandas.api.types.pandas_dtype
    "pandas.api.types.pandas_dtype")(dtype) | Convert input into a pandas only dtype
    object or a numpy dtype object. |'
  prefs: []
  type: TYPE_TB
- en: Data type introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_any_real_numeric_dtype`](api/pandas.api.types.is_any_real_numeric_dtype.html#pandas.api.types.is_any_real_numeric_dtype
    "pandas.api.types.is_any_real_numeric_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a real number dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_bool_dtype`](api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype")(arr_or_dtype) | Check whether the provided array
    or dtype is of a boolean dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_categorical_dtype`](api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Categorical dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex_dtype`](api/pandas.api.types.is_complex_dtype.html#pandas.api.types.is_complex_dtype
    "pandas.api.types.is_complex_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a complex dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_any_dtype`](api/pandas.api.types.is_datetime64_any_dtype.html#pandas.api.types.is_datetime64_any_dtype
    "pandas.api.types.is_datetime64_any_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_dtype`](api/pandas.api.types.is_datetime64_dtype.html#pandas.api.types.is_datetime64_dtype
    "pandas.api.types.is_datetime64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_ns_dtype`](api/pandas.api.types.is_datetime64_ns_dtype.html#pandas.api.types.is_datetime64_ns_dtype
    "pandas.api.types.is_datetime64_ns_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the datetime64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64tz_dtype`](api/pandas.api.types.is_datetime64tz_dtype.html#pandas.api.types.is_datetime64tz_dtype
    "pandas.api.types.is_datetime64tz_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of a DatetimeTZDtype dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_extension_array_dtype`](api/pandas.api.types.is_extension_array_dtype.html#pandas.api.types.is_extension_array_dtype
    "pandas.api.types.is_extension_array_dtype")(arr_or_dtype) | Check if an object
    is a pandas extension array type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float_dtype`](api/pandas.api.types.is_float_dtype.html#pandas.api.types.is_float_dtype
    "pandas.api.types.is_float_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a float dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_int64_dtype`](api/pandas.api.types.is_int64_dtype.html#pandas.api.types.is_int64_dtype
    "pandas.api.types.is_int64_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    the provided array or dtype is of the int64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer_dtype`](api/pandas.api.types.is_integer_dtype.html#pandas.api.types.is_integer_dtype
    "pandas.api.types.is_integer_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of an integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval_dtype`](api/pandas.api.types.is_interval_dtype.html#pandas.api.types.is_interval_dtype
    "pandas.api.types.is_interval_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Interval dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_numeric_dtype`](api/pandas.api.types.is_numeric_dtype.html#pandas.api.types.is_numeric_dtype
    "pandas.api.types.is_numeric_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a numeric dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_object_dtype`](api/pandas.api.types.is_object_dtype.html#pandas.api.types.is_object_dtype
    "pandas.api.types.is_object_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the object dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_period_dtype`](api/pandas.api.types.is_period_dtype.html#pandas.api.types.is_period_dtype
    "pandas.api.types.is_period_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Period dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_signed_integer_dtype`](api/pandas.api.types.is_signed_integer_dtype.html#pandas.api.types.is_signed_integer_dtype
    "pandas.api.types.is_signed_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a signed integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_string_dtype`](api/pandas.api.types.is_string_dtype.html#pandas.api.types.is_string_dtype
    "pandas.api.types.is_string_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the string dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_dtype`](api/pandas.api.types.is_timedelta64_dtype.html#pandas.api.types.is_timedelta64_dtype
    "pandas.api.types.is_timedelta64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the timedelta64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_ns_dtype`](api/pandas.api.types.is_timedelta64_ns_dtype.html#pandas.api.types.is_timedelta64_ns_dtype
    "pandas.api.types.is_timedelta64_ns_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the timedelta64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_unsigned_integer_dtype`](api/pandas.api.types.is_unsigned_integer_dtype.html#pandas.api.types.is_unsigned_integer_dtype
    "pandas.api.types.is_unsigned_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of an unsigned integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_sparse`](api/pandas.api.types.is_sparse.html#pandas.api.types.is_sparse
    "pandas.api.types.is_sparse")(arr) | (DEPRECATED) Check whether an array-like
    is a 1-D pandas sparse array. |'
  prefs: []
  type: TYPE_TB
- en: Iterable introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_dict_like`](api/pandas.api.types.is_dict_like.html#pandas.api.types.is_dict_like
    "pandas.api.types.is_dict_like")(obj) | Check if the object is dict-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_file_like`](api/pandas.api.types.is_file_like.html#pandas.api.types.is_file_like
    "pandas.api.types.is_file_like")(obj) | Check if the object is a file-like object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_list_like`](api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like")(obj[, allow_sets]) | Check if the object is list-like.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_named_tuple`](api/pandas.api.types.is_named_tuple.html#pandas.api.types.is_named_tuple
    "pandas.api.types.is_named_tuple")(obj) | Check if the object is a named tuple.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_iterator`](api/pandas.api.types.is_iterator.html#pandas.api.types.is_iterator
    "pandas.api.types.is_iterator")(obj) | Check if the object is an iterator. |'
  prefs: []
  type: TYPE_TB
- en: Scalar introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_bool`](api/pandas.api.types.is_bool.html#pandas.api.types.is_bool
    "pandas.api.types.is_bool")(obj) | Return True if given object is boolean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex`](api/pandas.api.types.is_complex.html#pandas.api.types.is_complex
    "pandas.api.types.is_complex")(obj) | Return True if given object is complex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float`](api/pandas.api.types.is_float.html#pandas.api.types.is_float
    "pandas.api.types.is_float")(obj) | Return True if given object is float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_hashable`](api/pandas.api.types.is_hashable.html#pandas.api.types.is_hashable
    "pandas.api.types.is_hashable")(obj) | Return True if hash(obj) will succeed,
    False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer`](api/pandas.api.types.is_integer.html#pandas.api.types.is_integer
    "pandas.api.types.is_integer")(obj) | Return True if given object is integer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval`](api/pandas.api.types.is_interval.html#pandas.api.types.is_interval
    "pandas.api.types.is_interval")(obj) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_number`](api/pandas.api.types.is_number.html#pandas.api.types.is_number
    "pandas.api.types.is_number")(obj) | Check if the object is a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re`](api/pandas.api.types.is_re.html#pandas.api.types.is_re
    "pandas.api.types.is_re")(obj) | Check if the object is a regex pattern instance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re_compilable`](api/pandas.api.types.is_re_compilable.html#pandas.api.types.is_re_compilable
    "pandas.api.types.is_re_compilable")(obj) | Check if the object can be compiled
    into a regex pattern instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_scalar`](api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar")(val) | Return True if given object is scalar. |'
  prefs: []
  type: TYPE_TB
- en: Constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`api.types.union_categoricals`](api/pandas.api.types.union_categoricals.html#pandas.api.types.union_categoricals
    "pandas.api.types.union_categoricals")(to_union[, ...]) | Combine list-like of
    Categorical-like, unioning categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.infer_dtype`](api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype")(value[, skipna]) | Return a string label of the
    type of a scalar or list-like of values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.pandas_dtype`](api/pandas.api.types.pandas_dtype.html#pandas.api.types.pandas_dtype
    "pandas.api.types.pandas_dtype")(dtype) | Convert input into a pandas only dtype
    object or a numpy dtype object. |'
  prefs: []
  type: TYPE_TB
- en: Data type introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_any_real_numeric_dtype`](api/pandas.api.types.is_any_real_numeric_dtype.html#pandas.api.types.is_any_real_numeric_dtype
    "pandas.api.types.is_any_real_numeric_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a real number dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_bool_dtype`](api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype")(arr_or_dtype) | Check whether the provided array
    or dtype is of a boolean dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_categorical_dtype`](api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Categorical dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex_dtype`](api/pandas.api.types.is_complex_dtype.html#pandas.api.types.is_complex_dtype
    "pandas.api.types.is_complex_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a complex dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_any_dtype`](api/pandas.api.types.is_datetime64_any_dtype.html#pandas.api.types.is_datetime64_any_dtype
    "pandas.api.types.is_datetime64_any_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_dtype`](api/pandas.api.types.is_datetime64_dtype.html#pandas.api.types.is_datetime64_dtype
    "pandas.api.types.is_datetime64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_ns_dtype`](api/pandas.api.types.is_datetime64_ns_dtype.html#pandas.api.types.is_datetime64_ns_dtype
    "pandas.api.types.is_datetime64_ns_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the datetime64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64tz_dtype`](api/pandas.api.types.is_datetime64tz_dtype.html#pandas.api.types.is_datetime64tz_dtype
    "pandas.api.types.is_datetime64tz_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of a DatetimeTZDtype dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_extension_array_dtype`](api/pandas.api.types.is_extension_array_dtype.html#pandas.api.types.is_extension_array_dtype
    "pandas.api.types.is_extension_array_dtype")(arr_or_dtype) | Check if an object
    is a pandas extension array type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float_dtype`](api/pandas.api.types.is_float_dtype.html#pandas.api.types.is_float_dtype
    "pandas.api.types.is_float_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a float dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_int64_dtype`](api/pandas.api.types.is_int64_dtype.html#pandas.api.types.is_int64_dtype
    "pandas.api.types.is_int64_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    the provided array or dtype is of the int64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer_dtype`](api/pandas.api.types.is_integer_dtype.html#pandas.api.types.is_integer_dtype
    "pandas.api.types.is_integer_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of an integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval_dtype`](api/pandas.api.types.is_interval_dtype.html#pandas.api.types.is_interval_dtype
    "pandas.api.types.is_interval_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Interval dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_numeric_dtype`](api/pandas.api.types.is_numeric_dtype.html#pandas.api.types.is_numeric_dtype
    "pandas.api.types.is_numeric_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a numeric dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_object_dtype`](api/pandas.api.types.is_object_dtype.html#pandas.api.types.is_object_dtype
    "pandas.api.types.is_object_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the object dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_period_dtype`](api/pandas.api.types.is_period_dtype.html#pandas.api.types.is_period_dtype
    "pandas.api.types.is_period_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Period dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_signed_integer_dtype`](api/pandas.api.types.is_signed_integer_dtype.html#pandas.api.types.is_signed_integer_dtype
    "pandas.api.types.is_signed_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a signed integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_string_dtype`](api/pandas.api.types.is_string_dtype.html#pandas.api.types.is_string_dtype
    "pandas.api.types.is_string_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the string dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_dtype`](api/pandas.api.types.is_timedelta64_dtype.html#pandas.api.types.is_timedelta64_dtype
    "pandas.api.types.is_timedelta64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the timedelta64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_ns_dtype`](api/pandas.api.types.is_timedelta64_ns_dtype.html#pandas.api.types.is_timedelta64_ns_dtype
    "pandas.api.types.is_timedelta64_ns_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the timedelta64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_unsigned_integer_dtype`](api/pandas.api.types.is_unsigned_integer_dtype.html#pandas.api.types.is_unsigned_integer_dtype
    "pandas.api.types.is_unsigned_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of an unsigned integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_sparse`](api/pandas.api.types.is_sparse.html#pandas.api.types.is_sparse
    "pandas.api.types.is_sparse")(arr) | (DEPRECATED) Check whether an array-like
    is a 1-D pandas sparse array. |'
  prefs: []
  type: TYPE_TB
- en: Iterable introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_dict_like`](api/pandas.api.types.is_dict_like.html#pandas.api.types.is_dict_like
    "pandas.api.types.is_dict_like")(obj) | Check if the object is dict-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_file_like`](api/pandas.api.types.is_file_like.html#pandas.api.types.is_file_like
    "pandas.api.types.is_file_like")(obj) | Check if the object is a file-like object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_list_like`](api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like")(obj[, allow_sets]) | Check if the object is list-like.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_named_tuple`](api/pandas.api.types.is_named_tuple.html#pandas.api.types.is_named_tuple
    "pandas.api.types.is_named_tuple")(obj) | Check if the object is a named tuple.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_iterator`](api/pandas.api.types.is_iterator.html#pandas.api.types.is_iterator
    "pandas.api.types.is_iterator")(obj) | Check if the object is an iterator. |'
  prefs: []
  type: TYPE_TB
- en: Scalar introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_bool`](api/pandas.api.types.is_bool.html#pandas.api.types.is_bool
    "pandas.api.types.is_bool")(obj) | Return True if given object is boolean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex`](api/pandas.api.types.is_complex.html#pandas.api.types.is_complex
    "pandas.api.types.is_complex")(obj) | Return True if given object is complex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float`](api/pandas.api.types.is_float.html#pandas.api.types.is_float
    "pandas.api.types.is_float")(obj) | Return True if given object is float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_hashable`](api/pandas.api.types.is_hashable.html#pandas.api.types.is_hashable
    "pandas.api.types.is_hashable")(obj) | Return True if hash(obj) will succeed,
    False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer`](api/pandas.api.types.is_integer.html#pandas.api.types.is_integer
    "pandas.api.types.is_integer")(obj) | Return True if given object is integer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval`](api/pandas.api.types.is_interval.html#pandas.api.types.is_interval
    "pandas.api.types.is_interval")(obj) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_number`](api/pandas.api.types.is_number.html#pandas.api.types.is_number
    "pandas.api.types.is_number")(obj) | Check if the object is a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re`](api/pandas.api.types.is_re.html#pandas.api.types.is_re
    "pandas.api.types.is_re")(obj) | Check if the object is a regex pattern instance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re_compilable`](api/pandas.api.types.is_re_compilable.html#pandas.api.types.is_re_compilable
    "pandas.api.types.is_re_compilable")(obj) | Check if the object can be compiled
    into a regex pattern instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_scalar`](api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar")(val) | Return True if given object is scalar. |'
  prefs: []
  type: TYPE_TB
- en: Data type introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_any_real_numeric_dtype`](api/pandas.api.types.is_any_real_numeric_dtype.html#pandas.api.types.is_any_real_numeric_dtype
    "pandas.api.types.is_any_real_numeric_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a real number dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_bool_dtype`](api/pandas.api.types.is_bool_dtype.html#pandas.api.types.is_bool_dtype
    "pandas.api.types.is_bool_dtype")(arr_or_dtype) | Check whether the provided array
    or dtype is of a boolean dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_categorical_dtype`](api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Categorical dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex_dtype`](api/pandas.api.types.is_complex_dtype.html#pandas.api.types.is_complex_dtype
    "pandas.api.types.is_complex_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a complex dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_any_dtype`](api/pandas.api.types.is_datetime64_any_dtype.html#pandas.api.types.is_datetime64_any_dtype
    "pandas.api.types.is_datetime64_any_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_dtype`](api/pandas.api.types.is_datetime64_dtype.html#pandas.api.types.is_datetime64_dtype
    "pandas.api.types.is_datetime64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the datetime64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64_ns_dtype`](api/pandas.api.types.is_datetime64_ns_dtype.html#pandas.api.types.is_datetime64_ns_dtype
    "pandas.api.types.is_datetime64_ns_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the datetime64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_datetime64tz_dtype`](api/pandas.api.types.is_datetime64tz_dtype.html#pandas.api.types.is_datetime64tz_dtype
    "pandas.api.types.is_datetime64tz_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of a DatetimeTZDtype dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_extension_array_dtype`](api/pandas.api.types.is_extension_array_dtype.html#pandas.api.types.is_extension_array_dtype
    "pandas.api.types.is_extension_array_dtype")(arr_or_dtype) | Check if an object
    is a pandas extension array type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float_dtype`](api/pandas.api.types.is_float_dtype.html#pandas.api.types.is_float_dtype
    "pandas.api.types.is_float_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a float dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_int64_dtype`](api/pandas.api.types.is_int64_dtype.html#pandas.api.types.is_int64_dtype
    "pandas.api.types.is_int64_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    the provided array or dtype is of the int64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer_dtype`](api/pandas.api.types.is_integer_dtype.html#pandas.api.types.is_integer_dtype
    "pandas.api.types.is_integer_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of an integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval_dtype`](api/pandas.api.types.is_interval_dtype.html#pandas.api.types.is_interval_dtype
    "pandas.api.types.is_interval_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Interval dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_numeric_dtype`](api/pandas.api.types.is_numeric_dtype.html#pandas.api.types.is_numeric_dtype
    "pandas.api.types.is_numeric_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of a numeric dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_object_dtype`](api/pandas.api.types.is_object_dtype.html#pandas.api.types.is_object_dtype
    "pandas.api.types.is_object_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the object dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_period_dtype`](api/pandas.api.types.is_period_dtype.html#pandas.api.types.is_period_dtype
    "pandas.api.types.is_period_dtype")(arr_or_dtype) | (DEPRECATED) Check whether
    an array-like or dtype is of the Period dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_signed_integer_dtype`](api/pandas.api.types.is_signed_integer_dtype.html#pandas.api.types.is_signed_integer_dtype
    "pandas.api.types.is_signed_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of a signed integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_string_dtype`](api/pandas.api.types.is_string_dtype.html#pandas.api.types.is_string_dtype
    "pandas.api.types.is_string_dtype")(arr_or_dtype) | Check whether the provided
    array or dtype is of the string dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_dtype`](api/pandas.api.types.is_timedelta64_dtype.html#pandas.api.types.is_timedelta64_dtype
    "pandas.api.types.is_timedelta64_dtype")(arr_or_dtype) | Check whether an array-like
    or dtype is of the timedelta64 dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_timedelta64_ns_dtype`](api/pandas.api.types.is_timedelta64_ns_dtype.html#pandas.api.types.is_timedelta64_ns_dtype
    "pandas.api.types.is_timedelta64_ns_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of the timedelta64[ns] dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_unsigned_integer_dtype`](api/pandas.api.types.is_unsigned_integer_dtype.html#pandas.api.types.is_unsigned_integer_dtype
    "pandas.api.types.is_unsigned_integer_dtype")(arr_or_dtype) | Check whether the
    provided array or dtype is of an unsigned integer dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_sparse`](api/pandas.api.types.is_sparse.html#pandas.api.types.is_sparse
    "pandas.api.types.is_sparse")(arr) | (DEPRECATED) Check whether an array-like
    is a 1-D pandas sparse array. |'
  prefs: []
  type: TYPE_TB
- en: Iterable introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_dict_like`](api/pandas.api.types.is_dict_like.html#pandas.api.types.is_dict_like
    "pandas.api.types.is_dict_like")(obj) | Check if the object is dict-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_file_like`](api/pandas.api.types.is_file_like.html#pandas.api.types.is_file_like
    "pandas.api.types.is_file_like")(obj) | Check if the object is a file-like object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_list_like`](api/pandas.api.types.is_list_like.html#pandas.api.types.is_list_like
    "pandas.api.types.is_list_like")(obj[, allow_sets]) | Check if the object is list-like.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_named_tuple`](api/pandas.api.types.is_named_tuple.html#pandas.api.types.is_named_tuple
    "pandas.api.types.is_named_tuple")(obj) | Check if the object is a named tuple.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_iterator`](api/pandas.api.types.is_iterator.html#pandas.api.types.is_iterator
    "pandas.api.types.is_iterator")(obj) | Check if the object is an iterator. |'
  prefs: []
  type: TYPE_TB
- en: Scalar introspection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`api.types.is_bool`](api/pandas.api.types.is_bool.html#pandas.api.types.is_bool
    "pandas.api.types.is_bool")(obj) | Return True if given object is boolean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_complex`](api/pandas.api.types.is_complex.html#pandas.api.types.is_complex
    "pandas.api.types.is_complex")(obj) | Return True if given object is complex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_float`](api/pandas.api.types.is_float.html#pandas.api.types.is_float
    "pandas.api.types.is_float")(obj) | Return True if given object is float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_hashable`](api/pandas.api.types.is_hashable.html#pandas.api.types.is_hashable
    "pandas.api.types.is_hashable")(obj) | Return True if hash(obj) will succeed,
    False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_integer`](api/pandas.api.types.is_integer.html#pandas.api.types.is_integer
    "pandas.api.types.is_integer")(obj) | Return True if given object is integer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_interval`](api/pandas.api.types.is_interval.html#pandas.api.types.is_interval
    "pandas.api.types.is_interval")(obj) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_number`](api/pandas.api.types.is_number.html#pandas.api.types.is_number
    "pandas.api.types.is_number")(obj) | Check if the object is a number. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re`](api/pandas.api.types.is_re.html#pandas.api.types.is_re
    "pandas.api.types.is_re")(obj) | Check if the object is a regex pattern instance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_re_compilable`](api/pandas.api.types.is_re_compilable.html#pandas.api.types.is_re_compilable
    "pandas.api.types.is_re_compilable")(obj) | Check if the object can be compiled
    into a regex pattern instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`api.types.is_scalar`](api/pandas.api.types.is_scalar.html#pandas.api.types.is_scalar
    "pandas.api.types.is_scalar")(val) | Return True if given object is scalar. |'
  prefs: []
  type: TYPE_TB
