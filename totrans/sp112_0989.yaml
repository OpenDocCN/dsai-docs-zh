- en: scipy.special.roots_hermitenorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.roots_hermitenorm.html#scipy.special.roots_hermitenorm](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.roots_hermitenorm.html#scipy.special.roots_hermitenorm)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Gauss-Hermite (statistician’s) quadrature.
  prefs: []
  type: TYPE_NORMAL
- en: Compute the sample points and weights for Gauss-Hermite quadrature. The sample
    points are the roots of the nth degree Hermite polynomial, \(He_n(x)\). These
    sample points and weights correctly integrate polynomials of degree \(2n - 1\)
    or less over the interval \([-\infty, \infty]\) with weight function \(w(x) =
    e^{-x^2/2}\). See 22.2.15 in [[AS]](#rbffaa63acf42-as) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: quadrature order
  prefs: []
  type: TYPE_NORMAL
- en: '**mu**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return the sum of the weights, optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Sample points
  prefs: []
  type: TYPE_NORMAL
- en: '**w**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Weights
  prefs: []
  type: TYPE_NORMAL
- en: '**mu**float'
  prefs: []
  type: TYPE_NORMAL
- en: Sum of the weights
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.integrate.quadrature`](scipy.integrate.quadrature.html#scipy.integrate.quadrature
    "scipy.integrate.quadrature")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.integrate.fixed_quad`](scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad
    "scipy.integrate.fixed_quad")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.polynomial.hermite_e.hermegauss`](https://numpy.org/devdocs/reference/generated/numpy.polynomial.hermite_e.hermegauss.html#numpy.polynomial.hermite_e.hermegauss
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For small n up to 150 a modified version of the Golub-Welsch algorithm is used.
    Nodes are computed from the eigenvalue problem and improved by one step of a Newton
    iteration. The weights are computed from the well-known analytical formula.
  prefs: []
  type: TYPE_NORMAL
- en: For n larger than 150 an optimal asymptotic algorithm is used which computes
    nodes and weights in a numerical stable manner. The algorithm has linear runtime
    making computation for very large n (several thousand or more) feasible.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[AS](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Milton Abramowitz and Irene A. Stegun, eds. Handbook of Mathematical Functions
    with Formulas, Graphs, and Mathematical Tables. New York: Dover, 1972.'
  prefs: []
  type: TYPE_NORMAL
