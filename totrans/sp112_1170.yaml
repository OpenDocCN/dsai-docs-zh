- en: scipy.stats.levy_stable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.levy_stable.html#scipy.stats.levy_stable](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.levy_stable.html#scipy.stats.levy_stable)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Levy-stable continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`levy_stable`](#scipy.stats.levy_stable "scipy.stats.levy_stable")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`levy`](scipy.stats.levy.html#scipy.stats.levy "scipy.stats.levy"), [`levy_l`](scipy.stats.levy_l.html#scipy.stats.levy_l
    "scipy.stats.levy_l"), [`cauchy`](scipy.stats.cauchy.html#scipy.stats.cauchy "scipy.stats.cauchy"),
    [`norm`](scipy.stats.norm.html#scipy.stats.norm "scipy.stats.norm")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The distribution for [`levy_stable`](#scipy.stats.levy_stable "scipy.stats.levy_stable")
    has characteristic function:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\varphi(t, \alpha, \beta, c, \mu) = e^{it\mu -|ct|^{\alpha}(1-i\beta\operatorname{sign}(t)\Phi(\alpha,
    t))}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where two different parameterizations are supported. The first \(S_1\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\Phi = \begin{cases} \tan \left({\frac {\pi \alpha }{2}}\right)&\alpha
    \neq 1\\ -{\frac {2}{\pi }}\log |t|&\alpha =1 \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'The second \(S_0\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\Phi = \begin{cases} -\tan \left({\frac {\pi \alpha }{2}}\right)(|ct|^{1-\alpha}-1)
    &\alpha \neq 1\\ -{\frac {2}{\pi }}\log |ct|&\alpha =1 \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`levy_stable`](#scipy.stats.levy_stable
    "scipy.stats.levy_stable") is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) = \frac{1}{2\pi}\int_{-\infty}^\infty \varphi(t)e^{-ixt}\,dt\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(-\infty < t < \infty\). This integral does not have a known closed form.
  prefs: []
  type: TYPE_NORMAL
- en: '[`levy_stable`](#scipy.stats.levy_stable "scipy.stats.levy_stable") generalizes
    several distributions. Where possible, they should be used instead. Specifically,
    when the shape parameters assume the values in the table below, the corresponding
    equivalent distribution should be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '| `alpha` | `beta` | Equivalent |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1/2 | -1 | [`levy_l`](scipy.stats.levy_l.html#scipy.stats.levy_l "scipy.stats.levy_l")
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1/2 | 1 | [`levy`](scipy.stats.levy.html#scipy.stats.levy "scipy.stats.levy")
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0 | [`cauchy`](scipy.stats.cauchy.html#scipy.stats.cauchy "scipy.stats.cauchy")
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | any | [`norm`](scipy.stats.norm.html#scipy.stats.norm "scipy.stats.norm")
    (with `scale=sqrt(2)`) |'
  prefs: []
  type: TYPE_TB
- en: Evaluation of the pdf uses Nolan’s piecewise integration approach with the Zolotarev
    \(M\) parameterization by default. There is also the option to use direct numerical
    integration of the standard parameterization of the characteristic function or
    to evaluate by taking the FFT of the characteristic function.
  prefs: []
  type: TYPE_NORMAL
- en: The default method can changed by setting the class variable `levy_stable.pdf_default_method`
    to one of ‘piecewise’ for Nolan’s approach, ‘dni’ for direct numerical integration,
    or ‘fft-simpson’ for the FFT based approach. For the sake of backwards compatibility,
    the methods ‘best’ and ‘zolotarev’ are equivalent to ‘piecewise’ and the method
    ‘quadrature’ is equivalent to ‘dni’.
  prefs: []
  type: TYPE_NORMAL
- en: The parameterization can be changed by setting the class variable `levy_stable.parameterization`
    to either ‘S0’ or ‘S1’. The default is ‘S1’.
  prefs: []
  type: TYPE_NORMAL
- en: To improve performance of piecewise and direct numerical integration one can
    specify `levy_stable.quad_eps` (defaults to 1.2e-14). This is used as both the
    absolute and relative quadrature tolerance for direct numerical integration and
    as the relative quadrature tolerance for the piecewise method. One can also specify
    `levy_stable.piecewise_x_tol_near_zeta` (defaults to 0.005) for how close x is
    to zeta before it is considered the same as x [NO]. The exact check is `abs(x0
    - zeta) < piecewise_x_tol_near_zeta*alpha**(1/alpha)`. One can also specify `levy_stable.piecewise_alpha_tol_near_one`
    (defaults to 0.005) for how close alpha is to 1 before being considered equal
    to 1.
  prefs: []
  type: TYPE_NORMAL
- en: To increase accuracy of FFT calculation one can specify `levy_stable.pdf_fft_grid_spacing`
    (defaults to 0.001) and `pdf_fft_n_points_two_power` (defaults to None which means
    a value is calculated that sufficiently covers the input range).
  prefs: []
  type: TYPE_NORMAL
- en: Further control over FFT calculation is available by setting `pdf_fft_interpolation_degree`
    (defaults to 3) for spline order and `pdf_fft_interpolation_level` for determining
    the number of points to use in the Newton-Cotes formula when approximating the
    characteristic function (considered experimental).
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of the cdf uses Nolan’s piecewise integration approach with the Zolatarev
    \(S_0\) parameterization by default. There is also the option to evaluate through
    integration of an interpolated spline of the pdf calculated by means of the FFT
    method. The settings affecting FFT calculation are the same as for pdf calculation.
    The default cdf method can be changed by setting `levy_stable.cdf_default_method`
    to either ‘piecewise’ or ‘fft-simpson’. For cdf calculations the Zolatarev method
    is superior in accuracy, so FFT is disabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting estimate uses quantile estimation method in [MC]. MLE estimation of
    parameters in fit method uses this quantile estimate initially. Note that MLE
    doesn’t always converge if using FFT for pdf calculations; this will be the case
    if alpha <= 1 where the FFT approach doesn’t give good approximations.
  prefs: []
  type: TYPE_NORMAL
- en: Any non-missing value for the attribute `levy_stable.pdf_fft_min_points_threshold`
    will set `levy_stable.pdf_default_method` to ‘fft-simpson’ if a valid default
    method is not otherwise set.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For pdf calculations FFT calculation is considered experimental.
  prefs: []
  type: TYPE_NORMAL
- en: For cdf calculations FFT calculation is considered experimental. Use Zolatarev’s
    method instead (default).
  prefs: []
  type: TYPE_NORMAL
- en: The probability density above is defined in the “standardized” form. To shift
    and/or scale the distribution use the `loc` and `scale` parameters. Generally
    `levy_stable.pdf(x, alpha, beta, loc, scale)` is identically equivalent to `levy_stable.pdf(y,
    alpha, beta) / scale` with `y = (x - loc) / scale`, except in the `S1` parameterization
    if `alpha == 1`. In that case `levy_stable.pdf(x, alpha, beta, loc, scale)` is
    identically equivalent to `levy_stable.pdf(y, alpha, beta) / scale` with `y =
    (x - loc - 2 * beta * scale * np.log(scale) / np.pi) / scale`. See [[NO2]](#ra1ccd135b5f7-no2)
    Definition 1.8 for more information. Note that shifting the location of a distribution
    does not make it a “noncentral” distribution.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[MC]'
  prefs: []
  type: TYPE_NORMAL
- en: McCulloch, J., 1986\. Simple consistent estimators of stable distribution parameters.
    Communications in Statistics - Simulation and Computation 15, 11091136.
  prefs: []
  type: TYPE_NORMAL
- en: '[WZ]'
  prefs: []
  type: TYPE_NORMAL
- en: Wang, Li and Zhang, Ji-Hong, 2008\. Simpson’s rule based FFT method to compute
    densities of stable distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[NO]'
  prefs: []
  type: TYPE_NORMAL
- en: Nolan, J., 1997\. Numerical Calculation of Stable Densities and distributions
    Functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[[NO2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nolan, J., 2018\. Stable Distributions: Models for Heavy Tailed Data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[HO]'
  prefs: []
  type: TYPE_NORMAL
- en: Hopcraft, K. I., Jakeman, E., Tanner, R. M. J., 1999\. Lévy random walks with
    fluctuating step number and multiscale behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability density function (`pdf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape, location and scale parameters. This returns a “frozen” RV object holding
    the given parameters fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And compare the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-levy_stable-1.png](../Images/f936bfc271df9e9026d233a50456480e.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(alpha, beta, loc=0, scale=1, size=1, random_state=None)** | Random
    variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, alpha, beta, loc=0, scale=1)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, alpha, beta, loc=0, scale=1)** | Log of the probability density
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, alpha, beta, loc=0, scale=1)** | Cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, alpha, beta, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, alpha, beta, loc=0, scale=1)** | Survival function (also defined
    as `1 - cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, alpha, beta, loc=0, scale=1)** | Log of the survival function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, alpha, beta, loc=0, scale=1)** | Percent point function (inverse
    of `cdf` — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, alpha, beta, loc=0, scale=1)** | Inverse survival function (inverse
    of `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, alpha, beta, loc=0, scale=1)** | Non-central moment of the
    specified order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(alpha, beta, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(alpha, beta, loc=0, scale=1)** | (Differential) entropy of the
    RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(alpha, beta), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(alpha, beta, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(alpha, beta, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(alpha, beta, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(alpha, beta, loc=0, scale=1)** | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, alpha, beta, loc=0, scale=1)** | Confidence interval
    with equal areas around the median. |'
  prefs: []
  type: TYPE_TB
