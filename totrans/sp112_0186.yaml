- en: scipy.interpolate.make_lsq_spline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_lsq_spline.html#scipy.interpolate.make_lsq_spline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_lsq_spline.html#scipy.interpolate.make_lsq_spline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the (coefficients of) an LSQ (Least SQuared) based fitting B-spline.
  prefs: []
  type: TYPE_NORMAL
- en: The result is a linear combination
  prefs: []
  type: TYPE_NORMAL
- en: \[S(x) = \sum_j c_j B_j(x; t)\]
  prefs: []
  type: TYPE_NORMAL
- en: of the B-spline basis elements, \(B_j(x; t)\), which minimizes
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum_{j} \left( w_j \times (S(x_j) - y_j) \right)^2\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like, shape (m,)'
  prefs: []
  type: TYPE_NORMAL
- en: Abscissas.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like, shape (m, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Ordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array_like, shape (n + k + 1,).'
  prefs: []
  type: TYPE_NORMAL
- en: Knots. Knots and data points must satisfy Schoenberg-Whitney conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: B-spline degree. Default is cubic, `k = 3`.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**array_like, shape (m,), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Weights for spline fitting. Must be positive. If `None`, then weights are all
    equal. Default is `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis. Default is zero.
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input arrays contain only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination)
    if the inputs do contain infinities or NaNs. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**a BSpline object of the degree `k` with knots `t`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: base class representing the B-spline objects
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_interp_spline`](scipy.interpolate.make_interp_spline.html#scipy.interpolate.make_interp_spline
    "scipy.interpolate.make_interp_spline")'
  prefs: []
  type: TYPE_NORMAL
- en: a similar factory function for interpolating splines
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQUnivariateSpline`](scipy.interpolate.LSQUnivariateSpline.html#scipy.interpolate.LSQUnivariateSpline
    "scipy.interpolate.LSQUnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a FITPACK-based spline fitting routine
  prefs: []
  type: TYPE_NORMAL
- en: '[`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a FITPACK-based fitting routine
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The number of data points must be larger than the spline degree `k`.
  prefs: []
  type: TYPE_NORMAL
- en: Knots `t` must satisfy the Schoenberg-Whitney conditions, i.e., there must be
    a subset of data points `x[j]` such that `t[j] < x[j] < t[j+k+1]`, for `j=0, 1,...,n-k-2`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate some noisy data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now fit a smoothing cubic spline with a pre-defined internal knots. Here we
    make the knot vector (k+1)-regular by adding boundary knots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For comparison, we also construct an interpolating spline for the same set
    of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-make_lsq_spline-1_00_00.png](../Images/a77acd7331b5bc5d7d13726665ff38ef.png)'
  prefs: []
  type: TYPE_IMG
- en: '**NaN handling**: If the input arrays contain `nan` values, the result is not
    useful since the underlying spline fitting routines cannot deal with `nan`. A
    workaround is to use zero weights for not-a-number data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice the need to replace a `nan` by a numerical value (precise value does
    not matter as long as the corresponding weight is zero.)
  prefs: []
  type: TYPE_NORMAL
