- en: pandas.array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.array.html](https://pandas.pydata.org/docs/reference/api/pandas.array.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**Sequence of objects'
  prefs: []
  type: TYPE_NORMAL
- en: The scalars inside data should be instances of the scalar type for dtype. It’s
    expected that data represents a 1-dimensional array of data.
  prefs: []
  type: TYPE_NORMAL
- en: When data is an Index or Series, the underlying array will be extracted from
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str, np.dtype, or ExtensionDtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The dtype to use for the array. This may be a NumPy dtype or an extension type
    registered with pandas using [`pandas.api.extensions.register_extension_dtype()`](pandas.api.extensions.register_extension_dtype.html#pandas.api.extensions.register_extension_dtype
    "pandas.api.extensions.register_extension_dtype").
  prefs: []
  type: TYPE_NORMAL
- en: 'If not specified, there are two possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: When data is a [`Series`](pandas.Series.html#pandas.Series "pandas.Series"),
    [`Index`](pandas.Index.html#pandas.Index "pandas.Index"), or `ExtensionArray`,
    the dtype will be taken from the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, pandas will attempt to infer the dtype from the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that when data is a NumPy array, `data.dtype` is *not* used for inferring
    the array type. This is because NumPy cannot represent all the types of data that
    can be held in extension arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, pandas will infer an extension dtype for sequences of
  prefs: []
  type: TYPE_NORMAL
- en: '| Scalar Type | Array Type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`pandas.Interval`](pandas.Interval.html#pandas.Interval "pandas.Interval")
    | [`pandas.arrays.IntervalArray`](pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`pandas.Period`](pandas.Period.html#pandas.Period "pandas.Period") | [`pandas.arrays.PeriodArray`](pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") | [`pandas.arrays.DatetimeArray`](pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.12)") | [`pandas.arrays.TimedeltaArray`](pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`int`](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.12)") | [`pandas.arrays.IntegerArray`](pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.12)") | [`pandas.arrays.FloatingArray`](pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
    | [`pandas.arrays.StringArray`](pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") or [`pandas.arrays.ArrowStringArray`](pandas.arrays.ArrowStringArray.html#pandas.arrays.ArrowStringArray
    "pandas.arrays.ArrowStringArray") |'
  prefs: []
  type: TYPE_TB
- en: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python
    v3.12)") | [`pandas.arrays.BooleanArray`](pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") |'
  prefs: []
  type: TYPE_TB
- en: The ExtensionArray created when the scalar type is [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") is determined by `pd.options.mode.string_storage` if the
    dtype is not explicitly given.
  prefs: []
  type: TYPE_NORMAL
- en: For all other cases, NumPy’s usual inference rules will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to copy the data, even if not necessary. Depending on the type of data,
    creating the new array may require copying data, even if `copy=False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ExtensionArray
  prefs: []
  type: TYPE_NORMAL
- en: The newly created array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: When data is not 1-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.array`](https://numpy.org/doc/stable/reference/generated/numpy.array.html#numpy.array
    "(in NumPy v1.26)")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series`](pandas.Series.html#pandas.Series "pandas.Series")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a pandas Series.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Index`](pandas.Index.html#pandas.Index "pandas.Index")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a pandas Index.
  prefs: []
  type: TYPE_NORMAL
- en: '[`arrays.NumpyExtensionArray`](pandas.arrays.NumpyExtensionArray.html#pandas.arrays.NumpyExtensionArray
    "pandas.arrays.NumpyExtensionArray")'
  prefs: []
  type: TYPE_NORMAL
- en: ExtensionArray wrapping a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.array`](pandas.Series.array.html#pandas.Series.array "pandas.Series.array")'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the array stored within a Series.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Omitting the dtype argument means pandas will attempt to infer the best array
    type from the values in the data. As new array types are added by pandas and 3rd
    party libraries, the “best” array type may change. We recommend specifying dtype
    to ensure that
  prefs: []
  type: TYPE_NORMAL
- en: the correct array type for the data is returned
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the returned array type doesn’t change as new extension types are added by pandas
    and third-party libraries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additionally, if the underlying memory representation of the returned array
    matters, we recommend specifying the dtype as a concrete object rather than a
    string alias or allowing it to be inferred. For example, a future version of pandas
    or a 3rd-party library may include a dedicated ExtensionArray for string data.
    In this event, the following would no longer return a [`arrays.NumpyExtensionArray`](pandas.arrays.NumpyExtensionArray.html#pandas.arrays.NumpyExtensionArray
    "pandas.arrays.NumpyExtensionArray") backed by a NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This would instead return the new ExtensionArray dedicated for string data.
    If you really need the new array to be backed by a NumPy array, specify that in
    the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, Pandas has arrays that mostly overlap with NumPy
  prefs: []
  type: TYPE_NORMAL
- en: '[`arrays.DatetimeArray`](pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`arrays.TimedeltaArray`](pandas.arrays.TimedeltaArray.html#pandas.arrays.TimedeltaArray
    "pandas.arrays.TimedeltaArray")'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: When data with a `datetime64[ns]` or `timedelta64[ns]` dtype is passed, pandas
    will always return a `DatetimeArray` or `TimedeltaArray` rather than a `NumpyExtensionArray`.
    This is for symmetry with the case of timezone-aware data, which NumPy does not
    natively support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: If a dtype is not specified, pandas will infer the best dtype from the values.
    See the description of dtype for the types pandas infers for.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can use the string alias for dtype
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Or specify the actual dtype
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If pandas does not infer a dedicated extension type a [`arrays.NumpyExtensionArray`](pandas.arrays.NumpyExtensionArray.html#pandas.arrays.NumpyExtensionArray
    "pandas.arrays.NumpyExtensionArray") is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the “Notes” section, new extension types may be added in the
    future (by pandas or 3rd party libraries), causing the return value to no longer
    be a [`arrays.NumpyExtensionArray`](pandas.arrays.NumpyExtensionArray.html#pandas.arrays.NumpyExtensionArray
    "pandas.arrays.NumpyExtensionArray"). Specify the dtype as a NumPy dtype if you
    need to ensure there’s no future change in behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: data must be 1-dimensional. A ValueError is raised when the input has the wrong
    dimensionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
