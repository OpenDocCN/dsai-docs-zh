["```py\nclass sympy.combinatorics.graycode.GrayCode(n, *args, **kw_args)\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3)\n>>> list(a.generate_gray())\n['000', '001', '011', '010', '110', '111', '101', '100']\n>>> a = GrayCode(4)\n>>> list(a.generate_gray())\n['0000', '0001', '0011', '0010', '0110', '0111', '0101', '0100',     '1100', '1101', '1111', '1110', '1010', '1011', '1001', '1000'] \n```", "```py\nproperty current\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> GrayCode(3, start='100').current\n'100' \n```", "```py\ngenerate_gray(**hints)\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3)\n>>> list(a.generate_gray())\n['000', '001', '011', '010', '110', '111', '101', '100']\n>>> list(a.generate_gray(start='011'))\n['011', '010', '110', '111', '101', '100']\n>>> list(a.generate_gray(rank=4))\n['110', '111', '101', '100'] \n```", "```py\nproperty n\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(5)\n>>> a.n\n5 \n```", "```py\nnext(delta=1)\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3, start='110')\n>>> a.next().current\n'111'\n>>> a.next(-1).current\n'010' \n```", "```py\nproperty rank\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3)\n>>> list(a.generate_gray())\n['000', '001', '011', '010', '110', '111', '101', '100']\n>>> GrayCode(3, start='100').rank\n7\n>>> GrayCode(3, rank=7).current\n'100' \n```", "```py\nproperty selections\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3)\n>>> a.selections\n8 \n```", "```py\nskip()\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> a = GrayCode(3)\n>>> for i in a.generate_gray():\n...     if i == '010':\n...         a.skip()\n...     print(i)\n...\n000\n001\n011\n010\n111\n101\n100 \n```", "```py\nclassmethod unrank(n, rank)\n```", "```py\n>>> from sympy.combinatorics import GrayCode\n>>> GrayCode(5, rank=3).current\n'00010'\n>>> GrayCode.unrank(5, 3)\n'00010' \n```", "```py\ngraycode.random_bitstring()\n```", "```py\n>>> from sympy.combinatorics.graycode import random_bitstring\n>>> random_bitstring(3) \n100 \n```", "```py\ngraycode.gray_to_bin()\n```", "```py\n>>> from sympy.combinatorics.graycode import gray_to_bin\n>>> gray_to_bin('100')\n'111' \n```", "```py\ngraycode.bin_to_gray()\n```", "```py\n>>> from sympy.combinatorics.graycode import bin_to_gray\n>>> bin_to_gray('111')\n'100' \n```", "```py\ngraycode.get_subset_from_bitstring(bitstring)\n```", "```py\n>>> from sympy.combinatorics.graycode import get_subset_from_bitstring\n>>> get_subset_from_bitstring(['a', 'b', 'c', 'd'], '0011')\n['c', 'd']\n>>> get_subset_from_bitstring(['c', 'a', 'c', 'c'], '1100')\n['c', 'a'] \n```", "```py\ngraycode.graycode_subsets()\n```", "```py\n>>> from sympy.combinatorics.graycode import graycode_subsets\n>>> list(graycode_subsets(['a', 'b', 'c']))\n[[], ['c'], ['b', 'c'], ['b'], ['a', 'b'], ['a', 'b', 'c'],     ['a', 'c'], ['a']]\n>>> list(graycode_subsets(['a', 'b', 'c', 'c']))\n[[], ['c'], ['c', 'c'], ['c'], ['b', 'c'], ['b', 'c', 'c'],     ['b', 'c'], ['b'], ['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'c'],     ['a', 'b', 'c'], ['a', 'c'], ['a', 'c', 'c'], ['a', 'c'], ['a']] \n```"]