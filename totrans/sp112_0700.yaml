- en: scipy.sparse.bmat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.bmat.html#scipy.sparse.bmat](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.bmat.html#scipy.sparse.bmat)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Build a sparse array or matrix from sparse sub-blocks
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: [`block_array`](scipy.sparse.block_array.html#scipy.sparse.block_array
    "scipy.sparse.block_array") is preferred over [`bmat`](#scipy.sparse.bmat "scipy.sparse.bmat").
    They are the same function except that [`bmat`](#scipy.sparse.bmat "scipy.sparse.bmat")
    can return a deprecated sparse matrix. [`bmat`](#scipy.sparse.bmat "scipy.sparse.bmat")
    returns a coo_matrix if none of the inputs are a sparse array.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a sparse matrix – not a sparse array. You are encouraged
    to use `block_array` to take advantage of the sparse array functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**blocks**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Grid of sparse matrices with compatible shapes. An entry of None implies an
    all-zero matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**format**{‘bsr’, ‘coo’, ‘csc’, ‘csr’, ‘dia’, ‘dok’, ‘lil’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sparse format of the result (e.g. “csr”). By default an appropriate sparse
    matrix format is returned. This choice is subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The data-type of the output matrix. If not given, the dtype is determined from
    that of *blocks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bmat**sparse matrix or array'
  prefs: []
  type: TYPE_NORMAL
- en: If any block in blocks is a sparse array, return a sparse array. Otherwise return
    a sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a sparse array built from blocks that are not sparse arrays, use
    *block_array()*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`block_array`](scipy.sparse.block_array.html#scipy.sparse.block_array "scipy.sparse.block_array")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
