- en: Stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/stats.html](https://docs.sympy.org/latest/modules/stats.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SymPy statistics module
  prefs: []
  type: TYPE_NORMAL
- en: Introduces a random variable type into the SymPy language.
  prefs: []
  type: TYPE_NORMAL
- en: Random variables may be declared using prebuilt functions such as Normal, Exponential,
    Coin, Die, etc… or built with functions like FiniteRV.
  prefs: []
  type: TYPE_NORMAL
- en: Queries on random expressions can be made using the functions
  prefs: []
  type: TYPE_NORMAL
- en: '| Expression | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| `P(condition)` | Probability |'
  prefs: []
  type: TYPE_TB
- en: '| `E(expression)` | Expected value |'
  prefs: []
  type: TYPE_TB
- en: '| `H(expression)` | Entropy |'
  prefs: []
  type: TYPE_TB
- en: '| `variance(expression)` | Variance |'
  prefs: []
  type: TYPE_TB
- en: '| `density(expression)` | Probability Density Function |'
  prefs: []
  type: TYPE_TB
- en: '| `sample(expression)` | Produce a realization |'
  prefs: []
  type: TYPE_TB
- en: '| `where(condition)` | Where the condition is true |'
  prefs: []
  type: TYPE_TB
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'One could also create custom distribution and define custom random variables
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to create a Continuous Random Variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '1.1 To create an instance of Continuous Distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to create a Discrete Random Variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '2.1 To create an instance of Discrete Distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to create a Finite Random Variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '3.1 To create an instance of Finite Distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Random Variable Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finite Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a uniform distribution over the
    input set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**items** : list/tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Items over which Uniform distribution is to be made
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R896](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Discrete_uniform_distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R897](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/DiscreteUniformDistribution.html](https://mathworld.wolfram.com/DiscreteUniformDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a fair die.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sides** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the number of sides of the Die, by default is 6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a Bernoulli process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Rational number between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: Represents probability of success
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**succ** : Integer/symbol/string'
  prefs: []
  type: TYPE_NORMAL
- en: Represents event of success
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**fail** : Integer/symbol/string'
  prefs: []
  type: TYPE_NORMAL
- en: Represents event of failure
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R898](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bernoulli_distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R899](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BernoulliDistribution.html](https://mathworld.wolfram.com/BernoulliDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a Coin toss.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Rational Number between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: Represents probability of getting “Heads”, by default is Half
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.stats.Binomial`](#sympy.stats.Binomial "sympy.stats.Binomial")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R900](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Coin_flipping](https://en.wikipedia.org/wiki/Coin_flipping)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Positive Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents number of trials
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p** : Rational Number between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: Represents probability of success
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**succ** : Integer/symbol/string'
  prefs: []
  type: TYPE_NORMAL
- en: Represents event of success, by default is 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**fail** : Integer/symbol/string'
  prefs: []
  type: TYPE_NORMAL
- en: Represents event of failure, by default is 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R901](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Binomial_distribution](https://en.wikipedia.org/wiki/Binomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R902](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BinomialDistribution.html](https://mathworld.wolfram.com/BinomialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a Beta-binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Positive Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents number of trials
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alpha** : Real positive number'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real positive number'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R903](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Beta-binomial_distribution](https://en.wikipedia.org/wiki/Beta-binomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R904](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BetaBinomialDistribution.html](https://mathworld.wolfram.com/BetaBinomialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a hypergeometric distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N** : Positive Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents finite population of size N.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**m** : Positive Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents number of trials with required feature.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : Positive Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents numbers of draws.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R905](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hypergeometric_distribution](https://en.wikipedia.org/wiki/Hypergeometric_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R906](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/HypergeometricDistribution.html](https://mathworld.wolfram.com/HypergeometricDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable given a dict representing the density.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Represents name of the random variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**density** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary containing the pdf of finite distribution
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, it will check whether the given density integrates to 1 over the given
    set. If False, it will not perform this check. Default is False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Create a Finite Random Variable representing a Rademacher distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.stats.Bernoulli`](#sympy.stats.Bernoulli "sympy.stats.Bernoulli")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R907](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Rademacher_distribution](https://en.wikipedia.org/wiki/Rademacher_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: Discrete Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Geometric distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : A probability between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Geometric distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := p (1 - p)^{k - 1}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R908](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Geometric_distribution](https://en.wikipedia.org/wiki/Geometric_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R909](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/GeometricDistribution.html](https://mathworld.wolfram.com/GeometricDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Hermite distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a1** : A Positive number greater than equal to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**a2** : A Positive number greater than equal to 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Hermite distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x):= e^{-a_1 -a_2}\sum_{j=0}^{\left \lfloor x/2 \right \rfloor} \frac{a_{1}^{x-2j}a_{2}^{j}}{(x-2j)!j!}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R910](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hermite_distribution](https://en.wikipedia.org/wiki/Hermite_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Poisson distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : Positive number, a rate'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Poisson distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := \frac{\lambda^{k} e^{- \lambda}}{k!}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R911](#id16)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Poisson_distribution](https://en.wikipedia.org/wiki/Poisson_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R912](#id17)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/PoissonDistribution.html](https://mathworld.wolfram.com/PoissonDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Logarithmic distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : A value between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Logarithmic distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := \frac{-p^k}{k \ln{(1 - p)}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R913](#id18)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logarithmic_distribution](https://en.wikipedia.org/wiki/Logarithmic_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R914](#id19)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogarithmicDistribution.html](https://mathworld.wolfram.com/LogarithmicDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Negative Binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** : A positive value'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : A value between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Negative Binomial distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := \binom{k + r - 1}{k} (1 - p)^r p^k\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R915](#id20)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Negative_binomial_distribution](https://en.wikipedia.org/wiki/Negative_binomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R916](#id21)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/NegativeBinomialDistribution.html](https://mathworld.wolfram.com/NegativeBinomialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Skellam distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu1** : A non-negative value'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu2** : A non-negative value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Skellam is the distribution of the difference N1 - N2 of two statistically
    independent random variables N1 and N2 each Poisson-distributed with respective
    expected values mu1 and mu2.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Skellam distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := e^{-(\mu_1+\mu_2)}(\frac{\mu_1}{\mu_2})^{k/2}I_k(2\sqrt{\mu_1\mu_2})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R917](#id22)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Skellam_distribution](https://en.wikipedia.org/wiki/Skellam_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Yule-Simon distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rho** : A positive value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Yule-Simon distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := \rho B(k, \rho + 1)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R918](#id23)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Yule%E2%80%93Simon_distribution](https://en.wikipedia.org/wiki/Yule%E2%80%93Simon_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Create a discrete random variable with a Zeta distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**s** : A value greater than 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Zeta distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) := \frac{1}{k^s \zeta{(s)}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R919](#id24)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Zeta_distribution](https://en.wikipedia.org/wiki/Zeta_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with an arcsin distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the arcsin distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{\pi\sqrt{(x-a)(b-x)}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in (a,b)\). It must hold that \(-\infty < a < b < \infty\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, the left interval boundary'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, the right interval boundary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R920](#id25)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Arcsine_distribution](https://en.wikipedia.org/wiki/Arcsine_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a Benini distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Benini distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := e^{-\alpha\log{\frac{x}{\sigma}} -\beta\log^2\left[{\frac{x}{\sigma}}\right]}
    \left(\frac{\alpha}{x}+\frac{2\beta\log{\frac{x}{\sigma}}}{x}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: This is a heavy-tailed distribution and is also known as the log-Rayleigh distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma** : Real number, \(\sigma > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R921](#id26)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Benini_distribution](https://en.wikipedia.org/wiki/Benini_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R922](#id27)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reference.wolfram.com/legacy/v8/ref/BeniniDistribution.html](https://reference.wolfram.com/legacy/v8/ref/BeniniDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a Beta distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Beta distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{x^{\alpha-1}(1-x)^{\beta-1}} {\mathrm{B}(\alpha,\beta)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,1]\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R923](#id28)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Beta_distribution](https://en.wikipedia.org/wiki/Beta_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R924](#id29)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BetaDistribution.html](https://mathworld.wolfram.com/BetaDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a Type I Noncentral Beta distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Noncentral Beta distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \sum_{k=0}^\infty e^{-\lambda/2}\frac{(\lambda/2)^k}{k!} \frac{x^{\alpha+k-1}(1-x)^{\beta-1}}{\mathrm{B}(\alpha+k,\beta)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,1]\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : Real number, \(\lambda \geq 0\), noncentrality parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute cdf with specific ‘x’, ‘alpha’, ‘beta’ and ‘lamda’ values as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The argument evaluate=False prevents an attempt at evaluation of the sum for
    general x, before the argument 2 is passed.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R925](#id30)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Noncentral_beta_distribution](https://en.wikipedia.org/wiki/Noncentral_beta_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R926](#id31)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reference.wolfram.com/language/ref/NoncentralBetaDistribution.html](https://reference.wolfram.com/language/ref/NoncentralBetaDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Beta prime distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Beta prime distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{x^{\alpha-1} (1+x)^{-\alpha -\beta}}{B(\alpha,\beta)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R927](#id32)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Beta_prime_distribution](https://en.wikipedia.org/wiki/Beta_prime_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R928](#id33)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BetaPrimeDistribution.html](https://mathworld.wolfram.com/BetaPrimeDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Bounded Pareto distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Bounded Pareto distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\alpha L^{\alpha}x^{-\alpha-1}}{1-(\frac{L}{H})^{\alpha}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real Number, \(\alpha > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Shape parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**left** : Real Number, \(left > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Location parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**right** : Real Number, \(right > left\)'
  prefs: []
  type: TYPE_NORMAL
- en: Location parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R929](#id34)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Pareto_distribution#Bounded_Pareto_distribution](https://en.wikipedia.org/wiki/Pareto_distribution#Bounded_Pareto_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Cauchy distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Cauchy distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{\pi \gamma [1 + {(\frac{x-x_0}{\gamma})}^2]}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x0** : Real number, the location'
  prefs: []
  type: TYPE_NORMAL
- en: '**gamma** : Real number, \(\gamma > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R930](#id35)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cauchy_distribution](https://en.wikipedia.org/wiki/Cauchy_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R931](#id36)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/CauchyDistribution.html](https://mathworld.wolfram.com/CauchyDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Chi distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Chi distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{2^{1-k/2}x^{k-1}e^{-x^2/2}}{\Gamma(k/2)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq 0\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : Positive integer, The number of degrees of freedom'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R932](#id37)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Chi_distribution](https://en.wikipedia.org/wiki/Chi_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R933](#id38)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ChiDistribution.html](https://mathworld.wolfram.com/ChiDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a non-central Chi distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : A positive Integer, \(k > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: The number of degrees of freedom.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**lambda** : Real number, \(\lambda > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Shift parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the non-central Chi distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{e^{-(x^2+\lambda^2)/2} x^k\lambda} {(\lambda x)^{k/2}} I_{k/2-1}(\lambda
    x)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq 0\). Here, \(I_\nu (x)\) is the [modified Bessel function of the
    first kind](functions/special.html#besseli).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R934](#id39)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Noncentral_chi_distribution](https://en.wikipedia.org/wiki/Noncentral_chi_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Chi-squared distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : Positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: The number of degrees of freedom.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Chi-squared distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{2^{\frac{k}{2}}\Gamma\left(\frac{k}{2}\right)} x^{\frac{k}{2}-1}
    e^{-\frac{x}{2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R935](#id40)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Chi_squared_distribution](https://en.wikipedia.org/wiki/Chi_squared_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R936](#id41)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Chi-SquaredDistribution.html](https://mathworld.wolfram.com/Chi-SquaredDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Dagum distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(p > 0\), a shape.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**a** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(a > 0\), a shape.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(b > 0\), a scale.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Dagum distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{a p}{x} \left( \frac{\left(\tfrac{x}{b}\right)^{a p}} {\left(\left(\tfrac{x}{b}\right)^a
    + 1 \right)^{p+1}} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R937](#id42)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dagum_distribution](https://en.wikipedia.org/wiki/Dagum_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with Davis distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(p > 0\), a scale.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(n > 1\), a shape.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: \(mu > 0\), a location.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of Davis distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x; \mu; b, n) := \frac{b^{n}(x - \mu)^{1-n}}{ \left( e^{\frac{b}{x-\mu}}
    - 1 \right) \Gamma(n)\zeta(n)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,\infty]\).
  prefs: []
  type: TYPE_NORMAL
- en: Davis distribution is a generalization of the Planck’s law of radiation from
    statistical physics. It is used for modeling income distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R938](#id43)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Davis_distribution](https://en.wikipedia.org/wiki/Davis_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R939](#id44)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reference.wolfram.com/language/ref/DavisDistribution.html](https://reference.wolfram.com/language/ref/DavisDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an Erlang distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : Positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: '**l** : Real number, \(\lambda > 0\), the rate'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Erlang distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\lambda^k x^{k-1} e^{-\lambda x}}{(k-1)!}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,\infty]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R940](#id45)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Erlang_distribution](https://en.wikipedia.org/wiki/Erlang_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R941](#id46)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ErlangDistribution.html](https://mathworld.wolfram.com/ErlangDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an Exponentially modified Gaussian
    (EMG) distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : A string giving a name for this distribution'
  prefs: []
  type: TYPE_NORMAL
- en: '**mean** : A Real number, the mean of Gaussian component'
  prefs: []
  type: TYPE_NORMAL
- en: '**std** : A positive Real number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'math:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: \(\sigma^2 > 0\) the variance of Gaussian component
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rate** : A positive Real number,'
  prefs: []
  type: TYPE_NORMAL
- en: 'math:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: \(\lambda > 0\) the rate of Exponential component
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the exponentially modified Gaussian distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\lambda}{2}e^{\frac{\lambda}{2}(2\mu+\lambda\sigma^2-2x)} \text{erfc}(\frac{\mu
    + \lambda\sigma^2 - x}{\sqrt{2}\sigma})\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\). Note that the expected value is \(1/\lambda\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R942](#id47)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exponentially_modified_Gaussian_distribution](https://en.wikipedia.org/wiki/Exponentially_modified_Gaussian_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an Exponential distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rate** : A positive Real number, \(\lambda > 0\), the rate (or inverse scale/inverse
    mean)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the exponential distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \lambda \exp(-\lambda x)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\). Note that the expected value is \(1/\lambda\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R943](#id48)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exponential_distribution](https://en.wikipedia.org/wiki/Exponential_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R944](#id49)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ExponentialDistribution.html](https://mathworld.wolfram.com/ExponentialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a F distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d1** : \(d_1 > 0\), where \(d_1\) is the degrees of freedom (\(n_1 - 1\))'
  prefs: []
  type: TYPE_NORMAL
- en: '**d2** : \(d_2 > 0\), where \(d_2\) is the degrees of freedom (\(n_2 - 1\))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the F distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\sqrt{\frac{(d_1 x)^{d_1} d_2^{d_2}} {(d_1 x + d_2)^{d_1 + d_2}}}}
    {x \mathrm{B} \left(\frac{d_1}{2}, \frac{d_2}{2}\right)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R945](#id50)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/F-distribution](https://en.wikipedia.org/wiki/F-distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R946](#id51)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/F-Distribution.html](https://mathworld.wolfram.com/F-Distribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with an Fisher’s Z distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d1** : \(d_1 > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of freedom.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**d2** : \(d_2 > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of freedom.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Fisher’s Z distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{2d_1^{d_1/2} d_2^{d_2/2}} {\mathrm{B}(d_1/2, d_2/2)} \frac{e^{d_1z}}{\left(d_1e^{2z}+d_2\right)^{\left(d_1+d_2\right)/2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R947](#id52)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fisher%27s_z-distribution](https://en.wikipedia.org/wiki/Fisher%27s_z-distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R948](#id53)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Fishersz-Distribution.html](https://mathworld.wolfram.com/Fishersz-Distribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Frechet distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a \in \left(0, \infty\right)\) the shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**s** : Real number, \(s \in \left(0, \infty\right)\) the scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**m** : Real number, \(m \in \left(-\infty, \infty\right)\) the minimum'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Frechet distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\alpha}{s} \left(\frac{x-m}{s}\right)^{-1-\alpha} e^{-(\frac{x-m}{s})^{-\alpha}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq m\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R949](#id54)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fr%C3%A9chet_distribution](https://en.wikipedia.org/wiki/Fr%C3%A9chet_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Gamma distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : Real number, \(k > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**theta** : Real number, \(\theta > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Gamma distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{\Gamma(k) \theta^k} x^{k - 1} e^{-\frac{x}{\theta}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,1]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R950](#id55)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gamma_distribution](https://en.wikipedia.org/wiki/Gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R951](#id56)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/GammaDistribution.html](https://mathworld.wolfram.com/GammaDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an inverse Gamma distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(b > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the inverse Gamma distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\beta^\alpha}{\Gamma(\alpha)} x^{-\alpha - 1} \exp\left(\frac{-\beta}{x}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R952](#id57)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse-gamma_distribution](https://en.wikipedia.org/wiki/Inverse-gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with Gompertz distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(b > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**eta** : Real number, \(\eta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Gompertz distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := b \eta e^{b x} e^{\eta} \exp \left(-\eta e^{bx} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0, \infty)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R953](#id58)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gompertz_distribution](https://en.wikipedia.org/wiki/Gompertz_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with Gumbel distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number, \(\mu\), a location'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**minimum** : Boolean, by default `False`, set to `True` for enabling minimum
    distribution'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Gumbel distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: For Maximum
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \dfrac{1}{\beta} \exp \left( -\dfrac{x-\mu}{\beta} - \exp \left( -\dfrac{x
    - \mu}{\beta} \right) \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [ - \infty, \infty ]\).
  prefs: []
  type: TYPE_NORMAL
- en: For Minimum
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{e^{- e^{\frac{- \mu + x}{\beta}} + \frac{- \mu + x}{\beta}}}{\beta}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [ - \infty, \infty ]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R954](#id59)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/GumbelDistribution.html](https://mathworld.wolfram.com/GumbelDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R955](#id60)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gumbel_distribution](https://en.wikipedia.org/wiki/Gumbel_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R956](#id61)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20200628222206/http://www.mathwave.com/help/easyfit/html/analyses/distributions/gumbel_max.html](https://web.archive.org/web/20200628222206/http://www.mathwave.com/help/easyfit/html/analyses/distributions/gumbel_max.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R957](#id62)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20200628222212/http://www.mathwave.com/help/easyfit/html/analyses/distributions/gumbel_min.html](https://web.archive.org/web/20200628222212/http://www.mathwave.com/help/easyfit/html/analyses/distributions/gumbel_min.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a Kumaraswamy distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(b > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Kumaraswamy distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := a b x^{a-1} (1-x^a)^{b-1}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,1]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R958](#id63)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Kumaraswamy_distribution](https://en.wikipedia.org/wiki/Kumaraswamy_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Laplace distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number or a list/matrix, the location (mean) or the'
  prefs: []
  type: TYPE_NORMAL
- en: location vector
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b** : Real number or a positive definite matrix, representing a scale'
  prefs: []
  type: TYPE_NORMAL
- en: or the covariance matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Laplace distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{2 b} \exp \left(-\frac{|x-\mu|}b \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R959](#id64)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Laplace_distribution](https://en.wikipedia.org/wiki/Laplace_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R960](#id65)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LaplaceDistribution.html](https://mathworld.wolfram.com/LaplaceDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Levy distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Levy distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \sqrt(\frac{c}{2 \pi}) \frac{\exp -\frac{c}{2 (x - \mu)}}{(x - \mu)^{3/2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: The location parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c** : Real number, \(c > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: A scale parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R961](#id66)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/L%C3%A9vy_distribution](https://en.wikipedia.org/wiki/L%C3%A9vy_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R962](#id67)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LevyDistribution.html](https://mathworld.wolfram.com/LevyDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a logistic distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number, the location (mean)'
  prefs: []
  type: TYPE_NORMAL
- en: '**s** : Real number, \(s > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the logistic distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{e^{-(x-\mu)/s}} {s\left(1+e^{-(x-\mu)/s}\right)^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R963](#id68)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logistic_distribution](https://en.wikipedia.org/wiki/Logistic_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R964](#id69)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogisticDistribution.html](https://mathworld.wolfram.com/LogisticDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a log-logistic distribution. The distribution
    is unimodal when `beta > 1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), scale parameter and median of distribution'
  prefs: []
  type: TYPE_NORMAL
- en: '**beta** : Real number, \(\beta > 0\), a shape parameter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the log-logistic distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{(\frac{\beta}{\alpha})(\frac{x}{\alpha})^{\beta - 1}} {(1 +
    (\frac{x}{\alpha})^{\beta})^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R965](#id70)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Log-logistic_distribution](https://en.wikipedia.org/wiki/Log-logistic_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a log-normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: The log-scale.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sigma** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: A shape. (\(\sigma^2 > 0\))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the log-normal distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{x\sqrt{2\pi\sigma^2}} e^{-\frac{\left(\ln x-\mu\right)^2}{2\sigma^2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R966](#id71)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lognormal](https://en.wikipedia.org/wiki/Lognormal)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R967](#id72)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogNormalDistribution.html](https://mathworld.wolfram.com/LogNormalDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Lomax distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real Number, \(\alpha > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Shape parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**lamda** : Real Number, \(\lambda > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: Scale parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Lomax distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\alpha}{\lambda}\left[1+\frac{x}{\lambda}\right]^{-(\alpha+1)}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R968](#id73)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lomax_distribution](https://en.wikipedia.org/wiki/Lomax_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Maxwell distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Maxwell distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \sqrt{\frac{2}{\pi}} \frac{x^2 e^{-x^2/(2a^2)}}{a^3}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \geq 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R969](#id74)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Maxwell_distribution](https://en.wikipedia.org/wiki/Maxwell_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R970](#id75)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MaxwellDistribution.html](https://mathworld.wolfram.com/MaxwellDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Moyal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: Location parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sigma** : Real positive number'
  prefs: []
  type: TYPE_NORMAL
- en: Scale parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Moyal distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\exp-\frac{1}{2}\exp-\frac{x-\mu}{\sigma}-\frac{x-\mu}{2\sigma}}{\sqrt{2\pi}\sigma}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in \mathbb{R}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R971](#id76)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reference.wolfram.com/language/ref/MoyalDistribution.html](https://reference.wolfram.com/language/ref/MoyalDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R972](#id77)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.stat.rice.edu/~dobelman/textfiles/DistributionsHandbook.pdf](https://www.stat.rice.edu/~dobelman/textfiles/DistributionsHandbook.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Nakagami distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number, \(\mu \geq \frac{1}{2}\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: '**omega** : Real number, \(\omega > 0\), the spread'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Nakagami distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{2\mu^\mu}{\Gamma(\mu)\omega^\mu} x^{2\mu-1} \exp\left(-\frac{\mu}{\omega}x^2
    \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R973](#id78)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Nakagami_distribution](https://en.wikipedia.org/wiki/Nakagami_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number or a list representing the mean or the mean vector'
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma** : Real number or a positive definite square matrix,'
  prefs: []
  type: TYPE_NORMAL
- en: \(\sigma^2 > 0\), the variance
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Normal distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{\sigma\sqrt{2\pi}} e^{ -\frac{(x-\mu)^2}{2\sigma^2} }\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R974](#id79)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Normal_distribution](https://en.wikipedia.org/wiki/Normal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R975](#id80)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/NormalDistributionFunction.html](https://mathworld.wolfram.com/NormalDistributionFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with the Pareto distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xm** : Real number, \(x_m > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Real number, \(\alpha > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Pareto distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\alpha\,x_m^\alpha}{x^{\alpha+1}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [x_m,\infty]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R976](#id81)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Pareto_distribution](https://en.wikipedia.org/wiki/Pareto_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R977](#id82)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ParetoDistribution.html](https://mathworld.wolfram.com/ParetoDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Creates a continuous random variable with a Power Function Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Positive number, \(0 < \alpha\), the shape parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(-\infty < a\), the left boundary'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a < b < \infty\), the right boundary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of PowerFunction distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{{\alpha}(x - a)^{\alpha - 1}}{(b - a)^{\alpha}}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [a,b]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R978](#id83)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20200204081320/http://www.mathwave.com/help/easyfit/html/analyses/distributions/power_func.html](https://web.archive.org/web/20200204081320/http://www.mathwave.com/help/easyfit/html/analyses/distributions/power_func.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a U-quadratic distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a < b\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the U-quadratic distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \alpha (x-\beta)^2\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [a,b]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R979](#id84)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/U-quadratic_distribution](https://en.wikipedia.org/wiki/U-quadratic_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a raised cosine distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: '**s** : Real number, \(s > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the raised cosine distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{2s}\left(1+\cos\left(\frac{x-\mu}{s}\pi\right)\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [\mu-s,\mu+s]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R980](#id85)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Raised_cosine_distribution](https://en.wikipedia.org/wiki/Raised_cosine_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Rayleigh distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma** : Real number, \(\sigma > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Rayleigh distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{x}{\sigma^2} e^{-x^2/2\sigma^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R981](#id86)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Rayleigh_distribution](https://en.wikipedia.org/wiki/Rayleigh_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R982](#id87)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/RayleighDistribution.html](https://mathworld.wolfram.com/RayleighDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Creates a continuous random variable with a reciprocal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(0 < a\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a < b\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: Reference
  prefs: []
  type: TYPE_NORMAL
- en: '[R983]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Reciprocal_distribution](https://en.wikipedia.org/wiki/Reciprocal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a student’s t distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nu** : Real number, \(\nu > 0\), the degrees of freedom'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the student’s t distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{\Gamma \left(\frac{\nu+1}{2} \right)} {\sqrt{\nu\pi}\Gamma \left(\frac{\nu}{2}
    \right)} \left(1+\frac{x^2}{\nu} \right)^{-\frac{\nu+1}{2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R984](#id88)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Student_t-distribution](https://en.wikipedia.org/wiki/Student_t-distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R985](#id89)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Studentst-Distribution.html](https://mathworld.wolfram.com/Studentst-Distribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Shifted Gompertz distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(b > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**eta** : Real number, \(\eta > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Shifted Gompertz distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := b e^{-b x} e^{-\eta \exp(-b x)} \left[1 + \eta(1 - e^(-bx)) \right]\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0, \infty)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R986](#id90)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Shifted_Gompertz_distribution](https://en.wikipedia.org/wiki/Shifted_Gompertz_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a trapezoidal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a < d\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a \le b < c\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**c** : Real number, \(b < c \le d\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**d** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the trapezoidal distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x) := \begin{cases} 0 & \mathrm{for\ } x < a, \\ \frac{2(x-a)}{(b-a)(d+c-a-b)}
    & \mathrm{for\ } a \le x < b, \\ \frac{2}{d+c-a-b} & \mathrm{for\ } b \le x <
    c, \\ \frac{2(d-x)}{(d-c)(d+c-a-b)} & \mathrm{for\ } c \le x < d, \\ 0 & \mathrm{for\
    } d < x. \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R987](#id91)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trapezoidal_distribution](https://en.wikipedia.org/wiki/Trapezoidal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a triangular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(a \in \left(-\infty, \infty\right)\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a < b\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**c** : Real number, \(a \leq c \leq b\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the triangular distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x) := \begin{cases} 0 & \mathrm{for\ } x < a, \\ \frac{2(x-a)}{(b-a)(c-a)}
    & \mathrm{for\ } a \le x < c, \\ \frac{2}{b-a} & \mathrm{for\ } x = c, \\ \frac{2(b-x)}{(b-a)(b-c)}
    & \mathrm{for\ } c < x \le b, \\ 0 & \mathrm{for\ } b < x. \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R988](#id92)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Triangular_distribution](https://en.wikipedia.org/wiki/Triangular_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R989](#id93)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/TriangularDistribution.html](https://mathworld.wolfram.com/TriangularDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a uniform distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Real number, \(-\infty < a\), the left boundary'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Real number, \(a < b < \infty\), the right boundary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the uniform distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x) := \begin{cases} \frac{1}{b - a} & \text{for } x \in [a,b]
    \\ 0 & \text{otherwise} \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [a,b]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R990](#id94)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29](https://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R991](#id95)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/UniformDistribution.html](https://mathworld.wolfram.com/UniformDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an Irwin-Hall distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : A positive integer, \(n > 0\)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The probability distribution function depends on a single parameter \(n\) which
    is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Irwin-Hall distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{1}{(n-1)!}\sum_{k=0}^{\left\lfloor x\right\rfloor}(-1)^k \binom{n}{k}(x-k)^{n-1}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute cdf with specific ‘x’ and ‘n’ values as follows : >>> cdf(UniformSum(“x”,
    5), evaluate=False)(2).doit() 9/40'
  prefs: []
  type: TYPE_NORMAL
- en: The argument evaluate=False prevents an attempt at evaluation of the sum for
    general n, before the argument 2 is passed.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R992](#id96)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Uniform_sum_distribution](https://en.wikipedia.org/wiki/Uniform_sum_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R993](#id97)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/UniformSumDistribution.html](https://mathworld.wolfram.com/UniformSumDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: Create a Continuous Random Variable with a von Mises distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: Measure of location.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**k** : Real number'
  prefs: []
  type: TYPE_NORMAL
- en: Measure of concentration.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the von Mises distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac{e^{\kappa\cos(x-\mu)}}{2\pi I_0(\kappa)}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [0,2\pi]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R994](#id98)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Von_Mises_distribution](https://en.wikipedia.org/wiki/Von_Mises_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R995](#id99)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/vonMisesDistribution.html](https://mathworld.wolfram.com/vonMisesDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with an Inverse Gaussian distribution. Inverse
    Gaussian distribution is also known as Wald distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu :**'
  prefs: []
  type: TYPE_NORMAL
- en: Positive number representing the mean.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**lambda :**'
  prefs: []
  type: TYPE_NORMAL
- en: Positive number representing the shape parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Inverse Gaussian distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \sqrt{\frac{\lambda}{2\pi x^3}} e^{-\frac{\lambda(x-\mu)^2}{2x\mu^2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R996](#id100)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution](https://en.wikipedia.org/wiki/Inverse_Gaussian_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R997](#id101)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/InverseGaussianDistribution.html](https://mathworld.wolfram.com/InverseGaussianDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Weibull distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lambda** : Real number, \(\lambda > 0\), a scale'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : Real number, \(k > 0\), a shape'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Weibull distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x) := \begin{cases} \frac{k}{\lambda}\left(\frac{x}{\lambda}\right)^{k-1}
    e^{-(x/\lambda)^{k}} & x\geq0\\ 0 & x<0 \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R998](#id102)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Weibull_distribution](https://en.wikipedia.org/wiki/Weibull_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R999](#id103)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/WeibullDistribution.html](https://mathworld.wolfram.com/WeibullDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: Create a continuous random variable with a Wigner semicircle distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**R** : Real number, \(R > 0\), the radius'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A RandomSymbol.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Wigner semicircle distribution is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) := \frac2{\pi R^2}\,\sqrt{R^2-x^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: with \(x \in [-R,R]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1000](#id104)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Wigner_semicircle_distribution](https://en.wikipedia.org/wiki/Wigner_semicircle_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1001](#id105)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/WignersSemicircleLaw.html](https://mathworld.wolfram.com/WignersSemicircleLaw.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Continuous Random Variable given the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Represents name of the random variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**density** : Expression containing symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Represents probability density function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**set** : set/Interval'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the region where the pdf is valid, by default is real line.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**check** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, it will check whether the given density integrates to 1 over the given
    set. If False, it will not perform this check. Default is False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Many common continuous random variable types are already implemented.
  prefs: []
  type: TYPE_NORMAL
- en: This function should be necessary only very rarely.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Joint Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Joint Random Variable where each of its component is continuous, given
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbol** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Represents name of the random variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pdf** : A PDF in terms of indexed symbols of the symbol given'
  prefs: []
  type: TYPE_NORMAL
- en: as the first argument
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As of now, the set for each component for a `JointRV` is equal to the set of
    all integers, which cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: Marginal distribution function of a joint random variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rv** : A random variable with a joint probability distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**indices** : Component indices or the indexed random symbol'
  prefs: []
  type: TYPE_NORMAL
- en: for which the joint distribution is to be calculated
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A Lambda expression in \(sym\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Creates a continuous random variable with Multivariate Normal Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the multivariate normal distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : List representing the mean or the mean vector'
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma** : Positive semidefinite square matrix'
  prefs: []
  type: TYPE_NORMAL
- en: Represents covariance Matrix. If \(\sigma\) is noninvertible then only sampling
    is supported currently
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: The example below shows that it is also possible to use symbolic parameters
    to define the MultivariateNormal class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: The density of a multivariate normal can be calculated using a matrix argument,
    as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1002](#id106)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Multivariate_normal_distribution](https://en.wikipedia.org/wiki/Multivariate_normal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Creates a continuous random variable with Multivariate Laplace Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the multivariate Laplace distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : List representing the mean or the mean vector'
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma** : Positive definite square matrix'
  prefs: []
  type: TYPE_NORMAL
- en: Represents covariance Matrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1003](#id107)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Multivariate_Laplace_distribution](https://en.wikipedia.org/wiki/Multivariate_Laplace_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: Creates a joint random variable with generalized multivariate log gamma distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The joint pdf can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**syms** : list/tuple/set of symbols for identifying each component'
  prefs: []
  type: TYPE_NORMAL
- en: '**delta** : A constant in range \([0, 1]\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**v** : Positive real number'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : List of positive real numbers'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : List of positive real numbers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the GeneralizedMultivariateLogGamma is too long to type use,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: If you want to pass the matrix omega instead of the constant delta, then use
    `GeneralizedMultivariateLogGammaOmega`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1004](#id108)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Generalized_multivariate_log-gamma_distribution](https://en.wikipedia.org/wiki/Generalized_multivariate_log-gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1005](#id109)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.researchgate.net/publication/234137346_On_a_multivariate_log-gamma_distribution_and_the_use_of_the_distribution_in_the_Bayesian_analysis](https://www.researchgate.net/publication/234137346_On_a_multivariate_log-gamma_distribution_and_the_use_of_the_distribution_in_the_Bayesian_analysis)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: Extends GeneralizedMultivariateLogGamma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**syms** : list/tuple/set of symbols'
  prefs: []
  type: TYPE_NORMAL
- en: For identifying each component
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**omega** : A square matrix'
  prefs: []
  type: TYPE_NORMAL
- en: Every element of square matrix must be absolute value of square root of correlation
    coefficient
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**v** : Positive real number'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : List of positive real numbers'
  prefs: []
  type: TYPE_NORMAL
- en: '**mu** : List of positive real numbers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the GeneralizedMultivariateLogGammaOmega is too long to type use,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1006](#id110)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Generalized_multivariate_log-gamma_distribution](https://en.wikipedia.org/wiki/Generalized_multivariate_log-gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1007](#id111)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.researchgate.net/publication/234137346_On_a_multivariate_log-gamma_distribution_and_the_use_of_the_distribution_in_the_Bayesian_analysis](https://www.researchgate.net/publication/234137346_On_a_multivariate_log-gamma_distribution_and_the_use_of_the_distribution_in_the_Bayesian_analysis)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: Creates a discrete random variable with Multinomial Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents number of trials
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p** : List of event probabilities'
  prefs: []
  type: TYPE_NORMAL
- en: Must be in the range of \([0, 1]\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1008](#id112)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Multinomial_distribution](https://en.wikipedia.org/wiki/Multinomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1009](#id113)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MultinomialDistribution.html](https://mathworld.wolfram.com/MultinomialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Creates a continuous random variable with Dirichlet/Multivariate Beta Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the Dirichlet distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Positive real numbers'
  prefs: []
  type: TYPE_NORMAL
- en: Signifies concentration numbers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1010](#id114)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dirichlet_distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1011](#id115)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/DirichletDistribution.html](https://mathworld.wolfram.com/DirichletDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: Creates a discrete random variable with Multivariate Ewens Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Size of the sample or the integer whose partitions are considered
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**theta** : Positive real number'
  prefs: []
  type: TYPE_NORMAL
- en: Denotes Mutation rate
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1012](#id116)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Ewens%27s_sampling_formula](https://en.wikipedia.org/wiki/Ewens%27s_sampling_formula)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1013](#id117)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.jstor.org/stable/24780825](https://www.jstor.org/stable/24780825)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: Creates a joint random variable with multivariate T-distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**syms** : A symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: For identifying the random variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mu** : A list/matrix'
  prefs: []
  type: TYPE_NORMAL
- en: Representing the location vector
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sigma** : The shape matrix for the distribution'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: Creates a discrete random variable with Negative Multinomial Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k0** : positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Represents number of failures before the experiment is stopped
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p** : List of event probabilities'
  prefs: []
  type: TYPE_NORMAL
- en: Must be in the range of \([0, 1]\)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1014](#id118)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Negative_multinomial_distribution](https://en.wikipedia.org/wiki/Negative_multinomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1015](#id119)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/NegativeBinomialDistribution.html](https://mathworld.wolfram.com/NegativeBinomialDistribution.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Creates a bivariate joint random variable with multivariate Normal gamma distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : A symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: For identifying the random variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mu** : A real number'
  prefs: []
  type: TYPE_NORMAL
- en: The mean of the normal distribution
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**lamda** : A positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter of joint distribution
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alpha** : A positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter of joint distribution
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta** : A positive integer'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter of joint distribution
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1016](#id120)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Normal-gamma_distribution](https://en.wikipedia.org/wiki/Normal-gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Stochastic Processes'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Represents a finite discrete time-homogeneous Markov chain.
  prefs: []
  type: TYPE_NORMAL
- en: This type of Markov Chain can be uniquely characterised by its (ordered) state
    space and its one-step transition probability matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym:**'
  prefs: []
  type: TYPE_NORMAL
- en: The name given to the Markov Chain
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**state_space:**'
  prefs: []
  type: TYPE_NORMAL
- en: Optional, by default, Range(n)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**trans_probs:**'
  prefs: []
  type: TYPE_NORMAL
- en: Optional, by default, MatrixSymbol(‘_T’, n, n)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: 'Probabilities will be calculated based on indexes rather than state names.
    For example, with the Sunny-Cloudy-Rainy model with string state names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the same answer as the `[0, 1, 2]` state space. Currently, there
    is no support for state names within probability and expectation statements. Here
    is a work-around using `Str`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbol state names can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: 'Expectations will be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Probability of expressions with multiple RandomIndexedSymbols can also be calculated
    provided there is only 1 RandomIndexedSymbol in the given condition. It is always
    better to use Rational instead of floating point numbers for the probabilities
    in the transition matrix to avoid errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic probability queries are also supported
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: 'There is limited support for arbitrarily sized states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1017](#id121)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Markov_chain#Discrete-time_Markov_chain](https://en.wikipedia.org/wiki/Markov_chain#Discrete-time_Markov_chain)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1018](#id122)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20201230182007/https://www.dartmouth.edu/~chance/teaching_aids/books_articles/probability_book/Chapter11.pdf](https://web.archive.org/web/20201230182007/https://www.dartmouth.edu/~chance/teaching_aids/books_articles/probability_book/Chapter11.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: Computes the absorbing probabilities, i.e. the ij-th entry of the matrix denotes
    the probability of Markov chain being absorbed in state j starting from state
    i.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: Reorders the one-step transition matrix so that recurrent states appear first
    and transient states appear last. Other representations include inserting transient
    states first and recurrent states last.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: states, P_new
  prefs: []
  type: TYPE_NORMAL
- en: '`states` is the list that describes the order of the new states in the matrix
    so that the ith element in `states` is the state of the ith row of A. `P_new`
    is the new transition matrix in canonical form.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: 'You can convert your chain into canonical form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: The new states are [3, 1, 2, 4, 5] and you can create a new chain with this
    and its canonical form will remain the same (since it is already in canonical
    form).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not limited to absorbing chains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.stats.DiscreteMarkovChain.communication_classes`](#sympy.stats.DiscreteMarkovChain.communication_classes
    "sympy.stats.DiscreteMarkovChain.communication_classes"), [`sympy.stats.DiscreteMarkovChain.decompose`](#sympy.stats.DiscreteMarkovChain.decompose
    "sympy.stats.DiscreteMarkovChain.decompose")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1019](#id123)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://onlinelibrary.wiley.com/doi/pdf/10.1002/9780470316887.app1](https://onlinelibrary.wiley.com/doi/pdf/10.1002/9780470316887.app1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1020](#id124)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.columbia.edu/~ww2040/6711F12/lect1023big.pdf](http://www.columbia.edu/~ww2040/6711F12/lect1023big.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: Returns the list of communication classes that partition the states of the markov
    chain.
  prefs: []
  type: TYPE_NORMAL
- en: A communication class is defined to be a set of states such that every state
    in that set is reachable from every other state in that set. Due to its properties
    this forms a class in the mathematical sense. Communication classes are also known
    as recurrence classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: classes
  prefs: []
  type: TYPE_NORMAL
- en: The `classes` are a list of tuples. Each tuple represents a single communication
    class with its properties. The first element in the tuple is the list of states
    in the class, the second element is whether the class is recurrent and the third
    element is the period of the communication class.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: From this we can see that states `1` and `2` communicate, are recurrent and
    have a period of 2\. We can also see state `3` is transient with a period of 1.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm used is of order `O(n**2)` where `n` is the number of states in
    the markov chain. It uses Tarjan’s algorithm to find the classes themselves and
    then it uses a breadth-first search algorithm to find each class’s periodicity.
    Most of the algorithm’s components approach `O(n)` as the matrix becomes more
    and more sparse.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1021](#id125)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20220207032113/https://www.columbia.edu/~ww2040/4701Sum07/4701-06-Notes-MCII.pdf](https://web.archive.org/web/20220207032113/https://www.columbia.edu/~ww2040/4701Sum07/4701-06-Notes-MCII.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1022](#id126)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cecas.clemson.edu/~shierd/Shier/markov.pdf](https://cecas.clemson.edu/~shierd/Shier/markov.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1023](#id127)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.proquest.com/openview/4adc6a51d8371be5b0e4c7dff287fc70/1?pq-origsite=gscholar&cbl=2026366&diss=y](https://www.proquest.com/openview/4adc6a51d8371be5b0e4c7dff287fc70/1?pq-origsite=gscholar&cbl=2026366&diss=y)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1024](#id128)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mathworks.com/help/econ/dtmc.classify.html](https://www.mathworks.com/help/econ/dtmc.classify.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Decomposes the transition matrix into submatrices with special properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The transition matrix can be decomposed into 4 submatrices: - A - the submatrix
    from recurrent states to recurrent states. - B - the submatrix from transient
    to recurrent states. - C - the submatrix from transient to transient states. -
    O - the submatrix of zeros for recurrent to transient states.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: states, A, B, C
  prefs: []
  type: TYPE_NORMAL
- en: '`states` - a list of state names with the first being the recurrent states
    and the last being the transient states in the order of the row names of A and
    then the row names of C. `A` - the submatrix from recurrent states to recurrent
    states. `B` - the submatrix from transient to recurrent states. `C` - the submatrix
    from transient to transient states.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: 'One can decompose this chain for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: This means that state 2 is the only absorbing state (since A is a 1x1 matrix).
    B is a 4x1 matrix since the 4 remaining transient states all merge into reccurent
    state 2\. And C is the 4x4 matrix that shows how the transient states 0, 1, 3,
    4 all interact.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.stats.DiscreteMarkovChain.communication_classes`](#sympy.stats.DiscreteMarkovChain.communication_classes
    "sympy.stats.DiscreteMarkovChain.communication_classes"), [`sympy.stats.DiscreteMarkovChain.canonical_form`](#sympy.stats.DiscreteMarkovChain.canonical_form
    "sympy.stats.DiscreteMarkovChain.canonical_form")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1025](#id129)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Absorbing_Markov_chain](https://en.wikipedia.org/wiki/Absorbing_Markov_chain)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1026](#id130)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.brandeis.edu/~igusa/Math56aS08/Math56a_S08_notes015.pdf](https://people.brandeis.edu/~igusa/Math56aS08/Math56a_S08_notes015.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper for `stationary_distribution()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Each entry fundamental matrix can be interpreted as the expected number of times
    the chains is in state j if it started in state i.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1027](#id131)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://lips.cs.princeton.edu/the-fundamental-matrix-of-a-finite-markov-chain/](https://lips.cs.princeton.edu/the-fundamental-matrix-of-a-finite-markov-chain/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: The fixed row vector is the limiting distribution of a discrete Markov chain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'sample: iterator object'
  prefs: []
  type: TYPE_NORMAL
- en: iterator object containing the sample
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: 'The stationary distribution is any row vector, p, that solves p = pP, is row
    stochastic and each element in p must be nonnegative. That means in matrix form:
    \((P-I)^T p^T = 0\) and \((1, \dots, 1) p = 1\) where `P` is the one-step transition
    matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: All time-homogeneous Markov Chains with a finite state space have at least one
    stationary distribution. In addition, if a finite time-homogeneous Markov Chain
    is irreducible, the stationary distribution is unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition_set** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If the chain has a symbolic size or transition matrix, it will return a `Lambda`
    if `False` and return a `ConditionSet` if `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: An irreducible Markov Chain
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: A reducible Markov Chain
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.stats.DiscreteMarkovChain.limiting_distribution`](#sympy.stats.DiscreteMarkovChain.limiting_distribution
    "sympy.stats.DiscreteMarkovChain.limiting_distribution")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1028](#id132)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.probabilitycourse.com/chapter11/11_2_6_stationary_and_limiting_distributions.php](https://www.probabilitycourse.com/chapter11/11_2_6_stationary_and_limiting_distributions.php)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1029](#id133)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20210508104430/https://galton.uchicago.edu/~yibi/teaching/stat317/2014/Lectures/Lecture4_6up.pdf](https://web.archive.org/web/20210508104430/https://galton.uchicago.edu/~yibi/teaching/stat317/2014/Lectures/Lecture4_6up.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Transition probabilities of discrete Markov chain, either an instance of Matrix
    or MatrixSymbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Represents continuous time Markov chain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : Symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: '**state_space** : Set'
  prefs: []
  type: TYPE_NORMAL
- en: Optional, by default, S.Reals
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gen_mat** : Matrix/ImmutableMatrix/MatrixSymbol'
  prefs: []
  type: TYPE_NORMAL
- en: Optional, by default, None
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Probability queries are supported
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Probability of expressions with multiple RandomIndexedSymbols can also be calculated
    provided there is only 1 RandomIndexedSymbol in the given condition. It is always
    better to use Rational instead of floating point numbers for the probabilities
    in the generator matrix to avoid errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic probability queries are also supported
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1030](#id134)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Markov_chain#Continuous-time_Markov_chain](https://en.wikipedia.org/wiki/Markov_chain#Continuous-time_Markov_chain)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1031](#id135)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://u.math.biu.ac.il/~amirgi/CTMCnotes.pdf](https://u.math.biu.ac.il/~amirgi/CTMCnotes.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: The Bernoulli process consists of repeated independent Bernoulli process trials
    with the same parameter \(p\). It’s assumed that the probability \(p\) applies
    to every trial and that the outcomes of each trial are independent of all the
    rest. Therefore Bernoulli Process is Discrete State and Discrete Time Stochastic
    Process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : Symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: '**success** : Integer/str'
  prefs: []
  type: TYPE_NORMAL
- en: 'The event which is considered to be success. Default: 1.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**failure: Integer/str**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The event which is considered to be failure. Default: 0.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p** : Real Number between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the probability of getting success.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1032](#id136)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bernoulli_process](https://en.wikipedia.org/wiki/Bernoulli_process)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1033](#id137)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathcs.clarku.edu/~djoyce/ma217/bernoulli.pdf](https://mathcs.clarku.edu/~djoyce/ma217/bernoulli.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Computes expectation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : RandomIndexedSymbol, Relational, Logic'
  prefs: []
  type: TYPE_NORMAL
- en: Condition for which expectation has to be computed. Must contain a RandomIndexedSymbol
    of the process.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**condition** : Relational, Logic'
  prefs: []
  type: TYPE_NORMAL
- en: The given conditions under which computations should be done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Expectation of the RandomIndexedSymbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: Computes probability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : Relational'
  prefs: []
  type: TYPE_NORMAL
- en: Condition for which probability has to be computed. Must contain a RandomIndexedSymbol
    of the process.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**given_condition** : Relational, Logic'
  prefs: []
  type: TYPE_NORMAL
- en: The given conditions under which computations should be done.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Probability of the condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: The Poisson process is a counting process. It is usually used in scenarios where
    we are counting the occurrences of certain events that appear to happen at a certain
    rate, but completely at random.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : Symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : Positive number'
  prefs: []
  type: TYPE_NORMAL
- en: Rate of the process, `lambda > 0`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Merging two Poisson Processes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: Splitting a Poisson Process into two independent Poisson Processes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1034](#id138)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.probabilitycourse.com/chapter11/11_0_0_intro.php](https://www.probabilitycourse.com/chapter11/11_0_0_intro.php)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1035](#id139)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Poisson_point_process](https://en.wikipedia.org/wiki/Poisson_point_process)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: The Wiener process is a real valued continuous-time stochastic process. In physics
    it is used to study Brownian motion and it is often also called Brownian motion
    due to its historical connection with physical process of the same name originally
    observed by Scottish botanist Robert Brown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : Symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1036](#id140)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.probabilitycourse.com/chapter11/11_4_0_brownian_motion_wiener_process.php](https://www.probabilitycourse.com/chapter11/11_4_0_brownian_motion_wiener_process.php)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1037](#id141)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Wiener_process](https://en.wikipedia.org/wiki/Wiener_process)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: A Gamma process is a random process with independent gamma distributed increments.
    It is a pure-jump increasing Levy process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sym** : Symbol/str'
  prefs: []
  type: TYPE_NORMAL
- en: '**lamda** : Positive number'
  prefs: []
  type: TYPE_NORMAL
- en: Jump size of the process, `lamda > 0`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gamma** : Positive number'
  prefs: []
  type: TYPE_NORMAL
- en: Rate of jump arrivals, \(\gamma > 0\)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1038](#id142)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gamma_process](https://en.wikipedia.org/wiki/Gamma_process)'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix Distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Creates a random variable with Matrix Gamma Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha: Positive Real number**'
  prefs: []
  type: TYPE_NORMAL
- en: Shape Parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta: Positive Real number**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale Parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**scale_matrix: Positive definite real square matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale Matrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1039](#id143)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Matrix_gamma_distribution](https://en.wikipedia.org/wiki/Matrix_gamma_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Creates a random variable with Wishart Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n: Positive Real number**'
  prefs: []
  type: TYPE_NORMAL
- en: Represents degrees of freedom
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**scale_matrix: Positive definite real square matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale Matrix
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1040](#id144)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Wishart_distribution](https://en.wikipedia.org/wiki/Wishart_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: Creates a random variable with Matrix Normal Distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The density of the said distribution can be found at [1].
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**location_matrix: Real ``n x p`` matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Represents degrees of freedom
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**scale_matrix_1: Positive definite matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale Matrix of shape `n x n`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**scale_matrix_2: Positive definite matrix**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale Matrix of shape `p x p`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: RandomSymbol
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1041](#id145)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Matrix_normal_distribution](https://en.wikipedia.org/wiki/Matrix_normal_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: Compound Distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: Class for Compound Distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dist** : Distribution'
  prefs: []
  type: TYPE_NORMAL
- en: Distribution must contain a random parameter
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1042](#id146)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Compound_probability_distribution](https://en.wikipedia.org/wiki/Compound_probability_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Probability that a condition is true, optionally given a second condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : Combination of Relationals containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: The condition of which you want to compute the probability
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**given_condition** : Combination of Relationals containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression. P(X > 1, X > 0) is expectation of X > 1 given X >
    0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numsamples** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Enables sampling and approximates the probability with this many samples
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : Bool (defaults to True)'
  prefs: []
  type: TYPE_NORMAL
- en: In case of continuous systems return unevaluated integral
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic expression for the probability.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: 'Integral representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluation of the integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: Returns the expected value of a random expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: The expression of which you want to compute the expectation value
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**given** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression. E(X, X>0) is expectation of X given X > 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numsamples** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Enables sampling and approximates the expectation with this many samples
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evalf** : Bool (defaults to True)'
  prefs: []
  type: TYPE_NORMAL
- en: If sampling return a number rather than a complex expression
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : Bool (defaults to True)'
  prefs: []
  type: TYPE_NORMAL
- en: In case of continuous systems return unevaluated integral
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic expression for the expectation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the integral expression of the expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: 'The same integral expression, in more abstract terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the Summation expression of the expectation for discrete random variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: 'This class is aware of some properties of the expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: 'To expand the `Expectation` into its expression, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: 'To evaluate the `Expectation`, use `doit()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: To prevent evaluating nested `Expectation`, use `doit(deep=False)`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: Probability density of a random expression, optionally given a second condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: The expression of which you want to compute the density value
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**condition** : Relational containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression. density(X > 1, X > 0) is density of X > 1 given X
    > 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numsamples** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Enables sampling and approximates the density with this many samples
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This density will take on different forms for different types of probability
    spaces. Discrete variables produce Dicts. Continuous variables produce Lambdas.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: Calculuates entropy of a probability distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expression** : the random expression whose entropy is to be calculated'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : optional, to specify conditions on random expression'
  prefs: []
  type: TYPE_NORMAL
- en: '**b: base of the logarithm, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, it is taken as Euler’s number
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** : Entropy of the expression, a constant'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1043](#id147)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Entropy_%28information_theory%29](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1044](#id148)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.crmarsh.com/static/pdf/Charles_Marsh_Continuous_Entropy.pdf](https://www.crmarsh.com/static/pdf/Charles_Marsh_Continuous_Entropy.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1045](#id149)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kconrad.math.uconn.edu/blurbs/analysis/entropypost.pdf](https://kconrad.math.uconn.edu/blurbs/analysis/entropypost.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: Conditional Random Expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: From a random expression and a condition on that expression creates a new probability
    space from the condition and returns the same expression on that conditional probability
    space.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: Following convention, if the condition is a random symbol then that symbol is
    considered fixed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: Returns the domain where a condition is True.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Variance of a random expression.
  prefs: []
  type: TYPE_NORMAL
- en: \[variance(X) = E((X-E(X))^{2})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic expression for the variance.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: 'Integral representation of the underlying calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: 'Integral representation, without expanding the PDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite the variance in terms of the expectation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: 'Some transformations based on the properties of the variance may happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: 'To expand the variance in its expression, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: Covariance of two random expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The expectation that the two variables will rise and fall together
  prefs: []
  type: TYPE_NORMAL
- en: \[covariance(X,Y) = E((X-E(X)) (Y-E(Y)))\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic expression for the covariance.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluate the covariance, \(X\) and \(Y\) are independent, therefore zero is
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the covariance expression in terms of expectations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to expand the argument, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: 'This class is aware of some properties of the covariance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the co-skewness of three random variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X** : RandomSymbol'
  prefs: []
  type: TYPE_NORMAL
- en: Random Variable used to calculate coskewness
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Y** : RandomSymbol'
  prefs: []
  type: TYPE_NORMAL
- en: Random Variable used to calculate coskewness
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Z** : RandomSymbol'
  prefs: []
  type: TYPE_NORMAL
- en: Random Variable used to calculate coskewness
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**condition** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coskewness** : The coskewness of the three random variables'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically Coskewness is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[coskewness(X,Y,Z)=\frac{E[(X-E[X]) * (Y-E[Y]) * (Z-E[Z])]} {\sigma_{X}\sigma_{Y}\sigma_{Z}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1046](#id150)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Coskewness](https://en.wikipedia.org/wiki/Coskewness)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: Calculuates the median of the probability distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X: The random expression whose median is to be calculated.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The FiniteSet or an Interval which contains the median of the
  prefs: []
  type: TYPE_NORMAL
- en: random expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically, median of Probability distribution is defined as all those values
    of \(m\) for which the following condition is satisfied
  prefs: []
  type: TYPE_NORMAL
- en: \[P(X\leq m) \geq \frac{1}{2} \text{ and} \text{ } P(X\geq m)\geq \frac{1}{2}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1047](#id151)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Median#Probability_distributions](https://en.wikipedia.org/wiki/Median#Probability_distributions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: Standard Deviation of a random expression
  prefs: []
  type: TYPE_NORMAL
- en: \[std(X) = \sqrt(E((X-E(X))^{2}))\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: Return the \(p^{th}\) order quantile of a probability distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Quantile is defined as the value at which the probability of the random variable
    is less than or equal to the given probability.
  prefs: []
  type: TYPE_NORMAL
- en: '\[Q(p) = \inf\{x \in (-\infty, \infty) : p \le F(x)\}\]'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: A realization of the random expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expression of random variables'
  prefs: []
  type: TYPE_NORMAL
- en: Expression from which sample is extracted
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**condition** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**size** : int, tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Represents size of each sample in numsamples
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**library** : str'
  prefs: []
  type: TYPE_NORMAL
- en: '‘scipy’ : Sample using scipy'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘numpy’ : Sample using numpy'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘pymc’ : Sample using PyMC'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Choose any of the available options to sample from as string, by default is
    ‘scipy’
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numsamples** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of samples, each with size as `size`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprecated since version 1.9.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `numsamples` parameter is deprecated and is only provided for compatibility
    with v1.8\. Use a list comprehension or an additional dimension in `size` instead.
    See [sympy.stats.sample(numsamples=n)](../explanation/active-deprecations.html#deprecated-sympy-stats-numsamples)
    for details.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**seed :**'
  prefs: []
  type: TYPE_NORMAL
- en: An object to be used as seed by the given external library for sampling \(expr\).
    Following is the list of possible types of object for the supported libraries,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '‘scipy’: int, numpy.random.RandomState, numpy.random.Generator'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘numpy’: int, numpy.random.RandomState, numpy.random.Generator'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘pymc’: int'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional, by default None, in which case seed settings related to the given
    library will be used. No modifications to environment’s global seed settings are
    done by this argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'sample: float/list/numpy.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: one sample or a collection of samples of the random expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sample(X) returns float/numpy.float64/numpy.int64 object.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: sample(X, size=int/tuple) returns numpy.ndarray object.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.7.0: sample used to return an iterator containing the
    samples instead of value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.9.0: sample returns values or array of values instead
    of an iterator and numsamples is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: Returns an iterator of realizations from the expression given a condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr: Expr**'
  prefs: []
  type: TYPE_NORMAL
- en: Random expression to be realized
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**condition: Expr, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**size** : int, tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Represents size of each sample in numsamples
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numsamples: integer, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the iterator (defaults to infinity)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**seed :**'
  prefs: []
  type: TYPE_NORMAL
- en: An object to be used as seed by the given external library for sampling \(expr\).
    Following is the list of possible types of object for the supported libraries,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '‘scipy’: int, numpy.random.RandomState, numpy.random.Generator'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘numpy’: int, numpy.random.RandomState, numpy.random.Generator'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘pymc’: int'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optional, by default None, in which case seed settings related to the given
    library will be used. No modifications to environment’s global seed settings are
    done by this argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'sample_iter: iterator object'
  prefs: []
  type: TYPE_NORMAL
- en: iterator object containing the sample/samples of given expr
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sample`](#sympy.stats.sample "sympy.stats.sample"), [`sampling_P`](#sympy.stats.rv.sampling_P
    "sympy.stats.rv.sampling_P"), [`sampling_E`](#sympy.stats.rv.sampling_E "sympy.stats.rv.sampling_E")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: The factorial moment is a mathematical quantity defined as the expectation or
    average of the falling factorial of a random variable.
  prefs: []
  type: TYPE_NORMAL
- en: \[factorial-moment(X, n) = E(X(X - 1)(X - 2)...(X - n + 1))\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n: A natural number, n-th factorial moment.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1048](#id152)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Factorial_moment](https://en.wikipedia.org/wiki/Factorial_moment)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1049](#id153)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FactorialMoment.html](https://mathworld.wolfram.com/FactorialMoment.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: Characterizes the tails/outliers of a probability distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression. kurtosis(X, X>0) is kurtosis of X given X > 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Kurtosis of any univariate normal distribution is 3\. Kurtosis less than 3 means
    that the distribution produces fewer and less extreme outliers than the normal
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: \[kurtosis(X) = E(((X - E(X))/\sigma_X)^{4})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1050](#id154)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Kurtosis](https://en.wikipedia.org/wiki/Kurtosis)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R1051](#id155)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Kurtosis.html](https://mathworld.wolfram.com/Kurtosis.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: Measure of the asymmetry of the probability distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition** : Expr containing RandomSymbols'
  prefs: []
  type: TYPE_NORMAL
- en: A conditional expression. skewness(X, X>0) is skewness of X given X > 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Positive skew indicates that most of the values lie to the right of the mean.
  prefs: []
  type: TYPE_NORMAL
- en: \[skewness(X) = E(((X - E(X))/\sigma_X)^{3})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: Correlation of two random expressions, also known as correlation coefficient
    or Pearson’s correlation.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The normalized expectation that the two variables will rise and fall together
  prefs: []
  type: TYPE_NORMAL
- en: \[correlation(X,Y) = E((X-E(X))(Y-E(Y)) / (\sigma_x \sigma_y))\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: Sampling version of density.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`density`](#sympy.stats.density "sympy.stats.density"), [`sampling_P`](#sympy.stats.rv.sampling_P
    "sympy.stats.rv.sampling_P"), [`sampling_E`](#sympy.stats.rv.sampling_E "sympy.stats.rv.sampling_E")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: Sampling version of P.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`P`](#sympy.stats.P "sympy.stats.P"), [`sampling_E`](#sympy.stats.rv.sampling_E
    "sympy.stats.rv.sampling_E"), [`sampling_density`](#sympy.stats.rv.sampling_density
    "sympy.stats.rv.sampling_density")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: Sampling version of E.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`P`](#sympy.stats.P "sympy.stats.P"), [`sampling_P`](#sympy.stats.rv.sampling_P
    "sympy.stats.rv.sampling_P"), [`sampling_density`](#sympy.stats.rv.sampling_density
    "sympy.stats.rv.sampling_density")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic class for Moment
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: 'To evaluate the result of Moment use \(doit\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the Moment expression in terms of Expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the Moment expression in terms of Probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the Moment expression in terms of Integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: Return the nth moment of a random expression about c.
  prefs: []
  type: TYPE_NORMAL
- en: \[moment(X, c, n) = E((X-c)^{n})\]
  prefs: []
  type: TYPE_NORMAL
- en: Default value of c is 0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic class Central Moment
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: 'To evaluate the result of CentralMoment use \(doit\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the CentralMoment expression in terms of Expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the CentralMoment expression in terms of Probability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite the CentralMoment expression in terms of Integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: Return the nth central moment of a random expression about its mean.
  prefs: []
  type: TYPE_NORMAL
- en: \[cmoment(X, n) = E((X - E(X))^{n})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: Expectation of a random matrix expression.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: 'To expand the expectation in its expression, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: 'To evaluate the `ExpectationMatrix`, use `doit()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Variance of a random matrix probability expression. Also known as Covariance
    matrix, auto-covariance matrix, dispersion matrix, or variance-covariance matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: 'To expand the variance in its expression, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: Covariance of a random matrix probability expression.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: 'To expand the covariance in its expression, use `expand()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '## Mechanics'
  prefs: []
  type: TYPE_NORMAL
- en: SymPy Stats employs a relatively complex class hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: '`RandomDomain`s are a mapping of variables to possible values. For example,
    we might say that the symbol `Symbol(''x'')` can take on the values \(\{1,2,3,4,5,6\}\).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: A `PSpace`, or Probability Space, combines a `RandomDomain` with a density to
    provide probabilistic information. For example the above domain could be enhanced
    by a finite density `{1:1/6, 2:1/6, 3:1/6, 4:1/6, 5:1/6, 6:1/6}` to fully define
    the roll of a fair die named `x`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: A RandomSymbol represents the PSpace’s symbol ‘x’ inside of SymPy expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: The RandomDomain and PSpace classes are almost never directly instantiated.
    Instead they are subclassed for a variety of situations.
  prefs: []
  type: TYPE_NORMAL
- en: RandomDomains and PSpaces must be sufficiently general to represent domains
    and spaces of several variables with arbitrarily complex densities. This generality
    is often unnecessary. Instead we often build SingleDomains and SinglePSpaces to
    represent single, univariate events and processes such as a single die or a single
    normal variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: Another common case is to collect together a set of such univariate random variables.
    A collection of independent SinglePSpaces or SingleDomains can be brought together
    to form a ProductDomain or ProductPSpace. These objects would be useful in representing
    three dice rolled together for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: The Conditional adjective is added whenever we add a global condition to a RandomDomain
    or PSpace. A common example would be three independent dice where we know their
    sum to be greater than 12.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: We specialize further into Finite and Continuous versions of these classes to
    represent finite (such as dice) and continuous (such as normals) random variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: Additionally there are a few specialized classes that implement certain common
    random variable types. There is for example a DiePSpace that implements SingleFinitePSpace
    and a NormalPSpace that implements SingleContinuousPSpace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: RandomVariables can be extracted from these objects using the PSpace.values
    method.
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned SymPy Stats employs a relatively complex class structure.
    Inheritance is widely used in the implementation of end-level classes. This tactic
    was chosen to balance between the need to allow SymPy to represent arbitrarily
    defined random variables and optimizing for common cases. This complicates the
    code but is structured to only be important to those working on extending SymPy
    Stats to other random variable types.
  prefs: []
  type: TYPE_NORMAL
- en: Users will not use this class structure. Instead these mechanics are exposed
    through variable creation functions Die, Coin, FiniteRV, Normal, Exponential,
    etc…. These build the appropriate SinglePSpaces and return the corresponding RandomVariable.
    Conditional and Product spaces are formed in the natural construction of SymPy
    expressions and the use of interface functions E, Given, Density, etc….
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: There are some additional functions that may be useful. They are largely used
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: Returns all RandomSymbols within a SymPy Expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: Returns the underlying Probability Space of a random expression.
  prefs: []
  type: TYPE_NORMAL
- en: For internal use.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: Build a dictionary to swap RandomSymbols based on their underlying symbol.
  prefs: []
  type: TYPE_NORMAL
- en: i.e. if `X = ('x', pspace1)` and `Y = ('x', pspace2)` then `X` and `Y` match
    and the key, value pair `{X:Y}` will appear in the result
  prefs: []
  type: TYPE_NORMAL
- en: 'Inputs: collections a and b of random variables which share common symbols
    Output: dict mapping RVs in a to RVs in b'
  prefs: []
  type: TYPE_NORMAL
