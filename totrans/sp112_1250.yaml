- en: scipy.stats.yulesimon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.yulesimon.html#scipy.stats.yulesimon](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.yulesimon.html#scipy.stats.yulesimon)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Yule-Simon discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`yulesimon`](#scipy.stats.yulesimon "scipy.stats.yulesimon")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability mass function for the [`yulesimon`](#scipy.stats.yulesimon
    "scipy.stats.yulesimon") is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) = \alpha B(k, \alpha+1)\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(k=1,2,3,...\), where \(\alpha>0\). Here \(B\) refers to the [`scipy.special.beta`](scipy.special.beta.html#scipy.special.beta
    "scipy.special.beta") function.
  prefs: []
  type: TYPE_NORMAL
- en: The sampling of random variates is based on pg 553, Section 6.3 of [[1]](#r71ee978d9ee0-1).
    Our notation maps to the referenced logic via \(\alpha=a-1\).
  prefs: []
  type: TYPE_NORMAL
- en: For details see the wikipedia entry [[2]](#r71ee978d9ee0-2).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Devroye, Luc. “Non-uniform Random Variate Generation”, (1986) Springer, New
    York.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Yule-Simon_distribution](https://en.wikipedia.org/wiki/Yule-Simon_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `yulesimon.pmf(k, alpha,
    loc)` is identically equivalent to `yulesimon.pmf(k - loc, alpha)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-yulesimon-1_00_00.png](../Images/72beb3aae1799c65ba254bfe8525aedb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(alpha, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, alpha, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, alpha, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, alpha, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, alpha, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, alpha, loc=0)** | Survival function (also defined as `1 - cdf`, but
    *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, alpha, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, alpha, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, alpha, loc=0)** | Inverse survival function (inverse of `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(alpha, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(alpha, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(alpha,), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(alpha, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(alpha, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(alpha, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(alpha, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, alpha, loc=0)** | Confidence interval with equal areas
    around the median. |'
  prefs: []
  type: TYPE_TB
