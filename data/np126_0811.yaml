- en: Mathematical functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学函数
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.math.html](https://numpy.org/doc/1.26/reference/routines.math.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.math.html](https://numpy.org/doc/1.26/reference/routines.math.html)
- en: Trigonometric functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三角函数
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | 正弦函数，逐元素计算。 |'
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | 余弦函数，逐元素计算。 |'
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | 计算正切，逐元素计算。 |'
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out,��where, casting, order, ...])
    | 反正弦函数，逐元素计算。 |'
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | 反余弦函数，逐元素计算。 |'
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | 反正切函数，逐元素计算。 |'
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | 给定直角三角形的两条边，返回其斜边。 |'
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | 对 `x1/x2` 逐元素计算反正切，正确选择象限。 |'
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度。 |'
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。 |'
- en: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | Unwrap by taking the complement of large deltas with respect to the period.
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | 通过求相对于周期的补数来展开。 |'
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。 |'
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度。 |'
- en: Hyperbolic functions
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双曲函数
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | 双曲正弦函数，逐元素计算。 |'
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | 双曲余弦函数，逐元素计算。 |'
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | 计算双曲正切，逐元素计算。 |'
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | 反双曲正弦函数，逐元素计算。 |'
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | 反双曲余弦函数，逐元素计算。 |'
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | 逐个元素的反双曲正切。'
- en: Rounding
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 舍入
- en: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | Evenly round to the given number of decimals. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | 按指定的小数位数进行四舍五入。'
- en: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | Round an array to the given number of decimals. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | 将数组四舍五入到指定的小数位数。'
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | 数组元素四舍五入到最近的整数。'
- en: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | Round
    to nearest integer towards zero. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | 朝零方向四舍五入到最近的整数。'
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | 返回输入的下限值，逐个元素。'
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | 返回输入的上限值，逐个元素。'
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | 返回输入的截断值，逐个元素。'
- en: Sums, products, differences
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求和，乘积，差异
- en: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | 返回给定轴上数组元素的乘积。'
- en: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | Sum of array elements over a given axis. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | 返回给定轴上数组元素的和。'
- en: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis treating Not a Numbers
    (NaNs) as ones. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | 返回给定轴上数组元素的乘积，将 Not a Number（NaN）视为 1。'
- en: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | Return the sum of array elements over a given axis treating Not a Numbers (NaNs)
    as zero. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | 返回给定轴上数组元素的和，将 Not a Number（NaN）视为零。'
- en: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | Return the cumulative product of elements along a given axis. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | 返回沿给定轴对元素的累积乘积。'
- en: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of the elements along a given axis. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | 返回沿给定轴对数组元素的累积和。'
- en: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | Return the cumulative product of array elements over a given axis treating Not
    a Numbers (NaNs) as one. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | 返回给定轴上数组元素的累积乘积，将 Not a Number（NaN）视为 1。'
- en: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of array elements over a given axis treating Not a
    Numbers (NaNs) as zero. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | 返回给定轴上数组元素的累积和，将 Not a Number（NaN）视为零。'
- en: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | 沿着给定的轴计算第 n 个离散差分。'
- en: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | The differences between consecutive elements of an array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | 数组中相邻元素之间的差异。'
- en: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | Return the gradient of an N-dimensional array. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | 返回N维数组的梯度。 |'
- en: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | Return the cross product of two (arrays of) vectors. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | 返回两个（向量数组的）叉积。 |'
- en: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | Integrate along the given axis using the composite trapezoidal rule. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | 使用复合梯形规则沿给定轴积分。 |'
- en: Exponents and logarithms
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数和对数
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有元素的指数。 |'
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | 计算数组中所有元素的`exp(x) - 1`。 |'
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有*p*的*2**p*。 |'
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | 自然对数，逐元素方式。 |'
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | 返回输入数组的以10为底的对数，逐元素方式。 |'
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | *x*的以2为底的对数。 |'
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | 返回输入数组元素加1的自然对数，逐元素方式。 |'
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | 输入指数之和的对数。 |'
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | 以2为底的输入指数之和的对数。 |'
- en: Other special functions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他特殊函数
- en: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | Modified Bessel
    function of the first kind, order 0. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | 第一类修改贝塞尔函数，阶数为0。
    |'
- en: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | Return the
    normalized sinc function. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | 返回归一化的sinc函数。
    |'
- en: Floating point routines
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点数例程
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | 在signbit设置的元素位置返回True（小于零）。 |'
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | 将x1的符号更改为x2的符号，逐元素方式。 |'
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | 将x的元素分解为尾数和二次指数。 |'
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | 逐元素返回x1 * 2**x2。 |'
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | 返回在`x1`之后的下一个浮点数值，接近于`x2`，元素级别地 |'
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | 返回`x`和最近相邻数之间的距离 |'
- en: Rational routines
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分式计算
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最小公倍数 |'
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最大公约数 |'
- en: Arithmetic operations
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | 元素级别地相加 |'
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | 返回参数的倒数，元素级别地 |'
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | 数值正数元素级别地 |'
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | 数值负数元素级别地 |'
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | 元素级别地相乘 |'
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | 元素级别地相除 |'
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | 将第一个数组的元素按照第二个数组的元素作为指数逐个计算次方 |'
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | 元素级别的减法 |'
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | 元素级别地相除 |'
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | 返回输入的除法的最大整数小于或等于结果 |'
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | 将第一个数组的元素按照第二个数组的元素作为指数逐个计算次方 |'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回元素级别的除法余数 |'
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | 返回元素级别的除法余数 |'
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | 返回数组的分数部分和整数部分，按元素操作。'
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的元素余数。'
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | 同时返回逐个元素除法的商和余数。'
- en: Handling complex numbers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚数处理
- en: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | Return the angle of the complex argument. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | 返回复数参数的角度。'
- en: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | Return
    the real part of the complex argument. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | 返回复数参数的实部。'
- en: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | Return
    the imaginary part of the complex argument. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | 返回复数参数的虚部。'
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | 返回每个元素的复数共轭。'
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | 返回每个元素的复数共轭。'
- en: Extrema Finding
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极值查找
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐个最大值。'
- en: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最大值。'
- en: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最大值。'
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐个最大值。'
- en: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis, ignoring any NaNs.
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最大值，忽略任何NaN。'
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐个最小值。'
- en: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最小值。'
- en: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最小值。'
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐个最小值。'
- en: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | Return minimum of an array or minimum along an axis, ignoring any NaNs. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | 返回数组或沿轴的最小值，忽略任何NaN。'
- en: Miscellaneous
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项
- en: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | Returns the discrete, linear convolution of two one-dimensional sequences. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | 返回两个一维序列的离散线性卷积。 |'
- en: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | Clip (limit) the values in an array. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | 裁剪（限制）数组中的值。 |'
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的非负平方根，逐元素操作。 |'
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的立方根，逐元素操作。 |'
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | 返回输入的逐元素平方。 |'
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。 |'
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | 返回数字的逐元素符号指示。 |'
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | 计算海维赛德阶跃函数。 |'
- en: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | Replace NaN with zero and infinity with large finite numbers (default behaviour)
    or with the numbers defined by the user using the [`nan`](constants.html#numpy.nan
    "numpy.nan"), *posinf* and/or *neginf* keywords. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | 用零替换NaN，用大有限数替换无穷（默认行为）或用用户使用`nan`、*posinf*或*neginf*关键字定义的数替换。 |'
- en: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | If input is complex with all imaginary parts
    close to zero, return real parts. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | 如果输入是所有虚部接近零的复数，则返回实部。 |'
- en: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | One-dimensional linear interpolation for monotonically increasing sample points.
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | 单调递增样本点的一维线性插值。 |'
- en: Trigonometric functions
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三角函数
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | 正弦，逐元素操作。 |'
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | 余弦，逐元素操作。 |'
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | 计算正切，逐元素操作。 |'
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | 反正弦，逐元素操作。 |'
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | 逆余弦，逐元素操作。 |'
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | 逆三角反正切，逐元素进行。 |'
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | 针对直角三角形的“腿”，返回其斜边。 |'
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | 选择正确象限的`x1/x2`的元素方位角正切。 |'
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度数。 |'
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | 将角度从度数转换为弧度。 |'
- en: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | Unwrap by taking the complement of large deltas with respect to the period.
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`unwrap`](generated/numpy.unwrap.html#numpy.unwrap "numpy.unwrap")(p[, discont, axis, period])
    | 通过相对于周期的补集来取消大的增量。 |'
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | 将角度从度数转换为弧度。 |'
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度数。 |'
- en: Hyperbolic functions
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双曲函数
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | 双曲正弦，逐元素进行。 |'
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | 双曲余弦，逐元素进行。 |'
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | 计算双曲正切的元素。 |'
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | 逆双曲正弦逐元素进行。 |'
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | 反双曲余弦，逐元素进行。 |'
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | 逆双曲正切，逐元素进行。 |'
- en: Rounding
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 四舍五入
- en: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | Evenly round to the given number of decimals. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`round`](generated/numpy.round.html#numpy.round "numpy.round")(a[, decimals, out])
    | 均匀地四舍五入到给定的小数位数。 |'
- en: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | Round an array to the given number of decimals. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`around`](generated/numpy.around.html#numpy.around "numpy.around")(a[, decimals, out])
    | 将数组四舍五入到给定的小数位数。 |'
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | 将数组元素四舍五入到最接近的整数。 | '
- en: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | Round
    to nearest integer towards zero. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`fix`](generated/numpy.fix.html#numpy.fix "numpy.fix")(x[, out]) | 向零舍入到最近的整数。
    |'
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | 返回输入的下限，逐元素进行。 |'
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | 返回输入的上限, 按元素计算。 |'
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | 返回输入的截断值，按元素计算。 |'
- en: Sums, products, differences
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求和、乘积、差异
- en: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod")(a[, axis, dtype, out, keepdims, ...])
    | 返回沿给定轴的数组元素的乘积。 |'
- en: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | Sum of array elements over a given axis. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum")(a[, axis, dtype, out, keepdims, ...])
    | 沿着给定轴的数组元素的和。 |'
- en: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | Return the product of array elements over a given axis treating Not a Numbers
    (NaNs) as ones. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`nanprod`](generated/numpy.nanprod.html#numpy.nanprod "numpy.nanprod")(a[, axis, dtype, out, keepdims, ...])
    | 返回数组元素沿着给定轴的乘积，将NaN处理为1。 |'
- en: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | Return the sum of array elements over a given axis treating Not a Numbers (NaNs)
    as zero. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`nansum`](generated/numpy.nansum.html#numpy.nansum "numpy.nansum")(a[, axis, dtype, out, keepdims, ...])
    | 返回数组元素沿着给定轴的和，并将Not a Number（NaN）视为零。 |'
- en: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | Return the cumulative product of elements along a given axis. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod")(a[, axis, dtype, out])
    | 返回沿给定轴的元素的累积乘积。 |'
- en: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of the elements along a given axis. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum")(a[, axis, dtype, out])
    | 返回沿给定轴的元素的累积和。 |'
- en: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | Return the cumulative product of array elements over a given axis treating Not
    a Numbers (NaNs) as one. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`nancumprod`](generated/numpy.nancumprod.html#numpy.nancumprod "numpy.nancumprod")(a[, axis, dtype, out])
    | 返回数组元素沿着给定轴的累积乘积, 将Not a Number（NaN）视为1。 |'
- en: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | Return the cumulative sum of array elements over a given axis treating Not a
    Numbers (NaNs) as zero. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`nancumsum`](generated/numpy.nancumsum.html#numpy.nancumsum "numpy.nancumsum")(a[, axis, dtype, out])
    | 返回数组元素沿着给定轴的累积和, 将Not a Number（NaN）视为零。 |'
- en: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`diff`](generated/numpy.diff.html#numpy.diff "numpy.diff")(a[, n, axis, prepend, append])
    | 计算沿着给定轴的第n个离散差异。 |'
- en: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | The differences between consecutive elements of an array. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`ediff1d`](generated/numpy.ediff1d.html#numpy.ediff1d "numpy.ediff1d")(ary[, to_end, to_begin])
    | 数组中相邻元素的差。 |'
- en: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | Return the gradient of an N-dimensional array. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`gradient`](generated/numpy.gradient.html#numpy.gradient "numpy.gradient")(f, *varargs[, axis, edge_order])
    | 返回N维数组的梯度。 |'
- en: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | Return the cross product of two (arrays of) vectors. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`cross`](generated/numpy.cross.html#numpy.cross "numpy.cross")(a, b[, axisa, axisb, axisc, axis])
    | 返回两个（向量的）数组的叉乘积。 |'
- en: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | Integrate along the given axis using the composite trapezoidal rule. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`trapz`](generated/numpy.trapz.html#numpy.trapz "numpy.trapz")(y[, x, dx, axis])
    | 使用复合梯形法则沿着给定轴进行积分。 |'
- en: Exponents and logarithms
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数和对数
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有元素的指数。 |'
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | 计算数组中所有元素�� `exp(x) - 1`。 |'
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有*p*的*2**p*。'
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | 自然对数，对每个元素进行操作。'
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | 返回输入数组每个元素的以 10 为底的对数。'
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | *x* 的底为 2 的对数。'
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | 返回输入数组每个元素加一后的自然对数。'
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | 输入的指数之和的对数。'
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | 基于底为 2 计算输入的指数之和的对数。'
- en: Other special functions
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他特殊函数
- en: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | Modified Bessel
    function of the first kind, order 0. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`i0`](generated/numpy.i0.html#numpy.i0 "numpy.i0")(x) | 第一类修改 Bessel 函数，阶数为
    0。'
- en: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | Return the
    normalized sinc function. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`sinc`](generated/numpy.sinc.html#numpy.sinc "numpy.sinc")(x) | 返回归一化的 sinc
    函数。'
- en: Floating point routines
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点数例程
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | 在符号位设置时返回 True，即小于零。'
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | 将 x1 的符号更改为 x2 的符号，对每个元素进行操作。'
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | 将 x 的元素分解为尾数和两个的指数。'
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 * 2**x2，对每个元素进行操作。'
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 朝向 x2 的下一个浮点值，对每个元素进行操作。'
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | 返回 x 与最近相邻数之间的距离。'
- en: Rational routines
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有理数例程
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最小公倍数。'
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最大公约数。'
- en: Arithmetic operations
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | 逐元素地相加。 |'
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | 返回参数的倒数，逐元素进行操作。 |'
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | 数值取正，逐元素进行操作。 |'
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | 数值求负，逐元素进行操作。 |'
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | 逐元素地相乘。 |'
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | 逐元素地相除。 |'
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | 将第一个数组的元素逐元素地提升到第二个数组的幂。 |'
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | 逐元素地相减。 |'
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | 逐元素地相除。 |'
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | 返回输入的商中最大的小于或等于整数。 |'
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | 将第一个数组的元素逐元素地提升到第二个数组的幂。 |'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素地取模后的余数。 |'
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | 返回逐元素地取模后的余数。 |'
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | 返回数组的分数部分和整数部分，逐元素进行操作。 |'
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素地取模后的余数。 |'
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | 同时返回逐元素地商和余数。 |'
- en: Handling complex numbers
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理复数
- en: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | Return the angle of the complex argument. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`angle`](generated/numpy.angle.html#numpy.angle "numpy.angle")(z[, deg])
    | 返回复数参数的角度。 |'
- en: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | Return
    the real part of the complex argument. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`real`](generated/numpy.real.html#numpy.real "numpy.real")(val) | 返回复数参数的实部。
    |'
- en: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | Return
    the imaginary part of the complex argument. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag")(val) | 返回复数参数的虚部。
    |'
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | 返回复共轭，逐元素计算。 |'
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | 返回复共轭，逐元素计算。 |'
- en: Extrema Finding
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极值查找
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`max`](generated/numpy.max.html#numpy.max "numpy.max")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最大值或沿轴的最大值。 |'
- en: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`amax`](generated/numpy.amax.html#numpy.amax "numpy.amax")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最大值或沿轴的最大值。 |'
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | Return the maximum of an array or maximum along an axis, ignoring any NaNs.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`nanmax`](generated/numpy.nanmax.html#numpy.nanmax "numpy.nanmax")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最大值或沿轴的最大值，忽略任何 NaN 值。 |'
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`min`](generated/numpy.min.html#numpy.min "numpy.min")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最小值或沿轴的最小值。 |'
- en: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | Return the minimum of an array or minimum along an axis. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`amin`](generated/numpy.amin.html#numpy.amin "numpy.amin")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最小值或沿轴的最小值。 |'
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | Return minimum of an array or minimum along an axis, ignoring any NaNs. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`nanmin`](generated/numpy.nanmin.html#numpy.nanmin "numpy.nanmin")(a[, axis, out, keepdims, initial, where])
    | 返回数组的最小值或沿轴的最小值，忽略任何 NaN 值。 |'
- en: Miscellaneous
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他
- en: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | Returns the discrete, linear convolution of two one-dimensional sequences. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`convolve`](generated/numpy.convolve.html#numpy.convolve "numpy.convolve")(a, v[, mode])
    | 返回两个一维序列的离散线性卷积。 |'
- en: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | Clip (limit) the values in an array. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip")(a, a_min, a_max[, out])
    | 将数组中的值裁剪（限制）到指定范围内。 |'
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的非负平方根，逐元素计算。 |'
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的立方根，逐元素计算。 |'
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | 返回输入的逐元素平方。 |'
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | 计算元素级别的绝对值。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 计算元素级别的绝对值。 |'
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | 返回一个元素级别的数字符号指示。 |'
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | 计算海维赛德阶跃函数。 |'
- en: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | Replace NaN with zero and infinity with large finite numbers (default behaviour)
    or with the numbers defined by the user using the [`nan`](constants.html#numpy.nan
    "numpy.nan"), *posinf* and/or *neginf* keywords. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`nan_to_num`](generated/numpy.nan_to_num.html#numpy.nan_to_num "numpy.nan_to_num")(x[, copy, nan, posinf, neginf])
    | 用零替换NaN，用大有限数替换无穷大（默认行为）或者用用户使用[`nan`](constants.html#numpy.nan "numpy.nan")、*posinf*或*neginf*关键字定义的数字替换。
    |'
- en: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | If input is complex with all imaginary parts
    close to zero, return real parts. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`real_if_close`](generated/numpy.real_if_close.html#numpy.real_if_close
    "numpy.real_if_close")(a[, tol]) | 如果输入是复数，所有虚部接近零，则返回实部。 |'
- en: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | One-dimensional linear interpolation for monotonically increasing sample points.
    |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`interp`](generated/numpy.interp.html#numpy.interp "numpy.interp")(x, xp, fp[, left, right, period])
    | 单调递增样本点的一维线性插值。 |'
