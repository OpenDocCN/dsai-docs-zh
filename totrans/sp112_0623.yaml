- en: scipy.signal.tf2zpk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.tf2zpk.html#scipy.signal.tf2zpk](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.tf2zpk.html#scipy.signal.tf2zpk)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return zero, pole, gain (z, p, k) representation from a numerator, denominator
    representation of a linear filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Denominator polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**z**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the transfer function.
  prefs: []
  type: TYPE_NORMAL
- en: '**p**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the transfer function.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**float'
  prefs: []
  type: TYPE_NORMAL
- en: System gain.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If some values of *b* are too close to 0, they are removed. In that case, a
    BadCoefficients warning is emitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *b* and *a* arrays are interpreted as coefficients for positive, descending
    powers of the transfer function variable. So the inputs \(b = [b_0, b_1, ...,
    b_M]\) and \(a =[a_0, a_1, ..., a_N]\) can represent an analog filter of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: \[H(s) = \frac {b_0 s^M + b_1 s^{(M-1)} + \cdots + b_M} {a_0 s^N + a_1 s^{(N-1)}
    + \cdots + a_N}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'or a discrete-time filter of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: \[H(z) = \frac {b_0 z^M + b_1 z^{(M-1)} + \cdots + b_M} {a_0 z^N + a_1 z^{(N-1)}
    + \cdots + a_N}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'This “positive powers” form is found more commonly in controls engineering.
    If *M* and *N* are equal (which is true for all filters generated by the bilinear
    transform), then this happens to be equivalent to the “negative powers” discrete-time
    form preferred in DSP:'
  prefs: []
  type: TYPE_NORMAL
- en: \[H(z) = \frac {b_0 + b_1 z^{-1} + \cdots + b_M z^{-M}} {a_0 + a_1 z^{-1} +
    \cdots + a_N z^{-N}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Although this is true for common filters, remember that this is not true in
    the general case. If *M* and *N* are not equal, the discrete-time transfer function
    coefficients must first be converted to the “positive powers” form before finding
    the poles and zeros.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Find the zeroes, poles and gain of a filter with the transfer function
  prefs: []
  type: TYPE_NORMAL
- en: \[H(s) = \frac{3s^2}{s^2 + 5s + 13}\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
