- en: NumPy 1.23.0 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.23.0-notes.html](https://numpy.org/doc/1.26/release/1.23.0-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The NumPy 1.23.0 release continues the ongoing work to improve the handling
    and promotion of dtypes, increase the execution speed, clarify the documentation,
    and expire old deprecations. The highlights are:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of `loadtxt` in C, greatly improving its performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing DLPack at the Python level for easy data exchange.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the promotion and comparisons of structured dtypes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvements to f2py.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See below for the details,
  prefs: []
  type: TYPE_NORMAL
- en: New functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A masked array specialization of `ndenumerate` is now available as `numpy.ma.ndenumerate`.
    It provides an alternative to `numpy.ndenumerate` and skips masked values by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.from_dlpack` has been added to allow easy exchange of data using the
    DLPack protocol. It accepts Python objects that implement the `__dlpack__` and
    `__dlpack_device__` methods and returns a ndarray object which is generally the
    view of the data of the input object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting `__array_finalize__` to `None` is deprecated. It must now be a method
    and may wish to call `super().__array_finalize__(obj)` after checking for `None`
    or if the NumPy version is sufficiently new.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using `axis=32` (`axis=np.MAXDIMS`) in many cases had the same meaning as `axis=None`.
    This is deprecated and `axis=None` must be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The hook function `PyDataMem_SetEventHook` has been deprecated and the demonstration
    of its use in tool/allocation_tracking has been removed. The ability to track
    allocations is now built-in to python via `tracemalloc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.distutils` has been deprecated, as a result of `distutils` itself being
    deprecated. It will not be present in NumPy for Python >= 3.12, and will be removed
    completely 2 years after the release of Python 3.12 For more details, see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` will now give a `DeprecationWarning` when an integer `dtype`
    is requested but the value is formatted as a floating point number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NpzFile.iteritems()` and `NpzFile.iterkeys()` methods have been removed
    as part of the continued removal of Python 2 compatibility. This concludes the
    deprecation from 1.15.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `alen` and `asscalar` functions have been removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `UPDATEIFCOPY` array flag has been removed together with the enum `NPY_ARRAY_UPDATEIFCOPY`.
    The associated (and deprecated) `PyArray_XDECREF_ERR` was also removed. These
    were all deprecated in 1.14\. They are replaced by `NPY_ARRAY_WRITEBACKIFCOPY`,
    that requires calling `PyArray_ResolveWritebackIfCopy` before the array is deallocated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation. When an object raised
    an exception during access of the special attributes `__array__` or `__array_interface__`,
    this exception was usually ignored. This behaviour was deprecated in 1.21, and
    the exception will now be raised.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Multidimensional indexing with non-tuple values is not allowed. Previously,
    code such as `arr[ind]` where `ind = [[0, 1], [0, 1]]` produced a `FutureWarning`
    and was interpreted as a multidimensional index (i.e., `arr[tuple(ind)]`). Now
    this example is treated like an array index over a single dimension (`arr[array(ind)]`).
    Multidimensional indexing with anything but a tuple was deprecated in NumPy 1.15.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Changing to a dtype of different size in F-contiguous arrays is no longer permitted.
    Deprecated since Numpy 1.11.0\. See below for an extended explanation of the effects
    of this change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: crackfortran has support for operator and assignment overloading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  prefs: []
  type: TYPE_NORMAL
- en: f2py supports reading access type attributes from derived type statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `ndmin` added to `genfromtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` now supports quote character and single converter function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  prefs: []
  type: TYPE_NORMAL
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic output files for F2PY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `average`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `equal_nan` added to `np.unique`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to structured (void) dtype promotion and comparisons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"safe"` allows mismatching field names and titles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cast safety is limited by the cast safety of each included field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` has recieved several changes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  prefs: []
  type: TYPE_NORMAL
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  prefs: []
  type: TYPE_NORMAL
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ndarray.__array_finalize__` is now callable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  prefs: []
  type: TYPE_NORMAL
- en: Add support for VSX4/Power10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.fromiter` now accepts objects and subarrays'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  prefs: []
  type: TYPE_NORMAL
- en: Math C library feature detection now uses correct signatures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` now maintains subclass information'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements and changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Faster `np.loadtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Faster reduction operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.where`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  prefs: []
  type: TYPE_NORMAL
- en: Faster operations on NumPy scalars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.kron`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  prefs: []
  type: TYPE_NORMAL
- en: New functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A masked array specialization of `ndenumerate` is now available as `numpy.ma.ndenumerate`.
    It provides an alternative to `numpy.ndenumerate` and skips masked values by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.from_dlpack` has been added to allow easy exchange of data using the
    DLPack protocol. It accepts Python objects that implement the `__dlpack__` and
    `__dlpack_device__` methods and returns a ndarray object which is generally the
    view of the data of the input object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting `__array_finalize__` to `None` is deprecated. It must now be a method
    and may wish to call `super().__array_finalize__(obj)` after checking for `None`
    or if the NumPy version is sufficiently new.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using `axis=32` (`axis=np.MAXDIMS`) in many cases had the same meaning as `axis=None`.
    This is deprecated and `axis=None` must be used instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The hook function `PyDataMem_SetEventHook` has been deprecated and the demonstration
    of its use in tool/allocation_tracking has been removed. The ability to track
    allocations is now built-in to python via `tracemalloc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.distutils` has been deprecated, as a result of `distutils` itself being
    deprecated. It will not be present in NumPy for Python >= 3.12, and will be removed
    completely 2 years after the release of Python 3.12 For more details, see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` will now give a `DeprecationWarning` when an integer `dtype`
    is requested but the value is formatted as a floating point number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NpzFile.iteritems()` and `NpzFile.iterkeys()` methods have been removed
    as part of the continued removal of Python 2 compatibility. This concludes the
    deprecation from 1.15.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `alen` and `asscalar` functions have been removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `UPDATEIFCOPY` array flag has been removed together with the enum `NPY_ARRAY_UPDATEIFCOPY`.
    The associated (and deprecated) `PyArray_XDECREF_ERR` was also removed. These
    were all deprecated in 1.14\. They are replaced by `NPY_ARRAY_WRITEBACKIFCOPY`,
    that requires calling `PyArray_ResolveWritebackIfCopy` before the array is deallocated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation. When an object raised
    an exception during access of the special attributes `__array__` or `__array_interface__`,
    this exception was usually ignored. This behaviour was deprecated in 1.21, and
    the exception will now be raised.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Multidimensional indexing with non-tuple values is not allowed. Previously,
    code such as `arr[ind]` where `ind = [[0, 1], [0, 1]]` produced a `FutureWarning`
    and was interpreted as a multidimensional index (i.e., `arr[tuple(ind)]`). Now
    this example is treated like an array index over a single dimension (`arr[array(ind)]`).
    Multidimensional indexing with anything but a tuple was deprecated in NumPy 1.15.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Changing to a dtype of different size in F-contiguous arrays is no longer permitted.
    Deprecated since Numpy 1.11.0\. See below for an extended explanation of the effects
    of this change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: crackfortran has support for operator and assignment overloading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  prefs: []
  type: TYPE_NORMAL
- en: f2py supports reading access type attributes from derived type statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `ndmin` added to `genfromtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` now supports quote character and single converter function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  prefs: []
  type: TYPE_NORMAL
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic output files for F2PY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `average`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `equal_nan` added to `np.unique`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  prefs: []
  type: TYPE_NORMAL
- en: crackfortran has support for operator and assignment overloading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  prefs: []
  type: TYPE_NORMAL
- en: f2py supports reading access type attributes from derived type statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `ndmin` added to `genfromtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` now supports quote character and single converter function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  prefs: []
  type: TYPE_NORMAL
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  prefs: []
  type: TYPE_NORMAL
- en: Deterministic output files for F2PY
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `average`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  prefs: []
  type: TYPE_NORMAL
- en: New parameter `equal_nan` added to `np.unique`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to structured (void) dtype promotion and comparisons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"safe"` allows mismatching field names and titles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cast safety is limited by the cast safety of each included field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` has recieved several changes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  prefs: []
  type: TYPE_NORMAL
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  prefs: []
  type: TYPE_NORMAL
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to structured (void) dtype promotion and comparisons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"safe"` allows mismatching field names and titles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cast safety is limited by the cast safety of each included field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` has recieved several changes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  prefs: []
  type: TYPE_NORMAL
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  prefs: []
  type: TYPE_NORMAL
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ndarray.__array_finalize__` is now callable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  prefs: []
  type: TYPE_NORMAL
- en: Add support for VSX4/Power10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.fromiter` now accepts objects and subarrays'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  prefs: []
  type: TYPE_NORMAL
- en: Math C library feature detection now uses correct signatures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` now maintains subclass information'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray.__array_finalize__` is now callable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  prefs: []
  type: TYPE_NORMAL
- en: Add support for VSX4/Power10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.fromiter` now accepts objects and subarrays'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  prefs: []
  type: TYPE_NORMAL
- en: Math C library feature detection now uses correct signatures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` now maintains subclass information'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements and changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Faster `np.loadtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Faster reduction operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.where`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  prefs: []
  type: TYPE_NORMAL
- en: Faster operations on NumPy scalars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.kron`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.loadtxt`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  prefs: []
  type: TYPE_NORMAL
- en: Faster reduction operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.where`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  prefs: []
  type: TYPE_NORMAL
- en: Faster operations on NumPy scalars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  prefs: []
  type: TYPE_NORMAL
- en: Faster `np.kron`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  prefs: []
  type: TYPE_NORMAL
