- en: Essential Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/vector/api/classes.html](https://docs.sympy.org/latest/modules/physics/vector/api/classes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A coordinate symbol/base scalar associated wrt a Reference Frame.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, users should not instantiate this class. Instances of this class must
    only be accessed through the corresponding frame as ‘frame[index]’.
  prefs: []
  type: TYPE_NORMAL
- en: CoordinateSyms having the same frame and index parameters are equal (even though
    they may be instantiated separately).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : string'
  prefs: []
  type: TYPE_NORMAL
- en: The display name of the CoordinateSym
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame this base scalar belongs to
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**index** : 0, 1 or 2'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the dimension denoted by this coordinate variable
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A reference frame in classical mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: ReferenceFrame is a class used to represent a reference frame in classical mechanics.
    It has a standard basis of three unit vectors in the frame’s x, y, and z directions.
  prefs: []
  type: TYPE_NORMAL
- en: It also can have a rotation relative to a parent frame; this rotation is defined
    by a direction cosine matrix relating this frame’s basis vectors to the parent
    frame’s basis vectors. It can also have an angular velocity vector, defined in
    another frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returns the angular acceleration Vector of the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Effectively returns the Vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '`N_alpha_B`'
  prefs: []
  type: TYPE_NORMAL
- en: which represent the angular acceleration of B in N, where B is self, and N is
    otherframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The ReferenceFrame which the angular acceleration is returned in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns the angular velocity Vector of the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Effectively returns the Vector:'
  prefs: []
  type: TYPE_NORMAL
- en: ^N omega ^B
  prefs: []
  type: TYPE_NORMAL
- en: which represent the angular velocity of B in N, where B is self, and N is otherframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The ReferenceFrame which the angular velocity is returned in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Returns the direction cosine matrix of this reference frame relative to the
    provided reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: The returned matrix can be used to express the orthogonal unit vectors of this
    frame in terms of the orthogonal unit vectors of `otherframe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame which the direction cosine matrix of this frame is formed
    relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following example rotates the reference frame A relative to N by a simple
    rotation and then calculates the direction cosine matrix of N relative to A.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The second row of the above direction cosine matrix represents the `N.y` unit
    vector in N expressed in A. Like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, expressing `N.y` in A should return the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to know what form of the direction cosine matrix is returned.
    If `B.dcm(A)` is called, it means the “direction cosine matrix of B rotated relative
    to A”. This is the matrix \({}^B\mathbf{C}^A\) shown in the following relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\begin{bmatrix} \hat{\mathbf{b}}_1 \\ \hat{\mathbf{b}}_2 \\ \hat{\mathbf{b}}_3
    \end{bmatrix} = {}^B\mathbf{C}^A \begin{bmatrix} \hat{\mathbf{a}}_1 \\ \hat{\mathbf{a}}_2
    \\ \hat{\mathbf{a}}_3 \end{bmatrix}.\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: \({}^B\mathbf{C}^A\) is the matrix that expresses the B unit vectors in terms
    of the A unit vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sets the orientation of this reference frame relative to another (parent) reference
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is now recommended to use the `.orient_axis, .orient_body_fixed, .orient_space_fixed,
    .orient_quaternion` methods for the different rotation types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rot_type** : str'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method used to generate the direction cosine matrix. Supported methods
    are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`''Axis''`: simple rotations about a single common axis'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''DCM''`: for setting the direction cosine matrix directly'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Body''`: three successive rotations about new intermediate axes, also called
    “Euler and Tait-Bryan angles”'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Space''`: three successive rotations about the parent frames’ unit vectors'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Quaternion''`: rotations defined by four parameters which result in a singularity
    free direction cosine matrix'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amounts :**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions defining the rotation angles or direction cosine matrix. These
    must match the `rot_type`. See examples below for details. The input types are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`''Axis''`: 2-tuple (expr/sym/func, Vector)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''DCM''`: Matrix, shape(3,3)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Body''`: 3-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Space''`: 3-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Quaternion''`: 4-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rot_order** : str or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If applicable, the order of the successive of rotations. The string `'123'`
    and integer `123` are equivalent, for example. Required for `'Body'` and `'Space'`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Sets the orientation of this reference frame with respect to a parent reference
    frame by rotating through an angle about an axis fixed in the parent reference
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: Vector fixed in the parent frame about about which this frame is rotated. It
    need not be a unit vector and the rotation follows the right hand rule.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angle** : sympifiable'
  prefs: []
  type: TYPE_NORMAL
- en: Angle in radians by which it the frame is to be rotated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup variables for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `orient_axis()` method generates a direction cosine matrix and its transpose
    which defines the orientation of B relative to N and vice versa. Once orient is
    called, `dcm()` outputs the appropriate direction cosine matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The following two lines show that the sense of the rotation can be defined by
    negating the vector direction or the angle. Both lines produce the same result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Rotates this reference frame relative to the parent reference frame by right
    hand rotating through three successive body fixed simple axis rotations. Each
    subsequent axis of rotation is about the “body fixed” unit vectors of a new intermediate
    reference frame. This type of rotation is also referred to rotating through the
    [Euler and Tait-Bryan Angles](https://en.wikipedia.org/wiki/Euler_angles).
  prefs: []
  type: TYPE_NORMAL
- en: The computed angular velocity in this method is by default expressed in the
    child’s frame, so it is most preferable to use `u1 * child.x + u2 * child.y +
    u3 * child.z` as generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angles** : 3-tuple of sympifiable'
  prefs: []
  type: TYPE_NORMAL
- en: Three angles in radians used for the successive rotations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rotation_order** : 3 character string or 3 digit integer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Order of the rotations about each intermediate reference frames’ unit vectors.
    The Euler rotation about the X, Z’, X’’ axes can be specified by the strings `''XZX''`,
    `''131''`, or the integer `131`. There are 12 unique valid rotation orders (6
    Euler and 6 Tait-Bryan): zxz, xyx, yzy, zyz, xzx, yxy, xyz, yzx, zxy, xzy, zyx,
    and yxz.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup variables for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, a classic Euler Angle rotation can be done by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This rotates reference frame B relative to reference frame N through `q1` about
    `N.x`, then rotates B again through `q2` about `B.y`, and finally through `q3`
    about `B.x`. It is equivalent to three successive `orient_axis()` calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Acceptable rotation orders are of length 3, expressed in as a string `'XYZ'`
    or `'123'` or integer `123`. Rotations about an axis twice in a row are prohibited.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Sets the orientation of this reference frame relative to another (parent) reference
    frame using a direction cosine matrix that describes the rotation from the child
    to the parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dcm** : Matrix, shape(3, 3)'
  prefs: []
  type: TYPE_NORMAL
- en: Direction cosine matrix that specifies the relative rotation between the two
    reference frames.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup variables for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A simple rotation of `A` relative to `N` about `N.x` is defined by the following
    direction cosine matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to using `orient_axis()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Sets the orientation of this reference frame relative to a parent reference
    frame via an orientation quaternion. An orientation quaternion is defined as a
    finite rotation a unit vector, `(lambda_x, lambda_y, lambda_z)`, by an angle `theta`.
    The orientation quaternion is described by four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`q0 = cos(theta/2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q1 = lambda_x*sin(theta/2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q2 = lambda_y*sin(theta/2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q3 = lambda_z*sin(theta/2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See [Quaternions and Spatial Rotation](https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation)
    on Wikipedia for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**numbers** : 4-tuple of sympifiable'
  prefs: []
  type: TYPE_NORMAL
- en: 'The four quaternion scalar numbers as defined above: `q0`, `q1`, `q2`, `q3`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup variables for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Rotates this reference frame relative to the parent reference frame by right
    hand rotating through three successive space fixed simple axis rotations. Each
    subsequent axis of rotation is about the “space fixed” unit vectors of the parent
    reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: The computed angular velocity in this method is by default expressed in the
    child’s frame, so it is most preferable to use `u1 * child.x + u2 * child.y +
    u3 * child.z` as generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parent** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Reference frame that this reference frame will be rotated relative to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**angles** : 3-tuple of sympifiable'
  prefs: []
  type: TYPE_NORMAL
- en: Three angles in radians used for the successive rotations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rotation_order** : 3 character string or 3 digit integer'
  prefs: []
  type: TYPE_NORMAL
- en: Order of the rotations about the parent reference frame’s unit vectors. The
    order can be specified by the strings `'XZX'`, `'131'`, or the integer `131`.
    There are 12 unique valid rotation orders.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserWarning**'
  prefs: []
  type: TYPE_NORMAL
- en: If the orientation creates a kinematic loop.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup variables for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: It is worth noting that space-fixed and body-fixed rotations are related by
    the order of the rotations, i.e. the reverse order of body fixed will give space
    fixed and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns a new reference frame oriented with respect to this reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: See `ReferenceFrame.orient()` for detailed examples of how to orient reference
    frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**newname** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Name for the new reference frame.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rot_type** : str'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method used to generate the direction cosine matrix. Supported methods
    are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`''Axis''`: simple rotations about a single common axis'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''DCM''`: for setting the direction cosine matrix directly'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Body''`: three successive rotations about new intermediate axes, also called
    “Euler and Tait-Bryan angles”'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Space''`: three successive rotations about the parent frames’ unit vectors'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Quaternion''`: rotations defined by four parameters which result in a singularity
    free direction cosine matrix'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**amounts :**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions defining the rotation angles or direction cosine matrix. These
    must match the `rot_type`. See examples below for details. The input types are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`''Axis''`: 2-tuple (expr/sym/func, Vector)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''DCM''`: Matrix, shape(3,3)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Body''`: 3-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Space''`: 3-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Quaternion''`: 4-tuple of expressions, symbols, or functions'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rot_order** : str or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If applicable, the order of the successive of rotations. The string `'123'`
    and integer `123` are equivalent, for example. Required for `'Body'` and `'Space'`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**indices** : tuple of str'
  prefs: []
  type: TYPE_NORMAL
- en: Enables the reference frame’s basis unit vectors to be accessed by Python’s
    square bracket indexing notation using the provided three indice strings and alters
    the printing of the unit vectors to reflect this choice.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**latexs** : tuple of str'
  prefs: []
  type: TYPE_NORMAL
- en: Alters the LaTeX printing of the reference frame’s basis unit vectors to the
    provided three valid LaTeX strings.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Create a new reference frame A rotated relative to N through a simple rotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Create a new reference frame B rotated relative to N through body-fixed rotations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create a new reference frame C rotated relative to N through a simple rotation
    with unique indices and LaTeX printing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Returns the partial angular velocities of this frame in the given frame with
    respect to one or more provided generalized speeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame with which the angular velocity is defined in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gen_speeds** : functions of time'
  prefs: []
  type: TYPE_NORMAL
- en: The generalized speeds.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**partial_velocities** : tuple of Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The partial angular velocity vectors corresponding to the provided generalized
    speeds.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Define the angular acceleration Vector in a ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Defines the angular acceleration of this ReferenceFrame, in another. Angular
    acceleration can be defined with respect to multiple different ReferenceFrames.
    Care must be taken to not create loops which are inconsistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: A ReferenceFrame to define the angular acceleration in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**value** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector representing angular acceleration
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Define the angular velocity vector in a ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Defines the angular velocity of this ReferenceFrame, in another. Angular velocity
    can be defined with respect to multiple different ReferenceFrames. Care must be
    taken to not create loops which are inconsistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: A ReferenceFrame to define the angular velocity in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**value** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector representing angular velocity
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyadic for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns a dictionary which expresses the coordinate variables of this frame
    in terms of the variables of otherframe.
  prefs: []
  type: TYPE_NORMAL
- en: If Vector.simp is True, returns a simplified version of the mapped values. Else,
    returns them without simplification.
  prefs: []
  type: TYPE_NORMAL
- en: Simplification of the expressions may take time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The other frame to map the variables to
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the ReferenceFrame, in the x direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors x and x for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors x and y for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors x and z for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the ReferenceFrame, in the y direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors y and x for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors y and y for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors y and z for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The basis Vector for the ReferenceFrame, in the z direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors z and x for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors z and y for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Unit dyad of basis Vectors z and z for the ReferenceFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The class used to define vectors.
  prefs: []
  type: TYPE_NORMAL
- en: It along with ReferenceFrame are the building blocks of describing a classical
    mechanics system in PyDy and sympy.physics.vector.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| simp | (Boolean) Let certain methods use trigsimp on their outputs |'
  prefs: []
  type: TYPE_TB
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Returns the smallest angle between Vector ‘vec’ and self.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Python ignores the leading negative sign so that might give wrong results. `-A.x.angle_between()`
    would be treated as `-(A.x.angle_between())`, instead of `(-A.x).angle_between()`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter
  prefs: []
  type: TYPE_NORMAL
- en: vecVector
  prefs: []
  type: TYPE_NORMAL
- en: The Vector between which angle is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function to each component of a vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The cross product operator for two Vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a Vector, expressed in the same ReferenceFrames as self.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector which we are crossing with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returns the partial derivative of the vector with respect to a variable in the
    provided reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**var** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: What the partial derivative is taken with respect to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame that the partial derivative is taken in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**var_in_dcm** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: If true, the differentiation algorithm assumes that the variable may be present
    in any of the direction cosine matrices that relate the frame to the frames of
    any component of the vector. But if it is known that the variable is not present
    in the direction cosine matrices, false can be set to skip full reexpression in
    the desired frame.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Calls .doit() on each term in the Vector
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Dot product of two vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a scalar, the dot product of the two Vectors
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector which we are dotting with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Returns a Vector which is the time derivative of the self Vector, taken in frame
    otherframe.
  prefs: []
  type: TYPE_NORMAL
- en: Calls the global time_derivative method
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame to calculate the time derivative in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns a Vector equivalent to this one, expressed in otherframe. Uses the global
    express method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**otherframe** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame for this Vector to be described in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**variables** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the coordinate symbols(if present) in this Vector are re-expressed
    in terms otherframe
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Returns the free dynamic symbols (functions of time `t`) in the measure numbers
    of the vector expressed in the given reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**reference_frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame with respect to which the free dynamic symbols of the given vector
    is to be determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs: []
  type: TYPE_NORMAL
- en: Set of functions of time `t`, e.g. `Function('f')(me.dynamicsymbols._t)`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Returns the free symbols in the measure numbers of the vector expressed in the
    given reference frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**reference_frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame with respect to which the free symbols of the given vector is to be
    determined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: set of Symbol
  prefs: []
  type: TYPE_NORMAL
- en: set of symbols present in the measure numbers of `reference_frame`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Returns the class Vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Returns the magnitude (Euclidean norm) of self.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Python ignores the leading negative sign so that might give wrong results. `-A.x.magnitude()`
    would be treated as `-(A.x.magnitude())`, instead of `(-A.x).magnitude()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Returns a Vector of magnitude 1, codirectional with self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Outer product between two Vectors.
  prefs: []
  type: TYPE_NORMAL
- en: A rank increasing operation, which returns a Dyadic from two Vectors
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector to take the outer product with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The constituents of this vector in different reference frames, as per its definition.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a dict mapping each ReferenceFrame to the corresponding constituent
    Vector.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Returns a simplified Vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Substitution on the Vector.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix form of the vector with respect to the given frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**reference_frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame that the rows of the matrix correspond to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** : ImmutableMatrix, shape(3,1)'
  prefs: []
  type: TYPE_NORMAL
- en: The matrix that gives the 1D vector.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Replace occurrences of objects within the measure numbers of the vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule** : dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: Expresses a replacement rule.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Vector
  prefs: []
  type: TYPE_NORMAL
- en: Result of the replacement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Replacements occur only if an entire node in the expression tree is matched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: A Dyadic object.
  prefs: []
  type: TYPE_NORMAL
- en: 'See: [https://en.wikipedia.org/wiki/Dyadic_tensor](https://en.wikipedia.org/wiki/Dyadic_tensor)
    Kane, T., Levinson, D. Dynamics Theory and Applications. 1985 McGraw-Hill'
  prefs: []
  type: TYPE_NORMAL
- en: A more powerful way to represent a rigid body’s inertia. While it is more complex,
    by choosing Dyadic components to be in body fixed basis vectors, the resulting
    matrix is equivalent to the inertia tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function to each component of a Dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns the dyadic resulting from the dyadic vector cross product: Dyadic x
    Vector.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: Vector to cross with.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Calls .doit() on each term in the Dyadic
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The inner product operator for a Dyadic and a Dyadic or Vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Dyadic or Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The other Dyadic or Vector to take the inner product with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Take the time derivative of this Dyadic in a frame.
  prefs: []
  type: TYPE_NORMAL
- en: This function calls the global time_derivative method
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame to take the time derivative in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Expresses this Dyadic in alternate frame(s)
  prefs: []
  type: TYPE_NORMAL
- en: The first frame is the list side expression, the second frame is the right side;
    if Dyadic is in form A.x|B.y, you can express it in two different frames. If no
    second frame is given, the Dyadic is expressed in only one frame.
  prefs: []
  type: TYPE_NORMAL
- en: Calls the global express function
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame1** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The frame to express the left side of the Dyadic in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame2** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the frame to express the right side of the Dyadic in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Returns the class Dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Returns a simplified Dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Substitution on the Dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Returns the matrix form of the dyadic with respect to one or two reference frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**reference_frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame that the rows and columns of the matrix correspond to. If
    a second reference frame is provided, this only corresponds to the rows of the
    matrix.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**second_reference_frame** : ReferenceFrame, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame that the columns of the matrix correspond to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** : ImmutableMatrix, shape(3,3)'
  prefs: []
  type: TYPE_NORMAL
- en: The matrix that gives the 2D tensor form.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Replace occurrences of objects within the measure numbers of the Dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rule** : dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: Expresses a replacement rule.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Dyadic
  prefs: []
  type: TYPE_NORMAL
- en: Result of the replacement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Replacements occur only if an entire node in the expression tree is matched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
