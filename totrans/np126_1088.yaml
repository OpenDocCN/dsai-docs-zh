- en: Setting up and using your development environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和使用您的开发环境
- en: 原文：[https://numpy.org/doc/1.26/dev/development_environment.html](https://numpy.org/doc/1.26/dev/development_environment.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/dev/development_environment.html](https://numpy.org/doc/1.26/dev/development_environment.html)
- en: '## Recommended development setup'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 推荐的开发设置'
- en: Since NumPy contains parts written in C and Cython that need to be compiled
    before use, make sure you have the necessary compilers and Python development
    headers installed - see [Building from source](../user/building.html#building-from-source).
    Building NumPy as of version `1.17` requires a C99 compliant compiler.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 包含了部分需要在使用之前编译的 C 和 Cython 代码，请确保您已安装了必要的编译器和 Python 开发头文件 - 请参阅[从源码构建](../user/building.html#building-from-source)。从版本`1.17`开始构建
    NumPy 需要一个符合 C99 标准的编译器。
- en: Having compiled code also means that importing NumPy from the development sources
    needs some additional steps, which are explained below. For the rest of this chapter
    we assume that you have set up your git repo as described in [Git for development](gitwash/index.html#using-git).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编译代码还意味着从开发源代码导入 NumPy 需要一些额外的步骤，下面将对此进行解释。在本章的其余部分，我们假设您已根据[Git 开发](gitwash/index.html#using-git)中描述的设置了您的
    git 存储库。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having trouble building NumPy from source or setting up your local
    development environment, you can try to build NumPy with GitHub Codespaces. It
    allows you to create the correct development environment right in your browser,
    reducing the need to install local development environments and deal with incompatible
    dependencies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在从源码构建 NumPy 或设置本地开发环境时遇到问题，可以尝试使用 GitHub Codespaces 构建 NumPy。它允许您在浏览器中直接创建正确的开发环境，减少了安装本地开发环境并处理不兼容依赖项的需求。
- en: If you have good internet connectivity and want a temporary set-up, it is often
    faster to work on NumPy in a Codespaces environment. For documentation on how
    to get started with Codespaces, see [the Codespaces docs](https://docs.github.com/en/codespaces).
    When creating a codespace for the `numpy/numpy` repository, the default 2-core
    machine type works; 4-core will build and work a bit faster (but of course at
    a cost of halving your number of free usage hours). Once your codespace has started,
    you can run `conda activate numpy-dev` and your development environment is completely
    set up - you can then follow the relevant parts of the NumPy documentation to
    build, test, develop, write docs, and contribute to NumPy.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网络连接良好，并且想要一个临时设置，通常在 Codespaces 环境中开发 NumPy 速度更快。有关如何开始使用 Codespaces 的文档，请参阅[Codespaces
    文档](https://docs.github.com/en/codespaces)。在为`numpy/numpy`存储库创建 codespace 时，默认的
    2 核机器类型可行；4 核将构建和工作速度稍快（但当然会减少您的免费使用小时数）。一旦您的 codespace 启动，您可以运行`conda activate
    numpy-dev`，您的开发环境就完全设置好了 - 然后您可以按照 NumPy 文档的相关部分进行构建、测试、开发、编写文档和贡献到 NumPy。
- en: Using virtual environments
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: A frequently asked question is “How do I set up a development version of NumPy
    in parallel to a released version that I use to do my job/research?”.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经常被问到的问题是“我如何在发布版本用于工作/研究的同时设置 NumPy 的开发版本？”
- en: One simple way to achieve this is to install the released version in site-packages,
    by using pip or conda for example, and set up the development version in a virtual
    environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的一种简单方法是在 site-packages 中安装发布版本，例如使用 pip 或 conda，并在虚拟环境中设置开发版本。
- en: 'If you use conda, we recommend creating a separate virtual environment for
    numpy development using the `environment.yml` file in the root of the repo (this
    will create the environment and install all development dependencies at once):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 conda，我们建议使用存储库根目录下的`environment.yml`文件为 numpy 开发创建一个单独的虚拟环境（这将一次性创建环境并安装所有开发依赖项）：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you installed Python some other way than conda, first install [virtualenv](http://www.virtualenv.org/)
    (optionally use [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)),
    then create your virtualenv (named `numpy-dev` here) with:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装 Python 的方式与 conda 不同，请先安装[virtualenv](http://www.virtualenv.org/)（可以选择使用[virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)），然后创建您的虚拟环境（此处命名为`numpy-dev`）：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, whenever you want to switch to the virtual environment, you can use the
    command `source numpy-dev/bin/activate`, and `deactivate` to exit from the virtual
    environment and back to your previous shell.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您想切换到虚拟环境时，您可以使用命令`source numpy-dev/bin/activate`，并使用`deactivate`退出虚拟环境并回到之前的
    shell。
- en: '## Testing builds'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '## 测试构建'
- en: 'Before running the tests, first install the test dependencies:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试之前，请先安装测试依赖项：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To build the development version of NumPy and run tests, spawn interactive
    shells with the Python import paths properly set up etc., use the [spin](https://github.com/scientific-python/spin)
    utility. To run tests, do one of:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建NumPy的开发版本并运行测试，以及使用正确设置的Python导入路径生成交互式shell等，请使用[spin](https://github.com/scientific-python/spin)实用程序。要运行测试，请执行以下操作之一：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This builds NumPy first, so the first time it may take a few minutes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这首先构建了NumPy，所以第一次可能需要几分钟。
- en: You can also use `spin bench` for benchmarking. See `spin --help` for more command
    line options.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`spin bench`进行基准测试。有关更多命令行选项，请参阅`spin --help`。
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If the above commands result in `RuntimeError: Cannot parse version 0+untagged.xxxxx`,
    run `git pull upstream main --tags`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '如果上述命令导致`RuntimeError: Cannot parse version 0+untagged.xxxxx`，请运行`git pull
    upstream main --tags`。'
- en: 'Additional arguments may be forwarded to `pytest` by passing the extra arguments
    after a bare `--`. For example, to run a test method with the `--pdb` flag forwarded
    to the target, run the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在一个裸`--`之后传递额外参数来将附加参数转发给`pytest`。例如，要将带有`--pdb`标志的测试方法转发到目标，请运行以下命令：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also [match test names using python operators](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)
    by passing the `-k` argument to pytest:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用python运算符[匹配测试名称](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)通过将`-k`参数传递给pytest：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that all tests of NumPy should pass before committing your changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在提交更改之前，所有NumPy的测试都应该通过。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the tests in the test suite require a large amount of memory, and are
    skipped if your system does not have enough.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件中的一些测试需要大量内存，如果您的系统内存不足，则会跳过这些测试。
- en: Other build options
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他构建选项
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多选项，包括选择编译器、设置自定义编译器标志和控制并行性，请参阅[选择编译器和自定义构建](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)")（来自SciPy文档）。
- en: Running tests
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Besides using `spin`, there are various ways to run the tests. Inside the interpreter,
    tests can be run like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`spin`之外，还有各种方法可以运行测试。在解释器中，可以这样运行测试：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or a similar way from the command line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从命令行中执行类似的方式：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tests can also be run with `pytest numpy`, however then the NumPy-specific plugin
    is not found which causes strange side effects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`pytest numpy`运行测试，但是此时将找不到NumPy特定的插件，这会导致奇怪的副作用。
- en: 'Running individual test files can be useful; it’s much faster than running
    the whole test suite or that of a whole module (example: `np.random.test()`).
    This can be done with:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单个测试文件可能很有用；这比运行整个测试套件或整个模块的速度要快得多（例如：`np.random.test()`）。可以这样做：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That also takes extra arguments, like `--pdb` which drops you into the Python
    debugger when a test fails or an exception is raised.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它还接受额外的参数，比如`--pdb`，当测试失败或引发异常时，它会将您带入Python调试器。
- en: 'Running tests with [tox](https://tox.readthedocs.io/) is also supported. For
    example, to build NumPy and run the test suite with Python 3.9, use:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 也支持使用[tox](https://tox.readthedocs.io/)运行测试。例如，要使用Python 3.9构建NumPy并运行测试套件，请使用：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more extensive information, see [Testing Guidelines](../reference/testing.html#testing-guidelines).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多详细信息，请参阅[测试指南](../reference/testing.html#testing-guidelines)。
- en: 'Note: do not run the tests from the root directory of your numpy git repo without
    `spin`, that will result in strange test errors.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：不要在numpy git repo的根目录下使用`spin`运行测试，否则会导致奇怪的测试错误。
- en: Running Linting
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Linting
- en: Lint checks can be performed on newly added lines of Python code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对新添加的Python代码行执行lint检查。
- en: 'Install all dependent packages using pip:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pip安装所有依赖包：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To run lint checks before committing new code, run:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交新代码之前运行lint检查：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To check all changes in newly added Python code of current branch with target
    branch, run:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查当前分支的新添加的Python代码与目标分支的所有更改，请运行：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If there are no errors, the script exits with no message. In case of errors,
    check the error message for details:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，则脚本将无消息退出。在出现错误时，请检查错误消息以获取详细信息：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is advisable to run lint checks before pushing commits to a remote branch
    since the linter runs as part of the CI pipeline.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在将提交推送到远程分支之前运行lint检查，因为linter作为CI管道的一部分运行。
- en: 'For more details on Style Guidelines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有关样式指南的更多详细信息：
- en: '[Python Style Guide](https://www.python.org/dev/peps/pep-0008/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 风格指南](https://www.python.org/dev/peps/pep-0008/)'
- en: '[C Style Guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[C 风格指南](https://numpy.org/neps/nep-0045-c_style_guide.html)'
- en: Rebuilding & cleaning the workspace
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新构建并清理工作空间
- en: 'Rebuilding NumPy after making changes to compiled code can be done with the
    same build command as you used previously - only the changed files will be re-built.
    Doing a full build, which sometimes is necessary, requires cleaning the workspace
    first. The standard way of doing this is (*note: deletes any uncommitted files!*):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 更改编译代码后重新构建 NumPy 可以使用与之前相同的构建命令 - 只会重新构建更改的文件。有时需要进行完整构建，这需要首先清理工作空间。这样做的标准方法是（*注意：将删除未提交的文件！*）：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When you want to discard all changes and go back to the last commit in the
    repo, use one of:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望放弃所有更改并回到存储库中的最后一个提交时，请使用以下方法之一：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '## Debugging'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '## 调试'
- en: 'Another frequently asked question is “How do I debug C code inside NumPy?”.
    First, ensure that you have gdb installed on your system with the Python extensions
    (often the default on Linux). You can see which version of Python is running inside
    gdb to verify your setup:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个经常问到的问题是“如何在 NumPy 中调试 C 代码？”。首先确保您的系统上安装了带有 Python 扩展的 gdb（在 Linux 上通常为默认设置）。您可以查看
    gdb 中运行的 Python 版本以验证您的设置：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Most python builds do not include debug symbols and are built with compiler
    optimizations enabled. To get the best debugging experience using a debug build
    of Python is encouraged, see [Advanced debugging tools](development_advanced_debugging.html#advanced-debugging).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Python 构建不包含调试符号，并且启用了编译器优化。建议使用调试构建的 Python 来获得最佳调试体验，参见[高级调试工具](development_advanced_debugging.html#advanced-debugging)。
- en: 'Next you need to write a Python script that invokes the C code whose execution
    you want to debug. For instance `mytest.py`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要编写一个调用要调试的 C 代码执行的 Python 脚本。例如 `mytest.py`：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, you can run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以运行：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And then in the debugger:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在调试器中：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The execution will now stop at the corresponding C function and you can step
    through it as usual. A number of useful Python-specific commands are available.
    For example to see where in the Python code you are, use `py-list`, to see the
    python traceback, use `py-bt`. For more details, see [DebuggingWithGdb](https://wiki.python.org/moin/DebuggingWithGdb).
    Here are some commonly used commands:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行将在相应的 C 函数停止，您可以像往常一样逐步进行。有许多有用的针对 Python 的特定命令。例如，要查看您在 Python 代码中的位置，使用
    `py-list`，要查看 Python 追踪信息，使用 `py-bt`。有关更多详细信息，请查看[使用 Gdb 进行调试](https://wiki.python.org/moin/DebuggingWithGdb)。以下是一些常用命令：
- en: '`list`: List specified function or line.'
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：列出指定函数或行。'
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`next`: Step program, proceeding through subroutine calls.'
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：步进程序，通过子程序调用。'
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`step`: Continue program being debugged, after signal or breakpoint.'
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`：继续调试的程序，在信号或断点之后。'
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`print`: Print value of expression EXP.'
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print`：打印表达式 EXP 的值。'
- en: 'Rich support for Python debugging requires that the `python-gdb.py` script
    distributed with Python is installed in a path where gdb can find it. If you installed
    your Python build from your system package manager, you likely do not need to
    manually do anything. However, if you built Python from source, you will likely
    need to create a `.gdbinit` file in your home directory pointing gdb at the location
    of your Python installation. For example, a version of python installed via [pyenv](https://github.com/pyenv/pyenv)
    needs a `.gdbinit` file with the following contents:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Python 调试的丰富支持要求安装分发的 `python-gdb.py` 脚本，在 gdb 可以找到它的路径。如果您从系统软件包管理器安装了 Python
    构建，则可能无需手动执行任何操作。但是，如果您从源代码构建了 Python，则可能需要在主目录中创建一个 `.gdbinit` 文件，将 gdb 指向 Python
    安装位置。例如，通过 [pyenv](https://github.com/pyenv/pyenv) 安装的版本的 Python 需要一个包含以下内容的 `.gdbinit`
    文件：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Building NumPy with a Python built with debug support (on Linux distributions
    typically packaged as `python-dbg`) is highly recommended.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有调试支持的 Python 构建 NumPy（在 Linux 发行版中通常打包为 `python-dbg`）是强烈推荐的。
- en: Understanding the code & getting started
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解代码和入门
- en: The best strategy to better understand the code base is to pick something you
    want to change and start reading the code to figure out how it works. When in
    doubt, you can ask questions on the mailing list. It is perfectly okay if your
    pull requests aren’t perfect, the community is always happy to help. As a volunteer
    project, things do sometimes get dropped and it’s totally fine to ping us if something
    has sat without a response for about two to four weeks.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地理解代码库的最佳策略是选择您想要更改的内容，并开始阅读代码以弄清楚它的工作原理。如果有疑问，可以在邮件列表上提问。如果您的拉取请求不完美，也没关系，社区总是乐于帮助。作为一个志愿者项目，有时会有事情被遗忘，如果某事已经没有响应了大约两到四周，完全可以提醒我们。
- en: So go ahead and pick something that annoys or confuses you about NumPy, experiment
    with the code, hang around for discussions or go through the reference documents
    to try to fix it. Things will fall in place and soon you’ll have a pretty good
    understanding of the project as a whole. Good Luck!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，请继续选择您对 NumPy 感到恼火或困惑的内容，尝试使用代码进行实验，参与讨论或查看参考文档以尝试修复它。事情会有所进展，很快您就会对整个项目有相当好的理解。祝您好运！
- en: '## Recommended development setup'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '## 推荐的开发设置'
- en: Since NumPy contains parts written in C and Cython that need to be compiled
    before use, make sure you have the necessary compilers and Python development
    headers installed - see [Building from source](../user/building.html#building-from-source).
    Building NumPy as of version `1.17` requires a C99 compliant compiler.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 包含需要在使用之前编译的部分 C 和 Cython，因此请确保已安装必要的编译器和 Python 开发标头 - 请参阅 [从源代码构建](../user/building.html#building-from-source)。从版本
    `1.17` 开始构建 NumPy 需要符合 C99 标准的编译器。
- en: Having compiled code also means that importing NumPy from the development sources
    needs some additional steps, which are explained below. For the rest of this chapter
    we assume that you have set up your git repo as described in [Git for development](gitwash/index.html#using-git).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 编译代码也意味着从开发源导入 NumPy 需要一些额外的步骤，下面将对此进行解释。在本章的其余部分，我们假设您已按照 [Git for development](gitwash/index.html#using-git)
    中描述的设置了 git 存储库。
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having trouble building NumPy from source or setting up your local
    development environment, you can try to build NumPy with GitHub Codespaces. It
    allows you to create the correct development environment right in your browser,
    reducing the need to install local development environments and deal with incompatible
    dependencies.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在从源代码构建 NumPy 或设置本地开发环境时遇到问题，可以尝试使用 GitHub Codespaces 构建 NumPy。它允许您在浏览器中创建正确的开发环境，减少安装本地开发环境和处理不兼容依赖项的需求。
- en: If you have good internet connectivity and want a temporary set-up, it is often
    faster to work on NumPy in a Codespaces environment. For documentation on how
    to get started with Codespaces, see [the Codespaces docs](https://docs.github.com/en/codespaces).
    When creating a codespace for the `numpy/numpy` repository, the default 2-core
    machine type works; 4-core will build and work a bit faster (but of course at
    a cost of halving your number of free usage hours). Once your codespace has started,
    you can run `conda activate numpy-dev` and your development environment is completely
    set up - you can then follow the relevant parts of the NumPy documentation to
    build, test, develop, write docs, and contribute to NumPy.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网络连接良好，并且想要一个临时设置，通常在 Codespaces 环境中工作速度更快。有关如何开始使用 Codespaces 的文档，请参阅 [the
    Codespaces docs](https://docs.github.com/en/codespaces)。在为 `numpy/numpy` 存储库创建
    codespace 时，默认的 2 核机器类型可以工作；4 核将构建和工作速度稍快（但当然会减少您的免费使用小时数）。一旦您的 codespace 启动，您可以运行
    `conda activate numpy-dev`，您的开发环境就设置好了 - 然后您可以按照 NumPy 文档的相关部分进行构建、测试、开发、撰写文档和为
    NumPy 做贡献。
- en: Using virtual environments
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: A frequently asked question is “How do I set up a development version of NumPy
    in parallel to a released version that I use to do my job/research?”.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经常被问到的问题是“我如何设置 NumPy 的开发版本，以便与我用于工作/研究的发布版本并行使用？”。
- en: One simple way to achieve this is to install the released version in site-packages,
    by using pip or conda for example, and set up the development version in a virtual
    environment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一目标的一个简单方法是在 site-packages 中安装发布版本，例如使用 pip 或 conda，并在虚拟环境中设置开发版本。
- en: 'If you use conda, we recommend creating a separate virtual environment for
    numpy development using the `environment.yml` file in the root of the repo (this
    will create the environment and install all development dependencies at once):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 conda，我们建议使用根目录中的`environment.yml`文件为 numpy 开发创建一个单独的虚拟环境（这将一次性创建环境并安装所有开发依赖项）：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you installed Python some other way than conda, first install [virtualenv](http://www.virtualenv.org/)
    (optionally use [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)),
    then create your virtualenv (named `numpy-dev` here) with:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装 Python 的方式不同于 conda，请先安装[virtualenv](http://www.virtualenv.org/)（可选使用[virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)），然后使用以下命令创建您的虚拟环境（此处命名为`numpy-dev`）：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, whenever you want to switch to the virtual environment, you can use the
    command `source numpy-dev/bin/activate`, and `deactivate` to exit from the virtual
    environment and back to your previous shell.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您想切换到虚拟环境时，可以使用命令`source numpy-dev/bin/activate`，然后使用`deactivate`退出虚拟环境并返回到之前的shell。
- en: '## Testing builds'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '## 测试构建'
- en: 'Before running the tests, first install the test dependencies:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试之前，首先安装测试依赖项：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To build the development version of NumPy and run tests, spawn interactive
    shells with the Python import paths properly set up etc., use the [spin](https://github.com/scientific-python/spin)
    utility. To run tests, do one of:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 NumPy 的开发版本并运行测试，并生成正确设置的 Python 导入路径等交互式 shell，请使用[spin](https://github.com/scientific-python/spin)
    工具。要运行测试，请执行以下操作之一：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This builds NumPy first, so the first time it may take a few minutes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将首先构建 NumPy，因此第一次可能需要几分钟。
- en: You can also use `spin bench` for benchmarking. See `spin --help` for more command
    line options.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`spin bench`进行基准测试。请查看`spin --help`以获取更多命令行选项。
- en: Note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If the above commands result in `RuntimeError: Cannot parse version 0+untagged.xxxxx`,
    run `git pull upstream main --tags`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '如果上述命令导致`RuntimeError: Cannot parse version 0+untagged.xxxxx`，请运行`git pull
    upstream main --tags`。'
- en: 'Additional arguments may be forwarded to `pytest` by passing the extra arguments
    after a bare `--`. For example, to run a test method with the `--pdb` flag forwarded
    to the target, run the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在裸`--`后传递额外参数将额外参数转发给`pytest`。例如，要运行带有转发到目标的`--pdb`标志的测试方法，请运行以下命令：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also [match test names using python operators](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)
    by passing the `-k` argument to pytest:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将`-k`参数传递给 pytest 来[使用 python 运算符匹配测试名称](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ��意
- en: Remember that all tests of NumPy should pass before committing your changes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在提交更改之前，所有 NumPy 的测试都应该通过。
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the tests in the test suite require a large amount of memory, and are
    skipped if your system does not have enough.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件中的一些测试需要大量内存，如果您的系统内存不足，会被跳过。
- en: Other build options
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他构建选项
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation.)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多选项，包括选择编译器、设置自定义编译器标志和控制并行性，请参阅[选择编译器和自定义构建](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(在 SciPy v1.11.2 中)")（来自SciPy文档。）
- en: Running tests
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Besides using `spin`, there are various ways to run the tests. Inside the interpreter,
    tests can be run like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`spin`，还有各种方式来运行测试。在解释器中，测试可以这样运行：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Or a similar way from the command line:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以通过命令行里类似的方式：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tests can also be run with `pytest numpy`, however then the NumPy-specific plugin
    is not found which causes strange side effects.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 测试也可以使用`pytest numpy`运行，不过那时将找不到 NumPy 特定的插件，会引起奇怪的副作用。
- en: 'Running individual test files can be useful; it’s much faster than running
    the whole test suite or that of a whole module (example: `np.random.test()`).
    This can be done with:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单独的测试文件可能很有用；比起运行整个测试套件或整个模块来说更快（例如：`np.random.test()`）。可以这样做：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: That also takes extra arguments, like `--pdb` which drops you into the Python
    debugger when a test fails or an exception is raised.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以传递额外参数，比如`--pdb`，当测试失败或引发异常时会进入 Python 调试器。
- en: 'Running tests with [tox](https://tox.readthedocs.io/) is also supported. For
    example, to build NumPy and run the test suite with Python 3.9, use:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[tox](https://tox.readthedocs.io/)也支持运行测试。例如，要使用 Python 3.9 构建 NumPy 并运行测试套件，请使用：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For more extensive information, see [Testing Guidelines](../reference/testing.html#testing-guidelines).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: do not run the tests from the root directory of your numpy git repo without
    `spin`, that will result in strange test errors.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Running Linting
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lint checks can be performed on newly added lines of Python code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Install all dependent packages using pip:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To run lint checks before committing new code, run:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To check all changes in newly added Python code of current branch with target
    branch, run:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If there are no errors, the script exits with no message. In case of errors,
    check the error message for details:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: It is advisable to run lint checks before pushing commits to a remote branch
    since the linter runs as part of the CI pipeline.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on Style Guidelines:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Style Guide](https://www.python.org/dev/peps/pep-0008/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[C Style Guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding & cleaning the workspace
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rebuilding NumPy after making changes to compiled code can be done with the
    same build command as you used previously - only the changed files will be re-built.
    Doing a full build, which sometimes is necessary, requires cleaning the workspace
    first. The standard way of doing this is (*note: deletes any uncommitted files!*):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When you want to discard all changes and go back to the last commit in the
    repo, use one of:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '## Debugging'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Another frequently asked question is “How do I debug C code inside NumPy?”.
    First, ensure that you have gdb installed on your system with the Python extensions
    (often the default on Linux). You can see which version of Python is running inside
    gdb to verify your setup:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Most python builds do not include debug symbols and are built with compiler
    optimizations enabled. To get the best debugging experience using a debug build
    of Python is encouraged, see [Advanced debugging tools](development_advanced_debugging.html#advanced-debugging).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Next you need to write a Python script that invokes the C code whose execution
    you want to debug. For instance `mytest.py`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, you can run:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And then in the debugger:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The execution will now stop at the corresponding C function and you can step
    through it as usual. A number of useful Python-specific commands are available.
    For example to see where in the Python code you are, use `py-list`, to see the
    python traceback, use `py-bt`. For more details, see [DebuggingWithGdb](https://wiki.python.org/moin/DebuggingWithGdb).
    Here are some commonly used commands:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '`list`: List specified function or line.'
  id: totrans-170
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-171
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-172
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`next`: Step program, proceeding through subroutine calls.'
  id: totrans-173
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-174
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`step`: Continue program being debugged, after signal or breakpoint.'
  id: totrans-176
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  id: totrans-177
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-178
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`print`: Print value of expression EXP.'
  id: totrans-179
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rich support for Python debugging requires that the `python-gdb.py` script
    distributed with Python is installed in a path where gdb can find it. If you installed
    your Python build from your system package manager, you likely do not need to
    manually do anything. However, if you built Python from source, you will likely
    need to create a `.gdbinit` file in your home directory pointing gdb at the location
    of your Python installation. For example, a version of python installed via [pyenv](https://github.com/pyenv/pyenv)
    needs a `.gdbinit` file with the following contents:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持Python调试，需要安装Python分发的`python-gdb.py`脚本，且该脚本需位于gdb能找到的路径上。如果你通过系统软件包管理器安装了Python构建版本，你可能不需要手动做任何事情。然而，如果你通过源代码构建了Python，那么你可能需要在你的主目录下创建一个`.gdbinit`文件，指向gdb
    Python安装位置。例如，通过[pyenv](https://github.com/pyenv/pyenv)安装的Python版本需要一个包含以下内容的`.gdbinit`文件：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Building NumPy with a Python built with debug support (on Linux distributions
    typically packaged as `python-dbg`) is highly recommended.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用支持调试的Python构建NumPy（在Linux发行版中通常打包为`python-dbg`）是强烈推荐的。
- en: Understanding the code & getting started
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解代码和入门
- en: The best strategy to better understand the code base is to pick something you
    want to change and start reading the code to figure out how it works. When in
    doubt, you can ask questions on the mailing list. It is perfectly okay if your
    pull requests aren’t perfect, the community is always happy to help. As a volunteer
    project, things do sometimes get dropped and it’s totally fine to ping us if something
    has sat without a response for about two to four weeks.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地理解代码库的最佳策略是选择你想要更改的内容，并开始阅读代码以弄清它是如何工作的。有疑问时，可以在邮件列表上提出问题。如果您的拉取请求不完美，社区始终乐意提供帮助。作为一个志愿者项目，有时候会有事情被忽略，如果有事情在两到四周内没有得到回应，完全可以找我们提醒一下。
- en: So go ahead and pick something that annoys or confuses you about NumPy, experiment
    with the code, hang around for discussions or go through the reference documents
    to try to fix it. Things will fall in place and soon you’ll have a pretty good
    understanding of the project as a whole. Good Luck!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 所以请继续选择一些你对NumPy感到困惑或困扰的事情，尝试编写代码，参与讨论，或者查阅参考文档来尝试解决问题。事情会很快有所进展，很快你就会对整个项目有相当深刻的理解。祝你好运！
