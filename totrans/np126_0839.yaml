- en: numpy.sum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.sum.html](https://numpy.org/doc/1.26/reference/generated/numpy.sum.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Sum of array elements over a given axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to sum.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which a sum is performed. The default, axis=None, will sum
    all of the elements of the input array. If axis is negative it counts from the
    last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If axis is a tuple of ints, a sum is performed on all of the axes specified
    in the tuple instead of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of the returned array and of the accumulator in which the elements
    are summed. The dtype of *a* is used by default unless *a* has an integer dtype
    of less precision than the default platform integer. In that case, if *a* is signed
    then the platform integer is used while if *a* is unsigned then an unsigned integer
    of the same precision as the platform integer is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. It must have the same
    shape as the expected output, but the type of the output values will be cast if
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If the default value is passed, then *keepdims* will not be passed through to
    the [`sum`](#numpy.sum "numpy.sum") method of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), however any non-default value will be. If the sub-class’ method
    does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Starting value for the sum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in the sum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sum_along_axis**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array with the same shape as *a*, with the specified axis removed. If *a*
    is a 0-d array, or if *axis* is None, a scalar is returned. If an output array
    is specified, a reference to *out* is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.sum`](numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent method.
  prefs: []
  type: TYPE_NORMAL
- en: '`add.reduce`'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent functionality of [`add`](numpy.add.html#numpy.add "numpy.add").
  prefs: []
  type: TYPE_NORMAL
- en: '[`cumsum`](numpy.cumsum.html#numpy.cumsum "numpy.cumsum")'
  prefs: []
  type: TYPE_NORMAL
- en: Cumulative sum of array elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trapz`](numpy.trapz.html#numpy.trapz "numpy.trapz")'
  prefs: []
  type: TYPE_NORMAL
- en: Integration of array values using the composite trapezoidal rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[`mean`](numpy.mean.html#numpy.mean "numpy.mean"), [`average`](numpy.average.html#numpy.average
    "numpy.average")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic is modular when using integer types, and no error is raised on overflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sum of an empty array is the neutral element 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For floating point numbers the numerical precision of sum (and `np.add.reduce`)
    is in general limited by directly adding each number individually to the result
    causing rounding errors in every step. However, often numpy will use a numerically
    better approach (partial pairwise summation) leading to improved precision in
    many use-cases. This improved precision is always provided when no `axis` is given.
    When `axis` is given, it will depend on which axis is summed. Technically, to
    provide the best speed possible, the improved precision is only used when the
    summation is along the fast axis in memory. Note that the exact precision may
    vary depending on other parameters. In contrast to NumPy, Python’s `math.fsum`
    function uses a slower but more precise approach to summation. Especially when
    summing a large number of lower precision floating point numbers, such as `float32`,
    numerical errors can become significant. In such cases it can be advisable to
    use *dtype=”float64”* to use a higher precision for the output.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the accumulator is too small, overflow occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also start the sum with a value other than zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
