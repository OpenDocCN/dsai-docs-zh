- en: Instance Segmentation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例分割
- en: 原文：[`docs.ultralytics.com/tasks/segment/`](https://docs.ultralytics.com/tasks/segment/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/tasks/segment/`](https://docs.ultralytics.com/tasks/segment/)
- en: '![Instance segmentation examples](img/1b1a79830659e97d5d415d67b83defc0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![实例分割示例](img/1b1a79830659e97d5d415d67b83defc0.png)'
- en: Instance segmentation goes a step further than object detection and involves
    identifying individual objects in an image and segmenting them from the rest of
    the image.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实例分割比目标检测更进一步，涉及识别图像中的单个对象并将其从图像的其余部分分割出来。
- en: The output of an instance segmentation model is a set of masks or contours that
    outline each object in the image, along with class labels and confidence scores
    for each object. Instance segmentation is useful when you need to know not only
    where objects are in an image, but also what their exact shape is.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实例分割模型的输出是一组掩膜或轮廓，勾勒出图像中每个对象的轮廓，以及每个对象的类别标签和置信度分数。当你需要知道图像中对象的位置以及它们的确切形状时，实例分割非常有用。
- en: '[`www.youtube.com/embed/o4Zd-IeMlSY?si=37nusCzDTd74Obsp`](https://www.youtube.com/embed/o4Zd-IeMlSY?si=37nusCzDTd74Obsp)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/o4Zd-IeMlSY?si=37nusCzDTd74Obsp`](https://www.youtube.com/embed/o4Zd-IeMlSY?si=37nusCzDTd74Obsp)'
- en: '**Watch:** Run Segmentation with Pre-Trained Ultralytics YOLOv8 Model in Python.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** 在 Python 中使用预训练的 Ultralytics YOLOv8 模型运行分割。'
- en: Tip
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: YOLOv8 Segment models use the `-seg` suffix, i.e. `yolov8n-seg.pt` and are pretrained
    on [COCO](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8 分割模型使用 `-seg` 后缀，例如 `yolov8n-seg.pt`，并在 [COCO](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml)
    数据集上进行预训练。
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models/v8)'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[模型](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models/v8)'
- en: YOLOv8 pretrained Segment models are shown here. Detect, Segment and Pose models
    are pretrained on the [COCO](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml)
    dataset, while Classify models are pretrained on the [ImageNet](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/ImageNet.yaml)
    dataset.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了 YOLOv8 预训练的分割模型。检测、分割和姿态模型在 [COCO](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml)
    数据集上进行预训练，而分类模型在 [ImageNet](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/ImageNet.yaml)
    数据集上进行预训练。
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models)
    download automatically from the latest Ultralytics [release](https://github.com/ultralytics/assets/releases)
    on first use.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[模型](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models)
    在首次使用时会自动从最新的 Ultralytics [发布](https://github.com/ultralytics/assets/releases)
    下载。'
- en: '| Model | size ^((pixels)) | mAP^(box 50-95) | mAP^(mask 50-95) | Speed ^(CPU
    ONNX'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| 模型 | 大小 ^((像素)) | mAP^(框 50-95) | mAP^(掩膜 50-95) | 速度 ^(CPU ONNX'
- en: (ms)) | Speed ^(A100 TensorRT
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: (毫秒)) | 速度 ^(A100 TensorRT
- en: (ms)) | params ^((M)) | FLOPs ^((B)) |
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: (毫秒)) | 参数 ^((M)) | FLOPs ^((B)) |
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| [YOLOv8n-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-seg.pt)
    | 640 | 36.7 | 30.5 | 96.1 | 1.21 | 3.4 | 12.6 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8n-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-seg.pt)
    | 640 | 36.7 | 30.5 | 96.1 | 1.21 | 3.4 | 12.6 |'
- en: '| [YOLOv8s-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-seg.pt)
    | 640 | 44.6 | 36.8 | 155.7 | 1.47 | 11.8 | 42.6 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8s-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-seg.pt)
    | 640 | 44.6 | 36.8 | 155.7 | 1.47 | 11.8 | 42.6 |'
- en: '| [YOLOv8m-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-seg.pt)
    | 640 | 49.9 | 40.8 | 317.0 | 2.18 | 27.3 | 110.2 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8m-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-seg.pt)
    | 640 | 49.9 | 40.8 | 317.0 | 2.18 | 27.3 | 110.2 |'
- en: '| [YOLOv8l-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-seg.pt)
    | 640 | 52.3 | 42.6 | 572.4 | 2.79 | 46.0 | 220.5 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8l-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-seg.pt)
    | 640 | 52.3 | 42.6 | 572.4 | 2.79 | 46.0 | 220.5 |'
- en: '| [YOLOv8x-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-seg.pt)
    | 640 | 53.4 | 43.4 | 712.1 | 4.02 | 71.8 | 344.1 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8x-seg](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-seg.pt)
    | 640 | 53.4 | 43.4 | 712.1 | 4.02 | 71.8 | 344.1 |'
- en: '**mAP^(val)** values are for single-model single-scale on [COCO val2017](https://cocodataset.org)
    dataset.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mAP^(val)** 值是针对 [COCO val2017](https://cocodataset.org) 数据集的单模型单尺度。'
- en: Reproduce by `yolo val segment data=coco.yaml device=0`
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 `yolo val segment data=coco.yaml device=0` 重现
- en: '**Speed** averaged over COCO val images using an [Amazon EC2 P4d](https://aws.amazon.com/ec2/instance-types/p4/)
    instance.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度** 是在使用 [Amazon EC2 P4d](https://aws.amazon.com/ec2/instance-types/p4/)
    实例的 COCO val 图像上平均计算得出的。'
- en: Reproduce by `yolo val segment data=coco8-seg.yaml batch=1 device=0|cpu`
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过`yolo val segment data=coco8-seg.yaml batch=1 device=0|cpu`来复现
- en: Train
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: Train YOLOv8n-seg on the COCO128-seg dataset for 100 epochs at image size 640\.
    For a full list of available arguments see the Configuration page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像大小为 640 的情况下，在 COCO128-seg 数据集上训练 YOLOv8n-seg 100 个 epoch。有关可用参数的完整列表，请参见配置页面。
- en: Example
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dataset format
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据集格式
- en: YOLO segmentation dataset format can be found in detail in the Dataset Guide.
    To convert your existing dataset from other formats (like COCO etc.) to YOLO format,
    please use [JSON2YOLO](https://github.com/ultralytics/JSON2YOLO) tool by Ultralytics.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: YOLO 分割数据集格式的详细信息可以在数据集指南中找到。要将现有数据集从其他格式（如 COCO 等）转换为 YOLO 格式，请使用 Ultralytics
    的 [JSON2YOLO](https://github.com/ultralytics/JSON2YOLO) 工具。
- en: Val
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证
- en: Validate trained YOLOv8n-seg model accuracy on the COCO128-seg dataset. No argument
    need to passed as the `model` retains its training `data` and arguments as model
    attributes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 COCO128-seg 数据集上验证训练好的 YOLOv8n-seg 模型准确性。不需要传递任何参数，因为`model`保留其训练`data`和参数作为模型属性。
- en: Example
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Predict
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测
- en: Use a trained YOLOv8n-seg model to run predictions on images.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用训练好的 YOLOv8n-seg 模型对图像进行预测。
- en: Example
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See full `predict` mode details in the Predict page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 查看预测页面中的全部`predict`模式细节。
- en: Export
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出
- en: Export a YOLOv8n-seg model to a different format like ONNX, CoreML, etc.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOLOv8n-seg 模型导出到 ONNX、CoreML 等不同格式。
- en: Example
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Available YOLOv8-seg export formats are in the table below. You can export to
    any format using the `format` argument, i.e. `format='onnx'` or `format='engine'`.
    You can predict or validate directly on exported models, i.e. `yolo predict model=yolov8n-seg.onnx`.
    Usage examples are shown for your model after export completes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 YOLOv8-seg 导出格式列在下表中。您可以使用`format`参数导出到任何格式，例如`format='onnx'`或`format='engine'`。您可以直接在导出模型上预测或验证，例如`yolo
    predict model=yolov8n-seg.onnx`。导出完成后，您的模型示例将显示使用示例。
- en: '| Format | `format` Argument | Model | Metadata | Arguments |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Format | `format` 参数 | 模型 | 元数据 | 参数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| [PyTorch](https://pytorch.org/) | - | `yolov8n-seg.pt` | ✅ | - |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [PyTorch](https://pytorch.org/) | - | `yolov8n-seg.pt` | ✅ | - |'
- en: '| TorchScript | `torchscript` | `yolov8n-seg.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| TorchScript | `torchscript` | `yolov8n-seg.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
- en: '| ONNX | `onnx` | `yolov8n-seg.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| ONNX | `onnx` | `yolov8n-seg.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
- en: '| OpenVINO | `openvino` | `yolov8n-seg_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| OpenVINO | `openvino` | `yolov8n-seg_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
- en: '| TensorRT | `engine` | `yolov8n-seg.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| TensorRT | `engine` | `yolov8n-seg.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
- en: '| CoreML | `coreml` | `yolov8n-seg.mlpackage` | ✅ | `imgsz`, `half`, `int8`,
    `nms`, `batch` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| CoreML | `coreml` | `yolov8n-seg.mlpackage` | ✅ | `imgsz`, `half`, `int8`,
    `nms`, `batch` |'
- en: '| TF SavedModel | `saved_model` | `yolov8n-seg_saved_model/` | ✅ | `imgsz`,
    `keras`, `int8`, `batch` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| TF SavedModel | `saved_model` | `yolov8n-seg_saved_model/` | ✅ | `imgsz`,
    `keras`, `int8`, `batch` |'
- en: '| TF GraphDef | `pb` | `yolov8n-seg.pb` | ❌ | `imgsz`, `batch` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| TF GraphDef | `pb` | `yolov8n-seg.pb` | ❌ | `imgsz`, `batch` |'
- en: '| TF Lite | `tflite` | `yolov8n-seg.tflite` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| TF Lite | `tflite` | `yolov8n-seg.tflite` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
- en: '| TF Edge TPU | `edgetpu` | `yolov8n-seg_edgetpu.tflite` | ✅ | `imgsz` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| TF Edge TPU | `edgetpu` | `yolov8n-seg_edgetpu.tflite` | ✅ | `imgsz` |'
- en: '| TF.js | `tfjs` | `yolov8n-seg_web_model/` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| TF.js | `tfjs` | `yolov8n-seg_web_model/` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
- en: '| PaddlePaddle | `paddle` | `yolov8n-seg_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| PaddlePaddle | `paddle` | `yolov8n-seg_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
- en: '| NCNN | `ncnn` | `yolov8n-seg_ncnn_model/` | ✅ | `imgsz`, `half`, `batch`
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| NCNN | `ncnn` | `yolov8n-seg_ncnn_model/` | ✅ | `imgsz`, `half`, `batch`
    |'
- en: See full `export` details in the Export page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 查看导出页面中的全部`export`细节。
- en: FAQ
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: How do I train a YOLOv8 segmentation model on a custom dataset?
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在自定义数据集上训练 YOLOv8 分割模型？
- en: 'To train a YOLOv8 segmentation model on a custom dataset, you first need to
    prepare your dataset in the YOLO segmentation format. You can use tools like [JSON2YOLO](https://github.com/ultralytics/JSON2YOLO)
    to convert datasets from other formats. Once your dataset is ready, you can train
    the model using Python or CLI commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要在自定义数据集上训练 YOLOv8 分割模型，您首先需要将数据集准备成 YOLO 分割格式。您可以使用 [JSON2YOLO](https://github.com/ultralytics/JSON2YOLO)
    等工具将其他格式的数据集转换为 YOLO 格式。准备好数据集后，可以使用 Python 或 CLI 命令来训练模型：
- en: Example
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Check the Configuration page for more available arguments.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 检查配置页面以获取更多可用参数信息。
- en: What is the difference between object detection and instance segmentation in
    YOLOv8?
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: YOLOv8 中对象检测和实例分割的区别是什么？
- en: Object detection identifies and localizes objects within an image by drawing
    bounding boxes around them, whereas instance segmentation not only identifies
    the bounding boxes but also delineates the exact shape of each object. YOLOv8
    instance segmentation models provide masks or contours that outline each detected
    object, which is particularly useful for tasks where knowing the precise shape
    of objects is important, such as medical imaging or autonomous driving.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对象检测通过在图像中绘制边界框来识别和定位对象，而实例分割不仅能识别边界框，还能勾画出每个对象的精确形状。YOLOv8 实例分割模型提供了每个检测到的对象的掩码或轮廓，这对于需要知道对象精确形状的任务非常有用，如医学成像或自动驾驶。
- en: Why use YOLOv8 for instance segmentation?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么使用 YOLOv8 进行实例分割？
- en: Ultralytics YOLOv8 is a state-of-the-art model recognized for its high accuracy
    and real-time performance, making it ideal for instance segmentation tasks. YOLOv8
    Segment models come pretrained on the [COCO dataset](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml),
    ensuring robust performance across a variety of objects. Additionally, YOLOv8
    supports training, validation, prediction, and export functionalities with seamless
    integration, making it highly versatile for both research and industry applications.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8 是一种现代化的模型，以其高精度和实时性能而闻名，非常适合实例分割任务。YOLOv8 Segment 模型在[COCO
    数据集](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/coco.yaml)上预训练，确保在各种对象上表现稳健。此外，YOLOv8
    支持训练、验证、预测和导出功能，与 Python 和 CLI 无缝集成，非常适用于研究和工业应用。
- en: How do I load and validate a pretrained YOLOv8 segmentation model?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何加载和验证预训练的 YOLOv8 分割模型？
- en: 'Loading and validating a pretrained YOLOv8 segmentation model is straightforward.
    Here''s how you can do it using both Python and CLI:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和验证预训练的 YOLOv8 分割模型非常简单。以下是使用 Python 和 CLI 的操作方法：
- en: Example
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These steps will provide you with validation metrics like Mean Average Precision
    (mAP), crucial for assessing model performance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将为您提供像平均精度（mAP）这样的验证指标，对评估模型性能至关重要。
- en: How can I export a YOLOv8 segmentation model to ONNX format?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何将 YOLOv8 分割模型导出为 ONNX 格式？
- en: 'Exporting a YOLOv8 segmentation model to ONNX format is simple and can be done
    using Python or CLI commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOLOv8 分割模型导出为 ONNX 格式非常简单，可以使用 Python 或 CLI 命令完成：
- en: Example
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For more details on exporting to various formats, refer to the Export page.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关导出到各种格式的更多详细信息，请参阅导出页面。
