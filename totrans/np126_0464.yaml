- en: numpy.dtype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.dtype.html](https://numpy.org/doc/1.26/reference/generated/numpy.dtype.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a data type object.
  prefs: []
  type: TYPE_NORMAL
- en: A numpy array is homogeneous, and contains elements described by a dtype object.
    A dtype object can be constructed from different combinations of fundamental numeric
    types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**'
  prefs: []
  type: TYPE_NORMAL
- en: Object to be converted to a data type object.
  prefs: []
  type: TYPE_NORMAL
- en: '**align**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Add padding to the fields to match what a C compiler would output for a similar
    C-struct. Can be `True` only if *obj* is a dictionary or a comma-separated string.
    If a struct dtype is being created, this also sets a sticky alignment flag `isalignedstruct`.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Make a new copy of the data-type object. If `False`, the result may just be
    a reference to a built-in data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '**metadata**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An optional dictionary with dtype metadata.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`result_type`](numpy.result_type.html#numpy.result_type "numpy.result_type")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Using array-scalar type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Structured type, one field name ‘f1’, containing int16:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Structured type, one field named ‘f1’, in itself containing a structured type
    with one field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Structured type, two fields: the first field contains an unsigned int, the
    second an int32:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using array-protocol type strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using comma-separated field formats. The shape is (2,3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using tuples. `int` is a fixed type, 3 the field’s shape. `void` is a flexible
    type, here of size 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Subdivide `int16` into 2 `int8`’s, called x and y. 0 and 1 are the offsets
    in bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Using dictionaries. Two fields named ‘gender’ and ‘age’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Offsets in bytes, here 0 and 25:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`alignment`](numpy.dtype.alignment.html#numpy.dtype.alignment "numpy.dtype.alignment")'
  prefs: []
  type: TYPE_NORMAL
- en: The required alignment (bytes) of this data-type according to the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: '[`base`](numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape.
  prefs: []
  type: TYPE_NORMAL
- en: '[`byteorder`](numpy.dtype.byteorder.html#numpy.dtype.byteorder "numpy.dtype.byteorder")'
  prefs: []
  type: TYPE_NORMAL
- en: A character indicating the byte-order of this data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`char`](../routines.char.html#module-numpy.char "numpy.char")'
  prefs: []
  type: TYPE_NORMAL
- en: A unique character code for each of the 21 different built-in types.
  prefs: []
  type: TYPE_NORMAL
- en: '[`descr`](numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")'
  prefs: []
  type: TYPE_NORMAL
- en: '*__array_interface__* description of the data-type.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`fields`](numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary of named fields defined for this data type, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flags`](numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")'
  prefs: []
  type: TYPE_NORMAL
- en: Bit-flags describing how this data type is to be interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: '[`hasobject`](numpy.dtype.hasobject.html#numpy.dtype.hasobject "numpy.dtype.hasobject")'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean indicating whether this dtype contains any reference-counted objects
    in any fields or sub-dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isalignedstruct`](numpy.dtype.isalignedstruct.html#numpy.dtype.isalignedstruct
    "numpy.dtype.isalignedstruct")'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean indicating whether the dtype is a struct which maintains field alignment.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isbuiltin`](numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin "numpy.dtype.isbuiltin")'
  prefs: []
  type: TYPE_NORMAL
- en: Integer indicating how this dtype relates to the built-in dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isnative`](numpy.dtype.isnative.html#numpy.dtype.isnative "numpy.dtype.isnative")'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean indicating whether the byte order of this dtype is native to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[`itemsize`](numpy.dtype.itemsize.html#numpy.dtype.itemsize "numpy.dtype.itemsize")'
  prefs: []
  type: TYPE_NORMAL
- en: The element size of this data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`kind`](numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")'
  prefs: []
  type: TYPE_NORMAL
- en: A character code (one of ‘biufcmMOSUV’) identifying the general kind of data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`metadata`](numpy.dtype.metadata.html#numpy.dtype.metadata "numpy.dtype.metadata")'
  prefs: []
  type: TYPE_NORMAL
- en: Either `None` or a readonly dictionary of metadata (mappingproxy).
  prefs: []
  type: TYPE_NORMAL
- en: '[`name`](numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")'
  prefs: []
  type: TYPE_NORMAL
- en: A bit-width name for this data-type.
  prefs: []
  type: TYPE_NORMAL
- en: '[`names`](numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")'
  prefs: []
  type: TYPE_NORMAL
- en: Ordered list of field names, or `None` if there are no fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndim`](numpy.dtype.ndim.html#numpy.dtype.ndim "numpy.dtype.ndim")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions of the sub-array if this data type describes a sub-array,
    and `0` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[`num`](numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")'
  prefs: []
  type: TYPE_NORMAL
- en: A unique number for each of the 21 different built-in types.
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  prefs: []
  type: TYPE_NORMAL
- en: Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[`str`](numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")'
  prefs: []
  type: TYPE_NORMAL
- en: The array-protocol typestring of this data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`subdtype`](numpy.dtype.subdtype.html#numpy.dtype.subdtype "numpy.dtype.subdtype")'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple `(item_dtype, shape)` if this [`dtype`](#numpy.dtype "numpy.dtype") describes
    a sub-array, and None otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**type**'
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`newbyteorder`](numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder "numpy.dtype.newbyteorder")([new_order])
    | Return a new dtype with a different byte order. |'
  prefs: []
  type: TYPE_TB
