- en: How do I select a subset of a DataFrame?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How do I select specific columns from a `DataFrame`?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_columns.svg](../Images/99adffa7b8de59d5213f59c4857c4406.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the age of the Titanic passengers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select a single column, use square brackets `[]` with the column name of
    the column of interest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Each column in a [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is a [`Series`](../../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). As a single column is selected, the returned object is a pandas
    [`Series`](../../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    We can verify this by checking the type of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And have a look at the `shape` of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.shape`](../../reference/api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") is an attribute (remember [tutorial on reading and writing](02_read_write.html#min-tut-02-read-write),
    do not use parentheses for attributes) of a pandas `Series` and `DataFrame` containing
    the number of rows and columns: *(nrows, ncolumns)*. A pandas Series is 1-dimensional
    and only the number of rows is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in the age and sex of the Titanic passengers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select multiple columns, use a list of column names within the selection
    brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The inner square brackets define a [Python list](https://docs.python.org/3/tutorial/datastructures.html#tut-morelists
    "(in Python v3.12)") with column names, whereas the outer brackets are used to
    select the data from a pandas `DataFrame` as seen in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned data type is a pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The selection returned a `DataFrame` with 891 rows and 2 columns. Remember,
    a `DataFrame` is 2-dimensional with both a row and column dimension.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: For basic information on indexing, see the user guide section on [indexing and
    selecting data](../../user_guide/indexing.html#indexing-basics).
  prefs: []
  type: TYPE_NORMAL
- en: How do I filter specific rows from a `DataFrame`?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_rows.svg](../Images/6a466cef0ed4c74d4f247f7e60539fff.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the passengers older than 35 years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select rows based on a conditional expression, use a condition inside the
    selection brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The condition inside the selection brackets `titanic["Age"] > 35` checks for
    which rows the `Age` column has a value larger than 35:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The output of the conditional expression (`>`, but also `==`, `!=`, `<`, `<=`,…
    would work) is actually a pandas `Series` of boolean values (either `True` or
    `False`) with the same number of rows as the original `DataFrame`. Such a `Series`
    of boolean values can be used to filter the `DataFrame` by putting it in between
    the selection brackets `[]`. Only rows for which the value is `True` will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know from before that the original Titanic `DataFrame` consists of 891 rows.
    Let’s have a look at the number of rows which satisfy the condition by checking
    the `shape` attribute of the resulting `DataFrame` `above_35`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I’m interested in the Titanic passengers from cabin class 2 and 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similar to the conditional expression, the [`isin()`](../../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") conditional function returns a `True` for each row the values
    are in the provided list. To filter the rows based on such a function, use the
    conditional function inside the selection brackets `[]`. In this case, the condition
    inside the selection brackets `titanic["Pclass"].isin([2, 3])` checks for which
    rows the `Pclass` column is either 2 or 3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The above is equivalent to filtering by rows for which the class is either
    2 or 3 and combining the two statements with an `|` (or) operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When combining multiple conditional statements, each condition must be surrounded
    by parentheses `()`. Moreover, you can not use `or`/`and` but need to use the
    `or` operator `|` and the `and` operator `&`.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: See the dedicated section in the user guide about [boolean indexing](../../user_guide/indexing.html#indexing-boolean)
    or about the [isin function](../../user_guide/indexing.html#indexing-basics-indexing-isin).
  prefs: []
  type: TYPE_NORMAL
- en: I want to work with passenger data for which the age is known.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`notna()`](../../reference/api/pandas.Series.notna.html#pandas.Series.notna
    "pandas.Series.notna") conditional function returns a `True` for each row the
    values are not a `Null` value. As such, this can be combined with the selection
    brackets `[]` to filter the data table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You might wonder what actually changed, as the first 5 lines are still the
    same values. One way to verify is to check if the shape has changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: For more dedicated functions on missing values, see the user guide section about
    [handling missing data](../../user_guide/missing_data.html#missing-data).
  prefs: []
  type: TYPE_NORMAL
- en: '## How do I select specific rows and columns from a `DataFrame`?'
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_columns_rows.svg](../Images/5cf0586695f40cff340dac71a9fa5478.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the names of the passengers older than 35 years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, a subset of both rows and columns is made in one go and just using
    selection brackets `[]` is not sufficient anymore. The `loc`/`iloc` operators
    are required in front of the selection brackets `[]`. When using `loc`/`iloc`,
    the part before the comma is the rows you want, and the part after the comma is
    the columns you want to select.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using the column names, row labels or a condition expression, use the `loc`
    operator in front of the selection brackets `[]`. For both the part before and
    after the comma, you can use a single label, a list of labels, a slice of labels,
    a conditional expression or a colon. Using a colon specifies you want to select
    all rows or columns.
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in rows 10 till 25 and columns 3 to 5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, a subset of both rows and columns is made in one go and just using selection
    brackets `[]` is not sufficient anymore. When specifically interested in certain
    rows and/or columns based on their position in the table, use the `iloc` operator
    in front of the selection brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When selecting specific rows and/or columns with `loc` or `iloc`, new values
    can be assigned to the selected data. For example, to assign the name `anonymous`
    to the first 3 elements of the fourth column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: See the user guide section on [different choices for indexing](../../user_guide/indexing.html#indexing-choice)
    to get more insight in the usage of `loc` and `iloc`.
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When selecting subsets of data, square brackets `[]` are used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside these brackets, you can use a single column/row label, a list of column/row
    labels, a slice of labels, a conditional expression or a colon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select specific rows and/or columns using `loc` when using the row and column
    names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select specific rows and/or columns using `iloc` when using the positions in
    the table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can assign new values to a selection based on `loc`/`iloc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full overview of indexing is provided in the user guide pages on [indexing
    and selecting data](../../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
- en: How do I select specific columns from a `DataFrame`?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_columns.svg](../Images/99adffa7b8de59d5213f59c4857c4406.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the age of the Titanic passengers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select a single column, use square brackets `[]` with the column name of
    the column of interest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Each column in a [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is a [`Series`](../../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). As a single column is selected, the returned object is a pandas
    [`Series`](../../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    We can verify this by checking the type of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And have a look at the `shape` of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.shape`](../../reference/api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") is an attribute (remember [tutorial on reading and writing](02_read_write.html#min-tut-02-read-write),
    do not use parentheses for attributes) of a pandas `Series` and `DataFrame` containing
    the number of rows and columns: *(nrows, ncolumns)*. A pandas Series is 1-dimensional
    and only the number of rows is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in the age and sex of the Titanic passengers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select multiple columns, use a list of column names within the selection
    brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The inner square brackets define a [Python list](https://docs.python.org/3/tutorial/datastructures.html#tut-morelists
    "(in Python v3.12)") with column names, whereas the outer brackets are used to
    select the data from a pandas `DataFrame` as seen in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned data type is a pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The selection returned a `DataFrame` with 891 rows and 2 columns. Remember,
    a `DataFrame` is 2-dimensional with both a row and column dimension.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: For basic information on indexing, see the user guide section on [indexing and
    selecting data](../../user_guide/indexing.html#indexing-basics).
  prefs: []
  type: TYPE_NORMAL
- en: How do I filter specific rows from a `DataFrame`?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_rows.svg](../Images/6a466cef0ed4c74d4f247f7e60539fff.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the passengers older than 35 years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To select rows based on a conditional expression, use a condition inside the
    selection brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The condition inside the selection brackets `titanic["Age"] > 35` checks for
    which rows the `Age` column has a value larger than 35:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The output of the conditional expression (`>`, but also `==`, `!=`, `<`, `<=`,…
    would work) is actually a pandas `Series` of boolean values (either `True` or
    `False`) with the same number of rows as the original `DataFrame`. Such a `Series`
    of boolean values can be used to filter the `DataFrame` by putting it in between
    the selection brackets `[]`. Only rows for which the value is `True` will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know from before that the original Titanic `DataFrame` consists of 891 rows.
    Let’s have a look at the number of rows which satisfy the condition by checking
    the `shape` attribute of the resulting `DataFrame` `above_35`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: I’m interested in the Titanic passengers from cabin class 2 and 3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similar to the conditional expression, the [`isin()`](../../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") conditional function returns a `True` for each row the values
    are in the provided list. To filter the rows based on such a function, use the
    conditional function inside the selection brackets `[]`. In this case, the condition
    inside the selection brackets `titanic["Pclass"].isin([2, 3])` checks for which
    rows the `Pclass` column is either 2 or 3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The above is equivalent to filtering by rows for which the class is either
    2 or 3 and combining the two statements with an `|` (or) operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When combining multiple conditional statements, each condition must be surrounded
    by parentheses `()`. Moreover, you can not use `or`/`and` but need to use the
    `or` operator `|` and the `and` operator `&`.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: See the dedicated section in the user guide about [boolean indexing](../../user_guide/indexing.html#indexing-boolean)
    or about the [isin function](../../user_guide/indexing.html#indexing-basics-indexing-isin).
  prefs: []
  type: TYPE_NORMAL
- en: I want to work with passenger data for which the age is known.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`notna()`](../../reference/api/pandas.Series.notna.html#pandas.Series.notna
    "pandas.Series.notna") conditional function returns a `True` for each row the
    values are not a `Null` value. As such, this can be combined with the selection
    brackets `[]` to filter the data table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You might wonder what actually changed, as the first 5 lines are still the
    same values. One way to verify is to check if the shape has changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: For more dedicated functions on missing values, see the user guide section about
    [handling missing data](../../user_guide/missing_data.html#missing-data).
  prefs: []
  type: TYPE_NORMAL
- en: '## How do I select specific rows and columns from a `DataFrame`?'
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/03_subset_columns_rows.svg](../Images/5cf0586695f40cff340dac71a9fa5478.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m interested in the names of the passengers older than 35 years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, a subset of both rows and columns is made in one go and just using
    selection brackets `[]` is not sufficient anymore. The `loc`/`iloc` operators
    are required in front of the selection brackets `[]`. When using `loc`/`iloc`,
    the part before the comma is the rows you want, and the part after the comma is
    the columns you want to select.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When using the column names, row labels or a condition expression, use the `loc`
    operator in front of the selection brackets `[]`. For both the part before and
    after the comma, you can use a single label, a list of labels, a slice of labels,
    a conditional expression or a colon. Using a colon specifies you want to select
    all rows or columns.
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in rows 10 till 25 and columns 3 to 5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, a subset of both rows and columns is made in one go and just using selection
    brackets `[]` is not sufficient anymore. When specifically interested in certain
    rows and/or columns based on their position in the table, use the `iloc` operator
    in front of the selection brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When selecting specific rows and/or columns with `loc` or `iloc`, new values
    can be assigned to the selected data. For example, to assign the name `anonymous`
    to the first 3 elements of the fourth column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: See the user guide section on [different choices for indexing](../../user_guide/indexing.html#indexing-choice)
    to get more insight in the usage of `loc` and `iloc`.
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When selecting subsets of data, square brackets `[]` are used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside these brackets, you can use a single column/row label, a list of column/row
    labels, a slice of labels, a conditional expression or a colon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select specific rows and/or columns using `loc` when using the row and column
    names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select specific rows and/or columns using `iloc` when using the positions in
    the table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can assign new values to a selection based on `loc`/`iloc`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full overview of indexing is provided in the user guide pages on [indexing
    and selecting data](../../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
