["```py\nclass sympy.assumptions.assume.AppliedPredicate(predicate, *args)\n```", "```py\n>>> from sympy import Q, ask\n>>> Q.integer(1)\nQ.integer(1) \n```", "```py\n>>> type(Q.integer(1))\n<class 'sympy.assumptions.assume.AppliedPredicate'>\n>>> Q.integer(1).function\nQ.integer\n>>> Q.integer(1).arguments\n(1,) \n```", "```py\n>>> ask(Q.integer(1))\nTrue \n```", "```py\nproperty arg\n```", "```py\n>>> from sympy import Q, Symbol\n>>> x = Symbol('x')\n>>> a = Q.integer(x + 1)\n>>> a.arg\nx + 1 \n```", "```py\nproperty arguments\n```", "```py\nproperty function\n```", "```py\nclass sympy.assumptions.assume.AssumptionsContext\n```", "```py\n>>> from sympy import ask, Q\n>>> from sympy.assumptions import global_assumptions\n>>> global_assumptions\nAssumptionsContext() \n```", "```py\n>>> from sympy.abc import x\n>>> global_assumptions.add(Q.real(x))\n>>> global_assumptions\nAssumptionsContext({Q.real(x)})\n>>> ask(Q.real(x))\nTrue \n```", "```py\n>>> global_assumptions.remove(Q.real(x))\n>>> print(ask(Q.real(x)))\nNone \n```", "```py\n>>> global_assumptions.add(Q.positive(x))\n>>> global_assumptions\nAssumptionsContext({Q.positive(x)})\n>>> global_assumptions.clear()\n>>> global_assumptions\nAssumptionsContext() \n```", "```py\nadd(*assumptions)\n```", "```py\nclass sympy.assumptions.assume.Predicate(*args, **kwargs)\n```", "```py\n>>> from sympy import Q, ask\n>>> ask(Q.prime(7))\nTrue \n```", "```py\n>>> from sympy import Predicate, Integer\n>>> class SexyPrimePredicate(Predicate):\n...     name = \"sexyprime\"\n>>> Q.sexyprime = SexyPrimePredicate()\n>>> @Q.sexyprime.register(Integer, Integer)\n... def _(int1, int2, assumptions):\n...     args = sorted([int1, int2])\n...     if not all(ask(Q.prime(a), assumptions) for a in args):\n...         return False\n...     return args[1] - args[0] == 6\n>>> ask(Q.sexyprime(5, 11))\nTrue \n```", "```py\n>>> from sympy import Predicate, Integer\n>>> Q.P = Predicate(\"P\")\n>>> type(Q.P)\n<class 'sympy.assumptions.assume.UndefinedPredicate'>\n>>> Q.P(1)\nQ.P(1)\n>>> Q.P.register(Integer)(lambda expr, assump: True)\nTraceback (most recent call last):\n  ...\nTypeError: <class 'sympy.assumptions.assume.UndefinedPredicate'> cannot be dispatched. \n```", "```py\neval(args, assumptions=True)\n```", "```py\nhandler = <dispatched AskPredicateHandler>\n```", "```py\nclassmethod register(*types, **kwargs)\n```", "```py\nclassmethod register_many(*types, **kwargs)\n```", "```py\nclass sympy.assumptions.assume.UndefinedPredicate(name, handlers=None)\n```", "```py\n>>> from sympy import Predicate, Q\n>>> Q.P = Predicate('P')\n>>> Q.P.func\n<class 'sympy.assumptions.assume.UndefinedPredicate'>\n>>> Q.P.name\nStr('P') \n```", "```py\nsympy.assumptions.assume.assuming(*assumptions)\n```", "```py\n>>> from sympy import assuming, Q, ask\n>>> from sympy.abc import x, y\n>>> print(ask(Q.integer(x + y)))\nNone\n>>> with assuming(Q.integer(x), Q.integer(y)):\n...     print(ask(Q.integer(x + y)))\nTrue \n```"]