["```py\nsympy.polys.numberfields.basis.round_two(T, radicals=None)\n```", "```py\n>>> from sympy import Poly, QQ\n>>> from sympy.abc import x\n>>> T = Poly(x ** 3 + x ** 2 - 2 * x + 8)\n>>> K = QQ.alg_field_from_poly(T, \"theta\")\n>>> print(K.maximal_order())\nSubmodule[[2, 0, 0], [0, 2, 0], [0, 1, 1]]/2\n>>> print(K.discriminant())\n-503\n>>> print(K.integral_basis(fmt='sympy'))\n[1, theta, theta/2 + theta**2/2] \n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x\n>>> from sympy.polys.numberfields.basis import round_two\n>>> T = Poly(x ** 3 + x ** 2 - 2 * x + 8)\n>>> print(round_two(T))\n(Submodule[[2, 0, 0], [0, 2, 0], [0, 1, 1]]/2, -503) \n```", "```py\n>>> T = Poly(x**3 + 3*x**2 + 5)\n>>> rad = {}\n>>> ZK, dK = round_two(T, radicals=rad)\n>>> print(rad)\n{3: Submodule[[-1, 1, 0], [-1, 0, 1]]} \n```", "```py\nsympy.polys.numberfields.primes.prime_decomp(p, T=None, ZK=None, dK=None, radical=None)\n```", "```py\n>>> from sympy import Poly, QQ\n>>> from sympy.abc import x, theta\n>>> T = Poly(x ** 3 + x ** 2 - 2 * x + 8)\n>>> K = QQ.algebraic_field((T, theta))\n>>> print(K.primes_above(2))\n[[ (2, x**2 + 1) e=1, f=1 ], [ (2, (x**2 + 3*x + 2)/2) e=1, f=1 ],\n [ (2, (3*x**2 + 3*x)/2) e=1, f=1 ]] \n```", "```py\nclass sympy.polys.numberfields.primes.PrimeIdeal(ZK, p, alpha, f, e=None)\n```", "```py\n__init__(ZK, p, alpha, f, e=None)\n```", "```py\n__add__(other)\n```", "```py\n__mul__(other)\n```", "```py\nas_submodule()\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly, prime_decomp\n>>> T = Poly(cyclotomic_poly(7))\n>>> P0 = prime_decomp(7, T)[0]\n>>> print(P0**6 == 7*P0.ZK)\nTrue \n```", "```py\n>>> print(P0 + 7*P0.ZK == P0.as_submodule())\nTrue \n```", "```py\nproperty is_inert\n```", "```py\nreduce_ANP(a)\n```", "```py\nreduce_alg_num(a)\n```", "```py\nreduce_element(elt)\n```", "```py\nrepr(field_gen=None, just_gens=False)\n```", "```py\n>>> from sympy import cyclotomic_poly, QQ\n>>> from sympy.abc import x, zeta\n>>> T = cyclotomic_poly(7, x)\n>>> K = QQ.algebraic_field((T, zeta))\n>>> P = K.primes_above(11)\n>>> print(P[0].repr())\n[ (11, x**3 + 5*x**2 + 4*x - 1) e=1, f=3 ]\n>>> print(P[0].repr(field_gen=zeta))\n[ (11, zeta**3 + 5*zeta**2 + 4*zeta - 1) e=1, f=3 ]\n>>> print(P[0].repr(field_gen=zeta, just_gens=True))\n(11, zeta**3 + 5*zeta**2 + 4*zeta - 1) \n```", "```py\ntest_factor()\n```", "```py\nvaluation(I)\n```", "```py\nsympy.polys.numberfields.primes.prime_valuation(I, P)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.polys.numberfields import prime_valuation\n>>> K = QQ.cyclotomic_field(5)\n>>> P = K.primes_above(5)\n>>> ZK = K.maximal_order()\n>>> print(prime_valuation(25*ZK, P[0]))\n8 \n```", "```py\nsympy.polys.numberfields.galoisgroups.galois_group(f, *gens, by_name=False, max_tries=30, randomize=False, **args)\n```", "```py\n>>> from sympy import galois_group\n>>> from sympy.abc import x\n>>> f = x**4 + 1\n>>> G, alt = galois_group(f)\n>>> print(G)\nPermutationGroup([\n(0 1)(2 3),\n(0 2)(1 3)]) \n```", "```py\n>>> alt\nTrue\n>>> G.order()\n4 \n```", "```py\n>>> G_name, _ = galois_group(f, by_name=True)\n>>> print(G_name)\nS4TransitiveSubgroups.V \n```", "```py\n>>> G_name.get_perm_group()\nPermutationGroup([\n(0 1)(2 3),\n(0 2)(1 3)]) \n```", "```py\nsympy.polys.numberfields.minpoly.minimal_polynomial(ex, x=None, compose=True, polys=False, domain=None)\n```", "```py\n>>> from sympy import minimal_polynomial, sqrt, solve, QQ\n>>> from sympy.abc import x, y \n```", "```py\n>>> minimal_polynomial(sqrt(2), x)\nx**2 - 2\n>>> minimal_polynomial(sqrt(2), x, domain=QQ.algebraic_field(sqrt(2)))\nx - sqrt(2)\n>>> minimal_polynomial(sqrt(2) + sqrt(3), x)\nx**4 - 10*x**2 + 1\n>>> minimal_polynomial(solve(x**3 + x + 3)[0], x)\nx**3 + x + 3\n>>> minimal_polynomial(sqrt(y), x)\nx**2 - y \n```", "```py\nsympy.polys.numberfields.minpoly.minpoly(ex, x=None, compose=True, polys=False, domain=None)\n```", "```py\nsympy.polys.numberfields.subfield.field_isomorphism(a, b, *, fast=True)\n```", "```py\n>>> from sympy import sqrt, field_isomorphism, I\n>>> print(field_isomorphism(3, sqrt(2)))  \n[3]\n>>> print(field_isomorphism( I*sqrt(3), I*sqrt(3)/2))  \n[2, 0] \n```", "```py\nsympy.polys.numberfields.subfield.primitive_element(extension, x=None, *, ex=False, polys=False)\n```", "```py\n>>> from sympy import primitive_element, sqrt, S, minpoly, simplify\n>>> from sympy.abc import x\n>>> f, lincomb, reps = primitive_element([sqrt(2), sqrt(3)], x, ex=True) \n```", "```py\n>>> print(lincomb)\n[1, 1] \n```", "```py\n>>> print(f)\nx**4 - 10*x**2 + 1\n>>> print(minpoly(sqrt(2) + sqrt(3), x))\nx**4 - 10*x**2 + 1 \n```", "```py\n>>> print([S(r) for r in reps[0]])\n[1/2, 0, -9/2, 0]\n>>> theta = sqrt(2) + sqrt(3)\n>>> print(simplify(theta**3/2 - 9*theta/2))\nsqrt(2)\n>>> print([S(r) for r in reps[1]])\n[-1/2, 0, 11/2, 0]\n>>> print(simplify(-theta**3/2 + 11*theta/2))\nsqrt(3) \n```", "```py\nsympy.polys.numberfields.subfield.to_number_field(extension, theta=None, *, gen=None, alias=None)\n```", "```py\n>>> from sympy import sqrt, to_number_field\n>>> eta = sqrt(2)\n>>> theta = sqrt(2) + sqrt(3)\n>>> a = to_number_field(eta, theta)\n>>> print(type(a))\n<class 'sympy.core.numbers.AlgebraicNumber'>\n>>> a.root\nsqrt(2) + sqrt(3)\n>>> print(a)\nsqrt(2)\n>>> a.coeffs()\n[1/2, 0, -9/2, 0] \n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly, ZZ\n>>> from sympy.abc import x\n>>> from sympy.polys.matrices import DomainMatrix, DM\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5, x))\n>>> A = PowerBasis(T)\n>>> print(A)\nPowerBasis(x**4 + x**3 + x**2 + x + 1)\n>>> B = A.submodule_from_matrix(2 * DomainMatrix.eye(4, ZZ), denom=3)\n>>> print(B)\nSubmodule[[2, 0, 0, 0], [0, 2, 0, 0], [0, 0, 2, 0], [0, 0, 0, 2]]/3\n>>> print(B.parent)\nPowerBasis(x**4 + x**3 + x**2 + x + 1) \n```", "```py\n>>> U = Poly(x**2 - 5)\n>>> M = PowerBasis(U)\n>>> e = M(DM([[1], [1]], ZZ), denom=2)\n>>> print(e)\n[1, 1]/2\n>>> print(e.module)\nPowerBasis(x**2 - 5) \n```", "```py\n>>> from sympy import QQ\n>>> from sympy.polys.numberfields.modules import to_col\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> C = A.submodule_from_matrix(3 * DomainMatrix.eye(4, ZZ))\n>>> e = A(to_col([0, 2, 0, 0]), denom=3)\n>>> f = A(to_col([0, 0, 0, 7]), denom=5)\n>>> g = C(to_col([1, 1, 1, 1]))\n>>> e + f\n[0, 10, 0, 21]/15\n>>> e - f\n[0, 10, 0, -21]/15\n>>> e - g\n[-9, -7, -9, -9]/3\n>>> e + QQ(7, 10)\n[21, 20, 0, 0]/30\n>>> e * f\n[-14, -14, -14, -14]/15\n>>> e ** 2\n[0, 0, 4, 0]/9\n>>> f // g\n[7, 7, 7, 7]/15\n>>> f * QQ(2, 3)\n[0, 0, 0, 14]/15 \n```", "```py\n>>> A = PowerBasis(T)\n>>> B = A.submodule_from_matrix(2 * DomainMatrix.eye(4, ZZ))\n>>> C = A.submodule_from_matrix(3 * DomainMatrix.eye(4, ZZ))\n>>> print((B(0) * C(0)).module == A)\nTrue \n```", "```py\n>>> A = PowerBasis(T)\n>>> print(A._mult_tab is None)\nTrue\n>>> a = A(0)*A(1)\n>>> print(A._mult_tab is None)\nFalse \n```", "```py\nclass sympy.polys.numberfields.modules.Module\n```", "```py\n__call__(spec, denom=1)\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis, to_col\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> e = A(to_col([1, 2, 3, 4]), denom=3)\n>>> print(e)  \n[1, 2, 3, 4]/3\n>>> f = A(2)\n>>> print(f)  \n[0, 0, 1, 0] \n```", "```py\nancestors(include_self=False)\n```", "```py\nbasis_elements()\n```", "```py\nelement_from_rational(a)\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly, QQ\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> a = A.element_from_rational(QQ(2, 3))\n>>> print(a)  \n[2, 0, 0, 0]/3 \n```", "```py\nendomorphism_ring()\n```", "```py\nis_compat_col(col)\n```", "```py\nmult_tab()\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> print(A.mult_tab())  \n{0: {0: [1, 0, 0, 0], 1: [0, 1, 0, 0], 2: [0, 0, 1, 0],     3: [0, 0, 0, 1]},\n 1: {1: [0, 0, 1, 0], 2: [0, 0, 0, 1],     3: [-1, -1, -1, -1]},\n 2: {2: [-1, -1, -1, -1], 3: [1, 0, 0, 0]},\n 3: {3: [0, 1, 0, 0]}} \n```", "```py\nproperty n\n```", "```py\nnearest_common_ancestor(other)\n```", "```py\nproperty number_field\n```", "```py\none()\n```", "```py\nproperty parent\n```", "```py\npower_basis_ancestor()\n```", "```py\nrepresent(elt)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis, to_col\n>>> from sympy.abc import zeta\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> a = A(to_col([2, 4, 6, 8])) \n```", "```py\n>>> B = A.submodule_from_gens([2*A(i) for i in range(4)])\n>>> b = B.represent(a)\n>>> print(b.transpose())  \nDomainMatrix([[1, 2, 3, 4]], (1, 4), ZZ) \n```", "```py\n>>> print(a.poly(zeta).as_expr())\n8*zeta**3 + 6*zeta**2 + 4*zeta + 2\n>>> print(B(b).over_power_basis().poly(zeta).as_expr())\n8*zeta**3 + 6*zeta**2 + 4*zeta + 2 \n```", "```py\nstarts_with_unity()\n```", "```py\nsubmodule_from_gens(gens, hnf=True, hnf_modulus=None)\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> gens = [A(0), 2*A(1), 3*A(2), 4*A(3)//5]\n>>> B = A.submodule_from_gens(gens)\n>>> print(B)  \nSubmodule[[5, 0, 0, 0], [0, 10, 0, 0], [0, 0, 15, 0], [0, 0, 0, 4]]/5 \n```", "```py\nsubmodule_from_matrix(B, denom=1)\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly, ZZ\n>>> from sympy.polys.matrices import DM\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> B = A.submodule_from_matrix(DM([\n...     [0, 10, 0, 0],\n...     [0,  0, 7, 0],\n... ], ZZ).transpose(), denom=15)\n>>> print(B)  \nSubmodule[[0, 10, 0, 0], [0, 0, 7, 0]]/15 \n```", "```py\nwhole_submodule()\n```", "```py\nzero()\n```", "```py\nclass sympy.polys.numberfields.modules.PowerBasis(T)\n```", "```py\n__init__(T)\n```", "```py\nelement_from_ANP(a)\n```", "```py\nelement_from_alg_num(a)\n```", "```py\nelement_from_poly(f)\n```", "```py\nrepresent(elt)\n```", "```py\nclass sympy.polys.numberfields.modules.Submodule(parent, matrix, denom=1, mult_tab=None)\n```", "```py\n__init__(parent, matrix, denom=1, mult_tab=None)\n```", "```py\nproperty QQ_matrix\n```", "```py\n>>> from sympy.polys import Poly, cyclotomic_poly, ZZ\n>>> from sympy.abc import x\n>>> from sympy.polys.matrices import DomainMatrix\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> T = Poly(cyclotomic_poly(5, x))\n>>> A = PowerBasis(T)\n>>> B = A.submodule_from_matrix(3*DomainMatrix.eye(4, ZZ), denom=6)\n>>> C = A.submodule_from_matrix(DomainMatrix.eye(4, ZZ), denom=2)\n>>> print(B.QQ_matrix == C.QQ_matrix)\nTrue \n```", "```py\nadd(other, hnf=True, hnf_modulus=None)\n```", "```py\nbasis_element_pullbacks()\n```", "```py\ndiscard_before(r)\n```", "```py\nmul(other, hnf=True, hnf_modulus=None)\n```", "```py\nreduce_element(elt)\n```", "```py\n>>> from sympy import QQ, Poly, symbols\n>>> t = symbols('t')\n>>> k = QQ.alg_field_from_poly(Poly(t**3 + t**2 - 2*t + 8))\n>>> Zk = k.maximal_order()\n>>> A = Zk.parent\n>>> B = (A(2) - 3*A(0))*Zk\n>>> B.reduce_element(A(2))\n[3, 0, 0] \n```", "```py\nreduced()\n```", "```py\nrepresent(elt)\n```", "```py\nclass sympy.polys.numberfields.modules.ModuleElement(module, col, denom=1)\n```", "```py\n__init__(module, col, denom=1)\n```", "```py\n__add__(other)\n```", "```py\n__mul__(other)\n```", "```py\n__mod__(m)\n```", "```py\nproperty QQ_col\n```", "```py\ncolumn(domain=None)\n```", "```py\nequiv(other)\n```", "```py\nclassmethod from_int_list(module, coeffs, denom=1)\n```", "```py\nis_compat(other)\n```", "```py\nproperty n\n```", "```py\nover_power_basis()\n```", "```py\nreduced()\n```", "```py\nreduced_mod_p(p)\n```", "```py\nto_ancestor(anc)\n```", "```py\nto_parent()\n```", "```py\nunify(other)\n```", "```py\nclass sympy.polys.numberfields.modules.PowerBasisElement(module, col, denom=1)\n```", "```py\nproperty T\n```", "```py\nas_expr(x=None)\n```", "```py\nproperty generator\n```", "```py\nproperty is_rational\n```", "```py\nnorm(T=None)\n```", "```py\nnumerator(x=None)\n```", "```py\npoly(x=None)\n```", "```py\nto_ANP()\n```", "```py\nto_alg_num()\n```", "```py\nsympy.polys.numberfields.modules.make_mod_elt(module, col, denom=1)\n```", "```py\nclass sympy.polys.numberfields.modules.ModuleHomomorphism(domain, codomain, mapping)\n```", "```py\n__init__(domain, codomain, mapping)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis, ModuleHomomorphism\n>>> T = Poly(cyclotomic_poly(5))\n>>> A = PowerBasis(T)\n>>> B = A.submodule_from_gens([2*A(j) for j in range(4)])\n>>> phi = ModuleHomomorphism(A, B, lambda x: 6*x)\n>>> print(phi.matrix())  \nDomainMatrix([[3, 0, 0, 0], [0, 3, 0, 0], [0, 0, 3, 0], [0, 0, 0, 3]], (4, 4), ZZ) \n```", "```py\nkernel(modulus=None)\n```", "```py\nmatrix(modulus=None)\n```", "```py\nclass sympy.polys.numberfields.modules.ModuleEndomorphism(domain, mapping)\n```", "```py\n__init__(domain, mapping)\n```", "```py\nclass sympy.polys.numberfields.modules.InnerEndomorphism(domain, multiplier)\n```", "```py\n__init__(domain, multiplier)\n```", "```py\nclass sympy.polys.numberfields.modules.EndomorphismRing(domain)\n```", "```py\n__init__(domain)\n```", "```py\ninner_endomorphism(multiplier)\n```", "```py\nrepresent(element)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.modules import PowerBasis\n>>> from sympy.polys.numberfields.modules import ModuleHomomorphism\n>>> T = Poly(cyclotomic_poly(5))\n>>> M = PowerBasis(T)\n>>> E = M.endomorphism_ring() \n```", "```py\n>>> zeta = M(1)\n>>> tau = E.inner_endomorphism(zeta)\n>>> tau.matrix().transpose()  \nDomainMatrix(\n [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [-1, -1, -1, -1]],\n (4, 4), ZZ) \n```", "```py\n>>> E.represent(tau).transpose()  \nDomainMatrix(\n [[0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, -1, -1, -1]],\n (1, 16), ZZ) \n```", "```py\n>>> phi = ModuleHomomorphism(M, E, lambda x: E.inner_endomorphism(x)) \n```", "```py\n>>> phi.matrix().transpose()  \nDomainMatrix(\n [[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, -1, -1, -1],\n [0, 0, 1, 0, 0, 0, 0, 1, -1, -1, -1, -1, 1, 0, 0, 0],\n [0, 0, 0, 1, -1, -1, -1, -1, 1, 0, 0, 0, 0, 1, 0, 0]],\n (4, 16), ZZ) \n```", "```py\nsympy.polys.numberfields.modules.find_min_poly(alpha, domain, x=None, powers=None)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly, primitive_root, QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.numberfields.modules import PowerBasis, find_min_poly\n>>> n = 13\n>>> g = primitive_root(n)\n>>> C = PowerBasis(Poly(cyclotomic_poly(n, x)))\n>>> ee = [g**(2*k+1) % n for k in range((n-1)//2)]\n>>> eta = sum(C(e) for e in ee)\n>>> print(find_min_poly(eta, QQ, x=x).as_expr())\nx**2 + x - 3\n>>> n = 19\n>>> g = primitive_root(n)\n>>> C = PowerBasis(Poly(cyclotomic_poly(n, x)))\n>>> ee = [g**(2*k+2) % n for k in range((n-1)//2)]\n>>> eta = sum(C(e) for e in ee)\n>>> print(find_min_poly(eta, QQ, x=x).as_expr())\nx**2 + x + 5 \n```", "```py\nsympy.polys.numberfields.utilities.is_rat(c)\n```", "```py\nsympy.polys.numberfields.utilities.is_int(c)\n```", "```py\nsympy.polys.numberfields.utilities.get_num_denom(c)\n```", "```py\nsympy.polys.numberfields.utilities.extract_fundamental_discriminant(a)\n```", "```py\n>>> from sympy.polys.numberfields.utilities import extract_fundamental_discriminant\n>>> print(extract_fundamental_discriminant(-432))\n({3: 1, -1: 1}, {2: 2, 3: 1}) \n```", "```py\n>>> from sympy import factorint\n>>> print(factorint(-432))\n{2: 4, 3: 3, -1: 1} \n```", "```py\nclass sympy.polys.numberfields.utilities.AlgIntPowers(T, modulus=None)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly\n>>> from sympy.polys.numberfields.utilities import AlgIntPowers\n>>> T = Poly(cyclotomic_poly(5))\n>>> zeta_pow = AlgIntPowers(T)\n>>> print(zeta_pow[0])\n[1, 0, 0, 0]\n>>> print(zeta_pow[1])\n[0, 1, 0, 0]\n>>> print(zeta_pow[4])  \n[-1, -1, -1, -1]\n>>> print(zeta_pow[24])  \n[-1, -1, -1, -1] \n```", "```py\n__init__(T, modulus=None)\n```", "```py\nsympy.polys.numberfields.utilities.coeff_search(m, R)\n```", "```py\n>>> from sympy.polys.numberfields.utilities import coeff_search\n>>> cs = coeff_search(2, 1)\n>>> C = [next(cs) for i in range(13)]\n>>> print(C)\n[[1, 1], [1, 0], [1, -1], [0, 1], [2, 2], [2, 1], [2, 0], [2, -1], [2, -2],\n [1, 2], [1, -2], [0, 2], [3, 3]] \n```", "```py\nsympy.polys.numberfields.utilities.supplement_a_subspace(M)\n```", "```py\n>>> from sympy.polys.matrices import DM\n>>> from sympy import QQ, FF\n>>> from sympy.polys.numberfields.utilities import supplement_a_subspace\n>>> M = DM([[1, 7, 0], [2, 3, 4]], QQ).transpose()\n>>> print(supplement_a_subspace(M).to_Matrix().transpose())\nMatrix([[1, 7, 0], [2, 3, 4], [1, 0, 0]]) \n```", "```py\n>>> M2 = M.convert_to(FF(7))\n>>> print(M2.to_Matrix().transpose())\nMatrix([[1, 0, 0], [2, 3, -3]])\n>>> print(supplement_a_subspace(M2).to_Matrix().transpose())\nMatrix([[1, 0, 0], [2, 3, -3], [0, 1, 0]]) \n```", "```py\nsympy.polys.numberfields.utilities.isolate(alg, eps=None, fast=False)\n```", "```py\n>>> from sympy import isolate, sqrt, Rational\n>>> print(isolate(sqrt(2)))  \n(1, 2)\n>>> print(isolate(sqrt(2), eps=Rational(1, 100)))\n(24/17, 17/12) \n```"]