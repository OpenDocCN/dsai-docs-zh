["```py\n>>> from sympy.vector import CoordSys3D\n>>> N = CoordSys3D('N') \n```", "```py\n>>> N.i\nN.i\n>>> type(N.i)\n<class 'sympy.vector.vector.BaseVector'> \n```", "```py\n>>> 3*N.i\n3*N.i\n>>> type(3*N.i)\n<class 'sympy.vector.vector.VectorMul'> \n```", "```py\n>>> v = 2*N.i + N.j\n>>> type(v)\n<class 'sympy.vector.vector.VectorAdd'>\n>>> v - N.j\n2*N.i\n>>> type(v - N.j)\n<class 'sympy.vector.vector.VectorMul'> \n```", "```py\n>>> from sympy.vector import Vector\n>>> Vector.zero\n0\n>>> type(Vector.zero)\n<class 'sympy.vector.vector.VectorZero'>\n>>> N.i + Vector.zero\nN.i\n>>> Vector.zero == 2*Vector.zero\nTrue \n```", "```py\n>>> v = N.i - 2*N.j\n>>> v/3\n1/3*N.i + (-2/3)*N.j\n>>> v + N.k\nN.i + (-2)*N.j + N.k\n>>> Vector.zero/2\n0\n>>> (v/3)*4\n4/3*N.i + (-8/3)*N.j \n```", "```py\n>>> v1 = 2*N.i + 3*N.j - N.k\n>>> v2 = N.i - 4*N.j + N.k\n>>> v1.dot(v2)\n-11\n>>> v1.cross(v2)\n(-1)*N.i + (-3)*N.j + (-11)*N.k\n>>> v2.cross(v1)\nN.i + 3*N.j + 11*N.k \n```", "```py\n>>> v1 & v2\n-11\n>>> v1 ^ v2\n(-1)*N.i + (-3)*N.j + (-11)*N.k \n```", "```py\n>>> from sympy.abc import a, b, c\n>>> from sympy import sin, cos, trigsimp, diff\n>>> v = (a*b + a*c + b**2 + b*c)*N.i + N.j\n>>> v.factor()\n((a + b)*(b + c))*N.i + N.j\n>>> v = (sin(a)**2 + cos(a)**2)*N.i - (2*cos(b)**2 - 1)*N.k\n>>> trigsimp(v)\nN.i + (-cos(2*b))*N.k\n>>> v.simplify()\nN.i + (-cos(2*b))*N.k\n>>> diff(v, b)\n(4*sin(b)*cos(b))*N.k\n>>> from sympy import Derivative\n>>> Derivative(v, b).doit()\n(4*sin(b)*cos(b))*N.k \n```", "```py\n>>> from sympy import Integral\n>>> v1 = a*N.i + sin(a)*N.j - N.k\n>>> Integral(v1, a)\n(Integral(a, a))*N.i + (Integral(sin(a), a))*N.j + (Integral(-1, a))*N.k\n>>> Integral(v1, a).doit()\na**2/2*N.i + (-cos(a))*N.j + (-a)*N.k \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> N = CoordSys3D('N')\n>>> N.origin\nN.origin\n>>> type(N.origin)\n<class 'sympy.vector.point.Point'> \n```", "```py\n>>> from sympy.abc import a, b, c\n>>> P = N.origin.locate_new('P', a*N.i + b*N.j + c*N.k)\n>>> Q = P.locate_new('Q', -b*N.j) \n```", "```py\n>>> P.position_wrt(Q)\nb*N.j\n>>> Q.position_wrt(N.origin)\na*N.i + c*N.k \n```", "```py\n>>> Q.express_coordinates(N)\n(a, 0, c) \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> N = CoordSys3D('N')\n>>> N.i.outer(N.j)\n(N.i|N.j)\n>>> N.i|N.j\n(N.i|N.j) \n```", "```py\n>>> dyad = N.i.outer(N.k)\n>>> dyad*3\n3*(N.i|N.k)\n>>> dyad - dyad\n0\n>>> dyad + 2*(N.j|N.i)\n(N.i|N.k) + 2*(N.j|N.i) \n```", "```py\n>>> d = N.i.outer(N.j)\n>>> d.dot(N.j|N.j)\n(N.i|N.j)\n>>> d.dot(N.i)\n0\n>>> d.dot(N.j)\nN.i\n>>> N.i.dot(d)\nN.j\n>>> N.k ^ d\n(N.j|N.j) \n```"]