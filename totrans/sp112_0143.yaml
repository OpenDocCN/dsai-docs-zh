- en: scipy.integrate.solve_ivp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.solve_ivp
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Solve an initial value problem for a system of ODEs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为一组ODE解决初始值问题。
- en: 'This function numerically integrates a system of ordinary differential equations
    given an initial value:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数对给定初始值数值积分一组普通微分方程系统：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here t is a 1-D independent variable (time), y(t) is an N-D vector-valued function
    (state), and an N-D vector-valued function f(t, y) determines the differential
    equations. The goal is to find y(t) approximately satisfying the differential
    equations, given an initial value y(t0)=y0.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里t是一维独立变量（时间），y(t)是一个N维向量值函数（状态），而一个N维向量值函数f(t, y)确定了微分方程。目标是找到一个近似满足微分方程的y(t)，给定初始值y(t0)=y0。
- en: Some of the solvers support integration in the complex domain, but note that
    for stiff ODE solvers, the right-hand side must be complex-differentiable (satisfy
    Cauchy-Riemann equations [[11]](#r179348322575-11)). To solve a problem in the
    complex domain, pass y0 with a complex data type. Another option always available
    is to rewrite your problem for real and imaginary parts separately.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一些求解器支持在复数域中进行积分，但请注意，对于刚性ODE求解器，右手边必须是复可微的（满足柯西-黎曼方程[[11]](#r179348322575-11)）。要解决复数域中的问题，请使用具有复数数据类型的*y0*。另一个始终可用的选项是将问题分别重写为实部和虚部。
- en: 'Parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun**callable'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun**可调用函数'
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. Additional arguments need to be passed if `args`
    is used (see documentation of `args` argument). `fun` must return an array of
    the same shape as `y`. See *vectorized* for more information.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的右手边：在时间t处状态`y`的时间导数。调用签名是`fun(t, y)`，其中`t`是标量，`y`是一个长度为`len(y0)`的ndarray。如果使用了`args`（参见`args`参数的文档），需要传递额外的参数。`fun`必须返回与`y`相同形状的数组。详见*向量化*以获取更多信息。
- en: '**t_span**2-member sequence'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_span**的2元序列'
- en: Interval of integration (t0, tf). The solver starts with t=t0 and integrates
    until it reaches t=tf. Both t0 and tf must be floats or values interpretable by
    the float conversion function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 积分区间(t0, tf)。求解器从t=t0开始积分，直到达到t=tf。t0和tf都必须是浮点数或可以转换为浮点数的值。
- en: '**y0**array_like, shape (n,)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**y0**array_like，形状（n，）'
- en: Initial state. For problems in the complex domain, pass *y0* with a complex
    data type (even if the initial value is purely real).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态。对于复数域中的问题，请使用具有复数数据类型的*y0*（即使初始值是纯实数）。
- en: '**method**string or [`OdeSolver`](scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver"), optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**method**字符串或[`OdeSolver`](scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver")，可选'
- en: 'Integration method to use:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的积分方法：
- en: '‘RK45’ (default): Explicit Runge-Kutta method of order 5(4) [[1]](#r179348322575-1).
    The error is controlled assuming accuracy of the fourth-order method, but steps
    are taken using the fifth-order accurate formula (local extrapolation is done).
    A quartic interpolation polynomial is used for the dense output [[2]](#r179348322575-2).
    Can be applied in the complex domain.'
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘RK45’（默认）：五阶（四阶）显式Runge-Kutta方法[[1]](#r179348322575-1)。通过假定四阶方法的准确性来控制误差，但使用五阶准确公式（进行本地外推）。对于密集输出，使用四次插值多项式[[2]](#r179348322575-2)。可应用于复数域。
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘RK23’: Explicit Runge-Kutta method of order 3(2) [[3]](#r179348322575-3).
    The error is controlled assuming accuracy of the second-order method, but steps
    are taken using the third-order accurate formula (local extrapolation is done).
    A cubic Hermite polynomial is used for the dense output. Can be applied in the
    complex domain.'
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘RK23’：三阶（二阶）显式Runge-Kutta方法[[3]](#r179348322575-3)。通过假定二阶方法的准确性来控制误差，但使用三阶准确公式（进行本地外推）。对于密集输出，使用三次Hermite多项式。可应用于复数域。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘DOP853’: Explicit Runge-Kutta method of order 8 [[13]](#r179348322575-13).
    Python implementation of the “DOP853” algorithm originally written in Fortran
    [[14]](#r179348322575-14). A 7-th order interpolation polynomial accurate to 7-th
    order is used for the dense output. Can be applied in the complex domain.'
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘DOP853’：8阶显式Runge-Kutta方法[[13]](#r179348322575-13)。Python实现了最初在Fortran中编写的“DOP853”算法[[14]](#r179348322575-14)。用于密集输出的7阶插值多项式精确到7阶。可应用于复数域。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘Radau’: Implicit Runge-Kutta method of the Radau IIA family of order 5 [[4]](#r179348322575-4).
    The error is controlled with a third-order accurate embedded formula. A cubic
    polynomial which satisfies the collocation conditions is used for the dense output.'
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘Radau’：Radau IIA族的隐式Runge-Kutta方法，阶数为5[[4]](#r179348322575-4)。误差通过三阶准确的嵌入公式控制。满足配点条件的三次多项式用于密集输出。
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘BDF’: Implicit multi-step variable-order (1 to 5) method based on a backward
    differentiation formula for the derivative approximation [[5]](#r179348322575-5).
    The implementation follows the one described in [[6]](#r179348322575-6). A quasi-constant
    step scheme is used and accuracy is enhanced using the NDF modification. Can be
    applied in the complex domain.'
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘BDF’：基于后向差分公式的隐式多步变阶（1到5阶）方法，用于导数近似[[5]](#r179348322575-5)。该实现遵循[[6]](#r179348322575-6)中描述的方法。采用准恒定步长方案，并使用NDF修正增强精度。可应用于复数域。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘LSODA’: Adams/BDF method with automatic stiffness detection and switching
    [[7]](#r179348322575-7), [[8]](#r179348322575-8). This is a wrapper of the Fortran
    solver from ODEPACK.'
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘LSODA’：Adams/BDF方法，具有自动刚性检测和切换[[7]](#r179348322575-7)，[[8]](#r179348322575-8)。这是ODEPACK中Fortran求解器的包装器。
- en: Explicit Runge-Kutta methods (‘RK23’, ‘RK45’, ‘DOP853’) should be used for non-stiff
    problems and implicit methods (‘Radau’, ‘BDF’) for stiff problems [[9]](#r179348322575-9).
    Among Runge-Kutta methods, ‘DOP853’ is recommended for solving with high precision
    (low values of *rtol* and *atol*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 显式Runge-Kutta方法（‘RK23’、‘RK45’、‘DOP853’）应用于非刚性问题，而隐式方法（‘Radau’、‘BDF’）应用于刚性问题[[9]](#r179348322575-9)。在Runge-Kutta方法中，推荐使用‘DOP853’以实现高精度求解（低*rtol*和*atol*值）。
- en: If not sure, first try to run ‘RK45’. If it makes unusually many iterations,
    diverges, or fails, your problem is likely to be stiff and you should use ‘Radau’
    or ‘BDF’. ‘LSODA’ can also be a good universal choice, but it might be somewhat
    less convenient to work with as it wraps old Fortran code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不确定，请先尝试运行‘RK45’。如果它执行异常多的迭代、发散或失败，则您的问题可能是刚性的，您应该使用‘Radau’或‘BDF’。‘LSODA’也可以是一个好的通用选择，但它可能不太方便使用，因为它包装了旧的Fortran代码。
- en: You can also pass an arbitrary class derived from [`OdeSolver`](scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver") which implements the solver.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以传递从[`OdeSolver`](scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver")派生的任意类，该类实现了求解器。
- en: '**t_eval**array_like or None, optional'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_eval** array_like或None，可选'
- en: Times at which to store the computed solution, must be sorted and lie within
    *t_span*. If None (default), use points selected by the solver.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 计算解的时间点，必须按顺序排序并位于*t_span*内。如果为None（默认），则使用求解器选择的点。
- en: '**dense_output**bool, optional'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**dense_output** bool，可选'
- en: Whether to compute a continuous solution. Default is False.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 是否计算连续解。默认为False。
- en: '**events**callable, or list of callables, optional'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**events** callable或callable列表，可选'
- en: 'Events to track. If None (default), no events will be tracked. Each event occurs
    at the zeros of a continuous function of time and state. Each function must have
    the signature `event(t, y)` where additional argument have to be passed if `args`
    is used (see documentation of `args` argument). Each function must return a float.
    The solver will find an accurate value of *t* at which `event(t, y(t)) = 0` using
    a root-finding algorithm. By default, all zeros will be found. The solver looks
    for a sign change over each step, so if multiple zero crossings occur within one
    step, events may be missed. Additionally each *event* function might have the
    following attributes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪事件。如果为None（默认），将不会跟踪任何事件。每个事件发生在时间和状态的连续函数的零点上。每个函数必须具有`event(t, y)`的签名，在使用`args`（参见`args`参数的文档）时必须传递额外的参数。每个函数必须返回一个浮点数。求解器将使用根查找算法找到使得`event(t,
    y(t)) = 0`的准确时间*t*。默认情况下，将找到所有的零点。求解器在每一步中寻找符号变化，因此如果在一步内发生多次零点穿越，则可能会错过事件。此外，每个*event*函数可能具有以下属性：
- en: 'terminal: bool, optional'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: terminal：bool，可选
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whether to terminate integration if this event occurs. Implicitly False if not
    assigned.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是否在此事件发生时终止积分。如果未分配，则隐式为False。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'direction: float, optional'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'direction: float, optional'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Direction of a zero crossing. If *direction* is positive, *event* will only
    trigger when going from negative to positive, and vice versa if *direction* is
    negative. If 0, then either direction will trigger event. Implicitly 0 if not
    assigned.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 零点穿越的方向。如果*direction*为正，当从负到正时*event*将触发，如果*direction*为负，则反之。如果为0，则任何方向都会触发事件。如果未指定，则隐式为0。
- en: You can assign attributes like `event.terminal = True` to any function in Python.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为Python中的任何函数分配属性，例如`event.terminal = True`。
- en: '**vectorized**bool, optional'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**vectorized**bool, optional'
- en: Whether *fun* can be called in a vectorized fashion. Default is False.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 是否可以以向量化方式调用*fun*。默认为False。
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为False，则*fun*将始终使用形状为`(n,)`的`y`调用，其中`n = len(y0)`。
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为True，则可以使用形状为`(n, k)`的`y`调用*fun*，其中`k`是整数。在这种情况下，*fun*必须表现出`fun(t,
    y)[:, i] == fun(t, y[:, i])`（即返回数组的每一列都是与`y`的每一列对应的状态的时间导数）。
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by methods ‘Radau’ and ‘BDF’, but will result in slower execution
    for other methods and for ‘Radau’ and ‘BDF’ in some circumstances (e.g. small
    `len(y0)`).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`vectorized=True`允许通过‘Radau’和‘BDF’方法更快地进行雅可比矩阵的有限差分逼近，但会导致其他方法和在某些情况下（例如小的`len(y0)`）‘Radau’和‘BDF’方法的执行速度变慢。
- en: '**args**tuple, optional'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**tuple，可选'
- en: Additional arguments to pass to the user-defined functions. If given, the additional
    arguments are passed to all user-defined functions. So if, for example, *fun*
    has the signature `fun(t, y, a, b, c)`, then *jac* (if given) and any event functions
    must have the same signature, and *args* must be a tuple of length 3.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给用户定义函数的附加参数。如果给出，则所有用户定义函数都会传递这些附加参数。例如，如果*fun*的签名为`fun(t, y, a, b, c)`，则*jac*（如果给出）和任何事件函数必须具有相同的签名，并且*args*必须是长度为3的元组。
- en: '****options**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '****options**'
- en: Options passed to a chosen solver. All options available for already implemented
    solvers are listed below.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给选择的求解器的选项。列出了所有已实现求解器可用的选项。
- en: '**first_step**float or None, optional'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**first_step**float或None，可选'
- en: Initial step size. Default is *None* which means that the algorithm should choose.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 初始步长。默认为*None*，表示算法应选择。
- en: '**max_step**float, optional'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_step**float, optional'
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最大步长。默认为np.inf，即步长不受限制，仅由求解器确定。
- en: '**rtol, atol**float or array_like, optional'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol, atol**float或array_like，可选'
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 相对和绝对容差。求解器保持局部误差估计小于`atol + rtol * abs(y)`。其中*rtol*控制相对精度（正确数字的数量），而*atol*控制绝对精度（正确小数位数）。为了实现所需的*rtol*，请将*atol*设置为小于从`rtol
    * abs(y)`可以期望的最小值，以便*rtol*主导允许的误差。如果*atol*大于`rtol * abs(y)`，则不能保证正确数字的数量。相反，为了实现所需的*atol*，请设置*rtol*，使得`rtol
    * abs(y)`始终小于*atol*。如果y的组件具有不同的比例，则通过传递形状为(n,)的array_like为*atol*的不同组件设置不同的值可能是有益的。默认值为*rtol*为1e-3和*atol*为1e-6。
- en: '**jac**array_like, sparse_matrix, callable or None, optional'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**jac**array_like、稀疏矩阵、可调用对象或None，可选'
- en: 'Jacobian matrix of the right-hand side of the system with respect to y, required
    by the ‘Radau’, ‘BDF’ and ‘LSODA’ method. The Jacobian matrix has shape (n, n)
    and its element (i, j) is equal to `d f_i / d y_j`. There are three ways to define
    the Jacobian:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *y* 系统右手边的雅可比矩阵，要求 ‘Radau’、‘BDF’ 和 ‘LSODA’ 方法。雅可比矩阵的形状为 (n, n)，其元素 (i, j)
    等于 `d f_i / d y_j`。有三种方法来定义雅可比矩阵：
- en: If array_like or sparse_matrix, the Jacobian is assumed to be constant. Not
    supported by ‘LSODA’.
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 `array_like` 或 `sparse_matrix`，则假定雅可比矩阵是常数。不支持‘LSODA’。
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If callable, the Jacobian is assumed to depend on both t and y; it will be called
    as `jac(t, y)`, as necessary. Additional arguments have to be passed if `args`
    is used (see documentation of `args` argument). For ‘Radau’ and ‘BDF’ methods,
    the return value might be a sparse matrix.
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是可调用的，则假定雅可比矩阵依赖于 *t* 和 *y*；将按需调用为 `jac(t, y)`。如果使用了 `args`（请参阅 `args` 参数的文档），还必须传递额外参数。对于‘Radau’和‘BDF’方法，返回值可能是稀疏矩阵。
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If None (default), the Jacobian will be approximated by finite differences.
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果为 `None`（默认），雅可比矩阵将通过有限差分逼近。
- en: It is generally recommended to provide the Jacobian rather than relying on a
    finite-difference approximation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常建议提供雅可比矩阵而不是依赖有限差分逼近。
- en: '**jac_sparsity**array_like, sparse matrix or None, optional'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**jac_sparsity**：`array_like`，稀疏矩阵或 `None`，可选'
- en: Defines a sparsity structure of the Jacobian matrix for a finite- difference
    approximation. Its shape must be (n, n). This argument is ignored if *jac* is
    not *None*. If the Jacobian has only few non-zero elements in *each* row, providing
    the sparsity structure will greatly speed up the computations [[10]](#r179348322575-10).
    A zero entry means that a corresponding element in the Jacobian is always zero.
    If None (default), the Jacobian is assumed to be dense. Not supported by ‘LSODA’,
    see *lband* and *uband* instead.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 定义雅可比矩阵的稀疏结构，用于有限差分逼近。其形状必须为 (n, n)。如果 *jac* 不为 `None`，则忽略此参数。如果雅可比矩阵每行只有几个非零元素，提供稀疏结构将极大加速计算
    [[10]](#r179348322575-10)。零条目意味着雅可比矩阵中相应的元素始终为零。如果为 `None`（默认），则假定雅可比矩阵是密集的。‘LSODA’不支持，见
    *lband* 和 *uband*。
- en: '**lband, uband**int or None, optional'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**lband, uband**：整数或 `None`，可选'
- en: 'Parameters defining the bandwidth of the Jacobian for the ‘LSODA’ method, i.e.,
    `jac[i, j] != 0 only for i - lband <= j <= i + uband`. Default is None. Setting
    these requires your jac routine to return the Jacobian in the packed format: the
    returned array must have `n` columns and `uband + lband + 1` rows in which Jacobian
    diagonals are written. Specifically `jac_packed[uband + i - j , j] = jac[i, j]`.
    The same format is used in [`scipy.linalg.solve_banded`](scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded") (check for an illustration). These parameters can
    be also used with `jac=None` to reduce the number of Jacobian elements estimated
    by finite differences.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 定义“LSODA”方法雅可比矩阵带宽的参数，即，`jac[i, j] != 0` 仅当 `i - lband <= j <= i + uband`。默认为
    `None`。设置这些参数需要你的雅可比例程以打包格式返回雅可比矩阵：返回的数组必须有 `n` 列和 `uband + lband + 1` 行，其中雅可比矩阵对角线写入。具体而言，`jac_packed[uband
    + i - j, j] = jac[i, j]`。[`scipy.linalg.solve_banded`](scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded") 中也使用相同格式（查看示例）。这些参数也可以与 `jac=None` 一起使用，以减少通过有限差分估计的雅可比元素数量。
- en: '**min_step**float, optional'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**min_step**：浮点数，可选'
- en: The minimum allowed step size for ‘LSODA’ method. By default *min_step* is zero.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “LSODA”方法的最小允许步长。默认情况下 *min_step* 为零。
- en: 'Returns:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'Bunch object with the following fields defined:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 包对象，具有以下字段定义：
- en: '**t**ndarray, shape (n_points,)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**t**：`ndarray`，形状为 (n_points,)'
- en: Time points.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 时间点。
- en: '**y**ndarray, shape (n, n_points)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**：`ndarray`，形状为 (n, n_points)'
- en: Values of the solution at *t*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *t* 处解的值。
- en: '**sol**[`OdeSolution`](scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution") or None'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**sol**：[`OdeSolution`](scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution") 或 `None`'
- en: Found solution as [`OdeSolution`](scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution") instance; None if *dense_output* was set to False.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 找到的解作为 [`OdeSolution`](scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution") 实例；如果 *dense_output* 设置为 `False`，则为 `None`。
- en: '**t_events**list of ndarray or None'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_events**：`ndarray` 列表或 `None`'
- en: Contains for each event type a list of arrays at which an event of that type
    event was detected. None if *events* was None.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 包含每种事件类型检测到事件的数组列表。如果 *events* 为 `None`，则为 `None`。
- en: '**y_events**list of ndarray or None'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**y_events**：`ndarray` 列表或 `None`'
- en: For each value of *t_events*, the corresponding value of the solution. None
    if *events* was None.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个*t_events*的值，对应的解的值。如果*events*为None，则为None。
- en: '**nfev**int'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**nfev**整数'
- en: Number of evaluations of the right-hand side.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 右手边求值的数量。
- en: '**njev**int'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**njev**整数'
- en: Number of evaluations of the Jacobian.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 雅可比矩阵的求值数量。
- en: '**nlu**int'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**nlu**整数'
- en: Number of LU decompositions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: LU分解的数量。
- en: '**status**int'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**整数'
- en: 'Reason for algorithm termination:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 算法终止的原因：
- en: '-1: Integration step failed.'
  id: totrans-101
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: -1：积分步骤失败。
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '0: The solver successfully reached the end of *tspan*.'
  id: totrans-104
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0：求解器成功到达*tspan*的末尾。
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '1: A termination event occurred.'
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1：发生终止事件。
- en: '**message**string'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息**字符串'
- en: Human-readable description of the termination reason.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 算法终止原因的可读描述。
- en: '**success**bool'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**成功**布尔值'
- en: True if the solver reached the interval end or a termination event occurred
    (`status >= 0`).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果求解器达到时间间隔的结束或发生终止事件（`status >= 0`），则为True。
- en: References
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id2)]'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id2)]'
- en: J. R. Dormand, P. J. Prince, “A family of embedded Runge-Kutta formulae”, Journal
    of Computational and Applied Mathematics, Vol. 6, No. 1, pp. 19-26, 1980.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: J. R. Dormand, P. J. Prince, “一族嵌入Runge-Kutta公式”，计算和应用数学杂志，第 6 卷，第 1 期，pp. 19-26，1980年。
- en: '[[2](#id3)]'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id3)]'
- en: L. W. Shampine, “Some Practical Runge-Kutta Formulas”, Mathematics of Computation,,
    Vol. 46, No. 173, pp. 135-150, 1986.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: L. W. Shampine, “一些实用的Runge-Kutta公式”，计算数学，第 46 卷，第 173 期，pp. 135-150，1986年。
- en: '[[3](#id4)]'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[[3](#id4)]'
- en: P. Bogacki, L.F. Shampine, “A 3(2) Pair of Runge-Kutta Formulas”, Appl. Math.
    Lett. Vol. 2, No. 4\. pp. 321-325, 1989.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: P. Bogacki, L.F. Shampine, “一对3(2)的Runge-Kutta公式”，应用数学通讯，第 2 卷，第 4 期，pp. 321-325，1989年。
- en: '[[4](#id7)]'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[[4](#id7)]'
- en: 'E. Hairer, G. Wanner, “Solving Ordinary Differential Equations II: Stiff and
    Differential-Algebraic Problems”, Sec. IV.8.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: E. Hairer, G. Wanner, “求解普通微分方程 II：刚性和微分代数问题”，第 IV.8 节。
- en: '[[5](#id8)]'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[[5](#id8)]'
- en: '[Backward Differentiation Formula](https://en.wikipedia.org/wiki/Backward_differentiation_formula)
    on Wikipedia.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[反向差分公式](https://zh.wikipedia.org/wiki/%E5%90%8E%E5%90%91%E5%B7%AE%E5%88%86%E5%85%AC%E5%BC%8F)在维基百科上。'
- en: '[[6](#id9)]'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[[6](#id9)]'
- en: L. F. Shampine, M. W. Reichelt, “THE MATLAB ODE SUITE”, SIAM J. SCI. COMPUTE.,
    Vol. 18, No. 1, pp. 1-22, January 1997.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: L. F. Shampine, M. W. Reichelt, “MATLAB ODE套件”，SIAM J. SCI. COMPUTE.，第 18 卷，第
    1 期，pp. 1-22，1997年。
- en: '[[7](#id10)]'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[[7](#id10)]'
- en: A. C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE Solvers,” IMACS
    Transactions on Scientific Computation, Vol 1., pp. 55-64, 1983.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: A. C. Hindmarsh, “ODEPACK，一组系统化的常微分方程求解器”，IMACS科学计算交易，第 1 卷，pp. 55-64，1983年。
- en: '[[8](#id11)]'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[[8](#id11)]'
- en: L. Petzold, “Automatic selection of methods for solving stiff and nonstiff systems
    of ordinary differential equations”, SIAM Journal on Scientific and Statistical
    Computing, Vol. 4, No. 1, pp. 136-148, 1983.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: L. Petzold, “自动选择求解刚性和非刚性常微分方程方法”，SIAM科学与统计计算期刊，第 4 卷，第 1 期，pp. 136-148，1983年。
- en: '[[9](#id12)]'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[[9](#id12)]'
- en: '[Stiff equation](https://en.wikipedia.org/wiki/Stiff_equation) on Wikipedia.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[刚性方程](https://zh.wikipedia.org/wiki/%E5%88%9A%E6%80%A7%E6%96%B9%E7%A8%8B)在维基百科上。'
- en: '[[10](#id13)]'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[[10](#id13)]'
- en: A. Curtis, M. J. D. Powell, and J. Reid, “On the estimation of sparse Jacobian
    matrices”, Journal of the Institute of Mathematics and its Applications, 13, pp.
    117-120, 1974.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: A. Curtis, M. J. D. Powell, and J. Reid, “关于稀疏雅可比矩阵估计的研究”，数学应用研究所杂志，第 13 卷，pp.
    117-120，1974年。
- en: '[[11](#id1)]'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[[11](#id1)]'
- en: '[Cauchy-Riemann equations](https://en.wikipedia.org/wiki/Cauchy-Riemann_equations)
    on Wikipedia.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[柯西-黎曼方程](https://zh.wikipedia.org/wiki/%E6%9F%AF%E6%96%AF%E5%8D%8E%E9%87%8C%E6%9B%BC%E6%96%B9%E7%A8%8B)在维基百科上。'
- en: '[[12](#id28)]'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[[12](#id28)]'
- en: '[Lotka-Volterra equations](https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations)
    on Wikipedia.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[Lotka-Volterra方程组](https://zh.wikipedia.org/wiki/Lotka%E2%80%93Volterra%E6%96%B9%E7%A8%8B)在维基百科上。'
- en: '[[13](#id5)]'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[[13](#id5)]'
- en: 'E. Hairer, S. P. Norsett G. Wanner, “Solving Ordinary Differential Equations
    I: Nonstiff Problems”, Sec. II.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: E. Hairer, S. P. Norsett G. Wanner, “求解普通微分方程 I：非刚性问题”，第 II 节。
- en: '[[14](#id6)]'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[[14](#id6)]'
- en: '[Page with original Fortran code of DOP853](http://www.unige.ch/~hairer/software.html).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[DOP853的原始Fortran代码页面](http://www.unige.ch/~hairer/software.html)。'
- en: Examples
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: Basic exponential decay showing automatically chosen time points.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示自动选择时间点的基本指数衰减。
- en: '[PRE2]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Specifying points where the solution is desired.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 指定希望获得解的点。
- en: '[PRE3]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Cannon fired upward with terminal event upon impact. The `terminal` and `direction`
    fields of an event are applied by monkey patching a function. Here `y[0]` is position
    and `y[1]` is velocity. The projectile starts at position 0 with velocity +10\.
    Note that the integration never reaches t=100 because the event is terminal.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 炮弹向上发射，撞击时有终端事件。通过猴子修补一个函数来应用事件的`terminal`和`direction`字段。这里的`y[0]`是位置，`y[1]`是速度。抛射物从位置0以+10的速度开始。注意，积分从未达到t=100，因为事件是终端的。
- en: '[PRE4]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use *dense_output* and *events* to find position, which is 100, at the apex
    of the cannonball’s trajectory. Apex is not defined as terminal, so both apex
    and hit_ground are found. There is no information at t=20, so the sol attribute
    is used to evaluate the solution. The sol attribute is returned by setting `dense_output=True`.
    Alternatively, the *y_events* attribute can be used to access the solution at
    the time of the event.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*dense_output*和*events*找到炮弹轨迹顶点的位置，即100。顶点并非终点，因此同时找到顶点和地面触地点。在t=20时没有信息，因此使用sol属性评估解。通过设置`dense_output=True`返回sol属性。另外，*y_events*属性可用于访问事件发生时的解。
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As an example of a system with additional parameters, we’ll implement the Lotka-Volterra
    equations [[12]](#r179348322575-12).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 作为具有额外参数系统的示例，我们将实现Lotka-Volterra方程[[12]](#r179348322575-12)。
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We pass in the parameter values a=1.5, b=1, c=3 and d=1 with the *args* argument.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过*args*参数传入参数值a=1.5, b=1, c=3和d=1。
- en: '[PRE7]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Compute a dense solution and plot it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 计算密集解并绘制。
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![../../_images/scipy-integrate-solve_ivp-1_00_00.png](../Images/887662515b745f1931e450d75657d189.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-integrate-solve_ivp-1_00_00.png](../Images/887662515b745f1931e450d75657d189.png)'
- en: A couple examples of using solve_ivp to solve the differential equation `y'
    = Ay` with complex matrix `A`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 几个使用solve_ivp解决带有复杂矩阵`A`的微分方程`y' = Ay`的示例。
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Solving an IVP with `A` from above and `y` as 3x1 vector:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 用上述`A`和`y`作为3x1向量解决IVP：
- en: '[PRE10]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Solving an IVP with `A` from above with `y` as 3x3 matrix :'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 用上面的`A`解决IVP，其中`y`是3x3矩阵：
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
