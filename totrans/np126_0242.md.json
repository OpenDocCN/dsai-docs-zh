["```py\nclass.__array_ufunc__(ufunc, method, *inputs, **kwargs)\n```", "```py\nclass.__array_function__(func, types, args, kwargs)\n```", "```py\nHANDLED_FUNCTIONS = {}\n\nclass MyArray:\n    def __array_function__(self, func, types, args, kwargs):\n        if func not in HANDLED_FUNCTIONS:\n            return NotImplemented\n        # Note: this allows subclasses that don't override\n        # __array_function__ to handle MyArray objects\n        if not all(issubclass(t, MyArray) for t in types):\n            return NotImplemented\n        return HANDLED_FUNCTIONS[func](*args, **kwargs)\n\ndef implements(numpy_function):\n  \"\"\"Register an __array_function__ implementation for MyArray objects.\"\"\"\n    def decorator(func):\n        HANDLED_FUNCTIONS[numpy_function] = func\n        return func\n    return decorator\n\n@implements(np.concatenate)\ndef concatenate(arrays, axis=0, out=None):\n    ...  # implementation of concatenate for MyArray objects\n\n@implements(np.broadcast_to)\ndef broadcast_to(array, shape):\n    ...  # implementation of broadcast_to for MyArray objects \n```", "```py\nclass.__array_finalize__(obj)\n```", "```py\nclass.__array_prepare__(array, context=None)\n```", "```py\nclass.__array_wrap__(array, context=None)\n```", "```py\nclass.__array_priority__\n```", "```py\nclass.__array__([dtype])\n```", "```py\n>>> a = np.mat('1 2 3; 4 5 3')\n>>> print((a*a.T).I)\n [[ 0.29239766 -0.13450292]\n [-0.13450292  0.08187135]] \n```", "```py\n>>> np.mat([[1,5,10],[1.0,3,4j]])\nmatrix([[  1.+0.j,   5.+0.j,  10.+0.j],\n [  1.+0.j,   3.+0.j,   0.+4.j]]) \n```", "```py\n>>> np.mat(np.random.rand(3,3)).T\nmatrix([[4.17022005e-01, 3.02332573e-01, 1.86260211e-01],\n [7.20324493e-01, 1.46755891e-01, 3.45560727e-01],\n [1.14374817e-04, 9.23385948e-02, 3.96767474e-01]]) \n```", "```py\n>>> a = np.memmap('newfile.dat', dtype=float, mode='w+', shape=1000)\n>>> a[10] = 10.0\n>>> a[30] = 30.0\n>>> del a\n>>> b = np.fromfile('newfile.dat', dtype=float)\n>>> print(b[10], b[30])\n10.0 30.0\n>>> a = np.memmap('newfile.dat', dtype=float)\n>>> print(a[10], a[30])\n10.0 30.0 \n```", "```py\nfor val in myiter:\n    ...\n    some code involving val\n    ... \n```", "```py\nfor i in range(arr.shape[0]):\n    val = arr[i] \n```", "```py\n>>> a = np.arange(24).reshape(3,2,4)+10\n>>> for val in a:\n...     print('item:', val)\nitem: [[10 11 12 13]\n [14 15 16 17]]\nitem: [[18 19 20 21]\n [22 23 24 25]]\nitem: [[26 27 28 29]\n [30 31 32 33]] \n```", "```py\n>>> for i, val in enumerate(a.flat):\n...     if i%5 == 0: print(i, val)\n0 10\n5 15\n10 20\n15 25\n20 30 \n```", "```py\n>>> for i, val in np.ndenumerate(a):\n...     if sum(i)%5 == 0: print(i, val)\n(0, 0, 0) 10\n(1, 1, 3) 25\n(2, 0, 3) 29\n(2, 1, 2) 32 \n```", "```py\n>>> for val in np.broadcast([[1,0],[2,3]],[0,1]):\n...     print(val)\n(1, 0)\n(0, 1)\n(2, 0)\n(3, 1) \n```", "```py\nclass.__array_ufunc__(ufunc, method, *inputs, **kwargs)\n```", "```py\nclass.__array_function__(func, types, args, kwargs)\n```", "```py\nHANDLED_FUNCTIONS = {}\n\nclass MyArray:\n    def __array_function__(self, func, types, args, kwargs):\n        if func not in HANDLED_FUNCTIONS:\n            return NotImplemented\n        # Note: this allows subclasses that don't override\n        # __array_function__ to handle MyArray objects\n        if not all(issubclass(t, MyArray) for t in types):\n            return NotImplemented\n        return HANDLED_FUNCTIONS[func](*args, **kwargs)\n\ndef implements(numpy_function):\n  \"\"\"Register an __array_function__ implementation for MyArray objects.\"\"\"\n    def decorator(func):\n        HANDLED_FUNCTIONS[numpy_function] = func\n        return func\n    return decorator\n\n@implements(np.concatenate)\ndef concatenate(arrays, axis=0, out=None):\n    ...  # implementation of concatenate for MyArray objects\n\n@implements(np.broadcast_to)\ndef broadcast_to(array, shape):\n    ...  # implementation of broadcast_to for MyArray objects \n```", "```py\nclass.__array_finalize__(obj)\n```", "```py\nclass.__array_prepare__(array, context=None)\n```", "```py\nclass.__array_wrap__(array, context=None)\n```", "```py\nclass.__array_priority__\n```", "```py\nclass.__array__([dtype])\n```", "```py\n>>> a = np.mat('1 2 3; 4 5 3')\n>>> print((a*a.T).I)\n [[ 0.29239766 -0.13450292]\n [-0.13450292  0.08187135]] \n```", "```py\n>>> np.mat([[1,5,10],[1.0,3,4j]])\nmatrix([[  1.+0.j,   5.+0.j,  10.+0.j],\n [  1.+0.j,   3.+0.j,   0.+4.j]]) \n```", "```py\n>>> np.mat(np.random.rand(3,3)).T\nmatrix([[4.17022005e-01, 3.02332573e-01, 1.86260211e-01],\n [7.20324493e-01, 1.46755891e-01, 3.45560727e-01],\n [1.14374817e-04, 9.23385948e-02, 3.96767474e-01]]) \n```", "```py\n>>> a = np.memmap('newfile.dat', dtype=float, mode='w+', shape=1000)\n>>> a[10] = 10.0\n>>> a[30] = 30.0\n>>> del a\n>>> b = np.fromfile('newfile.dat', dtype=float)\n>>> print(b[10], b[30])\n10.0 30.0\n>>> a = np.memmap('newfile.dat', dtype=float)\n>>> print(a[10], a[30])\n10.0 30.0 \n```", "```py\nfor val in myiter:\n    ...\n    some code involving val\n    ... \n```", "```py\nfor i in range(arr.shape[0]):\n    val = arr[i] \n```", "```py\n>>> a = np.arange(24).reshape(3,2,4)+10\n>>> for val in a:\n...     print('item:', val)\nitem: [[10 11 12 13]\n [14 15 16 17]]\nitem: [[18 19 20 21]\n [22 23 24 25]]\nitem: [[26 27 28 29]\n [30 31 32 33]] \n```", "```py\n>>> for i, val in enumerate(a.flat):\n...     if i%5 == 0: print(i, val)\n0 10\n5 15\n10 20\n15 25\n20 30 \n```", "```py\n>>> for i, val in np.ndenumerate(a):\n...     if sum(i)%5 == 0: print(i, val)\n(0, 0, 0) 10\n(1, 1, 3) 25\n(2, 0, 3) 29\n(2, 1, 2) 32 \n```", "```py\n>>> for val in np.broadcast([[1,0],[2,3]],[0,1]):\n...     print(val)\n(1, 0)\n(0, 1)\n(2, 0)\n(3, 1) \n```", "```py\nfor i in range(arr.shape[0]):\n    val = arr[i] \n```", "```py\n>>> a = np.arange(24).reshape(3,2,4)+10\n>>> for val in a:\n...     print('item:', val)\nitem: [[10 11 12 13]\n [14 15 16 17]]\nitem: [[18 19 20 21]\n [22 23 24 25]]\nitem: [[26 27 28 29]\n [30 31 32 33]] \n```", "```py\n>>> for i, val in enumerate(a.flat):\n...     if i%5 == 0: print(i, val)\n0 10\n5 15\n10 20\n15 25\n20 30 \n```", "```py\n>>> for i, val in np.ndenumerate(a):\n...     if sum(i)%5 == 0: print(i, val)\n(0, 0, 0) 10\n(1, 1, 3) 25\n(2, 0, 3) 29\n(2, 1, 2) 32 \n```", "```py\n>>> for val in np.broadcast([[1,0],[2,3]],[0,1]):\n...     print(val)\n(1, 0)\n(0, 1)\n(2, 0)\n(3, 1) \n```"]