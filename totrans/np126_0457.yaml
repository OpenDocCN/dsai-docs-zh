- en: Data type routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.dtype.html](https://numpy.org/doc/1.26/reference/routines.dtype.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`can_cast`](generated/numpy.can_cast.html#numpy.can_cast "numpy.can_cast")(from_, to[, casting])
    | Returns True if cast between data types can occur according to the casting rule.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`promote_types`](generated/numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types")(type1, type2) | Returns the data type with the smallest
    size and smallest scalar kind to which both `type1` and `type2` may be safely
    cast. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min_scalar_type`](generated/numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type")(a, /) | For scalar `a`, returns the data type with the
    smallest size and smallest scalar kind which can hold its value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`result_type`](generated/numpy.result_type.html#numpy.result_type "numpy.result_type")(*arrays_and_dtypes)
    | Returns the type that results from applying the NumPy type promotion rules to
    the arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`common_type`](generated/numpy.common_type.html#numpy.common_type "numpy.common_type")(*arrays)
    | Return a scalar type which is common to the input arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`obj2sctype`](generated/numpy.obj2sctype.html#numpy.obj2sctype "numpy.obj2sctype")(rep[, default])
    | Return the scalar dtype or NumPy equivalent of Python type of an object. |'
  prefs: []
  type: TYPE_TB
- en: Creating data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser")(formats, names, titles[, ...]) | Class to convert formats,
    names, titles description to a dtype. |'
  prefs: []
  type: TYPE_TB
- en: Data type information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`finfo`](generated/numpy.finfo.html#numpy.finfo "numpy.finfo")(dtype) |
    Machine limits for floating point types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iinfo`](generated/numpy.iinfo.html#numpy.iinfo "numpy.iinfo")(type) | Machine
    limits for integer types. |'
  prefs: []
  type: TYPE_TB
- en: Data type testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`issctype`](generated/numpy.issctype.html#numpy.issctype "numpy.issctype")(rep)
    | Determines whether the given object represents a scalar data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubdtype`](generated/numpy.issubdtype.html#numpy.issubdtype "numpy.issubdtype")(arg1, arg2)
    | Returns True if first argument is a typecode lower/equal in type hierarchy.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubsctype`](generated/numpy.issubsctype.html#numpy.issubsctype "numpy.issubsctype")(arg1, arg2)
    | Determine if the first argument is a subclass of the second argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubclass_`](generated/numpy.issubclass_.html#numpy.issubclass_ "numpy.issubclass_")(arg1, arg2)
    | Determine if a class is a subclass of a second class. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_common_type`](generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type")(array_types, scalar_types) | Determine common type following
    standard coercion rules. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`typename`](generated/numpy.typename.html#numpy.typename "numpy.typename")(char)
    | Return a description for the given data type code. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sctype2char`](generated/numpy.sctype2char.html#numpy.sctype2char "numpy.sctype2char")(sctype)
    | Return the string representation of a scalar dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mintypecode`](generated/numpy.mintypecode.html#numpy.mintypecode "numpy.mintypecode")(typechars[, typeset, default])
    | Return the character for the minimum-size type to which given types can be safely
    cast. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum_sctype`](generated/numpy.maximum_sctype.html#numpy.maximum_sctype
    "numpy.maximum_sctype")(t) | Return the scalar type of highest precision of the
    same kind as the input. |'
  prefs: []
  type: TYPE_TB
- en: Creating data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser")(formats, names, titles[, ...]) | Class to convert formats,
    names, titles description to a dtype. |'
  prefs: []
  type: TYPE_TB
- en: Data type information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`finfo`](generated/numpy.finfo.html#numpy.finfo "numpy.finfo")(dtype) |
    Machine limits for floating point types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iinfo`](generated/numpy.iinfo.html#numpy.iinfo "numpy.iinfo")(type) | Machine
    limits for integer types. |'
  prefs: []
  type: TYPE_TB
- en: Data type testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`issctype`](generated/numpy.issctype.html#numpy.issctype "numpy.issctype")(rep)
    | Determines whether the given object represents a scalar data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubdtype`](generated/numpy.issubdtype.html#numpy.issubdtype "numpy.issubdtype")(arg1, arg2)
    | Returns True if first argument is a typecode lower/equal in type hierarchy.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubsctype`](generated/numpy.issubsctype.html#numpy.issubsctype "numpy.issubsctype")(arg1, arg2)
    | Determine if the first argument is a subclass of the second argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`issubclass_`](generated/numpy.issubclass_.html#numpy.issubclass_ "numpy.issubclass_")(arg1, arg2)
    | Determine if a class is a subclass of a second class. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_common_type`](generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type")(array_types, scalar_types) | Determine common type following
    standard coercion rules. |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`typename`](generated/numpy.typename.html#numpy.typename "numpy.typename")(char)
    | Return a description for the given data type code. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sctype2char`](generated/numpy.sctype2char.html#numpy.sctype2char "numpy.sctype2char")(sctype)
    | Return the string representation of a scalar dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mintypecode`](generated/numpy.mintypecode.html#numpy.mintypecode "numpy.mintypecode")(typechars[, typeset, default])
    | Return the character for the minimum-size type to which given types can be safely
    cast. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum_sctype`](generated/numpy.maximum_sctype.html#numpy.maximum_sctype
    "numpy.maximum_sctype")(t) | Return the scalar type of highest precision of the
    same kind as the input. |'
  prefs: []
  type: TYPE_TB
