["```py\nscipy.integrate.qmc_quad(func, a, b, *, n_estimates=8, n_points=1024, qrng=None, log=False)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> dim = 8\n>>> mean = np.zeros(dim)\n>>> cov = np.eye(dim)\n>>> def func(x):\n...     # `multivariate_normal` expects the _last_ axis to correspond with\n...     # the dimensionality of the space, so `x` must be transposed\n...     return stats.multivariate_normal.pdf(x.T, mean, cov) \n```", "```py\n>>> from scipy.integrate import qmc_quad\n>>> a = np.zeros(dim)\n>>> b = np.ones(dim)\n>>> rng = np.random.default_rng()\n>>> qrng = stats.qmc.Halton(d=dim, seed=rng)\n>>> n_estimates = 8\n>>> res = qmc_quad(func, a, b, n_estimates=n_estimates, qrng=qrng)\n>>> res.integral, res.standard_error\n(0.00018429555666024108, 1.0389431116001344e-07) \n```", "```py\n>>> t = stats.t(df=n_estimates-1, loc=res.integral,\n...             scale=res.standard_error)\n>>> t.interval(0.99)\n(0.0001839319802536469, 0.00018465913306683527) \n```", "```py\n>>> stats.multivariate_normal.cdf(b, mean, cov, lower_limit=a)\n0.00018430867675187443 \n```"]