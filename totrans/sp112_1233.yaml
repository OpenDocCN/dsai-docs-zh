- en: scipy.stats.bernoulli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Bernoulli discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`bernoulli`](#scipy.stats.bernoulli "scipy.stats.bernoulli")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability mass function for [`bernoulli`](#scipy.stats.bernoulli "scipy.stats.bernoulli")
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(k) = \begin{cases}1-p &\text{if } k = 0\\ p &\text{if } k =
    1\end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(k\) in \(\{0, 1\}\), \(0 \leq p \leq 1\)
  prefs: []
  type: TYPE_NORMAL
- en: '[`bernoulli`](#scipy.stats.bernoulli "scipy.stats.bernoulli") takes \(p\) as
    shape parameter, where \(p\) is the probability of a single success and \(1-p\)
    is the probability of a single failure.'
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `bernoulli.pmf(k, p,
    loc)` is identically equivalent to `bernoulli.pmf(k - loc, p)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-bernoulli-1_00_00.png](../Images/9d5ccdcb74c0855250b7cc4a272edc71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(p, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, p, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, p, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, p, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, p, loc=0)** | Log of the cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, p, loc=0)** | Survival function (also defined as `1 - cdf`, but *sf*
    is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, p, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, p, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, p, loc=0)** | Inverse survival function (inverse of `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(p, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(p, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(p,), loc=0, lb=None, ub=None, conditional=False)** |
    Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(p, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(p, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(p, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(p, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, p, loc=0)** | Confidence interval with equal areas
    around the median. |'
  prefs: []
  type: TYPE_TB
