["```py\nscipy.signal.istft(Zxx, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, input_onesided=True, boundary=True, time_axis=-1, freq_axis=-2, scaling='spectrum')\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> fs = 1024\n>>> N = 10*fs\n>>> nperseg = 512\n>>> amp = 2 * np.sqrt(2)\n>>> noise_power = 0.001 * fs / 2\n>>> time = np.arange(N) / float(fs)\n>>> carrier = amp * np.sin(2*np.pi*50*time)\n>>> noise = rng.normal(scale=np.sqrt(noise_power),\n...                    size=time.shape)\n>>> x = carrier + noise \n```", "```py\n>>> f, t, Zxx = signal.stft(x, fs=fs, nperseg=nperseg)\n>>> plt.figure()\n>>> plt.pcolormesh(t, f, np.abs(Zxx), vmin=0, vmax=amp, shading='gouraud')\n>>> plt.ylim([f[1], f[-1]])\n>>> plt.title('STFT Magnitude')\n>>> plt.ylabel('Frequency [Hz]')\n>>> plt.xlabel('Time [sec]')\n>>> plt.yscale('log')\n>>> plt.show() \n```", "```py\n>>> Zxx = np.where(np.abs(Zxx) >= amp/10, Zxx, 0)\n>>> _, xrec = signal.istft(Zxx, fs) \n```", "```py\n>>> plt.figure()\n>>> plt.plot(time, x, time, xrec, time, carrier)\n>>> plt.xlim([2, 2.1])\n>>> plt.xlabel('Time [sec]')\n>>> plt.ylabel('Signal')\n>>> plt.legend(['Carrier + Noise', 'Filtered via STFT', 'True Carrier'])\n>>> plt.show() \n```", "```py\n>>> plt.figure()\n>>> plt.plot(time, x, time, xrec, time, carrier)\n>>> plt.xlim([0, 0.1])\n>>> plt.xlabel('Time [sec]')\n>>> plt.ylabel('Signal')\n>>> plt.legend(['Carrier + Noise', 'Filtered via STFT', 'True Carrier'])\n>>> plt.show() \n```"]