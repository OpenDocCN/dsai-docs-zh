- en: More about Coordinate Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/vector/coordsys.html](https://docs.sympy.org/latest/modules/vector/coordsys.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We will now look at how we can initialize new coordinate systems in [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector"), transformed in user-defined ways with respect to already-existing
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Locating new systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already know that the `origin` property of a `CoordSys3D` corresponds to
    the `Point` instance denoting its origin reference point.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a coordinate system \(N\). Suppose we want to define a new system \(M\),
    whose origin is located at \(\mathbf{3\hat{i} + 4\hat{j} + 5\hat{k}}\) from \(N\)’s
    origin. In other words, the coordinates of \(M\)’s origin from N’s perspective
    happen to be \((3, 4, 5)\). Moreover, this would also mean that the coordinates
    of \(N\)’s origin with respect to \(M\) would be \((-3, -4, -5)\).
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved programmatically as follows -
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is worth noting that \(M\)’s orientation is the same as that of \(N\). This
    means that the rotation matrix of :math: \(N\) with respect to \(M\), and also
    vice versa, is equal to the identity matrix of dimensions 3x3. The `locate_new`
    method initializes a `CoordSys3D` that is only translated in space, not re-oriented,
    relative to the ‘parent’ system.'
  prefs: []
  type: TYPE_NORMAL
- en: Orienting new systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to ‘locating’ new systems, [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector") also allows for initialization of new `CoordSys3D` instances that
    are oriented in user-defined ways with respect to existing systems.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have a coordinate system \(A\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You want to initialize a new coordinate system \(B\), that is rotated with respect
    to \(A\)’s Z-axis by an angle \(\theta\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The orientation is shown in the diagram below:'
  prefs: []
  type: TYPE_NORMAL
- en: <svg class="align-center" width="250" height="250" id="svg3601" version="1.1"
    inkscape:version="0.48.1 r9760" sodipodi:docname="New document 10"><metadata id="metadata3606"><rdf><work
    rdf:about=""><format>image/svg+xml</format></work></rdf></metadata> <g inkscape:label="Layer
    1" inkscape:groupmode="layer" id="layer1" transform="translate(0,-802.36218)"><text
    xml:space="preserve" style="font-size:20px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="34.67466" y="151.96918" id="text3615" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3617" x="34.67466" y="151.96918">A</tspan></text>
    <text xml:space="preserve" style="font-size:20px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="121.14726" y="126.71233" id="text3619" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3621" x="121.14726" y="126.71233">B</tspan></text>
    <text xml:space="preserve" style="font-size:20px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="107.87672" y="963.74915" id="text3631" sodipodi:linespacing="125%"><tspan sodipodi:role="line"
    id="tspan3633" x="107.87672" y="963.74915" style="font-size:14px">θ</tspan></text>
    <text sodipodi:linespacing="125%" id="text3635" y="985.15326" x="48.801373" style="font-size:20px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    xml:space="preserve"><tspan style="font-size:14px" y="985.15326" x="48.801373"
    id="tspan3637" sodipodi:role="line">θ</tspan></text> <text xml:space="preserve"
    style="font-size:16px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="81.763702" y="24.828768" id="text3639" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3641" x="81.763702" y="24.828768">a<tspan style="font-size:65.00091553%;baseline-shift:sub"
    id="tspan3661">z</tspan></tspan><tspan sodipodi:role="line" x="81.763702" y="44.828766"
    id="tspan3643">b<tspan style="font-size:65%;baseline-shift:sub" id="tspan3663">z</tspan></tspan></text>
    <text xml:space="preserve" style="font-size:16px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="13.270548" y="201.62671" id="text3649" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3651" x="13.270548" y="201.62671">a<tspan style="font-size:65%;baseline-shift:sub"
    id="tspan3653">x</tspan></tspan></text> <text xml:space="preserve" style="font-size:16px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="59.503422" y="1010.4102" id="text3655" sodipodi:linespacing="125%"><tspan sodipodi:role="line"
    id="tspan3657" x="59.503422" y="1010.4102">b<tspan style="font-size:65.00091553%;baseline-shift:sub"
    id="tspan3659">x</tspan></tspan></text> <text xml:space="preserve" style="font-size:16px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="157.10616" y="170.37671" id="text3665" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3667" x="157.10616" y="170.37671">a<tspan style="font-size:65%;baseline-shift:sub"
    id="tspan3669">y</tspan></tspan></text> <text xml:space="preserve" style="font-size:16px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:CurrentColor;fill-opacity:1;stroke:none;font-family:Sans"
    x="158.8185" y="139.98288" id="text3671" sodipodi:linespacing="125%" transform="translate(0,802.36218)"><tspan
    sodipodi:role="line" id="tspan3673" x="158.8185" y="139.98288">b<tspan style="font-size:65%;baseline-shift:sub"
    id="tspan3675">y</tspan></tspan></text></g></svg>
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Using a method of CoordSys3D directly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the easiest, cleanest, and hence the recommended way of doing it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This initializes \(B\) with the required orientation information with respect
    to \(A\).
  prefs: []
  type: TYPE_NORMAL
- en: '`CoordSys3D` provides the following direct orientation methods in its API-'
  prefs: []
  type: TYPE_NORMAL
- en: '`orient_new_axis`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`orient_new_body`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`orient_new_space`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`orient_new_quaternion`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please look at the `CoordSys3D` class API given in the docs of this module,
    to know their functionality and required arguments in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Using Orienter(s) and the orient_new method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You would first have to initialize an `AxisOrienter` instance for storing the
    rotation information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And then apply it using the `orient_new` method, to obtain \(B\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`orient_new` also lets you orient new systems using multiple `Orienter` instances,
    provided in an iterable. The rotations/orientations are applied to the new system
    in the order the `Orienter` instances appear in the iterable.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`sympy.vector`](index.html#module-sympy.vector "sympy.vector") API provides
    the following four `Orienter` classes for orientation purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AxisOrienter`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BodyOrienter`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SpaceOrienter`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`QuaternionOrienter`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please refer to the API of the respective classes in the docs of this module
    to know more.
  prefs: []
  type: TYPE_NORMAL
- en: In each of the above examples, the origin of the new coordinate system coincides
    with the origin of the ‘parent’ system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To compute the rotation matrix of any coordinate system with respect to another
    one, use the `rotation_matrix` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Orienting AND Locating new systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What if you want to initialize a new system that is not only oriented in a pre-defined
    way, but also translated with respect to the parent?
  prefs: []
  type: TYPE_NORMAL
- en: Each of the `orient_new_<method of orientation>` methods, as well as the `orient_new`
    method, support a `location` keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: If a `Vector` is supplied as the value for this `kwarg`, the new system’s origin
    is automatically defined to be located at that position vector with respect to
    the parent coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the orientation methods also act as methods to support orientation+ location
    of the new systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: More on the `express` function in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming new system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most general way of creating user-defined system is to use `transformation`
    parameter in `CoordSys3D`. Here we can define any transformation equations. If
    we are interested in some typical curvilinear coordinate system different that
    Cartesian, we can also use some predefined ones. It could be also possible to
    translate or rotate system by setting appropriate transformation equations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In `CoordSys3D` is also dedicated method, `create_new` which works similarly
    to methods like `locate_new`, `orient_new_axis` etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Expression of quantities in different coordinate systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vectors and Dyadics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, the same vector attains different expressions in different
    coordinate systems. In general, the same is true for scalar expressions and dyadic
    tensors.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.vector`](index.html#module-sympy.vector "sympy.vector") supports the
    expression of vector/scalar quantities in different coordinate systems using the
    `express` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For purposes of this section, assume the following initializations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Vector` instances can be expressed in user defined systems using `express`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Apart from `Vector` instances, `express` also supports reexpression of scalars
    (general SymPy `Expr`) and `Dyadic` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '`express` also accepts a second coordinate system for re-expressing `Dyadic`
    instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Coordinate Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The location of a coordinate system’s origin does not affect the re-expression
    of `BaseVector` instances. However, it does affect the way `BaseScalar` instances
    are expressed in different systems.
  prefs: []
  type: TYPE_NORMAL
- en: '`BaseScalar` instances, are coordinate ‘symbols’ meant to denote the variables
    used in the definition of vector/scalar fields in [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector").'
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider the scalar field \(\mathbf{{T}_{N}(x, y, z) = x + y +
    z}\) defined in system \(N\). Thus, at a point with coordinates \((a, b, c)\),
    the value of the field would be \(a + b + c\). Now consider system \(R\), whose
    origin is located at \((1, 2, 3)\) with respect to \(N\) (no change of orientation).
    A point with coordinates \((a, b, c)\) in \(R\) has coordinates \((a + 1, b +
    2, c + 3)\) in \(N\). Therefore, the expression for \(\mathbf{{T}_{N}}\) in \(R\)
    becomes \(\mathbf{{T}_{R}}(x, y, z) = x + y + z + 6\).
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate variables, if present in a vector/scalar/dyadic expression, can also
    be re-expressed in a given coordinate system, by setting the `variables` keyword
    argument of `express` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: The above mentioned example, done programmatically, would look like this -
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Other expression-dependent methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `to_matrix` method of `Vector` and `express_coordinates` method of `Point`
    also return different results depending on the coordinate system being provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
