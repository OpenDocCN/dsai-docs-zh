["```py\npandas.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=False, format=None, exact=_NoDefault.no_default, unit=None, infer_datetime_format=_NoDefault.no_default, origin='unix', cache=True)\n```", "```py\n>>> df = pd.DataFrame({'year': [2015, 2016],\n...                    'month': [2, 3],\n...                    'day': [4, 5]})\n>>> pd.to_datetime(df)\n0   2015-02-04\n1   2016-03-05\ndtype: datetime64[ns] \n```", "```py\n>>> pd.to_datetime(1490195805, unit='s')\nTimestamp('2017-03-22 15:16:45')\n>>> pd.to_datetime(1490195805433502912, unit='ns')\nTimestamp('2017-03-22 15:16:45.433502912') \n```", "```py\n>>> pd.to_datetime([1, 2, 3], unit='D',\n...                origin=pd.Timestamp('1960-01-01'))\nDatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'],\n dtype='datetime64[ns]', freq=None) \n```", "```py\n>>> pd.to_datetime('2018-10-26 12:00:00.0000000011',\n...                format='%Y-%m-%d %H:%M:%S.%f')\nTimestamp('2018-10-26 12:00:00.000000001') \n```", "```py\n>>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\nNaT \n```", "```py\n>>> pd.to_datetime(['2018-10-26 12:00:00', '2018-10-26 13:00:15'])\nDatetimeIndex(['2018-10-26 12:00:00', '2018-10-26 13:00:15'],\n dtype='datetime64[ns]', freq=None) \n```", "```py\n>>> pd.to_datetime(['2018-10-26 12:00 -0500', '2018-10-26 13:00 -0500'])\nDatetimeIndex(['2018-10-26 12:00:00-05:00', '2018-10-26 13:00:00-05:00'],\n dtype='datetime64[ns, UTC-05:00]', freq=None) \n```", "```py\n>>> pd.to_datetime(['2020-10-25 02:00 +0200',\n...                 '2020-10-25 04:00 +0100'])  \nFutureWarning: In a future version of pandas, parsing datetimes with mixed\ntime zones will raise an error unless `utc=True`. Please specify `utc=True`\nto opt in to the new behaviour and silence this warning. To create a `Series`\nwith mixed offsets and `object` dtype, please use `apply` and\n`datetime.datetime.strptime`.\nIndex([2020-10-25 02:00:00+02:00, 2020-10-25 04:00:00+01:00],\n dtype='object') \n```", "```py\n>>> from datetime import datetime\n>>> pd.to_datetime([\"2020-01-01 01:00:00-01:00\",\n...                 datetime(2020, 1, 1, 3, 0)])  \nFutureWarning: In a future version of pandas, parsing datetimes with mixed\ntime zones will raise an error unless `utc=True`. Please specify `utc=True`\nto opt in to the new behaviour and silence this warning. To create a `Series`\nwith mixed offsets and `object` dtype, please use `apply` and\n`datetime.datetime.strptime`.\nIndex([2020-01-01 01:00:00-01:00, 2020-01-01 03:00:00], dtype='object') \n```", "```py\n>>> pd.to_datetime(['2018-10-26 12:00', '2018-10-26 13:00'], utc=True)\nDatetimeIndex(['2018-10-26 12:00:00+00:00', '2018-10-26 13:00:00+00:00'],\n dtype='datetime64[ns, UTC]', freq=None) \n```", "```py\n>>> pd.to_datetime(['2018-10-26 12:00 -0530', '2018-10-26 12:00 -0500'],\n...                utc=True)\nDatetimeIndex(['2018-10-26 17:30:00+00:00', '2018-10-26 17:00:00+00:00'],\n dtype='datetime64[ns, UTC]', freq=None) \n```", "```py\n>>> pd.to_datetime(['2018-10-26 12:00', datetime(2020, 1, 1, 18)], utc=True)\nDatetimeIndex(['2018-10-26 12:00:00+00:00', '2020-01-01 18:00:00+00:00'],\n dtype='datetime64[ns, UTC]', freq=None) \n```"]