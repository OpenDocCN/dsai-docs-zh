["```py\n>>> np.datetime64('2005-02-25')\nnumpy.datetime64('2005-02-25') \n```", "```py\n>>> np.datetime64(1, 'Y')\nnumpy.datetime64('1971') \n```", "```py\n>>> np.datetime64('2005-02')\nnumpy.datetime64('2005-02') \n```", "```py\n>>> np.datetime64('2005-02', 'D')\nnumpy.datetime64('2005-02-01') \n```", "```py\n>>> np.datetime64('2005-02-25T03:30')\nnumpy.datetime64('2005-02-25T03:30') \n```", "```py\n>>> np.datetime64('nat')\nnumpy.datetime64('NaT') \n```", "```py\n>>> np.array(['2007-07-13', '2006-01-13', '2010-08-13'], dtype='datetime64')\narray(['2007-07-13', '2006-01-13', '2010-08-13'], dtype='datetime64[D]') \n```", "```py\n>>> np.array(['2001-01-01T12:00', '2002-02-03T13:56:03.172'], dtype='datetime64')\narray(['2001-01-01T12:00:00.000', '2002-02-03T13:56:03.172'],\n dtype='datetime64[ms]') \n```", "```py\n>>> np.array([0, 1577836800], dtype='datetime64[s]')\narray(['1970-01-01T00:00:00', '2020-01-01T00:00:00'],\n dtype='datetime64[s]') \n```", "```py\n>>> np.array([0, 1577836800000]).astype('datetime64[ms]')\narray(['1970-01-01T00:00:00.000', '2020-01-01T00:00:00.000'],\n dtype='datetime64[ms]') \n```", "```py\n>>> np.arange('2005-02', '2005-03', dtype='datetime64[D]')\narray(['2005-02-01', '2005-02-02', '2005-02-03', '2005-02-04',\n '2005-02-05', '2005-02-06', '2005-02-07', '2005-02-08',\n '2005-02-09', '2005-02-10', '2005-02-11', '2005-02-12',\n '2005-02-13', '2005-02-14', '2005-02-15', '2005-02-16',\n '2005-02-17', '2005-02-18', '2005-02-19', '2005-02-20',\n '2005-02-21', '2005-02-22', '2005-02-23', '2005-02-24',\n '2005-02-25', '2005-02-26', '2005-02-27', '2005-02-28'],\n dtype='datetime64[D]') \n```", "```py\n>>> np.datetime64('2005') == np.datetime64('2005-01-01')\nTrue \n```", "```py\n>>> np.datetime64('2010-03-14T15') == np.datetime64('2010-03-14T15:00:00.00')\nTrue \n```", "```py\n>>> np.timedelta64(1, 'D')\nnumpy.timedelta64(1,'D') \n```", "```py\n>>> np.timedelta64(4, 'h')\nnumpy.timedelta64(4,'h') \n```", "```py\n>>> np.timedelta64('nAt')\nnumpy.timedelta64('NaT') \n```", "```py\n>>> np.datetime64('2009-01-01') - np.datetime64('2008-01-01')\nnumpy.timedelta64(366,'D') \n```", "```py\n>>> np.datetime64('2009') + np.timedelta64(20, 'D')\nnumpy.datetime64('2009-01-21') \n```", "```py\n>>> np.datetime64('2011-06-15T00:00') + np.timedelta64(12, 'h')\nnumpy.datetime64('2011-06-15T12:00') \n```", "```py\n>>> np.timedelta64(1,'W') / np.timedelta64(1,'D')\n7.0 \n```", "```py\n>>> np.timedelta64(1,'W') % np.timedelta64(10,'D')\nnumpy.timedelta64(7,'D') \n```", "```py\n>>> np.datetime64('nat') - np.datetime64('2009-01-01')\nnumpy.timedelta64('NaT','D') \n```", "```py\n>>> np.datetime64('2009-01-01') + np.timedelta64('nat')\nnumpy.datetime64('NaT') \n```", "```py\n>>> a = np.timedelta64(1, 'Y') \n```", "```py\n>>> np.timedelta64(a, 'M')\nnumpy.timedelta64(12,'M') \n```", "```py\n>>> np.timedelta64(a, 'D')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Cannot cast NumPy timedelta64 scalar from metadata [Y] to [D] according to the rule 'same_kind' \n```", "```py\n>>> np.busday_offset('2011-06-23', 1)\nnumpy.datetime64('2011-06-24') \n```", "```py\n>>> np.busday_offset('2011-06-23', 2)\nnumpy.datetime64('2011-06-27') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Non-business day date in busday_offset \n```", "```py\n>>> np.busday_offset('2011-06-25', 0, roll='forward')\nnumpy.datetime64('2011-06-27') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2, roll='forward')\nnumpy.datetime64('2011-06-29') \n```", "```py\n>>> np.busday_offset('2011-06-25', 0, roll='backward')\nnumpy.datetime64('2011-06-24') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2, roll='backward')\nnumpy.datetime64('2011-06-28') \n```", "```py\n>>> np.busday_offset('2011-03-20', 0, roll='forward')\nnumpy.datetime64('2011-03-21')\n>>> np.busday_offset('2011-03-22', 0, roll='forward')\nnumpy.datetime64('2011-03-22') \n```", "```py\n>>> np.busday_offset('2011-03-20', 1, roll='backward')\nnumpy.datetime64('2011-03-21')\n>>> np.busday_offset('2011-03-22', 1, roll='backward')\nnumpy.datetime64('2011-03-23') \n```", "```py\n>>> np.busday_offset('2012-05', 1, roll='forward', weekmask='Sun')\nnumpy.datetime64('2012-05-13') \n```", "```py\n>>> np.is_busday(np.datetime64('2011-07-15'))  # a Friday\nTrue\n>>> np.is_busday(np.datetime64('2011-07-16')) # a Saturday\nFalse\n>>> np.is_busday(np.datetime64('2011-07-16'), weekmask=\"Sat Sun\")\nTrue\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.is_busday(a)\narray([ True,  True,  True,  True,  True, False, False]) \n```", "```py\n>>> np.busday_count(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n5\n>>> np.busday_count(np.datetime64('2011-07-18'), np.datetime64('2011-07-11'))\n-5 \n```", "```py\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.count_nonzero(np.is_busday(a))\n5 \n```", "```py\n# Positional sequences; positions are Monday through Sunday.\n# Length of the sequence must be exactly 7.\nweekmask = [1, 1, 1, 1, 1, 0, 0]\n# list or other sequence; 0 == invalid day, 1 == valid day\nweekmask = \"1111100\"\n# string '0' == invalid day, '1' == valid day\n\n# string abbreviations from this list: Mon Tue Wed Thu Fri Sat Sun\nweekmask = \"Mon Tue Wed Thu Fri\"\n# any amount of whitespace is allowed; abbreviations are case-sensitive.\nweekmask = \"MonTue Wed  Thu\\tFri\" \n```", "```py\n    >>> np.datetime64(\"2016-12-31 23:59:60.450\")\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ValueError: Seconds out of range in datetime string \"2016-12-31 23:59:60.450\" \n    ```", "```py\n    >>> (\n    ...   np.datetime64(\"2021-01-01 12:56:23.423\")\n    ...   - np.datetime64(\"2001-01-01\")\n    ... ) / np.timedelta64(1, \"s\")\n    631198583.423 \n    ```", "```py\n    >>> a = np.datetime64(\"0000-01-01\", \"us\")\n    >>> b = np.datetime64(\"1600-01-01\", \"us\")\n    >>> b - a\n    numpy.timedelta64(50491123200000000,'us') \n    ```", "```py\n>>> np.datetime64('2005-02-25')\nnumpy.datetime64('2005-02-25') \n```", "```py\n>>> np.datetime64(1, 'Y')\nnumpy.datetime64('1971') \n```", "```py\n>>> np.datetime64('2005-02')\nnumpy.datetime64('2005-02') \n```", "```py\n>>> np.datetime64('2005-02', 'D')\nnumpy.datetime64('2005-02-01') \n```", "```py\n>>> np.datetime64('2005-02-25T03:30')\nnumpy.datetime64('2005-02-25T03:30') \n```", "```py\n>>> np.datetime64('nat')\nnumpy.datetime64('NaT') \n```", "```py\n>>> np.array(['2007-07-13', '2006-01-13', '2010-08-13'], dtype='datetime64')\narray(['2007-07-13', '2006-01-13', '2010-08-13'], dtype='datetime64[D]') \n```", "```py\n>>> np.array(['2001-01-01T12:00', '2002-02-03T13:56:03.172'], dtype='datetime64')\narray(['2001-01-01T12:00:00.000', '2002-02-03T13:56:03.172'],\n dtype='datetime64[ms]') \n```", "```py\n>>> np.array([0, 1577836800], dtype='datetime64[s]')\narray(['1970-01-01T00:00:00', '2020-01-01T00:00:00'],\n dtype='datetime64[s]') \n```", "```py\n>>> np.array([0, 1577836800000]).astype('datetime64[ms]')\narray(['1970-01-01T00:00:00.000', '2020-01-01T00:00:00.000'],\n dtype='datetime64[ms]') \n```", "```py\n>>> np.arange('2005-02', '2005-03', dtype='datetime64[D]')\narray(['2005-02-01', '2005-02-02', '2005-02-03', '2005-02-04',\n '2005-02-05', '2005-02-06', '2005-02-07', '2005-02-08',\n '2005-02-09', '2005-02-10', '2005-02-11', '2005-02-12',\n '2005-02-13', '2005-02-14', '2005-02-15', '2005-02-16',\n '2005-02-17', '2005-02-18', '2005-02-19', '2005-02-20',\n '2005-02-21', '2005-02-22', '2005-02-23', '2005-02-24',\n '2005-02-25', '2005-02-26', '2005-02-27', '2005-02-28'],\n dtype='datetime64[D]') \n```", "```py\n>>> np.datetime64('2005') == np.datetime64('2005-01-01')\nTrue \n```", "```py\n>>> np.datetime64('2010-03-14T15') == np.datetime64('2010-03-14T15:00:00.00')\nTrue \n```", "```py\n>>> np.timedelta64(1, 'D')\nnumpy.timedelta64(1,'D') \n```", "```py\n>>> np.timedelta64(4, 'h')\nnumpy.timedelta64(4,'h') \n```", "```py\n>>> np.timedelta64('nAt')\nnumpy.timedelta64('NaT') \n```", "```py\n>>> np.datetime64('2009-01-01') - np.datetime64('2008-01-01')\nnumpy.timedelta64(366,'D') \n```", "```py\n>>> np.datetime64('2009') + np.timedelta64(20, 'D')\nnumpy.datetime64('2009-01-21') \n```", "```py\n>>> np.datetime64('2011-06-15T00:00') + np.timedelta64(12, 'h')\nnumpy.datetime64('2011-06-15T12:00') \n```", "```py\n>>> np.timedelta64(1,'W') / np.timedelta64(1,'D')\n7.0 \n```", "```py\n>>> np.timedelta64(1,'W') % np.timedelta64(10,'D')\nnumpy.timedelta64(7,'D') \n```", "```py\n>>> np.datetime64('nat') - np.datetime64('2009-01-01')\nnumpy.timedelta64('NaT','D') \n```", "```py\n>>> np.datetime64('2009-01-01') + np.timedelta64('nat')\nnumpy.datetime64('NaT') \n```", "```py\n>>> a = np.timedelta64(1, 'Y') \n```", "```py\n>>> np.timedelta64(a, 'M')\nnumpy.timedelta64(12,'M') \n```", "```py\n>>> np.timedelta64(a, 'D')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Cannot cast NumPy timedelta64 scalar from metadata [Y] to [D] according to the rule 'same_kind' \n```", "```py\n>>> np.busday_offset('2011-06-23', 1)\nnumpy.datetime64('2011-06-24') \n```", "```py\n>>> np.busday_offset('2011-06-23', 2)\nnumpy.datetime64('2011-06-27') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: Non-business day date in busday_offset \n```", "```py\n>>> np.busday_offset('2011-06-25', 0, roll='forward')\nnumpy.datetime64('2011-06-27') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2, roll='forward')\nnumpy.datetime64('2011-06-29') \n```", "```py\n>>> np.busday_offset('2011-06-25', 0, roll='backward')\nnumpy.datetime64('2011-06-24') \n```", "```py\n>>> np.busday_offset('2011-06-25', 2, roll='backward')\nnumpy.datetime64('2011-06-28') \n```", "```py\n>>> np.busday_offset('2011-03-20', 0, roll='forward')\nnumpy.datetime64('2011-03-21')\n>>> np.busday_offset('2011-03-22', 0, roll='forward')\nnumpy.datetime64('2011-03-22') \n```", "```py\n>>> np.busday_offset('2011-03-20', 1, roll='backward')\nnumpy.datetime64('2011-03-21')\n>>> np.busday_offset('2011-03-22', 1, roll='backward')\nnumpy.datetime64('2011-03-23') \n```", "```py\n>>> np.busday_offset('2012-05', 1, roll='forward', weekmask='Sun')\nnumpy.datetime64('2012-05-13') \n```", "```py\n>>> np.is_busday(np.datetime64('2011-07-15'))  # a Friday\nTrue\n>>> np.is_busday(np.datetime64('2011-07-16')) # a Saturday\nFalse\n>>> np.is_busday(np.datetime64('2011-07-16'), weekmask=\"Sat Sun\")\nTrue\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.is_busday(a)\narray([ True,  True,  True,  True,  True, False, False]) \n```", "```py\n>>> np.busday_count(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n5\n>>> np.busday_count(np.datetime64('2011-07-18'), np.datetime64('2011-07-11'))\n-5 \n```", "```py\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.count_nonzero(np.is_busday(a))\n5 \n```", "```py\n# Positional sequences; positions are Monday through Sunday.\n# Length of the sequence must be exactly 7.\nweekmask = [1, 1, 1, 1, 1, 0, 0]\n# list or other sequence; 0 == invalid day, 1 == valid day\nweekmask = \"1111100\"\n# string '0' == invalid day, '1' == valid day\n\n# string abbreviations from this list: Mon Tue Wed Thu Fri Sat Sun\nweekmask = \"Mon Tue Wed Thu Fri\"\n# any amount of whitespace is allowed; abbreviations are case-sensitive.\nweekmask = \"MonTue Wed  Thu\\tFri\" \n```", "```py\n>>> np.is_busday(np.datetime64('2011-07-15'))  # a Friday\nTrue\n>>> np.is_busday(np.datetime64('2011-07-16')) # a Saturday\nFalse\n>>> np.is_busday(np.datetime64('2011-07-16'), weekmask=\"Sat Sun\")\nTrue\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.is_busday(a)\narray([ True,  True,  True,  True,  True, False, False]) \n```", "```py\n>>> np.busday_count(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n5\n>>> np.busday_count(np.datetime64('2011-07-18'), np.datetime64('2011-07-11'))\n-5 \n```", "```py\n>>> a = np.arange(np.datetime64('2011-07-11'), np.datetime64('2011-07-18'))\n>>> np.count_nonzero(np.is_busday(a))\n5 \n```", "```py\n# Positional sequences; positions are Monday through Sunday.\n# Length of the sequence must be exactly 7.\nweekmask = [1, 1, 1, 1, 1, 0, 0]\n# list or other sequence; 0 == invalid day, 1 == valid day\nweekmask = \"1111100\"\n# string '0' == invalid day, '1' == valid day\n\n# string abbreviations from this list: Mon Tue Wed Thu Fri Sat Sun\nweekmask = \"Mon Tue Wed Thu Fri\"\n# any amount of whitespace is allowed; abbreviations are case-sensitive.\nweekmask = \"MonTue Wed  Thu\\tFri\" \n```", "```py\n    >>> np.datetime64(\"2016-12-31 23:59:60.450\")\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ValueError: Seconds out of range in datetime string \"2016-12-31 23:59:60.450\" \n    ```", "```py\n    >>> (\n    ...   np.datetime64(\"2021-01-01 12:56:23.423\")\n    ...   - np.datetime64(\"2001-01-01\")\n    ... ) / np.timedelta64(1, \"s\")\n    631198583.423 \n    ```", "```py\n    >>> a = np.datetime64(\"0000-01-01\", \"us\")\n    >>> b = np.datetime64(\"1600-01-01\", \"us\")\n    >>> b - a\n    numpy.timedelta64(50491123200000000,'us') \n    ```"]