- en: pandas.DatetimeIndex.tz_localize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DatetimeIndex.tz_localize.html](https://pandas.pydata.org/docs/reference/api/pandas.DatetimeIndex.tz_localize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.
  prefs: []
  type: TYPE_NORMAL
- en: This method takes a time zone (tz) naive Datetime Array/Index object and makes
    this time zone aware. It does not move the time to another time zone.
  prefs: []
  type: TYPE_NORMAL
- en: This method can also be used to do the inverse – to create a time zone unaware
    object from an aware object. To that end, pass tz=None.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tz**str, pytz.timezone, dateutil.tz.tzfile, datetime.tzinfo or None'
  prefs: []
  type: TYPE_NORMAL
- en: Time zone to convert timestamps to. Passing `None` will remove the time zone
    information preserving local time.
  prefs: []
  type: TYPE_NORMAL
- en: '**ambiguous**‘infer’, ‘NaT’, bool array, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: When clocks moved backward due to DST, ambiguous times may arise. For example
    in Central European Time (UTC+01), when going from 03:00 DST to 02:00 non-DST,
    02:30:00 local time occurs both at 00:30:00 UTC and at 01:30:00 UTC. In such a
    situation, the ambiguous parameter dictates how ambiguous times should be handled.
  prefs: []
  type: TYPE_NORMAL
- en: ‘infer’ will attempt to infer fall dst-transition hours based on order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bool-ndarray where True signifies a DST time, False signifies a non-DST time
    (note that this flag is only applicable for ambiguous times)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT where there are ambiguous times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an AmbiguousTimeError if there are ambiguous times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nonexistent**‘shift_forward’, ‘shift_backward, ‘NaT’, timedelta, default
    ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: A nonexistent time does not exist in a particular timezone where clocks moved
    forward due to DST.
  prefs: []
  type: TYPE_NORMAL
- en: ‘shift_forward’ will shift the nonexistent time forward to the closest existing
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘shift_backward’ will shift the nonexistent time backward to the closest existing
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT where there are nonexistent times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timedelta objects will shift nonexistent times by the timedelta
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an NonExistentTimeError if there are nonexistent times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Same type as self
  prefs: []
  type: TYPE_NORMAL
- en: Array/Index converted to the specified time zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If the Datetime Array/Index is tz-aware and tz is not None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DatetimeIndex.tz_convert`](pandas.DatetimeIndex.tz_convert.html#pandas.DatetimeIndex.tz_convert
    "pandas.DatetimeIndex.tz_convert")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert tz-aware DatetimeIndex from one time zone to another.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Localize DatetimeIndex in US/Eastern time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `tz=None`, we can remove the time zone information while keeping the
    local time (not converted to UTC):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Be careful with DST changes. When there is sequential data, pandas can infer
    the DST time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In some cases, inferring the DST is impossible. In such cases, you can pass
    an ndarray to the ambiguous parameter to set the DST explicitly
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the DST transition causes nonexistent times, you can shift these dates forward
    or backwards with a timedelta object or ‘shift_forward’ or ‘shift_backwards’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
