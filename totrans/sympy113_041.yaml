- en: Solve Output by Type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/explanation/solve_output.html](https://docs.sympy.org/latest/explanation/solve_output.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The output of the [`solve()`](../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") function can seem very unwieldy since it may appear
    to arbitrarily return one of six different types of output (in addition to raising
    errors). The reasons for this are historical and are biased toward human interaction
    rather than programmatic use. The type of output will depend on the type of equation(s)
    (and how they are entered) and the number of symbols that are provided (and how
    they are provided).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The [`solve()`](../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") function attempts to find all values for as many
    symbols as possible that will make each expression given equal to zero. The format
    of the output can be controlled by using the `dict` or `set` keyword:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following discussion provides an explanation for the output obtained when
    not using those keywords.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Empty List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When there is no solution, an empty list is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: List Of Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of values is given when the symbol to solve for was unambiguous in context
    because a) the equation was univariate or b) a single symbol was specified as
    being of interest.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Single Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A single dictionary with keys being symbols and values being the solutions
    for those symbols is the result when equations are passed as a list and are all
    linear in the symbols given. Note: such a system is automatically generated for
    a single equation (not passed as a list) if there is an undetermined-coefficients
    solution for the symbols specified. If this is not what was intended, then pass
    the expression in a list.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: List of Tuples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each tuple in the list gives a solution for the symbols in the order they were
    given. This format is used when a) a list of equations contains at least one nonlinear
    equation or b) a list of symbols is given in a well defined order. (This is also
    the format for the tuples in the set returned when using the flag `set=True`.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: List of Dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of dictionaries is returned when the expression was not univariate
    or there was a nonlinear expression in a list *and* the order of symbols would
    otherwise be ambiguous because a) no symbols were passed or b) the symbols were
    passed as a set. (This is also the format selected with `dict=True`.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The dictionaries only contain values that are distinct from the keys. In the
    last example above, there is no key for `z` in the dictionary since only *two*
    of the three equations were insufficient to determine its value. These solutions
    can be used to eliminate those variables from the third equation, however, to
    give a relationship in a single variable that can be solved (perhaps numerically)
    to obtain a full solution with the advantage of only needing to guess a single
    value instead of three.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Boolean or Relational
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A boolean expression is returned when a relational expression other than an
    [`Equality`](../modules/core.html#sympy.core.relational.Equality "sympy.core.relational.Equality")
    is given as an expression to solve. A single \(Equality\) or a more complicated
    relational expression might be returned. The use of [`solve()`](../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") here is equivalent to passing the equation set
    and symbols to [`reduce_inequalities()`](../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") (and `dict`, `set`, and `check`
    flags are ignored).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Any returned \(Equality\) can be converted to a dictionary:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
