- en: scipy.sparse.random_array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.random_array.html#scipy.sparse.random_array](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.random_array.html#scipy.sparse.random_array)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a sparse array of uniformly random numbers in [0, 1)
  prefs: []
  type: TYPE_NORMAL
- en: Returns a sparse array with the given shape and density where values are generated
    uniformly randomly in the range [0, 1).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Since numpy 1.17, passing a `np.random.Generator` (e.g. `np.random.default_rng`)
    for `random_state` will lead to much faster execution times.
  prefs: []
  type: TYPE_NORMAL
- en: A much slower implementation is used by default for backwards compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**int or tuple of ints'
  prefs: []
  type: TYPE_NORMAL
- en: shape of the array
  prefs: []
  type: TYPE_NORMAL
- en: '**density**real, optional (default: 0.01)'
  prefs: []
  type: TYPE_NORMAL
- en: 'density of the generated matrix: density equal to one means a full matrix,
    density of 0 means a matrix with no non-zero items.'
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str, optional (default: ‘coo’)'
  prefs: []
  type: TYPE_NORMAL
- en: sparse matrix format.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional (default: np.float64)'
  prefs: []
  type: TYPE_NORMAL
- en: type of the returned matrix values.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, *Generator*, *RandomState*}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A random number generator to determine nonzero structure. We recommend using
    a [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)") manually provided for every call as it is much faster
    than RandomState.
  prefs: []
  type: TYPE_NORMAL
- en: If *None* (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an int, a new `Generator` instance is used, seeded with the int.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `Generator` or `RandomState` instance then that instance is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This random state will be used for sampling *indices* (the sparsity structure),
    and by default for the data values too (see *data_sampler*).
  prefs: []
  type: TYPE_NORMAL
- en: '**data_sampler**callable, optional (default depends on dtype)'
  prefs: []
  type: TYPE_NORMAL
- en: Sampler of random data values with keyword arg *size*. This function should
    take a single keyword argument *size* specifying the length of its returned ndarray.
    It is used to generate the nonzero values in the matrix after the locations of
    those values are chosen. By default, uniform [0, 1) random values are used unless
    *dtype* is an integer (default uniform integers from that dtype) or complex (default
    uniform over the unit square in the complex plane). For these, the *random_state*
    rng is used e.g. *rng.uniform(size=size)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**sparse array'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing a `np.random.Generator` instance for better performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Default sampling uniformly from [0, 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Providing a sampler for the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Building a custom distribution. This example builds a squared normal from np.random:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can build it from sp.stats style rvs functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can subclass sp.stats rv_continous or rv_discrete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
