- en: scipy.stats.boxcox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.boxcox.html#scipy.stats.boxcox](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.boxcox.html#scipy.stats.boxcox)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a dataset transformed by a Box-Cox power transformation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Input array to be transformed.
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is not None, this is an alias of [`scipy.special.boxcox`](scipy.special.boxcox.html#scipy.special.boxcox
    "scipy.special.boxcox"). Returns nan if `x < 0`; returns -inf if `x == 0 and lmbda
    < 0`.
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is None, array must be positive, 1-dimensional, and non-constant.
  prefs: []
  type: TYPE_NORMAL
- en: '**lmbda**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is None (default), find the value of *lmbda* that maximizes the log-likelihood
    function and return it as the second output argument.
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is not None, do the transformation for that value.
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is None and [`alpha`](scipy.stats.alpha.html#scipy.stats.alpha "scipy.stats.alpha")
    is not None (default), return the `100 * (1-alpha)%` confidence interval for *lmbda*
    as the third output argument. Must be between 0.0 and 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is not None, [`alpha`](scipy.stats.alpha.html#scipy.stats.alpha "scipy.stats.alpha")
    is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**optimizer**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'If *lmbda* is None, *optimizer* is the scalar optimizer used to find the value
    of *lmbda* that minimizes the negative log-likelihood function. *optimizer* is
    a callable that accepts one argument:'
  prefs: []
  type: TYPE_NORMAL
- en: funcallable
  prefs: []
  type: TYPE_NORMAL
- en: The objective function, which evaluates the negative log-likelihood function
    at a provided value of *lmbda*
  prefs: []
  type: TYPE_NORMAL
- en: and returns an object, such as an instance of [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult"), which holds the optimal value of *lmbda* in
    an attribute *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See the example in [`boxcox_normmax`](scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax
    "scipy.stats.boxcox_normmax") or the documentation of [`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") for more information.
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* is not None, *optimizer* is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boxcox**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Box-Cox power transformed array.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxlog**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If the *lmbda* parameter is None, the second returned argument is the *lmbda*
    that maximizes the log-likelihood function.
  prefs: []
  type: TYPE_NORMAL
- en: '**(min_ci, max_ci)**tuple of float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *lmbda* parameter is None and [`alpha`](scipy.stats.alpha.html#scipy.stats.alpha
    "scipy.stats.alpha") is not None, this returned tuple of floats represents the
    minimum and maximum confidence limits given [`alpha`](scipy.stats.alpha.html#scipy.stats.alpha
    "scipy.stats.alpha").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`probplot`](scipy.stats.probplot.html#scipy.stats.probplot "scipy.stats.probplot"),
    [`boxcox_normplot`](scipy.stats.boxcox_normplot.html#scipy.stats.boxcox_normplot
    "scipy.stats.boxcox_normplot"), [`boxcox_normmax`](scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax
    "scipy.stats.boxcox_normmax"), [`boxcox_llf`](scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf
    "scipy.stats.boxcox_llf")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The Box-Cox transform is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[`boxcox`](#scipy.stats.boxcox "scipy.stats.boxcox") requires the input data
    to be positive. Sometimes a Box-Cox transformation provides a shift parameter
    to achieve this; [`boxcox`](#scipy.stats.boxcox "scipy.stats.boxcox") does not.
    Such a shift parameter is equivalent to adding a positive constant to *x* before
    calling [`boxcox`](#scipy.stats.boxcox "scipy.stats.boxcox").'
  prefs: []
  type: TYPE_NORMAL
- en: 'The confidence limits returned when [`alpha`](scipy.stats.alpha.html#scipy.stats.alpha
    "scipy.stats.alpha") is provided give the interval where:'
  prefs: []
  type: TYPE_NORMAL
- en: \[llf(\hat{\lambda}) - llf(\lambda) < \frac{1}{2}\chi^2(1 - \alpha, 1),\]
  prefs: []
  type: TYPE_NORMAL
- en: with `llf` the log-likelihood function and \(\chi^2\) the chi-squared function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: G.E.P. Box and D.R. Cox, “An Analysis of Transformations”, Journal of the Royal
    Statistical Society B, 26, 211-252 (1964).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We generate some random variates from a non-normal distribution and make a
    probability plot for it, to show it is non-normal in the tails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We now use [`boxcox`](#scipy.stats.boxcox "scipy.stats.boxcox") to transform
    the data so it’s closest to normal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-boxcox-1.png](../Images/36bdd40db12947b66bf428fcd430c202.png)'
  prefs: []
  type: TYPE_IMG
