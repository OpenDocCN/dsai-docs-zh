- en: scipy.signal.lsim2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lsim2.html#scipy.signal.lsim2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lsim2.html#scipy.signal.lsim2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Simulate output of a continuous-time linear system, by using the ODE solver
    [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.11.0: Function [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2")
    is deprecated in favor of the faster [`lsim`](scipy.signal.lsim.html#scipy.signal.lsim
    "scipy.signal.lsim") function. [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2")
    will be removed in SciPy 1.13.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system**an instance of the [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti") class or a tuple describing the system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following gives the number of elements in the tuple and the interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: (instance of [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2: (num, den)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3: (zeros, poles, gain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4: (A, B, C, D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**U**array_like (1D or 2D), optional'
  prefs: []
  type: TYPE_NORMAL
- en: An input array describing the input at each time T. Linear interpolation is
    used between given times. If there are multiple inputs, then each column of the
    rank-2 array represents an input. If U is not given, the input is assumed to be
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: '**T**array_like (1D or 2D), optional'
  prefs: []
  type: TYPE_NORMAL
- en: The time steps at which the input is defined and at which the output is desired.
    The default is 101 evenly spaced points on the interval [0,10.0].
  prefs: []
  type: TYPE_NORMAL
- en: '**X0**array_like (1D), optional'
  prefs: []
  type: TYPE_NORMAL
- en: The initial condition of the state vector. If *X0* is not given, the initial
    conditions are assumed to be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**dict'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword arguments are passed on to the function *odeint*. See the
    notes below for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**T**1D ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The time values for the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**yout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The response of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '**xout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The time-evolution of the state-vector.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lsim`](scipy.signal.lsim.html#scipy.signal.lsim "scipy.signal.lsim")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function uses [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") to solve the system’s differential equations. Additional
    keyword arguments given to [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2")
    are passed on to [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint"). See the documentation for [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") for the full list of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: As [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2") is now deprecated, users
    are advised to switch to the faster and more accurate [`lsim`](scipy.signal.lsim.html#scipy.signal.lsim
    "scipy.signal.lsim") function. Keyword arguments for [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint") are not supported in [`lsim`](scipy.signal.lsim.html#scipy.signal.lsim
    "scipy.signal.lsim"), but not needed in general.
  prefs: []
  type: TYPE_NORMAL
- en: If (num, den) is passed in for `system`, coefficients for both the numerator
    and denominator should be specified in descending exponent order (e.g. `s^2 +
    3s + 5` would be represented as `[1, 3, 5]`).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2") to simulate an
    analog Bessel filter applied to a signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a low-pass Bessel filter with a cutoff of 12 Hz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Generate data to which the filter is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The input signal is the sum of three sinusoidal curves, with frequencies 4 Hz,
    40 Hz, and 80 Hz. The filter should mostly eliminate the 40 Hz and 80 Hz components,
    leaving just the 4 Hz signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Simulate the filter with [`lsim2`](#scipy.signal.lsim2 "scipy.signal.lsim2").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plot the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-lsim2-1_00_00.png](../Images/9322493e7ccc73e573bb75cb6a952644.png)'
  prefs: []
  type: TYPE_IMG
- en: In a second example, we simulate a double integrator `y'' = u`, with a constant
    input `u = 1`. We’ll use the state space representation of the integrator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*t* and *u* define the time and input signal for the system to be simulated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Compute the simulation, and then plot *y*. As expected, the plot shows the curve
    `y = 0.5*t**2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-lsim2-1_01_00.png](../Images/22cf7753f13075ff8963f5a1aa87e83e.png)'
  prefs: []
  type: TYPE_IMG
