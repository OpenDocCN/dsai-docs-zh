["```py\nIn [1]: arr = np.random.randn(10)\n\nIn [2]: arr[2:-2] = np.nan\n\nIn [3]: ts = pd.Series(pd.arrays.SparseArray(arr))\n\nIn [4]: ts\nOut[4]: \n0    0.469112\n1   -0.282863\n2         NaN\n3         NaN\n4         NaN\n5         NaN\n6         NaN\n7         NaN\n8   -0.861849\n9   -2.104569\ndtype: Sparse[float64, nan] \n```", "```py\nIn [5]: df = pd.DataFrame(np.random.randn(10000, 4))\n\nIn [6]: df.iloc[:9998] = np.nan\n\nIn [7]: sdf = df.astype(pd.SparseDtype(\"float\", np.nan))\n\nIn [8]: sdf.head()\nOut[8]: \n 0    1    2    3\n0  NaN  NaN  NaN  NaN\n1  NaN  NaN  NaN  NaN\n2  NaN  NaN  NaN  NaN\n3  NaN  NaN  NaN  NaN\n4  NaN  NaN  NaN  NaN\n\nIn [9]: sdf.dtypes\nOut[9]: \n0    Sparse[float64, nan]\n1    Sparse[float64, nan]\n2    Sparse[float64, nan]\n3    Sparse[float64, nan]\ndtype: object\n\nIn [10]: sdf.sparse.density\nOut[10]: 0.0002 \n```", "```py\nIn [11]: 'dense : {:0.2f} bytes'.format(df.memory_usage().sum() / 1e3)\nOut[11]: 'dense : 320.13 bytes'\n\nIn [12]: 'sparse: {:0.2f} bytes'.format(sdf.memory_usage().sum() / 1e3)\nOut[12]: 'sparse: 0.22 bytes' \n```", "```py\nIn [13]: arr = np.random.randn(10)\n\nIn [14]: arr[2:5] = np.nan\n\nIn [15]: arr[7:8] = np.nan\n\nIn [16]: sparr = pd.arrays.SparseArray(arr)\n\nIn [17]: sparr\nOut[17]: \n[-1.9556635297215477, -1.6588664275960427, nan, nan, nan, 1.1589328886422277, 0.14529711373305043, nan, 0.6060271905134522, 1.3342113401317768]\nFill: nan\nIntIndex\nIndices: array([0, 1, 5, 6, 8, 9], dtype=int32) \n```", "```py\nIn [18]: np.asarray(sparr)\nOut[18]: \narray([-1.9557, -1.6589,     nan,     nan,     nan,  1.1589,  0.1453,\n nan,  0.606 ,  1.3342]) \n```", "```py\nIn [19]: sparr.dtype\nOut[19]: Sparse[float64, nan] \n```", "```py\nIn [20]: pd.SparseDtype(np.dtype('datetime64[ns]'))\nOut[20]: Sparse[datetime64[ns], numpy.datetime64('NaT')] \n```", "```py\nIn [21]: pd.SparseDtype(np.dtype('datetime64[ns]'),\n ....:               fill_value=pd.Timestamp('2017-01-01'))\n ....: \nOut[21]: Sparse[datetime64[ns], Timestamp('2017-01-01 00:00:00')] \n```", "```py\nIn [22]: pd.array([1, 0, 0, 2], dtype='Sparse[int]')\nOut[22]: \n[1, 0, 0, 2]\nFill: 0\nIntIndex\nIndices: array([0, 3], dtype=int32) \n```", "```py\nIn [23]: s = pd.Series([0, 0, 1, 2], dtype=\"Sparse[int]\")\n\nIn [24]: s.sparse.density\nOut[24]: 0.5\n\nIn [25]: s.sparse.fill_value\nOut[25]: 0 \n```", "```py\nIn [26]: arr = pd.arrays.SparseArray([1., np.nan, np.nan, -2., np.nan])\n\nIn [27]: np.abs(arr)\nOut[27]: \n[1.0, nan, nan, 2.0, nan]\nFill: nan\nIntIndex\nIndices: array([0, 3], dtype=int32) \n```", "```py\nIn [28]: arr = pd.arrays.SparseArray([1., -1, -1, -2., -1], fill_value=-1)\n\nIn [29]: np.abs(arr)\nOut[29]: \n[1, 1, 1, 2.0, 1]\nFill: 1\nIntIndex\nIndices: array([3], dtype=int32)\n\nIn [30]: np.abs(arr).to_dense()\nOut[30]: array([1., 1., 1., 2., 1.]) \n```", "```py\nIn [31]: sdf.sparse.to_dense()\nOut[31]: \n 0         1         2         3\n0          NaN       NaN       NaN       NaN\n1          NaN       NaN       NaN       NaN\n2          NaN       NaN       NaN       NaN\n3          NaN       NaN       NaN       NaN\n4          NaN       NaN       NaN       NaN\n...        ...       ...       ...       ...\n9995       NaN       NaN       NaN       NaN\n9996       NaN       NaN       NaN       NaN\n9997       NaN       NaN       NaN       NaN\n9998  0.509184 -0.774928 -1.369894 -0.382141\n9999  0.280249 -1.648493  1.490865 -0.890819\n\n[10000 rows x 4 columns] \n```", "```py\nIn [32]: dense = pd.DataFrame({\"A\": [1, 0, 0, 1]})\n\nIn [33]: dtype = pd.SparseDtype(int, fill_value=0)\n\nIn [34]: dense.astype(dtype)\nOut[34]: \n A\n0  1\n1  0\n2  0\n3  1 \n```", "```py\nIn [35]: from scipy.sparse import csr_matrix\n\nIn [36]: arr = np.random.random(size=(1000, 5))\n\nIn [37]: arr[arr < .9] = 0\n\nIn [38]: sp_arr = csr_matrix(arr)\n\nIn [39]: sp_arr\nOut[39]: \n<1000x5 sparse matrix of type '<class 'numpy.float64'>'\n with 517 stored elements in Compressed Sparse Row format>\n\nIn [40]: sdf = pd.DataFrame.sparse.from_spmatrix(sp_arr)\n\nIn [41]: sdf.head()\nOut[41]: \n 0  1  2         3  4\n0   0.95638  0  0         0  0\n1         0  0  0         0  0\n2         0  0  0         0  0\n3         0  0  0         0  0\n4  0.999552  0  0  0.956153  0\n\nIn [42]: sdf.dtypes\nOut[42]: \n0    Sparse[float64, 0]\n1    Sparse[float64, 0]\n2    Sparse[float64, 0]\n3    Sparse[float64, 0]\n4    Sparse[float64, 0]\ndtype: object \n```", "```py\nIn [43]: sdf.sparse.to_coo()\nOut[43]: \n<1000x5 sparse matrix of type '<class 'numpy.float64'>'\n with 517 stored elements in COOrdinate format> \n```", "```py\nIn [44]: s = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\n\nIn [45]: s.index = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (1, 2, \"a\", 0),\n ....:        (1, 2, \"a\", 1),\n ....:        (1, 1, \"b\", 0),\n ....:        (1, 1, \"b\", 1),\n ....:        (2, 1, \"b\", 0),\n ....:        (2, 1, \"b\", 1),\n ....:    ],\n ....:    names=[\"A\", \"B\", \"C\", \"D\"],\n ....: )\n ....: \n\nIn [46]: ss = s.astype('Sparse')\n\nIn [47]: ss\nOut[47]: \nA  B  C  D\n1  2  a  0    3.0\n 1    NaN\n 1  b  0    1.0\n 1    3.0\n2  1  b  0    NaN\n 1    NaN\ndtype: Sparse[float64, nan] \n```", "```py\nIn [48]: A, rows, columns = ss.sparse.to_coo(\n ....:    row_levels=[\"A\", \"B\"], column_levels=[\"C\", \"D\"], sort_labels=True\n ....: )\n ....: \n\nIn [49]: A\nOut[49]: \n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [50]: A.todense()\nOut[50]: \nmatrix([[0., 0., 1., 3.],\n [3., 0., 0., 0.],\n [0., 0., 0., 0.]])\n\nIn [51]: rows\nOut[51]: [(1, 1), (1, 2), (2, 1)]\n\nIn [52]: columns\nOut[52]: [('a', 0), ('a', 1), ('b', 0), ('b', 1)] \n```", "```py\nIn [53]: A, rows, columns = ss.sparse.to_coo(\n ....:    row_levels=[\"A\", \"B\", \"C\"], column_levels=[\"D\"], sort_labels=False\n ....: )\n ....: \n\nIn [54]: A\nOut[54]: \n<3x2 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [55]: A.todense()\nOut[55]: \nmatrix([[3., 0.],\n [1., 3.],\n [0., 0.]])\n\nIn [56]: rows\nOut[56]: [(1, 2, 'a'), (1, 1, 'b'), (2, 1, 'b')]\n\nIn [57]: columns\nOut[57]: [(0,), (1,)] \n```", "```py\nIn [58]: from scipy import sparse\n\nIn [59]: A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])), shape=(3, 4))\n\nIn [60]: A\nOut[60]: \n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [61]: A.todense()\nOut[61]: \nmatrix([[0., 0., 1., 2.],\n [3., 0., 0., 0.],\n [0., 0., 0., 0.]]) \n```", "```py\nIn [62]: ss = pd.Series.sparse.from_coo(A)\n\nIn [63]: ss\nOut[63]: \n0  2    1.0\n 3    2.0\n1  0    3.0\ndtype: Sparse[float64, nan] \n```", "```py\nIn [64]: ss_dense = pd.Series.sparse.from_coo(A, dense_index=True)\n\nIn [65]: ss_dense\nOut[65]: \n1  0    3.0\n 2    NaN\n 3    NaN\n0  0    NaN\n 2    1.0\n 3    2.0\n 0    NaN\n 2    1.0\n 3    2.0\ndtype: Sparse[float64, nan] \n```", "```py\nIn [13]: arr = np.random.randn(10)\n\nIn [14]: arr[2:5] = np.nan\n\nIn [15]: arr[7:8] = np.nan\n\nIn [16]: sparr = pd.arrays.SparseArray(arr)\n\nIn [17]: sparr\nOut[17]: \n[-1.9556635297215477, -1.6588664275960427, nan, nan, nan, 1.1589328886422277, 0.14529711373305043, nan, 0.6060271905134522, 1.3342113401317768]\nFill: nan\nIntIndex\nIndices: array([0, 1, 5, 6, 8, 9], dtype=int32) \n```", "```py\nIn [18]: np.asarray(sparr)\nOut[18]: \narray([-1.9557, -1.6589,     nan,     nan,     nan,  1.1589,  0.1453,\n nan,  0.606 ,  1.3342]) \n```", "```py\nIn [19]: sparr.dtype\nOut[19]: Sparse[float64, nan] \n```", "```py\nIn [20]: pd.SparseDtype(np.dtype('datetime64[ns]'))\nOut[20]: Sparse[datetime64[ns], numpy.datetime64('NaT')] \n```", "```py\nIn [21]: pd.SparseDtype(np.dtype('datetime64[ns]'),\n ....:               fill_value=pd.Timestamp('2017-01-01'))\n ....: \nOut[21]: Sparse[datetime64[ns], Timestamp('2017-01-01 00:00:00')] \n```", "```py\nIn [22]: pd.array([1, 0, 0, 2], dtype='Sparse[int]')\nOut[22]: \n[1, 0, 0, 2]\nFill: 0\nIntIndex\nIndices: array([0, 3], dtype=int32) \n```", "```py\nIn [23]: s = pd.Series([0, 0, 1, 2], dtype=\"Sparse[int]\")\n\nIn [24]: s.sparse.density\nOut[24]: 0.5\n\nIn [25]: s.sparse.fill_value\nOut[25]: 0 \n```", "```py\nIn [26]: arr = pd.arrays.SparseArray([1., np.nan, np.nan, -2., np.nan])\n\nIn [27]: np.abs(arr)\nOut[27]: \n[1.0, nan, nan, 2.0, nan]\nFill: nan\nIntIndex\nIndices: array([0, 3], dtype=int32) \n```", "```py\nIn [28]: arr = pd.arrays.SparseArray([1., -1, -1, -2., -1], fill_value=-1)\n\nIn [29]: np.abs(arr)\nOut[29]: \n[1, 1, 1, 2.0, 1]\nFill: 1\nIntIndex\nIndices: array([3], dtype=int32)\n\nIn [30]: np.abs(arr).to_dense()\nOut[30]: array([1., 1., 1., 2., 1.]) \n```", "```py\nIn [31]: sdf.sparse.to_dense()\nOut[31]: \n 0         1         2         3\n0          NaN       NaN       NaN       NaN\n1          NaN       NaN       NaN       NaN\n2          NaN       NaN       NaN       NaN\n3          NaN       NaN       NaN       NaN\n4          NaN       NaN       NaN       NaN\n...        ...       ...       ...       ...\n9995       NaN       NaN       NaN       NaN\n9996       NaN       NaN       NaN       NaN\n9997       NaN       NaN       NaN       NaN\n9998  0.509184 -0.774928 -1.369894 -0.382141\n9999  0.280249 -1.648493  1.490865 -0.890819\n\n[10000 rows x 4 columns] \n```", "```py\nIn [32]: dense = pd.DataFrame({\"A\": [1, 0, 0, 1]})\n\nIn [33]: dtype = pd.SparseDtype(int, fill_value=0)\n\nIn [34]: dense.astype(dtype)\nOut[34]: \n A\n0  1\n1  0\n2  0\n3  1 \n```", "```py\nIn [35]: from scipy.sparse import csr_matrix\n\nIn [36]: arr = np.random.random(size=(1000, 5))\n\nIn [37]: arr[arr < .9] = 0\n\nIn [38]: sp_arr = csr_matrix(arr)\n\nIn [39]: sp_arr\nOut[39]: \n<1000x5 sparse matrix of type '<class 'numpy.float64'>'\n with 517 stored elements in Compressed Sparse Row format>\n\nIn [40]: sdf = pd.DataFrame.sparse.from_spmatrix(sp_arr)\n\nIn [41]: sdf.head()\nOut[41]: \n 0  1  2         3  4\n0   0.95638  0  0         0  0\n1         0  0  0         0  0\n2         0  0  0         0  0\n3         0  0  0         0  0\n4  0.999552  0  0  0.956153  0\n\nIn [42]: sdf.dtypes\nOut[42]: \n0    Sparse[float64, 0]\n1    Sparse[float64, 0]\n2    Sparse[float64, 0]\n3    Sparse[float64, 0]\n4    Sparse[float64, 0]\ndtype: object \n```", "```py\nIn [43]: sdf.sparse.to_coo()\nOut[43]: \n<1000x5 sparse matrix of type '<class 'numpy.float64'>'\n with 517 stored elements in COOrdinate format> \n```", "```py\nIn [44]: s = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])\n\nIn [45]: s.index = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (1, 2, \"a\", 0),\n ....:        (1, 2, \"a\", 1),\n ....:        (1, 1, \"b\", 0),\n ....:        (1, 1, \"b\", 1),\n ....:        (2, 1, \"b\", 0),\n ....:        (2, 1, \"b\", 1),\n ....:    ],\n ....:    names=[\"A\", \"B\", \"C\", \"D\"],\n ....: )\n ....: \n\nIn [46]: ss = s.astype('Sparse')\n\nIn [47]: ss\nOut[47]: \nA  B  C  D\n1  2  a  0    3.0\n 1    NaN\n 1  b  0    1.0\n 1    3.0\n2  1  b  0    NaN\n 1    NaN\ndtype: Sparse[float64, nan] \n```", "```py\nIn [48]: A, rows, columns = ss.sparse.to_coo(\n ....:    row_levels=[\"A\", \"B\"], column_levels=[\"C\", \"D\"], sort_labels=True\n ....: )\n ....: \n\nIn [49]: A\nOut[49]: \n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [50]: A.todense()\nOut[50]: \nmatrix([[0., 0., 1., 3.],\n [3., 0., 0., 0.],\n [0., 0., 0., 0.]])\n\nIn [51]: rows\nOut[51]: [(1, 1), (1, 2), (2, 1)]\n\nIn [52]: columns\nOut[52]: [('a', 0), ('a', 1), ('b', 0), ('b', 1)] \n```", "```py\nIn [53]: A, rows, columns = ss.sparse.to_coo(\n ....:    row_levels=[\"A\", \"B\", \"C\"], column_levels=[\"D\"], sort_labels=False\n ....: )\n ....: \n\nIn [54]: A\nOut[54]: \n<3x2 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [55]: A.todense()\nOut[55]: \nmatrix([[3., 0.],\n [1., 3.],\n [0., 0.]])\n\nIn [56]: rows\nOut[56]: [(1, 2, 'a'), (1, 1, 'b'), (2, 1, 'b')]\n\nIn [57]: columns\nOut[57]: [(0,), (1,)] \n```", "```py\nIn [58]: from scipy import sparse\n\nIn [59]: A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])), shape=(3, 4))\n\nIn [60]: A\nOut[60]: \n<3x4 sparse matrix of type '<class 'numpy.float64'>'\n with 3 stored elements in COOrdinate format>\n\nIn [61]: A.todense()\nOut[61]: \nmatrix([[0., 0., 1., 2.],\n [3., 0., 0., 0.],\n [0., 0., 0., 0.]]) \n```", "```py\nIn [62]: ss = pd.Series.sparse.from_coo(A)\n\nIn [63]: ss\nOut[63]: \n0  2    1.0\n 3    2.0\n1  0    3.0\ndtype: Sparse[float64, nan] \n```", "```py\nIn [64]: ss_dense = pd.Series.sparse.from_coo(A, dense_index=True)\n\nIn [65]: ss_dense\nOut[65]: \n1  0    3.0\n 2    NaN\n 3    NaN\n0  0    NaN\n 2    1.0\n 3    2.0\n 0    NaN\n 2    1.0\n 3    2.0\ndtype: Sparse[float64, nan] \n```"]