["```py\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd \n```", "```py\ns = pd.Series(data, index=index) \n```", "```py\nIn [3]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [4]: s\nOut[4]: \na    0.469112\nb   -0.282863\nc   -1.509059\nd   -1.135632\ne    1.212112\ndtype: float64\n\nIn [5]: s.index\nOut[5]: Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\n\nIn [6]: pd.Series(np.random.randn(5))\nOut[6]: \n0   -0.173215\n1    0.119209\n2   -1.044236\n3   -0.861849\n4   -2.104569\ndtype: float64 \n```", "```py\nIn [7]: d = {\"b\": 1, \"a\": 0, \"c\": 2}\n\nIn [8]: pd.Series(d)\nOut[8]: \nb    1\na    0\nc    2\ndtype: int64 \n```", "```py\nIn [9]: d = {\"a\": 0.0, \"b\": 1.0, \"c\": 2.0}\n\nIn [10]: pd.Series(d)\nOut[10]: \na    0.0\nb    1.0\nc    2.0\ndtype: float64\n\nIn [11]: pd.Series(d, index=[\"b\", \"c\", \"d\", \"a\"])\nOut[11]: \nb    1.0\nc    2.0\nd    NaN\na    0.0\ndtype: float64 \n```", "```py\nIn [12]: pd.Series(5.0, index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\nOut[12]: \na    5.0\nb    5.0\nc    5.0\nd    5.0\ne    5.0\ndtype: float64 \n```", "```py\nIn [13]: s.iloc[0]\nOut[13]: 0.4691122999071863\n\nIn [14]: s.iloc[:3]\nOut[14]: \na    0.469112\nb   -0.282863\nc   -1.509059\ndtype: float64\n\nIn [15]: s[s > s.median()]\nOut[15]: \na    0.469112\ne    1.212112\ndtype: float64\n\nIn [16]: s.iloc[[4, 3, 1]]\nOut[16]: \ne    1.212112\nd   -1.135632\nb   -0.282863\ndtype: float64\n\nIn [17]: np.exp(s)\nOut[17]: \na    1.598575\nb    0.753623\nc    0.221118\nd    0.321219\ne    3.360575\ndtype: float64 \n```", "```py\nIn [18]: s.dtype\nOut[18]: dtype('float64') \n```", "```py\nIn [19]: s.array\nOut[19]: \n<NumpyExtensionArray>\n[ 0.4691122999071863, -0.2828633443286633, -1.5090585031735124,\n -1.1356323710171934,  1.2121120250208506]\nLength: 5, dtype: float64 \n```", "```py\nIn [20]: s.to_numpy()\nOut[20]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121]) \n```", "```py\nIn [21]: s[\"a\"]\nOut[21]: 0.4691122999071863\n\nIn [22]: s[\"e\"] = 12.0\n\nIn [23]: s\nOut[23]: \na     0.469112\nb    -0.282863\nc    -1.509059\nd    -1.135632\ne    12.000000\ndtype: float64\n\nIn [24]: \"e\" in s\nOut[24]: True\n\nIn [25]: \"f\" in s\nOut[25]: False \n```", "```py\nIn [26]: s[\"f\"]\n---------------------------------------------------------------------------\nKeyError  Traceback (most recent call last)\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n  3804 try:\n-> 3805     return self._engine.get_loc(casted_key)\n  3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'f'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError  Traceback (most recent call last)\nCell In[26], line 1\n----> 1 s[\"f\"]\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1121, in Series.__getitem__(self, key)\n  1118     return self._values[key]\n  1120 elif key_is_scalar:\n-> 1121     return self._get_value(key)\n  1123 # Convert generator to list before going through hashable part\n  1124 # (We will iterate through the generator there to check for slices)\n  1125 if is_iterator(key):\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1237, in Series._get_value(self, label, takeable)\n  1234     return self._values[label]\n  1236 # Similar to Index.get_value, but we do not fall back to positional\n-> 1237 loc = self.index.get_loc(label)\n  1239 if is_integer(loc):\n  1240     return self._values[loc]\n\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n  3807     if isinstance(casted_key, slice) or (\n  3808         isinstance(casted_key, abc.Iterable)\n  3809         and any(isinstance(x, slice) for x in casted_key)\n  3810     ):\n  3811         raise InvalidIndexError(key)\n-> 3812     raise KeyError(key) from err\n  3813 except TypeError:\n  3814     # If we have a listlike key, _check_indexing_error will raise\n  3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n  3816     #  the TypeError.\n  3817     self._check_indexing_error(key)\n\nKeyError: 'f' \n```", "```py\nIn [27]: s.get(\"f\")\n\nIn [28]: s.get(\"f\", np.nan)\nOut[28]: nan \n```", "```py\nIn [29]: s + s\nOut[29]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [30]: s * 2\nOut[30]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [31]: np.exp(s)\nOut[31]: \na         1.598575\nb         0.753623\nc         0.221118\nd         0.321219\ne    162754.791419\ndtype: float64 \n```", "```py\nIn [32]: s.iloc[1:] + s.iloc[:-1]\nOut[32]: \na         NaN\nb   -0.565727\nc   -3.018117\nd   -2.271265\ne         NaN\ndtype: float64 \n```", "```py\nIn [33]: s = pd.Series(np.random.randn(5), name=\"something\")\n\nIn [34]: s\nOut[34]: \n0   -0.494929\n1    1.071804\n2    0.721555\n3   -0.706771\n4   -1.039575\nName: something, dtype: float64\n\nIn [35]: s.name\nOut[35]: 'something' \n```", "```py\nIn [36]: s2 = s.rename(\"different\")\n\nIn [37]: s2.name\nOut[37]: 'different' \n```", "```py\nIn [38]: d = {\n ....:    \"one\": pd.Series([1.0, 2.0, 3.0], index=[\"a\", \"b\", \"c\"]),\n ....:    \"two\": pd.Series([1.0, 2.0, 3.0, 4.0], index=[\"a\", \"b\", \"c\", \"d\"]),\n ....: }\n ....: \n\nIn [39]: df = pd.DataFrame(d)\n\nIn [40]: df\nOut[40]: \n one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n\nIn [41]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"])\nOut[41]: \n one  two\nd  NaN  4.0\nb  2.0  2.0\na  1.0  1.0\n\nIn [42]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"], columns=[\"two\", \"three\"])\nOut[42]: \n two three\nd  4.0   NaN\nb  2.0   NaN\na  1.0   NaN \n```", "```py\nIn [43]: df.index\nOut[43]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\nIn [44]: df.columns\nOut[44]: Index(['one', 'two'], dtype='object') \n```", "```py\nIn [45]: d = {\"one\": [1.0, 2.0, 3.0, 4.0], \"two\": [4.0, 3.0, 2.0, 1.0]}\n\nIn [46]: pd.DataFrame(d)\nOut[46]: \n one  two\n0  1.0  4.0\n1  2.0  3.0\n2  3.0  2.0\n3  4.0  1.0\n\nIn [47]: pd.DataFrame(d, index=[\"a\", \"b\", \"c\", \"d\"])\nOut[47]: \n one  two\na  1.0  4.0\nb  2.0  3.0\nc  3.0  2.0\nd  4.0  1.0 \n```", "```py\nIn [48]: data = np.zeros((2,), dtype=[(\"A\", \"i4\"), (\"B\", \"f4\"), (\"C\", \"a10\")])\n\nIn [49]: data[:] = [(1, 2.0, \"Hello\"), (2, 3.0, \"World\")]\n\nIn [50]: pd.DataFrame(data)\nOut[50]: \n A    B         C\n0  1  2.0  b'Hello'\n1  2  3.0  b'World'\n\nIn [51]: pd.DataFrame(data, index=[\"first\", \"second\"])\nOut[51]: \n A    B         C\nfirst   1  2.0  b'Hello'\nsecond  2  3.0  b'World'\n\nIn [52]: pd.DataFrame(data, columns=[\"C\", \"A\", \"B\"])\nOut[52]: \n C  A    B\n0  b'Hello'  1  2.0\n1  b'World'  2  3.0 \n```", "```py\nIn [53]: data2 = [{\"a\": 1, \"b\": 2}, {\"a\": 5, \"b\": 10, \"c\": 20}]\n\nIn [54]: pd.DataFrame(data2)\nOut[54]: \n a   b     c\n0  1   2   NaN\n1  5  10  20.0\n\nIn [55]: pd.DataFrame(data2, index=[\"first\", \"second\"])\nOut[55]: \n a   b     c\nfirst   1   2   NaN\nsecond  5  10  20.0\n\nIn [56]: pd.DataFrame(data2, columns=[\"a\", \"b\"])\nOut[56]: \n a   b\n0  1   2\n1  5  10 \n```", "```py\nIn [57]: pd.DataFrame(\n ....:    {\n ....:        (\"a\", \"b\"): {(\"A\", \"B\"): 1, (\"A\", \"C\"): 2},\n ....:        (\"a\", \"a\"): {(\"A\", \"C\"): 3, (\"A\", \"B\"): 4},\n ....:        (\"a\", \"c\"): {(\"A\", \"B\"): 5, (\"A\", \"C\"): 6},\n ....:        (\"b\", \"a\"): {(\"A\", \"C\"): 7, (\"A\", \"B\"): 8},\n ....:        (\"b\", \"b\"): {(\"A\", \"D\"): 9, (\"A\", \"B\"): 10},\n ....:    }\n ....: )\n ....: \nOut[57]: \n a              b \n b    a    c    a     b\nA B  1.0  4.0  5.0  8.0  10.0\n C  2.0  3.0  6.0  7.0   NaN\n D  NaN  NaN  NaN  NaN   9.0 \n```", "```py\nIn [58]: ser = pd.Series(range(3), index=list(\"abc\"), name=\"ser\")\n\nIn [59]: pd.DataFrame(ser)\nOut[59]: \n ser\na    0\nb    1\nc    2 \n```", "```py\nIn [60]: from collections import namedtuple\n\nIn [61]: Point = namedtuple(\"Point\", \"x y\")\n\nIn [62]: pd.DataFrame([Point(0, 0), Point(0, 3), (2, 3)])\nOut[62]: \n x  y\n0  0  0\n1  0  3\n2  2  3\n\nIn [63]: Point3D = namedtuple(\"Point3D\", \"x y z\")\n\nIn [64]: pd.DataFrame([Point3D(0, 0, 0), Point3D(0, 3, 5), Point(2, 3)])\nOut[64]: \n x  y    z\n0  0  0  0.0\n1  0  3  5.0\n2  2  3  NaN \n```", "```py\nIn [65]: from dataclasses import make_dataclass\n\nIn [66]: Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n\nIn [67]: pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\nOut[67]: \n x  y\n0  0  0\n1  0  3\n2  2  3 \n```", "```py\nIn [68]: pd.DataFrame.from_dict(dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]))\nOut[68]: \n A  B\n0  1  4\n1  2  5\n2  3  6 \n```", "```py\nIn [69]: pd.DataFrame.from_dict(\n ....:    dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]),\n ....:    orient=\"index\",\n ....:    columns=[\"one\", \"two\", \"three\"],\n ....: )\n ....: \nOut[69]: \n one  two  three\nA    1    2      3\nB    4    5      6 \n```", "```py\nIn [70]: data\nOut[70]: \narray([(1, 2., b'Hello'), (2, 3., b'World')],\n dtype=[('A', '<i4'), ('B', '<f4'), ('C', 'S10')])\n\nIn [71]: pd.DataFrame.from_records(data, index=\"C\")\nOut[71]: \n A    B\nC \nb'Hello'  1  2.0\nb'World'  2  3.0 \n```", "```py\nIn [72]: df[\"one\"]\nOut[72]: \na    1.0\nb    2.0\nc    3.0\nd    NaN\nName: one, dtype: float64\n\nIn [73]: df[\"three\"] = df[\"one\"] * df[\"two\"]\n\nIn [74]: df[\"flag\"] = df[\"one\"] > 2\n\nIn [75]: df\nOut[75]: \n one  two  three   flag\na  1.0  1.0    1.0  False\nb  2.0  2.0    4.0  False\nc  3.0  3.0    9.0   True\nd  NaN  4.0    NaN  False \n```", "```py\nIn [76]: del df[\"two\"]\n\nIn [77]: three = df.pop(\"three\")\n\nIn [78]: df\nOut[78]: \n one   flag\na  1.0  False\nb  2.0  False\nc  3.0   True\nd  NaN  False \n```", "```py\nIn [79]: df[\"foo\"] = \"bar\"\n\nIn [80]: df\nOut[80]: \n one   flag  foo\na  1.0  False  bar\nb  2.0  False  bar\nc  3.0   True  bar\nd  NaN  False  bar \n```", "```py\nIn [81]: df[\"one_trunc\"] = df[\"one\"][:2]\n\nIn [82]: df\nOut[82]: \n one   flag  foo  one_trunc\na  1.0  False  bar        1.0\nb  2.0  False  bar        2.0\nc  3.0   True  bar        NaN\nd  NaN  False  bar        NaN \n```", "```py\nIn [83]: df.insert(1, \"bar\", df[\"one\"])\n\nIn [84]: df\nOut[84]: \n one  bar   flag  foo  one_trunc\na  1.0  1.0  False  bar        1.0\nb  2.0  2.0  False  bar        2.0\nc  3.0  3.0   True  bar        NaN\nd  NaN  NaN  False  bar        NaN \n```", "```py\nIn [85]: iris = pd.read_csv(\"data/iris.data\")\n\nIn [86]: iris.head()\nOut[86]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\nIn [87]: iris.assign(sepal_ratio=iris[\"SepalWidth\"] / iris[\"SepalLength\"]).head()\nOut[87]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [88]: iris.assign(sepal_ratio=lambda x: (x[\"SepalWidth\"] / x[\"SepalLength\"])).head()\nOut[88]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [89]: (\n ....:    iris.query(\"SepalLength > 5\")\n ....:    .assign(\n ....:        SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ....:        PetalRatio=lambda x: x.PetalWidth / x.PetalLength,\n ....:    )\n ....:    .plot(kind=\"scatter\", x=\"SepalRatio\", y=\"PetalRatio\")\n ....: )\n ....: \nOut[89]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\nIn [90]: dfa = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nIn [91]: dfa.assign(C=lambda x: x[\"A\"] + x[\"B\"], D=lambda x: x[\"A\"] + x[\"C\"])\nOut[91]: \n A  B  C   D\n0  1  4  5   6\n1  2  5  7   9\n2  3  6  9  12 \n```", "```py\nIn [92]: df.loc[\"b\"]\nOut[92]: \none            2.0\nbar            2.0\nflag         False\nfoo            bar\none_trunc      2.0\nName: b, dtype: object\n\nIn [93]: df.iloc[2]\nOut[93]: \none           3.0\nbar           3.0\nflag         True\nfoo           bar\none_trunc     NaN\nName: c, dtype: object \n```", "```py\nIn [94]: df = pd.DataFrame(np.random.randn(10, 4), columns=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [95]: df2 = pd.DataFrame(np.random.randn(7, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [96]: df + df2\nOut[96]: \n A         B         C   D\n0  0.045691 -0.014138  1.380871 NaN\n1 -0.955398 -1.501007  0.037181 NaN\n2 -0.662690  1.534833 -0.859691 NaN\n3 -2.452949  1.237274 -0.133712 NaN\n4  1.414490  1.951676 -2.320422 NaN\n5 -0.494922 -1.649727 -1.084601 NaN\n6 -1.047551 -0.748572 -0.805479 NaN\n7       NaN       NaN       NaN NaN\n8       NaN       NaN       NaN NaN\n9       NaN       NaN       NaN NaN \n```", "```py\nIn [97]: df - df.iloc[0]\nOut[97]: \n A         B         C         D\n0  0.000000  0.000000  0.000000  0.000000\n1 -1.359261 -0.248717 -0.453372 -1.754659\n2  0.253128  0.829678  0.010026 -1.991234\n3 -1.311128  0.054325 -1.724913 -1.620544\n4  0.573025  1.500742 -0.676070  1.367331\n5 -1.741248  0.781993 -1.241620 -2.053136\n6 -1.240774 -0.869551 -0.153282  0.000430\n7 -0.743894  0.411013 -0.929563 -0.282386\n8 -1.194921  1.320690  0.238224 -1.482644\n9  2.293786  1.856228  0.773289 -1.446531 \n```", "```py\nIn [98]: df * 5 + 2\nOut[98]: \n A         B         C          D\n0   3.359299 -0.124862  4.835102   3.381160\n1  -3.437003 -1.368449  2.568242  -5.392133\n2   4.624938  4.023526  4.885230  -6.575010\n3  -3.196342  0.146766 -3.789461  -4.721559\n4   6.224426  7.378849  1.454750  10.217815\n5  -5.346940  3.785103 -1.373001  -6.884519\n6  -2.844569 -4.472618  4.068691   3.383309\n7  -0.360173  1.930201  0.187285   1.969232\n8  -2.615303  6.478587  6.026220  -4.032059\n9  14.828230  9.156280  8.701544  -3.851494\n\nIn [99]: 1 / df\nOut[99]: \n A          B         C           D\n0  3.678365  -2.353094  1.763605    3.620145\n1 -0.919624  -1.484363  8.799067   -0.676395\n2  1.904807   2.470934  1.732964   -0.583090\n3 -0.962215  -2.697986 -0.863638   -0.743875\n4  1.183593   0.929567 -9.170108    0.608434\n5 -0.680555   2.800959 -1.482360   -0.562777\n6 -1.032084  -0.772485  2.416988    3.614523\n7 -2.118489 -71.634509 -2.758294 -162.507295\n8 -1.083352   1.116424  1.241860   -0.828904\n9  0.389765   0.698687  0.746097   -0.854483\n\nIn [100]: df ** 4\nOut[100]: \n A             B         C             D\n0   0.005462  3.261689e-02  0.103370  5.822320e-03\n1   1.398165  2.059869e-01  0.000167  4.777482e+00\n2   0.075962  2.682596e-02  0.110877  8.650845e+00\n3   1.166571  1.887302e-02  1.797515  3.265879e+00\n4   0.509555  1.339298e+00  0.000141  7.297019e+00\n5   4.661717  1.624699e-02  0.207103  9.969092e+00\n6   0.881334  2.808277e+00  0.029302  5.858632e-03\n7   0.049647  3.797614e-08  0.017276  1.433866e-09\n8   0.725974  6.437005e-01  0.420446  2.118275e+00\n9  43.329821  4.196326e+00  3.227153  1.875802e+00 \n```", "```py\nIn [101]: df1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [0, 1, 1]}, dtype=bool)\n\nIn [102]: df2 = pd.DataFrame({\"a\": [0, 1, 1], \"b\": [1, 1, 0]}, dtype=bool)\n\nIn [103]: df1 & df2\nOut[103]: \n a      b\n0  False  False\n1  False   True\n2   True  False\n\nIn [104]: df1 | df2\nOut[104]: \n a     b\n0  True  True\n1  True  True\n2  True  True\n\nIn [105]: df1 ^ df2\nOut[105]: \n a      b\n0   True   True\n1   True  False\n2  False   True\n\nIn [106]: -df1\nOut[106]: \n a      b\n0  False   True\n1   True  False\n2  False  False \n```", "```py\n# only show the first 5 rows\nIn [107]: df[:5].T\nOut[107]: \n 0         1         2         3         4\nA  0.271860 -1.087401  0.524988 -1.039268  0.844885\nB -0.424972 -0.673690  0.404705 -0.370647  1.075770\nC  0.567020  0.113648  0.577046 -1.157892 -0.109050\nD  0.276232 -1.478427 -1.715002 -1.344312  1.643563 \n```", "```py\nIn [108]: np.exp(df)\nOut[108]: \n A         B         C         D\n0   1.312403  0.653788  1.763006  1.318154\n1   0.337092  0.509824  1.120358  0.227996\n2   1.690438  1.498861  1.780770  0.179963\n3   0.353713  0.690288  0.314148  0.260719\n4   2.327710  2.932249  0.896686  5.173571\n5   0.230066  1.429065  0.509360  0.169161\n6   0.379495  0.274028  1.512461  1.318720\n7   0.623732  0.986137  0.695904  0.993865\n8   0.397301  2.449092  2.237242  0.299269\n9  13.009059  4.183951  3.820223  0.310274\n\nIn [109]: np.asarray(df)\nOut[109]: \narray([[ 0.2719, -0.425 ,  0.567 ,  0.2762],\n [-1.0874, -0.6737,  0.1136, -1.4784],\n [ 0.525 ,  0.4047,  0.577 , -1.715 ],\n [-1.0393, -0.3706, -1.1579, -1.3443],\n [ 0.8449,  1.0758, -0.109 ,  1.6436],\n [-1.4694,  0.357 , -0.6746, -1.7769],\n [-0.9689, -1.2945,  0.4137,  0.2767],\n [-0.472 , -0.014 , -0.3625, -0.0062],\n [-0.9231,  0.8957,  0.8052, -1.2064],\n [ 2.5656,  1.4313,  1.3403, -1.1703]]) \n```", "```py\nIn [110]: ser = pd.Series([1, 2, 3, 4])\n\nIn [111]: np.exp(ser)\nOut[111]: \n0     2.718282\n1     7.389056\n2    20.085537\n3    54.598150\ndtype: float64 \n```", "```py\nIn [112]: ser1 = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n\nIn [113]: ser2 = pd.Series([1, 3, 5], index=[\"b\", \"a\", \"c\"])\n\nIn [114]: ser1\nOut[114]: \na    1\nb    2\nc    3\ndtype: int64\n\nIn [115]: ser2\nOut[115]: \nb    1\na    3\nc    5\ndtype: int64\n\nIn [116]: np.remainder(ser1, ser2)\nOut[116]: \na    1\nb    0\nc    3\ndtype: int64 \n```", "```py\nIn [117]: ser3 = pd.Series([2, 4, 6], index=[\"b\", \"c\", \"d\"])\n\nIn [118]: ser3\nOut[118]: \nb    2\nc    4\nd    6\ndtype: int64\n\nIn [119]: np.remainder(ser1, ser3)\nOut[119]: \na    NaN\nb    0.0\nc    3.0\nd    NaN\ndtype: float64 \n```", "```py\nIn [120]: ser = pd.Series([1, 2, 3])\n\nIn [121]: idx = pd.Index([4, 5, 6])\n\nIn [122]: np.maximum(ser, idx)\nOut[122]: \n0    4\n1    5\n2    6\ndtype: int64 \n```", "```py\nIn [123]: baseball = pd.read_csv(\"data/baseball.csv\")\n\nIn [124]: print(baseball)\n id     player  year  stint team  lg  ...    so  ibb  hbp   sh   sf  gidp\n0   88641  womacto01  2006      2  CHN  NL  ...   4.0  0.0  0.0  3.0  0.0   0.0\n1   88643  schilcu01  2006      1  BOS  AL  ...   1.0  0.0  0.0  0.0  0.0   0.0\n..    ...        ...   ...    ...  ...  ..  ...   ...  ...  ...  ...  ...   ...\n98  89533   aloumo01  2007      1  NYN  NL  ...  30.0  5.0  2.0  0.0  3.0  13.0\n99  89534  alomasa02  2007      1  NYN  NL  ...   3.0  0.0  0.0  0.0  0.0   0.0\n\n[100 rows x 23 columns]\n\nIn [125]: baseball.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100 entries, 0 to 99\nData columns (total 23 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   id      100 non-null    int64 \n 1   player  100 non-null    object \n 2   year    100 non-null    int64 \n 3   stint   100 non-null    int64 \n 4   team    100 non-null    object \n 5   lg      100 non-null    object \n 6   g       100 non-null    int64 \n 7   ab      100 non-null    int64 \n 8   r       100 non-null    int64 \n 9   h       100 non-null    int64 \n 10  X2b     100 non-null    int64 \n 11  X3b     100 non-null    int64 \n 12  hr      100 non-null    int64 \n 13  rbi     100 non-null    float64\n 14  sb      100 non-null    float64\n 15  cs      100 non-null    float64\n 16  bb      100 non-null    int64 \n 17  so      100 non-null    float64\n 18  ibb     100 non-null    float64\n 19  hbp     100 non-null    float64\n 20  sh      100 non-null    float64\n 21  sf      100 non-null    float64\n 22  gidp    100 non-null    float64\ndtypes: float64(9), int64(11), object(3)\nmemory usage: 18.1+ KB \n```", "```py\nIn [126]: print(baseball.iloc[-20:, :12].to_string())\n id     player  year  stint team  lg    g   ab   r    h  X2b  X3b\n80  89474  finlest01  2007      1  COL  NL   43   94   9   17    3    0\n81  89480  embreal01  2007      1  OAK  AL    4    0   0    0    0    0\n82  89481  edmonji01  2007      1  SLN  NL  117  365  39   92   15    2\n83  89482  easleda01  2007      1  NYN  NL   76  193  24   54    6    0\n84  89489  delgaca01  2007      1  NYN  NL  139  538  71  139   30    0\n85  89493  cormirh01  2007      1  CIN  NL    6    0   0    0    0    0\n86  89494  coninje01  2007      2  NYN  NL   21   41   2    8    2    0\n87  89495  coninje01  2007      1  CIN  NL   80  215  23   57   11    1\n88  89497  clemero02  2007      1  NYA  AL    2    2   0    1    0    0\n89  89498  claytro01  2007      2  BOS  AL    8    6   1    0    0    0\n90  89499  claytro01  2007      1  TOR  AL   69  189  23   48   14    0\n91  89501  cirilje01  2007      2  ARI  NL   28   40   6    8    4    0\n92  89502  cirilje01  2007      1  MIN  AL   50  153  18   40    9    2\n93  89521  bondsba01  2007      1  SFN  NL  126  340  75   94   14    0\n94  89523  biggicr01  2007      1  HOU  NL  141  517  68  130   31    3\n95  89525  benitar01  2007      2  FLO  NL   34    0   0    0    0    0\n96  89526  benitar01  2007      1  SFN  NL   19    0   0    0    0    0\n97  89530  ausmubr01  2007      1  HOU  NL  117  349  38   82   16    3\n98  89533   aloumo01  2007      1  NYN  NL   87  328  51  112   19    1\n99  89534  alomasa02  2007      1  NYN  NL    8   22   1    3    1    0 \n```", "```py\nIn [127]: pd.DataFrame(np.random.randn(3, 12))\nOut[127]: \n 0         1         2   ...        9         10        11\n0 -1.226825  0.769804 -1.281247  ... -1.110336 -0.619976  0.149748\n1 -0.732339  0.687738  0.176444  ...  1.462696 -1.743161 -0.826591\n2 -0.345352  1.314232  0.690579  ...  0.896171 -0.487602 -0.082240\n\n[3 rows x 12 columns] \n```", "```py\nIn [128]: pd.set_option(\"display.width\", 40)  # default is 80\n\nIn [129]: pd.DataFrame(np.random.randn(3, 12))\nOut[129]: \n 0         1         2   ...        9         10        11\n0 -2.182937  0.380396  0.084844  ... -0.023688  2.410179  1.450520\n1  0.206053 -0.251905 -2.213588  ... -0.025747 -0.988387  0.094055\n2  1.262731  1.289997  0.082423  ... -0.281461  0.030711  0.109121\n\n[3 rows x 12 columns] \n```", "```py\nIn [130]: datafile = {\n .....:    \"filename\": [\"filename_01\", \"filename_02\"],\n .....:    \"path\": [\n .....:        \"media/user_name/storage/folder_01/filename_01\",\n .....:        \"media/user_name/storage/folder_02/filename_02\",\n .....:    ],\n .....: }\n .....: \n\nIn [131]: pd.set_option(\"display.max_colwidth\", 30)\n\nIn [132]: pd.DataFrame(datafile)\nOut[132]: \n filename                           path\n0  filename_01  media/user_name/storage/fo...\n1  filename_02  media/user_name/storage/fo...\n\nIn [133]: pd.set_option(\"display.max_colwidth\", 100)\n\nIn [134]: pd.DataFrame(datafile)\nOut[134]: \n filename                                           path\n0  filename_01  media/user_name/storage/folder_01/filename_01\n1  filename_02  media/user_name/storage/folder_02/filename_02 \n```", "```py\nIn [135]: df = pd.DataFrame({\"foo1\": np.random.randn(5), \"foo2\": np.random.randn(5)})\n\nIn [136]: df\nOut[136]: \n foo1      foo2\n0  1.126203  0.781836\n1 -0.977349 -1.071357\n2  1.474071  0.441153\n3 -0.064034  2.353925\n4 -1.282782  0.583787\n\nIn [137]: df.foo1\nOut[137]: \n0    1.126203\n1   -0.977349\n2    1.474071\n3   -0.064034\n4   -1.282782\nName: foo1, dtype: float64 \n```", "```py\nIn [5]: df.foo<TAB>  # noqa: E225, E999\ndf.foo1  df.foo2 \n```", "```py\ns = pd.Series(data, index=index) \n```", "```py\nIn [3]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [4]: s\nOut[4]: \na    0.469112\nb   -0.282863\nc   -1.509059\nd   -1.135632\ne    1.212112\ndtype: float64\n\nIn [5]: s.index\nOut[5]: Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\n\nIn [6]: pd.Series(np.random.randn(5))\nOut[6]: \n0   -0.173215\n1    0.119209\n2   -1.044236\n3   -0.861849\n4   -2.104569\ndtype: float64 \n```", "```py\nIn [7]: d = {\"b\": 1, \"a\": 0, \"c\": 2}\n\nIn [8]: pd.Series(d)\nOut[8]: \nb    1\na    0\nc    2\ndtype: int64 \n```", "```py\nIn [9]: d = {\"a\": 0.0, \"b\": 1.0, \"c\": 2.0}\n\nIn [10]: pd.Series(d)\nOut[10]: \na    0.0\nb    1.0\nc    2.0\ndtype: float64\n\nIn [11]: pd.Series(d, index=[\"b\", \"c\", \"d\", \"a\"])\nOut[11]: \nb    1.0\nc    2.0\nd    NaN\na    0.0\ndtype: float64 \n```", "```py\nIn [12]: pd.Series(5.0, index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\nOut[12]: \na    5.0\nb    5.0\nc    5.0\nd    5.0\ne    5.0\ndtype: float64 \n```", "```py\nIn [13]: s.iloc[0]\nOut[13]: 0.4691122999071863\n\nIn [14]: s.iloc[:3]\nOut[14]: \na    0.469112\nb   -0.282863\nc   -1.509059\ndtype: float64\n\nIn [15]: s[s > s.median()]\nOut[15]: \na    0.469112\ne    1.212112\ndtype: float64\n\nIn [16]: s.iloc[[4, 3, 1]]\nOut[16]: \ne    1.212112\nd   -1.135632\nb   -0.282863\ndtype: float64\n\nIn [17]: np.exp(s)\nOut[17]: \na    1.598575\nb    0.753623\nc    0.221118\nd    0.321219\ne    3.360575\ndtype: float64 \n```", "```py\nIn [18]: s.dtype\nOut[18]: dtype('float64') \n```", "```py\nIn [19]: s.array\nOut[19]: \n<NumpyExtensionArray>\n[ 0.4691122999071863, -0.2828633443286633, -1.5090585031735124,\n -1.1356323710171934,  1.2121120250208506]\nLength: 5, dtype: float64 \n```", "```py\nIn [20]: s.to_numpy()\nOut[20]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121]) \n```", "```py\nIn [21]: s[\"a\"]\nOut[21]: 0.4691122999071863\n\nIn [22]: s[\"e\"] = 12.0\n\nIn [23]: s\nOut[23]: \na     0.469112\nb    -0.282863\nc    -1.509059\nd    -1.135632\ne    12.000000\ndtype: float64\n\nIn [24]: \"e\" in s\nOut[24]: True\n\nIn [25]: \"f\" in s\nOut[25]: False \n```", "```py\nIn [26]: s[\"f\"]\n---------------------------------------------------------------------------\nKeyError  Traceback (most recent call last)\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n  3804 try:\n-> 3805     return self._engine.get_loc(casted_key)\n  3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'f'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError  Traceback (most recent call last)\nCell In[26], line 1\n----> 1 s[\"f\"]\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1121, in Series.__getitem__(self, key)\n  1118     return self._values[key]\n  1120 elif key_is_scalar:\n-> 1121     return self._get_value(key)\n  1123 # Convert generator to list before going through hashable part\n  1124 # (We will iterate through the generator there to check for slices)\n  1125 if is_iterator(key):\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1237, in Series._get_value(self, label, takeable)\n  1234     return self._values[label]\n  1236 # Similar to Index.get_value, but we do not fall back to positional\n-> 1237 loc = self.index.get_loc(label)\n  1239 if is_integer(loc):\n  1240     return self._values[loc]\n\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n  3807     if isinstance(casted_key, slice) or (\n  3808         isinstance(casted_key, abc.Iterable)\n  3809         and any(isinstance(x, slice) for x in casted_key)\n  3810     ):\n  3811         raise InvalidIndexError(key)\n-> 3812     raise KeyError(key) from err\n  3813 except TypeError:\n  3814     # If we have a listlike key, _check_indexing_error will raise\n  3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n  3816     #  the TypeError.\n  3817     self._check_indexing_error(key)\n\nKeyError: 'f' \n```", "```py\nIn [27]: s.get(\"f\")\n\nIn [28]: s.get(\"f\", np.nan)\nOut[28]: nan \n```", "```py\nIn [29]: s + s\nOut[29]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [30]: s * 2\nOut[30]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [31]: np.exp(s)\nOut[31]: \na         1.598575\nb         0.753623\nc         0.221118\nd         0.321219\ne    162754.791419\ndtype: float64 \n```", "```py\nIn [32]: s.iloc[1:] + s.iloc[:-1]\nOut[32]: \na         NaN\nb   -0.565727\nc   -3.018117\nd   -2.271265\ne         NaN\ndtype: float64 \n```", "```py\nIn [33]: s = pd.Series(np.random.randn(5), name=\"something\")\n\nIn [34]: s\nOut[34]: \n0   -0.494929\n1    1.071804\n2    0.721555\n3   -0.706771\n4   -1.039575\nName: something, dtype: float64\n\nIn [35]: s.name\nOut[35]: 'something' \n```", "```py\nIn [36]: s2 = s.rename(\"different\")\n\nIn [37]: s2.name\nOut[37]: 'different' \n```", "```py\nIn [13]: s.iloc[0]\nOut[13]: 0.4691122999071863\n\nIn [14]: s.iloc[:3]\nOut[14]: \na    0.469112\nb   -0.282863\nc   -1.509059\ndtype: float64\n\nIn [15]: s[s > s.median()]\nOut[15]: \na    0.469112\ne    1.212112\ndtype: float64\n\nIn [16]: s.iloc[[4, 3, 1]]\nOut[16]: \ne    1.212112\nd   -1.135632\nb   -0.282863\ndtype: float64\n\nIn [17]: np.exp(s)\nOut[17]: \na    1.598575\nb    0.753623\nc    0.221118\nd    0.321219\ne    3.360575\ndtype: float64 \n```", "```py\nIn [18]: s.dtype\nOut[18]: dtype('float64') \n```", "```py\nIn [19]: s.array\nOut[19]: \n<NumpyExtensionArray>\n[ 0.4691122999071863, -0.2828633443286633, -1.5090585031735124,\n -1.1356323710171934,  1.2121120250208506]\nLength: 5, dtype: float64 \n```", "```py\nIn [20]: s.to_numpy()\nOut[20]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121]) \n```", "```py\nIn [21]: s[\"a\"]\nOut[21]: 0.4691122999071863\n\nIn [22]: s[\"e\"] = 12.0\n\nIn [23]: s\nOut[23]: \na     0.469112\nb    -0.282863\nc    -1.509059\nd    -1.135632\ne    12.000000\ndtype: float64\n\nIn [24]: \"e\" in s\nOut[24]: True\n\nIn [25]: \"f\" in s\nOut[25]: False \n```", "```py\nIn [26]: s[\"f\"]\n---------------------------------------------------------------------------\nKeyError  Traceback (most recent call last)\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n  3804 try:\n-> 3805     return self._engine.get_loc(casted_key)\n  3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'f'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError  Traceback (most recent call last)\nCell In[26], line 1\n----> 1 s[\"f\"]\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1121, in Series.__getitem__(self, key)\n  1118     return self._values[key]\n  1120 elif key_is_scalar:\n-> 1121     return self._get_value(key)\n  1123 # Convert generator to list before going through hashable part\n  1124 # (We will iterate through the generator there to check for slices)\n  1125 if is_iterator(key):\n\nFile ~/work/pandas/pandas/pandas/core/series.py:1237, in Series._get_value(self, label, takeable)\n  1234     return self._values[label]\n  1236 # Similar to Index.get_value, but we do not fall back to positional\n-> 1237 loc = self.index.get_loc(label)\n  1239 if is_integer(loc):\n  1240     return self._values[loc]\n\nFile ~/work/pandas/pandas/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n  3807     if isinstance(casted_key, slice) or (\n  3808         isinstance(casted_key, abc.Iterable)\n  3809         and any(isinstance(x, slice) for x in casted_key)\n  3810     ):\n  3811         raise InvalidIndexError(key)\n-> 3812     raise KeyError(key) from err\n  3813 except TypeError:\n  3814     # If we have a listlike key, _check_indexing_error will raise\n  3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n  3816     #  the TypeError.\n  3817     self._check_indexing_error(key)\n\nKeyError: 'f' \n```", "```py\nIn [27]: s.get(\"f\")\n\nIn [28]: s.get(\"f\", np.nan)\nOut[28]: nan \n```", "```py\nIn [29]: s + s\nOut[29]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [30]: s * 2\nOut[30]: \na     0.938225\nb    -0.565727\nc    -3.018117\nd    -2.271265\ne    24.000000\ndtype: float64\n\nIn [31]: np.exp(s)\nOut[31]: \na         1.598575\nb         0.753623\nc         0.221118\nd         0.321219\ne    162754.791419\ndtype: float64 \n```", "```py\nIn [32]: s.iloc[1:] + s.iloc[:-1]\nOut[32]: \na         NaN\nb   -0.565727\nc   -3.018117\nd   -2.271265\ne         NaN\ndtype: float64 \n```", "```py\nIn [33]: s = pd.Series(np.random.randn(5), name=\"something\")\n\nIn [34]: s\nOut[34]: \n0   -0.494929\n1    1.071804\n2    0.721555\n3   -0.706771\n4   -1.039575\nName: something, dtype: float64\n\nIn [35]: s.name\nOut[35]: 'something' \n```", "```py\nIn [36]: s2 = s.rename(\"different\")\n\nIn [37]: s2.name\nOut[37]: 'different' \n```", "```py\nIn [38]: d = {\n ....:    \"one\": pd.Series([1.0, 2.0, 3.0], index=[\"a\", \"b\", \"c\"]),\n ....:    \"two\": pd.Series([1.0, 2.0, 3.0, 4.0], index=[\"a\", \"b\", \"c\", \"d\"]),\n ....: }\n ....: \n\nIn [39]: df = pd.DataFrame(d)\n\nIn [40]: df\nOut[40]: \n one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n\nIn [41]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"])\nOut[41]: \n one  two\nd  NaN  4.0\nb  2.0  2.0\na  1.0  1.0\n\nIn [42]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"], columns=[\"two\", \"three\"])\nOut[42]: \n two three\nd  4.0   NaN\nb  2.0   NaN\na  1.0   NaN \n```", "```py\nIn [43]: df.index\nOut[43]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\nIn [44]: df.columns\nOut[44]: Index(['one', 'two'], dtype='object') \n```", "```py\nIn [45]: d = {\"one\": [1.0, 2.0, 3.0, 4.0], \"two\": [4.0, 3.0, 2.0, 1.0]}\n\nIn [46]: pd.DataFrame(d)\nOut[46]: \n one  two\n0  1.0  4.0\n1  2.0  3.0\n2  3.0  2.0\n3  4.0  1.0\n\nIn [47]: pd.DataFrame(d, index=[\"a\", \"b\", \"c\", \"d\"])\nOut[47]: \n one  two\na  1.0  4.0\nb  2.0  3.0\nc  3.0  2.0\nd  4.0  1.0 \n```", "```py\nIn [48]: data = np.zeros((2,), dtype=[(\"A\", \"i4\"), (\"B\", \"f4\"), (\"C\", \"a10\")])\n\nIn [49]: data[:] = [(1, 2.0, \"Hello\"), (2, 3.0, \"World\")]\n\nIn [50]: pd.DataFrame(data)\nOut[50]: \n A    B         C\n0  1  2.0  b'Hello'\n1  2  3.0  b'World'\n\nIn [51]: pd.DataFrame(data, index=[\"first\", \"second\"])\nOut[51]: \n A    B         C\nfirst   1  2.0  b'Hello'\nsecond  2  3.0  b'World'\n\nIn [52]: pd.DataFrame(data, columns=[\"C\", \"A\", \"B\"])\nOut[52]: \n C  A    B\n0  b'Hello'  1  2.0\n1  b'World'  2  3.0 \n```", "```py\nIn [53]: data2 = [{\"a\": 1, \"b\": 2}, {\"a\": 5, \"b\": 10, \"c\": 20}]\n\nIn [54]: pd.DataFrame(data2)\nOut[54]: \n a   b     c\n0  1   2   NaN\n1  5  10  20.0\n\nIn [55]: pd.DataFrame(data2, index=[\"first\", \"second\"])\nOut[55]: \n a   b     c\nfirst   1   2   NaN\nsecond  5  10  20.0\n\nIn [56]: pd.DataFrame(data2, columns=[\"a\", \"b\"])\nOut[56]: \n a   b\n0  1   2\n1  5  10 \n```", "```py\nIn [57]: pd.DataFrame(\n ....:    {\n ....:        (\"a\", \"b\"): {(\"A\", \"B\"): 1, (\"A\", \"C\"): 2},\n ....:        (\"a\", \"a\"): {(\"A\", \"C\"): 3, (\"A\", \"B\"): 4},\n ....:        (\"a\", \"c\"): {(\"A\", \"B\"): 5, (\"A\", \"C\"): 6},\n ....:        (\"b\", \"a\"): {(\"A\", \"C\"): 7, (\"A\", \"B\"): 8},\n ....:        (\"b\", \"b\"): {(\"A\", \"D\"): 9, (\"A\", \"B\"): 10},\n ....:    }\n ....: )\n ....: \nOut[57]: \n a              b \n b    a    c    a     b\nA B  1.0  4.0  5.0  8.0  10.0\n C  2.0  3.0  6.0  7.0   NaN\n D  NaN  NaN  NaN  NaN   9.0 \n```", "```py\nIn [58]: ser = pd.Series(range(3), index=list(\"abc\"), name=\"ser\")\n\nIn [59]: pd.DataFrame(ser)\nOut[59]: \n ser\na    0\nb    1\nc    2 \n```", "```py\nIn [60]: from collections import namedtuple\n\nIn [61]: Point = namedtuple(\"Point\", \"x y\")\n\nIn [62]: pd.DataFrame([Point(0, 0), Point(0, 3), (2, 3)])\nOut[62]: \n x  y\n0  0  0\n1  0  3\n2  2  3\n\nIn [63]: Point3D = namedtuple(\"Point3D\", \"x y z\")\n\nIn [64]: pd.DataFrame([Point3D(0, 0, 0), Point3D(0, 3, 5), Point(2, 3)])\nOut[64]: \n x  y    z\n0  0  0  0.0\n1  0  3  5.0\n2  2  3  NaN \n```", "```py\nIn [65]: from dataclasses import make_dataclass\n\nIn [66]: Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n\nIn [67]: pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\nOut[67]: \n x  y\n0  0  0\n1  0  3\n2  2  3 \n```", "```py\nIn [68]: pd.DataFrame.from_dict(dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]))\nOut[68]: \n A  B\n0  1  4\n1  2  5\n2  3  6 \n```", "```py\nIn [69]: pd.DataFrame.from_dict(\n ....:    dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]),\n ....:    orient=\"index\",\n ....:    columns=[\"one\", \"two\", \"three\"],\n ....: )\n ....: \nOut[69]: \n one  two  three\nA    1    2      3\nB    4    5      6 \n```", "```py\nIn [70]: data\nOut[70]: \narray([(1, 2., b'Hello'), (2, 3., b'World')],\n dtype=[('A', '<i4'), ('B', '<f4'), ('C', 'S10')])\n\nIn [71]: pd.DataFrame.from_records(data, index=\"C\")\nOut[71]: \n A    B\nC \nb'Hello'  1  2.0\nb'World'  2  3.0 \n```", "```py\nIn [72]: df[\"one\"]\nOut[72]: \na    1.0\nb    2.0\nc    3.0\nd    NaN\nName: one, dtype: float64\n\nIn [73]: df[\"three\"] = df[\"one\"] * df[\"two\"]\n\nIn [74]: df[\"flag\"] = df[\"one\"] > 2\n\nIn [75]: df\nOut[75]: \n one  two  three   flag\na  1.0  1.0    1.0  False\nb  2.0  2.0    4.0  False\nc  3.0  3.0    9.0   True\nd  NaN  4.0    NaN  False \n```", "```py\nIn [76]: del df[\"two\"]\n\nIn [77]: three = df.pop(\"three\")\n\nIn [78]: df\nOut[78]: \n one   flag\na  1.0  False\nb  2.0  False\nc  3.0   True\nd  NaN  False \n```", "```py\nIn [79]: df[\"foo\"] = \"bar\"\n\nIn [80]: df\nOut[80]: \n one   flag  foo\na  1.0  False  bar\nb  2.0  False  bar\nc  3.0   True  bar\nd  NaN  False  bar \n```", "```py\nIn [81]: df[\"one_trunc\"] = df[\"one\"][:2]\n\nIn [82]: df\nOut[82]: \n one   flag  foo  one_trunc\na  1.0  False  bar        1.0\nb  2.0  False  bar        2.0\nc  3.0   True  bar        NaN\nd  NaN  False  bar        NaN \n```", "```py\nIn [83]: df.insert(1, \"bar\", df[\"one\"])\n\nIn [84]: df\nOut[84]: \n one  bar   flag  foo  one_trunc\na  1.0  1.0  False  bar        1.0\nb  2.0  2.0  False  bar        2.0\nc  3.0  3.0   True  bar        NaN\nd  NaN  NaN  False  bar        NaN \n```", "```py\nIn [85]: iris = pd.read_csv(\"data/iris.data\")\n\nIn [86]: iris.head()\nOut[86]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\nIn [87]: iris.assign(sepal_ratio=iris[\"SepalWidth\"] / iris[\"SepalLength\"]).head()\nOut[87]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [88]: iris.assign(sepal_ratio=lambda x: (x[\"SepalWidth\"] / x[\"SepalLength\"])).head()\nOut[88]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [89]: (\n ....:    iris.query(\"SepalLength > 5\")\n ....:    .assign(\n ....:        SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ....:        PetalRatio=lambda x: x.PetalWidth / x.PetalLength,\n ....:    )\n ....:    .plot(kind=\"scatter\", x=\"SepalRatio\", y=\"PetalRatio\")\n ....: )\n ....: \nOut[89]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\nIn [90]: dfa = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nIn [91]: dfa.assign(C=lambda x: x[\"A\"] + x[\"B\"], D=lambda x: x[\"A\"] + x[\"C\"])\nOut[91]: \n A  B  C   D\n0  1  4  5   6\n1  2  5  7   9\n2  3  6  9  12 \n```", "```py\nIn [92]: df.loc[\"b\"]\nOut[92]: \none            2.0\nbar            2.0\nflag         False\nfoo            bar\none_trunc      2.0\nName: b, dtype: object\n\nIn [93]: df.iloc[2]\nOut[93]: \none           3.0\nbar           3.0\nflag         True\nfoo           bar\none_trunc     NaN\nName: c, dtype: object \n```", "```py\nIn [94]: df = pd.DataFrame(np.random.randn(10, 4), columns=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [95]: df2 = pd.DataFrame(np.random.randn(7, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [96]: df + df2\nOut[96]: \n A         B         C   D\n0  0.045691 -0.014138  1.380871 NaN\n1 -0.955398 -1.501007  0.037181 NaN\n2 -0.662690  1.534833 -0.859691 NaN\n3 -2.452949  1.237274 -0.133712 NaN\n4  1.414490  1.951676 -2.320422 NaN\n5 -0.494922 -1.649727 -1.084601 NaN\n6 -1.047551 -0.748572 -0.805479 NaN\n7       NaN       NaN       NaN NaN\n8       NaN       NaN       NaN NaN\n9       NaN       NaN       NaN NaN \n```", "```py\nIn [97]: df - df.iloc[0]\nOut[97]: \n A         B         C         D\n0  0.000000  0.000000  0.000000  0.000000\n1 -1.359261 -0.248717 -0.453372 -1.754659\n2  0.253128  0.829678  0.010026 -1.991234\n3 -1.311128  0.054325 -1.724913 -1.620544\n4  0.573025  1.500742 -0.676070  1.367331\n5 -1.741248  0.781993 -1.241620 -2.053136\n6 -1.240774 -0.869551 -0.153282  0.000430\n7 -0.743894  0.411013 -0.929563 -0.282386\n8 -1.194921  1.320690  0.238224 -1.482644\n9  2.293786  1.856228  0.773289 -1.446531 \n```", "```py\nIn [98]: df * 5 + 2\nOut[98]: \n A         B         C          D\n0   3.359299 -0.124862  4.835102   3.381160\n1  -3.437003 -1.368449  2.568242  -5.392133\n2   4.624938  4.023526  4.885230  -6.575010\n3  -3.196342  0.146766 -3.789461  -4.721559\n4   6.224426  7.378849  1.454750  10.217815\n5  -5.346940  3.785103 -1.373001  -6.884519\n6  -2.844569 -4.472618  4.068691   3.383309\n7  -0.360173  1.930201  0.187285   1.969232\n8  -2.615303  6.478587  6.026220  -4.032059\n9  14.828230  9.156280  8.701544  -3.851494\n\nIn [99]: 1 / df\nOut[99]: \n A          B         C           D\n0  3.678365  -2.353094  1.763605    3.620145\n1 -0.919624  -1.484363  8.799067   -0.676395\n2  1.904807   2.470934  1.732964   -0.583090\n3 -0.962215  -2.697986 -0.863638   -0.743875\n4  1.183593   0.929567 -9.170108    0.608434\n5 -0.680555   2.800959 -1.482360   -0.562777\n6 -1.032084  -0.772485  2.416988    3.614523\n7 -2.118489 -71.634509 -2.758294 -162.507295\n8 -1.083352   1.116424  1.241860   -0.828904\n9  0.389765   0.698687  0.746097   -0.854483\n\nIn [100]: df ** 4\nOut[100]: \n A             B         C             D\n0   0.005462  3.261689e-02  0.103370  5.822320e-03\n1   1.398165  2.059869e-01  0.000167  4.777482e+00\n2   0.075962  2.682596e-02  0.110877  8.650845e+00\n3   1.166571  1.887302e-02  1.797515  3.265879e+00\n4   0.509555  1.339298e+00  0.000141  7.297019e+00\n5   4.661717  1.624699e-02  0.207103  9.969092e+00\n6   0.881334  2.808277e+00  0.029302  5.858632e-03\n7   0.049647  3.797614e-08  0.017276  1.433866e-09\n8   0.725974  6.437005e-01  0.420446  2.118275e+00\n9  43.329821  4.196326e+00  3.227153  1.875802e+00 \n```", "```py\nIn [101]: df1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [0, 1, 1]}, dtype=bool)\n\nIn [102]: df2 = pd.DataFrame({\"a\": [0, 1, 1], \"b\": [1, 1, 0]}, dtype=bool)\n\nIn [103]: df1 & df2\nOut[103]: \n a      b\n0  False  False\n1  False   True\n2   True  False\n\nIn [104]: df1 | df2\nOut[104]: \n a     b\n0  True  True\n1  True  True\n2  True  True\n\nIn [105]: df1 ^ df2\nOut[105]: \n a      b\n0   True   True\n1   True  False\n2  False   True\n\nIn [106]: -df1\nOut[106]: \n a      b\n0  False   True\n1   True  False\n2  False  False \n```", "```py\n# only show the first 5 rows\nIn [107]: df[:5].T\nOut[107]: \n 0         1         2         3         4\nA  0.271860 -1.087401  0.524988 -1.039268  0.844885\nB -0.424972 -0.673690  0.404705 -0.370647  1.075770\nC  0.567020  0.113648  0.577046 -1.157892 -0.109050\nD  0.276232 -1.478427 -1.715002 -1.344312  1.643563 \n```", "```py\nIn [108]: np.exp(df)\nOut[108]: \n A         B         C         D\n0   1.312403  0.653788  1.763006  1.318154\n1   0.337092  0.509824  1.120358  0.227996\n2   1.690438  1.498861  1.780770  0.179963\n3   0.353713  0.690288  0.314148  0.260719\n4   2.327710  2.932249  0.896686  5.173571\n5   0.230066  1.429065  0.509360  0.169161\n6   0.379495  0.274028  1.512461  1.318720\n7   0.623732  0.986137  0.695904  0.993865\n8   0.397301  2.449092  2.237242  0.299269\n9  13.009059  4.183951  3.820223  0.310274\n\nIn [109]: np.asarray(df)\nOut[109]: \narray([[ 0.2719, -0.425 ,  0.567 ,  0.2762],\n [-1.0874, -0.6737,  0.1136, -1.4784],\n [ 0.525 ,  0.4047,  0.577 , -1.715 ],\n [-1.0393, -0.3706, -1.1579, -1.3443],\n [ 0.8449,  1.0758, -0.109 ,  1.6436],\n [-1.4694,  0.357 , -0.6746, -1.7769],\n [-0.9689, -1.2945,  0.4137,  0.2767],\n [-0.472 , -0.014 , -0.3625, -0.0062],\n [-0.9231,  0.8957,  0.8052, -1.2064],\n [ 2.5656,  1.4313,  1.3403, -1.1703]]) \n```", "```py\nIn [110]: ser = pd.Series([1, 2, 3, 4])\n\nIn [111]: np.exp(ser)\nOut[111]: \n0     2.718282\n1     7.389056\n2    20.085537\n3    54.598150\ndtype: float64 \n```", "```py\nIn [112]: ser1 = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n\nIn [113]: ser2 = pd.Series([1, 3, 5], index=[\"b\", \"a\", \"c\"])\n\nIn [114]: ser1\nOut[114]: \na    1\nb    2\nc    3\ndtype: int64\n\nIn [115]: ser2\nOut[115]: \nb    1\na    3\nc    5\ndtype: int64\n\nIn [116]: np.remainder(ser1, ser2)\nOut[116]: \na    1\nb    0\nc    3\ndtype: int64 \n```", "```py\nIn [117]: ser3 = pd.Series([2, 4, 6], index=[\"b\", \"c\", \"d\"])\n\nIn [118]: ser3\nOut[118]: \nb    2\nc    4\nd    6\ndtype: int64\n\nIn [119]: np.remainder(ser1, ser3)\nOut[119]: \na    NaN\nb    0.0\nc    3.0\nd    NaN\ndtype: float64 \n```", "```py\nIn [120]: ser = pd.Series([1, 2, 3])\n\nIn [121]: idx = pd.Index([4, 5, 6])\n\nIn [122]: np.maximum(ser, idx)\nOut[122]: \n0    4\n1    5\n2    6\ndtype: int64 \n```", "```py\nIn [123]: baseball = pd.read_csv(\"data/baseball.csv\")\n\nIn [124]: print(baseball)\n id     player  year  stint team  lg  ...    so  ibb  hbp   sh   sf  gidp\n0   88641  womacto01  2006      2  CHN  NL  ...   4.0  0.0  0.0  3.0  0.0   0.0\n1   88643  schilcu01  2006      1  BOS  AL  ...   1.0  0.0  0.0  0.0  0.0   0.0\n..    ...        ...   ...    ...  ...  ..  ...   ...  ...  ...  ...  ...   ...\n98  89533   aloumo01  2007      1  NYN  NL  ...  30.0  5.0  2.0  0.0  3.0  13.0\n99  89534  alomasa02  2007      1  NYN  NL  ...   3.0  0.0  0.0  0.0  0.0   0.0\n\n[100 rows x 23 columns]\n\nIn [125]: baseball.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100 entries, 0 to 99\nData columns (total 23 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   id      100 non-null    int64 \n 1   player  100 non-null    object \n 2   year    100 non-null    int64 \n 3   stint   100 non-null    int64 \n 4   team    100 non-null    object \n 5   lg      100 non-null    object \n 6   g       100 non-null    int64 \n 7   ab      100 non-null    int64 \n 8   r       100 non-null    int64 \n 9   h       100 non-null    int64 \n 10  X2b     100 non-null    int64 \n 11  X3b     100 non-null    int64 \n 12  hr      100 non-null    int64 \n 13  rbi     100 non-null    float64\n 14  sb      100 non-null    float64\n 15  cs      100 non-null    float64\n 16  bb      100 non-null    int64 \n 17  so      100 non-null    float64\n 18  ibb     100 non-null    float64\n 19  hbp     100 non-null    float64\n 20  sh      100 non-null    float64\n 21  sf      100 non-null    float64\n 22  gidp    100 non-null    float64\ndtypes: float64(9), int64(11), object(3)\nmemory usage: 18.1+ KB \n```", "```py\nIn [126]: print(baseball.iloc[-20:, :12].to_string())\n id     player  year  stint team  lg    g   ab   r    h  X2b  X3b\n80  89474  finlest01  2007      1  COL  NL   43   94   9   17    3    0\n81  89480  embreal01  2007      1  OAK  AL    4    0   0    0    0    0\n82  89481  edmonji01  2007      1  SLN  NL  117  365  39   92   15    2\n83  89482  easleda01  2007      1  NYN  NL   76  193  24   54    6    0\n84  89489  delgaca01  2007      1  NYN  NL  139  538  71  139   30    0\n85  89493  cormirh01  2007      1  CIN  NL    6    0   0    0    0    0\n86  89494  coninje01  2007      2  NYN  NL   21   41   2    8    2    0\n87  89495  coninje01  2007      1  CIN  NL   80  215  23   57   11    1\n88  89497  clemero02  2007      1  NYA  AL    2    2   0    1    0    0\n89  89498  claytro01  2007      2  BOS  AL    8    6   1    0    0    0\n90  89499  claytro01  2007      1  TOR  AL   69  189  23   48   14    0\n91  89501  cirilje01  2007      2  ARI  NL   28   40   6    8    4    0\n92  89502  cirilje01  2007      1  MIN  AL   50  153  18   40    9    2\n93  89521  bondsba01  2007      1  SFN  NL  126  340  75   94   14    0\n94  89523  biggicr01  2007      1  HOU  NL  141  517  68  130   31    3\n95  89525  benitar01  2007      2  FLO  NL   34    0   0    0    0    0\n96  89526  benitar01  2007      1  SFN  NL   19    0   0    0    0    0\n97  89530  ausmubr01  2007      1  HOU  NL  117  349  38   82   16    3\n98  89533   aloumo01  2007      1  NYN  NL   87  328  51  112   19    1\n99  89534  alomasa02  2007      1  NYN  NL    8   22   1    3    1    0 \n```", "```py\nIn [127]: pd.DataFrame(np.random.randn(3, 12))\nOut[127]: \n 0         1         2   ...        9         10        11\n0 -1.226825  0.769804 -1.281247  ... -1.110336 -0.619976  0.149748\n1 -0.732339  0.687738  0.176444  ...  1.462696 -1.743161 -0.826591\n2 -0.345352  1.314232  0.690579  ...  0.896171 -0.487602 -0.082240\n\n[3 rows x 12 columns] \n```", "```py\nIn [128]: pd.set_option(\"display.width\", 40)  # default is 80\n\nIn [129]: pd.DataFrame(np.random.randn(3, 12))\nOut[129]: \n 0         1         2   ...        9         10        11\n0 -2.182937  0.380396  0.084844  ... -0.023688  2.410179  1.450520\n1  0.206053 -0.251905 -2.213588  ... -0.025747 -0.988387  0.094055\n2  1.262731  1.289997  0.082423  ... -0.281461  0.030711  0.109121\n\n[3 rows x 12 columns] \n```", "```py\nIn [130]: datafile = {\n .....:    \"filename\": [\"filename_01\", \"filename_02\"],\n .....:    \"path\": [\n .....:        \"media/user_name/storage/folder_01/filename_01\",\n .....:        \"media/user_name/storage/folder_02/filename_02\",\n .....:    ],\n .....: }\n .....: \n\nIn [131]: pd.set_option(\"display.max_colwidth\", 30)\n\nIn [132]: pd.DataFrame(datafile)\nOut[132]: \n filename                           path\n0  filename_01  media/user_name/storage/fo...\n1  filename_02  media/user_name/storage/fo...\n\nIn [133]: pd.set_option(\"display.max_colwidth\", 100)\n\nIn [134]: pd.DataFrame(datafile)\nOut[134]: \n filename                                           path\n0  filename_01  media/user_name/storage/folder_01/filename_01\n1  filename_02  media/user_name/storage/folder_02/filename_02 \n```", "```py\nIn [135]: df = pd.DataFrame({\"foo1\": np.random.randn(5), \"foo2\": np.random.randn(5)})\n\nIn [136]: df\nOut[136]: \n foo1      foo2\n0  1.126203  0.781836\n1 -0.977349 -1.071357\n2  1.474071  0.441153\n3 -0.064034  2.353925\n4 -1.282782  0.583787\n\nIn [137]: df.foo1\nOut[137]: \n0    1.126203\n1   -0.977349\n2    1.474071\n3   -0.064034\n4   -1.282782\nName: foo1, dtype: float64 \n```", "```py\nIn [5]: df.foo<TAB>  # noqa: E225, E999\ndf.foo1  df.foo2 \n```", "```py\nIn [38]: d = {\n ....:    \"one\": pd.Series([1.0, 2.0, 3.0], index=[\"a\", \"b\", \"c\"]),\n ....:    \"two\": pd.Series([1.0, 2.0, 3.0, 4.0], index=[\"a\", \"b\", \"c\", \"d\"]),\n ....: }\n ....: \n\nIn [39]: df = pd.DataFrame(d)\n\nIn [40]: df\nOut[40]: \n one  two\na  1.0  1.0\nb  2.0  2.0\nc  3.0  3.0\nd  NaN  4.0\n\nIn [41]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"])\nOut[41]: \n one  two\nd  NaN  4.0\nb  2.0  2.0\na  1.0  1.0\n\nIn [42]: pd.DataFrame(d, index=[\"d\", \"b\", \"a\"], columns=[\"two\", \"three\"])\nOut[42]: \n two three\nd  4.0   NaN\nb  2.0   NaN\na  1.0   NaN \n```", "```py\nIn [43]: df.index\nOut[43]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\nIn [44]: df.columns\nOut[44]: Index(['one', 'two'], dtype='object') \n```", "```py\nIn [45]: d = {\"one\": [1.0, 2.0, 3.0, 4.0], \"two\": [4.0, 3.0, 2.0, 1.0]}\n\nIn [46]: pd.DataFrame(d)\nOut[46]: \n one  two\n0  1.0  4.0\n1  2.0  3.0\n2  3.0  2.0\n3  4.0  1.0\n\nIn [47]: pd.DataFrame(d, index=[\"a\", \"b\", \"c\", \"d\"])\nOut[47]: \n one  two\na  1.0  4.0\nb  2.0  3.0\nc  3.0  2.0\nd  4.0  1.0 \n```", "```py\nIn [48]: data = np.zeros((2,), dtype=[(\"A\", \"i4\"), (\"B\", \"f4\"), (\"C\", \"a10\")])\n\nIn [49]: data[:] = [(1, 2.0, \"Hello\"), (2, 3.0, \"World\")]\n\nIn [50]: pd.DataFrame(data)\nOut[50]: \n A    B         C\n0  1  2.0  b'Hello'\n1  2  3.0  b'World'\n\nIn [51]: pd.DataFrame(data, index=[\"first\", \"second\"])\nOut[51]: \n A    B         C\nfirst   1  2.0  b'Hello'\nsecond  2  3.0  b'World'\n\nIn [52]: pd.DataFrame(data, columns=[\"C\", \"A\", \"B\"])\nOut[52]: \n C  A    B\n0  b'Hello'  1  2.0\n1  b'World'  2  3.0 \n```", "```py\nIn [53]: data2 = [{\"a\": 1, \"b\": 2}, {\"a\": 5, \"b\": 10, \"c\": 20}]\n\nIn [54]: pd.DataFrame(data2)\nOut[54]: \n a   b     c\n0  1   2   NaN\n1  5  10  20.0\n\nIn [55]: pd.DataFrame(data2, index=[\"first\", \"second\"])\nOut[55]: \n a   b     c\nfirst   1   2   NaN\nsecond  5  10  20.0\n\nIn [56]: pd.DataFrame(data2, columns=[\"a\", \"b\"])\nOut[56]: \n a   b\n0  1   2\n1  5  10 \n```", "```py\nIn [57]: pd.DataFrame(\n ....:    {\n ....:        (\"a\", \"b\"): {(\"A\", \"B\"): 1, (\"A\", \"C\"): 2},\n ....:        (\"a\", \"a\"): {(\"A\", \"C\"): 3, (\"A\", \"B\"): 4},\n ....:        (\"a\", \"c\"): {(\"A\", \"B\"): 5, (\"A\", \"C\"): 6},\n ....:        (\"b\", \"a\"): {(\"A\", \"C\"): 7, (\"A\", \"B\"): 8},\n ....:        (\"b\", \"b\"): {(\"A\", \"D\"): 9, (\"A\", \"B\"): 10},\n ....:    }\n ....: )\n ....: \nOut[57]: \n a              b \n b    a    c    a     b\nA B  1.0  4.0  5.0  8.0  10.0\n C  2.0  3.0  6.0  7.0   NaN\n D  NaN  NaN  NaN  NaN   9.0 \n```", "```py\nIn [58]: ser = pd.Series(range(3), index=list(\"abc\"), name=\"ser\")\n\nIn [59]: pd.DataFrame(ser)\nOut[59]: \n ser\na    0\nb    1\nc    2 \n```", "```py\nIn [60]: from collections import namedtuple\n\nIn [61]: Point = namedtuple(\"Point\", \"x y\")\n\nIn [62]: pd.DataFrame([Point(0, 0), Point(0, 3), (2, 3)])\nOut[62]: \n x  y\n0  0  0\n1  0  3\n2  2  3\n\nIn [63]: Point3D = namedtuple(\"Point3D\", \"x y z\")\n\nIn [64]: pd.DataFrame([Point3D(0, 0, 0), Point3D(0, 3, 5), Point(2, 3)])\nOut[64]: \n x  y    z\n0  0  0  0.0\n1  0  3  5.0\n2  2  3  NaN \n```", "```py\nIn [65]: from dataclasses import make_dataclass\n\nIn [66]: Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n\nIn [67]: pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\nOut[67]: \n x  y\n0  0  0\n1  0  3\n2  2  3 \n```", "```py\nIn [68]: pd.DataFrame.from_dict(dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]))\nOut[68]: \n A  B\n0  1  4\n1  2  5\n2  3  6 \n```", "```py\nIn [69]: pd.DataFrame.from_dict(\n ....:    dict([(\"A\", [1, 2, 3]), (\"B\", [4, 5, 6])]),\n ....:    orient=\"index\",\n ....:    columns=[\"one\", \"two\", \"three\"],\n ....: )\n ....: \nOut[69]: \n one  two  three\nA    1    2      3\nB    4    5      6 \n```", "```py\nIn [70]: data\nOut[70]: \narray([(1, 2., b'Hello'), (2, 3., b'World')],\n dtype=[('A', '<i4'), ('B', '<f4'), ('C', 'S10')])\n\nIn [71]: pd.DataFrame.from_records(data, index=\"C\")\nOut[71]: \n A    B\nC \nb'Hello'  1  2.0\nb'World'  2  3.0 \n```", "```py\nIn [72]: df[\"one\"]\nOut[72]: \na    1.0\nb    2.0\nc    3.0\nd    NaN\nName: one, dtype: float64\n\nIn [73]: df[\"three\"] = df[\"one\"] * df[\"two\"]\n\nIn [74]: df[\"flag\"] = df[\"one\"] > 2\n\nIn [75]: df\nOut[75]: \n one  two  three   flag\na  1.0  1.0    1.0  False\nb  2.0  2.0    4.0  False\nc  3.0  3.0    9.0   True\nd  NaN  4.0    NaN  False \n```", "```py\nIn [76]: del df[\"two\"]\n\nIn [77]: three = df.pop(\"three\")\n\nIn [78]: df\nOut[78]: \n one   flag\na  1.0  False\nb  2.0  False\nc  3.0   True\nd  NaN  False \n```", "```py\nIn [79]: df[\"foo\"] = \"bar\"\n\nIn [80]: df\nOut[80]: \n one   flag  foo\na  1.0  False  bar\nb  2.0  False  bar\nc  3.0   True  bar\nd  NaN  False  bar \n```", "```py\nIn [81]: df[\"one_trunc\"] = df[\"one\"][:2]\n\nIn [82]: df\nOut[82]: \n one   flag  foo  one_trunc\na  1.0  False  bar        1.0\nb  2.0  False  bar        2.0\nc  3.0   True  bar        NaN\nd  NaN  False  bar        NaN \n```", "```py\nIn [83]: df.insert(1, \"bar\", df[\"one\"])\n\nIn [84]: df\nOut[84]: \n one  bar   flag  foo  one_trunc\na  1.0  1.0  False  bar        1.0\nb  2.0  2.0  False  bar        2.0\nc  3.0  3.0   True  bar        NaN\nd  NaN  NaN  False  bar        NaN \n```", "```py\nIn [85]: iris = pd.read_csv(\"data/iris.data\")\n\nIn [86]: iris.head()\nOut[86]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name\n0          5.1         3.5          1.4         0.2  Iris-setosa\n1          4.9         3.0          1.4         0.2  Iris-setosa\n2          4.7         3.2          1.3         0.2  Iris-setosa\n3          4.6         3.1          1.5         0.2  Iris-setosa\n4          5.0         3.6          1.4         0.2  Iris-setosa\n\nIn [87]: iris.assign(sepal_ratio=iris[\"SepalWidth\"] / iris[\"SepalLength\"]).head()\nOut[87]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [88]: iris.assign(sepal_ratio=lambda x: (x[\"SepalWidth\"] / x[\"SepalLength\"])).head()\nOut[88]: \n SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio\n0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275\n1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245\n2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851\n3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913\n4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000 \n```", "```py\nIn [89]: (\n ....:    iris.query(\"SepalLength > 5\")\n ....:    .assign(\n ....:        SepalRatio=lambda x: x.SepalWidth / x.SepalLength,\n ....:        PetalRatio=lambda x: x.PetalWidth / x.PetalLength,\n ....:    )\n ....:    .plot(kind=\"scatter\", x=\"SepalRatio\", y=\"PetalRatio\")\n ....: )\n ....: \nOut[89]: <Axes: xlabel='SepalRatio', ylabel='PetalRatio'> \n```", "```py\nIn [90]: dfa = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\nIn [91]: dfa.assign(C=lambda x: x[\"A\"] + x[\"B\"], D=lambda x: x[\"A\"] + x[\"C\"])\nOut[91]: \n A  B  C   D\n0  1  4  5   6\n1  2  5  7   9\n2  3  6  9  12 \n```", "```py\nIn [92]: df.loc[\"b\"]\nOut[92]: \none            2.0\nbar            2.0\nflag         False\nfoo            bar\none_trunc      2.0\nName: b, dtype: object\n\nIn [93]: df.iloc[2]\nOut[93]: \none           3.0\nbar           3.0\nflag         True\nfoo           bar\none_trunc     NaN\nName: c, dtype: object \n```", "```py\nIn [94]: df = pd.DataFrame(np.random.randn(10, 4), columns=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [95]: df2 = pd.DataFrame(np.random.randn(7, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [96]: df + df2\nOut[96]: \n A         B         C   D\n0  0.045691 -0.014138  1.380871 NaN\n1 -0.955398 -1.501007  0.037181 NaN\n2 -0.662690  1.534833 -0.859691 NaN\n3 -2.452949  1.237274 -0.133712 NaN\n4  1.414490  1.951676 -2.320422 NaN\n5 -0.494922 -1.649727 -1.084601 NaN\n6 -1.047551 -0.748572 -0.805479 NaN\n7       NaN       NaN       NaN NaN\n8       NaN       NaN       NaN NaN\n9       NaN       NaN       NaN NaN \n```", "```py\nIn [97]: df - df.iloc[0]\nOut[97]: \n A         B         C         D\n0  0.000000  0.000000  0.000000  0.000000\n1 -1.359261 -0.248717 -0.453372 -1.754659\n2  0.253128  0.829678  0.010026 -1.991234\n3 -1.311128  0.054325 -1.724913 -1.620544\n4  0.573025  1.500742 -0.676070  1.367331\n5 -1.741248  0.781993 -1.241620 -2.053136\n6 -1.240774 -0.869551 -0.153282  0.000430\n7 -0.743894  0.411013 -0.929563 -0.282386\n8 -1.194921  1.320690  0.238224 -1.482644\n9  2.293786  1.856228  0.773289 -1.446531 \n```", "```py\nIn [98]: df * 5 + 2\nOut[98]: \n A         B         C          D\n0   3.359299 -0.124862  4.835102   3.381160\n1  -3.437003 -1.368449  2.568242  -5.392133\n2   4.624938  4.023526  4.885230  -6.575010\n3  -3.196342  0.146766 -3.789461  -4.721559\n4   6.224426  7.378849  1.454750  10.217815\n5  -5.346940  3.785103 -1.373001  -6.884519\n6  -2.844569 -4.472618  4.068691   3.383309\n7  -0.360173  1.930201  0.187285   1.969232\n8  -2.615303  6.478587  6.026220  -4.032059\n9  14.828230  9.156280  8.701544  -3.851494\n\nIn [99]: 1 / df\nOut[99]: \n A          B         C           D\n0  3.678365  -2.353094  1.763605    3.620145\n1 -0.919624  -1.484363  8.799067   -0.676395\n2  1.904807   2.470934  1.732964   -0.583090\n3 -0.962215  -2.697986 -0.863638   -0.743875\n4  1.183593   0.929567 -9.170108    0.608434\n5 -0.680555   2.800959 -1.482360   -0.562777\n6 -1.032084  -0.772485  2.416988    3.614523\n7 -2.118489 -71.634509 -2.758294 -162.507295\n8 -1.083352   1.116424  1.241860   -0.828904\n9  0.389765   0.698687  0.746097   -0.854483\n\nIn [100]: df ** 4\nOut[100]: \n A             B         C             D\n0   0.005462  3.261689e-02  0.103370  5.822320e-03\n1   1.398165  2.059869e-01  0.000167  4.777482e+00\n2   0.075962  2.682596e-02  0.110877  8.650845e+00\n3   1.166571  1.887302e-02  1.797515  3.265879e+00\n4   0.509555  1.339298e+00  0.000141  7.297019e+00\n5   4.661717  1.624699e-02  0.207103  9.969092e+00\n6   0.881334  2.808277e+00  0.029302  5.858632e-03\n7   0.049647  3.797614e-08  0.017276  1.433866e-09\n8   0.725974  6.437005e-01  0.420446  2.118275e+00\n9  43.329821  4.196326e+00  3.227153  1.875802e+00 \n```", "```py\nIn [101]: df1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [0, 1, 1]}, dtype=bool)\n\nIn [102]: df2 = pd.DataFrame({\"a\": [0, 1, 1], \"b\": [1, 1, 0]}, dtype=bool)\n\nIn [103]: df1 & df2\nOut[103]: \n a      b\n0  False  False\n1  False   True\n2   True  False\n\nIn [104]: df1 | df2\nOut[104]: \n a     b\n0  True  True\n1  True  True\n2  True  True\n\nIn [105]: df1 ^ df2\nOut[105]: \n a      b\n0   True   True\n1   True  False\n2  False   True\n\nIn [106]: -df1\nOut[106]: \n a      b\n0  False   True\n1   True  False\n2  False  False \n```", "```py\n# only show the first 5 rows\nIn [107]: df[:5].T\nOut[107]: \n 0         1         2         3         4\nA  0.271860 -1.087401  0.524988 -1.039268  0.844885\nB -0.424972 -0.673690  0.404705 -0.370647  1.075770\nC  0.567020  0.113648  0.577046 -1.157892 -0.109050\nD  0.276232 -1.478427 -1.715002 -1.344312  1.643563 \n```", "```py\nIn [108]: np.exp(df)\nOut[108]: \n A         B         C         D\n0   1.312403  0.653788  1.763006  1.318154\n1   0.337092  0.509824  1.120358  0.227996\n2   1.690438  1.498861  1.780770  0.179963\n3   0.353713  0.690288  0.314148  0.260719\n4   2.327710  2.932249  0.896686  5.173571\n5   0.230066  1.429065  0.509360  0.169161\n6   0.379495  0.274028  1.512461  1.318720\n7   0.623732  0.986137  0.695904  0.993865\n8   0.397301  2.449092  2.237242  0.299269\n9  13.009059  4.183951  3.820223  0.310274\n\nIn [109]: np.asarray(df)\nOut[109]: \narray([[ 0.2719, -0.425 ,  0.567 ,  0.2762],\n [-1.0874, -0.6737,  0.1136, -1.4784],\n [ 0.525 ,  0.4047,  0.577 , -1.715 ],\n [-1.0393, -0.3706, -1.1579, -1.3443],\n [ 0.8449,  1.0758, -0.109 ,  1.6436],\n [-1.4694,  0.357 , -0.6746, -1.7769],\n [-0.9689, -1.2945,  0.4137,  0.2767],\n [-0.472 , -0.014 , -0.3625, -0.0062],\n [-0.9231,  0.8957,  0.8052, -1.2064],\n [ 2.5656,  1.4313,  1.3403, -1.1703]]) \n```", "```py\nIn [110]: ser = pd.Series([1, 2, 3, 4])\n\nIn [111]: np.exp(ser)\nOut[111]: \n0     2.718282\n1     7.389056\n2    20.085537\n3    54.598150\ndtype: float64 \n```", "```py\nIn [112]: ser1 = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n\nIn [113]: ser2 = pd.Series([1, 3, 5], index=[\"b\", \"a\", \"c\"])\n\nIn [114]: ser1\nOut[114]: \na    1\nb    2\nc    3\ndtype: int64\n\nIn [115]: ser2\nOut[115]: \nb    1\na    3\nc    5\ndtype: int64\n\nIn [116]: np.remainder(ser1, ser2)\nOut[116]: \na    1\nb    0\nc    3\ndtype: int64 \n```", "```py\nIn [117]: ser3 = pd.Series([2, 4, 6], index=[\"b\", \"c\", \"d\"])\n\nIn [118]: ser3\nOut[118]: \nb    2\nc    4\nd    6\ndtype: int64\n\nIn [119]: np.remainder(ser1, ser3)\nOut[119]: \na    NaN\nb    0.0\nc    3.0\nd    NaN\ndtype: float64 \n```", "```py\nIn [120]: ser = pd.Series([1, 2, 3])\n\nIn [121]: idx = pd.Index([4, 5, 6])\n\nIn [122]: np.maximum(ser, idx)\nOut[122]: \n0    4\n1    5\n2    6\ndtype: int64 \n```", "```py\nIn [123]: baseball = pd.read_csv(\"data/baseball.csv\")\n\nIn [124]: print(baseball)\n id     player  year  stint team  lg  ...    so  ibb  hbp   sh   sf  gidp\n0   88641  womacto01  2006      2  CHN  NL  ...   4.0  0.0  0.0  3.0  0.0   0.0\n1   88643  schilcu01  2006      1  BOS  AL  ...   1.0  0.0  0.0  0.0  0.0   0.0\n..    ...        ...   ...    ...  ...  ..  ...   ...  ...  ...  ...  ...   ...\n98  89533   aloumo01  2007      1  NYN  NL  ...  30.0  5.0  2.0  0.0  3.0  13.0\n99  89534  alomasa02  2007      1  NYN  NL  ...   3.0  0.0  0.0  0.0  0.0   0.0\n\n[100 rows x 23 columns]\n\nIn [125]: baseball.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 100 entries, 0 to 99\nData columns (total 23 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   id      100 non-null    int64 \n 1   player  100 non-null    object \n 2   year    100 non-null    int64 \n 3   stint   100 non-null    int64 \n 4   team    100 non-null    object \n 5   lg      100 non-null    object \n 6   g       100 non-null    int64 \n 7   ab      100 non-null    int64 \n 8   r       100 non-null    int64 \n 9   h       100 non-null    int64 \n 10  X2b     100 non-null    int64 \n 11  X3b     100 non-null    int64 \n 12  hr      100 non-null    int64 \n 13  rbi     100 non-null    float64\n 14  sb      100 non-null    float64\n 15  cs      100 non-null    float64\n 16  bb      100 non-null    int64 \n 17  so      100 non-null    float64\n 18  ibb     100 non-null    float64\n 19  hbp     100 non-null    float64\n 20  sh      100 non-null    float64\n 21  sf      100 non-null    float64\n 22  gidp    100 non-null    float64\ndtypes: float64(9), int64(11), object(3)\nmemory usage: 18.1+ KB \n```", "```py\nIn [126]: print(baseball.iloc[-20:, :12].to_string())\n id     player  year  stint team  lg    g   ab   r    h  X2b  X3b\n80  89474  finlest01  2007      1  COL  NL   43   94   9   17    3    0\n81  89480  embreal01  2007      1  OAK  AL    4    0   0    0    0    0\n82  89481  edmonji01  2007      1  SLN  NL  117  365  39   92   15    2\n83  89482  easleda01  2007      1  NYN  NL   76  193  24   54    6    0\n84  89489  delgaca01  2007      1  NYN  NL  139  538  71  139   30    0\n85  89493  cormirh01  2007      1  CIN  NL    6    0   0    0    0    0\n86  89494  coninje01  2007      2  NYN  NL   21   41   2    8    2    0\n87  89495  coninje01  2007      1  CIN  NL   80  215  23   57   11    1\n88  89497  clemero02  2007      1  NYA  AL    2    2   0    1    0    0\n89  89498  claytro01  2007      2  BOS  AL    8    6   1    0    0    0\n90  89499  claytro01  2007      1  TOR  AL   69  189  23   48   14    0\n91  89501  cirilje01  2007      2  ARI  NL   28   40   6    8    4    0\n92  89502  cirilje01  2007      1  MIN  AL   50  153  18   40    9    2\n93  89521  bondsba01  2007      1  SFN  NL  126  340  75   94   14    0\n94  89523  biggicr01  2007      1  HOU  NL  141  517  68  130   31    3\n95  89525  benitar01  2007      2  FLO  NL   34    0   0    0    0    0\n96  89526  benitar01  2007      1  SFN  NL   19    0   0    0    0    0\n97  89530  ausmubr01  2007      1  HOU  NL  117  349  38   82   16    3\n98  89533   aloumo01  2007      1  NYN  NL   87  328  51  112   19    1\n99  89534  alomasa02  2007      1  NYN  NL    8   22   1    3    1    0 \n```", "```py\nIn [127]: pd.DataFrame(np.random.randn(3, 12))\nOut[127]: \n 0         1         2   ...        9         10        11\n0 -1.226825  0.769804 -1.281247  ... -1.110336 -0.619976  0.149748\n1 -0.732339  0.687738  0.176444  ...  1.462696 -1.743161 -0.826591\n2 -0.345352  1.314232  0.690579  ...  0.896171 -0.487602 -0.082240\n\n[3 rows x 12 columns] \n```", "```py\nIn [128]: pd.set_option(\"display.width\", 40)  # default is 80\n\nIn [129]: pd.DataFrame(np.random.randn(3, 12))\nOut[129]: \n 0         1         2   ...        9         10        11\n0 -2.182937  0.380396  0.084844  ... -0.023688  2.410179  1.450520\n1  0.206053 -0.251905 -2.213588  ... -0.025747 -0.988387  0.094055\n2  1.262731  1.289997  0.082423  ... -0.281461  0.030711  0.109121\n\n[3 rows x 12 columns] \n```", "```py\nIn [130]: datafile = {\n .....:    \"filename\": [\"filename_01\", \"filename_02\"],\n .....:    \"path\": [\n .....:        \"media/user_name/storage/folder_01/filename_01\",\n .....:        \"media/user_name/storage/folder_02/filename_02\",\n .....:    ],\n .....: }\n .....: \n\nIn [131]: pd.set_option(\"display.max_colwidth\", 30)\n\nIn [132]: pd.DataFrame(datafile)\nOut[132]: \n filename                           path\n0  filename_01  media/user_name/storage/fo...\n1  filename_02  media/user_name/storage/fo...\n\nIn [133]: pd.set_option(\"display.max_colwidth\", 100)\n\nIn [134]: pd.DataFrame(datafile)\nOut[134]: \n filename                                           path\n0  filename_01  media/user_name/storage/folder_01/filename_01\n1  filename_02  media/user_name/storage/folder_02/filename_02 \n```", "```py\nIn [135]: df = pd.DataFrame({\"foo1\": np.random.randn(5), \"foo2\": np.random.randn(5)})\n\nIn [136]: df\nOut[136]: \n foo1      foo2\n0  1.126203  0.781836\n1 -0.977349 -1.071357\n2  1.474071  0.441153\n3 -0.064034  2.353925\n4 -1.282782  0.583787\n\nIn [137]: df.foo1\nOut[137]: \n0    1.126203\n1   -0.977349\n2    1.474071\n3   -0.064034\n4   -1.282782\nName: foo1, dtype: float64 \n```", "```py\nIn [5]: df.foo<TAB>  # noqa: E225, E999\ndf.foo1  df.foo2 \n```"]