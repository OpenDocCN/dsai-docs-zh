- en: Internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/development/internals.html](https://pandas.pydata.org/docs/development/internals.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section will provide a look into some of pandas internals. It’s primarily
    intended for developers of pandas itself.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In pandas there are a few objects implemented which can serve as valid containers
    for the axis labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"):
    the generic “ordered set” object, an ndarray of object dtype assuming nothing
    about its contents. The labels must be hashable (and likely immutable) and unique.
    Populates a dict of label to location in Cython to do `O(1)` lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex"):
    the standard hierarchical index object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"): An Index object with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") boxed elements (impl are the int64 values)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex"): An Index object with [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") boxed elements (impl are the in64 values)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex"): An Index object with Period elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are functions that make the creation of a regular index easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"): fixed frequency date range generated from a time rule or
    DateOffset. An ndarray of Python datetime objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range"): fixed frequency date range generated from a time rule
    or DateOffset. An ndarray of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") objects, representing timespans'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Custom [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    subclasses are not supported, custom behavior should be implemented using the
    `ExtensionArray` interface instead.
  prefs: []
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Internally, the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") consists of a few things: the **levels**, the integer **codes**,
    and the level **names**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can probably guess that the codes determine which unique element is identified
    with that location at each layer of the index. It’s important to note that sortedness
    is determined **solely** from the integer codes and does not check (or care) whether
    the levels themselves are sorted. Fortunately, the constructors [`from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples") and [`from_arrays()`](../reference/api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays") ensure that this is true, but if you compute
    the levels and codes yourself, please be careful.
  prefs: []
  type: TYPE_NORMAL
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'pandas extends NumPy’s type system with custom types, like [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or datetimes with a timezone, so we have multiple notions
    of “values”. For 1-D containers (`Index` classes and `Series`) we have the following
    convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cls._values` refers is the “best possible” array. This could be an `ndarray`
    or `ExtensionArray`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, for example, `Series[category]._values` is a `Categorical`.
  prefs: []
  type: TYPE_NORMAL
- en: '## Subclassing pandas data structures'
  prefs: []
  type: TYPE_NORMAL
- en: This section has been moved to [Subclassing pandas data structures](extending.html#extending-subclassing-pandas).
  prefs: []
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In pandas there are a few objects implemented which can serve as valid containers
    for the axis labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"):
    the generic “ordered set” object, an ndarray of object dtype assuming nothing
    about its contents. The labels must be hashable (and likely immutable) and unique.
    Populates a dict of label to location in Cython to do `O(1)` lookups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex"):
    the standard hierarchical index object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"): An Index object with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") boxed elements (impl are the int64 values)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex"): An Index object with [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") boxed elements (impl are the in64 values)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex"): An Index object with Period elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are functions that make the creation of a regular index easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"): fixed frequency date range generated from a time rule or
    DateOffset. An ndarray of Python datetime objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range"): fixed frequency date range generated from a time rule
    or DateOffset. An ndarray of [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") objects, representing timespans'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Custom [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    subclasses are not supported, custom behavior should be implemented using the
    `ExtensionArray` interface instead.
  prefs: []
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Internally, the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") consists of a few things: the **levels**, the integer **codes**,
    and the level **names**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can probably guess that the codes determine which unique element is identified
    with that location at each layer of the index. It’s important to note that sortedness
    is determined **solely** from the integer codes and does not check (or care) whether
    the levels themselves are sorted. Fortunately, the constructors [`from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples") and [`from_arrays()`](../reference/api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays") ensure that this is true, but if you compute
    the levels and codes yourself, please be careful.
  prefs: []
  type: TYPE_NORMAL
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'pandas extends NumPy’s type system with custom types, like [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or datetimes with a timezone, so we have multiple notions
    of “values”. For 1-D containers (`Index` classes and `Series`) we have the following
    convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cls._values` refers is the “best possible” array. This could be an `ndarray`
    or `ExtensionArray`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, for example, `Series[category]._values` is a `Categorical`.
  prefs: []
  type: TYPE_NORMAL
- en: MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Internally, the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") consists of a few things: the **levels**, the integer **codes**,
    and the level **names**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can probably guess that the codes determine which unique element is identified
    with that location at each layer of the index. It’s important to note that sortedness
    is determined **solely** from the integer codes and does not check (or care) whether
    the levels themselves are sorted. Fortunately, the constructors [`from_tuples()`](../reference/api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples") and [`from_arrays()`](../reference/api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays") ensure that this is true, but if you compute
    the levels and codes yourself, please be careful.
  prefs: []
  type: TYPE_NORMAL
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'pandas extends NumPy’s type system with custom types, like [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") or datetimes with a timezone, so we have multiple notions
    of “values”. For 1-D containers (`Index` classes and `Series`) we have the following
    convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cls._values` refers is the “best possible” array. This could be an `ndarray`
    or `ExtensionArray`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, for example, `Series[category]._values` is a `Categorical`.
  prefs: []
  type: TYPE_NORMAL
- en: '## Subclassing pandas data structures'
  prefs: []
  type: TYPE_NORMAL
- en: This section has been moved to [Subclassing pandas data structures](extending.html#extending-subclassing-pandas).
  prefs: []
  type: TYPE_NORMAL
