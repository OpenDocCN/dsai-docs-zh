- en: numpy.piecewise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.piecewise.html](https://numpy.org/doc/1.26/reference/generated/numpy.piecewise.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate a piecewise-defined function.
  prefs: []
  type: TYPE_NORMAL
- en: Given a set of conditions and corresponding functions, evaluate each function
    on the input data wherever its condition is true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The input domain.
  prefs: []
  type: TYPE_NORMAL
- en: '**condlist**list of bool arrays or bool scalars'
  prefs: []
  type: TYPE_NORMAL
- en: Each boolean array corresponds to a function in *funclist*. Wherever *condlist[i]*
    is True, *funclist[i](x)* is used as the output value.
  prefs: []
  type: TYPE_NORMAL
- en: Each boolean array in *condlist* selects a piece of *x*, and should therefore
    be of the same shape as *x*.
  prefs: []
  type: TYPE_NORMAL
- en: The length of *condlist* must correspond to that of *funclist*. If one extra
    function is given, i.e. if `len(funclist) == len(condlist) + 1`, then that extra
    function is the default value, used wherever all conditions are false.
  prefs: []
  type: TYPE_NORMAL
- en: '**funclist**list of callables, f(x,*args,**kw), or scalars'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each function is evaluated over *x* wherever its corresponding condition is
    True. It should take a 1d array as input and give an 1d array or a scalar value
    as output. If, instead of a callable, a scalar is provided then a constant function
    (`lambda x: scalar`) is assumed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any further arguments given to [`piecewise`](#numpy.piecewise "numpy.piecewise")
    are passed to the functions upon execution, i.e., if called `piecewise(..., ...,
    1, 'a')`, then each function is called as `f(x, 1, 'a')`.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments used in calling [`piecewise`](#numpy.piecewise "numpy.piecewise")
    are passed to the functions upon execution, i.e., if called `piecewise(..., ...,
    alpha=1)`, then each function is called as `f(x, alpha=1)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The output is the same shape and type as x and is found by calling the functions
    in *funclist* on the appropriate portions of *x*, as defined by the boolean arrays
    in *condlist*. Portions not covered by any condition have a default value of 0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`choose`](numpy.choose.html#numpy.choose "numpy.choose"), [`select`](numpy.select.html#numpy.select
    "numpy.select"), [`where`](numpy.where.html#numpy.where "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to choose or select, except that functions are evaluated on
    elements of *x* that satisfy the corresponding condition from *condlist*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Define the sigma function, which is -1 for `x < 0` and +1 for `x >= 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Define the absolute value, which is `-x` for `x <0` and `x` for `x >= 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Apply the same function to a scalar value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
