- en: numpy.unique
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.unique.html](https://numpy.org/doc/1.26/reference/generated/numpy.unique.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the unique elements of an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the sorted unique elements of an array. There are three optional outputs
    in addition to the unique elements:'
  prefs: []
  type: TYPE_NORMAL
- en: the indices of the input array that give the unique values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the indices of the unique array that reconstruct the input array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the number of times each unique value comes up in the input array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ar**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array. Unless *axis* is specified, this will be flattened if it is not
    already 1-D.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_index**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, also return the indices of *ar* (along the specified axis, if provided,
    or in the flattened array) that result in the unique array.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_inverse**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, also return the indices of the unique array (for the specified axis,
    if provided) that can be used to reconstruct *ar*.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_counts**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, also return the number of times each unique item appears in *ar*.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis to operate on. If None, *ar* will be flattened. If an integer, the
    subarrays indexed by the given axis will be flattened and treated as the elements
    of a 1-D array with the dimension of the given axis, see the notes for more details.
    Object arrays or structured arrays that contain objects are not supported if the
    *axis* kwarg is used. The default is None.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.13.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**equal_nan**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, collapses multiple NaN values in the return array into one.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.24.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**unique**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The sorted unique values.
  prefs: []
  type: TYPE_NORMAL
- en: '**unique_indices**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The indices of the first occurrences of the unique values in the original array.
    Only provided if *return_index* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**unique_inverse**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The indices to reconstruct the original array from the unique array. Only provided
    if *return_inverse* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**unique_counts**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of times each of the unique values comes up in the original array.
    Only provided if *return_counts* is True.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.lib.arraysetops`](numpy.lib.arraysetops.html#module-numpy.lib.arraysetops
    "numpy.lib.arraysetops")'
  prefs: []
  type: TYPE_NORMAL
- en: Module with a number of other functions for performing set operations on arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[`repeat`](numpy.repeat.html#numpy.repeat "numpy.repeat")'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat elements of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When an axis is specified the subarrays indexed by the axis are sorted. This
    is done by making the specified axis the first dimension of the array (move the
    axis to the first dimension to keep the order of the other axes) and then flattening
    the subarrays in C order. The flattened subarrays are then viewed as a structured
    type with each element given a label, with the effect that we end up with a 1-D
    array of structured types that can be treated in the same way as any other 1-D
    array. The result is that the flattened subarrays are sorted in lexicographic
    order starting with the first element.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Return the unique rows of a 2D array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the indices of the original array that give the unique values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Reconstruct the input array from the unique values and inverse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Reconstruct the input values from the unique values and counts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
