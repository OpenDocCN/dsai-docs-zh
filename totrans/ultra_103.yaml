- en: Docker Quickstart Guide for Ultralytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/guides/docker-quickstart/`](https://docs.ultralytics.com/guides/docker-quickstart/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Ultralytics Docker Package Visual](img/59cab89e8385d76430661f6e35165197.png)'
  prefs: []
  type: TYPE_IMG
- en: This guide serves as a comprehensive introduction to setting up a Docker environment
    for your Ultralytics projects. [Docker](https://docker.com/) is a platform for
    developing, shipping, and running applications in containers. It is particularly
    beneficial for ensuring that the software will always run the same, regardless
    of where it's deployed. For more details, visit the Ultralytics Docker repository
    on [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics).
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Image Version](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker
    Pulls](https://hub.docker.com/r/ultralytics/ultralytics)'
  prefs: []
  type: TYPE_IMG
- en: What You Will Learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up Docker with NVIDIA support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Ultralytics Docker images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Ultralytics in a Docker container with CPU or GPU support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a Display Server with Docker to Show Ultralytics Detection Results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting local directories into the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure Docker is installed on your system. If not, you can download and install
    it from [Docker's website](https://www.docker.com/products/docker-desktop).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that your system has an NVIDIA GPU and NVIDIA drivers are installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Docker with NVIDIA Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, verify that the NVIDIA drivers are properly installed by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing NVIDIA Docker Runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s install the NVIDIA Docker runtime to enable GPU support in Docker
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Verify NVIDIA Runtime with Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run `docker info | grep -i runtime` to ensure that `nvidia` appears in the
    list of runtimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ultralytics Docker Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ultralytics offers several Docker images optimized for various platforms and
    use-cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dockerfile:** GPU image, ideal for training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-arm64:** For ARM64 architecture, suitable for devices like Raspberry
    Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-cpu:** CPU-only version for inference and non-GPU environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-jetson:** Optimized for NVIDIA Jetson devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-python:** Minimal Python environment for lightweight applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-conda:** Includes [Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)
    and Ultralytics package installed via Conda.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To pull the latest image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Running Ultralytics in Docker Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s how to execute the Ultralytics Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: Using only the CPU
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using GPUs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `-it` flag assigns a pseudo-TTY and keeps stdin open, allowing you to interact
    with the container. The `--ipc=host` flag enables sharing of host's IPC namespace,
    essential for sharing memory between processes. The `--gpus` flag allows the container
    to access the host's GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: Running Ultralytics in Docker Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s how to execute the Ultralytics Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: Using only the CPU
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using GPUs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `-it` flag assigns a pseudo-TTY and keeps stdin open, allowing you to interact
    with the container. The `--ipc=host` flag enables sharing of host's IPC namespace,
    essential for sharing memory between processes. The `--gpus` flag allows the container
    to access the host's GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: Note on File Accessibility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To work with files on your local machine within the container, you can use
    Docker volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Replace `/path/on/host` with the directory path on your local machine and `/path/in/container`
    with the desired path inside the Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Run graphical user interface (GUI) applications in a Docker Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Highly Experimental - User Assumes All Risk
  prefs: []
  type: TYPE_NORMAL
- en: The following instructions are experimental. Sharing a X11 socket with a Docker
    container poses potential security risks. Therefore, it's recommended to test
    this solution only in a controlled environment. For more information, refer to
    these resources on how to use `xhost`^([(1)](http://users.stat.umn.edu/~geyer/secure.html)[(2)](https://linux.die.net/man/1/xhost)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker is primarily used to containerize background applications and CLI programs,
    but it can also run graphical programs. In the Linux world, two main graphic servers
    handle graphical display: [X11](https://www.x.org/wiki/) (also known as the X
    Window System) and [Wayland](https://wayland.freedesktop.org/). Before starting,
    it''s essential to determine which graphics server you are currently using. Run
    this command to find out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Setup and configuration of an X11 or Wayland display server is outside the scope
    of this guide. If the above command returns nothing, then you'll need to start
    by getting either working for your system before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Docker Container with a GUI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: <details class="info"><summary>Use GPUs</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re using X11, you can run the following command to allow the Docker
    container to access the X11 socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This command sets the `DISPLAY` environment variable to the host's display,
    mounts the X11 socket, and maps the `.Xauthority` file to the container. The `xhost
    +local:docker` command allows the Docker container to access the X11 server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Wayland, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This command sets the `DISPLAY` environment variable to the host's display,
    mounts the Wayland socket, and allows the Docker container to access the Wayland
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker with a GUI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now you can display graphical applications inside your Docker container. For
    example, you can run the following CLI command to visualize the predictions from
    a YOLOv8 model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <details class="info"><summary>Testing</summary>
  prefs: []
  type: TYPE_NORMAL
- en: A simple way to validate that the Docker group has access to the X11 server
    is to run a container with a GUI program like [`xclock`](https://www.x.org/archive/X11R6.8.1/doc/xclock.1.html)
    or [`xeyes`](https://www.x.org/releases/X11R7.5/doc/man/man1/xeyes.1.html). Alternatively,
    you can also install these programs in the Ultralytics Docker container to test
    the access to the X11 server of your GNU-Linux display server. If you run into
    any problems, consider setting the environment variable `-e QT_DEBUG_PLUGINS=1`.
    Setting this environment variable enables the output of debugging information,
    aiding in the troubleshooting process.</details>
  prefs: []
  type: TYPE_NORMAL
- en: When finished with Docker GUI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Revoke access
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, don't forget to revoke access from the Docker group when you're
    done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <details class="question"><summary>Want to view image results directly in the
    Terminal?</summary>
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the following guide on viewing the image results using a terminal</details>
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You're now set up to use Ultralytics with Docker and ready
    to take advantage of its powerful capabilities. For alternate installation methods,
    feel free to explore the Ultralytics quickstart documentation.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I set up Ultralytics with Docker?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To set up Ultralytics with Docker, first ensure that Docker is installed on
    your system. If you have an NVIDIA GPU, install the NVIDIA Docker runtime to enable
    GPU support. Then, pull the latest Ultralytics Docker image from Docker Hub using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: For detailed steps, refer to our Docker Quickstart Guide.
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of using Ultralytics Docker images for machine learning
    projects?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using Ultralytics Docker images ensures a consistent environment across different
    machines, replicating the same software and dependencies. This is particularly
    useful for collaborating across teams, running models on various hardware, and
    maintaining reproducibility. For GPU-based training, Ultralytics provides optimized
    Docker images such as `Dockerfile` for general GPU usage and `Dockerfile-jetson`
    for NVIDIA Jetson devices. Explore [Ultralytics Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How can I run Ultralytics YOLO in a Docker container with GPU support?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, ensure that the NVIDIA Docker runtime is installed and configured. Then,
    use the following command to run Ultralytics YOLO with GPU support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This command sets up a Docker container with GPU access. For additional details,
    see the Docker Quickstart Guide.
  prefs: []
  type: TYPE_NORMAL
- en: How do I visualize YOLO prediction results in a Docker container with a display
    server?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To visualize YOLO prediction results with a GUI in a Docker container, you
    need to allow Docker to access your display server. For systems running X11, the
    command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For systems running Wayland, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: More information can be found in the Run graphical user interface (GUI) applications
    in a Docker Container section.
  prefs: []
  type: TYPE_NORMAL
- en: Can I mount local directories into the Ultralytics Docker container?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yes, you can mount local directories into the Ultralytics Docker container
    using the `-v` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Replace `/path/on/host` with the directory on your local machine and `/path/in/container`
    with the desired path inside the container. This setup allows you to work with
    your local files within the container. For more information, refer to the relevant
    section on mounting local directories.
  prefs: []
  type: TYPE_NORMAL
