- en: Essential Functions in sympy.vector (docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/vector/api/vectorfunctions.html](https://docs.sympy.org/latest/modules/vector/api/vectorfunctions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Converts a vector in matrix form to a Vector instance.
  prefs: []
  type: TYPE_NORMAL
- en: It is assumed that the elements of the Matrix represent the measure numbers
    of the components of the vector along basis vectors of ‘system’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** : SymPy Matrix, Dimensions: (3, 1)'
  prefs: []
  type: TYPE_NORMAL
- en: The matrix to be converted to a vector
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**system** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system the vector is to be defined in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Global function for ‘express’ functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Re-expresses a Vector, Dyadic or scalar(sympyfiable) in the given coordinate
    system.
  prefs: []
  type: TYPE_NORMAL
- en: If ‘variables’ is True, then the coordinate variables (base scalars) of other
    coordinate systems present in the vector/scalar field or dyadic are also substituted
    in terms of the base scalars of the given system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Vector/Dyadic/scalar(sympyfiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The expression to re-express in CoordSys3D ‘system’
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**system: CoordSys3D**'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system the expr is to be expressed in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**system2: CoordSys3D**'
  prefs: []
  type: TYPE_NORMAL
- en: The other coordinate system required for re-expression (only for a Dyadic Expr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**variables** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies whether to substitute the coordinate variables present in expr, in
    terms of those of parameter system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns the curl of a vector field computed wrt the base scalars of the given
    coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vect** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The vector operand
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the divergence of a vector field computed wrt the base scalars of the
    given coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vector** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The vector operand
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Returns the vector gradient of a scalar field computed wrt the base scalars
    of the given coordinate system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**scalar_field** : SymPy Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The scalar field to compute the gradient of
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**doit** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the result is returned after calling .doit() on each component. Else,
    the returned expression contains Derivative instances
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Checks if a field is conservative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The field to check for conservative property
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Checks if a field is solenoidal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The field to check for solenoidal property
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Returns the scalar potential function of a field in a given coordinate system
    (without the added integration constant).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The vector field whose scalar potential function is to be calculated
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system to do the calculation in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns the scalar potential difference between two points in a certain coordinate
    system, wrt a given field.
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar field is provided, its values at the two points are considered.
    If a conservative vector field is provided, the values of its scalar potential
    function at the two points are used.
  prefs: []
  type: TYPE_NORMAL
- en: Returns (potential at point2) - (potential at point1)
  prefs: []
  type: TYPE_NORMAL
- en: The position vectors of the two Points are calculated wrt the origin of the
    coordinate system provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**field** : Vector/Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The field to calculate wrt
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**coord_sys** : CoordSys3D'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate system to do the calculations in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The initial Point in given coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**position2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The second Point in the given coordinate system
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Compute the integral of a vector/scalar field over a a region or a set of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Integrals over some objects of geometry module can also be calculated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Integrals over some simple implicit regions can be computed. But in most cases,
    it takes too long to compute over them. This is due to the expressions of parametric
    representation becoming large.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Integral of fields with respect to base scalars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
