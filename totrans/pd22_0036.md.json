["```py\nIn [1]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [2]: s\nOut[2]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [3]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [4]: df[\"B\"] = df[\"A\"].astype(\"category\")\n\nIn [5]: df\nOut[5]: \n A  B\n0  a  a\n1  b  b\n2  c  c\n3  a  a \n```", "```py\nIn [6]: df = pd.DataFrame({\"value\": np.random.randint(0, 100, 20)})\n\nIn [7]: labels = [\"{0} - {1}\".format(i, i + 9) for i in range(0, 100, 10)]\n\nIn [8]: df[\"group\"] = pd.cut(df.value, range(0, 105, 10), right=False, labels=labels)\n\nIn [9]: df.head(10)\nOut[9]: \n value    group\n0     65  60 - 69\n1     49  40 - 49\n2     56  50 - 59\n3     43  40 - 49\n4     43  40 - 49\n5     91  90 - 99\n6     32  30 - 39\n7     87  80 - 89\n8     36  30 - 39\n9      8    0 - 9 \n```", "```py\nIn [10]: raw_cat = pd.Categorical(\n ....:    [\"a\", \"b\", \"c\", \"a\"], categories=[\"b\", \"c\", \"d\"], ordered=False\n ....: )\n ....: \n\nIn [11]: s = pd.Series(raw_cat)\n\nIn [12]: s\nOut[12]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b', 'c', 'd']\n\nIn [13]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [14]: df[\"B\"] = raw_cat\n\nIn [15]: df\nOut[15]: \n A    B\n0  a  NaN\n1  b    b\n2  c    c\n3  a  NaN \n```", "```py\nIn [16]: df.dtypes\nOut[16]: \nA      object\nB    category\ndtype: object \n```", "```py\nIn [17]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")}, dtype=\"category\")\n\nIn [18]: df.dtypes\nOut[18]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [19]: df[\"A\"]\nOut[19]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [20]: df[\"B\"]\nOut[20]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [21]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [22]: df_cat = df.astype(\"category\")\n\nIn [23]: df_cat.dtypes\nOut[23]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [24]: df_cat[\"A\"]\nOut[24]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [25]: df_cat[\"B\"]\nOut[25]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [26]: from pandas.api.types import CategoricalDtype\n\nIn [27]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [28]: cat_type = CategoricalDtype(categories=[\"b\", \"c\", \"d\"], ordered=True)\n\nIn [29]: s_cat = s.astype(cat_type)\n\nIn [30]: s_cat\nOut[30]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b' < 'c' < 'd'] \n```", "```py\nIn [31]: from pandas.api.types import CategoricalDtype\n\nIn [32]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [33]: cat_type = CategoricalDtype(categories=list(\"abcd\"), ordered=True)\n\nIn [34]: df_cat = df.astype(cat_type)\n\nIn [35]: df_cat[\"A\"]\nOut[35]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd']\n\nIn [36]: df_cat[\"B\"]\nOut[36]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd'] \n```", "```py\nIn [37]: splitter = np.random.choice([0, 1], 5, p=[0.5, 0.5])\n\nIn [38]: s = pd.Series(pd.Categorical.from_codes(splitter, categories=[\"train\", \"test\"])) \n```", "```py\nIn [39]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [40]: s\nOut[40]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [41]: s2 = s.astype(\"category\")\n\nIn [42]: s2\nOut[42]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [43]: s2.astype(str)\nOut[43]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [44]: np.asarray(s2)\nOut[44]: array(['a', 'b', 'c', 'a'], dtype=object) \n```", "```py\nIn [45]: from pandas.api.types import CategoricalDtype\n\nIn [46]: CategoricalDtype([\"a\", \"b\", \"c\"])\nOut[46]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=False, categories_dtype=object)\n\nIn [47]: CategoricalDtype([\"a\", \"b\", \"c\"], ordered=True)\nOut[47]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=True, categories_dtype=object)\n\nIn [48]: CategoricalDtype()\nOut[48]: CategoricalDtype(categories=None, ordered=False, categories_dtype=None) \n```", "```py\nIn [49]: c1 = CategoricalDtype([\"a\", \"b\", \"c\"], ordered=False)\n\n# Equal, since order is not considered when ordered=False\nIn [50]: c1 == CategoricalDtype([\"b\", \"c\", \"a\"], ordered=False)\nOut[50]: True\n\n# Unequal, since the second CategoricalDtype is ordered\nIn [51]: c1 == CategoricalDtype([\"a\", \"b\", \"c\"], ordered=True)\nOut[51]: False \n```", "```py\nIn [52]: c1 == \"category\"\nOut[52]: True \n```", "```py\nIn [53]: cat = pd.Categorical([\"a\", \"c\", \"c\", np.nan], categories=[\"b\", \"a\", \"c\"])\n\nIn [54]: df = pd.DataFrame({\"cat\": cat, \"s\": [\"a\", \"c\", \"c\", np.nan]})\n\nIn [55]: df.describe()\nOut[55]: \n cat  s\ncount    3  3\nunique   2  2\ntop      c  c\nfreq     2  2\n\nIn [56]: df[\"cat\"].describe()\nOut[56]: \ncount     3\nunique    2\ntop       c\nfreq      2\nName: cat, dtype: object \n```", "```py\nIn [57]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [58]: s.cat.categories\nOut[58]: Index(['a', 'b', 'c'], dtype='object')\n\nIn [59]: s.cat.ordered\nOut[59]: False \n```", "```py\nIn [60]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], categories=[\"c\", \"b\", \"a\"]))\n\nIn [61]: s.cat.categories\nOut[61]: Index(['c', 'b', 'a'], dtype='object')\n\nIn [62]: s.cat.ordered\nOut[62]: False \n```", "```py\nIn [63]: s = pd.Series(list(\"babc\")).astype(CategoricalDtype(list(\"abcd\")))\n\nIn [64]: s\nOut[64]: \n0    b\n1    a\n2    b\n3    c\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n# categories\nIn [65]: s.cat.categories\nOut[65]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\n# uniques\nIn [66]: s.unique()\nOut[66]: \n['b', 'a', 'c']\nCategories (4, object): ['a', 'b', 'c', 'd'] \n```", "```py\nIn [67]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [68]: s\nOut[68]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [69]: new_categories = [\"Group %s\" % g for g in s.cat.categories]\n\nIn [70]: s = s.cat.rename_categories(new_categories)\n\nIn [71]: s\nOut[71]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c']\n\n# You can also pass a dict-like object to map the renaming\nIn [72]: s = s.cat.rename_categories({1: \"x\", 2: \"y\", 3: \"z\"})\n\nIn [73]: s\nOut[73]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [74]: try:\n ....:    s = s.cat.rename_categories([1, 1, 1])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories must be unique \n```", "```py\nIn [75]: try:\n ....:    s = s.cat.rename_categories([1, 2, np.nan])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories cannot be null \n```", "```py\nIn [76]: s = s.cat.add_categories([4])\n\nIn [77]: s.cat.categories\nOut[77]: Index(['Group a', 'Group b', 'Group c', 4], dtype='object')\n\nIn [78]: s\nOut[78]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (4, object): ['Group a', 'Group b', 'Group c', 4] \n```", "```py\nIn [79]: s = s.cat.remove_categories([4])\n\nIn [80]: s\nOut[80]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [81]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"a\"], categories=[\"a\", \"b\", \"c\", \"d\"]))\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\nIn [83]: s.cat.remove_unused_categories()\nOut[83]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b'] \n```", "```py\nIn [84]: s = pd.Series([\"one\", \"two\", \"four\", \"-\"], dtype=\"category\")\n\nIn [85]: s\nOut[85]: \n0     one\n1     two\n2    four\n3       -\ndtype: category\nCategories (4, object): ['-', 'four', 'one', 'two']\n\nIn [86]: s = s.cat.set_categories([\"one\", \"two\", \"three\", \"four\"])\n\nIn [87]: s\nOut[87]: \n0     one\n1     two\n2    four\n3     NaN\ndtype: category\nCategories (4, object): ['one', 'two', 'three', 'four'] \n```", "```py\nIn [88]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], ordered=False))\n\nIn [89]: s = s.sort_values()\n\nIn [90]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"]).astype(CategoricalDtype(ordered=True))\n\nIn [91]: s = s.sort_values()\n\nIn [92]: s\nOut[92]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\nIn [93]: s.min(), s.max()\nOut[93]: ('a', 'c') \n```", "```py\nIn [94]: s.cat.as_ordered()\nOut[94]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\nIn [95]: s.cat.as_unordered()\nOut[95]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [96]: s = pd.Series([1, 2, 3, 1], dtype=\"category\")\n\nIn [97]: s = s.cat.set_categories([2, 3, 1], ordered=True)\n\nIn [98]: s\nOut[98]: \n0    1\n1    2\n2    3\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [99]: s = s.sort_values()\n\nIn [100]: s\nOut[100]: \n1    2\n2    3\n0    1\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [101]: s.min(), s.max()\nOut[101]: (2, 1) \n```", "```py\nIn [102]: s = pd.Series([1, 2, 3, 1], dtype=\"category\")\n\nIn [103]: s = s.cat.reorder_categories([2, 3, 1], ordered=True)\n\nIn [104]: s\nOut[104]: \n0    1\n1    2\n2    3\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [105]: s = s.sort_values()\n\nIn [106]: s\nOut[106]: \n1    2\n2    3\n0    1\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [107]: s.min(), s.max()\nOut[107]: (2, 1) \n```", "```py\nIn [108]: dfs = pd.DataFrame(\n .....:    {\n .....:        \"A\": pd.Categorical(\n .....:            list(\"bbeebbaa\"),\n .....:            categories=[\"e\", \"a\", \"b\"],\n .....:            ordered=True,\n .....:        ),\n .....:        \"B\": [1, 2, 1, 2, 2, 1, 2, 1],\n .....:    }\n .....: )\n .....: \n\nIn [109]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[109]: \n A  B\n2  e  1\n3  e  2\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2 \n```", "```py\nIn [110]: dfs[\"A\"] = dfs[\"A\"].cat.reorder_categories([\"a\", \"b\", \"e\"])\n\nIn [111]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[111]: \n A  B\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2\n2  e  1\n3  e  2 \n```", "```py\nIn [112]: cat = pd.Series([1, 2, 3]).astype(CategoricalDtype([3, 2, 1], ordered=True))\n\nIn [113]: cat_base = pd.Series([2, 2, 2]).astype(CategoricalDtype([3, 2, 1], ordered=True))\n\nIn [114]: cat_base2 = pd.Series([2, 2, 2]).astype(CategoricalDtype(ordered=True))\n\nIn [115]: cat\nOut[115]: \n0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [3 < 2 < 1]\n\nIn [116]: cat_base\nOut[116]: \n0    2\n1    2\n2    2\ndtype: category\nCategories (3, int64): [3 < 2 < 1]\n\nIn [117]: cat_base2\nOut[117]: \n0    2\n1    2\n2    2\ndtype: category\nCategories (1, int64): [2] \n```", "```py\nIn [118]: cat > cat_base\nOut[118]: \n0     True\n1    False\n2    False\ndtype: bool\n\nIn [119]: cat > 2\nOut[119]: \n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [120]: cat == cat_base\nOut[120]: \n0    False\n1     True\n2    False\ndtype: bool\n\nIn [121]: cat == np.array([1, 2, 3])\nOut[121]: \n0    True\n1    True\n2    True\ndtype: bool\n\nIn [122]: cat == 2\nOut[122]: \n0    False\n1     True\n2    False\ndtype: bool \n```", "```py\nIn [123]: try:\n .....:    cat > cat_base2\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Categoricals can only be compared if 'categories' are the same. \n```", "```py\nIn [124]: base = np.array([1, 2, 3])\n\nIn [125]: try:\n .....:    cat > base\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot compare a Categorical for op __gt__ with type <class 'numpy.ndarray'>.\nIf you want to compare values, use 'np.asarray(cat) <op> other'.\n\nIn [126]: np.asarray(cat) > base\nOut[126]: array([False, False, False]) \n```", "```py\nIn [127]: c1 = pd.Categorical([\"a\", \"b\"], categories=[\"a\", \"b\"], ordered=False)\n\nIn [128]: c2 = pd.Categorical([\"a\", \"b\"], categories=[\"b\", \"a\"], ordered=False)\n\nIn [129]: c1 == c2\nOut[129]: array([ True,  True]) \n```", "```py\nIn [130]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"c\"], categories=[\"c\", \"a\", \"b\", \"d\"]))\n\nIn [131]: s.value_counts()\nOut[131]: \nc    2\na    1\nb    1\nd    0\nName: count, dtype: int64 \n```", "```py\nIn [132]: columns = pd.Categorical(\n .....:    [\"One\", \"One\", \"Two\"], categories=[\"One\", \"Two\", \"Three\"], ordered=True\n .....: )\n .....: \n\nIn [133]: df = pd.DataFrame(\n .....:    data=[[1, 2, 3], [4, 5, 6]],\n .....:    columns=pd.MultiIndex.from_arrays([[\"A\", \"B\", \"B\"], columns]),\n .....: ).T\n .....: \n\nIn [134]: df.groupby(level=1, observed=False).sum()\nOut[134]: \n 0  1\nOne    3  9\nTwo    3  6\nThree  0  0 \n```", "```py\nIn [135]: cats = pd.Categorical(\n .....:    [\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"], categories=[\"a\", \"b\", \"c\", \"d\"]\n .....: )\n .....: \n\nIn [136]: df = pd.DataFrame({\"cats\": cats, \"values\": [1, 2, 2, 2, 3, 4, 5]})\n\nIn [137]: df.groupby(\"cats\", observed=False).mean()\nOut[137]: \n values\ncats \na        1.0\nb        2.0\nc        4.0\nd        NaN\n\nIn [138]: cats2 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [139]: df2 = pd.DataFrame(\n .....:    {\n .....:        \"cats\": cats2,\n .....:        \"B\": [\"c\", \"d\", \"c\", \"d\"],\n .....:        \"values\": [1, 2, 3, 4],\n .....:    }\n .....: )\n .....: \n\nIn [140]: df2.groupby([\"cats\", \"B\"], observed=False).mean()\nOut[140]: \n values\ncats B \na    c     1.0\n d     2.0\nb    c     3.0\n d     4.0\nc    c     NaN\n d     NaN \n```", "```py\nIn [141]: raw_cat = pd.Categorical([\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [142]: df = pd.DataFrame({\"A\": raw_cat, \"B\": [\"c\", \"d\", \"c\", \"d\"], \"values\": [1, 2, 3, 4]})\n\nIn [143]: pd.pivot_table(df, values=\"values\", index=[\"A\", \"B\"], observed=False)\nOut[143]: \n values\nA B \na c     1.0\n d     2.0\nb c     3.0\n d     4.0 \n```", "```py\nIn [144]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [145]: cats = pd.Series([\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"], dtype=\"category\", index=idx)\n\nIn [146]: values = [1, 2, 2, 2, 3, 4, 5]\n\nIn [147]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [148]: df.iloc[2:4, :]\nOut[148]: \n cats  values\nj    b       2\nk    b       2\n\nIn [149]: df.iloc[2:4, :].dtypes\nOut[149]: \ncats      category\nvalues       int64\ndtype: object\n\nIn [150]: df.loc[\"h\":\"j\", \"cats\"]\nOut[150]: \nh    a\ni    b\nj    b\nName: cats, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [151]: df[df[\"cats\"] == \"b\"]\nOut[151]: \n cats  values\ni    b       2\nj    b       2\nk    b       2 \n```", "```py\n# get the complete \"h\" row as a Series\nIn [152]: df.loc[\"h\", :]\nOut[152]: \ncats      a\nvalues    1\nName: h, dtype: object \n```", "```py\nIn [153]: df.iat[0, 0]\nOut[153]: 'a'\n\nIn [154]: df[\"cats\"] = df[\"cats\"].cat.rename_categories([\"x\", \"y\", \"z\"])\n\nIn [155]: df.at[\"h\", \"cats\"]  # returns a string\nOut[155]: 'x' \n```", "```py\nIn [156]: df.loc[[\"h\"], \"cats\"]\nOut[156]: \nh    x\nName: cats, dtype: category\nCategories (3, object): ['x', 'y', 'z'] \n```", "```py\nIn [157]: str_s = pd.Series(list(\"aabb\"))\n\nIn [158]: str_cat = str_s.astype(\"category\")\n\nIn [159]: str_cat\nOut[159]: \n0    a\n1    a\n2    b\n3    b\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [160]: str_cat.str.contains(\"a\")\nOut[160]: \n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nIn [161]: date_s = pd.Series(pd.date_range(\"1/1/2015\", periods=5))\n\nIn [162]: date_cat = date_s.astype(\"category\")\n\nIn [163]: date_cat\nOut[163]: \n0   2015-01-01\n1   2015-01-02\n2   2015-01-03\n3   2015-01-04\n4   2015-01-05\ndtype: category\nCategories (5, datetime64[ns]): [2015-01-01, 2015-01-02, 2015-01-03, 2015-01-04, 2015-01-05]\n\nIn [164]: date_cat.dt.day\nOut[164]: \n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int32 \n```", "```py\nIn [165]: ret_s = str_s.str.contains(\"a\")\n\nIn [166]: ret_cat = str_cat.str.contains(\"a\")\n\nIn [167]: ret_s.dtype == ret_cat.dtype\nOut[167]: True\n\nIn [168]: ret_s == ret_cat\nOut[168]: \n0    True\n1    True\n2    True\n3    True\ndtype: bool \n```", "```py\nIn [169]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [170]: cats = pd.Categorical([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [171]: values = [1, 1, 1, 1, 1, 1, 1]\n\nIn [172]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [173]: df.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\n\nIn [174]: df\nOut[174]: \n cats  values\nh    a       1\ni    a       1\nj    b       2\nk    b       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [175]: try:\n .....:    df.iloc[2:4, :] = [[\"c\", 3], [\"c\", 3]]\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot setitem on a Categorical with a new category, set the categories first \n```", "```py\nIn [176]: df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [177]: df\nOut[177]: \n cats  values\nh    a       1\ni    a       1\nj    a       2\nk    a       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [178]: try:\n .....:    df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot set a Categorical with another, without identical categories \n```", "```py\nIn [179]: df = pd.DataFrame({\"a\": [1, 1, 1, 1, 1], \"b\": [\"a\", \"a\", \"a\", \"a\", \"a\"]})\n\nIn [180]: df.loc[1:2, \"a\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [181]: df.loc[2:3, \"b\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [182]: df\nOut[182]: \n a  b\n0  1  a\n1  b  a\n2  b  b\n3  1  b\n4  1  a\n\nIn [183]: df.dtypes\nOut[183]: \na    object\nb    object\ndtype: object \n```", "```py\nIn [184]: from pandas.api.types import union_categoricals\n\n# same categories\nIn [185]: s1 = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [186]: s2 = pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\")\n\nIn [187]: pd.concat([s1, s2])\nOut[187]: \n0    a\n1    b\n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b']\n\n# different categories\nIn [188]: s3 = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [189]: pd.concat([s1, s3])\nOut[189]: \n0    a\n1    b\n0    b\n1    c\ndtype: object\n\n# Output dtype is inferred based on categories values\nIn [190]: int_cats = pd.Series([1, 2], dtype=\"category\")\n\nIn [191]: float_cats = pd.Series([3.0, 4.0], dtype=\"category\")\n\nIn [192]: pd.concat([int_cats, float_cats])\nOut[192]: \n0    1.0\n1    2.0\n0    3.0\n1    4.0\ndtype: float64\n\nIn [193]: pd.concat([s1, s3]).astype(\"category\")\nOut[193]: \n0    a\n1    b\n0    b\n1    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [194]: union_categoricals([s1.array, s3.array])\nOut[194]: \n['a', 'b', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [195]: from pandas.api.types import union_categoricals\n\nIn [196]: a = pd.Categorical([\"b\", \"c\"])\n\nIn [197]: b = pd.Categorical([\"a\", \"b\"])\n\nIn [198]: union_categoricals([a, b])\nOut[198]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [199]: union_categoricals([a, b], sort_categories=True)\nOut[199]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [200]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [201]: b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n\nIn [202]: union_categoricals([a, b])\nOut[202]: \n['a', 'b', 'a', 'b', 'a']\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [203]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [204]: b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [205]: union_categoricals([a, b])\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[205], line 1\n----> 1 union_categoricals([a, b])\n\nFile ~/work/pandas/pandas/pandas/core/dtypes/concat.py:341, in union_categoricals(to_union, sort_categories, ignore_order)\n  339     if all(c.ordered for c in to_union):\n  340         msg = \"to union ordered Categoricals, all categories must be the same\"\n--> 341         raise TypeError(msg)\n  342     raise TypeError(\"Categorical.ordered must be the same\")\n  344 if ignore_order:\n\nTypeError: to union ordered Categoricals, all categories must be the same \n```", "```py\nIn [206]: a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [207]: b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n\nIn [208]: union_categoricals([a, b], ignore_order=True)\nOut[208]: \n['a', 'b', 'c', 'c', 'b', 'a']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [209]: a = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [210]: b = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [211]: union_categoricals([a, b])\nOut[211]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [212]: c1 = pd.Categorical([\"b\", \"c\"])\n\nIn [213]: c2 = pd.Categorical([\"a\", \"b\"])\n\nIn [214]: c1\nOut[214]: \n['b', 'c']\nCategories (2, object): ['b', 'c']\n\n# \"b\" is coded to 0\nIn [215]: c1.codes\nOut[215]: array([0, 1], dtype=int8)\n\nIn [216]: c2\nOut[216]: \n['a', 'b']\nCategories (2, object): ['a', 'b']\n\n# \"b\" is coded to 1\nIn [217]: c2.codes\nOut[217]: array([0, 1], dtype=int8)\n\nIn [218]: c = union_categoricals([c1, c2])\n\nIn [219]: c\nOut[219]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a']\n\n# \"b\" is coded to 0 throughout, same as c1, different from c2\nIn [220]: c.codes\nOut[220]: array([0, 1, 2, 0], dtype=int8) \n```", "```py\nIn [221]: import io\n\nIn [222]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"b\", \"a\", \"a\", \"d\"]))\n\n# rename the categories\nIn [223]: s = s.cat.rename_categories([\"very good\", \"good\", \"bad\"])\n\n# reorder the categories and add missing categories\nIn [224]: s = s.cat.set_categories([\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"])\n\nIn [225]: df = pd.DataFrame({\"cats\": s, \"vals\": [1, 2, 3, 4, 5, 6]})\n\nIn [226]: csv = io.StringIO()\n\nIn [227]: df.to_csv(csv)\n\nIn [228]: df2 = pd.read_csv(io.StringIO(csv.getvalue()))\n\nIn [229]: df2.dtypes\nOut[229]: \nUnnamed: 0     int64\ncats          object\nvals           int64\ndtype: object\n\nIn [230]: df2[\"cats\"]\nOut[230]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5          bad\nName: cats, dtype: object\n\n# Redo the category\nIn [231]: df2[\"cats\"] = df2[\"cats\"].astype(\"category\")\n\nIn [232]: df2[\"cats\"] = df2[\"cats\"].cat.set_categories(\n .....:    [\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"]\n .....: )\n .....: \n\nIn [233]: df2.dtypes\nOut[233]: \nUnnamed: 0       int64\ncats          category\nvals             int64\ndtype: object\n\nIn [234]: df2[\"cats\"]\nOut[234]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5          bad\nName: cats, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] \n```", "```py\nIn [235]: s = pd.Series([\"a\", \"b\", np.nan, \"a\"], dtype=\"category\")\n\n# only two categories\nIn [236]: s\nOut[236]: \n0      a\n1      b\n2    NaN\n3      a\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [237]: s.cat.codes\nOut[237]: \n0    0\n1    1\n2   -1\n3    0\ndtype: int8 \n```", "```py\nIn [238]: s = pd.Series([\"a\", \"b\", np.nan], dtype=\"category\")\n\nIn [239]: s\nOut[239]: \n0      a\n1      b\n2    NaN\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [240]: pd.isna(s)\nOut[240]: \n0    False\n1    False\n2     True\ndtype: bool\n\nIn [241]: s.fillna(\"a\")\nOut[241]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b'] \n```", "```py\nIn [242]: s = pd.Series([\"foo\", \"bar\"] * 1000)\n\n# object dtype\nIn [243]: s.nbytes\nOut[243]: 16000\n\n# category dtype\nIn [244]: s.astype(\"category\").nbytes\nOut[244]: 2016 \n```", "```py\nIn [245]: s = pd.Series([\"foo%04d\" % i for i in range(2000)])\n\n# object dtype\nIn [246]: s.nbytes\nOut[246]: 16000\n\n# category dtype\nIn [247]: s.astype(\"category\").nbytes\nOut[247]: 20000 \n```", "```py\nIn [248]: try:\n .....:    np.dtype(\"category\")\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: data type 'category' not understood\n\nIn [249]: dtype = pd.Categorical([\"a\"]).dtype\n\nIn [250]: try:\n .....:    np.dtype(dtype)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot interpret 'CategoricalDtype(categories=['a'], ordered=False, categories_dtype=object)' as a data type \n```", "```py\nIn [251]: dtype == np.str_\nOut[251]: False\n\nIn [252]: np.str_ == dtype\nOut[252]: False \n```", "```py\nIn [253]: hasattr(pd.Series([\"a\"], dtype=\"category\"), \"cat\")\nOut[253]: True\n\nIn [254]: hasattr(pd.Series([\"a\"]), \"cat\")\nOut[254]: False \n```", "```py\nIn [255]: s = pd.Series(pd.Categorical([1, 2, 3, 4]))\n\nIn [256]: try:\n .....:    np.sum(s)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: 'Categorical' with dtype category does not support reduction 'sum' \n```", "```py\nIn [257]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [1, 2, 3, 4],\n .....:        \"b\": [\"a\", \"b\", \"c\", \"d\"],\n .....:        \"cats\": pd.Categorical([1, 2, 3, 2]),\n .....:    }\n .....: )\n .....: \n\nIn [258]: df.apply(lambda row: type(row[\"cats\"]), axis=1)\nOut[258]: \n0    <class 'int'>\n1    <class 'int'>\n2    <class 'int'>\n3    <class 'int'>\ndtype: object\n\nIn [259]: df.apply(lambda col: col.dtype, axis=0)\nOut[259]: \na          int64\nb         object\ncats    category\ndtype: object \n```", "```py\nIn [260]: cats = pd.Categorical([1, 2, 3, 4], categories=[4, 2, 3, 1])\n\nIn [261]: strings = [\"a\", \"b\", \"c\", \"d\"]\n\nIn [262]: values = [4, 2, 3, 1]\n\nIn [263]: df = pd.DataFrame({\"strings\": strings, \"values\": values}, index=cats)\n\nIn [264]: df.index\nOut[264]: CategoricalIndex([1, 2, 3, 4], categories=[4, 2, 3, 1], ordered=False, dtype='category')\n\n# This now sorts by the categories order\nIn [265]: df.sort_index()\nOut[265]: \n strings  values\n4       d       1\n2       b       2\n3       c       3\n1       a       4 \n```", "```py\nIn [266]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [267]: s = pd.Series(cat, name=\"cat\")\n\nIn [268]: cat\nOut[268]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [269]: s.iloc[0:2] = 10\n\nIn [270]: cat\nOut[270]: \n[10, 10, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```", "```py\nIn [271]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [272]: s = pd.Series(cat, name=\"cat\", copy=True)\n\nIn [273]: cat\nOut[273]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [274]: s.iloc[0:2] = 10\n\nIn [275]: cat\nOut[275]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```", "```py\nIn [1]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [2]: s\nOut[2]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [3]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [4]: df[\"B\"] = df[\"A\"].astype(\"category\")\n\nIn [5]: df\nOut[5]: \n A  B\n0  a  a\n1  b  b\n2  c  c\n3  a  a \n```", "```py\nIn [6]: df = pd.DataFrame({\"value\": np.random.randint(0, 100, 20)})\n\nIn [7]: labels = [\"{0} - {1}\".format(i, i + 9) for i in range(0, 100, 10)]\n\nIn [8]: df[\"group\"] = pd.cut(df.value, range(0, 105, 10), right=False, labels=labels)\n\nIn [9]: df.head(10)\nOut[9]: \n value    group\n0     65  60 - 69\n1     49  40 - 49\n2     56  50 - 59\n3     43  40 - 49\n4     43  40 - 49\n5     91  90 - 99\n6     32  30 - 39\n7     87  80 - 89\n8     36  30 - 39\n9      8    0 - 9 \n```", "```py\nIn [10]: raw_cat = pd.Categorical(\n ....:    [\"a\", \"b\", \"c\", \"a\"], categories=[\"b\", \"c\", \"d\"], ordered=False\n ....: )\n ....: \n\nIn [11]: s = pd.Series(raw_cat)\n\nIn [12]: s\nOut[12]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b', 'c', 'd']\n\nIn [13]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [14]: df[\"B\"] = raw_cat\n\nIn [15]: df\nOut[15]: \n A    B\n0  a  NaN\n1  b    b\n2  c    c\n3  a  NaN \n```", "```py\nIn [16]: df.dtypes\nOut[16]: \nA      object\nB    category\ndtype: object \n```", "```py\nIn [17]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")}, dtype=\"category\")\n\nIn [18]: df.dtypes\nOut[18]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [19]: df[\"A\"]\nOut[19]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [20]: df[\"B\"]\nOut[20]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [21]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [22]: df_cat = df.astype(\"category\")\n\nIn [23]: df_cat.dtypes\nOut[23]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [24]: df_cat[\"A\"]\nOut[24]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [25]: df_cat[\"B\"]\nOut[25]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [26]: from pandas.api.types import CategoricalDtype\n\nIn [27]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [28]: cat_type = CategoricalDtype(categories=[\"b\", \"c\", \"d\"], ordered=True)\n\nIn [29]: s_cat = s.astype(cat_type)\n\nIn [30]: s_cat\nOut[30]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b' < 'c' < 'd'] \n```", "```py\nIn [31]: from pandas.api.types import CategoricalDtype\n\nIn [32]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [33]: cat_type = CategoricalDtype(categories=list(\"abcd\"), ordered=True)\n\nIn [34]: df_cat = df.astype(cat_type)\n\nIn [35]: df_cat[\"A\"]\nOut[35]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd']\n\nIn [36]: df_cat[\"B\"]\nOut[36]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd'] \n```", "```py\nIn [37]: splitter = np.random.choice([0, 1], 5, p=[0.5, 0.5])\n\nIn [38]: s = pd.Series(pd.Categorical.from_codes(splitter, categories=[\"train\", \"test\"])) \n```", "```py\nIn [39]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [40]: s\nOut[40]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [41]: s2 = s.astype(\"category\")\n\nIn [42]: s2\nOut[42]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [43]: s2.astype(str)\nOut[43]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [44]: np.asarray(s2)\nOut[44]: array(['a', 'b', 'c', 'a'], dtype=object) \n```", "```py\nIn [1]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [2]: s\nOut[2]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [3]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [4]: df[\"B\"] = df[\"A\"].astype(\"category\")\n\nIn [5]: df\nOut[5]: \n A  B\n0  a  a\n1  b  b\n2  c  c\n3  a  a \n```", "```py\nIn [6]: df = pd.DataFrame({\"value\": np.random.randint(0, 100, 20)})\n\nIn [7]: labels = [\"{0} - {1}\".format(i, i + 9) for i in range(0, 100, 10)]\n\nIn [8]: df[\"group\"] = pd.cut(df.value, range(0, 105, 10), right=False, labels=labels)\n\nIn [9]: df.head(10)\nOut[9]: \n value    group\n0     65  60 - 69\n1     49  40 - 49\n2     56  50 - 59\n3     43  40 - 49\n4     43  40 - 49\n5     91  90 - 99\n6     32  30 - 39\n7     87  80 - 89\n8     36  30 - 39\n9      8    0 - 9 \n```", "```py\nIn [10]: raw_cat = pd.Categorical(\n ....:    [\"a\", \"b\", \"c\", \"a\"], categories=[\"b\", \"c\", \"d\"], ordered=False\n ....: )\n ....: \n\nIn [11]: s = pd.Series(raw_cat)\n\nIn [12]: s\nOut[12]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b', 'c', 'd']\n\nIn [13]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]})\n\nIn [14]: df[\"B\"] = raw_cat\n\nIn [15]: df\nOut[15]: \n A    B\n0  a  NaN\n1  b    b\n2  c    c\n3  a  NaN \n```", "```py\nIn [16]: df.dtypes\nOut[16]: \nA      object\nB    category\ndtype: object \n```", "```py\nIn [17]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")}, dtype=\"category\")\n\nIn [18]: df.dtypes\nOut[18]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [19]: df[\"A\"]\nOut[19]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [20]: df[\"B\"]\nOut[20]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [21]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [22]: df_cat = df.astype(\"category\")\n\nIn [23]: df_cat.dtypes\nOut[23]: \nA    category\nB    category\ndtype: object \n```", "```py\nIn [24]: df_cat[\"A\"]\nOut[24]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [25]: df_cat[\"B\"]\nOut[25]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (3, object): ['b', 'c', 'd'] \n```", "```py\nIn [26]: from pandas.api.types import CategoricalDtype\n\nIn [27]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [28]: cat_type = CategoricalDtype(categories=[\"b\", \"c\", \"d\"], ordered=True)\n\nIn [29]: s_cat = s.astype(cat_type)\n\nIn [30]: s_cat\nOut[30]: \n0    NaN\n1      b\n2      c\n3    NaN\ndtype: category\nCategories (3, object): ['b' < 'c' < 'd'] \n```", "```py\nIn [31]: from pandas.api.types import CategoricalDtype\n\nIn [32]: df = pd.DataFrame({\"A\": list(\"abca\"), \"B\": list(\"bccd\")})\n\nIn [33]: cat_type = CategoricalDtype(categories=list(\"abcd\"), ordered=True)\n\nIn [34]: df_cat = df.astype(cat_type)\n\nIn [35]: df_cat[\"A\"]\nOut[35]: \n0    a\n1    b\n2    c\n3    a\nName: A, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd']\n\nIn [36]: df_cat[\"B\"]\nOut[36]: \n0    b\n1    c\n2    c\n3    d\nName: B, dtype: category\nCategories (4, object): ['a' < 'b' < 'c' < 'd'] \n```", "```py\nIn [37]: splitter = np.random.choice([0, 1], 5, p=[0.5, 0.5])\n\nIn [38]: s = pd.Series(pd.Categorical.from_codes(splitter, categories=[\"train\", \"test\"])) \n```", "```py\nIn [39]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"])\n\nIn [40]: s\nOut[40]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [41]: s2 = s.astype(\"category\")\n\nIn [42]: s2\nOut[42]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [43]: s2.astype(str)\nOut[43]: \n0    a\n1    b\n2    c\n3    a\ndtype: object\n\nIn [44]: np.asarray(s2)\nOut[44]: array(['a', 'b', 'c', 'a'], dtype=object) \n```", "```py\nIn [45]: from pandas.api.types import CategoricalDtype\n\nIn [46]: CategoricalDtype([\"a\", \"b\", \"c\"])\nOut[46]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=False, categories_dtype=object)\n\nIn [47]: CategoricalDtype([\"a\", \"b\", \"c\"], ordered=True)\nOut[47]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=True, categories_dtype=object)\n\nIn [48]: CategoricalDtype()\nOut[48]: CategoricalDtype(categories=None, ordered=False, categories_dtype=None) \n```", "```py\nIn [49]: c1 = CategoricalDtype([\"a\", \"b\", \"c\"], ordered=False)\n\n# Equal, since order is not considered when ordered=False\nIn [50]: c1 == CategoricalDtype([\"b\", \"c\", \"a\"], ordered=False)\nOut[50]: True\n\n# Unequal, since the second CategoricalDtype is ordered\nIn [51]: c1 == CategoricalDtype([\"a\", \"b\", \"c\"], ordered=True)\nOut[51]: False \n```", "```py\nIn [52]: c1 == \"category\"\nOut[52]: True \n```", "```py\nIn [49]: c1 = CategoricalDtype([\"a\", \"b\", \"c\"], ordered=False)\n\n# Equal, since order is not considered when ordered=False\nIn [50]: c1 == CategoricalDtype([\"b\", \"c\", \"a\"], ordered=False)\nOut[50]: True\n\n# Unequal, since the second CategoricalDtype is ordered\nIn [51]: c1 == CategoricalDtype([\"a\", \"b\", \"c\"], ordered=True)\nOut[51]: False \n```", "```py\nIn [52]: c1 == \"category\"\nOut[52]: True \n```", "```py\nIn [53]: cat = pd.Categorical([\"a\", \"c\", \"c\", np.nan], categories=[\"b\", \"a\", \"c\"])\n\nIn [54]: df = pd.DataFrame({\"cat\": cat, \"s\": [\"a\", \"c\", \"c\", np.nan]})\n\nIn [55]: df.describe()\nOut[55]: \n cat  s\ncount    3  3\nunique   2  2\ntop      c  c\nfreq     2  2\n\nIn [56]: df[\"cat\"].describe()\nOut[56]: \ncount     3\nunique    2\ntop       c\nfreq      2\nName: cat, dtype: object \n```", "```py\nIn [57]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [58]: s.cat.categories\nOut[58]: Index(['a', 'b', 'c'], dtype='object')\n\nIn [59]: s.cat.ordered\nOut[59]: False \n```", "```py\nIn [60]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], categories=[\"c\", \"b\", \"a\"]))\n\nIn [61]: s.cat.categories\nOut[61]: Index(['c', 'b', 'a'], dtype='object')\n\nIn [62]: s.cat.ordered\nOut[62]: False \n```", "```py\nIn [63]: s = pd.Series(list(\"babc\")).astype(CategoricalDtype(list(\"abcd\")))\n\nIn [64]: s\nOut[64]: \n0    b\n1    a\n2    b\n3    c\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n# categories\nIn [65]: s.cat.categories\nOut[65]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\n# uniques\nIn [66]: s.unique()\nOut[66]: \n['b', 'a', 'c']\nCategories (4, object): ['a', 'b', 'c', 'd'] \n```", "```py\nIn [67]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [68]: s\nOut[68]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [69]: new_categories = [\"Group %s\" % g for g in s.cat.categories]\n\nIn [70]: s = s.cat.rename_categories(new_categories)\n\nIn [71]: s\nOut[71]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c']\n\n# You can also pass a dict-like object to map the renaming\nIn [72]: s = s.cat.rename_categories({1: \"x\", 2: \"y\", 3: \"z\"})\n\nIn [73]: s\nOut[73]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [74]: try:\n ....:    s = s.cat.rename_categories([1, 1, 1])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories must be unique \n```", "```py\nIn [75]: try:\n ....:    s = s.cat.rename_categories([1, 2, np.nan])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories cannot be null \n```", "```py\nIn [76]: s = s.cat.add_categories([4])\n\nIn [77]: s.cat.categories\nOut[77]: Index(['Group a', 'Group b', 'Group c', 4], dtype='object')\n\nIn [78]: s\nOut[78]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (4, object): ['Group a', 'Group b', 'Group c', 4] \n```", "```py\nIn [79]: s = s.cat.remove_categories([4])\n\nIn [80]: s\nOut[80]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [81]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"a\"], categories=[\"a\", \"b\", \"c\", \"d\"]))\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\nIn [83]: s.cat.remove_unused_categories()\nOut[83]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b'] \n```", "```py\nIn [84]: s = pd.Series([\"one\", \"two\", \"four\", \"-\"], dtype=\"category\")\n\nIn [85]: s\nOut[85]: \n0     one\n1     two\n2    four\n3       -\ndtype: category\nCategories (4, object): ['-', 'four', 'one', 'two']\n\nIn [86]: s = s.cat.set_categories([\"one\", \"two\", \"three\", \"four\"])\n\nIn [87]: s\nOut[87]: \n0     one\n1     two\n2    four\n3     NaN\ndtype: category\nCategories (4, object): ['one', 'two', 'three', 'four'] \n```", "```py\nIn [67]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"], dtype=\"category\")\n\nIn [68]: s\nOut[68]: \n0    a\n1    b\n2    c\n3    a\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [69]: new_categories = [\"Group %s\" % g for g in s.cat.categories]\n\nIn [70]: s = s.cat.rename_categories(new_categories)\n\nIn [71]: s\nOut[71]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c']\n\n# You can also pass a dict-like object to map the renaming\nIn [72]: s = s.cat.rename_categories({1: \"x\", 2: \"y\", 3: \"z\"})\n\nIn [73]: s\nOut[73]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [74]: try:\n ....:    s = s.cat.rename_categories([1, 1, 1])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories must be unique \n```", "```py\nIn [75]: try:\n ....:    s = s.cat.rename_categories([1, 2, np.nan])\n ....: except ValueError as e:\n ....:    print(\"ValueError:\", str(e))\n ....: \nValueError: Categorical categories cannot be null \n```", "```py\nIn [76]: s = s.cat.add_categories([4])\n\nIn [77]: s.cat.categories\nOut[77]: Index(['Group a', 'Group b', 'Group c', 4], dtype='object')\n\nIn [78]: s\nOut[78]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (4, object): ['Group a', 'Group b', 'Group c', 4] \n```", "```py\nIn [79]: s = s.cat.remove_categories([4])\n\nIn [80]: s\nOut[80]: \n0    Group a\n1    Group b\n2    Group c\n3    Group a\ndtype: category\nCategories (3, object): ['Group a', 'Group b', 'Group c'] \n```", "```py\nIn [81]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"a\"], categories=[\"a\", \"b\", \"c\", \"d\"]))\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\nIn [83]: s.cat.remove_unused_categories()\nOut[83]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b'] \n```", "```py\nIn [84]: s = pd.Series([\"one\", \"two\", \"four\", \"-\"], dtype=\"category\")\n\nIn [85]: s\nOut[85]: \n0     one\n1     two\n2    four\n3       -\ndtype: category\nCategories (4, object): ['-', 'four', 'one', 'two']\n\nIn [86]: s = s.cat.set_categories([\"one\", \"two\", \"three\", \"four\"])\n\nIn [87]: s\nOut[87]: \n0     one\n1     two\n2    four\n3     NaN\ndtype: category\nCategories (4, object): ['one', 'two', 'three', 'four'] \n```", "```py\nIn [88]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], ordered=False))\n\nIn [89]: s = s.sort_values()\n\nIn [90]: s = pd.Series([\"a\", \"b\", \"c\", \"a\"]).astype(CategoricalDtype(ordered=True))\n\nIn [91]: s = s.sort_values()\n\nIn [92]: s\nOut[92]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\nIn [93]: s.min(), s.max()\nOut[93]: ('a', 'c') \n```", "```py\nIn [94]: s.cat.as_ordered()\nOut[94]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a' < 'b' < 'c']\n\nIn [95]: s.cat.as_unordered()\nOut[95]: \n0    a\n3    a\n1    b\n2    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [96]: s = pd.Series([1, 2, 3, 1], dtype=\"category\")\n\nIn [97]: s = s.cat.set_categories([2, 3, 1], ordered=True)\n\nIn [98]: s\nOut[98]: \n0    1\n1    2\n2    3\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [99]: s = s.sort_values()\n\nIn [100]: s\nOut[100]: \n1    2\n2    3\n0    1\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [101]: s.min(), s.max()\nOut[101]: (2, 1) \n```", "```py\nIn [102]: s = pd.Series([1, 2, 3, 1], dtype=\"category\")\n\nIn [103]: s = s.cat.reorder_categories([2, 3, 1], ordered=True)\n\nIn [104]: s\nOut[104]: \n0    1\n1    2\n2    3\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [105]: s = s.sort_values()\n\nIn [106]: s\nOut[106]: \n1    2\n2    3\n0    1\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [107]: s.min(), s.max()\nOut[107]: (2, 1) \n```", "```py\nIn [108]: dfs = pd.DataFrame(\n .....:    {\n .....:        \"A\": pd.Categorical(\n .....:            list(\"bbeebbaa\"),\n .....:            categories=[\"e\", \"a\", \"b\"],\n .....:            ordered=True,\n .....:        ),\n .....:        \"B\": [1, 2, 1, 2, 2, 1, 2, 1],\n .....:    }\n .....: )\n .....: \n\nIn [109]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[109]: \n A  B\n2  e  1\n3  e  2\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2 \n```", "```py\nIn [110]: dfs[\"A\"] = dfs[\"A\"].cat.reorder_categories([\"a\", \"b\", \"e\"])\n\nIn [111]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[111]: \n A  B\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2\n2  e  1\n3  e  2 \n```", "```py\nIn [102]: s = pd.Series([1, 2, 3, 1], dtype=\"category\")\n\nIn [103]: s = s.cat.reorder_categories([2, 3, 1], ordered=True)\n\nIn [104]: s\nOut[104]: \n0    1\n1    2\n2    3\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [105]: s = s.sort_values()\n\nIn [106]: s\nOut[106]: \n1    2\n2    3\n0    1\n3    1\ndtype: category\nCategories (3, int64): [2 < 3 < 1]\n\nIn [107]: s.min(), s.max()\nOut[107]: (2, 1) \n```", "```py\nIn [108]: dfs = pd.DataFrame(\n .....:    {\n .....:        \"A\": pd.Categorical(\n .....:            list(\"bbeebbaa\"),\n .....:            categories=[\"e\", \"a\", \"b\"],\n .....:            ordered=True,\n .....:        ),\n .....:        \"B\": [1, 2, 1, 2, 2, 1, 2, 1],\n .....:    }\n .....: )\n .....: \n\nIn [109]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[109]: \n A  B\n2  e  1\n3  e  2\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2 \n```", "```py\nIn [110]: dfs[\"A\"] = dfs[\"A\"].cat.reorder_categories([\"a\", \"b\", \"e\"])\n\nIn [111]: dfs.sort_values(by=[\"A\", \"B\"])\nOut[111]: \n A  B\n7  a  1\n6  a  2\n0  b  1\n5  b  1\n1  b  2\n4  b  2\n2  e  1\n3  e  2 \n```", "```py\nIn [112]: cat = pd.Series([1, 2, 3]).astype(CategoricalDtype([3, 2, 1], ordered=True))\n\nIn [113]: cat_base = pd.Series([2, 2, 2]).astype(CategoricalDtype([3, 2, 1], ordered=True))\n\nIn [114]: cat_base2 = pd.Series([2, 2, 2]).astype(CategoricalDtype(ordered=True))\n\nIn [115]: cat\nOut[115]: \n0    1\n1    2\n2    3\ndtype: category\nCategories (3, int64): [3 < 2 < 1]\n\nIn [116]: cat_base\nOut[116]: \n0    2\n1    2\n2    2\ndtype: category\nCategories (3, int64): [3 < 2 < 1]\n\nIn [117]: cat_base2\nOut[117]: \n0    2\n1    2\n2    2\ndtype: category\nCategories (1, int64): [2] \n```", "```py\nIn [118]: cat > cat_base\nOut[118]: \n0     True\n1    False\n2    False\ndtype: bool\n\nIn [119]: cat > 2\nOut[119]: \n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [120]: cat == cat_base\nOut[120]: \n0    False\n1     True\n2    False\ndtype: bool\n\nIn [121]: cat == np.array([1, 2, 3])\nOut[121]: \n0    True\n1    True\n2    True\ndtype: bool\n\nIn [122]: cat == 2\nOut[122]: \n0    False\n1     True\n2    False\ndtype: bool \n```", "```py\nIn [123]: try:\n .....:    cat > cat_base2\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Categoricals can only be compared if 'categories' are the same. \n```", "```py\nIn [124]: base = np.array([1, 2, 3])\n\nIn [125]: try:\n .....:    cat > base\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot compare a Categorical for op __gt__ with type <class 'numpy.ndarray'>.\nIf you want to compare values, use 'np.asarray(cat) <op> other'.\n\nIn [126]: np.asarray(cat) > base\nOut[126]: array([False, False, False]) \n```", "```py\nIn [127]: c1 = pd.Categorical([\"a\", \"b\"], categories=[\"a\", \"b\"], ordered=False)\n\nIn [128]: c2 = pd.Categorical([\"a\", \"b\"], categories=[\"b\", \"a\"], ordered=False)\n\nIn [129]: c1 == c2\nOut[129]: array([ True,  True]) \n```", "```py\nIn [130]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"c\"], categories=[\"c\", \"a\", \"b\", \"d\"]))\n\nIn [131]: s.value_counts()\nOut[131]: \nc    2\na    1\nb    1\nd    0\nName: count, dtype: int64 \n```", "```py\nIn [132]: columns = pd.Categorical(\n .....:    [\"One\", \"One\", \"Two\"], categories=[\"One\", \"Two\", \"Three\"], ordered=True\n .....: )\n .....: \n\nIn [133]: df = pd.DataFrame(\n .....:    data=[[1, 2, 3], [4, 5, 6]],\n .....:    columns=pd.MultiIndex.from_arrays([[\"A\", \"B\", \"B\"], columns]),\n .....: ).T\n .....: \n\nIn [134]: df.groupby(level=1, observed=False).sum()\nOut[134]: \n 0  1\nOne    3  9\nTwo    3  6\nThree  0  0 \n```", "```py\nIn [135]: cats = pd.Categorical(\n .....:    [\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"], categories=[\"a\", \"b\", \"c\", \"d\"]\n .....: )\n .....: \n\nIn [136]: df = pd.DataFrame({\"cats\": cats, \"values\": [1, 2, 2, 2, 3, 4, 5]})\n\nIn [137]: df.groupby(\"cats\", observed=False).mean()\nOut[137]: \n values\ncats \na        1.0\nb        2.0\nc        4.0\nd        NaN\n\nIn [138]: cats2 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [139]: df2 = pd.DataFrame(\n .....:    {\n .....:        \"cats\": cats2,\n .....:        \"B\": [\"c\", \"d\", \"c\", \"d\"],\n .....:        \"values\": [1, 2, 3, 4],\n .....:    }\n .....: )\n .....: \n\nIn [140]: df2.groupby([\"cats\", \"B\"], observed=False).mean()\nOut[140]: \n values\ncats B \na    c     1.0\n d     2.0\nb    c     3.0\n d     4.0\nc    c     NaN\n d     NaN \n```", "```py\nIn [141]: raw_cat = pd.Categorical([\"a\", \"a\", \"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [142]: df = pd.DataFrame({\"A\": raw_cat, \"B\": [\"c\", \"d\", \"c\", \"d\"], \"values\": [1, 2, 3, 4]})\n\nIn [143]: pd.pivot_table(df, values=\"values\", index=[\"A\", \"B\"], observed=False)\nOut[143]: \n values\nA B \na c     1.0\n d     2.0\nb c     3.0\n d     4.0 \n```", "```py\nIn [144]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [145]: cats = pd.Series([\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"], dtype=\"category\", index=idx)\n\nIn [146]: values = [1, 2, 2, 2, 3, 4, 5]\n\nIn [147]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [148]: df.iloc[2:4, :]\nOut[148]: \n cats  values\nj    b       2\nk    b       2\n\nIn [149]: df.iloc[2:4, :].dtypes\nOut[149]: \ncats      category\nvalues       int64\ndtype: object\n\nIn [150]: df.loc[\"h\":\"j\", \"cats\"]\nOut[150]: \nh    a\ni    b\nj    b\nName: cats, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [151]: df[df[\"cats\"] == \"b\"]\nOut[151]: \n cats  values\ni    b       2\nj    b       2\nk    b       2 \n```", "```py\n# get the complete \"h\" row as a Series\nIn [152]: df.loc[\"h\", :]\nOut[152]: \ncats      a\nvalues    1\nName: h, dtype: object \n```", "```py\nIn [153]: df.iat[0, 0]\nOut[153]: 'a'\n\nIn [154]: df[\"cats\"] = df[\"cats\"].cat.rename_categories([\"x\", \"y\", \"z\"])\n\nIn [155]: df.at[\"h\", \"cats\"]  # returns a string\nOut[155]: 'x' \n```", "```py\nIn [156]: df.loc[[\"h\"], \"cats\"]\nOut[156]: \nh    x\nName: cats, dtype: category\nCategories (3, object): ['x', 'y', 'z'] \n```", "```py\nIn [157]: str_s = pd.Series(list(\"aabb\"))\n\nIn [158]: str_cat = str_s.astype(\"category\")\n\nIn [159]: str_cat\nOut[159]: \n0    a\n1    a\n2    b\n3    b\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [160]: str_cat.str.contains(\"a\")\nOut[160]: \n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nIn [161]: date_s = pd.Series(pd.date_range(\"1/1/2015\", periods=5))\n\nIn [162]: date_cat = date_s.astype(\"category\")\n\nIn [163]: date_cat\nOut[163]: \n0   2015-01-01\n1   2015-01-02\n2   2015-01-03\n3   2015-01-04\n4   2015-01-05\ndtype: category\nCategories (5, datetime64[ns]): [2015-01-01, 2015-01-02, 2015-01-03, 2015-01-04, 2015-01-05]\n\nIn [164]: date_cat.dt.day\nOut[164]: \n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int32 \n```", "```py\nIn [165]: ret_s = str_s.str.contains(\"a\")\n\nIn [166]: ret_cat = str_cat.str.contains(\"a\")\n\nIn [167]: ret_s.dtype == ret_cat.dtype\nOut[167]: True\n\nIn [168]: ret_s == ret_cat\nOut[168]: \n0    True\n1    True\n2    True\n3    True\ndtype: bool \n```", "```py\nIn [169]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [170]: cats = pd.Categorical([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [171]: values = [1, 1, 1, 1, 1, 1, 1]\n\nIn [172]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [173]: df.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\n\nIn [174]: df\nOut[174]: \n cats  values\nh    a       1\ni    a       1\nj    b       2\nk    b       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [175]: try:\n .....:    df.iloc[2:4, :] = [[\"c\", 3], [\"c\", 3]]\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot setitem on a Categorical with a new category, set the categories first \n```", "```py\nIn [176]: df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [177]: df\nOut[177]: \n cats  values\nh    a       1\ni    a       1\nj    a       2\nk    a       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [178]: try:\n .....:    df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot set a Categorical with another, without identical categories \n```", "```py\nIn [179]: df = pd.DataFrame({\"a\": [1, 1, 1, 1, 1], \"b\": [\"a\", \"a\", \"a\", \"a\", \"a\"]})\n\nIn [180]: df.loc[1:2, \"a\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [181]: df.loc[2:3, \"b\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [182]: df\nOut[182]: \n a  b\n0  1  a\n1  b  a\n2  b  b\n3  1  b\n4  1  a\n\nIn [183]: df.dtypes\nOut[183]: \na    object\nb    object\ndtype: object \n```", "```py\nIn [184]: from pandas.api.types import union_categoricals\n\n# same categories\nIn [185]: s1 = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [186]: s2 = pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\")\n\nIn [187]: pd.concat([s1, s2])\nOut[187]: \n0    a\n1    b\n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b']\n\n# different categories\nIn [188]: s3 = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [189]: pd.concat([s1, s3])\nOut[189]: \n0    a\n1    b\n0    b\n1    c\ndtype: object\n\n# Output dtype is inferred based on categories values\nIn [190]: int_cats = pd.Series([1, 2], dtype=\"category\")\n\nIn [191]: float_cats = pd.Series([3.0, 4.0], dtype=\"category\")\n\nIn [192]: pd.concat([int_cats, float_cats])\nOut[192]: \n0    1.0\n1    2.0\n0    3.0\n1    4.0\ndtype: float64\n\nIn [193]: pd.concat([s1, s3]).astype(\"category\")\nOut[193]: \n0    a\n1    b\n0    b\n1    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [194]: union_categoricals([s1.array, s3.array])\nOut[194]: \n['a', 'b', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [195]: from pandas.api.types import union_categoricals\n\nIn [196]: a = pd.Categorical([\"b\", \"c\"])\n\nIn [197]: b = pd.Categorical([\"a\", \"b\"])\n\nIn [198]: union_categoricals([a, b])\nOut[198]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [199]: union_categoricals([a, b], sort_categories=True)\nOut[199]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [200]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [201]: b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n\nIn [202]: union_categoricals([a, b])\nOut[202]: \n['a', 'b', 'a', 'b', 'a']\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [203]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [204]: b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [205]: union_categoricals([a, b])\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[205], line 1\n----> 1 union_categoricals([a, b])\n\nFile ~/work/pandas/pandas/pandas/core/dtypes/concat.py:341, in union_categoricals(to_union, sort_categories, ignore_order)\n  339     if all(c.ordered for c in to_union):\n  340         msg = \"to union ordered Categoricals, all categories must be the same\"\n--> 341         raise TypeError(msg)\n  342     raise TypeError(\"Categorical.ordered must be the same\")\n  344 if ignore_order:\n\nTypeError: to union ordered Categoricals, all categories must be the same \n```", "```py\nIn [206]: a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [207]: b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n\nIn [208]: union_categoricals([a, b], ignore_order=True)\nOut[208]: \n['a', 'b', 'c', 'c', 'b', 'a']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [209]: a = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [210]: b = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [211]: union_categoricals([a, b])\nOut[211]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [212]: c1 = pd.Categorical([\"b\", \"c\"])\n\nIn [213]: c2 = pd.Categorical([\"a\", \"b\"])\n\nIn [214]: c1\nOut[214]: \n['b', 'c']\nCategories (2, object): ['b', 'c']\n\n# \"b\" is coded to 0\nIn [215]: c1.codes\nOut[215]: array([0, 1], dtype=int8)\n\nIn [216]: c2\nOut[216]: \n['a', 'b']\nCategories (2, object): ['a', 'b']\n\n# \"b\" is coded to 1\nIn [217]: c2.codes\nOut[217]: array([0, 1], dtype=int8)\n\nIn [218]: c = union_categoricals([c1, c2])\n\nIn [219]: c\nOut[219]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a']\n\n# \"b\" is coded to 0 throughout, same as c1, different from c2\nIn [220]: c.codes\nOut[220]: array([0, 1, 2, 0], dtype=int8) \n```", "```py\nIn [144]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [145]: cats = pd.Series([\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"], dtype=\"category\", index=idx)\n\nIn [146]: values = [1, 2, 2, 2, 3, 4, 5]\n\nIn [147]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [148]: df.iloc[2:4, :]\nOut[148]: \n cats  values\nj    b       2\nk    b       2\n\nIn [149]: df.iloc[2:4, :].dtypes\nOut[149]: \ncats      category\nvalues       int64\ndtype: object\n\nIn [150]: df.loc[\"h\":\"j\", \"cats\"]\nOut[150]: \nh    a\ni    b\nj    b\nName: cats, dtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [151]: df[df[\"cats\"] == \"b\"]\nOut[151]: \n cats  values\ni    b       2\nj    b       2\nk    b       2 \n```", "```py\n# get the complete \"h\" row as a Series\nIn [152]: df.loc[\"h\", :]\nOut[152]: \ncats      a\nvalues    1\nName: h, dtype: object \n```", "```py\nIn [153]: df.iat[0, 0]\nOut[153]: 'a'\n\nIn [154]: df[\"cats\"] = df[\"cats\"].cat.rename_categories([\"x\", \"y\", \"z\"])\n\nIn [155]: df.at[\"h\", \"cats\"]  # returns a string\nOut[155]: 'x' \n```", "```py\nIn [156]: df.loc[[\"h\"], \"cats\"]\nOut[156]: \nh    x\nName: cats, dtype: category\nCategories (3, object): ['x', 'y', 'z'] \n```", "```py\nIn [157]: str_s = pd.Series(list(\"aabb\"))\n\nIn [158]: str_cat = str_s.astype(\"category\")\n\nIn [159]: str_cat\nOut[159]: \n0    a\n1    a\n2    b\n3    b\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [160]: str_cat.str.contains(\"a\")\nOut[160]: \n0     True\n1     True\n2    False\n3    False\ndtype: bool\n\nIn [161]: date_s = pd.Series(pd.date_range(\"1/1/2015\", periods=5))\n\nIn [162]: date_cat = date_s.astype(\"category\")\n\nIn [163]: date_cat\nOut[163]: \n0   2015-01-01\n1   2015-01-02\n2   2015-01-03\n3   2015-01-04\n4   2015-01-05\ndtype: category\nCategories (5, datetime64[ns]): [2015-01-01, 2015-01-02, 2015-01-03, 2015-01-04, 2015-01-05]\n\nIn [164]: date_cat.dt.day\nOut[164]: \n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int32 \n```", "```py\nIn [165]: ret_s = str_s.str.contains(\"a\")\n\nIn [166]: ret_cat = str_cat.str.contains(\"a\")\n\nIn [167]: ret_s.dtype == ret_cat.dtype\nOut[167]: True\n\nIn [168]: ret_s == ret_cat\nOut[168]: \n0    True\n1    True\n2    True\n3    True\ndtype: bool \n```", "```py\nIn [169]: idx = pd.Index([\"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n\nIn [170]: cats = pd.Categorical([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [171]: values = [1, 1, 1, 1, 1, 1, 1]\n\nIn [172]: df = pd.DataFrame({\"cats\": cats, \"values\": values}, index=idx)\n\nIn [173]: df.iloc[2:4, :] = [[\"b\", 2], [\"b\", 2]]\n\nIn [174]: df\nOut[174]: \n cats  values\nh    a       1\ni    a       1\nj    b       2\nk    b       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [175]: try:\n .....:    df.iloc[2:4, :] = [[\"c\", 3], [\"c\", 3]]\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot setitem on a Categorical with a new category, set the categories first \n```", "```py\nIn [176]: df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"a\", \"a\"], categories=[\"a\", \"b\"])\n\nIn [177]: df\nOut[177]: \n cats  values\nh    a       1\ni    a       1\nj    a       2\nk    a       2\nl    a       1\nm    a       1\nn    a       1\n\nIn [178]: try:\n .....:    df.loc[\"j\":\"k\", \"cats\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot set a Categorical with another, without identical categories \n```", "```py\nIn [179]: df = pd.DataFrame({\"a\": [1, 1, 1, 1, 1], \"b\": [\"a\", \"a\", \"a\", \"a\", \"a\"]})\n\nIn [180]: df.loc[1:2, \"a\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [181]: df.loc[2:3, \"b\"] = pd.Categorical([\"b\", \"b\"], categories=[\"a\", \"b\"])\n\nIn [182]: df\nOut[182]: \n a  b\n0  1  a\n1  b  a\n2  b  b\n3  1  b\n4  1  a\n\nIn [183]: df.dtypes\nOut[183]: \na    object\nb    object\ndtype: object \n```", "```py\nIn [184]: from pandas.api.types import union_categoricals\n\n# same categories\nIn [185]: s1 = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [186]: s2 = pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\")\n\nIn [187]: pd.concat([s1, s2])\nOut[187]: \n0    a\n1    b\n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b']\n\n# different categories\nIn [188]: s3 = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [189]: pd.concat([s1, s3])\nOut[189]: \n0    a\n1    b\n0    b\n1    c\ndtype: object\n\n# Output dtype is inferred based on categories values\nIn [190]: int_cats = pd.Series([1, 2], dtype=\"category\")\n\nIn [191]: float_cats = pd.Series([3.0, 4.0], dtype=\"category\")\n\nIn [192]: pd.concat([int_cats, float_cats])\nOut[192]: \n0    1.0\n1    2.0\n0    3.0\n1    4.0\ndtype: float64\n\nIn [193]: pd.concat([s1, s3]).astype(\"category\")\nOut[193]: \n0    a\n1    b\n0    b\n1    c\ndtype: category\nCategories (3, object): ['a', 'b', 'c']\n\nIn [194]: union_categoricals([s1.array, s3.array])\nOut[194]: \n['a', 'b', 'b', 'c']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [195]: from pandas.api.types import union_categoricals\n\nIn [196]: a = pd.Categorical([\"b\", \"c\"])\n\nIn [197]: b = pd.Categorical([\"a\", \"b\"])\n\nIn [198]: union_categoricals([a, b])\nOut[198]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [199]: union_categoricals([a, b], sort_categories=True)\nOut[199]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [200]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [201]: b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n\nIn [202]: union_categoricals([a, b])\nOut[202]: \n['a', 'b', 'a', 'b', 'a']\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [203]: a = pd.Categorical([\"a\", \"b\"], ordered=True)\n\nIn [204]: b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [205]: union_categoricals([a, b])\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[205], line 1\n----> 1 union_categoricals([a, b])\n\nFile ~/work/pandas/pandas/pandas/core/dtypes/concat.py:341, in union_categoricals(to_union, sort_categories, ignore_order)\n  339     if all(c.ordered for c in to_union):\n  340         msg = \"to union ordered Categoricals, all categories must be the same\"\n--> 341         raise TypeError(msg)\n  342     raise TypeError(\"Categorical.ordered must be the same\")\n  344 if ignore_order:\n\nTypeError: to union ordered Categoricals, all categories must be the same \n```", "```py\nIn [206]: a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n\nIn [207]: b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n\nIn [208]: union_categoricals([a, b], ignore_order=True)\nOut[208]: \n['a', 'b', 'c', 'c', 'b', 'a']\nCategories (3, object): ['a', 'b', 'c'] \n```", "```py\nIn [209]: a = pd.Series([\"b\", \"c\"], dtype=\"category\")\n\nIn [210]: b = pd.Series([\"a\", \"b\"], dtype=\"category\")\n\nIn [211]: union_categoricals([a, b])\nOut[211]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a'] \n```", "```py\nIn [212]: c1 = pd.Categorical([\"b\", \"c\"])\n\nIn [213]: c2 = pd.Categorical([\"a\", \"b\"])\n\nIn [214]: c1\nOut[214]: \n['b', 'c']\nCategories (2, object): ['b', 'c']\n\n# \"b\" is coded to 0\nIn [215]: c1.codes\nOut[215]: array([0, 1], dtype=int8)\n\nIn [216]: c2\nOut[216]: \n['a', 'b']\nCategories (2, object): ['a', 'b']\n\n# \"b\" is coded to 1\nIn [217]: c2.codes\nOut[217]: array([0, 1], dtype=int8)\n\nIn [218]: c = union_categoricals([c1, c2])\n\nIn [219]: c\nOut[219]: \n['b', 'c', 'a', 'b']\nCategories (3, object): ['b', 'c', 'a']\n\n# \"b\" is coded to 0 throughout, same as c1, different from c2\nIn [220]: c.codes\nOut[220]: array([0, 1, 2, 0], dtype=int8) \n```", "```py\nIn [221]: import io\n\nIn [222]: s = pd.Series(pd.Categorical([\"a\", \"b\", \"b\", \"a\", \"a\", \"d\"]))\n\n# rename the categories\nIn [223]: s = s.cat.rename_categories([\"very good\", \"good\", \"bad\"])\n\n# reorder the categories and add missing categories\nIn [224]: s = s.cat.set_categories([\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"])\n\nIn [225]: df = pd.DataFrame({\"cats\": s, \"vals\": [1, 2, 3, 4, 5, 6]})\n\nIn [226]: csv = io.StringIO()\n\nIn [227]: df.to_csv(csv)\n\nIn [228]: df2 = pd.read_csv(io.StringIO(csv.getvalue()))\n\nIn [229]: df2.dtypes\nOut[229]: \nUnnamed: 0     int64\ncats          object\nvals           int64\ndtype: object\n\nIn [230]: df2[\"cats\"]\nOut[230]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5          bad\nName: cats, dtype: object\n\n# Redo the category\nIn [231]: df2[\"cats\"] = df2[\"cats\"].astype(\"category\")\n\nIn [232]: df2[\"cats\"] = df2[\"cats\"].cat.set_categories(\n .....:    [\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"]\n .....: )\n .....: \n\nIn [233]: df2.dtypes\nOut[233]: \nUnnamed: 0       int64\ncats          category\nvals             int64\ndtype: object\n\nIn [234]: df2[\"cats\"]\nOut[234]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5          bad\nName: cats, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] \n```", "```py\nIn [235]: s = pd.Series([\"a\", \"b\", np.nan, \"a\"], dtype=\"category\")\n\n# only two categories\nIn [236]: s\nOut[236]: \n0      a\n1      b\n2    NaN\n3      a\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [237]: s.cat.codes\nOut[237]: \n0    0\n1    1\n2   -1\n3    0\ndtype: int8 \n```", "```py\nIn [238]: s = pd.Series([\"a\", \"b\", np.nan], dtype=\"category\")\n\nIn [239]: s\nOut[239]: \n0      a\n1      b\n2    NaN\ndtype: category\nCategories (2, object): ['a', 'b']\n\nIn [240]: pd.isna(s)\nOut[240]: \n0    False\n1    False\n2     True\ndtype: bool\n\nIn [241]: s.fillna(\"a\")\nOut[241]: \n0    a\n1    b\n2    a\ndtype: category\nCategories (2, object): ['a', 'b'] \n```", "```py\nIn [242]: s = pd.Series([\"foo\", \"bar\"] * 1000)\n\n# object dtype\nIn [243]: s.nbytes\nOut[243]: 16000\n\n# category dtype\nIn [244]: s.astype(\"category\").nbytes\nOut[244]: 2016 \n```", "```py\nIn [245]: s = pd.Series([\"foo%04d\" % i for i in range(2000)])\n\n# object dtype\nIn [246]: s.nbytes\nOut[246]: 16000\n\n# category dtype\nIn [247]: s.astype(\"category\").nbytes\nOut[247]: 20000 \n```", "```py\nIn [248]: try:\n .....:    np.dtype(\"category\")\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: data type 'category' not understood\n\nIn [249]: dtype = pd.Categorical([\"a\"]).dtype\n\nIn [250]: try:\n .....:    np.dtype(dtype)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot interpret 'CategoricalDtype(categories=['a'], ordered=False, categories_dtype=object)' as a data type \n```", "```py\nIn [251]: dtype == np.str_\nOut[251]: False\n\nIn [252]: np.str_ == dtype\nOut[252]: False \n```", "```py\nIn [253]: hasattr(pd.Series([\"a\"], dtype=\"category\"), \"cat\")\nOut[253]: True\n\nIn [254]: hasattr(pd.Series([\"a\"]), \"cat\")\nOut[254]: False \n```", "```py\nIn [255]: s = pd.Series(pd.Categorical([1, 2, 3, 4]))\n\nIn [256]: try:\n .....:    np.sum(s)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: 'Categorical' with dtype category does not support reduction 'sum' \n```", "```py\nIn [257]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [1, 2, 3, 4],\n .....:        \"b\": [\"a\", \"b\", \"c\", \"d\"],\n .....:        \"cats\": pd.Categorical([1, 2, 3, 2]),\n .....:    }\n .....: )\n .....: \n\nIn [258]: df.apply(lambda row: type(row[\"cats\"]), axis=1)\nOut[258]: \n0    <class 'int'>\n1    <class 'int'>\n2    <class 'int'>\n3    <class 'int'>\ndtype: object\n\nIn [259]: df.apply(lambda col: col.dtype, axis=0)\nOut[259]: \na          int64\nb         object\ncats    category\ndtype: object \n```", "```py\nIn [260]: cats = pd.Categorical([1, 2, 3, 4], categories=[4, 2, 3, 1])\n\nIn [261]: strings = [\"a\", \"b\", \"c\", \"d\"]\n\nIn [262]: values = [4, 2, 3, 1]\n\nIn [263]: df = pd.DataFrame({\"strings\": strings, \"values\": values}, index=cats)\n\nIn [264]: df.index\nOut[264]: CategoricalIndex([1, 2, 3, 4], categories=[4, 2, 3, 1], ordered=False, dtype='category')\n\n# This now sorts by the categories order\nIn [265]: df.sort_index()\nOut[265]: \n strings  values\n4       d       1\n2       b       2\n3       c       3\n1       a       4 \n```", "```py\nIn [266]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [267]: s = pd.Series(cat, name=\"cat\")\n\nIn [268]: cat\nOut[268]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [269]: s.iloc[0:2] = 10\n\nIn [270]: cat\nOut[270]: \n[10, 10, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```", "```py\nIn [271]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [272]: s = pd.Series(cat, name=\"cat\", copy=True)\n\nIn [273]: cat\nOut[273]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [274]: s.iloc[0:2] = 10\n\nIn [275]: cat\nOut[275]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```", "```py\nIn [242]: s = pd.Series([\"foo\", \"bar\"] * 1000)\n\n# object dtype\nIn [243]: s.nbytes\nOut[243]: 16000\n\n# category dtype\nIn [244]: s.astype(\"category\").nbytes\nOut[244]: 2016 \n```", "```py\nIn [245]: s = pd.Series([\"foo%04d\" % i for i in range(2000)])\n\n# object dtype\nIn [246]: s.nbytes\nOut[246]: 16000\n\n# category dtype\nIn [247]: s.astype(\"category\").nbytes\nOut[247]: 20000 \n```", "```py\nIn [248]: try:\n .....:    np.dtype(\"category\")\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: data type 'category' not understood\n\nIn [249]: dtype = pd.Categorical([\"a\"]).dtype\n\nIn [250]: try:\n .....:    np.dtype(dtype)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: Cannot interpret 'CategoricalDtype(categories=['a'], ordered=False, categories_dtype=object)' as a data type \n```", "```py\nIn [251]: dtype == np.str_\nOut[251]: False\n\nIn [252]: np.str_ == dtype\nOut[252]: False \n```", "```py\nIn [253]: hasattr(pd.Series([\"a\"], dtype=\"category\"), \"cat\")\nOut[253]: True\n\nIn [254]: hasattr(pd.Series([\"a\"]), \"cat\")\nOut[254]: False \n```", "```py\nIn [255]: s = pd.Series(pd.Categorical([1, 2, 3, 4]))\n\nIn [256]: try:\n .....:    np.sum(s)\n .....: except TypeError as e:\n .....:    print(\"TypeError:\", str(e))\n .....: \nTypeError: 'Categorical' with dtype category does not support reduction 'sum' \n```", "```py\nIn [257]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [1, 2, 3, 4],\n .....:        \"b\": [\"a\", \"b\", \"c\", \"d\"],\n .....:        \"cats\": pd.Categorical([1, 2, 3, 2]),\n .....:    }\n .....: )\n .....: \n\nIn [258]: df.apply(lambda row: type(row[\"cats\"]), axis=1)\nOut[258]: \n0    <class 'int'>\n1    <class 'int'>\n2    <class 'int'>\n3    <class 'int'>\ndtype: object\n\nIn [259]: df.apply(lambda col: col.dtype, axis=0)\nOut[259]: \na          int64\nb         object\ncats    category\ndtype: object \n```", "```py\nIn [260]: cats = pd.Categorical([1, 2, 3, 4], categories=[4, 2, 3, 1])\n\nIn [261]: strings = [\"a\", \"b\", \"c\", \"d\"]\n\nIn [262]: values = [4, 2, 3, 1]\n\nIn [263]: df = pd.DataFrame({\"strings\": strings, \"values\": values}, index=cats)\n\nIn [264]: df.index\nOut[264]: CategoricalIndex([1, 2, 3, 4], categories=[4, 2, 3, 1], ordered=False, dtype='category')\n\n# This now sorts by the categories order\nIn [265]: df.sort_index()\nOut[265]: \n strings  values\n4       d       1\n2       b       2\n3       c       3\n1       a       4 \n```", "```py\nIn [266]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [267]: s = pd.Series(cat, name=\"cat\")\n\nIn [268]: cat\nOut[268]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [269]: s.iloc[0:2] = 10\n\nIn [270]: cat\nOut[270]: \n[10, 10, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```", "```py\nIn [271]: cat = pd.Categorical([1, 2, 3, 10], categories=[1, 2, 3, 4, 10])\n\nIn [272]: s = pd.Series(cat, name=\"cat\", copy=True)\n\nIn [273]: cat\nOut[273]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10]\n\nIn [274]: s.iloc[0:2] = 10\n\nIn [275]: cat\nOut[275]: \n[1, 2, 3, 10]\nCategories (5, int64): [1, 2, 3, 4, 10] \n```"]