["```py\nclass scipy.spatial.Delaunay(points, furthest_site=False, incremental=False, qhull_options=None)\n```", "```py\n>>> import numpy as np\n>>> points = np.array([[0, 0], [0, 1.1], [1, 0], [1, 1]])\n>>> from scipy.spatial import Delaunay\n>>> tri = Delaunay(points) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.triplot(points[:,0], points[:,1], tri.simplices)\n>>> plt.plot(points[:,0], points[:,1], 'o')\n>>> plt.show() \n```", "```py\n>>> tri.simplices\narray([[2, 3, 0],                 # may vary\n [3, 1, 0]], dtype=int32) \n```", "```py\n>>> points[tri.simplices]\narray([[[ 1\\. ,  0\\. ],            # may vary\n [ 1\\. ,  1\\. ],\n [ 0\\. ,  0\\. ]],\n [[ 1\\. ,  1\\. ],\n [ 0\\. ,  1.1],\n [ 0\\. ,  0\\. ]]]) \n```", "```py\n>>> tri.neighbors[1]\narray([-1,  0, -1], dtype=int32)\n>>> points[tri.simplices[1,1]]\narray([ 0\\. ,  1.1]) \n```", "```py\n>>> p = np.array([(0.1, 0.2), (1.5, 0.5), (0.5, 1.05)])\n>>> tri.find_simplex(p)\narray([ 1, -1, 1], dtype=int32) \n```", "```py\n>>> p_valids = np.array([(0.1, 0.2), (0.5, 1.05)])\n>>> tri.simplices[tri.find_simplex(p_valids)]\narray([[3, 1, 0],                 # may vary\n [3, 1, 0]], dtype=int32) \n```", "```py\n>>> b = tri.transform[1,:2].dot(np.transpose(p - tri.transform[1,2]))\n>>> np.c_[np.transpose(b), 1 - b.sum(axis=0)]\narray([[ 0.1       ,  0.09090909,  0.80909091],\n [ 1.5       , -0.90909091,  0.40909091],\n [ 0.5       ,  0.5       ,  0\\.        ]]) \n```"]