- en: Input and output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.io.html](https://numpy.org/doc/1.26/reference/routines.io.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## NumPy binary files (NPY, NPZ)'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | Load arrays or pickled objects from `.npy`, `.npz` or pickled files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | Save an array to a binary file in NumPy `.npy` format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | Save several arrays into a single file in uncompressed `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | Save several arrays into a single
    file in compressed `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: The format of these binary file types is documented in [`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")
  prefs: []
  type: TYPE_NORMAL
- en: Text files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | Save an array to a text file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | Load data from a text file, with missing values handled as specified. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | Construct an array from a text file, using regular expression parsing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: Raw binary files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: String formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | Return a string representation of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | Return the string representation of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | Return a string representation of the data in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in positional notation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in scientific notation. |'
  prefs: []
  type: TYPE_TB
- en: Memory mapping files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | Create a memory-map to an array stored in a *binary* file on disk. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | Open a .npy file as a
    memory-mapped array. |'
  prefs: []
  type: TYPE_TB
- en: Text formatting options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | Set printing options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | Return the current print options. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | Set a Python function to be used when
    pretty printing arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | Context manager for setting print options. |'
  prefs: []
  type: TYPE_TB
- en: Base-n representations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | Return a string representation of a number in the given base system. |'
  prefs: []
  type: TYPE_TB
- en: Data sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | A generic data source file (file, http, ftp, ...). |'
  prefs: []
  type: TYPE_TB
- en: Binary format description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | Binary serialization |'
  prefs: []
  type: TYPE_TB
- en: NumPy binary files (NPY, NPZ)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | Load arrays or pickled objects from `.npy`, `.npz` or pickled files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | Save an array to a binary file in NumPy `.npy` format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | Save several arrays into a single file in uncompressed `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | Save several arrays into a single
    file in compressed `.npz` format. |'
  prefs: []
  type: TYPE_TB
- en: The format of these binary file types is documented in [`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")
  prefs: []
  type: TYPE_NORMAL
- en: Text files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | Save an array to a text file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | Load data from a text file, with missing values handled as specified. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | Construct an array from a text file, using regular expression parsing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: Raw binary files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: String formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | Return a string representation of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | Return the string representation of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | Return a string representation of the data in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in positional notation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in scientific notation. |'
  prefs: []
  type: TYPE_TB
- en: Memory mapping files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | Create a memory-map to an array stored in a *binary* file on disk. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | Open a .npy file as a
    memory-mapped array. |'
  prefs: []
  type: TYPE_TB
- en: Text formatting options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | Set printing options.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | Return the current print options. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | Set a Python function to be used when
    pretty printing arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | Context manager for setting print options. |'
  prefs: []
  type: TYPE_TB
- en: Base-n representations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | Return a string representation of a number in the given base system. |'
  prefs: []
  type: TYPE_TB
- en: Data sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | A generic data source file (file, http, ftp, ...). |'
  prefs: []
  type: TYPE_TB
- en: Binary format description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | Binary serialization |'
  prefs: []
  type: TYPE_TB
