- en: pandas.DataFrame.where
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Replace values where the condition is False.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cond**bool Series/DataFrame, array-like, or callable'
  prefs: []
  type: TYPE_NORMAL
- en: Where cond is True, keep the original value. Where False, replace with corresponding
    value from other. If cond is callable, it is computed on the Series/DataFrame
    and should return boolean Series/DataFrame or array. The callable must not change
    input Series/DataFrame (though pandas doesn’t check it).
  prefs: []
  type: TYPE_NORMAL
- en: '**other**scalar, Series/DataFrame, or callable'
  prefs: []
  type: TYPE_NORMAL
- en: Entries where cond is False are replaced with corresponding value from other.
    If other is callable, it is computed on the Series/DataFrame and should return
    scalar or Series/DataFrame. The callable must not change input Series/DataFrame
    (though pandas doesn’t check it). If not specified, entries will be filled with
    the corresponding NULL value (`np.nan` for numpy dtypes, `pd.NA` for extension
    dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to perform the operation in place on the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Alignment axis if needed. For Series this parameter is unused and defaults to
    0.
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Alignment level if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Same type as caller or None if `inplace=True`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.mask()`](pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an object of same shape as self.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The where method is an application of the if-then idiom. For each element in
    the calling DataFrame, if `cond` is `True` the element is used; otherwise the
    corresponding element from the DataFrame `other` is used. If the axis of `other`
    does not align with axis of `cond` Series/DataFrame, the misaligned index positions
    will be filled with False.
  prefs: []
  type: TYPE_NORMAL
- en: The signature for [`DataFrame.where()`](#pandas.DataFrame.where "pandas.DataFrame.where")
    differs from [`numpy.where()`](https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where
    "(in NumPy v1.26)"). Roughly `df1.where(m, df2)` is equivalent to `np.where(m,
    df1, df2)`.
  prefs: []
  type: TYPE_NORMAL
- en: For further details and examples see the `where` documentation in [indexing](../../user_guide/indexing.html#indexing-where-mask).
  prefs: []
  type: TYPE_NORMAL
- en: The dtype of the object takes precedence. The fill value is casted to the object’s
    dtype, if this can be done losslessly.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
