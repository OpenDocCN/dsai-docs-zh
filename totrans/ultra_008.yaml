- en: Multi-Object Tracking with Ultralytics YOLO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/modes/track/`](https://docs.ultralytics.com/modes/track/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Multi-object tracking examples](img/7f13027e396579d2ce9d40937dcd07c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Object tracking in the realm of video analytics is a critical task that not
    only identifies the location and class of objects within the frame but also maintains
    a unique ID for each detected object as the video progresses. The applications
    are limitless—ranging from surveillance and security to real-time sports analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Why Choose Ultralytics YOLO for Object Tracking?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The output from Ultralytics trackers is consistent with standard object detection
    but has the added value of object IDs. This makes it easy to track objects in
    video streams and perform subsequent analytics. Here''s why you should consider
    using Ultralytics YOLO for your object tracking needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Efficiency:** Process video streams in real-time without compromising accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility:** Supports multiple tracking algorithms and configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ease of Use:** Simple Python API and CLI options for quick integration and
    deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizability:** Easy to use with custom trained YOLO models, allowing
    integration into domain-specific applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-`](https://www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Object Detection and Tracking with Ultralytics YOLOv8.'
  prefs: []
  type: TYPE_NORMAL
- en: Real-world Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Transportation | Retail | Aquaculture |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![Vehicle Tracking](img/9458d1602a5852fe954bb05ceb53b4ef.png) | ![People
    Tracking](img/dcac3bbb6a8fffcede9c77d72a872963.png) | ![Fish Tracking](img/e477a393cc4f237c12e2c95f3b66725d.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Vehicle Tracking | People Tracking | Fish Tracking |'
  prefs: []
  type: TYPE_TB
- en: Features at a Glance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ultralytics YOLO extends its object detection features to provide robust and
    versatile object tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Real-Time Tracking:** Seamlessly track objects in high-frame-rate videos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple Tracker Support:** Choose from a variety of established tracking
    algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customizable Tracker Configurations:** Tailor the tracking algorithm to meet
    specific requirements by adjusting various parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available Trackers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ultralytics YOLO supports the following tracking algorithms. They can be enabled
    by passing the relevant YAML configuration file such as `tracker=tracker_type.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BoT-SORT](https://github.com/NirAharon/BoT-SORT) - Use `botsort.yaml` to enable
    this tracker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ByteTrack](https://github.com/ifzhang/ByteTrack) - Use `bytetrack.yaml` to
    enable this tracker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default tracker is BoT-SORT.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tracker Threshold Information
  prefs: []
  type: TYPE_NORMAL
- en: If object confidence score will be low, i.e lower than [`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5),
    then there will be no tracks successfully returned and updated.
  prefs: []
  type: TYPE_NORMAL
- en: To run the tracker on video streams, use a trained Detect, Segment or Pose model
    such as YOLOv8n, YOLOv8n-seg and YOLOv8n-pose.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen in the above usage, tracking is available for all Detect, Segment
    and Pose models run on videos or streaming sources.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tracker Threshold Information
  prefs: []
  type: TYPE_NORMAL
- en: If object confidence score will be low, i.e lower than [`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5),
    then there will be no tracks successfully returned and updated.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking Arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tracking configuration shares properties with Predict mode, such as `conf`,
    `iou`, and `show`. For further configurations, refer to the Predict model page.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tracker Selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics also allows you to use a modified tracker configuration file. To
    do this, simply make a copy of a tracker config file (for example, `custom_tracker.yaml`)
    from [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    and modify any configurations (except the `tracker_type`) as per your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For a comprehensive list of tracking arguments, refer to the [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Python Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Persisting Tracks Loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a Python script using OpenCV (`cv2`) and YOLOv8 to run object tracking
    on video frames. This script still assumes you have already installed the necessary
    packages (`opencv-python` and `ultralytics`). The `persist=True` argument tells
    the tracker that the current image or frame is the next in a sequence and to expect
    tracks from the previous image in the current image.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming for-loop with tracking
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Please note the change from `model(frame)` to `model.track(frame)`, which enables
    object tracking instead of simple detection. This modified script will run the
    tracker on each frame of the video, visualize the results, and display them in
    a window. The loop can be exited by pressing 'q'.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting Tracks Over Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visualizing object tracks over consecutive frames can provide valuable insights
    into the movement patterns and behavior of detected objects within a video. With
    Ultralytics YOLOv8, plotting these tracks is a seamless and efficient process.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we demonstrate how to utilize YOLOv8's tracking capabilities
    to plot the movement of detected objects across multiple video frames. This script
    involves opening a video file, reading it frame by frame, and utilizing the YOLO
    model to identify and track various objects. By retaining the center points of
    the detected bounding boxes and connecting them, we can draw lines that represent
    the paths followed by the tracked objects.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting tracks over multiple video frames
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Multithreaded Tracking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multithreaded tracking provides the capability to run object tracking on multiple
    video streams simultaneously. This is particularly useful when handling multiple
    video inputs, such as from multiple surveillance cameras, where concurrent processing
    can greatly enhance efficiency and performance.
  prefs: []
  type: TYPE_NORMAL
- en: In the provided Python script, we make use of Python's `threading` module to
    run multiple instances of the tracker concurrently. Each thread is responsible
    for running the tracker on one video file, and all the threads run simultaneously
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that each thread receives the correct parameters (the video file,
    the model to use and the file index), we define a function `run_tracker_in_thread`
    that accepts these parameters and contains the main tracking loop. This function
    reads the video frame by frame, runs the tracker, and displays the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two different models are used in this example: `yolov8n.pt` and `yolov8n-seg.pt`,
    each tracking objects in a different video file. The video files are specified
    in `video_file1` and `video_file2`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `daemon=True` parameter in `threading.Thread` means that these threads will
    be closed as soon as the main program finishes. We then start the threads with
    `start()` and use `join()` to make the main thread wait until both tracker threads
    have finished.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after all threads have completed their task, the windows displaying
    the results are closed using `cv2.destroyAllWindows()`.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming for-loop with tracking
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This example can easily be extended to handle more video files and models by
    creating more threads and applying the same methodology.
  prefs: []
  type: TYPE_NORMAL
- en: Contribute New Trackers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Are you proficient in multi-object tracking and have successfully implemented
    or adapted a tracking algorithm with Ultralytics YOLO? We invite you to contribute
    to our Trackers section in [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)!
    Your real-world applications and solutions could be invaluable for users working
    on tracking tasks.
  prefs: []
  type: TYPE_NORMAL
- en: By contributing to this section, you help expand the scope of tracking solutions
    available within the Ultralytics YOLO framework, adding another layer of functionality
    and utility for the community.
  prefs: []
  type: TYPE_NORMAL
- en: To initiate your contribution, please refer to our Contributing Guide for comprehensive
    instructions on submitting a Pull Request (PR) 🛠️. We are excited to see what
    you bring to the table!
  prefs: []
  type: TYPE_NORMAL
- en: Together, let's enhance the tracking capabilities of the Ultralytics YOLO ecosystem
    🙏!
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is Multi-Object Tracking and how does Ultralytics YOLO support it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multi-object tracking in video analytics involves both identifying objects and
    maintaining a unique ID for each detected object across video frames. Ultralytics
    YOLO supports this by providing real-time tracking along with object IDs, facilitating
    tasks such as security surveillance and sports analytics. The system uses trackers
    like BoT-SORT and ByteTrack, which can be configured via YAML files.
  prefs: []
  type: TYPE_NORMAL
- en: How do I configure a custom tracker for Ultralytics YOLO?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can configure a custom tracker by copying an existing tracker configuration
    file (e.g., `custom_tracker.yaml`) from the [Ultralytics tracker configuration
    directory](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    and modifying parameters as needed, except for the `tracker_type`. Use this file
    in your tracking model like so:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How can I run object tracking on multiple video streams simultaneously?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run object tracking on multiple video streams simultaneously, you can use
    Python''s `threading` module. Each thread will handle a separate video stream.
    Here''s an example of how you can set this up:'
  prefs: []
  type: TYPE_NORMAL
- en: Multithreaded Tracking
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: What are the real-world applications of multi-object tracking with Ultralytics
    YOLO?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Multi-object tracking with Ultralytics YOLO has numerous applications, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transportation:** Vehicle tracking for traffic management and autonomous
    driving.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retail:** People tracking for in-store analytics and security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aquaculture:** Fish tracking for monitoring aquatic environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These applications benefit from Ultralytics YOLO's ability to process high-frame-rate
    videos in real time.
  prefs: []
  type: TYPE_NORMAL
- en: How can I visualize object tracks over multiple video frames with Ultralytics
    YOLO?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To visualize object tracks over multiple video frames, you can use the YOLO
    model''s tracking features along with OpenCV to draw the paths of detected objects.
    Here''s an example script that demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting tracks over multiple video frames
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This script will plot the tracking lines showing the movement paths of the tracked
    objects over time.
  prefs: []
  type: TYPE_NORMAL
