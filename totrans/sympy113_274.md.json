["```py\n> >>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n> \n> >>> from sympy.polys.domains import QQ\n> \n> >>> from sympy import symbols\n> \n> >>> x = symbols('x')\n> \n> >>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx') \n> ```", "```py\n> >>> p = HolonomicFunction(Dx - 1, x, 0, [1])\n> \n> >>> q = HolonomicFunction(Dx**2 + 1, x, 0, [0, 1]) \n> ```", "```py\n> >>> p + q\n> \n> HolonomicFunction((-1) + (1)*Dx + (-1)*Dx**2 + (1)*Dx**3, x, 0, [1, 2, 1]) \n> ```", "```py\n> >>> p * q\n> \n> HolonomicFunction((2) + (-2)*Dx + (1)*Dx**2, x, 0, [0, 1]) \n> ```", "```py\nHolonomicFunction.integrate(limits, initcond=False)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).integrate((x, 0, x))  # e^x - 1\nHolonomicFunction((-1)*Dx + (1)*Dx**2, x, 0, [0, 1])\n>>> HolonomicFunction(Dx**2 + 1, x, 0, [1, 0]).integrate((x, 0, x))\nHolonomicFunction((1)*Dx + (1)*Dx**3, x, 0, [0, 1, 0]) \n```", "```py\nHolonomicFunction.diff(*args, **kwargs)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import ZZ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(Dx**2 + 1, x, 0, [0, 1]).diff().to_expr()\ncos(x)\n>>> HolonomicFunction(Dx - 2, x, 0, [1]).diff().to_expr()\n2*exp(2*x) \n```", "```py\nHolonomicFunction.composition(expr, *args, **kwargs)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(Dx - 1, x).composition(x**2, 0, [1])  # e^(x**2)\nHolonomicFunction((-2*x) + (1)*Dx, x, 0, [1])\n>>> HolonomicFunction(Dx**2 + 1, x).composition(x**2 - 1, 1, [1, 0])\nHolonomicFunction((4*x**3) + (-1)*Dx + (x)*Dx**2, x, 1, [1, 0]) \n```", "```py\nHolonomicFunction.to_sequence(lb=True)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols, S\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).to_sequence()\n[(HolonomicSequence((-1) + (n + 1)Sn, n), u(0) = 1, 0)]\n>>> HolonomicFunction((1 + x)*Dx**2 + Dx, x, 0, [0, 1]).to_sequence()\n[(HolonomicSequence((n**2) + (n**2 + n)Sn, n), u(0) = 0, u(1) = 1, u(2) = -1/2, 2)]\n>>> HolonomicFunction(-S(1)/2 + x*Dx, x, 0, {S(1)/2: [1]}).to_sequence()\n[(HolonomicSequence((n), n), u(0) = 1, 1/2, 1)] \n```", "```py\nHolonomicFunction.series(n=6, coefficient=False, order=True, _recur=None)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).series()  # e^x\n1 + x + x**2/2 + x**3/6 + x**4/24 + x**5/120 + O(x**6)\n>>> HolonomicFunction(Dx**2 + 1, x, 0, [0, 1]).series(n=8)  # sin(x)\nx - x**3/6 + x**5/120 - x**7/5040 + O(x**8) \n```", "```py\nHolonomicFunction.evalf(points, method='RK4', h=0.05, derivatives=False)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx') \n```", "```py\n>>> r = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1] \n```", "```py\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).evalf(r)\n[1.10517083333333, 1.22140257085069, 1.34985849706254, 1.49182424008069,\n1.64872063859684, 1.82211796209193, 2.01375162659678, 2.22553956329232,\n2.45960141378007, 2.71827974413517] \n```", "```py\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).evalf(r, method='Euler')\n[1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881,\n2.357947691, 2.5937424601] \n```", "```py\nHolonomicFunction.to_hyper(as_list=False, _recur=None)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import ZZ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x),'Dx')\n>>> # sin(x)\n>>> HolonomicFunction(Dx**2 + 1, x, 0, [0, 1]).to_hyper()\nx*hyper((), (3/2,), -x**2/4)\n>>> # exp(x)\n>>> HolonomicFunction(Dx - 1, x, 0, [1]).to_hyper()\nhyper((), (), x) \n```", "```py\nHolonomicFunction.to_meijerg()\n```", "```py\n>>> from sympy.holonomic import expr_to_holonomic\n>>> from sympy import sin, cos, hyperexpand, log, symbols\n>>> x = symbols('x')\n>>> hyperexpand(expr_to_holonomic(cos(x) + sin(x)).to_meijerg())\nsin(x) + cos(x)\n>>> hyperexpand(expr_to_holonomic(log(x)).to_meijerg()).simplify()\nlog(x) \n```", "```py\nHolonomicFunction.to_expr()\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import ZZ\n>>> from sympy import symbols, S\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x),'Dx')\n>>> HolonomicFunction(x**2*Dx**2 + x*Dx + (x**2 - 1), x, 0, [0, S(1)/2]).to_expr()\nbesselj(1, x)\n>>> HolonomicFunction((1 + x)*Dx**3 + Dx**2, x, 0, [1, 1, 1]).to_expr()\nx*log(x + 1) + log(x + 1) + 1 \n```"]