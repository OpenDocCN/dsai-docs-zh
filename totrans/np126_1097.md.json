["```py\n/**\n * This a simple brief.\n *\n * And the details goes here.\n * Multi lines are welcome.\n *\n * @param  num  leave a comment for parameter num.\n * @param  str  leave a comment for the second parameter.\n * @return      leave a comment for the returned value.\n */\nint doxy_javadoc_example(int num, const char *str); \n```", "```py\nint doxy_javadoc_example(int num, const char *str)\n```", "```py\n/**\n *  Template to represent limbo numbers.\n *\n *  Specializations for integer types that are part of nowhere.\n *  It doesn't support with any real types.\n *\n *  @param Tp Type of the integer. Required to be an integer type.\n *  @param N  Number of elements.\n*/\ntemplate<typename Tp, std::size_t N>\nclass DoxyLimbo {\n public:\n    /// Default constructor. Initialize nothing.\n    DoxyLimbo();\n    /// Set Default behavior for copy the limbo.\n    DoxyLimbo(const DoxyLimbo<Tp, N> &l);\n    /// Returns the raw data for the limbo.\n    const Tp *data();\n protected:\n    Tp p_data[N]; ///< Example for inline comment.\n}; \n```", "```py\ntemplate<typename Tp, std::size_t N> class DoxyLimbo\n```", "```py\nDoxyLimbo()\n```", "```py\nDoxyLimbo(const <, > &l)\n```", "```py\nconst *data()\n```", "```py\np_data[]\n```", "```py\n/**\n * A comment block contains reST markup.\n * @rst\n * .. note::\n *\n *   Thanks to Breathe_, we were able to bring it to Doxygen_\n *\n * Some code example::\n *\n *   int example(int x) {\n *       return x * 2;\n *   }\n * @endrst\n */\nvoid doxy_reST_example(void); \n```", "```py\nvoid doxy_reST_example(void)\n```", "```py\nint example(int x) {\n    return x * 2;\n} \n```", "```py\n# to specify certain headers\nINPUT += @CUR_DIR/header1.h \\\n         @CUR_DIR/header2.h\n# to add all headers in certain path\nINPUT += @CUR_DIR/to/headers\n# to define certain macros\nPREDEFINED += C_MACRO(X)=X\n# to enable certain branches\nPREDEFINED += NPY_HAVE_FEATURE \\\n              NPY_HAVE_FEATURE2 \n```", "```py\n.. doxygenfunction:: <function name>\n    :outline:\n    :no-link: \n```", "```py\n.. doxygenclass:: <class name>\n   :members: [...]\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :membergroups: ...\n   :members-only:\n   :outline:\n   :no-link: \n```", "```py\n.. doxygennamespace:: <namespace>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link: \n```", "```py\n.. doxygengroup:: <group name>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link:\n   :inner: \n```", "```py\n/**\n * This a simple brief.\n *\n * And the details goes here.\n * Multi lines are welcome.\n *\n * @param  num  leave a comment for parameter num.\n * @param  str  leave a comment for the second parameter.\n * @return      leave a comment for the returned value.\n */\nint doxy_javadoc_example(int num, const char *str); \n```", "```py\nint doxy_javadoc_example(int num, const char *str)\n```", "```py\n/**\n *  Template to represent limbo numbers.\n *\n *  Specializations for integer types that are part of nowhere.\n *  It doesn't support with any real types.\n *\n *  @param Tp Type of the integer. Required to be an integer type.\n *  @param N  Number of elements.\n*/\ntemplate<typename Tp, std::size_t N>\nclass DoxyLimbo {\n public:\n    /// Default constructor. Initialize nothing.\n    DoxyLimbo();\n    /// Set Default behavior for copy the limbo.\n    DoxyLimbo(const DoxyLimbo<Tp, N> &l);\n    /// Returns the raw data for the limbo.\n    const Tp *data();\n protected:\n    Tp p_data[N]; ///< Example for inline comment.\n}; \n```", "```py\ntemplate<typename Tp, std::size_t N> class DoxyLimbo\n```", "```py\nDoxyLimbo()\n```", "```py\nDoxyLimbo(const <, > &l)\n```", "```py\nconst *data()\n```", "```py\np_data[]\n```", "```py\n/**\n * A comment block contains reST markup.\n * @rst\n * .. note::\n *\n *   Thanks to Breathe_, we were able to bring it to Doxygen_\n *\n * Some code example::\n *\n *   int example(int x) {\n *       return x * 2;\n *   }\n * @endrst\n */\nvoid doxy_reST_example(void); \n```", "```py\nvoid doxy_reST_example(void)\n```", "```py\nint example(int x) {\n    return x * 2;\n} \n```", "```py\n# to specify certain headers\nINPUT += @CUR_DIR/header1.h \\\n         @CUR_DIR/header2.h\n# to add all headers in certain path\nINPUT += @CUR_DIR/to/headers\n# to define certain macros\nPREDEFINED += C_MACRO(X)=X\n# to enable certain branches\nPREDEFINED += NPY_HAVE_FEATURE \\\n              NPY_HAVE_FEATURE2 \n```", "```py\n.. doxygenfunction:: <function name>\n    :outline:\n    :no-link: \n```", "```py\n.. doxygenclass:: <class name>\n   :members: [...]\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :membergroups: ...\n   :members-only:\n   :outline:\n   :no-link: \n```", "```py\n.. doxygennamespace:: <namespace>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link: \n```", "```py\n.. doxygengroup:: <group name>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link:\n   :inner: \n```", "```py\n/**\n * This a simple brief.\n *\n * And the details goes here.\n * Multi lines are welcome.\n *\n * @param  num  leave a comment for parameter num.\n * @param  str  leave a comment for the second parameter.\n * @return      leave a comment for the returned value.\n */\nint doxy_javadoc_example(int num, const char *str); \n```", "```py\nint doxy_javadoc_example(int num, const char *str)\n```", "```py\n/**\n *  Template to represent limbo numbers.\n *\n *  Specializations for integer types that are part of nowhere.\n *  It doesn't support with any real types.\n *\n *  @param Tp Type of the integer. Required to be an integer type.\n *  @param N  Number of elements.\n*/\ntemplate<typename Tp, std::size_t N>\nclass DoxyLimbo {\n public:\n    /// Default constructor. Initialize nothing.\n    DoxyLimbo();\n    /// Set Default behavior for copy the limbo.\n    DoxyLimbo(const DoxyLimbo<Tp, N> &l);\n    /// Returns the raw data for the limbo.\n    const Tp *data();\n protected:\n    Tp p_data[N]; ///< Example for inline comment.\n}; \n```", "```py\ntemplate<typename Tp, std::size_t N> class DoxyLimbo\n```", "```py\nDoxyLimbo()\n```", "```py\nDoxyLimbo(const <, > &l)\n```", "```py\nconst *data()\n```", "```py\np_data[]\n```", "```py\n/**\n * A comment block contains reST markup.\n * @rst\n * .. note::\n *\n *   Thanks to Breathe_, we were able to bring it to Doxygen_\n *\n * Some code example::\n *\n *   int example(int x) {\n *       return x * 2;\n *   }\n * @endrst\n */\nvoid doxy_reST_example(void); \n```", "```py\nvoid doxy_reST_example(void)\n```", "```py\nint example(int x) {\n    return x * 2;\n} \n```", "```py\n# to specify certain headers\nINPUT += @CUR_DIR/header1.h \\\n         @CUR_DIR/header2.h\n# to add all headers in certain path\nINPUT += @CUR_DIR/to/headers\n# to define certain macros\nPREDEFINED += C_MACRO(X)=X\n# to enable certain branches\nPREDEFINED += NPY_HAVE_FEATURE \\\n              NPY_HAVE_FEATURE2 \n```", "```py\n.. doxygenfunction:: <function name>\n    :outline:\n    :no-link: \n```", "```py\n.. doxygenclass:: <class name>\n   :members: [...]\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :membergroups: ...\n   :members-only:\n   :outline:\n   :no-link: \n```", "```py\n.. doxygennamespace:: <namespace>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link: \n```", "```py\n.. doxygengroup:: <group name>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link:\n   :inner: \n```", "```py\n/**\n * This a simple brief.\n *\n * And the details goes here.\n * Multi lines are welcome.\n *\n * @param  num  leave a comment for parameter num.\n * @param  str  leave a comment for the second parameter.\n * @return      leave a comment for the returned value.\n */\nint doxy_javadoc_example(int num, const char *str); \n```", "```py\nint doxy_javadoc_example(int num, const char *str)\n```", "```py\n/**\n *  Template to represent limbo numbers.\n *\n *  Specializations for integer types that are part of nowhere.\n *  It doesn't support with any real types.\n *\n *  @param Tp Type of the integer. Required to be an integer type.\n *  @param N  Number of elements.\n*/\ntemplate<typename Tp, std::size_t N>\nclass DoxyLimbo {\n public:\n    /// Default constructor. Initialize nothing.\n    DoxyLimbo();\n    /// Set Default behavior for copy the limbo.\n    DoxyLimbo(const DoxyLimbo<Tp, N> &l);\n    /// Returns the raw data for the limbo.\n    const Tp *data();\n protected:\n    Tp p_data[N]; ///< Example for inline comment.\n}; \n```", "```py\ntemplate<typename Tp, std::size_t N> class DoxyLimbo\n```", "```py\nDoxyLimbo()\n```", "```py\nDoxyLimbo(const <, > &l)\n```", "```py\nconst *data()\n```", "```py\np_data[]\n```", "```py\n/**\n * A comment block contains reST markup.\n * @rst\n * .. note::\n *\n *   Thanks to Breathe_, we were able to bring it to Doxygen_\n *\n * Some code example::\n *\n *   int example(int x) {\n *       return x * 2;\n *   }\n * @endrst\n */\nvoid doxy_reST_example(void); \n```", "```py\nvoid doxy_reST_example(void)\n```", "```py\nint example(int x) {\n    return x * 2;\n} \n```", "```py\n/**\n * A comment block contains reST markup.\n * @rst\n * .. note::\n *\n *   Thanks to Breathe_, we were able to bring it to Doxygen_\n *\n * Some code example::\n *\n *   int example(int x) {\n *       return x * 2;\n *   }\n * @endrst\n */\nvoid doxy_reST_example(void); \n```", "```py\nvoid doxy_reST_example(void)\n```", "```py\nint example(int x) {\n    return x * 2;\n} \n```", "```py\n# to specify certain headers\nINPUT += @CUR_DIR/header1.h \\\n         @CUR_DIR/header2.h\n# to add all headers in certain path\nINPUT += @CUR_DIR/to/headers\n# to define certain macros\nPREDEFINED += C_MACRO(X)=X\n# to enable certain branches\nPREDEFINED += NPY_HAVE_FEATURE \\\n              NPY_HAVE_FEATURE2 \n```", "```py\n.. doxygenfunction:: <function name>\n    :outline:\n    :no-link: \n```", "```py\n.. doxygenclass:: <class name>\n   :members: [...]\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :membergroups: ...\n   :members-only:\n   :outline:\n   :no-link: \n```", "```py\n.. doxygennamespace:: <namespace>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link: \n```", "```py\n.. doxygengroup:: <group name>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link:\n   :inner: \n```", "```py\n.. doxygenfunction:: <function name>\n    :outline:\n    :no-link: \n```", "```py\n.. doxygenclass:: <class name>\n   :members: [...]\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :membergroups: ...\n   :members-only:\n   :outline:\n   :no-link: \n```", "```py\n.. doxygennamespace:: <namespace>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link: \n```", "```py\n.. doxygengroup:: <group name>\n   :content-only:\n   :outline:\n   :members:\n   :protected-members:\n   :private-members:\n   :undoc-members:\n   :no-link:\n   :inner: \n```"]