- en: pandas.io.formats.style.Styler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.html](https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Helps style a DataFrame or Series according to the data with HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**Series or DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Data to be styled - either a Series or DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Precision to round floats to. If not given defaults to `pandas.options.styler.format.precision`.
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**table_styles**list-like, default None'
  prefs: []
  type: TYPE_NORMAL
- en: 'List of {selector: (attr, value)} dicts; see Notes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**uuid**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: A unique identifier to avoid CSS collisions; generated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**caption**str, tuple, default None'
  prefs: []
  type: TYPE_NORMAL
- en: String caption to attach to the table. Tuple only used for LaTeX dual captions.
  prefs: []
  type: TYPE_NORMAL
- en: '**table_attributes**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Items that show up in the opening `<table>` tag in addition to automatic (by
    default) id.
  prefs: []
  type: TYPE_NORMAL
- en: '**cell_ids**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If True, each cell will have an `id` attribute in their HTML tag. The `id` takes
    the form `T_<uuid>_row<num_row>_col<num_col>` where `<uuid>` is the unique identifier,
    `<num_row>` is the row number and `<num_col>` is the column number.
  prefs: []
  type: TYPE_NORMAL
- en: '**na_rep**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Representation for missing values. If `na_rep` is None, no special formatting
    is applied, and falls back to `pandas.options.styler.format.na_rep`.
  prefs: []
  type: TYPE_NORMAL
- en: '**uuid_len**int, default 5'
  prefs: []
  type: TYPE_NORMAL
- en: If `uuid` is not specified, the length of the `uuid` to randomly generate expressed
    in hex characters, in range [0, 32].
  prefs: []
  type: TYPE_NORMAL
- en: '**decimal**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as decimal separator for floats, complex and integers. If not
    given uses `pandas.options.styler.format.decimal`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**thousands**str, optional, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as thousands separator for floats, complex and integers. If not
    given uses `pandas.options.styler.format.thousands`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**escape**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Use ‘html’ to replace the characters `&`, `<`, `>`, `'`, and `"` in cell display
    string with HTML-safe sequences. Use ‘latex’ to replace the characters `&`, `%`,
    `$`, `#`, `_`, `{`, `}`, `~`, `^`, and `\` in the cell display string with LaTeX-safe
    sequences. Use ‘latex-math’ to replace the characters the same way as in ‘latex’
    mode, except for math substrings, which either are surrounded by two characters
    `$` or start with the character `\(` and end with `\)`. If not given uses `pandas.options.styler.format.escape`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**formatter**str, callable, dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Object to define how values are displayed. See `Styler.format`. If not given
    uses `pandas.options.styler.format.formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.style`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a Styler object containing methods for building a styled HTML representation
    for the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Most styling will be done by passing style functions into `Styler.apply` or
    `Styler.map`. Style functions should return values with strings containing CSS
    `''attr: value''` that will be applied to the indicated cells.'
  prefs: []
  type: TYPE_NORMAL
- en: If using in the Jupyter notebook, Styler has defined a `_repr_html_` to automatically
    render itself. Otherwise call Styler.to_html to get the generated HTML.
  prefs: []
  type: TYPE_NORMAL
- en: CSS classes are attached to the generated HTML
  prefs: []
  type: TYPE_NORMAL
- en: Index and Column names include `index_name` and `level<k>` where k is its level
    in a MultiIndex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index label cells include
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row_heading`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row<n>` where n is the numeric position of the row'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`level<k>` where k is the level in a MultiIndex'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Column label cells include * `col_heading` * `col<n>` where n is the numeric
    position of the column * `level<k>` where k is the level in a MultiIndex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blank cells include `blank`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data cells include `data`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trimmed cells include `col_trim` or `row_trim`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Any, or all, or these classes can be renamed by using the `css_class_names`
    argument in `Styler.set_table_classes`, giving a value such as *{“row”: “MY_ROW_CLASS”,
    “col_trim”: “”, “row_trim”: “”}*.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Please see: [Table Visualization](../../user_guide/style.html) for more examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| **env** | (Jinja2 jinja2.Environment) |'
  prefs: []
  type: TYPE_TB
- en: '| **template_html** | (Jinja2 Template) |'
  prefs: []
  type: TYPE_TB
- en: '| **template_html_table** | (Jinja2 Template) |'
  prefs: []
  type: TYPE_TB
- en: '| **template_html_style** | (Jinja2 Template) |'
  prefs: []
  type: TYPE_TB
- en: '| **template_latex** | (Jinja2 Template) |'
  prefs: []
  type: TYPE_TB
- en: '| **loader** | (Jinja2 Loader) |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`env`](pandas.io.formats.style.Styler.env.html#pandas.io.formats.style.Styler.env
    "pandas.io.formats.style.Styler.env") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`loader`](pandas.io.formats.style.Styler.loader.html#pandas.io.formats.style.Styler.loader
    "pandas.io.formats.style.Styler.loader") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`template_html`](pandas.io.formats.style.Styler.template_html.html#pandas.io.formats.style.Styler.template_html
    "pandas.io.formats.style.Styler.template_html") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`template_html_style`](pandas.io.formats.style.Styler.template_html_style.html#pandas.io.formats.style.Styler.template_html_style
    "pandas.io.formats.style.Styler.template_html_style") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`template_html_table`](pandas.io.formats.style.Styler.template_html_table.html#pandas.io.formats.style.Styler.template_html_table
    "pandas.io.formats.style.Styler.template_html_table") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`template_latex`](pandas.io.formats.style.Styler.template_latex.html#pandas.io.formats.style.Styler.template_latex
    "pandas.io.formats.style.Styler.template_latex") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`template_string`](pandas.io.formats.style.Styler.template_string.html#pandas.io.formats.style.Styler.template_string
    "pandas.io.formats.style.Styler.template_string") |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`apply`](pandas.io.formats.style.Styler.apply.html#pandas.io.formats.style.Styler.apply
    "pandas.io.formats.style.Styler.apply")(func[, axis, subset]) | Apply a CSS-styling
    function column-wise, row-wise, or table-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`apply_index`](pandas.io.formats.style.Styler.apply_index.html#pandas.io.formats.style.Styler.apply_index
    "pandas.io.formats.style.Styler.apply_index")(func[, axis, level]) | Apply a CSS-styling
    function to the index or column headers, level-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| `applymap`(func[, subset]) | (DEPRECATED) Apply a CSS-styling function elementwise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `applymap_index`(func[, axis, level]) | (DEPRECATED) Apply a CSS-styling
    function to the index or column headers, elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`background_gradient`](pandas.io.formats.style.Styler.background_gradient.html#pandas.io.formats.style.Styler.background_gradient
    "pandas.io.formats.style.Styler.background_gradient")([cmap, low, high, axis, ...])
    | Color the background in a gradient style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bar`](pandas.io.formats.style.Styler.bar.html#pandas.io.formats.style.Styler.bar
    "pandas.io.formats.style.Styler.bar")([subset, axis, color, cmap, width, ...])
    | Draw bar chart in the cell backgrounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clear`](pandas.io.formats.style.Styler.clear.html#pandas.io.formats.style.Styler.clear
    "pandas.io.formats.style.Styler.clear")() | Reset the `Styler`, removing any previously
    applied styles. |'
  prefs: []
  type: TYPE_TB
- en: '| [`concat`](pandas.io.formats.style.Styler.concat.html#pandas.io.formats.style.Styler.concat
    "pandas.io.formats.style.Styler.concat")(other) | Append another Styler to combine
    the output into a single table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`export`](pandas.io.formats.style.Styler.export.html#pandas.io.formats.style.Styler.export
    "pandas.io.formats.style.Styler.export")() | Export the styles applied to the
    current Styler. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format`](pandas.io.formats.style.Styler.format.html#pandas.io.formats.style.Styler.format
    "pandas.io.formats.style.Styler.format")([formatter, subset, na_rep, ...]) | Format
    the text display value of cells. |'
  prefs: []
  type: TYPE_TB
- en: '| [`format_index`](pandas.io.formats.style.Styler.format_index.html#pandas.io.formats.style.Styler.format_index
    "pandas.io.formats.style.Styler.format_index")([formatter, axis, level, ...])
    | Format the text display value of index labels or column headers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_custom_template`](pandas.io.formats.style.Styler.from_custom_template.html#pandas.io.formats.style.Styler.from_custom_template
    "pandas.io.formats.style.Styler.from_custom_template")(searchpath[, ...]) | Factory
    function for creating a subclass of `Styler`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hide`](pandas.io.formats.style.Styler.hide.html#pandas.io.formats.style.Styler.hide
    "pandas.io.formats.style.Styler.hide")([subset, axis, level, names]) | Hide the
    entire index / column headers, or specific rows / columns from display. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highlight_between`](pandas.io.formats.style.Styler.highlight_between.html#pandas.io.formats.style.Styler.highlight_between
    "pandas.io.formats.style.Styler.highlight_between")([subset, color, axis, ...])
    | Highlight a defined range with a style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highlight_max`](pandas.io.formats.style.Styler.highlight_max.html#pandas.io.formats.style.Styler.highlight_max
    "pandas.io.formats.style.Styler.highlight_max")([subset, color, axis, props])
    | Highlight the maximum with a style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highlight_min`](pandas.io.formats.style.Styler.highlight_min.html#pandas.io.formats.style.Styler.highlight_min
    "pandas.io.formats.style.Styler.highlight_min")([subset, color, axis, props])
    | Highlight the minimum with a style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highlight_null`](pandas.io.formats.style.Styler.highlight_null.html#pandas.io.formats.style.Styler.highlight_null
    "pandas.io.formats.style.Styler.highlight_null")([color, subset, props]) | Highlight
    missing values with a style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`highlight_quantile`](pandas.io.formats.style.Styler.highlight_quantile.html#pandas.io.formats.style.Styler.highlight_quantile
    "pandas.io.formats.style.Styler.highlight_quantile")([subset, color, axis, ...])
    | Highlight values defined by a quantile with a style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`map`](pandas.io.formats.style.Styler.map.html#pandas.io.formats.style.Styler.map
    "pandas.io.formats.style.Styler.map")(func[, subset]) | Apply a CSS-styling function
    elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`map_index`](pandas.io.formats.style.Styler.map_index.html#pandas.io.formats.style.Styler.map_index
    "pandas.io.formats.style.Styler.map_index")(func[, axis, level]) | Apply a CSS-styling
    function to the index or column headers, elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pipe`](pandas.io.formats.style.Styler.pipe.html#pandas.io.formats.style.Styler.pipe
    "pandas.io.formats.style.Styler.pipe")(func, *args, **kwargs) | Apply `func(self,
    *args, **kwargs)`, and return the result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`relabel_index`](pandas.io.formats.style.Styler.relabel_index.html#pandas.io.formats.style.Styler.relabel_index
    "pandas.io.formats.style.Styler.relabel_index")(labels[, axis, level]) | Relabel
    the index, or column header, keys to display a set of specified values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_caption`](pandas.io.formats.style.Styler.set_caption.html#pandas.io.formats.style.Styler.set_caption
    "pandas.io.formats.style.Styler.set_caption")(caption) | Set the text added to
    a `<caption>` HTML element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_properties`](pandas.io.formats.style.Styler.set_properties.html#pandas.io.formats.style.Styler.set_properties
    "pandas.io.formats.style.Styler.set_properties")([subset]) | Set defined CSS-properties
    to each `<td>` HTML element for the given subset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_sticky`](pandas.io.formats.style.Styler.set_sticky.html#pandas.io.formats.style.Styler.set_sticky
    "pandas.io.formats.style.Styler.set_sticky")([axis, pixel_size, levels]) | Add
    CSS to permanently display the index or column headers in a scrolling frame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_table_attributes`](pandas.io.formats.style.Styler.set_table_attributes.html#pandas.io.formats.style.Styler.set_table_attributes
    "pandas.io.formats.style.Styler.set_table_attributes")(attributes) | Set the table
    attributes added to the `<table>` HTML element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_table_styles`](pandas.io.formats.style.Styler.set_table_styles.html#pandas.io.formats.style.Styler.set_table_styles
    "pandas.io.formats.style.Styler.set_table_styles")([table_styles, axis, ...])
    | Set the table styles included within the `<style>` HTML element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_td_classes`](pandas.io.formats.style.Styler.set_td_classes.html#pandas.io.formats.style.Styler.set_td_classes
    "pandas.io.formats.style.Styler.set_td_classes")(classes) | Set the `class` attribute
    of `<td>` HTML elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_tooltips`](pandas.io.formats.style.Styler.set_tooltips.html#pandas.io.formats.style.Styler.set_tooltips
    "pandas.io.formats.style.Styler.set_tooltips")(ttips[, props, css_class]) | Set
    the DataFrame of strings on `Styler` generating `:hover` tooltips. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_uuid`](pandas.io.formats.style.Styler.set_uuid.html#pandas.io.formats.style.Styler.set_uuid
    "pandas.io.formats.style.Styler.set_uuid")(uuid) | Set the uuid applied to `id`
    attributes of HTML elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`text_gradient`](pandas.io.formats.style.Styler.text_gradient.html#pandas.io.formats.style.Styler.text_gradient
    "pandas.io.formats.style.Styler.text_gradient")([cmap, low, high, axis, ...])
    | Color the text in a gradient style. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_excel`](pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel")(excel_writer[, sheet_name, na_rep, ...])
    | Write Styler to an Excel sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_html`](pandas.io.formats.style.Styler.to_html.html#pandas.io.formats.style.Styler.to_html
    "pandas.io.formats.style.Styler.to_html")([buf, table_uuid, table_attributes, ...])
    | Write Styler to a file, buffer or string in HTML-CSS format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_latex`](pandas.io.formats.style.Styler.to_latex.html#pandas.io.formats.style.Styler.to_latex
    "pandas.io.formats.style.Styler.to_latex")([buf, column_format, position, ...])
    | Write Styler to a file, buffer or string in LaTeX format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_string`](pandas.io.formats.style.Styler.to_string.html#pandas.io.formats.style.Styler.to_string
    "pandas.io.formats.style.Styler.to_string")([buf, encoding, sparse_index, ...])
    | Write Styler to a file, buffer or string in text format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`use`](pandas.io.formats.style.Styler.use.html#pandas.io.formats.style.Styler.use
    "pandas.io.formats.style.Styler.use")(styles) | Set the styles on the current
    Styler. |'
  prefs: []
  type: TYPE_TB
