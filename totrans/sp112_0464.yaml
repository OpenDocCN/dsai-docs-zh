- en: scipy.optimize.linprog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Linear programming: minimize a linear objective function subject to linear
    equality and inequality constraints.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear programming solves problems of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\min_x \ & c^T x \\ \mbox{such that} \ & A_{ub} x \leq b_{ub},\\
    & A_{eq} x = b_{eq},\\ & l \leq x \leq u ,\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(x\) is a vector of decision variables; \(c\), \(b_{ub}\), \(b_{eq}\),
    \(l\), and \(u\) are vectors; and \(A_{ub}\) and \(A_{eq}\) are matrices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, that’s:'
  prefs: []
  type: TYPE_NORMAL
- en: minimize
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: such that
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
- en: Note that by default `lb = 0` and `ub = None`. Other bounds can be specified
    with `bounds`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**1-D array'
  prefs: []
  type: TYPE_NORMAL
- en: The coefficients of the linear objective function to be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: '**A_ub**2-D array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The inequality constraint matrix. Each row of `A_ub` specifies the coefficients
    of a linear inequality constraint on `x`.
  prefs: []
  type: TYPE_NORMAL
- en: '**b_ub**1-D array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The inequality constraint vector. Each element represents an upper bound on
    the corresponding value of `A_ub @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: '**A_eq**2-D array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The equality constraint matrix. Each row of `A_eq` specifies the coefficients
    of a linear equality constraint on `x`.
  prefs: []
  type: TYPE_NORMAL
- en: '**b_eq**1-D array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The equality constraint vector. Each element of `A_eq @ x` must equal the corresponding
    element of `b_eq`.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of `(min, max)` pairs for each element in `x`, defining the minimum
    and maximum values of that decision variable. If a single tuple `(min, max)` is
    provided, then `min` and `max` will serve as bounds for all decision variables.
    Use `None` to indicate that there is no bound. For instance, the default bound
    `(0, None)` means that all decision variables are non-negative, and the pair `(None,
    None)` means no bounds at all, i.e. all variables are allowed to be any real.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm used to solve the standard form problem. [‘highs’](../optimize.linprog-highs.html#optimize-linprog-highs)
    (default), [‘highs-ds’](../optimize.linprog-highs-ds.html#optimize-linprog-highs-ds),
    [‘highs-ipm’](../optimize.linprog-highs-ipm.html#optimize-linprog-highs-ipm),
    [‘interior-point’](../optimize.linprog-interior-point.html#optimize-linprog-interior-point)
    (legacy), [‘revised simplex’](../optimize.linprog-revised_simplex.html#optimize-linprog-revised-simplex)
    (legacy), and [‘simplex’](../optimize.linprog-simplex.html#optimize-linprog-simplex)
    (legacy) are supported. The legacy methods are deprecated and will be removed
    in SciPy 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a callback function is provided, it will be called at least once per iteration
    of the algorithm. The callback function must accept a single [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") consisting of the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: x1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The current solution vector.
  prefs: []
  type: TYPE_NORMAL
- en: funfloat
  prefs: []
  type: TYPE_NORMAL
- en: The current value of the objective function `c @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: successbool
  prefs: []
  type: TYPE_NORMAL
- en: '`True` when the algorithm has completed successfully.'
  prefs: []
  type: TYPE_NORMAL
- en: slack1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The (nominally positive) values of the slack, `b_ub - A_ub @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: con1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The (nominally zero) residuals of the equality constraints, `b_eq - A_eq @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: phaseint
  prefs: []
  type: TYPE_NORMAL
- en: The phase of the algorithm being executed.
  prefs: []
  type: TYPE_NORMAL
- en: statusint
  prefs: []
  type: TYPE_NORMAL
- en: An integer representing the status of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '`0` : Optimization proceeding nominally.'
  prefs: []
  type: TYPE_NORMAL
- en: '`1` : Iteration limit reached.'
  prefs: []
  type: TYPE_NORMAL
- en: '`2` : Problem appears to be infeasible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`3` : Problem appears to be unbounded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`4` : Numerical difficulties encountered.'
  prefs: []
  type: TYPE_NORMAL
- en: nitint
  prefs: []
  type: TYPE_NORMAL
- en: The current iteration number.
  prefs: []
  type: TYPE_NORMAL
- en: messagestr
  prefs: []
  type: TYPE_NORMAL
- en: A string descriptor of the algorithm status.
  prefs: []
  type: TYPE_NORMAL
- en: Callback functions are not currently supported by the HiGHS methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dictionary of solver options. All methods accept the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: maxiterint
  prefs: []
  type: TYPE_NORMAL
- en: 'Maximum number of iterations to perform. Default: see method-specific documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: dispbool
  prefs: []
  type: TYPE_NORMAL
- en: 'Set to `True` to print convergence messages. Default: `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: presolvebool
  prefs: []
  type: TYPE_NORMAL
- en: 'Set to `False` to disable automatic presolve. Default: `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All methods except the HiGHS solvers also accept:'
  prefs: []
  type: TYPE_NORMAL
- en: tolfloat
  prefs: []
  type: TYPE_NORMAL
- en: A tolerance which determines when a residual is “close enough” to zero to be
    considered exactly zero.
  prefs: []
  type: TYPE_NORMAL
- en: autoscalebool
  prefs: []
  type: TYPE_NORMAL
- en: 'Set to `True` to automatically perform equilibration. Consider using this option
    if the numerical values in the constraints are separated by several orders of
    magnitude. Default: `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: rrbool
  prefs: []
  type: TYPE_NORMAL
- en: 'Set to `False` to disable automatic redundancy removal. Default: `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: rr_methodstring
  prefs: []
  type: TYPE_NORMAL
- en: 'Method used to identify and remove redundant rows from the equality constraint
    matrix after presolve. For problems with dense input, the available methods for
    redundancy removal are:'
  prefs: []
  type: TYPE_NORMAL
- en: '“SVD”:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeatedly performs singular value decomposition on the matrix, detecting redundant
    rows based on nonzeros in the left singular vectors that correspond with zero
    singular values. May be fast when the matrix is nearly full rank.
  prefs: []
  type: TYPE_NORMAL
- en: '“pivot”:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the algorithm presented in [[5]](#ree0cad483161-5) to identify redundant
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: '“ID”:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a randomized interpolative decomposition. Identifies columns of the matrix
    transpose not used in a full-rank interpolative decomposition of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'None:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses “svd” if the matrix is nearly full rank, that is, the difference between
    the matrix rank and the number of rows is less than five. If not, uses “pivot”.
    The behavior of this default is subject to change without prior notice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Default: None. For problems with sparse input, this option is ignored, and
    the pivot-based algorithm presented in [[5]](#ree0cad483161-5) is used.'
  prefs: []
  type: TYPE_NORMAL
- en: For method-specific options, see [`show_options('linprog')`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options").
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**1-D array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Guess values of the decision variables, which will be refined by the optimization
    algorithm. This argument is currently used only by the ‘revised simplex’ method,
    and can only be used if *x0* represents a basic feasible solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**integrality**1-D array or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates the type of integrality constraint on each decision variable.
  prefs: []
  type: TYPE_NORMAL
- en: '`0` : Continuous variable; no integrality constraint.'
  prefs: []
  type: TYPE_NORMAL
- en: '`1` : Integer variable; decision variable must be an integer within *bounds*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`2` : Semi-continuous variable; decision variable must be within *bounds* or
    take value `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`3` : Semi-integer variable; decision variable must be an integer within *bounds*
    or take value `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, all variables are continuous.
  prefs: []
  type: TYPE_NORMAL
- en: For mixed integrality constraints, supply an array of shape *c.shape*. To infer
    a constraint on each decision variable from shorter inputs, the argument will
    be broadcasted to *c.shape* using *np.broadcast_to*.
  prefs: []
  type: TYPE_NORMAL
- en: This argument is currently used only by the `'highs'` method and ignored otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**OptimizeResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") consisting of the fields below. Note that the
    return types of the fields may depend on whether the optimization was successful,
    therefore it is recommended to check *OptimizeResult.status* before relying on
    the other fields:'
  prefs: []
  type: TYPE_NORMAL
- en: x1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The values of the decision variables that minimizes the objective function while
    satisfying the constraints.
  prefs: []
  type: TYPE_NORMAL
- en: funfloat
  prefs: []
  type: TYPE_NORMAL
- en: The optimal value of the objective function `c @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: slack1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The (nominally positive) values of the slack variables, `b_ub - A_ub @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: con1-D array
  prefs: []
  type: TYPE_NORMAL
- en: The (nominally zero) residuals of the equality constraints, `b_eq - A_eq @ x`.
  prefs: []
  type: TYPE_NORMAL
- en: successbool
  prefs: []
  type: TYPE_NORMAL
- en: '`True` when the algorithm succeeds in finding an optimal solution.'
  prefs: []
  type: TYPE_NORMAL
- en: statusint
  prefs: []
  type: TYPE_NORMAL
- en: An integer representing the exit status of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '`0` : Optimization terminated successfully.'
  prefs: []
  type: TYPE_NORMAL
- en: '`1` : Iteration limit reached.'
  prefs: []
  type: TYPE_NORMAL
- en: '`2` : Problem appears to be infeasible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`3` : Problem appears to be unbounded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`4` : Numerical difficulties encountered.'
  prefs: []
  type: TYPE_NORMAL
- en: nitint
  prefs: []
  type: TYPE_NORMAL
- en: The total number of iterations performed in all phases.
  prefs: []
  type: TYPE_NORMAL
- en: messagestr
  prefs: []
  type: TYPE_NORMAL
- en: A string descriptor of the exit status of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")'
  prefs: []
  type: TYPE_NORMAL
- en: Additional options accepted by the solvers.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This section describes the available solvers that can be selected by the ‘method’
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '*‘highs-ds’* and *‘highs-ipm’* are interfaces to the HiGHS simplex and interior-point
    method solvers [[13]](#ree0cad483161-13), respectively. *‘highs’* (default) chooses
    between the two automatically. These are the fastest linear programming solvers
    in SciPy, especially for large, sparse problems; which of these two is faster
    is problem-dependent. The other solvers (*‘interior-point’*, *‘revised simplex’*,
    and *‘simplex’*) are legacy methods and will be removed in SciPy 1.11.0.'
  prefs: []
  type: TYPE_NORMAL
- en: Method *highs-ds* is a wrapper of the C++ high performance dual revised simplex
    implementation (HSOL) [[13]](#ree0cad483161-13), [[14]](#ree0cad483161-14). Method
    *highs-ipm* is a wrapper of a C++ implementation of an **i**nterior-**p**oint
    **m**ethod [[13]](#ree0cad483161-13); it features a crossover routine, so it is
    as accurate as a simplex solver. Method *highs* chooses between the two automatically.
    For new code involving [`linprog`](#scipy.optimize.linprog "scipy.optimize.linprog"),
    we recommend explicitly choosing one of these three method values.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.6.0.
  prefs: []
  type: TYPE_NORMAL
- en: Method *interior-point* uses the primal-dual path following algorithm as outlined
    in [[4]](#ree0cad483161-4). This algorithm supports sparse constraint matrices
    and is typically faster than the simplex methods, especially for large, sparse
    problems. Note, however, that the solution returned may be slightly less accurate
    than those of the simplex methods and will not, in general, correspond with a
    vertex of the polytope defined by the constraints.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.0.0.
  prefs: []
  type: TYPE_NORMAL
- en: Method *revised simplex* uses the revised simplex method as described in [[9]](#ree0cad483161-9),
    except that a factorization [[11]](#ree0cad483161-11) of the basis matrix, rather
    than its inverse, is efficiently maintained and used to solve the linear systems
    at each iteration of the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Method *simplex* uses a traditional, full-tableau implementation of Dantzig’s
    simplex algorithm [[1]](#ree0cad483161-1), [[2]](#ree0cad483161-2) (*not* the
    Nelder-Mead simplex). This algorithm is included for backwards compatibility and
    educational purposes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before applying *interior-point*, *revised simplex*, or *simplex*, a presolve
    procedure based on [[8]](#ree0cad483161-8) attempts to identify trivial infeasibilities,
    trivial unboundedness, and potential problem simplifications. Specifically, it
    checks for:'
  prefs: []
  type: TYPE_NORMAL
- en: rows of zeros in `A_eq` or `A_ub`, representing trivial constraints;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns of zeros in `A_eq` *and* `A_ub`, representing unconstrained variables;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column singletons in `A_eq`, representing fixed variables; and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: column singletons in `A_ub`, representing simple bounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If presolve reveals that the problem is unbounded (e.g. an unconstrained and
    unbounded variable has negative cost) or infeasible (e.g., a row of zeros in `A_eq`
    corresponds with a nonzero in `b_eq`), the solver terminates with the appropriate
    status code. Note that presolve terminates as soon as any sign of unboundedness
    is detected; consequently, a problem may be reported as unbounded when in reality
    the problem is infeasible (but infeasibility has not been detected yet). Therefore,
    if it is important to know whether the problem is actually infeasible, solve the
    problem again with option `presolve=False`.
  prefs: []
  type: TYPE_NORMAL
- en: If neither infeasibility nor unboundedness are detected in a single pass of
    the presolve, bounds are tightened where possible and fixed variables are removed
    from the problem. Then, linearly dependent rows of the `A_eq` matrix are removed,
    (unless they represent an infeasibility) to avoid numerical difficulties in the
    primary solve routine. Note that rows that are nearly linearly dependent (within
    a prescribed tolerance) may also be removed, which can change the optimal solution
    in rare cases. If this is a concern, eliminate redundancy from your problem formulation
    and run with option `rr=False` or `presolve=False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several potential improvements can be made here: additional presolve checks
    outlined in [[8]](#ree0cad483161-8) should be implemented, the presolve routine
    should be run multiple times (until no further simplifications can be made), and
    more of the efficiency improvements from [[5]](#ree0cad483161-5) should be implemented
    in the redundancy removal routines.'
  prefs: []
  type: TYPE_NORMAL
- en: After presolve, the problem is transformed to standard form by converting the
    (tightened) simple bounds to upper bound constraints, introducing non-negative
    slack variables for inequality constraints, and expressing unbounded variables
    as the difference between two non-negative variables. Optionally, the problem
    is automatically scaled via equilibration [[12]](#ree0cad483161-12). The selected
    algorithm solves the standard form problem, and a postprocessing routine converts
    the result to a solution to the original problem.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: Dantzig, George B., Linear programming and extensions. Rand Corporation Research
    Study Princeton Univ. Press, Princeton, NJ, 1963
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: Hillier, S.H. and Lieberman, G.J. (1995), “Introduction to Mathematical Programming”,
    McGraw-Hill, Chapter 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bland, Robert G. New finite pivoting rules for the simplex method. Mathematics
    of Operations Research (2), 1977: pp. 103-107.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Andersen, Erling D., and Knud D. Andersen. “The MOSEK interior point optimizer
    for linear programming: an implementation of the homogeneous algorithm.” High
    performance optimization. Springer US, 2000\. 197-232.'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] ([1](#id1),[2](#id2),[3](#id14))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Andersen, Erling D. “Finding all linearly dependent rows in large-scale linear
    programming.” Optimization Methods and Software 6.3 (1995): 219-227.'
  prefs: []
  type: TYPE_NORMAL
- en: '[6]'
  prefs: []
  type: TYPE_NORMAL
- en: Freund, Robert M. “Primal-Dual Interior-Point Methods for Linear Programming
    based on Newton’s Method.” Unpublished Course Notes, March 2004\. Available 2/25/2017
    at [https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf](https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: '[7]'
  prefs: []
  type: TYPE_NORMAL
- en: Fourer, Robert. “Solving Linear Programs by Interior-Point Methods.” Unpublished
    Course Notes, August 26, 2005\. Available 2/25/2017 at [http://www.4er.org/CourseNotes/Book%20B/B-III.pdf](http://www.4er.org/CourseNotes/Book%20B/B-III.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: '[8] ([1](#id12),[2](#id13))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Andersen, Erling D., and Knud D. Andersen. “Presolving in linear programming.”
    Mathematical Programming 71.2 (1995): 221-245.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[9](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bertsimas, Dimitris, and J. Tsitsiklis. “Introduction to linear programming.”
    Athena Scientific 1 (1997): 997.'
  prefs: []
  type: TYPE_NORMAL
- en: '[10]'
  prefs: []
  type: TYPE_NORMAL
- en: Andersen, Erling D., et al. Implementation of interior point methods for large
    scale linear programming. HEC/Universite de Geneve, 1996.
  prefs: []
  type: TYPE_NORMAL
- en: '[[11](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bartels, Richard H. “A stabilization of the simplex method.” Journal in Numerische
    Mathematik 16.5 (1971): 414-434.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[12](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tomlin, J. A. “On scaling linear programming problems.” Mathematical Programming
    Study 4 (1975): 146-166.'
  prefs: []
  type: TYPE_NORMAL
- en: '[13] ([1](#id3),[2](#id4),[3](#id6))'
  prefs: []
  type: TYPE_NORMAL
- en: Huangfu, Q., Galabova, I., Feldmeier, M., and Hall, J. A. J. “HiGHS - high performance
    software for linear optimization.” [https://highs.dev/](https://highs.dev/)
  prefs: []
  type: TYPE_NORMAL
- en: '[[14](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Huangfu, Q. and Hall, J. A. J. “Parallelizing the dual revised simplex method.”
    Mathematical Programming Computation, 10 (1), 119-142, 2018\. DOI: 10.1007/s12532-017-0130-5'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following problem:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\min_{x_0, x_1} \ -x_0 + 4x_1 & \\ \mbox{such that} \ -3x_0 +
    x_1 & \leq 6,\\ -x_0 - 2x_1 & \geq -4,\\ x_1 & \geq -3.\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem is not presented in the form accepted by [`linprog`](#scipy.optimize.linprog
    "scipy.optimize.linprog"). This is easily remedied by converting the “greater
    than” inequality constraint to a “less than” inequality constraint by multiplying
    both sides by a factor of \(-1\). Note also that the last constraint is really
    the simple bound \(-3 \leq x_1 \leq \infty\). Finally, since there are no bounds
    on \(x_0\), we must explicitly specify the bounds \(-\infty \leq x_0 \leq \infty\),
    as the default is for variables to be non-negative. After collecting coeffecients
    into arrays and tuples, the input for this problem is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The marginals (AKA dual values / shadow prices / Lagrange multipliers) and residuals
    (slacks) are also available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, because the marginal associated with the second inequality constraint
    is -1, we expect the optimal value of the objective function to decrease by `eps`
    if we add a small amount `eps` to the right hand side of the second inequality
    constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Also, because the residual on the first inequality constraint is 39, we can
    decrease the right hand side of the first constraint by 39 without affecting the
    optimal solution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
