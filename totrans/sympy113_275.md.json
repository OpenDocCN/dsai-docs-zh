["```py\nsympy.holonomic.holonomic.from_hyper(func, x0=0, evalf=False)\n```", "```py\n>>> from sympy.holonomic.holonomic import from_hyper\n>>> from sympy import symbols, hyper, S\n>>> x = symbols('x')\n>>> from_hyper(hyper([], [S(3)/2], x**2/4))\nHolonomicFunction((-x) + (2)*Dx + (x)*Dx**2, x, 1, [sinh(1), -sinh(1) + cosh(1)]) \n```", "```py\nsympy.holonomic.holonomic.from_meijerg(func, x0=0, evalf=False, initcond=True, domain=QQ)\n```", "```py\n>>> from sympy.holonomic.holonomic import from_meijerg\n>>> from sympy import symbols, meijerg, S\n>>> x = symbols('x')\n>>> from_meijerg(meijerg(([], []), ([S(1)/2], [0]), x**2/4))\nHolonomicFunction((1) + (1)*Dx**2, x, 0, [0, 1/sqrt(pi)]) \n```", "```py\nsympy.holonomic.holonomic.expr_to_holonomic(func, x=None, x0=0, y0=None, lenics=None, domain=None, initcond=True)\n```", "```py\n>>> from sympy.holonomic.holonomic import expr_to_holonomic\n>>> from sympy import sin, exp, symbols\n>>> x = symbols('x')\n>>> expr_to_holonomic(sin(x))\nHolonomicFunction((1) + (1)*Dx**2, x, 0, [0, 1])\n>>> expr_to_holonomic(exp(x))\nHolonomicFunction((-1) + (1)*Dx, x, 0, [1]) \n```"]