- en: numpy.array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.array.html](https://numpy.org/doc/1.26/reference/generated/numpy.array.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**object**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An array, any object exposing the array interface, an object whose `__array__`
    method returns an array, or any (nested) sequence. If object is a scalar, a 0-dimensional
    array containing object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The desired data-type for the array. If not given, NumPy will try to use a default
    `dtype` that can represent the values (by applying promotion rules when necessary.)
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If true (default), then the object is copied. Otherwise, a copy will only be
    made if `__array__` returns a copy, if obj is a nested sequence, or if a copy
    is needed to satisfy any of the other requirements (`dtype`, `order`, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘K’, ‘A’, ‘C’, ‘F’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the memory layout of the array. If object is not an array, the newly
    created array will be in C order (row major) unless ‘F’ is specified, in which
    case it will be in Fortran order (column major). If object is an array the following
    holds.
  prefs: []
  type: TYPE_NORMAL
- en: '| order | no copy | copy=True |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ‘K’ | unchanged | F & C order preserved, otherwise most similar order |'
  prefs: []
  type: TYPE_TB
- en: '| ‘A’ | unchanged | F order if input is F and not C, otherwise C order |'
  prefs: []
  type: TYPE_TB
- en: '| ‘C’ | C order | C order |'
  prefs: []
  type: TYPE_TB
- en: '| ‘F’ | F order | F order |'
  prefs: []
  type: TYPE_TB
- en: When `copy=False` and a copy is made for other reasons, the result is the same
    as if `copy=True`, with some exceptions for ‘A’, see the Notes section. The default
    order is ‘K’.
  prefs: []
  type: TYPE_NORMAL
- en: '**subok**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, then sub-classes will be passed-through, otherwise the returned array
    will be forced to be a base-class array (default).
  prefs: []
  type: TYPE_NORMAL
- en: '**ndmin**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the minimum number of dimensions that the resulting array should have.
    Ones will be prepended to the shape as needed to meet this requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array object satisfying the specified requirements.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`empty_like`](numpy.empty_like.html#numpy.empty_like "numpy.empty_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an empty array with shape and type of input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ones_like`](numpy.ones_like.html#numpy.ones_like "numpy.ones_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an array of ones with shape and type of input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros_like`](numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Return an array of zeros with shape and type of input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`full_like`](numpy.full_like.html#numpy.full_like "numpy.full_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new array with shape of input filled with value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`empty`](numpy.empty.html#numpy.empty "numpy.empty")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new uninitialized array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ones`](numpy.ones.html#numpy.ones "numpy.ones")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new array setting values to one.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new array setting values to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[`full`](numpy.full.html#numpy.full "numpy.full")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new array of given shape filled with value.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When order is ‘A’ and `object` is an array in neither ‘C’ nor ‘F’ order, and
    a copy is forced by a change in dtype, then the order of the result is not necessarily
    ‘C’ as expected. This is likely a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Upcasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'More than one dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Minimum dimensions 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Type provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Data-type consisting of more than one element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating an array from sub-classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
