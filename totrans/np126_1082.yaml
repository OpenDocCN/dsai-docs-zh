- en: NumPy security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/security.html](https://numpy.org/doc/1.26/reference/security.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Security issues can be reported privately as described in the project README
    and when opening a [new issue on the issue tracker](https://github.com/numpy/numpy/issues/new/choose).
    The [Python security reporting guidelines](https://www.python.org/dev/security/)
    are a good resource and its notes apply also to NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy’s maintainers are not security experts. However, we are conscientious
    about security and experts of both the NumPy codebase and how it’s used. Please
    do notify us before creating security advisories against NumPy as we are happy
    to prioritize issues or help with assessing the severity of a bug. A security
    advisory we are not aware of beforehand can lead to a lot of work for all involved
    parties.
  prefs: []
  type: TYPE_NORMAL
- en: Advice for using NumPy on untrusted data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A user who can freely execute NumPy (or Python) functions must be considered
    to have the same privilege as the process/Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: That said, NumPy should be generally safe to use on *data* provided by unprivileged
    users and read through safe API functions (e.g. loaded from a text file or `.npy`
    file without pickle support). Malicious *values* or *data sizes* should never
    lead to privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following points may be useful or should be noted when working with untrusted
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exhausting memory can result in an out-of-memory kill, which is a possible
    denial of service attack. Possible causes could be:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions reading text files, which may require much more memory than the original
    input file size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If users can create arbitrarily shaped arrays, NumPy’s broadcasting means that
    intermediate or result arrays can be much larger than the inputs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy structured dtypes allow for a large amount of complexity. Fortunately,
    most code fails gracefully when a structured dtype is provided unexpectedly. However,
    code should either disallow untrusted users to provide these (e.g. via `.npy`
    files) or carefully check the fields included for nested structured/subarray dtypes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing on user input should generally be considered unsafe (except for the
    data being read). An example would be `np.dtype(user_string)` or `dtype=user_string`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The speed of operations can depend on values and memory order can lead to larger
    temporary memory use and slower execution. This means that operations may be significantly
    slower or use more memory compared to simple test cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When reading data, consider enforcing a specific shape (e.g. one dimensional)
    or dtype such as `float64`, `float32`, or `int64` to reduce complexity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working with non-trivial untrusted data, it is advisable to sandbox the
    analysis to guard against potential privilege escalation. This is especially advisable
    if further libraries based on NumPy are used since these add additional complexity
    and potential security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Advice for using NumPy on untrusted data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A user who can freely execute NumPy (or Python) functions must be considered
    to have the same privilege as the process/Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: That said, NumPy should be generally safe to use on *data* provided by unprivileged
    users and read through safe API functions (e.g. loaded from a text file or `.npy`
    file without pickle support). Malicious *values* or *data sizes* should never
    lead to privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following points may be useful or should be noted when working with untrusted
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exhausting memory can result in an out-of-memory kill, which is a possible
    denial of service attack. Possible causes could be:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions reading text files, which may require much more memory than the original
    input file size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If users can create arbitrarily shaped arrays, NumPy’s broadcasting means that
    intermediate or result arrays can be much larger than the inputs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy structured dtypes allow for a large amount of complexity. Fortunately,
    most code fails gracefully when a structured dtype is provided unexpectedly. However,
    code should either disallow untrusted users to provide these (e.g. via `.npy`
    files) or carefully check the fields included for nested structured/subarray dtypes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing on user input should generally be considered unsafe (except for the
    data being read). An example would be `np.dtype(user_string)` or `dtype=user_string`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The speed of operations can depend on values and memory order can lead to larger
    temporary memory use and slower execution. This means that operations may be significantly
    slower or use more memory compared to simple test cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When reading data, consider enforcing a specific shape (e.g. one dimensional)
    or dtype such as `float64`, `float32`, or `int64` to reduce complexity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working with non-trivial untrusted data, it is advisable to sandbox the
    analysis to guard against potential privilege escalation. This is especially advisable
    if further libraries based on NumPy are used since these add additional complexity
    and potential security issues.
  prefs: []
  type: TYPE_NORMAL
