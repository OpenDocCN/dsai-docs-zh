- en: scipy.stats.ttest_ind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the T-test for the means of *two independent* samples of scores.
  prefs: []
  type: TYPE_NORMAL
- en: This is a test for the null hypothesis that 2 independent samples have identical
    average (expected) values. This test assumes that the populations have identical
    variances by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays must have the same shape, except in the dimension corresponding to
    *axis* (the first, by default).
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: If an int, the axis of the input along which to compute the statistic. The statistic
    of each axis-slice (e.g. row) of the input will appear in a corresponding element
    of the output. If `None`, the input will be raveled before computing the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '**equal_var**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True (default), perform a standard independent 2 sample test that assumes
    equal population variances [[1]](#r3566833beaa2-1). If False, perform Welch’s
    t-test, which does not assume equal population variance [[2]](#r3566833beaa2-2).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘omit’, ‘raise’}'
  prefs: []
  type: TYPE_NORMAL
- en: Defines how to handle input NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate`: if a NaN is present in the axis slice (e.g. row) along which the
    statistic is computed, the corresponding entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`omit`: NaNs will be omitted when performing the calculation. If insufficient
    data remains in the axis slice along which the statistic is computed, the corresponding
    entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise`: if a NaN is present, a `ValueError` will be raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**permutations**non-negative int, np.inf, or None (default), optional'
  prefs: []
  type: TYPE_NORMAL
- en: If 0 or None (default), use the t-distribution to calculate p-values. Otherwise,
    *permutations* is the number of random permutations that will be used to estimate
    p-values using a permutation test. If *permutations* equals or exceeds the number
    of distinct partitions of the pooled data, an exact test is performed instead
    (i.e. each distinct partition is used exactly once). See Notes for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: Pseudorandom number generator state used to generate permutations (used only
    when *permutations* is not None).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**alternative**{‘two-sided’, ‘less’, ‘greater’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defines the alternative hypothesis. The following options are available (default
    is ‘two-sided’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘two-sided’: the means of the distributions underlying the samples are unequal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘less’: the mean of the distribution underlying the first sample is less than
    the mean of the distribution underlying the second sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘greater’: the mean of the distribution underlying the first sample is greater
    than the mean of the distribution underlying the second sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.6.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**trim**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If nonzero, performs a trimmed (Yuen’s) t-test. Defines the fraction of elements
    to be trimmed from each end of the input samples. If 0 (default), no elements
    will be trimmed from either side. The number of trimmed elements from each tail
    is the floor of the trim times the number of elements. Valid range is [0, .5).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**[`TtestResult`](scipy.stats._result_classes.TtestResult.html#scipy.stats._result_classes.TtestResult
    "scipy.stats._result_classes.TtestResult")'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: statisticfloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The t-statistic.
  prefs: []
  type: TYPE_NORMAL
- en: pvaluefloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The p-value associated with the given alternative.
  prefs: []
  type: TYPE_NORMAL
- en: dffloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The number of degrees of freedom used in calculation of the t-statistic. This
    is always NaN for a permutation t-test.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object also has the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: confidence_interval(confidence_level=0.95)
  prefs: []
  type: TYPE_NORMAL
- en: Computes a confidence interval around the difference in population means for
    the given confidence level. The confidence interval is returned in a `namedtuple`
    with fields `low` and `high`. When a permutation t-test is performed, the confidence
    interval is not computed, and fields `low` and `high` contain NaN.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we observe two independent samples, e.g. flower petal lengths, and we
    are considering whether the two samples were drawn from the same population (e.g.
    the same species of flower or two species with similar petal characteristics)
    or two different populations.
  prefs: []
  type: TYPE_NORMAL
- en: The t-test quantifies the difference between the arithmetic means of the two
    samples. The p-value quantifies the probability of observing as or more extreme
    values assuming the null hypothesis, that the samples are drawn from populations
    with the same population means, is true. A p-value larger than a chosen threshold
    (e.g. 5% or 1%) indicates that our observation is not so unlikely to have occurred
    by chance. Therefore, we do not reject the null hypothesis of equal population
    means. If the p-value is smaller than our threshold, then we have evidence against
    the null hypothesis of equal population means.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the p-value is determined by comparing the t-statistic of the observed
    data against a theoretical t-distribution. When `1 < permutations < binom(n, k)`,
    where
  prefs: []
  type: TYPE_NORMAL
- en: '`k` is the number of observations in *a*,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n` is the total number of observations in *a* and *b*, and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binom(n, k)` is the binomial coefficient (`n` choose `k`),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the data are pooled (concatenated), randomly assigned to either group *a* or
    *b*, and the t-statistic is calculated. This process is performed repeatedly (*permutation*
    times), generating a distribution of the t-statistic under the null hypothesis,
    and the t-statistic of the observed data is compared to this distribution to determine
    the p-value. Specifically, the p-value reported is the “achieved significance
    level” (ASL) as defined in 4.4 of [[3]](#r3566833beaa2-3). Note that there are
    other ways of estimating p-values using randomized permutation tests; for other
    options, see the more general [`permutation_test`](scipy.stats.permutation_test.html#scipy.stats.permutation_test
    "scipy.stats.permutation_test").
  prefs: []
  type: TYPE_NORMAL
- en: 'When `permutations >= binom(n, k)`, an exact test is performed: the data are
    partitioned between the groups in each distinct way exactly once.'
  prefs: []
  type: TYPE_NORMAL
- en: The permutation test can be computationally expensive and not necessarily more
    accurate than the analytical test, but it does not make strong assumptions about
    the shape of the underlying distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Use of trimming is commonly referred to as the trimmed t-test. At times called
    Yuen’s t-test, this is an extension of Welch’s t-test, with the difference being
    the use of winsorized means in calculation of the variance and the trimmed sample
    size in calculation of the statistic. Trimming is recommended if the underlying
    distribution is long-tailed or contaminated with outliers [[4]](#r3566833beaa2-4).
  prefs: []
  type: TYPE_NORMAL
- en: The statistic is calculated as `(np.mean(a) - np.mean(b))/se`, where `se` is
    the standard error. Therefore, the statistic will be positive when the sample
    mean of *a* is greater than the sample mean of *b* and negative when the sample
    mean of *a* is less than the sample mean of *b*.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in SciPy 1.9, `np.matrix` inputs (not recommended for new code) are
    converted to `np.ndarray` before the calculation is performed. In this case, the
    output will be a scalar or `np.ndarray` of appropriate shape rather than a 2D
    `np.matrix`. Similarly, while masked elements of masked arrays are ignored, the
    output will be a scalar or `np.ndarray` rather than a masked array with `mask=False`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test](https://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Welch%27s_t-test](https://en.wikipedia.org/wiki/Welch%27s_t-test)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Efron and T. Hastie. Computer Age Statistical Inference. (2016).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[4](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Yuen, Karen K. “The Two-Sample Trimmed t for Unequal Population Variances.”
    Biometrika, vol. 61, no. 1, 1974, pp. 165-170\. JSTOR, www.jstor.org/stable/2334299\.
    Accessed 30 Mar. 2021.
  prefs: []
  type: TYPE_NORMAL
- en: '[5]'
  prefs: []
  type: TYPE_NORMAL
- en: Yuen, Karen K., and W. J. Dixon. “The Approximate Behaviour and Performance
    of the Two-Sample Trimmed t.” Biometrika, vol. 60, no. 2, 1973, pp. 369-374\.
    JSTOR, www.jstor.org/stable/2334550. Accessed 30 Mar. 2021.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Test with sample with identical means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[`ttest_ind`](#scipy.stats.ttest_ind "scipy.stats.ttest_ind") underestimates
    p for unequal variances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When `n1 != n2`, the equal variance t-statistic is no longer equal to the unequal
    variance t-statistic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'T-test with different means, variance, and n:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When performing a permutation test, more permutations typically yields more
    accurate results. Use a `np.random.Generator` to ensure reproducibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Take these two samples, one of which has an extreme tail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use the *trim* keyword to perform a trimmed (Yuen) t-test. For example, using
    20% trimming, `trim=.2`, the test will reduce the impact of one (`np.floor(trim*len(a))`)
    element from each tail of sample *a*. It will have no effect on sample *b* because
    `np.floor(trim*len(b))` is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
