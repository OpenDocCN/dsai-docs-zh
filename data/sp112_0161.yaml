- en: scipy.interpolate.BarycentricInterpolator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.interpolate.BarycentricInterpolator
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Interpolating polynomial for a set of points.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一组点的插值多项式。
- en: Constructs a polynomial that passes through a given set of points. Allows evaluation
    of the polynomial and all its derivatives, efficient changing of the y-values
    to be interpolated, and updating by adding more x- and y-values.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构造通过给定点集的多项式。允许评估多项式及其所有导数，有效更改要插值的 y 值，并通过添加更多的 x 和 y 值进行更新。
- en: For reasons of numerical stability, this function does not compute the coefficients
    of the polynomial.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 出于数值稳定性的原因，此函数不计算多项式的系数。
- en: The values *yi* need to be provided before the function is evaluated, but none
    of the preprocessing depends on them, so rapid updates are possible.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数评估之前需要提供 *yi* 的值，但前处理不依赖于它们，因此可以快速更新。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**xi**array_like, shape (npoints, )'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**xi**array_like，形状为 (npoints, )'
- en: 1-D array of x coordinates of the points the polynomial should pass through
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一维数组，多项式应通过的点的 x 坐标
- en: '**yi**array_like, shape (…, npoints, …), optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**yi**array_like，形状为 (…, npoints, …)，可选'
- en: N-D array of y coordinates of the points the polynomial should pass through.
    If None, the y values will be supplied later via the *set_y* method. The length
    of *yi* along the interpolation axis must be equal to the length of *xi*. Use
    the `axis` parameter to select correct axis.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: y 坐标的 N-D 数组，多项式应通过这些点。如果为 None，则稍后通过 *set_y* 方法提供 y 值。沿插值轴的 *yi* 的长度必须等于 *xi*
    的长度。使用 `axis` 参数选择正确的轴。
- en: '**axis**int, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**int，可选'
- en: Axis in the yi array corresponding to the x-coordinate values. Defaults to `axis=0`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: yi 数组中对应于 x 坐标值的轴。默认为 `axis=0`。
- en: '**wi**array_like, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**wi**array_like，可选'
- en: The barycentric weights for the chosen interpolation points *xi*. If absent
    or None, the weights will be computed from *xi* (default). This allows for the
    reuse of the weights *wi* if several interpolants are being calculated using the
    same nodes *xi*, without re-computation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所选插值点 *xi* 的重心权重。如果缺少或为 None，则从 *xi* 计算权重（默认）。这允许在使用相同节点 *xi* 计算多个插值时重复使用权重
    *wi*，而无需重新计算。
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(在 NumPy v2.0.dev0 版本中)")，[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(在 NumPy v2.0.dev0 版本中)")}，可选'
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *seed* 为 None（或 *np.random*），则使用 [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(在 NumPy v2.0.dev0 版本中)") 单例。如果 *seed* 是整数，则使用新的 `RandomState` 实例，并使用 *seed*
    进行种子化。如果 *seed* 已经是 `Generator` 或 `RandomState` 实例，则使用该实例。
- en: Notes
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: This class uses a “barycentric interpolation” method that treats the problem
    as a special case of rational function interpolation. This algorithm is quite
    stable, numerically, but even in a world of exact computation, unless the x coordinates
    are chosen very carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice
    - polynomial interpolation itself is a very ill-conditioned process due to the
    Runge phenomenon.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此类使用“重心插值”方法，将问题视为有理函数插值的特例。这种算法在数值上非常稳定，但即使在精确计算的世界中，除非选择 x 坐标非常仔细 - Chebyshev
    零点（例如，cos(i*pi/n)）是一个很好的选择 - 多项式插值本身也是一个非常病态的过程，这是由于 Runge 现象。
- en: Based on Berrut and Trefethen 2004, “Barycentric Lagrange Interpolation”.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Berrut 和 Trefethen 2004 年的“Barycentric Lagrange Interpolation”。
- en: Examples
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'To produce a quintic barycentric interpolant approximating the function \(\sin
    x\), and its first four derivatives, using six randomly-spaced nodes in \((0,
    \frac{\pi}{2})\):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在区间 \((0, \frac{\pi}{2})\) 内使用六个随机分布的节点生成一个近似于函数 \(\sin x\) 及其前四阶导数的五次重心插值多项式：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![../../_images/scipy-interpolate-BarycentricInterpolator-1.png](../Images/f01cf0c8dad044e32829f9107ce7be02.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-interpolate-BarycentricInterpolator-1.png](../Images/f01cf0c8dad044e32829f9107ce7be02.png)'
- en: 'Attributes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '属性:'
- en: '**dtype**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**'
- en: Methods
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`__call__`](scipy.interpolate.BarycentricInterpolator.__call__.html#scipy.interpolate.BarycentricInterpolator.__call__
    "scipy.interpolate.BarycentricInterpolator.__call__")(x) | Evaluate the interpolating
    polynomial at the points x |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`__call__`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.__call__.html#scipy.interpolate.BarycentricInterpolator.__call__
    "scipy.interpolate.BarycentricInterpolator.__call__")(x) | 在点 x 处评估插值多项式 |'
- en: '| [`add_xi`](scipy.interpolate.BarycentricInterpolator.add_xi.html#scipy.interpolate.BarycentricInterpolator.add_xi
    "scipy.interpolate.BarycentricInterpolator.add_xi")(xi[, yi]) | Add more x values
    to the set to be interpolated |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`add_xi`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.add_xi.html#scipy.interpolate.BarycentricInterpolator.add_xi
    "scipy.interpolate.BarycentricInterpolator.add_xi")(xi[, yi]) | 将更多 x 值添加到待插值的集合中
    |'
- en: '| [`derivative`](scipy.interpolate.BarycentricInterpolator.derivative.html#scipy.interpolate.BarycentricInterpolator.derivative
    "scipy.interpolate.BarycentricInterpolator.derivative")(x[, der]) | Evaluate a
    single derivative of the polynomial at the point x. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`derivative`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.derivative.html#scipy.interpolate.BarycentricInterpolator.derivative
    "scipy.interpolate.BarycentricInterpolator.derivative")(x[, der]) | 在点 x 处评估多项式的单个导数
    |'
- en: '| [`derivatives`](scipy.interpolate.BarycentricInterpolator.derivatives.html#scipy.interpolate.BarycentricInterpolator.derivatives
    "scipy.interpolate.BarycentricInterpolator.derivatives")(x[, der]) | Evaluate
    several derivatives of the polynomial at the point *x* |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`derivatives`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.derivatives.html#scipy.interpolate.BarycentricInterpolator.derivatives
    "scipy.interpolate.BarycentricInterpolator.derivatives")(x[, der]) | 在点 *x* 处评估多项式的多个导数
    |'
- en: '| [`set_yi`](scipy.interpolate.BarycentricInterpolator.set_yi.html#scipy.interpolate.BarycentricInterpolator.set_yi
    "scipy.interpolate.BarycentricInterpolator.set_yi")(yi[, axis]) | Update the y
    values to be interpolated |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`set_yi`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.set_yi.html#scipy.interpolate.BarycentricInterpolator.set_yi
    "scipy.interpolate.BarycentricInterpolator.set_yi")(yi[, axis]) | 更新待插值的 y 值 |'
