- en: scipy.stats.iqr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.iqr.html#scipy.stats.iqr](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.iqr.html#scipy.stats.iqr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the interquartile range of the data along the specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: The interquartile range (IQR) is the difference between the 75th and 25th percentile
    of the data. It is a measure of the dispersion similar to standard deviation or
    variance, but is much more robust against outliers [[2]](#ra6d016607141-2).
  prefs: []
  type: TYPE_NORMAL
- en: The `rng` parameter allows this function to compute other percentile ranges
    than the actual IQR. For example, setting `rng=(0, 100)` is equivalent to [`numpy.ptp`](https://numpy.org/devdocs/reference/generated/numpy.ptp.html#numpy.ptp
    "(in NumPy v2.0.dev0)").
  prefs: []
  type: TYPE_NORMAL
- en: The IQR of an empty array is *np.nan*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.18.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array or object that can be converted to an array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, default: None'
  prefs: []
  type: TYPE_NORMAL
- en: If an int, the axis of the input along which to compute the statistic. The statistic
    of each axis-slice (e.g. row) of the input will appear in a corresponding element
    of the output. If `None`, the input will be raveled before computing the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '**rng**Two-element sequence containing floats in range of [0,100] optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Percentiles over which to compute the range. Each must be between 0 and 100,
    inclusive. The default is the true IQR: `(25, 75)`. The order of the elements
    is not important.'
  prefs: []
  type: TYPE_NORMAL
- en: '**scale**scalar or str or array_like of reals, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The numerical value of scale will be divided out of the final result. The following
    string value is also recognized:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘normal’ : Scale by \(2 \sqrt{2} erf^{-1}(\frac{1}{2}) \approx 1.349\).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The default is 1.0. Array-like *scale* of real dtype is also allowed, as long
    as it broadcasts correctly to the output such that `out / scale` is a valid operation.
    The output dimensions depend on the input array, *x*, the *axis* argument, and
    the *keepdims* flag.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘omit’, ‘raise’}'
  prefs: []
  type: TYPE_NORMAL
- en: Defines how to handle input NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate`: if a NaN is present in the axis slice (e.g. row) along which the
    statistic is computed, the corresponding entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`omit`: NaNs will be omitted when performing the calculation. If insufficient
    data remains in the axis slice along which the statistic is computed, the corresponding
    entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise`: if a NaN is present, a `ValueError` will be raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**interpolation**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifies the interpolation method to use when the percentile boundaries lie
    between two data points `i` and `j`. The following options are available (default
    is ‘linear’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘linear’: `i + (j - i)*fraction`, where `fraction` is the fractional part of
    the index surrounded by `i` and `j`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘lower’: `i`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘higher’: `j`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘nearest’: `i` or `j` whichever is nearest.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘midpoint’: `(i + j)/2`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: For NumPy >= 1.22.0, the additional options provided by the `method` keyword
    of [`numpy.percentile`](https://numpy.org/devdocs/reference/generated/numpy.percentile.html#numpy.percentile
    "(in NumPy v2.0.dev0)") are also valid.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iqr**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: If `axis=None`, a scalar is returned. If the input contains integers or floats
    of smaller precision than `np.float64`, then the output data-type is `np.float64`.
    Otherwise, the output data-type is the same as that of the input.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.std`](https://numpy.org/devdocs/reference/generated/numpy.std.html#numpy.std
    "(in NumPy v2.0.dev0)"), [`numpy.var`](https://numpy.org/devdocs/reference/generated/numpy.var.html#numpy.var
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in SciPy 1.9, `np.matrix` inputs (not recommended for new code) are
    converted to `np.ndarray` before the calculation is performed. In this case, the
    output will be a scalar or `np.ndarray` of appropriate shape rather than a 2D
    `np.matrix`. Similarly, while masked elements of masked arrays are ignored, the
    output will be a scalar or `np.ndarray` rather than a masked array with `mask=False`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: “Interquartile range” [https://en.wikipedia.org/wiki/Interquartile_range](https://en.wikipedia.org/wiki/Interquartile_range)
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Robust measures of scale” [https://en.wikipedia.org/wiki/Robust_measures_of_scale](https://en.wikipedia.org/wiki/Robust_measures_of_scale)
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: “Quantile” [https://en.wikipedia.org/wiki/Quantile](https://en.wikipedia.org/wiki/Quantile)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
