- en: scipy.fft.ifft2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft2.html#scipy.fft.ifft2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft2.html#scipy.fft.ifft2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Compute the 2-D inverse discrete Fourier Transform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the 2-D discrete Fourier Transform over
    any number of axes in an M-D array by means of the Fast Fourier Transform (FFT).
    In other words, `ifft2(fft2(x)) == x` to within numerical accuracy. By default,
    the inverse transform is computed over the last two axes of the input array.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The input, analogously to [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft"),
    should be ordered in the same way as is returned by [`fft2`](scipy.fft.fft2.html#scipy.fft.fft2
    "scipy.fft.fft2"), i.e., it should have the term for zero frequency in the low-order
    corner of the two axes, the positive frequency terms in the first half of these
    axes, the term for the Nyquist frequency in the middle of the axes and the negative
    frequency terms in the second half of both axes, in order of decreasingly negative
    frequency.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Input array, can be complex.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**s**sequence of ints, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Shape (length of each axis) of the output (`s[0]` refers to axis 0, `s[1]` to
    axis 1, etc.). This corresponds to *n* for `ifft(x, n)`. Along each axis, if the
    given shape is smaller than that of the input, the input is cropped. If it is
    larger, the input is padded with zeros. if *s* is not given, the shape of the
    input along the axes specified by *axes* is used. See notes for issue on [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft") zero padding.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**axes**sequence of ints, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Axes over which to compute the FFT. If not given, the last two axes are used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")).
    Default is “backward”.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axes indicated by
    *axes*, or the last two axes if *axes* is not given.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: If *s* and *axes* have different length, or *axes* not given and `len(s) !=
    2`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: If an element of *axes* is larger than the number of axes of *x*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft2`](scipy.fft.fft2.html#scipy.fft.fft2 "scipy.fft.fft2")'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The forward 2-D FFT, of which [`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2")
    is the inverse.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前向二维 FFT，其中[`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2") 是其逆过程。
- en: '[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn")'
- en: The inverse of the N-D FFT.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: N 维 FFT 的逆过程。
- en: '[`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")'
- en: The 1-D FFT.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一维 FFT。
- en: '[`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft")'
- en: The 1-D inverse FFT.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一维逆 FFT。
- en: Notes
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2") is just [`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn
    "scipy.fft.ifftn") with a different default for *axes*.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2") 只是具有不同 *axes* 默认值的[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn
    "scipy.fft.ifftn")。'
- en: See [`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn") for details
    and a plotting example, and [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")
    for definition and conventions used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 详见[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn") 以及绘图示例，并参考用法和约定定义的[`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft")。
- en: Zero-padding, analogously with [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft"),
    is performed by appending zeros to the input along the specified dimension. Although
    this is the common approach, it might lead to surprising results. If another form
    of zero padding is desired, it must be performed before [`ifft2`](#scipy.fft.ifft2
    "scipy.fft.ifft2") is called.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 零填充与[`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft") 类似，通过在指定维度的输入后附加零来完成。尽管这是常见的方法，但可能会导致意外结果。如果需要其他形式的零填充，则必须在调用[`ifft2`](#scipy.fft.ifft2
    "scipy.fft.ifft2") 之前执行。
- en: Examples
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
