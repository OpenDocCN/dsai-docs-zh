- en: NumPy 1.14.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.14.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.14.0-notes.html](https://numpy.org/doc/1.26/release/1.14.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.14.0-notes.html](https://numpy.org/doc/1.26/release/1.14.0-notes.html)
- en: Numpy 1.14.0 is the result of seven months of work and contains a large number
    of bug fixes and new features, along with several changes with potential compatibility
    issues. The major change that users will notice are the stylistic changes in the
    way numpy arrays and scalars are printed, a change that will affect doctests.
    See below for details on how to preserve the old style printing when needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 1.14.0 是七个月工作的成果，包含大量的错误修复和新特性，以及几个可能引起兼容性问题的更改。用户将注意到的重大变化是numpy数组和标量打印方式的风格变化，这会影响到doctest。详情请见下文，了解在必要时如何保留旧的打印样式。
- en: A major decision affecting future development concerns the schedule for dropping
    Python 2.7 support in the runup to 2020\. The decision has been made to support
    2.7 for all releases made in 2018, with the last release being designated a long
    term release with support for bug fixes extending through 2019\. In 2019 support
    for 2.7 will be dropped in all new releases. More details can be found in [NEP
    12](http://www.numpy.org/neps/nep-0014-dropping-python2.7-proposal.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 影响未来发展的重大决定涉及2020年前撤销对Python 2.7支持的时间表。决定是在2018年的所有发布中支持2.7，最后一个发布被指定为长期发布，并支持2019年的错误修复。在2019年，对2.7的支持将在所有新的发布中中止。有关更多细节，请参见[NEP
    12](http://www.numpy.org/neps/nep-0014-dropping-python2.7-proposal.html)。
- en: This release supports Python 2.7 and 3.4 - 3.6.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该版本支持Python 2.7和3.4-3.6。
- en: Highlights
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The *np.einsum* function uses BLAS when possible
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*np.einsum*函数在可能时使用BLAS'
- en: '`genfromtxt`, `loadtxt`, `fromregex` and `savetxt` can now handle files with
    arbitrary Python supported encoding.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genfromtxt`、`loadtxt`、`fromregex`和`savetxt`现在可以处理任意Python支持的编码的文件。'
- en: Major improvements to printing of NumPy arrays and scalars.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对NumPy数组和标量的打印进行了重大改进。
- en: New functions
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: '`parametrize`: decorator added to numpy.testing'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parametrize`: 添加到numpy.testing中的装饰器'
- en: '`chebinterpolate`: Interpolate function at Chebyshev points.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chebinterpolate`：在切比雪夫点上对函数进行插值。'
- en: '`format_float_positional` and `format_float_scientific` : format floating-point
    scalars unambiguously with control of rounding and padding.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format_float_positional` 和 `format_float_scientific`：以适当的四舍五入和填充控制方式格式化浮点标量。'
- en: '`PyArray_ResolveWritebackIfCopy` and `PyArray_SetWritebackIfCopyBase`, new
    C-API functions useful in achieving PyPy compatibility.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_ResolveWritebackIfCopy`和`PyArray_SetWritebackIfCopyBase`，新的C-API函数，在实现PyPy兼容性方面非常有用。'
- en: Deprecations
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Using `np.bool_` objects in place of integers is deprecated. Previously `operator.index(np.bool_)`
    was legal and allowed constructs such as `[1, 2, 3][np.True_]`. That was misleading,
    as it behaved differently from `np.array([1, 2, 3])[np.True_]`.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用使用`np.bool_`对象代替整数。先前，`operator.index(np.bool_)`是合法的，并允许像`[1, 2, 3][np.True_]`这样的构造。这是误导性的，因为它与`np.array([1,
    2, 3])[np.True_]`表现不同。
- en: Truth testing of an empty array is deprecated. To check if an array is not empty,
    use `array.size > 0`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用为空数组的真实测试。要检查数组是否非空，请使用`array.size > 0`。
- en: Calling `np.bincount` with `minlength=None` is deprecated. `minlength=0` should
    be used instead.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`minlength=None`调用`np.bincount`已被弃用。 应该使用`minlength=0`。
- en: Calling `np.fromstring` with the default value of the `sep` argument is deprecated.
    When that argument is not provided, a broken version of `np.frombuffer` is used
    that silently accepts unicode strings and – after encoding them as either utf-8
    (python 3) or the default encoding (python 2) – treats them as binary data. If
    reading binary data is desired, `np.frombuffer` should be used directly.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`np.fromstring`调用默认值为`sep`参数已被弃用。当未提供该参数时，使用了一个破碎的`np.frombuffer`的版本，它默默地接受unicode字符串，并且在将它们编码为utf-8（python
    3）或默认编码（python 2）后，将它们视为二进制数据。如果需要读取二进制数据，应直接使用`np.frombuffer`。
- en: The `style` option of array2string is deprecated in non-legacy printing mode.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非遗留打印模式中，`array2string`的`style`选项已被弃用。
- en: '`PyArray_SetUpdateIfCopyBase` has been deprecated. For NumPy versions >= 1.14
    use `PyArray_SetWritebackIfCopyBase` instead, see *C API changes* below for more
    details.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_SetUpdateIfCopyBase`已被弃用。对于NumPy版本 >= 1.14，请改用`PyArray_SetWritebackIfCopyBase`，有关更多细节，请参见下面的*C
    API变更*。'
- en: The use of `UPDATEIFCOPY` arrays is deprecated, see *C API changes* below for
    details. We will not be dropping support for those arrays, but they are not compatible
    with PyPy.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用使用`UPDATEIFCOPY`数组，有关细节，请参见下文的*C API变更*。我们不会停止对这些数组的支持，但它们与PyPy不兼容。
- en: Future Changes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的更改
- en: '`np.issubdtype` will stop downcasting dtype-like arguments. It might be expected
    that `issubdtype(np.float32, ''float64'')` and `issubdtype(np.float32, np.float64)`
    mean the same thing - however, there was an undocumented special case that translated
    the former into `issubdtype(np.float32, np.floating)`, giving the surprising result
    of True.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.issubdtype`将停止向下转换dtype-like参数。可能认为`issubdtype(np.float32, ''float64'')`和`issubdtype(np.float32,
    np.float64)`意思相同 - 然而，以前有一个未记录的特别情况，将前者转换为`issubdtype(np.float32, np.floating)`，给出令人惊讶的结果为True。'
- en: This translation now gives a warning that explains what translation is occurring.
    In the future, the translation will be disabled, and the first example will be
    made equivalent to the second.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个翻译现在给出了一个解释正在发生的翻译的警告。在将来，将禁用翻译，并且第一个例子将与第二个例子等效。
- en: '`np.linalg.lstsq` default for `rcond` will be changed. The `rcond` parameter
    to `np.linalg.lstsq` will change its default to machine precision times the largest
    of the input array dimensions. A FutureWarning is issued when `rcond` is not passed
    explicitly.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.linalg.lstsq`的`rcond`默认值将被更改。`np.linalg.lstsq`的`rcond`参数将把其默认值更改为输入数组维度的机器精度乘以最大值。当`rcond`未被明确传递时，将发出`FutureWarning`。'
- en: '`a.flat.__array__()` will return a writeable copy of `a` when `a` is non-contiguous.
    Previously it returned an UPDATEIFCOPY array when `a` was writeable. Currently
    it returns a non-writeable copy. See gh-7054 for a discussion of the issue.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`a`是不连续时，`a.flat.__array__()`将返回`a`的可写副本。以前当`a`可写时，它返回一个UPDATEIFCOPY数组。目前它返回一个不可写的副本。有关问题的讨论，请参见gh-7054。
- en: Unstructured void array’s `.item` method will return a bytes object. In the
    future, calling `.item()` on arrays or scalars of `np.void` datatype will return
    a `bytes` object instead of a buffer or int array, the same as returned by `bytes(void_scalar)`.
    This may affect code which assumed the return value was mutable, which will no
    longer be the case. A `FutureWarning` is now issued when this would occur.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非结构化虚空数组的`.item`方法将返回一个字节对象。未来，在`np.void`数据类型的数组或标量上调用`.item()`将返回一个`bytes`对象，而不是一个缓冲区或int数组，与`bytes(void_scalar)`返回的相同。这可能影响假定返回值是可变的代码，但这将不再是这种情况。当发生这种情况时，现在会发出`FutureWarning`。
- en: Compatibility notes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The mask of a masked array view is also a view rather than a copy
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掩码数组视图的掩码也是视图而不是副本
- en: There was a FutureWarning about this change in NumPy 1.11.x. In short, it is
    now the case that, when changing a view of a masked array, changes to the mask
    are propagated to the original. That was not previously the case. This change
    affects slices in particular. Note that this does not yet work properly if the
    mask of the original array is `nomask` and the mask of the view is changed. See
    gh-5580 for an extended discussion. The original behavior of having a copy of
    the mask can be obtained by calling the `unshare_mask` method of the view.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.11.x关于此更改的FutureWarning。简而言之，现在这样的情况是，当改变掩码数组的视图时，掩码的更改会传播到原始的掩码。以前不是这样。这个更改特别影响切片。请注意，如果原始数组的掩码是`nomask`并且视图的掩码被更改，那么这种情况还不能很好地工作。有关详细讨论，请参见gh-5580。通过调用视图的`unshare_mask`方法，可以获取拥有掩码副本的原始行为。
- en: '`np.ma.masked` is no longer writeable'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.masked`不再可写'
- en: 'Attempts to mutate the `masked` constant now error, as the underlying arrays
    are marked readonly. In the past, it was possible to get away with:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试改变`masked`常量现在会出错，因为底层数组被标记为只读。过去，可以通过：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`np.ma` functions producing `fill_value` s have changed'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma`生成`fill_value`的函数已更改'
- en: Previously, `np.ma.default_fill_value` would return a 0d array, but `np.ma.minimum_fill_value`
    and `np.ma.maximum_fill_value` would return a tuple of the fields. Instead, all
    three methods return a structured `np.void` object, which is what you would already
    find in the `.fill_value` attribute.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.ma.default_fill_value`会返回一个0d数组，但`np.ma.minimum_fill_value`和`np.ma.maximum_fill_value`将返回一个字段的元组。现在，所有三种方法都返回一个结构化的`np.void`对象，这就是您已经在`.fill_value`属性中找到的。
- en: Additionally, the dtype guessing now matches that of `np.array` - so when passing
    a python scalar `x`, `maximum_fill_value(x)` is always the same as `maximum_fill_value(np.array(x))`.
    Previously `x = long(1)` on Python 2 violated this assumption.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，dtype猜测现在匹配`np.array`的dtype - 因此当传递python标量`x`时，`maximum_fill_value(x)`总是与`maximum_fill_value(np.array(x))`相同。以前，在Python
    2下`x = long(1)`违反了这个假设。
- en: '`a.flat.__array__()` returns non-writeable arrays when `a` is non-contiguous'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`a.flat.__array__()`当`a`是不连续时返回非可写数组'
- en: The intent is that the UPDATEIFCOPY array previously returned when `a` was non-contiguous
    will be replaced by a writeable copy in the future. This temporary measure is
    aimed to notify folks who expect the underlying array be modified in this situation
    that that will no longer be the case. The most likely places for this to be noticed
    is when expressions of the form `np.asarray(a.flat)` are used, or when `a.flat`
    is passed as the out parameter to a ufunc.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是在未来，当`a`不连续时，以前返回的UPDATEIFCOPY数组将被可写副本替换。这个临时措施旨在通知那些期望在这种情况下修改底层数组的人，这种情况将不再发生。在这种情况下最有可能注意到这一点的地方是，当使用形式为`np.asarray(a.flat)`的表达式时，或者当`a.flat`被传递为ufunc的输出参数时。
- en: '`np.tensordot` now returns zero array when contracting over 0-length dimension'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.tensordot`现在在收缩长度为0的维度时返回零数组'
- en: Previously `np.tensordot` raised a ValueError when contracting over 0-length
    dimension. Now it returns a zero array, which is consistent with the behaviour
    of `np.dot` and `np.einsum`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以前当收缩长度为0的维度时，`np.tensordot`引发了ValueError。现在它返回一个零数组，这与`np.dot`和`np.einsum`的行为一致。
- en: '`numpy.testing` reorganized'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing`重组'
- en: This is not expected to cause problems, but possibly something has been left
    out. If you experience an unexpected import problem using `numpy.testing` let
    us know.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 预计这不会导致问题，但可能会有遗漏。如果在使用`numpy.testing`时遇到意外的导入问题，请告诉我们。
- en: '`np.asfarray` no longer accepts non-dtypes through the `dtype` argument'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.asfarray`不再通过`dtype`参数接受非数据类型'
- en: This previously would accept `dtype=some_array`, with the implied semantics
    of `dtype=some_array.dtype`. This was undocumented, unique across the numpy functions,
    and if used would likely correspond to a typo.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之前可以接受`dtype=some_array`，隐含的语义是`dtype=some_array.dtype`。这是未记录的，在numpy函数中是独一无二的，如果使用很可能对应于拼写错误。
- en: 1D `np.linalg.norm` preserves float input types, even for arbitrary orders
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D `np.linalg.norm`保留浮点输入类型，即使对于任意顺序也是如此
- en: 'Previously, this would promote to `float64` when arbitrary orders were passed,
    despite not doing so under the simple cases:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在传递任意顺序时，这将提升为`float64`，尽管在简单情况下却不这样做：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This change affects only `float32` and `float16` arrays.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变只影响`float32`和`float16`数组。
- en: '`count_nonzero(arr, axis=())` now counts over no axes, not all axes'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`count_nonzero(arr, axis=())`现在不统计任何轴，而不是所有轴'
- en: Elsewhere, `axis==()` is always understood as “no axes”, but *count_nonzero*
    had a special case to treat this as “all axes”. This was inconsistent and surprising.
    The correct way to count over all axes has always been to pass `axis == None`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他地方，`axis ==()`总是被理解为“没有轴”，但对于*count_nonzero*，有一个特殊情况将其视为“所有轴”。这是不一致的和令人惊讶的。计算所有轴的正确方法一直是传递`axis
    == None`。
- en: '`__init__.py` files added to test directories'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试目录中添加`__init__.py`文件
- en: This is for pytest compatibility in the case of duplicate test file names in
    the different directories. As a result, `run_module_suite` no longer works, i.e.,
    `python <path-to-test-file>` results in an error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了在不同目录中存在重复测试文件名的情况下兼容pytest。结果，`run_module_suite`不再起作用，即 `python <path-to-test-file>`
    会导致错误。
- en: '`.astype(bool)` on unstructured void arrays now calls `bool` on each element'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对无序void数组的`.astype(bool)`现在对每个元素调用`bool`
- en: On Python 2, `void_array.astype(bool)` would always return an array of `True`,
    unless the dtype is `V0`. On Python 3, this operation would usually crash. Going
    forwards, *astype* matches the behavior of `bool(np.void)`, considering a buffer
    of all zeros as false, and anything else as true. Checks for `V0` can still be
    done with `arr.dtype.itemsize == 0`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 2 上，`void_array.astype(bool)`总是返回一个`True`数组，除非dtype是`V0`。在 Python 3
    上，这个操作通常会崩溃。前进时，*astype*与`bool(np.void)`的行为匹配，将所有零的缓冲区视为false，其他任何东西视为true。仍然可以使用`arr.dtype.itemsize
    == 0`检查`V0`。
- en: '`MaskedArray.squeeze` never returns `np.ma.masked`'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.squeeze`永远不会返回`np.ma.masked`'
- en: '`np.squeeze` is documented as returning a view, but the masked variant would
    sometimes return `masked`, which is not a view. This has been fixed, so that the
    result is always a view on the original masked array. This breaks any code that
    used `masked_arr.squeeze() is np.ma.masked`, but fixes code that writes to the
    result of *squeeze()*.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.squeeze`被记录为返回一个视图，但是掩码变体有时会返回`masked`，这不是一个视图。这一点已经得到了修复，所以结果总是原始掩码数组上的视图。这会破坏任何使用`masked_arr.squeeze()
    is np.ma.masked`的代码，但修复了对*squeeze()*的写入代码。'
- en: Renamed first parameter of `can_cast` from `from` to `from_`
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将`can_cast`的第一个参数从`from`改名为`from_`
- en: The previous parameter name `from` is a reserved keyword in Python, which made
    it difficult to pass the argument by name. This has been fixed by renaming the
    parameter to `from_`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的参数名称`from`在Python中是一个保留关键字，这使得按名称传递参数变得困难。通过将参数重命名为`from_`来解决此问题。
- en: '`isnat` raises `TypeError` when passed wrong type'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当传入错误类型时，`isnat`会引发`TypeError`。
- en: The ufunc `isnat` used to raise a `ValueError` when it was not passed variables
    of type `datetime` or `timedelta`. This has been changed to raising a `TypeError`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当`isnat`的ufunc传入的变量不是`datetime`或`timedelta`类型时，以前会引发`ValueError`，现在将引发`TypeError`。
- en: '`dtype.__getitem__` raises `TypeError` when passed wrong type'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当传入错误类型时，`dtype.__getitem__`会引发`TypeError`。
- en: When indexed with a float, the dtype object used to raise `ValueError`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浮点数进行索引时，dtype对象就会引发`ValueError`。
- en: User-defined types now need to implement `__str__` and `__repr__`
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户定义的类型现在需要实现`__str__`和`__repr__`。
- en: Previously, user-defined types could fall back to a default implementation of
    `__str__` and `__repr__` implemented in numpy, but this has now been removed.
    Now user-defined types will fall back to the python default `object.__str__` and
    `object.__repr__`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，用户定义的类型可以回退到numpy中实现的`__str__`和`__repr__`的默认实现，但现在已将其删除。现在，用户定义的类型将回退到python默认的`object.__str__`和`object.__repr__`。
- en: Many changes to array printing, disableable with the new “legacy” printing mode
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数组打印进行了许多更改，可以使用新的“legacy”打印模式进行禁用。
- en: The `str` and `repr` of ndarrays and numpy scalars have been changed in a variety
    of ways. These changes are likely to break downstream user’s doctests.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray和numpy标量的`str`和`repr`已经以各种方式更改。这些更改可能会破坏下游用户的doctest。
- en: These new behaviors can be disabled to mostly reproduce numpy 1.13 behavior
    by enabling the new 1.13 “legacy” printing mode. This is enabled by calling `np.set_printoptions(legacy="1.13")`,
    or using the new `legacy` argument to `np.array2string`, as `np.array2string(arr,
    legacy='1.13')`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用新的1.13“legacy”打印模式，可以禁用这些新行为，以基本重现numpy 1.13行为。通过调用`np.set_printoptions(legacy="1.13")`或使用`np.array2string`的新`legacy`参数，如`np.array2string(arr,
    legacy='1.13')`。
- en: 'In summary, the major changes are:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，主要变化有：
- en: 'For floating-point types:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于浮点类型：
- en: The `repr` of float arrays often omits a space previously printed in the sign
    position. See the new `sign` option to `np.set_printoptions`.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数组的`repr`通常会省略先前在符号位置打印的空格。请参阅`np.set_printoptions`的新选项`sign`。
- en: Floating-point arrays and scalars use a new algorithm for decimal representations,
    giving the shortest unique representation. This will usually shorten `float16`
    fractional output, and sometimes `float32` and `float128` output. `float64` should
    be unaffected. See the new `floatmode` option to `np.set_printoptions`.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数数组和标量使用新的十进制表示算法，给出最短唯一表示。这通常会缩短`float16`部分输出，有时也会缩短`float32`和`float128`输出。`float64`应该不受影响。请参阅`np.set_printoptions`的新选项`floatmode`。
- en: Float arrays printed in scientific notation no longer use fixed-precision, and
    now instead show the shortest unique representation.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用科学计数法打印的浮点数组不再使用固定精度，而是显示最短唯一表示。
- en: The `str` of floating-point scalars is no longer truncated in python2.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在python2中不再截断浮点标量的`str`。
- en: 'For other data types:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他数据类型：
- en: Non-finite complex scalars print like `nanj` instead of `nan*j`.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非有限复数标量打印为`nanj`而不是`nan*j`。
- en: '`NaT` values in datetime arrays are now properly aligned.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以正确对齐日期时间数组中的`NaT`值。
- en: Arrays and scalars of `np.void` datatype are now printed using hex notation.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在使用十六进制表示法打印`np.void`数据类型的数组和标量。
- en: 'For line-wrapping:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于换行：
- en: The “dtype” part of ndarray reprs will now be printed on the next line if there
    isn’t space on the last line of array output.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数组输出的最后一行没有空间，ndarray的reprs的“dtype”部分现在将打印在下一行。
- en: The `linewidth` format option is now always respected. The *repr* or *str* of
    an array will never exceed this, unless a single element is too wide.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在始终尊重`linewidth`格式选项。数组的*repr*或*str*永远不会超过此长度，除非单个元素过宽。
- en: The last line of an array string will never have more elements than earlier
    lines.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组字符串的最后一行的元素数量永远不会比前面的行多。
- en: An extra space is no longer inserted on the first line if the elements are too
    wide.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素过宽，第一行将不再插入额外的空格。
- en: 'For summarization (the use of `...` to shorten long arrays):'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于摘要（使用`...`来缩短长数组）：
- en: A trailing comma is no longer inserted for `str`. Previously, `str(np.arange(1001))`
    gave `'[   0    1    2 ...,  998  999 1000]'`, which has an extra comma.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再为`str`插入尾随逗号。先前，`str(np.arange(1001))`会给出`'[   0    1    2 ...,  998  999
    1000]'`，这里有一个额外的逗号。
- en: For arrays of 2-D and beyond, when `...` is printed on its own line in order
    to summarize any but the last axis, newlines are now appended to that line to
    match its leading newlines and a trailing space character is removed.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 2-D 及以上的数组，当 `...` 单独打印在其自己的一行以总结除最后一个轴以外的任何内容时，现在会将换行符附加到该行上，以匹配其前导换行符，并删除末尾空格字符。
- en: '`MaskedArray` arrays now separate printed elements with commas, always print
    the dtype, and correctly wrap the elements of long arrays to multiple lines. If
    there is more than 1 dimension, the array attributes are now printed in a new
    “left-justified” printing style.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaskedArray` 数组现在用逗号分隔打印元素，始终打印数据类型，并正确换行长数组的元素。如果有超过 1 个维度，则数组属性现在以新的“左对齐”打印样式打印。'
- en: '`recarray` arrays no longer print a trailing space before their dtype, and
    wrap to the right number of columns.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recarray` 数组在其数据类型之前不再打印尾随空格，并且换行到正确数量的列。'
- en: 0d arrays no longer have their own idiosyncratic implementations of `str` and
    `repr`. The `style` argument to `np.array2string` is deprecated.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 维数组不再具有其自己的特殊的 `str` 和 `repr` 实现。`np.array2string` 的 `style` 参数已被弃用。
- en: Arrays of `bool` datatype will omit the datatype in the `repr`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔数据类型的数组将在 `repr` 中省略数据类型。
- en: User-defined `dtypes` (subclasses of `np.generic`) now need to implement `__str__`
    and `__repr__`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，用户定义的 `dtypes`（`np.generic` 的子类）现在需要实现 `__str__` 和 `__repr__`。
- en: 'Some of these changes are described in more detail below. If you need to retain
    the previous behavior for doctests or other reasons, you may want to do something
    like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其中一些更详细的更改描述。如果需要保留以前的行为进行文档测试或其他原因，可能需要执行类似以下操作：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: C API changes
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API 变更
- en: PyPy compatible alternative to `UPDATEIFCOPY` arrays
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyPy 兼容的 `UPDATEIFCOPY` 数组的替代方案
- en: '`UPDATEIFCOPY` arrays are contiguous copies of existing arrays, possibly with
    different dimensions, whose contents are copied back to the original array when
    their refcount goes to zero and they are deallocated. Because PyPy does not use
    refcounts, they do not function correctly with PyPy. NumPy is in the process of
    eliminating their use internally and two new C-API functions,'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY` 数组是现有数组的连续副本，可能具有不同的尺寸，当它们的引用计数变为零并解除分配时，它们的内容被复制回原始数组。因为 PyPy
    不使用引用计数，它们在 PyPy 中无法正常运行。NumPy 正在逐步消除其在内部的使用，并引进了两个新的 C-API 函数，'
- en: '`PyArray_SetWritebackIfCopyBase`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_SetWritebackIfCopyBase`'
- en: '`PyArray_ResolveWritebackIfCopy`,'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_ResolveWritebackIfCopy`,'
- en: 'have been added together with a complementary flag, `NPY_ARRAY_WRITEBACKIFCOPY`.
    Using the new functionality also requires that some flags be changed when new
    arrays are created, to wit: `NPY_ARRAY_INOUT_ARRAY` should be replaced by `NPY_ARRAY_INOUT_ARRAY2`
    and `NPY_ARRAY_INOUT_FARRAY` should be replaced by `NPY_ARRAY_INOUT_FARRAY2`.
    Arrays created with these new flags will then have the `WRITEBACKIFCOPY` semantics.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了一些功能，以及补充标志 `NPY_ARRAY_WRITEBACKIFCOPY`。在创建新数组时，使用新功能还需要更改一些标志，即应该将 `NPY_ARRAY_INOUT_ARRAY`
    替换为 `NPY_ARRAY_INOUT_ARRAY2`，将 `NPY_ARRAY_INOUT_FARRAY` 替换为 `NPY_ARRAY_INOUT_FARRAY2`。用这些新标志创建的数组将具有
    `WRITEBACKIFCOPY` 语义。
- en: If PyPy compatibility is not a concern, these new functions can be ignored,
    although there will be a `DeprecationWarning`. If you do wish to pursue PyPy compatibility,
    more information on these functions and their use may be found in the [c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)
    documentation and the example in [how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不关心 PyPy 兼容性，可以忽略这些新函数，尽管会有 `DeprecationWarning`。如果确实希望追求 PyPy 兼容性，则可以在 [c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)
    文档和 [how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst)
    的示例中找到这些函数及其用法的更多信息。
- en: New Features
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: Encoding argument for text IO functions
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对文本 IO 函数的编码参数
- en: '`genfromtxt`, `loadtxt`, `fromregex` and `savetxt` can now handle files with
    arbitrary encoding supported by Python via the encoding argument. For backward
    compatibility the argument defaults to the special `bytes` value which continues
    to treat text as raw byte values and continues to pass latin1 encoded bytes to
    custom converters. Using any other value (including `None` for system default)
    will switch the functions to real text IO so one receives unicode strings instead
    of bytes in the resulting arrays.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`genfromtxt`，`loadtxt`，`fromregex`和`savetxt`现在可以通过编码参数处理Python支持的任意编码的文件。为了向后兼容，该参数默认为特殊的`bytes`值，该值会继续将文本视为原始字节值，并将latin1编码字节传递给定制转换器。使用任何其他值（包括系统默认的`None`）将把函数切换到真正的文本IO，因此在生成的数组中将接收到unicode字符串而不是字节。'
- en: External `nose` plugins are usable by `numpy.testing.Tester`
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部的`nose`插件可以被`numpy.testing.Tester`使用
- en: '`numpy.testing.Tester` is now aware of `nose` plugins that are outside the
    `nose` built-in ones. This allows using, for example, `nose-timer` like so: `np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])` to obtain the runtime of the 20 slowest tests. An
    extra keyword `timer` was also added to `Tester.test`, so `np.test(timer=20)`
    will also report the 20 slowest tests.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.testing.Tester`现在可以识别`nose`内置插件之外的`nose`插件。这允许例如像这样使用`nose-timer`：`np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])`以获得20个最慢测试的运行时间。`Tester.test`还新增了一个额外的关键字`timer`，因此`np.test(timer=20)`也将报告20个最慢的测试。'
- en: '`parametrize` decorator added to `numpy.testing`'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`parametrize`装饰器添加到`numpy.testing`'
- en: A basic `parametrize` decorator is now available in `numpy.testing`. It is intended
    to allow rewriting yield based tests that have been deprecated in pytest so as
    to facilitate the transition to pytest in the future. The nose testing framework
    has not been supported for several years and looks like abandonware.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的`parametrize`装饰器现在可以在`numpy.testing`中使用。它旨在允许重写基于yield的测试，这些测试已经在pytest中被弃用，以便未来能够更容易地过渡到pytest。nose测试框架已经多年没有得到支持，看起来像是被抛弃的软件。
- en: The new `parametrize` decorator does not have the full functionality of the
    one in pytest. It doesn’t work for classes, doesn’t support nesting, and does
    not substitute variable names. Even so, it should be adequate to rewrite the NumPy
    tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`parametrize`装饰器不具有pytest中的全部功能。它无法用于类，不支持嵌套，并且不会替换变量名。即便如此，它应该足以重写NumPy的测试。
- en: '`chebinterpolate` function added to `numpy.polynomial.chebyshev`'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`chebinterpolate`函数添加到`numpy.polynomial.chebyshev`'
- en: The new `chebinterpolate` function interpolates a given function at the Chebyshev
    points of the first kind. A new `Chebyshev.interpolate` class method adds support
    for interpolation over arbitrary intervals using the scaled and shifted Chebyshev
    points of the first kind.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`chebinterpolate`函数在第一类Chebyshev点处对给定函数进行插值。`Chebyshev.interpolate`类方法新增了对第一类缩放和移位Chebyshev点进行任意间隔插值的支持。
- en: Support for reading lzma compressed text files in Python 3
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Python 3中支持解压缩为lzma的文本文件
- en: With Python versions containing the `lzma` module the text IO functions can
    now transparently read from files with `xz` or `lzma` extension.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`lzma`模块的Python版本现在可以透明地从具有`xz`或`lzma`扩展名的文件中读取文本IO函数。
- en: '`sign` option added to `np.setprintoptions` and `np.array2string`'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sign`选项添加到`np.setprintoptions`和`np.array2string`'
- en: This option controls printing of the sign of floating-point types, and may be
    one of the characters ‘-’, ‘+’ or ‘ ‘. With ‘+’ numpy always prints the sign of
    positive values, with ‘ ‘ it always prints a space (whitespace character) in the
    sign position of positive values, and with ‘-’ it will omit the sign character
    for positive values. The new default is ‘-‘.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项控制浮点类型的符号打印，可能是字符‘-’、‘+’或‘ ’。对于‘+’，numpy始终打印正值的符号，对于‘ ’，它始终在正值的符号位置打印一个空格（空格字符），对于‘-’，它将省略正值的符号字符。新的默认值是‘-’。
- en: This new default changes the float output relative to numpy 1.13\. The old behavior
    can be obtained in 1.13 “legacy” printing mode, see compatibility notes above.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的默认值相对于numpy 1.13改变了浮点输出。旧的行为可以在1.13的“遗留”打印模式中获得，参见上面的兼容性说明。
- en: '`hermitian` option added to``np.linalg.matrix_rank``'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`hermitian`选项添加到`np.linalg.matrix_rank`'
- en: The new `hermitian` option allows choosing between standard SVD based matrix
    rank calculation and the more efficient eigenvalue based method for symmetric/hermitian
    matrices.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`hermitian`选项允许在对称/厄米矩阵的标准SVD基础矩阵秩计算和更有效的特征值基础方法之间进行选择。
- en: '`threshold` and `edgeitems` options added to `np.array2string`'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`threshold`和`edgeitems`选项添加到`np.array2string`'
- en: These options could previously be controlled using `np.set_printoptions`, but
    now can be changed on a per-call basis as arguments to `np.array2string`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以前可以使用 `np.set_printoptions` 控制这些选项，但现在可以作为参数传递给 `np.array2string`，从而在每次调用时进行更改。
- en: '`concatenate` and `stack` gained an `out` argument'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`concatenate` 和 `stack` 增加了 `out` 参数'
- en: A preallocated buffer of the desired dtype can now be used for the output of
    these functions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用所需数据类型的预分配缓冲区来输出这些函数。
- en: Support for PGI flang compiler on Windows
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持在 Windows 上使用 PGI flang 编译器
- en: The PGI flang compiler is a Fortran front end for LLVM released by NVIDIA under
    the Apache 2 license. It can be invoked by
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: PGI flang 编译器是 NVIDIA 在 Apache 2 许可下发布的 LLVM 的 Fortran 前端。可以通过以下方式调用
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is little experience with this new compiler, so any feedback from people
    using it will be appreciated.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新编译器的使用经验很少，因此欢迎使用它的人提供任何反馈意见。
- en: Improvements
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Numerator degrees of freedom in `random.noncentral_f` need only be positive.
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`random.noncentral_f` 中的分子自由度只需要是正数。'
- en: Prior to NumPy 1.14.0, the numerator degrees of freedom needed to be > 1, but
    the distribution is valid for values > 0, which is the new requirement.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.14.0 之前，分子自由度需要> 1，但分布对值> 0有效，这是新要求。
- en: The GIL is released for all `np.einsum` variations
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于所有 `np.einsum` 变体，GIL都得到了释放
- en: Some specific loop structures which have an accelerated loop version did not
    release the GIL prior to NumPy 1.14.0\. This oversight has been fixed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.14.0 之前，某些具有加速循环版本的特定循环结构在发布GIL之前尚未释放。这一疏忽已经得到了修复。
- en: The *np.einsum* function will use BLAS when possible and optimize by default
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.einsum* 函数将在可能的情况下使用BLAS，并默认进行优化'
- en: The `np.einsum` function will now call `np.tensordot` when appropriate. Because
    `np.tensordot` uses BLAS when possible, that will speed up execution. By default,
    `np.einsum` will also attempt optimization as the overhead is small relative to
    the potential improvement in speed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当适用时，`np.einsum` 函数现在将调用 `np.tensordot`。因为 `np.tensordot` 在可能的情况下使用 BLAS，这将加快执行速度。默认情况下，`np.einsum`
    也会尝试进行优化，因为与速度提高的潜力相比，开销很小。
- en: '`f2py` now handles arrays of dimension 0'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`f2py` 现在可以处理维度为0的数组'
- en: '`f2py` now allows for the allocation of arrays of dimension 0\. This allows
    for more consistent handling of corner cases downstream.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`f2py` 现在允许分配维度为0的数组。这样可以更一致地处理下游的边缘情况。'
- en: '`numpy.distutils` supports using MSVC and mingw64-gfortran together'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 支持同时使用 MSVC 和 mingw64-gfortran'
- en: Numpy distutils now supports using Mingw64 gfortran and MSVC compilers together.
    This enables the production of Python extension modules on Windows containing
    Fortran code while retaining compatibility with the binaries distributed by Python.org.
    Not all use cases are supported, but most common ways to wrap Fortran for Python
    are functional.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy distutils 现在支持同时使用Mingw64 gfortran和MSVC编译器。这使得在 Windows 上包含包含Fortran代码的Python扩展模块并保持与Python.org分发的二进制文件的兼容性成为可能。不是所有用例都受支持，但大多数用于在Python中封装Fortran的常见方式都是功能的。
- en: Compilation in this mode is usually enabled automatically, and can be selected
    via the `--fcompiler` and `--compiler` options to `setup.py`. Moreover, linking
    Fortran codes to static OpenBLAS is supported; by default a gfortran compatible
    static archive `openblas.a` is looked for.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译模式下通常会自动启用此功能，并可以通过 `setup.py` 的 `--fcompiler` 和 `--compiler` 选项来选择。此外，支持将
    Fortran 代码链接到静态 OpenBLAS；默认情况下，会查找 gfortran 兼容的静态存档 `openblas.a`。
- en: '`np.linalg.pinv` now works on stacked matrices'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg.pinv` 现在可以在堆叠矩阵上使用'
- en: Previously it was limited to a single 2d array.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以前限制为单个 2 维数组。
- en: '`numpy.save` aligns data to 64 bytes instead of 16'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.save` 将数据与 64 字节对齐，而不是 16 字节'
- en: Saving NumPy arrays in the `npy` format with `numpy.save` inserts padding before
    the array data to align it at 64 bytes. Previously this was only 16 bytes (and
    sometimes less due to a bug in the code for version 2). Now the alignment is 64
    bytes, which matches the widest SIMD instruction set commonly available, and is
    also the most common cache line size. This makes `npy` files easier to use in
    programs which open them with `mmap`, especially on Linux where an `mmap` offset
    must be a multiple of the page size.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `numpy.save` 以 `npy` 格式保存NumPy数组会在数组数据之前插入填充以使其在64字节处对齐。以前这只有16个字节（有时因为版本2的代码中的错误而更少）。现在对齐是64字节，这与常见的SIMD指令集匹配，并且也是最常见的缓存行大小。这使得
    `npy` 文件在使用 `mmap` 打开它们的程序中更容易使用，特别是在Linux上，其中 `mmap` 偏移必须是页大小的倍数。
- en: NPZ files now can be written without using temporary files
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以写入 NPZ 文件而不使用临时文件
- en: In Python 3.6+ `numpy.savez` and `numpy.savez_compressed` now write directly
    to a ZIP file, without creating intermediate temporary files.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.6+中，`numpy.savez`和`numpy.savez_compressed`现在直接写入ZIP文件，而不创建中间临时文件。
- en: Better support for empty structured and string types
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好地支持空结构化和字符串类型
- en: 'Structured types can contain zero fields, and string dtypes can contain zero
    characters. Zero-length strings still cannot be created directly, and must be
    constructed through structured dtypes:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化类型可以包含零个字段，字符串类型可以包含零个字符。 仍然无法直接创建长度为零的字符串，并且必须通过结构化数据类型进行构造：
- en: '[PRE4]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It was always possible to work with these, but the following operations are
    now supported for these arrays:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 可以一直使用这些，但是现在支持这些数组的以下操作：
- en: '*arr.sort()*'
  id: totrans-147
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.sort()*'
- en: ''
  id: totrans-148
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.view(bytes)*'
  id: totrans-150
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.view(bytes)*'
- en: ''
  id: totrans-151
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-152
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.resize(…)*'
  id: totrans-153
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.resize(…)*'
- en: ''
  id: totrans-154
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-155
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*pickle.dumps(arr)*'
  id: totrans-156
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*pickle.dumps(arr)*'
- en: Support for `decimal.Decimal` in `np.lib.financial`
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.lib.financial`对`decimal.Decimal`的支持'
- en: Unless otherwise stated all functions within the `financial` package now support
    using the `decimal.Decimal` built-in type.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，`financial`包中的所有函数现在都支持使用内置类型`decimal.Decimal`。
- en: Float printing now uses “dragon4” algorithm for shortest decimal representation
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数打印现在使用“dragon4”算法来进行最短的十进制表示
- en: The `str` and `repr` of floating-point values (16, 32, 64 and 128 bit) are now
    printed to give the shortest decimal representation which uniquely identifies
    the value from others of the same type. Previously this was only true for `float64`
    values. The remaining float types will now often be shorter than in numpy 1.13\.
    Arrays printed in scientific notation now also use the shortest scientific representation,
    instead of fixed precision as before.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点值（16、32、64和128位）的`str`和`repr`现在打印为给出与同一类型的其他值唯一标识该值的最短十进制表示。 以前只对`float64`值成立。
    现在通常比Numpy 1.13中的其他浮点类型要短。 以前，科学记数法中的数组也使用最短的科学表示形式，而不是以前的固定精度。
- en: Additionally, the *str* of float scalars scalars will no longer be truncated
    in python2, unlike python2 *float`s. `np.double* scalars now have a `str` and
    `repr` identical to that of a python3 float.
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，float标量的*str*在python2中不再被截断，不像python2的*float`s。 `np.double*标量现在具有与python3
    float相同的`str`和`repr`。
- en: New functions `np.format_float_scientific` and `np.format_float_positional`
    are provided to generate these decimal representations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了新函数`np.format_float_scientific`和`np.format_float_positional`来生成这些十进制表示。
- en: A new option `floatmode` has been added to `np.set_printoptions` and `np.array2string`,
    which gives control over uniqueness and rounding of printed elements in an array.
    The new default is `floatmode='maxprec'` with `precision=8`, which will print
    at most 8 fractional digits, or fewer if an element can be uniquely represented
    with fewer. A useful new mode is `floatmode="unique"`, which will output enough
    digits to specify the array elements uniquely.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.set_printoptions`和`np.array2string`现在增加了一个名为`floatmode`的选项，这可以控制数组中打印元素的唯一性和四舍五入。
    新的默认值是`floatmode=''maxprec''`，具有`precision=8`，它将最多打印8个小数位，或者如果一个变元可以以更少的小数位唯一表示，则会打印更少。
    一个有用的新模式是`floatmode="unique"`，它将输出足够的数字以唯一地指定数组元素。'
- en: Numpy complex-floating-scalars with values like `inf*j` or `nan*j` now print
    as `infj` and `nanj`, like the pure-python `complex` type.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 具有诸如`inf*j`或`nan*j`值的Numpy复数浮点标量现在打印为`infj`和`nanj`，就像纯Python `complex`类型一样。
- en: The `FloatFormat` and `LongFloatFormat` classes are deprecated and should both
    be replaced by `FloatingFormat`. Similarly `ComplexFormat` and `LongComplexFormat`
    should be replaced by `ComplexFloatingFormat`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`FloatFormat`和`LongFloatFormat`类已被弃用，并且应分别由`FloatingFormat`取代。 同样，`ComplexFormat`和`LongComplexFormat`应被`ComplexFloatingFormat`取代。'
- en: '`void` datatype elements are now printed in hex notation'
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void`数据类型元素现在以十六进制表示打印'
- en: A hex representation compatible with the python `bytes` type is now printed
    for unstructured `np.void` elements, e.g., `V4` datatype. Previously, in python2
    the raw void data of the element was printed to stdout, or in python3 the integer
    byte values were shown.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与python `bytes`类型兼容的十六进制表示现在用于打印无结构的`np.void`元素，例如`V4`数据类型。 以前，在python2中，元素的原始void数据被打印到标准输出，或者在python3中显示整数字节值。
- en: printing style for `void` datatypes is now independently customizable
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void`数据类型的打印样式现在可以独立自定义'
- en: The printing style of `np.void` arrays is now independently customizable using
    the `formatter` argument to `np.set_printoptions`, using the `'void'` key, instead
    of the catch-all `numpystr` key as before.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.void`数组的打印样式现在可以独立自定义，使用`np.set_printoptions`的`formatter`参数，使用`''void''`键，而不是以前的通用`numpystr`键。'
- en: Reduced memory usage of `np.loadtxt`
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少了`np.loadtxt`的内存使用
- en: '`np.loadtxt` now reads files in chunks instead of all at once which decreases
    its memory usage significantly for large files.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在会分块读取文件，而不是一次性读取，这会显著减少其对大文件的内存使用。'
- en: Changes
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变化
- en: Multiple-field indexing/assignment of structured arrays
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个字段的结构化数组的索引/赋值
- en: The indexing and assignment of structured arrays with multiple fields has changed
    in a number of ways, as warned about in previous releases.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 多字段结构化数组的索引和赋值在许多方面已经发生了变化，正如在先前版本中警告的那样。
- en: First, indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    have extra padding bytes corresponding to intervening fields in the original array,
    unlike the copy in 1.13, which will affect code such as `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用多个字段的结构化数组进行索引，例如`arr[['f1', 'f3']]`，返回原始数组的视图，而不是副本。返回的视图将具有对应于原始数组中介字段的额外填充字节，不同于1.13中的副本，这将影响`arr[['f1',
    'f3']].view(newdtype)`这样的代码。
- en: Second, assignment between structured arrays will now occur “by position” instead
    of “by field name”. The Nth field of the destination will be set to the Nth field
    of the source regardless of field name, unlike in numpy versions 1.6 to 1.13 in
    which fields in the destination array were set to the identically-named field
    in the source array or to 0 if the source did not have a field.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，现在在结构化数组之间的赋值将“按位置”而不是“按字段名”进行。目标数组的第N个字段将设置为源数组的第N个字段，而不考虑字段名，不同于numpy版本1.6到1.13，其中目标数组中的字段被设置为源数组中同名的字段，或者如果源数组没有字段，则设置为0。
- en: Correspondingly, the order of fields in a structured dtypes now matters when
    computing dtype equality. For example, with the dtypes
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，在计算数据类型相等性时，结构化数据类型中字段的顺序现在很重要。例如，对于数据类型
- en: '[PRE5]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'the expression `x == y` will now return `False`, unlike before. This makes
    dictionary based dtype specifications like `dtype({''a'': (''i4'', 0), ''b'':
    (''f4'', 4)})` dangerous in python < 3.6 since dict key order is not preserved
    in those versions.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，表达式`x == y`将返回`False`，与以前不同。这使得python < 3.6中的基于字典的数据类型规范（例如`dtype({''a'':
    (''i4'', 0), ''b'': (''f4'', 4)})`）变得危险，因为这些版本中不保留字典键的顺序。'
- en: Assignment from a structured array to a boolean array now raises a ValueError,
    unlike in 1.13, where it always set the destination elements to `True`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个结构化数组到布尔数组的赋值现在会引发ValueError，不同于1.13版，它总是将目标元素设置为`True`。
- en: Assignment from structured array with more than one field to a non-structured
    array now raises a ValueError. In 1.13 this copied just the first field of the
    source to the destination.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从具有多于一个字段的结构化数组到非结构化数组的赋值现在会引发ValueError。在1.13版中，它只是将源数组的第一个字段复制到目标数组中。
- en: Using field “titles” in multiple-field indexing is now disallowed, as is repeating
    a field name in a multiple-field index.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不允许在多字段索引中使用字段“标题”，也不允许在多字段索引中重复字段名。
- en: The documentation for structured arrays in the user guide has been significantly
    updated to reflect these changes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 用户指南中关于结构化数组的文档已经得到显著更新，以反映这些变化。
- en: Integer and Void scalars are now unaffected by `np.set_string_function`
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数和空虚标量现在不受`np.set_string_function`的影响
- en: Previously, unlike most other numpy scalars, the `str` and `repr` of integer
    and void scalars could be controlled by `np.set_string_function`. This is no longer
    possible.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他numpy标量不同，以前，整数和空虚标量的`str`和`repr`可以通过`np.set_string_function`进行控制。这不再可能。
- en: 0d array printing changed, `style` arg of array2string deprecated
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 0d数组打印已更改，`array2string`的`style`参数被弃用
- en: Previously the `str` and `repr` of 0d arrays had idiosyncratic implementations
    which returned `str(a.item())` and `'array(' + repr(a.item()) + ')'` respectively
    for 0d array `a`, unlike both numpy scalars and higher dimension ndarrays.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的0d数组的`str`和`repr`具有独特的实现，分别返回`str(a.item())`和`'array(' + repr(a.item()) +
    ')'`，对于0d数组`a`，与numpy标量和更高维ndarrays不同。
- en: Now, the `str` of a 0d array acts like a numpy scalar using `str(a[()])` and
    the `repr` acts like higher dimension arrays using `formatter(a[()])`, where `formatter`
    can be specified using `np.set_printoptions`. The `style` argument of `np.array2string`
    is deprecated.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，0d数组的`str`行为像一个numpy标量，使用`str(a[()])`，而`repr`的行为像更高维数组，使用`formatter(a[()])`，其中`formatter`可以使用`np.set_printoptions`指定。`np.array2string`的`style`参数已被弃用。
- en: This new behavior is disabled in 1.13 legacy printing mode, see compatibility
    notes above.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新的行为在1.13版的传统打印模式中已被禁用，参见上面的兼容性注意事项。
- en: Seeding `RandomState` using an array requires a 1-d array
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数组种子化`RandomState`需要一个一维数组
- en: '`RandomState` previously would accept empty arrays or arrays with 2 or more
    dimensions, which resulted in either a failure to seed (empty arrays) or for some
    of the passed values to be ignored when setting the seed.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的`RandomState`将接受空数组或2个或更多维的数组，这导致了无法进行种子化（空数组）或在设置种子时忽略了一些传递的值。
- en: '`MaskedArray` objects show a more useful `repr`'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray`对象显示了更有用的`repr`'
- en: The `repr` of a `MaskedArray` is now closer to the python code that would produce
    it, with arrays now being shown with commas and dtypes. Like the other formatting
    changes, this can be disabled with the 1.13 legacy printing mode in order to help
    transition doctests.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaskedArray`的`repr`现在更接近生成它的python代码，数组现在用逗号和dtypes显示。与其他格式更改一样，可以使用1.13遗留打印模式禁用这个功能，以帮助过渡doctests。'
- en: The `repr` of `np.polynomial` classes is more explicit
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.polynomial`类的`repr`更加明确'
- en: 'It now shows the domain and window parameters as keyword arguments to make
    them more clear:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在显示领域和窗口参数作为关键字参数，以使它们更清晰：
- en: '[PRE6]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Highlights
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The *np.einsum* function uses BLAS when possible
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*np.einsum*函数在可能的情况下使用BLAS'
- en: '`genfromtxt`, `loadtxt`, `fromregex` and `savetxt` can now handle files with
    arbitrary Python supported encoding.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genfromtxt`、`loadtxt`、`fromregex`和`savetxt`现在可以处理任意Python支持的编码的文件。'
- en: Major improvements to printing of NumPy arrays and scalars.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对NumPy数组和标量进行打印的重大改进。
- en: New functions
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: '`parametrize`: decorator added to numpy.testing'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parametrize`：添加到numpy.testing的装饰器'
- en: '`chebinterpolate`: Interpolate function at Chebyshev points.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chebinterpolate`：在切比雪夫点处插值函数。'
- en: '`format_float_positional` and `format_float_scientific` : format floating-point
    scalars unambiguously with control of rounding and padding.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format_float_positional` 和 `format_float_scientific`：以可控制舍入和填充的方式格式化浮点标量。'
- en: '`PyArray_ResolveWritebackIfCopy` and `PyArray_SetWritebackIfCopyBase`, new
    C-API functions useful in achieving PyPy compatibility.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的C-API函数`PyArray_ResolveWritebackIfCopy`和`PyArray_SetWritebackIfCopyBase`对于实现PyPy兼容性非常有用。
- en: Deprecations
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Using `np.bool_` objects in place of integers is deprecated. Previously `operator.index(np.bool_)`
    was legal and allowed constructs such as `[1, 2, 3][np.True_]`. That was misleading,
    as it behaved differently from `np.array([1, 2, 3])[np.True_]`.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`np.bool_`对象代替整数已被弃用。以前的`operator.index(np.bool_)`是合法的，并且允许构造`[1, 2, 3][np.True_]`这样的语句。这是误导性的，因为它与`np.array([1,
    2, 3])[np.True_]`的行为不同。
- en: Truth testing of an empty array is deprecated. To check if an array is not empty,
    use `array.size > 0`.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对空数组进行真值测试已被弃用。要检查数组是否不为空，请使用`array.size > 0`。
- en: Calling `np.bincount` with `minlength=None` is deprecated. `minlength=0` should
    be used instead.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`minlength=None`调用`np.bincount`已被弃用。应改用`minlength=0`。
- en: Calling `np.fromstring` with the default value of the `sep` argument is deprecated.
    When that argument is not provided, a broken version of `np.frombuffer` is used
    that silently accepts unicode strings and – after encoding them as either utf-8
    (python 3) or the default encoding (python 2) – treats them as binary data. If
    reading binary data is desired, `np.frombuffer` should be used directly.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用使用默认值的`sep`参数调用`np.fromstring`。当未提供该参数时，将使用`np.frombuffer`的版本，它默默地接受Unicode字符串，并在将它们编码为utf-8（python
    3）或默认编码（python 2）后将其视为二进制数据。如果要读取二进制数据，应直接使用`np.frombuffer`。
- en: The `style` option of array2string is deprecated in non-legacy printing mode.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非遗留打印模式中，`array2string`的`style`选项已被弃用。
- en: '`PyArray_SetUpdateIfCopyBase` has been deprecated. For NumPy versions >= 1.14
    use `PyArray_SetWritebackIfCopyBase` instead, see *C API changes* below for more
    details.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_SetUpdateIfCopyBase`已被弃用。对于NumPy版本>=1.14，请改用`PyArray_SetWritebackIfCopyBase`，有关更多详细信息，请参见下面的*C
    API changes*。'
- en: The use of `UPDATEIFCOPY` arrays is deprecated, see *C API changes* below for
    details. We will not be dropping support for those arrays, but they are not compatible
    with PyPy.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用使用`UPDATEIFCOPY`数组，有关详细信息，请参见下面的*C API changes*。我们不会放弃对这些数组的支持，但它们与PyPy不兼容。
- en: Future Changes
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变更
- en: '`np.issubdtype` will stop downcasting dtype-like arguments. It might be expected
    that `issubdtype(np.float32, ''float64'')` and `issubdtype(np.float32, np.float64)`
    mean the same thing - however, there was an undocumented special case that translated
    the former into `issubdtype(np.float32, np.floating)`, giving the surprising result
    of True.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.issubdtype`将停止对dtype-like参数的降级。也许人们会期望`issubdtype(np.float32, ''float64'')`和`issubdtype(np.float32,
    np.float64)`是相同的 - 但是，存在一个未记录的特殊情况，将前者转换为`issubdtype(np.float32, np.floating)`，产生了令人惊讶的结果。'
- en: This translation now gives a warning that explains what translation is occurring.
    In the future, the translation will be disabled, and the first example will be
    made equivalent to the second.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此版本现在会发出一个警告，解释正在进行的翻译。在未来，将禁用翻译，并且第一个示例将与第二个示例等效。
- en: '`np.linalg.lstsq` default for `rcond` will be changed. The `rcond` parameter
    to `np.linalg.lstsq` will change its default to machine precision times the largest
    of the input array dimensions. A FutureWarning is issued when `rcond` is not passed
    explicitly.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.linalg.lstsq`的`rcond`默认将被更改。`np.linalg.lstsq`的`rcond`参数将将其默认值更改为机器精度乘以输入数组维度的最大值。当未明确传递`rcond`时，将发出FutureWarning。'
- en: '`a.flat.__array__()` will return a writeable copy of `a` when `a` is non-contiguous.
    Previously it returned an UPDATEIFCOPY array when `a` was writeable. Currently
    it returns a non-writeable copy. See gh-7054 for a discussion of the issue.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`a`是非连续的时，`a.flat.__array__()`将返回`a`的可写副本。以前，当`a`是可写的时，它返回了一个UPDATEIFCOPY数组。目前它返回一个不可写的副本。请参见gh-7054进行相关讨论。
- en: Unstructured void array’s `.item` method will return a bytes object. In the
    future, calling `.item()` on arrays or scalars of `np.void` datatype will return
    a `bytes` object instead of a buffer or int array, the same as returned by `bytes(void_scalar)`.
    This may affect code which assumed the return value was mutable, which will no
    longer be the case. A `FutureWarning` is now issued when this would occur.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无结构void数组的`.item`方法将返回一个字节对象。在未来，对`np.void`数据类型的数组或标量调用`.item()`将返回一个`bytes`对象，而不是buffer或int数组，与`bytes(void_scalar)`返回的内容相同。这可能会影响假定返回值是可变的代码，但这不再是情况。当发生这种情况时，将现在发出`FutureWarning`。
- en: Compatibility notes
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The mask of a masked array view is also a view rather than a copy
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掩码数组的视图掩码也是视图而不是副本
- en: There was a FutureWarning about this change in NumPy 1.11.x. In short, it is
    now the case that, when changing a view of a masked array, changes to the mask
    are propagated to the original. That was not previously the case. This change
    affects slices in particular. Note that this does not yet work properly if the
    mask of the original array is `nomask` and the mask of the view is changed. See
    gh-5580 for an extended discussion. The original behavior of having a copy of
    the mask can be obtained by calling the `unshare_mask` method of the view.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.11.x中有一个有关此更改的FutureWarning。简而言之，现在的情况是，当改变一个掩码数组的视图时，掩码的更改会传播到原始数组上。以前不是这样的。此更改特别影响切片。请注意，如果原始数组的掩码为`nomask`，并且更改了视图的掩码，则尚不完全正常工作。请参见gh-5580进行更多讨论。可以通过调用视图的`unshare_mask`方法来获得有一份掩码副本的原始行为。
- en: '`np.ma.masked` is no longer writeable'
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.masked`不再可写'
- en: 'Attempts to mutate the `masked` constant now error, as the underlying arrays
    are marked readonly. In the past, it was possible to get away with:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，试图对`masked`常量进行突变会报错，因为底层数组被标记为只读。过去，可以这样做:'
- en: '[PRE7]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`np.ma` functions producing `fill_value` s have changed'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产生`fill_value`的`np.ma`函数已经改变
- en: Previously, `np.ma.default_fill_value` would return a 0d array, but `np.ma.minimum_fill_value`
    and `np.ma.maximum_fill_value` would return a tuple of the fields. Instead, all
    three methods return a structured `np.void` object, which is what you would already
    find in the `.fill_value` attribute.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.ma.default_fill_value`将返回一个0维数组，但`np.ma.minimum_fill_value`和`np.ma.maximum_fill_value`将返回一个字段的元组。相反，这三个方法都返回一个结构化的`np.void`对象，这是您已经在`.fill_value`属性中找到的内容。
- en: Additionally, the dtype guessing now matches that of `np.array` - so when passing
    a python scalar `x`, `maximum_fill_value(x)` is always the same as `maximum_fill_value(np.array(x))`.
    Previously `x = long(1)` on Python 2 violated this assumption.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，现在的dtype猜测与`np.array`的匹配 - 因此，当传递一个python标量`x`时，`maximum_fill_value(x)`总是与`maximum_fill_value(np.array(x))`相同。以前，`x
    = long(1)`在Python 2中违反了这个假设。
- en: '`a.flat.__array__()` returns non-writeable arrays when `a` is non-contiguous'
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当`a`是非连续的时，`a.flat.__array__()`返回的数组将是不可写的
- en: The intent is that the UPDATEIFCOPY array previously returned when `a` was non-contiguous
    will be replaced by a writeable copy in the future. This temporary measure is
    aimed to notify folks who expect the underlying array be modified in this situation
    that that will no longer be the case. The most likely places for this to be noticed
    is when expressions of the form `np.asarray(a.flat)` are used, or when `a.flat`
    is passed as the out parameter to a ufunc.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是，当 `a` 是非连续的时，先前在返回UPDATEIFCOPY数组将来会被可写副本所替代。这个临时措施旨在通知那些期望在这种情况下修改底层数组的人，这将不再是情况。最有可能注意到这一点的地方是当使用形式为
    `np.asarray(a.flat)` 的表达式时，或者当将 `a.flat` 作为ufunc的out参数传递时。
- en: '`np.tensordot` now returns zero array when contracting over 0-length dimension'
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在在收缩为0长度维度时，`np.tensordot` 返回零数组
- en: Previously `np.tensordot` raised a ValueError when contracting over 0-length
    dimension. Now it returns a zero array, which is consistent with the behaviour
    of `np.dot` and `np.einsum`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.tensordot`在收缩为0长度维度时会引发ValueError。现在它返回零数组，这与`np.dot`和`np.einsum`的行为一致。
- en: '`numpy.testing` reorganized'
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing` 重新组织'
- en: This is not expected to cause problems, but possibly something has been left
    out. If you experience an unexpected import problem using `numpy.testing` let
    us know.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 预计这不会导致问题，但可能漏掉了一些内容。如果您在使用 `numpy.testing` 时遇到意外的导入问题，请告诉我们。
- en: '`np.asfarray` no longer accepts non-dtypes through the `dtype` argument'
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.asfarray` 不再通过 `dtype` 参数接受非dtype输入'
- en: This previously would accept `dtype=some_array`, with the implied semantics
    of `dtype=some_array.dtype`. This was undocumented, unique across the numpy functions,
    and if used would likely correspond to a typo.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 先前可以接受 `dtype=some_array`，其中隐含的语义是 `dtype=some_array.dtype`。这是不详尽的，numpy函数中独一无二的，如果使用可能会对应拼写错误。
- en: 1D `np.linalg.norm` preserves float input types, even for arbitrary orders
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D的`np.linalg.norm` 会保留浮点输入类型，甚至对任意顺序
- en: 'Previously, this would promote to `float64` when arbitrary orders were passed,
    despite not doing so under the simple cases:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 先前，当传递任意顺序时，这将提升为 `float64`，尽管在简单情况下不会这样做：
- en: '[PRE8]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This change affects only `float32` and `float16` arrays.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改仅影响 `float32` 和 `float16` 数组。
- en: '`count_nonzero(arr, axis=())` now counts over no axes, not all axes'
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`count_nonzero(arr, axis=())` 现在计算没有轴，而不是所有轴'
- en: Elsewhere, `axis==()` is always understood as “no axes”, but *count_nonzero*
    had a special case to treat this as “all axes”. This was inconsistent and surprising.
    The correct way to count over all axes has always been to pass `axis == None`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他地方，`axis==()` 始终被理解为“没有轴”，但 *count_nonzero* 有一个特殊情况，将其视为“所有轴”。这是不一致和令人惊讶的。在所有轴上计数的正确方法始终是传递
    `axis == None`。
- en: '`__init__.py` files added to test directories'
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试目录中添加了 `__init__.py` 文件
- en: This is for pytest compatibility in the case of duplicate test file names in
    the different directories. As a result, `run_module_suite` no longer works, i.e.,
    `python <path-to-test-file>` results in an error.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了pytest在不同目录中具有重复测试文件名的情况下的兼容性。结果，`run_module_suite`不再起作用，即，`python <path-to-test-file>`会导致错误。
- en: '`.astype(bool)` on unstructured void arrays now calls `bool` on each element'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在无结构的void数组上的`.astype(bool)` 现在在每个元素上调用 `bool`
- en: On Python 2, `void_array.astype(bool)` would always return an array of `True`,
    unless the dtype is `V0`. On Python 3, this operation would usually crash. Going
    forwards, *astype* matches the behavior of `bool(np.void)`, considering a buffer
    of all zeros as false, and anything else as true. Checks for `V0` can still be
    done with `arr.dtype.itemsize == 0`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 2上，`void_array.astype(bool)` 总是返回一个`True`数组，除非dtype为`V0`。在Python 3上，此操作通常会崩溃。从现在开始，*astype*
    与 `bool(np.void)` 的行为相匹配，将所有零缓冲区视为false，而其他任何内容视为true。检查`V0`仍可以通过 `arr.dtype.itemsize
    == 0` 完成。
- en: '`MaskedArray.squeeze` never returns `np.ma.masked`'
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.squeeze` 永远不会返回 `np.ma.masked`'
- en: '`np.squeeze` is documented as returning a view, but the masked variant would
    sometimes return `masked`, which is not a view. This has been fixed, so that the
    result is always a view on the original masked array. This breaks any code that
    used `masked_arr.squeeze() is np.ma.masked`, but fixes code that writes to the
    result of *squeeze()*.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.squeeze` 被记录为返回一个视图，但掩码变体有时会返回 `masked`，这不是一个视图。已修复此问题，因此结果始终是原始掩码数组上的视图。这会中断使用
    `masked_arr.squeeze() is np.ma.masked` 的任何代码，但修复了写入 *squeeze()* 结果的代码。'
- en: Renamed first parameter of `can_cast` from `from` to `from_`
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 `can_cast` 的第一个参数重命名为 `from_`
- en: The previous parameter name `from` is a reserved keyword in Python, which made
    it difficult to pass the argument by name. This has been fixed by renaming the
    parameter to `from_`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的参数名称`from`在Python中是一个保留关键字，这使得通过名称传递参数变得困难。将参数重命名为`from_`来解决了这个问题。
- en: '`isnat` raises `TypeError` when passed wrong type'
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当传递错误类型时，`isnat`引发`TypeError`。
- en: The ufunc `isnat` used to raise a `ValueError` when it was not passed variables
    of type `datetime` or `timedelta`. This has been changed to raising a `TypeError`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`isnat`的ufunc在不传递`datetime`或`timedelta`类型的变量时曾经会引发`ValueError`，现在将引发`TypeError`。'
- en: '`dtype.__getitem__` raises `TypeError` when passed wrong type'
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当传递错误类型时，`dtype.__getitem__`引发`TypeError`。
- en: When indexed with a float, the dtype object used to raise `ValueError`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当用浮点数索引时，dtype对象曾经会引发`ValueError`。
- en: User-defined types now need to implement `__str__` and `__repr__`
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户定义的类型现在需要实现`__str__`和`__repr__`。
- en: Previously, user-defined types could fall back to a default implementation of
    `__str__` and `__repr__` implemented in numpy, but this has now been removed.
    Now user-defined types will fall back to the python default `object.__str__` and
    `object.__repr__`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，用户定义的类型可以退回到numpy中实现的`__str__`和`__repr__`的默认实现，但现在已经移除。现在用户定义的类型将退回到python默认的`object.__str__`和`object.__repr__`。
- en: Many changes to array printing, disableable with the new “legacy” printing mode
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 许多对数组打印的更改，可以通过新的“legacy”打印模式来禁用。
- en: The `str` and `repr` of ndarrays and numpy scalars have been changed in a variety
    of ways. These changes are likely to break downstream user’s doctests.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ndarrays和numpy标量的`str`和`repr`已经以各种方式进行了更改。这些变化可能会破坏下游用户的doctests。
- en: These new behaviors can be disabled to mostly reproduce numpy 1.13 behavior
    by enabling the new 1.13 “legacy” printing mode. This is enabled by calling `np.set_printoptions(legacy="1.13")`,
    or using the new `legacy` argument to `np.array2string`, as `np.array2string(arr,
    legacy='1.13')`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新的行为可以通过启用新的1.13“legacy”打印模式来禁用，可以通过调用`np.set_printoptions(legacy="1.13")`来启用，或者通过`np.array2string`的新`legacy`参数来使用，例如`np.array2string(arr,
    legacy='1.13')`。
- en: 'In summary, the major changes are:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，主要的变化有：
- en: 'For floating-point types:'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于浮点类型：
- en: The `repr` of float arrays often omits a space previously printed in the sign
    position. See the new `sign` option to `np.set_printoptions`.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数数组的`repr`通常省略了以前在符号位置打印的空格。参见`np.set_printoptions`的新`sign`选项。
- en: Floating-point arrays and scalars use a new algorithm for decimal representations,
    giving the shortest unique representation. This will usually shorten `float16`
    fractional output, and sometimes `float32` and `float128` output. `float64` should
    be unaffected. See the new `floatmode` option to `np.set_printoptions`.
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数组和标量使用新的十进制表示算法，给出最短的唯一表示形式。这通常会缩短`float16`的小数输出，有时会缩短`float32`和`float128`的输出。`float64`不受影响。参见`np.set_printoptions`的新`floatmode`选项。
- en: Float arrays printed in scientific notation no longer use fixed-precision, and
    now instead show the shortest unique representation.
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科学计数法打印的浮点数数组不再使用固定精度，而是展示最短的唯一表示形式。
- en: The `str` of floating-point scalars is no longer truncated in python2.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点标量的`str`在python2中不再被截断。
- en: 'For other data types:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他数据类型：
- en: Non-finite complex scalars print like `nanj` instead of `nan*j`.
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非有限复数标量打印形式为`nanj`，而不是`nan*j`。
- en: '`NaT` values in datetime arrays are now properly aligned.'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间数组中的`NaT`值现在可以正确对齐了。
- en: Arrays and scalars of `np.void` datatype are now printed using hex notation.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组和`np.void`数据类型的标量现在以十六进制表示方式进行打印。
- en: 'For line-wrapping:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于换行：
- en: The “dtype” part of ndarray reprs will now be printed on the next line if there
    isn’t space on the last line of array output.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数组输出的最后一行没有空间，ndarray reprs的“dtype”部分现在将在下一行打印。
- en: The `linewidth` format option is now always respected. The *repr* or *str* of
    an array will never exceed this, unless a single element is too wide.
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linewidth`格式选项现在会始终受到尊重。数组的*repr*或*str*不会超过这个宽度，除非单个元素太宽。'
- en: The last line of an array string will never have more elements than earlier
    lines.
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组字符串的最后一行将不再比以前的行含有更多的元素。
- en: An extra space is no longer inserted on the first line if the elements are too
    wide.
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素过宽，第一行不再插入额外的空格。
- en: 'For summarization (the use of `...` to shorten long arrays):'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于摘要（使用`...`来缩短长数组）：
- en: A trailing comma is no longer inserted for `str`. Previously, `str(np.arange(1001))`
    gave `'[   0    1    2 ...,  998  999 1000]'`, which has an extra comma.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再为`str`插入尾逗号。以前，`str(np.arange(1001)`给出的结果是`'[   0    1    2 ...,  998  999
    1000]'`，这多了一个逗号。
- en: For arrays of 2-D and beyond, when `...` is printed on its own line in order
    to summarize any but the last axis, newlines are now appended to that line to
    match its leading newlines and a trailing space character is removed.
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于2-D及以上维度的数组，当在单独一行上打印`...`以概括除了最后一维之外的任何维度时，现在会添加换行符以匹配其前导换行符，并且删除尾随空格字符。
- en: '`MaskedArray` arrays now separate printed elements with commas, always print
    the dtype, and correctly wrap the elements of long arrays to multiple lines. If
    there is more than 1 dimension, the array attributes are now printed in a new
    “left-justified” printing style.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaskedArray`数组现在用逗号分隔打印的元素，总是打印dtype，并且正确地将长数组的元素换行到多行。如果数组有多于1个维度，数组属性现在以新的“左对齐”打印风格呈现。'
- en: '`recarray` arrays no longer print a trailing space before their dtype, and
    wrap to the right number of columns.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recarray`数组在其dtype之前不再打印尾随空格，并且根据正确的列数进行换行。'
- en: 0d arrays no longer have their own idiosyncratic implementations of `str` and
    `repr`. The `style` argument to `np.array2string` is deprecated.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0维数组不再具有它们自己独特的`str`和`repr`实现。`np.array2string`的`style`参数被弃用。
- en: Arrays of `bool` datatype will omit the datatype in the `repr`.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`数据类型的数组将在`repr`中省略数据类型。'
- en: User-defined `dtypes` (subclasses of `np.generic`) now need to implement `__str__`
    and `__repr__`.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的`dtypes`（`np.generic`的子类）现在需要实现`__str__`和`__repr__`。
- en: 'Some of these changes are described in more detail below. If you need to retain
    the previous behavior for doctests or other reasons, you may want to do something
    like:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更详细描述的一些这些变化。如果你需要保留以前的行为用于doctests或其他原因，你可能需要做类似的事情：
- en: '[PRE9]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The mask of a masked array view is also a view rather than a copy
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掩码数组视图的掩码也是一个视图而不是一个副本
- en: There was a FutureWarning about this change in NumPy 1.11.x. In short, it is
    now the case that, when changing a view of a masked array, changes to the mask
    are propagated to the original. That was not previously the case. This change
    affects slices in particular. Note that this does not yet work properly if the
    mask of the original array is `nomask` and the mask of the view is changed. See
    gh-5580 for an extended discussion. The original behavior of having a copy of
    the mask can be obtained by calling the `unshare_mask` method of the view.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.11.x中有一个有关这个变化的FutureWarning。简而言之，当改变掩码数组的视图时，掩码的更改会传播到原始数组。以前不是这种情况。这个变化特别影响切片。请注意，如果原始数组的掩码是`nomask`并且视图的掩码被改变，这种情况仍然无效。参见gh-5580进行更详尽的讨论。通过调用视图的`unshare_mask`方法可以获得具有掩码副本的原始行为。
- en: '`np.ma.masked` is no longer writeable'
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.masked`现在不再可写'
- en: 'Attempts to mutate the `masked` constant now error, as the underlying arrays
    are marked readonly. In the past, it was possible to get away with:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试改变`masked`常量的操作现在会出错，因为底层数组被标记为只读。过去，可以这样做：
- en: '[PRE10]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`np.ma` functions producing `fill_value` s have changed'
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成`fill_value`的`np.ma`函数已经改变
- en: Previously, `np.ma.default_fill_value` would return a 0d array, but `np.ma.minimum_fill_value`
    and `np.ma.maximum_fill_value` would return a tuple of the fields. Instead, all
    three methods return a structured `np.void` object, which is what you would already
    find in the `.fill_value` attribute.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.ma.default_fill_value`会返回一个0维数组，但`np.ma.minimum_fill_value`和`np.ma.maximum_fill_value`会返回一个字段的元组。相反，所有三种方法都返回一个结构化的`np.void`对象，这就是你在`.fill_value`属性中已经找到的内容。
- en: Additionally, the dtype guessing now matches that of `np.array` - so when passing
    a python scalar `x`, `maximum_fill_value(x)` is always the same as `maximum_fill_value(np.array(x))`.
    Previously `x = long(1)` on Python 2 violated this assumption.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，dtype的猜测现在与`np.array`的匹配-因此当传递一个python标量`x`时，`maximum_fill_value(x)`总是和`maximum_fill_value(np.array(x))`一样。以前的Python
    2上的`x = long(1)`违反了这个假设。
- en: '`a.flat.__array__()` returns non-writeable arrays when `a` is non-contiguous'
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当`a`是不连续的时，`a.flat.__array__()`返回不可写的数组
- en: The intent is that the UPDATEIFCOPY array previously returned when `a` was non-contiguous
    will be replaced by a writeable copy in the future. This temporary measure is
    aimed to notify folks who expect the underlying array be modified in this situation
    that that will no longer be the case. The most likely places for this to be noticed
    is when expressions of the form `np.asarray(a.flat)` are used, or when `a.flat`
    is passed as the out parameter to a ufunc.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是，以前在 `a` 非连续时返回的 UPDATEIFCOPY 数组将被在将来替换为可写副本。这是一个临时措施，旨在通知那些期望在这种情况下修改底层数组的人，这将不再是事实。最有可能注意到这一点的地方是当使用形式为
    `np.asarray(a.flat)` 的表达式，或者当 `a.flat` 作为 ufunc 的输出参数传递时。
- en: '`np.tensordot` now returns zero array when contracting over 0-length dimension'
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当在 0 长度维度上收缩时，`np.tensordot` 现在返回零数组
- en: Previously `np.tensordot` raised a ValueError when contracting over 0-length
    dimension. Now it returns a zero array, which is consistent with the behaviour
    of `np.dot` and `np.einsum`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当在 0 长度维度上收缩时，`np.tensordot` 会引发一个 ValueError。现在它返回一个零数组，这与 `np.dot` 和 `np.einsum`
    的行为一致。
- en: '`numpy.testing` reorganized'
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing` 重新组织'
- en: This is not expected to cause problems, but possibly something has been left
    out. If you experience an unexpected import problem using `numpy.testing` let
    us know.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 预计这不会引起问题，但可能会有遗漏。如果您在使用 `numpy.testing` 时遇到意外的导入问题，请告诉我们。
- en: '`np.asfarray` no longer accepts non-dtypes through the `dtype` argument'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.asfarray` 不再通过 `dtype` 参数接受非 dtype'
- en: This previously would accept `dtype=some_array`, with the implied semantics
    of `dtype=some_array.dtype`. This was undocumented, unique across the numpy functions,
    and if used would likely correspond to a typo.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以前可以通过 `dtype=some_array` 接受，隐含的语义是 `dtype=some_array.dtype`。这是未记录的，在 numpy
    函数中是唯一的，如果使用可能会对应于打字错误。
- en: 1D `np.linalg.norm` preserves float input types, even for arbitrary orders
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D `np.linalg.norm` 保留 float 输入类型，甚至在任意顺序下
- en: 'Previously, this would promote to `float64` when arbitrary orders were passed,
    despite not doing so under the simple cases:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当传递任意顺序时，这将晋升为 `float64`，尽管在简单情况下不会这样做：
- en: '[PRE11]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This change affects only `float32` and `float16` arrays.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改仅影响 `float32` 和 `float16` 数组。
- en: '`count_nonzero(arr, axis=())` now counts over no axes, not all axes'
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`count_nonzero(arr, axis=())` 现在不再计算任何轴，而是不计算所有轴'
- en: Elsewhere, `axis==()` is always understood as “no axes”, but *count_nonzero*
    had a special case to treat this as “all axes”. This was inconsistent and surprising.
    The correct way to count over all axes has always been to pass `axis == None`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他地方，`axis==()` 总是被理解为“没有轴”，但 *count_nonzero* 有一个特殊情况，将此视为“所有轴”。这是不一致的和出乎意料的。始终计算所有轴的正确方式一直是传递
    `axis == None`。
- en: '`__init__.py` files added to test directories'
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__.py` 文件添加到测试目录'
- en: This is for pytest compatibility in the case of duplicate test file names in
    the different directories. As a result, `run_module_suite` no longer works, i.e.,
    `python <path-to-test-file>` results in an error.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了 pytest 兼容性，以防不同目录中存在相同的测试文件名。结果，`run_module_suite` 不再起作用，即，`python <path-to-test-file>`
    会导致错误。
- en: '`.astype(bool)` on unstructured void arrays now calls `bool` on each element'
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在非结构化空数组上执行`.astype(bool)`现在调用每个元素的 `bool`
- en: On Python 2, `void_array.astype(bool)` would always return an array of `True`,
    unless the dtype is `V0`. On Python 3, this operation would usually crash. Going
    forwards, *astype* matches the behavior of `bool(np.void)`, considering a buffer
    of all zeros as false, and anything else as true. Checks for `V0` can still be
    done with `arr.dtype.itemsize == 0`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 2 中，`void_array.astype(bool)` 总是返回一个 `True` 数组，除非 dtype 是 `V0`。在 Python
    3 中，此操作通常会崩溃。未来，*astype* 与 `bool(np.void)` 的行为匹配，将所有零的缓冲区视为假，将其他任何东西视为真。仍然可以使用
    `arr.dtype.itemsize == 0` 来检查 `V0`。
- en: '`MaskedArray.squeeze` never returns `np.ma.masked`'
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.squeeze` 永远不会返回 `np.ma.masked`'
- en: '`np.squeeze` is documented as returning a view, but the masked variant would
    sometimes return `masked`, which is not a view. This has been fixed, so that the
    result is always a view on the original masked array. This breaks any code that
    used `masked_arr.squeeze() is np.ma.masked`, but fixes code that writes to the
    result of *squeeze()*.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.squeeze` 被记录为返回一个视图，但是掩盖的变体有时会返回 `masked`，这不是一个视图。这已经得到修复，所以结果始终是对原始掩码数组的视图。这打破了任何使用
    `masked_arr.squeeze() is np.ma.masked` 的代码，但修复了对 *squeeze()* 的结果进行写操作的代码。'
- en: Renamed first parameter of `can_cast` from `from` to `from_`
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 `from` 重命名为 `from_` 的 `can_cast` 的第一个参数
- en: The previous parameter name `from` is a reserved keyword in Python, which made
    it difficult to pass the argument by name. This has been fixed by renaming the
    parameter to `from_`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的参数名`from`是Python中的保留关键字，这使得通过名称传递参数变得困难。通过将参数重命名为`from_`来解决此问题。
- en: '`isnat` raises `TypeError` when passed wrong type'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`isnat` 在传递错误类型时引发 `TypeError`'
- en: The ufunc `isnat` used to raise a `ValueError` when it was not passed variables
    of type `datetime` or `timedelta`. This has been changed to raising a `TypeError`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`isnat` ufunc在不传递`datetime`或`timedelta`类型变量时曾引发`ValueError`。现在改为引发`TypeError`。'
- en: '`dtype.__getitem__` raises `TypeError` when passed wrong type'
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`dtype.__getitem__` 在传递错误类型时引发 `TypeError`'
- en: When indexed with a float, the dtype object used to raise `ValueError`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用浮点数索引时，dtype对象曾引发 `ValueError`。
- en: User-defined types now need to implement `__str__` and `__repr__`
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在，用户定义的类型需要实现 `__str__` 和 `__repr__`。
- en: Previously, user-defined types could fall back to a default implementation of
    `__str__` and `__repr__` implemented in numpy, but this has now been removed.
    Now user-defined types will fall back to the python default `object.__str__` and
    `object.__repr__`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，用户定义的类型可能会回退到由numpy实现的`__str__`和`__repr__`的默认实现，但现在已将其移除。现在，用户定义的类型将回退到python默认的`object.__str__`和`object.__repr__`。
- en: Many changes to array printing, disableable with the new “legacy” printing mode
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数组打印进行了许多更改，可以通过新的“legacy”打印模式进行禁用。
- en: The `str` and `repr` of ndarrays and numpy scalars have been changed in a variety
    of ways. These changes are likely to break downstream user’s doctests.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ndarrays 和 numpy 标量的 `str` 和 `repr` 已经以各种方式更改。这些更改可能会破坏下游用户的doctests。
- en: These new behaviors can be disabled to mostly reproduce numpy 1.13 behavior
    by enabling the new 1.13 “legacy” printing mode. This is enabled by calling `np.set_printoptions(legacy="1.13")`,
    or using the new `legacy` argument to `np.array2string`, as `np.array2string(arr,
    legacy='1.13')`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过启用新的1.13“legacy”打印模式来禁用这些新行为，从而基本重现numpy 1.13的行为。通过调用`np.set_printoptions(legacy="1.13")`，或者使用新的`np.array2string`的`legacy`参数，如`np.array2string(arr,
    legacy='1.13')`。
- en: 'In summary, the major changes are:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，主要变化如下：
- en: 'For floating-point types:'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于浮点类型：
- en: The `repr` of float arrays often omits a space previously printed in the sign
    position. See the new `sign` option to `np.set_printoptions`.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数组的 `repr` 在以前打印的符号位置通常省略了一个空格。参见`np.set_printoptions`的新`sign`选项。
- en: Floating-point arrays and scalars use a new algorithm for decimal representations,
    giving the shortest unique representation. This will usually shorten `float16`
    fractional output, and sometimes `float32` and `float128` output. `float64` should
    be unaffected. See the new `floatmode` option to `np.set_printoptions`.
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数组和标量使用新算法进行十进制表示，给出最短唯一表示。这通常会缩短 `float16` 分数输出，有时会缩短 `float32` 和 `float128`
    输出。`float64` 应该不受影响。参见`np.set_printoptions`的新`floatmode`选项。
- en: Float arrays printed in scientific notation no longer use fixed-precision, and
    now instead show the shortest unique representation.
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印为科学计数法的浮点数数组不再使用固定精度，而是显示最短唯一表示。
- en: The `str` of floating-point scalars is no longer truncated in python2.
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点标量的 `str` 在 python2 中不再被截断。
- en: 'For other data types:'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他数据类型：
- en: Non-finite complex scalars print like `nanj` instead of `nan*j`.
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非有限复数标量打印为 `nanj` 而不是 `nan*j`。
- en: '`NaT` values in datetime arrays are now properly aligned.'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: datetime数组中的`NaT`值现在被正确对齐。
- en: Arrays and scalars of `np.void` datatype are now printed using hex notation.
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.void` 数据类型的数组和标量现在使用十六进制表示法打印。'
- en: 'For line-wrapping:'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于换行：
- en: The “dtype” part of ndarray reprs will now be printed on the next line if there
    isn’t space on the last line of array output.
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ndarray reprs 的“dtype”部分现在将在数组输出的最后一行没有空间时打印在下一行。
- en: The `linewidth` format option is now always respected. The *repr* or *str* of
    an array will never exceed this, unless a single element is too wide.
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linewidth` 格式选项现在始终被尊重。除非单个元素过宽，否则数组的 *repr* 或 *str* 永远不会超过此选项。'
- en: The last line of an array string will never have more elements than earlier
    lines.
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组字符串的最后一行元素不会比较早的行多。
- en: An extra space is no longer inserted on the first line if the elements are too
    wide.
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素过宽，则不再在第一行插入额外的空格。
- en: 'For summarization (the use of `...` to shorten long arrays):'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于总结（使用`...`缩短长数组的方法）：
- en: A trailing comma is no longer inserted for `str`. Previously, `str(np.arange(1001))`
    gave `'[   0    1    2 ...,  998  999 1000]'`, which has an extra comma.
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再为 `str` 插入尾随逗号。以前，`str(np.arange(1001))` 给出的结果是 `'[   0    1    2 ...,  998 
    999 1000]'`，有一个额外的逗号。
- en: For arrays of 2-D and beyond, when `...` is printed on its own line in order
    to summarize any but the last axis, newlines are now appended to that line to
    match its leading newlines and a trailing space character is removed.
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于二维及以上的数组，当`...`自己单独打印以总结除最后一个轴外的任何内容时，现在将向该行附加换行符以匹配其首行的换行符，并移除尾随空格字符。
- en: '`MaskedArray` arrays now separate printed elements with commas, always print
    the dtype, and correctly wrap the elements of long arrays to multiple lines. If
    there is more than 1 dimension, the array attributes are now printed in a new
    “left-justified” printing style.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaskedArray`数组现在使用逗号分隔打印的元素，总是打印dtype，并正确将长数组的元素分行打印。如果有多个维度，现在会以新的“左对齐”打印样式打印数组属性。'
- en: '`recarray` arrays no longer print a trailing space before their dtype, and
    wrap to the right number of columns.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recarray`数组不再在其dtype之前打印尾随空格，并且适应右列数。'
- en: 0d arrays no longer have their own idiosyncratic implementations of `str` and
    `repr`. The `style` argument to `np.array2string` is deprecated.
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0d数组不再具有其自己的特殊的`str`和`repr`实现。`np.array2string`的`style`参数已被弃用。
- en: Arrays of `bool` datatype will omit the datatype in the `repr`.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`数据类型的数组将在`repr`中省略数据类型。'
- en: User-defined `dtypes` (subclasses of `np.generic`) now need to implement `__str__`
    and `__repr__`.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的`dtypes`（`np.generic`的子类）现在需要实现`__str__`和`__repr__`。
- en: 'Some of these changes are described in more detail below. If you need to retain
    the previous behavior for doctests or other reasons, you may want to do something
    like:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更改将在下面更详细地描述。如果您需要保留以前的行为以进行文档测试或其他原因，您可能需要进行以下操作：
- en: '[PRE12]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: C API changes
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API更改
- en: PyPy compatible alternative to `UPDATEIFCOPY` arrays
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyPy兼容的`UPDATEIFCOPY`数组的替代品
- en: '`UPDATEIFCOPY` arrays are contiguous copies of existing arrays, possibly with
    different dimensions, whose contents are copied back to the original array when
    their refcount goes to zero and they are deallocated. Because PyPy does not use
    refcounts, they do not function correctly with PyPy. NumPy is in the process of
    eliminating their use internally and two new C-API functions,'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY`数组是现有数组的连续副本，可能具有不同的维度，其内容在其引用计数减为零并被释放时被复制回原始数组。因为PyPy不使用引用计数，所以它们在PyPy中无法正常工作。NumPy正在逐步消除其在内部的使用，并两个新的C-API函数，'
- en: '`PyArray_SetWritebackIfCopyBase`'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_SetWritebackIfCopyBase`'
- en: '`PyArray_ResolveWritebackIfCopy`,'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_ResolveWritebackIfCopy`,'
- en: 'have been added together with a complementary flag, `NPY_ARRAY_WRITEBACKIFCOPY`.
    Using the new functionality also requires that some flags be changed when new
    arrays are created, to wit: `NPY_ARRAY_INOUT_ARRAY` should be replaced by `NPY_ARRAY_INOUT_ARRAY2`
    and `NPY_ARRAY_INOUT_FARRAY` should be replaced by `NPY_ARRAY_INOUT_FARRAY2`.
    Arrays created with these new flags will then have the `WRITEBACKIFCOPY` semantics.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加，以及补充的标志，`NPY_ARRAY_WRITEBACKIFCOPY`。使用新功能还需要在创建新数组时更改一些标志，即：`NPY_ARRAY_INOUT_ARRAY`应该被`NPY_ARRAY_INOUT_ARRAY2`替换，`NPY_ARRAY_INOUT_FARRAY`应该被`NPY_ARRAY_INOUT_FARRAY2`替换。然后使用这些新标志创建的数组将具有`WRITEBACKIFCOPY`语义。
- en: If PyPy compatibility is not a concern, these new functions can be ignored,
    although there will be a `DeprecationWarning`. If you do wish to pursue PyPy compatibility,
    more information on these functions and their use may be found in the [c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)
    documentation and the example in [how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不关心PyPy兼容性，可以忽略这些新功能，尽管会有`DeprecationWarning`。如果确实希望追求PyPy兼容性，可以在 [c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)
    文档和 [how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst)
    中找到有关这些功能及其使用的更多信息。
- en: PyPy compatible alternative to `UPDATEIFCOPY` arrays
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyPy兼容的`UPDATEIFCOPY`数组的替代品
- en: '`UPDATEIFCOPY` arrays are contiguous copies of existing arrays, possibly with
    different dimensions, whose contents are copied back to the original array when
    their refcount goes to zero and they are deallocated. Because PyPy does not use
    refcounts, they do not function correctly with PyPy. NumPy is in the process of
    eliminating their use internally and two new C-API functions,'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY`数组是现有数组的连续副本，可能具有不同的维度，其内容在其引用计数减为零并被释放时被复制回原始数组。因为PyPy不使用引用计数，所以它们在PyPy中无法正常工作。NumPy正在逐步消除其在内部的使用，并两个新的C-API函数，'
- en: '`PyArray_SetWritebackIfCopyBase`'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_SetWritebackIfCopyBase`'
- en: '`PyArray_ResolveWritebackIfCopy`,'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_ResolveWritebackIfCopy`,'
- en: 'have been added together with a complementary flag, `NPY_ARRAY_WRITEBACKIFCOPY`.
    Using the new functionality also requires that some flags be changed when new
    arrays are created, to wit: `NPY_ARRAY_INOUT_ARRAY` should be replaced by `NPY_ARRAY_INOUT_ARRAY2`
    and `NPY_ARRAY_INOUT_FARRAY` should be replaced by `NPY_ARRAY_INOUT_FARRAY2`.
    Arrays created with these new flags will then have the `WRITEBACKIFCOPY` semantics.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个补充标志`NPY_ARRAY_WRITEBACKIFCOPY`。使用这些新功能还需要在创建新数组时更改一些标志，即应该用`NPY_ARRAY_INOUT_ARRAY2`替换`NPY_ARRAY_INOUT_ARRAY`，并且应该用`NPY_ARRAY_INOUT_FARRAY2`替换`NPY_ARRAY_INOUT_FARRAY`。然后使用这些新标志创建的数组将具有`WRITEBACKIFCOPY`的语义。
- en: If PyPy compatibility is not a concern, these new functions can be ignored,
    although there will be a `DeprecationWarning`. If you do wish to pursue PyPy compatibility,
    more information on these functions and their use may be found in the [c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)
    documentation and the example in [how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst).
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不关心PyPy的兼容性，可以忽略这些新函数，尽管会有`DeprecationWarning`。如果希望追求PyPy的兼容性，可以在[c-api](https://github.com/numpy/numpy/blob/master/doc/source/reference/c-api.array.rst)文档中找到这些函数及其用法的更多信息，并在[how-to-extend](https://github.com/numpy/numpy/blob/master/doc/source/user/c-info.how-to-extend.rst)中找到示例。
- en: New Features
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Encoding argument for text IO functions
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本IO函数的编码参数
- en: '`genfromtxt`, `loadtxt`, `fromregex` and `savetxt` can now handle files with
    arbitrary encoding supported by Python via the encoding argument. For backward
    compatibility the argument defaults to the special `bytes` value which continues
    to treat text as raw byte values and continues to pass latin1 encoded bytes to
    custom converters. Using any other value (including `None` for system default)
    will switch the functions to real text IO so one receives unicode strings instead
    of bytes in the resulting arrays.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`genfromtxt`、`loadtxt`、`fromregex`和`savetxt`现在可以处理通过编码参数支持的任意编码的文件。为了向后兼容，该参数默认为特殊的`bytes`值，它将继续将文本视为原始的字节值，并继续将latin1编码的字节传递给自定义转换器。使用任何其他值（包括`None`表示系统默认）将使函数切换到真正的文本IO，因此在生成的数组中将收到Unicode字符串而不是字节。'
- en: External `nose` plugins are usable by `numpy.testing.Tester`
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing.Tester`可以使用外部的`nose`插件'
- en: '`numpy.testing.Tester` is now aware of `nose` plugins that are outside the
    `nose` built-in ones. This allows using, for example, `nose-timer` like so: `np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])` to obtain the runtime of the 20 slowest tests. An
    extra keyword `timer` was also added to `Tester.test`, so `np.test(timer=20)`
    will also report the 20 slowest tests.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.testing.Tester` 现在可以识别 `nose` 的插件，这些插件不是`nose`内置的。这允许使用像这样的插件，例如`nose-timer`：`np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])`来获得最慢的20个测试的运行时间。`Tester.test`还添加了一个额外的关键字`timer`，所以`np.test(timer=20)`也会报告最慢的20个测试。'
- en: '`parametrize` decorator added to `numpy.testing`'
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`parametrize`装饰器添加到`numpy.testing`'
- en: A basic `parametrize` decorator is now available in `numpy.testing`. It is intended
    to allow rewriting yield based tests that have been deprecated in pytest so as
    to facilitate the transition to pytest in the future. The nose testing framework
    has not been supported for several years and looks like abandonware.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的`parametrize`装饰器现在在`numpy.testing`中可用。它旨在允许重写已在pytest中弃用的基于yield的测试，以便将来能够更容易地过渡到pytest。nose测试框架已经没有得到支持好几年了，现在看起来像是废弃的软件。
- en: The new `parametrize` decorator does not have the full functionality of the
    one in pytest. It doesn’t work for classes, doesn’t support nesting, and does
    not substitute variable names. Even so, it should be adequate to rewrite the NumPy
    tests.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`parametrize`装饰器没有pytest中的全部功能。它不能用于类，不支持嵌套，并且不会替换变量名。即便如此，它应该足以重写NumPy测试。
- en: '`chebinterpolate` function added to `numpy.polynomial.chebyshev`'
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.polynomial.chebyshev`中添加了`chebinterpolate`函数'
- en: The new `chebinterpolate` function interpolates a given function at the Chebyshev
    points of the first kind. A new `Chebyshev.interpolate` class method adds support
    for interpolation over arbitrary intervals using the scaled and shifted Chebyshev
    points of the first kind.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`chebinterpolate`函数在第一类切比雪夫点上对给定函数进行插值。新的`Chebyshev.interpolate`类方法增加了对使用第一类切比雪夫点的任意区间进行插值的支持。
- en: Support for reading lzma compressed text files in Python 3
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持在Python 3中读取lzma压缩的文本文件
- en: With Python versions containing the `lzma` module the text IO functions can
    now transparently read from files with `xz` or `lzma` extension.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包含`lzma`模块的Python版本，文本IO函数现在可以透明地从具有`xz`或`lzma`扩展名的文件中读取
- en: '`sign` option added to `np.setprintoptions` and `np.array2string`'
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.setprintoptions`和`np.array2string`新增了`sign`选项'
- en: This option controls printing of the sign of floating-point types, and may be
    one of the characters ‘-’, ‘+’ or ‘ ‘. With ‘+’ numpy always prints the sign of
    positive values, with ‘ ‘ it always prints a space (whitespace character) in the
    sign position of positive values, and with ‘-’ it will omit the sign character
    for positive values. The new default is ‘-‘.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项用于控制浮点类型的符号打印，可以是字符‘-’、‘+’或‘ ’。使用‘+’ numpy总是打印正值的符号，使用‘ ’它总是在正值的符号位置上打印空格（空白字符），使用‘-’它将省略正值的符号字符。新的默认值是‘-‘
- en: This new default changes the float output relative to numpy 1.13\. The old behavior
    can be obtained in 1.13 “legacy” printing mode, see compatibility notes above.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新的默认设置相对于numpy 1.13改变了浮点输出。可以在1.13“遗留”打印模式中获得旧的行为，参见上述兼容性说明。
- en: '`hermitian` option added to``np.linalg.matrix_rank``'
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '``np.linalg.matrix_rank``新增了`hermitian`选项'
- en: The new `hermitian` option allows choosing between standard SVD based matrix
    rank calculation and the more efficient eigenvalue based method for symmetric/hermitian
    matrices.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`hermitian`选项允许在标准SVD基础矩阵秩计算和对称/共轭矩阵的更有效的特征值基础方法之间进行选择。
- en: '`threshold` and `edgeitems` options added to `np.array2string`'
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.array2string`新增了`threshold`和`edgeitems`选项'
- en: These options could previously be controlled using `np.set_printoptions`, but
    now can be changed on a per-call basis as arguments to `np.array2string`.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项以前可以通过`np.set_printoptions`进行控制，但现在可以作为`np.array2string`的参数在每次调用时进行更改
- en: '`concatenate` and `stack` gained an `out` argument'
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`concatenate`和`stack`增加了`out`参数'
- en: A preallocated buffer of the desired dtype can now be used for the output of
    these functions.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 所需dtype的预分配缓冲区现在可以用于这些函数的输出。
- en: Support for PGI flang compiler on Windows
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上支持PGI flang编译器
- en: The PGI flang compiler is a Fortran front end for LLVM released by NVIDIA under
    the Apache 2 license. It can be invoked by
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: PGI flang编译器是由NVIDIA在Apache 2许可下发布的LLVM的Fortran前端。可以通过以下方式调用
- en: '[PRE13]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is little experience with this new compiler, so any feedback from people
    using it will be appreciated.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种新编译器的经验很少，因此将非常感谢使用它的人们的任何反馈。
- en: Encoding argument for text IO functions
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本IO函数的编码参数
- en: '`genfromtxt`, `loadtxt`, `fromregex` and `savetxt` can now handle files with
    arbitrary encoding supported by Python via the encoding argument. For backward
    compatibility the argument defaults to the special `bytes` value which continues
    to treat text as raw byte values and continues to pass latin1 encoded bytes to
    custom converters. Using any other value (including `None` for system default)
    will switch the functions to real text IO so one receives unicode strings instead
    of bytes in the resulting arrays.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`genfromtxt`、`loadtxt`、`fromregex`和`savetxt`现在可以处理由Python支持的任意编码的文件，通过`encoding`参数。为了向后兼容，参数默认为特殊的`bytes`值，该值继续将文本视为原始字节值，并继续将latin1编码的字节传递给自定义转换器。使用任何其他值（包括`None`用于系统默认值）将使函数切换到真正的文本IO，因此在结果数组中将收到Unicode字符串而不是字节。'
- en: External `nose` plugins are usable by `numpy.testing.Tester`
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部`nose`插件可以被`numpy.testing.Tester`使用
- en: '`numpy.testing.Tester` is now aware of `nose` plugins that are outside the
    `nose` built-in ones. This allows using, for example, `nose-timer` like so: `np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])` to obtain the runtime of the 20 slowest tests. An
    extra keyword `timer` was also added to `Tester.test`, so `np.test(timer=20)`
    will also report the 20 slowest tests.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.testing.Tester`现在可识别在`nose`内置插件之外的`nose`插件。这允许使用例如`nose-timer`的插件，如此：`np.test(extra_argv=[''--with-timer'',
    ''--timer-top-n'', ''20''])`就可以获得20个最慢测试的运行时间。`Tester.test`还新增了一个额外的关键字`timer`，所以`np.test(timer=20)`也会报告20个最慢的测试。'
- en: '`parametrize` decorator added to `numpy.testing`'
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing`中新增了`parametrize`装饰器'
- en: A basic `parametrize` decorator is now available in `numpy.testing`. It is intended
    to allow rewriting yield based tests that have been deprecated in pytest so as
    to facilitate the transition to pytest in the future. The nose testing framework
    has not been supported for several years and looks like abandonware.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.testing`现在提供了一个基本的`parametrize`装饰器。它旨在允许重写基于yield的测试，这些测试已被pytest弃用，以便在将来方便过渡到pytest。鼻子测试框架已经没有得到支持多年，看起来像是弃用软件。'
- en: The new `parametrize` decorator does not have the full functionality of the
    one in pytest. It doesn’t work for classes, doesn’t support nesting, and does
    not substitute variable names. Even so, it should be adequate to rewrite the NumPy
    tests.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `parametrize` 装饰器没有 pytest 中的完整功能。它不适用于类, 不支持嵌套, 也不能替换变量名。即便如此, 它应该足以重写 NumPy
    测试。
- en: '`chebinterpolate` function added to `numpy.polynomial.chebyshev`'
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy.polynomial.chebyshev` 中新增了 `chebinterpolate` 函数。
- en: The new `chebinterpolate` function interpolates a given function at the Chebyshev
    points of the first kind. A new `Chebyshev.interpolate` class method adds support
    for interpolation over arbitrary intervals using the scaled and shifted Chebyshev
    points of the first kind.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `chebinterpolate` 函数在第一类切比雪夫点上插值给定函数。 `Chebyshev.interpolate` 类方法的新增支持使用第一类scaled和shifted切比雪夫点在任意区间进行插值。
- en: Support for reading lzma compressed text files in Python 3
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持在 Python 3 中读取 lzma 压缩的文本文件。
- en: With Python versions containing the `lzma` module the text IO functions can
    now transparently read from files with `xz` or `lzma` extension.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含 `lzma` 模块的 Python 版本, 文本 IO 函数现在可以透明地读取 `xz` 或 `lzma` 扩展名的文件。
- en: '`sign` option added to `np.setprintoptions` and `np.array2string`'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `np.setprintoptions` 和 `np.array2string` 新增了 `sign` 选项。
- en: This option controls printing of the sign of floating-point types, and may be
    one of the characters ‘-’, ‘+’ or ‘ ‘. With ‘+’ numpy always prints the sign of
    positive values, with ‘ ‘ it always prints a space (whitespace character) in the
    sign position of positive values, and with ‘-’ it will omit the sign character
    for positive values. The new default is ‘-‘.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项控制浮点类型的符号打印, 可以是 '-', '+' 或 ' ' 之一。使用 '+' 时 NumPy 总是打印正值的符号, 使用 ' ' 时它总是在正值位置打印空格(空白字符),
    使用 '-' 时它将省略正值的符号字符。新的默认值是 '-'。
- en: This new default changes the float output relative to numpy 1.13\. The old behavior
    can be obtained in 1.13 “legacy” printing mode, see compatibility notes above.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的默认设置改变了相对于 NumPy 1.13 的浮点输出。在 1.13 "legacy" 打印模式下可以获得旧的行为, 请参阅上面的兼容性说明。
- en: '`hermitian` option added to``np.linalg.matrix_rank``'
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `np.linalg.matrix_rank` 新增了 `hermitian` 选项。
- en: The new `hermitian` option allows choosing between standard SVD based matrix
    rank calculation and the more efficient eigenvalue based method for symmetric/hermitian
    matrices.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `hermitian` 选项允许在标准 SVD 基础矩阵秩计算和更高效的特征值基础方法之间进行选择, 用于对称/厄米矩阵。
- en: '`threshold` and `edgeitems` options added to `np.array2string`'
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `np.array2string` 新增了 `threshold` 和 `edgeitems` 选项。
- en: These options could previously be controlled using `np.set_printoptions`, but
    now can be changed on a per-call basis as arguments to `np.array2string`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项以前可以使用 `np.set_printoptions` 进行控制, 但现在可以作为参数传递给 `np.array2string` 来进行单独设置。
- en: '`concatenate` and `stack` gained an `out` argument'
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`concatenate` 和 `stack` 新增了 `out` 参数。'
- en: A preallocated buffer of the desired dtype can now be used for the output of
    these functions.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用预先分配的所需数据类型的缓冲区作为这些函数的输出。
- en: Support for PGI flang compiler on Windows
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持在 Windows 上使用 PGI flang 编译器。
- en: The PGI flang compiler is a Fortran front end for LLVM released by NVIDIA under
    the Apache 2 license. It can be invoked by
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 'PGI flang 编译器是 NVIDIA 发布的 Apache 2 许可的 LLVM 的 Fortran 前端。它可以通过以下方式调用:'
- en: '[PRE14]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There is little experience with this new compiler, so any feedback from people
    using it will be appreciated.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个新编译器还缺乏经验, 所以欢迎使用它的人提供反馈。
- en: Improvements
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Numerator degrees of freedom in `random.noncentral_f` need only be positive.
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`random.noncentral_f` 中的分子自由度只需为正值。'
- en: Prior to NumPy 1.14.0, the numerator degrees of freedom needed to be > 1, but
    the distribution is valid for values > 0, which is the new requirement.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.14.0 之前, 分子自由度需要 > 1, 但该分布对 > 0 的值有效, 这是新的要求。
- en: The GIL is released for all `np.einsum` variations
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为所有 `np.einsum` 变体释放了 GIL。
- en: Some specific loop structures which have an accelerated loop version did not
    release the GIL prior to NumPy 1.14.0\. This oversight has been fixed.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.14.0 之前, 一些具有加速循环版本的特定循环结构未能释放 GIL。这一疏忽已得到修复。
- en: The *np.einsum* function will use BLAS when possible and optimize by default
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.einsum* 函数在可能时将使用 BLAS, 并默认进行优化。'
- en: The `np.einsum` function will now call `np.tensordot` when appropriate. Because
    `np.tensordot` uses BLAS when possible, that will speed up execution. By default,
    `np.einsum` will also attempt optimization as the overhead is small relative to
    the potential improvement in speed.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.einsum`函数现在在适当时将调用`np.tensordot`。因为`np.tensordot`在可能时使用BLAS，这将加快执行速度。默认情况下，`np.einsum`还将尝试优化，因为开销相对较小，相对于速度的潜在改进。'
- en: '`f2py` now handles arrays of dimension 0'
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`f2py`现在处理0维度数组'
- en: '`f2py` now allows for the allocation of arrays of dimension 0\. This allows
    for more consistent handling of corner cases downstream.'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`f2py`现在允许分配0维度数组。这允许更一致地处理下游的边界情况。'
- en: '`numpy.distutils` supports using MSVC and mingw64-gfortran together'
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`支持在MSVC和mingw64-gfortran上一起使用'
- en: Numpy distutils now supports using Mingw64 gfortran and MSVC compilers together.
    This enables the production of Python extension modules on Windows containing
    Fortran code while retaining compatibility with the binaries distributed by Python.org.
    Not all use cases are supported, but most common ways to wrap Fortran for Python
    are functional.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy distutils现在支持在一起使用Mingw64 gfortran和MSVC编译器。这使得在Windows上产生包含Fortran代码的Python扩展模块并保留与由Python.org分发的二进制文件兼容性成为可能。并非所有用例都受支持，但大多数用于为Python包装Fortran的常见方法都是可用的。
- en: Compilation in this mode is usually enabled automatically, and can be selected
    via the `--fcompiler` and `--compiler` options to `setup.py`. Moreover, linking
    Fortran codes to static OpenBLAS is supported; by default a gfortran compatible
    static archive `openblas.a` is looked for.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下通常会自动启用编译，并可以通过`setup.py`的`--fcompiler`和`--compiler`选项进行选择。此外，支持将Fortran代码链接到静态OpenBLAS；默认情况下，将搜索gfortran兼容的静态存档`openblas.a`。
- en: '`np.linalg.pinv` now works on stacked matrices'
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg.pinv`现在在堆叠矩阵上工作'
- en: Previously it was limited to a single 2d array.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 以前仅限于单个2d数组。
- en: '`numpy.save` aligns data to 64 bytes instead of 16'
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.save`将数据对齐到64字节，而不是16字节。'
- en: Saving NumPy arrays in the `npy` format with `numpy.save` inserts padding before
    the array data to align it at 64 bytes. Previously this was only 16 bytes (and
    sometimes less due to a bug in the code for version 2). Now the alignment is 64
    bytes, which matches the widest SIMD instruction set commonly available, and is
    also the most common cache line size. This makes `npy` files easier to use in
    programs which open them with `mmap`, especially on Linux where an `mmap` offset
    must be a multiple of the page size.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy.save`以`npy`格式保存NumPy数组会在数组数据之前插入填充以将其对齐到64字节。以前只有16字节（有时由于版本2中代码中的错误而少）。现在对齐是64字节，与最常见的SIMD指令集匹配，并且是最常见的缓存行大小。这使`npy`文件在使用`mmap`打开它们的程序中更容易使用，特别是在Linux上，其中`mmap`的偏移量必须是页大小的倍数。
- en: NPZ files now can be written without using temporary files
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以在不使用临时文件的情况下写入NPZ文件
- en: In Python 3.6+ `numpy.savez` and `numpy.savez_compressed` now write directly
    to a ZIP file, without creating intermediate temporary files.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.6+中，`numpy.savez`和`numpy.savez_compressed`现在直接写入ZIP文件，而不创建中间临时文件。
- en: Better support for empty structured and string types
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好地支持空的结构化和字符串类型
- en: 'Structured types can contain zero fields, and string dtypes can contain zero
    characters. Zero-length strings still cannot be created directly, and must be
    constructed through structured dtypes:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化类型可以不包含任何字段，字符串dtype可以包含零个字符。仍然无法直接创建零长度的字符串，必须通过结构化dtype构造：
- en: '[PRE15]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It was always possible to work with these, but the following operations are
    now supported for these arrays:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 以前就可以使用这些，但现在对这些数组支持以下操作：
- en: '*arr.sort()*'
  id: totrans-433
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.sort()*'
- en: ''
  id: totrans-434
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-435
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.view(bytes)*'
  id: totrans-436
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.view(bytes)*'
- en: ''
  id: totrans-437
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-438
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.resize(…)*'
  id: totrans-439
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.resize(…)*'
- en: ''
  id: totrans-440
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-441
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*pickle.dumps(arr)*'
  id: totrans-442
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*pickle.dumps(arr)*'
- en: Support for `decimal.Decimal` in `np.lib.financial`
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持在`np.lib.financial`中使用`decimal.Decimal`
- en: Unless otherwise stated all functions within the `financial` package now support
    using the `decimal.Decimal` built-in type.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，`financial`包中的所有函数现在都支持使用`decimal.Decimal`内置类型。
- en: Float printing now uses “dragon4” algorithm for shortest decimal representation
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数打印现在使用“dragon4”算法来进行最短的十进制表示
- en: The `str` and `repr` of floating-point values (16, 32, 64 and 128 bit) are now
    printed to give the shortest decimal representation which uniquely identifies
    the value from others of the same type. Previously this was only true for `float64`
    values. The remaining float types will now often be shorter than in numpy 1.13\.
    Arrays printed in scientific notation now also use the shortest scientific representation,
    instead of fixed precision as before.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点值（16、32、64和128位）的`str`和`repr`现在打印出最短的十进制表示，可以唯一标识该值与相同类型的其他值不同。以前，只有对于`float64`值才是真的。现在科学表示法中的数组也使用最短的科学表示法，而不是以前的固定精度。
- en: Additionally, the *str* of float scalars scalars will no longer be truncated
    in python2, unlike python2 *float`s. `np.double* scalars now have a `str` and
    `repr` identical to that of a python3 float.
  id: totrans-447
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，在python2中，浮点标量的*str*不再被截断，与python3之间不同。`np.double`标量现在有一个与python3浮点相同的`str`和`repr`。
- en: New functions `np.format_float_scientific` and `np.format_float_positional`
    are provided to generate these decimal representations.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了新函数`np.format_float_scientific`和`np.format_float_positional`来生成这些十进制表示。
- en: A new option `floatmode` has been added to `np.set_printoptions` and `np.array2string`,
    which gives control over uniqueness and rounding of printed elements in an array.
    The new default is `floatmode='maxprec'` with `precision=8`, which will print
    at most 8 fractional digits, or fewer if an element can be uniquely represented
    with fewer. A useful new mode is `floatmode="unique"`, which will output enough
    digits to specify the array elements uniquely.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在`np.set_printoptions`和`np.array2string`中添加了一个新选项`floatmode`，它可以控制数组中打印元素的唯一性和舍入。新的默认方式是`floatmode='maxprec'`，精度为8，这样将最多打印8位小数，或者如果一个元素可以被较少的位数唯一表示，则打印更少。一个有用的新模式是`floatmode="unique"`，它将输出足够的位数来唯一指定数组元素。
- en: Numpy complex-floating-scalars with values like `inf*j` or `nan*j` now print
    as `infj` and `nanj`, like the pure-python `complex` type.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 像`inf*j`或`nan*j`这样的Numpy复杂浮点标量现在以`infj`和`nanj`打印，就像纯python`complex`类型一样。
- en: The `FloatFormat` and `LongFloatFormat` classes are deprecated and should both
    be replaced by `FloatingFormat`. Similarly `ComplexFormat` and `LongComplexFormat`
    should be replaced by `ComplexFloatingFormat`.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`FloatFormat`和`LongFloatFormat`类已经被弃用，应该都被`FloatingFormat`替换。同样，`ComplexFormat`和`LongComplexFormat`应该被替换为`ComplexFloatingFormat`。'
- en: '`void` datatype elements are now printed in hex notation'
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void`数据类型元素现在以十六进制表示'
- en: A hex representation compatible with the python `bytes` type is now printed
    for unstructured `np.void` elements, e.g., `V4` datatype. Previously, in python2
    the raw void data of the element was printed to stdout, or in python3 the integer
    byte values were shown.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 与python `bytes`类型兼容的十六进制表示现在可以用于非结构化`np.void`元素，例如，`V4`数据类型。在python2中，元素的原始void数据会打印到stdout，或者在python3中，整数字节值会显示。
- en: printing style for `void` datatypes is now independently customizable
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void`数据类型的打印样式现在可以独立自定义'
- en: The printing style of `np.void` arrays is now independently customizable using
    the `formatter` argument to `np.set_printoptions`, using the `'void'` key, instead
    of the catch-all `numpystr` key as before.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.void`数组的打印样式现在可以独立使用`np.set_printoptions`的`formatter`参数进行自定义，而不是以前的`numpystr`键。'
- en: Reduced memory usage of `np.loadtxt`
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少了`np.loadtxt`的内存使用
- en: '`np.loadtxt` now reads files in chunks instead of all at once which decreases
    its memory usage significantly for large files.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在分批次读取文件，而不是一次性读取，这显著减少了它对大文件的内存使用。'
- en: Numerator degrees of freedom in `random.noncentral_f` need only be positive.
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`random.noncentral_f`中，分子自由度只需要是正的。
- en: Prior to NumPy 1.14.0, the numerator degrees of freedom needed to be > 1, but
    the distribution is valid for values > 0, which is the new requirement.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.14.0之前，分子自由度需要大于1，但分布对大于0的值有效，这是新的要求。
- en: The GIL is released for all `np.einsum` variations
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所有`np.einsum`变体都释放了GIL
- en: Some specific loop structures which have an accelerated loop version did not
    release the GIL prior to NumPy 1.14.0\. This oversight has been fixed.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.14.0之前，一些具有加速循环版本的特定循环结构在释放GIL之前不会释放。这个疏忽已经修复。
- en: The *np.einsum* function will use BLAS when possible and optimize by default
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.einsum*函数在可能的情况下将使用BLAS，并默认进行优化'
- en: The `np.einsum` function will now call `np.tensordot` when appropriate. Because
    `np.tensordot` uses BLAS when possible, that will speed up execution. By default,
    `np.einsum` will also attempt optimization as the overhead is small relative to
    the potential improvement in speed.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '当合适时，`np.einsum` 函数现在将调用 `np.tensordot`。由于 `np.tensordot` 可以在可能的情况下使用 BLAS，因此将加快执行速度。默认情况下，`np.einsum`
    还会尝试优化，因为开销相对较小，相对于速度的潜在提升来说。 '
- en: '`f2py` now handles arrays of dimension 0'
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`f2py` 现在可以处理零维数组'
- en: '`f2py` now allows for the allocation of arrays of dimension 0\. This allows
    for more consistent handling of corner cases downstream.'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`f2py` 现在允许分配零维数组。这样可以更一致地处理下游的边缘情况。'
- en: '`numpy.distutils` supports using MSVC and mingw64-gfortran together'
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 支持同时使用 MSVC 和 mingw64-gfortran'
- en: Numpy distutils now supports using Mingw64 gfortran and MSVC compilers together.
    This enables the production of Python extension modules on Windows containing
    Fortran code while retaining compatibility with the binaries distributed by Python.org.
    Not all use cases are supported, but most common ways to wrap Fortran for Python
    are functional.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy distutils 现可同时使用 Mingw64 gfortran 和 MSVC 编译器。这样可以在 Windows 上生产包含 Fortran
    代码的 Python 扩展模块，同时保留与 Python.org 发行的二进制文件的兼容性。不支持所有用例，但大多数用于在 Python 中包装 Fortran
    的常见方式是有效的。
- en: Compilation in this mode is usually enabled automatically, and can be selected
    via the `--fcompiler` and `--compiler` options to `setup.py`. Moreover, linking
    Fortran codes to static OpenBLAS is supported; by default a gfortran compatible
    static archive `openblas.a` is looked for.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式下通常会自动启用编译，并可以通过 `setup.py` 的 `--fcompiler` 和 `--compiler` 选项进行选择。此外，支持将
    Fortran 代码链接到静态 OpenBLAS；默认情况下会查找 gfortran 兼容的静态存档 `openblas.a`。
- en: '`np.linalg.pinv` now works on stacked matrices'
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg.pinv` 现在可用于堆叠矩阵'
- en: Previously it was limited to a single 2d array.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 以前仅限于单个二维数组。
- en: '`numpy.save` aligns data to 64 bytes instead of 16'
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.save` 将数据对齐到 64 字节，而不是 16'
- en: Saving NumPy arrays in the `npy` format with `numpy.save` inserts padding before
    the array data to align it at 64 bytes. Previously this was only 16 bytes (and
    sometimes less due to a bug in the code for version 2). Now the alignment is 64
    bytes, which matches the widest SIMD instruction set commonly available, and is
    also the most common cache line size. This makes `npy` files easier to use in
    programs which open them with `mmap`, especially on Linux where an `mmap` offset
    must be a multiple of the page size.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `numpy.save` 将 NumPy 数组保存为 `npy` 格式会在数组数据之前插入填充，以使其对齐到 64 字节。以前只有 16 字节（由于版本
    2 中的代码中存在错误，有时会更少）。现在对齐是 64 字节，与常见的 SIMD 指令集相匹配，并且也是最常见的缓存行大小。这使得在程序上使用 `mmap`
    打开它们更容易，特别是在 Linux 上，其中 `mmap` 偏移量必须是页面大小的倍数。
- en: NPZ files now can be written without using temporary files
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以在不使用临时文件的情况下写入 NPZ 文件
- en: In Python 3.6+ `numpy.savez` and `numpy.savez_compressed` now write directly
    to a ZIP file, without creating intermediate temporary files.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.6+ 中，`numpy.savez` 和 `numpy.savez_compressed` 现在直接写入 ZIP 文件，而不创建中间临时文件。
- en: Better support for empty structured and string types
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好地支持空结构化和字符串类型
- en: 'Structured types can contain zero fields, and string dtypes can contain zero
    characters. Zero-length strings still cannot be created directly, and must be
    constructed through structured dtypes:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化类型可以不包含任何字段，字符串数据类型可以不包含任何字符。仍然无法直接创建长度为零的字符串，必须通过结构化数据类型构建：
- en: '[PRE16]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It was always possible to work with these, but the following operations are
    now supported for these arrays:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 以前总是可以处理这些，但现在为这些数组支持以下操作：
- en: '*arr.sort()*'
  id: totrans-479
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.sort()*'
- en: ''
  id: totrans-480
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-481
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.view(bytes)*'
  id: totrans-482
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.view(bytes)*'
- en: ''
  id: totrans-483
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-484
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*arr.resize(…)*'
  id: totrans-485
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*arr.resize(…)*'
- en: ''
  id: totrans-486
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-487
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*pickle.dumps(arr)*'
  id: totrans-488
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*pickle.dumps(arr)*'
- en: Support for `decimal.Decimal` in `np.lib.financial`
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `np.lib.financial` 中支持 `decimal.Decimal`
- en: Unless otherwise stated all functions within the `financial` package now support
    using the `decimal.Decimal` built-in type.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，`financial` 包中的所有函数现在都支持使用内置类型 `decimal.Decimal`。
- en: Float printing now uses “dragon4” algorithm for shortest decimal representation
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数打印现在使用“dragon4”算法进行最短十进制表示
- en: The `str` and `repr` of floating-point values (16, 32, 64 and 128 bit) are now
    printed to give the shortest decimal representation which uniquely identifies
    the value from others of the same type. Previously this was only true for `float64`
    values. The remaining float types will now often be shorter than in numpy 1.13\.
    Arrays printed in scientific notation now also use the shortest scientific representation,
    instead of fixed precision as before.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点值（16、32、64 和 128 位）的 `str` 和 `repr` 现在被打印为给出最短的十进制表示唯一标识该值与相同类型的其他值的值。以前这仅对
    `float64` 值成立。剩余的浮点类型现在通常会比 numpy 1.13 中更短。以科学计数法打印的数组现在也使用最短的科学表示形式，而不是之前的固定精度。
- en: Additionally, the *str* of float scalars scalars will no longer be truncated
    in python2, unlike python2 *float`s. `np.double* scalars now have a `str` and
    `repr` identical to that of a python3 float.
  id: totrans-493
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，在 python2 中，浮点标量的 *str* 不再被截断，不像 python2 中的 *float*。现在，`np.double` 标量的 `str`
    和 `repr` 与 python3 中的 float 完全相同。
- en: New functions `np.format_float_scientific` and `np.format_float_positional`
    are provided to generate these decimal representations.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 新的函数 `np.format_float_scientific` 和 `np.format_float_positional` 已经提供用于生成这些十进制表示。
- en: A new option `floatmode` has been added to `np.set_printoptions` and `np.array2string`,
    which gives control over uniqueness and rounding of printed elements in an array.
    The new default is `floatmode='maxprec'` with `precision=8`, which will print
    at most 8 fractional digits, or fewer if an element can be uniquely represented
    with fewer. A useful new mode is `floatmode="unique"`, which will output enough
    digits to specify the array elements uniquely.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.set_printoptions` 和 `np.array2string` 现在添加了一个新选项 `floatmode`，用于控制数组中打印元素的唯一性和四舍五入。新的默认值是
    `floatmode=''maxprec''`，精度为 8，将最多打印 8 位小数，或者更少如果一个元素可以用更少的位数唯一表示。一个有用的新模式是 `floatmode="unique"`，它将输出足够位数以唯一指定数组元素。'
- en: Numpy complex-floating-scalars with values like `inf*j` or `nan*j` now print
    as `infj` and `nanj`, like the pure-python `complex` type.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 复合浮点标量的值，例如 `inf*j` 或 `nan*j`，现在打印为`infj` 和 `nanj`，类似于纯 Python `complex`
    类型。
- en: The `FloatFormat` and `LongFloatFormat` classes are deprecated and should both
    be replaced by `FloatingFormat`. Similarly `ComplexFormat` and `LongComplexFormat`
    should be replaced by `ComplexFloatingFormat`.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`FloatFormat` 和 `LongFloatFormat` 类已被弃用，应该都替换为 `FloatingFormat`。类似地，`ComplexFormat`
    和 `LongComplexFormat` 应该被替换为 `ComplexFloatingFormat`。'
- en: '`void` datatype elements are now printed in hex notation'
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void` 数据类型元素现在以十六进制表示打印。'
- en: A hex representation compatible with the python `bytes` type is now printed
    for unstructured `np.void` elements, e.g., `V4` datatype. Previously, in python2
    the raw void data of the element was printed to stdout, or in python3 the integer
    byte values were shown.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于非结构化的 `np.void` 元素（例如 `V4` 数据类型），会打印与 Python `bytes` 类型兼容的十六进制表示。以前，在 python2
    中，元素的原始 void 数据会打印到 stdout，或者在 python3 中会显示整数字节值。
- en: printing style for `void` datatypes is now independently customizable
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`void` 数据类型的打印样式现在可以独立自定义'
- en: The printing style of `np.void` arrays is now independently customizable using
    the `formatter` argument to `np.set_printoptions`, using the `'void'` key, instead
    of the catch-all `numpystr` key as before.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `np.set_printoptions` 的 `formatter` 参数，现在可以独立自定义 `np.void` 数组的打印样式，使用 `'void'`
    键，而不像以前的 `numpystr` 键。
- en: Reduced memory usage of `np.loadtxt`
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少了 `np.loadtxt` 的内存使用。
- en: '`np.loadtxt` now reads files in chunks instead of all at once which decreases
    its memory usage significantly for large files.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.loadtxt` 现在逐块读取文件而不是一次性读取，这显著减少了大文件的内存使用。'
- en: Changes
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: Multiple-field indexing/assignment of structured arrays
  id: totrans-505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引/赋值
- en: The indexing and assignment of structured arrays with multiple fields has changed
    in a number of ways, as warned about in previous releases.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多个字段的结构化数组的索引和赋值在许多方面已经发生了变化，正如之前发布时警告的那样。
- en: First, indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    have extra padding bytes corresponding to intervening fields in the original array,
    unlike the copy in 1.13, which will affect code such as `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对具有多个字段的结构化数组进行索引，例如 `arr[['f1', 'f3']]`，会返回原始数组的视图而不是副本。返回的视图会有额外的填充字节对应于原始数组中的插入字段，不像
    1.13 中的副本那样，这将会影响 `arr[['f1', 'f3']].view(newdtype)` 这样的代码。
- en: Second, assignment between structured arrays will now occur “by position” instead
    of “by field name”. The Nth field of the destination will be set to the Nth field
    of the source regardless of field name, unlike in numpy versions 1.6 to 1.13 in
    which fields in the destination array were set to the identically-named field
    in the source array or to 0 if the source did not have a field.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，结构化数组之间的赋值现在将“按位置”而不是“按字段名”进行。目标的第N个字段将设置为源的第N个字段，而不管字段名如何，与numpy版本1.6到1.13中在目标数组中设置字段不同，这些字段设置为源数组中的同名字段，或者如果源没有字段，则设置为0。
- en: Correspondingly, the order of fields in a structured dtypes now matters when
    computing dtype equality. For example, with the dtypes
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，当计算dtype相等性时，结构化dtype中字段的顺序现在很重要。例如，对于dtype
- en: '[PRE17]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'the expression `x == y` will now return `False`, unlike before. This makes
    dictionary based dtype specifications like `dtype({''a'': (''i4'', 0), ''b'':
    (''f4'', 4)})` dangerous in python < 3.6 since dict key order is not preserved
    in those versions.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '表达式`x == y`现在将返回`False`，与以前不同。这使得基于字典的dtype规范（如`dtype({''a'': (''i4'', 0),
    ''b'': (''f4'', 4)})`）在Python < 3.6中变得危险，因为在这些版本中不保留字典键的顺序。'
- en: Assignment from a structured array to a boolean array now raises a ValueError,
    unlike in 1.13, where it always set the destination elements to `True`.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构化数组到布尔数组的赋值现在会引发ValueError，与1.13中不同，那时它总是将目标元素设置为`True`。
- en: Assignment from structured array with more than one field to a non-structured
    array now raises a ValueError. In 1.13 this copied just the first field of the
    source to the destination.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 从具有多个字段的结构化数组到非结构化数组的赋值现在会引发ValueError。在1.13中，这仅复制源的第一个字段到目标。
- en: Using field “titles” in multiple-field indexing is now disallowed, as is repeating
    a field name in a multiple-field index.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许在多字段索引中使用字段“标题”，也不允许在多字段索引中重复字段名。
- en: The documentation for structured arrays in the user guide has been significantly
    updated to reflect these changes.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 用户指南中关于结构化数组的文档已经进行了显著更新，以反映这些变化。
- en: Integer and Void scalars are now unaffected by `np.set_string_function`
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数和Void标量现在不受`np.set_string_function`的影响。
- en: Previously, unlike most other numpy scalars, the `str` and `repr` of integer
    and void scalars could be controlled by `np.set_string_function`. This is no longer
    possible.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，与大多数其他numpy标量不同，整数和Void标量的`str`和`repr`可以由`np.set_string_function`控制。这已不再可能。
- en: 0d array printing changed, `style` arg of array2string deprecated
  id: totrans-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 0维数组打印已更改，已弃用array2string的style参数。
- en: Previously the `str` and `repr` of 0d arrays had idiosyncratic implementations
    which returned `str(a.item())` and `'array(' + repr(a.item()) + ')'` respectively
    for 0d array `a`, unlike both numpy scalars and higher dimension ndarrays.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，0维数组的`str`和`repr`具有特殊的实现，分别返回`str(a.item())`和`'array(' + repr(a.item()) +
    ')'`，对于0维数组`a`，与numpy标量和更高维度的ndarray不同。
- en: Now, the `str` of a 0d array acts like a numpy scalar using `str(a[()])` and
    the `repr` acts like higher dimension arrays using `formatter(a[()])`, where `formatter`
    can be specified using `np.set_printoptions`. The `style` argument of `np.array2string`
    is deprecated.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，0维数组的`str`的行为类似于使用`str(a[()])`的numpy标量，而`repr`的行为类似于使用`formatter(a[()])`的更高维数组，其中`formatter`可以使用`np.set_printoptions`指定。`np.array2string`的`style`参数已弃用。
- en: This new behavior is disabled in 1.13 legacy printing mode, see compatibility
    notes above.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 此新行为在1.13遗留打印模式中已禁用，请参见上述兼容性说明。
- en: Seeding `RandomState` using an array requires a 1-d array
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数组对`RandomState`进行种子设置需要一个一维数组。
- en: '`RandomState` previously would accept empty arrays or arrays with 2 or more
    dimensions, which resulted in either a failure to seed (empty arrays) or for some
    of the passed values to be ignored when setting the seed.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`RandomState`以前将接受空数组或数组维度为2或更多的数组，这导致无法进行种子设置（空数组）或在设置种子时忽略一些传递的值。'
- en: '`MaskedArray` objects show a more useful `repr`'
  id: totrans-524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray`对象显示更有用的`repr`。'
- en: The `repr` of a `MaskedArray` is now closer to the python code that would produce
    it, with arrays now being shown with commas and dtypes. Like the other formatting
    changes, this can be disabled with the 1.13 legacy printing mode in order to help
    transition doctests.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaskedArray`的`repr`现在更接近于生成它的python代码，现在用逗号和dtype显示数组。与其他格式更改一样，可以通过1.13遗留打印模式来禁用此功能，以帮助过渡doctests。'
- en: The `repr` of `np.polynomial` classes is more explicit
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.polynomial`类的`repr`更加明确。'
- en: 'It now shows the domain and window parameters as keyword arguments to make
    them more clear:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它将域和窗口参数显示为关键字参数，以使它们更清晰：
- en: '[PRE18]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Multiple-field indexing/assignment of structured arrays
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引/分配
- en: The indexing and assignment of structured arrays with multiple fields has changed
    in a number of ways, as warned about in previous releases.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引和分配在许多方面已经发生了变化，如之前版本中所警告的那样。
- en: First, indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    have extra padding bytes corresponding to intervening fields in the original array,
    unlike the copy in 1.13, which will affect code such as `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用多个字段对结构化数组进行索引，例如，`arr[['f1', 'f3']]`，返回的是原始数组的视图而不是副本。返回的视图将具有原始数组中介入字段对应的额外填充字节，与1.13版本中的副本不同，这将影响到如`arr[['f1',
    'f3']].view(newdtype)`的代码。
- en: Second, assignment between structured arrays will now occur “by position” instead
    of “by field name”. The Nth field of the destination will be set to the Nth field
    of the source regardless of field name, unlike in numpy versions 1.6 to 1.13 in
    which fields in the destination array were set to the identically-named field
    in the source array or to 0 if the source did not have a field.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，现在在结构化数组之间进行分配将会“按位置”而不是“按字段名”进行。目标的第N个字段将设置为源的第N个字段，而不管字段名，与numpy版本1.6到1.13中，在目标数组中将字段设置为源数组中的同名字段或者如果源没有字段则设置为0的情况不同。
- en: Correspondingly, the order of fields in a structured dtypes now matters when
    computing dtype equality. For example, with the dtypes
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，在计算dtype相等性时，结构化dtype中字段的顺序现在很重要。例如，对于dtypes
- en: '[PRE19]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'the expression `x == y` will now return `False`, unlike before. This makes
    dictionary based dtype specifications like `dtype({''a'': (''i4'', 0), ''b'':
    (''f4'', 4)})` dangerous in python < 3.6 since dict key order is not preserved
    in those versions.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '表达式`x == y`现在会返回`False`，与以前不同。这使得在python < 3.6中基于字典的dtype规范（如`dtype({''a'':
    (''i4'', 0), ''b'': (''f4'', 4)})`）是危险的，因为这些版本中不保留字典键顺序。'
- en: Assignment from a structured array to a boolean array now raises a ValueError,
    unlike in 1.13, where it always set the destination elements to `True`.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构化数组分配到布尔数组现在引发ValueError，与1.13版本不同，1.13版本总是将目标元素设置为`True`。
- en: Assignment from structured array with more than one field to a non-structured
    array now raises a ValueError. In 1.13 this copied just the first field of the
    source to the destination.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 从具有多个字段的结构化数组分配到非结构化数组现在会引发ValueError。在1.13版本中，仅复制了源数组的第一个字段到目标数组。
- en: Using field “titles” in multiple-field indexing is now disallowed, as is repeating
    a field name in a multiple-field index.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 禁止在多字段索引中使用字段“titles”，也禁止在多字段索引中重复字段名。
- en: The documentation for structured arrays in the user guide has been significantly
    updated to reflect these changes.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 用户指南中关于结构化数组的文档已经显著更新以反映这些更改。
- en: Integer and Void scalars are now unaffected by `np.set_string_function`
  id: totrans-540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数和Void标量现在不受`np.set_string_function`的影响。
- en: Previously, unlike most other numpy scalars, the `str` and `repr` of integer
    and void scalars could be controlled by `np.set_string_function`. This is no longer
    possible.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，与大多数其他numpy标量不同，整数和Void标量的`str`和`repr`可以通过`np.set_string_function`来控制。现在不再可能。
- en: 0d array printing changed, `style` arg of array2string deprecated
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 0维数组打印已更改，已弃用array2string的style(arg)
- en: Previously the `str` and `repr` of 0d arrays had idiosyncratic implementations
    which returned `str(a.item())` and `'array(' + repr(a.item()) + ')'` respectively
    for 0d array `a`, unlike both numpy scalars and higher dimension ndarrays.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，0维数组的`str`和`repr`有着独特的实现，分别对于0维数组`a`返回`str(a.item())`和`'array(' + repr(a.item())
    + ')'`，与numpy标量和更高维度ndarrays不同。
- en: Now, the `str` of a 0d array acts like a numpy scalar using `str(a[()])` and
    the `repr` acts like higher dimension arrays using `formatter(a[()])`, where `formatter`
    can be specified using `np.set_printoptions`. The `style` argument of `np.array2string`
    is deprecated.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，0维数组的`str`操作类似于使用`str(a[()])`的numpy标量，并且`repr`操作类似于使用`formatter(a[()])`的更高维度数组，其中`formatter`可以使用`np.set_printoptions`来指定。`np.array2string`的`style`参数已经弃用。
- en: This new behavior is disabled in 1.13 legacy printing mode, see compatibility
    notes above.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新行为在1.13版本的遗留打印模式中被禁用，请参考上面的兼容性注意事项。
- en: Seeding `RandomState` using an array requires a 1-d array
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数组对`RandomState`进行种子化现在需要一个1维数组。
- en: '`RandomState` previously would accept empty arrays or arrays with 2 or more
    dimensions, which resulted in either a failure to seed (empty arrays) or for some
    of the passed values to be ignored when setting the seed.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，`RandomState`将接受空数组或具有2个或更多维度的数组，这导致无法设置种子（空数组）或在设置种子时忽略一些传递的值。
- en: '`MaskedArray` objects show a more useful `repr`'
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray`对象显示更有用的`repr`'
- en: The `repr` of a `MaskedArray` is now closer to the python code that would produce
    it, with arrays now being shown with commas and dtypes. Like the other formatting
    changes, this can be disabled with the 1.13 legacy printing mode in order to help
    transition doctests.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaskedArray`的`repr`现在更接近于生成它的Python代码，数组现在以逗号和数据类型显示。与其他格式更改一样，可以通过1.13版本的遗留打印模式禁用此功能，以帮助过渡doctests。'
- en: The `repr` of `np.polynomial` classes is more explicit
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.polynomial`类的`repr`更加明确'
- en: 'It now shows the domain and window parameters as keyword arguments to make
    them more clear:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 现在显示域和窗口参数作为关键字参数，以使它们更清晰：
- en: '[PRE20]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
