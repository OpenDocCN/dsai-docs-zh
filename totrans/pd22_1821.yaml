- en: pandas.api.extensions.ExtensionDtype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.api.extensions.ExtensionDtype.html](https://pandas.pydata.org/docs/reference/api/pandas.api.extensions.ExtensionDtype.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A custom data type, to be paired with an ExtensionArray.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`extensions.register_extension_dtype`'
  prefs: []
  type: TYPE_NORMAL
- en: Register an ExtensionType with pandas as class decorator.
  prefs: []
  type: TYPE_NORMAL
- en: '`extensions.ExtensionArray`'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract base class for custom 1-D array types.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface includes the following abstract methods that must be implemented
    by subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: construct_array_type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following attributes and methods influence the behavior of the dtype in
    pandas operations
  prefs: []
  type: TYPE_NORMAL
- en: _is_numeric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _is_boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: _get_common_dtype
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The na_value class attribute can be used to set the default NA value for this
    type. `numpy.nan` is used by default.
  prefs: []
  type: TYPE_NORMAL
- en: ExtensionDtypes are required to be hashable. The base class provides a default
    implementation, which relies on the `_metadata` class attribute. `_metadata` should
    be a tuple containing the strings that define your data type. For example, with
    `PeriodDtype` that’s the `freq` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you have a parametrized dtype you should set the ``_metadata`` class property**.'
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, the attributes in `_metadata` will match the parameters to your `ExtensionDtype.__init__`
    (if any). If any of the attributes in `_metadata` don’t implement the standard
    `__eq__` or `__hash__`, the default implementations here will not work.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For interaction with Apache Arrow (pyarrow), a `__from_arrow__` method can
    be implemented: this method receives a pyarrow Array or ChunkedArray as only argument
    and is expected to return the appropriate pandas ExtensionArray for this dtype
    and the passed values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This class does not inherit from ‘abc.ABCMeta’ for performance reasons. Methods
    and properties required by the interface raise `pandas.errors.AbstractMethodError`
    and no `register` method is provided for registering virtual subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `index_class` | The Index subclass to return from Index.__new__ when this
    dtype is encountered. |'
  prefs: []
  type: TYPE_TB
- en: '| `kind` | A character code (one of ''biufcmMOSUV''), default ''O'' |'
  prefs: []
  type: TYPE_TB
- en: '| `na_value` | Default NA value to use for this type. |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | A string identifying the data type. |'
  prefs: []
  type: TYPE_TB
- en: '| `names` | Ordered list of field names, or None if there are no fields. |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | The scalar type for the array, e.g. `int`. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| `construct_array_type`() | Return the array type associated with this dtype.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `construct_from_string`(string) | Construct this type from a string. |'
  prefs: []
  type: TYPE_TB
- en: '| `empty`(shape) | Construct an ExtensionArray of this dtype with the given
    shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `is_dtype`(dtype) | Check if we match ''dtype''. |'
  prefs: []
  type: TYPE_TB
