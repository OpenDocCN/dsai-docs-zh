- en: Toolchain Roadmap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具链路线图
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/dev/toolchain.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/toolchain.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/dev/toolchain.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/toolchain.html)
- en: The use of the SciPy library requires (or optionally depends upon) several other
    libraries in order to operate, the main dependencies being Python and NumPy. It
    requires a larger collection of libraries and tools in order to build the library
    or to build the documentation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SciPy库需要（或者可选择依赖于）其他几个库才能正常运行，主要依赖是Python和NumPy。构建该库或构建文档需要更多的库和工具。
- en: Of course, the tooling and libraries are themselves not static. This document
    aims to provide a guide as to how SciPy’s use of these dynamic dependencies will
    proceed over time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，工具和库本身并非静态。本文档旨在指导SciPy如何随时间推移使用这些动态依赖项。
- en: SciPy aims to be compatible with a number of releases of its dependent libraries
    and tools. Forcing the user base to other components for upgrade for every release
    would greatly diminish the value of SciPy. However, maintaining backwards compatibility
    with very old tooling/libraries imposes limitations on which newer functionalities
    and capabilities can be incorporated. SciPy takes a somewhat conservative approach,
    maintaining compatibility with several major releases of Python and NumPy on the
    major platforms. (That may in and of itself impose further restrictions. See the
    C Compilers section for an example.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy旨在与其依赖库和工具的多个版本兼容。强迫用户基础为每个发布升级到其他组件会大大降低SciPy的价值。然而，与非常旧的工具/库保持向后兼容会限制能够整合的新功能和能力。SciPy采取了一种相对保守的方法，在主要平台上与Python和NumPy的几个主要发布兼容。（这本身可能会进一步限制。请参见C编译器部分的示例。）
- en: First and foremost, SciPy is a Python project, hence it requires a Python environment.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，SciPy是一个Python项目，因此需要Python环境。
- en: BLAS and LAPACK numerical libraries need to be installed.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLAS和LAPACK数值库需要安装。
- en: Compilers for C, C++, Fortran code are needed, as well as for Cython & Pythran
    (the latter is opt-out currently)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要C、C++、Fortran代码的编译器，以及Cython和Pythran（后者目前是选择性的退出）
- en: The Python environment needs the `NumPy` package to be installed.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python环境需要安装`NumPy`包。
- en: Testing requires the `pytest` and `hypothesis` Python packages.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试需要`pytest`和`hypothesis`Python包。
- en: Building the documentation requires the `matplotlib`, Sphinx and [MyST-NB](https://myst-nb.readthedocs.io/)
    packages along with PyData theme.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建文档需要`matplotlib`、Sphinx和[MyST-NB](https://myst-nb.readthedocs.io/)包以及PyData主题。
- en: The tooling used to build CPython has some implications for the tooling used
    in building SciPy. It also has implications for the examples used in the documentation
    (e.g., docstrings for functions), as these examples can only use functionality
    present in all supported configurations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建CPython的工具对构建SciPy的工具有一些影响。它还影响文档中使用的示例（例如，函数的文档字符串），因为这些示例只能使用所有支持的配置中存在的功能。
- en: Building SciPy
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建SciPy
- en: Python Versions
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python版本
- en: SciPy is compatible with several versions of Python. When dropping support for
    older Python versions, SciPy takes guidance from NEP 29 [[1]](#id33). Python 2.7
    support was dropped starting from SciPy 1.3.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy兼容多个版本的Python。在放弃对较旧Python版本的支持时，SciPy遵循NEP 29 [[1]](#id33)的指导。从SciPy 1.3开始，不再支持Python
    2.7。
- en: '| Date | Pythons supported |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 支持的Python版本 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2018 | Py2.7, Py3.4+ (SciPy 1.2.x is the last release to support Python 2.7)
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 2018 | Py2.7, Py3.4+（SciPy 1.2.x是最后一个支持Python 2.7的发布版本） |'
- en: '| 2019 | Py3.5+ (but Py2.7-specific code not removed) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 2019 | Py3.5+（但未移除Py2.7特定代码） |'
- en: '| 2020 | Py3.6+ (removal of Py2.7-specific code permitted) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 2020 | Py3.6+（允许移除Py2.7特定代码） |'
- en: '| 2021 | Py3.7+ |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 2021 | Py3.7+ |'
- en: '| 2022 | Py3.8+ |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 2022 | Py3.8+ |'
- en: NumPy
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy
- en: SciPy depends on NumPy but releases of SciPy are not tied to releases of NumPy.
    SciPy attempts to be compatible with at least the 4 previous releases of NumPy.
    In particular, SciPy cannot rely on features of just the latest NumPy, but needs
    to be written using what is common in all of those 4 releases [[2]](#id34).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy依赖于NumPy，但SciPy的发布与NumPy的发布没有直接关系。SciPy尝试与至少前4个NumPy版本兼容。特别地，SciPy不能仅仅依赖最新的NumPy功能，而是需要使用这4个版本中通用的功能来编写[[2]](#id34)。
- en: The table shows the NumPy versions suitable for each major Python version.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该表显示了适用于每个主要Python版本的NumPy版本。
- en: '| SciPy version | Python versions | NumPy versions |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| SciPy版本 | Python版本 | NumPy版本 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1.2 | 2.7, >=3.4, <=3.7 | >=1.8.2, <= 1.16.x |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 1.2 | 2.7, >=3.4, <=3.7 | >=1.8.2, <= 1.16.x |'
- en: '| 1.4 | >=3.5, <=3.8 | >=1.13.3, <= 1.17.3 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1.4 | >=3.5, <=3.8 | >=1.13.3, <= 1.17.3 |'
- en: '| 1.5 | >=3.6, <=3.9 | >=1.14.5, <= 1.19.3 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 1.5 | >=3.6, <=3.9 | >=1.14.5, <= 1.19.3 |'
- en: '| 1.6 | >=3.7, <=3.9 | >=1.16.5, <= 1.20.x |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 1.6 | >=3.7, <=3.9 | >=1.16.5, <= 1.20.x |'
- en: '| 1.7.0/1 | >=3.7, <3.10 | >=1.16.5, <1.23.0 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 1.7.0/1 | >=3.7, <3.10 | >=1.16.5, <1.23.0 |'
- en: '| 1.7.2/3 | >=3.7, <3.11 | >=1.16.5, <1.23.0 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 1.7.2/3 | >=3.7, <3.11 | >=1.16.5, <1.23.0 |'
- en: '| 1.8 | >=3.8, <3.11 | >=1.17.3, <1.24.0 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 1.8 | >=3.8, <3.11 | >=1.17.3, <1.24.0 |'
- en: '| 1.9.0/1 | >=3.8, <3.12 | >=1.18.5, <1.25.0 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 1.9.0/1 | >=3.8, <3.12 | >=1.18.5, <1.25.0 |'
- en: '| 1.9.2 | >=3.8, <3.12 | >=1.18.5, <1.26.0 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 1.9.2 | >=3.8, <3.12 | >=1.18.5, <1.26.0 |'
- en: '| 1.10 | >=3.8, <3.12 | >=1.19.5, <1.26.0 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 1.10 | >=3.8, <3.12 | >=1.19.5, <1.26.0 |'
- en: '| 1.11 | >=3.9, <3.12 | >=1.21.6, <1.27.0 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1.11 | >=3.9, <3.12 | >=1.21.6, <1.27.0 |'
- en: '| 1.12 | >=3.9, <3.13 | >=1.22.4, <2.0.0 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 1.12 | >=3.9, <3.13 | >=1.22.4, <2.0.0 |'
- en: In specific cases, such as a particular architecture, these requirements could
    vary. Please check the release notes [[3]](#id35) and the meta-package `oldest-supported-numpy`
    for more info [[4]](#id36).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定情况下，例如特定架构，这些要求可能会有所不同。请查看发布说明[[3]](#id35)和元包`oldest-supported-numpy`以获取更多信息[[4]](#id36)。
- en: Compilers
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译器
- en: Building SciPy requires compilers for C, C++, Fortran, as well as the python
    transpilers Cython and Pythran (the latter is an opt-out dependency starting from
    version 1.7.0).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SciPy需要C、C++、Fortran编译器以及Python转译器Cython和Pythran（后者是从版本1.7.0开始的可选依赖项）。
- en: To maintain compatibility with a large number of platforms & setups, especially
    where using the official wheels (or other distribution channels like Anaconda
    or conda-forge) is not possible, SciPy tries to keep compatibility with older
    compilers, on platforms that have not yet reached their official end-of-life.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持与大量平台和设置的兼容性，特别是在无法使用官方wheels（或其他分发渠道如Anaconda或conda-forge）的情况下，SciPy试图保持与旧编译器的兼容性，尚未达到官方生命周期结束的平台。
- en: 'As explained in more detail below, the current minimal compiler versions are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所述，当前的最小编译器版本为：
- en: '| Compiler | Default Platform (tested) | Secondary Platform (untested) | Minimal
    Version |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Compiler | 默认平台（已测试） | 次要平台（未测试） | 最小版本 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| GCC | Linux | AIX, Alpine Linux, OSX | GCC 8.x |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| GCC | Linux | AIX、Alpine Linux、OSX | GCC 8.x |'
- en: '| LLVM | OSX | Linux, FreeBSD, Windows | LLVM 10.x |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| LLVM | OSX | Linux, FreeBSD, Windows | LLVM 10.x |'
- en: '| MSVC | Windows |  | Visual Studio 2019 (vc142) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| MSVC | Windows |  | Visual Studio 2019 (vc142) |'
- en: Note that the lower bound for LLVM is not enforced. Older versions should work
    - as long as they support core (non-stdlib) C++17 -, but no version below LLVM
    12 is tested regularly during development. Please file an issue if you encounter
    a problem during compilation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，LLVM的下限并未强制执行。较旧版本应该可以工作 - 只要它们支持核心（非标准库）C++17 - 但在开发过程中没有测试LLVM 12以下的任何版本。如果在编译过程中遇到问题，请提交问题报告。
- en: Official Builds
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 官方构建
- en: 'Currently, SciPy wheels are being built as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，SciPy的wheel构建如下：
- en: '| Platform | CI Base Images [[5]](#id37) [[6]](#id38) [[7]](#id39) | Compilers
    | Comment |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 平台 | CI基础镜像[[5]](#id37) [[6]](#id38) [[7]](#id39) | 编译器 | 备注 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Linux x86 | `ubuntu-22.04` | GCC 10.2.1 | `cibuildwheel` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Linux x86 | `ubuntu-22.04` | GCC 10.2.1 | `cibuildwheel` |'
- en: '| Linux arm | `docker-builder-arm64` | GCC 11.3.0 | `cibuildwheel` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Linux arm | `docker-builder-arm64` | GCC 11.3.0 | `cibuildwheel` |'
- en: '| OSX x86 | `macOS-11` | clang-13/gfortran 11.3.0 | `cibuildwheel` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| OSX x86 | `macOS-11` | clang-13/gfortran 11.3.0 | `cibuildwheel` |'
- en: '| OSX arm | `macos-monterey-xcode:14` | clang-13.1.6/gfortran 12.1.0 | `cibuildwheel`
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| OSX arm | `macos-monterey-xcode:14` | clang-13.1.6/gfortran 12.1.0 | `cibuildwheel`
    |'
- en: '| Windows | `windows-2019` | GCC 10.3 (rtools) | `cibuildwheel` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Windows | `windows-2019` | GCC 10.3（rtools） | `cibuildwheel` |'
- en: Note that the OSX wheels additionally vendor gfortran 11.3.0 for x86_64, and
    gfortran 12.1.0 for arm64\. See `tools/wheels/cibw_before_build_macos.sh`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在OSX上，额外提供了gfortran 11.3.0用于x86_64，以及gfortran 12.1.0用于arm64。请参见`tools/wheels/cibw_before_build_macos.sh`。
- en: C Compilers
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: C编译器
- en: SciPy is compatible with most modern C compilers (in particular `clang`). Nowadays,
    there is reasonable support for recent C language standards across all relevant
    compilers, though this is very different from how things used to be. The following
    paragraphs primarily discuss the evolution of these constraints; readers who do
    not care about historical context can skip ahead to the table at the end.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy兼容大多数现代C编译器（特别是`clang`）。如今，所有相关编译器对最近的C语言标准都有合理的支持，尽管这与以往截然不同。以下段落主要讨论这些限制的演变；不关心历史背景的读者可以直接跳到末尾的表格。
- en: In the past, the most restrictive compiler on relevant platform in terms of
    C support was the Microsoft Visual C++ compiler & toolset (together known as MSVC)
    [[8]](#id40) [[9]](#id41). Up until Visual Studio 2013, each MSVC version came
    with an updated C Runtime (CRT) library that was incompatible with the previous
    ones.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，相关平台上最具限制性的C支持编译器是微软Visual C++编译器及工具集（合称MSVC）[[8]](#id40) [[9]](#id41)。直到Visual
    Studio 2013，每个MSVC版本都附带一个更新的C Runtime（CRT）库，与之前的版本不兼容。
- en: This lack of compatibility of the Application Binary Interface (ABI) meant that
    all projects wanting to communicate across this interface (e.g. calling a function
    from a shared library) needed to be (re)compiled with the same MSVC version. The
    long support of CPython 2.7 meant that python itself was stuck for a long time
    with VS 2008 (in order not to break the ABI in patch releases), and thus SciPy
    was stuck on that version as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序二进制接口（ABI）的不兼容性意味着所有希望通过此接口进行通信（例如调用共享库中的函数）的项目都需要使用相同的MSVC版本进行（重新）编译。CPython
    2.7的长期支持意味着Python本身长时间以来一直使用VS 2008（为了在补丁发布中不破坏ABI），因此SciPy也一直停留在那个版本。
- en: The use of VS 2008 (which doesn’t have support for C99) to compile builds for
    CPython 2.7 meant for a long time that C code in SciPy has had to conform to the
    earlier C90 standard for the language and standard library. After dropping support
    for CPython 2.7 in SciPy 1.3.x, that restriction was finally lifted (though only
    gradually at first).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VS 2008（不支持C99）为CPython 2.7编译构建版本，长时间以来意味着SciPy中的C代码必须符合早期的C90语言和标准库标准。在SciPy
    1.3.x中放弃对CPython 2.7的支持后，这一限制终于被解除（尽管一开始只是逐步解除）。
- en: 'With the introduction of the “Universal C Runtime” (UCRT) [[10]](#id42) since
    the release of Visual Studio 2015, the ABI of C Runtime has been stable, which
    means that the restriction of having to use the same compiler version for SciPy
    as for the underlying CPython version is no longer applicable. This stability
    is not indefinite though: Microsoft has been planning [[11]](#id43) an ABI-breaking
    release - across the compiler resp. C/C++ standard libraries - (tentatively called
    “vNext”) for quite a while, but so far it is unclear when this will arrive. Once
    that happens, SciPy will again be restricted to at most the last ABI-compatible
    Visual Studio release (currently VS 2022) until all CPython versions supported
    according to NEP29 have been built upstream with vNext-compatible compilers.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 自从发布Visual Studio 2015以来，引入了“Universal C Runtime”（UCRT）[[10]](#id42)，C Runtime的ABI已经稳定，这意味着不再需要在SciPy中使用与底层CPython版本相同的编译器版本的限制。然而，这种稳定性并非永久性：微软一直在计划[[11]](#id43)发布破坏ABI的版本
    - 跨编译器和C/C++标准库 - （暂时称为“vNext”），但目前尚不清楚具体时间。一旦这种情况发生，SciPy将再次受到最多与最新ABI兼容的Visual
    Studio版本的限制（目前为VS 2022），直到根据NEP29支持的所有CPython版本都使用了与vNext兼容的编译器为止。
- en: More specifically, there is a distinction between the Microsoft Visual Studio
    version and the version of the targeted “toolset”, which is defined [[12]](#id44)
    as “The Microsoft C++ compiler, linker, standard libraries, and related utilities”.
    Each version of Visual Studio comes with a default version of the MSVC toolset
    (for example VS2017 with vc141, VS2019 with vc142), but it is possible to target
    older toolsets even in newer versions of Visual Studio. Due to the nature of compilers
    (i.e. split into frontend and backend), it depends whether the limiting factor
    for supporting a given feature (e.g. in C) is due to the version of Visual Studio
    or the toolset, but in general the latter is a harder barrier and thus the effective
    lower bound.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，微软Visual Studio版本与目标“工具集”的版本之间有区别，工具集被定义为“Microsoft C++编译器、链接器、标准库及相关工具”。每个Visual
    Studio版本都附带一个默认的MSVC工具集版本（例如VS2017带有vc141，VS2019带有vc142），但在较新版本的Visual Studio中也可以针对旧的工具集进行目标设置。由于编译器的性质（即前端和后端分离），支持给定特性（例如在C中）的限制因素是Visual
    Studio版本还是工具集，这取决于具体情况，但总体而言，后者是一个更难以突破的障碍，因此是实际的下限。
- en: 'This is due to the fact that while the ABI stays compatible between toolset
    versions (until vNext), all linking operations must use a toolset at least as
    new as the one used to build any of the involved artefacts, meaning that toolset
    version bumps tend to be “infectious”, as in: requiring all consuming libraries
    to also bump their toolset (and probably compiler) version. This is more of an
    issue for NumPy than SciPy, as the latter has only a small C API and is compiled
    against by far fewer projects than NumPy. Additionally, using a newer toolset
    means that users of libraries that compile C++ code (as SciPy does) might also
    need a newer Microsoft Visual C++ Redistributable, which might have to be distributed
    to them [[13]](#id45).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为尽管工具集版本之间的 ABI 保持兼容（直到 vNext），但所有链接操作必须使用至少与用于构建任何涉及工件的工具集一样新的工具集，这意味着工具集版本提升往往会是“传染性的”，即需要所有消费库也提升其工具集（和可能的编译器）版本。这对
    NumPy 而言比 SciPy 更为严重，因为后者只有一个较小的 C API，并且与比较少的项目编译。此外，使用更新的工具集意味着编译 C++ 代码的库的用户（如
    SciPy 所做的那样）可能还需要更新的 Microsoft Visual C++ Redistributable，这可能需要分发给他们[[13]](#id45)。
- en: Summing up, the minimal requirement for the MSVC compiler resp. toolset per
    SciPy version was determined predominantly by the oldest supported CPython version
    at the time. The first SciPy version to raise the minimal requirement beyond that
    was SciPy 1.9, due to the inclusion of the HiGHS submodule, which does not compile
    with vc141 (and the aggressive removal of VS2017 in public CI making it infeasible
    to keep ensuring that everything everywhere works with non-default toolset versions).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，对于每个 SciPy 版本，MSVC 编译器或工具集的最低要求主要由当时支持的最旧 CPython 版本决定。首个将最低要求提升至此的 SciPy
    版本是 1.9，原因是包含了不支持 vc141 编译的 HiGHS 子模块，以及在公共 CI 中积极删除 VS2017，使得确保所有工具集版本能够与非默认工具集版本一起使用变得不可行。
- en: '| SciPy version | CPython support | MS Visual C++ | Toolset version |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| SciPy 版本 | CPython 支持 | MS Visual C++ | 工具集版本 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Until 1.2 | 2.7 & 3.4+ | VS 2008 (9.0) | vc90 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Until 1.2 | 2.7 & 3.4+ | VS 2008 (9.0) | vc90 |'
- en: '| 1.3, 1.4 | 3.5+ | VS 2010 (10.0) | vc100 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 1.3, 1.4 | 3.5+ | VS 2010 (10.0) | vc100 |'
- en: '| 1.5 | 3.6+ | VS 2015 (14.0) | vc140 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 1.5 | 3.6+ | VS 2015 (14.0) | vc140 |'
- en: '| 1.6, 1.7 | 3.7+ | VS 2017 (14.1) | vc141 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 1.6, 1.7 | 3.7+ | VS 2017 (14.1) | vc141 |'
- en: '| 1.8 | 3.8+ | VS 2017 (14.1) | vc141 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 1.8 | 3.8+ | VS 2017 (14.1) | vc141 |'
- en: '| 1.9 | 3.8+ | VS 2019 (14.20) | vc142 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 1.9 | 3.8+ | VS 2019 (14.20) | vc142 |'
- en: In terms of C language standards, it’s relevant to note that C11 has optional
    features [[14]](#id46) (e.g. atomics, threading), some of which (VLAs & complex
    types) were mandatory in the C99 standard. C17 (occasionally called C18) can be
    considered a bug fix for C11, so generally, C11 may be skipped entirely.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 就 C 语言标准而言，值得注意的是 C11 具有可选特性 [[14]](#id46)（例如原子操作、线程），其中一些（如 VLAs 和复杂类型）在 C99
    标准中是强制性的。C17（有时称为 C18）可以视为对 C11 的错误修正，因此通常可以跳过 C11。
- en: SciPy has been restricted in the use of more advanced language features by the
    available compiler support, and Microsoft in particular has taken very long to
    achieve conformance to C99/C11/C17, however starting from MS Visual Studio 16.8,
    C11/C17 is supported [[15]](#id47) (though without the C11 optional features).
    C99 `<complex.h>` would be particularly interesting for SciPy; MSVC conformance
    for this and `<stdatomic.h>` is being tracked here [[16]](#id48) [[17]](#id49).
    However, it’s still possible to use complex types on windows, provided that windows-specific
    types are used [[18]](#id50).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 受可用编译器支持的先进语言特性限制，尤其是微软公司花费了很长时间才达到对 C99/C11/C17 的一致性，然而从 MS Visual Studio
    16.8 开始，已支持 C11/C17 [[15]](#id47)（尽管没有 C11 可选特性）。对于 SciPy 而言，C99 `<complex.h>`
    特别有趣；MSVC 对此和 `<stdatomic.h>` 的一致性正在这里追踪 [[16]](#id48) [[17]](#id49)。然而，仍然可以在
    Windows 上使用复杂类型，只要使用特定于 Windows 的类型即可[[18]](#id50)。
- en: 'Therefore, using C features beyond C90 was only possible insofar there was
    support on Windows; however, as of as of the end of 2021, a sufficiently recent
    compiler is used. This is because GCC & LLVM support all relevant C11 features
    with the oldest currently used versions, and C17 is just a bugfix for C11, as
    mentioned above. In short:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有在 Windows 上得到支持时才能使用超出 C90 的 C 特性；然而，截至 2021 年底，使用了足够新的编译器。这是因为 GCC 和 LLVM
    在其当前使用的最旧版本上支持所有相关的 C11 特性，而 C17 只是对 C11 的错误修正，如前所述。简而言之：
- en: '| Date | C Standard |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | C 标准 |'
- en: '| --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <= 2018 | C90 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| <= 2018 | C90 |'
- en: '| 2019 | C90 for old code, may consider C99 for new |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 2019 | 对于旧代码采用 C90，可能考虑对新代码采用 C99 |'
- en: '| 2020 | C99 (no `<complex.h>`, `<stdatomic.h>`, `<threads.h>` & VLAs) |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 2020 | C99（无 `<complex.h>`, `<stdatomic.h>`, `<threads.h>` 和 VLAs）|'
- en: '| 2021 | C17 (no `<complex.h>`, `<stdatomic.h>`, `<threads.h>` & VLAs) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 2021 | C17（无 `<complex.h>`, `<stdatomic.h>`, `<threads.h>` 和 VLAs）|'
- en: '| ? | C23, `<complex.h>`, `<stdatomic.h>`, … |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| ? | C23、`<complex.h>`、`<stdatomic.h>`、… |'
- en: C++ Language Standards
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: C++ 语言标准
- en: C++ language standards for SciPy are generally guidelines rather than official
    decisions. This is particularly true of attempting to predict adoption timelines
    for newer standards.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SciPy 来说，C++语言标准通常是指导方针，而非官方决策。这一点尤其适用于尝试预测新标准采用时间表。
- en: '| Date | C++ Standard |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Date | C++ 标准 |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <= 2019 | C++03 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| <= 2019 | C++03 |'
- en: '| 2020 | C++11 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 2020 | C++11 |'
- en: '| 2021 | C++14 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 2021 | C++14 |'
- en: '| 2022 | C++17 (core language + universally available stdlib features) |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 2022 | C++17（核心语言 + 通用库特性）|'
- en: '| ? | C++17 (with full stdlib), C++20, C++23 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| ? | C++17（具备完整的标准库）、C++20、C++23 |'
- en: Since dropping support for Python 2.7, C++11 can be used universally, and since
    dropping Python 3.6, the Visual Studio version (that had previously been stuck
    with 14.0 due to ABI compatibility with CPython) has been recent enough to support
    even C++17.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 放弃对 Python 2.7 的支持后，可以普遍使用 C++11，并且在放弃对 Python 3.6 后，Visual Studio 版本（由于与 CPython
    的 ABI 兼容性而曾被限制在 14.0 版本）已足够新，甚至支持 C++17。
- en: Since the official builds (see above) use a pretty recent version of LLVM, the
    bottleneck for C++ support is therefore the oldest supported GCC version, where
    SciPy has been constrained mainly by the version in the oldest supported manylinux
    versions & images [[19]](#id51).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于官方构建（详见上文）使用了相当新的 LLVM 版本，因此 C++ 支持的瓶颈是最旧支持的 GCC 版本，而 SciPy 主要受到最旧支持的 manylinux
    版本和镜像中的版本的限制 [[19]](#id51)。
- en: At the end of 2021 (with the final removal of `manylinux1` wheels), the minimal
    requirement of GCC moved to 6.3, which has full C++14 support [[20]](#id52). This
    corresponded to the lowest-present GCC version in relevant manylinux versions,
    though this was still considering the Debian-based “outlier” `manylinux_2_24`,
    which - in contrast to previous manylinux images based on RHEL-derivative CentOS
    that could benefit from the ABI-compatible GCC backports in the “RHEL Dev Toolset”
    - was stuck with GCC 6.3\. That image failed to take off not least due to those
    outdated compilers [[21]](#id53) and reached its EOL in mid-2022 [[22]](#id54).
    For different reasons, `manylinux2010` also reached its EOL around the same time
    [[23]](#id55).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在2021年底（最终移除 `manylinux1` wheels），GCC 的最低要求移至 6.3 版本，该版本具备完整的 C++14 支持 [[20]](#id52)。这对应于相关
    manylinux 版本中存在的最低 GCC 版本，尽管与以前基于 RHEL 衍生的 CentOS 的 manylinux 镜像不同，后者可以从 “RHEL
    Dev Toolset” 中获益，支持兼容 ABI 的 GCC 后移版本，但 `manylinux_2_24` 却停留在 GCC 6.3 版本。由于这些过时的编译器，该镜像未能成功
    [[21]](#id53)，并在2022年中旬到达其生命周期结束 [[22]](#id54)。出于不同原因，`manylinux2010` 也在同一时期达到了其生命周期结束
    [[23]](#id55)。
- en: The remaining images `manylinux2014` and `manylinux_2_28` currently support
    GCC 10 and 11, respectively. The latter will continue to receive updates as new
    GCC versions become available as backports, but the former will likely not change
    since the CentOS project is not responsive anymore about publishing aarch64 backports
    of GCC 11 [[24]](#id56).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的 `manylinux2014` 和 `manylinux_2_28` 镜像目前分别支持 GCC 10 和 11。后者将在新的 GCC 版本推出时继续更新为后移版本，但前者可能不会改变，因为
    CentOS 项目已不再响应发布 GCC 11 的 aarch64 后移版本 [[24]](#id56)。
- en: This leaves all the main platforms and their compilers with comparatively recent
    versions. However, SciPy has historically also endeavored to support less common
    platforms as well - if not with binary artefacts (i.e. wheels), then at least
    by remaining compilable from source - which includes for example AIX, Alpine Linux
    and FreeBSD.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得所有主要平台及其编译器都具备相对较新的版本。然而，SciPy在历史上也努力支持不太常见的平台，即使不能提供二进制构件（即 wheels），也能通过源码编译支持
    - 这包括例如 AIX、Alpine Linux 和 FreeBSD。
- en: For AIX 7.1 & 7.2 the default compiler is GCC 8 (AIX 6.1 had its EOL in 2017),
    but GCC 10 is installable (side-by-side) [[25]](#id57). The oldest currently-supported
    Alpine Linux release is 3.12 [[26]](#id58), and already comes with GCC 10. For
    FreeBSD, the oldest currently-supported 12.x release [[27]](#id59) comes with
    LLVM 10 (and GCC 10 is available as a freebsd-port [[28]](#id60)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AIX 7.1 和 7.2，默认编译器是 GCC 8（AIX 6.1 在2017年已经到达生命周期结束），但可以安装（并行使用）GCC 10 [[25]](#id57)。当前支持的最旧
    Alpine Linux 发行版是 3.12 [[26]](#id58)，已经带有 GCC 10。对于 FreeBSD，当前支持的最旧 12.x 版本 [[27]](#id59)
    配备了 LLVM 10（并且 GCC 10 可以作为 freebsd-port 安装 [[28]](#id60)）。
- en: Finally there is the question of which machines are widely used by people needing
    to compile SciPy from source for other reasons (e.g. SciPy developers, or people
    wanting to compile for themselves for performance reasons). The oldest relevant
    distributions (without RHEL-style backports) are Ubuntu 18.04 LTS (which has GCC
    7 but also has a backport of GCC 8; Ubuntu 20.04 LTS has GCC 9) and Debian Buster
    (with GCC 8; Bullseye has GCC 10). This is the weakest restriction for determining
    the lower bounds of compiler support (power users and developers can be expected
    to keep their systems at least somewhat up-to-date, or use backports where available),
    and gradually becomes less important as usage numbers of old distributions dwindle.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个问题，即哪些机器被广泛用于需要编译 SciPy 源代码的人（例如 SciPy 开发人员，或因性能原因想自行编译的人）。最旧的相关发行版（不带有
    RHEL 风格的后端支持）是 Ubuntu 18.04 LTS（带有 GCC 7 但也有 GCC 8 的后端支持；Ubuntu 20.04 LTS 带有 GCC
    9）和 Debian Buster（带有 GCC 8；Bullseye 带有 GCC 10）。这是确定编译器支持下限的最弱限制（可以预期，电脑高手和开发人员会保持系统至少有些更新，或者使用可用的后端支持），随着老旧发行版的使用量逐渐减少，这种限制逐渐变得不那么重要。
- en: All the currently lowest-supported compiler versions (GCC 8, LLVM 12, VS2019
    with vc142) have full support for the C++17 *core language*, which can therefore
    be used unconditionally. However, as of mid-2022, support for the entirety of
    the C++17 standard library has not yet been completed across all compilers [[20]](#id52),
    particularly LLVM. It is therefore necessary to check if a given stdlib-feature
    is supported by all compilers before it can be used in SciPy. Compiler support
    for C++20 and C++23 is still under heavy development [[20]](#id52).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有当前支持的最低版本的编译器（GCC 8，LLVM 12，VS2019 with vc142）均完全支持 C++17 *核心语言*，因此可以无条件使用。然而，截至
    2022 年中，尚未在所有编译器中完成对 C++17 标准库的完整支持 [[20]](#id52)，特别是 LLVM。因此，在将其用于 SciPy 之前，需要检查所有编译器是否支持特定的
    stdlib 特性。对于 C++20 和 C++23，编译器的支持仍在积极开发中 [[20]](#id52)。
- en: Fortran Compilers
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Fortran 编译器
- en: Generally, any well-maintained compiler is likely suitable and can be used to
    build SciPy.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，任何维护良好的编译器都可能适用并可用于构建 SciPy。
- en: '| Tool | Version |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 版本 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| gfortran | >= 4.8.0 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| gfortran | >= 4.8.0 |'
- en: '| ifort | A recent version |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| ifort | 最近版本 |'
- en: '| flang | A recent version |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| flang | 最近版本 |'
- en: Cython & Pythran
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cython & Pythran
- en: SciPy always requires a recent Cython compiler. Since 1.7, Pythran is a build
    dependency (currently with the possibility to opt out).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 总是需要一个最新的 Cython 编译器。自 1.7 版本开始，Pythran 是一个构建依赖项（目前可以选择不使用）。
- en: OpenMP support
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenMP 支持
- en: For various reasons [[29]](#id61), SciPy cannot be distributed with built-in
    OpenMP support. When using the optional Pythran support, OpenMP-enabled parallel
    code can be generated when building from source.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 出于各种原因 [[29]](#id61)，SciPy 不能带有内置的 OpenMP 支持。在使用可选的 Pythran 支持时，可以在构建源码时生成支持
    OpenMP 的并行代码。
- en: Other Libraries
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他库
- en: Any library conforming to the BLAS/LAPACK interface may be used. OpenBLAS, ATLAS,
    MKL, BLIS, and reference Netlib libraries are known to work.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 任何符合 BLAS/LAPACK 接口的库均可使用。已知可用的有 OpenBLAS、ATLAS、MKL、BLIS 和参考 Netlib 库。
- en: '| Library | Minimum version |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 库 | 最低版本 |'
- en: '| --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| LAPACK | 3.7.1 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| LAPACK | 3.7.1 |'
- en: '| BLAS | A recent version of OpenBLAS, MKL or ATLAS. The Accelerate BLAS library
    is no longer supported. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| BLAS | OpenBLAS、MKL 或 ATLAS 的最新版本。不再支持 Accelerate BLAS 库。 |'
- en: There are some additional optional dependencies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些额外的可选依赖项。
- en: '| Library | Version | URL |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 库 | 版本 | 网址 |'
- en: '| --- | --- | --- |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| mpmath | Recent | [http://mpmath.org/](http://mpmath.org/) |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| mpmath | 最近版本 | [http://mpmath.org/](http://mpmath.org/) |'
- en: '| scikit-umfpack | Recent | [https://pypi.org/project/scikit-umfpack/](https://pypi.org/project/scikit-umfpack/)
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| scikit-umfpack | 最近版本 | [https://pypi.org/project/scikit-umfpack/](https://pypi.org/project/scikit-umfpack/)
    |'
- en: '| pooch | Recent | [https://pypi.org/project/pooch/](https://pypi.org/project/pooch/)
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| pooch | 最近版本 | [https://pypi.org/project/pooch/](https://pypi.org/project/pooch/)
    |'
- en: 'Moreover, SciPy supports interaction with other libraries. The test suite has
    additional compatibility tests that are run when these are installed:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SciPy 还支持与其他库的交互。测试套件在安装这些库时运行了额外的兼容性测试：
- en: '| Tool | Version | URL |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 版本 | 网址 |'
- en: '| --- | --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pydata/sparse | Recent | [https://github.com/pydata/sparse/](https://github.com/pydata/sparse/)
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| pydata/sparse | 最近版本 | [https://github.com/pydata/sparse/](https://github.com/pydata/sparse/)
    |'
- en: Testing and Benchmarking
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试与基准测试
- en: 'Testing and benchmarking require recent versions of:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 测试与基准测试需要使用最新版本的：
- en: '| Tool | Version | URL |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 版本 | 网址 |'
- en: '| --- | --- | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pytest | Recent | [https://docs.pytest.org/en/latest/](https://docs.pytest.org/en/latest/)
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| pytest | 最新版本 | [https://docs.pytest.org/en/latest/](https://docs.pytest.org/en/latest/)
    |'
- en: '| Hypothesis | Recent | [https://hypothesis.readthedocs.io/](https://hypothesis.readthedocs.io/)
    |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| Hypothesis | 最新版本 | [https://hypothesis.readthedocs.io/](https://hypothesis.readthedocs.io/)
    |'
- en: '| asv (airspeed velocity) | Recent | [https://asv.readthedocs.io/](https://asv.readthedocs.io/)
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| asv (airspeed velocity) | 最新版本 | [https://asv.readthedocs.io/](https://asv.readthedocs.io/)
    |'
- en: Building the Documentation
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建文档
- en: '| Tool | Version |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 版本 |'
- en: '| --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Sphinx | Whatever recent versions work. >= 2.0. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| Sphinx | 最新版本即可，要求 >= 2.0. |'
- en: '| PyData Sphinx theme | Whatever recent versions work. >= 0.8.1. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| PyData Sphinx 主题 | 最新版本即可，要求 >= 0.8.1。 |'
- en: '| Sphinx-Design | Whatever recent versions work. >= 0.2.0. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| Sphinx-Design | 最新版本即可，要求 >= 0.2.0。 |'
- en: '| numpydoc | Whatever recent versions work. >= 0.8.0. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| numpydoc | 最新版本即可，要求 >= 0.8.0。 |'
- en: '| matplotlib | Generally suggest >= 2.0. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| matplotlib | 通常建议 >= 2.0。 |'
- en: '| MyST-NB | Whatever recent versions work. >= 0.17.1 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| MyST-NB | 最新版本即可，要求 >= 0.17.1 |'
- en: Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Developer Note: The versions of `numpy` and `matplotlib` required have implications
    for the examples in Python docstrings. Examples must be able to be executed both
    in the environment used to build the documentation, as well as with any supported
    versions of `numpy/matplotlib` that a user may use with this release of SciPy.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者注意事项：所需的`numpy`和`matplotlib`版本对Python文档字符串中的示例有影响。示例必须能够在用于构建文档的环境中执行，也必须能够与用户可能在此版本的SciPy中使用的任何支持的`numpy/matplotlib`版本一起执行。
- en: Packaging
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包
- en: 'A Recent version of:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最近版本的：
- en: '| Tool | Version | URL |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 版本 | URL |'
- en: '| --- | --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| setuptools | Recent | [https://pypi.org/project/setuptools/](https://pypi.org/project/setuptools/)
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| setuptools | 最新版本 | [https://pypi.org/project/setuptools/](https://pypi.org/project/setuptools/)
    |'
- en: '| wheel | Recent | [https://pythonwheels.com](https://pythonwheels.com) |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| wheel | 最新版本即可 | [https://pythonwheels.com](https://pythonwheels.com) |'
- en: '| multibuild | Recent | [https://github.com/matthew-brett/multibuild](https://github.com/matthew-brett/multibuild)
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| multibuild | 最新版本 | [https://github.com/matthew-brett/multibuild](https://github.com/matthew-brett/multibuild)
    |'
- en: '[Making a SciPy release](core-dev/index.html#making-a-release) and [Distributing](core-dev/index.html#distributing-a-release)
    contain information on making and distributing a SciPy release.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[制作 SciPy 发行版](core-dev/index.html#making-a-release) 和 [分发](core-dev/index.html#distributing-a-release)
    包含有关制作和分发 SciPy 发行版的信息。'
- en: References
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
