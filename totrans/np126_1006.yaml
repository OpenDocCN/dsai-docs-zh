- en: numpy.nanmedian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nanmedian.html](https://numpy.org/doc/1.26/reference/generated/numpy.nanmedian.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the median along the specified axis, while ignoring NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the median of the array elements.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array or object that can be converted to an array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{int, sequence of int, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the medians are computed. The default is to compute
    the median along a flattened version of the array. A sequence of axes is supported
    since version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. It must have the same
    shape and buffer length as the expected output, but the type (of the output) will
    be cast if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_input**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, then allow use of memory of input array *a* for calculations. The input
    array will be modified by the call to [`median`](numpy.median.html#numpy.median
    "numpy.median"). This will save memory when you do not need to preserve the contents
    of the input array. Treat the input as undefined, but it will probably be fully
    or partially sorted. Default is False. If *overwrite_input* is `True` and *a*
    is not already an [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray"),
    an error will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*.
  prefs: []
  type: TYPE_NORMAL
- en: If this is anything but the default value it will be passed through (in the
    special case of an empty array) to the [`mean`](numpy.mean.html#numpy.mean "numpy.mean")
    function of the underlying array. If the array is a sub-class and [`mean`](numpy.mean.html#numpy.mean
    "numpy.mean") does not have the kwarg *keepdims* this will raise a RuntimeError.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**median**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A new array holding the result. If the input contains integers or floats smaller
    than `float64`, then the output data-type is `np.float64`. Otherwise, the data-type
    of the output is the same as that of the input. If *out* is specified, that array
    is returned instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mean`](numpy.mean.html#numpy.mean "numpy.mean"), [`median`](numpy.median.html#numpy.median
    "numpy.median"), [`percentile`](numpy.percentile.html#numpy.percentile "numpy.percentile")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Given a vector `V` of length `N`, the median of `V` is the middle value of a
    sorted copy of `V`, `V_sorted` - i.e., `V_sorted[(N-1)/2]`, when `N` is odd and
    the average of the two middle values of `V_sorted` when `N` is even.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
