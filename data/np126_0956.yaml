- en: Random Generator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机生成器
- en: 原文：[https://numpy.org/doc/1.26/reference/random/generator.html](https://numpy.org/doc/1.26/reference/random/generator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/generator.html](https://numpy.org/doc/1.26/reference/random/generator.html)
- en: The [`Generator`](#numpy.random.Generator "numpy.random.Generator") provides
    access to a wide range of distributions, and served as a replacement for [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). The main difference between the two is that `Generator`
    relies on an additional BitGenerator to manage state and generate the random bits,
    which are then transformed into random values from useful distributions. The default
    BitGenerator used by `Generator` is [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64"). The BitGenerator can be changed by passing an instantized
    BitGenerator to `Generator`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator`](#numpy.random.Generator "numpy.random.Generator") 提供对各种分布的访问，并作为
    [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    的替代品。两者的主要区别在于 `Generator` 依赖额外的 `BitGenerator` 来管理状态并生成随机位，然后将这些随机位转换为有用分布的随机值。`Generator`
    使用的默认 `BitGenerator` 是 [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64")。可以通过将实例化的 `BitGenerator` 传递给 `Generator` 来更改 `BitGenerator`。'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Construct a new Generator with the default BitGenerator (PCG64).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的 BitGenerator（PCG64）构造一个新的 Generator。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**seed**{None, int, array_like[ints], SeedSequence, BitGenerator, Generator},
    optional'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**种子**{None, int, array_like[ints], SeedSequence, BitGenerator, Generator},
    可选'
- en: A seed to initialize the [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"). If None, then fresh, unpredictable entropy will
    be pulled from the OS. If an `int` or `array_like[ints]` is passed, then it will
    be passed to [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") to derive the initial [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") state. One may also pass in a [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") instance. Additionally, when passed a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"), it will be wrapped by [`Generator`](#numpy.random.Generator
    "numpy.random.Generator"). If passed a [`Generator`](#numpy.random.Generator "numpy.random.Generator"),
    it will be returned unaltered.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用于初始化 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 的种子。如果为 None，则将从操作系统中获取新鲜、不可预测的熵。如果传递了一个 `int` 或
    `array_like[ints]`，那么它将传递给 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 来派生初始的 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 状态。还可以传入一个 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 实例。此外，当传递一个 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 时，它将被 [`Generator`](#numpy.random.Generator "numpy.random.Generator")
    包装。如果传递一个 [`Generator`](#numpy.random.Generator "numpy.random.Generator")，则它将不经修改地返回。
- en: 'Returns:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Generator
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器
- en: The initialized generator object.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化的生成器对象。
- en: Notes
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If `seed` is not a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") or a [`Generator`](#numpy.random.Generator "numpy.random.Generator"),
    a new [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") is instantiated. This function does not manage a
    default global instance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `seed` 不是 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 或 [`Generator`](#numpy.random.Generator "numpy.random.Generator")，则会实例化一个新的
    [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")。此函数不管理默认全局实例。
- en: See [Seeding and Entropy](bit_generators/index.html#seeding-and-entropy) for
    more information about seeding.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关种子和熵的更多信息，请参见 [Seeding and Entropy](bit_generators/index.html#seeding-and-entropy)。
- en: Examples
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '`default_rng` is the recommended constructor for the random number class `Generator`.
    Here are several ways we can construct a random number generator using `default_rng`
    and the `Generator` class.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`default_rng` 是随机数类 `Generator` 的推荐构造函数。以下是使用 `default_rng` 和 `Generator` 类构造随机数生成器的几种方式。'
- en: 'Here we use `default_rng` to generate a random float:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `default_rng` 生成一个随机浮点数：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here we use `default_rng` to generate 3 random integers between 0 (inclusive)
    and 10 (exclusive):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`default_rng`生成3个介于0（包括）和10（不包括）之间的随机整数：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we specify a seed so that we have reproducible results:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了一个种子，以便我们有可重现的结果：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we exit and restart our Python interpreter, we’ll see that we generate the
    same random numbers again:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们退出并重新启动Python解释器，我们会看到再次生成相同的随机数：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Container for the BitGenerators.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: BitGenerators的容器。
- en: '`Generator` exposes a number of methods for generating random numbers drawn
    from a variety of probability distributions. In addition to the distribution-specific
    arguments, each method takes a keyword argument *size* that defaults to `None`.
    If *size* is `None`, then a single value is generated and returned. If *size*
    is an integer, then a 1-D array filled with generated values is returned. If *size*
    is a tuple, then an array with that shape is filled and returned.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator`公开了许多方法，用于从各种概率分布中生成随机数。除了与分布特定参数一起传递外，每个方法还接受一个名为*size*的关键字参数，默认值为`None`。如果*size*是`None`，则生成并返回单个值。如果*size*是整数，则返回一个填充有生成值的一维数组。如果*size*是元组，则填充并返回具有该形状的数组。'
- en: The function [`numpy.random.default_rng`](#numpy.random.default_rng "numpy.random.default_rng")
    will instantiate a [`Generator`](#numpy.random.Generator "numpy.random.Generator")
    with numpy’s default [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`numpy.random.default_rng`](#numpy.random.default_rng "numpy.random.default_rng")将使用NumPy默认的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")实例化一个[`Generator`](#numpy.random.Generator "numpy.random.Generator")。
- en: '**No Compatibility Guarantee**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有兼容性保证**'
- en: '`Generator` does not provide a version compatibility guarantee. In particular,
    as better algorithms evolve the bit stream may change.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator` 不提供版本兼容性保证。特别是随着更好的算法的发展，比特流可能会发生变化。'
- en: 'Parameters:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**bit_generator**BitGenerator'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**bit_generator** BitGenerator'
- en: BitGenerator to use as the core generator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用作核心生成器的BitGenerator。
- en: See also
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`default_rng`](#numpy.random.default_rng "numpy.random.default_rng")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`default_rng`](#numpy.random.default_rng "numpy.random.default_rng")'
- en: Recommended constructor for [`Generator`](#numpy.random.Generator "numpy.random.Generator").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐用于[`Generator`](#numpy.random.Generator "numpy.random.Generator")的构造函数。
- en: Notes
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Python stdlib module [`random`](generated/numpy.random.random.html#numpy.random.random
    "numpy.random.random") contains pseudo-random number generator with a number of
    methods that are similar to the ones available in `Generator`. It uses Mersenne
    Twister, and this bit generator can be accessed using `MT19937`. `Generator`,
    besides being NumPy-aware, has the advantage that it provides a much larger number
    of probability distributions to choose from.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库模块[`random`](generated/numpy.random.random.html#numpy.random.random
    "numpy.random.random")包含一个伪随机数生成器，具有许多与`Generator`中可用方法相似的方法。 它使用Mersenne Twister，可以使用`MT19937`访问此比特生成器。
    `Generator`除了是NumPy感知之外，还具有提供更多的概率分布可供选择的优势��
- en: Examples
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Accessing the BitGenerator and Spawning
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问BitGenerator和生成
- en: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | Gets the bit generator instance used
    by the generator |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | 获取生成器使用的比特生成器实例 |'
- en: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | Create new independent child generators.
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | 创建新的独立的子生成器。 |'
- en: Simple random data
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单随机数据
- en: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | Return
    random integers from *low* (inclusive) to *high* (exclusive), or if endpoint=True,
    *low* (inclusive) to *high* (inclusive). |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | 从*low*（包括）到*high*（不包括）返回随机整数，或者如果endpoint=True，则从*low*（包括）到*high*（包括）返回。'
- en: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | Return random floats in
    the half-open interval [0.0, 1.0). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | 返回半开区间[0.0, 1.0)内的随机浮点数。'
- en: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | Generates
    a random sample from a given array |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | 从给定数组中生成一个随机样本
    |'
- en: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | Return random bytes. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | 返回随机字节。 |'
- en: Permutations
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列
- en: The methods for randomly permuting a sequence are
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用于随机排列序列的方法有
- en: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | Modify an array or sequence in-place
    by shuffling its contents. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | 通过对内容进行随机排列在原地修改数组或序列。 |'
- en: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | Randomly permute a sequence,
    or return a permuted range. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | 随机排列一个序列，或返回一个排列后的范围。 |'
- en: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | Randomly permute *x* along
    axis *axis*. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | 沿着轴 *axis* 随机排列 *x* 。'
- en: The following table summarizes the behaviors of the methods.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了这些方法的行为。
- en: '| method | copy/in-place | axis handling |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: 方法 | 复制/原地操作 | 轴处理 |
- en: '| --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| shuffle | in-place | as if 1d |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| shuffle | 原地操作 | 类似于1维 |'
- en: '| permutation | copy | as if 1d |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| permutation | 复制 | 类似于1维 |'
- en: '| permuted | either (use ‘out’ for in-place) | axis independent |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| permuted | either (use ‘out’ for in-place) | axis independent |'
- en: The following subsections provide more details about the differences.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节提供了有关这些差异的更多细节。
- en: In-place vs. copy
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原地操作 vs. 复制
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 和 [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") 的主要区别在于，[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 是原地操作，而 [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") 返回一个副本。'
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") 返回一个副本。要在原地操作 [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") ，请将同一个数组作为第一个参数*和*作为`out`参数的值传递。例如，
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that when `out` is given, the return value is `out`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意当给定`out`时，返回值为`out`：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '### Handling the `axis` parameter'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 `axis` 参数
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的一个重要区别是它们如何处理`axis`参数。[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")和[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")都将输入视为一维序列，而`axis`参数确定要使用的输入数组的哪个维度作为序列。对于二维数组，`axis=0`将重新排列数组的行，`axis=1`将重新排列列。例如
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列已被“一次性”重新排列：每列内的值未发生改变。
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")处理`axis`参数的方式类似于[`numpy.sort`](../generated/numpy.sort.html#numpy.sort
    "numpy.sort")处理它的方式。给定轴上的每个切片都与其他切片独立地进行洗牌。将[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")的使用示例与上面[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")的使用示例进行比较：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，每行内的值（即`axis=1`上的值）被独立地进行了洗牌。这不是对列的“一次性”洗牌。
- en: Shuffling non-NumPy sequences
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对非NumPy序列进行洗牌
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")适用于非NumPy序列。也就是说，如果给定的序列不是NumPy数组，则会原地对该序列进行洗牌。例如，'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Distributions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布
- en: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | 从Beta分布中抽取样本。 |'
- en: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | 从二项分布中抽取样本。 |'
- en: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | 从卡方分布中抽取样本。 |'
- en: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | 从狄利克雷分布中抽取样本。 |'
- en: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | 从指数分布中抽取样本。 |'
- en: '| [`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '[`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | 从F分布中抽取样本。'
- en: '| [`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | Draw samples from a Gamma
    distribution. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '[`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | 从Gamma分布中抽取样本。'
- en: '| [`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '[`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | 从几何分布中抽取样本。'
- en: '| [`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '[`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | 从Gumbel分布中抽取样本。'
- en: '| [`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '[`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | 从超几何分布中抽取样本。'
- en: '| [`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '[`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | 从拉普拉斯或双指数分布中抽取样本，指定位置（或均值）和尺度（衰减）。'
- en: '| [`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | Draw samples from a logistic
    distribution. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '[`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | 从Logistic分布中抽取样本。'
- en: '| [`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | Draw samples from a
    log-normal distribution. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '[`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | 从对数正态分布中抽取样本。'
- en: '| [`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '[`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | 从对数级数分布中抽取样本。'
- en: '| [`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | Draw samples from a
    multinomial distribution. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '[`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | 从多项分布中抽取样本。'
- en: '| [`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | Generate
    variates from a multivariate hypergeometric distribution. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '[`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | 从多元超几何分布中生成变量。'
- en: '| [`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | Draw random
    samples from a multivariate normal distribution. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '[`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | 从多元正态分布中随机抽取样本。'
- en: '| [`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '[`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。'
- en: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中抽取样本。'
- en: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心F分布中抽取样本。'
- en: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | 从正态（高斯）分布中抽取随机样本。'
- en: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | Draw samples from a Pareto II or
    Lomax distribution with specified shape. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | 从指定形状的Pareto II或Lomax分布中抽取样本。'
- en: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | Draw samples from a Poisson distribution.
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | 从泊松分布中抽取样本。'
- en: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | Draws samples in [0, 1] from a power
    distribution with positive exponent a - 1. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | 从指数为正的幂分布中抽取[0, 1]范围内的样本。'
- en: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | 从瑞利分布中抽取样本。'
- en: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | 从模式=0的标准柯西分布中抽取样本。'
- en: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | Draw
    samples from the standard exponential distribution. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | 从标准指数分布中抽取样本。'
- en: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | Draw samples
    from a standard Gamma distribution. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | 从标准伽玛分布中抽取样本。'
- en: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | Draw samples from
    a standard Normal distribution (mean=0, stdev=1). |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | 从标准正态分布（平均值=0，标准差=1）中抽取样本。'
- en: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | 从具有*df*自由度的标准学生t分布中抽取样本。'
- en: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | 从区间`[left, right]`上的三角分布中抽取样本。'
- en: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | 从均匀分布中抽取样本。 |'
- en: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | Draw samples from a von
    Mises distribution. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | 从von Mises分布中抽取样本。 |'
- en: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | 从Wald或反高斯分布中抽取样本。 |'
- en: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | 从威布尔分布中抽取样本。 |'
- en: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | 从齐普夫分布中抽取样本。 |'
- en: Accessing the BitGenerator and Spawning
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问比特生成器和生成
- en: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | Gets the bit generator instance used
    by the generator |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | 获取生成器使用的比特生成器实例 |'
- en: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | Create new independent child generators.
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | 创建新的独立子生成器。 |'
- en: Simple random data
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单随机数据
- en: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | Return
    random integers from *low* (inclusive) to *high* (exclusive), or if endpoint=True,
    *low* (inclusive) to *high* (inclusive). |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | 返回从*low*（包括）到*high*（不包括）的随机整数，或者如果endpoint=True，则为从*low*（包括）到*high*（包括）的整数。
    |'
- en: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | Return random floats in
    the half-open interval [0.0, 1.0). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | 返回半开区间[0.0, 1.0)内的随机浮点数。
    |'
- en: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | Generates
    a random sample from a given array |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | 从给定数组中生成随机样本
    |'
- en: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | Return random bytes. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | 返回随机字节。 |'
- en: Permutations
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列
- en: The methods for randomly permuting a sequence are
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 随机对序列进行排列的方法有
- en: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | Modify an array or sequence in-place
    by shuffling its contents. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | 通过对其内容进行混洗，原地修改一个数组或序列。 |'
- en: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | Randomly permute a sequence,
    or return a permuted range. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | 随机排列一个序列，或返回一个排列范围。 |'
- en: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | Randomly permute *x* along
    axis *axis*. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | 沿着轴*axis*随机排列*x*。 |'
- en: The following table summarizes the behaviors of the methods.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了这些方法的行为。
- en: '| method | copy/in-place | axis handling |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 复制/就地操作 | 轴处理方式 |'
- en: '| --- | --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| shuffle | in-place | as if 1d |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| shuffle | 就地操作 | 如同1d |'
- en: '| permutation | copy | as if 1d |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| permutation | 复制 | 如同1d |'
- en: '| permuted | either (use ‘out’ for in-place) | axis independent |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| permuted | 任意（使用''out''进行就地操作） | 轴独立 |'
- en: The following subsections provide more details about the differences.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各小节提供了更多关于区别的细节。
- en: In-place vs. copy
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就地操作 vs. 复制
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")和[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")的主要区别在于[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")是就地操作，而[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")返回一个副本。'
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")返回一个副本。要在原地操作[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")，将相同的数组作为第一个参数和作为`out`参数的值传递。例如，
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that when `out` is given, the return value is `out`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当给定`out`时，返回值就是`out`：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '### Handling the `axis` parameter'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理`axis`参数'
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的一个重要区别是它们如何处理`axis`参数。[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")和[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")都将输入视为一维序列，而`axis`参数确定了要使用输入数组的哪个维度作为序列。在二维数组的情况下，`axis=0`实际上重新排列了数组的行，而`axis=1`重新排列了列。例如
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，列是“批量”重新排列的：每列内的值没有改变。
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")对待`axis`参数与[`numpy.sort`](../generated/numpy.sort.html#numpy.sort
    "numpy.sort")对待它的方式类似。沿着给定轴的每个切片都独立地洗牌。将[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")的使用示例与上面[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")的示例进行比较：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在这个例子中，每行内的数值（即沿 `axis=1` 的数值）被独立洗牌。这不是对列的“整体”洗牌。'
- en: Shuffling non-NumPy sequences
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '- 对非 NumPy 序列进行洗牌'
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '- [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 可对非 NumPy 序列进行操作。也就是说，如果给定一个非 NumPy 数组的序列，它会直接在原序列上进行洗牌。例如，'
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In-place vs. copy
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '- 就地操作 vs. 复制'
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '- [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 与 [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") 的主要区别在于，[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 是就地操作，而 [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") 则返回复制品。'
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '- 默认情况下，[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") 返回一个复制品。要就地操作 [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")，需要将同一数组作为第一个参数以及 `out` 参数的值传递。例如，'
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that when `out` is given, the return value is `out`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '- 当给定 `out` 时，返回值即为 `out`：'
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '### Handling the `axis` parameter'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '- 处理 `axis` 参数'
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '- 这些方法的重要区别在于它们如何处理 `axis` 参数。[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 和 [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") 都将输入视为一维序列，`axis` 参数决定了输入数组的哪个维度被用作序列。对于二维数组，`axis=0`
    实际上会重新排列数组的行，而 `axis=1` 会重新排列列。例如'
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '- 注意到列被“整体”重新排列：每列内的数值未发生变化。'
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")处理`axis`参数的方式类似于[`numpy.sort`](../generated/numpy.sort.html#numpy.sort
    "numpy.sort")处理它的方式。给定轴上的每个切片都独立地重排。将[`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")的用法示例与上面的[`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")的用法示例进行比较：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每行内的值（即`axis=1`处的值）都已独立地进行了洗牌。这不是对列的“大批量”洗牌。
- en: Shuffling non-NumPy sequences
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对非NumPy序列进行洗牌
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") 对非NumPy序列起作用。也就是说，如果给出的序列不是NumPy数组，它会就地对该序列进行重排。例如，'
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Distributions
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布
- en: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | 从Beta分布中抽取样本。'
- en: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | 从二项分布中抽取样本。'
- en: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | 从卡方分布中抽取样本。'
- en: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | 从狄利克雷分布中抽取样本。'
- en: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | 从指数分布中抽取样本。'
- en: '| [`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | 从F分布中抽取样本。'
- en: '| [`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | Draw samples from a Gamma
    distribution. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | 从Gamma分布中抽取样本。'
- en: '| [`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | 从几何分布中抽取样本。'
- en: '| [`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | 从冈伯尔分布中抽取样本。'
- en: '| [`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | 从超几何分布中抽取样本。
    |'
- en: '| [`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | 从拉普拉斯或双曲线分布中抽取样本，具有指定的位置（或均值）和比例（衰减）。
    |'
- en: '| [`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | Draw samples from a logistic
    distribution. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | 从逻辑分布中抽取样本。 |'
- en: '| [`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | Draw samples from a
    log-normal distribution. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | 从对数正态分布中抽取样本。 |'
- en: '| [`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | 从对数级数分布中抽取样本。 |'
- en: '| [`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | Draw samples from a
    multinomial distribution. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | 从多项式分布中抽取样本。 |'
- en: '| [`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | Generate
    variates from a multivariate hypergeometric distribution. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | 从多元超几何分布中生成变量。
    |'
- en: '| [`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | Draw random
    samples from a multivariate normal distribution. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | 从多元正态分布中抽取随机样本。
    |'
- en: '| [`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。 |'
- en: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中抽取样本。
    |'
- en: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心F分布中抽取样本。
    |'
- en: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | 从正态（高斯）分布中抽取随机样本。 |'
- en: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | Draw samples from a Pareto II or
    Lomax distribution with specified shape. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | 从具有指定形状的帕累托II或Lomax分布中抽取样本。 |'
- en: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | Draw samples from a Poisson distribution.
    |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | 从泊松分布中抽取样本。 |'
- en: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | Draws samples in [0, 1] from a power
    distribution with positive exponent a - 1. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | 从具有正指数 a - 1 的幂分布中抽取 [0, 1] 范围内的样本。
    |'
- en: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | 从 Rayleigh 分布中抽取样本。 |'
- en: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | 从具有 mode=0 的标准柯西分布中抽取样本。 |'
- en: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | Draw
    samples from the standard exponential distribution. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | 从标准指数分布中抽取样本。
    |'
- en: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | Draw samples
    from a standard Gamma distribution. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | 从标准 Gamma
    分布中抽取样本。 |'
- en: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | Draw samples from
    a standard Normal distribution (mean=0, stdev=1). |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | 从标准正态分布（均值为0，标准差为1）中抽取样本。
    |'
- en: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | 从具有 *df* 自由度的标准学生 t 分布中抽取样本。
    |'
- en: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | 在区间 `[left,
    right]` 上从三角形分布中抽取样本。 |'
- en: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | 从均匀分布中抽取样本。 |'
- en: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | Draw samples from a von
    Mises distribution. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | 从 von Mises 分布中抽取样本。 |'
- en: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | 从 Wald 分布或反高斯分布中抽取样本。 |'
- en: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | 从 Weibull 分布中抽取样本。 |'
- en: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | 从 Zipf 分布中抽取样本。 |'
