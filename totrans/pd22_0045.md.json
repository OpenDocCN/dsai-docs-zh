["```py\nIn [1]: import pandas as pd\n\nIn [2]: pd.options.display.max_rows\nOut[2]: 15\n\nIn [3]: pd.options.display.max_rows = 999\n\nIn [4]: pd.options.display.max_rows\nOut[4]: 999 \n```", "```py\nIn [5]: pd.get_option(\"display.chop_threshold\")\n\nIn [6]: pd.set_option(\"display.chop_threshold\", 2)\n\nIn [7]: pd.get_option(\"display.chop_threshold\")\nOut[7]: 2\n\nIn [8]: pd.set_option(\"chop\", 4)\n\nIn [9]: pd.get_option(\"display.chop_threshold\")\nOut[9]: 4 \n```", "```py\nIn [10]: pd.get_option(\"max\")\n---------------------------------------------------------------------------\nOptionError  Traceback (most recent call last)\nCell In[10], line 1\n----> 1 pd.get_option(\"max\")\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:274, in CallableDynamicDoc.__call__(self, *args, **kwds)\n  273 def __call__(self, *args, **kwds) -> T:\n--> 274     return self.__func__(*args, **kwds)\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:146, in _get_option(pat, silent)\n  145 def _get_option(pat: str, silent: bool = False) -> Any:\n--> 146     key = _get_single_key(pat, silent)\n  148     # walk the nested dict\n  149     root, k = _get_root(key)\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:134, in _get_single_key(pat, silent)\n  132     raise OptionError(f\"No such keys(s): {repr(pat)}\")\n  133 if len(keys) > 1:\n--> 134     raise OptionError(\"Pattern matched multiple keys\")\n  135 key = keys[0]\n  137 if not silent:\n\nOptionError: Pattern matched multiple keys \n```", "```py\nIn [11]: pd.describe_option()\ncompute.use_bottleneck : bool\n Use the bottleneck library to accelerate if it is installed,\n the default is True\n Valid values: False,True\n [default: True] [currently: True]\ncompute.use_numba : bool\n Use the numba engine option for select operations if it is installed,\n the default is False\n Valid values: False,True\n [default: False] [currently: False]\ncompute.use_numexpr : bool\n Use the numexpr library to accelerate computation if it is installed,\n the default is True\n Valid values: False,True\n [default: True] [currently: True]\ndisplay.chop_threshold : float or None\n if set to a float value, all float values smaller than the given threshold\n will be displayed as exactly 0 by repr and friends.\n [default: None] [currently: None]\ndisplay.colheader_justify : 'left'/'right'\n Controls the justification of column headers. used by DataFrameFormatter.\n [default: right] [currently: right]\ndisplay.date_dayfirst : boolean\n When True, prints and parses dates with the day first, eg 20/01/2005\n [default: False] [currently: False]\ndisplay.date_yearfirst : boolean\n When True, prints and parses dates with the year first, eg 2005/01/20\n [default: False] [currently: False]\ndisplay.encoding : str/unicode\n Defaults to the detected encoding of the console.\n Specifies the encoding to be used for strings returned by to_string,\n these are generally strings meant to be displayed on the console.\n [default: utf-8] [currently: utf8]\ndisplay.expand_frame_repr : boolean\n Whether to print out the full DataFrame repr for wide DataFrames across\n multiple lines, `max_columns` is still respected, but the output will\n wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n [default: True] [currently: True]\ndisplay.float_format : callable\n The callable should accept a floating point number and return\n a string with the desired format of the number. This is used\n in some places like SeriesFormatter.\n See formats.format.EngFormatter for an example.\n [default: None] [currently: None]\ndisplay.html.border : int\n A ``border=value`` attribute is inserted in the ``<table>`` tag\n for the DataFrame HTML repr.\n [default: 1] [currently: 1]\ndisplay.html.table_schema : boolean\n Whether to publish a Table Schema representation for frontends\n that support it.\n (default: False)\n [default: False] [currently: False]\ndisplay.html.use_mathjax : boolean\n When True, Jupyter notebook will process table contents using MathJax,\n rendering mathematical expressions enclosed by the dollar symbol.\n (default: True)\n [default: True] [currently: True]\ndisplay.large_repr : 'truncate'/'info'\n For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n show a truncated table, or switch to the view from\n df.info() (the behaviour in earlier versions of pandas).\n [default: truncate] [currently: truncate]\ndisplay.max_categories : int\n This sets the maximum number of categories pandas should output when\n printing out a `Categorical` or a Series of dtype \"category\".\n [default: 8] [currently: 8]\ndisplay.max_columns : int\n If max_cols is exceeded, switch to truncate view. Depending on\n `large_repr`, objects are either centrally truncated or printed as\n a summary view. 'None' value means unlimited.\n\n In case python/IPython is running in a terminal and `large_repr`\n equals 'truncate' this can be set to 0 or None and pandas will auto-detect\n the width of the terminal and print a truncated object which fits\n the screen width. The IPython notebook, IPython qtconsole, or IDLE\n do not run in a terminal and hence it is not possible to do\n correct auto-detection and defaults to 20.\n [default: 0] [currently: 0]\ndisplay.max_colwidth : int or None\n The maximum width in characters of a column in the repr of\n a pandas data structure. When the column overflows, a \"...\"\n placeholder is embedded in the output. A 'None' value means unlimited.\n [default: 50] [currently: 50]\ndisplay.max_dir_items : int\n The number of items that will be added to `dir(...)`. 'None' value means\n unlimited. Because dir is cached, changing this option will not immediately\n affect already existing dataframes until a column is deleted or added.\n\n This is for instance used to suggest columns from a dataframe to tab\n completion.\n [default: 100] [currently: 100]\ndisplay.max_info_columns : int\n max_info_columns is used in DataFrame.info method to decide if\n per column information will be printed.\n [default: 100] [currently: 100]\ndisplay.max_info_rows : int\n df.info() will usually show null-counts for each column.\n For large frames this can be quite slow. max_info_rows and max_info_cols\n limit this null check only to frames with smaller dimensions than\n specified.\n [default: 1690785] [currently: 1690785]\ndisplay.max_rows : int\n If max_rows is exceeded, switch to truncate view. Depending on\n `large_repr`, objects are either centrally truncated or printed as\n a summary view. 'None' value means unlimited.\n\n In case python/IPython is running in a terminal and `large_repr`\n equals 'truncate' this can be set to 0 and pandas will auto-detect\n the height of the terminal and print a truncated object which fits\n the screen height. The IPython notebook, IPython qtconsole, or\n IDLE do not run in a terminal and hence it is not possible to do\n correct auto-detection.\n [default: 60] [currently: 60]\ndisplay.max_seq_items : int or None\n When pretty-printing a long sequence, no more then `max_seq_items`\n will be printed. If items are omitted, they will be denoted by the\n addition of \"...\" to the resulting string.\n\n If set to None, the number of items to be printed is unlimited.\n [default: 100] [currently: 100]\ndisplay.memory_usage : bool, string or None\n This specifies if the memory usage of a DataFrame should be displayed when\n df.info() is called. Valid values True,False,'deep'\n [default: True] [currently: True]\ndisplay.min_rows : int\n The numbers of rows to show in a truncated view (when `max_rows` is\n exceeded). Ignored when `max_rows` is set to None or 0\\. When set to\n None, follows the value of `max_rows`.\n [default: 10] [currently: 10]\ndisplay.multi_sparse : boolean\n \"sparsify\" MultiIndex display (don't display repeated\n elements in outer levels within groups)\n [default: True] [currently: True]\ndisplay.notebook_repr_html : boolean\n When True, IPython notebook will use html representation for\n pandas objects (if it is available).\n [default: True] [currently: True]\ndisplay.pprint_nest_depth : int\n Controls the number of nested levels to process when pretty-printing\n [default: 3] [currently: 3]\ndisplay.precision : int\n Floating point output precision in terms of number of places after the\n decimal, for regular formatting as well as scientific notation. Similar\n to ``precision`` in :meth:`numpy.set_printoptions`.\n [default: 6] [currently: 6]\ndisplay.show_dimensions : boolean or 'truncate'\n Whether to print out dimensions at the end of DataFrame repr.\n If 'truncate' is specified, only print out the dimensions if the\n frame is truncated (e.g. not display all rows and/or columns)\n [default: truncate] [currently: truncate]\ndisplay.unicode.ambiguous_as_wide : boolean\n Whether to use the Unicode East Asian Width to calculate the display text\n width.\n Enabling this may affect to the performance (default: False)\n [default: False] [currently: False]\ndisplay.unicode.east_asian_width : boolean\n Whether to use the Unicode East Asian Width to calculate the display text\n width.\n Enabling this may affect to the performance (default: False)\n [default: False] [currently: False]\ndisplay.width : int\n Width of the display in characters. In case python/IPython is running in\n a terminal this can be set to None and pandas will correctly auto-detect\n the width.\n Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n terminal and hence it is not possible to correctly detect the width.\n [default: 80] [currently: 80]\nfuture.infer_string Whether to infer sequence of str objects as pyarrow string dtype, which will be the default in pandas 3.0 (at which point this option will be deprecated).\n [default: False] [currently: False]\nfuture.no_silent_downcasting Whether to opt-in to the future behavior which will *not* silently downcast results from Series and DataFrame `where`, `mask`, and `clip` methods. Silent downcasting will be removed in pandas 3.0 (at which point this option will be deprecated).\n [default: False] [currently: False]\nio.excel.ods.reader : string\n The default Excel reader engine for 'ods' files. Available options:\n auto, odf, calamine.\n [default: auto] [currently: auto]\nio.excel.ods.writer : string\n The default Excel writer engine for 'ods' files. Available options:\n auto, odf.\n [default: auto] [currently: auto]\nio.excel.xls.reader : string\n The default Excel reader engine for 'xls' files. Available options:\n auto, xlrd, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsb.reader : string\n The default Excel reader engine for 'xlsb' files. Available options:\n auto, pyxlsb, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsm.reader : string\n The default Excel reader engine for 'xlsm' files. Available options:\n auto, xlrd, openpyxl, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsm.writer : string\n The default Excel writer engine for 'xlsm' files. Available options:\n auto, openpyxl.\n [default: auto] [currently: auto]\nio.excel.xlsx.reader : string\n The default Excel reader engine for 'xlsx' files. Available options:\n auto, xlrd, openpyxl, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsx.writer : string\n The default Excel writer engine for 'xlsx' files. Available options:\n auto, openpyxl, xlsxwriter.\n [default: auto] [currently: auto]\nio.hdf.default_format : format\n default format writing format, if None, then\n put will default to 'fixed' and append will default to 'table'\n [default: None] [currently: None]\nio.hdf.dropna_table : boolean\n drop ALL nan rows when appending to a table\n [default: False] [currently: False]\nio.parquet.engine : string\n The default parquet reader/writer engine. Available options:\n 'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n [default: auto] [currently: auto]\nio.sql.engine : string\n The default sql reader/writer engine. Available options:\n 'auto', 'sqlalchemy', the default is 'auto'\n [default: auto] [currently: auto]\nmode.chained_assignment : string\n Raise an exception, warn, or no action if trying to use chained assignment,\n The default is warn\n [default: warn] [currently: warn]\nmode.copy_on_write : bool\n Use new copy-view behaviour using Copy-on-Write. Defaults to False,\n unless overridden by the 'PANDAS_COPY_ON_WRITE' environment variable\n (if set to \"1\" for True, needs to be set before pandas is imported).\n [default: False] [currently: False]\nmode.data_manager : string\n Internal data manager type; can be \"block\" or \"array\". Defaults to \"block\",\n unless overridden by the 'PANDAS_DATA_MANAGER' environment variable (needs\n to be set before pandas is imported).\n [default: block] [currently: block]\n (Deprecated, use `` instead.)\nmode.sim_interactive : boolean\n Whether to simulate interactive mode for purposes of testing\n [default: False] [currently: False]\nmode.string_storage : string\n The default storage for StringDtype. This option is ignored if\n ``future.infer_string`` is set to True.\n [default: python] [currently: python]\nmode.use_inf_as_na : boolean\n True means treat None, NaN, INF, -INF as NA (old way),\n False means None and NaN are null, but INF, -INF are not NA\n (new way).\n\n This option is deprecated in pandas 2.1.0 and will be removed in 3.0.\n [default: False] [currently: False]\n (Deprecated, use `` instead.)\nplotting.backend : str\n The plotting backend to use. The default value is \"matplotlib\", the\n backend provided with pandas. Other backends can be specified by\n providing the name of the module that implements the backend.\n [default: matplotlib] [currently: matplotlib]\nplotting.matplotlib.register_converters : bool or 'auto'.\n Whether to register converters with matplotlib's units registry for\n dates, times, datetimes, and Periods. Toggling to False will remove\n the converters, restoring any converters that pandas overwrote.\n [default: auto] [currently: auto]\nstyler.format.decimal : str\n The character representation for the decimal separator for floats and complex.\n [default: .] [currently: .]\nstyler.format.escape : str, optional\n Whether to escape certain characters according to the given context; html or latex.\n [default: None] [currently: None]\nstyler.format.formatter : str, callable, dict, optional\n A formatter object to be used as default within ``Styler.format``.\n [default: None] [currently: None]\nstyler.format.na_rep : str, optional\n The string representation for values identified as missing.\n [default: None] [currently: None]\nstyler.format.precision : int\n The precision for floats and complex numbers.\n [default: 6] [currently: 6]\nstyler.format.thousands : str, optional\n The character representation for thousands separator for floats, int and complex.\n [default: None] [currently: None]\nstyler.html.mathjax : bool\n If False will render special CSS classes to table attributes that indicate Mathjax\n will not be used in Jupyter Notebook.\n [default: True] [currently: True]\nstyler.latex.environment : str\n The environment to replace ``\\begin{table}``. If \"longtable\" is used results\n in a specific longtable environment format.\n [default: None] [currently: None]\nstyler.latex.hrules : bool\n Whether to add horizontal rules on top and bottom and below the headers.\n [default: False] [currently: False]\nstyler.latex.multicol_align : {\"r\", \"c\", \"l\", \"naive-l\", \"naive-r\"}\n The specifier for horizontal alignment of sparsified LaTeX multicolumns. Pipe\n decorators can also be added to non-naive values to draw vertical\n rules, e.g. \"\\|r\" will draw a rule on the left side of right aligned merged cells.\n [default: r] [currently: r]\nstyler.latex.multirow_align : {\"c\", \"t\", \"b\"}\n The specifier for vertical alignment of sparsified LaTeX multirows.\n [default: c] [currently: c]\nstyler.render.encoding : str\n The encoding used for output HTML and LaTeX files.\n [default: utf-8] [currently: utf-8]\nstyler.render.max_columns : int, optional\n The maximum number of columns that will be rendered. May still be reduced to\n satisfy ``max_elements``, which takes precedence.\n [default: None] [currently: None]\nstyler.render.max_elements : int\n The maximum number of data-cell (<td>) elements that will be rendered before\n trimming will occur over columns, rows or both if needed.\n [default: 262144] [currently: 262144]\nstyler.render.max_rows : int, optional\n The maximum number of rows that will be rendered. May still be reduced to\n satisfy ``max_elements``, which takes precedence.\n [default: None] [currently: None]\nstyler.render.repr : str\n Determine which output to use in Jupyter Notebook in {\"html\", \"latex\"}.\n [default: html] [currently: html]\nstyler.sparse.columns : bool\n Whether to sparsify the display of hierarchical columns. Setting to False will\n display each explicit level element in a hierarchical key for each column.\n [default: True] [currently: True]\nstyler.sparse.index : bool\n Whether to sparsify the display of a hierarchical index. Setting to False will\n display each explicit level element in a hierarchical key for each row.\n [default: True] [currently: True] \n```", "```py\nIn [12]: pd.get_option(\"mode.sim_interactive\")\nOut[12]: False\n\nIn [13]: pd.set_option(\"mode.sim_interactive\", True)\n\nIn [14]: pd.get_option(\"mode.sim_interactive\")\nOut[14]: True \n```", "```py\nIn [15]: pd.get_option(\"display.max_rows\")\nOut[15]: 60\n\nIn [16]: pd.set_option(\"display.max_rows\", 999)\n\nIn [17]: pd.get_option(\"display.max_rows\")\nOut[17]: 999\n\nIn [18]: pd.reset_option(\"display.max_rows\")\n\nIn [19]: pd.get_option(\"display.max_rows\")\nOut[19]: 60 \n```", "```py\nIn [20]: pd.reset_option(\"^display\") \n```", "```py\nIn [21]: with pd.option_context(\"display.max_rows\", 10, \"display.max_columns\", 5):\n ....:    print(pd.get_option(\"display.max_rows\"))\n ....:    print(pd.get_option(\"display.max_columns\"))\n ....: \n10\n5\n\nIn [22]: print(pd.get_option(\"display.max_rows\"))\n60\n\nIn [23]: print(pd.get_option(\"display.max_columns\"))\n0 \n```", "```py\n$IPYTHONDIR/profile_default/startup \n```", "```py\nimport pandas as pd\n\npd.set_option(\"display.max_rows\", 999)\npd.set_option(\"display.precision\", 5) \n```", "```py\nIn [24]: df = pd.DataFrame(np.random.randn(7, 2))\n\nIn [25]: pd.set_option(\"display.max_rows\", 7)\n\nIn [26]: df\nOut[26]: \n 0         1\n0  0.469112 -0.282863\n1 -1.509059 -1.135632\n2  1.212112 -0.173215\n3  0.119209 -1.044236\n4 -0.861849 -2.104569\n5 -0.494929  1.071804\n6  0.721555 -0.706771\n\nIn [27]: pd.set_option(\"display.max_rows\", 5)\n\nIn [28]: df\nOut[28]: \n 0         1\n0   0.469112 -0.282863\n1  -1.509059 -1.135632\n..       ...       ...\n5  -0.494929  1.071804\n6   0.721555 -0.706771\n\n[7 rows x 2 columns]\n\nIn [29]: pd.reset_option(\"display.max_rows\") \n```", "```py\nIn [30]: pd.set_option(\"display.max_rows\", 8)\n\nIn [31]: pd.set_option(\"display.min_rows\", 4)\n\n# below max_rows -> all rows shown\nIn [32]: df = pd.DataFrame(np.random.randn(7, 2))\n\nIn [33]: df\nOut[33]: \n 0         1\n0 -1.039575  0.271860\n1 -0.424972  0.567020\n2  0.276232 -1.087401\n3 -0.673690  0.113648\n4 -1.478427  0.524988\n5  0.404705  0.577046\n6 -1.715002 -1.039268\n\n# above max_rows -> only min_rows (4) rows shown\nIn [34]: df = pd.DataFrame(np.random.randn(9, 2))\n\nIn [35]: df\nOut[35]: \n 0         1\n0  -0.370647 -1.157892\n1  -1.344312  0.844885\n..       ...       ...\n7   0.276662 -0.472035\n8  -0.013960 -0.362543\n\n[9 rows x 2 columns]\n\nIn [36]: pd.reset_option(\"display.max_rows\")\n\nIn [37]: pd.reset_option(\"display.min_rows\") \n```", "```py\nIn [38]: df = pd.DataFrame(np.random.randn(5, 10))\n\nIn [39]: pd.set_option(\"expand_frame_repr\", True)\n\nIn [40]: df\nOut[40]: \n 0         1         2  ...         7         8         9\n0 -0.006154 -0.923061  0.895717  ...  1.340309 -1.170299 -0.226169\n1  0.410835  0.813850  0.132003  ... -1.436737 -1.413681  1.607920\n2  1.024180  0.569605  0.875906  ... -0.078638  0.545952 -1.219217\n3 -1.226825  0.769804 -1.281247  ...  0.341734  0.959726 -1.110336\n4 -0.619976  0.149748 -0.732339  ...  0.301624 -2.179861 -1.369849\n\n[5 rows x 10 columns]\n\nIn [41]: pd.set_option(\"expand_frame_repr\", False)\n\nIn [42]: df\nOut[42]: \n 0         1         2         3         4         5         6         7         8         9\n0 -0.006154 -0.923061  0.895717  0.805244 -1.206412  2.565646  1.431256  1.340309 -1.170299 -0.226169\n1  0.410835  0.813850  0.132003 -0.827317 -0.076467 -1.187678  1.130127 -1.436737 -1.413681  1.607920\n2  1.024180  0.569605  0.875906 -2.211372  0.974466 -2.006747 -0.410001 -0.078638  0.545952 -1.219217\n3 -1.226825  0.769804 -1.281247 -0.727707 -0.121306 -0.097883  0.695775  0.341734  0.959726 -1.110336\n4 -0.619976  0.149748 -0.732339  0.687738  0.176444  0.403310 -0.154951  0.301624 -2.179861 -1.369849\n\nIn [43]: pd.reset_option(\"expand_frame_repr\") \n```", "```py\nIn [44]: df = pd.DataFrame(np.random.randn(10, 10))\n\nIn [45]: pd.set_option(\"display.max_rows\", 5)\n\nIn [46]: pd.set_option(\"large_repr\", \"truncate\")\n\nIn [47]: df\nOut[47]: \n 0         1         2  ...         7         8         9\n0  -0.954208  1.462696 -1.743161  ...  0.995761  2.396780  0.014871\n1   3.357427 -0.317441 -1.236269  ...  0.380396  0.084844  0.432390\n..       ...       ...       ...  ...       ...       ...       ...\n8  -0.303421 -0.858447  0.306996  ...  0.476720  0.473424 -0.242861\n9  -0.014805 -0.284319  0.650776  ...  1.613616  0.464000  0.227371\n\n[10 rows x 10 columns]\n\nIn [48]: pd.set_option(\"large_repr\", \"info\")\n\nIn [49]: df\nOut[49]: \n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       10 non-null     float64\n 1   1       10 non-null     float64\n 2   2       10 non-null     float64\n 3   3       10 non-null     float64\n 4   4       10 non-null     float64\n 5   5       10 non-null     float64\n 6   6       10 non-null     float64\n 7   7       10 non-null     float64\n 8   8       10 non-null     float64\n 9   9       10 non-null     float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [50]: pd.reset_option(\"large_repr\")\n\nIn [51]: pd.reset_option(\"display.max_rows\") \n```", "```py\nIn [52]: df = pd.DataFrame(\n ....:    np.array(\n ....:        [\n ....:            [\"foo\", \"bar\", \"bim\", \"uncomfortably long string\"],\n ....:            [\"horse\", \"cow\", \"banana\", \"apple\"],\n ....:        ]\n ....:    )\n ....: )\n ....: \n\nIn [53]: pd.set_option(\"max_colwidth\", 40)\n\nIn [54]: df\nOut[54]: \n 0    1       2                          3\n0    foo  bar     bim  uncomfortably long string\n1  horse  cow  banana                      apple\n\nIn [55]: pd.set_option(\"max_colwidth\", 6)\n\nIn [56]: df\nOut[56]: \n 0    1      2      3\n0    foo  bar    bim  un...\n1  horse  cow  ba...  apple\n\nIn [57]: pd.reset_option(\"max_colwidth\") \n```", "```py\nIn [58]: df = pd.DataFrame(np.random.randn(10, 10))\n\nIn [59]: pd.set_option(\"max_info_columns\", 11)\n\nIn [60]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       10 non-null     float64\n 1   1       10 non-null     float64\n 2   2       10 non-null     float64\n 3   3       10 non-null     float64\n 4   4       10 non-null     float64\n 5   5       10 non-null     float64\n 6   6       10 non-null     float64\n 7   7       10 non-null     float64\n 8   8       10 non-null     float64\n 9   9       10 non-null     float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [61]: pd.set_option(\"max_info_columns\", 5)\n\nIn [62]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nColumns: 10 entries, 0 to 9\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [63]: pd.reset_option(\"max_info_columns\") \n```", "```py\nIn [64]: df = pd.DataFrame(np.random.choice([0, 1, np.nan], size=(10, 10)))\n\nIn [65]: df\nOut[65]: \n 0    1    2    3    4    5    6    7    8    9\n0  0.0  NaN  1.0  NaN  NaN  0.0  NaN  0.0  NaN  1.0\n1  1.0  NaN  1.0  1.0  1.0  1.0  NaN  0.0  0.0  NaN\n2  0.0  NaN  1.0  0.0  0.0  NaN  NaN  NaN  NaN  0.0\n3  NaN  NaN  NaN  0.0  1.0  1.0  NaN  1.0  NaN  1.0\n4  0.0  NaN  NaN  NaN  0.0  NaN  NaN  NaN  1.0  0.0\n5  0.0  1.0  1.0  1.0  1.0  0.0  NaN  NaN  1.0  0.0\n6  1.0  1.0  1.0  NaN  1.0  NaN  1.0  0.0  NaN  NaN\n7  0.0  0.0  1.0  0.0  1.0  0.0  1.0  1.0  0.0  NaN\n8  NaN  NaN  NaN  0.0  NaN  NaN  NaN  NaN  1.0  NaN\n9  0.0  NaN  0.0  NaN  NaN  0.0  NaN  1.0  1.0  0.0\n\nIn [66]: pd.set_option(\"max_info_rows\", 11)\n\nIn [67]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       8 non-null      float64\n 1   1       3 non-null      float64\n 2   2       7 non-null      float64\n 3   3       6 non-null      float64\n 4   4       7 non-null      float64\n 5   5       6 non-null      float64\n 6   6       2 non-null      float64\n 7   7       6 non-null      float64\n 8   8       6 non-null      float64\n 9   9       6 non-null      float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [68]: pd.set_option(\"max_info_rows\", 5)\n\nIn [69]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Dtype \n---  ------  ----- \n 0   0       float64\n 1   1       float64\n 2   2       float64\n 3   3       float64\n 4   4       float64\n 5   5       float64\n 6   6       float64\n 7   7       float64\n 8   8       float64\n 9   9       float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [70]: pd.reset_option(\"max_info_rows\") \n```", "```py\nIn [71]: df = pd.DataFrame(np.random.randn(5, 5))\n\nIn [72]: pd.set_option(\"display.precision\", 7)\n\nIn [73]: df\nOut[73]: \n 0          1          2          3          4\n0 -1.1506406 -0.7983341 -0.5576966  0.3813531  1.3371217\n1 -1.5310949  1.3314582 -0.5713290 -0.0266708 -1.0856630\n2 -1.1147378 -0.0582158 -0.4867681  1.6851483  0.1125723\n3 -1.4953086  0.8984347 -0.1482168 -1.5960698  0.1596530\n4  0.2621358  0.0362196  0.1847350 -0.2550694 -0.2710197\n\nIn [74]: pd.set_option(\"display.precision\", 4)\n\nIn [75]: df\nOut[75]: \n 0       1       2       3       4\n0 -1.1506 -0.7983 -0.5577  0.3814  1.3371\n1 -1.5311  1.3315 -0.5713 -0.0267 -1.0857\n2 -1.1147 -0.0582 -0.4868  1.6851  0.1126\n3 -1.4953  0.8984 -0.1482 -1.5961  0.1597\n4  0.2621  0.0362  0.1847 -0.2551 -0.2710 \n```", "```py\nIn [76]: df = pd.DataFrame(np.random.randn(6, 6))\n\nIn [77]: pd.set_option(\"chop_threshold\", 0)\n\nIn [78]: df\nOut[78]: \n 0       1       2       3       4       5\n0  1.2884  0.2946 -1.1658  0.8470 -0.6856  0.6091\n1 -0.3040  0.6256 -0.0593  0.2497  1.1039 -1.0875\n2  1.9980 -0.2445  0.1362  0.8863 -1.3507 -0.8863\n3 -1.0133  1.9209 -0.3882 -2.3144  0.6655  0.4026\n4  0.3996 -1.7660  0.8504  0.3881  0.9923  0.7441\n5 -0.7398 -1.0549 -0.1796  0.6396  1.5850  1.9067\n\nIn [79]: pd.set_option(\"chop_threshold\", 0.5)\n\nIn [80]: df\nOut[80]: \n 0       1       2       3       4       5\n0  1.2884  0.0000 -1.1658  0.8470 -0.6856  0.6091\n1  0.0000  0.6256  0.0000  0.0000  1.1039 -1.0875\n2  1.9980  0.0000  0.0000  0.8863 -1.3507 -0.8863\n3 -1.0133  1.9209  0.0000 -2.3144  0.6655  0.0000\n4  0.0000 -1.7660  0.8504  0.0000  0.9923  0.7441\n5 -0.7398 -1.0549  0.0000  0.6396  1.5850  1.9067\n\nIn [81]: pd.reset_option(\"chop_threshold\") \n```", "```py\nIn [82]: df = pd.DataFrame(\n ....:    np.array([np.random.randn(6), np.random.randint(1, 9, 6) * 0.1, np.zeros(6)]).T,\n ....:    columns=[\"A\", \"B\", \"C\"],\n ....:    dtype=\"float\",\n ....: )\n ....: \n\nIn [83]: pd.set_option(\"colheader_justify\", \"right\")\n\nIn [84]: df\nOut[84]: \n A    B    C\n0  0.1040  0.1  0.0\n1  0.1741  0.5  0.0\n2 -0.4395  0.4  0.0\n3 -0.7413  0.8  0.0\n4 -0.0797  0.4  0.0\n5 -0.9229  0.3  0.0\n\nIn [85]: pd.set_option(\"colheader_justify\", \"left\")\n\nIn [86]: df\nOut[86]: \n A       B    C \n0  0.1040  0.1  0.0\n1  0.1741  0.5  0.0\n2 -0.4395  0.4  0.0\n3 -0.7413  0.8  0.0\n4 -0.0797  0.4  0.0\n5 -0.9229  0.3  0.0\n\nIn [87]: pd.reset_option(\"colheader_justify\") \n```", "```py\nIn [88]: import numpy as np\n\nIn [89]: pd.set_eng_float_format(accuracy=3, use_eng_prefix=True)\n\nIn [90]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [91]: s / 1.0e3\nOut[91]: \na    303.638u\nb   -721.084u\nc   -622.696u\nd    648.250u\ne     -1.945m\ndtype: float64\n\nIn [92]: s / 1.0e6\nOut[92]: \na    303.638n\nb   -721.084n\nc   -622.696n\nd    648.250n\ne     -1.945u\ndtype: float64 \n```", "```py\nIn [93]: df = pd.DataFrame({\"\u56fd\u7c4d\": [\"UK\", \"\u65e5\u672c\"], \"\u540d\u524d\": [\"Alice\", \"\u3057\u306e\u3076\"]})\n\nIn [94]: df\nOut[94]: \n \u56fd\u7c4d     \u540d\u524d\n0  UK  Alice\n1  \u65e5\u672c    \u3057\u306e\u3076 \n```", "```py\nIn [95]: pd.set_option(\"display.unicode.east_asian_width\", True)\n\nIn [96]: df\nOut[96]: \n \u56fd\u7c4d    \u540d\u524d\n0    UK   Alice\n1  \u65e5\u672c  \u3057\u306e\u3076 \n```", "```py\nIn [97]: df = pd.DataFrame({\"a\": [\"xxx\", \"\u00a1\u00a1\"], \"b\": [\"yyy\", \"\u00a1\u00a1\"]})\n\nIn [98]: df\nOut[98]: \n a    b\n0  xxx  yyy\n1   \u00a1\u00a1   \u00a1\u00a1 \n```", "```py\nIn [99]: pd.set_option(\"display.unicode.ambiguous_as_wide\", True)\n\nIn [100]: df\nOut[100]: \n a     b\n0   xxx   yyy\n1  \u00a1\u00a1  \u00a1\u00a1 \n```", "```py\nIn [101]: pd.set_option(\"display.html.table_schema\", True) \n```", "```py\nIn [1]: import pandas as pd\n\nIn [2]: pd.options.display.max_rows\nOut[2]: 15\n\nIn [3]: pd.options.display.max_rows = 999\n\nIn [4]: pd.options.display.max_rows\nOut[4]: 999 \n```", "```py\nIn [5]: pd.get_option(\"display.chop_threshold\")\n\nIn [6]: pd.set_option(\"display.chop_threshold\", 2)\n\nIn [7]: pd.get_option(\"display.chop_threshold\")\nOut[7]: 2\n\nIn [8]: pd.set_option(\"chop\", 4)\n\nIn [9]: pd.get_option(\"display.chop_threshold\")\nOut[9]: 4 \n```", "```py\nIn [10]: pd.get_option(\"max\")\n---------------------------------------------------------------------------\nOptionError  Traceback (most recent call last)\nCell In[10], line 1\n----> 1 pd.get_option(\"max\")\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:274, in CallableDynamicDoc.__call__(self, *args, **kwds)\n  273 def __call__(self, *args, **kwds) -> T:\n--> 274     return self.__func__(*args, **kwds)\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:146, in _get_option(pat, silent)\n  145 def _get_option(pat: str, silent: bool = False) -> Any:\n--> 146     key = _get_single_key(pat, silent)\n  148     # walk the nested dict\n  149     root, k = _get_root(key)\n\nFile ~/work/pandas/pandas/pandas/_config/config.py:134, in _get_single_key(pat, silent)\n  132     raise OptionError(f\"No such keys(s): {repr(pat)}\")\n  133 if len(keys) > 1:\n--> 134     raise OptionError(\"Pattern matched multiple keys\")\n  135 key = keys[0]\n  137 if not silent:\n\nOptionError: Pattern matched multiple keys \n```", "```py\nIn [11]: pd.describe_option()\ncompute.use_bottleneck : bool\n Use the bottleneck library to accelerate if it is installed,\n the default is True\n Valid values: False,True\n [default: True] [currently: True]\ncompute.use_numba : bool\n Use the numba engine option for select operations if it is installed,\n the default is False\n Valid values: False,True\n [default: False] [currently: False]\ncompute.use_numexpr : bool\n Use the numexpr library to accelerate computation if it is installed,\n the default is True\n Valid values: False,True\n [default: True] [currently: True]\ndisplay.chop_threshold : float or None\n if set to a float value, all float values smaller than the given threshold\n will be displayed as exactly 0 by repr and friends.\n [default: None] [currently: None]\ndisplay.colheader_justify : 'left'/'right'\n Controls the justification of column headers. used by DataFrameFormatter.\n [default: right] [currently: right]\ndisplay.date_dayfirst : boolean\n When True, prints and parses dates with the day first, eg 20/01/2005\n [default: False] [currently: False]\ndisplay.date_yearfirst : boolean\n When True, prints and parses dates with the year first, eg 2005/01/20\n [default: False] [currently: False]\ndisplay.encoding : str/unicode\n Defaults to the detected encoding of the console.\n Specifies the encoding to be used for strings returned by to_string,\n these are generally strings meant to be displayed on the console.\n [default: utf-8] [currently: utf8]\ndisplay.expand_frame_repr : boolean\n Whether to print out the full DataFrame repr for wide DataFrames across\n multiple lines, `max_columns` is still respected, but the output will\n wrap-around across multiple \"pages\" if its width exceeds `display.width`.\n [default: True] [currently: True]\ndisplay.float_format : callable\n The callable should accept a floating point number and return\n a string with the desired format of the number. This is used\n in some places like SeriesFormatter.\n See formats.format.EngFormatter for an example.\n [default: None] [currently: None]\ndisplay.html.border : int\n A ``border=value`` attribute is inserted in the ``<table>`` tag\n for the DataFrame HTML repr.\n [default: 1] [currently: 1]\ndisplay.html.table_schema : boolean\n Whether to publish a Table Schema representation for frontends\n that support it.\n (default: False)\n [default: False] [currently: False]\ndisplay.html.use_mathjax : boolean\n When True, Jupyter notebook will process table contents using MathJax,\n rendering mathematical expressions enclosed by the dollar symbol.\n (default: True)\n [default: True] [currently: True]\ndisplay.large_repr : 'truncate'/'info'\n For DataFrames exceeding max_rows/max_cols, the repr (and HTML repr) can\n show a truncated table, or switch to the view from\n df.info() (the behaviour in earlier versions of pandas).\n [default: truncate] [currently: truncate]\ndisplay.max_categories : int\n This sets the maximum number of categories pandas should output when\n printing out a `Categorical` or a Series of dtype \"category\".\n [default: 8] [currently: 8]\ndisplay.max_columns : int\n If max_cols is exceeded, switch to truncate view. Depending on\n `large_repr`, objects are either centrally truncated or printed as\n a summary view. 'None' value means unlimited.\n\n In case python/IPython is running in a terminal and `large_repr`\n equals 'truncate' this can be set to 0 or None and pandas will auto-detect\n the width of the terminal and print a truncated object which fits\n the screen width. The IPython notebook, IPython qtconsole, or IDLE\n do not run in a terminal and hence it is not possible to do\n correct auto-detection and defaults to 20.\n [default: 0] [currently: 0]\ndisplay.max_colwidth : int or None\n The maximum width in characters of a column in the repr of\n a pandas data structure. When the column overflows, a \"...\"\n placeholder is embedded in the output. A 'None' value means unlimited.\n [default: 50] [currently: 50]\ndisplay.max_dir_items : int\n The number of items that will be added to `dir(...)`. 'None' value means\n unlimited. Because dir is cached, changing this option will not immediately\n affect already existing dataframes until a column is deleted or added.\n\n This is for instance used to suggest columns from a dataframe to tab\n completion.\n [default: 100] [currently: 100]\ndisplay.max_info_columns : int\n max_info_columns is used in DataFrame.info method to decide if\n per column information will be printed.\n [default: 100] [currently: 100]\ndisplay.max_info_rows : int\n df.info() will usually show null-counts for each column.\n For large frames this can be quite slow. max_info_rows and max_info_cols\n limit this null check only to frames with smaller dimensions than\n specified.\n [default: 1690785] [currently: 1690785]\ndisplay.max_rows : int\n If max_rows is exceeded, switch to truncate view. Depending on\n `large_repr`, objects are either centrally truncated or printed as\n a summary view. 'None' value means unlimited.\n\n In case python/IPython is running in a terminal and `large_repr`\n equals 'truncate' this can be set to 0 and pandas will auto-detect\n the height of the terminal and print a truncated object which fits\n the screen height. The IPython notebook, IPython qtconsole, or\n IDLE do not run in a terminal and hence it is not possible to do\n correct auto-detection.\n [default: 60] [currently: 60]\ndisplay.max_seq_items : int or None\n When pretty-printing a long sequence, no more then `max_seq_items`\n will be printed. If items are omitted, they will be denoted by the\n addition of \"...\" to the resulting string.\n\n If set to None, the number of items to be printed is unlimited.\n [default: 100] [currently: 100]\ndisplay.memory_usage : bool, string or None\n This specifies if the memory usage of a DataFrame should be displayed when\n df.info() is called. Valid values True,False,'deep'\n [default: True] [currently: True]\ndisplay.min_rows : int\n The numbers of rows to show in a truncated view (when `max_rows` is\n exceeded). Ignored when `max_rows` is set to None or 0\\. When set to\n None, follows the value of `max_rows`.\n [default: 10] [currently: 10]\ndisplay.multi_sparse : boolean\n \"sparsify\" MultiIndex display (don't display repeated\n elements in outer levels within groups)\n [default: True] [currently: True]\ndisplay.notebook_repr_html : boolean\n When True, IPython notebook will use html representation for\n pandas objects (if it is available).\n [default: True] [currently: True]\ndisplay.pprint_nest_depth : int\n Controls the number of nested levels to process when pretty-printing\n [default: 3] [currently: 3]\ndisplay.precision : int\n Floating point output precision in terms of number of places after the\n decimal, for regular formatting as well as scientific notation. Similar\n to ``precision`` in :meth:`numpy.set_printoptions`.\n [default: 6] [currently: 6]\ndisplay.show_dimensions : boolean or 'truncate'\n Whether to print out dimensions at the end of DataFrame repr.\n If 'truncate' is specified, only print out the dimensions if the\n frame is truncated (e.g. not display all rows and/or columns)\n [default: truncate] [currently: truncate]\ndisplay.unicode.ambiguous_as_wide : boolean\n Whether to use the Unicode East Asian Width to calculate the display text\n width.\n Enabling this may affect to the performance (default: False)\n [default: False] [currently: False]\ndisplay.unicode.east_asian_width : boolean\n Whether to use the Unicode East Asian Width to calculate the display text\n width.\n Enabling this may affect to the performance (default: False)\n [default: False] [currently: False]\ndisplay.width : int\n Width of the display in characters. In case python/IPython is running in\n a terminal this can be set to None and pandas will correctly auto-detect\n the width.\n Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n terminal and hence it is not possible to correctly detect the width.\n [default: 80] [currently: 80]\nfuture.infer_string Whether to infer sequence of str objects as pyarrow string dtype, which will be the default in pandas 3.0 (at which point this option will be deprecated).\n [default: False] [currently: False]\nfuture.no_silent_downcasting Whether to opt-in to the future behavior which will *not* silently downcast results from Series and DataFrame `where`, `mask`, and `clip` methods. Silent downcasting will be removed in pandas 3.0 (at which point this option will be deprecated).\n [default: False] [currently: False]\nio.excel.ods.reader : string\n The default Excel reader engine for 'ods' files. Available options:\n auto, odf, calamine.\n [default: auto] [currently: auto]\nio.excel.ods.writer : string\n The default Excel writer engine for 'ods' files. Available options:\n auto, odf.\n [default: auto] [currently: auto]\nio.excel.xls.reader : string\n The default Excel reader engine for 'xls' files. Available options:\n auto, xlrd, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsb.reader : string\n The default Excel reader engine for 'xlsb' files. Available options:\n auto, pyxlsb, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsm.reader : string\n The default Excel reader engine for 'xlsm' files. Available options:\n auto, xlrd, openpyxl, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsm.writer : string\n The default Excel writer engine for 'xlsm' files. Available options:\n auto, openpyxl.\n [default: auto] [currently: auto]\nio.excel.xlsx.reader : string\n The default Excel reader engine for 'xlsx' files. Available options:\n auto, xlrd, openpyxl, calamine.\n [default: auto] [currently: auto]\nio.excel.xlsx.writer : string\n The default Excel writer engine for 'xlsx' files. Available options:\n auto, openpyxl, xlsxwriter.\n [default: auto] [currently: auto]\nio.hdf.default_format : format\n default format writing format, if None, then\n put will default to 'fixed' and append will default to 'table'\n [default: None] [currently: None]\nio.hdf.dropna_table : boolean\n drop ALL nan rows when appending to a table\n [default: False] [currently: False]\nio.parquet.engine : string\n The default parquet reader/writer engine. Available options:\n 'auto', 'pyarrow', 'fastparquet', the default is 'auto'\n [default: auto] [currently: auto]\nio.sql.engine : string\n The default sql reader/writer engine. Available options:\n 'auto', 'sqlalchemy', the default is 'auto'\n [default: auto] [currently: auto]\nmode.chained_assignment : string\n Raise an exception, warn, or no action if trying to use chained assignment,\n The default is warn\n [default: warn] [currently: warn]\nmode.copy_on_write : bool\n Use new copy-view behaviour using Copy-on-Write. Defaults to False,\n unless overridden by the 'PANDAS_COPY_ON_WRITE' environment variable\n (if set to \"1\" for True, needs to be set before pandas is imported).\n [default: False] [currently: False]\nmode.data_manager : string\n Internal data manager type; can be \"block\" or \"array\". Defaults to \"block\",\n unless overridden by the 'PANDAS_DATA_MANAGER' environment variable (needs\n to be set before pandas is imported).\n [default: block] [currently: block]\n (Deprecated, use `` instead.)\nmode.sim_interactive : boolean\n Whether to simulate interactive mode for purposes of testing\n [default: False] [currently: False]\nmode.string_storage : string\n The default storage for StringDtype. This option is ignored if\n ``future.infer_string`` is set to True.\n [default: python] [currently: python]\nmode.use_inf_as_na : boolean\n True means treat None, NaN, INF, -INF as NA (old way),\n False means None and NaN are null, but INF, -INF are not NA\n (new way).\n\n This option is deprecated in pandas 2.1.0 and will be removed in 3.0.\n [default: False] [currently: False]\n (Deprecated, use `` instead.)\nplotting.backend : str\n The plotting backend to use. The default value is \"matplotlib\", the\n backend provided with pandas. Other backends can be specified by\n providing the name of the module that implements the backend.\n [default: matplotlib] [currently: matplotlib]\nplotting.matplotlib.register_converters : bool or 'auto'.\n Whether to register converters with matplotlib's units registry for\n dates, times, datetimes, and Periods. Toggling to False will remove\n the converters, restoring any converters that pandas overwrote.\n [default: auto] [currently: auto]\nstyler.format.decimal : str\n The character representation for the decimal separator for floats and complex.\n [default: .] [currently: .]\nstyler.format.escape : str, optional\n Whether to escape certain characters according to the given context; html or latex.\n [default: None] [currently: None]\nstyler.format.formatter : str, callable, dict, optional\n A formatter object to be used as default within ``Styler.format``.\n [default: None] [currently: None]\nstyler.format.na_rep : str, optional\n The string representation for values identified as missing.\n [default: None] [currently: None]\nstyler.format.precision : int\n The precision for floats and complex numbers.\n [default: 6] [currently: 6]\nstyler.format.thousands : str, optional\n The character representation for thousands separator for floats, int and complex.\n [default: None] [currently: None]\nstyler.html.mathjax : bool\n If False will render special CSS classes to table attributes that indicate Mathjax\n will not be used in Jupyter Notebook.\n [default: True] [currently: True]\nstyler.latex.environment : str\n The environment to replace ``\\begin{table}``. If \"longtable\" is used results\n in a specific longtable environment format.\n [default: None] [currently: None]\nstyler.latex.hrules : bool\n Whether to add horizontal rules on top and bottom and below the headers.\n [default: False] [currently: False]\nstyler.latex.multicol_align : {\"r\", \"c\", \"l\", \"naive-l\", \"naive-r\"}\n The specifier for horizontal alignment of sparsified LaTeX multicolumns. Pipe\n decorators can also be added to non-naive values to draw vertical\n rules, e.g. \"\\|r\" will draw a rule on the left side of right aligned merged cells.\n [default: r] [currently: r]\nstyler.latex.multirow_align : {\"c\", \"t\", \"b\"}\n The specifier for vertical alignment of sparsified LaTeX multirows.\n [default: c] [currently: c]\nstyler.render.encoding : str\n The encoding used for output HTML and LaTeX files.\n [default: utf-8] [currently: utf-8]\nstyler.render.max_columns : int, optional\n The maximum number of columns that will be rendered. May still be reduced to\n satisfy ``max_elements``, which takes precedence.\n [default: None] [currently: None]\nstyler.render.max_elements : int\n The maximum number of data-cell (<td>) elements that will be rendered before\n trimming will occur over columns, rows or both if needed.\n [default: 262144] [currently: 262144]\nstyler.render.max_rows : int, optional\n The maximum number of rows that will be rendered. May still be reduced to\n satisfy ``max_elements``, which takes precedence.\n [default: None] [currently: None]\nstyler.render.repr : str\n Determine which output to use in Jupyter Notebook in {\"html\", \"latex\"}.\n [default: html] [currently: html]\nstyler.sparse.columns : bool\n Whether to sparsify the display of hierarchical columns. Setting to False will\n display each explicit level element in a hierarchical key for each column.\n [default: True] [currently: True]\nstyler.sparse.index : bool\n Whether to sparsify the display of a hierarchical index. Setting to False will\n display each explicit level element in a hierarchical key for each row.\n [default: True] [currently: True] \n```", "```py\nIn [12]: pd.get_option(\"mode.sim_interactive\")\nOut[12]: False\n\nIn [13]: pd.set_option(\"mode.sim_interactive\", True)\n\nIn [14]: pd.get_option(\"mode.sim_interactive\")\nOut[14]: True \n```", "```py\nIn [15]: pd.get_option(\"display.max_rows\")\nOut[15]: 60\n\nIn [16]: pd.set_option(\"display.max_rows\", 999)\n\nIn [17]: pd.get_option(\"display.max_rows\")\nOut[17]: 999\n\nIn [18]: pd.reset_option(\"display.max_rows\")\n\nIn [19]: pd.get_option(\"display.max_rows\")\nOut[19]: 60 \n```", "```py\nIn [20]: pd.reset_option(\"^display\") \n```", "```py\nIn [21]: with pd.option_context(\"display.max_rows\", 10, \"display.max_columns\", 5):\n ....:    print(pd.get_option(\"display.max_rows\"))\n ....:    print(pd.get_option(\"display.max_columns\"))\n ....: \n10\n5\n\nIn [22]: print(pd.get_option(\"display.max_rows\"))\n60\n\nIn [23]: print(pd.get_option(\"display.max_columns\"))\n0 \n```", "```py\n$IPYTHONDIR/profile_default/startup \n```", "```py\nimport pandas as pd\n\npd.set_option(\"display.max_rows\", 999)\npd.set_option(\"display.precision\", 5) \n```", "```py\nIn [24]: df = pd.DataFrame(np.random.randn(7, 2))\n\nIn [25]: pd.set_option(\"display.max_rows\", 7)\n\nIn [26]: df\nOut[26]: \n 0         1\n0  0.469112 -0.282863\n1 -1.509059 -1.135632\n2  1.212112 -0.173215\n3  0.119209 -1.044236\n4 -0.861849 -2.104569\n5 -0.494929  1.071804\n6  0.721555 -0.706771\n\nIn [27]: pd.set_option(\"display.max_rows\", 5)\n\nIn [28]: df\nOut[28]: \n 0         1\n0   0.469112 -0.282863\n1  -1.509059 -1.135632\n..       ...       ...\n5  -0.494929  1.071804\n6   0.721555 -0.706771\n\n[7 rows x 2 columns]\n\nIn [29]: pd.reset_option(\"display.max_rows\") \n```", "```py\nIn [30]: pd.set_option(\"display.max_rows\", 8)\n\nIn [31]: pd.set_option(\"display.min_rows\", 4)\n\n# below max_rows -> all rows shown\nIn [32]: df = pd.DataFrame(np.random.randn(7, 2))\n\nIn [33]: df\nOut[33]: \n 0         1\n0 -1.039575  0.271860\n1 -0.424972  0.567020\n2  0.276232 -1.087401\n3 -0.673690  0.113648\n4 -1.478427  0.524988\n5  0.404705  0.577046\n6 -1.715002 -1.039268\n\n# above max_rows -> only min_rows (4) rows shown\nIn [34]: df = pd.DataFrame(np.random.randn(9, 2))\n\nIn [35]: df\nOut[35]: \n 0         1\n0  -0.370647 -1.157892\n1  -1.344312  0.844885\n..       ...       ...\n7   0.276662 -0.472035\n8  -0.013960 -0.362543\n\n[9 rows x 2 columns]\n\nIn [36]: pd.reset_option(\"display.max_rows\")\n\nIn [37]: pd.reset_option(\"display.min_rows\") \n```", "```py\nIn [38]: df = pd.DataFrame(np.random.randn(5, 10))\n\nIn [39]: pd.set_option(\"expand_frame_repr\", True)\n\nIn [40]: df\nOut[40]: \n 0         1         2  ...         7         8         9\n0 -0.006154 -0.923061  0.895717  ...  1.340309 -1.170299 -0.226169\n1  0.410835  0.813850  0.132003  ... -1.436737 -1.413681  1.607920\n2  1.024180  0.569605  0.875906  ... -0.078638  0.545952 -1.219217\n3 -1.226825  0.769804 -1.281247  ...  0.341734  0.959726 -1.110336\n4 -0.619976  0.149748 -0.732339  ...  0.301624 -2.179861 -1.369849\n\n[5 rows x 10 columns]\n\nIn [41]: pd.set_option(\"expand_frame_repr\", False)\n\nIn [42]: df\nOut[42]: \n 0         1         2         3         4         5         6         7         8         9\n0 -0.006154 -0.923061  0.895717  0.805244 -1.206412  2.565646  1.431256  1.340309 -1.170299 -0.226169\n1  0.410835  0.813850  0.132003 -0.827317 -0.076467 -1.187678  1.130127 -1.436737 -1.413681  1.607920\n2  1.024180  0.569605  0.875906 -2.211372  0.974466 -2.006747 -0.410001 -0.078638  0.545952 -1.219217\n3 -1.226825  0.769804 -1.281247 -0.727707 -0.121306 -0.097883  0.695775  0.341734  0.959726 -1.110336\n4 -0.619976  0.149748 -0.732339  0.687738  0.176444  0.403310 -0.154951  0.301624 -2.179861 -1.369849\n\nIn [43]: pd.reset_option(\"expand_frame_repr\") \n```", "```py\nIn [44]: df = pd.DataFrame(np.random.randn(10, 10))\n\nIn [45]: pd.set_option(\"display.max_rows\", 5)\n\nIn [46]: pd.set_option(\"large_repr\", \"truncate\")\n\nIn [47]: df\nOut[47]: \n 0         1         2  ...         7         8         9\n0  -0.954208  1.462696 -1.743161  ...  0.995761  2.396780  0.014871\n1   3.357427 -0.317441 -1.236269  ...  0.380396  0.084844  0.432390\n..       ...       ...       ...  ...       ...       ...       ...\n8  -0.303421 -0.858447  0.306996  ...  0.476720  0.473424 -0.242861\n9  -0.014805 -0.284319  0.650776  ...  1.613616  0.464000  0.227371\n\n[10 rows x 10 columns]\n\nIn [48]: pd.set_option(\"large_repr\", \"info\")\n\nIn [49]: df\nOut[49]: \n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       10 non-null     float64\n 1   1       10 non-null     float64\n 2   2       10 non-null     float64\n 3   3       10 non-null     float64\n 4   4       10 non-null     float64\n 5   5       10 non-null     float64\n 6   6       10 non-null     float64\n 7   7       10 non-null     float64\n 8   8       10 non-null     float64\n 9   9       10 non-null     float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [50]: pd.reset_option(\"large_repr\")\n\nIn [51]: pd.reset_option(\"display.max_rows\") \n```", "```py\nIn [52]: df = pd.DataFrame(\n ....:    np.array(\n ....:        [\n ....:            [\"foo\", \"bar\", \"bim\", \"uncomfortably long string\"],\n ....:            [\"horse\", \"cow\", \"banana\", \"apple\"],\n ....:        ]\n ....:    )\n ....: )\n ....: \n\nIn [53]: pd.set_option(\"max_colwidth\", 40)\n\nIn [54]: df\nOut[54]: \n 0    1       2                          3\n0    foo  bar     bim  uncomfortably long string\n1  horse  cow  banana                      apple\n\nIn [55]: pd.set_option(\"max_colwidth\", 6)\n\nIn [56]: df\nOut[56]: \n 0    1      2      3\n0    foo  bar    bim  un...\n1  horse  cow  ba...  apple\n\nIn [57]: pd.reset_option(\"max_colwidth\") \n```", "```py\nIn [58]: df = pd.DataFrame(np.random.randn(10, 10))\n\nIn [59]: pd.set_option(\"max_info_columns\", 11)\n\nIn [60]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       10 non-null     float64\n 1   1       10 non-null     float64\n 2   2       10 non-null     float64\n 3   3       10 non-null     float64\n 4   4       10 non-null     float64\n 5   5       10 non-null     float64\n 6   6       10 non-null     float64\n 7   7       10 non-null     float64\n 8   8       10 non-null     float64\n 9   9       10 non-null     float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [61]: pd.set_option(\"max_info_columns\", 5)\n\nIn [62]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nColumns: 10 entries, 0 to 9\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [63]: pd.reset_option(\"max_info_columns\") \n```", "```py\nIn [64]: df = pd.DataFrame(np.random.choice([0, 1, np.nan], size=(10, 10)))\n\nIn [65]: df\nOut[65]: \n 0    1    2    3    4    5    6    7    8    9\n0  0.0  NaN  1.0  NaN  NaN  0.0  NaN  0.0  NaN  1.0\n1  1.0  NaN  1.0  1.0  1.0  1.0  NaN  0.0  0.0  NaN\n2  0.0  NaN  1.0  0.0  0.0  NaN  NaN  NaN  NaN  0.0\n3  NaN  NaN  NaN  0.0  1.0  1.0  NaN  1.0  NaN  1.0\n4  0.0  NaN  NaN  NaN  0.0  NaN  NaN  NaN  1.0  0.0\n5  0.0  1.0  1.0  1.0  1.0  0.0  NaN  NaN  1.0  0.0\n6  1.0  1.0  1.0  NaN  1.0  NaN  1.0  0.0  NaN  NaN\n7  0.0  0.0  1.0  0.0  1.0  0.0  1.0  1.0  0.0  NaN\n8  NaN  NaN  NaN  0.0  NaN  NaN  NaN  NaN  1.0  NaN\n9  0.0  NaN  0.0  NaN  NaN  0.0  NaN  1.0  1.0  0.0\n\nIn [66]: pd.set_option(\"max_info_rows\", 11)\n\nIn [67]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   0       8 non-null      float64\n 1   1       3 non-null      float64\n 2   2       7 non-null      float64\n 3   3       6 non-null      float64\n 4   4       7 non-null      float64\n 5   5       6 non-null      float64\n 6   6       2 non-null      float64\n 7   7       6 non-null      float64\n 8   8       6 non-null      float64\n 9   9       6 non-null      float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [68]: pd.set_option(\"max_info_rows\", 5)\n\nIn [69]: df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 10 columns):\n #   Column  Dtype \n---  ------  ----- \n 0   0       float64\n 1   1       float64\n 2   2       float64\n 3   3       float64\n 4   4       float64\n 5   5       float64\n 6   6       float64\n 7   7       float64\n 8   8       float64\n 9   9       float64\ndtypes: float64(10)\nmemory usage: 928.0 bytes\n\nIn [70]: pd.reset_option(\"max_info_rows\") \n```", "```py\nIn [71]: df = pd.DataFrame(np.random.randn(5, 5))\n\nIn [72]: pd.set_option(\"display.precision\", 7)\n\nIn [73]: df\nOut[73]: \n 0          1          2          3          4\n0 -1.1506406 -0.7983341 -0.5576966  0.3813531  1.3371217\n1 -1.5310949  1.3314582 -0.5713290 -0.0266708 -1.0856630\n2 -1.1147378 -0.0582158 -0.4867681  1.6851483  0.1125723\n3 -1.4953086  0.8984347 -0.1482168 -1.5960698  0.1596530\n4  0.2621358  0.0362196  0.1847350 -0.2550694 -0.2710197\n\nIn [74]: pd.set_option(\"display.precision\", 4)\n\nIn [75]: df\nOut[75]: \n 0       1       2       3       4\n0 -1.1506 -0.7983 -0.5577  0.3814  1.3371\n1 -1.5311  1.3315 -0.5713 -0.0267 -1.0857\n2 -1.1147 -0.0582 -0.4868  1.6851  0.1126\n3 -1.4953  0.8984 -0.1482 -1.5961  0.1597\n4  0.2621  0.0362  0.1847 -0.2551 -0.2710 \n```", "```py\nIn [76]: df = pd.DataFrame(np.random.randn(6, 6))\n\nIn [77]: pd.set_option(\"chop_threshold\", 0)\n\nIn [78]: df\nOut[78]: \n 0       1       2       3       4       5\n0  1.2884  0.2946 -1.1658  0.8470 -0.6856  0.6091\n1 -0.3040  0.6256 -0.0593  0.2497  1.1039 -1.0875\n2  1.9980 -0.2445  0.1362  0.8863 -1.3507 -0.8863\n3 -1.0133  1.9209 -0.3882 -2.3144  0.6655  0.4026\n4  0.3996 -1.7660  0.8504  0.3881  0.9923  0.7441\n5 -0.7398 -1.0549 -0.1796  0.6396  1.5850  1.9067\n\nIn [79]: pd.set_option(\"chop_threshold\", 0.5)\n\nIn [80]: df\nOut[80]: \n 0       1       2       3       4       5\n0  1.2884  0.0000 -1.1658  0.8470 -0.6856  0.6091\n1  0.0000  0.6256  0.0000  0.0000  1.1039 -1.0875\n2  1.9980  0.0000  0.0000  0.8863 -1.3507 -0.8863\n3 -1.0133  1.9209  0.0000 -2.3144  0.6655  0.0000\n4  0.0000 -1.7660  0.8504  0.0000  0.9923  0.7441\n5 -0.7398 -1.0549  0.0000  0.6396  1.5850  1.9067\n\nIn [81]: pd.reset_option(\"chop_threshold\") \n```", "```py\nIn [82]: df = pd.DataFrame(\n ....:    np.array([np.random.randn(6), np.random.randint(1, 9, 6) * 0.1, np.zeros(6)]).T,\n ....:    columns=[\"A\", \"B\", \"C\"],\n ....:    dtype=\"float\",\n ....: )\n ....: \n\nIn [83]: pd.set_option(\"colheader_justify\", \"right\")\n\nIn [84]: df\nOut[84]: \n A    B    C\n0  0.1040  0.1  0.0\n1  0.1741  0.5  0.0\n2 -0.4395  0.4  0.0\n3 -0.7413  0.8  0.0\n4 -0.0797  0.4  0.0\n5 -0.9229  0.3  0.0\n\nIn [85]: pd.set_option(\"colheader_justify\", \"left\")\n\nIn [86]: df\nOut[86]: \n A       B    C \n0  0.1040  0.1  0.0\n1  0.1741  0.5  0.0\n2 -0.4395  0.4  0.0\n3 -0.7413  0.8  0.0\n4 -0.0797  0.4  0.0\n5 -0.9229  0.3  0.0\n\nIn [87]: pd.reset_option(\"colheader_justify\") \n```", "```py\nIn [88]: import numpy as np\n\nIn [89]: pd.set_eng_float_format(accuracy=3, use_eng_prefix=True)\n\nIn [90]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [91]: s / 1.0e3\nOut[91]: \na    303.638u\nb   -721.084u\nc   -622.696u\nd    648.250u\ne     -1.945m\ndtype: float64\n\nIn [92]: s / 1.0e6\nOut[92]: \na    303.638n\nb   -721.084n\nc   -622.696n\nd    648.250n\ne     -1.945u\ndtype: float64 \n```", "```py\nIn [93]: df = pd.DataFrame({\"\u56fd\u7c4d\": [\"UK\", \"\u65e5\u672c\"], \"\u540d\u524d\": [\"Alice\", \"\u3057\u306e\u3076\"]})\n\nIn [94]: df\nOut[94]: \n \u56fd\u7c4d     \u540d\u524d\n0  UK  Alice\n1  \u65e5\u672c    \u3057\u306e\u3076 \n```", "```py\nIn [95]: pd.set_option(\"display.unicode.east_asian_width\", True)\n\nIn [96]: df\nOut[96]: \n \u56fd\u7c4d    \u540d\u524d\n0    UK   Alice\n1  \u65e5\u672c  \u3057\u306e\u3076 \n```", "```py\nIn [97]: df = pd.DataFrame({\"a\": [\"xxx\", \"\u00a1\u00a1\"], \"b\": [\"yyy\", \"\u00a1\u00a1\"]})\n\nIn [98]: df\nOut[98]: \n a    b\n0  xxx  yyy\n1   \u00a1\u00a1   \u00a1\u00a1 \n```", "```py\nIn [99]: pd.set_option(\"display.unicode.ambiguous_as_wide\", True)\n\nIn [100]: df\nOut[100]: \n a     b\n0   xxx   yyy\n1  \u00a1\u00a1  \u00a1\u00a1 \n```", "```py\nIn [101]: pd.set_option(\"display.html.table_schema\", True) \n```"]