["```py\nscipy.stats.differential_entropy(values, *, window_length=None, base=None, axis=0, method='auto', nan_policy='propagate', keepdims=False)\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import differential_entropy, norm \n```", "```py\n>>> rng = np.random.default_rng()\n>>> values = rng.standard_normal(100)\n>>> differential_entropy(values)\n1.3407817436640392 \n```", "```py\n>>> float(norm.entropy())\n1.4189385332046727 \n```", "```py\n>>> from scipy import stats\n>>> import matplotlib.pyplot as plt\n>>>\n>>>\n>>> def rmse(res, expected):\n...  '''Root mean squared error'''\n...     return np.sqrt(np.mean((res - expected)**2))\n>>>\n>>>\n>>> a, b = np.log10(5), np.log10(1000)\n>>> ns = np.round(np.logspace(a, b, 10)).astype(int)\n>>> reps = 1000  # number of repetitions for each sample size\n>>> expected = stats.expon.entropy()\n>>>\n>>> method_errors = {'vasicek': [], 'van es': [], 'ebrahimi': []}\n>>> for method in method_errors:\n...     for n in ns:\n...        rvs = stats.expon.rvs(size=(reps, n), random_state=rng)\n...        res = stats.differential_entropy(rvs, method=method, axis=-1)\n...        error = rmse(res, expected)\n...        method_errors[method].append(error)\n>>>\n>>> for method, errors in method_errors.items():\n...     plt.loglog(ns, errors, label=method)\n>>>\n>>> plt.legend()\n>>> plt.xlabel('sample size')\n>>> plt.ylabel('RMSE (1000 trials)')\n>>> plt.title('Entropy Estimator Error (Exponential Distribution)') \n```"]