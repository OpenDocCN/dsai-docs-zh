- en: Input/output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/io.html](https://pandas.pydata.org/docs/reference/io.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Pickling'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`read_pickle`](api/pandas.read_pickle.html#pandas.read_pickle "pandas.read_pickle")(filepath_or_buffer[, ...])
    | Load pickled pandas object (or any object) from file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  prefs: []
  type: TYPE_TB
- en: Flat file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_table`](api/pandas.read_table.html#pandas.read_table "pandas.read_table")(filepath_or_buffer, *[, sep, ...])
    | Read general delimited file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_csv`](api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")(filepath_or_buffer, *[, sep, ...])
    | Read a comma-separated values (csv) file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_fwf`](api/pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")(filepath_or_buffer, *[, colspecs, ...])
    | Read a table of fixed-width formatted lines into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_clipboard`](api/pandas.read_clipboard.html#pandas.read_clipboard "pandas.read_clipboard")([sep, dtype_backend])
    | Read text from clipboard and pass to [`read_csv()`](api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  prefs: []
  type: TYPE_TB
- en: Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_excel`](api/pandas.read_excel.html#pandas.read_excel "pandas.read_excel")(io[, sheet_name, header, names, ...])
    | Read an Excel file into a `pandas` `DataFrame`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile`](api/pandas.ExcelFile.html#pandas.ExcelFile "pandas.ExcelFile")(path_or_buffer[, engine, ...])
    | Class for parsing tabular Excel sheets into DataFrame objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.book`](api/pandas.ExcelFile.book.html#pandas.ExcelFile.book "pandas.ExcelFile.book")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.sheet_names`](api/pandas.ExcelFile.sheet_names.html#pandas.ExcelFile.sheet_names
    "pandas.ExcelFile.sheet_names") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.parse`](api/pandas.ExcelFile.parse.html#pandas.ExcelFile.parse
    "pandas.ExcelFile.parse")([sheet_name, header, names, ...]) | Parse specified
    sheet(s) into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_excel`](api/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel")(excel_writer[, sheet_name, ...]) |
    Write Styler to an Excel sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelWriter`](api/pandas.ExcelWriter.html#pandas.ExcelWriter "pandas.ExcelWriter")(path[, engine, date_format, ...])
    | Class for writing DataFrame objects into excel sheets. |'
  prefs: []
  type: TYPE_TB
- en: JSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_json`](api/pandas.read_json.html#pandas.read_json "pandas.read_json")(path_or_buf, *[, orient, typ, ...])
    | Convert a JSON string to pandas object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`json_normalize`](api/pandas.json_normalize.html#pandas.json_normalize "pandas.json_normalize")(data[, record_path, meta, ...])
    | Normalize semi-structured JSON data into a flat table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`build_table_schema`](api/pandas.io.json.build_table_schema.html#pandas.io.json.build_table_schema
    "pandas.io.json.build_table_schema")(data[, index, ...]) | Create a Table schema
    from `data`. |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_html`](api/pandas.read_html.html#pandas.read_html "pandas.read_html")(io, *[, match, flavor, header, ...])
    | Read HTML tables into a `list` of `DataFrame` objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_html`](api/pandas.io.formats.style.Styler.to_html.html#pandas.io.formats.style.Styler.to_html
    "pandas.io.formats.style.Styler.to_html")([buf, table_uuid, ...]) | Write Styler
    to a file, buffer or string in HTML-CSS format. |'
  prefs: []
  type: TYPE_TB
- en: XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_xml`](api/pandas.read_xml.html#pandas.read_xml "pandas.read_xml")(path_or_buffer, *[, xpath, ...])
    | Read XML document into a [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_xml`](api/pandas.DataFrame.to_xml.html#pandas.DataFrame.to_xml
    "pandas.DataFrame.to_xml")([path_or_buffer, index, ...]) | Render a DataFrame
    to an XML document. |'
  prefs: []
  type: TYPE_TB
- en: Latex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_latex`](api/pandas.io.formats.style.Styler.to_latex.html#pandas.io.formats.style.Styler.to_latex
    "pandas.io.formats.style.Styler.to_latex")([buf, column_format, ...]) | Write
    Styler to a file, buffer or string in LaTeX format. |'
  prefs: []
  type: TYPE_TB
- en: 'HDFStore: PyTables (HDF5)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_hdf`](api/pandas.read_hdf.html#pandas.read_hdf "pandas.read_hdf")(path_or_buf[, key, mode, errors, ...])
    | Read from the store, close it if we opened it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.put`](api/pandas.HDFStore.put.html#pandas.HDFStore.put "pandas.HDFStore.put")(key, value[, format, index, ...])
    | Store object in HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.append`](api/pandas.HDFStore.append.html#pandas.HDFStore.append
    "pandas.HDFStore.append")(key, value[, format, axes, ...]) | Append to Table in
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.get`](api/pandas.HDFStore.get.html#pandas.HDFStore.get "pandas.HDFStore.get")(key)
    | Retrieve pandas object stored in file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.select`](api/pandas.HDFStore.select.html#pandas.HDFStore.select
    "pandas.HDFStore.select")(key[, where, start, stop, ...]) | Retrieve pandas object
    stored in file, optionally based on where criteria. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.info`](api/pandas.HDFStore.info.html#pandas.HDFStore.info "pandas.HDFStore.info")()
    | Print detailed information on the store. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.keys`](api/pandas.HDFStore.keys.html#pandas.HDFStore.keys "pandas.HDFStore.keys")([include])
    | Return a list of keys corresponding to objects stored in HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.groups`](api/pandas.HDFStore.groups.html#pandas.HDFStore.groups
    "pandas.HDFStore.groups")() | Return a list of all the top-level nodes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.walk`](api/pandas.HDFStore.walk.html#pandas.HDFStore.walk "pandas.HDFStore.walk")([where])
    | Walk the pytables group hierarchy for pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: One can store a subclass of [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    to HDF5, but the type of the subclass is lost upon storing.
  prefs: []
  type: TYPE_NORMAL
- en: Feather
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_feather`](api/pandas.read_feather.html#pandas.read_feather "pandas.read_feather")(path[, columns, use_threads, ...])
    | Load a feather-format object from the file path. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  prefs: []
  type: TYPE_TB
- en: Parquet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_parquet`](api/pandas.read_parquet.html#pandas.read_parquet "pandas.read_parquet")(path[, engine, columns, ...])
    | Load a parquet object from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  prefs: []
  type: TYPE_TB
- en: ORC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_orc`](api/pandas.read_orc.html#pandas.read_orc "pandas.read_orc")(path[, columns, dtype_backend, ...])
    | Load an ORC object from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  prefs: []
  type: TYPE_TB
- en: SAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_sas`](api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")(filepath_or_buffer, *[, format, ...])
    | Read SAS files stored as either XPORT or SAS7BDAT format files. |'
  prefs: []
  type: TYPE_TB
- en: SPSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_spss`](api/pandas.read_spss.html#pandas.read_spss "pandas.read_spss")(path[, usecols, ...])
    | Load an SPSS file from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_sql_table`](api/pandas.read_sql_table.html#pandas.read_sql_table "pandas.read_sql_table")(table_name, con[, schema, ...])
    | Read SQL database table into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_sql_query`](api/pandas.read_sql_query.html#pandas.read_sql_query "pandas.read_sql_query")(sql, con[, index_col, ...])
    | Read SQL query into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_sql`](api/pandas.read_sql.html#pandas.read_sql "pandas.read_sql")(sql, con[, index_col, ...])
    | Read SQL query or database table into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: Google BigQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_gbq`](api/pandas.read_gbq.html#pandas.read_gbq "pandas.read_gbq")(query[, project_id, index_col, ...])
    | (DEPRECATED) Load data from Google BigQuery. |'
  prefs: []
  type: TYPE_TB
- en: STATA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_stata`](api/pandas.read_stata.html#pandas.read_stata "pandas.read_stata")(filepath_or_buffer, *[, ...])
    | Read Stata file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.data_label`](api/pandas.io.stata.StataReader.data_label.html#pandas.io.stata.StataReader.data_label
    "pandas.io.stata.StataReader.data_label") | Return data label of Stata file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.value_labels`](api/pandas.io.stata.StataReader.value_labels.html#pandas.io.stata.StataReader.value_labels
    "pandas.io.stata.StataReader.value_labels")() | Return a nested dict associating
    each variable name to its value and label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.variable_labels`](api/pandas.io.stata.StataReader.variable_labels.html#pandas.io.stata.StataReader.variable_labels
    "pandas.io.stata.StataReader.variable_labels")() | Return a dict associating each
    variable name with corresponding label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataWriter.write_file`](api/pandas.io.stata.StataWriter.write_file.html#pandas.io.stata.StataWriter.write_file
    "pandas.io.stata.StataWriter.write_file")() | Export DataFrame object to Stata
    dta format. |'
  prefs: []
  type: TYPE_TB
- en: Pickling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_pickle`](api/pandas.read_pickle.html#pandas.read_pickle "pandas.read_pickle")(filepath_or_buffer[, ...])
    | Load pickled pandas object (or any object) from file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  prefs: []
  type: TYPE_TB
- en: Flat file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_table`](api/pandas.read_table.html#pandas.read_table "pandas.read_table")(filepath_or_buffer, *[, sep, ...])
    | Read general delimited file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_csv`](api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")(filepath_or_buffer, *[, sep, ...])
    | Read a comma-separated values (csv) file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_fwf`](api/pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")(filepath_or_buffer, *[, colspecs, ...])
    | Read a table of fixed-width formatted lines into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_clipboard`](api/pandas.read_clipboard.html#pandas.read_clipboard "pandas.read_clipboard")([sep, dtype_backend])
    | Read text from clipboard and pass to [`read_csv()`](api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  prefs: []
  type: TYPE_TB
- en: Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_excel`](api/pandas.read_excel.html#pandas.read_excel "pandas.read_excel")(io[, sheet_name, header, names, ...])
    | Read an Excel file into a `pandas` `DataFrame`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile`](api/pandas.ExcelFile.html#pandas.ExcelFile "pandas.ExcelFile")(path_or_buffer[, engine, ...])
    | Class for parsing tabular Excel sheets into DataFrame objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.book`](api/pandas.ExcelFile.book.html#pandas.ExcelFile.book "pandas.ExcelFile.book")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.sheet_names`](api/pandas.ExcelFile.sheet_names.html#pandas.ExcelFile.sheet_names
    "pandas.ExcelFile.sheet_names") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelFile.parse`](api/pandas.ExcelFile.parse.html#pandas.ExcelFile.parse
    "pandas.ExcelFile.parse")([sheet_name, header, names, ...]) | Parse specified
    sheet(s) into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_excel`](api/pandas.io.formats.style.Styler.to_excel.html#pandas.io.formats.style.Styler.to_excel
    "pandas.io.formats.style.Styler.to_excel")(excel_writer[, sheet_name, ...]) |
    Write Styler to an Excel sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ExcelWriter`](api/pandas.ExcelWriter.html#pandas.ExcelWriter "pandas.ExcelWriter")(path[, engine, date_format, ...])
    | Class for writing DataFrame objects into excel sheets. |'
  prefs: []
  type: TYPE_TB
- en: JSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_json`](api/pandas.read_json.html#pandas.read_json "pandas.read_json")(path_or_buf, *[, orient, typ, ...])
    | Convert a JSON string to pandas object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`json_normalize`](api/pandas.json_normalize.html#pandas.json_normalize "pandas.json_normalize")(data[, record_path, meta, ...])
    | Normalize semi-structured JSON data into a flat table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`build_table_schema`](api/pandas.io.json.build_table_schema.html#pandas.io.json.build_table_schema
    "pandas.io.json.build_table_schema")(data[, index, ...]) | Create a Table schema
    from `data`. |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_html`](api/pandas.read_html.html#pandas.read_html "pandas.read_html")(io, *[, match, flavor, header, ...])
    | Read HTML tables into a `list` of `DataFrame` objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_html`](api/pandas.io.formats.style.Styler.to_html.html#pandas.io.formats.style.Styler.to_html
    "pandas.io.formats.style.Styler.to_html")([buf, table_uuid, ...]) | Write Styler
    to a file, buffer or string in HTML-CSS format. |'
  prefs: []
  type: TYPE_TB
- en: XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_xml`](api/pandas.read_xml.html#pandas.read_xml "pandas.read_xml")(path_or_buffer, *[, xpath, ...])
    | Read XML document into a [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_xml`](api/pandas.DataFrame.to_xml.html#pandas.DataFrame.to_xml
    "pandas.DataFrame.to_xml")([path_or_buffer, index, ...]) | Render a DataFrame
    to an XML document. |'
  prefs: []
  type: TYPE_TB
- en: Latex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Styler.to_latex`](api/pandas.io.formats.style.Styler.to_latex.html#pandas.io.formats.style.Styler.to_latex
    "pandas.io.formats.style.Styler.to_latex")([buf, column_format, ...]) | Write
    Styler to a file, buffer or string in LaTeX format. |'
  prefs: []
  type: TYPE_TB
- en: 'HDFStore: PyTables (HDF5)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_hdf`](api/pandas.read_hdf.html#pandas.read_hdf "pandas.read_hdf")(path_or_buf[, key, mode, errors, ...])
    | Read from the store, close it if we opened it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.put`](api/pandas.HDFStore.put.html#pandas.HDFStore.put "pandas.HDFStore.put")(key, value[, format, index, ...])
    | Store object in HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.append`](api/pandas.HDFStore.append.html#pandas.HDFStore.append
    "pandas.HDFStore.append")(key, value[, format, axes, ...]) | Append to Table in
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.get`](api/pandas.HDFStore.get.html#pandas.HDFStore.get "pandas.HDFStore.get")(key)
    | Retrieve pandas object stored in file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.select`](api/pandas.HDFStore.select.html#pandas.HDFStore.select
    "pandas.HDFStore.select")(key[, where, start, stop, ...]) | Retrieve pandas object
    stored in file, optionally based on where criteria. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.info`](api/pandas.HDFStore.info.html#pandas.HDFStore.info "pandas.HDFStore.info")()
    | Print detailed information on the store. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.keys`](api/pandas.HDFStore.keys.html#pandas.HDFStore.keys "pandas.HDFStore.keys")([include])
    | Return a list of keys corresponding to objects stored in HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.groups`](api/pandas.HDFStore.groups.html#pandas.HDFStore.groups
    "pandas.HDFStore.groups")() | Return a list of all the top-level nodes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`HDFStore.walk`](api/pandas.HDFStore.walk.html#pandas.HDFStore.walk "pandas.HDFStore.walk")([where])
    | Walk the pytables group hierarchy for pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: One can store a subclass of [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    to HDF5, but the type of the subclass is lost upon storing.
  prefs: []
  type: TYPE_NORMAL
- en: Feather
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_feather`](api/pandas.read_feather.html#pandas.read_feather "pandas.read_feather")(path[, columns, use_threads, ...])
    | Load a feather-format object from the file path. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  prefs: []
  type: TYPE_TB
- en: Parquet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_parquet`](api/pandas.read_parquet.html#pandas.read_parquet "pandas.read_parquet")(path[, engine, columns, ...])
    | Load a parquet object from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  prefs: []
  type: TYPE_TB
- en: ORC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_orc`](api/pandas.read_orc.html#pandas.read_orc "pandas.read_orc")(path[, columns, dtype_backend, ...])
    | Load an ORC object from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  prefs: []
  type: TYPE_TB
- en: SAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_sas`](api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")(filepath_or_buffer, *[, format, ...])
    | Read SAS files stored as either XPORT or SAS7BDAT format files. |'
  prefs: []
  type: TYPE_TB
- en: SPSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_spss`](api/pandas.read_spss.html#pandas.read_spss "pandas.read_spss")(path[, usecols, ...])
    | Load an SPSS file from the file path, returning a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_sql_table`](api/pandas.read_sql_table.html#pandas.read_sql_table "pandas.read_sql_table")(table_name, con[, schema, ...])
    | Read SQL database table into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_sql_query`](api/pandas.read_sql_query.html#pandas.read_sql_query "pandas.read_sql_query")(sql, con[, index_col, ...])
    | Read SQL query into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_sql`](api/pandas.read_sql.html#pandas.read_sql "pandas.read_sql")(sql, con[, index_col, ...])
    | Read SQL query or database table into a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: Google BigQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_gbq`](api/pandas.read_gbq.html#pandas.read_gbq "pandas.read_gbq")(query[, project_id, index_col, ...])
    | (DEPRECATED) Load data from Google BigQuery. |'
  prefs: []
  type: TYPE_TB
- en: STATA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read_stata`](api/pandas.read_stata.html#pandas.read_stata "pandas.read_stata")(filepath_or_buffer, *[, ...])
    | Read Stata file into DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.data_label`](api/pandas.io.stata.StataReader.data_label.html#pandas.io.stata.StataReader.data_label
    "pandas.io.stata.StataReader.data_label") | Return data label of Stata file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.value_labels`](api/pandas.io.stata.StataReader.value_labels.html#pandas.io.stata.StataReader.value_labels
    "pandas.io.stata.StataReader.value_labels")() | Return a nested dict associating
    each variable name to its value and label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataReader.variable_labels`](api/pandas.io.stata.StataReader.variable_labels.html#pandas.io.stata.StataReader.variable_labels
    "pandas.io.stata.StataReader.variable_labels")() | Return a dict associating each
    variable name with corresponding label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`StataWriter.write_file`](api/pandas.io.stata.StataWriter.write_file.html#pandas.io.stata.StataWriter.write_file
    "pandas.io.stata.StataWriter.write_file")() | Export DataFrame object to Stata
    dta format. |'
  prefs: []
  type: TYPE_TB
