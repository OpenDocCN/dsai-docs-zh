- en: pandas.DataFrame.to_json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert the object to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: Note NaN’s and None will be converted to null and datetime objects will be converted
    to UNIX timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path_or_buf**str, path object, file-like object, or None, default None'
  prefs: []
  type: TYPE_NORMAL
- en: String, path object (implementing os.PathLike[str]), or file-like object implementing
    a write() function. If None, the result is returned as a string.
  prefs: []
  type: TYPE_NORMAL
- en: '**orient**str'
  prefs: []
  type: TYPE_NORMAL
- en: Indication of expected JSON string format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Series:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default is ‘index’
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'allowed values are: {‘split’, ‘records’, ‘index’, ‘table’}.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default is ‘columns’
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'allowed values are: {‘split’, ‘records’, ‘index’, ‘columns’, ‘values’, ‘table’}.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The format of the JSON string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘split’ : dict like {‘index’ -> [index], ‘columns’ -> [columns], ‘data’ ->
    [values]}'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘records’ : list like [{column -> value}, … , {column -> value}]'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘index’ : dict like {index -> {column -> value}}'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘columns’ : dict like {column -> {index -> value}}'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘values’ : just the values array'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘table’ : dict like {‘schema’: {schema}, ‘data’: {data}}'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Describing the data, where data component is like `orient='records'`.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**date_format**{None, ‘epoch’, ‘iso’}'
  prefs: []
  type: TYPE_NORMAL
- en: Type of date conversion. ‘epoch’ = epoch milliseconds, ‘iso’ = ISO8601\. The
    default depends on the orient. For `orient='table'`, the default is ‘iso’. For
    all other orients, the default is ‘epoch’.
  prefs: []
  type: TYPE_NORMAL
- en: '**double_precision**int, default 10'
  prefs: []
  type: TYPE_NORMAL
- en: The number of decimal places to use when encoding floating point values. The
    possible maximal value is 15. Passing double_precision greater than 15 will raise
    a ValueError.
  prefs: []
  type: TYPE_NORMAL
- en: '**force_ascii**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Force encoded string to be ASCII.
  prefs: []
  type: TYPE_NORMAL
- en: '**date_unit**str, default ‘ms’ (milliseconds)'
  prefs: []
  type: TYPE_NORMAL
- en: The time unit to encode to, governs timestamp and ISO8601 precision. One of
    ‘s’, ‘ms’, ‘us’, ‘ns’ for second, millisecond, microsecond, and nanosecond respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**default_handler**callable, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Handler to call if object cannot otherwise be converted to a suitable format
    for JSON. Should receive a single argument which is the object to convert and
    return a serialisable object.
  prefs: []
  type: TYPE_NORMAL
- en: '**lines**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘orient’ is ‘records’ write out line-delimited json format. Will throw ValueError
    if incorrect ‘orient’ since others are not list-like.
  prefs: []
  type: TYPE_NORMAL
- en: '**compression**str or dict, default ‘infer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'For on-the-fly compression of the output data. If ‘infer’ and ‘path_or_buf’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). Set to `None` for no compression. Can also be a dict with key `''method''`
    set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`, `''xz''`, `''tar''`}
    and other key-value pairs are forwarded to `zipfile.ZipFile`, `gzip.GzipFile`,
    `bz2.BZ2File`, `zstandard.ZstdCompressor`, `lzma.LZMAFile` or `tarfile.TarFile`,
    respectively. As an example, the following could be passed for faster compression
    and to create a reproducible gzip archive: `compression={''method'': ''gzip'',
    ''compresslevel'': 1, ''mtime'': 1}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Added support for .tar files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0: Zstandard support.'
  prefs: []
  type: TYPE_NORMAL
- en: '**index**bool or None, default None'
  prefs: []
  type: TYPE_NORMAL
- en: The index is only used when ‘orient’ is ‘split’, ‘index’, ‘column’, or ‘table’.
    Of these, ‘index’ and ‘column’ do not support index=False.
  prefs: []
  type: TYPE_NORMAL
- en: '**indent**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of whitespace used to indent each record.
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str, default ‘w’ (writing)'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the IO mode for output when supplying a path_or_buf. Accepted args are
    ‘w’ (writing) and ‘a’ (append) only. mode=’a’ is only supported when lines is
    True and orient is ‘records’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: None or str
  prefs: []
  type: TYPE_NORMAL
- en: If path_or_buf is None, returns the resulting json format as a string. Otherwise
    returns None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_json`](pandas.read_json.html#pandas.read_json "pandas.read_json")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert a JSON string to pandas object.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of `indent=0` varies from the stdlib, which does not indent the
    output but does insert newlines. Currently, `indent=0` and the default `indent=None`
    are equivalent in pandas, though this may change in a future release.
  prefs: []
  type: TYPE_NORMAL
- en: '`orient=''table''` contains a ‘pandas_version’ field under ‘schema’. This stores
    the version of pandas used in the latest revision of the schema.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Encoding/decoding a Dataframe using `'records'` formatted JSON. Note that index
    labels are not preserved with this encoding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Encoding/decoding a Dataframe using `''index''` formatted JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Encoding/decoding a Dataframe using `''columns''` formatted JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Encoding/decoding a Dataframe using `''values''` formatted JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Encoding with Table Schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
