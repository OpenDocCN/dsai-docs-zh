["```py\nscipy.interpolate.make_interp_spline(x, y, k=3, t=None, bc_type=None, axis=0, check_finite=True)\n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> def cheb_nodes(N):\n...     jj = 2.*np.arange(N) + 1\n...     x = np.cos(np.pi * jj / 2 / N)[::-1]\n...     return x \n```", "```py\n>>> x = cheb_nodes(20)\n>>> y = np.sqrt(1 - x**2) \n```", "```py\n>>> from scipy.interpolate import BSpline, make_interp_spline\n>>> b = make_interp_spline(x, y)\n>>> np.allclose(b(x), y)\nTrue \n```", "```py\n>>> b.k\n3 \n```", "```py\n>>> l, r = [(2, 0.0)], [(2, 0.0)]\n>>> b_n = make_interp_spline(x, y, bc_type=(l, r))  # or, bc_type=\"natural\"\n>>> np.allclose(b_n(x), y)\nTrue\n>>> x0, x1 = x[0], x[-1]\n>>> np.allclose([b_n(x0, 2), b_n(x1, 2)], [0, 0])\nTrue \n```", "```py\n>>> phi = np.linspace(0, 2.*np.pi, 40)\n>>> r = 0.3 + np.cos(phi)\n>>> x, y = r*np.cos(phi), r*np.sin(phi)  # convert to Cartesian coordinates \n```", "```py\n>>> spl = make_interp_spline(phi, np.c_[x, y]) \n```", "```py\n>>> phi_new = np.linspace(0, 2.*np.pi, 100)\n>>> x_new, y_new = spl(phi_new).T \n```", "```py\n>>> plt.plot(x, y, 'o')\n>>> plt.plot(x_new, y_new, '-')\n>>> plt.show() \n```", "```py\n>>> x = np.linspace(0, 2*np.pi, 10)\n>>> y = np.array([np.sin(x), np.cos(x)]) \n```", "```py\n>>> ax = plt.axes(projection='3d')\n>>> xx = np.linspace(0, 2*np.pi, 100)\n>>> bspl = make_interp_spline(x, y, k=5, bc_type='periodic', axis=1)\n>>> ax.plot3D(xx, *bspl(xx))\n>>> ax.scatter3D(x, *y, color='red')\n>>> plt.show() \n```"]