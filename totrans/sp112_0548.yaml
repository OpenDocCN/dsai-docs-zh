- en: scipy.signal.firls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firls.html#scipy.signal.firls](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firls.html#scipy.signal.firls)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: FIR filter design using least-squares error minimization.
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the filter coefficients for the linear-phase finite impulse response
    (FIR) filter which has the best approximation to the desired frequency response
    described by *bands* and *desired* in the least squares sense (i.e., the integral
    of the weighted mean-squared error within the specified bands is minimized).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numtaps**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of taps in the FIR filter. *numtaps* must be odd.
  prefs: []
  type: TYPE_NORMAL
- en: '**bands**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A monotonic nondecreasing sequence containing the band edges in Hz. All elements
    must be non-negative and less than or equal to the Nyquist frequency given by
    *nyq*. The bands are specified as frequency pairs, thus, if using a 1D array,
    its length must be even, e.g., *np.array([0, 1, 2, 3, 4, 5])*. Alternatively,
    the bands can be specified as an nx2 sized 2D array, where n is the number of
    bands, e.g, *np.array([[0, 1], [2, 3], [4, 5]])*.
  prefs: []
  type: TYPE_NORMAL
- en: '**desired**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence the same size as *bands* containing the desired gain at the start
    and end point of each band.
  prefs: []
  type: TYPE_NORMAL
- en: '**weight**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A relative weighting to give to each band region when solving the least squares
    problem. *weight* has to be half the size of *bands*.
  prefs: []
  type: TYPE_NORMAL
- en: '**nyq**float, optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: This is the Nyquist frequency. Each frequency in *bands* must be between 0 and
    *nyq* (inclusive). Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.0.0: [`firls`](#scipy.signal.firls "scipy.signal.firls")
    keyword argument *nyq* is deprecated in favour of *fs* and will be removed in
    SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the signal. Each frequency in *bands* must be between
    0 and `fs/2` (inclusive). Default is 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coeffs**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of the optimal (in a least squares sense) FIR filter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin`](scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin2`](scipy.signal.firwin2.html#scipy.signal.firwin2 "scipy.signal.firwin2")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum_phase`](scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`remez`](scipy.signal.remez.html#scipy.signal.remez "scipy.signal.remez")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This implementation follows the algorithm given in [[1]](#rc5f5a32a1ca3-1).
    As noted there, least squares design has multiple advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimal in a least-squares sense.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Simple, non-iterative method.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The general solution can obtained by solving a linear system of equations.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Allows the use of a frequency dependent weighting function.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This function constructs a Type I linear phase FIR filter, which contains an
    odd number of *coeffs* satisfying for \(n < numtaps\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[coeffs(n) = coeffs(numtaps - 1 - n)\]
  prefs: []
  type: TYPE_NORMAL
- en: The odd number of coefficients and filter symmetry avoid boundary conditions
    that could otherwise occur at the Nyquist and 0 frequencies (e.g., for Type II,
    III, or IV variants).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.18.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Ivan Selesnick, Linear-Phase Fir Filter Design By Least Squares. OpenStax CNX.
    Aug 9, 2005. [http://cnx.org/contents/eb1ecb35-03a9-4610-ba87-41cd771c95f2@7](http://cnx.org/contents/eb1ecb35-03a9-4610-ba87-41cd771c95f2@7)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to construct a band-pass filter. Note that the behavior in the frequency
    ranges between our stop bands and pass bands is unspecified, and thus may overshoot
    depending on the parameters of our filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-firls-1.png](../Images/3b477a22782f15907ea9c9c343d8f1e8.png)'
  prefs: []
  type: TYPE_IMG
