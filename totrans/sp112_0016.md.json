["```py\n>>> import scipy.io as sio \n```", "```py\nsio.loadmat\nsio.savemat\nsio.whosmat \n```", "```py\nsio.matlab \n```", "```py\noctave:1> a = 1:12\na =\n\n   1   2   3   4   5   6   7   8   9  10  11  12\n\noctave:2> a = reshape(a, [1 3 4])\na =\n\nans(:,:,1) =\n\n   1   2   3\n\nans(:,:,2) =\n\n   4   5   6\n\nans(:,:,3) =\n\n   7   8   9\n\nans(:,:,4) =\n\n   10   11   12\n\noctave:3> save -6 octave_a.mat a % MATLAB 6 compatible\noctave:4> ls octave_a.mat\noctave_a.mat \n```", "```py\n>>> mat_contents = sio.loadmat('octave_a.mat')\n>>> mat_contents\n{'a': array([[[  1.,   4.,   7.,  10.],\n [  2.,   5.,   8.,  11.],\n [  3.,   6.,   9.,  12.]]]),\n '__version__': '1.0',\n '__header__': 'MATLAB 5.0 MAT-file, written by\n Octave 3.6.3, 2013-02-17 21:02:11 UTC',\n '__globals__': []}\n>>> oct_a = mat_contents['a']\n>>> oct_a\narray([[[  1.,   4.,   7.,  10.],\n [  2.,   5.,   8.,  11.],\n [  3.,   6.,   9.,  12.]]])\n>>> oct_a.shape\n(1, 3, 4) \n```", "```py\n>>> import numpy as np\n>>> vect = np.arange(10)\n>>> vect.shape\n(10,)\n>>> sio.savemat('np_vector.mat', {'vect':vect}) \n```", "```py\noctave:8> load np_vector.mat\noctave:9> vect\nvect =\n\n  0  1  2  3  4  5  6  7  8  9\n\noctave:10> size(vect)\nans =\n\n    1   10 \n```", "```py\n>>> sio.whosmat('octave_a.mat')\n[('a', (1, 3, 4), 'double')] \n```", "```py\noctave:11> my_struct = struct('field1', 1, 'field2', 2)\nmy_struct =\n{\n  field1 =  1\n  field2 =  2\n}\n\noctave:12> save -6 octave_struct.mat my_struct \n```", "```py\n>>> mat_contents = sio.loadmat('octave_struct.mat')\n>>> mat_contents\n{'my_struct': array([[([[1.0]], [[2.0]])]],\n dtype=[('field1', 'O'), ('field2', 'O')]), '__version__': '1.0', '__header__': 'MATLAB 5.0 MAT-file, written by Octave 3.6.3, 2013-02-17 21:23:14 UTC', '__globals__': []}\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct.shape\n(1, 1)\n>>> val = oct_struct[0,0]\n>>> val\n([[1.0]], [[2.0]])\n>>> val['field1']\narray([[ 1.]])\n>>> val['field2']\narray([[ 2.]])\n>>> val.dtype\ndtype([('field1', 'O'), ('field2', 'O')]) \n```", "```py\n>>> val = oct_struct[0,0] \n```", "```py\noctave:13> size(my_struct)\nans =\n\n   1   1 \n```", "```py\n>>> mat_contents = sio.loadmat('octave_struct.mat', squeeze_me=True)\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct.shape\n() \n```", "```py\n>>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False)\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct[0,0].field1\narray([[ 1.]]) \n```", "```py\n>>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False, squeeze_me=True)\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct.shape # but no - it's a scalar\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'mat_struct' object has no attribute 'shape'\n>>> type(oct_struct)\n<class 'scipy.io.matlab.mio5_params.mat_struct'>\n>>> oct_struct.field1\n1.0 \n```", "```py\n>>> a_dict = {'field1': 0.5, 'field2': 'a string'}\n>>> sio.savemat('saved_struct.mat', {'a_dict': a_dict}) \n```", "```py\noctave:21> load saved_struct\noctave:22> a_dict\na_dict =\n\n  scalar structure containing the fields:\n\n    field2 = a string\n    field1 =  0.50000 \n```", "```py\n>>> dt = [('f1', 'f8'), ('f2', 'S10')]\n>>> arr = np.zeros((2,), dtype=dt)\n>>> arr\narray([(0.0, ''), (0.0, '')],\n dtype=[('f1', '<f8'), ('f2', 'S10')])\n>>> arr[0]['f1'] = 0.5\n>>> arr[0]['f2'] = 'python'\n>>> arr[1]['f1'] = 99\n>>> arr[1]['f2'] = 'not perl'\n>>> sio.savemat('np_struct_arr.mat', {'arr': arr}) \n```", "```py\noctave:14> my_cells = {1, [2, 3]}\nmy_cells =\n{\n  [1,1] =  1\n  [1,2] =\n\n     2   3\n\n}\n\noctave:15> save -6 octave_cells.mat my_cells \n```", "```py\n>>> mat_contents = sio.loadmat('octave_cells.mat')\n>>> oct_cells = mat_contents['my_cells']\n>>> print(oct_cells.dtype)\nobject\n>>> val = oct_cells[0,0]\n>>> val\narray([[ 1.]])\n>>> print(val.dtype)\nfloat64 \n```", "```py\n>>> obj_arr = np.zeros((2,), dtype=np.object)\n>>> obj_arr[0] = 1\n>>> obj_arr[1] = 'a string'\n>>> obj_arr\narray([1, 'a string'], dtype=object)\n>>> sio.savemat('np_cells.mat', {'obj_arr':obj_arr}) \n```", "```py\noctave:16> load np_cells.mat\noctave:17> obj_arr\nobj_arr =\n{\n  [1,1] = 1\n  [2,1] = a string\n} \n```"]