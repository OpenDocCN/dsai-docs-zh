- en: Polynomials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多项式
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.html](https://numpy.org/doc/1.26/reference/routines.polynomials.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.html](https://numpy.org/doc/1.26/reference/routines.polynomials.html)
- en: Polynomials in NumPy can be *created*, *manipulated*, and even *fitted* using
    the [convenience classes](routines.polynomials.classes.html) of the [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") package, introduced in NumPy 1.4.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，可以使用[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")包的[便利类](routines.polynomials.classes.html)创建、操作甚至拟合多项式，这是在NumPy
    1.4中引入的。
- en: Prior to NumPy 1.4, [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") was the class of choice and it is still available in order to
    maintain backward compatibility. However, the newer [`polynomial package`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") is more complete and its *convenience classes* provide a more
    consistent, better-behaved interface for working with polynomial expressions.
    Therefore [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") is recommended for new coding.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.4之前，[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")是首选类，为了保持向后兼容性仍然可用。但是，较新的[`polynomial
    package`](routines.polynomials.package.html#module-numpy.polynomial "numpy.polynomial")更加完整，其*便利类*提供了处理多项式表达式的更一致、更良好的接口。因此，建议在新的编码中使用[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**Terminology**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**术语**'
- en: The term *polynomial module* refers to the old API defined in `numpy.lib.polynomial`,
    which includes the [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")
    class and the polynomial functions prefixed with *poly* accessible from the [`numpy`](index.html#module-numpy
    "numpy") namespace (e.g. [`numpy.polyadd`](generated/numpy.polyadd.html#numpy.polyadd
    "numpy.polyadd"), [`numpy.polyval`](generated/numpy.polyval.html#numpy.polyval
    "numpy.polyval"), [`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit"), etc.).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*多项式模块*一词指的是定义在`numpy.lib.polynomial`中的旧API，其中包括[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")类和以 *poly* 为前缀的多项式函数，可从[`numpy`](index.html#module-numpy "numpy")命名空间中访问（如[`numpy.polyadd`](generated/numpy.polyadd.html#numpy.polyadd
    "numpy.polyadd")、[`numpy.polyval`](generated/numpy.polyval.html#numpy.polyval
    "numpy.polyval")、[`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")等）。'
- en: The term *polynomial package* refers to the new API defined in [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial"), which includes the convenience classes for the different
    kinds of polynomials (`numpy.polynomial.Polynomial`, `numpy.polynomial.Chebyshev`,
    etc.).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*多项式包*一词指的是在[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")中定义的新API，其中包括不同类型多项式的便利类（`numpy.polynomial.Polynomial`、`numpy.polynomial.Chebyshev`等）。'
- en: Transitioning from [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") to [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")过渡到[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")
- en: As noted above, the [`poly1d class`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") and associated functions defined in `numpy.lib.polynomial`, such
    as [`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit "numpy.polyfit")
    and [`numpy.poly`](generated/numpy.poly.html#numpy.poly "numpy.poly"), are considered
    legacy and should **not** be used in new code. Since NumPy version 1.4, the [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") package is preferred for working with polynomials.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，`numpy.lib.polynomial`中定义的[`poly1d类`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")及其相关函数，如[`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")和[`numpy.poly`](generated/numpy.poly.html#numpy.poly "numpy.poly")等被视为传统遗留代码，不应在新代码中使用。自NumPy
    1.4版本起，优先使用[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")包处理多项式。
- en: Quick Reference
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速参考
- en: 'The following table highlights some of the main differences between the legacy
    polynomial module and the polynomial package for common tasks. The [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") class is imported for brevity:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了传统多项式模块和多项式包在常见任务中的一些主要差异。为简洁起见，导入了[`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")类：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| **How to…** | Legacy ([`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")) | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **如何……** | 旧版（[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d"))
    | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
- en: '| Create a polynomial object from coefficients [[1]](#id2) | `p = np.poly1d([1,
    2, 3])` | `p = Polynomial([3, 2, 1])` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 从系数创建多项式对象 [[1]](#id2) | `p = np.poly1d([1, 2, 3])` | `p = Polynomial([3,
    2, 1])` |'
- en: '| Create a polynomial object from roots | `r = np.poly([-1, 1])` `p = np.poly1d(r)`
    | `p = Polynomial.fromroots([-1, 1])` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 从根创建多项式对象 | `r = np.poly([-1, 1])` `p = np.poly1d(r)` | `p = Polynomial.fromroots([-1,
    1])` |'
- en: '| Fit a polynomial of degree `deg` to data | `np.polyfit(x, y, deg)` | `Polynomial.fit(x,
    y, deg)` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 对数据进行 `deg` 次多项式拟合 | `np.polyfit(x, y, deg)` | `Polynomial.fit(x, y, deg)`
    |'
- en: Transition Guide
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过渡指南
- en: There are significant differences between `numpy.lib.polynomial` and [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial"). The most significant difference is the ordering of the coefficients
    for the polynomial expressions. The various routines in [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") all deal with series whose coefficients go from degree zero
    upward, which is the *reverse order* of the poly1d convention. The easy way to
    remember this is that indices correspond to degree, i.e., `coef[i]` is the coefficient
    of the term of degree *i*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.lib.polynomial` 与 [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") 之间存在显著差异。最显著的差异是多项式表达式中系数的排列顺序。[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") 中的各种例程都处理系数从零次开始的级数，这与 poly1d 约定的*相反顺序*。要记住这一点很简单，因为指数对应于次数，即
    `coef[i]` 是 *i* 次项的系数。'
- en: 'Though the difference in convention may be confusing, it is straightforward
    to convert from the legacy polynomial API to the new. For example, the following
    demonstrates how you would convert a [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") instance representing the expression \(x^{2} + 2x + 3\) to a [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") instance representing the same expression:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然约定上的差异可能令人困惑，但从旧版多项式 API 转换到新版 API 却是直截了当的。例如，以下演示了如何将代表表达式 \(x^{2} + 2x +
    3\) 的 [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")
    实例转换为代表相同表达式的 [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") 实例：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In addition to the `coef` attribute, polynomials from the polynomial package
    also have `domain` and `window` attributes. These attributes are most relevant
    when fitting polynomials to data, though it should be noted that polynomials with
    different `domain` and `window` attributes are not considered equal, and can’t
    be mixed in arithmetic:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `coef` 属性之外，多项式包中的多项式还具有 `domain` 和 `window` 属性。当拟合数据时，这些属性是最相关的，尽管应该注意，带有不同
    `domain` 和 `window` 属性的多项式不被视为相等，并且不能在算术运算中混合使用：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See the documentation for the [convenience classes](routines.polynomials.classes)
    for further details on the `domain` and `window` attributes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `domain` 和 `window` 属性的更多详细信息，请参阅[方便的类](routines.polynomials.classes)文档。
- en: 'Another major difference between the legacy polynomial module and the polynomial
    package is polynomial fitting. In the old module, fitting was done via the [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit") function. In the polynomial package, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred. For example,
    consider a simple linear fit to the following data:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版多项式模块与多项式包之间的另一个主要差异是多项式拟合。在旧模块中，拟合是通过 [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit") 函数进行的。在多项式包中，首选 [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") 类方法。例如，考虑对以下数据进行简单线性拟合：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the legacy polynomial module, a linear fit (i.e. polynomial of degree
    1) could be applied to these data with [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit"):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用旧版多项式模块，可以使用 [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit "numpy.polyfit")
    对这些数据进行线性拟合（即一次多项式）：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the new polynomial API, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有了新的多项式 API，优先使用 [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") 类方法：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the coefficients are given *in the scaled domain* defined by the linear
    mapping between the `window` and `domain`. [`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert") can be used to get the coefficients
    in the unscaled data domain.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，系数是以*缩放域*给出的，在`window`和`domain`之间的线性映射定义的域内。可以使用 [`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert") 来获取未缩放数据域中的系数。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Documentation for the [`polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") Package
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`polynomial`](routines.polynomials.package.html#module-numpy.polynomial "numpy.polynomial")
    包的文档'
- en: In addition to standard power series polynomials, the polynomial package provides
    several additional kinds of polynomials including Chebyshev, Hermite (two subtypes),
    Laguerre, and Legendre polynomials. Each of these has an associated *convenience
    class* available from the [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") namespace that provides a consistent interface for working
    with polynomials regardless of their type.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的幂级数多项式外，多项式包还提供了包括切比雪夫、厄米特（两个子类型）、拉盖尔和勒让德多项式在内的几种额外类型的多项式。每种多项式都有一个关联的*便捷类*，可以从[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")命名空间中获取，提供了一个统一的接口来处理多项式，无论它们的类型是什么。
- en: '[Using the Convenience Classes](routines.polynomials.classes.html)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用便捷类](routines.polynomials.classes.html)'
- en: 'Documentation pertaining to specific functions defined for each kind of polynomial
    individually can be found in the corresponding module documentation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关单独为每种多项式定义的特定函数的文档可以在相应的模块文档中找到：
- en: '[Power Series (`numpy.polynomial.polynomial`)](routines.polynomials.polynomial.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[幂级数 (`numpy.polynomial.polynomial`)](routines.polynomials.polynomial.html)'
- en: '[Chebyshev Series (`numpy.polynomial.chebyshev`)](routines.polynomials.chebyshev.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[切比雪夫系列 (`numpy.polynomial.chebyshev`)](routines.polynomials.chebyshev.html)'
- en: '[Hermite Series, “Physicists” (`numpy.polynomial.hermite`)](routines.polynomials.hermite.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[厄米特系列，“物理学家” (`numpy.polynomial.hermite`)](routines.polynomials.hermite.html)'
- en: '[HermiteE Series, “Probabilists” (`numpy.polynomial.hermite_e`)](routines.polynomials.hermite_e.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[厄米特E系列，“概率论家” (`numpy.polynomial.hermite_e`)](routines.polynomials.hermite_e.html)'
- en: '[Laguerre Series (`numpy.polynomial.laguerre`)](routines.polynomials.laguerre.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拉盖尔系列 (`numpy.polynomial.laguerre`)](routines.polynomials.laguerre.html)'
- en: '[Legendre Series (`numpy.polynomial.legendre`)](routines.polynomials.legendre.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[勒让德系列 (`numpy.polynomial.legendre`)](routines.polynomials.legendre.html)'
- en: '[Polyutils](routines.polynomials.polyutils.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Polyutils](routines.polynomials.polyutils.html)'
- en: Documentation for Legacy Polynomials
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧版多项式的文档
- en: '[Poly1d](routines.polynomials.poly1d.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Poly1d](routines.polynomials.poly1d.html)'
- en: '[Basics](routines.polynomials.poly1d.html#basics)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础知识](routines.polynomials.poly1d.html#basics)'
- en: '[Fitting](routines.polynomials.poly1d.html#fitting)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拟合](routines.polynomials.poly1d.html#fitting)'
- en: '[Calculus](routines.polynomials.poly1d.html#calculus)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[微积分](routines.polynomials.poly1d.html#calculus)'
- en: '[Arithmetic](routines.polynomials.poly1d.html#arithmetic)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[算术](routines.polynomials.poly1d.html#arithmetic)'
- en: '[Warnings](routines.polynomials.poly1d.html#warnings)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[警告](routines.polynomials.poly1d.html#warnings)'
- en: Transitioning from [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") to [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")
    过渡到 [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")
- en: As noted above, the [`poly1d class`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") and associated functions defined in `numpy.lib.polynomial`, such
    as [`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit "numpy.polyfit")
    and [`numpy.poly`](generated/numpy.poly.html#numpy.poly "numpy.poly"), are considered
    legacy and should **not** be used in new code. Since NumPy version 1.4, the [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") package is preferred for working with polynomials.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，[`poly1d 类`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d")和`numpy.lib.polynomial`中定义的相关函数，如[`numpy.polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")和[`numpy.poly`](generated/numpy.poly.html#numpy.poly "numpy.poly")等被视为遗留，并且**不**应在新代码中使用。自NumPy版本1.4起，首选使用[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")包来处理多项式。
- en: Quick Reference
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速参考
- en: 'The following table highlights some of the main differences between the legacy
    polynomial module and the polynomial package for common tasks. The [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") class is imported for brevity:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格突出显示了遗留多项式模块和多项式包在常见任务中的一些主要区别。为简洁起见导入了[`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")类：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| **How to…** | Legacy ([`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")) | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **如何…** | 遗留 ([`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d"))
    | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
- en: '| Create a polynomial object from coefficients [[1]](#id2) | `p = np.poly1d([1,
    2, 3])` | `p = Polynomial([3, 2, 1])` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 从系数创建多项式对象 [[1]](#id2) | `p = np.poly1d([1, 2, 3])` | `p = Polynomial([3,
    2, 1])` |'
- en: '| Create a polynomial object from roots | `r = np.poly([-1, 1])` `p = np.poly1d(r)`
    | `p = Polynomial.fromroots([-1, 1])` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 从根创建多项式对象 | `r = np.poly([-1, 1])` `p = np.poly1d(r)` | `p = Polynomial.fromroots([-1,
    1])` |'
- en: '| Fit a polynomial of degree `deg` to data | `np.polyfit(x, y, deg)` | `Polynomial.fit(x,
    y, deg)` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 对数据进行`deg`次多项式拟合 | `np.polyfit(x, y, deg)` | `Polynomial.fit(x, y, deg)`
    |'
- en: Transition Guide
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移指南
- en: There are significant differences between `numpy.lib.polynomial` and [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial"). The most significant difference is the ordering of the coefficients
    for the polynomial expressions. The various routines in [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") all deal with series whose coefficients go from degree zero
    upward, which is the *reverse order* of the poly1d convention. The easy way to
    remember this is that indices correspond to degree, i.e., `coef[i]` is the coefficient
    of the term of degree *i*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.lib.polynomial`和[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")之间存在显著差异。最显著的区别是多项式表达式中系数的顺序。[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")中的各种例程都处理系数从零次开始向上的级数，这与poly1d约定的*相反顺序*。简单记忆方法是索引对应于次数，即`coef[i]`是*第i项*的系数。'
- en: 'Though the difference in convention may be confusing, it is straightforward
    to convert from the legacy polynomial API to the new. For example, the following
    demonstrates how you would convert a [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") instance representing the expression \(x^{2} + 2x + 3\) to a [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") instance representing the same expression:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然约定上的差异可能会令人困惑，但从遗留多项式API转换到新API是直截了当的。例如，下面演示了如何将表示表达式\(x^{2} + 2x + 3\)的[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")实例转换为表示相同表达式的[`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")实例：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In addition to the `coef` attribute, polynomials from the polynomial package
    also have `domain` and `window` attributes. These attributes are most relevant
    when fitting polynomials to data, though it should be noted that polynomials with
    different `domain` and `window` attributes are not considered equal, and can’t
    be mixed in arithmetic:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`coef`属性外，多项式包中的多项式还具有`domain`和`window`属性。当将多项式拟合到数据时，这些属性最相关，尽管需要注意的是具有不同`domain`和`window`属性的多项式不被视为相等，且不能在算术运算中混合使用：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See the documentation for the [convenience classes](routines.polynomials.classes)
    for further details on the `domain` and `window` attributes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[方便的类](routines.polynomials.classes)的文档, 以获取有关`domain`和`window`属性的进一步详细信息。
- en: 'Another major difference between the legacy polynomial module and the polynomial
    package is polynomial fitting. In the old module, fitting was done via the [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit") function. In the polynomial package, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred. For example,
    consider a simple linear fit to the following data:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的多项式模块和多项式包之间的另一个主要区别是多项式拟合。在旧模块中，拟合是通过[`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")函数完成的。在多项式包中，更倾向于使用[`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit")类方法。例如，考虑对以下数据进行简单的线性拟合：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the legacy polynomial module, a linear fit (i.e. polynomial of degree
    1) could be applied to these data with [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit"):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的多项式模块中，可以使用[`polyfit`](generated/numpy.polyfit.html#numpy.polyfit "numpy.polyfit")对这些数据进行线性拟合（即一次多项式）：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the new polynomial API, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的多项式API，更倾向于使用[`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit")类方法：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the coefficients are given *in the scaled domain* defined by the linear
    mapping between the `window` and `domain`. [`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert") can be used to get the coefficients
    in the unscaled data domain.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，系数是以*比例领域*给出的，由线性映射定义了`window`和`domain`之间的关系。[`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert")可用于在未缩放数据领域中获取系数。
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Quick Reference
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速参考
- en: 'The following table highlights some of the main differences between the legacy
    polynomial module and the polynomial package for common tasks. The [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") class is imported for brevity:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格突出显示了传统多项式模块和多项式包在常见任务中的一些主要区别。为简洁起见, 导入了[`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")类：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| **How to…** | Legacy ([`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")) | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '|**如何…** | 传统（[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d "numpy.poly1d"))
    | [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") |'
- en: '| Create a polynomial object from coefficients [[1]](#id2) | `p = np.poly1d([1,
    2, 3])` | `p = Polynomial([3, 2, 1])` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '|根据系数创建多项式对象 [[1]](#id2) | `p = np.poly1d([1, 2, 3])` | `p = Polynomial([3,
    2, 1])` |'
- en: '| Create a polynomial object from roots | `r = np.poly([-1, 1])` `p = np.poly1d(r)`
    | `p = Polynomial.fromroots([-1, 1])` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '|根据根创建多项式对象 | `r = np.poly([-1, 1])` `p = np.poly1d(r)` | `p = Polynomial.fromroots([-1,
    1])` |'
- en: '| Fit a polynomial of degree `deg` to data | `np.polyfit(x, y, deg)` | `Polynomial.fit(x,
    y, deg)` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '|对数据进行`deg`次多项式拟合 | `np.polyfit(x, y, deg)` | `Polynomial.fit(x, y, deg)` |'
- en: Transition Guide
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移指南
- en: There are significant differences between `numpy.lib.polynomial` and [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial"). The most significant difference is the ordering of the coefficients
    for the polynomial expressions. The various routines in [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") all deal with series whose coefficients go from degree zero
    upward, which is the *reverse order* of the poly1d convention. The easy way to
    remember this is that indices correspond to degree, i.e., `coef[i]` is the coefficient
    of the term of degree *i*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.lib.polynomial`和[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")之间存在显著的差异。最显著的差异是多项式表达式的系数顺序。[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")中的各种例程都涉及系数从零次往上的级数，这与`poly1d`约定的*相反顺序*相符。记住这一点的简单方法是索引对应于次数,
    即，`coef[i]`是*第i次*项的系数。 '
- en: 'Though the difference in convention may be confusing, it is straightforward
    to convert from the legacy polynomial API to the new. For example, the following
    demonstrates how you would convert a [`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d") instance representing the expression \(x^{2} + 2x + 3\) to a [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") instance representing the same expression:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管约定的差异可能令人困惑，但从传统多项式API转换到新API是直接的。例如，以下演示了如何将代表表达式\(x^{2} + 2x + 3\)的[`numpy.poly1d`](generated/numpy.poly1d.html#numpy.poly1d
    "numpy.poly1d")实例转换为代表相同表达式的[`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")实例：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In addition to the `coef` attribute, polynomials from the polynomial package
    also have `domain` and `window` attributes. These attributes are most relevant
    when fitting polynomials to data, though it should be noted that polynomials with
    different `domain` and `window` attributes are not considered equal, and can’t
    be mixed in arithmetic:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`coef`属性外，多项式包中的多项式还具有`domain`和`window`属性。这些属性在拟合多项式到数据时最相关，虽然应注意到具有不同`domain`和`window`属性的多项式不被视为相等，不能混合进行算术运算：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See the documentation for the [convenience classes](routines.polynomials.classes)
    for further details on the `domain` and `window` attributes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`domain`和`window`属性的更多详细信息，请参阅[便利类](routines.polynomials.classes)的文档。
- en: 'Another major difference between the legacy polynomial module and the polynomial
    package is polynomial fitting. In the old module, fitting was done via the [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit") function. In the polynomial package, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred. For example,
    consider a simple linear fit to the following data:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 传统多项式模块和多项式包之间的另一个主要区别是多项式拟合。在旧模块中，拟合是通过[`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")函数完成的。在多项式包中，更偏爱使用[`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit")类方法。例如，考虑对以下数据进行简单线性拟合：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the legacy polynomial module, a linear fit (i.e. polynomial of degree
    1) could be applied to these data with [`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit"):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统多项式模块中，线性拟合（即一次多项式）可以用[`polyfit`](generated/numpy.polyfit.html#numpy.polyfit
    "numpy.polyfit")应用于这些数据：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the new polynomial API, the [`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit") class method is preferred:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的多项式API，更偏爱使用[`fit`](generated/numpy.polynomial.polynomial.Polynomial.fit.html#numpy.polynomial.polynomial.Polynomial.fit
    "numpy.polynomial.polynomial.Polynomial.fit")类方法：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that the coefficients are given *in the scaled domain* defined by the linear
    mapping between the `window` and `domain`. [`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert") can be used to get the coefficients
    in the unscaled data domain.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，系数是以 *已缩放域*给出的，在`window`和`domain`之间的线性映射所定义的。可使用[`convert`](generated/numpy.polynomial.polynomial.Polynomial.convert.html#numpy.polynomial.polynomial.Polynomial.convert
    "numpy.polynomial.polynomial.Polynomial.convert")来获得未缩放数据域中的系数。
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Documentation for the [`polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") Package
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[多项式](routines.polynomials.package.html#module-numpy.polynomial "numpy.polynomial")包的文档'
- en: In addition to standard power series polynomials, the polynomial package provides
    several additional kinds of polynomials including Chebyshev, Hermite (two subtypes),
    Laguerre, and Legendre polynomials. Each of these has an associated *convenience
    class* available from the [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") namespace that provides a consistent interface for working
    with polynomials regardless of their type.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的幂级数多项式外，多项式包还提供了几种额外的多项式，包括切比雪夫、埃尔米特（两种子类型）、拉盖尔和勒让德多项式。每种多项式都有一个相关的*便利类*，可从[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")名称空间中获得，提供了一致的接口，可用于处理不同类型的多项式。
- en: '[Using the Convenience Classes](routines.polynomials.classes.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用便利类](routines.polynomials.classes.html)'
- en: 'Documentation pertaining to specific functions defined for each kind of polynomial
    individually can be found in the corresponding module documentation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与每种多项式定义的特定函数相关的文档可以在相应的模块文档中找到：
- en: '[Power Series (`numpy.polynomial.polynomial`)](routines.polynomials.polynomial.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[幂级数 (`numpy.polynomial.polynomial`)](routines.polynomials.polynomial.html)'
- en: '[Chebyshev Series (`numpy.polynomial.chebyshev`)](routines.polynomials.chebyshev.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Chebyshev 级数 (`numpy.polynomial.chebyshev`)](routines.polynomials.chebyshev.html)'
- en: '[Hermite Series, “Physicists” (`numpy.polynomial.hermite`)](routines.polynomials.hermite.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hermite 级数，"物理学家" (`numpy.polynomial.hermite`)](routines.polynomials.hermite.html)'
- en: '[HermiteE Series, “Probabilists” (`numpy.polynomial.hermite_e`)](routines.polynomials.hermite_e.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HermiteE 级数，"概率论者" (`numpy.polynomial.hermite_e`)](routines.polynomials.hermite_e.html)'
- en: '[Laguerre Series (`numpy.polynomial.laguerre`)](routines.polynomials.laguerre.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Laguerre 级数 (`numpy.polynomial.laguerre`)](routines.polynomials.laguerre.html)'
- en: '[Legendre Series (`numpy.polynomial.legendre`)](routines.polynomials.legendre.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Legendre 级数 (`numpy.polynomial.legendre`)](routines.polynomials.legendre.html)'
- en: '[Polyutils](routines.polynomials.polyutils.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Polyutils](routines.polynomials.polyutils.html)'
- en: Documentation for Legacy Polynomials
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧版多项式文档
- en: '[Poly1d](routines.polynomials.poly1d.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Poly1d](routines.polynomials.poly1d.html)'
- en: '[Basics](routines.polynomials.poly1d.html#basics)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础知识](routines.polynomials.poly1d.html#basics)'
- en: '[Fitting](routines.polynomials.poly1d.html#fitting)'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拟合](routines.polynomials.poly1d.html#fitting)'
- en: '[Calculus](routines.polynomials.poly1d.html#calculus)'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[微积分](routines.polynomials.poly1d.html#calculus)'
- en: '[Arithmetic](routines.polynomials.poly1d.html#arithmetic)'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[算术运算](routines.polynomials.poly1d.html#arithmetic)'
- en: '[Warnings](routines.polynomials.poly1d.html#warnings)'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[警告](routines.polynomials.poly1d.html#warnings)'
