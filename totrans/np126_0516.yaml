- en: numpy.vectorize
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.vectorize
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html](https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html](https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Returns an object that acts like pyfunc, but takes arrays as input.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个行为类似于 *pyfunc* 的对象，但以数组作为输入。
- en: Define a vectorized function which takes a nested sequence of objects or numpy
    arrays as inputs and returns a single numpy array or a tuple of numpy arrays.
    The vectorized function evaluates *pyfunc* over successive tuples of the input
    arrays like the python map function, except it uses the broadcasting rules of
    numpy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个矢量化函数，它将嵌套序列的对象或numpy数组作为输入，并返回单个numpy数组或numpy数组的元组。该矢量化函数评估 *pyfunc* 在输入数组的连续元组上，就像
    python 的 map 函数一样，只是它使用了 numpy 的广播规则。
- en: The data type of the output of *vectorized* is determined by calling the function
    with the first element of the input. This can be avoided by specifying the *otypes*
    argument.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*vectorized*的输出数据类型由调用该函数与输入的第一个元素确定。可以通过指定*otypes*参数来避免这种情况。'
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**pyfunc**callable, optional'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**pyfunc**callable，可选'
- en: A python function or method. Can be omitted to produce a decorator with keyword
    arguments.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 python 函数或方法。可以省略以使用关键字参数生成装饰器。
- en: '**otypes**str or list of dtypes, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**otypes**str 或 dtype 列表，可选'
- en: The output data type. It must be specified as either a string of typecode characters
    or a list of data type specifiers. There should be one data type specifier for
    each output.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输出数据类型。必须指定为typecode字符的字符串或数据类型描述符的列表。每个输出应该有一个数据类型描述符。
- en: '**doc**str, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**doc**str，可选'
- en: The docstring for the function. If None, the docstring will be the `pyfunc.__doc__`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的文档字符串。如果为None，则文档字符串将为 `pyfunc.__doc__`。
- en: '**excluded**set, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**excluded**set，可选'
- en: Set of strings or integers representing the positional or keyword arguments
    for which the function will not be vectorized. These will be passed directly to
    *pyfunc* unmodified.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一组字符串或整数，表示函数不会被矢量化的位置参数或关键字参数。这些参数将直接传递给 *pyfunc*，不做修改。
- en: New in version 1.7.0.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本功能：1.7.0。
- en: '**cache**bool, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**cache**bool，可选'
- en: If *True*, then cache the first function call that determines the number of
    outputs if *otypes* is not provided.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 *True*，则缓存第一个函数调用，以确定是否提供 *otypes*。
- en: New in version 1.7.0.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本功能：1.7.0。
- en: '**signature**string, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**signature**string，可选'
- en: Generalized universal function signature, e.g., `(m,n),(n)->(m)` for vectorized
    matrix-vector multiplication. If provided, `pyfunc` will be called with (and expected
    to return) arrays with shapes given by the size of corresponding core dimensions.
    By default, `pyfunc` is assumed to take scalars as input and output.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 广义通用函数签名，例如 `(m,n),(n)->(m)` 用于矢量化的矩阵-向量乘法。如果提供，则假定 `pyfunc` 将使用（并要求返回）数组，其形状由相应的核心维度大小给出。默认情况下，假定
    `pyfunc` 输入和输出为标量。
- en: New in version 1.12.0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本功能：1.12.0。
- en: 'Returns:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**out**callable'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**callable'
- en: A vectorized function if `pyfunc` was provided, a decorator otherwise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了 `pyfunc` 则返回一个矢量化函数，否则返回一个装饰器。
- en: See also
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`frompyfunc`](numpy.frompyfunc.html#numpy.frompyfunc "numpy.frompyfunc")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`frompyfunc`](numpy.frompyfunc.html#numpy.frompyfunc "numpy.frompyfunc")'
- en: Takes an arbitrary Python function and returns a ufunc
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接受任意 Python 函数并返回一个通用函数（ufunc）。
- en: Notes
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注解
- en: The [`vectorize`](#numpy.vectorize "numpy.vectorize") function is provided primarily
    for convenience, not for performance. The implementation is essentially a for
    loop.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`vectorize`](#numpy.vectorize "numpy.vectorize") 函数主要为方便起见而提供，并非用于性能。该实现基本上是一个
    for 循环。'
- en: If *otypes* is not specified, then a call to the function with the first argument
    will be used to determine the number of outputs. The results of this call will
    be cached if *cache* is *True* to prevent calling the function twice. However,
    to implement the cache, the original function must be wrapped which will slow
    down subsequent calls, so only do this if your function is expensive.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定 *otypes*，则使用第一个参数调用函数来确定输出的数量。如果 *cache* 为 *True*，则此调用的结果将被缓存，以防止两次调用函数。但是，为了实现缓存，必须包装原始函数，这将减慢后续调用的速度，因此只有在函数开销较大时才这样做。
- en: The new keyword argument interface and *excluded* argument support further degrades
    performance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 新的关键字参数接口和 *excluded* 参数支持将进一步降低性能。
- en: References
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[1]'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]'
- en: '[Generalized Universal Function API](../c-api/generalized-ufuncs.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[广义通用函数 API](../c-api/generalized-ufuncs.html)'
- en: Examples
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The docstring is taken from the input function to [`vectorize`](#numpy.vectorize
    "numpy.vectorize") unless it is specified:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串取自输入函数到[`vectorize`](#numpy.vectorize "numpy.vectorize") ，除非另有规定：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output type is determined by evaluating the first element of the input,
    unless it is specified:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类型由评估输入的第一个元素来确定，除非另有规定：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The *excluded* argument can be used to prevent vectorizing over certain arguments.
    This can be useful for array-like arguments of a fixed length such as the coefficients
    for a polynomial as in [`polyval`](numpy.polyval.html#numpy.polyval "numpy.polyval"):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*排除*参数可用于防止对某些参数进行向量化。这在类似多项式系数（例如[`polyval`](numpy.polyval.html#numpy.polyval
    "numpy.polyval") ）的固定长度的数组参数中非常有用：'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Positional arguments may also be excluded by specifying their position:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定其位置，也可以排除位置参数：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The *signature* argument allows for vectorizing functions that act on non-scalar
    arrays of fixed length. For example, you can use it for a vectorized calculation
    of Pearson correlation coefficient and its p-value:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*signature*参数允许对作用于固定长度非标量数组的函数进行向量化。 例如，可以用它进行皮尔逊相关系数及其p值的向量化计算：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or for a vectorized convolution:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者用于向量化卷积：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Decorator syntax is supported. The decorator can be called as a function to
    provide keyword arguments. >>>@np.vectorize …def identity(x): … return x … >>>identity([0,
    1, 2]) array([0, 1, 2]) >>>@np.vectorize(otypes=[float]) …def as_float(x): … return
    x … >>>as_float([0, 1, 2]) array([0., 1., 2.])'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '支持装饰器语法。 装饰器可以被调用为一个函数以提供关键字参数。 >>>@np.vectorize …def identity(x): … return
    x … >>>identity([0, 1, 2]) array([0, 1, 2]) >>>@np.vectorize(otypes=[float]) …def
    as_float(x): … return x … >>>as_float([0, 1, 2]) array([0., 1., 2.])'
- en: Methods
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`__call__`](numpy.vectorize.__call__.html#numpy.vectorize.__call__ "numpy.vectorize.__call__")(*args, **kwargs)
    | Call self as a function. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`__call__`](numpy.vectorize.__call__.html#numpy.vectorize.__call__ "numpy.vectorize.__call__")(*args, **kwargs)
    | 将自身作为函数调用。 |'
