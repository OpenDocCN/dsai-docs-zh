- en: scipy.optimize.RootResults
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.RootResults
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Represents the root finding result.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 代表根查找结果。
- en: 'Attributes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**root**float'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**root**float'
- en: Estimated root location.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 估计的根位置。
- en: '**iterations**int'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterations**int'
- en: Number of iterations needed to find the root.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找根所需的迭代次数。
- en: '**function_calls**int'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**function_calls**int'
- en: Number of times the function was called.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数的次数。
- en: '**converged**bool'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**converged**bool'
- en: True if the routine converged.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果例程收敛，则为真。
- en: '**flag**str'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**flag**str'
- en: Description of the cause of termination.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 终止原因的描述。
- en: '**method**str'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**method**str'
- en: Root finding method used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的根查找方法。
- en: Methods
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`__getitem__`](scipy.optimize.RootResults.__getitem__.html#scipy.optimize.RootResults.__getitem__
    "scipy.optimize.RootResults.__getitem__") | x.__getitem__(y) <==> x[y] |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`__getitem__`](scipy.optimize.RootResults.__getitem__.html#scipy.optimize.RootResults.__getitem__
    "scipy.optimize.RootResults.__getitem__") | x.__getitem__(y) <==> x[y] |'
- en: '| [`__len__`](scipy.optimize.RootResults.__len__.html#scipy.optimize.RootResults.__len__
    "scipy.optimize.RootResults.__len__")(/) | Return len(self). |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`__len__`](scipy.optimize.RootResults.__len__.html#scipy.optimize.RootResults.__len__
    "scipy.optimize.RootResults.__len__")(/) | 返回len(self)。 |'
- en: '| [`clear`](scipy.optimize.RootResults.clear.html#scipy.optimize.RootResults.clear
    "scipy.optimize.RootResults.clear")() |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`clear`](scipy.optimize.RootResults.clear.html#scipy.optimize.RootResults.clear
    "scipy.optimize.RootResults.clear")() |  |'
- en: '| [`copy`](scipy.optimize.RootResults.copy.html#scipy.optimize.RootResults.copy
    "scipy.optimize.RootResults.copy")() |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](scipy.optimize.RootResults.copy.html#scipy.optimize.RootResults.copy
    "scipy.optimize.RootResults.copy")() |  |'
- en: '| [`fromkeys`](scipy.optimize.RootResults.fromkeys.html#scipy.optimize.RootResults.fromkeys
    "scipy.optimize.RootResults.fromkeys")(iterable[, value]) | Create a new dictionary
    with keys from iterable and values set to value. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`fromkeys`](scipy.optimize.RootResults.fromkeys.html#scipy.optimize.RootResults.fromkeys
    "scipy.optimize.RootResults.fromkeys")(iterable[, value]) | 使用来自iterable的键创建一个新的字典，并将值设置为value。
    |'
- en: '| [`get`](scipy.optimize.RootResults.get.html#scipy.optimize.RootResults.get
    "scipy.optimize.RootResults.get")(key[, default]) | Return the value for key if
    key is in the dictionary, else default. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`get`](scipy.optimize.RootResults.get.html#scipy.optimize.RootResults.get
    "scipy.optimize.RootResults.get")(key[, default]) | 如果键在字典中，则返回键的值，否则返回默认值。 |'
- en: '| [`items`](scipy.optimize.RootResults.items.html#scipy.optimize.RootResults.items
    "scipy.optimize.RootResults.items")() |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`items`](scipy.optimize.RootResults.items.html#scipy.optimize.RootResults.items
    "scipy.optimize.RootResults.items")() |  |'
- en: '| [`keys`](scipy.optimize.RootResults.keys.html#scipy.optimize.RootResults.keys
    "scipy.optimize.RootResults.keys")() |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`keys`](scipy.optimize.RootResults.keys.html#scipy.optimize.RootResults.keys
    "scipy.optimize.RootResults.keys")() |  |'
- en: '| [`pop`](scipy.optimize.RootResults.pop.html#scipy.optimize.RootResults.pop
    "scipy.optimize.RootResults.pop")(key[, default]) | If key is not found, default
    is returned if given, otherwise KeyError is raised |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`pop`](scipy.optimize.RootResults.pop.html#scipy.optimize.RootResults.pop
    "scipy.optimize.RootResults.pop")(key[, default]) | 如果未找到键，则返回给定的默认值，否则引发KeyError
    |'
- en: '| [`popitem`](scipy.optimize.RootResults.popitem.html#scipy.optimize.RootResults.popitem
    "scipy.optimize.RootResults.popitem")(/) | Remove and return a (key, value) pair
    as a 2-tuple. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`popitem`](scipy.optimize.RootResults.popitem.html#scipy.optimize.RootResults.popitem
    "scipy.optimize.RootResults.popitem")(/) | 移除并返回一个（键，值）对作为一个2元组。 |'
- en: '| [`setdefault`](scipy.optimize.RootResults.setdefault.html#scipy.optimize.RootResults.setdefault
    "scipy.optimize.RootResults.setdefault")(key[, default]) | Insert key with a value
    of default if key is not in the dictionary. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`setdefault`](scipy.optimize.RootResults.setdefault.html#scipy.optimize.RootResults.setdefault
    "scipy.optimize.RootResults.setdefault")(key[, default]) | 如果键不在字典中，则插入具有默认值的键。
    |'
- en: '| [`update`](scipy.optimize.RootResults.update.html#scipy.optimize.RootResults.update
    "scipy.optimize.RootResults.update")([E, ]**F) | If E is present and has a .keys()
    method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys()
    method, then does: for k, v in E: D[k] = v In either case, this is followed by:
    for k in F: D[k] = F[k] |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`update`](scipy.optimize.RootResults.update.html#scipy.optimize.RootResults.update
    "scipy.optimize.RootResults.update")([E, ]**F) | 如果E存在且具有.keys()方法，则执行以下操作：对于k在E中：D[k]
    = E[k] 如果E存在但没有.keys()方法，则对于k，v在E中：D[k] = v 无论哪种情况，接下来进行以下操作：对于k在F中：D[k] = F[k]
    |'
- en: '| [`values`](scipy.optimize.RootResults.values.html#scipy.optimize.RootResults.values
    "scipy.optimize.RootResults.values")() |  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`values`](scipy.optimize.RootResults.values.html#scipy.optimize.RootResults.values
    "scipy.optimize.RootResults.values")() |  |'
