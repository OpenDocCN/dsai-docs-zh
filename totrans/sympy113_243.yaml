- en: pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/testing/pytest.html](https://docs.sympy.org/latest/modules/testing/pytest.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: py.test hacks to support XFAIL/XPASS
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Similar to `skip()`, but this is a decorator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Dummy decorator for marking tests that fail when cache is disabled
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tests that `code` raises the exception `expectedException`.
  prefs: []
  type: TYPE_NORMAL
- en: '`code` may be a callable, such as a lambda expression or function name.'
  prefs: []
  type: TYPE_NORMAL
- en: If `code` is not given or None, `raises` will return a context manager for use
    in `with` statements; the code to execute then comes from the scope of the `with`.
  prefs: []
  type: TYPE_NORMAL
- en: '`raises()` does nothing if the callable raises the expected exception, otherwise
    it raises an AssertionError.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you cannot test multiple statements via `with raises`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is just what `with` is supposed to do: abort the contained statement sequence
    at the first exception and let the context manager deal with the exception.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test multiple statements, you’ll need a separate `with` for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Decorator to skip a test if running under pyodide.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Like raises but tests that warnings are emitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`test_stacklevel` makes it check that the `stacklevel` parameter to `warn()`
    is set so that the warning shows the user line of code (the code under the warns()
    context manager). Set this to False if this is ambiguous or if the context manager
    does not test the direct user code that emits the warning.'
  prefs: []
  type: TYPE_NORMAL
- en: If the warning is a `SymPyDeprecationWarning`, this additionally tests that
    the `active_deprecations_target` is a real target in the `active-deprecations.md`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Shorthand for `warns(SymPyDeprecationWarning)`
  prefs: []
  type: TYPE_NORMAL
- en: This is the recommended way to test that `SymPyDeprecationWarning` is emitted
    for deprecated features in SymPy. To test for other warnings use `warns`. To suppress
    warnings without asserting that they are emitted use `ignore_warnings`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`warns_deprecated_sympy()` is only intended for internal use in the SymPy test
    suite to test that a deprecation warning triggers properly. All other code in
    the SymPy codebase, including documentation examples, should not use deprecated
    behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a user of SymPy and you want to disable SymPyDeprecationWarnings,
    use `warnings` filters (see [Silencing SymPy Deprecation Warnings](../../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the stacklevel test will fail because the same warning is emitted
    multiple times. In this case, you can use [`sympy.utilities.exceptions.ignore_warnings()`](../utilities/exceptions.html#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings") in the code to prevent the `SymPyDeprecationWarning`
    from being emitted again recursively. In rare cases it is impossible to have a
    consistent `stacklevel` for deprecation warnings because different ways of calling
    a function will produce different call stacks.. In those cases, use `warns(SymPyDeprecationWarning)`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](../utilities/exceptions.html#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.sympy_deprecation_warning`](../utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.decorator.deprecated`](../utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated")'
  prefs: []
  type: TYPE_NORMAL
