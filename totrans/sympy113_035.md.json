["```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols, Eq\n>>> a, b, c = symbols(\"a, b, c\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag_eq = Eq(a**2 + b**2, c**2)\n>>> # Solve Diophantine equation\n>>> d = diophantine(pythag_eq, syms=my_syms)\n>>> d\n{(2*p*q, p**2 - q**2, p**2 + q**2)} \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c = symbols(\"a, b, c\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> diophantine(pythag, syms=my_syms)\n{(2*p*q, p**2 - q**2, p**2 + q**2)} \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c = symbols(\"a, b, c\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> solution, = diophantine(pythag, syms=my_syms)\n>>> solution\n(2*p*q, p**2 - q**2, p**2 + q**2)\n>>> # Convert set to list\n>>> solution_dict = dict(zip(my_syms, solution))\n>>> solution_dict\n{a: 2*p*q, b: p**2 - q**2, c: p**2 + q**2}\n>>> # Extract an expression for one variable using its symbol, here a\n>>> solution_dict[a]\n2*p*q \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c, p, q = symbols(\"a, b, c, p, q\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> d = diophantine(pythag, syms=my_syms)\n>>> d\n{(2*p*q, p**2 - q**2, p**2 + q**2)}\n>>> # Convert set to list\n>>> solution_list = list(d)\n>>> solution_list\n[(2*p*q, p**2 - q**2, p**2 + q**2)]\n>>> # Extract a tuple corresponding to a solution\n>>> solution_first = solution_list[0]\n>>> solution_first\n(2*p*q, p**2 - q**2, p**2 + q**2)\n>>> # Extract an expression for one variable using its order, here a is element number zero\n>>> solution_first[0]\n2*p*q \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> d = diophantine(pythag, syms=my_syms)\n>>> solution_list = list(d)\n>>> solution_list\n[(2*p*q, p**2 - q**2, p**2 + q**2)]\n>>> p, q = symbols(\"p, q\", integer=True)\n>>> # Substitute in values as the dictionary is created\n>>> solution_p4q3 = dict(zip(my_syms, [var.subs({p:4, q:3}) for var in solution_list[0]]))\n>>> solution_p4q3\n{a: 24, b: 7, c: 25} \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c, p, q = symbols(\"a, b, c, p, q\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> d = diophantine(pythag, syms=my_syms)\n>>> solution_list = list(d)\n>>> # Iterate over the value of parameters p and q\n>>> for p_val in range(-1,2):\n...     for q_val in range(-1,2):\n...         # Substitute in the values of p and q\n...         pythag_vals = dict(zip(my_syms, [var.subs({p:p_val, q:q_val}) for var in solution_list[0]]))\n...         # Print out the values of the generated parameters, and the Pythagorean triple a, b, c\n...         print(f\"p: {p_val}, q: {q_val} -> {pythag_vals}\")\np: -1, q: -1 -> {a: 2, b: 0, c: 2}\np: -1, q: 0 -> {a: 0, b: 1, c: 1}\np: -1, q: 1 -> {a: -2, b: 0, c: 2}\np: 0, q: -1 -> {a: 0, b: -1, c: 1}\np: 0, q: 0 -> {a: 0, b: 0, c: 0}\np: 0, q: 1 -> {a: 0, b: -1, c: 1}\np: 1, q: -1 -> {a: -2, b: 0, c: 2}\np: 1, q: 0 -> {a: 0, b: 1, c: 1}\np: 1, q: 1 -> {a: 2, b: 0, c: 2} \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c, p, q = symbols(\"a, b, c, p, q\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> d = diophantine(pythag, syms=my_syms)\n>>> solution_list = list(d)\n>>> solution_p4q3 = dict(zip(my_syms, [var.subs({p:4, q:3}) for var in solution_list[0]]))\n>>> # Substitute values in using a dictionary\n>>> pythag.subs({a: solution_p4q3[a], b: solution_p4q3[b], c: solution_p4q3[c]})\n0\n>>> # Manually substitute in values\n>>> pythag.subs({a: 24, b: 7, c: 25})\n0 \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> a, b, c, p, q = symbols(\"a, b, c, p, q\", integer=True)\n>>> my_syms = (a, b, c)\n>>> pythag = a**2 + b**2 - c**2\n>>> # Solve Diophantine equation\n>>> solution, = diophantine(pythag, syms=my_syms)\n>>> solution\n(2*p*q, p**2 - q**2, p**2 + q**2)\n>>> # Extract parameter symbols\n>>> set().union(*(s.free_symbols for s in solution))\n{p, q} \n```", "```py\n>>> from sympy.solvers.diophantine import diophantine\n>>> from sympy import symbols\n>>> x, y = symbols(\"x, y\", integer=True)\n>>> diophantine(2*x + 4*y - 3, syms=(x, y))\nset() \n```"]