- en: scipy.stats.binned_statistic_2d
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a bidimensional binned statistic for one or more sets of data.
  prefs: []
  type: TYPE_NORMAL
- en: This is a generalization of a histogram2d function. A histogram divides the
    space into bins, and returns the count of the number of points in each bin. This
    function allows the computation of the sum, mean, median, or other statistic of
    the values (or set of values) within each bin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of values to be binned along the first dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of values to be binned along the second dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**(N,) array_like or list of (N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The data on which the statistic will be computed. This must be the same shape
    as *x*, or a list of sequences - each with the same shape as *x*. If *values*
    is such a list, the statistic will be computed on each independently.
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**string or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The statistic to compute (default is ‘mean’). The following statistics are
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘mean’ : compute the mean of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘std’ : compute the standard deviation within each bin. This is implicitly
    calculated with ddof=0.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘median’ : compute the median of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘count’ : compute the count of points within each bin. This is identical to
    an unweighted histogram. *values* array is not referenced.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘sum’ : compute the sum of values for points within each bin. This is identical
    to a weighted histogram.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘min’ : compute the minimum of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘max’ : compute the maximum of values for point within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'function : a user-defined function which takes a 1D array of values, and outputs
    a single numerical statistic. This function will be called on the values in each
    bin. Empty bins will be represented by function([]), or NaN if this returns an
    error.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bins**int or [int, int] or array_like or [array, array], optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bin specification:'
  prefs: []
  type: TYPE_NORMAL
- en: the number of bins for the two dimensions (nx = ny = bins),
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the number of bins in each dimension (nx, ny = bins),
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the bin edges for the two dimensions (x_edge = y_edge = bins),
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: the bin edges in each dimension (x_edge, y_edge = bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If the bin edges are specified, the number of bins will be, (nx = len(x_edge)-1,
    ny = len(y_edge)-1).
  prefs: []
  type: TYPE_NORMAL
- en: '**range**(2,2) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The leftmost and rightmost edges of the bins along each dimension (if not specified
    explicitly in the *bins* parameters): [[xmin, xmax], [ymin, ymax]]. All values
    outside of this range will be considered outliers and not tallied in the histogram.'
  prefs: []
  type: TYPE_NORMAL
- en: '**expand_binnumbers**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '‘False’ (default): the returned *binnumber* is a shape (N,) array of linearized
    bin indices. ‘True’: the returned *binnumber* is ‘unraveled’ into a shape (2,N)
    ndarray, where each row gives the bin numbers in the corresponding dimension.
    See the *binnumber* returned value, and the *Examples* section.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**(nx, ny) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The values of the selected statistic in each two-dimensional bin.
  prefs: []
  type: TYPE_NORMAL
- en: '**x_edge**(nx + 1) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The bin edges along the first dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**y_edge**(ny + 1) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The bin edges along the second dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**binnumber**(N,) array of ints or (2,N) ndarray of ints'
  prefs: []
  type: TYPE_NORMAL
- en: This assigns to each element of *sample* an integer that represents the bin
    in which this observation falls. The representation depends on the *expand_binnumbers*
    argument. See *Notes* for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.digitize`](https://numpy.org/devdocs/reference/generated/numpy.digitize.html#numpy.digitize
    "(in NumPy v2.0.dev0)"), [`numpy.histogram2d`](https://numpy.org/devdocs/reference/generated/numpy.histogram2d.html#numpy.histogram2d
    "(in NumPy v2.0.dev0)"), [`binned_statistic`](scipy.stats.binned_statistic.html#scipy.stats.binned_statistic
    "scipy.stats.binned_statistic"), [`binned_statistic_dd`](scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd
    "scipy.stats.binned_statistic_dd")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Binedges: All but the last (righthand-most) bin is half-open. In other words,
    if *bins* is `[1, 2, 3, 4]`, then the first bin is `[1, 2)` (including 1, but
    excluding 2) and the second `[2, 3)`. The last bin, however, is `[3, 4]`, which
    *includes* 4.'
  prefs: []
  type: TYPE_NORMAL
- en: '*binnumber*: This returned argument assigns to each element of *sample* an
    integer that represents the bin in which it belongs. The representation depends
    on the *expand_binnumbers* argument. If ‘False’ (default): The returned *binnumber*
    is a shape (N,) array of linearized indices mapping each element of *sample* to
    its corresponding bin (using row-major ordering). Note that the returned linearized
    bin indices are used for an array with extra bins on the outer binedges to capture
    values outside of the defined bin bounds. If ‘True’: The returned *binnumber*
    is a shape (2,N) ndarray where each row indicates bin placements for each dimension
    respectively. In each dimension, a binnumber of *i* means the corresponding value
    is between (D_edge[i-1], D_edge[i]), where ‘D’ is either ‘x’ or ‘y’.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the counts with explicit bin-edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The bin in which each sample is placed is given by the *binnumber* returned
    parameter. By default, these are the linearized bin indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The bin indices can also be expanded into separate entries for each dimension
    using the *expand_binnumbers* parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Which shows that the first three elements belong in the xbin 1, and the fourth
    into xbin 2; and so on for y.
  prefs: []
  type: TYPE_NORMAL
