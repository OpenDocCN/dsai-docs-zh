- en: Solving Guidance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决指南
- en: 原文：[https://docs.sympy.org/latest/guides/solving/solving-guidance.html](https://docs.sympy.org/latest/guides/solving/solving-guidance.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/guides/solving/solving-guidance.html](https://docs.sympy.org/latest/guides/solving/solving-guidance.html)
- en: These guidelines apply to many types of solving.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些准则适用于许多类型的解决方案。
- en: Numeric Solutions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值解
- en: Equations With no Closed-Form Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有封闭形式解的方程
- en: 'The vast majority of arbitrary nonlinear equations have no closed-form solution.
    The classes of equations that are solvable are basically:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 绝大多数任意非线性方程都没有封闭形式解。可解类方程基本上是：
- en: Linear equations
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线性方程
- en: Polynomials, except where limited by the [Abel-Ruffini theorem](https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem)
    (learn more about solving polynomials using a [`GroebnerBasis`](../../modules/polys/reference.html#sympy.polys.polytools.GroebnerBasis
    "sympy.polys.polytools.GroebnerBasis"))
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多项式，除非受到[Abel-Ruffini theorem](https://en.wikipedia.org/wiki/Abel%E2%80%93Ruffini_theorem)的限制（了解使用[`GroebnerBasis`](../../modules/polys/reference.html#sympy.polys.polytools.GroebnerBasis
    "sympy.polys.polytools.GroebnerBasis")解决多项式的更多信息）
- en: Equations that can be solved by inverting some transcendental functions
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过反转某些超越函数来解决的方程
- en: Problems that can be transformed into the cases above (e.g., by turning trigonometric
    functions into polynomials)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以转换为上述情况的问题（例如，通过将三角函数转换为多项式）
- en: A few other special cases that can be solved with something like the [`Lambert
    W function`](../../modules/functions/elementary.html#sympy.functions.elementary.exponential.LambertW
    "sympy.functions.elementary.exponential.LambertW")
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一些特殊情况，可以用类似[`Lambert W function`](../../modules/functions/elementary.html#sympy.functions.elementary.exponential.LambertW
    "sympy.functions.elementary.exponential.LambertW")解决
- en: Equations that you can [`decompose()`](../../modules/polys/reference.html#sympy.polys.polytools.decompose
    "sympy.polys.polytools.decompose") via any of the above
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过任何上述方法[`decompose()`](../../modules/polys/reference.html#sympy.polys.polytools.decompose
    "sympy.polys.polytools.decompose")解决的方程
- en: 'SymPy may reflect that your equation has no solutions that can be expressed
    algebraically (symbolically), or that SymPy lacks an algorithm to find a closed-form
    solution that does exist, by returning an error such as `NotImplementedError`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 可能会反映您的方程无法用代数（符号）方式表达的解，或者 SymPy 缺乏找到已存在的封闭形式解的算法，例如通过返回诸如`NotImplementedError`的错误：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: so you may have to solve your equation numerically instead, for example using
    [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve "sympy.solvers.solvers.nsolve")
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可能需要使用[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")之类的方法进行数值解决。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you receive non-closed-form solutions such as [`CRootOf()`](../../modules/polys/reference.html#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf") (which represents an indexed complex
    root of a polynomial), you can evaluate them numerically using [`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf"):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您收到像[`CRootOf()`](../../modules/polys/reference.html#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf")这样的非封闭形式解（表示多项式的索引复数根），您可以使用[`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf")进行数值评估：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When You Might Prefer a Numeric Solution
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您可能更喜欢数值解的情况
- en: Even if your problem has a closed-form solution, you might prefer a numeric
    solution.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的问题有封闭形式解，您可能更喜欢数值解。
- en: Solving functions such as [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") and [`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset") will not try to find a numeric solution, only
    a mathematically-exact symbolic solution. So if you want a numeric solution, consider
    [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve "sympy.solvers.solvers.nsolve").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 像[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")和[`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset")这样的解函数将不会尝试找到数值解，只会找到数学上精确的符号解。因此，如果您需要数值解，考虑使用[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")。
- en: 'In some situations, even though a closed-form solution is available, it may
    be too cumbersome to be desirable. In that case, you can use [`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf") instead if a numerical solution is acceptable. For example,
    the following solution set contains more than 40 terms total when expressed exactly
    (scroll horizontally in the code block below if you want to view them all), compared
    to eight when expressed numerically:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，即使有闭合形式的解，也可能太繁琐而不可取。在这种情况下，如果接受数值解，则可以使用[`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf")。例如，以下解集在精确表示时总共包含超过40项（如果需要查看所有内容，请在下面的代码块中水平滚动），而数值表示时只有八项：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In other situations, even if the exact solution has few terms, you may want
    a numeric solution so you know its approximate numerical value. For example, it
    may be difficult to estimate that \(\sqrt{2} e^{\pi}/2\) is approximately \(16\):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，即使确切解具有少量项，您可能希望获得数值解，以便知道其近似数值。例如，估计\(\sqrt{2} e^{\pi}/2\)约为\(16\)可能会很困难：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use Exact Values
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用精确值
- en: 'If you want to preserve the exact mathematical values of symbols such as transcendental
    numbers and [square roots](../../tutorials/intro-tutorial/intro.html#symbolic-computation),
    define them so that SymPy can interpret them symbolically, for example use SymPy’s
    [`Pi`](../../modules/core.html#sympy.core.numbers.Pi "sympy.core.numbers.Pi"):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保留诸如超越数和[平方根](../../tutorials/intro-tutorial/intro.html#symbolic-computation)等符号的精确数学值，请定义它们以便
    SymPy 可以进行符号解释，例如使用 SymPy 的[`Pi`](../../modules/core.html#sympy.core.numbers.Pi
    "sympy.core.numbers.Pi")：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you use the standard Python math version of \(\pi\), Python will pass that
    inexact value to SymPy, leading to an inexact, numerical solution:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用标准的 Python math 版本的\(\pi\)，Python 将传递该不精确值给 SymPy，导致一个不精确的数值解：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To use exact values for numbers such as \(6.2\) or \(1/2\), refer to [Python
    numbers vs. SymPy Numbers](../../explanation/gotchas.html#python-vs-sympy-numbers).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用像\(6.2\)或\(1/2\)这样的精确数值，请参阅[Python numbers vs. SymPy Numbers](../../explanation/gotchas.html#python-vs-sympy-numbers)。
- en: 'In certain cases, using an inexact value will prevent SymPy from finding a
    result. For example, this exact equation can be solved:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，使用不精确值将阻止 SymPy 找到结果。例如，可以解决这个精确方程：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: but if you use the inexact equation `eq = x**1.4142135623730951 - 2`, SymPy
    will not return a result despite attempting for a long time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果使用不精确方程 `eq = x**1.4142135623730951 - 2`，尽管尝试了很长时间，SymPy 也不会返回结果。
- en: Include the Variable to be Solved for in the Function Call
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在函数调用中包括要解的变量
- en: 'We recommend you include the variable to be solved for as the second argument
    for solving functions including [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") and [`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset"). While this is optional for univariate equations,
    it is a good practice because it ensures SymPy will solve for the desired symbol.
    For example, you might be interested in a solution for \(x\), but SymPy solves
    for \(y\):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您在包括[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")和[`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset")等解决函数的第二个参数中包括要解的变量。虽然这对于一元方程是可选的，但这是一个良好的实践，因为它确保
    SymPy 将解决所需的符号。例如，您可能对\(x\)的解决方案感兴趣，但 SymPy 却解决了\(y\)：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Specifying the variable to solve for ensures that SymPy solves for it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要解的变量确保 SymPy 对其进行求解：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '## Ensure Consistent Formatting From [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确保从[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")保持一致的格式化
- en: '[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") produces a variety of output as explained in [Solve
    Output by Type](../../explanation/solve_output.html#solve-output). Using `dict=True`
    will give a consistent output format which is especially important when extracting
    information about the solution programmatically.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")根据[解的类型输出](../../explanation/solve_output.html#solve-output)产生各种输出。使用`dict=True`将提供一致的输出格式，在以编程方式提取解决方案信息时尤其重要。'
- en: 'To extract the solutions, you can iterate through the list of dictionaries:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取解决方案，可以遍历字典列表：
- en: '[PRE10]  ## Options That Can Speed up [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]  ## 可加速 [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") 的选项'
- en: Include Solutions Making Any Denominator Zero
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括使任何分母为零的解
- en: 'Normally, [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") checks whether any solutions make any denominator
    zero, and automatically excludes them. If you want to include those solutions,
    and speed up [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") (at the risk of obtaining invalid solutions), set
    `check=False`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") 检查是否有任何解使任何分母为零，并自动排除它们。如果您希望包括这些解，并加速 [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")（尽管可能获得无效解），请设置 `check=False`：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Do Not Simplify Solutions
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要简化解决方案
- en: Normally, [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") simplifies many results before returning them and
    (if `check` is not False) uses the general [`simplify()`](../../modules/simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify") function on the solutions and the expression
    obtained when they are substituted into the function which should be zero. If
    you do not want the solutions simplified, and want to speed up [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve"), use `simplify=False`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") 在返回许多结果之前简化它们，并且（如果 `check` 不为 False）在解决方案和将它们代入函数应为零的表达式时使用一般的
    [`simplify()`](../../modules/simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify") 函数。如果您不希望简化解决方案，并希望加速 [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")，请使用 `simplify=False`。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parse a String Representing the Equation
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析表示方程的字符串
- en: If you are creating the expression yourself, we advise [against using string
    parsing to create expressions](https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns#user-content-strings-as-input).
    But if you are programmatically reading in a string, this approach is convenient.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在创建表达式本身，则建议[不要使用字符串解析来创建表达式](https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns#user-content-strings-as-input)。但是，如果您以编程方式读取字符串，则此方法很方便。
- en: You can parse a string representing the equation into a form that SymPy can
    understand (for example, [`Eq`](../../modules/core.html#sympy.core.relational.Eq
    "sympy.core.relational.Eq") form), then solve the parsed expression. Parsing an
    equation from a string requires you to use [`transformations`](../../modules/parsing.html#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr") for SymPy to
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以解析表示方程的字符串为 SymPy 可以理解的形式（例如 [`Eq`](../../modules/core.html#sympy.core.relational.Eq
    "sympy.core.relational.Eq") 形式），然后解决解析后的表达式。从字符串解析方程式需要您使用 SymPy 的 [`transformations`](../../modules/parsing.html#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr")。
- en: interpret equals signs
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释等号
- en: create symbols from your variables
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您的变量创建符号
- en: use more mathematical (rather than standard Python) notation, for example the
    exponent operator can be parsed from `^` rather than having to use Python’s `**`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更多数学（而不是标准的 Python）符号，例如指数运算符可以从 `^` 解析，而不必使用 Python 的 `**`。
- en: 'If you already have the equation in [`Eq`](../../modules/core.html#sympy.core.relational.Eq
    "sympy.core.relational.Eq") (equation) form, you can parse that string:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在[`Eq`](../../modules/core.html#sympy.core.relational.Eq "sympy.core.relational.Eq")（等式）形式中有方程式，则可以解析该字符串：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: SymPy can also parse [LaTeX](https://www.latex-project.org/) into expressions
    using [`parse_latex()`](../../modules/parsing.html#sympy.parsing.latex.parse_latex
    "sympy.parsing.latex.parse_latex").
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 还可以使用 [`parse_latex()`](../../modules/parsing.html#sympy.parsing.latex.parse_latex
    "sympy.parsing.latex.parse_latex") 解析 [LaTeX](https://www.latex-project.org/)
    表达式。
- en: Report a Bug
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告 Bug
- en: If you find a bug with these commands, please post the problem on the [SymPy
    mailing list](https://groups.google.com/g/sympy).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现这些命令有 bug，请在[SymPy 邮件列表](https://groups.google.com/g/sympy)上发布问题。
