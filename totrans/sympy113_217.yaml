- en: Spin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/spin.html](https://docs.sympy.org/latest/modules/physics/quantum/spin.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quantum mechanical angular momemtum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The J^2 operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Eigenbra of Jx.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKet for the usage of spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenbra of Jx.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKetCoupled for the usage of coupled spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of coupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Eigenket of Jx.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKet for the usage of spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenket of Jx.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKetCoupled for the usage of coupled spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of coupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Eigenbra of Jy.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKet for the usage of spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenbra of Jy.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKetCoupled for the usage of coupled spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of coupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Eigenket of Jy.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKet for the usage of spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenket of Jy.
  prefs: []
  type: TYPE_NORMAL
- en: See JzKetCoupled for the usage of coupled spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of coupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Eigenbra of Jz.
  prefs: []
  type: TYPE_NORMAL
- en: See the JzKet for the usage of spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenbra of Jz.
  prefs: []
  type: TYPE_NORMAL
- en: See the JzKetCoupled for the usage of coupled spin eigenstates.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of coupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Eigenket of Jz.
  prefs: []
  type: TYPE_NORMAL
- en: Spin state which is an eigenstate of the Jz operator. Uncoupled states, that
    is states representing the interaction of multiple separate spin states, are defined
    as a tensor product of states.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**j** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Total spin angular momentum
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**m** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of the Jz spin operator
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '*Normal States:*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining simple spin states, both numerical and symbolic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewriting the JzKet in terms of eigenkets of the Jx operator: Note: that the
    resulting eigenstates are JxKet’s'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the vector representation of a state in terms of the basis elements of
    the Jx operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply innerproducts between states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Uncoupled States:*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define an uncoupled state as a TensorProduct between two Jz eigenkets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A TensorProduct can be rewritten, in which case the eigenstates that make up
    the tensor product is rewritten to the new basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The represent method for TensorProduct’s gives the vector representation of
    the state. Note that the state in the product basis is the equivalent of the tensor
    product of the vector representation of the component eigenstates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKetCoupled`](#sympy.physics.quantum.spin.JzKetCoupled "sympy.physics.quantum.spin.JzKetCoupled")'
  prefs: []
  type: TYPE_NORMAL
- en: Coupled eigenstates
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.physics.quantum.tensorproduct.TensorProduct`](tensorproduct.html#sympy.physics.quantum.tensorproduct.TensorProduct
    "sympy.physics.quantum.tensorproduct.TensorProduct")'
  prefs: []
  type: TYPE_NORMAL
- en: Used to specify uncoupled states
  prefs: []
  type: TYPE_NORMAL
- en: '[`uncouple`](#sympy.physics.quantum.spin.uncouple "sympy.physics.quantum.spin.uncouple")'
  prefs: []
  type: TYPE_NORMAL
- en: Uncouples states given coupling parameters
  prefs: []
  type: TYPE_NORMAL
- en: '[`couple`](#sympy.physics.quantum.spin.couple "sympy.physics.quantum.spin.couple")'
  prefs: []
  type: TYPE_NORMAL
- en: Couples uncoupled states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Coupled eigenket of Jz
  prefs: []
  type: TYPE_NORMAL
- en: Spin state that is an eigenket of Jz which represents the coupling of separate
    spin spaces.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments for creating instances of JzKetCoupled are `j`, `m`, `jn` and
    an optional `jcoupling` argument. The `j` and `m` options are the total angular
    momentum quantum numbers, as used for normal states (e.g. JzKet).
  prefs: []
  type: TYPE_NORMAL
- en: The other required parameter in `jn`, which is a tuple defining the \(j_n\)
    angular momentum quantum numbers of the product spaces. So for example, if a state
    represented the coupling of the product basis state \(\left|j_1,m_1\right\rangle\times\left|j_2,m_2\right\rangle\),
    the `jn` for this state would be `(j1,j2)`.
  prefs: []
  type: TYPE_NORMAL
- en: The final option is `jcoupling`, which is used to define how the spaces specified
    by `jn` are coupled, which includes both the order these spaces are coupled together
    and the quantum numbers that arise from these couplings. The `jcoupling` parameter
    itself is a list of lists, such that each of the sublists defines a single coupling
    between the spin spaces. If there are N coupled angular momentum spaces, that
    is `jn` has N elements, then there must be N-1 sublists. Each of these sublists
    making up the `jcoupling` parameter have length 3\. The first two elements are
    the indices of the product spaces that are considered to be coupled together.
    For example, if we want to couple \(j_1\) and \(j_4\), the indices would be 1
    and 4\. If a state has already been coupled, it is referenced by the smallest
    index that is coupled, so if \(j_2\) and \(j_4\) has already been coupled to some
    \(j_{24}\), then this value can be coupled by referencing it with index 2\. The
    final element of the sublist is the quantum number of the coupled state. So putting
    everything together, into a valid sublist for `jcoupling`, if \(j_1\) and \(j_2\)
    are coupled to an angular momentum space with quantum number \(j_{12}\) with the
    value `j12`, the sublist would be `(1,2,j12)`, N-1 of these sublists are used
    in the list for `jcoupling`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the `jcoupling` parameter is optional, if it is not specified, the default
    coupling is taken. This default value is to coupled the spaces in order and take
    the quantum number of the coupling to be the maximum value. For example, if the
    spin spaces are \(j_1\), \(j_2\), \(j_3\), \(j_4\), then the default coupling
    couples \(j_1\) and \(j_2\) to \(j_{12}=j_1+j_2\), then, \(j_{12}\) and \(j_3\)
    are coupled to \(j_{123}=j_{12}+j_3\), and finally \(j_{123}\) and \(j_4\) to
    \(j=j_{123}+j_4\). The jcoupling value that would correspond to this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`((1,2,j1+j2),(1,3,j1+j2+j3))`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The arguments that must be passed are `j`, `m`, `jn`, and `jcoupling`. The `j`
    value is the total angular momentum. The `m` value is the eigenvalue of the Jz
    spin operator. The `jn` list are the j values of argular momentum spaces coupled
    together. The `jcoupling` parameter is an optional parameter defining how the
    spaces are coupled together. See the above description for how these coupling
    parameters are defined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining simple spin states, both numerical and symbolic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining coupled spin states for more than 2 coupled spaces with various coupling
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewriting the JzKetCoupled in terms of eigenkets of the Jx operator: Note:
    that the resulting eigenstates are JxKetCoupled'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The rewrite method can be used to convert a coupled state to an uncoupled state.
    This is done by passing coupled=False to the rewrite function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the vector representation of a state in terms of the basis elements of
    the Jx operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`JzKet`](#sympy.physics.quantum.spin.JzKet "sympy.physics.quantum.spin.JzKet")'
  prefs: []
  type: TYPE_NORMAL
- en: Normal spin eigenstates
  prefs: []
  type: TYPE_NORMAL
- en: '[`uncouple`](#sympy.physics.quantum.spin.uncouple "sympy.physics.quantum.spin.uncouple")'
  prefs: []
  type: TYPE_NORMAL
- en: Uncoupling of coupling spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[`couple`](#sympy.physics.quantum.spin.couple "sympy.physics.quantum.spin.couple")'
  prefs: []
  type: TYPE_NORMAL
- en: Coupling of uncoupled spin states
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The Jz operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Wigner D operator in terms of Euler angles.
  prefs: []
  type: TYPE_NORMAL
- en: Defines the rotation operator in terms of the Euler angles defined by the z-y-z
    convention for a passive transformation. That is the coordinate axes are rotated
    first about the z-axis, giving the new x’-y’-z’ axes. Then this new coordinate
    system is rotated about the new y’-axis, giving new x’’-y’’-z’’ axes. Then this
    new coordinate system is rotated about the z’’-axis. Conventions follow those
    laid out in [[R767]](#r767).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: First Euler Angle
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Second Euler angle
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gamma** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Third Euler angle
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example rotation operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With symbolic Euler angles and calculating the inverse rotation operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`WignerD`](#sympy.physics.quantum.spin.WignerD "sympy.physics.quantum.spin.WignerD")'
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic Wigner-D function
  prefs: []
  type: TYPE_NORMAL
- en: '[`D`](#sympy.physics.quantum.spin.Rotation.D "sympy.physics.quantum.spin.Rotation.D")'
  prefs: []
  type: TYPE_NORMAL
- en: Wigner-D function
  prefs: []
  type: TYPE_NORMAL
- en: '[`d`](#sympy.physics.quantum.spin.Rotation.d "sympy.physics.quantum.spin.Rotation.d")'
  prefs: []
  type: TYPE_NORMAL
- en: Wigner small-d function
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R767] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: Varshalovich, D A, Quantum Theory of Angular Momentum. 1988.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Wigner D-function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns an instance of the WignerD class corresponding to the Wigner-D function
    specified by the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**j** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Total angular momentum
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**m** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along axis after rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mp** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along rotated axis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alpha** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: First Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Second Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gamma** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Third Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Return the Wigner-D matrix element for a defined rotation, both numerical and
    symbolic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`WignerD`](#sympy.physics.quantum.spin.WignerD "sympy.physics.quantum.spin.WignerD")'
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic Wigner-D function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Wigner small-d function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns an instance of the WignerD class corresponding to the Wigner-D function
    specified by the parameters with the alpha and gamma angles given as 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**j** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Total angular momentum
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**m** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along axis after rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mp** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along rotated axis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Second Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Return the Wigner-D matrix element for a defined rotation, both numerical and
    symbolic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`WignerD`](#sympy.physics.quantum.spin.WignerD "sympy.physics.quantum.spin.WignerD")'
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic Wigner-D function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Wigner-D function
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wigner D-function gives the matrix elements of the rotation operator in
    the jm-representation. For the Euler angles \(\alpha\), \(\beta\), \(\gamma\),
    the D-function is defined such that:'
  prefs: []
  type: TYPE_NORMAL
- en: \[<j,m| \mathcal{R}(\alpha, \beta, \gamma ) |j',m'> = \delta_{jj'} D(j, m, m',
    \alpha, \beta, \gamma)\]
  prefs: []
  type: TYPE_NORMAL
- en: Where the rotation operator is as defined by the Rotation class [[R768]](#r768).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wigner D-function defined in this way gives:'
  prefs: []
  type: TYPE_NORMAL
- en: \[D(j, m, m', \alpha, \beta, \gamma) = e^{-i m \alpha} d(j, m, m', \beta) e^{-i
    m' \gamma}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where d is the Wigner small-d function, which is given by Rotation.d.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wigner small-d function gives the component of the Wigner D-function that
    is determined by the second Euler angle. That is the Wigner D-function is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[D(j, m, m', \alpha, \beta, \gamma) = e^{-i m \alpha} d(j, m, m', \beta) e^{-i
    m' \gamma}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where d is the small-d function. The Wigner D-function is given by Rotation.D.
  prefs: []
  type: TYPE_NORMAL
- en: Note that to evaluate the D-function, the j, m and mp parameters must be integer
    or half integer numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**j** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Total angular momentum
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**m** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along axis after rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mp** : Number'
  prefs: []
  type: TYPE_NORMAL
- en: Eigenvalue of angular momentum along rotated axis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alpha** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: First Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**beta** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Second Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gamma** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Third Euler angle of rotation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Evaluate the Wigner-D matrix elements of a simple rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the Wigner-d matrix elements of a simple rotation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Rotation`](#sympy.physics.quantum.spin.Rotation "sympy.physics.quantum.spin.Rotation")'
  prefs: []
  type: TYPE_NORMAL
- en: Rotation operator
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R768] ([1](#id3),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: Varshalovich, D A, Quantum Theory of Angular Momentum. 1988.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Couple a tensor product of spin states
  prefs: []
  type: TYPE_NORMAL
- en: This function can be used to couple an uncoupled tensor product of spin states.
    All of the eigenstates to be coupled must be of the same class. It will return
    a linear combination of eigenstates that are subclasses of CoupledSpinState determined
    by Clebsch-Gordan angular momentum coupling coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: An expression involving TensorProducts of spin states to be coupled. Each state
    must be a subclass of SpinState and they all must be the same class.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**jcoupling_list** : list or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Elements of this list are sub-lists of length 2 specifying the order of the
    coupling of the spin spaces. The length of this must be N-1, where N is the number
    of states in the tensor product to be coupled. The elements of this sublist are
    the same as the first two elements of each sublist in the `jcoupling` parameter
    defined for JzKetCoupled. If this parameter is not specified, the default value
    is taken, which couples the first and second product basis spaces, then couples
    this new coupled space to the third product space, etc
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Couple a tensor product of numerical states for two spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Numerical coupling of three spaces using the default coupling method, i.e.
    first and second spaces couple, then this couples to the third space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform this same coupling, but we define the coupling to first couple the
    first and third spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Couple a tensor product of symbolic states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Uncouple a coupled spin state
  prefs: []
  type: TYPE_NORMAL
- en: Gives the uncoupled representation of a coupled spin state. Arguments must be
    either a spin state that is a subclass of CoupledSpinState or a spin state that
    is a subclass of SpinState and an array giving the j values of the spaces that
    are to be coupled
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The expression containing states that are to be coupled. If the states are a
    subclass of SpinState, the `jn` and `jcoupling` parameters must be defined. If
    the states are a subclass of CoupledSpinState, `jn` and `jcoupling` will be taken
    from the state.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**jn** : list or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of the j-values that are coupled. If state is a CoupledSpinState, this
    parameter is ignored. This must be defined if state is not a subclass of CoupledSpinState.
    The syntax of this parameter is the same as the `jn` parameter of JzKetCoupled.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**jcoupling_list** : list or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list defining how the j-values are coupled together. If state is a CoupledSpinState,
    this parameter is ignored. This must be defined if state is not a subclass of
    CoupledSpinState. The syntax of this parameter is the same as the `jcoupling`
    parameter of JzKetCoupled.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Uncouple a numerical state using a CoupledSpinState state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the same calculation using a SpinState state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncouple a numerical state of three coupled spaces using a CoupledSpinState
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the same calculation using a SpinState state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncouple a symbolic state using a CoupledSpinState state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Perform the same calculation using a SpinState state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
