["```py\nscipy.ndimage.binary_closing(input, structure=None, iterations=1, output=None, origin=0, mask=None, border_value=0, brute_force=False)\n```", "```py\n>>> from scipy import ndimage\n>>> import numpy as np\n>>> a = np.zeros((5,5), dtype=int)\n>>> a[1:-1, 1:-1] = 1; a[2,2] = 0\n>>> a\narray([[0, 0, 0, 0, 0],\n [0, 1, 1, 1, 0],\n [0, 1, 0, 1, 0],\n [0, 1, 1, 1, 0],\n [0, 0, 0, 0, 0]])\n>>> # Closing removes small holes\n>>> ndimage.binary_closing(a).astype(int)\narray([[0, 0, 0, 0, 0],\n [0, 1, 1, 1, 0],\n [0, 1, 1, 1, 0],\n [0, 1, 1, 1, 0],\n [0, 0, 0, 0, 0]])\n>>> # Closing is the erosion of the dilation of the input\n>>> ndimage.binary_dilation(a).astype(int)\narray([[0, 1, 1, 1, 0],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1],\n [0, 1, 1, 1, 0]])\n>>> ndimage.binary_erosion(ndimage.binary_dilation(a)).astype(int)\narray([[0, 0, 0, 0, 0],\n [0, 1, 1, 1, 0],\n [0, 1, 1, 1, 0],\n [0, 1, 1, 1, 0],\n [0, 0, 0, 0, 0]]) \n```", "```py\n>>> a = np.zeros((7,7), dtype=int)\n>>> a[1:6, 2:5] = 1; a[1:3,3] = 0\n>>> a\narray([[0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 1, 0, 0],\n [0, 0, 1, 0, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0]])\n>>> # In addition to removing holes, closing can also\n>>> # coarsen boundaries with fine hollows.\n>>> ndimage.binary_closing(a).astype(int)\narray([[0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0]])\n>>> ndimage.binary_closing(a, structure=np.ones((2,2))).astype(int)\narray([[0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 1, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0]]) \n```"]