- en: scipy.stats.median_abs_deviation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.median_abs_deviation.html#scipy.stats.median_abs_deviation](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.median_abs_deviation.html#scipy.stats.median_abs_deviation)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the median absolute deviation of the data along the given axis.
  prefs: []
  type: TYPE_NORMAL
- en: The median absolute deviation (MAD, [[1]](#r63fe0ba43769-1)) computes the median
    over the absolute deviations from the median. It is a measure of dispersion similar
    to the standard deviation but more robust to outliers [[2]](#r63fe0ba43769-2).
  prefs: []
  type: TYPE_NORMAL
- en: The MAD of an empty array is `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array or object that can be converted to an array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the range is computed. Default is 0\. If None, compute the
    MAD over the entire array.
  prefs: []
  type: TYPE_NORMAL
- en: '**center**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A function that will return the central value. The default is to use np.median.
    Any user defined function used will need to have the function signature `func(arr,
    axis)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**scale**scalar or str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The numerical value of scale will be divided out of the final result. The default
    is 1.0\. The string “normal” is also accepted, and results in *scale* being the
    inverse of the standard normal quantile function at 0.75, which is approximately
    0.67449. Array-like scale is also allowed, as long as it broadcasts correctly
    to the output such that `out / scale` is a valid operation. The output dimensions
    depend on the input array, *x*, and the *axis* argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘raise’, ‘omit’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defines how to handle when input contains nan. The following options are available
    (default is ‘propagate’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘propagate’: returns nan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘raise’: throws an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘omit’: performs the calculations ignoring nan values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mad**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: If `axis=None`, a scalar is returned. If the input contains integers or floats
    of smaller precision than `np.float64`, then the output data-type is `np.float64`.
    Otherwise, the output data-type is the same as that of the input.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.std`](https://numpy.org/devdocs/reference/generated/numpy.std.html#numpy.std
    "(in NumPy v2.0.dev0)"), [`numpy.var`](https://numpy.org/devdocs/reference/generated/numpy.var.html#numpy.var
    "(in NumPy v2.0.dev0)"), [`numpy.median`](https://numpy.org/devdocs/reference/generated/numpy.median.html#numpy.median
    "(in NumPy v2.0.dev0)"), [`scipy.stats.iqr`](scipy.stats.iqr.html#scipy.stats.iqr
    "scipy.stats.iqr"), [`scipy.stats.tmean`](scipy.stats.tmean.html#scipy.stats.tmean
    "scipy.stats.tmean")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.tstd`](scipy.stats.tstd.html#scipy.stats.tstd "scipy.stats.tstd"),
    [`scipy.stats.tvar`](scipy.stats.tvar.html#scipy.stats.tvar "scipy.stats.tvar")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The *center* argument only affects the calculation of the central value around
    which the MAD is calculated. That is, passing in `center=np.mean` will calculate
    the MAD around the mean - it will not calculate the *mean* absolute deviation.
  prefs: []
  type: TYPE_NORMAL
- en: The input array may contain *inf*, but if *center* returns *inf*, the corresponding
    MAD for that data will be *nan*.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Median absolute deviation”, [https://en.wikipedia.org/wiki/Median_absolute_deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation)
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Robust measures of scale”, [https://en.wikipedia.org/wiki/Robust_measures_of_scale](https://en.wikipedia.org/wiki/Robust_measures_of_scale)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'When comparing the behavior of [`median_abs_deviation`](#scipy.stats.median_abs_deviation
    "scipy.stats.median_abs_deviation") with `np.std`, the latter is affected when
    we change a single value of an array to have an outlier value while the MAD hardly
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Axis handling example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Scale normal example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
