["```py\nscipy.signal.spectrogram(x, fs=1.0, window=('tukey', 0.25), nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=-1, mode='psd')\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> from scipy.fft import fftshift\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> fs = 10e3\n>>> N = 1e5\n>>> amp = 2 * np.sqrt(2)\n>>> noise_power = 0.01 * fs / 2\n>>> time = np.arange(N) / float(fs)\n>>> mod = 500*np.cos(2*np.pi*0.25*time)\n>>> carrier = amp * np.sin(2*np.pi*3e3*time + mod)\n>>> noise = rng.normal(scale=np.sqrt(noise_power), size=time.shape)\n>>> noise *= np.exp(-time/5)\n>>> x = carrier + noise \n```", "```py\n>>> f, t, Sxx = signal.spectrogram(x, fs)\n>>> plt.pcolormesh(t, f, Sxx, shading='gouraud')\n>>> plt.ylabel('Frequency [Hz]')\n>>> plt.xlabel('Time [sec]')\n>>> plt.show() \n```", "```py\n>>> f, t, Sxx = signal.spectrogram(x, fs, return_onesided=False)\n>>> plt.pcolormesh(t, fftshift(f), fftshift(Sxx, axes=0), shading='gouraud')\n>>> plt.ylabel('Frequency [Hz]')\n>>> plt.xlabel('Time [sec]')\n>>> plt.show() \n```"]