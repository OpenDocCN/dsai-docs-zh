- en: 'NumPy: the absolute basics for beginners'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'NumPy: 绝对初学者的基础知识'
- en: 原文：[https://numpy.org/doc/1.26/user/absolute_beginners.html](https://numpy.org/doc/1.26/user/absolute_beginners.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/user/absolute_beginners.html](https://numpy.org/doc/1.26/user/absolute_beginners.html)
- en: Welcome to the absolute beginner’s guide to NumPy! If you have comments or suggestions,
    please don’t hesitate to [reach out](https://numpy.org/community/)!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到NumPy的绝对初学者指南！如果你有评论或建议，请不要犹豫[联系我们](https://numpy.org/community/)！
- en: Welcome to NumPy!
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欢迎来到NumPy！
- en: NumPy (**Numerical Python**) is an open source Python library that’s used in
    almost every field of science and engineering. It’s the universal standard for
    working with numerical data in Python, and it’s at the core of the scientific
    Python and PyData ecosystems. NumPy users include everyone from beginning coders
    to experienced researchers doing state-of-the-art scientific and industrial research
    and development. The NumPy API is used extensively in Pandas, SciPy, Matplotlib,
    scikit-learn, scikit-image and most other data science and scientific Python packages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy（**Numerical Python**）是一个开源的Python库，几乎在每个科学和工程领域中都被使用。它是Python中处理数值数据的通用标准，在科学Python和PyData生态系统的核心地位不可撼动。NumPy的用户包括从初学者程序员到经验丰富的从事最前沿的科学和工业研究与开发的研究人员。NumPy
    API在Pandas、SciPy、Matplotlib、scikit-learn、scikit-image和大多数其他数据科学和科学Python软件包中得到广泛应用。
- en: The NumPy library contains multidimensional array and matrix data structures
    (you’ll find more information about this in later sections). It provides **ndarray**,
    a homogeneous n-dimensional array object, with methods to efficiently operate
    on it. NumPy can be used to perform a wide variety of mathematical operations
    on arrays. It adds powerful data structures to Python that guarantee efficient
    calculations with arrays and matrices and it supplies an enormous library of high-level
    mathematical functions that operate on these arrays and matrices.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy库包含多维数组和矩阵数据结构（你会在后面的章节中找到更多关于这个的信息）。它提供**ndarray**，一个同构的n维数组对象，并提供了一些有效操作的方法。NumPy可以用来对数组执行各种数学运算。它为Python提供了强大的数据结构，保证了对数组和矩阵的高效计算，并提供了一个庞大的高级数学函数库，可用于这些数组和矩阵的操作。
- en: Learn more about [NumPy here](whatisnumpy.html#whatisnumpy)!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于[NumPy](whatisnumpy.html#whatisnumpy)的信息！
- en: Installing NumPy
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装NumPy
- en: To install NumPy, we strongly recommend using a scientific Python distribution.
    If you’re looking for the full instructions for installing NumPy on your operating
    system, see [Installing NumPy](https://numpy.org/install/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装NumPy，我们强烈建议使用科学Python发行版。如果你正在寻找在你的操作系统上安装NumPy的完整说明，请参阅[安装NumPy](https://numpy.org/install/)。
- en: 'If you already have Python, you can install NumPy with:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Python，可以使用以下命令安装NumPy：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you don’t have Python yet, you might want to consider using [Anaconda](https://www.anaconda.com/).
    It’s the easiest way to get started. The good thing about getting this distribution
    is the fact that you don’t need to worry too much about separately installing
    NumPy or any of the major packages that you’ll be using for your data analyses,
    like pandas, Scikit-Learn, etc.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Python，你可能想考虑使用[Anaconda](https://www.anaconda.com/)。这是最简单的入门方式。获取这个发行版的好处是你不需要太担心单独安装NumPy或者你将用于数据分析的其他主要软件包，比如pandas,
    Scikit-Learn等等。
- en: How to import NumPy
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何导入NumPy
- en: 'To access NumPy and its functions import it in your Python code like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问NumPy及其函数，请在你的Python代码中这样导入：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We shorten the imported name to `np` for better readability of code using NumPy.
    This is a widely adopted convention that makes your code more readable for everyone
    working on it. We recommend to always use import numpy as `np`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入名称缩短为`np`，以提高使用NumPy的代码的可读性。这是一个被广泛采用的惯例，可以使你的代码对每个人在上面工作时更容易阅读。我们建议始终使用`import
    numpy as np`导入。
- en: Reading the example code
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读示例代码
- en: 'If you aren’t already comfortable with reading tutorials that contain a lot
    of code, you might not know how to interpret a code block that looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不习惯阅读包含大量代码的教程，你可能不知道如何解释如下的代码块：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you aren’t familiar with this style, it’s very easy to understand. If you
    see `>>>`, you’re looking at **input**, or the code that you would enter. Everything
    that doesn’t have `>>>` in front of it is **output**, or the results of running
    your code. This is the style you see when you run `python` on the command line,
    but if you’re using IPython, you might see a different style. Note that it is
    not part of the code and will cause an error if typed or pasted into the Python
    shell. It can be safely typed or pasted into the IPython shell; the `>>>` is ignored.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉这种风格，那么这很容易理解。如果您看到`>>>`，那么这是 **输入**，或者您要输入的代码。没有 `>>>` 的一切都是 **输出**，或者您代码运行的结果。这是在命令行上运行`python`时看到的风格，但如果您使用
    IPython，可能会看到不同的风格。请注意，它不是代码的一部分，如果键入或粘贴到 Python shell 中会导致错误。可以安全地键入或粘贴到 IPython
    shell; `>>>` 会被忽略。
- en: What’s the difference between a Python list and a NumPy array?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 列表和 NumPy 数组之间有什么区别？
- en: NumPy gives you an enormous range of fast and efficient ways of creating arrays
    and manipulating numerical data inside them. While a Python list can contain different
    data types within a single list, all of the elements in a NumPy array should be
    homogeneous. The mathematical operations that are meant to be performed on arrays
    would be extremely inefficient if the arrays weren’t homogeneous.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 为您提供了大量快速有效的方式来创建数组并在其中操作数值数据。虽然 Python 列表可以在单个列表内包含不同的数据类型，但 NumPy 数组中的所有元素应该是同类元素。如果数组不同类的话，那么这些数组上执行的数学运算将非常低效。
- en: '**Why use NumPy?**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么要使用 NumPy？**'
- en: NumPy arrays are faster and more compact than Python lists. An array consumes
    less memory and is convenient to use. NumPy uses much less memory to store data
    and it provides a mechanism of specifying the data types. This allows the code
    to be optimized even further.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组比 Python 列表更快、更紧凑。数组占用更少的内存，使用起来更加方便。NumPy 使用更少的内存存储数据，并提供了一种指定数据类型的机制。这允许进一步优化代码。
- en: What is an array?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数组？
- en: An array is a central data structure of the NumPy library. An array is a grid
    of values and it contains information about the raw data, how to locate an element,
    and how to interpret an element. It has a grid of elements that can be indexed
    in [various ways](quickstart.html#quickstart-indexing-slicing-and-iterating).
    The elements are all of the same type, referred to as the array `dtype`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是 NumPy 库的核心数据结构。数组是一组值的网格，它包含关于原始数据、如何定位元素以及如何解释元素的信息。它有一组可以用各种方式进行索引的元素。这些元素都是相同类型的，称为数组的
    `dtype`。
- en: An array can be indexed by a tuple of nonnegative integers, by booleans, by
    another array, or by integers. The `rank` of the array is the number of dimensions.
    The `shape` of the array is a tuple of integers giving the size of the array along
    each dimension.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过非负整数的元组、布尔值、另一个数组或整数进行索引。数组的`rank`是维度的数量。数组的`shape`是包含沿每个维度的数组大小的整数元组。
- en: One way we can initialize NumPy arrays is from Python lists, using nested lists
    for two- or higher-dimensional data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化 NumPy 数组的一种方法是使用 Python 列表，对于二维或更高维数据，使用嵌套列表。
- en: 'For example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'or:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can access the elements in the array using square brackets. When you’re accessing
    elements, remember that indexing in NumPy starts at 0\. That means that if you
    want to access the first element in your array, you’ll be accessing element “0”.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用方括号访问数组中的元素。访问元素时，请记住 NumPy 中的索引从 0 开始。这意味着如果您要访问数组中的第一个元素，您将访问元素“0”。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: More information about arrays
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于数组的更多信息
- en: '*This section covers* `1D array`, `2D array`, `ndarray`, `vector`, `matrix`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `1D 数组`，`2D 数组`，`ndarray`，`向量`，`矩阵`'
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You might occasionally hear an array referred to as a “ndarray,” which is shorthand
    for “N-dimensional array.” An N-dimensional array is simply an array with any
    number of dimensions. You might also hear **1-D**, or one-dimensional array, **2-D**,
    or two-dimensional array, and so on. The NumPy `ndarray` class is used to represent
    both matrices and vectors. A **vector** is an array with a single dimension (there’s
    no difference between row and column vectors), while a **matrix** refers to an
    array with two dimensions. For **3-D** or higher dimensional arrays, the term
    **tensor** is also commonly used.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能偶尔会听到将数组称为“ndarray”，这是“N维数组”的缩写。一个 N 维数组就是一个具有任意数量维度的数组。您还可能听到**1-D**，或一维数组，**2-D**，或二维数组，等等。NumPy
    的 `ndarray` 类用于表示矩阵和向量。**向量**是一个具有单一维度的数组（行向量和列向量之间没有区别），而**矩阵**指的是具有两个维度的数组。对于**3-D**或更高维度的数组，术语**张量**也经常使用。
- en: '**What are the attributes of an array?**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**数组的属性是什么？**'
- en: An array is usually a fixed-size container of items of the same type and size.
    The number of dimensions and items in an array is defined by its shape. The shape
    of an array is a tuple of non-negative integers that specify the sizes of each
    dimension.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 数组通常是相同类型和大小的项目的固定大小容器。数组的维度和项目的数量由其形状定义。数组的形状是一组非负整数的元组，指定了每个维度的大小。
- en: 'In NumPy, dimensions are called **axes**. This means that if you have a 2D
    array that looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中，维度被称为**轴**。这意味着如果你有一个看起来像这样的 2D 数组：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your array has 2 axes. The first axis has a length of 2 and the second axis
    has a length of 3.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您的数组有 2 个轴。第一个轴的长度为 2，第二个轴的长度为 3。
- en: Just like in other Python container objects, the contents of an array can be
    accessed and modified by indexing or slicing the array. Unlike the typical container
    objects, different arrays can share the same data, so changes made on one array
    might be visible in another.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在其他 Python 容器对象中一样，可以通过对数组进行索引或切片来访问和修改数组的内容。与典型的容器对象不同，不同的数组可以共享相同的数据，因此对一个数组的更改可能会在另一个数组中可见。
- en: Array **attributes** reflect information intrinsic to the array itself. If you
    need to get, or even set, properties of an array without creating a new array,
    you can often access an array through its attributes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的**属性**反映了数组本身的内在信息。如果需要获取甚至设置数组的属性而不创建新数组，通常可以通过其属性访问数组。
- en: '[Read more about array attributes here](../reference/arrays.ndarray.html#arrays-ndarray)
    and learn about [array objects here](../reference/arrays.html#arrays).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里阅读更多关于数组属性的信息](../reference/arrays.ndarray.html#arrays-ndarray) 并了解[这里的数组对象](../reference/arrays.html#arrays)。'
- en: How to create a basic array
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建一个基本数组
- en: '*This section covers* `np.array()`, `np.zeros()`, `np.ones()`, `np.empty()`,
    `np.arange()`, `np.linspace()`, `dtype`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `np.array()`、`np.zeros()`、`np.ones()`、`np.empty()`、`np.arange()`、`np.linspace()`、`dtype`'
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To create a NumPy array, you can use the function `np.array()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 NumPy 数组，可以使用函数`np.array()`。
- en: All you need to do to create a simple array is pass a list to it. If you choose
    to, you can also specify the type of data in your list. [You can find more information
    about data types here](../reference/arrays.dtypes.html#arrays-dtypes).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的数组，您只需向其传递一个列表。如果愿意，还可以指定列表中的数据类型。[您可以在这里找到有关数据类型的更多信息](../reference/arrays.dtypes.html#arrays-dtypes)。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can visualize your array this way:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过这种方式将数组可视化：
- en: '![../_images/np_array.png](../Images/aaf6808d845c7bcc478972e091442ab0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_array.png](../Images/aaf6808d845c7bcc478972e091442ab0.png)'
- en: '*Be aware that these visualizations are meant to simplify ideas and give you
    a basic understanding of NumPy concepts and mechanics. Arrays and array operations
    are much more complicated than are captured here!*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，这些可视化旨在简化概念并为您提供对 NumPy 概念和机制的基本理解。数组和数组操作比这里呈现的要复杂得多！*'
- en: 'Besides creating an array from a sequence of elements, you can easily create
    an array filled with `0`’s:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从一系列元素创建数组之外，您还可以轻松地创建一个填充有`0`的数组：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or an array filled with `1`’s:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一个由`1`填充的数组：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Or even an empty array! The function `empty` creates an array whose initial
    content is random and depends on the state of the memory. The reason to use `empty`
    over `zeros` (or something similar) is speed - just make sure to fill every element
    afterwards!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至一个空数组！函数`empty`创建一个数组，其初始内容是随机的，并取决于内存的状态。使用`empty`而不是`zeros`（或类似物）的原因是速度—只需确保稍后填充每个元素！
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can create an array with a range of elements:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个具有元素范围的数组：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And even an array that contains a range of evenly spaced intervals. To do this,
    you will specify the **first number**, **last number**, and the **step size**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以创建一个包含一系列均匀间隔的区间的数组。为此，您需要指定**第一个数字**、**最后一个数字**和**步长**。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also use `np.linspace()` to create an array with values that are spaced
    linearly in a specified interval:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`np.linspace()`在指定的间隔中创建一系列线性间隔的值的数组：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Specifying your data type**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**指定您的数据类型**'
- en: While the default data type is floating point (`np.float64`), you can explicitly
    specify which data type you want using the `dtype` keyword.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认数据类型是浮点数（`np.float64`），您可以明确指定想要的数据类型，使用`dtype`关键字。
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Learn more about creating arrays here](quickstart.html#quickstart-array-creation)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多关于创建数组的信息](quickstart.html#quickstart-array-creation)'
- en: Adding, removing, and sorting elements
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加、删除和排序元素
- en: '*This section covers* `np.sort()`, `np.concatenate()`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个部分涵盖* `np.sort()`，`np.concatenate()`'
- en: '* * *'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Sorting an element is simple with `np.sort()`. You can specify the axis, kind,
    and order when you call the function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.sort()`简单地对元素进行排序。在调用函数时，您可以指定轴、种类和顺序。
- en: 'If you start with this array:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can quickly sort the numbers in ascending order with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以快速将数字按升序排序：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In addition to sort, which returns a sorted copy of an array, you can use:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了返回数组的排序副本的`sort`之外，您还可以使用：
- en: '[`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort"),
    which is an indirect sort along a specified axis,'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort")，是沿着指定轴的间接排序，'
- en: '[`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort"),
    which is an indirect stable sort on multiple keys,'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort")，是多个键的间接稳定排序，'
- en: '[`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), which will find elements in a sorted array, and'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted")，用于在排序的数组中查找元素，以及'
- en: '[`partition`](../reference/generated/numpy.partition.html#numpy.partition "numpy.partition"),
    which is a partial sort.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`partition`](../reference/generated/numpy.partition.html#numpy.partition "numpy.partition")
    是一个部分排序。'
- en: 'To read more about sorting an array, see: [`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort").'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于数组排序的内容，请参阅：[`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort")。
- en: 'If you start with these arrays:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这些数组开始：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can concatenate them with `np.concatenate()`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.concatenate()`将它们连接起来。
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or, if you start with these arrays:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你从这些数组开始：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can concatenate them with:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用以下方法将它们连接起来：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In order to remove elements from an array, it’s simple to use indexing to select
    the elements that you want to keep.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要从数组中删除元素，可以简单地使用索引选择要保留的元素。
- en: 'To read more about concatenate, see: [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate").'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于连接的信息，请参阅：[`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate")。
- en: How do you know the shape and size of an array?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何知道数组的形状和大小？
- en: '*This section covers* `ndarray.ndim`, `ndarray.size`, `ndarray.shape`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个部分涵盖* `ndarray.ndim`，`ndarray.size`，`ndarray.shape`'
- en: '* * *'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`ndarray.ndim` will tell you the number of axes, or dimensions, of the array.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.ndim`会告诉您数组的轴数，或者维度数。'
- en: '`ndarray.size` will tell you the total number of elements of the array. This
    is the *product* of the elements of the array’s shape.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.size`会告诉您数组中元素的总数。这是数组形状各元素的*乘积*。'
- en: '`ndarray.shape` will display a tuple of integers that indicate the number of
    elements stored along each dimension of the array. If, for example, you have a
    2-D array with 2 rows and 3 columns, the shape of your array is `(2, 3)`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.shape`将显示一个整数元组，表示数组沿每个维度存储的元素数。例如，如果您有一个有2行3列的二维数组，则数组形状是`(2, 3)`。'
- en: 'For example, if you create this array:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，如果您创建了这个数组：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To find the number of dimensions of the array, run:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到数组的维度数，请运行：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To find the total number of elements in the array, run:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到数组中元素的总数，请运行：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And to find the shape of your array, run:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到数组的形状，请运行：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Can you reshape an array?
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能调整数组的形状吗？
- en: '*This section covers* `arr.reshape()`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖* `arr.reshape()`'
- en: '* * *'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Yes!**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**可以！**'
- en: Using `arr.reshape()` will give a new shape to an array without changing the
    data. Just remember that when you use the reshape method, the array you want to
    produce needs to have the same number of elements as the original array. If you
    start with an array with 12 elements, you’ll need to make sure that your new array
    also has a total of 12 elements.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `arr.reshape()` 将为数组赋予一个新的形状，而不改变数据。只需记住，当使用reshape方法时，你想要生成的数组需要与原始数组具有相同数量的元素。如果你从一个具有12个元素的数组开始，你需要确保你的新数组也有总共12个元素。
- en: 'If you start with this array:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can use `reshape()` to reshape your array. For example, you can reshape
    this array to an array with three rows and two columns:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `reshape()` 来重新塑造你的数组。举个例子，你可以将这个数组重塑成一个具有三行两列的数组：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With `np.reshape`, you can specify a few optional parameters:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `np.reshape`，你可以指定一些可选的参数：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`a` is the array to be reshaped.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`a` 是待重塑的数组。'
- en: '`newshape` is the new shape you want. You can specify an integer or a tuple
    of integers. If you specify an integer, the result will be an array of that length.
    The shape should be compatible with the original shape.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`newshape` 是你想要的新形状。你可以指定一个整数或一个整数元组。如果你指定一个整数，结果将是一个具有该长度的数组。新形状应该与原始形状兼容。'
- en: '`order:` `C` means to read/write the elements using C-like index order, `F`
    means to read/write the elements using Fortran-like index order, `A` means to
    read/write the elements in Fortran-like index order if a is Fortran contiguous
    in memory, C-like order otherwise. (This is an optional parameter and doesn’t
    need to be specified.)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`order:` `C` 表示使用类C索引顺序读取/写入元素，`F` 表示使用类Fortran索引顺序读取/写入元素，`A` 表示如果a在内存中是Fortran连续的，则使用类Fortran索引顺序读取/写入元素，否则使用类C顺序。（这是一个可选参数，不需要指定。）'
- en: If you want to learn more about C and Fortran order, you can [read more about
    the internal organization of NumPy arrays here](../dev/internals.html#numpy-internals).
    Essentially, C and Fortran orders have to do with how indices correspond to the
    order the array is stored in memory. In Fortran, when moving through the elements
    of a two-dimensional array as it is stored in memory, the **first** index is the
    most rapidly varying index. As the first index moves to the next row as it changes,
    the matrix is stored one column at a time. This is why Fortran is thought of as
    a **Column-major language**. In C on the other hand, the **last** index changes
    the most rapidly. The matrix is stored by rows, making it a **Row-major language**.
    What you do for C or Fortran depends on whether it’s more important to preserve
    the indexing convention or not reorder the data.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解关于C和Fortran顺序的更多信息，你可以[在这里读更多关于NumPy数组内部组织的信息](../dev/internals.html#numpy-internals)。基本上，C和Fortran顺序与索引如何对应到数组在内存中的存储顺序有关。在Fortran中，移动二维数组元素时，第一个索引是变化最快的索引。当第一个索引改变时，矩阵按列存储在内存中一列一列地变化。这就是为什么Fortran被认为是一种**基于列的语言**。而在C中，**最后**一个索引最快变化。矩阵按行存储，使之成为**基于行的语言**。你使用C或Fortran取决于是否更重要地保持索引约定或者不重新排序数据。
- en: '[Learn more about shape manipulation here](quickstart.html#quickstart-shape-manipulation).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多有关形状操作的信息](quickstart.html#quickstart-shape-manipulation)。'
- en: How to convert a 1D array into a 2D array (how to add a new axis to an array)
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将一个一维数组转换为二维数组（如何给数组添加一个新的轴）
- en: '*This section covers* `np.newaxis`, `np.expand_dims`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一节介绍了* `np.newaxis`，`np.expand_dims`'
- en: '* * *'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can use `np.newaxis` and `np.expand_dims` to increase the dimensions of
    your existing array.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 和 `np.expand_dims` 来增加现有数组的维度。
- en: Using `np.newaxis` will increase the dimensions of your array by one dimension
    when used once. This means that a **1D** array will become a **2D** array, a **2D**
    array will become a **3D** array, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `np.newaxis` 会在使用一次后将数组的维度增加一维。这意味着**1D** 数组将成为**2D** 数组，**2D** 数组将成为**3D**
    数组，依此类推。
- en: 'For example, if you start with this array:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果你从这个数组开始：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can use `np.newaxis` to add a new axis:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 来添加一个新的轴：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can explicitly convert a 1D array with either a row vector or a column
    vector using `np.newaxis`. For example, you can convert a 1D array to a row vector
    by inserting an axis along the first dimension:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 明确地将一维数组转换为行向量或列向量。例如，你可以通过在第一维度插入一个轴将一维数组转换为行向量：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or, for a column vector, you can insert an axis along the second dimension:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于列向量，你可以在第二维度插入一个轴：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can also expand an array by inserting a new axis at a specified position
    with `np.expand_dims`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`np.expand_dims`在指定位置插入一个新轴。
- en: 'For example, if you start with this array:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can use `np.expand_dims` to add an axis at index position 1 with:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.expand_dims`在索引位置1处添加一个轴：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can add an axis at index position 0 with:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在索引位置0处添加一个轴：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Find more information about [newaxis here](../reference/arrays.indexing.html#arrays-indexing)
    and `expand_dims` at [`expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims").
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在[这里](../reference/arrays.indexing.html#arrays-indexing)找到关于[newaxis](../reference/arrays.indexing.html#arrays-indexing)的更多信息和关于`expand_dims`的[`expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims")。
- en: Indexing and slicing
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片
- en: You can index and slice NumPy arrays in the same ways you can slice Python lists.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用与Python列表切片相同的方式对NumPy数组进行索引和切片。
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can visualize it this way:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样可视化它：
- en: '![../_images/np_indexing.png](../Images/cd29651900916a5a0f06923d997eca93.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_indexing.png](../Images/cd29651900916a5a0f06923d997eca93.png)'
- en: You may want to take a section of your array or specific array elements to use
    in further analysis or additional operations. To do that, you’ll need to subset,
    slice, and/or index your arrays.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想取数组的一部分或特定的数组元素，用于进一步分析或其他操作。为此，您需要对数组进行子集、切片和/或索引。
- en: If you want to select values from your array that fulfill certain conditions,
    it’s straightforward with NumPy.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要选择符合特定条件的数组中的值，使用NumPy是很直接的。
- en: 'For example, if you start with this array:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You can easily print all of the values in the array that are less than 5.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地打印数组中所有小于5的值。
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can also select, for example, numbers that are equal to or greater than
    5, and use that condition to index an array.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以选择等于或大于5的数字，并用该条件对数组进行索引。
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can select elements that are divisible by 2:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择可被2整除的元素：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Or you can select elements that satisfy two conditions using the `&` and `|`
    operators:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用`&`和`|`运算符选择满足两个条件的元素：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can also make use of the logical operators **&** and **|** in order to return
    boolean values that specify whether or not the values in an array fulfill a certain
    condition. This can be useful with arrays that contain names or other categorical
    values.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用逻辑运算符**&**和**|**来返回布尔值，指定数组中的值是否满足某个条件。这对于包含名称或其他分类值的数组非常有用。
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You can also use `np.nonzero()` to select elements or indices from an array.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`np.nonzero()`从数组中选择元素或索引。
- en: 'Starting with this array:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个数组开始：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You can use `np.nonzero()` to print the indices of elements that are, for example,
    less than 5:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.nonzero()`打印小于5的元素的索引：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In this example, a tuple of arrays was returned: one for each dimension. The
    first array represents the row indices where these values are found, and the second
    array represents the column indices where the values are found.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，返回了一个数组的元组：每个维度一个数组。第一个数组表示这些值所在的行索引，第二个数组表示这些值所在的列索引。
- en: 'If you want to generate a list of coordinates where the elements exist, you
    can zip the arrays, iterate over the list of coordinates, and print them. For
    example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要生成一个元素存在的坐标列表，你可以将数组进行组合，遍历坐标列表，并打印它们。例如：
- en: '[PRE45]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can also use `np.nonzero()` to print the elements in an array that are
    less than 5 with:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`np.nonzero()`打印数组中小于5的元素：
- en: '[PRE46]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If the element you’re looking for doesn’t exist in the array, then the returned
    array of indices will be empty. For example:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要查找的元素在数组中不存在，则返回的索引数组将为空。例如：
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Learn more about [indexing and slicing here](quickstart.html#quickstart-indexing-slicing-and-iterating)
    and [here](basics.indexing.html#basics-indexing).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里了解更多关于[索引和切片](quickstart.html#quickstart-indexing-slicing-and-iterating)的信息和[这里](basics.indexing.html#basics-indexing)。
- en: 'Read more about using the nonzero function at: [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero").'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里阅读有关使用nonzero函数的更多信息：[`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero")。
- en: How to create an array from existing data
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何从现有数据创建数组
- en: '*This section covers* `slicing and indexing`, `np.vstack()`, `np.hstack()`,
    `np.hsplit()`, `.view()`, `copy()`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*这部分涵盖*`切片和索引`、`np.vstack()`、`np.hstack()`、`np.hsplit()`、`.view()`、`copy()`'
- en: '* * *'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can easily create a new array from a section of an existing array.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地从现有数组的一部分创建一个新数组。
- en: 'Let’s say you have this array:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这个数组：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can create a new array from a section of your array any time by specifying
    where you want to slice your array.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时通过指定想要切片的位置来从数组的一个部分创建新数组。
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, you grabbed a section of your array from index position 3 through index
    position 8.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你从索引位置3到索引位置8取出了数组的一个部分。
- en: 'You can also stack two existing arrays, both vertically and horizontally. Let’s
    say you have two arrays, `a1` and `a2`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以垂直和水平堆叠两个已经存在的数组。假设你有两个数组，`a1`和`a2`：
- en: '[PRE50]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can stack them vertically with `vstack`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`vstack`将它们垂直堆叠：
- en: '[PRE51]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Or stack them horizontally with `hstack`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`hstack`将它们水平堆叠：
- en: '[PRE52]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You can split an array into several smaller arrays using `hsplit`. You can specify
    either the number of equally shaped arrays to return or the columns *after* which
    the division should occur.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`hsplit`将数组分割成几个更小的数组。你可以指定要返回的形状相同的数组的数量，也可以指定分割应发生的列的位置。
- en: 'Let’s say you have this array:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这个数组：
- en: '[PRE53]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you wanted to split this array into three equally shaped arrays, you would
    run:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将这个数组等分成三个形状相同的数组，你需要运行：
- en: '[PRE54]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If you wanted to split your array after the third and fourth column, you’d
    run:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在第三和第四列后分割你的数组，你需要运行：
- en: '[PRE55]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[Learn more about stacking and splitting arrays here](quickstart.html#quickstart-stacking-arrays).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多有关堆叠和分割数组](quickstart.html#quickstart-stacking-arrays)。'
- en: You can use the `view` method to create a new array object that looks at the
    same data as the original array (a *shallow copy*).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`view`方法创建一个查看原始数组相同数据的新数组对象（*浅复制*）。
- en: Views are an important NumPy concept! NumPy functions, as well as operations
    like indexing and slicing, will return views whenever possible. This saves memory
    and is faster (no copy of the data has to be made). However it’s important to
    be aware of this - modifying data in a view also modifies the original array!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是NumPy中的重要概念！ 在可能的情况下，NumPy函数以及诸如索引和切片之类的操作都会返回视图。这样可以节省内存并提高速度（数据不需要复制）。然而，了解这一点很重要
    - 在视图中修改数据也会修改原始数组！
- en: 'Let’s say you create this array:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你创建了这个数组：
- en: '[PRE56]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now we create an array `b1` by slicing `a` and modify the first element of `b1`.
    This will modify the corresponding element in `a` as well!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过切片`a`创建一个数组`b1`，并修改`b1`的第一个元素。这将同时修改`a`中对应的元素！
- en: '[PRE57]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Using the `copy` method will make a complete copy of the array and its data
    (a *deep copy*). To use this on your array, you could run:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`copy`方法将创建数组的完整副本和数据（*深复制*）。你可以运行以下命令来使用它在数组上：
- en: '[PRE58]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[Learn more about copies and views here](quickstart.html#quickstart-copies-and-views).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解有关复制和视图的更多内容](quickstart.html#quickstart-copies-and-views)。'
- en: Basic array operations
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本数组操作
- en: '*This section covers addition, subtraction, multiplication, division, and more*'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖了加法、减法、乘法、除法等内容*'
- en: '* * *'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Once you’ve created your arrays, you can start to work with them. Let’s say,
    for example, that you’ve created two arrays, one called “data” and one called
    “ones”
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数组后，你可以开始使用它们。例如，你创建了两个名为“data”和“ones”的数组
- en: '![../_images/np_array_dataones.png](../Images/9b59cfcd5bef02a4f4038fabe093cf23.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_array_dataones.png](../Images/9b59cfcd5bef02a4f4038fabe093cf23.png)'
- en: You can add the arrays together with the plus sign.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用加号将数组相加。
- en: '[PRE59]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![../_images/np_data_plus_ones.png](../Images/66d39b9fac255980e503123485c0444f.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_data_plus_ones.png](../Images/66d39b9fac255980e503123485c0444f.png)'
- en: You can, of course, do more than just addition!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你当然还可以进行更多操作！
- en: '[PRE60]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '![../_images/np_sub_mult_divide.png](../Images/c1f77f532a2c7d29d2aee60956b2d967.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_sub_mult_divide.png](../Images/c1f77f532a2c7d29d2aee60956b2d967.png)'
- en: Basic operations are simple with NumPy. If you want to find the sum of the elements
    in an array, you’d use `sum()`. This works for 1D arrays, 2D arrays, and arrays
    in higher dimensions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，基本操作非常简单。如果你想要找到数组中元素的总和，你可以使用`sum()`。这适用于1D数组、2D数组以及更高维度的数组。
- en: '[PRE61]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: To add the rows or the columns in a 2D array, you would specify the axis.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要对2D数组的行或列进行加法，你需要指定轴。
- en: 'If you start with this array:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE62]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You can sum over the axis of rows with:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式对行轴求和：
- en: '[PRE63]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You can sum over the axis of columns with:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式对列轴求和：
- en: '[PRE64]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[Learn more about basic operations here](quickstart.html#quickstart-basic-operations).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多有关基本操作的内容](quickstart.html#quickstart-basic-operations)。'
- en: Broadcasting
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播
- en: 'There are times when you might want to carry out an operation between an array
    and a single number (also called *an operation between a vector and a scalar*)
    or between arrays of two different sizes. For example, your array (we’ll call
    it “data”) might contain information about distance in miles but you want to convert
    the information to kilometers. You can perform this operation with:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能想要在数组和单个数字之间进行操作（也称为*向量和标量之间的操作*）或者在两个不同大小的数组之间进行操作。例如，你的数组（我们称之为“数据”）可能包含了以英里为单位的距离信息，但你想要将信息转换为公里。你可以通过以下操作来实现：
- en: '[PRE65]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '![../_images/np_multiply_broadcasting.png](../Images/11c558ec6f5400f721ced3df1869a30c.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_multiply_broadcasting.png](../Images/11c558ec6f5400f721ced3df1869a30c.png)'
- en: NumPy understands that the multiplication should happen with each cell. That
    concept is called **broadcasting**. Broadcasting is a mechanism that allows NumPy
    to perform operations on arrays of different shapes. The dimensions of your array
    must be compatible, for example, when the dimensions of both arrays are equal
    or when one of them is 1\. If the dimensions are not compatible, you will get
    a `ValueError`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 理解乘法应该发生在每个单元格上。这个概念被称为**广播**。广播是一种机制，允许 NumPy 对不同形状的数组执行操作。你的数组的维度必须兼容，例如，当两个数组的维度相等时，或者其中一个维度是
    1 时。如果维度不兼容，你将得到一个`ValueError`。
- en: '[Learn more about broadcasting here](basics.broadcasting.html#basics-broadcasting).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多关于广播的信息](basics.broadcasting.html#basics-broadcasting)。'
- en: More useful array operations
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更有用的数组操作
- en: '*This section covers maximum, minimum, sum, mean, product, standard deviation,
    and more*'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖最大值、最小值、和、平均值、乘积、标准差等内容*'
- en: '* * *'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: NumPy also performs aggregation functions. In addition to `min`, `max`, and
    `sum`, you can easily run `mean` to get the average, `prod` to get the result
    of multiplying the elements together, `std` to get the standard deviation, and
    more.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 还执行聚合函数。除了`min`、`max`和`sum`之外，你还可以轻松地运行`mean`得到平均值，`prod`得到乘积的结果，`std`得到标准差等。
- en: '[PRE66]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '![../_images/np_aggregation.png](../Images/2c41632a337fac537f465483e8f74817.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_aggregation.png](../Images/2c41632a337fac537f465483e8f74817.png)'
- en: Let’s start with this array, called “a”
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个名为“a”的数组开始
- en: '[PRE67]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'It’s very common to want to aggregate along a row or column. By default, every
    NumPy aggregation function will return the aggregate of the entire array. To find
    the sum or the minimum of the elements in your array, run:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 想要沿着行或列进行聚合通常很常见。默认情况下，每个 NumPy 聚合函数将返回整个数组的聚合结果。要找到数组中元素的和或最小值，运行：
- en: '[PRE68]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Or:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE69]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can specify on which axis you want the aggregation function to be computed.
    For example, you can find the minimum value within each column by specifying `axis=0`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定要计算聚合函数的轴。例如，你可以通过指定`axis=0`来找到每列中的最小值。
- en: '[PRE70]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The four values listed above correspond to the number of columns in your array.
    With a four-column array, you will get four values as your result.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上述四个值对应于数组中列的数量。对于一个有四列的数组，你将得到四个值作为你的结果。
- en: Read more about [array methods here](../reference/arrays.ndarray.html#array-ndarray-methods).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于 [数组方法的内容](../reference/arrays.ndarray.html#array-ndarray-methods)。
- en: Creating matrices
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建矩阵
- en: You can pass Python lists of lists to create a 2-D array (or “matrix”) to represent
    them in NumPy.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传递 Python 的列表列表来创建一个 2-D 数组（或“矩阵”）以在 NumPy 中表示它们。
- en: '[PRE71]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '![../_images/np_create_matrix.png](../Images/f0baeb2fd5bf39ba6f39a0bcd76f27cd.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_create_matrix.png](../Images/f0baeb2fd5bf39ba6f39a0bcd76f27cd.png)'
- en: 'Indexing and slicing operations are useful when you’re manipulating matrices:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当你操作矩阵时，索引和切片操作非常有用：
- en: '[PRE72]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '![../_images/np_matrix_indexing.png](../Images/18d8f5ed53ce3c532bdf9819f566656a.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_indexing.png](../Images/18d8f5ed53ce3c532bdf9819f566656a.png)'
- en: 'You can aggregate matrices the same way you aggregated vectors:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像聚合向量那样聚合矩阵：
- en: '[PRE73]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![../_images/np_matrix_aggregation.png](../Images/54fae10b03421e1cccc2bffe511a58b6.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_aggregation.png](../Images/54fae10b03421e1cccc2bffe511a58b6.png)'
- en: 'You can aggregate all the values in a matrix and you can aggregate them across
    columns or rows using the `axis` parameter. To illustrate this point, let’s look
    at a slightly modified dataset:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以聚合矩阵中的所有值，你还可以使用`axis`参数沿行或列进行聚合。为了说明这一点，让我们看一个稍微修改过的数据集：
- en: '[PRE74]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '![../_images/np_matrix_aggregation_row.png](../Images/0c528d4cd2dab05f6959a98c3ee1be32.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_aggregation_row.png](../Images/0c528d4cd2dab05f6959a98c3ee1be32.png)'
- en: Once you’ve created your matrices, you can add and multiply them using arithmetic
    operators if you have two matrices that are the same size.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了你的矩阵，如果你有两个大小相同的矩阵，你可以使用算术运算符对它们进行加法和乘法运算。
- en: '[PRE75]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '![../_images/np_matrix_arithmetic.png](../Images/3b22b1779686234e77a7e0898013d8e8.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_arithmetic.png](../Images/3b22b1779686234e77a7e0898013d8e8.png)'
- en: You can do these arithmetic operations on matrices of different sizes, but only
    if one matrix has only one column or one row. In this case, NumPy will use its
    broadcast rules for the operation.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对不同大小的矩阵进行这些算术运算，但前提是一个矩阵只有一列或一行。在这种情况下，NumPy将使用其操作的广播规则。
- en: '[PRE76]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '![../_images/np_matrix_broadcasting.png](../Images/0fa020c3b7055d29a2c34c8ca85295db.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_broadcasting.png](../Images/0fa020c3b7055d29a2c34c8ca85295db.png)'
- en: 'Be aware that when NumPy prints N-dimensional arrays, the last axis is looped
    over the fastest while the first axis is the slowest. For instance:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当NumPy打印N维数组时，最后一个轴最快地循环，而第一个轴最慢。例如：
- en: '[PRE77]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'There are often instances where we want NumPy to initialize the values of an
    array. NumPy offers functions like `ones()` and `zeros()`, and the `random.Generator`
    class for random number generation for that. All you need to do is pass in the
    number of elements you want it to generate:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 常常有这样的情况，我们希望NumPy初始化数组的值。NumPy提供了`ones()`、`zeros()`和`random.Generator`类来生成随机数，你只需传递你想要生成的元素数量即可：
- en: '[PRE78]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '![../_images/np_ones_zeros_random.png](../Images/86d5e6196bdd4ee9106eaf83b61fe57a.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_ones_zeros_random.png](../Images/86d5e6196bdd4ee9106eaf83b61fe57a.png)'
- en: 'You can also use `ones()`, `zeros()`, and `random()` to create a 2D array if
    you give them a tuple describing the dimensions of the matrix:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`ones()`、`zeros()`和`random()`来创建2D数组，只要给它们一个描述矩阵维度的元组。
- en: '[PRE79]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '![../_images/np_ones_zeros_matrix.png](../Images/eec8e0a2353993e5f66abe64767dbd8a.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_ones_zeros_matrix.png](../Images/eec8e0a2353993e5f66abe64767dbd8a.png)'
- en: Read more about creating arrays, filled with `0`’s, `1`’s, other values or uninitialized,
    at [array creation routines](../reference/routines.array-creation.html#routines-array-creation).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于创建数组，填充为`0`、`1`、其他值或未初始化的信息，参见[数组创建例程](../reference/routines.array-creation.html#routines-array-creation)。
- en: Generating random numbers
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产生随机数
- en: The use of random number generation is an important part of the configuration
    and evaluation of many numerical and machine learning algorithms. Whether you
    need to randomly initialize weights in an artificial neural network, split data
    into random sets, or randomly shuffle your dataset, being able to generate random
    numbers (actually, repeatable pseudo-random numbers) is essential.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数生成的使用是许多数值和机器学习算法配置和评估的重要部分。不管你需要在人工神经网络中随机初始化权重，将数据拆分为随机集，还是随机洗牌你的数据集，能够生成随机数（实际上是可重复的伪随机数）是必不可少的。
- en: With `Generator.integers`, you can generate random integers from low (remember
    that this is inclusive with NumPy) to high (exclusive). You can set `endpoint=True`
    to make the high number inclusive.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Generator.integers`，你可以从低值（请记住这在NumPy中是包含在内的）生成随机整数到高值（不包括）。你可以设置`endpoint=True`使得高值包括在内。
- en: 'You can generate a 2 x 4 array of random integers between 0 and 4 with:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以生成一个2 x 4的随机整数数组，范围在0到4之间：
- en: '[PRE80]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[Read more about random number generation here](../reference/random/index.html#numpyrandom).'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[在此处阅读更多关于随机数生成的信息](../reference/random/index.html#numpyrandom)。'
- en: How to get unique items and counts
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取唯一项和计数
- en: '*This section covers* `np.unique()`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节包括* `np.unique()`'
- en: '* * *'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can find the unique elements in an array easily with `np.unique`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`np.unique`轻松找到数组中的唯一元素。
- en: 'For example, if you start with this array:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE81]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'you can use `np.unique` to print the unique values in your array:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.unique`来打印数组中的唯一值：
- en: '[PRE82]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: To get the indices of unique values in a NumPy array (an array of first index
    positions of unique values in the array), just pass the `return_index` argument
    in `np.unique()` as well as your array.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要在NumPy数组中获取唯一值的索引（数组中唯一值的第一个索引位置数组），只需在`np.unique()`中传递`return_index`参数以及你的数组即可。
- en: '[PRE83]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: You can pass the `return_counts` argument in `np.unique()` along with your array
    to get the frequency count of unique values in a NumPy array.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`np.unique()`中传递`return_counts`参数以及你的数组来获得NumPy数组中唯一值的频率计数。
- en: '[PRE84]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'This also works with 2D arrays! If you start with this array:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于2D数组！如果你从这个数组开始：
- en: '[PRE85]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You can find unique values with:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以找到唯一值，`np.unique()`可以帮你实现。
- en: '[PRE86]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: If the axis argument isn’t passed, your 2D array will be flattened.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递axis参数，你的2D数组将被展平。
- en: If you want to get the unique rows or columns, make sure to pass the `axis`
    argument. To find the unique rows, specify `axis=0` and for columns, specify `axis=1`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要获取唯一行或列，请确保传递`axis`参数。要找到唯一行，请指定`axis=0`，对于列，请指定`axis=1`。
- en: '[PRE87]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'To get the unique rows, index position, and occurrence count, you can use:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取唯一行、索引位置和出现次数，可以使用：
- en: '[PRE88]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: To learn more about finding the unique elements in an array, see [`unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique").
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解如何在数组中查找唯一元素，请参见[`unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique")。
- en: Transposing and reshaping a matrix
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转置和重塑矩阵
- en: '*This section covers* `arr.reshape()`, `arr.transpose()`, `arr.T`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖* `arr.reshape()`, `arr.transpose()`, `arr.T`'
- en: '* * *'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s common to need to transpose your matrices. NumPy arrays have the property
    `T` that allows you to transpose a matrix.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 需要转置矩阵是很常见的。NumPy数组具有允许您转置矩阵的属性`T`。
- en: '![../_images/np_transposing_reshaping.png](../Images/90ef6ecf8374753450db871d206d21f1.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_transposing_reshaping.png](../Images/90ef6ecf8374753450db871d206d21f1.png)'
- en: You may also need to switch the dimensions of a matrix. This can happen when,
    for example, you have a model that expects a certain input shape that is different
    from your dataset. This is where the `reshape` method can be useful. You simply
    need to pass in the new dimensions that you want for the matrix.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要转置矩阵维度时，可能会发生这种情况。例如，当您有一个模型期望不同于数据集的特定输入形状时。在这种情况下，`reshape`方法可以派上用场。您只需传入想要矩阵的新维度。
- en: '[PRE89]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '![../_images/np_reshape.png](../Images/2f1382886687a1a2177b527ec1527b58.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_reshape.png](../Images/2f1382886687a1a2177b527ec1527b58.png)'
- en: You can also use `.transpose()` to reverse or change the axes of an array according
    to the values you specify.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`.transpose()`根据您指定的值反转或更改数组的轴。
- en: 'If you start with this array:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从这个数组开始：
- en: '[PRE90]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: You can transpose your array with `arr.transpose()`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`arr.transpose()`来转置数组。
- en: '[PRE91]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'You can also use `arr.T`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`arr.T`：
- en: '[PRE92]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: To learn more about transposing and reshaping arrays, see [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose") and [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape").
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解关于转置和重塑数组的更多信息，请参见[`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose")和[`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape")。
- en: How to reverse an array
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何反转数组
- en: '*This section covers* `np.flip()`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖* `np.flip()`'
- en: '* * *'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: NumPy’s `np.flip()` function allows you to flip, or reverse, the contents of
    an array along an axis. When using `np.flip()`, specify the array you would like
    to reverse and the axis. If you don’t specify the axis, NumPy will reverse the
    contents along all of the axes of your input array.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的`np.flip()`函数允许您沿轴翻转或反转数组的内容。使用`np.flip()`时，请指定要反转的数组以及轴。如果不指定轴，NumPy将沿着输入数组的所有轴反转内容。
- en: '**Reversing a 1D array**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**反转1D数组**'
- en: 'If you begin with a 1D array like this one:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从这样一个1D数组开始：
- en: '[PRE93]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'You can reverse it with:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下方法反转：
- en: '[PRE94]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'If you want to print your reversed array, you can run:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要打印您反转的数组，可以运行：
- en: '[PRE95]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '**Reversing a 2D array**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**反转2D数组**'
- en: A 2D array works much the same way.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 2D数组的操作方式基本相同。
- en: 'If you start with this array:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从这个数组开始：
- en: '[PRE96]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'You can reverse the content in all of the rows and all of the columns with:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方法反转所有行和所有列中的内容：
- en: '[PRE97]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'You can easily reverse only the *rows* with:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地仅反转*行*：
- en: '[PRE98]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Or reverse only the *columns* with:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 或仅反转*列*：
- en: '[PRE99]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'You can also reverse the contents of only one column or row. For example, you
    can reverse the contents of the row at index position 1 (the second row):'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以反转仅一个列或一行的内容。例如，您可以反转第1个索引位置的行中的内容（第二行）：
- en: '[PRE100]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'You can also reverse the column at index position 1 (the second column):'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以反转第1个索引位置的列（第二列）：
- en: '[PRE101]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Read more about reversing arrays at [`flip`](../reference/generated/numpy.flip.html#numpy.flip
    "numpy.flip").
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于反转数组的内容，请查看[`flip`](../reference/generated/numpy.flip.html#numpy.flip
    "numpy.flip")。
- en: Reshaping and flattening multidimensional arrays
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重塑和扁平化多维数组
- en: '*This section covers* `.flatten()`, `ravel()`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖* `.flatten()`, `ravel()`'
- en: '* * *'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'There are two popular ways to flatten an array: `.flatten()` and `.ravel()`.
    The primary difference between the two is that the new array created using `ravel()`
    is actually a reference to the parent array (i.e., a “view”). This means that
    any changes to the new array will affect the parent array as well. Since `ravel`
    does not create a copy, it’s memory efficient.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种常用的展平数组的方法：`.flatten()`和`.ravel()`。两者之间的主要区别是使用`ravel()`创建的新数组实际上是对父数组的引用（即“视图”）。这意味着对新数组的任何更改也会影响父数组。由于`ravel`不创建副本，它在内存上是高效的。
- en: 'If you start with this array:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有这个数组：
- en: '[PRE102]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: You can use `flatten` to flatten your array into a 1D array.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`flatten`将数组展平为一个一维数组。
- en: '[PRE103]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: When you use `flatten`, changes to your new array won’t change the parent array.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`flatten`时，对新数组的更改不会影响父数组。
- en: 'For example:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE104]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: But when you use `ravel`, the changes you make to the new array will affect
    the parent array.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当你使用`ravel`时，你对新数组所做的更改将影响父数组。
- en: 'For example:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE105]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Read more about `flatten` at [`ndarray.flatten`](../reference/generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten") and `ravel` at [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel").
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`ndarray.flatten`](../reference/generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")和[`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel")中了解更多关于`flatten`和`ravel`的信息。
- en: How to access the docstring for more information
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问文档字符串以获取更多信息
- en: '*This section covers* `help()`, `?`, `??`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `help()`、`?`、`??`'
- en: '* * *'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When it comes to the data science ecosystem, Python and NumPy are built with
    the user in mind. One of the best examples of this is the built-in access to documentation.
    Every object contains the reference to a string, which is known as the **docstring**.
    In most cases, this docstring contains a quick and concise summary of the object
    and how to use it. Python has a built-in `help()` function that can help you access
    this information. This means that nearly any time you need more information, you
    can use `help()` to quickly find the information that you need.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学生态系统方面，Python和NumPy是为用户设计的。其中一个最好的例子就是内置访问文档的功能。每个对象都包含对一个字符串的引用，这个字符串被称为**文档字符串**。在大多数情况下，这个文档字符串包含对象和如何使用它的快速简明摘要。Python有一个内置的`help()`函数，可以帮助您访问这些信息。这意味着几乎任何时候您需要更多信息，都可以使用`help()`快速找到您需要的信息。
- en: 'For example:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE106]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Because access to additional information is so useful, IPython uses the `?`
    character as a shorthand for accessing this documentation along with other relevant
    information. IPython is a command shell for interactive computing in multiple
    languages. [You can find more information about IPython here](https://ipython.org/).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 因为额外信息的获取非常有用，IPython使用`?`字符作为访问此文档以及其他相关信息的简短方式。IPython是用于多种语言的交互式计算的命令行。[你可以在这里找到有关IPython的更多信息](https://ipython.org/)。
- en: 'For example:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE107]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: You can even use this notation for object methods and objects themselves.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以对对象方法和对象本身使用这种表示法。
- en: 'Let’s say you create this array:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你创建了这个数组：
- en: '[PRE108]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Then you can obtain a lot of useful information (first details about `a` itself,
    followed by the docstring of `ndarray` of which `a` is an instance):'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以获得很多有用的信息（首先是关于`a`本身的详细信息，然后是`a`所属的`ndarray`的文档字符串）：
- en: '[PRE109]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: This also works for functions and other objects that **you** create. Just remember
    to include a docstring with your function using a string literal (`""" """` or
    `''' '''` around your documentation).
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**你**创建的函数和其他对象也适用这个方法。只需记住使用字符串字面值（用 `""" """` 或 `''' '''` 将你的文档括起来）为你的函数添加文档字符串即可。
- en: 'For example, if you create this function:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你创建了这个函数：
- en: '[PRE110]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'You can obtain information about the function:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以获取有关函数的信息：
- en: '[PRE111]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: You can reach another level of information by reading the source code of the
    object you’re interested in. Using a double question mark (`??`) allows you to
    access the source code.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读你感兴趣的对象的源代码，可以获得更深入的信息。使用两个问号（`??`）可以访问源代码。
- en: 'For example:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE112]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'If the object in question is compiled in a language other than Python, using
    `??` will return the same information as `?`. You’ll find this with a lot of built-in
    objects and types, for example:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题中的对象是在Python以外的语言中编译的，使用`??`将返回与`?`相同的信息。例如，您会发现许多内置对象和类型都是如此：
- en: '[PRE113]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'and :'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE114]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: have the same output because they were compiled in a programming language other
    than Python.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 有相同的输出，因为它们是在Python以外的编程语言中编译的。
- en: Working with mathematical formulas
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理数学公式
- en: The ease of implementing mathematical formulas that work on arrays is one of
    the things that make NumPy so widely used in the scientific Python community.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 实现在数组上运行数学公式的简易性是让NumPy在科学Python社区中得到广泛应用的原因之一。
- en: 'For example, this is the mean square error formula (a central formula used
    in supervised machine learning models that deal with regression):'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，这是均方误差公式（监督学习模型中常用于回归问题的中心公式）:'
- en: '![../_images/np_MSE_formula.png](../Images/b9475c62996a78fe826723abd6d7dbe8.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_MSE_formula.png](../Images/b9475c62996a78fe826723abd6d7dbe8.png)'
- en: 'Implementing this formula is simple and straightforward in NumPy:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '在NumPy中实现此公式简单而直接:'
- en: '![../_images/np_MSE_implementation.png](../Images/01cd11db569040a346561a5cfc3bf23a.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_MSE_implementation.png](../Images/01cd11db569040a346561a5cfc3bf23a.png)'
- en: What makes this work so well is that `predictions` and `labels` can contain
    one or a thousand values. They only need to be the same size.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做得很好的原因是 `predictions` 和 `labels` 可能包含一个或一千个值，它们只需要具有相同的大小。
- en: 'You can visualize it this way:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以以这种方式可视化它:'
- en: '![../_images/np_mse_viz1.png](../Images/a8dbf015be4eaea56890409cc1ac99ce.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_mse_viz1.png](../Images/a8dbf015be4eaea56890409cc1ac99ce.png)'
- en: In this example, both the predictions and labels vectors contain three values,
    meaning `n` has a value of three. After we carry out subtractions the values in
    the vector are squared. Then NumPy sums the values, and your result is the error
    value for that prediction and a score for the quality of the model.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，预测和标签向量都包含三个值，这意味着 `n` 的值为三。在我们进行减法操作后，向量中的值被平方。然后NumPy对值求和，您的结果就是该预测的错误值和模型质量的得分。
- en: '![../_images/np_mse_viz2.png](../Images/a6678fbe867a803aa7d00ee7a4463e8b.png)
    ![../_images/np_MSE_explanation2.png](../Images/f167374d2ba2c45f5a4f4410c9076603.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_mse_viz2.png](../Images/a6678fbe867a803aa7d00ee7a4463e8b.png)
    ![../_images/np_MSE_explanation2.png](../Images/f167374d2ba2c45f5a4f4410c9076603.png)'
- en: How to save and load NumPy objects
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何保存和加载NumPy对象
- en: '*This section covers* `np.save`, `np.savez`, `np.savetxt`, `np.load`, `np.loadtxt`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `np.save`, `np.savez`, `np.savetxt`, `np.load`, `np.loadtxt`'
- en: '* * *'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You will, at some point, want to save your arrays to disk and load them back
    without having to re-run the code. Fortunately, there are several ways to save
    and load objects with NumPy. The ndarray objects can be saved to and loaded from
    the disk files with `loadtxt` and `savetxt` functions that handle normal text
    files, `load` and `save` functions that handle NumPy binary files with a **.npy**
    file extension, and a `savez` function that handles NumPy files with a **.npz**
    file extension.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，您可能想要将数组保存到磁盘并加载它们，而无需重新运行代码。幸运的是，有几种方法可以使用NumPy保存和加载对象。ndarray对象可以使用`loadtxt`和`savetxt`函数保存到磁盘文件中，这些函数处理普通文本文件，使用处理NumPy二进制文件的`load`和`save`函数，具有
    **.npy** 文件扩展名，并使用处理具有 **.npz** 文件扩展名的NumPy文件的`savez`函数。
- en: The **.npy** and **.npz** files store data, shape, dtype, and other information
    required to reconstruct the ndarray in a way that allows the array to be correctly
    retrieved, even when the file is on another machine with different architecture.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**.npy** 和 **.npz** 文件存储数据、形状、数据类型以及其他信息，以便在需重建数组的情况下以一种允许正确检索数组的方式。即使文件位于具有不同架构的另一台机器上，也能正确检索数组。'
- en: If you want to store a single ndarray object, store it as a .npy file using
    `np.save`. If you want to store more than one ndarray object in a single file,
    save it as a .npz file using `np.savez`. You can also save several arrays into
    a single file in compressed npz format with [`savez_compressed`](../reference/generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed").
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要存储单个ndarray对象，请使用`np.save`将其存储为 .npy 文件。如果要在单个文件中存储多个ndarray对象，请使用`np.savez`将其保存为
    .npz 文件。您还可以使用[`savez_compressed`](../reference/generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")将多个数组保存到单个文件中以压缩的npz格式。
- en: 'It’s easy to save and load and array with `np.save()`. Just make sure to specify
    the array you want to save and a file name. For example, if you create this array:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`np.save()`轻松保存和加载数组。只需确保指定要保存的数组和文件名。例如，如果您创建此数组:'
- en: '[PRE115]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'You can save it as “filename.npy” with:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以使用以下方式保存为“filename.npy”:'
- en: '[PRE116]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: You can use `np.load()` to reconstruct your array.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`np.load()`重建您的数组。
- en: '[PRE117]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'If you want to check your array, you can run:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你想检查你的数组，可以运行:'
- en: '[PRE118]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: You can save a NumPy array as a plain text file like a **.csv** or **.txt**
    file with `np.savetxt`.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`np.savetxt`将NumPy数组保存为普通文本文件，如 **.csv** 或 **.txt** 文件。
- en: 'For example, if you create this array:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，如果您创建此数组:'
- en: '[PRE119]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'You can easily save it as a .csv file with the name “new_file.csv” like this:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样将其保存为名为“new_file.csv”的.csv文件：
- en: '[PRE120]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'You can quickly and easily load your saved text file using `loadtxt()`:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`loadtxt()`快速和方便地加载保存的文本文件：
- en: '[PRE121]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The `savetxt()` and `loadtxt()` functions accept additional optional parameters
    such as header, footer, and delimiter. While text files can be easier for sharing,
    .npy and .npz files are smaller and faster to read. If you need more sophisticated
    handling of your text file (for example, if you need to work with lines that contain
    missing values), you will want to use the [`genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") function.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`savetxt()`和`loadtxt()`函数还接受其他可选参数，如头部（header）、尾部（footer）和分隔符（delimiter）。虽然文本文件更容易共享，但.npy和.npz文件更小更快。如果需要更复杂的文本文件处理（例如，如果需要处理包含缺失值的行），则需要使用[`genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")函数。'
- en: With [`savetxt`](../reference/generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt"),
    you can specify headers, footers, comments, and more.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`savetxt`](../reference/generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")，你可以指定头部（headers）、尾部（footers）、注释等。
- en: Learn more about [input and output routines here](../reference/routines.io.html#routines-io).
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于[输入和输出例程的信息](../reference/routines.io.html#routines-io)。
- en: Importing and exporting a CSV
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入和导出CSV文件
- en: It’s simple to read in a CSV that contains existing information. The best and
    easiest way to do this is to use [Pandas](https://pandas.pydata.org).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 读取包含现有信息的CSV非常简单。最好和最简单的方法是使用[Pandas](https://pandas.pydata.org)。
- en: '[PRE122]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '![../_images/np_pandas.png](../Images/64f7d414cb396c6af87ad816cef866d4.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_pandas.png](../Images/64f7d414cb396c6af87ad816cef866d4.png)'
- en: It’s simple to use Pandas in order to export your array as well. If you are
    new to NumPy, you may want to create a Pandas dataframe from the values in your
    array and then write the data frame to a CSV file with Pandas.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pandas导出数组也很简单。如果对NumPy不熟悉，可以从数组的值中创建一个Pandas数据框，然后使用Pandas将数据框写入CSV文件。
- en: If you created this array “a”
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 如果创建了该数组“a”
- en: '[PRE123]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: You could create a Pandas dataframe
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个Pandas数据框
- en: '[PRE124]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'You can easily save your dataframe with:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地保存你的DataFrame：
- en: '[PRE125]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'And read your CSV with:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用以下方式读取CSV文件：
- en: '[PRE126]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '![../_images/np_readcsv.png](../Images/54f26b8b35c3ff479bfd7fda3a4bd02a.png)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_readcsv.png](../Images/54f26b8b35c3ff479bfd7fda3a4bd02a.png)'
- en: You can also save your array with the NumPy `savetxt` method.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用NumPy的`savetxt`方法保存你的数组。
- en: '[PRE127]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'If you’re using the command line, you can read your saved CSV any time with
    a command such as:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在命令行中使用，可以使用类似以下的命令随时读取已保存的CSV文件：
- en: '[PRE128]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Or you can open the file any time with a text editor!
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以随时用文本编辑器打开文件！
- en: If you’re interested in learning more about Pandas, take a look at the [official
    Pandas documentation](https://pandas.pydata.org/index.html). Learn how to install
    Pandas with the [official Pandas installation information](https://pandas.pydata.org/pandas-docs/stable/install.html).
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Pandas感兴趣，请查看[官方Pandas文档](https://pandas.pydata.org/index.html)。了解如何使用[官方Pandas安装信息](https://pandas.pydata.org/pandas-docs/stable/install.html)安装Pandas。
- en: Plotting arrays with Matplotlib
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Matplotlib绘制数组
- en: If you need to generate a plot for your values, it’s very simple with [Matplotlib](https://matplotlib.org/).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要为你的值生成一个图表，使用[Matplotlib](https://matplotlib.org/)非常简单。
- en: 'For example, you may have an array like this one:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能有一个像这样的数组：
- en: '[PRE129]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'If you already have Matplotlib installed, you can import it with:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经安装了Matplotlib，可以使用以下方式导入它：
- en: '[PRE130]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'All you need to do to plot your values is run:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '要绘制你的值，只需要运行： '
- en: '[PRE131]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '![../_images/matplotlib1.png](../Images/fd0bab5f04bbeea3c1f395dd60acebf0.png)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib1.png](../Images/fd0bab5f04bbeea3c1f395dd60acebf0.png)'
- en: 'For example, you can plot a 1D array like this:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以通过以下方式绘制1D数组：
- en: '[PRE132]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '![../_images/matplotlib2.png](../Images/e5b8c25f89b1a0fc9a74365cf85f25de.png)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib2.png](../Images/e5b8c25f89b1a0fc9a74365cf85f25de.png)'
- en: With Matplotlib, you have access to an enormous number of visualization options.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Matplotlib，你有许多可视化选项。
- en: '[PRE133]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '![../_images/matplotlib3.png](../Images/2eb12f2635bf2c5c1844f13053f5bf52.png)'
  id: totrans-465
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib3.png](../Images/2eb12f2635bf2c5c1844f13053f5bf52.png)'
- en: To read more about Matplotlib and what it can do, take a look at [the official
    documentation](https://matplotlib.org/). For directions regarding installing Matplotlib,
    see the official [installation section](https://matplotlib.org/users/installing.html).
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 要阅读更多关于Matplotlib及其功能的信息，请查看[官方文档](https://matplotlib.org/)。有关安装Matplotlib的指示，请参阅官方的[安装部分](https://matplotlib.org/users/installing.html)。
- en: '* * *'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Image credits: Jay Alammar http://jalammar.github.io/*'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来源：Jay Alammar http://jalammar.github.io/*'
- en: Welcome to NumPy!
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欢迎来到NumPy！
- en: NumPy (**Numerical Python**) is an open source Python library that’s used in
    almost every field of science and engineering. It’s the universal standard for
    working with numerical data in Python, and it’s at the core of the scientific
    Python and PyData ecosystems. NumPy users include everyone from beginning coders
    to experienced researchers doing state-of-the-art scientific and industrial research
    and development. The NumPy API is used extensively in Pandas, SciPy, Matplotlib,
    scikit-learn, scikit-image and most other data science and scientific Python packages.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy（**Numerical Python**）是一个开源的Python库，几乎在科学和工程的每个领域中都有使用。它是Python中处理数值数据的通用标准，是科学Python和PyData生态系统的核心。NumPy的用户包括从初学者到进行尖端科学和工业研究与开发的经验丰富的研究人员。NumPy
    API在Pandas、SciPy、Matplotlib、scikit-learn、scikit-image和大多数其他数据科学和科学Python包中广泛使用。
- en: The NumPy library contains multidimensional array and matrix data structures
    (you’ll find more information about this in later sections). It provides **ndarray**,
    a homogeneous n-dimensional array object, with methods to efficiently operate
    on it. NumPy can be used to perform a wide variety of mathematical operations
    on arrays. It adds powerful data structures to Python that guarantee efficient
    calculations with arrays and matrices and it supplies an enormous library of high-level
    mathematical functions that operate on these arrays and matrices.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy库包含多维数组和矩阵数据结构（你将在后面的部分中找到更多信息）。它提供了**ndarray**，一个同构的n维数组对象，并提供了方法来高效地对其进行操作。NumPy可以用于对数组执行各种各样的数学操作。它向Python添加了强大的数据结构，保证了对数组和矩阵的高效计算，并提供了大量的高级数学函数库，可以操作这些数组和矩阵。
- en: Learn more about [NumPy here](whatisnumpy.html#whatisnumpy)!
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在[这里了解更多关于NumPy的信息](whatisnumpy.html#whatisnumpy)！
- en: Installing NumPy
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装NumPy
- en: To install NumPy, we strongly recommend using a scientific Python distribution.
    If you’re looking for the full instructions for installing NumPy on your operating
    system, see [Installing NumPy](https://numpy.org/install/).
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装NumPy，我们强烈建议使用科学Python发行版。如果你正在寻找有关在你的操作系统上安装NumPy的完整说明，请参阅[安装NumPy](https://numpy.org/install/)。
- en: 'If you already have Python, you can install NumPy with:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Python，你可以使用以下命令安装NumPy：
- en: '[PRE134]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: or
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE135]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: If you don’t have Python yet, you might want to consider using [Anaconda](https://www.anaconda.com/).
    It’s the easiest way to get started. The good thing about getting this distribution
    is the fact that you don’t need to worry too much about separately installing
    NumPy or any of the major packages that you’ll be using for your data analyses,
    like pandas, Scikit-Learn, etc.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Python，你可能想考虑使用[Anaconda](https://www.anaconda.com/)。这是最简单的入门方式。使用这个发行版的好处是你不需要过多地担心单独安装NumPy或者你将用于数据分析的任何主要包，如pandas、Scikit-Learn等。
- en: How to import NumPy
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何导入NumPy
- en: 'To access NumPy and its functions import it in your Python code like this:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问NumPy及其函数，请在你的Python代码中像这样导入它：
- en: '[PRE136]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: We shorten the imported name to `np` for better readability of code using NumPy.
    This is a widely adopted convention that makes your code more readable for everyone
    working on it. We recommend to always use import numpy as `np`.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入的名称缩短为`np`，以提高使用NumPy的代码的可读性。这是一种被广泛采用的惯例，使得你的代码对所有工作在其中的人更易读。我们建议始终使用`import
    numpy as np`导入。
- en: Reading the example code
  id: totrans-484
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读示例代码
- en: 'If you aren’t already comfortable with reading tutorials that contain a lot
    of code, you might not know how to interpret a code block that looks like this:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不熟悉阅读包含大量代码的教程，你可能不知道如何解释像这样的代码块：
- en: '[PRE137]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: If you aren’t familiar with this style, it’s very easy to understand. If you
    see `>>>`, you’re looking at **input**, or the code that you would enter. Everything
    that doesn’t have `>>>` in front of it is **output**, or the results of running
    your code. This is the style you see when you run `python` on the command line,
    but if you’re using IPython, you might see a different style. Note that it is
    not part of the code and will cause an error if typed or pasted into the Python
    shell. It can be safely typed or pasted into the IPython shell; the `>>>` is ignored.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉这种风格，那么很容易理解。如果你看到`>>>`，你正在看**输入**，或者你将要输入的代码。任何不以`>>>`开头的都是**输出**，或者是你代码运行的结果。这是在命令行上运行`python`时看到的样式，但如果你使用IPython，你可能会看到不同的样式。请注意，它不是代码的一部分，如果输入或粘贴到Python
    shell中会导致错误。它可以安全地输入或粘贴到IPython shell中；`>>>`会被忽略。
- en: What’s the difference between a Python list and a NumPy array?
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python列表和NumPy数组之间有什么区别？
- en: NumPy gives you an enormous range of fast and efficient ways of creating arrays
    and manipulating numerical data inside them. While a Python list can contain different
    data types within a single list, all of the elements in a NumPy array should be
    homogeneous. The mathematical operations that are meant to be performed on arrays
    would be extremely inefficient if the arrays weren’t homogeneous.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy为您提供了大量快速高效的方式来创建数组并在其中操纵数字数据。 虽然Python列表可以包含单个列表中的不同数据类型，但NumPy数组中的所有元素应该是同质的。
    如果数组不是同质的，那么对数组执行的数学运算将非常低效。
- en: '**Why use NumPy?**'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么使用NumPy？**'
- en: NumPy arrays are faster and more compact than Python lists. An array consumes
    less memory and is convenient to use. NumPy uses much less memory to store data
    and it provides a mechanism of specifying the data types. This allows the code
    to be optimized even further.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组比Python列表更快，更紧凑。 数组占用的内存更少且使用方便。 NumPy使用的内存比存储数据需要的内存少得多，并提供了指定数据类型的机制。
    这进一步优化了代码。
- en: What is an array?
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数组？
- en: An array is a central data structure of the NumPy library. An array is a grid
    of values and it contains information about the raw data, how to locate an element,
    and how to interpret an element. It has a grid of elements that can be indexed
    in [various ways](quickstart.html#quickstart-indexing-slicing-and-iterating).
    The elements are all of the same type, referred to as the array `dtype`.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是NumPy库的核心数据结构。 数组是一组值的网格，它包含有关原始数据的信息，如何定位元素以及如何解释元素。 它有一组可以以[各种方式](quickstart.html#quickstart-indexing-slicing-and-iterating)进行索引的元素。
    这些元素都是相同类型的，称为数组的`dtype`。
- en: An array can be indexed by a tuple of nonnegative integers, by booleans, by
    another array, or by integers. The `rank` of the array is the number of dimensions.
    The `shape` of the array is a tuple of integers giving the size of the array along
    each dimension.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过非负整数元组、布尔值、另一个数组或整数进行索引。 数组的`rank`是维数。 数组的`shape`是一组整数，给出沿每个维度的数组大小。
- en: One way we can initialize NumPy arrays is from Python lists, using nested lists
    for two- or higher-dimensional data.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从Python列表中初始化NumPy数组的一种方式是使用嵌套列表进行二维或多维数据。
- en: 'For example:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE138]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'or:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE139]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: We can access the elements in the array using square brackets. When you’re accessing
    elements, remember that indexing in NumPy starts at 0\. That means that if you
    want to access the first element in your array, you’ll be accessing element “0”.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用方括号访问数组中的元素。 当访问元素时，要记住NumPy中的索引从0开始。 这意味着如果您要访问数组中的第一个元素，您将访问元素“0”。
- en: '[PRE140]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: More information about arrays
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有关数组的更多信息
- en: '*This section covers* `1D array`, `2D array`, `ndarray`, `vector`, `matrix`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '*本部分涵盖* `1D array`, `2D array`, `ndarray`, `vector`, `matrix`'
- en: '* * *'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You might occasionally hear an array referred to as a “ndarray,” which is shorthand
    for “N-dimensional array.” An N-dimensional array is simply an array with any
    number of dimensions. You might also hear **1-D**, or one-dimensional array, **2-D**,
    or two-dimensional array, and so on. The NumPy `ndarray` class is used to represent
    both matrices and vectors. A **vector** is an array with a single dimension (there’s
    no difference between row and column vectors), while a **matrix** refers to an
    array with two dimensions. For **3-D** or higher dimensional arrays, the term
    **tensor** is also commonly used.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能偶尔会听到一个数组被称为“ndarray”，这是“N-dimensional array”的简称。 N维数组只是具有任意数量维度的数组。 您还可能听说**1-D**或一维数组，**2-D**或二维数组等。
    NumPy `ndarray`类用于表示矩阵和向量。 **向量**是具有单个维度的数组（行向量和列向量之间没有区别），而**矩阵**指的是具有两个维度的数组。
    对于**3-D**或更高维数组，术语**张量**也常常使用。
- en: '**What are the attributes of an array?**'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '**数组的属性是什么？**'
- en: An array is usually a fixed-size container of items of the same type and size.
    The number of dimensions and items in an array is defined by its shape. The shape
    of an array is a tuple of non-negative integers that specify the sizes of each
    dimension.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 数组通常是相同类型和大小的项目的固定大小容器。 数组中的维数和项目数由其形状定义。数组的形状是一组非负整数元组，用于指定每个维度的大小。
- en: 'In NumPy, dimensions are called **axes**. This means that if you have a 2D
    array that looks like this:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，维度被称为**轴**。 这意味着如果你有一个看起来像这样的二维数组：
- en: '[PRE141]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Your array has 2 axes. The first axis has a length of 2 and the second axis
    has a length of 3.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 你的数组有2个轴。 第一个轴的长度为2，第二个轴的长度为3。
- en: Just like in other Python container objects, the contents of an array can be
    accessed and modified by indexing or slicing the array. Unlike the typical container
    objects, different arrays can share the same data, so changes made on one array
    might be visible in another.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他Python容器对象一样，数组的内容可以通过对数组进行索引或切片来访问和修改。与典型的容器对象不同，不同的数组可以共享相同的数据，因此在一个数组上进行的更改可能会在另一个数组中可见。
- en: Array **attributes** reflect information intrinsic to the array itself. If you
    need to get, or even set, properties of an array without creating a new array,
    you can often access an array through its attributes.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的**属性**反映了数组本身的内在信息。如果你需要获取或设置数组的属性而不创建新数组，通常可以通过其属性访问数组。
- en: '[Read more about array attributes here](../reference/arrays.ndarray.html#arrays-ndarray)
    and learn about [array objects here](../reference/arrays.html#arrays).'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里阅读有关数组属性的更多信息](../reference/arrays.ndarray.html#arrays-ndarray)，并了解[数组对象](../reference/arrays.html#arrays)。'
- en: How to create a basic array
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建基本数组
- en: '*This section covers* `np.array()`, `np.zeros()`, `np.ones()`, `np.empty()`,
    `np.arange()`, `np.linspace()`, `dtype`'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖了*`np.array()`，`np.zeros()`，`np.ones()`，`np.empty()`，`np.arange()`，`np.linspace()`，`dtype`'
- en: '* * *'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To create a NumPy array, you can use the function `np.array()`.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个NumPy数组，您可以使用函数`np.array()`。
- en: All you need to do to create a simple array is pass a list to it. If you choose
    to, you can also specify the type of data in your list. [You can find more information
    about data types here](../reference/arrays.dtypes.html#arrays-dtypes).
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的数组，您只需要将列表传递给它。如果您选择的话，还可以指定列表中的数据类型。[您可以在这里找到有关数据类型的更多信息](../reference/arrays.dtypes.html#arrays-dtypes)。
- en: '[PRE142]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'You can visualize your array this way:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以此方式可视化您的数组：
- en: '![../_images/np_array.png](../Images/aaf6808d845c7bcc478972e091442ab0.png)'
  id: totrans-521
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_array.png](../Images/aaf6808d845c7bcc478972e091442ab0.png)'
- en: '*Be aware that these visualizations are meant to simplify ideas and give you
    a basic understanding of NumPy concepts and mechanics. Arrays and array operations
    are much more complicated than are captured here!*'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，这些可视化是为了简化思想并让您对NumPy概念和机制有基本了解。数组和数组操作比这里描述的要复杂得多！*'
- en: 'Besides creating an array from a sequence of elements, you can easily create
    an array filled with `0`’s:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从一系列元素创建数组之外，您还可以轻松创建一个填满`0`的数组：
- en: '[PRE143]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Or an array filled with `1`’s:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一个填满`1`的数组：
- en: '[PRE144]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Or even an empty array! The function `empty` creates an array whose initial
    content is random and depends on the state of the memory. The reason to use `empty`
    over `zeros` (or something similar) is speed - just make sure to fill every element
    afterwards!
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至是一个空数组！函数`empty`创建一个初始内容是随机的数组，取决于内存状态。使用`empty`而不是`zeros`（或类似的东西）的原因是速度快
    - 只需确保之后填充每个元素！
- en: '[PRE145]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'You can create an array with a range of elements:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个包含一系列元素的数组：
- en: '[PRE146]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: And even an array that contains a range of evenly spaced intervals. To do this,
    you will specify the **first number**, **last number**, and the **step size**.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至包含一系列间隔均匀的范围的数组。为此，您将指定**第一个数字**，**最后一个数字**和**步长**。
- en: '[PRE147]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'You can also use `np.linspace()` to create an array with values that are spaced
    linearly in a specified interval:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`np.linspace()`在指定间隔中创建线性间隔的值数组：
- en: '[PRE148]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '**Specifying your data type**'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '**指定数据类型**'
- en: While the default data type is floating point (`np.float64`), you can explicitly
    specify which data type you want using the `dtype` keyword.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管默认数据类型是浮点数（`np.float64`），但您可以使用`dtype`关键字明确指定您想要的数据类型。
- en: '[PRE149]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[Learn more about creating arrays here](quickstart.html#quickstart-array-creation)'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多有关创建数组的信息](quickstart.html#quickstart-array-creation)'
- en: Adding, removing, and sorting elements
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加、删除和排序元素
- en: '*This section covers* `np.sort()`, `np.concatenate()`'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖了*`np.sort()`，`np.concatenate()`'
- en: '* * *'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Sorting an element is simple with `np.sort()`. You can specify the axis, kind,
    and order when you call the function.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.sort()`对元素进行排序很简单。在调用该函数时，您可以指定轴、种类和顺序。
- en: 'If you start with this array:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从这个数组开始：
- en: '[PRE150]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'You can quickly sort the numbers in ascending order with:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以快速将数字按升序排序为：
- en: '[PRE151]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'In addition to sort, which returns a sorted copy of an array, you can use:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 除了返回一个排序后的数组副本的sort之外，您还可以使用：
- en: '[`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort"),
    which is an indirect sort along a specified axis,'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort")，它是沿指定轴的间接排序，'
- en: '[`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort"),
    which is an indirect stable sort on multiple keys,'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort")，这是多个键的间接稳定排序，'
- en: '[`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), which will find elements in a sorted array, and'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted")，将在排序数组中查找元素，并'
- en: '[`partition`](../reference/generated/numpy.partition.html#numpy.partition "numpy.partition"),
    which is a partial sort.'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`partition`](../reference/generated/numpy.partition.html#numpy.partition "numpy.partition")，这是一种部分排序。'
- en: 'To read more about sorting an array, see: [`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort").'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 要阅读有关对数组排序的更多信息，请参阅：[`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort").
- en: 'If you start with these arrays:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这些数组开始：
- en: '[PRE152]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: You can concatenate them with `np.concatenate()`.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`np.concatenate()`进行连接。
- en: '[PRE153]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Or, if you start with these arrays:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你从这些数组开始：
- en: '[PRE154]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'You can concatenate them with:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下内容进行连接：
- en: '[PRE155]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: In order to remove elements from an array, it’s simple to use indexing to select
    the elements that you want to keep.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数组中移除元素，可以简单地使用索引来选择要保留的元素。
- en: 'To read more about concatenate, see: [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate").'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 要阅读有关连接的更多信息，请参阅：[`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate").
- en: How do you know the shape and size of an array?
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何知道数组的形状和大小？
- en: '*This section covers* `ndarray.ndim`, `ndarray.size`, `ndarray.shape`'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `ndarray.ndim`，`ndarray.size`，`ndarray.shape`'
- en: '* * *'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`ndarray.ndim` will tell you the number of axes, or dimensions, of the array.'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.ndim`将告诉您数组的轴数或维度。'
- en: '`ndarray.size` will tell you the total number of elements of the array. This
    is the *product* of the elements of the array’s shape.'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.size`将告诉您数组的元素总数。这是数组形状元素的*乘积*。'
- en: '`ndarray.shape` will display a tuple of integers that indicate the number of
    elements stored along each dimension of the array. If, for example, you have a
    2-D array with 2 rows and 3 columns, the shape of your array is `(2, 3)`.'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.shape`将显示一个元组，其中的整数指示数组沿每个维度存储的元素数。例如，如果你有一个2行3列的二维数组，你的数组的形状是`(2,
    3)`。'
- en: 'For example, if you create this array:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你创建了这个数组：
- en: '[PRE156]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'To find the number of dimensions of the array, run:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到数组的维数，运行：
- en: '[PRE157]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'To find the total number of elements in the array, run:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到数组中的总元素数，请运行：
- en: '[PRE158]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'And to find the shape of your array, run:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 并找到数组的形状，运行：
- en: '[PRE159]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Can you reshape an array?
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能重塑一个数组吗？
- en: '*This section covers* `arr.reshape()`'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `arr.reshape()`'
- en: '* * *'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Yes!**'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '**是的！**'
- en: Using `arr.reshape()` will give a new shape to an array without changing the
    data. Just remember that when you use the reshape method, the array you want to
    produce needs to have the same number of elements as the original array. If you
    start with an array with 12 elements, you’ll need to make sure that your new array
    also has a total of 12 elements.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`arr.reshape()`将为数组提供新的形状，而不更改数据。只需记住，当您使用reshape方法时，您想要产生的数组的元素数需要与原始数组相同。如果您从一个具有12个元素的数组开始，您需要确保您的新数组也总共具有12个元素。
- en: 'If you start with this array:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从这个数组开始：
- en: '[PRE160]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'You can use `reshape()` to reshape your array. For example, you can reshape
    this array to an array with three rows and two columns:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`reshape()`来重塑您的数组。例如，您可以将此数组重塑为具有三行两列的数组：
- en: '[PRE161]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'With `np.reshape`, you can specify a few optional parameters:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.reshape`，您可以指定一些可选参数：
- en: '[PRE162]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '`a` is the array to be reshaped.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '`a`是要重塑的数组。'
- en: '`newshape` is the new shape you want. You can specify an integer or a tuple
    of integers. If you specify an integer, the result will be an array of that length.
    The shape should be compatible with the original shape.'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`newshape`是你想要的新形状。您可以指定一个整数或一个整数元组。如果您指定一个整数，结果将是一个具有该长度的数组。形状应与原始形状兼容。'
- en: '`order:` `C` means to read/write the elements using C-like index order, `F`
    means to read/write the elements using Fortran-like index order, `A` means to
    read/write the elements in Fortran-like index order if a is Fortran contiguous
    in memory, C-like order otherwise. (This is an optional parameter and doesn’t
    need to be specified.)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '`order：` `C`表示使用类似C的索引顺序读取/写入元素，`F`表示使用类似Fortran的索引顺序读取/写入元素，`A`表示如果a在内存中是Fortran连续的，使用类似Fortran的索引顺序读取/写入元素，否则使用类似C的顺序。(这是一个可选参数，无需指定。)'
- en: If you want to learn more about C and Fortran order, you can [read more about
    the internal organization of NumPy arrays here](../dev/internals.html#numpy-internals).
    Essentially, C and Fortran orders have to do with how indices correspond to the
    order the array is stored in memory. In Fortran, when moving through the elements
    of a two-dimensional array as it is stored in memory, the **first** index is the
    most rapidly varying index. As the first index moves to the next row as it changes,
    the matrix is stored one column at a time. This is why Fortran is thought of as
    a **Column-major language**. In C on the other hand, the **last** index changes
    the most rapidly. The matrix is stored by rows, making it a **Row-major language**.
    What you do for C or Fortran depends on whether it’s more important to preserve
    the indexing convention or not reorder the data.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解有关 C 和 Fortran 排序的更多信息，你可以[在这里读取有关 NumPy 数组内存中的内部组织的更多信息](../dev/internals.html#numpy-internals)。基本上，C
    和 Fortran 排序与索引与数组在内存中存储的顺序相对应有关。在 Fortran 中，当在内存中移动二维数组的元素时，**第一个**索引是最快变化的索引。随着第一个索引的变化移动到下一行，矩阵按列存储。这就是为什么
    Fortran 被认为是一种**列主语言**。另一方面，在 C 中，**最后**的索引变化最快。矩阵按行存储，使其成为一种**行主语言**。你在 C 或 Fortran
    中所做的取决于是更重要保留索引约定还是不重新排序数据。
- en: '[Learn more about shape manipulation here](quickstart.html#quickstart-shape-manipulation).'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解更多有关形状操作的信息](quickstart.html#quickstart-shape-manipulation)。'
- en: How to convert a 1D array into a 2D array (how to add a new axis to an array)
  id: totrans-593
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将一个 1 维数组转换为 2 维数组（如何向数组添加一个新轴）
- en: '*This section covers* `np.newaxis`, `np.expand_dims`'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `np.newaxis`，`np.expand_dims`'
- en: '* * *'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can use `np.newaxis` and `np.expand_dims` to increase the dimensions of
    your existing array.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 和 `np.expand_dims` 来增加现有数组的维度。
- en: Using `np.newaxis` will increase the dimensions of your array by one dimension
    when used once. This means that a **1D** array will become a **2D** array, a **2D**
    array will become a **3D** array, and so on.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用一次 `np.newaxis` 时，它会将数组的维度增加一个维度。这意味着一个**1D**数组将变成一个**2D**数组，一个**2D**数组将变成一个**3D**数组，依此类推。
- en: 'For example, if you start with this array:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE163]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'You can use `np.newaxis` to add a new axis:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 来增加一个新的轴：
- en: '[PRE164]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'You can explicitly convert a 1D array with either a row vector or a column
    vector using `np.newaxis`. For example, you can convert a 1D array to a row vector
    by inserting an axis along the first dimension:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.newaxis` 将 1 维数组显式地转换为行向量或列向量。例如，你可以通过在第一维度上插入一个轴将 1 维数组转换为行向量：
- en: '[PRE165]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Or, for a column vector, you can insert an axis along the second dimension:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于列向量，你可以在第二个维度上插入一个轴：
- en: '[PRE166]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: You can also expand an array by inserting a new axis at a specified position
    with `np.expand_dims`.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `np.expand_dims` 在指定位置插入一个新的轴，以扩展数组。
- en: 'For example, if you start with this array:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE167]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'You can use `np.expand_dims` to add an axis at index position 1 with:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `np.expand_dims` 在索引位置 1 处添加一个轴：
- en: '[PRE168]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'You can add an axis at index position 0 with:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在索引位置 0 处添加一个轴：
- en: '[PRE169]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Find more information about [newaxis here](../reference/arrays.indexing.html#arrays-indexing)
    and `expand_dims` at [`expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims").
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 在[这里了解更多有关 newaxis 的信息](../reference/arrays.indexing.html#arrays-indexing)，以及
    [`expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims")。
- en: Indexing and slicing
  id: totrans-614
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片
- en: You can index and slice NumPy arrays in the same ways you can slice Python lists.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像切片 Python 列表一样索引和切片 NumPy 数组。
- en: '[PRE170]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'You can visualize it this way:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 可以这样可视化它：
- en: '![../_images/np_indexing.png](../Images/cd29651900916a5a0f06923d997eca93.png)'
  id: totrans-618
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_indexing.png](../Images/cd29651900916a5a0f06923d997eca93.png)'
- en: You may want to take a section of your array or specific array elements to use
    in further analysis or additional operations. To do that, you’ll need to subset,
    slice, and/or index your arrays.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想从数组中选择一部分或特定的数组元素，用于进一步分析或进行其他操作。为了做到这一点，你需要子集、切片和/或索引你的数组。
- en: If you want to select values from your array that fulfill certain conditions,
    it’s straightforward with NumPy.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要选择满足特定条件的数组值，使用 NumPy 是非常简单的。
- en: 'For example, if you start with this array:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE171]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: You can easily print all of the values in the array that are less than 5.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松打印出数组中所有小于 5 的值。
- en: '[PRE172]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: You can also select, for example, numbers that are equal to or greater than
    5, and use that condition to index an array.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择大于或等于 5 的数字，并使用该条件来索引数组。
- en: '[PRE173]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'You can select elements that are divisible by 2:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择可被2整除的元素：
- en: '[PRE174]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Or you can select elements that satisfy two conditions using the `&` and `|`
    operators:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用`&`和`|`操作符选取满足两个条件的元素：
- en: '[PRE175]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: You can also make use of the logical operators **&** and **|** in order to return
    boolean values that specify whether or not the values in an array fulfill a certain
    condition. This can be useful with arrays that contain names or other categorical
    values.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用逻辑运算符**&**和**|**返回指定数组中的值是否满足某个条件的布尔值。这对包含名称或其他分类值的数组很有用。
- en: '[PRE176]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: You can also use `np.nonzero()` to select elements or indices from an array.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`np.nonzero()`从数组中选择元素或索引。
- en: 'Starting with this array:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个数组开始：
- en: '[PRE177]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'You can use `np.nonzero()` to print the indices of elements that are, for example,
    less than 5:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`np.nonzero()`打印出，例如，小于5的元素的索引：
- en: '[PRE178]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'In this example, a tuple of arrays was returned: one for each dimension. The
    first array represents the row indices where these values are found, and the second
    array represents the column indices where the values are found.'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，返回了一个数组的元组：每个维度一个。第一个数组表示找到这些值的行索引，第二个数组表示找到值的列索引。
- en: 'If you want to generate a list of coordinates where the elements exist, you
    can zip the arrays, iterate over the list of coordinates, and print them. For
    example:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想生成元素存在的坐标列表，可以对数组进行压缩，遍历坐标列表并打印它们。例如：
- en: '[PRE179]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'You can also use `np.nonzero()` to print the elements in an array that are
    less than 5 with:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`np.nonzero()`打印出数组中小于5的元素：
- en: '[PRE180]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'If the element you’re looking for doesn’t exist in the array, then the returned
    array of indices will be empty. For example:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要查找的元素在数组中不存在，那么返回的索引数组将是空的。例如：
- en: '[PRE181]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Learn more about [indexing and slicing here](quickstart.html#quickstart-indexing-slicing-and-iterating)
    and [here](basics.indexing.html#basics-indexing).
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在[这里了解有关索引和切片的更多信息](quickstart.html#quickstart-indexing-slicing-and-iterating)和[这里](basics.indexing.html#basics-indexing)。
- en: 'Read more about using the nonzero function at: [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero").'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处阅读关于使用零函数的更多信息：[`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero")。
- en: How to create an array from existing data
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何从现有数据创建数组
- en: '*This section covers* `slicing and indexing`, `np.vstack()`, `np.hstack()`,
    `np.hsplit()`, `.view()`, `copy()`'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `切片和索引`，`np.vstack()`，`np.hstack()`，`np.hsplit()`，`.view()`，`copy()`'
- en: '* * *'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can easily create a new array from a section of an existing array.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地从现有数组的部分创建新数组。
- en: 'Let’s say you have this array:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这样一个数组：
- en: '[PRE182]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: You can create a new array from a section of your array any time by specifying
    where you want to slice your array.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时使用切片指定要从数组中切片的位置创建数组的新数组。
- en: '[PRE183]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Here, you grabbed a section of your array from index position 3 through index
    position 8.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你从索引位置3到索引位置8获取了你数组的一个部分。
- en: 'You can also stack two existing arrays, both vertically and horizontally. Let’s
    say you have two arrays, `a1` and `a2`:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以垂直和水平地堆叠两个现有数组。假设你有两个数组，`a1`和`a2`：
- en: '[PRE184]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'You can stack them vertically with `vstack`:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`vstack`将它们垂直堆叠：
- en: '[PRE185]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Or stack them horizontally with `hstack`:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`hstack`水平堆叠它们：
- en: '[PRE186]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: You can split an array into several smaller arrays using `hsplit`. You can specify
    either the number of equally shaped arrays to return or the columns *after* which
    the division should occur.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`hsplit`将数组分割成几个较小的数组。你可以指定要返回的形状相等的数组的数量，或者应该在哪个列之后进行分割。
- en: 'Let’s say you have this array:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这样一个数组：
- en: '[PRE187]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'If you wanted to split this array into three equally shaped arrays, you would
    run:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将此数组分割成三个形状相等的数组，你需要执行：
- en: '[PRE188]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'If you wanted to split your array after the third and fourth column, you’d
    run:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在第三和第四列之后分割数组，您需要执行：
- en: '[PRE189]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[Learn more about stacking and splitting arrays here](quickstart.html#quickstart-stacking-arrays).'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里了解有关堆叠和分割数组的更多信息](quickstart.html#quickstart-stacking-arrays)。'
- en: You can use the `view` method to create a new array object that looks at the
    same data as the original array (a *shallow copy*).
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`view`方法创建一个查看原始数组相同数据的新数组对象（*浅复制*）。
- en: Views are an important NumPy concept! NumPy functions, as well as operations
    like indexing and slicing, will return views whenever possible. This saves memory
    and is faster (no copy of the data has to be made). However it’s important to
    be aware of this - modifying data in a view also modifies the original array!
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是一个重要的NumPy概念！NumPy函数以及索引和切片等操作将尽可能返回视图。这样可以节省内存并提高速度（不需要进行数据复制）。但是要注意这一点——修改视图中的数据也会修改原始数组！
- en: 'Let’s say you create this array:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您创建了这个数组：
- en: '[PRE190]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Now we create an array `b1` by slicing `a` and modify the first element of `b1`.
    This will modify the corresponding element in `a` as well!
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过对`a`进行切片并修改`b1`的第一个元素来创建数组`b1`。这将同时修改`a`中对应的元素！
- en: '[PRE191]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Using the `copy` method will make a complete copy of the array and its data
    (a *deep copy*). To use this on your array, you could run:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`copy`方法将创建数组及其数据的完整副本（*深度复制*）。要在您的数组上使用此方法，您可以运行：
- en: '[PRE192]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[Learn more about copies and views here](quickstart.html#quickstart-copies-and-views).'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[在此处了解更多关于副本和视图的信息](quickstart.html#quickstart-copies-and-views)。'
- en: Basic array operations
  id: totrans-679
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本数组操作
- en: '*This section covers addition, subtraction, multiplication, division, and more*'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖了加法、减法、乘法、除法等内容*'
- en: '* * *'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Once you’ve created your arrays, you can start to work with them. Let’s say,
    for example, that you’ve created two arrays, one called “data” and one called
    “ones”
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数组后，您可以开始使用它们。例如，假设您已创建了两个数组，一个称为“data”，另一个称为“ones”。
- en: '![../_images/np_array_dataones.png](../Images/9b59cfcd5bef02a4f4038fabe093cf23.png)'
  id: totrans-683
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_array_dataones.png](../Images/9b59cfcd5bef02a4f4038fabe093cf23.png)'
- en: You can add the arrays together with the plus sign.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用加号将数组相加。
- en: '[PRE193]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '![../_images/np_data_plus_ones.png](../Images/66d39b9fac255980e503123485c0444f.png)'
  id: totrans-686
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_data_plus_ones.png](../Images/66d39b9fac255980e503123485c0444f.png)'
- en: You can, of course, do more than just addition!
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您不仅可以进行加法运算！
- en: '[PRE194]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '![../_images/np_sub_mult_divide.png](../Images/c1f77f532a2c7d29d2aee60956b2d967.png)'
  id: totrans-689
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_sub_mult_divide.png](../Images/c1f77f532a2c7d29d2aee60956b2d967.png)'
- en: Basic operations are simple with NumPy. If you want to find the sum of the elements
    in an array, you’d use `sum()`. This works for 1D arrays, 2D arrays, and arrays
    in higher dimensions.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的基本操作非常简单。如果要找到数组中元素的总和，您可以使用`sum()`。这适用于1D数组、2D数组和更高维度的数组。
- en: '[PRE195]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: To add the rows or the columns in a 2D array, you would specify the axis.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 要在二维数组中添加行或列，您需要指定轴。
- en: 'If you start with this array:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从这个数组开始：
- en: '[PRE196]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'You can sum over the axis of rows with:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对行轴求和：
- en: '[PRE197]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'You can sum over the axis of columns with:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对列轴求和：
- en: '[PRE198]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[Learn more about basic operations here](quickstart.html#quickstart-basic-operations).'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '[在此处了解更多关于基本操作的信息](quickstart.html#quickstart-basic-operations)。'
- en: Broadcasting
  id: totrans-700
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播
- en: 'There are times when you might want to carry out an operation between an array
    and a single number (also called *an operation between a vector and a scalar*)
    or between arrays of two different sizes. For example, your array (we’ll call
    it “data”) might contain information about distance in miles but you want to convert
    the information to kilometers. You can perform this operation with:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望在数组和单个数字之间执行操作（也称为*向量和标量之间的操作*），或者在两个不同大小的数组之间执行操作。例如，您的数组（我们将其称为“data”）可能包含有关以英里为单位的距离的信息，但您希望将信息转换为公里。您可以执行此操作：
- en: '[PRE199]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '![../_images/np_multiply_broadcasting.png](../Images/11c558ec6f5400f721ced3df1869a30c.png)'
  id: totrans-703
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_multiply_broadcasting.png](../Images/11c558ec6f5400f721ced3df1869a30c.png)'
- en: NumPy understands that the multiplication should happen with each cell. That
    concept is called **broadcasting**. Broadcasting is a mechanism that allows NumPy
    to perform operations on arrays of different shapes. The dimensions of your array
    must be compatible, for example, when the dimensions of both arrays are equal
    or when one of them is 1\. If the dimensions are not compatible, you will get
    a `ValueError`.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy理解乘法应该在每个单元格中发生。这个概念称为**广播**。广播是一种机制，允许NumPy在不同形状的数组上执行操作。您的数组的维度必须兼容，例如，当两个数组的维度相等或其中一个为1时。如果维度不兼容，您将收到一个`ValueError`。
- en: '[Learn more about broadcasting here](basics.broadcasting.html#basics-broadcasting).'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '[在此处了解更多关于广播的信息](basics.broadcasting.html#basics-broadcasting)。'
- en: More useful array operations
  id: totrans-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多有用的数组操作
- en: '*This section covers maximum, minimum, sum, mean, product, standard deviation,
    and more*'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖了最大值、最小值、求和、平均值、乘积、标准差等内容*'
- en: '* * *'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: NumPy also performs aggregation functions. In addition to `min`, `max`, and
    `sum`, you can easily run `mean` to get the average, `prod` to get the result
    of multiplying the elements together, `std` to get the standard deviation, and
    more.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy还执行聚合函数。 除了`min`，`max`和`sum`之外，你还可以轻松运行`mean`来获得平均值，`prod`来获得将元素相乘的结果，`std`来获得标准偏差等。
- en: '[PRE200]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '![../_images/np_aggregation.png](../Images/2c41632a337fac537f465483e8f74817.png)'
  id: totrans-711
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_aggregation.png](../Images/2c41632a337fac537f465483e8f74817.png)'
- en: Let’s start with this array, called “a”
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这个称为“a”的数组开始
- en: '[PRE201]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'It’s very common to want to aggregate along a row or column. By default, every
    NumPy aggregation function will return the aggregate of the entire array. To find
    the sum or the minimum of the elements in your array, run:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的是想要沿着行或列进行聚合。 默认情况下，每个NumPy聚合函数都将返回整个数组的聚合值。 要找到数组中元素的和或最小值，请运行：
- en: '[PRE202]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Or:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE203]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: You can specify on which axis you want the aggregation function to be computed.
    For example, you can find the minimum value within each column by specifying `axis=0`.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定要计算聚合函数的轴。 例如，你可以通过指定`axis=0`来找到每列的最小值。
- en: '[PRE204]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: The four values listed above correspond to the number of columns in your array.
    With a four-column array, you will get four values as your result.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 上述四个值对应于数组中的列数。 对于一个四列数组，你将获得四个值作为结果。
- en: Read more about [array methods here](../reference/arrays.ndarray.html#array-ndarray-methods).
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于[数组方法的信息](../reference/arrays.ndarray.html#array-ndarray-methods)。
- en: Creating matrices
  id: totrans-722
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建矩阵
- en: You can pass Python lists of lists to create a 2-D array (or “matrix”) to represent
    them in NumPy.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传递Python的列表列表来创建一个代表它们的2-D数组（或“矩阵”）在NumPy中表示。
- en: '[PRE205]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '![../_images/np_create_matrix.png](../Images/f0baeb2fd5bf39ba6f39a0bcd76f27cd.png)'
  id: totrans-725
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_create_matrix.png](../Images/f0baeb2fd5bf39ba6f39a0bcd76f27cd.png)'
- en: 'Indexing and slicing operations are useful when you’re manipulating matrices:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 当你操纵矩阵时，索引和切片操作非常有用：
- en: '[PRE206]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '![../_images/np_matrix_indexing.png](../Images/18d8f5ed53ce3c532bdf9819f566656a.png)'
  id: totrans-728
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_indexing.png](../Images/18d8f5ed53ce3c532bdf9819f566656a.png)'
- en: 'You can aggregate matrices the same way you aggregated vectors:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像对向量进行聚合一样对矩阵进行聚合：
- en: '[PRE207]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '![../_images/np_matrix_aggregation.png](../Images/54fae10b03421e1cccc2bffe511a58b6.png)'
  id: totrans-731
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_aggregation.png](../Images/54fae10b03421e1cccc2bffe511a58b6.png)'
- en: 'You can aggregate all the values in a matrix and you can aggregate them across
    columns or rows using the `axis` parameter. To illustrate this point, let’s look
    at a slightly modified dataset:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以聚合矩阵中的所有值，并可以使用`axis`参数跨列或行对它们进行聚合。 为了说明这一点，让我们看一个稍作修改的数据集：
- en: '[PRE208]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '![../_images/np_matrix_aggregation_row.png](../Images/0c528d4cd2dab05f6959a98c3ee1be32.png)'
  id: totrans-734
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_aggregation_row.png](../Images/0c528d4cd2dab05f6959a98c3ee1be32.png)'
- en: Once you’ve created your matrices, you can add and multiply them using arithmetic
    operators if you have two matrices that are the same size.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了矩阵后，如果有两个大小相同的矩阵，你可以使用算术运算符对它们进行加法和乘法。
- en: '[PRE209]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '![../_images/np_matrix_arithmetic.png](../Images/3b22b1779686234e77a7e0898013d8e8.png)'
  id: totrans-737
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_arithmetic.png](../Images/3b22b1779686234e77a7e0898013d8e8.png)'
- en: You can do these arithmetic operations on matrices of different sizes, but only
    if one matrix has only one column or one row. In this case, NumPy will use its
    broadcast rules for the operation.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对不同大小的矩阵进行这些算术运算，但前提是其中一个矩阵只有一列或一行。 在这种情况下，NumPy将使用其广播规则进行操作。
- en: '[PRE210]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '![../_images/np_matrix_broadcasting.png](../Images/0fa020c3b7055d29a2c34c8ca85295db.png)'
  id: totrans-740
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_matrix_broadcasting.png](../Images/0fa020c3b7055d29a2c34c8ca85295db.png)'
- en: 'Be aware that when NumPy prints N-dimensional arrays, the last axis is looped
    over the fastest while the first axis is the slowest. For instance:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当NumPy打印N维数组时，最后一个轴速度最快，而第一个轴速度最慢。 例如：
- en: '[PRE211]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'There are often instances where we want NumPy to initialize the values of an
    array. NumPy offers functions like `ones()` and `zeros()`, and the `random.Generator`
    class for random number generation for that. All you need to do is pass in the
    number of elements you want it to generate:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 常常有这样的情况，我们希望NumPy初始化数组的值。 NumPy提供了`ones()`和`zeros()`之类的函数，以及用于随机数生成的`random.Generator`类来实现。
    你需要做的就是传入你想要生成的元素数量：
- en: '[PRE212]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '![../_images/np_ones_zeros_random.png](../Images/86d5e6196bdd4ee9106eaf83b61fe57a.png)'
  id: totrans-745
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_ones_zeros_random.png](../Images/86d5e6196bdd4ee9106eaf83b61fe57a.png)'
- en: 'You can also use `ones()`, `zeros()`, and `random()` to create a 2D array if
    you give them a tuple describing the dimensions of the matrix:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`ones()`，`zeros()`和`random()`来创建2D数组，如果给它们一个描述矩阵维度的元组：
- en: '[PRE213]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '![../_images/np_ones_zeros_matrix.png](../Images/eec8e0a2353993e5f66abe64767dbd8a.png)'
  id: totrans-748
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_ones_zeros_matrix.png](../Images/eec8e0a2353993e5f66abe64767dbd8a.png)'
- en: Read more about creating arrays, filled with `0`’s, `1`’s, other values or uninitialized,
    at [array creation routines](../reference/routines.array-creation.html#routines-array-creation).
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于创建数组，填充`0`、`1`、其他值或未初始化的数组的内容，在[array creation routines](../reference/routines.array-creation.html#routines-array-creation)中。
- en: Generating random numbers
  id: totrans-750
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成随机数
- en: The use of random number generation is an important part of the configuration
    and evaluation of many numerical and machine learning algorithms. Whether you
    need to randomly initialize weights in an artificial neural network, split data
    into random sets, or randomly shuffle your dataset, being able to generate random
    numbers (actually, repeatable pseudo-random numbers) is essential.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数生成的使用是许多数值和机器学习算法的配置和评估的重要组成部分。无论是需要随机初始化人工神经网络中的权重，将数据分为随机集，还是随机洗牌数据集，能够生成随机数（实际上是可重复的伪随机数）是必不可少的。
- en: With `Generator.integers`, you can generate random integers from low (remember
    that this is inclusive with NumPy) to high (exclusive). You can set `endpoint=True`
    to make the high number inclusive.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Generator.integers`，你可以生成从低值（请记住这是NumPy中包含的值）到高值（不包含在内）的随机整数。你可以设置`endpoint=True`使高值包含在内。
- en: 'You can generate a 2 x 4 array of random integers between 0 and 4 with:'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以生成一个2 x 4的随机整数数组，范围在0到4之间：
- en: '[PRE214]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[Read more about random number generation here](../reference/random/index.html#numpyrandom).'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里阅读更多关于生成随机数的内容](../reference/random/index.html#numpyrandom)。'
- en: How to get unique items and counts
  id: totrans-756
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取唯一项和计数
- en: '*This section covers* `np.unique()`'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `np.unique()`'
- en: '* * *'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can find the unique elements in an array easily with `np.unique`.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.unique`轻松找到数组中的唯一元素。
- en: 'For example, if you start with this array:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你从这个数组开始：
- en: '[PRE215]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'you can use `np.unique` to print the unique values in your array:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.unique`来打印出数组中的唯一值：
- en: '[PRE216]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: To get the indices of unique values in a NumPy array (an array of first index
    positions of unique values in the array), just pass the `return_index` argument
    in `np.unique()` as well as your array.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取NumPy数组中唯一值的索引（数组中唯一值的第一个索引位置的数组），只需在`np.unique()`中传递`return_index`参数和你的数组。
- en: '[PRE217]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: You can pass the `return_counts` argument in `np.unique()` along with your array
    to get the frequency count of unique values in a NumPy array.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`np.unique()`中传递`return_counts`参数和数组一起，以获取NumPy数组中唯一值的频次计数。
- en: '[PRE218]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'This also works with 2D arrays! If you start with this array:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于二维数组！如果你从这个数组开始：
- en: '[PRE219]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'You can find unique values with:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用以下方法找到唯一的值：
- en: '[PRE220]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: If the axis argument isn’t passed, your 2D array will be flattened.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递`axis`参数，你的二维数组将被展开。
- en: If you want to get the unique rows or columns, make sure to pass the `axis`
    argument. To find the unique rows, specify `axis=0` and for columns, specify `axis=1`.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想获取唯一的行或列，请确保传递`axis`参数。要找到唯一的行，请指定`axis=0`，要找到唯一的列，请指定`axis=1`。
- en: '[PRE221]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'To get the unique rows, index position, and occurrence count, you can use:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取唯一的行、索引位置和出现次数，你可以使用：
- en: '[PRE222]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: To learn more about finding the unique elements in an array, see [`unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique").
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关在数组中找到唯一元素的更多信息，请参阅[`unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique")。
- en: Transposing and reshaping a matrix
  id: totrans-778
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转置和重塑矩阵
- en: '*This section covers* `arr.reshape()`, `arr.transpose()`, `arr.T`'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节介绍* `arr.reshape()`，`arr.transpose()`，`arr.T`'
- en: '* * *'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s common to need to transpose your matrices. NumPy arrays have the property
    `T` that allows you to transpose a matrix.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 对于转置矩阵，经常需要转置矩阵。NumPy数组具有允许你转置矩阵的属性`T`。
- en: '![../_images/np_transposing_reshaping.png](../Images/90ef6ecf8374753450db871d206d21f1.png)'
  id: totrans-782
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_transposing_reshaping.png](../Images/90ef6ecf8374753450db871d206d21f1.png)'
- en: You may also need to switch the dimensions of a matrix. This can happen when,
    for example, you have a model that expects a certain input shape that is different
    from your dataset. This is where the `reshape` method can be useful. You simply
    need to pass in the new dimensions that you want for the matrix.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能也需要调换矩阵的维度。例如，当你的模型所期望的输入形状与你的数据集不同时，就需要这样做。这时`reshape`方法就很有用。你只需要传入你想要给该矩阵的新维度即可。
- en: '[PRE223]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '![../_images/np_reshape.png](../Images/2f1382886687a1a2177b527ec1527b58.png)'
  id: totrans-785
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_reshape.png](../Images/2f1382886687a1a2177b527ec1527b58.png)'
- en: You can also use `.transpose()` to reverse or change the axes of an array according
    to the values you specify.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`.transpose()`根据你指定的值来反转或更改数组的轴。
- en: 'If you start with this array:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE224]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: You can transpose your array with `arr.transpose()`.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用`arr.transpose()`转置你的数组。
- en: '[PRE225]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'You can also use `arr.T`:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`arr.T`：
- en: '[PRE226]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: To learn more about transposing and reshaping arrays, see [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose") and [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape").
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于转置和重新塑形数组的信息，请参阅[`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose") 和 [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape")。
- en: How to reverse an array
  id: totrans-794
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何反转一个数组
- en: '*This section covers* `np.flip()`'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `np.flip()`'
- en: '* * *'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: NumPy’s `np.flip()` function allows you to flip, or reverse, the contents of
    an array along an axis. When using `np.flip()`, specify the array you would like
    to reverse and the axis. If you don’t specify the axis, NumPy will reverse the
    contents along all of the axes of your input array.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的`np.flip()`函数允许您沿着轴翻转或反转数组的内容。当使用`np.flip()`时，请指定您想要翻转的数组和轴。如果您不指定轴，NumPy将沿着输入数组的所有轴反转内容。
- en: '**Reversing a 1D array**'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: '**反转一维数组**'
- en: 'If you begin with a 1D array like this one:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这样一个一维数组开始：
- en: '[PRE227]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'You can reverse it with:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用以下方式反转它：
- en: '[PRE228]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'If you want to print your reversed array, you can run:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想打印你反转的数组，你可以运行：
- en: '[PRE229]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '**Reversing a 2D array**'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '**反转二维数组**'
- en: A 2D array works much the same way.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 一个二维数组的工作方式基本相同。
- en: 'If you start with this array:'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE230]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'You can reverse the content in all of the rows and all of the columns with:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用以下方式反转所有行和所有列的内容：
- en: '[PRE231]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'You can easily reverse only the *rows* with:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以只轻松地反转*行*：
- en: '[PRE232]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Or reverse only the *columns* with:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 或者只反转*列*：
- en: '[PRE233]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'You can also reverse the contents of only one column or row. For example, you
    can reverse the contents of the row at index position 1 (the second row):'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以只反转一个列或行的内容。例如，你可以反转索引位置为1（第二行）的行的内容：
- en: '[PRE234]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'You can also reverse the column at index position 1 (the second column):'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以反转索引位置为1（第二列）的列：
- en: '[PRE235]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Read more about reversing arrays at [`flip`](../reference/generated/numpy.flip.html#numpy.flip
    "numpy.flip").
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读有关反转数组的更多信息在[`flip`](../reference/generated/numpy.flip.html#numpy.flip "numpy.flip")。
- en: Reshaping and flattening multidimensional arrays
  id: totrans-820
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新塑造和展平多维数组
- en: '*This section covers* `.flatten()`, `ravel()`'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `.flatten()`，`ravel()`'
- en: '* * *'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'There are two popular ways to flatten an array: `.flatten()` and `.ravel()`.
    The primary difference between the two is that the new array created using `ravel()`
    is actually a reference to the parent array (i.e., a “view”). This means that
    any changes to the new array will affect the parent array as well. Since `ravel`
    does not create a copy, it’s memory efficient.'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种常用的方法来展平一个数组：`.flatten()` 和 `.ravel()`。两者之间的主要区别在于使用`ravel()`创建的新数组实际上是对父数组的引用（即“视图”）。这意味着对新数组的任何更改都会影响父数组。由于`ravel`不创建副本，因此它的内存效率高。
- en: 'If you start with this array:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个数组开始：
- en: '[PRE236]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: You can use `flatten` to flatten your array into a 1D array.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`flatten`将你的数组展平成一个一维数组。
- en: '[PRE237]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: When you use `flatten`, changes to your new array won’t change the parent array.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`flatten`时，对新数组的更改不会影响父数组。
- en: 'For example:'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE238]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: But when you use `ravel`, the changes you make to the new array will affect
    the parent array.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当你使用`ravel`时，你对新数组所做的更改将影响父数组。
- en: 'For example:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE239]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Read more about `flatten` at [`ndarray.flatten`](../reference/generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten") and `ravel` at [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel").
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`ndarray.flatten`](../reference/generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")中了解更多关于`flatten`的信息，在[`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel")中了解更多关于`ravel`的信息。
- en: How to access the docstring for more information
  id: totrans-835
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问更多信息的文档字符串
- en: '*This section covers* `help()`, `?`, `??`'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '*本节涵盖* `help()`，`?`，`??`'
- en: '* * *'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When it comes to the data science ecosystem, Python and NumPy are built with
    the user in mind. One of the best examples of this is the built-in access to documentation.
    Every object contains the reference to a string, which is known as the **docstring**.
    In most cases, this docstring contains a quick and concise summary of the object
    and how to use it. Python has a built-in `help()` function that can help you access
    this information. This means that nearly any time you need more information, you
    can use `help()` to quickly find the information that you need.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到数据科学生态系统时，Python 和 NumPy 是为用户而构建的。这中的一个最好的例子就是内置的文档访问。每个对象都包含对字符串的引用，这被称为**文档字符串**。在大多数情况下，这个文档字符串包含了关于对象以及如何使用它的快速而简洁的摘要。Python
    有一个内置的 `help()` 函数，可以帮助您访问这些信息。这意味着几乎任何时候，您需要更多的信息，都可以使用 `help()` 快速找到您需要的信息。
- en: 'For example:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE240]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Because access to additional information is so useful, IPython uses the `?`
    character as a shorthand for accessing this documentation along with other relevant
    information. IPython is a command shell for interactive computing in multiple
    languages. [You can find more information about IPython here](https://ipython.org/).
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 因为访问附加信息非常有用，IPython 使用 `?` 字符作为访问此文档以及其他相关信息的速记。IPython 是一个多语言交互计算的命令行壳。[您可以在此处找到有关
    IPython 的更多信息](https://ipython.org/)。
- en: 'For example:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE241]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: You can even use this notation for object methods and objects themselves.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以使用这种表示法来表示对象方法和对象本身。
- en: 'Let’s say you create this array:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你创建了这个数组：
- en: '[PRE242]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Then you can obtain a lot of useful information (first details about `a` itself,
    followed by the docstring of `ndarray` of which `a` is an instance):'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以获得许多有用的信息（首先关于 `a` 本身的细节，然后是 `a` 是其实例的 `ndarray` 的文档字符串）：
- en: '[PRE243]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: This also works for functions and other objects that **you** create. Just remember
    to include a docstring with your function using a string literal (`""" """` or
    `''' '''` around your documentation).
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于您创建的函数和其他对象也是有效的。只需记住使用字符串文字 (`""" """` 或 `''' '''` 将您的函数文档包含在您的函数中)。
- en: 'For example, if you create this function:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您创建了这个函数：
- en: '[PRE244]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'You can obtain information about the function:'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取有关该函数的信息：
- en: '[PRE245]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: You can reach another level of information by reading the source code of the
    object you’re interested in. Using a double question mark (`??`) allows you to
    access the source code.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读您感兴趣的对象的源代码，您可以获得另一个级别的信息。使用双问号 (`??`) 允许您访问源代码。
- en: 'For example:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE246]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'If the object in question is compiled in a language other than Python, using
    `??` will return the same information as `?`. You’ll find this with a lot of built-in
    objects and types, for example:'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所讨论的对象是用 Python 以外的语言编译的，使用 `??` 将返回与 `?` 相同的信息。您会发现在许多内置对象和类型中都是如此，例如：
- en: '[PRE247]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'and :'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE248]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: have the same output because they were compiled in a programming language other
    than Python.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 有相同的输出，因为它们是用 Python 以外的编程语言编译的。
- en: Working with mathematical formulas
  id: totrans-862
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数学公式
- en: The ease of implementing mathematical formulas that work on arrays is one of
    the things that make NumPy so widely used in the scientific Python community.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 实现可以在数组上工作的数学公式的简便性是使 NumPy 在科学 Python 社区中被广泛使用的因素之一。
- en: 'For example, this is the mean square error formula (a central formula used
    in supervised machine learning models that deal with regression):'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是均方误差公式（在处理回归的监督式机器学习模型中使用的一个核心公式）：
- en: '![../_images/np_MSE_formula.png](../Images/b9475c62996a78fe826723abd6d7dbe8.png)'
  id: totrans-865
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_MSE_formula.png](../Images/b9475c62996a78fe826723abd6d7dbe8.png)'
- en: 'Implementing this formula is simple and straightforward in NumPy:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中实现这个公式简单而直接：
- en: '![../_images/np_MSE_implementation.png](../Images/01cd11db569040a346561a5cfc3bf23a.png)'
  id: totrans-867
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_MSE_implementation.png](../Images/01cd11db569040a346561a5cfc3bf23a.png)'
- en: What makes this work so well is that `predictions` and `labels` can contain
    one or a thousand values. They only need to be the same size.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是 `predictions` 和 `labels` 可以包含一个或一千个值。它们只需要是相同的大小。
- en: 'You can visualize it this way:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以这样可视化它：
- en: '![../_images/np_mse_viz1.png](../Images/a8dbf015be4eaea56890409cc1ac99ce.png)'
  id: totrans-870
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_mse_viz1.png](../Images/a8dbf015be4eaea56890409cc1ac99ce.png)'
- en: In this example, both the predictions and labels vectors contain three values,
    meaning `n` has a value of three. After we carry out subtractions the values in
    the vector are squared. Then NumPy sums the values, and your result is the error
    value for that prediction and a score for the quality of the model.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，预测和标签向量都包含三个值，这意味着`n`的值为三。我们进行减法后，向量中的值被平方。然后NumPy对这些值求和，你的结果就是该预测的误差值和模型质量的得分。
- en: '![../_images/np_mse_viz2.png](../Images/a6678fbe867a803aa7d00ee7a4463e8b.png)
    ![../_images/np_MSE_explanation2.png](../Images/f167374d2ba2c45f5a4f4410c9076603.png)'
  id: totrans-872
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_mse_viz2.png](../Images/a6678fbe867a803aa7d00ee7a4463e8b.png)
    ![../_images/np_MSE_explanation2.png](../Images/f167374d2ba2c45f5a4f4410c9076603.png)'
- en: How to save and load NumPy objects
  id: totrans-873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何保存和加载 NumPy 对象
- en: '*This section covers* `np.save`, `np.savez`, `np.savetxt`, `np.load`, `np.loadtxt`'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一部分涵盖了* `np.save`，`np.savez`，`np.savetxt`，`np.load`，`np.loadtxt`'
- en: '* * *'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You will, at some point, want to save your arrays to disk and load them back
    without having to re-run the code. Fortunately, there are several ways to save
    and load objects with NumPy. The ndarray objects can be saved to and loaded from
    the disk files with `loadtxt` and `savetxt` functions that handle normal text
    files, `load` and `save` functions that handle NumPy binary files with a **.npy**
    file extension, and a `savez` function that handles NumPy files with a **.npz**
    file extension.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些时候，你会想要将你的数组保存到磁盘并在不重新运行代码的情况下加载它们。幸运的是，有几种方法可以使用NumPy保存和加载对象。ndarray对象可以通过处理普通文本文件的`loadtxt`和`savetxt`函数、处理带有
    **.npy** 文件扩展名的NumPy二进制文件的`load` 和 `save` 函数以及处理带有**.npz**文件扩展名的NumPy文件的`savez`函数来保存到磁盘文件中并从磁盘文件中加载。
- en: The **.npy** and **.npz** files store data, shape, dtype, and other information
    required to reconstruct the ndarray in a way that allows the array to be correctly
    retrieved, even when the file is on another machine with different architecture.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '**.npy**和**.npz**文件存储了重建ndarray所需的数据、形状、dtype和其他信息的方式，使得即使文件在不同架构的另一台机器上，数组也可以被正确检索。'
- en: If you want to store a single ndarray object, store it as a .npy file using
    `np.save`. If you want to store more than one ndarray object in a single file,
    save it as a .npz file using `np.savez`. You can also save several arrays into
    a single file in compressed npz format with [`savez_compressed`](../reference/generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed").
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要存储一个单一的ndarray对象，可以使用`np.save`将其保存为.npy文件。如果你想要在单个文件中存储多个ndarray对象，可以使用`np.savez`将其保存为.npz文件。你还可以使用[`savez_compressed`](../reference/generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")将多个数组以压缩的npz格式保存到单个文件中。
- en: 'It’s easy to save and load and array with `np.save()`. Just make sure to specify
    the array you want to save and a file name. For example, if you create this array:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.save()`可以轻松保存和加载数组。只需确保指定你想要保存的数组和文件名即可。例如，如果你创建了这个数组：
- en: '[PRE249]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'You can save it as “filename.npy” with:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令将其保存为“filename.npy”：
- en: '[PRE250]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: You can use `np.load()` to reconstruct your array.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.load()`重构你的数组。
- en: '[PRE251]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'If you want to check your array, you can run:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检查你的数组，可以运行：
- en: '[PRE252]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: You can save a NumPy array as a plain text file like a **.csv** or **.txt**
    file with `np.savetxt`.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.savetxt`将 NumPy 数组保存为普通文本文件，比如**.csv**或**.txt**文件。
- en: 'For example, if you create this array:'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你创建了这个数组：
- en: '[PRE253]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'You can easily save it as a .csv file with the name “new_file.csv” like this:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松将其保存为名为“new_file.csv”的.csv文件：
- en: '[PRE254]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'You can quickly and easily load your saved text file using `loadtxt()`:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`loadtxt()`快速且轻松地加载你保存的文本文件：
- en: '[PRE255]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: The `savetxt()` and `loadtxt()` functions accept additional optional parameters
    such as header, footer, and delimiter. While text files can be easier for sharing,
    .npy and .npz files are smaller and faster to read. If you need more sophisticated
    handling of your text file (for example, if you need to work with lines that contain
    missing values), you will want to use the [`genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") function.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '`savetxt()`和`loadtxt()`函数接受额外的可选参数，如头部、尾部和分隔符。虽然文本文件更容易共享，但.npy和.npz文件更小且读取速度更快。如果你需要更复杂的文本文件处理（例如，如果需要处理包含缺失值的行），你会想要使用[`genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")函数。'
- en: With [`savetxt`](../reference/generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt"),
    you can specify headers, footers, comments, and more.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`savetxt`](../reference/generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")，你可以指定头部、尾部、注释等额外的可选参数。
- en: Learn more about [input and output routines here](../reference/routines.io.html#routines-io).
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里[了解更多关于输入和输出例程](../reference/routines.io.html#routines-io)。
- en: Importing and exporting a CSV
  id: totrans-897
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入和导出CSV
- en: It’s simple to read in a CSV that contains existing information. The best and
    easiest way to do this is to use [Pandas](https://pandas.pydata.org).
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易读取包含现有信息的CSV文件。这样做的最佳、最简单的方式是使用[Pandas](https://pandas.pydata.org)。
- en: '[PRE256]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '![../_images/np_pandas.png](../Images/64f7d414cb396c6af87ad816cef866d4.png)'
  id: totrans-900
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_pandas.png](../Images/64f7d414cb396c6af87ad816cef866d4.png)'
- en: It’s simple to use Pandas in order to export your array as well. If you are
    new to NumPy, you may want to create a Pandas dataframe from the values in your
    array and then write the data frame to a CSV file with Pandas.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Pandas导出数组同样简单。如果您是NumPy的新手，您可能希望从数组的值中创建一个Pandas数据帧，然后用Pandas将数据帧写入CSV文件。
- en: If you created this array “a”
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建了这个数组“a”
- en: '[PRE257]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: You could create a Pandas dataframe
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个Pandas数据帧
- en: '[PRE258]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'You can easily save your dataframe with:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松保存您的数据帧：
- en: '[PRE259]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'And read your CSV with:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用以下命令读取您的CSV文件：
- en: '[PRE260]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '![../_images/np_readcsv.png](../Images/54f26b8b35c3ff479bfd7fda3a4bd02a.png)'
  id: totrans-910
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/np_readcsv.png](../Images/54f26b8b35c3ff479bfd7fda3a4bd02a.png)'
- en: You can also save your array with the NumPy `savetxt` method.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用NumPy的`savetxt`方法保存数组。
- en: '[PRE261]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'If you’re using the command line, you can read your saved CSV any time with
    a command such as:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用命令行，随时可以通过像这样的命令读取已保存的CSV文件：
- en: '[PRE262]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Or you can open the file any time with a text editor!
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您随时可以使用文本编辑器打开文件！
- en: If you’re interested in learning more about Pandas, take a look at the [official
    Pandas documentation](https://pandas.pydata.org/index.html). Learn how to install
    Pandas with the [official Pandas installation information](https://pandas.pydata.org/pandas-docs/stable/install.html).
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解更多关于Pandas的信息，请查看[官方Pandas文档](https://pandas.pydata.org/index.html)。通过[官方Pandas安装信息](https://pandas.pydata.org/pandas-docs/stable/install.html)了解如何安装Pandas。
- en: Plotting arrays with Matplotlib
  id: totrans-917
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用Matplotlib绘制数组
- en: If you need to generate a plot for your values, it’s very simple with [Matplotlib](https://matplotlib.org/).
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为您的值生成一张图表，使用[Matplotlib](https://matplotlib.org)非常简单。
- en: 'For example, you may have an array like this one:'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能有这样一个数组：
- en: '[PRE263]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'If you already have Matplotlib installed, you can import it with:'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Matplotlib，可以用以下方法导入：
- en: '[PRE264]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'All you need to do to plot your values is run:'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制您的值，您只需运行：
- en: '[PRE265]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '![../_images/matplotlib1.png](../Images/fd0bab5f04bbeea3c1f395dd60acebf0.png)'
  id: totrans-925
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib1.png](../Images/fd0bab5f04bbeea3c1f395dd60acebf0.png)'
- en: 'For example, you can plot a 1D array like this:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以这样绘制一个一维数组：
- en: '[PRE266]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '![../_images/matplotlib2.png](../Images/e5b8c25f89b1a0fc9a74365cf85f25de.png)'
  id: totrans-928
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib2.png](../Images/e5b8c25f89b1a0fc9a74365cf85f25de.png)'
- en: With Matplotlib, you have access to an enormous number of visualization options.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Matplotlib，您可以获得大量的可视化选项。
- en: '[PRE267]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '![../_images/matplotlib3.png](../Images/2eb12f2635bf2c5c1844f13053f5bf52.png)'
  id: totrans-931
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/matplotlib3.png](../Images/2eb12f2635bf2c5c1844f13053f5bf52.png)'
- en: To read more about Matplotlib and what it can do, take a look at [the official
    documentation](https://matplotlib.org/). For directions regarding installing Matplotlib,
    see the official [installation section](https://matplotlib.org/users/installing.html).
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Matplotlib及其功能的信息，请查看[官方文档](https://matplotlib.org/)。有关安装Matplotlib的指导，请参阅官方的[安装部分](https://matplotlib.org/users/installing.html)。
- en: '* * *'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Image credits: Jay Alammar http://jalammar.github.io/*'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来源：Jay Alammar http://jalammar.github.io/*'
