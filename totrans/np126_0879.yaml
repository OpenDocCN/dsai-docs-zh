- en: numpy.floor_divide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.floor_divide.html](https://numpy.org/doc/1.26/reference/generated/numpy.floor_divide.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the largest integer smaller or equal to the division of the inputs. It
    is equivalent to the Python `//` operator and pairs with the Python `%` ([`remainder`](numpy.remainder.html#numpy.remainder
    "numpy.remainder")), function so that `a = a % b + b * (a // b)` up to roundoff.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator.
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Denominator. If `x1.shape != x2.shape`, they must be broadcastable to a common
    shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: y = floor(*x1*/*x2*) This is a scalar if both *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`remainder`](numpy.remainder.html#numpy.remainder "numpy.remainder")'
  prefs: []
  type: TYPE_NORMAL
- en: Remainder complementary to floor_divide.
  prefs: []
  type: TYPE_NORMAL
- en: '[`divmod`](numpy.divmod.html#numpy.divmod "numpy.divmod")'
  prefs: []
  type: TYPE_NORMAL
- en: Simultaneous floor division and remainder.
  prefs: []
  type: TYPE_NORMAL
- en: '[`divide`](numpy.divide.html#numpy.divide "numpy.divide")'
  prefs: []
  type: TYPE_NORMAL
- en: Standard division.
  prefs: []
  type: TYPE_NORMAL
- en: '[`floor`](numpy.floor.html#numpy.floor "numpy.floor")'
  prefs: []
  type: TYPE_NORMAL
- en: Round a number to the nearest integer toward minus infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ceil`](numpy.ceil.html#numpy.ceil "numpy.ceil")'
  prefs: []
  type: TYPE_NORMAL
- en: Round a number to the nearest integer toward infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `//` operator can be used as a shorthand for `np.floor_divide` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
