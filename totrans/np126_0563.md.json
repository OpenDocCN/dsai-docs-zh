["```py\nlinalg.qr(a, mode='reduced')\n```", "```py\n>>> a = np.random.randn(9, 6)\n>>> Q, R = np.linalg.qr(a)\n>>> np.allclose(a, np.dot(Q, R))  # a does equal QR\nTrue\n>>> R2 = np.linalg.qr(a, mode='r')\n>>> np.allclose(R, R2)  # mode='r' returns the same R as mode='full'\nTrue\n>>> a = np.random.normal(size=(3, 2, 2)) # Stack of 2 x 2 matrices as input\n>>> Q, R = np.linalg.qr(a)\n>>> Q.shape\n(3, 2, 2)\n>>> R.shape\n(3, 2, 2)\n>>> np.allclose(a, np.matmul(Q, R))\nTrue \n```", "```py\nA = array([[0, 1], [1, 1], [1, 1], [2, 1]])\nx = array([[y0], [m]])\nb = array([[1], [0], [2], [1]]) \n```", "```py\n>>> A = np.array([[0, 1], [1, 1], [1, 1], [2, 1]])\n>>> A\narray([[0, 1],\n [1, 1],\n [1, 1],\n [2, 1]])\n>>> b = np.array([1, 2, 2, 3])\n>>> Q, R = np.linalg.qr(A)\n>>> p = np.dot(Q.T, b)\n>>> np.dot(np.linalg.inv(R), p)\narray([  1.,   1.]) \n```"]