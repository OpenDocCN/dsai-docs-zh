- en: scipy.stats.boxcox_normmax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute optimal Box-Cox transform parameter for input data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array. All entries must be positive, finite, real numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**brack**2-tuple, optional, default (-2.0, 2.0)'
  prefs: []
  type: TYPE_NORMAL
- en: The starting interval for a downhill bracket search for the default *optimize.brent*
    solver. Note that this is in most cases not critical; the final result is allowed
    to be outside this bracket. If *optimizer* is passed, *brack* must be None.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method to determine the optimal transform parameter ([`boxcox`](scipy.stats.boxcox.html#scipy.stats.boxcox
    "scipy.stats.boxcox") `lmbda` parameter). Options are:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘pearsonr’ (default)
  prefs: []
  type: TYPE_NORMAL
- en: Maximizes the Pearson correlation coefficient between `y = boxcox(x)` and the
    expected values for `y` if *x* would be normally-distributed.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mle’
  prefs: []
  type: TYPE_NORMAL
- en: Maximizes the log-likelihood [`boxcox_llf`](scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf
    "scipy.stats.boxcox_llf"). This is the method used in [`boxcox`](scipy.stats.boxcox.html#scipy.stats.boxcox
    "scipy.stats.boxcox").
  prefs: []
  type: TYPE_NORMAL
- en: ‘all’
  prefs: []
  type: TYPE_NORMAL
- en: Use all optimization methods available, and return all results. Useful to compare
    different methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**optimizer**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '*optimizer* is a callable that accepts one argument:'
  prefs: []
  type: TYPE_NORMAL
- en: funcallable
  prefs: []
  type: TYPE_NORMAL
- en: The objective function to be minimized. *fun* accepts one argument, the Box-Cox
    transform parameter *lmbda*, and returns the value of the function (e.g., the
    negative log-likelihood) at the provided argument. The job of *optimizer* is to
    find the value of *lmbda* that *minimizes* *fun*.
  prefs: []
  type: TYPE_NORMAL
- en: and returns an object, such as an instance of [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult"), which holds the optimal value of *lmbda* in
    an attribute *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See the example below or the documentation of [`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**maxlog**float or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The optimal transform parameter found. An array instead of a scalar for `method='all'`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`boxcox`](scipy.stats.boxcox.html#scipy.stats.boxcox "scipy.stats.boxcox"),
    [`boxcox_llf`](scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf "scipy.stats.boxcox_llf"),
    [`boxcox_normplot`](scipy.stats.boxcox_normplot.html#scipy.stats.boxcox_normplot
    "scipy.stats.boxcox_normplot"), [`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can generate some data and determine the optimal `lmbda` in various ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-boxcox_normmax-1_00_00.png](../Images/94b0112c630a47b974c67c693040a7d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can define our own *optimizer* function. Suppose we are only
    interested in values of *lmbda* on the interval [6, 7], we want to use [`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") with `method=''bounded''`, and we want to use
    tighter tolerances when optimizing the log-likelihood function. To do this, we
    define a function that accepts positional argument *fun* and uses [`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") to minimize *fun* subject to the provided bounds
    and tolerances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
