- en: pandas.DataFrame.truncate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.truncate.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.truncate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Truncate a Series or DataFrame before and after some index value.
  prefs: []
  type: TYPE_NORMAL
- en: This is a useful shorthand for boolean indexing based on index values above
    or below certain thresholds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**before**date, str, int'
  prefs: []
  type: TYPE_NORMAL
- en: Truncate all rows before this index value.
  prefs: []
  type: TYPE_NORMAL
- en: '**after**date, str, int'
  prefs: []
  type: TYPE_NORMAL
- en: Truncate all rows after this index value.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to truncate. Truncates the index (rows) by default. For Series this parameter
    is unused and defaults to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default is True,'
  prefs: []
  type: TYPE_NORMAL
- en: Return a copy of the truncated section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The copy keyword will change behavior in pandas 3.0. [Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    will be enabled by default, which means that all methods with a copy keyword will
    use a lazy copy mechanism to defer the copy and ignore the copy keyword. The copy
    keyword will be removed in a future version of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: You can already get the future behavior and improvements through enabling copy
    on write `pd.options.mode.copy_on_write = True`
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: type of caller
  prefs: []
  type: TYPE_NORMAL
- en: The truncated Series or DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.loc`](pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")'
  prefs: []
  type: TYPE_NORMAL
- en: Select a subset of a DataFrame by label.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.iloc`](pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")'
  prefs: []
  type: TYPE_NORMAL
- en: Select a subset of a DataFrame by position.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the index being truncated contains only datetime values, before and after
    may be specified as strings instead of Timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The columns of a DataFrame can be truncated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For Series, only rows can be truncated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The index values in `truncate` can be datetimes or string dates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Because the index is a DatetimeIndex containing only dates, we can specify before
    and after as strings. They will be coerced to Timestamps before truncation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that `truncate` assumes a 0 value for any unspecified time component (midnight).
    This differs from partial string slicing, which returns any partially matching
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
