- en: Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: Original text：[https://docs.sympy.org/latest/modules/tensor/index_methods.html](https://docs.sympy.org/latest/modules/tensor/index_methods.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/tensor/index_methods.html](https://docs.sympy.org/latest/modules/tensor/index_methods.html)
- en: Module with functions operating on IndexedBase, Indexed and Idx objects
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 包含对IndexedBase、Indexed和Idx对象操作的模块
- en: Check shape conformance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查形状符合度
- en: Determine indices in resulting expression
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定结果表达式中的索引
- en: etc.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。
- en: Methods in this module could be implemented by calling methods on Expr objects
    instead. When things stabilize this could be a useful refactoring.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块中的方法可以通过调用Expr对象上的方法来实现。当事物稳定下来时，这可能是一个有用的重构。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Determine dummy indices of `expr` and describe its structure
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确定`expr`的虚指数并描述其结构
- en: By *dummy* we mean indices that are summation indices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*dummy*，我们指的是求和索引。
- en: 'The structure of the expression is determined and described as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式的结构如下确定并描述：
- en: A conforming summation of Indexed objects is described with a dict where the
    keys are summation indices and the corresponding values are sets containing all
    terms for which the summation applies. All Add objects in the SymPy expression
    tree are described like this.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述了Indexed对象的符合求和，其中键是求和索引，相应的值是所有适用求和的项的集合。SymPy表达式树中的所有Add对象都是这样描述的。
- en: 'For all nodes in the SymPy expression tree that are *not* of type Add, the
    following applies:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于SymPy表达式树中所有不是Add类型的节点，适用以下规则：
- en: If a node discovers contractions in one of its arguments, the node itself will
    be stored as a key in the dict. For that key, the corresponding value is a list
    of dicts, each of which is the result of a recursive call to get_contraction_structure().
    The list contains only dicts for the non-trivial deeper contractions, omitting
    dicts with None as the one and only key.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果节点发现其参数中有缩并，则该节点本身将作为字典中的一个键存储。对于该键，相应的值是一个字典列表，每个字典是对get_contraction_structure()递归调用的结果。该列表仅包含非平凡深层次缩并的字典，省略了只有一个键为None的字典。
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The presence of expressions among the dictionary keys indicates multiple levels
    of index contractions. A nested dict displays nested contractions and may itself
    contain dicts from a deeper level. In practical calculations the summation in
    the deepest nested level must be calculated first so that the outer expression
    can access the resulting indexed object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 字典键中包含的表达式表示了多级索引缩并。嵌套字典显示了嵌套缩并，并可能包含来自更深层级的字典。在实际计算中，必须首先计算最深层嵌套级别的求和，以便外部表达式可以访问生成的索引对象。
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A multiplication of contracted factors results in nested dicts representing
    the internal contractions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 缩并因子的乘积导致表示内部缩并的嵌套字典。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this case, the product has no contractions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，产品没有缩并：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Factors are contracted “first”:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因子首先进行缩并：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A parenthesized Add object is also returned as a nested dictionary. The term
    containing the parenthesis is a Mul with a contraction among the arguments, so
    it will be found as a key in the result. It stores the dictionary resulting from
    a recursive call on the Add expression.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 带括号的Add对象也作为嵌套字典返回。括号内的项是包含参数之间缩并的Mul，因此它将作为结果中的键。它存储了对Add表达式进行递归调用后得到的字典。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Powers with contractions in either base or exponent will also be found as keys
    in the dictionary, mapping to a list of results from recursive calls:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在底数或指数中具有缩并的幂也将作为字典中的键，映射到来自递归调用的结果列表：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The description of the contraction structure may appear complicated when represented
    with a string in the above examples, but it is easy to iterate over:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中用字符串表示的缩并结构描述可能看起来很复杂，但迭代处理起来很容易：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Determine the outer indices of expression `expr`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 确定表达式`expr`的外部索引。
- en: By *outer* we mean indices that are not summation indices. Returns a set and
    a dict. The set contains outer indices and the dict contains information about
    index symmetries.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*outer*，我们指的是非求和索引。返回一个集合和一个字典。集合包含外部索引，字典包含索引对称性的信息。
- en: Examples
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The indices of the total expression is determined, Repeated indices imply a
    summation, for instance the trace of a matrix A:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 确定总表达式的索引，重复的索引意味着求和，例如矩阵A的迹：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the case of many terms, the terms are required to have identical outer indices.
    Else an IndexConformanceException is raised.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在多项式情况下，要求项具有相同的外部索引。否则将引发IndexConformanceException异常。
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Exceptions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 异常：
- en: An IndexConformanceException means that the terms ar not compatible, e.g.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`IndexConformanceException` 表示术语不兼容，例如。'
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Warning
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The concept of *outer* indices applies recursively, starting on the deepest
    level. This implies that dummies inside parenthesis are assumed to be summed first,
    so that the following expression is handled gracefully:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*外部*指数的概念递归应用，从最深层开始。这意味着括号内部的虚数被假定首先求和，以便优雅地处理以下表达式：'
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is correct and may appear convenient, but you need to be careful with this
    as SymPy will happily .expand() the product, if requested. The resulting expression
    would mix the outer `j` with the dummies inside the parenthesis, which makes it
    a different expression. To be on the safe side, it is best to avoid such ambiguities
    by using unique indices for all contractions that should be held separate.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确的，可能看起来方便，但你需要小心，因为如果要求，SymPy 会愉快地`.expand()`这个乘积。结果表达式将混合外部的`j`与括号内部的虚数，使其成为不同的表达式。为了安全起见，最好通过为所有应分开的收缩使用唯一的指数来避免这种模棱两可的情况。
