- en: Optimization and root finding (scipy.optimize)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化和根查找（scipy.optimize）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/optimize.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/optimize.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/optimize.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/optimize.html)
- en: SciPy `optimize` provides functions for minimizing (or maximizing) objective
    functions, possibly subject to constraints. It includes solvers for nonlinear
    problems (with support for both local and global optimization algorithms), linear
    programming, constrained and nonlinear least-squares, root finding, and curve
    fitting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy `optimize` 提供了用于最小化（或最大化）目标函数的函数，可能受约束条件限制。它包括非线性问题的求解器（支持局部和全局优化算法）、线性规划、约束和非线性最小二乘法、根查找和曲线拟合。
- en: 'Common functions and objects, shared across different solvers, are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不同求解器共享的常见函数和对象包括：
- en: '| [`show_options`](generated/scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")([solver, method, disp]) | Show documentation for
    additional options of optimization solvers. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`show_options`](generated/scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")([solver, method, disp]) | 显示优化求解器的附加选项文档。 |'
- en: '| [`OptimizeResult`](generated/scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") | Represents the optimization result. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`OptimizeResult`](generated/scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") | 表示优化结果。 |'
- en: '| [`OptimizeWarning`](generated/scipy.optimize.OptimizeWarning.html#scipy.optimize.OptimizeWarning
    "scipy.optimize.OptimizeWarning") |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`OptimizeWarning`](generated/scipy.optimize.OptimizeWarning.html#scipy.optimize.OptimizeWarning
    "scipy.optimize.OptimizeWarning") |  |'
- en: Optimization
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化
- en: Scalar functions optimization
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量函数优化
- en: '| [`minimize_scalar`](generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")(fun[, bracket, bounds, ...]) | Local minimization
    of scalar function of one variable. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`minimize_scalar`](generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")(fun[, bracket, bounds, ...]) | 对一维标量函数进行局部最小化。
    |'
- en: 'The [`minimize_scalar`](generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") function supports the following methods:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimize_scalar`](generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar") 函数支持以下方法：'
- en: '[minimize_scalar(method=’brent’)](optimize.minimize_scalar-brent.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize_scalar(method=’brent’)](optimize.minimize_scalar-brent.html)'
- en: '[minimize_scalar(method=’bounded’)](optimize.minimize_scalar-bounded.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize_scalar(method=’bounded’)](optimize.minimize_scalar-bounded.html)'
- en: '[minimize_scalar(method=’golden’)](optimize.minimize_scalar-golden.html)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize_scalar(method=’golden’)](optimize.minimize_scalar-golden.html)'
- en: Local (multivariate) optimization
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地（多变量）优化
- en: '| [`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")(fun, x0[, args, method, jac, hess, ...]) | Minimization
    of scalar function of one or more variables. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")(fun, x0[, args, method, jac, hess, ...]) | 对一个或多个变量的标量函数进行最小化。
    |'
- en: 'The [`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") function supports the following methods:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") 函数支持以下方法：'
- en: '[minimize(method=’Nelder-Mead’)](optimize.minimize-neldermead.html)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’Nelder-Mead’)](optimize.minimize-neldermead.html)'
- en: '[minimize(method=’Powell’)](optimize.minimize-powell.html)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’Powell’)](optimize.minimize-powell.html)'
- en: '[minimize(method=’CG’)](optimize.minimize-cg.html)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’CG’)](optimize.minimize-cg.html)'
- en: '[minimize(method=’BFGS’)](optimize.minimize-bfgs.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’BFGS’)](optimize.minimize-bfgs.html)'
- en: '[minimize(method=’Newton-CG’)](optimize.minimize-newtoncg.html)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’Newton-CG’)](optimize.minimize-newtoncg.html)'
- en: '[minimize(method=’L-BFGS-B’)](optimize.minimize-lbfgsb.html)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’L-BFGS-B’)](optimize.minimize-lbfgsb.html)'
- en: '[minimize(method=’TNC’)](optimize.minimize-tnc.html)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’TNC’)](optimize.minimize-tnc.html)'
- en: '[minimize(method=’COBYLA’)](optimize.minimize-cobyla.html)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’COBYLA’)](optimize.minimize-cobyla.html)'
- en: '[minimize(method=’SLSQP’)](optimize.minimize-slsqp.html)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’SLSQP’)](optimize.minimize-slsqp.html)'
- en: '[minimize(method=’trust-constr’)](optimize.minimize-trustconstr.html)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’trust-constr’)](optimize.minimize-trustconstr.html)'
- en: '[minimize(method=’dogleg’)](optimize.minimize-dogleg.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’dogleg’)](optimize.minimize-dogleg.html)'
- en: '[minimize(method=’trust-ncg’)](optimize.minimize-trustncg.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’trust-ncg’)](optimize.minimize-trustncg.html)'
- en: '[minimize(method=’trust-krylov’)](optimize.minimize-trustkrylov.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’trust-krylov’)](optimize.minimize-trustkrylov.html)'
- en: '[minimize(method=’trust-exact’)](optimize.minimize-trustexact.html)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[minimize(method=’trust-exact’)](optimize.minimize-trustexact.html)'
- en: 'Constraints are passed to [`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") function as a single object or as a list of objects
    from the following classes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 约束以单个对象或来自以下类的对象列表形式传递给[`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")函数：
- en: '| [`NonlinearConstraint`](generated/scipy.optimize.NonlinearConstraint.html#scipy.optimize.NonlinearConstraint
    "scipy.optimize.NonlinearConstraint")(fun, lb, ub[, jac, ...]) | Nonlinear constraint
    on the variables. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`NonlinearConstraint`](generated/scipy.optimize.NonlinearConstraint.html#scipy.optimize.NonlinearConstraint
    "scipy.optimize.NonlinearConstraint")(fun, lb, ub[, jac, ...]) | 变量的非线性约束。 |'
- en: '| [`LinearConstraint`](generated/scipy.optimize.LinearConstraint.html#scipy.optimize.LinearConstraint
    "scipy.optimize.LinearConstraint")(A[, lb, ub, keep_feasible]) | Linear constraint
    on the variables. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`LinearConstraint`](generated/scipy.optimize.LinearConstraint.html#scipy.optimize.LinearConstraint
    "scipy.optimize.LinearConstraint")(A[, lb, ub, keep_feasible]) | 变量的线性约束。 |'
- en: 'Simple bound constraints are handled separately and there is a special class
    for them:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的边界约束分别处理，并且有一个专门的类：
- en: '| [`Bounds`](generated/scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")([lb, ub, keep_feasible])
    | Bounds constraint on the variables. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`Bounds`](generated/scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")([lb, ub, keep_feasible])
    | 变量的边界约束。 |'
- en: 'Quasi-Newton strategies implementing [`HessianUpdateStrategy`](generated/scipy.optimize.HessianUpdateStrategy.html#scipy.optimize.HessianUpdateStrategy
    "scipy.optimize.HessianUpdateStrategy") interface can be used to approximate the
    Hessian in [`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") function (available only for the ‘trust-constr’ method).
    Available quasi-Newton methods implementing this interface are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实现[`HessianUpdateStrategy`](generated/scipy.optimize.HessianUpdateStrategy.html#scipy.optimize.HessianUpdateStrategy
    "scipy.optimize.HessianUpdateStrategy")接口的拟牛顿策略可用于在[`minimize`](generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")函数中近似黑塞矩阵（仅适用于“trust-constr”方法）。实现此接口的可用拟牛顿方法包括：
- en: '| [`BFGS`](generated/scipy.optimize.BFGS.html#scipy.optimize.BFGS "scipy.optimize.BFGS")([exception_strategy, min_curvature, ...])
    | Broyden-Fletcher-Goldfarb-Shanno (BFGS) Hessian update strategy. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`BFGS`](generated/scipy.optimize.BFGS.html#scipy.optimize.BFGS "scipy.optimize.BFGS")([exception_strategy, min_curvature, ...])
    | BFGS（Broyden-Fletcher-Goldfarb-Shanno）海森更新策略。 |'
- en: '| [`SR1`](generated/scipy.optimize.SR1.html#scipy.optimize.SR1 "scipy.optimize.SR1")([min_denominator, init_scale])
    | Symmetric-rank-1 Hessian update strategy. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`SR1`](generated/scipy.optimize.SR1.html#scipy.optimize.SR1 "scipy.optimize.SR1")([min_denominator, init_scale])
    | 对称秩-1海森更新策略。 |'
- en: '### Global optimization'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '### 全局优化'
- en: '| [`basinhopping`](generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping")(func, x0[, niter, T, stepsize, ...]) | Find the
    global minimum of a function using the basin-hopping algorithm. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`basinhopping`](generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping")(func, x0[, niter, T, stepsize, ...]) | 使用盆地跳跃算法找到函数的全局最小值。
    |'
- en: '| [`brute`](generated/scipy.optimize.brute.html#scipy.optimize.brute "scipy.optimize.brute")(func, ranges[, args, Ns, full_output, ...])
    | Minimize a function over a given range by brute force. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`brute`](generated/scipy.optimize.brute.html#scipy.optimize.brute "scipy.optimize.brute")(func, ranges[, args, Ns, full_output, ...])
    | 通过蛮力法在给定范围内最小化函数。 |'
- en: '| [`differential_evolution`](generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")(func, bounds[, args, ...]) | Finds the
    global minimum of a multivariate function. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`differential_evolution`](generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")(func, bounds[, args, ...]) | 多元函数的全局最小值。
    |'
- en: '| [`shgo`](generated/scipy.optimize.shgo.html#scipy.optimize.shgo "scipy.optimize.shgo")(func, bounds[, args, constraints, n, ...])
    | Finds the global minimum of a function using SHG optimization. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`shgo`](generated/scipy.optimize.shgo.html#scipy.optimize.shgo "scipy.optimize.shgo")(func, bounds[, args, constraints, n, ...])
    | 使用SHG优化找到函数的全局最小值。 |'
- en: '| [`dual_annealing`](generated/scipy.optimize.dual_annealing.html#scipy.optimize.dual_annealing
    "scipy.optimize.dual_annealing")(func, bounds[, args, ...]) | Find the global
    minimum of a function using Dual Annealing. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`dual_annealing`](generated/scipy.optimize.dual_annealing.html#scipy.optimize.dual_annealing
    "scipy.optimize.dual_annealing")(func, bounds[, args, ...]) | 使用双退火法找到函数的全局最小值。
    |'
- en: '| [`direct`](generated/scipy.optimize.direct.html#scipy.optimize.direct "scipy.optimize.direct")(func, bounds, *[, args, eps, maxfun, ...])
    | Finds the global minimum of a function using the DIRECT algorithm. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`direct`](generated/scipy.optimize.direct.html#scipy.optimize.direct "scipy.optimize.direct")(func, bounds, *[, args, eps, maxfun, ...])
    | 使用 DIRECT 算法寻找函数的全局最小值。 |'
- en: Least-squares and curve fitting
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小二乘和曲线拟合
- en: Nonlinear least-squares
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非线性最小二乘
- en: '| [`least_squares`](generated/scipy.optimize.least_squares.html#scipy.optimize.least_squares
    "scipy.optimize.least_squares")(fun, x0[, jac, bounds, ...]) | Solve a nonlinear
    least-squares problem with bounds on the variables. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`least_squares`](generated/scipy.optimize.least_squares.html#scipy.optimize.least_squares
    "scipy.optimize.least_squares")(fun, x0[, jac, bounds, ...]) | 解决带有变量边界的非线性最小二乘问题。
    |'
- en: Linear least-squares
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性最小二乘
- en: '| [`nnls`](generated/scipy.optimize.nnls.html#scipy.optimize.nnls "scipy.optimize.nnls")(A, b[, maxiter, atol])
    | Solve `argmin_x &#124;&#124; Ax - b &#124;&#124;_2` for `x>=0`. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`nnls`](generated/scipy.optimize.nnls.html#scipy.optimize.nnls "scipy.optimize.nnls")(A, b[, maxiter, atol])
    | 解决 `argmin_x || Ax - b ||_2` 且 `x>=0`。 |'
- en: '| [`lsq_linear`](generated/scipy.optimize.lsq_linear.html#scipy.optimize.lsq_linear
    "scipy.optimize.lsq_linear")(A, b[, bounds, method, tol, ...]) | Solve a linear
    least-squares problem with bounds on the variables. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`lsq_linear`](generated/scipy.optimize.lsq_linear.html#scipy.optimize.lsq_linear
    "scipy.optimize.lsq_linear")(A, b[, bounds, method, tol, ...]) | 解决带有变量边界的线性最小二乘问题。
    |'
- en: '| [`isotonic_regression`](generated/scipy.optimize.isotonic_regression.html#scipy.optimize.isotonic_regression
    "scipy.optimize.isotonic_regression")(y, *[, weights, increasing]) | Nonparametric
    isotonic regression. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`isotonic_regression`](generated/scipy.optimize.isotonic_regression.html#scipy.optimize.isotonic_regression
    "scipy.optimize.isotonic_regression")(y, *[, weights, increasing]) | 非参数等距回归。
    |'
- en: Curve fitting
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 曲线拟合
- en: '| [`curve_fit`](generated/scipy.optimize.curve_fit.html#scipy.optimize.curve_fit
    "scipy.optimize.curve_fit")(f, xdata, ydata[, p0, sigma, ...]) | Use non-linear
    least squares to fit a function, f, to data. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`curve_fit`](generated/scipy.optimize.curve_fit.html#scipy.optimize.curve_fit
    "scipy.optimize.curve_fit")(f, xdata, ydata[, p0, sigma, ...]) | 使用非线性最小二乘拟合函数
    `f` 到数据。 |'
- en: Root finding
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根查找
- en: Scalar functions
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量函数
- en: '| [`root_scalar`](generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar")(f[, args, method, bracket, ...]) | Find a root of
    a scalar function. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`root_scalar`](generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar")(f[, args, method, bracket, ...]) | 寻找标量函数的根。 |'
- en: '| [`brentq`](generated/scipy.optimize.brentq.html#scipy.optimize.brentq "scipy.optimize.brentq")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | Find a root of a function in a bracketing interval using Brent''s method. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`brentq`](generated/scipy.optimize.brentq.html#scipy.optimize.brentq "scipy.optimize.brentq")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | 使用 Brent 方法在一个区间内寻找函数的根。 |'
- en: '| [`brenth`](generated/scipy.optimize.brenth.html#scipy.optimize.brenth "scipy.optimize.brenth")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | Find a root of a function in a bracketing interval using Brent''s method with
    hyperbolic extrapolation. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`brenth`](generated/scipy.optimize.brenth.html#scipy.optimize.brenth "scipy.optimize.brenth")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | 使用 Brent 方法及双曲线外推在一个区间内寻找函数的根。 |'
- en: '| [`ridder`](generated/scipy.optimize.ridder.html#scipy.optimize.ridder "scipy.optimize.ridder")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | Find a root of a function in an interval using Ridder''s method. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`ridder`](generated/scipy.optimize.ridder.html#scipy.optimize.ridder "scipy.optimize.ridder")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | 使用 Ridder 方法在一个区间内寻找函数的根。 |'
- en: '| [`bisect`](generated/scipy.optimize.bisect.html#scipy.optimize.bisect "scipy.optimize.bisect")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | Find root of a function within an interval using bisection. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`bisect`](generated/scipy.optimize.bisect.html#scipy.optimize.bisect "scipy.optimize.bisect")(f, a, b[, args, xtol, rtol, maxiter, ...])
    | 使用二分法在一个区间内寻找函数的根。 |'
- en: '| [`newton`](generated/scipy.optimize.newton.html#scipy.optimize.newton "scipy.optimize.newton")(func, x0[, fprime, args, tol, ...])
    | Find a root of a real or complex function using the Newton-Raphson (or secant
    or Halley''s) method. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`newton`](generated/scipy.optimize.newton.html#scipy.optimize.newton "scipy.optimize.newton")(func, x0[, fprime, args, tol, ...])
    | 使用牛顿-拉弗森（或割线或哈雷）方法寻找实数或复数函数的根。 |'
- en: '| [`toms748`](generated/scipy.optimize.toms748.html#scipy.optimize.toms748
    "scipy.optimize.toms748")(f, a, b[, args, k, xtol, rtol, ...]) | Find a root using
    TOMS Algorithm 748 method. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`toms748`](generated/scipy.optimize.toms748.html#scipy.optimize.toms748
    "scipy.optimize.toms748")(f, a, b[, args, k, xtol, rtol, ...]) | 使用 TOMS 算法 748
    方法寻找根。 |'
- en: '| [`RootResults`](generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")(root, iterations, ...) | Represents the root finding
    result. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`RootResults`](generated/scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")(root, iterations, ...) | 表示根查找结果。 |'
- en: 'The [`root_scalar`](generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar") function supports the following methods:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`root_scalar`](generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar") 函数支持以下方法：'
- en: '[root_scalar(method=’brentq’)](optimize.root_scalar-brentq.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’brentq’)](optimize.root_scalar-brentq.html)'
- en: '[root_scalar(method=’brenth’)](optimize.root_scalar-brenth.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’brenth’)](optimize.root_scalar-brenth.html)'
- en: '[root_scalar(method=’bisect’)](optimize.root_scalar-bisect.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’bisect’)](optimize.root_scalar-bisect.html)'
- en: '[root_scalar(method=’ridder’)](optimize.root_scalar-ridder.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’ridder’)](optimize.root_scalar-ridder.html)'
- en: '[root_scalar(method=’newton’)](optimize.root_scalar-newton.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’newton’)](optimize.root_scalar-newton.html)'
- en: '[root_scalar(method=’toms748’)](optimize.root_scalar-toms748.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’toms748’)](optimize.root_scalar-toms748.html)'
- en: '[root_scalar(method=’secant’)](optimize.root_scalar-secant.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’secant’)](optimize.root_scalar-secant.html)'
- en: '[root_scalar(method=’halley’)](optimize.root_scalar-halley.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root_scalar(method=’halley’)](optimize.root_scalar-halley.html)'
- en: The table below lists situations and appropriate methods, along with *asymptotic*
    convergence rates per iteration (and per function evaluation) for successful convergence
    to a simple root(*). Bisection is the slowest of them all, adding one bit of accuracy
    for each function evaluation, but is guaranteed to converge. The other bracketing
    methods all (eventually) increase the number of accurate bits by about 50% for
    every function evaluation. The derivative-based methods, all built on [`newton`](generated/scipy.optimize.newton.html#scipy.optimize.newton
    "scipy.optimize.newton"), can converge quite quickly if the initial value is close
    to the root. They can also be applied to functions defined on (a subset of) the
    complex plane.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了情况及适当的方法，以及每次迭代（和每次函数评估）的渐近收敛率，以便成功收敛到简单根(*）。二分法是最慢的，每次函数评估增加一位有效数字，但保证收敛。其他括号法（最终）每次函数评估增加大约50%的准确位数。基于导数的方法，都建立在[`newton`](generated/scipy.optimize.newton.html#scipy.optimize.newton
    "scipy.optimize.newton")上，如果初始值接近根，可以相当快速地收敛。它们也可应用于在复平面（的子集上）定义的函数。
- en: '| Domain of f | Bracket? | Derivatives? | Solvers | Convergence |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 函数域 | 是否括号化？ | 是否有导数？ | 求解器 | 收敛性 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| *fprime* | *fprime2* | Guaranteed? | Rate(s)(*) |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| *fprime* | *fprime2* | 是否保证？ | 收敛率(*) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| *R* | Yes | N/A | N/A |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| *R* | 是 | N/A | N/A |'
- en: bisection
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分法
- en: brentq
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: brentq
- en: brenth
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: brenth
- en: ridder
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ridder
- en: toms748
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toms748
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Yes'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是
- en: 'Yes'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是
- en: 'Yes'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是
- en: 'Yes'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是
- en: 'Yes'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 1 “Linear”
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 “线性”
- en: '>=1, <= 1.62'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '>=1, <= 1.62'
- en: '>=1, <= 1.62'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '>=1, <= 1.62'
- en: 2.0 (1.41)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.0 (1.41)
- en: 2.7 (1.65)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.7 (1.65)
- en: '|'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| *R* or *C* | No | No | No | secant | No | 1.62 (1.62) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| *R* 或 *C* | 否 | 否 | 否 | 切线法 | 否 | 1.62 (1.62) |'
- en: '| *R* or *C* | No | Yes | No | newton | No | 2.00 (1.41) |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| *R* 或 *C* | 否 | 是 | 否 | 牛顿法 | 否 | 2.00 (1.41) |'
- en: '| *R* or *C* | No | Yes | Yes | halley | No | 3.00 (1.44) |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| *R* 或 *C* | 否 | 是 | 是 | 亥姆法 | 否 | 3.00 (1.44) |'
- en: See also
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`scipy.optimize.cython_optimize`](optimize.cython_optimize.html#module-scipy.optimize.cython_optimize
    "scipy.optimize.cython_optimize") – Typed Cython versions of root finding functions'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.optimize.cython_optimize`](optimize.cython_optimize.html#module-scipy.optimize.cython_optimize
    "scipy.optimize.cython_optimize") – Typed Cython 版本的根查找函数'
- en: 'Fixed point finding:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找不动点：
- en: '| [`fixed_point`](generated/scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")(func, x0[, args, xtol, maxiter, ...]) | Find a fixed
    point of the function. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`fixed_point`](generated/scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")(func, x0[, args, xtol, maxiter, ...]) | 查找函数的不动点。
    |'
- en: Multidimensional
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多维的
- en: '| [`root`](generated/scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")(fun, x0[, args, method, jac, tol, ...])
    | Find a root of a vector function. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`root`](generated/scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")(fun, x0[, args, method, jac, tol, ...])
    | 查找向量函数的根。 |'
- en: 'The [`root`](generated/scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")
    function supports the following methods:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`root`](generated/scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")
    函数支持以下方法：'
- en: '[root(method=’hybr’)](optimize.root-hybr.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’hybr’)](optimize.root-hybr.html)'
- en: '[root(method=’lm’)](optimize.root-lm.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’lm’)](optimize.root-lm.html)'
- en: '[root(method=’broyden1’)](optimize.root-broyden1.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’broyden1’)](optimize.root-broyden1.html)'
- en: '[root(method=’broyden2’)](optimize.root-broyden2.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’broyden2’)](optimize.root-broyden2.html)'
- en: '[root(method=’anderson’)](optimize.root-anderson.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’anderson’)](optimize.root-anderson.html)'
- en: '[root(method=’linearmixing’)](optimize.root-linearmixing.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’linearmixing’)](optimize.root-linearmixing.html)'
- en: '[root(method=’diagbroyden’)](optimize.root-diagbroyden.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’diagbroyden’)](optimize.root-diagbroyden.html)'
- en: '[root(method=’excitingmixing’)](optimize.root-excitingmixing.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’excitingmixing’)](optimize.root-excitingmixing.html)'
- en: '[root(method=’krylov’)](optimize.root-krylov.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’krylov’)](optimize.root-krylov.html)'
- en: '[root(method=’df-sane’)](optimize.root-dfsane.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[root(method=’df-sane’)](optimize.root-dfsane.html)'
- en: Linear programming / MILP
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性规划 / MILP
- en: '| [`milp`](generated/scipy.optimize.milp.html#scipy.optimize.milp "scipy.optimize.milp")(c, *[, integrality, bounds, ...])
    | Mixed-integer linear programming |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`milp`](generated/scipy.optimize.milp.html#scipy.optimize.milp "scipy.optimize.milp")(c, *[, integrality, bounds, ...])
    | 混合整数线性规划 |'
- en: '| [`linprog`](generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "scipy.optimize.linprog")(c[, A_ub, b_ub, A_eq, b_eq, bounds, ...]) | Linear programming:
    minimize a linear objective function subject to linear equality and inequality
    constraints. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`linprog`](generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "scipy.optimize.linprog")(c[, A_ub, b_ub, A_eq, b_eq, bounds, ...]) | 线性规划：最小化线性目标函数，满足线性等式和不等式约束。
    |'
- en: 'The [`linprog`](generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "scipy.optimize.linprog") function supports the following methods:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[`linprog`](generated/scipy.optimize.linprog.html#scipy.optimize.linprog "scipy.optimize.linprog")
    函数支持以下方法：'
- en: '[linprog(method=’simplex’)](optimize.linprog-simplex.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’simplex’)](optimize.linprog-simplex.html)'
- en: '[linprog(method=’interior-point’)](optimize.linprog-interior-point.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’interior-point’)](optimize.linprog-interior-point.html)'
- en: '[linprog(method=’revised simplex’)](optimize.linprog-revised_simplex.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’revised simplex’)](optimize.linprog-revised_simplex.html)'
- en: '[linprog(method=’highs-ipm’)](optimize.linprog-highs-ipm.html)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’highs-ipm’)](optimize.linprog-highs-ipm.html)'
- en: '[linprog(method=’highs-ds’)](optimize.linprog-highs-ds.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’highs-ds’)](optimize.linprog-highs-ds.html)'
- en: '[linprog(method=’highs’)](optimize.linprog-highs.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[linprog(method=’highs’)](optimize.linprog-highs.html)'
- en: 'The simplex, interior-point, and revised simplex methods support callback functions,
    such as:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 简单法、内点法和修订单纯法方法支持回调函数，例如：
- en: '| [`linprog_verbose_callback`](generated/scipy.optimize.linprog_verbose_callback.html#scipy.optimize.linprog_verbose_callback
    "scipy.optimize.linprog_verbose_callback")(res) | A sample callback function demonstrating
    the linprog callback interface. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`linprog_verbose_callback`](generated/scipy.optimize.linprog_verbose_callback.html#scipy.optimize.linprog_verbose_callback
    "scipy.optimize.linprog_verbose_callback")(res) | 演示 linprog 回调接口的样本回调函数。 |'
- en: Assignment problems
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配问题
- en: '| [`linear_sum_assignment`](generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment
    "scipy.optimize.linear_sum_assignment") | Solve the linear sum assignment problem.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`linear_sum_assignment`](generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment
    "scipy.optimize.linear_sum_assignment") | 解决线性求和分配问题。 |'
- en: '| [`quadratic_assignment`](generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment
    "scipy.optimize.quadratic_assignment")(A, B[, method, options]) | Approximates
    solution to the quadratic assignment problem and the graph matching problem. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`quadratic_assignment`](generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment
    "scipy.optimize.quadratic_assignment")(A, B[, method, options]) | 近似解决二次分配问题和图匹配问题。
    |'
- en: 'The [`quadratic_assignment`](generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment
    "scipy.optimize.quadratic_assignment") function supports the following methods:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`quadratic_assignment`](generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment
    "scipy.optimize.quadratic_assignment") 函数支持以下方法：'
- en: '[quadratic_assignment(method=’faq’)](optimize.qap-faq.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[quadratic_assignment(method=’faq’)](optimize.qap-faq.html)'
- en: '[quadratic_assignment(method=’2opt’)](optimize.qap-2opt.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[quadratic_assignment(method=’2opt’)](optimize.qap-2opt.html)'
- en: Utilities
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实用工具
- en: Finite-difference approximation
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Finite-difference approximation
- en: '| [`approx_fprime`](generated/scipy.optimize.approx_fprime.html#scipy.optimize.approx_fprime
    "scipy.optimize.approx_fprime")(xk, f[, epsilon]) | Finite difference approximation
    of the derivatives of a scalar or vector-valued function. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`approx_fprime`](generated/scipy.optimize.approx_fprime.html#scipy.optimize.approx_fprime
    "scipy.optimize.approx_fprime")(xk, f[, epsilon]) | 标量或向量值函数的有限差分近似导数。 |'
- en: '| [`check_grad`](generated/scipy.optimize.check_grad.html#scipy.optimize.check_grad
    "scipy.optimize.check_grad")(func, grad, x0, *args[, epsilon, ...]) | Check the
    correctness of a gradient function by comparing it against a (forward) finite-difference
    approximation of the gradient. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`check_grad`](generated/scipy.optimize.check_grad.html#scipy.optimize.check_grad
    "scipy.optimize.check_grad")(func, grad, x0, *args[, epsilon, ...]) | 通过将其与梯度的（前向）有限差分近似比较，检查梯度函数的正确性。
    |'
- en: Line search
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线搜索：
- en: '| [`bracket`](generated/scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket")(func[, xa, xb, args, grow_limit, ...]) | Bracket the
    minimum of a function. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`bracket`](generated/scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket")(func[, xa, xb, args, grow_limit, ...]) | 定位函数最小值的区间。
    |'
- en: '| [`line_search`](generated/scipy.optimize.line_search.html#scipy.optimize.line_search
    "scipy.optimize.line_search")(f, myfprime, xk, pk[, gfk, ...]) | Find alpha that
    satisfies strong Wolfe conditions. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`line_search`](generated/scipy.optimize.line_search.html#scipy.optimize.line_search
    "scipy.optimize.line_search")(f, myfprime, xk, pk[, gfk, ...]) | 寻找满足强 Wolfe 条件的
    alpha。 |'
- en: Hessian approximation
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Hessian 近似：
- en: '| [`LbfgsInvHessProduct`](generated/scipy.optimize.LbfgsInvHessProduct.html#scipy.optimize.LbfgsInvHessProduct
    "scipy.optimize.LbfgsInvHessProduct")(*args, **kwargs) | Linear operator for the
    L-BFGS approximate inverse Hessian. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`LbfgsInvHessProduct`](generated/scipy.optimize.LbfgsInvHessProduct.html#scipy.optimize.LbfgsInvHessProduct
    "scipy.optimize.LbfgsInvHessProduct")(*args, **kwargs) | L-BFGS 近似逆 Hessian 的线性算子。
    |'
- en: '| [`HessianUpdateStrategy`](generated/scipy.optimize.HessianUpdateStrategy.html#scipy.optimize.HessianUpdateStrategy
    "scipy.optimize.HessianUpdateStrategy")() | Interface for implementing Hessian
    update strategies. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`HessianUpdateStrategy`](generated/scipy.optimize.HessianUpdateStrategy.html#scipy.optimize.HessianUpdateStrategy
    "scipy.optimize.HessianUpdateStrategy")() | 实现 Hessian 更新策略的接口。 |'
- en: Benchmark problems
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基准问题：
- en: '| [`rosen`](generated/scipy.optimize.rosen.html#scipy.optimize.rosen "scipy.optimize.rosen")(x)
    | The Rosenbrock function. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`rosen`](generated/scipy.optimize.rosen.html#scipy.optimize.rosen "scipy.optimize.rosen")(x)
    | Rosenbrock 函数。 |'
- en: '| [`rosen_der`](generated/scipy.optimize.rosen_der.html#scipy.optimize.rosen_der
    "scipy.optimize.rosen_der")(x) | The derivative (i.e. gradient) of the Rosenbrock
    function. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`rosen_der`](generated/scipy.optimize.rosen_der.html#scipy.optimize.rosen_der
    "scipy.optimize.rosen_der")(x) | Rosenbrock 函数的导数（即梯度）。 |'
- en: '| [`rosen_hess`](generated/scipy.optimize.rosen_hess.html#scipy.optimize.rosen_hess
    "scipy.optimize.rosen_hess")(x) | The Hessian matrix of the Rosenbrock function.
    |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`rosen_hess`](generated/scipy.optimize.rosen_hess.html#scipy.optimize.rosen_hess
    "scipy.optimize.rosen_hess")(x) | Rosenbrock 函数的 Hessian 矩阵。 |'
- en: '| [`rosen_hess_prod`](generated/scipy.optimize.rosen_hess_prod.html#scipy.optimize.rosen_hess_prod
    "scipy.optimize.rosen_hess_prod")(x, p) | Product of the Hessian matrix of the
    Rosenbrock function with a vector. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`rosen_hess_prod`](generated/scipy.optimize.rosen_hess_prod.html#scipy.optimize.rosen_hess_prod
    "scipy.optimize.rosen_hess_prod")(x, p) | Rosenbrock 函数的 Hessian 矩阵与向量的乘积。 |'
- en: Legacy functions
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遗留函数：
- en: The functions below are not recommended for use in new scripts; all of these
    methods are accessible via a newer, more consistent interfaces, provided by the
    interfaces above.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数不建议在新脚本中使用；所有这些方法都可以通过提供的更新、更一致的接口访问。
- en: Optimization
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优化：
- en: 'General-purpose multivariate methods:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通用多元方法：
- en: '| [`fmin`](generated/scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin")(func, x0[, args, xtol, ftol, maxiter, ...])
    | Minimize a function using the downhill simplex algorithm. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin")(func, x0[, args, xtol, ftol, maxiter, ...])
    | 使用下降单纯形算法最小化函数。 |'
- en: '| [`fmin_powell`](generated/scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell
    "scipy.optimize.fmin_powell")(func, x0[, args, xtol, ftol, ...]) | Minimize a
    function using modified Powell''s method. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_powell`](generated/scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell
    "scipy.optimize.fmin_powell")(func, x0[, args, xtol, ftol, ...]) | 使用修改后的 Powell
    方法最小化函数。 |'
- en: '| [`fmin_cg`](generated/scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg
    "scipy.optimize.fmin_cg")(f, x0[, fprime, args, gtol, norm, ...]) | Minimize a
    function using a nonlinear conjugate gradient algorithm. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_cg`](generated/scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg
    "scipy.optimize.fmin_cg")(f, x0[, fprime, args, gtol, norm, ...]) | 使用非线性共轭梯度算法最小化函数。
    |'
- en: '| [`fmin_bfgs`](generated/scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs
    "scipy.optimize.fmin_bfgs")(f, x0[, fprime, args, gtol, norm, ...]) | Minimize
    a function using the BFGS algorithm. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_bfgs`](generated/scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs
    "scipy.optimize.fmin_bfgs")(f, x0[, fprime, args, gtol, norm, ...]) | 使用 BFGS
    算法最小化函数。 |'
- en: '| [`fmin_ncg`](generated/scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg
    "scipy.optimize.fmin_ncg")(f, x0, fprime[, fhess_p, fhess, ...]) | Unconstrained
    minimization of a function using the Newton-CG method. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_ncg`](generated/scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg
    "scipy.optimize.fmin_ncg")(f, x0, fprime[, fhess_p, fhess, ...]) | 使用牛顿-CG方法无约束最小化函数。'
- en: 'Constrained multivariate methods:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 约束多元方法：
- en: '| [`fmin_l_bfgs_b`](generated/scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b")(func, x0[, fprime, args, ...]) | Minimize a function
    func using the L-BFGS-B algorithm. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_l_bfgs_b`](generated/scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b")(func, x0[, fprime, args, ...]) | 使用L-BFGS-B算法最小化函数func。'
- en: '| [`fmin_tnc`](generated/scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc")(func, x0[, fprime, args, ...]) | Minimize a function
    with variables subject to bounds, using gradient information in a truncated Newton
    algorithm. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_tnc`](generated/scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc")(func, x0[, fprime, args, ...]) | 使用截断牛顿算法最小化受界限约束的变量函数，并使用梯度信息。'
- en: '| [`fmin_cobyla`](generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")(func, x0, cons[, args, ...]) | Minimize a function
    using the Constrained Optimization By Linear Approximation (COBYLA) method. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_cobyla`](generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")(func, x0, cons[, args, ...]) | 使用线性逼近约束优化（COBYLA）方法最小化函数。'
- en: '| [`fmin_slsqp`](generated/scipy.optimize.fmin_slsqp.html#scipy.optimize.fmin_slsqp
    "scipy.optimize.fmin_slsqp")(func, x0[, eqcons, f_eqcons, ...]) | Minimize a function
    using Sequential Least Squares Programming |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin_slsqp`](generated/scipy.optimize.fmin_slsqp.html#scipy.optimize.fmin_slsqp
    "scipy.optimize.fmin_slsqp")(func, x0[, eqcons, f_eqcons, ...]) | 使用顺序最小二乘规划（SLSQP）方法最小化函数。'
- en: 'Univariate (scalar) minimization methods:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 单变量（标量）最小化方法：
- en: '| [`fminbound`](generated/scipy.optimize.fminbound.html#scipy.optimize.fminbound
    "scipy.optimize.fminbound")(func, x1, x2[, args, xtol, ...]) | Bounded minimization
    for scalar functions. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`fminbound`](generated/scipy.optimize.fminbound.html#scipy.optimize.fminbound
    "scipy.optimize.fminbound")(func, x1, x2[, args, xtol, ...]) | 标量函数的有界最小化。'
- en: '| [`brent`](generated/scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent")(func[, args, brack, tol, full_output, ...])
    | Given a function of one variable and a possible bracket, return a local minimizer
    of the function isolated to a fractional precision of tol. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`brent`](generated/scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent")(func[, args, brack, tol, full_output, ...])
    | 给定一个变量函数和可能的区间，返回函数的局部最小化器，精确到tol的分数精度。'
- en: '| [`golden`](generated/scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden")(func[, args, brack, tol, ...])
    | Return the minimizer of a function of one variable using the golden section
    method. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`golden`](generated/scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden")(func[, args, brack, tol, ...])
    | 使用黄金分割法返回单变量函数的最小化器。'
- en: Least-squares
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小二乘
- en: '| [`leastsq`](generated/scipy.optimize.leastsq.html#scipy.optimize.leastsq
    "scipy.optimize.leastsq")(func, x0[, args, Dfun, full_output, ...]) | Minimize
    the sum of squares of a set of equations. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`leastsq`](generated/scipy.optimize.leastsq.html#scipy.optimize.leastsq
    "scipy.optimize.leastsq")(func, x0[, args, Dfun, full_output, ...]) | 最小化一组方程的平方和。'
- en: Root finding
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根查找：
- en: 'General nonlinear solvers:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一般非线性求解器：
- en: '| [`fsolve`](generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")(func, x0[, args, fprime, ...])
    | Find the roots of a function. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`fsolve`](generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")(func, x0[, args, fprime, ...])
    | 找到函数的根。'
- en: '| [`broyden1`](generated/scipy.optimize.broyden1.html#scipy.optimize.broyden1
    "scipy.optimize.broyden1")(F, xin[, iter, alpha, ...]) | Find a root of a function,
    using Broyden''s first Jacobian approximation. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`broyden1`](generated/scipy.optimize.broyden1.html#scipy.optimize.broyden1
    "scipy.optimize.broyden1")(F, xin[, iter, alpha, ...]) | 使用布罗伊登第一雅可比逼近找到函数的根。'
- en: '| [`broyden2`](generated/scipy.optimize.broyden2.html#scipy.optimize.broyden2
    "scipy.optimize.broyden2")(F, xin[, iter, alpha, ...]) | Find a root of a function,
    using Broyden''s second Jacobian approximation. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`broyden2`](generated/scipy.optimize.broyden2.html#scipy.optimize.broyden2
    "scipy.optimize.broyden2")(F, xin[, iter, alpha, ...]) | 使用布罗伊登第二雅可比逼近找到函数的根。'
- en: 'Large-scale nonlinear solvers:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模非线性求解器：
- en: '| [`newton_krylov`](generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov
    "scipy.optimize.newton_krylov")(F, xin[, iter, rdiff, method, ...]) | Find a root
    of a function, using Krylov approximation for inverse Jacobian. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`newton_krylov`](generated/scipy.optimize.newton_krylov.html#scipy.optimize.newton_krylov
    "scipy.optimize.newton_krylov")\(F, xin\[\, iter, rdiff, method, ...\]\) | 使用Krylov逼近方法求解函数的根，用于逆雅可比矩阵。'
- en: '| [`anderson`](generated/scipy.optimize.anderson.html#scipy.optimize.anderson
    "scipy.optimize.anderson")(F, xin[, iter, alpha, w0, M, ...]) | Find a root of
    a function, using (extended) Anderson mixing. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`anderson`](generated/scipy.optimize.anderson.html#scipy.optimize.anderson
    "scipy.optimize.anderson")(F, xin[, iter, alpha, w0, M, ...]) | 使用（扩展的）安德森混合方法寻找函数的根。'
- en: '| [`BroydenFirst`](generated/scipy.optimize.BroydenFirst.html#scipy.optimize.BroydenFirst
    "scipy.optimize.BroydenFirst")([alpha, reduction_method, max_rank]) | Find a root
    of a function, using Broyden''s first Jacobian approximation. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`BroydenFirst`](generated/scipy.optimize.BroydenFirst.html#scipy.optimize.BroydenFirst
    "scipy.optimize.BroydenFirst")([alpha, reduction_method, max_rank]) | 使用Broyden第一雅可比逼近方法寻找函数的根。'
- en: '| [`InverseJacobian`](generated/scipy.optimize.InverseJacobian.html#scipy.optimize.InverseJacobian
    "scipy.optimize.InverseJacobian")(jacobian) |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`InverseJacobian`](generated/scipy.optimize.InverseJacobian.html#scipy.optimize.InverseJacobian
    "scipy.optimize.InverseJacobian")(jacobian) | '
- en: 'Attributes:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '|'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`KrylovJacobian`](generated/scipy.optimize.KrylovJacobian.html#scipy.optimize.KrylovJacobian
    "scipy.optimize.KrylovJacobian")([rdiff, method, ...]) | Find a root of a function,
    using Krylov approximation for inverse Jacobian. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`KrylovJacobian`](generated/scipy.optimize.KrylovJacobian.html#scipy.optimize.KrylovJacobian
    "scipy.optimize.KrylovJacobian")([rdiff, method, ...]) | 使用Krylov逼近方法求解函数的根，用于逆雅可比矩阵。'
- en: 'Simple iteration solvers:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 简单迭代求解器：
- en: '| [`excitingmixing`](generated/scipy.optimize.excitingmixing.html#scipy.optimize.excitingmixing
    "scipy.optimize.excitingmixing")(F, xin[, iter, alpha, ...]) | Find a root of
    a function, using a tuned diagonal Jacobian approximation. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`excitingmixing`](generated/scipy.optimize.excitingmixing.html#scipy.optimize.excitingmixing
    "scipy.optimize.excitingmixing")\(F, xin\[\, iter, alpha, ...\]\) | 使用调整的对角雅可比逼近方法寻找函数的根。'
- en: '| [`linearmixing`](generated/scipy.optimize.linearmixing.html#scipy.optimize.linearmixing
    "scipy.optimize.linearmixing")(F, xin[, iter, alpha, verbose, ...]) | Find a root
    of a function, using a scalar Jacobian approximation. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`linearmixing`](generated/scipy.optimize.linearmixing.html#scipy.optimize.linearmixing
    "scipy.optimize.linearmixing")\(F, xin\[\, iter, alpha, verbose, ...\]\) | 使用标量雅可比逼近方法寻找函数的根。'
- en: '| [`diagbroyden`](generated/scipy.optimize.diagbroyden.html#scipy.optimize.diagbroyden
    "scipy.optimize.diagbroyden")(F, xin[, iter, alpha, verbose, ...]) | Find a root
    of a function, using diagonal Broyden Jacobian approximation. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`diagbroyden`](generated/scipy.optimize.diagbroyden.html#scipy.optimize.diagbroyden
    "scipy.optimize.diagbroyden")(F, xin[, iter, alpha, verbose, ...]) | 使用对角Broyden雅可比逼近方法寻找函数的根。'
