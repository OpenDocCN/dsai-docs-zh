- en: How to manipulate textual data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/10_text_data.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/10_text_data.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make all name characters lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To make each of the strings in the `Name` column lowercase, select the `Name`
    column (see the [tutorial on selection of data](03_subset_data.html#min-tut-03-subset)),
    add the `str` accessor and apply the `lower` method. As such, each of the strings
    is converted element-wise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Similar to datetime objects in the [time series tutorial](09_timeseries.html#min-tut-09-timeseries)
    having a `dt` accessor, a number of specialized string methods are available when
    using the `str` accessor. These methods have in general matching names with the
    equivalent built-in string methods for single elements, but are applied element-wise
    (remember [element-wise calculations](05_add_columns.html#min-tut-05-columns)?)
    on each of the values of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new column `Surname` that contains the surname of the passengers by
    extracting the part before the comma.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the [`Series.str.split()`](../../reference/api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split") method, each of the values is returned as a list of
    2 elements. The first element is the part before the comma and the second element
    is the part after the comma.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are only interested in the first part representing the surname (element
    0), we can again use the `str` accessor and apply [`Series.str.get()`](../../reference/api/pandas.Series.str.get.html#pandas.Series.str.get
    "pandas.Series.str.get") to extract the relevant part. Indeed, these string functions
    can be concatenated to combine multiple functions at once!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More information on extracting parts of strings is available in the user guide
    section on [splitting and replacing strings](../../user_guide/text.html#text-split).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the passenger data about the countesses on board of the Titanic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: (*Interested in her story? See* [Wikipedia](https://en.wikipedia.org/wiki/No%C3%ABl_Leslie,_Countess_of_Rothes)*!*)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The string method [`Series.str.contains()`](../../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") checks for each of the values in the column `Name`
    if the string contains the word `Countess` and returns for each of the values
    `True` (`Countess` is part of the name) or `False` (`Countess` is not part of
    the name). This output can be used to subselect the data using conditional (boolean)
    indexing introduced in the [subsetting of data tutorial](03_subset_data.html#min-tut-03-subset).
    As there was only one countess on the Titanic, we get one row as a result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: More powerful extractions on strings are supported, as the [`Series.str.contains()`](../../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") and [`Series.str.extract()`](../../reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract") methods accept [regular expressions](https://docs.python.org/3/library/re.html),
    but out of scope of this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More information on extracting parts of strings is available in the user guide
    section on [string matching and extracting](../../user_guide/text.html#text-extract).
  prefs: []
  type: TYPE_NORMAL
- en: Which passenger of the Titanic has the longest name?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To get the longest name we first have to get the lengths of each of the names
    in the `Name` column. By using pandas string methods, the [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len") function is applied to each of the names individually
    (element-wise).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to get the corresponding location, preferably the index label,
    in the table for which the name length is the largest. The [`idxmax()`](../../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") method does exactly that. It is not a string method and
    is applied to integers, so no `str` is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Based on the index name of the row (`307`) and the column (`Name`), we can do
    a selection using the `loc` operator, introduced in the [tutorial on subsetting](03_subset_data.html#min-tut-03-subset).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the “Sex” column, replace values of “male” by “M” and values of “female”
    by “F”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Whereas [`replace()`](../../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") is not a string method, it provides a convenient way
    to use mappings or vocabularies to translate certain values. It requires a `dictionary`
    to define the mapping `{from : to}`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a [`replace()`](../../reference/api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace") method available to replace a specific set of characters.
    However, when having a mapping of multiple values, this would become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This would become cumbersome and easily lead to mistakes. Just think (or try
    out yourself) what would happen if those two statements are applied in the opposite
    order…
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: String methods are available using the `str` accessor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String methods work element-wise and can be used for conditional indexing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `replace` method is a convenient method to convert values according to a
    given dictionary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full overview is provided in the user guide pages on [working with text data](../../user_guide/text.html#text).
  prefs: []
  type: TYPE_NORMAL
