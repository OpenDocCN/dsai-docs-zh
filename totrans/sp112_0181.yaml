- en: scipy.interpolate.RectBivariateSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bivariate spline approximation over a rectangular mesh.
  prefs: []
  type: TYPE_NORMAL
- en: Can be used for both smoothing and interpolating data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x,y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D arrays of coordinates in strictly ascending order. Evaluated points outside
    the data range will be extrapolated.
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 2-D array of data with shape (x.size,y.size).
  prefs: []
  type: TYPE_NORMAL
- en: '**bbox**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of length 4 specifying the boundary of the rectangular approximation
    domain, which means the start and end spline knots of each dimension are set by
    these values. By default, `bbox=[min(x), max(x), min(y), max(y)]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**kx, ky**ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Degrees of the bivariate spline. Default is 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Positive smoothing factor defined for estimation condition: `sum((z[i]-f(x[i],
    y[i]))**2, axis=0) <= s` where f is a spline function. Default is `s=0`, which
    is for interpolation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a base class for bivariate splines.
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smooth univariate spline to fit a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothBivariateSpline`](scipy.interpolate.SmoothBivariateSpline.html#scipy.interpolate.SmoothBivariateSpline
    "scipy.interpolate.SmoothBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline through the given points
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQBivariateSpline`](scipy.interpolate.LSQBivariateSpline.html#scipy.interpolate.LSQBivariateSpline
    "scipy.interpolate.LSQBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectSphereBivariateSpline`](scipy.interpolate.RectSphereBivariateSpline.html#scipy.interpolate.RectSphereBivariateSpline
    "scipy.interpolate.RectSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh on a sphere
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothSphereBivariateSpline`](scipy.interpolate.SmoothSphereBivariateSpline.html#scipy.interpolate.SmoothSphereBivariateSpline
    "scipy.interpolate.SmoothSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline in spherical coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQSphereBivariateSpline`](scipy.interpolate.LSQSphereBivariateSpline.html#scipy.interpolate.LSQSphereBivariateSpline
    "scipy.interpolate.LSQSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline in spherical coordinates using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find a bivariate B-spline representation of a surface
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a bivariate B-spline and its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the input data is such that input dimensions have incommensurate units and
    differ by many orders of magnitude, the interpolant may have numerical artifacts.
    Consider rescaling the data before interpolating.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.RectBivariateSpline.__call__.html#scipy.interpolate.RectBivariateSpline.__call__
    "scipy.interpolate.RectBivariateSpline.__call__")(x, y[, dx, dy, grid]) | Evaluate
    the spline or its derivatives at given positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ev`](scipy.interpolate.RectBivariateSpline.ev.html#scipy.interpolate.RectBivariateSpline.ev
    "scipy.interpolate.RectBivariateSpline.ev")(xi, yi[, dx, dy]) | Evaluate the spline
    at points |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_coeffs`](scipy.interpolate.RectBivariateSpline.get_coeffs.html#scipy.interpolate.RectBivariateSpline.get_coeffs
    "scipy.interpolate.RectBivariateSpline.get_coeffs")() | Return spline coefficients.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_knots`](scipy.interpolate.RectBivariateSpline.get_knots.html#scipy.interpolate.RectBivariateSpline.get_knots
    "scipy.interpolate.RectBivariateSpline.get_knots")() | Return a tuple (tx,ty)
    where tx,ty contain knots positions of the spline with respect to x-, y-variable,
    respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_residual`](scipy.interpolate.RectBivariateSpline.get_residual.html#scipy.interpolate.RectBivariateSpline.get_residual
    "scipy.interpolate.RectBivariateSpline.get_residual")() | Return weighted sum
    of squared residuals of the spline approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`integral`](scipy.interpolate.RectBivariateSpline.integral.html#scipy.interpolate.RectBivariateSpline.integral
    "scipy.interpolate.RectBivariateSpline.integral")(xa, xb, ya, yb) | Evaluate the
    integral of the spline over area [xa,xb] x [ya,yb]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partial_derivative`](scipy.interpolate.RectBivariateSpline.partial_derivative.html#scipy.interpolate.RectBivariateSpline.partial_derivative
    "scipy.interpolate.RectBivariateSpline.partial_derivative")(dx, dy) | Construct
    a new spline representing a partial derivative of this spline. |'
  prefs: []
  type: TYPE_TB
