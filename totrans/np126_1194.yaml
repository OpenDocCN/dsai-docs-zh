- en: NumPy 1.4.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.4.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.4.0-notes.html](https://numpy.org/doc/1.26/release/1.4.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/1.26/release/1.4.0-notes.html](https://numpy.org/doc/1.26/release/1.4.0-notes.html)'
- en: This minor includes numerous bug fixes, as well as a few new features. It is
    backward compatible with 1.3.0 release.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此次小版本更新包含了众多错误修复和一些新功能。与1.3.0版本兼容。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: New datetime dtype support to deal with dates in arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的日期时间 dtype 支持来处理数组中的日期
- en: Faster import time
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的导入时间
- en: Extended array wrapping mechanism for ufuncs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展了对于 ufuncs 的数组包装机制
- en: New Neighborhood iterator (C-level only)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的邻域迭代器（仅限 C 级别）
- en: C99-like complex functions in npymath
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 npymath 中，添加了类似于 C99 的复数函数
- en: New features
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Extended array wrapping mechanism for ufuncs
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展了对于 ufuncs 的数组包装机制
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray 添加了一个 __array_prepare__ 方法，以便为子类提供更大的灵活性与 ufuncs 和类似 ufunc 的函数进行交互。ndarray
    已经提供了 __array_wrap__，允许子类设置结果的数组类型并在从 ufunc 中输出时填充元数据（如在 MaskedArray 的实现中所见）。对于某些应用程序，在进行操作之前提供检查和填充元数据是必要的，即在计算结果并填充之前。因此，在
    ufunc 初始化输出数组后但计算结果和填充之前调用 __array_prepare__。这样就可以进行检查和引发错误，以防止可能会修改数据的操作。
- en: Automatic detection of forward incompatibilities
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动检测向前不兼容性
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，如果一个扩展是针对 NumPy 的版本 N 构建的，并在具有 NumPy M < N 的系统上使用，那么 import_array 将会成功，这可能导致崩溃，因为版本
    M 中没有 N 中的某个函数。自 NumPy 1.4.0 开始，这将导致 import_array 失败，因此错误将被及早捕获。
- en: New iterators
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的迭代器
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个新的邻域迭代器到 C API 中。它可用于迭代数组邻域中的项目，并且可以自动处理边界条件。可用的填充方式包括零填充和一填充，以及任意常数值、镜像和循环填充。
- en: New polynomial support
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的多项式支持
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了新的模块 chebyshev 和 polynomial。新的 polynomial 模块与 numpy 中当前的多项式支持不兼容，但与新的 chebyshev
    模块非常相似。对于大多数人来说，最显著的不同之处在于系数的指数从低到高进行指定，低级函数不使用 Chebyshev 和 Polynomial 类作为参数，并且
    Chebyshev 和 Polynomial 类都包含一个范围。跨域之间的映射是线性替换，这两个类可以互相转换，例如一个域中的 Chebyshev 级数可以在另一个域中展开为多项式。新类通常应该替换低级函数，后者适用于希望构建自己的类的用户。
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新的模块不会自动导入到 numpy 命名空间中，必须使用 "import numpy.polynomial" 语句显式导入。
- en: New C API
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 C API
- en: 'The following C functions have been added to the C API:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下列 C 函数已添加到 C API 中：
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  id: totrans-21
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_GetNDArrayCFeatureVersion：返回加载的numpy的*API*版本。
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_Correlate2 - 类似于PyArray_Correlate，但实现了常规相关性的定义。 输入不会进行交换，并且对于复杂数组会进行共轭。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_NeighborhoodIterNew：一个新的迭代器，用于在一个点的邻域上进行迭代，并处理自动边界。它在C-API参考的迭代器部分有详细文档，你可以在numpy.core的multiarray_test.c.src文件中找到一些示例。
- en: New ufuncs
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的ufuncs
- en: 'The following ufuncs have been added to the C API:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下列ufuncs已添加到C API中：
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: copysign - 返回第一个参数的值，并用第二个参数的符号复制。
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  id: totrans-33
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: nextafter - 返回第一个参数朝向第二个参数的下一个可表示的浮点值。
- en: New defines
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新定义
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: alpha处理器现在已在numpy/npy_cpu.h中定义并可用。 已修复了对PARISC处理器的检测失败。 这些定义是：
- en: 'NPY_CPU_HPPA: PARISC'
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_HPPA：PARISC
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_ALPHA：Alpha
- en: Testing
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弃用的装饰器：这个装饰器可用于在测试引发DeprecationWarning时避免混乱的测试输出。
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_array_almost_equal_nulp：比较两个浮点值数组的新方法。 使用此函数，如果两个值之间没有很多可表示的浮点值，那么它们被视为接近，因此在值波动很大时比assert_array_almost_equal更稳健。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_array_max_ulp：如果两个浮点值之间有超过N个可表示的数字，则引发断言。
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_warns：如果可调用对象不生成适当类别的警告，则引发AssertionError，而不会更改警告状态。
- en: Reusing npymath
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重用npymath
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.3.0中，我们开始将可移植的C数学例程放在npymath库中，以便人们可以使用它们来编写可移植的扩展。不幸的是，很难轻松地链接到这个库：在1.4.0中，numpy.distutils增加了支持，以便第三方可以重用这个库。有关更多信息，请参阅coremath文档。
- en: Improved set operations
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的集合操作
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy先前版本中，一些集合函数（intersect1d，setxor1d，setdiff1d和setmember1d）如果输入数组包含重复项，则可能返回不正确的结果。
    现在这些函数对包含重复项的输入数组能够正确工作。 setmember1d已重命名为in1d，因为随着接受包含重复项的数组，它不再是一个集合操作，而且在概念上类似于Python运算符'in'的逐元素版本。所有这些函数现在都接受布尔关键字assume_unique。
    默认情况下，这是False，但如果已知输入数组不包含重复项，则可以将其设置为True，这可以增加函数的执行速度。
- en: Improvements
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: numpy import is noticeably faster (from 20 to 30 % depending on the platform
    and computer)
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy导入速度明显更快（根据平台和计算机的不同，从20％到30％）
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The sort functions now sort nans to the end.
  id: totrans-59
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在排序函数会将nan排在最后。
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Real sort order is [R, nan]
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真实的排序顺序是[R，nan]
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex sort order is [R + Rj, R + nanj, nan + Rj, nan + nanj]
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数排序顺序为[R + Rj, R + nanj, nan + Rj, nan + nanj]
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-68
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex numbers with the same nan placements are sorted according to the non-nan
    part if it exists.
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有相同nan放置的复数按照非nan部分排序。
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The type comparison functions have been made consistent with the new sort order
    of nans. Searchsorted now works with sorted arrays containing nan values.
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型比较函数与nans的新排序顺序保持一致。Searchsorted现在可以处理包含nan值的排序数组。
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex division has been made more resistant to overflow.
  id: totrans-76
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复数除法更加抗溢出。
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex floor division has been made more resistant to overflow.
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复杂数值的整数除法更加抗溢出。
- en: Deprecations
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 废弃功能
- en: 'The following functions are deprecated:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数已被弃用：
- en: 'correlate: it takes a new keyword argument old_behavior. When True (the default),
    it returns the same result as before. When False, compute the conventional correlation,
    and take the conjugate for complex arrays. The old behavior will be removed in
    NumPy 1.5, and raises a DeprecationWarning in 1.4.'
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关性：它采用一个新的关键字参数old_behavior。当为True（默认值）时，它返回与以前相同的结果。当为False时，计算传统相关性，并对复数数组取共轭。旧行为将在NumPy
    1.5中被删除，并在1.4中引发DeprecationWarning。
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'unique1d: use unique instead. unique1d raises a deprecation warning in 1.4,
    and will be removed in 1.5.'
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: unique1d：使用unique代替。unique1d在1.4版将发出弃用警告，并将在1.5版中删除。
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'intersect1d_nu: use intersect1d instead. intersect1d_nu raises a deprecation
    warning in 1.4, and will be removed in 1.5.'
  id: totrans-88
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: intersect1d_nu：使用intersect1d代替。intersect1d_nu在1.4版将发出弃用警告，并将在1.5版中删除。
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'setmember1d: use in1d instead. setmember1d raises a deprecation warning in
    1.4, and will be removed in 1.5.'
  id: totrans-91
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: setmember1d：使用in1d代替。setmember1d在1.4版将发出弃用警告，并将在1.5版中删除。
- en: 'The following raise errors:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下引发错误：
- en: When operating on 0-d arrays, `numpy.max` and other functions accept only `axis=0`,
    `axis=-1` and `axis=None`. Using an out-of-bounds axes is an indication of a bug,
    so Numpy raises an error for these cases now.
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当操作0维数组时，`numpy.max`和其他函数仅接受`axis = 0`，`axis = -1`和`axis = None`。使用超出边界的轴是一个错误的指示，所以Numpy现在对这些情况报错。
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specifying `axis > MAX_DIMS` is no longer allowed; Numpy raises now an error
    instead of behaving similarly as for `axis=None`.
  id: totrans-96
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不再允许指定`axis> MAX_DIMS`；Numpy现在会报错，而不是对`axis = None`做出类似的行为。
- en: Internal changes
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部更改
- en: Use C99 complex functions when available
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在可用时使用C99复数函数
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果平台支持，numpy复数类型现在保证与C99复数类型ABI兼容。此外，复数ufunc现在使用平台C99函数而不是自己的函数。
- en: split multiarray and umath source code
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分multiarray和umath源代码
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: multiarray和umath的源代码已拆分为独立的逻辑编译单元。这应该使得新手更容易阅读源代码。
- en: Separate compilation
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独的编译
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，multiarray（和umath）的每个文件将合并为一个文件进行编译，但如果NPY_SEPARATE_COMPILATION环境变量设置为非负值，则启用每个文件的实验性单独编译。这使得在核心numpy上的编译/调试周期更快。
- en: Separate core math library
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独的核心数学库
- en: 'New functions which have been added:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了以下函数：
- en: npy_copysign
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_copysign
- en: ''
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_nextafter
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpack
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-114
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  id: totrans-115
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_creal
- en: ''
  id: totrans-116
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-117
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  id: totrans-118
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cimag
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  id: totrans-121
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cabs
- en: ''
  id: totrans-122
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  id: totrans-124
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cexp
- en: ''
  id: totrans-125
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  id: totrans-127
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_clog
- en: ''
  id: totrans-128
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  id: totrans-130
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpow
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  id: totrans-133
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csqr
- en: ''
  id: totrans-134
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  id: totrans-136
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_ccos
- en: ''
  id: totrans-137
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-138
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  id: totrans-139
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csin
- en: Highlights
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: New datetime dtype support to deal with dates in arrays
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新的日期时间dtype支持，以处理数组中的日期。 '
- en: Faster import time
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入时间更快
- en: Extended array wrapping mechanism for ufuncs
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对ufuncs进行扩展数组包装机制
- en: New Neighborhood iterator (C-level only)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的邻域迭代器（仅限C级别）
- en: C99-like complex functions in npymath
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npymath中类似C99的复数函数
- en: New features
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Extended array wrapping mechanism for ufuncs
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对ufuncs进行扩展数组包装机制
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray已添加了__array_prepare__方法，为子类提供与ufunc和类似ufunc函数更大的灵活性进行交互。ndarray已提供__array_wrap__，允许子类设置结果的数组类型并在ufunc输出时填充元数据（如在MaskedArray的实现中所见）。对于某些应用程序，有必要在“进入”过程中提供检查和填充元数据。因此，__array_prepare__在ufunc初始化输出数组后但在计算结果和填充结果之前调用。通过这种方式，可以在可能修改数据的操作之前进行检查并引发错误。
- en: Automatic detection of forward incompatibilities
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动检测向前不兼容性
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，如果扩展程序是根据NumPy的版本N进行构建的，并且在具有NumPy M < N的系统上使用，import_array将成功，这可能导致崩溃，因为版本M中没有版本N中的函数。从NumPy
    1.4.0开始，这将导致import_array失败，因此错误将被及早捕获。
- en: New iterators
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的迭代器
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: C API中添加了一个新的邻域迭代器。它可用于迭代数组的邻域项，并且可以自动处理边界条件。可以使用零和一填充，以及任意的常数值，镜像和循环填充。
- en: New polynomial support
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的多项式支持
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加了模块chebyshev和polynomial。新的polynomial模块与numpy中现有的多项式支持不兼容，但与新的chebyshev模块类似。对于大多数人来说，最明显的区别是系数从低到高幂次的顺序，低级函数与Chebyshev和Polynomial类作为参数不起作用，并且Chebyshev和Polynomial类包含一个定义域。域之间的映射是线性替换，两个类可以互相转换，例如，在一个域中的Chebyshev系列可以在另一个域中展开为多项式。新的类应该通常用于替代低级函数，后者提供给那些希望构建自己类的人使用。
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 新的模块不会自动导入numpy命名空间，必须使用“import numpy.polynomial”语句显式引入它们。
- en: New C API
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的C API
- en: 'The following C functions have been added to the C API:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 已向C API添加了以下C函数：
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  id: totrans-158
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_GetNDArrayCFeatureVersion：返回加载的numpy的*API*版本。
- en: ''
  id: totrans-159
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-160
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  id: totrans-161
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_Correlate2 - 类似于PyArray_Correlate，但实现了经典的相关性定义。输入未进行交换，并且对于复数数组，进行共轭操作。
- en: ''
  id: totrans-162
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-163
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  id: totrans-164
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_NeighborhoodIterNew - 一个新的迭代器，用于迭代点的邻域，并自动处理边界。在C-API参考的迭代器部分有文档介绍，在numpy.core的multiarray_test.c.src文件中可以找到一些示例。
- en: New ufuncs
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的ufuncs
- en: 'The following ufuncs have been added to the C API:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 已向C API添加了以下ufuncs：
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  id: totrans-167
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: copysign - 返回从第二个参数复制标志的第一个参数的值。
- en: ''
  id: totrans-168
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-169
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  id: totrans-170
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: nextafter - 返回第一个参数朝向第二个参数的下一个可表示浮点值。
- en: New defines
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的定义
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 numpy/npy_cpu.h 中定义并可用的 alpha 处理器。已修复对 PARISC 处理器的检测失败。这些定义是：
- en: 'NPY_CPU_HPPA: PARISC'
  id: totrans-173
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_HPPA：PARISC
- en: ''
  id: totrans-174
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  id: totrans-176
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_ALPHA：Alpha
- en: Testing
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  id: totrans-178
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 废弃的装饰器：可以使用此装饰器来避免在测试时垃圾数据测试输出，同时确保修饰的测试有效引发 DeprecationWarning。
- en: ''
  id: totrans-179
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-180
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  id: totrans-181
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_array_almost_equal_nulp：用于比较两个浮点值数组的新方法。通过该函数，如果两个值之间没有很多可表示的浮点值，则被认为是接近的，因此比
    assert_array_almost_equal 在值波动很大时更加健壮。
- en: ''
  id: totrans-182
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-183
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  id: totrans-184
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_array_max_ulp：如果两个浮点值之间有多于 N 个可表示数，就引发一个断言。
- en: ''
  id: totrans-185
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-186
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  id: totrans-187
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: assert_warns：如果可调用对象未生成适当类别的警告，则引发AssertionError，而不更改警告状态。
- en: Reusing npymath
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重用 npymath
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.3.0 版本中，我们开始将可移植的 C 数学例程放在 npymath 库中，以便人们可以使用它们来编写可移植的扩展。不幸的是，很难与此库进行链接：在
    1.4.0 版本中，numpy.distutils 添加了对此库进行重用的支持。有关更多信息，请参阅 coremath 文档。
- en: Improved set operations
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的集合操作
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 的先前版本中，如果输入数组包含重复项，一些设置函数（intersect1d、setxor1d、setdiff1d 和 setmember1d）可能返回不正确的结果。现在，对于包含重复项的输入数组，这些函数现在能够正确工作。setmember1d
    已重命名为 in1d，因为随着接受包含重复项的数组的变更，它不再是一个集合操作，而且在概念上类似于 Python 运算符 'in' 的元素级版本。所有这些函数现在都接受布尔关键字
    assume_unique。这默认为 False，但如果已知输入数组不包含重复项，则可以设置为 True，这可以提高函数的执行速度。
- en: Extended array wrapping mechanism for ufuncs
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 ufuncs 的扩展数组包装机制
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray 添加了一个 __array_prepare__ 方法，以便为子类提供更大的灵活性与 ufuncs 和类似 ufunc 的函数交互。ndarray
    已经提供了 __array_wrap__，它允许子类设置结果的数组类型并在ufunc返回结果时填充元数据（如 MaskedArray 的实现中所见）。对于某些应用程序，有必要在进行运算之前提供检查和填充元数据。因此，在初始化输出数组但在计算结果和填充之前，即可调用
    __array_prepare__。这样，就可以进行检查并在可能修改数据的操作之前引发错误。
- en: Automatic detection of forward incompatibilities
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发现向前不兼容的自动检测
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，如果扩展是针对版本N的NumPy构建的，并且在具有NumPy M < N的系统上使用，则import_array将成功，这可能会导致崩溃，因为版本M中没有版本N的功能。从NumPy
    1.4.0开始，这将导致import_array失败，因此错误将被早期捕获。
- en: New iterators
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新迭代器
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 新的邻域迭代器已添加到C API中。它可用于在数组的邻域中迭代项目，并可以自动处理边界条件。可以使用零和一填充，以及任意常数值，镜像和循环填充。
- en: New polynomial support
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的多项式支持
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加新模块chebyshev和polynomial。新的多项式模块与numpy中当前的多项式支持不兼容，但与新的chebyshev模块相似。对大多数人来说，最明显的区别是系数是从低到高阶指定，低级函数不与Chebyshev和Polynomial类作为参数一起工作，并且Chebyshev和Polynomial类包含一个域。域之间的映射是线性替换，两个类可以彼此转换，例如，一个域中的Chebyshev级数可以扩展为另一个域中的多项式。通常应使用新类，而不是低级函数，后者是为那些希望构建自己的类的人提供的。
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 新模块不会自动导入numpy命名空间，必须通过“import numpy.polynomial”语句明确导入。
- en: New C API
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新C API
- en: 'The following C functions have been added to the C API:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下列C函数已添加到C API中：
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  id: totrans-203
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_GetNDArrayCFeatureVersion：返回加载的numpy的*API*版本。
- en: ''
  id: totrans-204
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-205
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  id: totrans-206
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_Correlate2 - 像PyArray_Correlate一样，但实现了常规的相关性定义。输入不会交换，并且对于复数数组会取共轭。
- en: ''
  id: totrans-207
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-208
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  id: totrans-209
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyArray_NeighborhoodIterNew - 一个新的迭代器，可用于迭代点的邻域，并具有自动边界处理。在C-API参考的迭代器部分中有文档，您可以在numpy.core的multiarray_test.c.src文件中找到一些示例。
- en: New ufuncs
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新ufuncs
- en: 'The following ufuncs have been added to the C API:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 下列ufuncs已添加到C API中：
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  id: totrans-212
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: copysign - 返回具有从第二个参数复制的符号的第一个参数的值。
- en: ''
  id: totrans-213
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-214
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  id: totrans-215
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: nextafter - 返回第一个参数朝向第二个参数的下一个可表示的浮点值。
- en: New defines
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新定义
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在numpy/npy_cpu.h中定义并可用的alpha处理器。已修复PARISC处理器的检测失败。定义如下：
- en: 'NPY_CPU_HPPA: PARISC'
  id: totrans-218
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_HPPA：PARISC
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-220
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  id: totrans-221
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: NPY_CPU_ALPHA：Alpha
- en: Testing
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Testing
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  id: totrans-223
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弃用的装饰器：此装饰器可用于在测试DeprecationWarning在被装饰的测试中有效触发的同时避免使测试输出混乱。
- en: ''
  id: totrans-224
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-225
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  id: totrans-226
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'assert_array_almost_equal_nulp: 用于比较两个浮点值数组的新方法。使用此函数，如果两个值之间没有许多可表示的浮点值，那么它们被认为是接近的，因此比较多变的assert_array_almost_equal更加耐用。'
- en: ''
  id: totrans-227
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-228
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  id: totrans-229
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'assert_array_max_ulp: 如果两个浮点值之间有N个可表示的数字，则引发断言。'
- en: ''
  id: totrans-230
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-231
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  id: totrans-232
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'assert_warns: 如果可调用对象未生成适当类别的警告，则引发AssertionError，而不会更改警告状态。'
- en: Reusing npymath
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重用npymath
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.3.0版本中，我们开始将可移植的C数学函数放入npymath库中，以便人们可以使用这些函数编写可移植的扩展。不幸的是，很难轻松地链接到此库：在1.4.0版本中，numpy.distutils添加了对此库的支持，以便第三方可以重用此库。有关更多信息，请参见coremath文档。
- en: Improved set operations
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的集合操作
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的NumPy版本中，如果输入数组包含重复项，则某些集合函数（intersect1d、setxor1d、setdiff1d和setmember1d）可能会返回不正确的结果。现在，这些函数已正确处理具有重复项的输入数组。setmember1d已重命名为in1d，因为随着接受包含重复项的数组的更改，它不再是一个集合操作，并且从概念上类似于Python运算符'in'的逐元素版本。所有这些函数现在接受布尔关键字assume_unique。默认情况下为False，但如果已知输入数组不包含重复项，则可以将其设置为True，这可以提高函数的执行速度。
- en: Improvements
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: numpy import is noticeably faster (from 20 to 30 % depending on the platform
    and computer)
  id: totrans-238
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy导入速度明显提高（根据平台和计算机不同，提高了20至30％）
- en: ''
  id: totrans-239
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-240
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The sort functions now sort nans to the end.
  id: totrans-241
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: sort函数现在将nan排序到末尾。
- en: ''
  id: totrans-242
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-243
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-244
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Real sort order is [R, nan]
  id: totrans-245
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实数排序顺序是[R, nan]
- en: ''
  id: totrans-246
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex sort order is [R + Rj, R + nanj, nan + Rj, nan + nanj]
  id: totrans-248
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂排序顺序是[R + Rj, R + nanj, nan + Rj, nan + nanj]
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-250
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex numbers with the same nan placements are sorted according to the non-nan
    part if it exists.
  id: totrans-252
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果复杂数具有相同的nan位置，则根据非nan部分（如果存在）对其进行排序。
- en: ''
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The type comparison functions have been made consistent with the new sort order
    of nans. Searchsorted now works with sorted arrays containing nan values.
  id: totrans-255
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型比较函数已与nan的新排序一致。现在，对包含nan值的排序数组进行搜索现在可以使用searchsorted。
- en: ''
  id: totrans-256
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-257
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex division has been made more resistant to overflow.
  id: totrans-258
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复杂除法现在对溢出更加抗性强。
- en: ''
  id: totrans-259
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-260
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex floor division has been made more resistant to overflow.
  id: totrans-261
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复杂整除现在对溢出更加抗性强。
- en: Deprecations
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: 'The following functions are deprecated:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数已弃用：
- en: 'correlate: it takes a new keyword argument old_behavior. When True (the default),
    it returns the same result as before. When False, compute the conventional correlation,
    and take the conjugate for complex arrays. The old behavior will be removed in
    NumPy 1.5, and raises a DeprecationWarning in 1.4.'
  id: totrans-264
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'correlate: 增加了一个新的关键字参数old_behavior。当True（默认值）时，返回与以前相同的结果。当为False时，计算常规相关性，并针对复数数组取共轭。旧行为将在NumPy
    1.5中移除，并在1.4中引发弃用警告。'
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-266
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'unique1d: use unique instead. unique1d raises a deprecation warning in 1.4,
    and will be removed in 1.5.'
  id: totrans-267
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'unique1d: 使用unique代替。unique1d在1.4版本中引发弃用警告，并将在1.5版本中移除。'
- en: ''
  id: totrans-268
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-269
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'intersect1d_nu: use intersect1d instead. intersect1d_nu raises a deprecation
    warning in 1.4, and will be removed in 1.5.'
  id: totrans-270
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'intersect1d_nu: 使用intersect1d代替。intersect1d_nu在1.4版本中引发弃用警告，并将在1.5版本中移除。'
- en: ''
  id: totrans-271
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-272
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'setmember1d: use in1d instead. setmember1d raises a deprecation warning in
    1.4, and will be removed in 1.5.'
  id: totrans-273
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'setmember1d: 使用in1d代替。setmember1d在1.4版本中引发弃用警告，并将在1.5版本中移除。'
- en: 'The following raise errors:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下引发错误：
- en: When operating on 0-d arrays, `numpy.max` and other functions accept only `axis=0`,
    `axis=-1` and `axis=None`. Using an out-of-bounds axes is an indication of a bug,
    so Numpy raises an error for these cases now.
  id: totrans-275
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作0维数组时，`numpy.max`和其他函数仅接受`axis=0`、`axis=-1`和`axis=None`。使用超出边界的轴表示存在错误，因此Numpy现在对这些情况抛出错误。
- en: ''
  id: totrans-276
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-277
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specifying `axis > MAX_DIMS` is no longer allowed; Numpy raises now an error
    instead of behaving similarly as for `axis=None`.
  id: totrans-278
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不再允许指定 `axis > MAX_DIMS`；Numpy现在会抛出错误，而不是像`axis=None`一样处理。
- en: Internal changes
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部更改
- en: Use C99 complex functions when available
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在可用时使用C99复数函数
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果平台支持，则numpy复数类型现在保证与C99复数类型兼容。此外，复数ufunc现在使用平台的C99函数，而不是我们自己的函数。
- en: split multiarray and umath source code
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离multiarray和umath源代码
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: multiarray和umath的源代码已经分割为单独的逻辑编译单元。这样做可以使源代码更易于新手理解。
- en: Separate compilation
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离编译
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，multiarray（和umath）的每个文件都会被合并为一个文件进行编译，就像以前一样，但是如果NPY_SEPARATE_COMPILATION环境变量设置为非负值，则启用了每个文件的实验性个别编译。这使得在核心
    numpy 上工作时，编译/调试循环速度更快。
- en: Separate core math library
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离核心数学库
- en: 'New functions which have been added:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的函数：
- en: npy_copysign
  id: totrans-288
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_copysign
- en: ''
  id: totrans-289
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-290
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  id: totrans-291
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_nextafter
- en: ''
  id: totrans-292
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-293
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  id: totrans-294
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpack
- en: ''
  id: totrans-295
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-296
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  id: totrans-297
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_creal
- en: ''
  id: totrans-298
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-299
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  id: totrans-300
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cimag
- en: ''
  id: totrans-301
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-302
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  id: totrans-303
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cabs
- en: ''
  id: totrans-304
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-305
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  id: totrans-306
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cexp
- en: ''
  id: totrans-307
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-308
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  id: totrans-309
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_clog
- en: ''
  id: totrans-310
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-311
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  id: totrans-312
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpow
- en: ''
  id: totrans-313
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-314
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  id: totrans-315
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csqr
- en: ''
  id: totrans-316
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-317
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  id: totrans-318
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_ccos
- en: ''
  id: totrans-319
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-320
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  id: totrans-321
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csin
- en: Use C99 complex functions when available
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在可用时使用C99复数函数
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果平台支持，则numpy复数类型现在保证与C99复数类型兼容。此外，复数ufunc现在使用平台的C99函数，而不是我们自己的函数。
- en: split multiarray and umath source code
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离multiarray和umath源代码
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: multiarray和umath的源代码已经分割为单独的逻辑编译单元。这样做可以使源代码更易于新手理解。
- en: Separate compilation
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离编译
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，multiarray（和umath）的每个文件都会被合并为一个文件进行编译，就像以前一样，但是如果NPY_SEPARATE_COMPILATION环境变量设置为非负值，则启用了每个文件的实验性个别编译。这使得在核心
    numpy 上工作时，编译/调试循环速度更快。
- en: Separate core math library
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离核心数学库
- en: 'New functions which have been added:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的函数：
- en: npy_copysign
  id: totrans-330
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_copysign
- en: ''
  id: totrans-331
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-332
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  id: totrans-333
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_nextafter
- en: ''
  id: totrans-334
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-335
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  id: totrans-336
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpack
- en: ''
  id: totrans-337
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-338
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  id: totrans-339
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_creal
- en: ''
  id: totrans-340
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-341
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  id: totrans-342
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cimag
- en: ''
  id: totrans-343
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-344
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  id: totrans-345
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cabs
- en: ''
  id: totrans-346
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-347
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  id: totrans-348
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cexp
- en: ''
  id: totrans-349
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-350
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  id: totrans-351
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_clog
- en: ''
  id: totrans-352
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-353
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  id: totrans-354
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cpow
- en: ''
  id: totrans-355
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-356
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  id: totrans-357
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csqr
- en: ''
  id: totrans-358
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-359
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  id: totrans-360
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_ccos
- en: ''
  id: totrans-361
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-362
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  id: totrans-363
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_csin
