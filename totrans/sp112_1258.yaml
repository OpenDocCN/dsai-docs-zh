- en: scipy.stats.mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.mode.html#scipy.stats.mode](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.mode.html#scipy.stats.mode)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return an array of the modal (most common) value in the passed array.
  prefs: []
  type: TYPE_NORMAL
- en: If there is more than one such value, only one is returned. The bin-count for
    the modal bins is also returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric, n-dimensional array of which to find mode(s).
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: If an int, the axis of the input along which to compute the statistic. The statistic
    of each axis-slice (e.g. row) of the input will appear in a corresponding element
    of the output. If `None`, the input will be raveled before computing the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘omit’, ‘raise’}'
  prefs: []
  type: TYPE_NORMAL
- en: Defines how to handle input NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate`: if a NaN is present in the axis slice (e.g. row) along which the
    statistic is computed, the corresponding entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`omit`: NaNs will be omitted when performing the calculation. If insufficient
    data remains in the axis slice along which the statistic is computed, the corresponding
    entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise`: if a NaN is present, a `ValueError` will be raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keepdims**bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of modal values.
  prefs: []
  type: TYPE_NORMAL
- en: '**count**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of counts for each mode.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The mode is calculated using [`numpy.unique`](https://numpy.org/devdocs/reference/generated/numpy.unique.html#numpy.unique
    "(in NumPy v2.0.dev0)"). In NumPy versions 1.21 and after, all NaNs - even those
    with different binary representations - are treated as equivalent and counted
    as separate instances of the same value.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the mode of an empty array is NaN, and the associated count is
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in SciPy 1.9, `np.matrix` inputs (not recommended for new code) are
    converted to `np.ndarray` before the calculation is performed. In this case, the
    output will be a scalar or `np.ndarray` of appropriate shape rather than a 2D
    `np.matrix`. Similarly, while masked elements of masked arrays are ignored, the
    output will be a scalar or `np.ndarray` rather than a masked array with `mask=False`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To get mode of whole array, specify `axis=None`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
