- en: System configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/config.html](https://numpy.org/doc/1.26/reference/c-api/config.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When NumPy is built, information about system configuration is recorded, and
    is made available for extension modules using NumPy’s C API. These are mostly
    defined in `numpyconfig.h` (included in `ndarrayobject.h`). The public symbols
    are prefixed by `NPY_*`. NumPy also offers some functions for querying information
    about the platform in use.
  prefs: []
  type: TYPE_NORMAL
- en: For private use, NumPy also constructs a `config.h` in the NumPy include directory,
    which is not exported by NumPy (that is a python extension which use the numpy
    C API will not see those symbols), to avoid namespace pollution.
  prefs: []
  type: TYPE_NORMAL
- en: Data type sizes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NPY_SIZEOF_{CTYPE}` constants are defined so that sizeof information is
    available to the pre-processor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(short)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(int)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(long)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(longlong) where longlong is defined appropriately on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(float)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(double)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(longdouble)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Size of a pointer on this platform (sizeof(void *))
  prefs: []
  type: TYPE_NORMAL
- en: Platform information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: CPU architecture of the platform; only one of the above is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Defined in `numpy/npy_cpu.h`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Portable alternatives to the `endian.h` macros of GNU Libc. If big endian, [`NPY_BYTE_ORDER`](#c.NPY_BYTE_ORDER
    "NPY_BYTE_ORDER") == [`NPY_BIG_ENDIAN`](#c.NPY_BIG_ENDIAN "NPY_BIG_ENDIAN"), and
    similarly for little endian architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Defined in `numpy/npy_endian.h`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the endianness of the current platform. One of [`NPY_CPU_BIG`](#c.PyArray_GetEndianness.NPY_CPU_BIG
    "NPY_CPU_BIG"), [`NPY_CPU_LITTLE`](#c.PyArray_GetEndianness.NPY_CPU_LITTLE "NPY_CPU_LITTLE"),
    or [`NPY_CPU_UNKNOWN_ENDIAN`](#c.PyArray_GetEndianness.NPY_CPU_UNKNOWN_ENDIAN
    "NPY_CPU_UNKNOWN_ENDIAN").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Compiler directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Data type sizes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `NPY_SIZEOF_{CTYPE}` constants are defined so that sizeof information is
    available to the pre-processor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(short)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(int)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(long)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(longlong) where longlong is defined appropriately on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(float)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(double)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: sizeof(longdouble)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Size of a pointer on this platform (sizeof(void *))
  prefs: []
  type: TYPE_NORMAL
- en: Platform information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: CPU architecture of the platform; only one of the above is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Defined in `numpy/npy_cpu.h`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Portable alternatives to the `endian.h` macros of GNU Libc. If big endian, [`NPY_BYTE_ORDER`](#c.NPY_BYTE_ORDER
    "NPY_BYTE_ORDER") == [`NPY_BIG_ENDIAN`](#c.NPY_BIG_ENDIAN "NPY_BIG_ENDIAN"), and
    similarly for little endian architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Defined in `numpy/npy_endian.h`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the endianness of the current platform. One of [`NPY_CPU_BIG`](#c.PyArray_GetEndianness.NPY_CPU_BIG
    "NPY_CPU_BIG"), [`NPY_CPU_LITTLE`](#c.PyArray_GetEndianness.NPY_CPU_LITTLE "NPY_CPU_LITTLE"),
    or [`NPY_CPU_UNKNOWN_ENDIAN`](#c.PyArray_GetEndianness.NPY_CPU_UNKNOWN_ENDIAN
    "NPY_CPU_UNKNOWN_ENDIAN").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Compiler directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
