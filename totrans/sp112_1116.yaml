- en: scipy.stats.burr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.burr.html#scipy.stats.burr](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.burr.html#scipy.stats.burr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Burr (Type III) continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`burr`](#scipy.stats.burr "scipy.stats.burr")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fisk`](scipy.stats.fisk.html#scipy.stats.fisk "scipy.stats.fisk")'
  prefs: []
  type: TYPE_NORMAL
- en: a special case of either [`burr`](#scipy.stats.burr "scipy.stats.burr") or [`burr12`](scipy.stats.burr12.html#scipy.stats.burr12
    "scipy.stats.burr12") with `d=1`
  prefs: []
  type: TYPE_NORMAL
- en: '[`burr12`](scipy.stats.burr12.html#scipy.stats.burr12 "scipy.stats.burr12")'
  prefs: []
  type: TYPE_NORMAL
- en: Burr Type XII distribution
  prefs: []
  type: TYPE_NORMAL
- en: '[`mielke`](scipy.stats.mielke.html#scipy.stats.mielke "scipy.stats.mielke")'
  prefs: []
  type: TYPE_NORMAL
- en: Mielke Beta-Kappa / Dagum distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`burr`](#scipy.stats.burr "scipy.stats.burr")
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x; c, d) = c d \frac{x^{-c - 1}} {{(1 + x^{-c})}^{d + 1}}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(x >= 0\) and \(c, d > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`burr`](#scipy.stats.burr "scipy.stats.burr") takes `c` and `d` as shape parameters
    for \(c\) and \(d\).'
  prefs: []
  type: TYPE_NORMAL
- en: This is the PDF corresponding to the third CDF given in Burr’s list; specifically,
    it is equation (11) in Burr’s paper [[1]](#rc91cfc789af8-1). The distribution
    is also commonly referred to as the Dagum distribution [[2]](#rc91cfc789af8-2).
    If the parameter \(c < 1\) then the mean of the distribution does not exist and
    if \(c < 2\) the variance does not exist [[2]](#rc91cfc789af8-2). The PDF is finite
    at the left endpoint \(x = 0\) if \(c * d >= 1\).
  prefs: []
  type: TYPE_NORMAL
- en: The probability density above is defined in the “standardized” form. To shift
    and/or scale the distribution use the `loc` and `scale` parameters. Specifically,
    `burr.pdf(x, c, d, loc, scale)` is identically equivalent to `burr.pdf(y, c, d)
    / scale` with `y = (x - loc) / scale`. Note that shifting the location of a distribution
    does not make it a “noncentral” distribution; noncentral generalizations of some
    distributions are available in separate classes.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Burr, I. W. “Cumulative frequency functions”, Annals of Mathematical Statistics,
    13(2), pp 215-232 (1942).
  prefs: []
  type: TYPE_NORMAL
- en: '[2] ([1](#id2),[2](#id3))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dagum_distribution](https://en.wikipedia.org/wiki/Dagum_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: Kleiber, Christian. “A guide to the Dagum distributions.” Modeling Income Distributions
    and Lorenz Curves pp 97-117 (2008).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability density function (`pdf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape, location and scale parameters. This returns a “frozen” RV object holding
    the given parameters fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And compare the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-burr-1.png](../Images/ef0a1c75c9b079d18da635b88f633d88.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(c, d, loc=0, scale=1, size=1, random_state=None)** | Random variates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, c, d, loc=0, scale=1)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, c, d, loc=0, scale=1)** | Log of the probability density function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, c, d, loc=0, scale=1)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, c, d, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, c, d, loc=0, scale=1)** | Survival function (also defined as `1 -
    cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, c, d, loc=0, scale=1)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, c, d, loc=0, scale=1)** | Percent point function (inverse of `cdf`
    — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, c, d, loc=0, scale=1)** | Inverse survival function (inverse of
    `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, c, d, loc=0, scale=1)** | Non-central moment of the specified
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(c, d, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(c, d, loc=0, scale=1)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(c, d), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(c, d, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(c, d, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(c, d, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(c, d, loc=0, scale=1)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, c, d, loc=0, scale=1)** | Confidence interval with
    equal areas around the median. |'
  prefs: []
  type: TYPE_TB
