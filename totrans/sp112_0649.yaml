- en: scipy.signal.cwt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.cwt.html#scipy.signal.cwt](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.cwt.html#scipy.signal.cwt)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Continuous wavelet transform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.12.0: scipy.signal.cwt is deprecated in SciPy 1.12
    and will be removed in SciPy 1.15\. We recommend using PyWavelets instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Performs a continuous wavelet transform on *data*, using the *wavelet* function.
    A CWT performs a convolution with *data* using the *wavelet* function, which is
    characterized by a width parameter and length parameter. The *wavelet* function
    is allowed to be complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**(N,) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: data on which to perform the transform.
  prefs: []
  type: TYPE_NORMAL
- en: '**wavelet**function'
  prefs: []
  type: TYPE_NORMAL
- en: Wavelet function, which should take 2 arguments. The first argument is the number
    of points that the returned vector will have (len(wavelet(length,width)) == length).
    The second is a width parameter, defining the size of the wavelet (e.g. standard
    deviation of a gaussian). See [`ricker`](scipy.signal.ricker.html#scipy.signal.ricker
    "scipy.signal.ricker"), which satisfies these requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '**widths**(M,) sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Widths to use for transform.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The desired data type of output. Defaults to `float64` if the output of *wavelet*
    is real and `complex128` if it is complex.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments passed to wavelet function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'cwt: (M, N) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Will have shape of (len(widths), len(data)).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: For non-symmetric, complex-valued wavelets, the input signal is convolved with
    the time-reversed complex-conjugate of the wavelet data [1].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: S. Mallat, “A Wavelet Tour of Signal Processing (3rd Edition)”, Academic Press,
    2009.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For cwt matrix plotting it is advisable to flip the y-axis
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-cwt-1.png](../Images/6514c860ece9bd403d4a1009e6b6f6ca.png)'
  prefs: []
  type: TYPE_IMG
