- en: numpy.block
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.block
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.block.html](https://numpy.org/doc/1.26/reference/generated/numpy.block.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.block.html](https://numpy.org/doc/1.26/reference/generated/numpy.block.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Assemble an nd-array from nested lists of blocks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从嵌套的区块列表组装一个多维数组。
- en: Blocks in the innermost lists are concatenated (see [`concatenate`](numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate")) along the last dimension (-1), then these are concatenated
    along the second-last dimension (-2), and so on until the outermost list is reached.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 内部列表的区块将沿着最后一个维度（-1）进行连接（参见[`concatenate`](numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate")），然后沿着倒数第二个维度（-2）进行连接，依此类推，直到达到最外部的列表。
- en: Blocks can be of any dimension, but will not be broadcasted using the normal
    rules. Instead, leading axes of size 1 are inserted, to make `block.ndim` the
    same for all blocks. This is primarily useful for working with scalars, and means
    that code like `np.block([v, 1])` is valid, where `v.ndim == 1`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 区块可以是任何维度，但是不会使用正常规则进行广播。而是插入大小为 1 的前导轴，以使所有区块的 `block.ndim` 相同。这对于使用标量特别有用，这意味着像
    `np.block([v, 1])` 这样的代码是有效的，其中 `v.ndim == 1`。
- en: When the nested list is two levels deep, this allows block matrices to be constructed
    from their components.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当嵌套列表有两个等级时，这允许从它们的组件构造区块矩阵。
- en: New in version 1.13.0.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.13.0 中的新功能。
- en: 'Parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**arrays**nested list of array_like or scalars (but not tuples)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**arrays**嵌套数组或标量的列表（但不是元组）'
- en: If passed a single ndarray or scalar (a nested list of depth 0), this is returned
    unmodified (and not copied).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递单个 ndarray 或标量（深度为 0 的嵌套列表），则返回未修改的副本（无复制）。
- en: Elements shapes must match along the appropriate axes (without broadcasting),
    but leading 1s will be prepended to the shape as necessary to make the dimensions
    match.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的形状必须在适当的轴上匹配（不使用广播），但是会在需要时添加前导 1 使维度匹配。
- en: 'Returns:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**block_array**ndarray'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**block_array**ndarray'
- en: The array assembled from the given blocks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由给定的区块组装的数组。
- en: 'The dimensionality of the output is equal to the greatest of: * the dimensionality
    of all the inputs * the depth to which the input list is nested'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的维度等于以下两者中的最大值：* 所有输入的维度 * 输入列表嵌套的深度
- en: 'Raises:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: ValueError
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ValueError
- en: If list depths are mismatched - for instance, `[[a, b], c]` is illegal, and
    should be spelt `[[a, b], [c]]`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列表的深度不匹配——例如，`[[a, b], c]` 是不合法的，应该拼写为 `[[a, b], [c]]`
- en: If lists are empty - for instance, `[[a, b], []]`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列表为空——例如，`[[a, b], []]`
- en: See also
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
- en: Join a sequence of arrays along an existing axis.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 沿现有轴连接数组的序列。
- en: '[`stack`](numpy.stack.html#numpy.stack "numpy.stack")'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`stack`](numpy.stack.html#numpy.stack "numpy.stack")'
- en: Join a sequence of arrays along a new axis.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将一系列数组沿新轴连接。
- en: '[`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack")'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack")'
- en: Stack arrays in sequence vertically (row wise).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 按行添加序列地堆叠数组。
- en: '[`hstack`](numpy.hstack.html#numpy.hstack "numpy.hstack")'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hstack`](numpy.hstack.html#numpy.hstack "numpy.hstack")'
- en: Stack arrays in sequence horizontally (column wise).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按列序列地堆叠数组。
- en: '[`dstack`](numpy.dstack.html#numpy.dstack "numpy.dstack")'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dstack`](numpy.dstack.html#numpy.dstack "numpy.dstack")'
- en: Stack arrays in sequence depth wise (along third axis).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按深度顺序沿第三个轴堆叠序列数组。
- en: '[`column_stack`](numpy.column_stack.html#numpy.column_stack "numpy.column_stack")'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`column_stack`](numpy.column_stack.html#numpy.column_stack "numpy.column_stack")'
- en: Stack 1-D arrays as columns into a 2-D array.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将 1 维数组作为列堆叠到 2 维数组。
- en: '[`vsplit`](numpy.vsplit.html#numpy.vsplit "numpy.vsplit")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`vsplit`](numpy.vsplit.html#numpy.vsplit "numpy.vsplit")'
- en: Split an array into multiple sub-arrays vertically (row-wise).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组垂直（按行）分割为多个子数组。
- en: Notes
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When called with only scalars, `np.block` is equivalent to an ndarray call.
    So `np.block([[1, 2], [3, 4]])` is equivalent to `np.array([[1, 2], [3, 4]])`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅使用标量调用时，`np.block` 等效于一个 ndarray 调用。因此，`np.block([[1, 2], [3, 4]])` 等效于 `np.array([[1,
    2], [3, 4]])`。
- en: 'This function does not enforce that the blocks lie on a fixed grid. `np.block([[a,
    b], [c, d]])` is not restricted to arrays of the form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数不强制区块位于固定网格上。`np.block([[a, b], [c, d]])` 不限于以下形式的数组：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But is also allowed to produce, for some `a, b, c, d`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 也允许为一些 `a, b, c, d` 产生：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since concatenation happens along the last axis first, [`block`](#numpy.block
    "numpy.block") is _not_ capable of producing the following directly:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于连接首先沿最后一个轴发生，[`block`](#numpy.block "numpy.block") 不能直接产生以下结果：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Matlab’s “square bracket stacking”, `[A, B, ...; p, q, ...]`, is equivalent
    to `np.block([[A, B, ...], [p, q, ...]])`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Matlab 的 “方括号堆叠”, `[A, B, ...; p, q, ...]`, 等同于 `np.block([[A, B, ...], [p,
    q, ...]])`。
- en: Examples
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: The most common use of this function is to build a block matrix
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数最常见的用法是构建一个分块矩阵。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With a list of depth 1, [`block`](#numpy.block "numpy.block") can be used as
    [`hstack`](numpy.hstack.html#numpy.hstack "numpy.hstack")
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个深度为 1 的列表时，[`block`](#numpy.block "numpy.block") 可以作为 [`hstack`](numpy.hstack.html#numpy.hstack
    "numpy.hstack") 使用。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With a list of depth 2, [`block`](#numpy.block "numpy.block") can be used in
    place of [`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack"):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个深度为 2 的列表时，[`block`](#numpy.block "numpy.block") 可以替代 [`vstack`](numpy.vstack.html#numpy.vstack
    "numpy.vstack")：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It can also be used in places of [`atleast_1d`](numpy.atleast_1d.html#numpy.atleast_1d
    "numpy.atleast_1d") and [`atleast_2d`](numpy.atleast_2d.html#numpy.atleast_2d
    "numpy.atleast_2d")
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以用在 [`atleast_1d`](numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")
    和 [`atleast_2d`](numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d") 的地方。
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
