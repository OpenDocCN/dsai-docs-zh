["```py\n>>> from sympy.vector import CoordSys3D\n>>> R = CoordSys3D('R')\n>>> v = 3*R.i + 4*R.j + 5*R.k \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> R = CoordSys3D('R')\n>>> electric_potential = 2*R.x**2*R.y\n>>> electric_potential\n2*R.x**2*R.y \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> R = CoordSys3D('R')\n>>> electric_potential = 2*R.x**2*R.y\n>>> from sympy import diff\n>>> diff(electric_potential, R.x)\n4*R.x*R.y \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> R = CoordSys3D('R')\n>>> v = R.x**2*R.i + 2*R.x*R.z*R.k \n```", "```py\n>>> from sympy.vector import CoordSys3D, Del\n>>> C = CoordSys3D('C')\n>>> delop = Del()\n>>> gradient_field = delop(C.x*C.y*C.z)\n>>> gradient_field\n(Derivative(C.x*C.y*C.z, C.x))*C.i + (Derivative(C.x*C.y*C.z, C.y))*C.j\n+ (Derivative(C.x*C.y*C.z, C.z))*C.k \n```", "```py\n>>> gradient_field.doit()\nC.y*C.z*C.i + C.x*C.z*C.j + C.x*C.y*C.k \n```", "```py\n>>> from sympy.vector import CoordSys3D, Del\n>>> C = CoordSys3D('C')\n>>> delop = Del()\n>>> delop.cross(C.x*C.y*C.z*C.i).doit()\nC.x*C.y*C.j + (-C.x*C.z)*C.k\n>>> (delop ^ C.x*C.y*C.z*C.i).doit()\nC.x*C.y*C.j + (-C.x*C.z)*C.k \n```", "```py\n>>> from sympy.vector import curl\n>>> curl(C.x*C.y*C.z*C.i)\nC.x*C.y*C.j + (-C.x*C.z)*C.k \n```", "```py\n>>> from sympy.vector import CoordSys3D, Del\n>>> C = CoordSys3D('C')\n>>> delop = Del()\n>>> delop.dot(C.x*C.y*C.z*(C.i + C.j + C.k)).doit()\nC.x*C.y + C.x*C.z + C.y*C.z\n>>> (delop & C.x*C.y*C.z*(C.i + C.j + C.k)).doit()\nC.x*C.y + C.x*C.z + C.y*C.z \n```", "```py\n>>> from sympy.vector import divergence\n>>> divergence(C.x*C.y*C.z*(C.i + C.j + C.k))\nC.x*C.y + C.x*C.z + C.y*C.z \n```", "```py\n>>> from sympy.vector import CoordSys3D, Del\n>>> C = CoordSys3D('C')\n>>> delop = Del()\n>>> delop.gradient(C.x*C.y*C.z).doit()\nC.y*C.z*C.i + C.x*C.z*C.j + C.x*C.y*C.k\n>>> delop(C.x*C.y*C.z).doit()\nC.y*C.z*C.i + C.x*C.z*C.j + C.x*C.y*C.k \n```", "```py\n>>> from sympy.vector import gradient\n>>> gradient(C.x*C.y*C.z)\nC.y*C.z*C.i + C.x*C.z*C.j + C.x*C.y*C.k \n```", "```py\n>>> from sympy.vector import CoordSys3D, Del\n>>> C = CoordSys3D('C')\n>>> delop = Del()\n>>> vel = C.i + C.j + C.k\n>>> scalar_field = C.x*C.y*C.z\n>>> vector_field = C.x*C.y*C.z*C.i\n>>> (vel.dot(delop))(scalar_field)\nC.x*C.y + C.x*C.z + C.y*C.z\n>>> (vel & delop)(vector_field)\n(C.x*C.y + C.x*C.z + C.y*C.z)*C.i \n```", "```py\n>>> from sympy.vector import directional_derivative\n>>> directional_derivative(C.x*C.y*C.z, 3*C.i + 4*C.j + C.k)\nC.x*C.y + 4*C.x*C.z + 3*C.y*C.z \n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> c = CoordSys3D('c', transformation='cylindrical', variable_names=(\"r\", \"theta\", \"z\"))\n>>> gradient(c.r*c.theta*c.z)\n c.theta*c.z*c.i + c.z*c.j + c.r*c.theta*c.k \n```", "```py\n>>> from sympy.vector import CoordSys3D, is_conservative\n>>> R = CoordSys3D('R')\n>>> field = R.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k\n>>> is_conservative(field)\nTrue\n>>> curl(field)\n0 \n```", "```py\n>>> from sympy.vector import CoordSys3D, is_solenoidal\n>>> R = CoordSys3D('R')\n>>> field = R.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k\n>>> is_solenoidal(field)\nTrue\n>>> divergence(field)\n0 \n```", "```py\n>>> from sympy.vector import CoordSys3D, scalar_potential\n>>> R = CoordSys3D('R')\n>>> conservative_field = 4*R.x*R.y*R.z*R.i + 2*R.x**2*R.z*R.j + 2*R.x**2*R.y*R.k\n>>> scalar_potential(conservative_field, R)\n2*R.x**2*R.y*R.z \n```", "```py\n>>> from sympy.vector import CoordSys3D, Point\n>>> from sympy.vector import scalar_potential_difference\n>>> R = CoordSys3D('R')\n>>> P = R.origin.locate_new('P', 1*R.i + 2*R.j + 3*R.k)\n>>> vectfield = 4*R.x*R.y*R.i + 2*R.x**2*R.j\n>>> scalar_potential_difference(vectfield, R, R.origin, P)\n4 \n```"]