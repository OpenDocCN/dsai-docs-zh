- en: numpy.recarray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.recarray
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Construct an ndarray that allows field access using attributes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个允许使用属性访问字段的ndarray。
- en: Arrays may have a data-types containing fields, analogous to columns in a spread
    sheet. An example is `[(x, int), (y, float)]`, where each entry in the array is
    a pair of `(int, float)`. Normally, these attributes are accessed using dictionary
    lookups such as `arr['x']` and `arr['y']`. Record arrays allow the fields to be
    accessed as members of the array, using `arr.x` and `arr.y`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可能包含包含字段的数据类型，类似于电子表格中的列。一个示例是`[(x, int), (y, float)]`，其中数组中的每个条目都是一个`(int,
    float)`的对。通常，这些属性通过字典查找来访问，例如`arr['x']`和`arr['y']`。记录数组允许以数组的成员方式访问字段，使用`arr.x`和`arr.y`。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**shape**tuple'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**shape**元组'
- en: Shape of output array.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出数组的形状。
- en: '**dtype**data-type, optional'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**数据类型，可选'
- en: The desired data-type. By default, the data-type is determined from *formats*,
    *names*, *titles*, *aligned* and *byteorder*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所需数据类型。默认情况下，数据类型是根据*formats*、*names*、*titles*、*aligned*和*byteorder*确定的。
- en: '**formats**list of data-types, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**formats**数据类型列表，可选'
- en: A list containing the data-types for the different columns, e.g. `['i4', 'f8',
    'i4']`. *formats* does *not* support the new convention of using types directly,
    i.e. `(int, float, int)`. Note that *formats* must be a list, not a tuple. Given
    that *formats* is somewhat limited, we recommend specifying [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 包含不同列的数据类型的列表，例如`['i4', 'f8', 'i4']`。*formats*不支持直接使用类型的新约定，即`(int, float, int)`。请注意，*formats*必须是列表，而不是元组。鉴于*formats*有些受限，我们建议优先指定[`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype")。
- en: '**names**tuple of str, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**names**字符串元组，可选'
- en: The name of each column, e.g. `('x', 'y', 'z')`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每列的名称，例如`('x', 'y', 'z')`。
- en: '**buf**buffer, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**buf**缓冲区，可选'
- en: By default, a new array is created of the given shape and data-type. If *buf*
    is specified and is an object exposing the buffer interface, the array will use
    the memory from the existing buffer. In this case, the *offset* and [`strides`](numpy.recarray.strides.html#numpy.recarray.strides
    "numpy.recarray.strides") keywords are available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将创建一个给定形状和数据类型的新数组。如果指定了*buf*且是一个暴露缓冲区接口的对象，则数组将使用现有缓冲区的内存。在这种情况下，*offset*和[`strides`](numpy.recarray.strides.html#numpy.recarray.strides
    "numpy.recarray.strides")关键字可用。
- en: 'Returns:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**rec**recarray'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**rec**recarray'
- en: Empty array of the given shape and type.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 给定形状和类型的空数组。
- en: 'Other Parameters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数：
- en: '**titles**tuple of str, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**titles**字符串元组，可选'
- en: Aliases for column names. For example, if *names* were `('x', 'y', 'z')` and
    *titles* is `('x_coordinate', 'y_coordinate', 'z_coordinate')`, then `arr['x']`
    is equivalent to both `arr.x` and `arr.x_coordinate`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 列名称的别名。例如，如果*names*是`('x', 'y', 'z')`，*titles*是`('x_coordinate', 'y_coordinate',
    'z_coordinate')`，那么`arr['x']`等同于`arr.x`和`arr.x_coordinate`。
- en: '**byteorder**{‘<’, ‘>’, ‘=’}, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**byteorder**{‘<’, ‘>’, ‘=’}，可选'
- en: Byte-order for all fields.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字段的字节顺序。
- en: '**aligned**bool, optional'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**aligned**布尔值，可选'
- en: Align the fields in memory as the C-compiler would.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将字段在内存中对齐，就像C编译器会做的那样。
- en: '**strides**tuple of ints, optional'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**strides**整数元组，可选'
- en: Buffer (*buf*) is interpreted according to these strides (strides define how
    many bytes each array element, row, column, etc. occupy in memory).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区（*buf*）根据这些步幅解释（步幅定义了内存中每个数组元素、行、列等占用多少字节）。
- en: '**offset**int, optional'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset**整数，可选'
- en: Start reading buffer (*buf*) from this offset onwards.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从此偏移开始读取缓冲区（*buf*）。
- en: '**order**{‘C’, ‘F’}, optional'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**{‘C’, ‘F’}，可选'
- en: Row-major (C-style) or column-major (Fortran-style) order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 行主（C样式）或列主（Fortran样式）顺序。
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`core.records.fromrecords`](numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`core.records.fromrecords`](numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")'
- en: Construct a record array from data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据构造一个记录数组。
- en: '[`record`](numpy.record.html#numpy.record "numpy.record")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`record`](numpy.record.html#numpy.record "numpy.record")'
- en: fundamental data-type for [`recarray`](#numpy.recarray "numpy.recarray").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`recarray`](#numpy.recarray "numpy.recarray")的基本数据类型。'
- en: '[`format_parser`](numpy.format_parser.html#numpy.format_parser "numpy.format_parser")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`format_parser`](numpy.format_parser.html#numpy.format_parser "numpy.format_parser")'
- en: determine a data-type from formats, names, titles.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从格式、名称、标题确定数据类型。
- en: Notes
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This constructor can be compared to `empty`: it creates a new record array
    but does not fill it with data. To create a record array from data, use one of
    the following methods:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个构造函数可以与`empty`进行比较：它创建一个新的记录数组，但不填充数据。要从数据创建记录数组，请使用以下方法之一：
- en: Create a standard ndarray and convert it to a record array, using `arr.view(np.recarray)`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个标准的ndarray并将其转换为记录数组，使用`arr.view(np.recarray)`
- en: Use the *buf* keyword.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*buf*关键字。
- en: Use *np.rec.fromrecords*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*np.rec.fromrecords*。
- en: Examples
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Create an array with two fields, `x` and `y`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有两个字段`x`和`y`的数组：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'View the array as a record array:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以记录数组的形式查看数组：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a new, empty record array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的空记录数组：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Attributes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`T`](numpy.recarray.T.html#numpy.recarray.T "numpy.recarray.T")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`T`](numpy.recarray.T.html#numpy.recarray.T "numpy.recarray.T")'
- en: View of the transposed array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 转置数组的视图。
- en: '[`base`](numpy.recarray.base.html#numpy.recarray.base "numpy.recarray.base")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](numpy.recarray.base.html#numpy.recarray.base "numpy.recarray.base")'
- en: Base object if memory is from some other object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内存来自其他对象，则为基本对象。
- en: '[`ctypes`](numpy.recarray.ctypes.html#numpy.recarray.ctypes "numpy.recarray.ctypes")'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ctypes`](numpy.recarray.ctypes.html#numpy.recarray.ctypes "numpy.recarray.ctypes")'
- en: An object to simplify the interaction of the array with the ctypes module.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便与ctypes模块交互的对象。
- en: '[`data`](numpy.recarray.data.html#numpy.recarray.data "numpy.recarray.data")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data`](numpy.recarray.data.html#numpy.recarray.data "numpy.recarray.data")'
- en: Python buffer object pointing to the start of the array’s data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组数据起始位置的Python缓冲对象。
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
- en: Data-type of the array’s elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素的数据类型。
- en: '[`flags`](numpy.recarray.flags.html#numpy.recarray.flags "numpy.recarray.flags")'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flags`](numpy.recarray.flags.html#numpy.recarray.flags "numpy.recarray.flags")'
- en: Information about the memory layout of the array.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的内存布局信息。
- en: '[`flat`](numpy.recarray.flat.html#numpy.recarray.flat "numpy.recarray.flat")'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flat`](numpy.recarray.flat.html#numpy.recarray.flat "numpy.recarray.flat")'
- en: A 1-D iterator over the array.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的1-D迭代器。
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
- en: The imaginary part of the array.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的虚部。
- en: '[`itemsize`](numpy.recarray.itemsize.html#numpy.recarray.itemsize "numpy.recarray.itemsize")'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itemsize`](numpy.recarray.itemsize.html#numpy.recarray.itemsize "numpy.recarray.itemsize")'
- en: Length of one array element in bytes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素的字节长度。
- en: '[`nbytes`](numpy.recarray.nbytes.html#numpy.recarray.nbytes "numpy.recarray.nbytes")'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nbytes`](numpy.recarray.nbytes.html#numpy.recarray.nbytes "numpy.recarray.nbytes")'
- en: Total bytes consumed by the elements of the array.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素消耗的总字节数。
- en: '[`ndim`](numpy.recarray.ndim.html#numpy.recarray.ndim "numpy.recarray.ndim")'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndim`](numpy.recarray.ndim.html#numpy.recarray.ndim "numpy.recarray.ndim")'
- en: Number of array dimensions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的维度数。
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`real`](numpy.real.html#numpy.real "numpy.real")'
- en: The real part of the array.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的实部。
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
- en: Tuple of array dimensions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数组维度的元组。
- en: '[`size`](numpy.recarray.size.html#numpy.recarray.size "numpy.recarray.size")'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[`size`](numpy.recarray.size.html#numpy.recarray.size "numpy.recarray.size")'
- en: Number of elements in the array.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素个数。
- en: '[`strides`](numpy.recarray.strides.html#numpy.recarray.strides "numpy.recarray.strides")'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strides`](numpy.recarray.strides.html#numpy.recarray.strides "numpy.recarray.strides")'
- en: Tuple of bytes to step in each dimension when traversing an array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历数组时在每个维度上步进的字节数元组。
- en: Methods
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`all`](numpy.recarray.all.html#numpy.recarray.all "numpy.recarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`all`](numpy.recarray.all.html#numpy.recarray.all "numpy.recarray.all")([axis, out, keepdims, where])
    | 如果所有元素求值为True，则返回True。 |'
- en: '| [`any`](numpy.recarray.any.html#numpy.recarray.any "numpy.recarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`any`](numpy.recarray.any.html#numpy.recarray.any "numpy.recarray.any")([axis, out, keepdims, where])
    | 如果*a*中的任何元素求值为True，则返回True。 |'
- en: '| [`argmax`](numpy.recarray.argmax.html#numpy.recarray.argmax "numpy.recarray.argmax")([axis, out, keepdims])
    | Return indices of the maximum values along the given axis. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`argmax`](numpy.recarray.argmax.html#numpy.recarray.argmax "numpy.recarray.argmax")([axis, out, keepdims])
    | 返回沿给定轴的最大值的索引。 |'
- en: '| [`argmin`](numpy.recarray.argmin.html#numpy.recarray.argmin "numpy.recarray.argmin")([axis, out, keepdims])
    | Return indices of the minimum values along the given axis. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`argmin`](numpy.recarray.argmin.html#numpy.recarray.argmin "numpy.recarray.argmin")([axis, out, keepdims])
    | 返回沿给定轴的最小值的索引。 |'
- en: '| [`argpartition`](numpy.recarray.argpartition.html#numpy.recarray.argpartition
    "numpy.recarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`argpartition`](numpy.recarray.argpartition.html#numpy.recarray.argpartition
    "numpy.recarray.argpartition") | 返回将此数组划分的索引。 |'
- en: '| [`argsort`](numpy.recarray.argsort.html#numpy.recarray.argsort "numpy.recarray.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`argsort`](numpy.recarray.argsort.html#numpy.recarray.argsort "numpy.recarray.argsort")
    | 返回按顺序对此数组进行排序的索引。 |'
- en: '| [`astype`](numpy.recarray.astype.html#numpy.recarray.astype "numpy.recarray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`astype`](numpy.recarray.astype.html#numpy.recarray.astype "numpy.recarray.astype")
    | 数组的副本，转换为指定的类型。 |'
- en: '| [`byteswap`](numpy.recarray.byteswap.html#numpy.recarray.byteswap "numpy.recarray.byteswap")([inplace])
    | Swap the bytes of the array elements |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`byteswap`](numpy.recarray.byteswap.html#numpy.recarray.byteswap "numpy.recarray.byteswap")
    | 交换数组元素的字节。 |'
- en: '| [`choose`](numpy.recarray.choose.html#numpy.recarray.choose "numpy.recarray.choose")(choices[, out, mode])
    | Use an index array to construct a new array from a set of choices. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`choose`](numpy.recarray.choose.html#numpy.recarray.choose "numpy.recarray.choose")
    | 使用索引数组从一组选择中构建新数组。 |'
- en: '| [`clip`](numpy.recarray.clip.html#numpy.recarray.clip "numpy.recarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`clip`](numpy.recarray.clip.html#numpy.recarray.clip "numpy.recarray.clip")
    | 返回其值限制为`[min, max]`的数组。 |'
- en: '| [`compress`](numpy.recarray.compress.html#numpy.recarray.compress "numpy.recarray.compress")(condition[, axis, out])
    | Return selected slices of this array along given axis. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`compress`](numpy.recarray.compress.html#numpy.recarray.compress "numpy.recarray.compress")
    | 返回沿着给定轴选定的数组切片。 |'
- en: '| [`conj`](numpy.recarray.conj.html#numpy.recarray.conj "numpy.recarray.conj")()
    | Complex-conjugate all elements. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](numpy.recarray.conj.html#numpy.recarray.conj "numpy.recarray.conj")
    | 复共轭所有元素。 |'
- en: '| [`conjugate`](numpy.recarray.conjugate.html#numpy.recarray.conjugate "numpy.recarray.conjugate")()
    | Return the complex conjugate, element-wise. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](numpy.recarray.conjugate.html#numpy.recarray.conjugate "numpy.recarray.conjugate")
    | 返回复共轭，逐个元素。 |'
- en: '| [`copy`](numpy.recarray.copy.html#numpy.recarray.copy "numpy.recarray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](numpy.recarray.copy.html#numpy.recarray.copy "numpy.recarray.copy")
    | 返回数组的副本。 |'
- en: '| [`cumprod`](numpy.recarray.cumprod.html#numpy.recarray.cumprod "numpy.recarray.cumprod")([axis, dtype, out])
    | Return the cumulative product of the elements along the given axis. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod`](numpy.recarray.cumprod.html#numpy.recarray.cumprod "numpy.recarray.cumprod")
    | 返回沿给定轴的元素的累积乘积。 |'
- en: '| [`cumsum`](numpy.recarray.cumsum.html#numpy.recarray.cumsum "numpy.recarray.cumsum")([axis, dtype, out])
    | Return the cumulative sum of the elements along the given axis. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum`](numpy.recarray.cumsum.html#numpy.recarray.cumsum "numpy.recarray.cumsum")
    | 返回沿给定轴的元素的累积总和。 |'
- en: '| [`diagonal`](numpy.recarray.diagonal.html#numpy.recarray.diagonal "numpy.recarray.diagonal")([offset, axis1, axis2])
    | Return specified diagonals. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`diagonal`](numpy.recarray.diagonal.html#numpy.recarray.diagonal "numpy.recarray.diagonal")
    | 返回指定的对角线。 |'
- en: '| [`dump`](numpy.recarray.dump.html#numpy.recarray.dump "numpy.recarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`dump`](numpy.recarray.dump.html#numpy.recarray.dump "numpy.recarray.dump")
    | 将数组的 pickle 转储到指定文件。 |'
- en: '| [`dumps`](numpy.recarray.dumps.html#numpy.recarray.dumps "numpy.recarray.dumps")()
    | Returns the pickle of the array as a string. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`dumps`](numpy.recarray.dumps.html#numpy.recarray.dumps "numpy.recarray.dumps")
    | 将数组的 pickle 作为字符串返回。 |'
- en: '| [`fill`](numpy.recarray.fill.html#numpy.recarray.fill "numpy.recarray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`fill`](numpy.recarray.fill.html#numpy.recarray.fill "numpy.recarray.fill")
    | 使用标量值填充数组。 |'
- en: '| [`flatten`](numpy.recarray.flatten.html#numpy.recarray.flatten "numpy.recarray.flatten")([order])
    | Return a copy of the array collapsed into one dimension. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`flatten`](numpy.recarray.flatten.html#numpy.recarray.flatten "numpy.recarray.flatten")
    | 返回折叠成一维的数组的副本。 |'
- en: '| [`getfield`](numpy.recarray.getfield.html#numpy.recarray.getfield "numpy.recarray.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`getfield`](numpy.recarray.getfield.html#numpy.recarray.getfield "numpy.recarray.getfield")
    | 返回给定数组的字段作为某种类型。 |'
- en: '| [`item`](numpy.recarray.item.html#numpy.recarray.item "numpy.recarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`item`](numpy.recarray.item.html#numpy.recarray.item "numpy.recarray.item")
    | 将数组的元素复制到标准 Python 标量并返回。 |'
- en: '| [`itemset`](numpy.recarray.itemset.html#numpy.recarray.itemset "numpy.recarray.itemset")(*args)
    | Insert scalar into an array (scalar is cast to array''s dtype, if possible)
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`itemset`](numpy.recarray.itemset.html#numpy.recarray.itemset "numpy.recarray.itemset")(*args)
    | 将标量插入数组（如果可能，标量会被转换为数组的数据类型）。'
- en: '| [`max`](numpy.recarray.max.html#numpy.recarray.max "numpy.recarray.max")([axis, out, keepdims, initial, where])
    | Return the maximum along a given axis. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`max`](numpy.recarray.max.html#numpy.recarray.max "numpy.recarray.max")([axis, out, keepdims, initial, where])
    | 沿着给定轴返回最大值。'
- en: '| [`mean`](numpy.recarray.mean.html#numpy.recarray.mean "numpy.recarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`mean`](numpy.recarray.mean.html#numpy.recarray.mean "numpy.recarray.mean")([axis, dtype, out, keepdims, where])
    | 返回沿给定轴的数组元素的平均值。'
- en: '| [`min`](numpy.recarray.min.html#numpy.recarray.min "numpy.recarray.min")([axis, out, keepdims, initial, where])
    | Return the minimum along a given axis. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`min`](numpy.recarray.min.html#numpy.recarray.min "numpy.recarray.min")([axis, out, keepdims, initial, where])
    | 沿着给定轴返回最小值。'
- en: '| [`newbyteorder`](numpy.recarray.newbyteorder.html#numpy.recarray.newbyteorder
    "numpy.recarray.newbyteorder")([new_order]) | Return the array with the same data
    viewed with a different byte order. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`newbyteorder`](numpy.recarray.newbyteorder.html#numpy.recarray.newbyteorder
    "numpy.recarray.newbyteorder")([new_order]) | 返回使用不同字节顺序查看的相同数据的数组。'
- en: '| [`nonzero`](numpy.recarray.nonzero.html#numpy.recarray.nonzero "numpy.recarray.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`nonzero`](numpy.recarray.nonzero.html#numpy.recarray.nonzero "numpy.recarray.nonzero")()
    | 返回非零元素的索引。'
- en: '| [`partition`](numpy.recarray.partition.html#numpy.recarray.partition "numpy.recarray.partition")(kth[, axis, kind, order])
    | Rearranges the elements in the array in such a way that the value of the element
    in kth position is in the position it would be in a sorted array. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`partition`](numpy.recarray.partition.html#numpy.recarray.partition "numpy.recarray.partition")(kth[, axis, kind, order])
    | 通过重新排列数组中的元素，使得第k个位置的元素的值在排序数组中的位置处于预期位置。'
- en: '| [`prod`](numpy.recarray.prod.html#numpy.recarray.prod "numpy.recarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | Return the product of the array elements over the given axis |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`prod`](numpy.recarray.prod.html#numpy.recarray.prod "numpy.recarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | 返回沿给定轴的数组元素的乘积。'
- en: '| [`ptp`](numpy.recarray.ptp.html#numpy.recarray.ptp "numpy.recarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`ptp`](numpy.recarray.ptp.html#numpy.recarray.ptp "numpy.recarray.ptp")([axis, out, keepdims])
    | 沿着给定轴的峰值到峰值（最大值 - 最小值）。'
- en: '| [`put`](numpy.recarray.put.html#numpy.recarray.put "numpy.recarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`put`](numpy.recarray.put.html#numpy.recarray.put "numpy.recarray.put")(indices, values[, mode])
    | 设置`a.flat[n] = values[n]`，其中*n*为indices中的所有值。'
- en: '| [`ravel`](numpy.recarray.ravel.html#numpy.recarray.ravel "numpy.recarray.ravel")([order])
    | Return a flattened array. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`ravel`](numpy.recarray.ravel.html#numpy.recarray.ravel "numpy.recarray.ravel")([order])
    | 返回一个扁平化的数组。'
- en: '| [`repeat`](numpy.recarray.repeat.html#numpy.recarray.repeat "numpy.recarray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat`](numpy.recarray.repeat.html#numpy.recarray.repeat "numpy.recarray.repeat")(repeats[, axis])
    | 重复数组的元素。'
- en: '| [`reshape`](numpy.recarray.reshape.html#numpy.recarray.reshape "numpy.recarray.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](numpy.recarray.reshape.html#numpy.recarray.reshape "numpy.recarray.reshape")(shape[, order])
    | 返回一个包含与新形状相同数据的数组。'
- en: '| [`resize`](numpy.recarray.resize.html#numpy.recarray.resize "numpy.recarray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](numpy.recarray.resize.html#numpy.recarray.resize "numpy.recarray.resize")(new_shape[, refcheck])
    | 原地改变数组的形状和大小。'
- en: '| [`round`](numpy.recarray.round.html#numpy.recarray.round "numpy.recarray.round")([decimals, out])
    | Return *a* with each element rounded to the given number of decimals. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`round`](numpy.recarray.round.html#numpy.recarray.round "numpy.recarray.round")([decimals, out])
    | 返回每个元素舍入到给定小数位数的*a*。'
- en: '| [`searchsorted`](numpy.recarray.searchsorted.html#numpy.recarray.searchsorted
    "numpy.recarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`searchsorted`](numpy.recarray.searchsorted.html#numpy.recarray.searchsorted
    "numpy.recarray.searchsorted")(v[, side, sorter]) | 查找应该在数组a中插入v元素以保持顺序的索引。'
- en: '| [`setfield`](numpy.recarray.setfield.html#numpy.recarray.setfield "numpy.recarray.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`setfield`](numpy.recarray.setfield.html#numpy.recarray.setfield "numpy.recarray.setfield")(val, dtype[, offset])
    | 在由数据类型定义的字段的指定位置放入一个值。'
- en: '| [`setflags`](numpy.recarray.setflags.html#numpy.recarray.setflags "numpy.recarray.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '[`setflags`](numpy.recarray.setflags.html#numpy.recarray.setflags "numpy.recarray.setflags")([write, align, uic])
    | 分别设置数组标志 WRITEABLE、ALIGNED、WRITEBACKIFCOPY。'
- en: '| [`sort`](numpy.recarray.sort.html#numpy.recarray.sort "numpy.recarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '[`sort`](numpy.recarray.sort.html#numpy.recarray.sort "numpy.recarray.sort")([axis, kind, order])
    | 原地对数组进行排序。'
- en: '| [`squeeze`](numpy.recarray.squeeze.html#numpy.recarray.squeeze "numpy.recarray.squeeze")([axis])
    | Remove axes of length one from *a*. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '[`squeeze`](numpy.recarray.squeeze.html#numpy.recarray.squeeze "numpy.recarray.squeeze")([axis])
    | 从 *a* 中删除长度为一的轴。'
- en: '| [`std`](numpy.recarray.std.html#numpy.recarray.std "numpy.recarray.std")([axis, dtype, out, ddof, keepdims, where])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '[`std`](numpy.recarray.std.html#numpy.recarray.std "numpy.recarray.std")([axis, dtype, out, ddof, keepdims, where])
    | 返回给定轴上数组元素的标准差。'
- en: '| [`sum`](numpy.recarray.sum.html#numpy.recarray.sum "numpy.recarray.sum")([axis, dtype, out, keepdims, initial, where])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '[`sum`](numpy.recarray.sum.html#numpy.recarray.sum "numpy.recarray.sum")([axis, dtype, out, keepdims, initial, where])
    | 返回给定轴上数组元素的总和。'
- en: '| [`swapaxes`](numpy.recarray.swapaxes.html#numpy.recarray.swapaxes "numpy.recarray.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '[`swapaxes`](numpy.recarray.swapaxes.html#numpy.recarray.swapaxes "numpy.recarray.swapaxes")(axis1, axis2)
    | 返回一个轴 *axis1* 和 *axis2* 互换的数组视图。'
- en: '| [`take`](numpy.recarray.take.html#numpy.recarray.take "numpy.recarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '[`take`](numpy.recarray.take.html#numpy.recarray.take "numpy.recarray.take")(indices[, axis, out, mode])
    | 返回由给定索引处 *a* 元素组成的数组。'
- en: '| [`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes "numpy.recarray.tobytes")([order])
    | Construct Python bytes containing the raw data bytes in the array. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '[`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes "numpy.recarray.tobytes")([order])
    | 构造包含数组中原始数据字节的 Python 字节。'
- en: '| [`tofile`](numpy.recarray.tofile.html#numpy.recarray.tofile "numpy.recarray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '[`tofile`](numpy.recarray.tofile.html#numpy.recarray.tofile "numpy.recarray.tofile")(fid[, sep, format])
    | 将数组以文本或二进制（默认）形式写入文件。'
- en: '| [`tolist`](numpy.recarray.tolist.html#numpy.recarray.tolist "numpy.recarray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '[`tolist`](numpy.recarray.tolist.html#numpy.recarray.tolist "numpy.recarray.tolist")()
    | 将数组作为 Python 标量的 `a.ndim` 级深嵌套列表返回。'
- en: '| [`tostring`](numpy.recarray.tostring.html#numpy.recarray.tostring "numpy.recarray.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes
    "numpy.recarray.tobytes"), with exactly the same behavior. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '[`tostring`](numpy.recarray.tostring.html#numpy.recarray.tostring "numpy.recarray.tostring")([order])
    | 一个与 [`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes "numpy.recarray.tobytes")
    完全相同行为的兼容别名。'
- en: '| [`trace`](numpy.recarray.trace.html#numpy.recarray.trace "numpy.recarray.trace")([offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '[`trace`](numpy.recarray.trace.html#numpy.recarray.trace "numpy.recarray.trace")([offset, axis1, axis2, dtype, out])
    | 返回数组对角线上的总和。'
- en: '| [`transpose`](numpy.recarray.transpose.html#numpy.recarray.transpose "numpy.recarray.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '[`transpose`](numpy.recarray.transpose.html#numpy.recarray.transpose "numpy.recarray.transpose")(*axes)
    | 返回数组的轴转置视图。'
- en: '| [`var`](numpy.recarray.var.html#numpy.recarray.var "numpy.recarray.var")([axis, dtype, out, ddof, keepdims, where])
    | Returns the variance of the array elements, along given axis. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '[`var`](numpy.recarray.var.html#numpy.recarray.var "numpy.recarray.var")([axis, dtype, out, ddof, keepdims, where])
    | 返回给定轴上数组元素的方差。'
- en: '| [`view`](numpy.recarray.view.html#numpy.recarray.view "numpy.recarray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '[`view`](numpy.recarray.view.html#numpy.recarray.view "numpy.recarray.view")([dtype][, type])
    | 具有相同数据的数组的新视图。'
- en: '| **dot** |  |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '**dot** |  |'
- en: '| **field** |  |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '**field** |  |'
