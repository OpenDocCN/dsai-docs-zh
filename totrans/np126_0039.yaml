- en: numpy.ndarray.ctypes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.ctypes.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.ctypes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: attribute
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An object to simplify the interaction of the array with the ctypes module.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: This attribute creates an object that makes it easier to use arrays when calling
    shared libraries with the ctypes module. The returned object has, among others,
    data, shape, and strides attributes (see Notes below) which themselves return
    ctypes objects that can be used as arguments to a shared library.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**None**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**c**Python object'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Possessing attributes data, shape, strides, etc.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ctypeslib`](../routines.ctypeslib.html#module-numpy.ctypeslib "numpy.ctypeslib")'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Below are the public attributes of this object which were documented in “Guide
    to NumPy” (we have omitted undocumented public attributes, as well as documented
    private attributes):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A pointer to the memory area of the array as a Python integer. This memory area
    may contain data that is not aligned, or not in correct byte-order. The memory
    area may not even be writeable. The array flags and data-type of this array should
    be respected when passing this attribute to arbitrary C-code to avoid trouble
    that can include Python crashing. User Beware! The value of this attribute is
    exactly the same as `self._array_interface_['data'][0]`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that unlike `data_as`, a reference will not be kept to the array: code
    like `ctypes.c_void_p((a + b).ctypes.data)` will result in a pointer to a deallocated
    array, and should be spelt `(a + b).ctypes.data_as(ctypes.c_void_p)`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '(c_intp*self.ndim): A ctypes array of length self.ndim where the basetype is
    the C-integer corresponding to `dtype(''p'')` on this platform (see [`c_intp`](../routines.ctypeslib.html#numpy.ctypeslib.c_intp
    "numpy.ctypeslib.c_intp")). This base-type could be [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)"), [`ctypes.c_long`](https://docs.python.org/3/library/ctypes.html#ctypes.c_long
    "(in Python v3.11)"), or [`ctypes.c_longlong`](https://docs.python.org/3/library/ctypes.html#ctypes.c_longlong
    "(in Python v3.11)") depending on the platform. The ctypes array contains the
    shape of the underlying array.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '(c_intp*self.ndim): A ctypes array of length self.ndim where the basetype is
    the same as for the shape attribute. This ctypes array contains the strides information
    from the underlying array. This strides information is important for showing how
    many bytes must be jumped to get to the next element in the array.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Return the data pointer cast to a particular c-types object. For example, calling
    `self._as_parameter_` is equivalent to `self.data_as(ctypes.c_void_p)`. Perhaps
    you want to use the data as a pointer to a ctypes array of floating-point data:
    `self.data_as(ctypes.POINTER(ctypes.c_double))`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The returned pointer will keep a reference to the array.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Return the shape tuple as an array of some other c-types type. For example:
    `self.shape_as(ctypes.c_short)`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将形状元组作为某种其他的 c 类型类型的数组返回。例如：`self.shape_as(ctypes.c_short)`。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Return the strides tuple as an array of some other c-types type. For example:
    `self.strides_as(ctypes.c_longlong)`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以某种其他的 c 类型类型，返回作为数组的步幅元组。例如：`self.strides_as(ctypes.c_longlong)`。
- en: If the ctypes module is not available, then the ctypes attribute of array objects
    still returns something useful, but ctypes objects are not returned and errors
    may be raised instead. In particular, the object will still have the `as_parameter`
    attribute which will return an integer equal to the data attribute.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 ctypes 模块不可用，则数组对象的 ctypes 属性仍将返回有用的东西，但不会返回 ctypes 对象，而是可能会引发错误。特别是，对象仍将具有
    `as_parameter` 属性，该属性将返回一个等于数据属性的整数。
- en: Examples
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
