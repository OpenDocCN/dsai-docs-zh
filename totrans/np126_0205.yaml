- en: numpy.s_
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.s_.html](https://numpy.org/doc/1.26/reference/generated/numpy.s_.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A nicer way to build up index tuples for arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Use one of the two predefined instances `index_exp` or [`s_`](#numpy.s_ "numpy.s_")
    rather than directly using *IndexExpression*.
  prefs: []
  type: TYPE_NORMAL
- en: For any index combination, including slicing and axis insertion, `a[indices]`
    is the same as `a[np.index_exp[indices]]` for any array *a*. However, `np.index_exp[indices]`
    can be used anywhere in Python code and returns a tuple of slice objects that
    can be used in the construction of complex index expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**maketuple**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, always returns a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`index_exp`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Predefined instance that always returns a tuple: *index_exp = IndexExpression(maketuple=True)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`s_`](#numpy.s_ "numpy.s_")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Predefined instance without tuple conversion: *s_ = IndexExpression(maketuple=False)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: You can do all this with *slice()* plus a few special objects, but there’s a
    lot to remember and this version is simpler because it uses the standard array
    indexing syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
