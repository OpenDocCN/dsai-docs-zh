["```py\n>>> from sympy.stats import P, E, variance, Die, Normal\n>>> from sympy import simplify\n>>> X, Y = Die('X', 6), Die('Y', 6) # Define two six sided dice\n>>> Z = Normal('Z', 0, 1) # Declare a Normal random variable with mean 0, std 1\n>>> P(X>3) # Probability X is greater than 3\n1/2\n>>> E(X+Y) # Expectation of the sum of two dice\n7\n>>> variance(X+Y) # Variance of the sum of two dice\n35/6\n>>> simplify(P(Z>1)) # Probability of Z being greater than 1\n1/2 - erf(sqrt(2)/2)/2 \n```", "```py\n>>> from sympy.stats import ContinuousRV, P, E\n>>> from sympy import exp, Symbol, Interval, oo\n>>> x = Symbol('x')\n>>> pdf = exp(-x) # pdf of the Continuous Distribution\n>>> Z = ContinuousRV(x, pdf, set=Interval(0, oo))\n>>> E(Z)\n1\n>>> P(Z > 5)\nexp(-5) \n```", "```py\n>>> from sympy.stats import ContinuousDistributionHandmade\n>>> from sympy import Lambda\n>>> dist = ContinuousDistributionHandmade(Lambda(x, pdf), set=Interval(0, oo))\n>>> dist.pdf(x)\nexp(-x) \n```", "```py\n>>> from sympy.stats import DiscreteRV, P, E\n>>> from sympy import Symbol, S\n>>> p = S(1)/2\n>>> x = Symbol('x', integer=True, positive=True)\n>>> pdf = p*(1 - p)**(x - 1)\n>>> D = DiscreteRV(x, pdf, set=S.Naturals)\n>>> E(D)\n2\n>>> P(D > 3)\n1/8 \n```", "```py\n>>> from sympy.stats import DiscreteDistributionHandmade\n>>> from sympy import Lambda\n>>> dist = DiscreteDistributionHandmade(Lambda(x, pdf), set=S.Naturals)\n>>> dist.pdf(x)\n2**(1 - x)/2 \n```", "```py\n>>> from sympy.stats import FiniteRV, P, E\n>>> from sympy import Rational, Eq\n>>> pmf = {1: Rational(1, 3), 2: Rational(1, 6), 3: Rational(1, 4), 4: Rational(1, 4)}\n>>> X = FiniteRV('X', pmf)\n>>> E(X)\n29/12\n>>> P(X > 3)\n1/4 \n```", "```py\n>>> from sympy.stats import FiniteDistributionHandmade\n>>> dist = FiniteDistributionHandmade(pmf)\n>>> dist.pmf(x)\nLambda(x, Piecewise((1/3, Eq(x, 1)), (1/6, Eq(x, 2)), (1/4, Eq(x, 3) | Eq(x, 4)), (0, True))) \n```", "```py\nsympy.stats.DiscreteUniform(name, items)\n```", "```py\n>>> from sympy.stats import DiscreteUniform, density\n>>> from sympy import symbols \n```", "```py\n>>> X = DiscreteUniform('X', symbols('a b c')) # equally likely over a, b, c\n>>> density(X).dict\n{a: 1/3, b: 1/3, c: 1/3} \n```", "```py\n>>> Y = DiscreteUniform('Y', list(range(5))) # distribution over a range\n>>> density(Y).dict\n{0: 1/5, 1: 1/5, 2: 1/5, 3: 1/5, 4: 1/5} \n```", "```py\nsympy.stats.Die(name, sides=6)\n```", "```py\n>>> from sympy.stats import Die, density\n>>> from sympy import Symbol \n```", "```py\n>>> D6 = Die('D6', 6) # Six sided Die\n>>> density(D6).dict\n{1: 1/6, 2: 1/6, 3: 1/6, 4: 1/6, 5: 1/6, 6: 1/6} \n```", "```py\n>>> D4 = Die('D4', 4) # Four sided Die\n>>> density(D4).dict\n{1: 1/4, 2: 1/4, 3: 1/4, 4: 1/4} \n```", "```py\n>>> n = Symbol('n', positive=True, integer=True)\n>>> Dn = Die('Dn', n) # n sided Die\n>>> density(Dn).dict\nDensity(DieDistribution(n))\n>>> density(Dn).dict.subs(n, 4).doit()\n{1: 1/4, 2: 1/4, 3: 1/4, 4: 1/4} \n```", "```py\nsympy.stats.Bernoulli(name, p, succ=1, fail=0)\n```", "```py\n>>> from sympy.stats import Bernoulli, density\n>>> from sympy import S \n```", "```py\n>>> X = Bernoulli('X', S(3)/4) # 1-0 Bernoulli variable, probability = 3/4\n>>> density(X).dict\n{0: 1/4, 1: 3/4} \n```", "```py\n>>> X = Bernoulli('X', S.Half, 'Heads', 'Tails') # A fair coin toss\n>>> density(X).dict\n{Heads: 1/2, Tails: 1/2} \n```", "```py\nsympy.stats.Coin(name, p=1 / 2)\n```", "```py\n>>> from sympy.stats import Coin, density\n>>> from sympy import Rational \n```", "```py\n>>> C = Coin('C') # A fair coin toss\n>>> density(C).dict\n{H: 1/2, T: 1/2} \n```", "```py\n>>> C2 = Coin('C2', Rational(3, 5)) # An unfair coin\n>>> density(C2).dict\n{H: 3/5, T: 2/5} \n```", "```py\nsympy.stats.Binomial(name, n, p, succ=1, fail=0)\n```", "```py\n>>> from sympy.stats import Binomial, density\n>>> from sympy import S, Symbol \n```", "```py\n>>> X = Binomial('X', 4, S.Half) # Four \"coin flips\"\n>>> density(X).dict\n{0: 1/16, 1: 1/4, 2: 3/8, 3: 1/4, 4: 1/16} \n```", "```py\n>>> n = Symbol('n', positive=True, integer=True)\n>>> p = Symbol('p', positive=True)\n>>> X = Binomial('X', n, S.Half) # n \"coin flips\"\n>>> density(X).dict\nDensity(BinomialDistribution(n, 1/2, 1, 0))\n>>> density(X).dict.subs(n, 4).doit()\n{0: 1/16, 1: 1/4, 2: 3/8, 3: 1/4, 4: 1/16} \n```", "```py\nsympy.stats.BetaBinomial(name, n, alpha, beta)\n```", "```py\n>>> from sympy.stats import BetaBinomial, density \n```", "```py\n>>> X = BetaBinomial('X', 2, 1, 1)\n>>> density(X).dict\n{0: 1/3, 1: 2*beta(2, 2), 2: 1/3} \n```", "```py\nsympy.stats.Hypergeometric(name, N, m, n)\n```", "```py\n>>> from sympy.stats import Hypergeometric, density \n```", "```py\n>>> X = Hypergeometric('X', 10, 5, 3) # 10 marbles, 5 white (success), 3 draws\n>>> density(X).dict\n{0: 1/12, 1: 5/12, 2: 5/12, 3: 1/12} \n```", "```py\nsympy.stats.FiniteRV(name, density, **kwargs)\n```", "```py\n>>> from sympy.stats import FiniteRV, P, E \n```", "```py\n>>> density = {0: .1, 1: .2, 2: .3, 3: .4}\n>>> X = FiniteRV('X', density) \n```", "```py\n>>> E(X)\n2.00000000000000\n>>> P(X >= 2)\n0.700000000000000 \n```", "```py\nsympy.stats.Rademacher(name)\n```", "```py\n>>> from sympy.stats import Rademacher, density \n```", "```py\n>>> X = Rademacher('X')\n>>> density(X).dict\n{-1: 1/2, 1: 1/2} \n```", "```py\nsympy.stats.Geometric(name, p)\n```", "```py\n>>> from sympy.stats import Geometric, density, E, variance\n>>> from sympy import Symbol, S \n```", "```py\n>>> p = S.One / 5\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Geometric(\"x\", p) \n```", "```py\n>>> density(X)(z)\n(5/4)**(1 - z)/5 \n```", "```py\n>>> E(X)\n5 \n```", "```py\n>>> variance(X)\n20 \n```", "```py\nsympy.stats.Hermite(name, a1, a2)\n```", "```py\n>>> from sympy.stats import Hermite, density, E, variance\n>>> from sympy import Symbol \n```", "```py\n>>> a1 = Symbol(\"a1\", positive=True)\n>>> a2 = Symbol(\"a2\", positive=True)\n>>> x = Symbol(\"x\") \n```", "```py\n>>> H = Hermite(\"H\", a1=5, a2=4) \n```", "```py\n>>> density(H)(2)\n33*exp(-9)/2 \n```", "```py\n>>> E(H)\n13 \n```", "```py\n>>> variance(H)\n21 \n```", "```py\nsympy.stats.Poisson(name, lamda)\n```", "```py\n>>> from sympy.stats import Poisson, density, E, variance\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> rate = Symbol(\"lambda\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Poisson(\"x\", rate) \n```", "```py\n>>> density(X)(z)\nlambda**z*exp(-lambda)/factorial(z) \n```", "```py\n>>> E(X)\nlambda \n```", "```py\n>>> simplify(variance(X))\nlambda \n```", "```py\nsympy.stats.Logarithmic(name, p)\n```", "```py\n>>> from sympy.stats import Logarithmic, density, E, variance\n>>> from sympy import Symbol, S \n```", "```py\n>>> p = S.One / 5\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Logarithmic(\"x\", p) \n```", "```py\n>>> density(X)(z)\n-1/(5**z*z*log(4/5)) \n```", "```py\n>>> E(X)\n-1/(-4*log(5) + 8*log(2)) \n```", "```py\n>>> variance(X)\n-1/((-4*log(5) + 8*log(2))*(-2*log(5) + 4*log(2))) + 1/(-64*log(2)*log(5) + 64*log(2)**2 + 16*log(5)**2) - 10/(-32*log(5) + 64*log(2)) \n```", "```py\nsympy.stats.NegativeBinomial(name, r, p)\n```", "```py\n>>> from sympy.stats import NegativeBinomial, density, E, variance\n>>> from sympy import Symbol, S \n```", "```py\n>>> r = 5\n>>> p = S.One / 5\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = NegativeBinomial(\"x\", r, p) \n```", "```py\n>>> density(X)(z)\n1024*binomial(z + 4, z)/(3125*5**z) \n```", "```py\n>>> E(X)\n5/4 \n```", "```py\n>>> variance(X)\n25/16 \n```", "```py\nsympy.stats.Skellam(name, mu1, mu2)\n```", "```py\n>>> from sympy.stats import Skellam, density, E, variance\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> z = Symbol(\"z\", integer=True)\n>>> mu1 = Symbol(\"mu1\", positive=True)\n>>> mu2 = Symbol(\"mu2\", positive=True)\n>>> X = Skellam(\"x\", mu1, mu2) \n```", "```py\n>>> pprint(density(X)(z), use_unicode=False)\n z\n -\n 2\n/mu1\\   -mu1 - mu2        /       _____   _____\\\n|---| *e          *besseli\\z, 2*\\/ mu1 *\\/ mu2 /\n\\mu2/\n>>> E(X)\nmu1 - mu2\n>>> variance(X).expand()\nmu1 + mu2 \n```", "```py\nsympy.stats.YuleSimon(name, rho)\n```", "```py\n>>> from sympy.stats import YuleSimon, density, E, variance\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> p = 5\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = YuleSimon(\"x\", p) \n```", "```py\n>>> density(X)(z)\n5*beta(z, 6) \n```", "```py\n>>> simplify(E(X))\n5/4 \n```", "```py\n>>> simplify(variance(X))\n25/48 \n```", "```py\nsympy.stats.Zeta(name, s)\n```", "```py\n>>> from sympy.stats import Zeta, density, E, variance\n>>> from sympy import Symbol \n```", "```py\n>>> s = 5\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Zeta(\"x\", s) \n```", "```py\n>>> density(X)(z)\n1/(z**5*zeta(5)) \n```", "```py\n>>> E(X)\npi**4/(90*zeta(5)) \n```", "```py\n>>> variance(X)\n-pi**8/(8100*zeta(5)**2) + zeta(3)/zeta(5) \n```", "```py\nsympy.stats.Arcsin(name, a=0, b=1)\n```", "```py\n>>> from sympy.stats import Arcsin, density, cdf\n>>> from sympy import Symbol \n```", "```py\n>>> a = Symbol(\"a\", real=True)\n>>> b = Symbol(\"b\", real=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Arcsin(\"x\", a, b) \n```", "```py\n>>> density(X)(z)\n1/(pi*sqrt((-a + z)*(b - z))) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((0, a > z),\n (2*asin(sqrt((-a + z)/(-a + b)))/pi, b >= z),\n (1, True)) \n```", "```py\nsympy.stats.Benini(name, alpha, beta, sigma)\n```", "```py\n>>> from sympy.stats import Benini, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> sigma = Symbol(\"sigma\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Benini(\"x\", alpha, beta, sigma) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n/                  /  z  \\\\             /  z  \\            2/  z  \\\n|        2*beta*log|-----||  - alpha*log|-----| - beta*log  |-----|\n|alpha             \\sigma/|             \\sigma/             \\sigma/\n|----- + -----------------|*e\n\\  z             z        / \n```", "```py\n>>> cdf(X)(z)\nPiecewise((1 - exp(-alpha*log(z/sigma) - beta*log(z/sigma)**2), sigma <= z),\n (0, True)) \n```", "```py\nsympy.stats.Beta(name, alpha, beta)\n```", "```py\n>>> from sympy.stats import Beta, density, E, variance\n>>> from sympy import Symbol, simplify, pprint, factor \n```", "```py\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Beta(\"x\", alpha, beta) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n alpha - 1        beta - 1\nz         *(1 - z)\n--------------------------\n B(alpha, beta) \n```", "```py\n>>> simplify(E(X))\nalpha/(alpha + beta) \n```", "```py\n>>> factor(simplify(variance(X)))\nalpha*beta/((alpha + beta)**2*(alpha + beta + 1)) \n```", "```py\nsympy.stats.BetaNoncentral(name, alpha, beta, lamda)\n```", "```py\n>>> from sympy.stats import BetaNoncentral, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> lamda = Symbol(\"lamda\", nonnegative=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = BetaNoncentral(\"x\", alpha, beta, lamda) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n oo\n_____\n\\    `\n \\                                              -lamda\n \\                          k                  -------\n \\    k + alpha - 1 /lamda\\         beta - 1     2\n )  z             *|-----| *(1 - z)        *e\n /                  \\  2  /\n /    ------------------------------------------------\n /                  B(k + alpha, beta)*k!\n/____,\nk = 0 \n```", "```py\n>>> cdf(BetaNoncentral(\"x\", 1, 1, 1), evaluate=False)(2).doit()\n2*exp(1/2) \n```", "```py\nsympy.stats.BetaPrime(name, alpha, beta)\n```", "```py\n>>> from sympy.stats import BetaPrime, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = BetaPrime(\"x\", alpha, beta) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n alpha - 1        -alpha - beta\nz         *(z + 1)\n-------------------------------\n B(alpha, beta) \n```", "```py\nsympy.stats.BoundedPareto(name, alpha, left, right)\n```", "```py\n>>> from sympy.stats import BoundedPareto, density, cdf, E\n>>> from sympy import symbols\n>>> L, H = symbols('L, H', positive=True)\n>>> X = BoundedPareto('X', 2, L, H)\n>>> x = symbols('x')\n>>> density(X)(x)\n2*L**2/(x**3*(1 - L**2/H**2))\n>>> cdf(X)(x)\nPiecewise((-H**2*L**2/(x**2*(H**2 - L**2)) + H**2/(H**2 - L**2), L <= x), (0, True))\n>>> E(X).simplify()\n2*H*L/(H + L) \n```", "```py\nsympy.stats.Cauchy(name, x0, gamma)\n```", "```py\n>>> from sympy.stats import Cauchy, density\n>>> from sympy import Symbol \n```", "```py\n>>> x0 = Symbol(\"x0\")\n>>> gamma = Symbol(\"gamma\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Cauchy(\"x\", x0, gamma) \n```", "```py\n>>> density(X)(z)\n1/(pi*gamma*(1 + (-x0 + z)**2/gamma**2)) \n```", "```py\nsympy.stats.Chi(name, k)\n```", "```py\n>>> from sympy.stats import Chi, density, E\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> k = Symbol(\"k\", integer=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Chi(\"x\", k) \n```", "```py\n>>> density(X)(z)\n2**(1 - k/2)*z**(k - 1)*exp(-z**2/2)/gamma(k/2) \n```", "```py\n>>> simplify(E(X))\nsqrt(2)*gamma(k/2 + 1/2)/gamma(k/2) \n```", "```py\nsympy.stats.ChiNoncentral(name, k, l)\n```", "```py\n>>> from sympy.stats import ChiNoncentral, density\n>>> from sympy import Symbol \n```", "```py\n>>> k = Symbol(\"k\", integer=True)\n>>> l = Symbol(\"l\")\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = ChiNoncentral(\"x\", k, l) \n```", "```py\n>>> density(X)(z)\nl*z**k*exp(-l**2/2 - z**2/2)*besseli(k/2 - 1, l*z)/(l*z)**(k/2) \n```", "```py\nsympy.stats.ChiSquared(name, k)\n```", "```py\n>>> from sympy.stats import ChiSquared, density, E, variance, moment\n>>> from sympy import Symbol \n```", "```py\n>>> k = Symbol(\"k\", integer=True, positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = ChiSquared(\"x\", k) \n```", "```py\n>>> density(X)(z)\nz**(k/2 - 1)*exp(-z/2)/(2**(k/2)*gamma(k/2)) \n```", "```py\n>>> E(X)\nk \n```", "```py\n>>> variance(X)\n2*k \n```", "```py\n>>> moment(X, 3)\nk**3 + 6*k**2 + 8*k \n```", "```py\nsympy.stats.Dagum(name, p, a, b)\n```", "```py\n>>> from sympy.stats import Dagum, density, cdf\n>>> from sympy import Symbol \n```", "```py\n>>> p = Symbol(\"p\", positive=True)\n>>> a = Symbol(\"a\", positive=True)\n>>> b = Symbol(\"b\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Dagum(\"x\", p, a, b) \n```", "```py\n>>> density(X)(z)\na*p*(z/b)**(a*p)*((z/b)**a + 1)**(-p - 1)/z \n```", "```py\n>>> cdf(X)(z)\nPiecewise(((1 + (z/b)**(-a))**(-p), z >= 0), (0, True)) \n```", "```py\nsympy.stats.Davis(name, b, n, mu)\n```", "```py\n>>> from sympy.stats import Davis, density\n>>> from sympy import Symbol\n>>> b = Symbol(\"b\", positive=True)\n>>> n = Symbol(\"n\", positive=True)\n>>> mu = Symbol(\"mu\", positive=True)\n>>> z = Symbol(\"z\")\n>>> X = Davis(\"x\", b, n, mu)\n>>> density(X)(z)\nb**n*(-mu + z)**(-n - 1)/((exp(b/(-mu + z)) - 1)*gamma(n)*zeta(n)) \n```", "```py\nsympy.stats.Erlang(name, k, l)\n```", "```py\n>>> from sympy.stats import Erlang, density, cdf, E, variance\n>>> from sympy import Symbol, simplify, pprint \n```", "```py\n>>> k = Symbol(\"k\", integer=True, positive=True)\n>>> l = Symbol(\"l\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Erlang(\"x\", k, l) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n k  k - 1  -l*z\nl *z     *e\n---------------\n Gamma(k) \n```", "```py\n>>> C = cdf(X)(z)\n>>> pprint(C, use_unicode=False)\n/lowergamma(k, l*z)\n|------------------  for z > 0\n<     Gamma(k)\n|\n\\        0           otherwise \n```", "```py\n>>> E(X)\nk/l \n```", "```py\n>>> simplify(variance(X))\nk/l**2 \n```", "```py\nsympy.stats.ExGaussian(name, mean, std, rate)\n```", "```py\n>>> from sympy.stats import ExGaussian, density, cdf, E\n>>> from sympy.stats import variance, skewness\n>>> from sympy import Symbol, pprint, simplify \n```", "```py\n>>> mean = Symbol(\"mu\")\n>>> std = Symbol(\"sigma\", positive=True)\n>>> rate = Symbol(\"lamda\", positive=True)\n>>> z = Symbol(\"z\")\n>>> X = ExGaussian(\"x\", mean, std, rate) \n```", "```py\n>>> pprint(density(X)(z), use_unicode=False)\n /           2             \\\n lamda*\\lamda*sigma  + 2*mu - 2*z/\n ---------------------------------     /  ___ /           2         \\\\\n 2                     |\\/ 2 *\\lamda*sigma  + mu - z/|\nlamda*e                                 *erfc|-----------------------------|\n \\           2*sigma           /\n----------------------------------------------------------------------------\n 2 \n```", "```py\n>>> cdf(X)(z)\n-(erf(sqrt(2)*(-lamda**2*sigma**2 + lamda*(-mu + z))/(2*lamda*sigma))/2 + 1/2)*exp(lamda**2*sigma**2/2 - lamda*(-mu + z)) + erf(sqrt(2)*(-mu + z)/(2*sigma))/2 + 1/2 \n```", "```py\n>>> E(X)\n(lamda*mu + 1)/lamda \n```", "```py\n>>> simplify(variance(X))\nsigma**2 + lamda**(-2) \n```", "```py\n>>> simplify(skewness(X))\n2/(lamda**2*sigma**2 + 1)**(3/2) \n```", "```py\nsympy.stats.Exponential(name, rate)\n```", "```py\n>>> from sympy.stats import Exponential, density, cdf, E\n>>> from sympy.stats import variance, std, skewness, quantile\n>>> from sympy import Symbol \n```", "```py\n>>> l = Symbol(\"lambda\", positive=True)\n>>> z = Symbol(\"z\")\n>>> p = Symbol(\"p\")\n>>> X = Exponential(\"x\", l) \n```", "```py\n>>> density(X)(z)\nlambda*exp(-lambda*z) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((1 - exp(-lambda*z), z >= 0), (0, True)) \n```", "```py\n>>> quantile(X)(p)\n-log(1 - p)/lambda \n```", "```py\n>>> E(X)\n1/lambda \n```", "```py\n>>> variance(X)\nlambda**(-2) \n```", "```py\n>>> skewness(X)\n2 \n```", "```py\n>>> X = Exponential('x', 10) \n```", "```py\n>>> density(X)(z)\n10*exp(-10*z) \n```", "```py\n>>> E(X)\n1/10 \n```", "```py\n>>> std(X)\n1/10 \n```", "```py\nsympy.stats.FDistribution(name, d1, d2)\n```", "```py\n>>> from sympy.stats import FDistribution, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> d1 = Symbol(\"d1\", positive=True)\n>>> d2 = Symbol(\"d2\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = FDistribution(\"x\", d1, d2) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n d2\n --    ______________________________\n 2    /       d1            -d1 - d2\nd2  *\\/  (d1*z)  *(d1*z + d2)\n--------------------------------------\n /d1  d2\\\n z*B|--, --|\n \\2   2 / \n```", "```py\nsympy.stats.FisherZ(name, d1, d2)\n```", "```py\n>>> from sympy.stats import FisherZ, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> d1 = Symbol(\"d1\", positive=True)\n>>> d2 = Symbol(\"d2\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = FisherZ(\"x\", d1, d2) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n d1   d2\n d1   d2               - -- - --\n --   --                 2    2\n 2    2  /    2*z     \\           d1*z\n2*d1  *d2  *\\d1*e    + d2/         *e\n-----------------------------------------\n /d1  d2\\\n B|--, --|\n \\2   2 / \n```", "```py\nsympy.stats.Frechet(name, a, s=1, m=0)\n```", "```py\n>>> from sympy.stats import Frechet, density, cdf\n>>> from sympy import Symbol \n```", "```py\n>>> a = Symbol(\"a\", positive=True)\n>>> s = Symbol(\"s\", positive=True)\n>>> m = Symbol(\"m\", real=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Frechet(\"x\", a, s, m) \n```", "```py\n>>> density(X)(z)\na*((-m + z)/s)**(-a - 1)*exp(-1/((-m + z)/s)**a)/s \n```", "```py\n>>> cdf(X)(z)\nPiecewise((exp(-1/((-m + z)/s)**a), m <= z), (0, True)) \n```", "```py\nsympy.stats.Gamma(name, k, theta)\n```", "```py\n>>> from sympy.stats import Gamma, density, cdf, E, variance\n>>> from sympy import Symbol, pprint, simplify \n```", "```py\n>>> k = Symbol(\"k\", positive=True)\n>>> theta = Symbol(\"theta\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Gamma(\"x\", k, theta) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n -z\n -----\n -k  k - 1  theta\ntheta  *z     *e\n---------------------\n Gamma(k) \n```", "```py\n>>> C = cdf(X, meijerg=True)(z)\n>>> pprint(C, use_unicode=False)\n/            /     z  \\\n|k*lowergamma|k, -----|\n|            \\   theta/\n<----------------------  for z >= 0\n|     Gamma(k + 1)\n|\n\\          0             otherwise \n```", "```py\n>>> E(X)\nk*theta \n```", "```py\n>>> V = simplify(variance(X))\n>>> pprint(V, use_unicode=False)\n 2\nk*theta \n```", "```py\nsympy.stats.GammaInverse(name, a, b)\n```", "```py\n>>> from sympy.stats import GammaInverse, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> a = Symbol(\"a\", positive=True)\n>>> b = Symbol(\"b\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = GammaInverse(\"x\", a, b) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n -b\n ---\n a  -a - 1   z\nb *z      *e\n---------------\n Gamma(a) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((uppergamma(a, b/z)/gamma(a), z > 0), (0, True)) \n```", "```py\nsympy.stats.Gompertz(name, b, eta)\n```", "```py\n>>> from sympy.stats import Gompertz, density\n>>> from sympy import Symbol \n```", "```py\n>>> b = Symbol(\"b\", positive=True)\n>>> eta = Symbol(\"eta\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Gompertz(\"x\", b, eta) \n```", "```py\n>>> density(X)(z)\nb*eta*exp(eta)*exp(b*z)*exp(-eta*exp(b*z)) \n```", "```py\nsympy.stats.Gumbel(name, beta, mu, minimum=False)\n```", "```py\n>>> from sympy.stats import Gumbel, density, cdf\n>>> from sympy import Symbol\n>>> x = Symbol(\"x\")\n>>> mu = Symbol(\"mu\")\n>>> beta = Symbol(\"beta\", positive=True)\n>>> X = Gumbel(\"x\", beta, mu)\n>>> density(X)(x)\nexp(-exp(-(-mu + x)/beta) - (-mu + x)/beta)/beta\n>>> cdf(X)(x)\nexp(-exp(-(-mu + x)/beta)) \n```", "```py\nsympy.stats.Kumaraswamy(name, a, b)\n```", "```py\n>>> from sympy.stats import Kumaraswamy, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> a = Symbol(\"a\", positive=True)\n>>> b = Symbol(\"b\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Kumaraswamy(\"x\", a, b) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n b - 1\n a - 1 /     a\\\na*b*z     *\\1 - z / \n```", "```py\n>>> cdf(X)(z)\nPiecewise((0, z < 0), (1 - (1 - z**a)**b, z <= 1), (1, True)) \n```", "```py\nsympy.stats.Laplace(name, mu, b)\n```", "```py\n>>> from sympy.stats import Laplace, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> mu = Symbol(\"mu\")\n>>> b = Symbol(\"b\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Laplace(\"x\", mu, b) \n```", "```py\n>>> density(X)(z)\nexp(-Abs(mu - z)/b)/(2*b) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((exp((-mu + z)/b)/2, mu > z), (1 - exp((mu - z)/b)/2, True)) \n```", "```py\n>>> L = Laplace('L', [1, 2], [[1, 0], [0, 1]])\n>>> pprint(density(L)(1, 2), use_unicode=False)\n 5        /     ____\\\ne *besselk\\0, \\/ 35 /\n---------------------\n pi \n```", "```py\nsympy.stats.Levy(name, mu, c)\n```", "```py\n>>> from sympy.stats import Levy, density, cdf\n>>> from sympy import Symbol \n```", "```py\n>>> mu = Symbol(\"mu\", real=True)\n>>> c = Symbol(\"c\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Levy(\"x\", mu, c) \n```", "```py\n>>> density(X)(z)\nsqrt(2)*sqrt(c)*exp(-c/(-2*mu + 2*z))/(2*sqrt(pi)*(-mu + z)**(3/2)) \n```", "```py\n>>> cdf(X)(z)\nerfc(sqrt(c)*sqrt(1/(-2*mu + 2*z))) \n```", "```py\nsympy.stats.Logistic(name, mu, s)\n```", "```py\n>>> from sympy.stats import Logistic, density, cdf\n>>> from sympy import Symbol \n```", "```py\n>>> mu = Symbol(\"mu\", real=True)\n>>> s = Symbol(\"s\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Logistic(\"x\", mu, s) \n```", "```py\n>>> density(X)(z)\nexp((mu - z)/s)/(s*(exp((mu - z)/s) + 1)**2) \n```", "```py\n>>> cdf(X)(z)\n1/(exp((mu - z)/s) + 1) \n```", "```py\nsympy.stats.LogLogistic(name, alpha, beta)\n```", "```py\n>>> from sympy.stats import LogLogistic, density, cdf, quantile\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> p = Symbol(\"p\")\n>>> z = Symbol(\"z\", positive=True) \n```", "```py\n>>> X = LogLogistic(\"x\", alpha, beta) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n beta - 1\n /  z  \\\n beta*|-----|\n \\alpha/\n------------------------\n 2\n /       beta    \\\n |/  z  \\        |\nalpha*||-----|     + 1|\n \\\\alpha/        / \n```", "```py\n>>> cdf(X)(z)\n1/(1 + (z/alpha)**(-beta)) \n```", "```py\n>>> quantile(X)(p)\nalpha*(p/(1 - p))**(1/beta) \n```", "```py\nsympy.stats.LogNormal(name, mean, std)\n```", "```py\n>>> from sympy.stats import LogNormal, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> mu = Symbol(\"mu\", real=True)\n>>> sigma = Symbol(\"sigma\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = LogNormal(\"x\", mu, sigma) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n 2\n -(-mu + log(z))\n -----------------\n 2\n ___      2*sigma\n\\/ 2 *e\n------------------------\n ____\n 2*\\/ pi *sigma*z \n```", "```py\n>>> X = LogNormal('x', 0, 1) # Mean 0, standard deviation 1 \n```", "```py\n>>> density(X)(z)\nsqrt(2)*exp(-log(z)**2/2)/(2*sqrt(pi)*z) \n```", "```py\nsympy.stats.Lomax(name, alpha, lamda)\n```", "```py\n>>> from sympy.stats import Lomax, density, cdf, E\n>>> from sympy import symbols\n>>> a, l = symbols('a, l', positive=True)\n>>> X = Lomax('X', a, l)\n>>> x = symbols('x')\n>>> density(X)(x)\na*(1 + x/l)**(-a - 1)/l\n>>> cdf(X)(x)\nPiecewise((1 - 1/(1 + x/l)**a, x >= 0), (0, True))\n>>> a = 2\n>>> X = Lomax('X', a, l)\n>>> E(X)\nl \n```", "```py\nsympy.stats.Maxwell(name, a)\n```", "```py\n>>> from sympy.stats import Maxwell, density, E, variance\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> a = Symbol(\"a\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Maxwell(\"x\", a) \n```", "```py\n>>> density(X)(z)\nsqrt(2)*z**2*exp(-z**2/(2*a**2))/(sqrt(pi)*a**3) \n```", "```py\n>>> E(X)\n2*sqrt(2)*a/sqrt(pi) \n```", "```py\n>>> simplify(variance(X))\na**2*(-8 + 3*pi)/pi \n```", "```py\nsympy.stats.Moyal(name, mu, sigma)\n```", "```py\n>>> from sympy.stats import Moyal, density, cdf\n>>> from sympy import Symbol, simplify\n>>> mu = Symbol(\"mu\", real=True)\n>>> sigma = Symbol(\"sigma\", positive=True, real=True)\n>>> z = Symbol(\"z\")\n>>> X = Moyal(\"x\", mu, sigma)\n>>> density(X)(z)\nsqrt(2)*exp(-exp((mu - z)/sigma)/2 - (-mu + z)/(2*sigma))/(2*sqrt(pi)*sigma)\n>>> simplify(cdf(X)(z))\n1 - erf(sqrt(2)*exp((mu - z)/(2*sigma))/2) \n```", "```py\nsympy.stats.Nakagami(name, mu, omega)\n```", "```py\n>>> from sympy.stats import Nakagami, density, E, variance, cdf\n>>> from sympy import Symbol, simplify, pprint \n```", "```py\n>>> mu = Symbol(\"mu\", positive=True)\n>>> omega = Symbol(\"omega\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Nakagami(\"x\", mu, omega) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n 2\n -mu*z\n -------\n mu      -mu  2*mu - 1  omega\n2*mu  *omega   *z        *e\n----------------------------------\n Gamma(mu) \n```", "```py\n>>> simplify(E(X))\nsqrt(mu)*sqrt(omega)*gamma(mu + 1/2)/gamma(mu + 1) \n```", "```py\n>>> V = simplify(variance(X))\n>>> pprint(V, use_unicode=False)\n 2\n omega*Gamma (mu + 1/2)\nomega - -----------------------\n Gamma(mu)*Gamma(mu + 1) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((lowergamma(mu, mu*z**2/omega)/gamma(mu), z > 0),\n (0, True)) \n```", "```py\nsympy.stats.Normal(name, mean, std)\n```", "```py\n>>> from sympy.stats import Normal, density, E, std, cdf, skewness, quantile, marginal_distribution\n>>> from sympy import Symbol, simplify, pprint \n```", "```py\n>>> mu = Symbol(\"mu\")\n>>> sigma = Symbol(\"sigma\", positive=True)\n>>> z = Symbol(\"z\")\n>>> y = Symbol(\"y\")\n>>> p = Symbol(\"p\")\n>>> X = Normal(\"x\", mu, sigma) \n```", "```py\n>>> density(X)(z)\nsqrt(2)*exp(-(-mu + z)**2/(2*sigma**2))/(2*sqrt(pi)*sigma) \n```", "```py\n>>> C = simplify(cdf(X))(z) # it needs a little more help...\n>>> pprint(C, use_unicode=False)\n /  ___          \\\n |\\/ 2 *(-mu + z)|\nerf|---------------|\n \\    2*sigma    /   1\n-------------------- + -\n 2             2 \n```", "```py\n>>> quantile(X)(p)\nmu + sqrt(2)*sigma*erfinv(2*p - 1) \n```", "```py\n>>> simplify(skewness(X))\n0 \n```", "```py\n>>> X = Normal(\"x\", 0, 1) # Mean 0, standard deviation 1\n>>> density(X)(z)\nsqrt(2)*exp(-z**2/2)/(2*sqrt(pi)) \n```", "```py\n>>> E(2*X + 1)\n1 \n```", "```py\n>>> simplify(std(2*X + 1))\n2 \n```", "```py\n>>> m = Normal('X', [1, 2], [[2, 1], [1, 2]])\n>>> pprint(density(m)(y, z), use_unicode=False)\n 2          2\n y    y*z   z\n - -- + --- - -- + z - 1\n ___    3     3    3\n\\/ 3 *e\n------------------------------\n 6*pi \n```", "```py\n>>> marginal_distribution(m, m[0])(1)\n 1/(2*sqrt(pi)) \n```", "```py\nsympy.stats.Pareto(name, xm, alpha)\n```", "```py\n>>> from sympy.stats import Pareto, density\n>>> from sympy import Symbol \n```", "```py\n>>> xm = Symbol(\"xm\", positive=True)\n>>> beta = Symbol(\"beta\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Pareto(\"x\", xm, beta) \n```", "```py\n>>> density(X)(z)\nbeta*xm**beta*z**(-beta - 1) \n```", "```py\nsympy.stats.PowerFunction(name, alpha, a, b)\n```", "```py\n>>> from sympy.stats import PowerFunction, density, cdf, E, variance\n>>> from sympy import Symbol\n>>> alpha = Symbol(\"alpha\", positive=True)\n>>> a = Symbol(\"a\", real=True)\n>>> b = Symbol(\"b\", real=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = PowerFunction(\"X\", 2, a, b) \n```", "```py\n>>> density(X)(z)\n(-2*a + 2*z)/(-a + b)**2 \n```", "```py\n>>> cdf(X)(z)\nPiecewise((a**2/(a**2 - 2*a*b + b**2) - 2*a*z/(a**2 - 2*a*b + b**2) +\nz**2/(a**2 - 2*a*b + b**2), a <= z), (0, True)) \n```", "```py\n>>> alpha = 2\n>>> a = 0\n>>> b = 1\n>>> Y = PowerFunction(\"Y\", alpha, a, b) \n```", "```py\n>>> E(Y)\n2/3 \n```", "```py\n>>> variance(Y)\n1/18 \n```", "```py\nsympy.stats.QuadraticU(name, a, b)\n```", "```py\n>>> from sympy.stats import QuadraticU, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> a = Symbol(\"a\", real=True)\n>>> b = Symbol(\"b\", real=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = QuadraticU(\"x\", a, b) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n/                2\n|   /  a   b    \\\n|12*|- - - - + z|\n|   \\  2   2    /\n<-----------------  for And(b >= z, a <= z)\n|            3\n|    (-a + b)\n|\n\\        0                 otherwise \n```", "```py\nsympy.stats.RaisedCosine(name, mu, s)\n```", "```py\n>>> from sympy.stats import RaisedCosine, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> mu = Symbol(\"mu\", real=True)\n>>> s = Symbol(\"s\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = RaisedCosine(\"x\", mu, s) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n/   /pi*(-mu + z)\\\n|cos|------------| + 1\n|   \\     s      /\n<---------------------  for And(z >= mu - s, z <= mu + s)\n|         2*s\n|\n\\          0                        otherwise \n```", "```py\nsympy.stats.Rayleigh(name, sigma)\n```", "```py\n>>> from sympy.stats import Rayleigh, density, E, variance\n>>> from sympy import Symbol \n```", "```py\n>>> sigma = Symbol(\"sigma\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Rayleigh(\"x\", sigma) \n```", "```py\n>>> density(X)(z)\nz*exp(-z**2/(2*sigma**2))/sigma**2 \n```", "```py\n>>> E(X)\nsqrt(2)*sqrt(pi)*sigma/2 \n```", "```py\n>>> variance(X)\n-pi*sigma**2/2 + 2*sigma**2 \n```", "```py\nsympy.stats.Reciprocal(name, a, b)\n```", "```py\n>>> from sympy.stats import Reciprocal, density, cdf\n>>> from sympy import symbols\n>>> a, b, x = symbols('a, b, x', positive=True)\n>>> R = Reciprocal('R', a, b) \n```", "```py\n>>> density(R)(x)\n1/(x*(-log(a) + log(b)))\n>>> cdf(R)(x)\nPiecewise((log(a)/(log(a) - log(b)) - log(x)/(log(a) - log(b)), a <= x), (0, True)) \n```", "```py\nsympy.stats.StudentT(name, nu)\n```", "```py\n>>> from sympy.stats import StudentT, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> nu = Symbol(\"nu\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = StudentT(\"x\", nu) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n nu   1\n - -- - -\n 2    2\n /     2\\\n |    z |\n |1 + --|\n \\    nu/\n-----------------\n ____  /     nu\\\n\\/ nu *B|1/2, --|\n \\     2 / \n```", "```py\n>>> cdf(X)(z)\n1/2 + z*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,),\n -z**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2)) \n```", "```py\nsympy.stats.ShiftedGompertz(name, b, eta)\n```", "```py\n>>> from sympy.stats import ShiftedGompertz, density\n>>> from sympy import Symbol \n```", "```py\n>>> b = Symbol(\"b\", positive=True)\n>>> eta = Symbol(\"eta\", positive=True)\n>>> x = Symbol(\"x\") \n```", "```py\n>>> X = ShiftedGompertz(\"x\", b, eta) \n```", "```py\n>>> density(X)(x)\nb*(eta*(1 - exp(-b*x)) + 1)*exp(-b*x)*exp(-eta*exp(-b*x)) \n```", "```py\nsympy.stats.Trapezoidal(name, a, b, c, d)\n```", "```py\n>>> from sympy.stats import Trapezoidal, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> a = Symbol(\"a\")\n>>> b = Symbol(\"b\")\n>>> c = Symbol(\"c\")\n>>> d = Symbol(\"d\")\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Trapezoidal(\"x\", a,b,c,d) \n```", "```py\n>>> pprint(density(X)(z), use_unicode=False)\n/        -2*a + 2*z\n|-------------------------  for And(a <= z, b > z)\n|(-a + b)*(-a - b + c + d)\n|\n|           2\n|     --------------        for And(b <= z, c > z)\n<     -a - b + c + d\n|\n|        2*d - 2*z\n|-------------------------  for And(d >= z, c <= z)\n|(-c + d)*(-a - b + c + d)\n|\n\\            0                     otherwise \n```", "```py\nsympy.stats.Triangular(name, a, b, c)\n```", "```py\n>>> from sympy.stats import Triangular, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> a = Symbol(\"a\")\n>>> b = Symbol(\"b\")\n>>> c = Symbol(\"c\")\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Triangular(\"x\", a,b,c) \n```", "```py\n>>> pprint(density(X)(z), use_unicode=False)\n/    -2*a + 2*z\n|-----------------  for And(a <= z, c > z)\n|(-a + b)*(-a + c)\n|\n|       2\n|     ------              for c = z\n<     -a + b\n|\n|   2*b - 2*z\n|----------------   for And(b >= z, c < z)\n|(-a + b)*(b - c)\n|\n\\        0                otherwise \n```", "```py\nsympy.stats.Uniform(name, left, right)\n```", "```py\n>>> from sympy.stats import Uniform, density, cdf, E, variance\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> a = Symbol(\"a\", negative=True)\n>>> b = Symbol(\"b\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Uniform(\"x\", a, b) \n```", "```py\n>>> density(X)(z)\nPiecewise((1/(-a + b), (b >= z) & (a <= z)), (0, True)) \n```", "```py\n>>> cdf(X)(z)\nPiecewise((0, a > z), ((-a + z)/(-a + b), b >= z), (1, True)) \n```", "```py\n>>> E(X)\na/2 + b/2 \n```", "```py\n>>> simplify(variance(X))\na**2/12 - a*b/6 + b**2/12 \n```", "```py\nsympy.stats.UniformSum(name, n)\n```", "```py\n>>> from sympy.stats import UniformSum, density, cdf\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> n = Symbol(\"n\", integer=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = UniformSum(\"x\", n) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\nfloor(z)\n ___\n \\  `\n \\         k         n - 1 /n\\\n )    (-1) *(-k + z)     *| |\n /                         \\k/\n /__,\n k = 0\n--------------------------------\n (n - 1)! \n```", "```py\n>>> cdf(X)(z)\nPiecewise((0, z < 0), (Sum((-1)**_k*(-_k + z)**n*binomial(n, _k),\n (_k, 0, floor(z)))/factorial(n), n >= z), (1, True)) \n```", "```py\nsympy.stats.VonMises(name, mu, k)\n```", "```py\n>>> from sympy.stats import VonMises, density\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> mu = Symbol(\"mu\")\n>>> k = Symbol(\"k\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = VonMises(\"x\", mu, k) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n k*cos(mu - z)\n e\n------------------\n2*pi*besseli(0, k) \n```", "```py\nsympy.stats.Wald(name, mean, shape)\n```", "```py\n>>> from sympy.stats import GaussianInverse, density, E, std, skewness\n>>> from sympy import Symbol, pprint \n```", "```py\n>>> mu = Symbol(\"mu\", positive=True)\n>>> lamda = Symbol(\"lambda\", positive=True)\n>>> z = Symbol(\"z\", positive=True)\n>>> X = GaussianInverse(\"x\", mu, lamda) \n```", "```py\n>>> D = density(X)(z)\n>>> pprint(D, use_unicode=False)\n 2\n -lambda*(-mu + z)\n -------------------\n 2\n ___   ________        2*mu *z\n\\/ 2 *\\/ lambda *e\n-------------------------------------\n ____  3/2\n 2*\\/ pi *z \n```", "```py\n>>> E(X)\nmu \n```", "```py\n>>> std(X).expand()\nmu**(3/2)/sqrt(lambda) \n```", "```py\n>>> skewness(X).expand()\n3*sqrt(mu)/sqrt(lambda) \n```", "```py\nsympy.stats.Weibull(name, alpha, beta)\n```", "```py\n>>> from sympy.stats import Weibull, density, E, variance\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> l = Symbol(\"lambda\", positive=True)\n>>> k = Symbol(\"k\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = Weibull(\"x\", l, k) \n```", "```py\n>>> density(X)(z)\nk*(z/lambda)**(k - 1)*exp(-(z/lambda)**k)/lambda \n```", "```py\n>>> simplify(E(X))\nlambda*gamma(1 + 1/k) \n```", "```py\n>>> simplify(variance(X))\nlambda**2*(-gamma(1 + 1/k)**2 + gamma(1 + 2/k)) \n```", "```py\nsympy.stats.WignerSemicircle(name, R)\n```", "```py\n>>> from sympy.stats import WignerSemicircle, density, E\n>>> from sympy import Symbol \n```", "```py\n>>> R = Symbol(\"R\", positive=True)\n>>> z = Symbol(\"z\") \n```", "```py\n>>> X = WignerSemicircle(\"x\", R) \n```", "```py\n>>> density(X)(z)\n2*sqrt(R**2 - z**2)/(pi*R**2) \n```", "```py\n>>> E(X)\n0 \n```", "```py\nsympy.stats.ContinuousRV(symbol, density, set=Interval(-oo, oo), **kwargs)\n```", "```py\n>>> from sympy import Symbol, sqrt, exp, pi\n>>> from sympy.stats import ContinuousRV, P, E \n```", "```py\n>>> x = Symbol(\"x\") \n```", "```py\n>>> pdf = sqrt(2)*exp(-x**2/2)/(2*sqrt(pi)) # Normal distribution\n>>> X = ContinuousRV(x, pdf) \n```", "```py\n>>> E(X)\n0\n>>> P(X>0)\n1/2 \n```", "```py\nsympy.stats.JointRV(symbol, pdf, _set=None)\n```", "```py\n>>> from sympy import exp, pi, Indexed, S\n>>> from sympy.stats import density, JointRV\n>>> x1, x2 = (Indexed('x', i) for i in (1, 2))\n>>> pdf = exp(-x1**2/2 + x1 - x2**2/2 - S(1)/2)/(2*pi)\n>>> N1 = JointRV('x', pdf) #Multivariate Normal distribution\n>>> density(N1)(1, 2)\nexp(-2)/(2*pi) \n```", "```py\nsympy.stats.marginal_distribution(rv, *indices)\n```", "```py\n>>> from sympy.stats import MultivariateNormal, marginal_distribution\n>>> m = MultivariateNormal('X', [1, 2], [[2, 1], [1, 2]])\n>>> marginal_distribution(m, m[0])(1)\n1/(2*sqrt(pi)) \n```", "```py\nsympy.stats.MultivariateNormal(name, mu, sigma)\n```", "```py\n>>> from sympy.stats import MultivariateNormal, density, marginal_distribution\n>>> from sympy import symbols, MatrixSymbol\n>>> X = MultivariateNormal('X', [3, 4], [[2, 1], [1, 2]])\n>>> y, z = symbols('y z')\n>>> density(X)(y, z)\nsqrt(3)*exp(-y**2/3 + y*z/3 + 2*y/3 - z**2/3 + 5*z/3 - 13/3)/(6*pi)\n>>> density(X)(1, 2)\nsqrt(3)*exp(-4/3)/(6*pi)\n>>> marginal_distribution(X, X[1])(y)\nexp(-(y - 4)**2/4)/(2*sqrt(pi))\n>>> marginal_distribution(X, X[0])(y)\nexp(-(y - 3)**2/4)/(2*sqrt(pi)) \n```", "```py\n>>> n = symbols('n', integer=True, positive=True)\n>>> Sg = MatrixSymbol('Sg', n, n)\n>>> mu = MatrixSymbol('mu', n, 1)\n>>> obs = MatrixSymbol('obs', n, 1)\n>>> X = MultivariateNormal('X', mu, Sg) \n```", "```py\n>>> density(X)(obs)\n(exp(((1/2)*mu.T - (1/2)*obs.T)*Sg**(-1)*(-mu + obs))/sqrt((2*pi)**n*Determinant(Sg)))[0, 0] \n```", "```py\nsympy.stats.MultivariateLaplace(name, mu, sigma)\n```", "```py\n>>> from sympy.stats import MultivariateLaplace, density\n>>> from sympy import symbols\n>>> y, z = symbols('y z')\n>>> X = MultivariateLaplace('X', [2, 4], [[3, 1], [1, 3]])\n>>> density(X)(y, z)\nsqrt(2)*exp(y/4 + 5*z/4)*besselk(0, sqrt(15*y*(3*y/8 - z/8)/2 + 15*z*(-y/8 + 3*z/8)/2))/(4*pi)\n>>> density(X)(1, 2)\nsqrt(2)*exp(11/4)*besselk(0, sqrt(165)/4)/(4*pi) \n```", "```py\nsympy.stats.GeneralizedMultivariateLogGamma(syms, delta, v, lamda, mu)\n```", "```py\n>>> from sympy.stats import density\n>>> from sympy.stats.joint_rv_types import GeneralizedMultivariateLogGamma\n>>> from sympy import symbols, S\n>>> v = 1\n>>> l, mu = [1, 1, 1], [1, 1, 1]\n>>> d = S.Half\n>>> y = symbols('y_1:4', positive=True)\n>>> Gd = GeneralizedMultivariateLogGamma('G', d, v, l, mu)\n>>> density(Gd)(y[0], y[1], y[2])\nSum(exp((n + 1)*(y_1 + y_2 + y_3) - exp(y_1) - exp(y_2) -\nexp(y_3))/(2**n*gamma(n + 1)**3), (n, 0, oo))/2 \n```", "```py\n>>> from sympy.stats.joint_rv_types import GeneralizedMultivariateLogGamma as GMVLG\n>>> Gd = GMVLG('G', d, v, l, mu) \n```", "```py\nsympy.stats.GeneralizedMultivariateLogGammaOmega(syms, omega, v, lamda, mu)\n```", "```py\n>>> from sympy.stats import density\n>>> from sympy.stats.joint_rv_types import GeneralizedMultivariateLogGammaOmega\n>>> from sympy import Matrix, symbols, S\n>>> omega = Matrix([[1, S.Half, S.Half], [S.Half, 1, S.Half], [S.Half, S.Half, 1]])\n>>> v = 1\n>>> l, mu = [1, 1, 1], [1, 1, 1]\n>>> G = GeneralizedMultivariateLogGammaOmega('G', omega, v, l, mu)\n>>> y = symbols('y_1:4', positive=True)\n>>> density(G)(y[0], y[1], y[2])\nsqrt(2)*Sum((1 - sqrt(2)/2)**n*exp((n + 1)*(y_1 + y_2 + y_3) - exp(y_1) -\nexp(y_2) - exp(y_3))/gamma(n + 1)**3, (n, 0, oo))/2 \n```", "```py\n>>> from sympy.stats.joint_rv_types import GeneralizedMultivariateLogGammaOmega as GMVLGO\n>>> G = GMVLGO('G', omega, v, l, mu) \n```", "```py\nsympy.stats.Multinomial(syms, n, *p)\n```", "```py\n>>> from sympy.stats import density, Multinomial, marginal_distribution\n>>> from sympy import symbols\n>>> x1, x2, x3 = symbols('x1, x2, x3', nonnegative=True, integer=True)\n>>> p1, p2, p3 = symbols('p1, p2, p3', positive=True)\n>>> M = Multinomial('M', 3, p1, p2, p3)\n>>> density(M)(x1, x2, x3)\nPiecewise((6*p1**x1*p2**x2*p3**x3/(factorial(x1)*factorial(x2)*factorial(x3)),\nEq(x1 + x2 + x3, 3)), (0, True))\n>>> marginal_distribution(M, M[0])(x1).subs(x1, 1)\n3*p1*p2**2 + 6*p1*p2*p3 + 3*p1*p3**2 \n```", "```py\nsympy.stats.MultivariateBeta(syms, *alpha)\n```", "```py\n>>> from sympy.stats import density, MultivariateBeta, marginal_distribution\n>>> from sympy import Symbol\n>>> a1 = Symbol('a1', positive=True)\n>>> a2 = Symbol('a2', positive=True)\n>>> B = MultivariateBeta('B', [a1, a2])\n>>> C = MultivariateBeta('C', a1, a2)\n>>> x = Symbol('x')\n>>> y = Symbol('y')\n>>> density(B)(x, y)\nx**(a1 - 1)*y**(a2 - 1)*gamma(a1 + a2)/(gamma(a1)*gamma(a2))\n>>> marginal_distribution(C, C[0])(x)\nx**(a1 - 1)*gamma(a1 + a2)/(a2*gamma(a1)*gamma(a2)) \n```", "```py\nsympy.stats.MultivariateEwens(syms, n, theta)\n```", "```py\n>>> from sympy.stats import density, marginal_distribution, MultivariateEwens\n>>> from sympy import Symbol\n>>> a1 = Symbol('a1', positive=True)\n>>> a2 = Symbol('a2', positive=True)\n>>> ed = MultivariateEwens('E', 2, 1)\n>>> density(ed)(a1, a2)\nPiecewise((1/(2**a2*factorial(a1)*factorial(a2)), Eq(a1 + 2*a2, 2)), (0, True))\n>>> marginal_distribution(ed, ed[0])(a1)\nPiecewise((1/factorial(a1), Eq(a1, 2)), (0, True)) \n```", "```py\nsympy.stats.MultivariateT(syms, mu, sigma, v)\n```", "```py\n>>> from sympy.stats import density, MultivariateT\n>>> from sympy import Symbol \n```", "```py\n>>> x = Symbol(\"x\")\n>>> X = MultivariateT(\"x\", [1, 1], [[1, 0], [0, 1]], 2) \n```", "```py\n>>> density(X)(1, 2)\n2/(9*pi) \n```", "```py\nsympy.stats.NegativeMultinomial(syms, k0, *p)\n```", "```py\n>>> from sympy.stats import density, NegativeMultinomial, marginal_distribution\n>>> from sympy import symbols\n>>> x1, x2, x3 = symbols('x1, x2, x3', nonnegative=True, integer=True)\n>>> p1, p2, p3 = symbols('p1, p2, p3', positive=True)\n>>> N = NegativeMultinomial('M', 3, p1, p2, p3)\n>>> N_c = NegativeMultinomial('M', 3, 0.1, 0.1, 0.1)\n>>> density(N)(x1, x2, x3)\np1**x1*p2**x2*p3**x3*(-p1 - p2 - p3 + 1)**3*gamma(x1 + x2 +\nx3 + 3)/(2*factorial(x1)*factorial(x2)*factorial(x3))\n>>> marginal_distribution(N_c, N_c[0])(1).evalf().round(2)\n0.25 \n```", "```py\nsympy.stats.NormalGamma(sym, mu, lamda, alpha, beta)\n```", "```py\n>>> from sympy.stats import density, NormalGamma\n>>> from sympy import symbols \n```", "```py\n>>> X = NormalGamma('x', 0, 1, 2, 3)\n>>> y, z = symbols('y z') \n```", "```py\n>>> density(X)(y, z)\n9*sqrt(2)*z**(3/2)*exp(-3*z)*exp(-y**2*z/2)/(2*sqrt(pi)) \n```", "```py\nclass sympy.stats.DiscreteMarkovChain(sym, state_space=None, trans_probs=None)\n```", "```py\n>>> from sympy.stats import DiscreteMarkovChain, TransitionMatrixOf, P, E\n>>> from sympy import Matrix, MatrixSymbol, Eq, symbols\n>>> T = Matrix([[0.5, 0.2, 0.3],[0.2, 0.5, 0.3],[0.2, 0.3, 0.5]])\n>>> Y = DiscreteMarkovChain(\"Y\", [0, 1, 2], T)\n>>> YS = DiscreteMarkovChain(\"Y\") \n```", "```py\n>>> Y.state_space\n{0, 1, 2}\n>>> Y.transition_probabilities\nMatrix([\n[0.5, 0.2, 0.3],\n[0.2, 0.5, 0.3],\n[0.2, 0.3, 0.5]])\n>>> TS = MatrixSymbol('T', 3, 3)\n>>> P(Eq(YS[3], 2), Eq(YS[1], 1) & TransitionMatrixOf(YS, TS))\nT[0, 2]*T[1, 0] + T[1, 1]*T[1, 2] + T[1, 2]*T[2, 2]\n>>> P(Eq(Y[3], 2), Eq(Y[1], 1)).round(2)\n0.36 \n```", "```py\n>>> from sympy.core.symbol import Str\n>>> Y = DiscreteMarkovChain(\"Y\", [Str('Sunny'), Str('Cloudy'), Str('Rainy')], T)\n>>> P(Eq(Y[3], 2), Eq(Y[1], 1)).round(2)\n0.36 \n```", "```py\n>>> P(Eq(Str('Rainy'), Y[3]), Eq(Y[1], Str('Cloudy'))).round(2)\n0.36 \n```", "```py\n>>> sunny, cloudy, rainy = symbols('Sunny, Cloudy, Rainy')\n>>> Y = DiscreteMarkovChain(\"Y\", [sunny, cloudy, rainy], T)\n>>> P(Eq(Y[3], rainy), Eq(Y[1], cloudy)).round(2)\n0.36 \n```", "```py\n>>> E(Y[3], Eq(Y[1], cloudy))\n0.38*Cloudy + 0.36*Rainy + 0.26*Sunny \n```", "```py\n>>> from sympy import Gt, Le, Rational\n>>> T = Matrix([[Rational(5, 10), Rational(3, 10), Rational(2, 10)], [Rational(2, 10), Rational(7, 10), Rational(1, 10)], [Rational(3, 10), Rational(3, 10), Rational(4, 10)]])\n>>> Y = DiscreteMarkovChain(\"Y\", [0, 1, 2], T)\n>>> P(Eq(Y[3], Y[1]), Eq(Y[0], 0)).round(3)\n0.409\n>>> P(Gt(Y[3], Y[1]), Eq(Y[0], 0)).round(2)\n0.36\n>>> P(Le(Y[15], Y[10]), Eq(Y[8], 2)).round(7)\n0.6963328 \n```", "```py\n>>> a, b, c, d = symbols('a b c d')\n>>> T = Matrix([[Rational(1, 10), Rational(4, 10), Rational(5, 10)], [Rational(3, 10), Rational(4, 10), Rational(3, 10)], [Rational(7, 10), Rational(2, 10), Rational(1, 10)]])\n>>> Y = DiscreteMarkovChain(\"Y\", [0, 1, 2], T)\n>>> query = P(Eq(Y[a], b), Eq(Y[c], d))\n>>> query.subs({a:10, b:2, c:5, d:1}).round(4)\n0.3096\n>>> P(Eq(Y[10], 2), Eq(Y[5], 1)).evalf().round(4)\n0.3096\n>>> query_gt = P(Gt(Y[a], b), Eq(Y[c], d))\n>>> query_gt.subs({a:21, b:0, c:5, d:0}).evalf().round(5)\n0.64705\n>>> P(Gt(Y[21], 0), Eq(Y[5], 0)).round(5)\n0.64705 \n```", "```py\n>>> n = symbols('n', nonnegative=True, integer=True)\n>>> T = MatrixSymbol('T', n, n)\n>>> Y = DiscreteMarkovChain(\"Y\", trans_probs=T)\n>>> Y.state_space\nRange(0, n, 1)\n>>> query = P(Eq(Y[a], b), Eq(Y[c], d))\n>>> query.subs({a:10, b:2, c:5, d:1})\n(T**5)[1, 2] \n```", "```py\nabsorbing_probabilities()\n```", "```py\ncanonical_form() → Tuple[List[Basic], ImmutableDenseMatrix]\n```", "```py\n>>> from sympy.stats import DiscreteMarkovChain\n>>> from sympy import Matrix, S \n```", "```py\n>>> T = Matrix([[S(1)/2, S(1)/2, 0,      0,      0],\n...             [S(2)/5, S(1)/5, S(2)/5, 0,      0],\n...             [0,      0,      1,      0,      0],\n...             [0,      0,      S(1)/2, S(1)/2, 0],\n...             [S(1)/2, 0,      0,      0, S(1)/2]])\n>>> X = DiscreteMarkovChain('X', list(range(1, 6)), trans_probs=T)\n>>> states, new_matrix = X.canonical_form()\n>>> states\n[3, 1, 2, 4, 5] \n```", "```py\n>>> new_matrix\nMatrix([\n[  1,   0,   0,   0,   0],\n[  0, 1/2, 1/2,   0,   0],\n[2/5, 2/5, 1/5,   0,   0],\n[1/2,   0,   0, 1/2,   0],\n[  0, 1/2,   0,   0, 1/2]]) \n```", "```py\n>>> X = DiscreteMarkovChain('X', states, new_matrix)\n>>> states, new_matrix = X.canonical_form()\n>>> states\n[3, 1, 2, 4, 5] \n```", "```py\n>>> new_matrix\nMatrix([\n[  1,   0,   0,   0,   0],\n[  0, 1/2, 1/2,   0,   0],\n[2/5, 2/5, 1/5,   0,   0],\n[1/2,   0,   0, 1/2,   0],\n[  0, 1/2,   0,   0, 1/2]]) \n```", "```py\n>>> T = Matrix([[0, 5,  5, 0,  0],\n...             [0, 0,  0, 10, 0],\n...             [5, 0,  5, 0,  0],\n...             [0, 10, 0, 0,  0],\n...             [0, 3,  0, 3,  4]])/10\n>>> X = DiscreteMarkovChain('X', trans_probs=T)\n>>> states, new_matrix = X.canonical_form()\n>>> states\n[1, 3, 0, 2, 4] \n```", "```py\n>>> new_matrix\nMatrix([\n[   0,    1,   0,   0,   0],\n[   1,    0,   0,   0,   0],\n[ 1/2,    0,   0, 1/2,   0],\n[   0,    0, 1/2, 1/2,   0],\n[3/10, 3/10,   0,   0, 2/5]]) \n```", "```py\ncommunication_classes() → List[Tuple[List[Basic], Boolean, Integer]]\n```", "```py\n>>> from sympy.stats import DiscreteMarkovChain\n>>> from sympy import Matrix\n>>> T = Matrix([[0, 1, 0],\n...             [1, 0, 0],\n...             [1, 0, 0]])\n>>> X = DiscreteMarkovChain('X', [1, 2, 3], T)\n>>> classes = X.communication_classes()\n>>> for states, is_recurrent, period in classes:\n...     states, is_recurrent, period\n([1, 2], True, 2)\n([3], False, 1) \n```", "```py\ndecompose() → Tuple[List[Basic], ImmutableDenseMatrix, ImmutableDenseMatrix, ImmutableDenseMatrix]\n```", "```py\n>>> from sympy.stats import DiscreteMarkovChain\n>>> from sympy import Matrix, S \n```", "```py\n>>> T = Matrix([[S(1)/2, S(1)/2, 0,      0,      0],\n...             [S(2)/5, S(1)/5, S(2)/5, 0,      0],\n...             [0,      0,      1,      0,      0],\n...             [0,      0,      S(1)/2, S(1)/2, 0],\n...             [S(1)/2, 0,      0,      0, S(1)/2]])\n>>> X = DiscreteMarkovChain('X', trans_probs=T)\n>>> states, A, B, C = X.decompose()\n>>> states\n[2, 0, 1, 3, 4] \n```", "```py\n>>> A   # recurrent to recurrent\nMatrix([[1]]) \n```", "```py\n>>> B  # transient to recurrent\nMatrix([\n[  0],\n[2/5],\n[1/2],\n[  0]]) \n```", "```py\n>>> C  # transient to transient\nMatrix([\n[1/2, 1/2,   0,   0],\n[2/5, 1/5,   0,   0],\n[  0,   0, 1/2,   0],\n[1/2,   0,   0, 1/2]]) \n```", "```py\nfixed_row_vector()\n```", "```py\nfundamental_matrix()\n```", "```py\nproperty limiting_distribution\n```", "```py\nsample()\n```", "```py\nstationary_distribution(condition_set=False) → ImmutableDenseMatrix | ConditionSet | Lambda\n```", "```py\n>>> from sympy.stats import DiscreteMarkovChain\n>>> from sympy import Matrix, S \n```", "```py\n>>> T = Matrix([[S(1)/2, S(1)/2, 0],\n...             [S(4)/5, S(1)/5, 0],\n...             [1, 0, 0]])\n>>> X = DiscreteMarkovChain('X', trans_probs=T)\n>>> X.stationary_distribution()\nMatrix([[8/13, 5/13, 0]]) \n```", "```py\n>>> T = Matrix([[S(1)/2, S(1)/2, 0],\n...             [S(4)/5, S(1)/5, 0],\n...             [0, 0, 1]])\n>>> X = DiscreteMarkovChain('X', trans_probs=T)\n>>> X.stationary_distribution()\nMatrix([[8/13 - 8*tau0/13, 5/13 - 5*tau0/13, tau0]]) \n```", "```py\n>>> Y = DiscreteMarkovChain('Y')\n>>> Y.stationary_distribution()\nLambda((wm, _T), Eq(wm*_T, wm)) \n```", "```py\n>>> Y.stationary_distribution(condition_set=True)\nConditionSet(wm, Eq(wm*_T, wm)) \n```", "```py\nproperty transition_probabilities\n```", "```py\nclass sympy.stats.ContinuousMarkovChain(sym, state_space=None, gen_mat=None)\n```", "```py\n>>> from sympy.stats import ContinuousMarkovChain, P\n>>> from sympy import Matrix, S, Eq, Gt\n>>> G = Matrix([[-S(1), S(1)], [S(1), -S(1)]])\n>>> C = ContinuousMarkovChain('C', state_space=[0, 1], gen_mat=G)\n>>> C.limiting_distribution()\nMatrix([[1/2, 1/2]])\n>>> C.state_space\n{0, 1}\n>>> C.generator_matrix\nMatrix([\n[-1,  1],\n[ 1, -1]]) \n```", "```py\n>>> P(Eq(C(1.96), 0), Eq(C(0.78), 1)).round(5)\n0.45279\n>>> P(Gt(C(1.7), 0), Eq(C(0.82), 1)).round(5)\n0.58602 \n```", "```py\n>>> from sympy import Gt, Le, Rational\n>>> G = Matrix([[-S(1), Rational(1, 10), Rational(9, 10)], [Rational(2, 5), -S(1), Rational(3, 5)], [Rational(1, 2), Rational(1, 2), -S(1)]])\n>>> C = ContinuousMarkovChain('C', state_space=[0, 1, 2], gen_mat=G)\n>>> P(Eq(C(3.92), C(1.75)), Eq(C(0.46), 0)).round(5)\n0.37933\n>>> P(Gt(C(3.92), C(1.75)), Eq(C(0.46), 0)).round(5)\n0.34211\n>>> P(Le(C(1.57), C(3.14)), Eq(C(1.22), 1)).round(4)\n0.7143 \n```", "```py\n>>> from sympy import symbols\n>>> a,b,c,d = symbols('a b c d')\n>>> G = Matrix([[-S(1), Rational(1, 10), Rational(9, 10)], [Rational(2, 5), -S(1), Rational(3, 5)], [Rational(1, 2), Rational(1, 2), -S(1)]])\n>>> C = ContinuousMarkovChain('C', state_space=[0, 1, 2], gen_mat=G)\n>>> query = P(Eq(C(a), b), Eq(C(c), d))\n>>> query.subs({a:3.65, b:2, c:1.78, d:1}).evalf().round(10)\n0.4002723175\n>>> P(Eq(C(3.65), 2), Eq(C(1.78), 1)).round(10)\n0.4002723175\n>>> query_gt = P(Gt(C(a), b), Eq(C(c), d))\n>>> query_gt.subs({a:43.2, b:0, c:3.29, d:2}).evalf().round(10)\n0.6832579186\n>>> P(Gt(C(43.2), 0), Eq(C(3.29), 2)).round(10)\n0.6832579186 \n```", "```py\nclass sympy.stats.BernoulliProcess(sym, p, success=1, failure=0)\n```", "```py\n>>> from sympy.stats import BernoulliProcess, P, E\n>>> from sympy import Eq, Gt\n>>> B = BernoulliProcess(\"B\", p=0.7, success=1, failure=0)\n>>> B.state_space\n{0, 1}\n>>> B.p.round(2)\n0.70\n>>> B.success\n1\n>>> B.failure\n0\n>>> X = B[1] + B[2] + B[3]\n>>> P(Eq(X, 0)).round(2)\n0.03\n>>> P(Eq(X, 2)).round(2)\n0.44\n>>> P(Eq(X, 4)).round(2)\n0\n>>> P(Gt(X, 1)).round(2)\n0.78\n>>> P(Eq(B[1], 0) & Eq(B[2], 1) & Eq(B[3], 0) & Eq(B[4], 1)).round(2)\n0.04\n>>> B.joint_distribution(B[1], B[2])\nJointDistributionHandmade(Lambda((B[1], B[2]), Piecewise((0.7, Eq(B[1], 1)),\n(0.3, Eq(B[1], 0)), (0, True))*Piecewise((0.7, Eq(B[2], 1)), (0.3, Eq(B[2], 0)),\n(0, True))))\n>>> E(2*B[1] + B[2]).round(2)\n2.10\n>>> P(B[1] < 1).round(2)\n0.30 \n```", "```py\nexpectation(expr, condition=None, evaluate=True, **kwargs)\n```", "```py\nprobability(condition, given_condition=None, evaluate=True, **kwargs)\n```", "```py\nclass sympy.stats.PoissonProcess(sym, lamda)\n```", "```py\n>>> from sympy.stats import PoissonProcess, P, E\n>>> from sympy import symbols, Eq, Ne, Contains, Interval\n>>> X = PoissonProcess(\"X\", lamda=3)\n>>> X.state_space\nNaturals0\n>>> X.lamda\n3\n>>> t1, t2 = symbols('t1 t2', positive=True)\n>>> P(X(t1) < 4)\n(9*t1**3/2 + 9*t1**2/2 + 3*t1 + 1)*exp(-3*t1)\n>>> P(Eq(X(t1), 2) | Ne(X(t1), 4), Contains(t1, Interval.Ropen(2, 4)))\n1 - 36*exp(-6)\n>>> P(Eq(X(t1), 2) & Eq(X(t2), 3), Contains(t1, Interval.Lopen(0, 2))\n... & Contains(t2, Interval.Lopen(2, 4)))\n648*exp(-12)\n>>> E(X(t1))\n3*t1\n>>> E(X(t1)**2 + 2*X(t2),  Contains(t1, Interval.Lopen(0, 1))\n... & Contains(t2, Interval.Lopen(1, 2)))\n18\n>>> P(X(3) < 1, Eq(X(1), 0))\nexp(-6)\n>>> P(Eq(X(4), 3), Eq(X(2), 3))\nexp(-6)\n>>> P(X(2) <= 3, X(1) > 1)\n5*exp(-3) \n```", "```py\n>>> Y = PoissonProcess(\"Y\", lamda=4)\n>>> Z = X + Y\n>>> Z.lamda\n7 \n```", "```py\n>>> N, M = Z.split(l1=2, l2=5)\n>>> N.lamda, M.lamda\n(2, 5) \n```", "```py\nclass sympy.stats.WienerProcess(sym)\n```", "```py\n>>> from sympy.stats import WienerProcess, P, E\n>>> from sympy import symbols, Contains, Interval\n>>> X = WienerProcess(\"X\")\n>>> X.state_space\nReals\n>>> t1, t2 = symbols('t1 t2', positive=True)\n>>> P(X(t1) < 7).simplify()\nerf(7*sqrt(2)/(2*sqrt(t1)))/2 + 1/2\n>>> P((X(t1) > 2) | (X(t1) < 4), Contains(t1, Interval.Ropen(2, 4))).simplify()\n-erf(1)/2 + erf(2)/2 + 1\n>>> E(X(t1))\n0\n>>> E(X(t1) + 2*X(t2),  Contains(t1, Interval.Lopen(0, 1))\n... & Contains(t2, Interval.Lopen(1, 2)))\n0 \n```", "```py\nclass sympy.stats.GammaProcess(sym, lamda, gamma)\n```", "```py\n>>> from sympy.stats import GammaProcess, E, P, variance\n>>> from sympy import symbols, Contains, Interval, Not\n>>> t, d, x, l, g = symbols('t d x l g', positive=True)\n>>> X = GammaProcess(\"X\", l, g)\n>>> E(X(t))\ng*t/l\n>>> variance(X(t)).simplify()\ng*t/l**2\n>>> X = GammaProcess('X', 1, 2)\n>>> P(X(t) < 1).simplify()\nlowergamma(2*t, 1)/gamma(2*t)\n>>> P(Not((X(t) < 5) & (X(d) > 3)), Contains(t, Interval.Ropen(2, 4)) &\n... Contains(d, Interval.Lopen(7, 8))).simplify()\n-4*exp(-3) + 472*exp(-8)/3 + 1\n>>> E(X(2) + x*E(X(5)))\n10*x + 4 \n```", "```py\nsympy.stats.MatrixGamma(symbol, alpha, beta, scale_matrix)\n```", "```py\n>>> from sympy.stats import density, MatrixGamma\n>>> from sympy import MatrixSymbol, symbols\n>>> a, b = symbols('a b', positive=True)\n>>> M = MatrixGamma('M', a, b, [[2, 1], [1, 2]])\n>>> X = MatrixSymbol('X', 2, 2)\n>>> density(M)(X).doit()\nexp(Trace(Matrix([\n[-2/3,  1/3],\n[ 1/3, -2/3]])*X)/b)*Determinant(X)**(a - 3/2)/(3**a*sqrt(pi)*b**(2*a)*gamma(a)*gamma(a - 1/2))\n>>> density(M)([[1, 0], [0, 1]]).doit()\nexp(-4/(3*b))/(3**a*sqrt(pi)*b**(2*a)*gamma(a)*gamma(a - 1/2)) \n```", "```py\nsympy.stats.Wishart(symbol, n, scale_matrix)\n```", "```py\n>>> from sympy.stats import density, Wishart\n>>> from sympy import MatrixSymbol, symbols\n>>> n = symbols('n', positive=True)\n>>> W = Wishart('W', n, [[2, 1], [1, 2]])\n>>> X = MatrixSymbol('X', 2, 2)\n>>> density(W)(X).doit()\nexp(Trace(Matrix([\n[-1/3,  1/6],\n[ 1/6, -1/3]])*X))*Determinant(X)**(n/2 - 3/2)/(2**n*3**(n/2)*sqrt(pi)*gamma(n/2)*gamma(n/2 - 1/2))\n>>> density(W)([[1, 0], [0, 1]]).doit()\nexp(-2/3)/(2**n*3**(n/2)*sqrt(pi)*gamma(n/2)*gamma(n/2 - 1/2)) \n```", "```py\nsympy.stats.MatrixNormal(symbol, location_matrix, scale_matrix_1, scale_matrix_2)\n```", "```py\n>>> from sympy import MatrixSymbol\n>>> from sympy.stats import density, MatrixNormal\n>>> M = MatrixNormal('M', [[1, 2]], [1], [[1, 0], [0, 1]])\n>>> X = MatrixSymbol('X', 1, 2)\n>>> density(M)(X).doit()\nexp(-Trace((Matrix([\n[-1],\n[-2]]) + X.T)*(Matrix([[-1, -2]]) + X))/2)/(2*pi)\n>>> density(M)([[3, 4]]).doit()\nexp(-4)/(2*pi) \n```", "```py\nclass sympy.stats.compound_rv.CompoundDistribution(dist)\n```", "```py\n>>> from sympy.stats.compound_rv import CompoundDistribution\n>>> from sympy.stats.crv_types import NormalDistribution\n>>> from sympy.stats import Normal\n>>> from sympy.abc import x\n>>> X = Normal('X', 2, 4)\n>>> N = NormalDistribution(X, 4)\n>>> C = CompoundDistribution(N)\n>>> C.set\nInterval(-oo, oo)\n>>> C.pdf(x, evaluate=True).simplify()\nexp(-x**2/64 + x/16 - 1/16)/(8*sqrt(pi)) \n```", "```py\nsympy.stats.P(condition, given_condition=None, numsamples=None, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import P, Die\n>>> from sympy import Eq\n>>> X, Y = Die('X', 6), Die('Y', 6)\n>>> P(X > 3)\n1/2\n>>> P(Eq(X, 5), X > 2) # Probability that X == 5 given that X > 2\n1/4\n>>> P(X > Y)\n5/12 \n```", "```py\nclass sympy.stats.Probability(prob, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Probability, Normal\n>>> from sympy import Integral\n>>> X = Normal(\"X\", 0, 1)\n>>> prob = Probability(X > 1)\n>>> prob\nProbability(X > 1) \n```", "```py\n>>> prob.rewrite(Integral)\nIntegral(sqrt(2)*exp(-_z**2/2)/(2*sqrt(pi)), (_z, 1, oo)) \n```", "```py\n>>> prob.evaluate_integral()\nsqrt(2)*(-sqrt(2)*sqrt(pi)*erf(sqrt(2)/2) + sqrt(2)*sqrt(pi))/(4*sqrt(pi)) \n```", "```py\nsympy.stats.E(expr, condition=None, numsamples=None, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import E, Die\n>>> X = Die('X', 6)\n>>> E(X)\n7/2\n>>> E(2*X + 1)\n8 \n```", "```py\n>>> E(X, X > 3) # Expectation of X given that it is above 3\n5 \n```", "```py\nclass sympy.stats.Expectation(expr, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Expectation, Normal, Probability, Poisson\n>>> from sympy import symbols, Integral, Sum\n>>> mu = symbols(\"mu\")\n>>> sigma = symbols(\"sigma\", positive=True)\n>>> X = Normal(\"X\", mu, sigma)\n>>> Expectation(X)\nExpectation(X)\n>>> Expectation(X).evaluate_integral().simplify()\nmu \n```", "```py\n>>> Expectation(X).rewrite(Integral)\nIntegral(sqrt(2)*X*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)) \n```", "```py\n>>> Expectation(X).rewrite(Probability)\nIntegral(x*Probability(Eq(X, x)), (x, -oo, oo)) \n```", "```py\n>>> lamda = symbols('lamda', positive=True)\n>>> Z = Poisson('Z', lamda)\n>>> Expectation(Z).rewrite(Sum)\nSum(Z*lamda**Z*exp(-lamda)/factorial(Z), (Z, 0, oo)) \n```", "```py\n>>> from sympy.abc import a\n>>> Expectation(a*X)\nExpectation(a*X)\n>>> Y = Normal(\"Y\", 1, 2)\n>>> Expectation(X + Y)\nExpectation(X + Y) \n```", "```py\n>>> Expectation(X + Y).expand()\nExpectation(X) + Expectation(Y)\n>>> Expectation(a*X + Y).expand()\na*Expectation(X) + Expectation(Y)\n>>> Expectation(a*X + Y)\nExpectation(a*X + Y)\n>>> Expectation((X + Y)*(X - Y)).expand()\nExpectation(X**2) - Expectation(Y**2) \n```", "```py\n>>> Expectation(X + Y).doit()\nmu + 1\n>>> Expectation(X + Expectation(Y + Expectation(2*X))).doit()\n3*mu + 1 \n```", "```py\n>>> Expectation(X + Expectation(Y)).doit(deep=False)\nmu + Expectation(Expectation(Y))\n>>> Expectation(X + Expectation(Y + Expectation(2*X))).doit(deep=False)\nmu + Expectation(Expectation(Expectation(2*X) + Y)) \n```", "```py\nsympy.stats.density(expr, condition=None, evaluate=True, numsamples=None, **kwargs)\n```", "```py\n>>> from sympy.stats import density, Die, Normal\n>>> from sympy import Symbol \n```", "```py\n>>> x = Symbol('x')\n>>> D = Die('D', 6)\n>>> X = Normal(x, 0, 1) \n```", "```py\n>>> density(D).dict\n{1: 1/6, 2: 1/6, 3: 1/6, 4: 1/6, 5: 1/6, 6: 1/6}\n>>> density(2*D).dict\n{2: 1/6, 4: 1/6, 6: 1/6, 8: 1/6, 10: 1/6, 12: 1/6}\n>>> density(X)(x)\nsqrt(2)*exp(-x**2/2)/(2*sqrt(pi)) \n```", "```py\nsympy.stats.entropy(expr, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Normal, Die, entropy\n>>> X = Normal('X', 0, 1)\n>>> entropy(X)\nlog(2)/2 + 1/2 + log(pi)/2 \n```", "```py\n>>> D = Die('D', 4)\n>>> entropy(D)\nlog(4) \n```", "```py\nsympy.stats.given(expr, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import given, density, Die\n>>> X = Die('X', 6)\n>>> Y = given(X, X > 3)\n>>> density(Y).dict\n{4: 1/3, 5: 1/3, 6: 1/3} \n```", "```py\n>>> from sympy.stats import Normal\n>>> from sympy import pprint\n>>> from sympy.abc import z \n```", "```py\n>>> X = Normal('X', 0, 1)\n>>> Y = Normal('Y', 0, 1)\n>>> pprint(density(X + Y, Y)(z), use_unicode=False)\n 2\n -(-Y + z)\n -----------\n ___       2\n\\/ 2 *e\n------------------\n ____\n 2*\\/ pi \n```", "```py\nsympy.stats.where(condition, given_condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import where, Die, Normal\n>>> from sympy import And \n```", "```py\n>>> D1, D2 = Die('a', 6), Die('b', 6)\n>>> a, b = D1.symbol, D2.symbol\n>>> X = Normal('x', 0, 1) \n```", "```py\n>>> where(X**2<1)\nDomain: (-1 < x) & (x < 1) \n```", "```py\n>>> where(X**2<1).set\nInterval.open(-1, 1) \n```", "```py\n>>> where(And(D1<=D2, D2<3))\nDomain: (Eq(a, 1) & Eq(b, 1)) | (Eq(a, 1) & Eq(b, 2)) | (Eq(a, 2) & Eq(b, 2)) \n```", "```py\nsympy.stats.variance(X, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Die, Bernoulli, variance\n>>> from sympy import simplify, Symbol \n```", "```py\n>>> X = Die('X', 6)\n>>> p = Symbol('p')\n>>> B = Bernoulli('B', p, 1, 0) \n```", "```py\n>>> variance(2*X)\n35/3 \n```", "```py\n>>> simplify(variance(B))\np*(1 - p) \n```", "```py\nclass sympy.stats.Variance(arg, condition=None, **kwargs)\n```", "```py\n>>> from sympy import symbols, Integral\n>>> from sympy.stats import Normal, Expectation, Variance, Probability\n>>> mu = symbols(\"mu\", positive=True)\n>>> sigma = symbols(\"sigma\", positive=True)\n>>> X = Normal(\"X\", mu, sigma)\n>>> Variance(X)\nVariance(X)\n>>> Variance(X).evaluate_integral()\nsigma**2 \n```", "```py\n>>> Variance(X).rewrite(Integral)\nIntegral(sqrt(2)*(X - Integral(sqrt(2)*X*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)))**2*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)) \n```", "```py\n>>> Variance(X).rewrite(Probability)\n-Integral(x*Probability(Eq(X, x)), (x, -oo, oo))**2 + Integral(x**2*Probability(Eq(X, x)), (x, -oo, oo)) \n```", "```py\n>>> Variance(X).rewrite(Expectation)\n-Expectation(X)**2 + Expectation(X**2) \n```", "```py\n>>> from sympy.abc import a\n>>> Y = Normal(\"Y\", 0, 1)\n>>> Variance(a*X)\nVariance(a*X) \n```", "```py\n>>> Variance(a*X).expand()\na**2*Variance(X)\n>>> Variance(X + Y)\nVariance(X + Y)\n>>> Variance(X + Y).expand()\n2*Covariance(X, Y) + Variance(X) + Variance(Y) \n```", "```py\nsympy.stats.covariance(X, Y, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Exponential, covariance\n>>> from sympy import Symbol \n```", "```py\n>>> rate = Symbol('lambda', positive=True, real=True)\n>>> X = Exponential('X', rate)\n>>> Y = Exponential('Y', rate) \n```", "```py\n>>> covariance(X, X)\nlambda**(-2)\n>>> covariance(X, Y)\n0\n>>> covariance(X, Y + rate*X)\n1/lambda \n```", "```py\nclass sympy.stats.Covariance(arg1, arg2, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Covariance\n>>> from sympy.stats import Normal\n>>> X = Normal(\"X\", 3, 2)\n>>> Y = Normal(\"Y\", 0, 1)\n>>> Z = Normal(\"Z\", 0, 1)\n>>> W = Normal(\"W\", 0, 1)\n>>> cexpr = Covariance(X, Y)\n>>> cexpr\nCovariance(X, Y) \n```", "```py\n>>> cexpr.evaluate_integral()\n0 \n```", "```py\n>>> from sympy.stats import Expectation\n>>> cexpr.rewrite(Expectation)\nExpectation(X*Y) - Expectation(X)*Expectation(Y) \n```", "```py\n>>> from sympy.abc import a, b, c, d\n>>> Covariance(a*X + b*Y, c*Z + d*W)\nCovariance(a*X + b*Y, c*Z + d*W)\n>>> Covariance(a*X + b*Y, c*Z + d*W).expand()\na*c*Covariance(X, Z) + a*d*Covariance(W, X) + b*c*Covariance(Y, Z) + b*d*Covariance(W, Y) \n```", "```py\n>>> Covariance(X, X).expand()\nVariance(X)\n>>> Covariance(a*X, b*Y).expand()\na*b*Covariance(X, Y) \n```", "```py\nsympy.stats.coskewness(X, Y, Z, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import coskewness, Exponential, skewness\n>>> from sympy import symbols\n>>> p = symbols('p', positive=True)\n>>> X = Exponential('X', p)\n>>> Y = Exponential('Y', 2*p)\n>>> coskewness(X, Y, Y)\n0\n>>> coskewness(X, Y + X, Y + 2*X)\n16*sqrt(85)/85\n>>> coskewness(X + 2*Y, Y + X, Y + 2*X, X > 3)\n9*sqrt(170)/85\n>>> coskewness(Y, Y, Y) == skewness(Y)\nTrue\n>>> coskewness(X, Y + p*X, Y + 2*p*X)\n4/(sqrt(1 + 1/(4*p**2))*sqrt(4 + 1/(4*p**2))) \n```", "```py\nsympy.stats.median(X, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import Normal, Die, median\n>>> N = Normal('N', 3, 1)\n>>> median(N)\n{3}\n>>> D = Die('D')\n>>> median(D)\n{3, 4} \n```", "```py\nsympy.stats.std(X, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Bernoulli, std\n>>> from sympy import Symbol, simplify \n```", "```py\n>>> p = Symbol('p')\n>>> B = Bernoulli('B', p, 1, 0) \n```", "```py\n>>> simplify(std(B))\nsqrt(p*(1 - p)) \n```", "```py\nsympy.stats.quantile(expr, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import quantile, Die, Exponential\n>>> from sympy import Symbol, pprint\n>>> p = Symbol(\"p\") \n```", "```py\n>>> l = Symbol(\"lambda\", positive=True)\n>>> X = Exponential(\"x\", l)\n>>> quantile(X)(p)\n-log(1 - p)/lambda \n```", "```py\n>>> D = Die(\"d\", 6)\n>>> pprint(quantile(D)(p), use_unicode=False)\n/nan  for Or(p > 1, p < 0)\n|\n| 1       for p <= 1/6\n|\n| 2       for p <= 1/3\n|\n< 3       for p <= 1/2\n|\n| 4       for p <= 2/3\n|\n| 5       for p <= 5/6\n|\n\\ 6        for p <= 1 \n```", "```py\nsympy.stats.sample(expr, condition=None, size=(), library='scipy', numsamples=1, seed=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Die, sample, Normal, Geometric\n>>> X, Y, Z = Die('X', 6), Die('Y', 6), Die('Z', 6) # Finite Random Variable\n>>> die_roll = sample(X + Y + Z)\n>>> die_roll \n3\n>>> N = Normal('N', 3, 4) # Continuous Random Variable\n>>> samp = sample(N)\n>>> samp in N.pspace.domain.set\nTrue\n>>> samp = sample(N, N>0)\n>>> samp > 0\nTrue\n>>> samp_list = sample(N, size=4)\n>>> [sam in N.pspace.domain.set for sam in samp_list]\n[True, True, True, True]\n>>> sample(N, size = (2,3)) \narray([[5.42519758, 6.40207856, 4.94991743],\n [1.85819627, 6.83403519, 1.9412172 ]])\n>>> G = Geometric('G', 0.5) # Discrete Random Variable\n>>> samp_list = sample(G, size=3)\n>>> samp_list \n[1, 3, 2]\n>>> [sam in G.pspace.domain.set for sam in samp_list]\n[True, True, True]\n>>> MN = Normal(\"MN\", [3, 4], [[2, 1], [1, 2]]) # Joint Random Variable\n>>> samp_list = sample(MN, size=4)\n>>> samp_list \n[array([2.85768055, 3.38954165]),\n array([4.11163337, 4.3176591 ]),\n array([0.79115232, 1.63232916]),\n array([4.01747268, 3.96716083])]\n>>> [tuple(sam) in MN.pspace.domain.set for sam in samp_list]\n[True, True, True, True] \n```", "```py\nsympy.stats.sample_iter(expr, condition=None, size=(), library='scipy', numsamples=oo, seed=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Normal, sample_iter\n>>> X = Normal('X', 0, 1)\n>>> expr = X*X + 3\n>>> iterator = sample_iter(expr, numsamples=3) \n>>> list(iterator) \n[12, 4, 7] \n```", "```py\nsympy.stats.factorial_moment(X, n, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import factorial_moment, Poisson, Binomial\n>>> from sympy import Symbol, S\n>>> lamda = Symbol('lamda')\n>>> X = Poisson('X', lamda)\n>>> factorial_moment(X, 2)\nlamda**2\n>>> Y = Binomial('Y', 2, S.Half)\n>>> factorial_moment(Y, 2)\n1/2\n>>> factorial_moment(Y, 2, Y > 1) # find factorial moment for Y > 1\n2 \n```", "```py\nsympy.stats.kurtosis(X, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import kurtosis, Exponential, Normal\n>>> from sympy import Symbol\n>>> X = Normal('X', 0, 1)\n>>> kurtosis(X)\n3\n>>> kurtosis(X, X > 0) # find kurtosis given X > 0\n(-4/pi - 12/pi**2 + 3)/(1 - 2/pi)**2 \n```", "```py\n>>> rate = Symbol('lamda', positive=True, real=True)\n>>> Y = Exponential('Y', rate)\n>>> kurtosis(Y)\n9 \n```", "```py\nsympy.stats.skewness(X, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import skewness, Exponential, Normal\n>>> from sympy import Symbol\n>>> X = Normal('X', 0, 1)\n>>> skewness(X)\n0\n>>> skewness(X, X > 0) # find skewness given X > 0\n(-sqrt(2)/sqrt(pi) + 4*sqrt(2)/pi**(3/2))/(1 - 2/pi)**(3/2) \n```", "```py\n>>> rate = Symbol('lambda', positive=True, real=True)\n>>> Y = Exponential('Y', rate)\n>>> skewness(Y)\n2 \n```", "```py\nsympy.stats.correlation(X, Y, condition=None, **kwargs)\n```", "```py\n>>> from sympy.stats import Exponential, correlation\n>>> from sympy import Symbol \n```", "```py\n>>> rate = Symbol('lambda', positive=True, real=True)\n>>> X = Exponential('X', rate)\n>>> Y = Exponential('Y', rate) \n```", "```py\n>>> correlation(X, X)\n1\n>>> correlation(X, Y)\n0\n>>> correlation(X, Y + rate*X)\n1/sqrt(1 + lambda**(-2)) \n```", "```py\nsympy.stats.rv.sampling_density(expr, given_condition=None, library='scipy', numsamples=1, seed=None, **kwargs)\n```", "```py\nsympy.stats.rv.sampling_P(condition, given_condition=None, library='scipy', numsamples=1, evalf=True, seed=None, **kwargs)\n```", "```py\nsympy.stats.rv.sampling_E(expr, given_condition=None, library='scipy', numsamples=1, evalf=True, seed=None, **kwargs)\n```", "```py\nclass sympy.stats.Moment(X, n, c=0, condition=None, **kwargs)\n```", "```py\n>>> from sympy import Symbol, Integral\n>>> from sympy.stats import Normal, Expectation, Probability, Moment\n>>> mu = Symbol('mu', real=True)\n>>> sigma = Symbol('sigma', positive=True)\n>>> X = Normal('X', mu, sigma)\n>>> M = Moment(X, 3, 1) \n```", "```py\n>>> M.doit()\nmu**3 - 3*mu**2 + 3*mu*sigma**2 + 3*mu - 3*sigma**2 - 1 \n```", "```py\n>>> M.rewrite(Expectation)\nExpectation((X - 1)**3) \n```", "```py\n>>> M.rewrite(Probability)\nIntegral((x - 1)**3*Probability(Eq(X, x)), (x, -oo, oo)) \n```", "```py\n>>> M.rewrite(Integral)\nIntegral(sqrt(2)*(X - 1)**3*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)) \n```", "```py\nsympy.stats.moment(X, n, c=0, condition=None, *, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import Die, moment, E\n>>> X = Die('X', 6)\n>>> moment(X, 1, 6)\n-5/2\n>>> moment(X, 2)\n91/6\n>>> moment(X, 1) == E(X)\nTrue \n```", "```py\nclass sympy.stats.CentralMoment(X, n, condition=None, **kwargs)\n```", "```py\n>>> from sympy import Symbol, Integral\n>>> from sympy.stats import Normal, Expectation, Probability, CentralMoment\n>>> mu = Symbol('mu', real=True)\n>>> sigma = Symbol('sigma', positive=True)\n>>> X = Normal('X', mu, sigma)\n>>> CM = CentralMoment(X, 4) \n```", "```py\n>>> CM.doit().simplify()\n3*sigma**4 \n```", "```py\n>>> CM.rewrite(Expectation)\nExpectation((-Expectation(X) + X)**4) \n```", "```py\n>>> CM.rewrite(Probability)\nIntegral((x - Integral(x*Probability(True), (x, -oo, oo)))**4*Probability(Eq(X, x)), (x, -oo, oo)) \n```", "```py\n>>> CM.rewrite(Integral)\nIntegral(sqrt(2)*(X - Integral(sqrt(2)*X*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)))**4*exp(-(X - mu)**2/(2*sigma**2))/(2*sqrt(pi)*sigma), (X, -oo, oo)) \n```", "```py\nsympy.stats.cmoment(X, n, condition=None, *, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy.stats import Die, cmoment, variance\n>>> X = Die('X', 6)\n>>> cmoment(X, 3)\n0\n>>> cmoment(X, 2)\n35/12\n>>> cmoment(X, 2) == variance(X)\nTrue \n```", "```py\nclass sympy.stats.ExpectationMatrix(expr, condition=None)\n```", "```py\n>>> from sympy.stats import ExpectationMatrix, Normal\n>>> from sympy.stats.rv import RandomMatrixSymbol\n>>> from sympy import symbols, MatrixSymbol, Matrix\n>>> k = symbols(\"k\")\n>>> A, B = MatrixSymbol(\"A\", k, k), MatrixSymbol(\"B\", k, k)\n>>> X, Y = RandomMatrixSymbol(\"X\", k, 1), RandomMatrixSymbol(\"Y\", k, 1)\n>>> ExpectationMatrix(X)\nExpectationMatrix(X)\n>>> ExpectationMatrix(A*X).shape\n(k, 1) \n```", "```py\n>>> ExpectationMatrix(A*X + B*Y).expand()\nA*ExpectationMatrix(X) + B*ExpectationMatrix(Y)\n>>> ExpectationMatrix((X + Y)*(X - Y).T).expand()\nExpectationMatrix(X*X.T) - ExpectationMatrix(X*Y.T) + ExpectationMatrix(Y*X.T) - ExpectationMatrix(Y*Y.T) \n```", "```py\n>>> N11, N12 = Normal('N11', 11, 1), Normal('N12', 12, 1)\n>>> N21, N22 = Normal('N21', 21, 1), Normal('N22', 22, 1)\n>>> M11, M12 = Normal('M11', 1, 1), Normal('M12', 2, 1)\n>>> M21, M22 = Normal('M21', 3, 1), Normal('M22', 4, 1)\n>>> x1 = Matrix([[N11, N12], [N21, N22]])\n>>> x2 = Matrix([[M11, M12], [M21, M22]])\n>>> ExpectationMatrix(x1 + x2).doit()\nMatrix([\n[12, 14],\n[24, 26]]) \n```", "```py\nclass sympy.stats.VarianceMatrix(arg, condition=None)\n```", "```py\n>>> from sympy.stats import VarianceMatrix\n>>> from sympy.stats.rv import RandomMatrixSymbol\n>>> from sympy import symbols, MatrixSymbol\n>>> k = symbols(\"k\")\n>>> A, B = MatrixSymbol(\"A\", k, k), MatrixSymbol(\"B\", k, k)\n>>> X, Y = RandomMatrixSymbol(\"X\", k, 1), RandomMatrixSymbol(\"Y\", k, 1)\n>>> VarianceMatrix(X)\nVarianceMatrix(X)\n>>> VarianceMatrix(X).shape\n(k, k) \n```", "```py\n>>> VarianceMatrix(A*X).expand()\nA*VarianceMatrix(X)*A.T\n>>> VarianceMatrix(A*X + B*Y).expand()\n2*A*CrossCovarianceMatrix(X, Y)*B.T + A*VarianceMatrix(X)*A.T + B*VarianceMatrix(Y)*B.T \n```", "```py\nclass sympy.stats.CrossCovarianceMatrix(arg1, arg2, condition=None)\n```", "```py\n>>> from sympy.stats import CrossCovarianceMatrix\n>>> from sympy.stats.rv import RandomMatrixSymbol\n>>> from sympy import symbols, MatrixSymbol\n>>> k = symbols(\"k\")\n>>> A, B = MatrixSymbol(\"A\", k, k), MatrixSymbol(\"B\", k, k)\n>>> C, D = MatrixSymbol(\"C\", k, k), MatrixSymbol(\"D\", k, k)\n>>> X, Y = RandomMatrixSymbol(\"X\", k, 1), RandomMatrixSymbol(\"Y\", k, 1)\n>>> Z, W = RandomMatrixSymbol(\"Z\", k, 1), RandomMatrixSymbol(\"W\", k, 1)\n>>> CrossCovarianceMatrix(X, Y)\nCrossCovarianceMatrix(X, Y)\n>>> CrossCovarianceMatrix(X, Y).shape\n(k, k) \n```", "```py\n>>> CrossCovarianceMatrix(X + Y, Z).expand()\nCrossCovarianceMatrix(X, Z) + CrossCovarianceMatrix(Y, Z)\n>>> CrossCovarianceMatrix(A*X, Y).expand()\nA*CrossCovarianceMatrix(X, Y)\n>>> CrossCovarianceMatrix(A*X, B.T*Y).expand()\nA*CrossCovarianceMatrix(X, Y)*B\n>>> CrossCovarianceMatrix(A*X + B*Y, C.T*Z + D.T*W).expand()\nA*CrossCovarianceMatrix(X, W)*D + A*CrossCovarianceMatrix(X, Z)*C + B*CrossCovarianceMatrix(Y, W)*D + B*CrossCovarianceMatrix(Y, Z)*C \n```", "```py\nclass sympy.stats.rv.RandomDomain\n```", "```py\nclass sympy.stats.rv.PSpace\n```", "```py\nclass sympy.stats.rv.RandomSymbol\n```", "```py\nclass sympy.stats.rv.SinglePSpace\n```", "```py\nclass sympy.stats.rv.SingleDomain\n```", "```py\nclass sympy.stats.rv.ProductDomain\n```", "```py\nclass sympy.stats.rv.ProductPSpace\n```", "```py\nclass sympy.stats.rv.ConditionalDomain\n```", "```py\nclass sympy.stats.frv.FiniteDomain\n```", "```py\nclass sympy.stats.frv.FinitePSpace\n```", "```py\nclass sympy.stats.crv.ContinuousDomain\n```", "```py\nclass sympy.stats.crv.ContinuousPSpace\n```", "```py\nclass sympy.stats.frv_types.DiePSpace\n```", "```py\nclass sympy.stats.crv_types.NormalPSpace\n```", "```py\nsympy.stats.Die()\n```", "```py\nsympy.stats.Normal()\n```", "```py\nsympy.stats.rv.random_symbols(expr)\n```", "```py\nsympy.stats.rv.pspace(expr)\n```", "```py\n>>> from sympy.stats import pspace, Normal\n>>> X = Normal('X', 0, 1)\n>>> pspace(2*X + 1) == X.pspace\nTrue \n```", "```py\nsympy.stats.rv.rs_swap(a, b)\n```"]