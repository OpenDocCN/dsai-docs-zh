["```py\nIn [1]: df1 = pd.DataFrame(np.random.randn(8, 1), columns=['A'], dtype='float32')\n\nIn [2]: df1\nOut[2]: \n A\n0  0.469112\n1 -0.282863\n2 -1.509058\n3 -1.135632\n4  1.212112\n5 -0.173215\n6  0.119209\n7 -1.044236\n\nIn [3]: df1.dtypes\nOut[3]: \nA    float32\ndtype: object\n\nIn [4]: df2 = pd.DataFrame({'A': pd.Series(np.random.randn(8), dtype='float16'),\n ...:                    'B': pd.Series(np.random.randn(8)),\n ...:                    'C': pd.Series(range(8), dtype='uint8')})\n ...: \n\nIn [5]: df2\nOut[5]: \n A         B  C\n0 -0.861816 -0.424972  0\n1 -2.105469  0.567020  1\n2 -0.494873  0.276232  2\n3  1.072266 -1.087401  3\n4  0.721680 -0.673690  4\n5 -0.706543  0.113648  5\n6 -1.040039 -1.478427  6\n7  0.271973  0.524988  7\n\nIn [6]: df2.dtypes\nOut[6]: \nA    float16\nB    float64\nC      uint8\ndtype: object\n\n# here you get some upcasting\nIn [7]: df3 = df1.reindex_like(df2).fillna(value=0.0) + df2\n\nIn [8]: df3\nOut[8]: \n A         B    C\n0 -0.392704 -0.424972  0.0\n1 -2.388332  0.567020  1.0\n2 -2.003932  0.276232  2.0\n3 -0.063367 -1.087401  3.0\n4  1.933792 -0.673690  4.0\n5 -0.879758  0.113648  5.0\n6 -0.920830 -1.478427  6.0\n7 -0.772263  0.524988  7.0\n\nIn [9]: df3.dtypes\nOut[9]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [10]: df3.values.dtype\nOut[10]: dtype('float64') \n```", "```py\nIn [11]: df3.astype('float32').dtypes\nOut[11]: \nA    float32\nB    float32\nC    float32\ndtype: object \n```", "```py\nIn [12]: df3['D'] = '1.'\n\nIn [13]: df3['E'] = '1'\n\nIn [14]: df3.convert_objects(convert_numeric=True).dtypes\nOut[14]:\nA    float32\nB    float64\nC    float64\nD    float64\nE      int64\ndtype: object\n\n# same, but specific dtype conversion\nIn [15]: df3['D'] = df3['D'].astype('float16')\n\nIn [16]: df3['E'] = df3['E'].astype('int32')\n\nIn [17]: df3.dtypes\nOut[17]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object \n```", "```py\nIn [18]: import datetime\n\nIn [19]: s = pd.Series([datetime.datetime(2001, 1, 1, 0, 0), 'foo', 1.0, 1,\n ....:               pd.Timestamp('20010104'), '20010105'], dtype='O')\n ....:\n\nIn [20]: s.convert_objects(convert_dates='coerce')\nOut[20]:\n0   2001-01-01\n1          NaT\n2          NaT\n3          NaT\n4   2001-01-04\n5   2001-01-05\ndtype: datetime64[ns] \n```", "```py\nIn [21]: pd.DataFrame([1, 2], columns=['a']).dtypes\nOut[21]:\na    int64\ndtype: object\n\nIn [22]: pd.DataFrame({'a': [1, 2]}).dtypes\nOut[22]:\na    int64\ndtype: object\n\nIn [23]: pd.DataFrame({'a': 1}, index=range(2)).dtypes\nOut[23]:\na    int64\ndtype: object \n```", "```py\nIn [24]: dfi = df3.astype('int32')\n\nIn [25]: dfi['D'] = dfi['D'].astype('int64')\n\nIn [26]: dfi\nOut[26]:\n A  B  C  D  E\n0  0  0  0  1  1\n1 -2  0  1  1  1\n2 -2  0  2  1  1\n3  0 -1  3  1  1\n4  1  0  4  1  1\n5  0  0  5  1  1\n6  0 -1  6  1  1\n7  0  0  7  1  1\n\nIn [27]: dfi.dtypes\nOut[27]:\nA    int32\nB    int32\nC    int32\nD    int64\nE    int32\ndtype: object\n\nIn [28]: casted = dfi[dfi > 0]\n\nIn [29]: casted\nOut[29]:\n A   B    C  D  E\n0  NaN NaN  NaN  1  1\n1  NaN NaN  1.0  1  1\n2  NaN NaN  2.0  1  1\n3  NaN NaN  3.0  1  1\n4  1.0 NaN  4.0  1  1\n5  NaN NaN  5.0  1  1\n6  NaN NaN  6.0  1  1\n7  NaN NaN  7.0  1  1\n\nIn [30]: casted.dtypes\nOut[30]:\nA    float64\nB    float64\nC    float64\nD      int64\nE      int32\ndtype: object \n```", "```py\nIn [31]: df4 = df3.copy()\n\nIn [32]: df4['A'] = df4['A'].astype('float32')\n\nIn [33]: df4.dtypes\nOut[33]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object\n\nIn [34]: casted = df4[df4 > 0]\n\nIn [35]: casted\nOut[35]:\n A         B    C    D  E\n0       NaN       NaN  NaN  1.0  1\n1       NaN  0.567020  1.0  1.0  1\n2       NaN  0.276232  2.0  1.0  1\n3       NaN       NaN  3.0  1.0  1\n4  1.933792       NaN  4.0  1.0  1\n5       NaN  0.113648  5.0  1.0  1\n6       NaN       NaN  6.0  1.0  1\n7       NaN  0.524988  7.0  1.0  1\n\nIn [36]: casted.dtypes\nOut[36]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object \n```", "```py\nIn [12]: df = pd.DataFrame(np.random.randn(6, 2), pd.date_range('20010102', periods=6),\n ....:                  columns=['A', ' B'])\n ....: \n\nIn [13]: df['timestamp'] = pd.Timestamp('20010103')\n\nIn [14]: df\nOut[14]: \n A         B  timestamp\n2001-01-02  0.404705  0.577046 2001-01-03\n2001-01-03 -1.715002 -1.039268 2001-01-03\n2001-01-04 -0.370647 -1.157892 2001-01-03\n2001-01-05 -1.344312  0.844885 2001-01-03\n2001-01-06  1.075770 -0.109050 2001-01-03\n2001-01-07  1.643563 -1.469388 2001-01-03\n\n# datetime64[ns] out of the box\nIn [15]: df.dtypes.value_counts()\nOut[15]: \nfloat64          2\ndatetime64[s]    1\nName: count, dtype: int64\n\n# use the traditional nan, which is mapped to NaT internally\nIn [16]: df.loc[df.index[2:4], ['A', 'timestamp']] = np.nan\n\nIn [17]: df\nOut[17]: \n A         B  timestamp\n2001-01-02  0.404705  0.577046 2001-01-03\n2001-01-03 -1.715002 -1.039268 2001-01-03\n2001-01-04       NaN -1.157892        NaT\n2001-01-05       NaN  0.844885        NaT\n2001-01-06  1.075770 -0.109050 2001-01-03\n2001-01-07  1.643563 -1.469388 2001-01-03 \n```", "```py\nIn [18]: import datetime\n\nIn [19]: s = pd.Series([datetime.datetime(2001, 1, 2, 0, 0) for i in range(3)])\n\nIn [20]: s.dtype\nOut[20]: dtype('<M8[ns]')\n\nIn [21]: s[1] = np.nan\n\nIn [22]: s\nOut[22]: \n0   2001-01-02\n1          NaT\n2   2001-01-02\ndtype: datetime64[ns]\n\nIn [23]: s.dtype\nOut[23]: dtype('<M8[ns]')\n\nIn [24]: s = s.astype('O')\n\nIn [25]: s\nOut[25]: \n0    2001-01-02 00:00:00\n1                    NaT\n2    2001-01-02 00:00:00\ndtype: object\n\nIn [26]: s.dtype\nOut[26]: dtype('O') \n```", "```py\n>         In [27]: df = pd.DataFrame({'A': range(5), 'B': range(5)})\n>         \n>         In [28]: df.to_hdf('store.h5', key='table', append=True)\n>         \n>         In [29]: pd.read_hdf('store.h5', 'table', where=['index > 2'])\n>         Out[29]: \n>          A  B\n>         3  3  3\n>         4  4  4 \n>         ```", "```py\n>     In [30]: idx = pd.date_range(\"2001-10-1\", periods=5, freq='M')\n>     \n>     In [31]: ts = pd.Series(np.random.rand(len(idx)), index=idx)\n>     \n>     In [32]: ts['2001']\n>     Out[32]:\n>     2001-10-31    0.117967\n>     2001-11-30    0.702184\n>     2001-12-31    0.414034\n>     Freq: M, dtype: float64\n>     \n>     In [33]: df = pd.DataFrame({'A': ts})\n>     \n>     In [34]: df['2001']\n>     Out[34]:\n>      A\n>     2001-10-31  0.117967\n>     2001-11-30  0.702184\n>     2001-12-31  0.414034 \n>     ```", "```py\n>     >>> p = pd.Panel(np.random.randn(3, 4, 4), items=['ItemA', 'ItemB', 'ItemC'],\n>     ...              major_axis=pd.date_range('20010102', periods=4),\n>     ...              minor_axis=['A', 'B', 'C', 'D'])\n>     >>> p\n>     <class 'pandas.core.panel.Panel'>\n>     Dimensions: 3 (items) x 4 (major_axis) x 4 (minor_axis)\n>     Items axis: ItemA to ItemC\n>     Major_axis axis: 2001-01-02 00:00:00 to 2001-01-05 00:00:00\n>     Minor_axis axis: A to D\n>     \n>     >>> p.reindex(items=['ItemA']).squeeze()\n>      A         B         C         D\n>     2001-01-02  0.926089 -2.026458  0.501277 -0.204683\n>     2001-01-03 -0.076524  1.081161  1.141361  0.479243\n>     2001-01-04  0.641817 -0.185352  1.824568  0.809152\n>     2001-01-05  0.575237  0.669934  1.398014 -0.399338\n>     \n>     >>> p.reindex(items=['ItemA'], minor=['B']).squeeze()\n>     2001-01-02   -2.026458\n>     2001-01-03    1.081161\n>     2001-01-04   -0.185352\n>     2001-01-05    0.669934\n>     Freq: D, Name: B, dtype: float64 \n>     ```", "```py\nIn [1]: df1 = pd.DataFrame(np.random.randn(8, 1), columns=['A'], dtype='float32')\n\nIn [2]: df1\nOut[2]: \n A\n0  0.469112\n1 -0.282863\n2 -1.509058\n3 -1.135632\n4  1.212112\n5 -0.173215\n6  0.119209\n7 -1.044236\n\nIn [3]: df1.dtypes\nOut[3]: \nA    float32\ndtype: object\n\nIn [4]: df2 = pd.DataFrame({'A': pd.Series(np.random.randn(8), dtype='float16'),\n ...:                    'B': pd.Series(np.random.randn(8)),\n ...:                    'C': pd.Series(range(8), dtype='uint8')})\n ...: \n\nIn [5]: df2\nOut[5]: \n A         B  C\n0 -0.861816 -0.424972  0\n1 -2.105469  0.567020  1\n2 -0.494873  0.276232  2\n3  1.072266 -1.087401  3\n4  0.721680 -0.673690  4\n5 -0.706543  0.113648  5\n6 -1.040039 -1.478427  6\n7  0.271973  0.524988  7\n\nIn [6]: df2.dtypes\nOut[6]: \nA    float16\nB    float64\nC      uint8\ndtype: object\n\n# here you get some upcasting\nIn [7]: df3 = df1.reindex_like(df2).fillna(value=0.0) + df2\n\nIn [8]: df3\nOut[8]: \n A         B    C\n0 -0.392704 -0.424972  0.0\n1 -2.388332  0.567020  1.0\n2 -2.003932  0.276232  2.0\n3 -0.063367 -1.087401  3.0\n4  1.933792 -0.673690  4.0\n5 -0.879758  0.113648  5.0\n6 -0.920830 -1.478427  6.0\n7 -0.772263  0.524988  7.0\n\nIn [9]: df3.dtypes\nOut[9]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [10]: df3.values.dtype\nOut[10]: dtype('float64') \n```", "```py\nIn [11]: df3.astype('float32').dtypes\nOut[11]: \nA    float32\nB    float32\nC    float32\ndtype: object \n```", "```py\nIn [12]: df3['D'] = '1.'\n\nIn [13]: df3['E'] = '1'\n\nIn [14]: df3.convert_objects(convert_numeric=True).dtypes\nOut[14]:\nA    float32\nB    float64\nC    float64\nD    float64\nE      int64\ndtype: object\n\n# same, but specific dtype conversion\nIn [15]: df3['D'] = df3['D'].astype('float16')\n\nIn [16]: df3['E'] = df3['E'].astype('int32')\n\nIn [17]: df3.dtypes\nOut[17]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object \n```", "```py\nIn [18]: import datetime\n\nIn [19]: s = pd.Series([datetime.datetime(2001, 1, 1, 0, 0), 'foo', 1.0, 1,\n ....:               pd.Timestamp('20010104'), '20010105'], dtype='O')\n ....:\n\nIn [20]: s.convert_objects(convert_dates='coerce')\nOut[20]:\n0   2001-01-01\n1          NaT\n2          NaT\n3          NaT\n4   2001-01-04\n5   2001-01-05\ndtype: datetime64[ns] \n```", "```py\nIn [21]: pd.DataFrame([1, 2], columns=['a']).dtypes\nOut[21]:\na    int64\ndtype: object\n\nIn [22]: pd.DataFrame({'a': [1, 2]}).dtypes\nOut[22]:\na    int64\ndtype: object\n\nIn [23]: pd.DataFrame({'a': 1}, index=range(2)).dtypes\nOut[23]:\na    int64\ndtype: object \n```", "```py\nIn [24]: dfi = df3.astype('int32')\n\nIn [25]: dfi['D'] = dfi['D'].astype('int64')\n\nIn [26]: dfi\nOut[26]:\n A  B  C  D  E\n0  0  0  0  1  1\n1 -2  0  1  1  1\n2 -2  0  2  1  1\n3  0 -1  3  1  1\n4  1  0  4  1  1\n5  0  0  5  1  1\n6  0 -1  6  1  1\n7  0  0  7  1  1\n\nIn [27]: dfi.dtypes\nOut[27]:\nA    int32\nB    int32\nC    int32\nD    int64\nE    int32\ndtype: object\n\nIn [28]: casted = dfi[dfi > 0]\n\nIn [29]: casted\nOut[29]:\n A   B    C  D  E\n0  NaN NaN  NaN  1  1\n1  NaN NaN  1.0  1  1\n2  NaN NaN  2.0  1  1\n3  NaN NaN  3.0  1  1\n4  1.0 NaN  4.0  1  1\n5  NaN NaN  5.0  1  1\n6  NaN NaN  6.0  1  1\n7  NaN NaN  7.0  1  1\n\nIn [30]: casted.dtypes\nOut[30]:\nA    float64\nB    float64\nC    float64\nD      int64\nE      int32\ndtype: object \n```", "```py\nIn [31]: df4 = df3.copy()\n\nIn [32]: df4['A'] = df4['A'].astype('float32')\n\nIn [33]: df4.dtypes\nOut[33]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object\n\nIn [34]: casted = df4[df4 > 0]\n\nIn [35]: casted\nOut[35]:\n A         B    C    D  E\n0       NaN       NaN  NaN  1.0  1\n1       NaN  0.567020  1.0  1.0  1\n2       NaN  0.276232  2.0  1.0  1\n3       NaN       NaN  3.0  1.0  1\n4  1.933792       NaN  4.0  1.0  1\n5       NaN  0.113648  5.0  1.0  1\n6       NaN       NaN  6.0  1.0  1\n7       NaN  0.524988  7.0  1.0  1\n\nIn [36]: casted.dtypes\nOut[36]:\nA    float32\nB    float64\nC    float64\nD    float16\nE      int32\ndtype: object \n```", "```py\nIn [12]: df = pd.DataFrame(np.random.randn(6, 2), pd.date_range('20010102', periods=6),\n ....:                  columns=['A', ' B'])\n ....: \n\nIn [13]: df['timestamp'] = pd.Timestamp('20010103')\n\nIn [14]: df\nOut[14]: \n A         B  timestamp\n2001-01-02  0.404705  0.577046 2001-01-03\n2001-01-03 -1.715002 -1.039268 2001-01-03\n2001-01-04 -0.370647 -1.157892 2001-01-03\n2001-01-05 -1.344312  0.844885 2001-01-03\n2001-01-06  1.075770 -0.109050 2001-01-03\n2001-01-07  1.643563 -1.469388 2001-01-03\n\n# datetime64[ns] out of the box\nIn [15]: df.dtypes.value_counts()\nOut[15]: \nfloat64          2\ndatetime64[s]    1\nName: count, dtype: int64\n\n# use the traditional nan, which is mapped to NaT internally\nIn [16]: df.loc[df.index[2:4], ['A', 'timestamp']] = np.nan\n\nIn [17]: df\nOut[17]: \n A         B  timestamp\n2001-01-02  0.404705  0.577046 2001-01-03\n2001-01-03 -1.715002 -1.039268 2001-01-03\n2001-01-04       NaN -1.157892        NaT\n2001-01-05       NaN  0.844885        NaT\n2001-01-06  1.075770 -0.109050 2001-01-03\n2001-01-07  1.643563 -1.469388 2001-01-03 \n```", "```py\nIn [18]: import datetime\n\nIn [19]: s = pd.Series([datetime.datetime(2001, 1, 2, 0, 0) for i in range(3)])\n\nIn [20]: s.dtype\nOut[20]: dtype('<M8[ns]')\n\nIn [21]: s[1] = np.nan\n\nIn [22]: s\nOut[22]: \n0   2001-01-02\n1          NaT\n2   2001-01-02\ndtype: datetime64[ns]\n\nIn [23]: s.dtype\nOut[23]: dtype('<M8[ns]')\n\nIn [24]: s = s.astype('O')\n\nIn [25]: s\nOut[25]: \n0    2001-01-02 00:00:00\n1                    NaT\n2    2001-01-02 00:00:00\ndtype: object\n\nIn [26]: s.dtype\nOut[26]: dtype('O') \n```", "```py\n>         In [27]: df = pd.DataFrame({'A': range(5), 'B': range(5)})\n>         \n>         In [28]: df.to_hdf('store.h5', key='table', append=True)\n>         \n>         In [29]: pd.read_hdf('store.h5', 'table', where=['index > 2'])\n>         Out[29]: \n>          A  B\n>         3  3  3\n>         4  4  4 \n>         ```", "```py\n>     In [30]: idx = pd.date_range(\"2001-10-1\", periods=5, freq='M')\n>     \n>     In [31]: ts = pd.Series(np.random.rand(len(idx)), index=idx)\n>     \n>     In [32]: ts['2001']\n>     Out[32]:\n>     2001-10-31    0.117967\n>     2001-11-30    0.702184\n>     2001-12-31    0.414034\n>     Freq: M, dtype: float64\n>     \n>     In [33]: df = pd.DataFrame({'A': ts})\n>     \n>     In [34]: df['2001']\n>     Out[34]:\n>      A\n>     2001-10-31  0.117967\n>     2001-11-30  0.702184\n>     2001-12-31  0.414034 \n>     ```", "```py\n>     >>> p = pd.Panel(np.random.randn(3, 4, 4), items=['ItemA', 'ItemB', 'ItemC'],\n>     ...              major_axis=pd.date_range('20010102', periods=4),\n>     ...              minor_axis=['A', 'B', 'C', 'D'])\n>     >>> p\n>     <class 'pandas.core.panel.Panel'>\n>     Dimensions: 3 (items) x 4 (major_axis) x 4 (minor_axis)\n>     Items axis: ItemA to ItemC\n>     Major_axis axis: 2001-01-02 00:00:00 to 2001-01-05 00:00:00\n>     Minor_axis axis: A to D\n>     \n>     >>> p.reindex(items=['ItemA']).squeeze()\n>      A         B         C         D\n>     2001-01-02  0.926089 -2.026458  0.501277 -0.204683\n>     2001-01-03 -0.076524  1.081161  1.141361  0.479243\n>     2001-01-04  0.641817 -0.185352  1.824568  0.809152\n>     2001-01-05  0.575237  0.669934  1.398014 -0.399338\n>     \n>     >>> p.reindex(items=['ItemA'], minor=['B']).squeeze()\n>     2001-01-02   -2.026458\n>     2001-01-03    1.081161\n>     2001-01-04   -0.185352\n>     2001-01-05    0.669934\n>     Freq: D, Name: B, dtype: float64 \n>     ```"]