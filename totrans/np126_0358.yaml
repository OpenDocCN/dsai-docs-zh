- en: numpy.concatenate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.concatenate.html](https://numpy.org/doc/1.26/reference/generated/numpy.concatenate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Join a sequence of arrays along an existing axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a1, a2, …**sequence of array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays must have the same shape, except in the dimension corresponding to
    *axis* (the first, by default).
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis along which the arrays will be joined. If axis is None, arrays are
    flattened before use. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the destination to place the result. The shape must be correct,
    matching that of what concatenate would have returned if no out argument were
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str or dtype'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the destination array will have this dtype. Cannot be provided
    together with *out*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls what kind of data casting may occur. Defaults to ‘same_kind’.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The concatenated array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.concatenate`](numpy.ma.concatenate.html#numpy.ma.concatenate "numpy.ma.concatenate")'
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate function that preserves input masks.
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_split`](numpy.array_split.html#numpy.array_split "numpy.array_split")'
  prefs: []
  type: TYPE_NORMAL
- en: Split an array into multiple sub-arrays of equal or near-equal size.
  prefs: []
  type: TYPE_NORMAL
- en: '[`split`](numpy.split.html#numpy.split "numpy.split")'
  prefs: []
  type: TYPE_NORMAL
- en: Split array into a list of multiple sub-arrays of equal size.
  prefs: []
  type: TYPE_NORMAL
- en: '[`hsplit`](numpy.hsplit.html#numpy.hsplit "numpy.hsplit")'
  prefs: []
  type: TYPE_NORMAL
- en: Split array into multiple sub-arrays horizontally (column wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`vsplit`](numpy.vsplit.html#numpy.vsplit "numpy.vsplit")'
  prefs: []
  type: TYPE_NORMAL
- en: Split array into multiple sub-arrays vertically (row wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`dsplit`](numpy.dsplit.html#numpy.dsplit "numpy.dsplit")'
  prefs: []
  type: TYPE_NORMAL
- en: Split array into multiple sub-arrays along the 3rd axis (depth).
  prefs: []
  type: TYPE_NORMAL
- en: '[`stack`](numpy.stack.html#numpy.stack "numpy.stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack a sequence of arrays along a new axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`block`](numpy.block.html#numpy.block "numpy.block")'
  prefs: []
  type: TYPE_NORMAL
- en: Assemble arrays from blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '[`hstack`](numpy.hstack.html#numpy.hstack "numpy.hstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence horizontally (column wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence vertically (row wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`dstack`](numpy.dstack.html#numpy.dstack "numpy.dstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence depth wise (along third dimension).
  prefs: []
  type: TYPE_NORMAL
- en: '[`column_stack`](numpy.column_stack.html#numpy.column_stack "numpy.column_stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack 1-D arrays as columns into a 2-D array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When one or more of the arrays to be concatenated is a MaskedArray, this function
    will return a MaskedArray object instead of an ndarray, but the input masks are
    *not* preserved. In cases where a MaskedArray is expected as input, use the ma.concatenate
    function from the masked array module instead.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This function will not preserve masking of MaskedArray inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
