- en: pandas.concat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.concat.html](https://pandas.pydata.org/docs/reference/api/pandas.concat.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Concatenate pandas objects along a particular axis.
  prefs: []
  type: TYPE_NORMAL
- en: Allows optional set logic along the other axes.
  prefs: []
  type: TYPE_NORMAL
- en: Can also add a layer of hierarchical indexing on the concatenation axis, which
    may be useful if the labels are the same (or overlapping) on the passed axis number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**objs**a sequence or mapping of Series or DataFrame objects'
  prefs: []
  type: TYPE_NORMAL
- en: If a mapping is passed, the sorted keys will be used as the keys argument, unless
    it is passed, in which case the values will be selected (see below). Any None
    objects will be dropped silently unless they are all None in which case a ValueError
    will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0/’index’, 1/’columns’}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: The axis to concatenate along.
  prefs: []
  type: TYPE_NORMAL
- en: '**join**{‘inner’, ‘outer’}, default ‘outer’'
  prefs: []
  type: TYPE_NORMAL
- en: How to handle indexes on other axis (or axes).
  prefs: []
  type: TYPE_NORMAL
- en: '**ignore_index**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If True, do not use the index values along the concatenation axis. The resulting
    axis will be labeled 0, …, n - 1\. This is useful if you are concatenating objects
    where the concatenation axis does not have meaningful indexing information. Note
    the index values on the other axes are still respected in the join.
  prefs: []
  type: TYPE_NORMAL
- en: '**keys**sequence, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If multiple levels passed, should contain tuples. Construct hierarchical index
    using the passed keys as the outermost level.
  prefs: []
  type: TYPE_NORMAL
- en: '**levels**list of sequences, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Specific levels (unique values) to use for constructing a MultiIndex. Otherwise
    they will be inferred from the keys.
  prefs: []
  type: TYPE_NORMAL
- en: '**names**list, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Names for the levels in the resulting hierarchical index.
  prefs: []
  type: TYPE_NORMAL
- en: '**verify_integrity**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether the new concatenated axis contains duplicates. This can be very
    expensive relative to the actual data concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Sort non-concatenation axis if it is not already aligned. One exception to this
    is when the non-concatentation axis is a DatetimeIndex and join=’outer’ and the
    axis is not already aligned. In that case, the non-concatenation axis is always
    sorted lexicographically.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If False, do not copy data unnecessarily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: object, type of objs
  prefs: []
  type: TYPE_NORMAL
- en: When concatenating all `Series` along the index (axis=0), a `Series` is returned.
    When `objs` contains at least one `DataFrame`, a `DataFrame` is returned. When
    concatenating along the columns (axis=1), a `DataFrame` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")'
  prefs: []
  type: TYPE_NORMAL
- en: Join DataFrames using indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.merge`](pandas.DataFrame.merge.html#pandas.DataFrame.merge "pandas.DataFrame.merge")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge DataFrames by indexes or columns.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The keys, levels, and names arguments are all optional.
  prefs: []
  type: TYPE_NORMAL
- en: A walkthrough of how this method fits in with other tools for combining pandas
    objects can be found [here](https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html).
  prefs: []
  type: TYPE_NORMAL
- en: It is not recommended to build DataFrames by adding single rows in a for loop.
    Build a list of rows and make a DataFrame in a single concat.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Combine two `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Clear the existing index and reset it in the result by setting the `ignore_index`
    option to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add a hierarchical index at the outermost level of the data with the `keys`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Label the index keys you create with the `names` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Combine two `DataFrame` objects with identical columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Combine `DataFrame` objects with overlapping columns and return everything.
    Columns outside the intersection will be filled with `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Combine `DataFrame` objects with overlapping columns and return only those that
    are shared by passing `inner` to the `join` keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Combine `DataFrame` objects horizontally along the x axis by passing in `axis=1`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Prevent the result from including duplicate index values with the `verify_integrity`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Append a single row to the end of a `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
