- en: pandas.get_dummies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html](https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert categorical variable into dummy/indicator variables.
  prefs: []
  type: TYPE_NORMAL
- en: Each variable is converted in as many 0/1 variables as there are different values.
    Columns in the output are each named after a value; if the input is a DataFrame,
    the name of the original variable is prepended to the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array-like, Series, or DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Data of which to get dummy indicators.
  prefs: []
  type: TYPE_NORMAL
- en: '**prefix**str, list of str, or dict of str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: String to append DataFrame column names. Pass a list with length equal to the
    number of columns when calling get_dummies on a DataFrame. Alternatively, prefix
    can be a dictionary mapping column names to prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: '**prefix_sep**str, default ‘_’'
  prefs: []
  type: TYPE_NORMAL
- en: If appending prefix, separator/delimiter to use. Or pass a list or dictionary
    as with prefix.
  prefs: []
  type: TYPE_NORMAL
- en: '**dummy_na**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Add a column to indicate NaNs, if False NaNs are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**columns**list-like, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Column names in the DataFrame to be encoded. If columns is None then all the
    columns with object, string, or category dtype will be converted.
  prefs: []
  type: TYPE_NORMAL
- en: '**sparse**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the dummy-encoded columns should be backed by a `SparseArray` (True)
    or a regular NumPy array (False).
  prefs: []
  type: TYPE_NORMAL
- en: '**drop_first**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to get k-1 dummies out of k categorical levels by removing the first
    level.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, default bool'
  prefs: []
  type: TYPE_NORMAL
- en: Data type for new columns. Only a single dtype is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Dummy-coded data. If data contains other columns than the dummy-coded one(s),
    these will be prepended, unaltered, to the result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.str.get_dummies`](pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert Series of strings to dummy codes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dummies()`](pandas.from_dummies.html#pandas.from_dummies "pandas.from_dummies")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert dummy codes to categorical `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Reference [the user guide](../../user_guide/reshaping.html#reshaping-dummies)
    for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
