- en: Tensor Product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html](https://docs.sympy.org/latest/modules/physics/quantum/tensorproduct.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Abstract tensor product.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The tensor product of two or more arguments.
  prefs: []
  type: TYPE_NORMAL
- en: For matrices, this uses `matrix_tensor_product` to compute the Kronecker or
    tensor product matrix. For other objects a symbolic `TensorProduct` instance is
    returned. The tensor product is a non-commutative multiplication that is used
    primarily with operators and states in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the tensor product distinguishes between commutative and non-commutative
    arguments. Commutative arguments are assumed to be scalars and are pulled out
    in front of the `TensorProduct`. Non-commutative arguments remain in the resulting
    `TensorProduct`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of the objects to take the tensor product of.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with a simple tensor product of SymPy matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also construct tensor products of non-commutative symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can take the dagger of a tensor product (note the order does NOT reverse
    like the dagger of a normal product):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Expand can be used to distribute a tensor product across addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Try to simplify and combine TensorProducts.
  prefs: []
  type: TYPE_NORMAL
- en: In general this will try to pull expressions inside of `TensorProducts`. It
    currently only works for relatively simple cases where the products have only
    scalars, raw `TensorProducts`, not `Add`, `Pow`, `Commutators` of `TensorProducts`.
    It is best to see what it does by showing examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'First see what happens to products of tensor products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the core logic of this function, and it works inside, powers, sums,
    commutators and anticommutators as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
