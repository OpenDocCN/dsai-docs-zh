["```py\nclass sympy.physics.secondquant.AnnihilateBoson(k)\n```", "```py\n>>> from sympy.physics.secondquant import B\n>>> from sympy.abc import x\n>>> B(x)\nAnnihilateBoson(x) \n```", "```py\napply_operator(state)\n```", "```py\n>>> from sympy.physics.secondquant import B, BKet\n>>> from sympy.abc import x, y, n\n>>> B(x).apply_operator(y)\ny*AnnihilateBoson(x)\n>>> B(0).apply_operator(BKet((n,)))\nsqrt(n)*FockStateBosonKet((n - 1,)) \n```", "```py\nclass sympy.physics.secondquant.AnnihilateFermion(k)\n```", "```py\napply_operator(state)\n```", "```py\n>>> from sympy.physics.secondquant import B, Dagger, BKet\n>>> from sympy.abc import x, y, n\n>>> Dagger(B(x)).apply_operator(y)\ny*CreateBoson(x)\n>>> B(0).apply_operator(BKet((n,)))\nsqrt(n)*FockStateBosonKet((n - 1,)) \n```", "```py\nproperty is_only_q_annihilator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import F\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> F(a).is_only_q_annihilator\nTrue\n>>> F(i).is_only_q_annihilator\nFalse\n>>> F(p).is_only_q_annihilator\nFalse \n```", "```py\nproperty is_only_q_creator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import F\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> F(a).is_only_q_creator\nFalse\n>>> F(i).is_only_q_creator\nTrue\n>>> F(p).is_only_q_creator\nFalse \n```", "```py\nproperty is_q_annihilator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import F\n>>> a = Symbol('a', above_fermi=1)\n>>> i = Symbol('i', below_fermi=1)\n>>> p = Symbol('p') \n```", "```py\n>>> F(a).is_q_annihilator\n1\n>>> F(i).is_q_annihilator\n0\n>>> F(p).is_q_annihilator\n1 \n```", "```py\nproperty is_q_creator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import F\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> F(a).is_q_creator\n0\n>>> F(i).is_q_creator\n-1\n>>> F(p).is_q_creator\n-1 \n```", "```py\nclass sympy.physics.secondquant.AntiSymmetricTensor(symbol, upper, lower)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import AntiSymmetricTensor\n>>> i, j = symbols('i j', below_fermi=True)\n>>> a, b = symbols('a b', above_fermi=True)\n>>> AntiSymmetricTensor('v', (a, i), (b, j))\nAntiSymmetricTensor(v, (a, i), (b, j))\n>>> AntiSymmetricTensor('v', (i, a), (b, j))\n-AntiSymmetricTensor(v, (a, i), (b, j)) \n```", "```py\nproperty lower\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import AntiSymmetricTensor\n>>> i, j = symbols('i,j', below_fermi=True)\n>>> a, b = symbols('a,b', above_fermi=True)\n>>> AntiSymmetricTensor('v', (a, i), (b, j))\nAntiSymmetricTensor(v, (a, i), (b, j))\n>>> AntiSymmetricTensor('v', (a, i), (b, j)).lower\n(b, j) \n```", "```py\nproperty symbol\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import AntiSymmetricTensor\n>>> i, j = symbols('i,j', below_fermi=True)\n>>> a, b = symbols('a,b', above_fermi=True)\n>>> AntiSymmetricTensor('v', (a, i), (b, j))\nAntiSymmetricTensor(v, (a, i), (b, j))\n>>> AntiSymmetricTensor('v', (a, i), (b, j)).symbol\nv \n```", "```py\nproperty upper\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import AntiSymmetricTensor\n>>> i, j = symbols('i,j', below_fermi=True)\n>>> a, b = symbols('a,b', above_fermi=True)\n>>> AntiSymmetricTensor('v', (a, i), (b, j))\nAntiSymmetricTensor(v, (a, i), (b, j))\n>>> AntiSymmetricTensor('v', (a, i), (b, j)).upper\n(a, i) \n```", "```py\nsympy.physics.secondquant.B\n```", "```py\nsympy.physics.secondquant.BBra\n```", "```py\nsympy.physics.secondquant.BKet\n```", "```py\nsympy.physics.secondquant.Bd\n```", "```py\nclass sympy.physics.secondquant.BosonicBasis\n```", "```py\nclass sympy.physics.secondquant.Commutator(a, b)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import Commutator\n>>> A, B = symbols('A,B', commutative=False)\n>>> Commutator(B, A)\n-Commutator(A, B) \n```", "```py\n>>> comm = Commutator(A,B); comm\nCommutator(A, B)\n>>> comm.doit()\nA*B - B*A \n```", "```py\n>>> from sympy.physics.secondquant import Fd, F\n>>> a = symbols('a', above_fermi=True)\n>>> i = symbols('i', below_fermi=True)\n>>> p,q = symbols('p,q') \n```", "```py\n>>> Commutator(Fd(a),Fd(i))\n2*NO(CreateFermion(a)*CreateFermion(i)) \n```", "```py\n>>> comm = Commutator(Fd(p)*Fd(q),F(i)); comm\nCommutator(CreateFermion(p)*CreateFermion(q), AnnihilateFermion(i))\n>>> comm.doit(wicks=True)\n-KroneckerDelta(i, p)*CreateFermion(q) +\n KroneckerDelta(i, q)*CreateFermion(p) \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy.physics.secondquant import Commutator, F, Fd\n>>> from sympy import symbols\n>>> i, j = symbols('i,j', below_fermi=True)\n>>> a, b = symbols('a,b', above_fermi=True)\n>>> c = Commutator(Fd(a)*F(i),Fd(b)*F(j))\n>>> c.doit(wicks=True)\n0 \n```", "```py\nclassmethod eval(a, b)\n```", "```py\n>>> from sympy.physics.secondquant import Commutator, F, Fd\n>>> from sympy.abc import x\n>>> c1 = Commutator(F(x), Fd(x))\n>>> c2 = Commutator(Fd(x), F(x))\n>>> Commutator.eval(c1, c2)\n0 \n```", "```py\nclass sympy.physics.secondquant.CreateBoson(k)\n```", "```py\napply_operator(state)\n```", "```py\n>>> from sympy.physics.secondquant import B, Dagger, BKet\n>>> from sympy.abc import x, y, n\n>>> Dagger(B(x)).apply_operator(y)\ny*CreateBoson(x)\n>>> B(0).apply_operator(BKet((n,)))\nsqrt(n)*FockStateBosonKet((n - 1,)) \n```", "```py\nclass sympy.physics.secondquant.CreateFermion(k)\n```", "```py\napply_operator(state)\n```", "```py\n>>> from sympy.physics.secondquant import B, Dagger, BKet\n>>> from sympy.abc import x, y, n\n>>> Dagger(B(x)).apply_operator(y)\ny*CreateBoson(x)\n>>> B(0).apply_operator(BKet((n,)))\nsqrt(n)*FockStateBosonKet((n - 1,)) \n```", "```py\nproperty is_only_q_annihilator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import Fd\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> Fd(a).is_only_q_annihilator\nFalse\n>>> Fd(i).is_only_q_annihilator\nTrue\n>>> Fd(p).is_only_q_annihilator\nFalse \n```", "```py\nproperty is_only_q_creator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import Fd\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> Fd(a).is_only_q_creator\nTrue\n>>> Fd(i).is_only_q_creator\nFalse\n>>> Fd(p).is_only_q_creator\nFalse \n```", "```py\nproperty is_q_annihilator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import Fd\n>>> a = Symbol('a', above_fermi=1)\n>>> i = Symbol('i', below_fermi=1)\n>>> p = Symbol('p') \n```", "```py\n>>> Fd(a).is_q_annihilator\n0\n>>> Fd(i).is_q_annihilator\n-1\n>>> Fd(p).is_q_annihilator\n-1 \n```", "```py\nproperty is_q_creator\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.secondquant import Fd\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p') \n```", "```py\n>>> Fd(a).is_q_creator\n1\n>>> Fd(i).is_q_creator\n0\n>>> Fd(p).is_q_creator\n1 \n```", "```py\nclass sympy.physics.secondquant.Dagger(arg)\n```", "```py\n>>> from sympy import I\n>>> from sympy.physics.secondquant import Dagger, B, Bd\n>>> Dagger(2*I)\n-2*I\n>>> Dagger(B(0))\nCreateBoson(0)\n>>> Dagger(Bd(0))\nAnnihilateBoson(0) \n```", "```py\nclassmethod eval(arg)\n```", "```py\n>>> from sympy import I\n>>> from sympy.physics.secondquant import Dagger, B, Bd\n>>> Dagger(2*I)\n-2*I\n>>> Dagger(B(0))\nCreateBoson(0)\n>>> Dagger(Bd(0))\nAnnihilateBoson(0) \n```", "```py\nsympy.physics.secondquant.F\n```", "```py\nsympy.physics.secondquant.FBra\n```", "```py\nsympy.physics.secondquant.FKet\n```", "```py\nsympy.physics.secondquant.Fd\n```", "```py\nclass sympy.physics.secondquant.FixedBosonicBasis(n_particles, n_levels)\n```", "```py\n>>> from sympy.physics.secondquant import FixedBosonicBasis\n>>> b = FixedBosonicBasis(2, 2)\n>>> state = b.state(1)\n>>> b\n[FockState((2, 0)), FockState((1, 1)), FockState((0, 2))]\n>>> state\nFockStateBosonKet((1, 1))\n>>> b.index(state)\n1 \n```", "```py\nindex(state)\n```", "```py\n>>> from sympy.physics.secondquant import FixedBosonicBasis\n>>> b = FixedBosonicBasis(2, 3)\n>>> b.index(b.state(3))\n3 \n```", "```py\nstate(i)\n```", "```py\n>>> from sympy.physics.secondquant import FixedBosonicBasis\n>>> b = FixedBosonicBasis(2, 3)\n>>> b.state(3)\nFockStateBosonKet((1, 0, 1)) \n```", "```py\nclass sympy.physics.secondquant.FockState(occupations)\n```", "```py\nclass sympy.physics.secondquant.FockStateBosonBra(occupations)\n```", "```py\n>>> from sympy.physics.secondquant import BBra\n>>> BBra([1, 2])\nFockStateBosonBra((1, 2)) \n```", "```py\nclass sympy.physics.secondquant.FockStateBosonKet(occupations)\n```", "```py\n>>> from sympy.physics.secondquant import BKet\n>>> BKet([1, 2])\nFockStateBosonKet((1, 2)) \n```", "```py\nclass sympy.physics.secondquant.FockStateBra(occupations)\n```", "```py\nclass sympy.physics.secondquant.FockStateFermionBra(occupations, fermi_level=0)\n```", "```py\n>>> from sympy.physics.secondquant import FBra\n>>> FBra([1, 2])\nFockStateFermionBra((1, 2)) \n```", "```py\nclass sympy.physics.secondquant.FockStateFermionKet(occupations, fermi_level=0)\n```", "```py\n>>> from sympy.physics.secondquant import FKet\n>>> FKet([1, 2])\nFockStateFermionKet((1, 2)) \n```", "```py\nclass sympy.physics.secondquant.FockStateKet(occupations)\n```", "```py\nclass sympy.physics.secondquant.InnerProduct(bra, ket)\n```", "```py\nproperty bra\n```", "```py\nproperty ket\n```", "```py\nclass sympy.physics.secondquant.KroneckerDelta(i, j, delta_range=None)\n```", "```py\n>>> from sympy import KroneckerDelta\n>>> KroneckerDelta(1, 2)\n0\n>>> KroneckerDelta(3, 3)\n1 \n```", "```py\n>>> from sympy.abc import i, j, k\n>>> KroneckerDelta(i, j)\nKroneckerDelta(i, j)\n>>> KroneckerDelta(i, i)\n1\n>>> KroneckerDelta(i, i + 1)\n0\n>>> KroneckerDelta(i, i + 1 + k)\nKroneckerDelta(i, i + k + 1) \n```", "```py\nclassmethod eval(i, j, delta_range=None)\n```", "```py\n>>> from sympy import KroneckerDelta\n>>> from sympy.abc import i, j, k \n```", "```py\n>>> KroneckerDelta(i, j)\nKroneckerDelta(i, j)\n>>> KroneckerDelta(i, i)\n1\n>>> KroneckerDelta(i, i + 1)\n0\n>>> KroneckerDelta(i, i + 1 + k)\nKroneckerDelta(i, i + k + 1) \n```", "```py\nproperty indices_contain_equal_information\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, q).indices_contain_equal_information\nTrue\n>>> KroneckerDelta(p, q+1).indices_contain_equal_information\nTrue\n>>> KroneckerDelta(i, p).indices_contain_equal_information\nFalse \n```", "```py\nproperty is_above_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_above_fermi\nTrue\n>>> KroneckerDelta(p, i).is_above_fermi\nFalse\n>>> KroneckerDelta(p, q).is_above_fermi\nTrue \n```", "```py\nproperty is_below_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_below_fermi\nFalse\n>>> KroneckerDelta(p, i).is_below_fermi\nTrue\n>>> KroneckerDelta(p, q).is_below_fermi\nTrue \n```", "```py\nproperty is_only_above_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, a).is_only_above_fermi\nTrue\n>>> KroneckerDelta(p, q).is_only_above_fermi\nFalse\n>>> KroneckerDelta(p, i).is_only_above_fermi\nFalse \n```", "```py\nproperty is_only_below_fermi\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n>>> KroneckerDelta(p, i).is_only_below_fermi\nTrue\n>>> KroneckerDelta(p, q).is_only_below_fermi\nFalse\n>>> KroneckerDelta(p, a).is_only_below_fermi\nFalse \n```", "```py\nproperty killable_index\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> j = Symbol('j', below_fermi=True)\n>>> p = Symbol('p')\n>>> KroneckerDelta(p, i).killable_index\np\n>>> KroneckerDelta(p, a).killable_index\np\n>>> KroneckerDelta(i, j).killable_index\nj \n```", "```py\nproperty preferred_index\n```", "```py\n>>> from sympy import KroneckerDelta, Symbol\n>>> a = Symbol('a', above_fermi=True)\n>>> i = Symbol('i', below_fermi=True)\n>>> j = Symbol('j', below_fermi=True)\n>>> p = Symbol('p')\n>>> KroneckerDelta(p, i).preferred_index\ni\n>>> KroneckerDelta(p, a).preferred_index\na\n>>> KroneckerDelta(i, j).preferred_index\ni \n```", "```py\nclass sympy.physics.secondquant.NO(arg)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import NO, F, Fd\n>>> p,q = symbols('p,q')\n>>> NO(Fd(p)*F(q))\nNO(CreateFermion(p)*AnnihilateFermion(q))\n>>> NO(F(q)*Fd(p))\n-NO(CreateFermion(p)*AnnihilateFermion(q)) \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy.physics.secondquant import NO, Fd, F\n>>> from textwrap import fill\n>>> from sympy import symbols, Dummy\n>>> p,q = symbols('p,q', cls=Dummy)\n>>> print(fill(str(NO(Fd(p)*F(q)).doit())))\nKroneckerDelta(_a, _p)*KroneckerDelta(_a,\n_q)*CreateFermion(_a)*AnnihilateFermion(_a) + KroneckerDelta(_a,\n_p)*KroneckerDelta(_i, _q)*CreateFermion(_a)*AnnihilateFermion(_i) -\nKroneckerDelta(_a, _q)*KroneckerDelta(_i,\n_p)*AnnihilateFermion(_a)*CreateFermion(_i) - KroneckerDelta(_i,\n_p)*KroneckerDelta(_i, _q)*AnnihilateFermion(_i)*CreateFermion(_i) \n```", "```py\nget_subNO(i)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import F, NO\n>>> p, q, r = symbols('p,q,r') \n```", "```py\n>>> NO(F(p)*F(q)*F(r)).get_subNO(1)\nNO(AnnihilateFermion(p)*AnnihilateFermion(r)) \n```", "```py\nproperty has_q_annihilators\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import NO, F, Fd \n```", "```py\n>>> a = symbols('a', above_fermi=True)\n>>> i = symbols('i', below_fermi=True)\n>>> NO(Fd(a)*Fd(i)).has_q_annihilators\n-1\n>>> NO(F(i)*F(a)).has_q_annihilators\n1\n>>> NO(Fd(a)*F(i)).has_q_annihilators\n0 \n```", "```py\nproperty has_q_creators\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import NO, F, Fd \n```", "```py\n>>> a = symbols('a', above_fermi=True)\n>>> i = symbols('i', below_fermi=True)\n>>> NO(Fd(a)*Fd(i)).has_q_creators\n1\n>>> NO(F(i)*F(a)).has_q_creators\n-1\n>>> NO(Fd(i)*F(a)).has_q_creators           \n0 \n```", "```py\niter_q_annihilators()\n```", "```py\n>>> from sympy import symbols\n>>> i, j = symbols('i j', below_fermi=True)\n>>> a, b = symbols('a b', above_fermi=True)\n>>> from sympy.physics.secondquant import NO, F, Fd\n>>> no = NO(Fd(a)*F(i)*F(b)*Fd(j)) \n```", "```py\n>>> no.iter_q_creators()\n<generator object... at 0x...>\n>>> list(no.iter_q_creators())\n[0, 1]\n>>> list(no.iter_q_annihilators())\n[3, 2] \n```", "```py\niter_q_creators()\n```", "```py\n>>> from sympy import symbols\n>>> i, j = symbols('i j', below_fermi=True)\n>>> a, b = symbols('a b', above_fermi=True)\n>>> from sympy.physics.secondquant import NO, F, Fd\n>>> no = NO(Fd(a)*F(i)*F(b)*Fd(j)) \n```", "```py\n>>> no.iter_q_creators()\n<generator object... at 0x...>\n>>> list(no.iter_q_creators())\n[0, 1]\n>>> list(no.iter_q_annihilators())\n[3, 2] \n```", "```py\nclass sympy.physics.secondquant.PermutationOperator(i, j)\n```", "```py\nget_permuted(expr)\n```", "```py\n>>> from sympy import symbols, Function\n>>> from sympy.physics.secondquant import PermutationOperator\n>>> p,q = symbols('p,q')\n>>> f = Function('f')\n>>> PermutationOperator(p,q).get_permuted(f(p,q))\n-f(q, p) \n```", "```py\nclass sympy.physics.secondquant.VarBosonicBasis(n_max)\n```", "```py\n>>> from sympy.physics.secondquant import VarBosonicBasis\n>>> b = VarBosonicBasis(5)\n>>> b\n[FockState((0,)), FockState((1,)), FockState((2,)),\n FockState((3,)), FockState((4,))] \n```", "```py\nindex(state)\n```", "```py\n>>> from sympy.physics.secondquant import VarBosonicBasis\n>>> b = VarBosonicBasis(3)\n>>> state = b.state(1)\n>>> b\n[FockState((0,)), FockState((1,)), FockState((2,))]\n>>> state\nFockStateBosonKet((1,))\n>>> b.index(state)\n1 \n```", "```py\nstate(i)\n```", "```py\n>>> from sympy.physics.secondquant import VarBosonicBasis\n>>> b = VarBosonicBasis(5)\n>>> b.state(3)\nFockStateBosonKet((3,)) \n```", "```py\nsympy.physics.secondquant.apply_operators(e)\n```", "```py\n>>> from sympy.physics.secondquant import apply_operators\n>>> from sympy import sympify\n>>> apply_operators(sympify(3)+4)\n7 \n```", "```py\nsympy.physics.secondquant.contraction(a, b)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.secondquant import F, Fd, contraction\n>>> p, q = symbols('p,q')\n>>> a, b = symbols('a,b', above_fermi=True)\n>>> i, j = symbols('i,j', below_fermi=True) \n```", "```py\n>>> contraction(F(a),Fd(b))\nKroneckerDelta(a, b)\n>>> contraction(Fd(i),F(j))\nKroneckerDelta(i, j) \n```", "```py\n>>> contraction(Fd(p),F(q))\nKroneckerDelta(_i, q)*KroneckerDelta(p, q)\n>>> contraction(F(p),Fd(q))\nKroneckerDelta(_a, q)*KroneckerDelta(p, q) \n```", "```py\n>>> contraction(F(p),F(q))\n0\n>>> contraction(Fd(p),Fd(q))\n0 \n```", "```py\nsympy.physics.secondquant.evaluate_deltas(e)\n```", "```py\n>>> from sympy import symbols, Function, Dummy, KroneckerDelta\n>>> from sympy.physics.secondquant import evaluate_deltas\n>>> i,j = symbols('i j', below_fermi=True, cls=Dummy)\n>>> a,b = symbols('a b', above_fermi=True, cls=Dummy)\n>>> p,q = symbols('p q', cls=Dummy)\n>>> f = Function('f')\n>>> t = Function('t') \n```", "```py\n>>> evaluate_deltas(KroneckerDelta(i,j)*f(i))       # d_ij f(i) -> f(j)\nf(_j)\n>>> evaluate_deltas(KroneckerDelta(i,j)*f(j))       # d_ij f(j) -> f(i)\nf(_i)\n>>> evaluate_deltas(KroneckerDelta(i,p)*f(p))       # d_ip f(p) -> f(i)\nf(_i)\n>>> evaluate_deltas(KroneckerDelta(q,p)*f(p))       # d_qp f(p) -> f(q)\nf(_q)\n>>> evaluate_deltas(KroneckerDelta(q,p)*f(q))       # d_qp f(q) -> f(p)\nf(_p) \n```", "```py\n>>> evaluate_deltas(KroneckerDelta(i,p)*t(a,i)*f(p,q))\nf(_i, _q)*t(_a, _i)\n>>> evaluate_deltas(KroneckerDelta(a,p)*t(a,i)*f(p,q))\nf(_a, _q)*t(_a, _i)\n>>> evaluate_deltas(KroneckerDelta(p,q)*f(p,q))\nf(_p, _p) \n```", "```py\n>>> evaluate_deltas(KroneckerDelta(i,p)*f(q))\nf(_q)*KroneckerDelta(_i, _p)\n>>> evaluate_deltas(KroneckerDelta(i,p)*f(i))\nf(_i)*KroneckerDelta(_i, _p) \n```", "```py\nsympy.physics.secondquant.matrix_rep(op, basis)\n```", "```py\n>>> from sympy.physics.secondquant import VarBosonicBasis, B, matrix_rep\n>>> b = VarBosonicBasis(5)\n>>> o = B(0)\n>>> matrix_rep(o, b)\nMatrix([\n[0, 1,       0,       0, 0],\n[0, 0, sqrt(2),       0, 0],\n[0, 0,       0, sqrt(3), 0],\n[0, 0,       0,       0, 2],\n[0, 0,       0,       0, 0]]) \n```", "```py\nsympy.physics.secondquant.simplify_index_permutations(expr, permutation_operators)\n```", "```py\n>>> from sympy import symbols, Function\n>>> from sympy.physics.secondquant import simplify_index_permutations\n>>> from sympy.physics.secondquant import PermutationOperator\n>>> p,q,r,s = symbols('p,q,r,s')\n>>> f = Function('f')\n>>> g = Function('g') \n```", "```py\n>>> expr = f(p)*g(q) - f(q)*g(p); expr\nf(p)*g(q) - f(q)*g(p)\n>>> simplify_index_permutations(expr,[PermutationOperator(p,q)])\nf(p)*g(q)*PermutationOperator(p, q) \n```", "```py\n>>> PermutList = [PermutationOperator(p,q),PermutationOperator(r,s)]\n>>> expr = f(p,r)*g(q,s) - f(q,r)*g(p,s) + f(q,s)*g(p,r) - f(p,s)*g(q,r)\n>>> simplify_index_permutations(expr,PermutList)\nf(p, r)*g(q, s)*PermutationOperator(p, q)*PermutationOperator(r, s) \n```", "```py\nsympy.physics.secondquant.substitute_dummies(expr, new_indices=False, pretty_indices={})\n```", "```py\n>>> from sympy import symbols, Function, Dummy\n>>> from sympy.physics.secondquant import substitute_dummies\n>>> a,b,c,d = symbols('a b c d', above_fermi=True, cls=Dummy)\n>>> i,j = symbols('i j', below_fermi=True, cls=Dummy)\n>>> f = Function('f') \n```", "```py\n>>> expr = f(a,b) + f(c,d); expr\nf(_a, _b) + f(_c, _d) \n```", "```py\n>>> substitute_dummies(expr)\n2*f(_a, _b) \n```", "```py\n>>> expr = f(a,b,i,j)\n>>> my_dummies = { 'above':'st', 'below':'uv' }\n>>> substitute_dummies(expr, new_indices=True, pretty_indices=my_dummies)\nf(_s, _t, _u, _v) \n```", "```py\n>>> p,q = symbols('p q', cls=Dummy)  # general indices\n>>> expr = f(p,q)\n>>> substitute_dummies(expr, new_indices=True, pretty_indices=my_dummies)\nf(_p_0, _p_1) \n```", "```py\nsympy.physics.secondquant.wicks(e, **kw_args)\n```", "```py\n>>> from sympy import symbols, Dummy\n>>> from sympy.physics.secondquant import wicks, F, Fd\n>>> p, q, r = symbols('p,q,r')\n>>> wicks(Fd(p)*F(q))\nKroneckerDelta(_i, q)*KroneckerDelta(p, q) + NO(CreateFermion(p)*AnnihilateFermion(q)) \n```", "```py\n>>> wicks(F(p)*(F(q)+F(r)))\nNO(AnnihilateFermion(p)*AnnihilateFermion(q)) + NO(AnnihilateFermion(p)*AnnihilateFermion(r)) \n```", "```py\n>>> p, q, r = symbols('p q r', cls=Dummy)\n>>> wicks(Fd(p)*(F(q)+F(r)), keep_only_fully_contracted=True)\nKroneckerDelta(_i, _q)*KroneckerDelta(_p, _q) + KroneckerDelta(_i, _r)*KroneckerDelta(_p, _r) \n```"]