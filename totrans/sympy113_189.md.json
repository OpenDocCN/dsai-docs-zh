["```py\nclass sympy.physics.mechanics.joint.Joint(name, parent, child, coordinates=None, speeds=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None, parent_axis=None, child_axis=None, parent_joint_pos=None, child_joint_pos=None)\n```", "```py\nproperty child\n```", "```py\nproperty child_axis\n```", "```py\nproperty child_point\n```", "```py\nproperty coordinates\n```", "```py\nproperty kdes\n```", "```py\nproperty name\n```", "```py\nproperty parent\n```", "```py\nproperty parent_axis\n```", "```py\nproperty parent_point\n```", "```py\nproperty speeds\n```", "```py\nclass sympy.physics.mechanics.joint.PinJoint(name, parent, child, coordinates=None, speeds=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None, parent_axis=None, child_axis=None, joint_axis=None, parent_joint_pos=None, child_joint_pos=None)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, PinJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = PinJoint('PC', parent, child)\n>>> joint\nPinJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.parent_axis\nP_frame.x\n>>> joint.child_axis\nC_frame.x\n>>> joint.coordinates\nMatrix([[q_PC(t)]])\n>>> joint.speeds\nMatrix([[u_PC(t)]])\n>>> child.frame.ang_vel_in(parent.frame)\nu_PC(t)*P_frame.x\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[1,             0,            0],\n[0,  cos(q_PC(t)), sin(q_PC(t))],\n[0, -sin(q_PC(t)), cos(q_PC(t))]])\n>>> joint.child_point.pos_from(joint.parent_point)\n0 \n```", "```py\n>>> from sympy import symbols, trigsimp\n>>> from sympy.physics.mechanics import RigidBody, PinJoint\n>>> l1, l2 = symbols('l1 l2') \n```", "```py\n>>> ceiling = RigidBody('C')\n>>> upper_bob = RigidBody('U')\n>>> lower_bob = RigidBody('L') \n```", "```py\n>>> ceiling_joint = PinJoint('P1', ceiling, upper_bob,\n... child_point=-l1*upper_bob.frame.x,\n... joint_axis=ceiling.frame.z) \n```", "```py\n>>> pendulum_joint = PinJoint('P2', upper_bob, lower_bob,\n... child_point=-l2*lower_bob.frame.x,\n... joint_axis=upper_bob.frame.z) \n```", "```py\n>>> upper_bob.frame.dcm(ceiling.frame)\nMatrix([\n[ cos(q_P1(t)), sin(q_P1(t)), 0],\n[-sin(q_P1(t)), cos(q_P1(t)), 0],\n[            0,            0, 1]])\n>>> trigsimp(lower_bob.frame.dcm(ceiling.frame))\nMatrix([\n[ cos(q_P1(t) + q_P2(t)), sin(q_P1(t) + q_P2(t)), 0],\n[-sin(q_P1(t) + q_P2(t)), cos(q_P1(t) + q_P2(t)), 0],\n[                      0,                      0, 1]]) \n```", "```py\n>>> lower_bob.masscenter.pos_from(ceiling.masscenter)\nl1*U_frame.x + l2*L_frame.x \n```", "```py\n>>> upper_bob.frame.ang_vel_in(ceiling.frame)\nu_P1(t)*C_frame.z\n>>> lower_bob.frame.ang_vel_in(ceiling.frame)\nu_P1(t)*C_frame.z + u_P2(t)*U_frame.z \n```", "```py\n>>> upper_bob.masscenter.vel(ceiling.frame)\nl1*u_P1(t)*U_frame.y\n>>> lower_bob.masscenter.vel(ceiling.frame)\nl1*u_P1(t)*U_frame.y + l2*(u_P1(t) + u_P2(t))*L_frame.y \n```", "```py\nproperty joint_axis\n```", "```py\nclass sympy.physics.mechanics.joint.PrismaticJoint(name, parent, child, coordinates=None, speeds=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None, parent_axis=None, child_axis=None, joint_axis=None, parent_joint_pos=None, child_joint_pos=None)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, PrismaticJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = PrismaticJoint('PC', parent, child)\n>>> joint\nPrismaticJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.parent_axis\nP_frame.x\n>>> joint.child_axis\nC_frame.x\n>>> joint.coordinates\nMatrix([[q_PC(t)]])\n>>> joint.speeds\nMatrix([[u_PC(t)]])\n>>> child.frame.ang_vel_in(parent.frame)\n0\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> joint.child_point.pos_from(joint.parent_point)\nq_PC(t)*P_frame.x \n```", "```py\n>>> from sympy.physics.mechanics import PrismaticJoint, RigidBody \n```", "```py\n>>> wall = RigidBody('W')\n>>> Part1 = RigidBody('P1')\n>>> Part2 = RigidBody('P2') \n```", "```py\n>>> J1 = PrismaticJoint('J1', wall, Part1) \n```", "```py\n>>> J2 = PrismaticJoint('J2', Part1, Part2) \n```", "```py\n>>> Part1.frame.dcm(wall.frame)\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]]) \n```", "```py\n>>> Part2.frame.dcm(wall.frame)\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]]) \n```", "```py\n>>> Part1.masscenter.pos_from(wall.masscenter)\nq_J1(t)*W_frame.x \n```", "```py\n>>> Part2.masscenter.pos_from(wall.masscenter)\nq_J1(t)*W_frame.x + q_J2(t)*P1_frame.x \n```", "```py\n>>> Part1.frame.ang_vel_in(wall.frame)\n0 \n```", "```py\n>>> Part2.frame.ang_vel_in(wall.frame)\n0 \n```", "```py\n>>> Part1.masscenter.vel(wall.frame)\nu_J1(t)*W_frame.x \n```", "```py\n>>> Part2.masscenter.vel(wall.frame)\nu_J1(t)*W_frame.x + Derivative(q_J2(t), t)*P1_frame.x \n```", "```py\nproperty joint_axis\n```", "```py\nclass sympy.physics.mechanics.joint.CylindricalJoint(name, parent, child, rotation_coordinate=None, translation_coordinate=None, rotation_speed=None, translation_speed=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None, joint_axis=None)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, CylindricalJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = CylindricalJoint('PC', parent, child)\n>>> joint\nCylindricalJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.parent_axis\nP_frame.x\n>>> joint.child_axis\nC_frame.x\n>>> joint.coordinates\nMatrix([\n[q0_PC(t)],\n[q1_PC(t)]])\n>>> joint.speeds\nMatrix([\n[u0_PC(t)],\n[u1_PC(t)]])\n>>> child.frame.ang_vel_in(parent.frame)\nu0_PC(t)*P_frame.x\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[1,              0,             0],\n[0,  cos(q0_PC(t)), sin(q0_PC(t))],\n[0, -sin(q0_PC(t)), cos(q0_PC(t))]])\n>>> joint.child_point.pos_from(joint.parent_point)\nq1_PC(t)*P_frame.x\n>>> child.masscenter.vel(parent.frame)\nu1_PC(t)*P_frame.x \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import RigidBody, CylindricalJoint\n>>> r, l, w = symbols('r l w') \n```", "```py\n>>> floor = RigidBody('floor')\n>>> tube = RigidBody('tube')\n>>> flag = RigidBody('flag') \n```", "```py\n>>> floor_joint = CylindricalJoint('C1', floor, tube, joint_axis=floor.z) \n```", "```py\n>>> flag_joint = CylindricalJoint('C2', tube, flag,\n...                               parent_point=r * tube.y,\n...                               child_point=-w * flag.y + l * flag.z,\n...                               joint_axis=tube.y) \n```", "```py\n>>> tube.frame.dcm(floor.frame)\nMatrix([\n[ cos(q0_C1(t)), sin(q0_C1(t)), 0],\n[-sin(q0_C1(t)), cos(q0_C1(t)), 0],\n[             0,             0, 1]])\n>>> flag.frame.dcm(floor.frame)\nMatrix([\n[cos(q0_C1(t))*cos(q0_C2(t)), sin(q0_C1(t))*cos(q0_C2(t)), -sin(q0_C2(t))],\n[             -sin(q0_C1(t)),               cos(q0_C1(t)),              0],\n[sin(q0_C2(t))*cos(q0_C1(t)), sin(q0_C1(t))*sin(q0_C2(t)),  cos(q0_C2(t))]]) \n```", "```py\n>>> flag.masscenter.pos_from(floor.masscenter)\nq1_C1(t)*floor_frame.z + (r + q1_C2(t))*tube_frame.y + w*flag_frame.y - l*flag_frame.z \n```", "```py\n>>> tube.frame.ang_vel_in(floor.frame)\nu0_C1(t)*floor_frame.z\n>>> flag.frame.ang_vel_in(floor.frame)\nu0_C1(t)*floor_frame.z + u0_C2(t)*tube_frame.y \n```", "```py\n>>> tube.masscenter.vel(floor.frame).to_matrix(tube.frame)\nMatrix([\n[       0],\n[       0],\n[u1_C1(t)]])\n>>> flag.masscenter.vel(floor.frame).to_matrix(tube.frame).simplify()\nMatrix([\n[-l*u0_C2(t)*cos(q0_C2(t)) - r*u0_C1(t) - w*u0_C1(t) - q1_C2(t)*u0_C1(t)],\n[                    -l*u0_C1(t)*sin(q0_C2(t)) + Derivative(q1_C2(t), t)],\n[                                    l*u0_C2(t)*sin(q0_C2(t)) + u1_C1(t)]]) \n```", "```py\nproperty joint_axis\n```", "```py\nproperty rotation_coordinate\n```", "```py\nproperty rotation_speed\n```", "```py\nproperty translation_coordinate\n```", "```py\nproperty translation_speed\n```", "```py\nclass sympy.physics.mechanics.joint.PlanarJoint(name, parent, child, rotation_coordinate=None, planar_coordinates=None, rotation_speed=None, planar_speeds=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, PlanarJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = PlanarJoint('PC', parent, child)\n>>> joint\nPlanarJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.rotation_axis\nP_frame.x\n>>> joint.planar_vectors\n[P_frame.y, P_frame.z]\n>>> joint.rotation_coordinate\nq0_PC(t)\n>>> joint.planar_coordinates\nMatrix([\n[q1_PC(t)],\n[q2_PC(t)]])\n>>> joint.coordinates\nMatrix([\n[q0_PC(t)],\n[q1_PC(t)],\n[q2_PC(t)]])\n>>> joint.rotation_speed\nu0_PC(t)\n>>> joint.planar_speeds\nMatrix([\n[u1_PC(t)],\n[u2_PC(t)]])\n>>> joint.speeds\nMatrix([\n[u0_PC(t)],\n[u1_PC(t)],\n[u2_PC(t)]])\n>>> child.frame.ang_vel_in(parent.frame)\nu0_PC(t)*P_frame.x\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[1,              0,             0],\n[0,  cos(q0_PC(t)), sin(q0_PC(t))],\n[0, -sin(q0_PC(t)), cos(q0_PC(t))]])\n>>> joint.child_point.pos_from(joint.parent_point)\nq1_PC(t)*P_frame.y + q2_PC(t)*P_frame.z\n>>> child.masscenter.vel(parent.frame)\nu1_PC(t)*P_frame.y + u2_PC(t)*P_frame.z \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import PlanarJoint, RigidBody, ReferenceFrame\n>>> a, d, h = symbols('a d h') \n```", "```py\n>>> ground = RigidBody('G')\n>>> block = RigidBody('B') \n```", "```py\n>>> slope = ReferenceFrame('A')\n>>> slope.orient_axis(ground.frame, ground.y, a) \n```", "```py\n>>> joint = PlanarJoint('PC', ground, block, parent_point=d * ground.x,\n...                     child_point=-h * block.x, parent_interframe=slope) \n```", "```py\n>>> joint.rotation_axis\nA.x\n>>> joint.planar_vectors\n[A.y, A.z] \n```", "```py\n>>> block.frame.dcm(ground.frame)\nMatrix([\n[              cos(a),              0,              -sin(a)],\n[sin(a)*sin(q0_PC(t)),  cos(q0_PC(t)), sin(q0_PC(t))*cos(a)],\n[sin(a)*cos(q0_PC(t)), -sin(q0_PC(t)), cos(a)*cos(q0_PC(t))]]) \n```", "```py\n>>> block.frame.ang_vel_in(ground.frame)\nu0_PC(t)*A.x \n```", "```py\n>>> block.masscenter.pos_from(ground.masscenter)\nd*G_frame.x + h*B_frame.x + q1_PC(t)*A.y + q2_PC(t)*A.z \n```", "```py\n>>> block.masscenter.vel(ground.frame)\nu1_PC(t)*A.y + u2_PC(t)*A.z \n```", "```py\n>>> from sympy import symbols, cos, sin\n>>> from sympy.physics.mechanics import PlanarJoint, RigidBody\n>>> a, d, h = symbols('a d h')\n>>> ground = RigidBody('G')\n>>> block = RigidBody('B')\n>>> joint = PlanarJoint(\n...     'PC', ground, block, parent_point=d * ground.x,\n...     child_point=-h * block.x, child_interframe=block.x,\n...     parent_interframe=cos(a) * ground.x + sin(a) * ground.z)\n>>> block.frame.dcm(ground.frame).simplify()\nMatrix([\n[               cos(a),              0,               sin(a)],\n[-sin(a)*sin(q0_PC(t)),  cos(q0_PC(t)), sin(q0_PC(t))*cos(a)],\n[-sin(a)*cos(q0_PC(t)), -sin(q0_PC(t)), cos(a)*cos(q0_PC(t))]]) \n```", "```py\nproperty planar_coordinates\n```", "```py\nproperty planar_speeds\n```", "```py\nproperty planar_vectors\n```", "```py\nproperty rotation_axis\n```", "```py\nproperty rotation_coordinate\n```", "```py\nproperty rotation_speed\n```", "```py\nclass sympy.physics.mechanics.joint.SphericalJoint(name, parent, child, coordinates=None, speeds=None, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None, rot_type='BODY', amounts=None, rot_order=123)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, SphericalJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = SphericalJoint('PC', parent, child)\n>>> joint\nSphericalJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.parent_interframe\nP_frame\n>>> joint.child_interframe\nC_frame\n>>> joint.coordinates\nMatrix([\n[q0_PC(t)],\n[q1_PC(t)],\n[q2_PC(t)]])\n>>> joint.speeds\nMatrix([\n[u0_PC(t)],\n[u1_PC(t)],\n[u2_PC(t)]])\n>>> child.frame.ang_vel_in(parent.frame).to_matrix(child.frame)\nMatrix([\n[ u0_PC(t)*cos(q1_PC(t))*cos(q2_PC(t)) + u1_PC(t)*sin(q2_PC(t))],\n[-u0_PC(t)*sin(q2_PC(t))*cos(q1_PC(t)) + u1_PC(t)*cos(q2_PC(t))],\n[                             u0_PC(t)*sin(q1_PC(t)) + u2_PC(t)]])\n>>> child.frame.x.to_matrix(parent.frame)\nMatrix([\n[                                            cos(q1_PC(t))*cos(q2_PC(t))],\n[sin(q0_PC(t))*sin(q1_PC(t))*cos(q2_PC(t)) + sin(q2_PC(t))*cos(q0_PC(t))],\n[sin(q0_PC(t))*sin(q2_PC(t)) - sin(q1_PC(t))*cos(q0_PC(t))*cos(q2_PC(t))]])\n>>> joint.child_point.pos_from(joint.parent_point)\n0 \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import RigidBody, SphericalJoint\n>>> l1 = symbols('l1') \n```", "```py\n>>> floor = RigidBody('F')\n>>> bob = RigidBody('B') \n```", "```py\n>>> joint = SphericalJoint('S', floor, bob, child_point=l1 * bob.y,\n...                        rot_type='body', rot_order='ZXZ') \n```", "```py\n>>> bob.masscenter.pos_from(floor.masscenter)\n- l1*B_frame.y \n```", "```py\n>>> bob.frame.ang_vel_in(floor.frame).to_matrix(\n...     floor.frame).simplify()\nMatrix([\n[u1_S(t)*cos(q0_S(t)) + u2_S(t)*sin(q0_S(t))*sin(q1_S(t))],\n[u1_S(t)*sin(q0_S(t)) - u2_S(t)*sin(q1_S(t))*cos(q0_S(t))],\n[                          u0_S(t) + u2_S(t)*cos(q1_S(t))]]) \n```", "```py\n>>> bob.masscenter.vel(floor.frame).to_matrix(bob.frame)\nMatrix([\n[                           l1*(u0_S(t)*cos(q1_S(t)) + u2_S(t))],\n[                                                             0],\n[-l1*(u0_S(t)*sin(q1_S(t))*sin(q2_S(t)) + u1_S(t)*cos(q2_S(t)))]]) \n```", "```py\nclass sympy.physics.mechanics.joint.WeldJoint(name, parent, child, parent_point=None, child_point=None, parent_interframe=None, child_interframe=None)\n```", "```py\n>>> from sympy.physics.mechanics import RigidBody, WeldJoint\n>>> parent = RigidBody('P')\n>>> parent\nP\n>>> child = RigidBody('C')\n>>> child\nC\n>>> joint = WeldJoint('PC', parent, child)\n>>> joint\nWeldJoint: PC  parent: P  child: C\n>>> joint.name\n'PC'\n>>> joint.parent\nP\n>>> joint.child\nC\n>>> joint.parent_point\nP_masscenter\n>>> joint.child_point\nC_masscenter\n>>> joint.coordinates\nMatrix(0, 0, [])\n>>> joint.speeds\nMatrix(0, 0, [])\n>>> child.frame.ang_vel_in(parent.frame)\n0\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> joint.child_point.pos_from(joint.parent_point)\n0 \n```", "```py\n>>> from sympy import symbols, pi\n>>> from sympy.physics.mechanics import ReferenceFrame, RigidBody, WeldJoint\n>>> l1, l2 = symbols('l1 l2') \n```", "```py\n>>> parent = RigidBody('P')\n>>> child = RigidBody('C') \n```", "```py\n>>> rotated_frame = ReferenceFrame('Pr')\n>>> rotated_frame.orient_axis(parent.frame, parent.y, pi / 2) \n```", "```py\n>>> weld = WeldJoint('weld', parent, child, parent_point=l1 * parent.x,\n...                  child_point=-l2 * child.x,\n...                  parent_interframe=rotated_frame) \n```", "```py\n>>> child.frame.dcm(parent.frame)\nMatrix([\n[0, 0, -1],\n[0, 1,  0],\n[1, 0,  0]]) \n```", "```py\n>>> child.masscenter.pos_from(parent.masscenter)\nl1*P_frame.x + l2*C_frame.x \n```", "```py\n>>> child.frame.ang_vel_in(parent.frame)\n0 \n```"]