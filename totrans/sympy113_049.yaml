- en: Assumptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设
- en: Original text：[https://docs.sympy.org/latest/modules/assumptions/index.html](https://docs.sympy.org/latest/modules/assumptions/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/assumptions/index.html](https://docs.sympy.org/latest/modules/assumptions/index.html)
- en: A module to implement logical predicates and assumption system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块用于实现逻辑谓词和假设系统。
- en: Predicate
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谓词
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Base class for mathematical predicates. It also serves as a constructor for
    undefined predicate objects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数学谓词的基类。它还充当未定义谓词对象的构造函数。
- en: Explanation
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Predicate is a function that returns a boolean value [1].
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词是返回布尔值的函数[1]。
- en: Predicate function is object, and it is instance of predicate class. When a
    predicate is applied to arguments, `AppliedPredicate` instance is returned. This
    merely wraps the argument and remain unevaluated. To obtain the truth value of
    applied predicate, use the function `ask`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词函数是对象，并且是谓词类的实例。当谓词应用于参数时，返回`AppliedPredicate`实例。这仅包装参数并保持未评估状态。要获取应用谓词的真值，请使用函数`ask`。
- en: Evaluation of predicate is done by multiple dispatching. You can register new
    handler to the predicate to support new types.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词的评估通过多重分派完成。您可以注册新的处理程序到谓词以支持新类型。
- en: Every predicate in SymPy can be accessed via the property of `Q`. For example,
    `Q.even` returns the predicate which checks if the argument is even number.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy中的每个谓词都可以通过`Q`的属性访问。例如，`Q.even`返回检查参数是否为偶数的谓词。
- en: To define a predicate which can be evaluated, you must subclass this class,
    make an instance of it, and register it to `Q`. After then, dispatch the handler
    by argument types.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个可评估的谓词，必须子类化此类，创建其实例，并将其注册到`Q`。之后，通过参数类型分派处理程序。
- en: If you directly construct predicate using this class, you will get `UndefinedPredicate`
    which cannot be dispatched. This is useful when you are building boolean expressions
    which do not need to be evaluated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果直接使用此类构造谓词，则将获得不能分派的`UndefinedPredicate`。这在构建不需要评估的布尔表达式时很有用。
- en: Examples
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Applying and evaluating to boolean value:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用和评估布尔值：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can define a new predicate by subclassing and dispatching. Here, we define
    a predicate for sexy primes [2] as an example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过子类化和分派来定义新的谓词。这里，我们以性质素数[2]为例定义一个谓词。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Direct constructing returns `UndefinedPredicate`, which can be applied but cannot
    be dispatched.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 直接构造返回`UndefinedPredicate`，可以应用但不能分派。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: References
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R7](#id1)]'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R7](#id1)]'
- en: '[https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29](https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zh.wikipedia.org/wiki/%E8%B0%93%E8%AF%8D](https://zh.wikipedia.org/wiki/%E8%B0%93%E8%AF%8D)'
- en: '[[R8](#id2)]'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R8](#id2)]'
- en: '[https://en.wikipedia.org/wiki/Sexy_prime](https://en.wikipedia.org/wiki/Sexy_prime)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zh.wikipedia.org/wiki/%E5%AF%86%E5%88%A9%E5%A5%87%E8%B0%93](https://zh.wikipedia.org/wiki/%E5%AF%86%E5%88%A9%E5%A5%87%E8%B0%93)'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Evaluate `self(*args)` under the given assumptions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定假设下评估`self(*args)`。
- en: This uses only direct resolution methods, not logical inference.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅使用直接解决方法，不使用逻辑推理。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Register the signature to the handler.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注册签名到处理程序。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Register multiple signatures to same handler.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 向同一处理程序注册多个签名。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The class of expressions resulting from applying `Predicate` to the arguments.
    `AppliedPredicate` merely wraps its argument and remain unevaluated. To evaluate
    it, use the `ask()` function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Predicate`应用于参数所产生的表达式类。`AppliedPredicate`仅仅包装其参数并保持未评估状态。要评估它，请使用`ask()`函数。
- en: Examples
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `function` attribute returns the predicate, and the `arguments` attribute
    returns the tuple of arguments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`function`属性返回谓词，`arguments`属性返回参数元组。'
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Applied predicates can be evaluated to a boolean value with `ask`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ask`将应用的谓词评估为布尔值：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return the expression used by this assumption.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此假设所用的表达式。
- en: Examples
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Return the arguments which are applied to the predicate.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用于谓词的参数。
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return the predicate.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 返回谓词。
- en: Querying
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询
- en: 'Queries are used to ask information about expressions. Main method for this
    is `ask()`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 查询用于询问关于表达式的信息。这的主要方法是`ask()`：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Function to evaluate the proposition with assumptions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用假设评估命题的函数。
- en: 'Parameters:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**proposition** : Boolean'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**命题**：布尔值'
- en: Proposition which will be evaluated to boolean value. If this is not `AppliedPredicate`,
    it will be wrapped by `Q.is_true`.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将评估为布尔值的命题。如果不是`AppliedPredicate`，它将被`Q.is_true`包装。
- en: '**assumptions** : Boolean, optional'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设**：布尔值，可选'
- en: Local assumptions to evaluate the *proposition*.
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 评估*命题*的局部假设。
- en: '**context** : AssumptionsContext, optional'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**context**：AssumptionsContext，可选'
- en: Default assumptions to evaluate the *proposition*. By default, this is `sympy.assumptions.global_assumptions`
    variable.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认假设用于评估*proposition*。默认情况下，这是`sympy.assumptions.global_assumptions`变量。
- en: 'Returns:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '`True`, `False`, or `None`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`True`、`False`或`None`'
- en: 'Raises:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'Raises:'
- en: '**TypeError** : *proposition* or *assumptions* is not valid logical expression.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**TypeError**：*proposition*或*assumptions*不是有效的逻辑表达式。'
- en: '**ValueError** : assumptions are inconsistent.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**ValueError**：假设不一致。'
- en: Explanation
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This function evaluates the proposition to `True` or `False` if the truth value
    can be determined. If not, it returns `None`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以确定真值，则此函数将评估*proposition*为`True`或`False`。否则，它将返回`None`。
- en: It should be discerned from [`refine()`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine") which, when applied to a proposition, simplifies
    the argument to symbolic `Boolean` instead of Python built-in `True`, `False`
    or `None`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该从[`refine()`](refine.html#sympy.assumptions.refine.refine "sympy.assumptions.refine.refine")中区分出来，当应用于*proposition*时，简化参数为符号`Boolean`而不是Python内置的`True`、`False`或`None`。
- en: '**Syntax**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法**'
- en: ask(proposition)
  id: totrans-69
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ask(proposition)
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* in global assumption context.
  id: totrans-75
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在全局假设上下文中评估*proposition*。
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ask(proposition, assumptions)
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ask(proposition, assumptions)
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* with respect to *assumptions* in global assumption
    context.
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在全局假设上下文中，根据*assumptions*评估*proposition*。
- en: Examples
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the truth value cannot be determined, `None` will be returned.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法确定真值，则返回`None`。
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`ValueError` is raised if assumptions are inconsistent.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果假设不一致，则引发`ValueError`。
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notes
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Relations in assumptions are not implemented (yet), so the following will not
    give a meaningful result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设关系尚未实现（但），因此以下内容将不会给出有意义的结果。
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It is however a work in progress.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这还在进展中。
- en: See also
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.assumptions.refine.refine`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine")'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.assumptions.refine.refine`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine")'
- en: Simplification using assumptions. Proposition is not reduced to `None` if the
    truth value cannot be determined.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用假设简化。如果无法确定真值，则*proposition*不会简化为`None`。
- en: '`ask`’s optional second argument should be a boolean expression involving assumptions
    about objects in *expr*. Valid values include:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask`的第二个可选参数应为涉及*expr*中对象假设的布尔表达式。有效值包括：'
- en: '`Q.integer(x)`'
  id: totrans-101
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Q.integer(x)`'
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Q.positive(x)`'
  id: totrans-104
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Q.positive(x)`'
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Q.integer(x) & Q.positive(x)`'
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Q.integer(x) & Q.positive(x)`'
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: etc.
  id: totrans-110
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: '`Q` is an object holding known predicates.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q`是一个持有已知谓词的对象。'
- en: See documentation for the logic module for a complete list of valid boolean
    expressions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有关逻辑模块的文档，请参阅完整的有效布尔表达式列表。
- en: You can also define a context so you don’t have to pass that argument each time
    to function `ask()`. This is done by using the assuming context manager from module
    sympy.assumptions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以定义上下文，这样您就不必每次都将该参数传递给函数`ask()`。这可以通过使用模块`sympy.assumptions`中的假设上下文管理器来完成。
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Contents
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: '[Ask](ask.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[询问](ask.html)'
- en: '[Assume](assume.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[假设](assume.html)'
- en: '[Refine](refine.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[精化](refine.html)'
- en: '[Predicates](predicates.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[谓词](predicates.html)'
- en: Performance improvements
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进
- en: On queries that involve symbolic coefficients, logical inference is used. Work
    on improving satisfiable function (sympy.logic.inference.satisfiable) should result
    in notable speed improvements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及符号系数的查询中，使用逻辑推理。致力于改进可满足功能（sympy.logic.inference.satisfiable）应导致显著的速度改进。
- en: Logic inference used in one ask could be used to speed up further queries, and
    current system does not take advantage of this. For example, a truth maintenance
    system ([https://en.wikipedia.org/wiki/Truth_maintenance_system](https://en.wikipedia.org/wiki/Truth_maintenance_system))
    could be implemented.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ask中使用的逻辑推理可以用来加快进一步查询的速度，但当前系统未利用这一点。例如，可以实现真值维护系统（[https://en.wikipedia.org/wiki/Truth_maintenance_system](https://en.wikipedia.org/wiki/Truth_maintenance_system)）。
- en: Misc
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项
- en: You can find more examples in the form of tests in the directory `sympy/assumptions/tests/`
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在目录`sympy/assumptions/tests/`中找到更多示例。
