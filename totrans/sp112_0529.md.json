["```py\nscipy.signal.lfilter(b, a, x, axis=-1, zi=None)\n```", "```py\na[0]*y[n] = b[0]*x[n] + b[1]*x[n-1] + ... + b[M]*x[n-M]\n                      - a[1]*y[n-1] - ... - a[N]*y[n-N] \n```", "```py\na[0]*y[n] = b[0] * x[n]               + d[0][n-1]\n  d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]\n  d[1][n] = b[2] * x[n] - a[2] * y[n] + d[2][n-1]\n...\nd[N-2][n] = b[N-1]*x[n] - a[N-1]*y[n] + d[N-1][n-1]\nd[N-1][n] = b[N] * x[n] - a[N] * y[n] \n```", "```py\n -1              -M\n        b[0] + b[1]z  + ... + b[M] z\nY(z) = -------------------------------- X(z)\n                    -1              -N\n        a[0] + a[1]z  + ... + a[N] z \n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng()\n>>> t = np.linspace(-1, 1, 201)\n>>> x = (np.sin(2*np.pi*0.75*t*(1-t) + 2.1) +\n...      0.1*np.sin(2*np.pi*1.25*t + 1) +\n...      0.18*np.cos(2*np.pi*3.85*t))\n>>> xn = x + rng.standard_normal(len(t)) * 0.08 \n```", "```py\n>>> b, a = signal.butter(3, 0.05) \n```", "```py\n>>> zi = signal.lfilter_zi(b, a)\n>>> z, _ = signal.lfilter(b, a, xn, zi=zi*xn[0]) \n```", "```py\n>>> z2, _ = signal.lfilter(b, a, z, zi=zi*z[0]) \n```", "```py\n>>> y = signal.filtfilt(b, a, xn) \n```", "```py\n>>> plt.figure\n>>> plt.plot(t, xn, 'b', alpha=0.75)\n>>> plt.plot(t, z, 'r--', t, z2, 'r', t, y, 'k')\n>>> plt.legend(('noisy signal', 'lfilter, once', 'lfilter, twice',\n...             'filtfilt'), loc='best')\n>>> plt.grid(True)\n>>> plt.show() \n```"]