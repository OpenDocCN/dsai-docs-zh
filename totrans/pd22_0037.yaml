- en: Nullable integer data type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/integer_na.html](https://pandas.pydata.org/docs/user_guide/integer_na.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IntegerArray is currently experimental. Its API or implementation may change
    without warning. Uses [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") as the missing value.
  prefs: []
  type: TYPE_NORMAL
- en: In [Working with missing data](missing_data.html#missing-data), we saw that
    pandas primarily uses `NaN` to represent missing data. Because `NaN` is a float,
    this forces an array of integers with any missing values to become floating point.
    In some cases, this may not matter much. But if your integer column is, say, an
    identifier, casting to float can be problematic. Some integers cannot even be
    represented as floating point numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Construction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can represent integer data with possibly missing values using [`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray"). This is an [extension type](../development/extending.html#extending-extension-types)
    implemented within pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the string alias `"Int64"` (note the capital `"I"`) to differentiate from
    NumPy’s `''int64''` dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All NA-like values are replaced with [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This array can be stored in a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") like any NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can also pass the list-like object to the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") constructor with the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Currently [`pandas.array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") and [`pandas.Series()`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") use different rules for dtype inference. [`pandas.array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") will infer a nullable-integer dtype
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For backwards-compatibility, [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") infers these as either integer or float dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We recommend explicitly providing the dtype to avoid confusion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the future, we may provide an option for [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to infer a nullable-integer dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations involving an integer array will behave similar to NumPy arrays. Missing
    values will be propagated, and the data will be coerced to another dtype if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can operate as part of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can be merged, reshaped & casted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Reduction and groupby operations such as [`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") work as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Scalar NA Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") uses [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") as its scalar missing value. Slicing a single element that’s missing
    will return [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Construction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can represent integer data with possibly missing values using [`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray"). This is an [extension type](../development/extending.html#extending-extension-types)
    implemented within pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the string alias `"Int64"` (note the capital `"I"`) to differentiate from
    NumPy’s `''int64''` dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: All NA-like values are replaced with [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This array can be stored in a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") like any NumPy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can also pass the list-like object to the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") constructor with the dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Currently [`pandas.array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") and [`pandas.Series()`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") use different rules for dtype inference. [`pandas.array()`](../reference/api/pandas.array.html#pandas.array
    "pandas.array") will infer a nullable-integer dtype
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For backwards-compatibility, [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") infers these as either integer or float dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We recommend explicitly providing the dtype to avoid confusion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the future, we may provide an option for [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to infer a nullable-integer dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations involving an integer array will behave similar to NumPy arrays. Missing
    values will be propagated, and the data will be coerced to another dtype if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can operate as part of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These dtypes can be merged, reshaped & casted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Reduction and groupby operations such as [`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum") work as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Scalar NA Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") uses [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") as its scalar missing value. Slicing a single element that’s missing
    will return [`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
