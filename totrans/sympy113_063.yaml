- en: Named Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/named_groups.html](https://docs.sympy.org/latest/modules/combinatorics/named_groups.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generates the symmetric group on `n` elements as a permutation group.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The generators taken are the `n`-cycle `(0 1 2 ... n-1)` and the transposition
    `(0 1)` (in cycle notation). (See [1]). After the group is generated, some of
    its basic properties are set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`CyclicGroup`](#sympy.combinatorics.named_groups.CyclicGroup "sympy.combinatorics.named_groups.CyclicGroup"),
    [`DihedralGroup`](#sympy.combinatorics.named_groups.DihedralGroup "sympy.combinatorics.named_groups.DihedralGroup"),
    [`AlternatingGroup`](#sympy.combinatorics.named_groups.AlternatingGroup "sympy.combinatorics.named_groups.AlternatingGroup")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R57](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Symmetric_group#Generators_and_relations](https://en.wikipedia.org/wiki/Symmetric_group#Generators_and_relations)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Generates the cyclic group of order `n` as a permutation group.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The generator taken is the `n`-cycle `(0 1 2 ... n-1)` (in cycle notation).
    After the group is generated, some of its basic properties are set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SymmetricGroup`](#sympy.combinatorics.named_groups.SymmetricGroup "sympy.combinatorics.named_groups.SymmetricGroup"),
    [`DihedralGroup`](#sympy.combinatorics.named_groups.DihedralGroup "sympy.combinatorics.named_groups.DihedralGroup"),
    [`AlternatingGroup`](#sympy.combinatorics.named_groups.AlternatingGroup "sympy.combinatorics.named_groups.AlternatingGroup")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Generates the dihedral group \(D_n\) as a permutation group.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The dihedral group \(D_n\) is the group of symmetries of the regular `n`-gon.
    The generators taken are the `n`-cycle `a = (0 1 2 ... n-1)` (a rotation of the
    `n`-gon) and `b = (0 n-1)(1 n-2)...` (a reflection of the `n`-gon) in cycle rotation.
    It is easy to see that these satisfy `a**n = b**2 = 1` and `bab = ~a` so they
    indeed generate \(D_n\) (See [1]). After the group is generated, some of its basic
    properties are set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SymmetricGroup`](#sympy.combinatorics.named_groups.SymmetricGroup "sympy.combinatorics.named_groups.SymmetricGroup"),
    [`CyclicGroup`](#sympy.combinatorics.named_groups.CyclicGroup "sympy.combinatorics.named_groups.CyclicGroup"),
    [`AlternatingGroup`](#sympy.combinatorics.named_groups.AlternatingGroup "sympy.combinatorics.named_groups.AlternatingGroup")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R58](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dihedral_group](https://en.wikipedia.org/wiki/Dihedral_group)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Generates the alternating group on `n` elements as a permutation group.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For `n > 2`, the generators taken are `(0 1 2), (0 1 2 ... n-1)` for `n` odd
    and `(0 1 2), (1 2 ... n-1)` for `n` even (See [1], p.31, ex.6.9.). After the
    group is generated, some of its basic properties are set. The cases `n = 1, 2`
    are handled separately.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SymmetricGroup`](#sympy.combinatorics.named_groups.SymmetricGroup "sympy.combinatorics.named_groups.SymmetricGroup"),
    [`CyclicGroup`](#sympy.combinatorics.named_groups.CyclicGroup "sympy.combinatorics.named_groups.CyclicGroup"),
    [`DihedralGroup`](#sympy.combinatorics.named_groups.DihedralGroup "sympy.combinatorics.named_groups.DihedralGroup")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R59](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Armstrong, M. “Groups and Symmetry”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the direct product of cyclic groups with the given orders.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: According to the structure theorem for finite abelian groups ([1]), every finite
    abelian group can be written as the direct product of finitely many cyclic groups.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DirectProduct`](group_constructs.html#sympy.combinatorics.group_constructs.DirectProduct
    "sympy.combinatorics.group_constructs.DirectProduct")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R60](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://groupprops.subwiki.org/wiki/Structure_theorem_for_finitely_generated_abelian_groups](https://groupprops.subwiki.org/wiki/Structure_theorem_for_finitely_generated_abelian_groups)'
  prefs: []
  type: TYPE_NORMAL
