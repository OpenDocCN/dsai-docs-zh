- en: distutils.misc_util
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/distutils/misc_util.html](https://numpy.org/doc/1.26/reference/distutils/misc_util.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return True if all items in lst are string objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Convert a /-separated pathname to one using the OS’s path separator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Convert a path from Cygwin-native to Windows-native.
  prefs: []
  type: TYPE_NORMAL
- en: Uses the cygpath utility (part of the Base install) to do the actual conversion.
    Falls back to returning the original path if this fails.
  prefs: []
  type: TYPE_NORMAL
- en: Handles the default `/cygdrive` mount prefix as well as the `/proc/cygdrive`
    portable prefix, custom cygdrive prefixes such as `/` or `/mnt`, and absolute
    paths such as `/usr/src/` or `/home/username`
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path**str'
  prefs: []
  type: TYPE_NORMAL
- en: The path to convert
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**converted_path**str'
  prefs: []
  type: TYPE_NORMAL
- en: The converted path
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation for cygpath utility: [https://cygwin.com/cygwin-ug-net/cygpath.html](https://cygwin.com/cygwin-ug-net/cygpath.html)
    Documentation for the C function it wraps: [https://cygwin.com/cygwin-api/func-cygwin-conv-path.html](https://cygwin.com/cygwin-api/func-cygwin-conv-path.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Return a configuration dictionary for usage in configuration() function defined
    in file setup_<name>.py.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Use importlib machinery to import a module *modname* from the file *modfile*.
    Depending on the *spec.loader*, the module may not be registered in sys.modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return four lists of filenames containing C, C++, Fortran, and Fortran 90 module
    sources, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Generate config.py file containing system_info information used during building
    the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: config[‘py_modules’].append((packagename, ‘__config__’,generate_config_py))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return frame object from call stack with given level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Return an info dict for a given C library.
  prefs: []
  type: TYPE_NORMAL
- en: The info dict contains the necessary options to use the C library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pkgname**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the package (should match the name of the .ini file, without the extension,
    e.g. foo for the file foo.ini).
  prefs: []
  type: TYPE_NORMAL
- en: '**dirs**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If given, should be a sequence of additional directories where to look for npy-pkg-config
    files. Those directories are searched prior to the NumPy directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**info**dict'
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary with build information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: PkgNotFound
  prefs: []
  type: TYPE_NORMAL
- en: If the package is not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Configuration.add_npy_pkg_config`](../distutils.html#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`Configuration.add_installed_library`](../distutils.html#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_pkg_info`](#numpy.distutils.misc_util.get_pkg_info "numpy.distutils.misc_util.get_pkg_info")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the necessary information for the npymath library from NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This info dict can then be used as input to a [`Configuration`](../distutils.html#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Determine language value (c,f77,f90) from sources
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Return the MATHLIB line from numpyconfig.h
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Get number of parallel build jobs set by the –parallel command line argument
    of setup.py If the command did not receive a setting the environment variable
    NPY_NUM_BUILD_JOBS is checked. If that is unset, return the number of processors
    on the system, with a maximum of 8 (to prevent overloading the system if there
    a lot of CPUs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**int'
  prefs: []
  type: TYPE_NORMAL
- en: number of parallel jobs that can be run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Return library info for the given package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pkgname**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the package (should match the name of the .ini file, without the extension,
    e.g. foo for the file foo.ini).
  prefs: []
  type: TYPE_NORMAL
- en: '**dirs**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If given, should be a sequence of additional directories where to look for npy-pkg-config
    files. Those directories are searched prior to the NumPy directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pkginfo**class instance'
  prefs: []
  type: TYPE_NORMAL
- en: The *LibraryInfo* instance containing the build information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: PkgNotFound
  prefs: []
  type: TYPE_NORMAL
- en: If the package is not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Configuration.add_npy_pkg_config`](../distutils.html#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`Configuration.add_installed_library`](../distutils.html#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_info`](#numpy.distutils.misc_util.get_info "numpy.distutils.misc_util.get_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Apply glob to paths and prepend local_path if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Return True if sources contains C++ files
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Return True if sources contains Fortran files
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Return true if directory is local directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Return true when using mingw32 environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Resolve *and ‘.’ from path.*
  prefs: []
  type: TYPE_NORMAL
- en: '*[PRE38]'
  prefs: []
  type: TYPE_NORMAL
- en: Join two or more pathname components + - convert a /-separated pathname to one
    using the OS’s path separator. - resolve *and *from path.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Either passing n arguments as in njoin(‘a’,’b’), or a sequence of n names
    as in njoin([‘a’,’b’]) is handled, or a mixture of such arguments.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[PRE39]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Some flags are valid for C but not C++. Prune them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]***'
  prefs: []
  type: TYPE_NORMAL
