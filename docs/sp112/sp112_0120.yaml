- en: scipy.fftpack.fft
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.fftpack.fft
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return discrete Fourier transform of real or complex sequence.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回实序列或复序列的离散傅里叶变换。
- en: The returned complex array contains `y(0), y(1),..., y(n-1)`, where
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的复数数组包含`y(0), y(1),..., y(n-1)`，其中
- en: '`y(j) = (x * exp(-2*pi*sqrt(-1)*j*np.arange(n)/n)).sum()`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`y(j) = (x * exp(-2*pi*sqrt(-1)*j*np.arange(n)/n)).sum()`.'
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**x**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**类数组'
- en: Array to Fourier transform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要傅里叶变换的数组。
- en: '**n**int, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**整数，可选'
- en: Length of the Fourier transform. If `n < x.shape[axis]`, *x* is truncated. If
    `n > x.shape[axis]`, *x* is zero-padded. The default results in `n = x.shape[axis]`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换的长度。如果`n < x.shape[axis]`，则截断*x*。如果`n > x.shape[axis]`，则对*x*进行零填充。默认结果为`n
    = x.shape[axis]`。
- en: '**axis**int, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**整数，可选'
- en: Axis along which the fft’s are computed; the default is over the last axis (i.e.,
    `axis=-1`).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算FFT的轴；默认值为最后一个轴（即，`axis=-1`）。
- en: '**overwrite_x**bool, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**overwrite_x**布尔，可选'
- en: If True, the contents of *x* can be destroyed; the default is False.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则*x*的内容可以被破坏；默认值为False。
- en: 'Returns:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**z**complex ndarray'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**z**复数ndarray'
- en: 'with the elements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 元素为：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'where:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ifft`](scipy.fftpack.ifft.html#scipy.fftpack.ifft "scipy.fftpack.ifft")'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ifft`](https://scipy.fftpack.ifft.html#scipy.fftpack.ifft "scipy.fftpack.ifft")'
- en: Inverse FFT
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 逆FFT
- en: '[`rfft`](scipy.fftpack.rfft.html#scipy.fftpack.rfft "scipy.fftpack.rfft")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rfft`](https://scipy.fftpack.rfft.html#scipy.fftpack.rfft "scipy.fftpack.rfft")'
- en: FFT of a real sequence
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实序列的FFT
- en: Notes
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'The packing of the result is “standard”: If `A = fft(a, n)`, then `A[0]` contains
    the zero-frequency term, `A[1:n/2]` contains the positive-frequency terms, and
    `A[n/2:]` contains the negative-frequency terms, in order of decreasingly negative
    frequency. So ,for an 8-point transform, the frequencies of the result are [0,
    1, 2, 3, -4, -3, -2, -1]. To rearrange the fft output so that the zero-frequency
    component is centered, like [-4, -3, -2, -1, 0, 1, 2, 3], use [`fftshift`](scipy.fftpack.fftshift.html#scipy.fftpack.fftshift
    "scipy.fftpack.fftshift").'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的打包是“标准”的：如果`A = fft(a, n)`，那么`A[0]`包含零频率项，`A[1:n/2]`包含正频率项，`A[n/2:]`按照递减负频率的顺序包含负频率项。因此，对于8点变换，结果的频率为[0,
    1, 2, 3, -4, -3, -2, -1]。要重新排列fft输出以使零频率分量居中，如[-4, -3, -2, -1, 0, 1, 2, 3]，请使用[`fftshift`](https://scipy.fftpack.fftshift.html#scipy.fftpack.fftshift
    "scipy.fftpack.fftshift")。
- en: Both single and double precision routines are implemented. Half precision inputs
    will be converted to single precision. Non-floating-point inputs will be converted
    to double precision. Long-double precision inputs are not supported.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了单精度和双精度例程。将半精度输入转换为单精度。非浮点输入将转换为双精度。不支持长双精度输入。
- en: This function is most efficient when *n* is a power of two, and least efficient
    when *n* is prime.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当*n*是2的幂时，此函数最有效，当*n*是素数时，效率最低。
- en: Note that if `x` is real-valued, then `A[j] == A[n-j].conjugate()`. If `x` is
    real-valued and `n` is even, then `A[n/2]` is real.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果*x*是实值，则`A[j] == A[n-j].conjugate()`。如果*x*是实值且*n*是偶数，则*A[n/2]*是实数。
- en: If the data type of *x* is real, a “real FFT” algorithm is automatically used,
    which roughly halves the computation time. To increase efficiency a little further,
    use [`rfft`](scipy.fftpack.rfft.html#scipy.fftpack.rfft "scipy.fftpack.rfft"),
    which does the same calculation, but only outputs half of the symmetrical spectrum.
    If the data is both real and symmetrical, the [`dct`](scipy.fftpack.dct.html#scipy.fftpack.dct
    "scipy.fftpack.dct") can again double the efficiency by generating half of the
    spectrum from half of the signal.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*x*的数据类型是实数，则自动使用“实数FFT”算法，其大致减半计算时间。为了进一步提高效率，使用[`rfft`](https://scipy.fftpack.rfft.html#scipy.fftpack.rfft
    "scipy.fftpack.rfft")，它执行相同的计算，但仅输出对称频谱的一半。如果数据既是实数又是对称的，则[`dct`](https://scipy.fftpack.dct.html#scipy.fftpack.dct
    "scipy.fftpack.dct")可以再次通过从信号的一半生成频谱的一半来将效率加倍。
- en: Examples
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
