["```py\nscipy.stats.gausshyper = <scipy.stats._continuous_distns.gausshyper_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import gausshyper\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> a, b, c, z = 13.8, 3.12, 2.51, 5.18\n>>> mean, var, skew, kurt = gausshyper.stats(a, b, c, z, moments='mvsk') \n```", "```py\n>>> x = np.linspace(gausshyper.ppf(0.01, a, b, c, z),\n...                 gausshyper.ppf(0.99, a, b, c, z), 100)\n>>> ax.plot(x, gausshyper.pdf(x, a, b, c, z),\n...        'r-', lw=5, alpha=0.6, label='gausshyper pdf') \n```", "```py\n>>> rv = gausshyper(a, b, c, z)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf') \n```", "```py\n>>> vals = gausshyper.ppf([0.001, 0.5, 0.999], a, b, c, z)\n>>> np.allclose([0.001, 0.5, 0.999], gausshyper.cdf(vals, a, b, c, z))\nTrue \n```", "```py\n>>> r = gausshyper.rvs(a, b, c, z, size=1000) \n```", "```py\n>>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim([x[0], x[-1]])\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```"]