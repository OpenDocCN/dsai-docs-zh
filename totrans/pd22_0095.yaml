- en: pandas.read_sas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_sas.html](https://pandas.pydata.org/docs/reference/api/pandas.read_sas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read SAS files stored as either XPORT or SAS7BDAT format files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filepath_or_buffer**str, path object, or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: 'String, path object (implementing `os.PathLike[str]`), or file-like object
    implementing a binary `read()` function. The string could be a URL. Valid URL
    schemes include http, ftp, s3, and file. For file URLs, a host is expected. A
    local file could be: `file://localhost/path/to/table.sas7bdat`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str {‘xport’, ‘sas7bdat’} or None'
  prefs: []
  type: TYPE_NORMAL
- en: If None, file format is inferred from file extension. If ‘xport’ or ‘sas7bdat’,
    uses the corresponding format.
  prefs: []
  type: TYPE_NORMAL
- en: '**index**identifier of index column, defaults to None'
  prefs: []
  type: TYPE_NORMAL
- en: Identifier of column that should be used as index of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, default is None'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding for text data. If None, text data are stored as raw bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '**chunksize**int'
  prefs: []
  type: TYPE_NORMAL
- en: Read file chunksize lines at a time, returns iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '**iterator**bool, defaults to False'
  prefs: []
  type: TYPE_NORMAL
- en: If True, returns an iterator for reading the file incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: '**compression**str or dict, default ‘infer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'For on-the-fly decompression of on-disk data. If ‘infer’ and ‘filepath_or_buffer’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). If using ‘zip’ or ‘tar’, the ZIP file must contain only one data
    file to be read in. Set to `None` for no decompression. Can also be a dict with
    key `''method''` set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`,
    `''xz''`, `''tar''`} and other key-value pairs are forwarded to `zipfile.ZipFile`,
    `gzip.GzipFile`, `bz2.BZ2File`, `zstandard.ZstdDecompressor`, `lzma.LZMAFile`
    or `tarfile.TarFile`, respectively. As an example, the following could be passed
    for Zstandard decompression using a custom compression dictionary: `compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Added support for .tar files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame if iterator=False and chunksize=None, else SAS7BDATReader
  prefs: []
  type: TYPE_NORMAL
- en: or XportReader
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
