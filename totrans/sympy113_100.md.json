["```py\nsympy.discrete.transforms.fft(seq, dps=None)\n```", "```py\n>>> from sympy import fft, ifft \n```", "```py\n>>> fft([1, 2, 3, 4])\n[10, -2 - 2*I, -2, -2 + 2*I]\n>>> ifft(_)\n[1, 2, 3, 4] \n```", "```py\n>>> ifft([1, 2, 3, 4])\n[5/2, -1/2 + I/2, -1/2, -1/2 - I/2]\n>>> fft(_)\n[1, 2, 3, 4] \n```", "```py\n>>> ifft([1, 7, 3, 4], dps=15)\n[3.75, -0.5 - 0.75*I, -1.75, -0.5 + 0.75*I]\n>>> fft(_)\n[1.0, 7.0, 3.0, 4.0] \n```", "```py\nsympy.discrete.transforms.ifft(seq, dps=None)\n```", "```py\n>>> from sympy import fft, ifft \n```", "```py\n>>> fft([1, 2, 3, 4])\n[10, -2 - 2*I, -2, -2 + 2*I]\n>>> ifft(_)\n[1, 2, 3, 4] \n```", "```py\n>>> ifft([1, 2, 3, 4])\n[5/2, -1/2 + I/2, -1/2, -1/2 - I/2]\n>>> fft(_)\n[1, 2, 3, 4] \n```", "```py\n>>> ifft([1, 7, 3, 4], dps=15)\n[3.75, -0.5 - 0.75*I, -1.75, -0.5 + 0.75*I]\n>>> fft(_)\n[1.0, 7.0, 3.0, 4.0] \n```", "```py\nsympy.discrete.transforms.ntt(seq, prime)\n```", "```py\n>>> from sympy import ntt, intt\n>>> ntt([1, 2, 3, 4], prime=3*2**8 + 1)\n[10, 643, 767, 122]\n>>> intt(_, 3*2**8 + 1)\n[1, 2, 3, 4]\n>>> intt([1, 2, 3, 4], prime=3*2**8 + 1)\n[387, 415, 384, 353]\n>>> ntt(_, prime=3*2**8 + 1)\n[1, 2, 3, 4] \n```", "```py\nsympy.discrete.transforms.intt(seq, prime)\n```", "```py\n>>> from sympy import ntt, intt\n>>> ntt([1, 2, 3, 4], prime=3*2**8 + 1)\n[10, 643, 767, 122]\n>>> intt(_, 3*2**8 + 1)\n[1, 2, 3, 4]\n>>> intt([1, 2, 3, 4], prime=3*2**8 + 1)\n[387, 415, 384, 353]\n>>> ntt(_, prime=3*2**8 + 1)\n[1, 2, 3, 4] \n```", "```py\nsympy.discrete.transforms.fwht(seq)\n```", "```py\n>>> from sympy import fwht, ifwht\n>>> fwht([4, 2, 2, 0, 0, 2, -2, 0])\n[8, 0, 8, 0, 8, 8, 0, 0]\n>>> ifwht(_)\n[4, 2, 2, 0, 0, 2, -2, 0] \n```", "```py\n>>> ifwht([19, -1, 11, -9, -7, 13, -15, 5])\n[2, 0, 4, 0, 3, 10, 0, 0]\n>>> fwht(_)\n[19, -1, 11, -9, -7, 13, -15, 5] \n```", "```py\nsympy.discrete.transforms.ifwht(seq)\n```", "```py\n>>> from sympy import fwht, ifwht\n>>> fwht([4, 2, 2, 0, 0, 2, -2, 0])\n[8, 0, 8, 0, 8, 8, 0, 0]\n>>> ifwht(_)\n[4, 2, 2, 0, 0, 2, -2, 0] \n```", "```py\n>>> ifwht([19, -1, 11, -9, -7, 13, -15, 5])\n[2, 0, 4, 0, 3, 10, 0, 0]\n>>> fwht(_)\n[19, -1, 11, -9, -7, 13, -15, 5] \n```", "```py\nsympy.discrete.transforms.mobius_transform(seq, subset=True)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy import mobius_transform, inverse_mobius_transform\n>>> x, y, z = symbols('x y z') \n```", "```py\n>>> mobius_transform([x, y, z])\n[x, x + y, x + z, x + y + z]\n>>> inverse_mobius_transform(_)\n[x, y, z, 0] \n```", "```py\n>>> mobius_transform([x, y, z], subset=False)\n[x + y + z, y, z, 0]\n>>> inverse_mobius_transform(_, subset=False)\n[x, y, z, 0] \n```", "```py\n>>> mobius_transform([1, 2, 3, 4])\n[1, 3, 4, 10]\n>>> inverse_mobius_transform(_)\n[1, 2, 3, 4]\n>>> mobius_transform([1, 2, 3, 4], subset=False)\n[10, 6, 7, 4]\n>>> inverse_mobius_transform(_, subset=False)\n[1, 2, 3, 4] \n```", "```py\nsympy.discrete.transforms.inverse_mobius_transform(seq, subset=True)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy import mobius_transform, inverse_mobius_transform\n>>> x, y, z = symbols('x y z') \n```", "```py\n>>> mobius_transform([x, y, z])\n[x, x + y, x + z, x + y + z]\n>>> inverse_mobius_transform(_)\n[x, y, z, 0] \n```", "```py\n>>> mobius_transform([x, y, z], subset=False)\n[x + y + z, y, z, 0]\n>>> inverse_mobius_transform(_, subset=False)\n[x, y, z, 0] \n```", "```py\n>>> mobius_transform([1, 2, 3, 4])\n[1, 3, 4, 10]\n>>> inverse_mobius_transform(_)\n[1, 2, 3, 4]\n>>> mobius_transform([1, 2, 3, 4], subset=False)\n[10, 6, 7, 4]\n>>> inverse_mobius_transform(_, subset=False)\n[1, 2, 3, 4] \n```", "```py\nsympy.discrete.convolutions.convolution(a, b, cycle=0, dps=None, prime=None, dyadic=None, subset=None)\n```", "```py\n>>> from sympy import convolution, symbols, S, I\n>>> u, v, w, x, y, z = symbols('u v w x y z') \n```", "```py\n>>> convolution([1 + 2*I, 4 + 3*I], [S(5)/4, 6], dps=3)\n[1.25 + 2.5*I, 11.0 + 15.8*I, 24.0 + 18.0*I]\n>>> convolution([1, 2, 3], [4, 5, 6], cycle=3)\n[31, 31, 28] \n```", "```py\n>>> convolution([111, 777], [888, 444], prime=19*2**10 + 1)\n[1283, 19351, 14219]\n>>> convolution([111, 777], [888, 444], prime=19*2**10 + 1, cycle=2)\n[15502, 19351] \n```", "```py\n>>> convolution([u, v], [x, y, z], dyadic=True)\n[u*x + v*y, u*y + v*x, u*z, v*z]\n>>> convolution([u, v], [x, y, z], dyadic=True, cycle=2)\n[u*x + u*z + v*y, u*y + v*x + v*z] \n```", "```py\n>>> convolution([u, v, w], [x, y, z], subset=True)\n[u*x, u*y + v*x, u*z + w*x, v*z + w*y]\n>>> convolution([u, v, w], [x, y, z], subset=True, cycle=3)\n[u*x + v*z + w*y, u*y + v*x, u*z + w*x] \n```", "```py\nsympy.discrete.convolutions.convolution_fft(a, b, dps=None)\n```", "```py\n>>> from sympy import S, I\n>>> from sympy.discrete.convolutions import convolution_fft \n```", "```py\n>>> convolution_fft([2, 3], [4, 5])\n[8, 22, 15]\n>>> convolution_fft([2, 5], [6, 7, 3])\n[12, 44, 41, 15]\n>>> convolution_fft([1 + 2*I, 4 + 3*I], [S(5)/4, 6])\n[5/4 + 5*I/2, 11 + 63*I/4, 24 + 18*I] \n```", "```py\nsympy.discrete.convolutions.convolution_ntt(a, b, prime)\n```", "```py\n>>> from sympy.discrete.convolutions import convolution_ntt\n>>> convolution_ntt([2, 3], [4, 5], prime=19*2**10 + 1)\n[8, 22, 15]\n>>> convolution_ntt([2, 5], [6, 7, 3], prime=19*2**10 + 1)\n[12, 44, 41, 15]\n>>> convolution_ntt([333, 555], [222, 666], prime=19*2**10 + 1)\n[15555, 14219, 19404] \n```", "```py\nsympy.discrete.convolutions.convolution_fwht(a, b)\n```", "```py\n>>> from sympy import symbols, S, I\n>>> from sympy.discrete.convolutions import convolution_fwht \n```", "```py\n>>> u, v, x, y = symbols('u v x y')\n>>> convolution_fwht([u, v], [x, y])\n[u*x + v*y, u*y + v*x] \n```", "```py\n>>> convolution_fwht([2, 3], [4, 5])\n[23, 22]\n>>> convolution_fwht([2, 5 + 4*I, 7], [6*I, 7, 3 + 4*I])\n[56 + 68*I, -10 + 30*I, 6 + 50*I, 48 + 32*I] \n```", "```py\n>>> convolution_fwht([S(33)/7, S(55)/6, S(7)/4], [S(2)/3, 5])\n[2057/42, 1870/63, 7/6, 35/4] \n```", "```py\nsympy.discrete.convolutions.convolution_subset(a, b)\n```", "```py\n>>> from sympy import symbols, S\n>>> from sympy.discrete.convolutions import convolution_subset\n>>> u, v, x, y, z = symbols('u v x y z') \n```", "```py\n>>> convolution_subset([u, v], [x, y])\n[u*x, u*y + v*x]\n>>> convolution_subset([u, v, x], [y, z])\n[u*y, u*z + v*y, x*y, x*z] \n```", "```py\n>>> convolution_subset([1, S(2)/3], [3, 4])\n[3, 6]\n>>> convolution_subset([1, 3, S(5)/7], [7])\n[7, 21, 5, 0] \n```", "```py\nsympy.discrete.convolutions.covering_product(a, b)\n```", "```py\n>>> from sympy import symbols, S, I, covering_product\n>>> u, v, x, y, z = symbols('u v x y z') \n```", "```py\n>>> covering_product([u, v], [x, y])\n[u*x, u*y + v*x + v*y]\n>>> covering_product([u, v, x], [y, z])\n[u*y, u*z + v*y + v*z, x*y, x*z] \n```", "```py\n>>> covering_product([1, S(2)/3], [3, 4 + 5*I])\n[3, 26/3 + 25*I/3]\n>>> covering_product([1, 3, S(5)/7], [7, 8])\n[7, 53, 5, 40/7] \n```", "```py\nsympy.discrete.convolutions.intersecting_product(a, b)\n```", "```py\n>>> from sympy import symbols, S, I, intersecting_product\n>>> u, v, x, y, z = symbols('u v x y z') \n```", "```py\n>>> intersecting_product([u, v], [x, y])\n[u*x + u*y + v*x, v*y]\n>>> intersecting_product([u, v, x], [y, z])\n[u*y + u*z + v*y + x*y + x*z, v*z, 0, 0] \n```", "```py\n>>> intersecting_product([1, S(2)/3], [3, 4 + 5*I])\n[9 + 5*I, 8/3 + 10*I/3]\n>>> intersecting_product([1, 3, S(5)/7], [7, 8])\n[327/7, 24, 0, 0] \n```"]