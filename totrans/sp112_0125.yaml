- en: Integration and ODEs (scipy.integrate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/integrate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Integrating functions, given function object'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`quad`](generated/scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")(func, a, b[, args, full_output, ...])
    | Compute a definite integral. |'
  prefs: []
  type: TYPE_TB
- en: '| [`quad_vec`](generated/scipy.integrate.quad_vec.html#scipy.integrate.quad_vec
    "scipy.integrate.quad_vec")(f, a, b[, epsabs, epsrel, norm, ...]) | Adaptive integration
    of a vector-valued function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dblquad`](generated/scipy.integrate.dblquad.html#scipy.integrate.dblquad
    "scipy.integrate.dblquad")(func, a, b, gfun, hfun[, args, ...]) | Compute a double
    integral. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tplquad`](generated/scipy.integrate.tplquad.html#scipy.integrate.tplquad
    "scipy.integrate.tplquad")(func, a, b, gfun, hfun, qfun, rfun) | Compute a triple
    (definite) integral. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nquad`](generated/scipy.integrate.nquad.html#scipy.integrate.nquad "scipy.integrate.nquad")(func, ranges[, args, opts, full_output])
    | Integration over multiple variables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fixed_quad`](generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad
    "scipy.integrate.fixed_quad")(func, a, b[, args, n]) | Compute a definite integral
    using fixed-order Gaussian quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`quadrature`](generated/scipy.integrate.quadrature.html#scipy.integrate.quadrature
    "scipy.integrate.quadrature")(func, a, b[, args, tol, rtol, ...]) | Compute a
    definite integral using fixed-tolerance Gaussian quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`romberg`](generated/scipy.integrate.romberg.html#scipy.integrate.romberg
    "scipy.integrate.romberg")(function, a, b[, args, tol, rtol, ...]) | Romberg integration
    of a callable function or method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`newton_cotes`](generated/scipy.integrate.newton_cotes.html#scipy.integrate.newton_cotes
    "scipy.integrate.newton_cotes")(rn[, equal]) | Return weights and error coefficient
    for Newton-Cotes integration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`qmc_quad`](generated/scipy.integrate.qmc_quad.html#scipy.integrate.qmc_quad
    "scipy.integrate.qmc_quad")(func, a, b, *[, n_estimates, ...]) | Compute an integral
    in N-dimensions using Quasi-Monte Carlo quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntegrationWarning`](generated/scipy.integrate.IntegrationWarning.html#scipy.integrate.IntegrationWarning
    "scipy.integrate.IntegrationWarning") | Warning on issues during integration.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`AccuracyWarning`](generated/scipy.integrate.AccuracyWarning.html#scipy.integrate.AccuracyWarning
    "scipy.integrate.AccuracyWarning") |  |'
  prefs: []
  type: TYPE_TB
- en: Integrating functions, given fixed samples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`trapezoid`](generated/scipy.integrate.trapezoid.html#scipy.integrate.trapezoid
    "scipy.integrate.trapezoid")(y[, x, dx, axis]) | Integrate along the given axis
    using the composite trapezoidal rule. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumulative_trapezoid`](generated/scipy.integrate.cumulative_trapezoid.html#scipy.integrate.cumulative_trapezoid
    "scipy.integrate.cumulative_trapezoid")(y[, x, dx, axis, initial]) | Cumulatively
    integrate y(x) using the composite trapezoidal rule. |'
  prefs: []
  type: TYPE_TB
- en: '| [`simpson`](generated/scipy.integrate.simpson.html#scipy.integrate.simpson
    "scipy.integrate.simpson")(y, *[, x, dx, axis, even]) | Integrate y(x) using samples
    along the given axis and the composite Simpson''s rule. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumulative_simpson`](generated/scipy.integrate.cumulative_simpson.html#scipy.integrate.cumulative_simpson
    "scipy.integrate.cumulative_simpson")(y, *[, x, dx, axis, initial]) | Cumulatively
    integrate y(x) using the composite Simpson''s 1/3 rule. |'
  prefs: []
  type: TYPE_TB
- en: '| [`romb`](generated/scipy.integrate.romb.html#scipy.integrate.romb "scipy.integrate.romb")(y[, dx, axis, show])
    | Romberg integration using samples of a function. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.special`](special.html#module-scipy.special "scipy.special") for orthogonal
    polynomials (special) for Gaussian quadrature roots and weights for other weighting
    factors and regions.'
  prefs: []
  type: TYPE_NORMAL
- en: Solving initial value problems for ODE systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solvers are implemented as individual classes, which can be used directly
    (low-level usage) or through a convenience function.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`solve_ivp`](generated/scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp")(fun, t_span, y0[, method, t_eval, ...]) | Solve an
    initial value problem for a system of ODEs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RK23`](generated/scipy.integrate.RK23.html#scipy.integrate.RK23 "scipy.integrate.RK23")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Explicit Runge-Kutta method of order 3(2). |'
  prefs: []
  type: TYPE_TB
- en: '| [`RK45`](generated/scipy.integrate.RK45.html#scipy.integrate.RK45 "scipy.integrate.RK45")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Explicit Runge-Kutta method of order 5(4). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DOP853`](generated/scipy.integrate.DOP853.html#scipy.integrate.DOP853 "scipy.integrate.DOP853")(fun, t0, y0, t_bound[, max_step, ...])
    | Explicit Runge-Kutta method of order 8. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Radau`](generated/scipy.integrate.Radau.html#scipy.integrate.Radau "scipy.integrate.Radau")(fun, t0, y0, t_bound[, max_step, ...])
    | Implicit Runge-Kutta method of Radau IIA family of order 5. |'
  prefs: []
  type: TYPE_TB
- en: '| [`BDF`](generated/scipy.integrate.BDF.html#scipy.integrate.BDF "scipy.integrate.BDF")(fun, t0, y0, t_bound[, max_step, rtol, ...])
    | Implicit method based on backward-differentiation formulas. |'
  prefs: []
  type: TYPE_TB
- en: '| [`LSODA`](generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA "scipy.integrate.LSODA")(fun, t0, y0, t_bound[, first_step, ...])
    | Adams/BDF method with automatic stiffness detection and switching. |'
  prefs: []
  type: TYPE_TB
- en: '| [`OdeSolver`](generated/scipy.integrate.OdeSolver.html#scipy.integrate.OdeSolver
    "scipy.integrate.OdeSolver")(fun, t0, y0, t_bound, vectorized) | Base class for
    ODE solvers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DenseOutput`](generated/scipy.integrate.DenseOutput.html#scipy.integrate.DenseOutput
    "scipy.integrate.DenseOutput")(t_old, t) | Base class for local interpolant over
    step made by an ODE solver. |'
  prefs: []
  type: TYPE_TB
- en: '| [`OdeSolution`](generated/scipy.integrate.OdeSolution.html#scipy.integrate.OdeSolution
    "scipy.integrate.OdeSolution")(ts, interpolants[, alt_segment]) | Continuous ODE
    solution. |'
  prefs: []
  type: TYPE_TB
- en: Old API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are the routines developed earlier for SciPy. They wrap older solvers
    implemented in Fortran (mostly ODEPACK). While the interface to them is not particularly
    convenient and certain features are missing compared to the new API, the solvers
    themselves are of good quality and work fast as compiled Fortran code. In some
    cases, it might be worth using this old API.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")(func, y0, t[, args, Dfun, col_deriv, ...])
    | Integrate a system of ordinary differential equations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ode`](generated/scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")(f[, jac])
    | A generic interface class to numeric integrators. |'
  prefs: []
  type: TYPE_TB
- en: '| [`complex_ode`](generated/scipy.integrate.complex_ode.html#scipy.integrate.complex_ode
    "scipy.integrate.complex_ode")(f[, jac]) | A wrapper of ode for complex systems.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ODEintWarning`](generated/scipy.integrate.ODEintWarning.html#scipy.integrate.ODEintWarning
    "scipy.integrate.ODEintWarning") | Warning raised during the execution of [`odeint`](generated/scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint"). |'
  prefs: []
  type: TYPE_TB
- en: Solving boundary value problems for ODE systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`solve_bvp`](generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp
    "scipy.integrate.solve_bvp")(fun, bc, x, y[, p, S, fun_jac, ...]) | Solve a boundary
    value problem for a system of ODEs. |'
  prefs: []
  type: TYPE_TB
