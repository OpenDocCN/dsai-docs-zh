- en: scipy.interpolate.approximate_taylor_polynomial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.approximate_taylor_polynomial.html#scipy.interpolate.approximate_taylor_polynomial](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.approximate_taylor_polynomial.html#scipy.interpolate.approximate_taylor_polynomial)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Estimate the Taylor polynomial of f at x by polynomial fitting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable'
  prefs: []
  type: TYPE_NORMAL
- en: The function whose Taylor polynomial is sought. Should accept a vector of *x*
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The point at which the polynomial is to be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: '**degree**int'
  prefs: []
  type: TYPE_NORMAL
- en: The degree of the Taylor polynomial
  prefs: []
  type: TYPE_NORMAL
- en: '**scale**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The width of the interval to use to evaluate the Taylor polynomial. Function
    values spread over a range this wide are used to fit the polynomial. Must be chosen
    carefully.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the polynomial to be used in the fitting; *f* will be evaluated
    `order+1` times. If None, use *degree*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p**poly1d instance'
  prefs: []
  type: TYPE_NORMAL
- en: The Taylor polynomial (translated to the origin, so that for example p(0)=f(x)).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate choice of “scale” is a trade-off; too large and the function
    differs from its Taylor polynomial too much to get a good answer, too small and
    round-off errors overwhelm the higher-order terms. The algorithm used becomes
    numerically unstable around order 30 even under ideal circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing order somewhat larger than degree may improve the higher-order terms.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We can calculate Taylor approximation polynomials of sin function with various
    degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-approximate_taylor_polynomial-1.png](../Images/5f7daf78bfcf078a51ce2240d405d83f.png)'
  prefs: []
  type: TYPE_IMG
