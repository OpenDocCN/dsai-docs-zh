- en: Potential Issues/Advanced Topics/Future Features in Physics/Mechanics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理/力学中的潜在问题/高级主题/未来特性
- en: Original text：[https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html](https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html](https://docs.sympy.org/latest/modules/physics/mechanics/advanced.html)
- en: This document will describe some of the more advanced functionality that this
    module offers but which is not part of the “official” interface. Here, some of
    the features that will be implemented in the future will also be covered, along
    with unanswered questions about proper functionality. Also, common problems will
    be discussed, along with some solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将描述此模块提供的一些更高级的功能，但这些功能不是“官方”接口的一部分。在这里，还将涵盖一些将来将实施的特性，以及关于正确功能的未解答问题。同时，还将讨论常见问题，并提供一些解决方案。
- en: Common Issues
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: Here issues with numerically integrating code, choice of `dynamicsymbols` for
    coordinate and speed representation, printing, differentiating, and substitution
    will occur.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，数值积分代码、选择`dynamicsymbols`作为坐标和速度表示、打印、差分和替换的问题将会出现。
- en: Numerically Integrating Code
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值积分代码
- en: 'See Future Features: Code Output'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参见未来特性：代码输出
- en: Differentiating
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 差分
- en: Differentiation of very large expressions can take some time in SymPy; it is
    possible for large expressions to take minutes for the derivative to be evaluated.
    This will most commonly come up in linearization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在SymPy中，差分非常大的表达式可能需要一些时间；大表达式可能需要几分钟才能评估出导数。这通常会出现在线性化中。
- en: Choice of Coordinates and Speeds
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 坐标和速度的选择
- en: 'The Kane object is set up with the assumption that the generalized speeds are
    not the same symbol as the time derivatives of the generalized coordinates. This
    isn’t to say that they can’t be the same, just that they have to have a different
    symbol. If you did this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kane对象被设置为假设广义速度与广义坐标的时间导数不是相同的符号。这并不意味着它们不能是相同的，只是它们必须有不同的符号。如果你这样做了：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your code would not work. Currently, kinematic differential equations are required
    to be provided. It is at this point that we hope the user will discover they should
    not attempt the behavior shown in the code above.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码将无法工作。目前，运动微分方程需要提供。希望用户在这一点上能发现他们不应尝试上述代码中显示的行为。
- en: This behavior might not be true for other methods of forming the equations of
    motion though.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为对于形成运动方程的其他方法可能不适用。
- en: Printing
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印
- en: The default printing options are to use sorting for `Vector` and `Dyad` measure
    numbers, and have unsorted output from the `mprint`, `mpprint`, and `mlatex` functions.
    If you are printing something large, please use one of those functions, as the
    sorting can increase printing time from seconds to minutes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的打印选项是对`Vector`和`Dyad`测量数使用排序，并且从`mprint`、`mpprint`和`mlatex`函数中输出未排序的内容。如果要打印大量内容，请使用这些函数之一，因为排序可能会将打印时间从几秒增加到几分钟。
- en: Substitution
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换
- en: 'There are two common issues with substitution in mechanics:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在力学中有两个常见的替代问题：
- en: 'When subbing in expressions for `dynamicsymbols`, sympy’s normal `subs` will
    substitute in for derivatives of the dynamic symbol as well:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当为`dynamicsymbols`进行表达式替换时，sympy的正常`subs`将会为动态符号的导数进行替换：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, `x` was replaced with 1 inside the `Derivative` as well, which
    is undesired.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，`x`也被替换为`Derivative`内部的1，这是不希望的。
- en: Substitution into large expressions can be slow.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对大表达式进行替换可能会很慢。
- en: 'If your substitution is simple (direct replacement of expressions with other
    expressions, such as when evaluating at an operating point) it is recommended
    to use the provided `msubs` function, as it is significantly faster, and handles
    the derivative issue appropriately:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的替换很简单（直接用其他表达式替换表达式，例如在操作点评估时），建议使用提供的`msubs`函数，因为它的速度显著更快，并适当处理了导数问题：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Linearization
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性化
- en: Currently, the linearization methods don’t support cases where there are non-coordinate,
    non-speed dynamic symbols outside of the “dynamic equations”. It also does not
    support cases where time derivatives of these types of dynamic symbols show up.
    This means if you have kinematic differential equations which have a non-coordinate,
    non-speed dynamic symbol, it will not work. It also means if you have defined
    a system parameter (say a length or distance or mass) as a dynamic symbol, its
    time derivative is likely to show up in the dynamic equations, and this will prevent
    linearization.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，线性化方法不支持存在非坐标、非速度动态符号的情况外的“动态方程”情况。它也不支持这些类型动态符号的时间导数出现的情况。这意味着如果您有具有非坐标、非速度动态符号的运动微分方程，它将无法工作。这也意味着如果您已将系统参数（如长度、距离或质量）定义为动态符号，则其时间导数可能会出现在动态方程中，并且这将阻止线性化。
- en: Acceleration of Points
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点的加速度
- en: At a minimum, points need to have their velocities defined, as the acceleration
    can be calculated by taking the time derivative of the velocity in the same frame.
    If the 1 point or 2 point theorems were used to compute the velocity, the time
    derivative of the velocity expression will most likely be more complex than if
    you were to use the acceleration level 1 point and 2 point theorems. Using the
    acceleration level methods can result in shorted expressions at this point, which
    will result in shorter expressions later (such as when forming Kane’s equations).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要定义点的速度，因为在同一框架内，可以通过速度的时间导数计算加速度。如果使用了一点或两点定理来计算速度，则速度表达式的时间导数很可能比使用加速度一级和两级定理更复杂。在这一点上使用加速度级别的方法可以导致更短的表达式，这将在后续形成Kane方程时导致更短的表达式。
- en: Advanced Interfaces
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级接口
- en: Advanced Functionality
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级功能
- en: Remember that the `Kane` object supports bodies which have time-varying masses
    and inertias, although this functionality isn’t completely compatible with the
    linearization method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`Kane`对象支持具有时间变化质量和惯性的物体，尽管这种功能与线性化方法并不完全兼容。
- en: Operators were discussed earlier as a potential way to do mathematical operations
    on `Vector` and `Dyad` objects. The majority of the code in this module is actually
    coded with them, as it can (subjectively) result in cleaner, shorter, more readable
    code. If using this interface in your code, remember to take care and use parentheses;
    the default order of operations in Python results in addition occurring before
    some of the vector products, so use parentheses liberally.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之前讨论过运算符作为在`Vector`和`Dyad`对象上进行数学运算的潜在方式。该模块中的大多数代码实际上是用它们编写的，因为这可以（主观地）导致更干净、更短、更可读的代码。如果在您的代码中使用此接口，请记住小心使用括号；Python中的默认运算顺序导致在一些向量积之前发生加法，因此应大量使用括号。
- en: Future Features
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来特性
- en: This will cover the planned features to be added to this submodule.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将涵盖计划添加到此子模块的功能。
- en: Code Output
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码输出
- en: A function for generating code output for numerical integration is the highest
    priority feature to implement next. There are a number of considerations here.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实现数值积分代码输出函数是下一个要实现的最重要功能。这里有许多考虑因素。
- en: 'Code output for C (using the GSL libraries), Fortran 90 (using LSODA), MATLAB,
    and SciPy is the goal. Things to be considered include: use of `cse` on large
    expressions for MATLAB and SciPy, which are interpretive. It is currently unclear
    whether compiled languages will benefit from common subexpression elimination,
    especially considering that it is a common part of compiler optimization, and
    there can be a significant time penalty when calling `cse`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: C代码输出（使用GSL库）、Fortran 90（使用LSODA）、MATLAB和SciPy是目标。需要考虑的事项包括：在MATLAB和SciPy上对大表达式使用`cse`，这是解释性的。目前不清楚编译语言是否会从常见子表达式消除中受益，特别是考虑到它是编译器优化的常见部分，并且在调用`cse`时可能会有显著的时间惩罚。
- en: Care needs to be taken when constructing the strings for these expressions,
    as well as handling of input parameters, and other dynamic symbols. How to deal
    with output quantities when integrating also needs to be decided, with the potential
    for multiple options being considered.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建这些表达式的字符串时需要小心，以及处理输入参数和其他动态符号。在进行积分时如何处理输出量也需要决定，考虑到可能有多个选项。
