- en: scipy.optimize.fsolve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the roots of a function.
  prefs: []
  type: TYPE_NORMAL
- en: Return the roots of the (non-linear) equations defined by `func(x) = 0` given
    a starting estimate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable `f(x, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: A function that takes at least one (possibly vector) argument, and returns a
    value of the same length.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The starting estimate for the roots of `func(x) = 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any extra arguments to *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime**callable `f(x, *args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A function to compute the Jacobian of *func* with derivatives across the rows.
    By default, the Jacobian will be estimated.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**col_deriv**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specify whether the Jacobian function computes derivatives down the columns
    (faster, because there is no transpose operation).
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The calculation will terminate if the relative error between two consecutive
    iterates is at most *xtol*.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfev**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of calls to the function. If zero, then `100*(N+1)` is the
    maximum where N is the number of elements in *x0*.
  prefs: []
  type: TYPE_NORMAL
- en: '**band**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If set to a two-sequence containing the number of sub- and super-diagonals within
    the band of the Jacobi matrix, the Jacobi matrix is considered banded (only for
    `fprime=None`).
  prefs: []
  type: TYPE_NORMAL
- en: '**epsfcn**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A suitable step length for the forward-difference approximation of the Jacobian
    (for `fprime=None`). If *epsfcn* is less than the machine precision, it is assumed
    that the relative errors in the functions are of the order of the machine precision.
  prefs: []
  type: TYPE_NORMAL
- en: '**factor**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A parameter determining the initial step bound (`factor * || diag * x||`). Should
    be in the interval `(0.1, 100)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**diag**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: N positive entries that serve as a scale factors for the variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The solution (or the result of the last iteration for an unsuccessful call).
  prefs: []
  type: TYPE_NORMAL
- en: '**infodict**dict'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dictionary of optional outputs with the keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nfev`'
  prefs: []
  type: TYPE_NORMAL
- en: number of function calls
  prefs: []
  type: TYPE_NORMAL
- en: '`njev`'
  prefs: []
  type: TYPE_NORMAL
- en: number of Jacobian calls
  prefs: []
  type: TYPE_NORMAL
- en: '`fvec`'
  prefs: []
  type: TYPE_NORMAL
- en: function evaluated at the output
  prefs: []
  type: TYPE_NORMAL
- en: '`fjac`'
  prefs: []
  type: TYPE_NORMAL
- en: the orthogonal matrix, q, produced by the QR factorization of the final approximate
    Jacobian matrix, stored column wise
  prefs: []
  type: TYPE_NORMAL
- en: '`r`'
  prefs: []
  type: TYPE_NORMAL
- en: upper triangular matrix produced by QR factorization of the same matrix
  prefs: []
  type: TYPE_NORMAL
- en: '`qtf`'
  prefs: []
  type: TYPE_NORMAL
- en: the vector `(transpose(q) * fvec)`
  prefs: []
  type: TYPE_NORMAL
- en: '**ier**int'
  prefs: []
  type: TYPE_NORMAL
- en: An integer flag. Set to 1 if a solution was found, otherwise refer to *mesg*
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '**mesg**str'
  prefs: []
  type: TYPE_NORMAL
- en: If no solution is found, *mesg* details the cause of failure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to root finding algorithms for multivariate functions. See the `method='hybr'`
    in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`fsolve` is a wrapper around MINPACK’s hybrd and hybrj algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Find a solution to the system of equations: `x0*cos(x1) = 4,  x1*x0 - x1 =
    5`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
