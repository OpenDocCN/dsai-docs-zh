- en: SciPy API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Importing from SciPy'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the distinction between what is the public API of a library and
    what are private implementation details is not always clear. Unlike in other languages
    like Java, it is possible in Python to access “private” functions or objects.
    Occasionally this may be convenient, but be aware that if you do so your code
    may break without warning in future releases. Some widely understood rules for
    what is and isn’t public in Python are:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods / functions / classes and module attributes whose names begin with a
    leading underscore are private.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a class name begins with a leading underscore, none of its members are public,
    whether or not they begin with a leading underscore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a module name in a package begins with a leading underscore none of its members
    are public, whether or not they begin with a leading underscore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a module or package defines `__all__`, that authoritatively defines the public
    interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a module or package doesn’t define `__all__`, then all names that don’t start
    with a leading underscore are public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Reading the above guidelines one could draw the conclusion that every private
    module or object starts with an underscore. This is not the case; the presence
    of underscores do mark something as private, but the absence of underscores do
    not mark something as public.
  prefs: []
  type: TYPE_NORMAL
- en: In SciPy there are modules whose names don’t start with an underscore, but that
    should be considered private. To clarify which modules these are, we define below
    what the public API is for SciPy, and give some recommendations for how to import
    modules/functions/objects from SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines for importing functions from SciPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everything in the namespaces of SciPy submodules is public. In general in Python,
    it is recommended to make use of namespaces. For example, the function `curve_fit`
    (defined in `scipy/optimize/_minpack_py.py`) should be imported like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or alternatively one could use the submodule as a namespace like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For `scipy.io` prefer the use of `import scipy` because `io` is also the name
    of a module in the Python stdlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, the public API is one level deeper. For example, the `scipy.sparse.linalg`
    module is public, and the functions it contains are not available in the `scipy.sparse`
    namespace. Sometimes it may result in more easily understandable code if functions
    are imported from one level deeper. For example, in the following it is immediately
    clear that `lomax` is a distribution if the second form is chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In that case, the second form can be chosen **if** it is documented in the
    next section that the submodule in question is public. Of course you can still
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SciPy is using a lazy loading mechanism which means that modules are only loaded
    in memory when you first try to access them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `scipy` namespace itself also contains functions imported from `numpy`.
    These functions still exist for backwards compatibility, but should be imported
    from `numpy` directly.
  prefs: []
  type: TYPE_NORMAL
- en: API definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every submodule listed below is public. That means that these submodules are
    unlikely to be renamed or changed in an incompatible way, and if that is necessary,
    a deprecation warning will be raised for one SciPy release before the change is
    made.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy`](../index.html#module-scipy "scipy")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.cluster`](cluster.html#module-scipy.cluster "scipy.cluster")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.cluster.vq`](cluster.vq.html#module-scipy.cluster.vq "scipy.cluster.vq")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.cluster.hierarchy`](cluster.hierarchy.html#module-scipy.cluster.hierarchy
    "scipy.cluster.hierarchy")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.constants`](constants.html#module-scipy.constants "scipy.constants")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.datasets`](datasets.html#module-scipy.datasets "scipy.datasets")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.fft`](fft.html#module-scipy.fft "scipy.fft")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.fftpack`](fftpack.html#module-scipy.fftpack "scipy.fftpack")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.integrate`](integrate.html#module-scipy.integrate "scipy.integrate")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.interpolate`](interpolate.html#module-scipy.interpolate "scipy.interpolate")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.io`](io.html#module-scipy.io "scipy.io")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.io.arff`](io.html#module-scipy.io.arff "scipy.io.arff")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.io.matlab`](io.matlab.html#module-scipy.io.matlab "scipy.io.matlab")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.io.wavfile`](io.html#module-scipy.io.wavfile "scipy.io.wavfile")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg`](linalg.html#module-scipy.linalg "scipy.linalg")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg.blas`](linalg.blas.html#module-scipy.linalg.blas "scipy.linalg.blas")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg.cython_blas`](linalg.cython_blas.html#module-scipy.linalg.cython_blas
    "scipy.linalg.cython_blas")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg.lapack`](linalg.lapack.html#module-scipy.linalg.lapack "scipy.linalg.lapack")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg.cython_lapack`](linalg.cython_lapack.html#module-scipy.linalg.cython_lapack
    "scipy.linalg.cython_lapack")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.linalg.interpolative`](linalg.interpolative.html#module-scipy.linalg.interpolative
    "scipy.linalg.interpolative")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.misc`](misc.html#module-scipy.misc "scipy.misc")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.ndimage`](ndimage.html#module-scipy.ndimage "scipy.ndimage")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.odr`](odr.html#module-scipy.odr "scipy.odr")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize`](optimize.html#module-scipy.optimize "scipy.optimize")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.cython_optimize`](optimize.cython_optimize.html#module-scipy.optimize.cython_optimize
    "scipy.optimize.cython_optimize")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.signal`](signal.html#module-scipy.signal "scipy.signal")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.signal.windows`](signal.windows.html#module-scipy.signal.windows "scipy.signal.windows")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.sparse`](sparse.html#module-scipy.sparse "scipy.sparse")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.sparse.linalg`](sparse.linalg.html#module-scipy.sparse.linalg "scipy.sparse.linalg")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.sparse.csgraph`](sparse.csgraph.html#module-scipy.sparse.csgraph "scipy.sparse.csgraph")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.spatial`](spatial.html#module-scipy.spatial "scipy.spatial")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.spatial.distance`](spatial.distance.html#module-scipy.spatial.distance
    "scipy.spatial.distance")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.spatial.transform`](spatial.transform.html#module-scipy.spatial.transform
    "scipy.spatial.transform")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.special`](special.html#module-scipy.special "scipy.special")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.stats`](stats.html#module-scipy.stats "scipy.stats")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scipy.stats.distributions`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats "scipy.stats.mstats")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.stats.qmc`](stats.qmc.html#module-scipy.stats.qmc "scipy.stats.qmc")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.stats.sampling`](stats.sampling.html#module-scipy.stats.sampling "scipy.stats.sampling")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SciPy structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All SciPy modules should follow the following conventions. In the following,
    a *SciPy module* is defined as a Python package, say `yyy`, that is located in
    the scipy/ directory.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, each SciPy module should be as self-contained as possible. That is,
    it should have minimal dependencies on other packages or modules. Even dependencies
    on other SciPy modules should be kept to a minimum. A dependency on NumPy is of
    course assumed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Directory `yyy/` contains:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A file `meson.build` with build configuration for the submodule.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A directory `tests/` that contains files `test_<name>.py` corresponding to modules
    `yyy/<name>{.py,.so,/}`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Private modules should be prefixed with an underscore `_`, for instance `yyy/_somemodule.py`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-visible functions should have good documentation following the [NumPy documentation
    style](https://numpydoc.readthedocs.io/en/latest/format.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `__init__.py` of the module should contain the main reference documentation
    in its docstring. This is connected to the Sphinx documentation under `doc/` via
    Sphinx’s automodule directive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reference documentation should first give a categorized list of the contents
    of the module using `autosummary::` directives, and after that explain points
    essential for understanding the use of the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tutorial-style documentation with extensive examples should be separate and
    put under `doc/source/tutorial/`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See the existing SciPy submodules for guidance.
  prefs: []
  type: TYPE_NORMAL
