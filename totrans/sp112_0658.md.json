["```py\nscipy.signal.periodogram(x, fs=1.0, window='boxcar', nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=-1)\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> fs = 10e3\n>>> N = 1e5\n>>> amp = 2*np.sqrt(2)\n>>> freq = 1234.0\n>>> noise_power = 0.001 * fs / 2\n>>> time = np.arange(N) / fs\n>>> x = amp*np.sin(2*np.pi*freq*time)\n>>> x += rng.normal(scale=np.sqrt(noise_power), size=time.shape) \n```", "```py\n>>> f, Pxx_den = signal.periodogram(x, fs)\n>>> plt.semilogy(f, Pxx_den)\n>>> plt.ylim([1e-7, 1e2])\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('PSD [V**2/Hz]')\n>>> plt.show() \n```", "```py\n>>> np.mean(Pxx_den[25000:])\n0.000985320699252543 \n```", "```py\n>>> f, Pxx_spec = signal.periodogram(x, fs, 'flattop', scaling='spectrum')\n>>> plt.figure()\n>>> plt.semilogy(f, np.sqrt(Pxx_spec))\n>>> plt.ylim([1e-4, 1e1])\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('Linear spectrum [V RMS]')\n>>> plt.show() \n```", "```py\n>>> np.sqrt(Pxx_spec.max())\n2.0077340678640727 \n```"]