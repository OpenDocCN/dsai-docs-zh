- en: numpy.core.records.fromfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.core.records.fromfile.html](https://numpy.org/doc/1.26/reference/generated/numpy.core.records.fromfile.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create an array from binary file data
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fd**str or file type'
  prefs: []
  type: TYPE_NORMAL
- en: If file is a string or a path-like object then that file is opened, else it
    is assumed to be a file object. The file object must support random access (i.e.
    it must have tell and seek methods).
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: valid dtype for all arrays
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: shape of each array.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Position in the file to start reading from.
  prefs: []
  type: TYPE_NORMAL
- en: '**formats, names, titles, aligned, byteorder**'
  prefs: []
  type: TYPE_NORMAL
- en: If [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype") is `None`, these arguments
    are passed to [`numpy.format_parser`](numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser") to construct a dtype. See that function for detailed documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: np.recarray
  prefs: []
  type: TYPE_NORMAL
- en: record array consisting of data enclosed in file.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
