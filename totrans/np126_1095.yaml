- en: Releasing a version
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/releasing.html](https://numpy.org/doc/1.26/dev/releasing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following guides include detailed information on how to prepare a NumPy
    release.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '## How to prepare a release'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: These instructions give an overview of what is necessary to build binary releases
    for NumPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Current build and release info
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Useful info can be found in the following locations:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**Source tree**'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NumPy docs**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release scripts**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported platforms and versions
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**OS X**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Windows**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Linux**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**BSD / Solaris**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tool chain
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Building source archives and wheels
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Building docs
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to PyPI
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The only application needed for uploading is
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: twine (pip).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Generating author/PR lists
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: gitpython (pip)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pygithub (pip)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is released
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other** Release notes and changelog'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release process
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Agree on a release schedule
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Make sure current branch builds a package correctly
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Check deprecations
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Check the C API version number
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The C API version needs to be tracked in three places
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: numpy/core/setup_common.py
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/code_generators/cversions.txt
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three steps to the process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Check the release notes
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check that the release notes are up-to-date.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: major new features
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deprecated and removed features
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supported Python versions
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for SciPy, supported NumPy version(s)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outlook for the near future
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step directions
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a walkthrough of the NumPy 1.21.0 release on Linux, modified for building
    with GitHub Actions and cibuildwheels and uploading to the [anaconda.org staging
    repository for NumPy](https://anaconda.org/multibuild-wheels-staging/numpy). The
    commands can be copied into the command line, but be sure to replace 1.21.0 by
    the correct version. This should be read together with the [general release guide](#prepare-release).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对在 Linux 上进行的 NumPy 1.21.0 发布的演练，修改为使用 GitHub Actions 和 cibuildwheels 构建，并上传到[NumPy
    的 anaconda.org 暂存库](https://anaconda.org/multibuild-wheels-staging/numpy)。命令可以复制到命令行中，但一定要将
    1.21.0 替换为正确的版本。应与[通用发布指南](#prepare-release)一起阅读。
- en: Facility preparation
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施准备
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始发布之前，请使用 `*_requirements.txt` 文件确保您拥有所需的软件。大多数软件都可以使用 pip 安装，但某些软件将需要 apt-get、dnf
    或您的系统用于软件的任何其他方式。您还需要一个 GitHub 个人访问令牌（PAT）来推送文档。有几种方法可以简化流程：
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 可以设置使用密钥环来存储您的 GitHub 个人访问令牌。在线搜索详细信息。
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 `keyring` 应用程序存储 twine 的 PyPI 密码。查看在线 twine 文档以获取详细信息。
- en: Release preparation
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布准备
- en: Add/drop Python versions
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加/删除 Python 版本
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加或删除 Python 版本时，需要编辑三个文件：
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.github/workflows/wheels.yml # 用于 github cibuildwheel'
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.travis.yml # 用于 cibuildwheel aarch64 构建'
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setup.py # 用于分类器和最低版本检查。'
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支上进行这些更改，并在必要时进行回溯。在提交摘要中使用 *BLD:* 前缀（构建标签）将导致运行轮子构建，以便对更改进行测试。我们目前在第一个 Python
    rc 之后的多个 Linux 平台和 cibuildwheel 支持的 Python 版本中发布轮子。对于 Python 3.11，我们能够在 rc1 公告发布后的一周内发布。
- en: Backport Pull Requests
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回溯拉取请求
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为此发布的更改必须回溯到维护/1.21.x 分支。
- en: Update release documentation
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新发布文档
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布之前通常需要更新或创建四个文档：
- en: The changelog
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更日志
- en: The release-notes
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布说明
- en: The `.mailmap` file
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mailmap` 文件'
- en: The `doc/source/release.rst` file
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件 `doc/source/release.rst`
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改应作为针对维护分支的普通 PR 进行。发布后，除了 `doc/source/release.rst` 外，所有文件都需要向主分支进行向前移植。
- en: Generate the changelog
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成变更日志
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 变更日志是使用变更日志工具生成的：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `GITHUB` 包含您的 GitHub 访问令牌。文本需要检查非标准贡献者名称，并删除 dependabot 条目。还要删除可能存在于 PR 标题中的任何链接，因为它们在
    markdown 中不易转换，用等宽文本替换它们。非标准的贡献者名称应通过更新 `.mailmap` 文件来修复，这是一项艰巨的工作。最好在达到此点之前进行几次试运行，并使用
    GitHub 问题对恶意用户发出提醒，以获取所需信息。
- en: Finish the release notes
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发布说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Check the `pavement.py` file
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Release walkthrough
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Prepare the release commit
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Sanity check:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. Build wheels
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上选择失败的构建，这将带您到该构建的travis作业。点击重新启动作业按钮。
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您需要重新运行作业，则需要删除anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files)中已上传的文件（如果有的话）。旧文件将不会被覆盖。
- en: 3\. Download wheels
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 下载轮子
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有轮子都已成功构建和分阶段时，使用`tools/download-wheels.py`脚本从Anaconda分阶段目录下载它们：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 4\. Generate the README files
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 生成README文件
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要在所有安装程序被下载后完成，但在更新路面文件以进行持续开发之前完成：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5\. 将维护分支重置为开发状态（跳过预发布）
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建下一个版本的发布说明并编辑它们以设置版本。这些说明将是一个框架，内容很少：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的发布说明添加到文档发布列表中，并在`pavement.py`中更新`RELEASE_NOTES`变量：
- en: '[PRE10]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Commit the result:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 提交结果：
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 6\. Upload to PyPI
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6\. 上传到PyPI
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`twine`上传到PyPI。最近的`twine`版本是在最近的PyPI更改后需要的，这里使用的版本是`3.4.1`：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个命令在中间中断，您可能需要选择性地上传剩余的文件，因为PyPI不允许相同的文件上传两次。应该最后上传源文件，以避免在此过程中pip用户访问文件时可能出现的同步问题，这会导致pip从源代码构建而不是下载二进制wheel。PyPI只允许单个源分发，这里我们选择了zip归档。
- en: 7\. Upload files to github
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7\. 将文件上传到github
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases)，那里应该有一个`v1.21.0
    tag`，点击它并点击该标签的编辑按钮。有两种添加文件的方法，使用可编辑的文本窗口和作为二进制上传。首先编辑`release/README.md`，该文件是使用pandoc从rst版本翻译的。需要修复的内容：如果包括，来自changelog的PR行被包裹并需要解包，链接应更改为等宽文本。然后将内容复制到剪贴板并粘贴到文本窗口中。可能需要多次尝试才能看起来正确。然后
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`release/installers/numpy-1.21.0.tar.gz`上传为二进制文件。
- en: Upload `release/README.rst` as a binary file.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`release/README.rst`上传为二进制文件。
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`doc/changelog/1.21.0-changelog.rst`上传为二进制文件。
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是预发布，请勾选预发布按钮。
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底部点击`{发布，更新}发布`按钮。
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 8\. 将文档上传到numpy.org（跳过预发布）
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need a GitHub personal access token to push the update.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个GitHub个人访问令牌来推送更新。
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步仅适用于最终版本，对于预发布和大多数补丁发布，可以跳过。`make merge-doc`将`numpy/doc`仓库克隆到`doc/build/merge`并用新文档更新它：
- en: '[PRE13]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Update the stable link and update:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'commit and push:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Go to your Github fork and make a pull request.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Announce to mailing lists
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Go to GitHub and make a PR.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Update oldest-supported-numpy
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '## Branch walkthrough'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: This guide contains a walkthrough of branching NumPy 1.21.x on Linux. The commands
    can be copied into the command line, but be sure to replace 1.21 and 1.22 by the
    correct versions. It is good practice to make `.mailmap` as current as possible
    before making the branch, that may take several weeks.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: This should be read together with the [general release guide](#prepare-release).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the branch
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'then make the new branch and push it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Prepare the main branch for further development
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Delete the release note fragments:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Check your work, commit it, and push:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now make a pull request.  ## How to prepare a release'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: These instructions give an overview of what is necessary to build binary releases
    for NumPy.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Current build and release info
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Useful info can be found in the following locations:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '**Source tree**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NumPy docs**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release scripts**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported platforms and versions
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**OS X**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Windows**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Linux**'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**BSD / Solaris**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tool chain
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Building source archives and wheels
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Building docs
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to PyPI
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The only application needed for uploading is
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: twine (pip).
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Generating author/PR lists
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: gitpython (pip)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pygithub (pip)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is released
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other** Release notes and changelog'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release process
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Agree on a release schedule
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Make sure current branch builds a package correctly
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Check deprecations
  id: totrans-286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Check the C API version number
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The C API version needs to be tracked in three places
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: numpy/core/setup_common.py
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/code_generators/cversions.txt
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three steps to the process.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Check the release notes
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check that the release notes are up-to-date.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: major new features
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deprecated and removed features
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supported Python versions
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for SciPy, supported NumPy version(s)
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outlook for the near future
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current build and release info
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Useful info can be found in the following locations:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '**Source tree**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NumPy docs**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release scripts**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported platforms and versions
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '**OS X**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Windows**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Linux**'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**BSD / Solaris**'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tool chain
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  id: totrans-332
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Building source archives and wheels
  id: totrans-340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Building docs
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to PyPI
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The only application needed for uploading is
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: twine (pip).
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Generating author/PR lists
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: gitpython (pip)
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pygithub (pip)
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilers
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Building source archives and wheels
  id: totrans-361
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Building docs
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to PyPI
  id: totrans-366
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The only application needed for uploading is
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: twine (pip).
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: Generating author/PR lists
  id: totrans-370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: gitpython (pip)
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pygithub (pip)
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is released
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other** Release notes and changelog'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release process
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Agree on a release schedule
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Make sure current branch builds a package correctly
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Check deprecations
  id: totrans-390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Check the C API version number
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The C API version needs to be tracked in three places
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: numpy/core/setup_common.py
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/code_generators/cversions.txt
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three steps to the process.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Check the release notes
  id: totrans-403
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check that the release notes are up-to-date.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: major new features
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deprecated and removed features
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supported Python versions
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for SciPy, supported NumPy version(s)
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outlook for the near future
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agree on a release schedule
  id: totrans-413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Make sure current branch builds a package correctly
  id: totrans-415
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Check deprecations
  id: totrans-421
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Check the C API version number
  id: totrans-423
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The C API version needs to be tracked in three places
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: numpy/core/setup_common.py
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/code_generators/cversions.txt
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three steps to the process.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Check the release notes
  id: totrans-434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-436
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check that the release notes are up-to-date.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: major new features
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deprecated and removed features
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: supported Python versions
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for SciPy, supported NumPy version(s)
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outlook for the near future
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step directions
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a walkthrough of the NumPy 1.21.0 release on Linux, modified for building
    with GitHub Actions and cibuildwheels and uploading to the [anaconda.org staging
    repository for NumPy](https://anaconda.org/multibuild-wheels-staging/numpy). The
    commands can be copied into the command line, but be sure to replace 1.21.0 by
    the correct version. This should be read together with the [general release guide](#prepare-release).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Facility preparation
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release preparation
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add/drop Python versions
  id: totrans-451
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Backport Pull Requests
  id: totrans-457
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Update release documentation
  id: totrans-459
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: The changelog
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release-notes
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.mailmap` file
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `doc/source/release.rst` file
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: Generate the changelog
  id: totrans-466
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: Finish the release notes
  id: totrans-470
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Check the `pavement.py` file
  id: totrans-473
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Release walkthrough
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Prepare the release commit
  id: totrans-478
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Sanity check:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 2\. Build wheels
  id: totrans-487
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-488
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Download wheels
  id: totrans-497
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 4\. Generate the README files
  id: totrans-500
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Commit the result:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 6\. Upload to PyPI
  id: totrans-510
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Upload files to github
  id: totrans-514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `release/README.rst` as a binary file.
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: You will need a GitHub personal access token to push the update.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Update the stable link and update:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-538
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'commit and push:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Go to your Github fork and make a pull request.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Announce to mailing lists
  id: totrans-546
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-548
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Go to GitHub and make a PR.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Update oldest-supported-numpy
  id: totrans-552
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: Facility preparation
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release preparation
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add/drop Python versions
  id: totrans-559
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: Backport Pull Requests
  id: totrans-565
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Update release documentation
  id: totrans-567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: The changelog
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release-notes
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.mailmap` file
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `doc/source/release.rst` file
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: Generate the changelog
  id: totrans-574
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: Finish the release notes
  id: totrans-578
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: Check the `pavement.py` file
  id: totrans-581
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Add/drop Python versions
  id: totrans-584
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: Backport Pull Requests
  id: totrans-590
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: Update release documentation
  id: totrans-592
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: The changelog
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release-notes
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.mailmap` file
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `doc/source/release.rst` file
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: Generate the changelog
  id: totrans-599
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: Finish the release notes
  id: totrans-603
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: Check the `pavement.py` file
  id: totrans-606
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Generate the changelog
  id: totrans-609
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: Finish the release notes
  id: totrans-613
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: Check the `pavement.py` file
  id: totrans-616
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Release walkthrough
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Prepare the release commit
  id: totrans-621
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Sanity check:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 2\. Build wheels
  id: totrans-630
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-631
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Download wheels
  id: totrans-640
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 4\. Generate the README files
  id: totrans-643
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-646
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Commit the result:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 6\. Upload to PyPI
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Upload files to github
  id: totrans-657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `release/README.rst` as a binary file.
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-664
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: You will need a GitHub personal access token to push the update.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Update the stable link and update:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-681
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'commit and push:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Go to your Github fork and make a pull request.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Announce to mailing lists
  id: totrans-689
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-691
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Go to GitHub and make a PR.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Update oldest-supported-numpy
  id: totrans-695
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Prepare the release commit
  id: totrans-697
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Sanity check:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 2\. Build wheels
  id: totrans-706
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-707
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-716
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Download wheels
  id: totrans-725
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 4\. Generate the README files
  id: totrans-728
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-731
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Commit the result:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 6\. Upload to PyPI
  id: totrans-738
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Upload files to github
  id: totrans-742
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `release/README.rst` as a binary file.
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-749
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Note
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: You will need a GitHub personal access token to push the update.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Update the stable link and update:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-766
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'commit and push:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Go to your Github fork and make a pull request.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Announce to mailing lists
  id: totrans-774
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-776
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Go to GitHub and make a PR.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Update oldest-supported-numpy
  id: totrans-780
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '## Branch walkthrough'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: This guide contains a walkthrough of branching NumPy 1.21.x on Linux. The commands
    can be copied into the command line, but be sure to replace 1.21 and 1.22 by the
    correct versions. It is good practice to make `.mailmap` as current as possible
    before making the branch, that may take several weeks.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: This should be read together with the [general release guide](#prepare-release).
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  id: totrans-785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the branch
  id: totrans-786
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'then make the new branch and push it:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Prepare the main branch for further development
  id: totrans-795
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Delete the release note fragments:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Check your work, commit it, and push:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Now make a pull request.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the branch
  id: totrans-810
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'then make the new branch and push it:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Prepare the main branch for further development
  id: totrans-819
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Delete the release note fragments:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Check your work, commit it, and push:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Now make a pull request.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: Make the branch
  id: totrans-833
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'then make the new branch and push it:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Prepare the main branch for further development
  id: totrans-842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Delete the release note fragments:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Check your work, commit it, and push:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Now make a pull request.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
