["```py\nnumpy.seterrcall(func)\n```", "```py\n[0 0 0 0 divide over under invalid] \n```", "```py\n>>> def err_handler(type, flag):\n...     print(\"Floating point error (%s), with flag %s\" % (type, flag))\n... \n```", "```py\n>>> saved_handler = np.seterrcall(err_handler)\n>>> save_err = np.seterr(all='call') \n```", "```py\n>>> np.array([1, 2, 3]) / 0.0\nFloating point error (divide by zero), with flag 1\narray([inf, inf, inf]) \n```", "```py\n>>> np.seterrcall(saved_handler)\n<function err_handler at 0x...>\n>>> np.seterr(**save_err)\n{'divide': 'call', 'over': 'call', 'under': 'call', 'invalid': 'call'} \n```", "```py\n>>> class Log:\n...     def write(self, msg):\n...         print(\"LOG: %s\" % msg)\n... \n```", "```py\n>>> log = Log()\n>>> saved_handler = np.seterrcall(log)\n>>> save_err = np.seterr(all='log') \n```", "```py\n>>> np.array([1, 2, 3]) / 0.0\nLOG: Warning: divide by zero encountered in divide\narray([inf, inf, inf]) \n```", "```py\n>>> np.seterrcall(saved_handler)\n<numpy.core.numeric.Log object at 0x...>\n>>> np.seterr(**save_err)\n{'divide': 'log', 'over': 'log', 'under': 'log', 'invalid': 'log'} \n```"]