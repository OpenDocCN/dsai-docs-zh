- en: pandas.io.formats.style.Styler.format_index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.format_index.html](https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.format_index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Format the text display value of index labels or column headers.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**formatter**str, callable, dict or None'
  prefs: []
  type: TYPE_NORMAL
- en: Object to define how values are displayed. See notes.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0, “index”, 1, “columns”}'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to apply the formatter to the index or column headers.
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int, str, list'
  prefs: []
  type: TYPE_NORMAL
- en: The level(s) over which to apply the generic formatter.
  prefs: []
  type: TYPE_NORMAL
- en: '**na_rep**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Representation for missing values. If `na_rep` is None, no special formatting
    is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Floating point precision to use for display purposes, if not determined by the
    specified `formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: '**decimal**str, default “.”'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as decimal separator for floats, complex and integers.
  prefs: []
  type: TYPE_NORMAL
- en: '**thousands**str, optional, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as thousands separator for floats, complex and integers.
  prefs: []
  type: TYPE_NORMAL
- en: '**escape**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Use ‘html’ to replace the characters `&`, `<`, `>`, `'`, and `"` in cell display
    string with HTML-safe sequences. Use ‘latex’ to replace the characters `&`, `%`,
    `$`, `#`, `_`, `{`, `}`, `~`, `^`, and `\` in the cell display string with LaTeX-safe
    sequences. Escaping is done before `formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: '**hyperlinks**{“html”, “latex”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Convert string patterns containing [https://](https://), [http://](http://),
    [ftp://](ftp://) or www. to HTML <a> tags as clickable URL hyperlinks if “html”,
    or LaTeX href commands if “latex”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Styler
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Styler.format`](pandas.io.formats.style.Styler.format.html#pandas.io.formats.style.Styler.format
    "pandas.io.formats.style.Styler.format")'
  prefs: []
  type: TYPE_NORMAL
- en: Format the text display value of data cells.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method assigns a formatting function, `formatter`, to each level label
    in the DataFrame’s index or column headers. If `formatter` is `None`, then the
    default formatter is used. If a callable then that function should take a label
    value as input and return a displayable representation, such as a string. If `formatter`
    is given as a string this is assumed to be a valid Python format specification
    and is wrapped to a callable as `string.format(x)`. If a `dict` is given, keys
    should correspond to MultiIndex level numbers or names, and values should be string
    or callable, as above.
  prefs: []
  type: TYPE_NORMAL
- en: The default formatter currently expresses floats and complex numbers with the
    pandas display precision unless using the `precision` argument here. The default
    formatter does not adjust the representation of missing values unless the `na_rep`
    argument is used.
  prefs: []
  type: TYPE_NORMAL
- en: The `level` argument defines which levels of a MultiIndex to apply the method
    to. If the `formatter` argument is given in dict form but does not include all
    levels within the level argument then these unspecified levels will have the default
    formatter applied. Any levels in the formatter dict specifically excluded from
    the level argument will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: When using a `formatter` string the dtypes must be compatible, otherwise a ValueError
    will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Styler.format_index is ignored when using the output format Styler.to_excel,
    since Excel and Python have inherrently different formatting structures. However,
    it is possible to use the number-format pseudo CSS attribute to force Excel permissible
    formatting. See documentation for Styler.format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Using `na_rep` and `precision` with the default `formatter`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` specification on consistent dtypes in a level
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using the default `formatter` for unspecified levels
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using a callable `formatter` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` with HTML `escape` and `na_rep`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` with LaTeX `escape`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
