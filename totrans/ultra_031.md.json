["```py\n`from ultralytics import YOLOWorld  # Load a pretrained YOLOv8s-worldv2 model model = YOLOWorld(\"yolov8s-worldv2.pt\")  # Train the model on the COCO8 example dataset for 100 epochs results = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640)  # Run inference with the YOLOv8n model on the 'bus.jpg' image results = model(\"path/to/bus.jpg\")` \n```", "```py\n`# Load a pretrained YOLOv8s-worldv2 model and train it on the COCO8 example dataset for 100 epochs yolo  train  model=yolov8s-worldv2.yaml  data=coco8.yaml  epochs=100  imgsz=640` \n```", "```py\n`from ultralytics import YOLOWorld  # Initialize a YOLO-World model model = YOLOWorld(\"yolov8s-world.pt\")  # or select yolov8m/l-world.pt for different sizes  # Execute inference with the YOLOv8s-world model on the specified image results = model.predict(\"path/to/image.jpg\")  # Show results results[0].show()` \n```", "```py\n`# Perform object detection using a YOLO-World model yolo  predict  model=yolov8s-world.pt  source=path/to/image.jpg  imgsz=640` \n```", "```py\n`from ultralytics import YOLO  # Create a YOLO-World model model = YOLO(\"yolov8s-world.pt\")  # or select yolov8m/l-world.pt for different sizes  # Conduct model validation on the COCO8 example dataset metrics = model.val(data=\"coco8.yaml\")` \n```", "```py\n`# Validate a YOLO-World model on the COCO8 dataset with a specified image size yolo  val  model=yolov8s-world.pt  data=coco8.yaml  imgsz=640` \n```", "```py\n`from ultralytics import YOLO  # Create a YOLO-World model model = YOLO(\"yolov8s-world.pt\")  # or select yolov8m/l-world.pt for different sizes  # Track with a YOLO-World model on a video results = model.track(source=\"path/to/video.mp4\")` \n```", "```py\n`# Track with a YOLO-World model on the video with a specified image size yolo  track  model=yolov8s-world.pt  imgsz=640  source=\"path/to/video/file.mp4\"` \n```", "```py\n`from ultralytics import YOLO  # Initialize a YOLO-World model model = YOLO(\"yolov8s-world.pt\")  # or choose yolov8m/l-world.pt  # Define custom classes model.set_classes([\"person\", \"bus\"])  # Execute prediction for specified categories on an image results = model.predict(\"path/to/image.jpg\")  # Show results results[0].show()` \n```", "```py\n`from ultralytics import YOLO  # Initialize a YOLO-World model model = YOLO(\"yolov8s-world.pt\")  # or select yolov8m/l-world.pt  # Define custom classes model.set_classes([\"person\", \"bus\"])  # Save the model with the defined offline vocabulary model.save(\"custom_yolov8s.pt\")` \n```", "```py\n`from ultralytics import YOLO  # Load your custom model model = YOLO(\"custom_yolov8s.pt\")  # Run inference to detect your custom classes results = model.predict(\"path/to/image.jpg\")  # Show results results[0].show()` \n```", "```py\n`from ultralytics import YOLOWorld from ultralytics.models.yolo.world.train_world import WorldTrainerFromScratch  data = dict(     train=dict(         yolo_data=[\"Objects365.yaml\"],         grounding_data=[             dict(                 img_path=\"../datasets/flickr30k/images\",                 json_file=\"../datasets/flickr30k/final_flickr_separateGT_train.json\",             ),             dict(                 img_path=\"../datasets/GQA/images\",                 json_file=\"../datasets/GQA/final_mixed_train_no_coco.json\",             ),         ],     ),     val=dict(yolo_data=[\"lvis.yaml\"]), ) model = YOLOWorld(\"yolov8s-worldv2.yaml\") model.train(data=data, batch=128, epochs=100, trainer=WorldTrainerFromScratch)` \n```", "```py\n`@article{cheng2024yolow, title={YOLO-World: Real-Time Open-Vocabulary Object Detection}, author={Cheng, Tianheng and Song, Lin and Ge, Yixiao and Liu, Wenyu and Wang, Xinggang and Shan, Ying}, journal={arXiv preprint arXiv:2401.17270}, year={2024} }` \n```", "```py\n`from ultralytics import YOLOWorld  # Initialize a YOLO-World model model = YOLOWorld(\"yolov8s-world.pt\")  # Define custom classes model.set_classes([\"person\", \"bus\"])  # Execute prediction on an image results = model.predict(\"path/to/image.jpg\")  # Show results results[0].show()` \n```", "```py\n`from ultralytics import YOLOWorld  # Load a pretrained YOLOv8s-worldv2 model model = YOLOWorld(\"yolov8s-worldv2.pt\")  # Train the model on the COCO8 dataset for 100 epochs results = model.train(data=\"coco8.yaml\", epochs=100, imgsz=640)` \n```", "```py\n`yolo  train  model=yolov8s-worldv2.yaml  data=coco8.yaml  epochs=100  imgsz=640` \n```", "```py\n`from ultralytics import YOLOWorld from ultralytics.models.yolo.world.train_world import WorldTrainerFromScratch  data = {     \"train\": {         \"yolo_data\": [\"Objects365.yaml\"],         \"grounding_data\": [             {                 \"img_path\": \"../datasets/flickr30k/images\",                 \"json_file\": \"../datasets/flickr30k/final_flickr_separateGT_train.json\",             },             {                 \"img_path\": \"../datasets/GQA/images\",                 \"json_file\": \"../datasets/GQA/final_mixed_train_no_coco.json\",             },         ],     },     \"val\": {\"yolo_data\": [\"lvis.yaml\"]}, }  model = YOLOWorld(\"yolov8s-worldv2.yaml\") model.train(data=data, batch=128, epochs=100, trainer=WorldTrainerFromScratch)` \n```"]