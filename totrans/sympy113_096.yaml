- en: abc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/abc.html](https://docs.sympy.org/latest/modules/abc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module exports all latin and greek letters as Symbols, so you can conveniently
    do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: instead of the slightly more clunky-looking
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Caveats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. As of the time of writing this, the names `O`, `S`, `I`, `N`, `E`, and `Q`
    are colliding with names defined in SymPy. If you import them from both `sympy.abc`
    and `sympy`, the second import will “win”. This is an issue only for * imports,
    which should only be used for short-lived code such as interactive sessions and
    throwaway scripts that do not survive until the next SymPy upgrade, where `sympy`
    may contain a different set of names.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. This module does not define symbol names on demand, i.e. `from sympy.abc
    import foo` will be reported as an error because `sympy.abc` does not contain
    the name `foo`. To get a symbol named `foo`, you still need to use `Symbol('foo')`
    or `symbols('foo')`. You can freely mix usage of `sympy.abc` and `Symbol`/`symbols`,
    though sticking with one and only one way to get the symbols does tend to make
    the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: The module also defines some special names to help detect which names clash
    with the default SymPy namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '`_clash1` defines all the single letter variables that clash with SymPy objects;
    `_clash2` defines the multi-letter clashing symbols; and `_clash` is the union
    of both. These can be passed for `locals` during sympification if one desires
    Symbols rather than the non-Symbol objects for those names.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
