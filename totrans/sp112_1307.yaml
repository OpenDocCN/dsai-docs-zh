- en: scipy.stats.pearsonr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pearson correlation coefficient and p-value for testing non-correlation.
  prefs: []
  type: TYPE_NORMAL
- en: The Pearson correlation coefficient [[1]](#r8c6348c62346-1) measures the linear
    relationship between two datasets. Like other correlation coefficients, this one
    varies between -1 and +1 with 0 implying no correlation. Correlations of -1 or
    +1 imply an exact linear relationship. Positive correlations imply that as x increases,
    so does y. Negative correlations imply that as x increases, y decreases.
  prefs: []
  type: TYPE_NORMAL
- en: This function also performs a test of the null hypothesis that the distributions
    underlying the samples are uncorrelated and normally distributed. (See Kowalski
    [[3]](#r8c6348c62346-3) for a discussion of the effects of non-normality of the
    input on the distribution of the correlation coefficient.) The p-value roughly
    indicates the probability of an uncorrelated system producing datasets that have
    a Pearson correlation at least as extreme as the one computed from these datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**alternative**{‘two-sided’, ‘greater’, ‘less’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defines the alternative hypothesis. Default is ‘two-sided’. The following options
    are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘two-sided’: the correlation is nonzero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘less’: the correlation is negative (less than zero)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘greater’: the correlation is positive (greater than zero)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**ResamplingMethod, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the method used to compute the p-value. If *method* is an instance of
    [`PermutationMethod`](scipy.stats.PermutationMethod.html#scipy.stats.PermutationMethod
    "scipy.stats.PermutationMethod")/[`MonteCarloMethod`](scipy.stats.MonteCarloMethod.html#scipy.stats.MonteCarloMethod
    "scipy.stats.MonteCarloMethod"), the p-value is computed using [`scipy.stats.permutation_test`](scipy.stats.permutation_test.html#scipy.stats.permutation_test
    "scipy.stats.permutation_test")/[`scipy.stats.monte_carlo_test`](scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test
    "scipy.stats.monte_carlo_test") with the provided configuration options and other
    appropriate settings. Otherwise, the p-value is computed as documented in the
    notes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**[`PearsonRResult`](scipy.stats._result_classes.PearsonRResult.html#scipy.stats._result_classes.PearsonRResult
    "scipy.stats._result_classes.PearsonRResult")'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: statisticfloat
  prefs: []
  type: TYPE_NORMAL
- en: Pearson product-moment correlation coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: pvaluefloat
  prefs: []
  type: TYPE_NORMAL
- en: The p-value associated with the chosen alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object has the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: confidence_interval(confidence_level, method)
  prefs: []
  type: TYPE_NORMAL
- en: This computes the confidence interval of the correlation coefficient *statistic*
    for the given confidence level. The confidence interval is returned in a `namedtuple`
    with fields *low* and *high*. If *method* is not provided, the confidence interval
    is computed using the Fisher transformation [[1]](#r8c6348c62346-1). If *method*
    is an instance of [`BootstrapMethod`](scipy.stats.BootstrapMethod.html#scipy.stats.BootstrapMethod
    "scipy.stats.BootstrapMethod"), the confidence interval is computed using [`scipy.stats.bootstrap`](scipy.stats.bootstrap.html#scipy.stats.bootstrap
    "scipy.stats.bootstrap") with the provided configuration options and other appropriate
    settings. In some cases, confidence limits may be NaN due to a degenerate resample,
    and this is typical for very small samples (~6 observations).
  prefs: []
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConstantInputWarning`](scipy.stats.ConstantInputWarning.html#scipy.stats.ConstantInputWarning
    "scipy.stats.ConstantInputWarning")'
  prefs: []
  type: TYPE_NORMAL
- en: Raised if an input is a constant array. The correlation coefficient is not defined
    in this case, so `np.nan` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[`NearConstantInputWarning`](scipy.stats.NearConstantInputWarning.html#scipy.stats.NearConstantInputWarning
    "scipy.stats.NearConstantInputWarning")'
  prefs: []
  type: TYPE_NORMAL
- en: Raised if an input is “nearly” constant. The array `x` is considered nearly
    constant if `norm(x - mean(x)) < 1e-13 * abs(mean(x))`. Numerical errors in the
    calculation `x - mean(x)` in this case might result in an inaccurate calculation
    of r.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`spearmanr`](scipy.stats.spearmanr.html#scipy.stats.spearmanr "scipy.stats.spearmanr")'
  prefs: []
  type: TYPE_NORMAL
- en: Spearman rank-order correlation coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[`kendalltau`](scipy.stats.kendalltau.html#scipy.stats.kendalltau "scipy.stats.kendalltau")'
  prefs: []
  type: TYPE_NORMAL
- en: Kendall’s tau, a correlation measure for ordinal data.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The correlation coefficient is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: \[r = \frac{\sum (x - m_x) (y - m_y)} {\sqrt{\sum (x - m_x)^2 \sum (y - m_y)^2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m_x\) is the mean of the vector x and \(m_y\) is the mean of the vector
    y.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the assumption that x and y are drawn from independent normal distributions
    (so the population correlation coefficient is 0), the probability density function
    of the sample correlation coefficient r is ([[1]](#r8c6348c62346-1), [[2]](#r8c6348c62346-2)):'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(r) = \frac{{(1-r^2)}^{n/2-2}}{\mathrm{B}(\frac{1}{2},\frac{n}{2}-1)}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where n is the number of samples, and B is the beta function. This is sometimes
    referred to as the exact distribution of r. This is the distribution that is used
    in [`pearsonr`](#scipy.stats.pearsonr "scipy.stats.pearsonr") to compute the p-value
    when the *method* parameter is left at its default value (None). The distribution
    is a beta distribution on the interval [-1, 1], with equal shape parameters a
    = b = n/2 - 1\. In terms of SciPy’s implementation of the beta distribution, the
    distribution of r is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The default p-value returned by [`pearsonr`](#scipy.stats.pearsonr "scipy.stats.pearsonr")
    is a two-sided p-value. For a given sample with correlation coefficient r, the
    p-value is the probability that abs(r’) of a random sample x’ and y’ drawn from
    the population with zero correlation would be greater than or equal to abs(r).
    In terms of the object `dist` shown above, the p-value for a given r and length
    n can be computed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When n is 2, the above continuous distribution is not well-defined. One can
    interpret the limit of the beta distribution as the shape parameters a and b approach
    a = b = 0 as a discrete distribution with equal probability masses at r = 1 and
    r = -1\. More directly, one can observe that, given the data x = [x1, x2] and
    y = [y1, y2], and assuming x1 != x2 and y1 != y2, the only possible values for
    r are 1 and -1\. Because abs(r’) for any sample x’ and y’ with length 2 will be
    1, the two-sided p-value for a sample of length 2 is always 1.
  prefs: []
  type: TYPE_NORMAL
- en: For backwards compatibility, the object that is returned also behaves like a
    tuple of length two that holds the statistic and the p-value.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1] ([1](#id1),[2](#id3),[3](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: “Pearson correlation coefficient”, Wikipedia, [https://en.wikipedia.org/wiki/Pearson_correlation_coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient)
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: Student, “Probable error of a correlation coefficient”, Biometrika, Volume 6,
    Issue 2-3, 1 September 1908, pp. 302-310.
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: C. J. Kowalski, “On the Effects of Non-Normality on the Distribution of the
    Sample Product-Moment Correlation Coefficient” Journal of the Royal Statistical
    Society. Series C (Applied Statistics), Vol. 21, No. 1 (1972), pp. 1-12.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform an exact permutation version of the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform the test under the null hypothesis that the data were drawn from
    *uniform* distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To produce an asymptotic 90% confidence interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And for a bootstrap confidence interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There is a linear dependence between x and y if y = a + b*x + e, where a,b are
    constants and e is a random error term, assumed to be independent of x. For simplicity,
    assume that x is standard normal, a=0, b=1 and let e follow a normal distribution
    with mean zero and standard deviation s>0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This should be close to the exact value given by
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For s=0.5, we observe a high level of correlation. In general, a large variance
    of the noise reduces the correlation, while the correlation approaches one as
    the variance of the error goes to zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to keep in mind that no correlation does not imply independence
    unless (x, y) is jointly normal. Correlation can even be zero when there is a
    very simple dependence structure: if X follows a standard normal distribution,
    let y = abs(x). Note that the correlation between x and y is zero. Indeed, since
    the expectation of x is zero, cov(x, y) = E[x*y]. By definition, this equals E[x*abs(x)]
    which is zero by symmetry. The following lines of code illustrate this observation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A non-zero correlation coefficient can be misleading. For example, if X has
    a standard normal distribution, define y = x if x < 0 and y = 0 otherwise. A simple
    calculation shows that corr(x, y) = sqrt(2/Pi) = 0.797…, implying a high level
    of correlation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is unintuitive since there is no dependence of x and y if x is larger than
    zero which happens in about half of the cases if we sample x and y.
  prefs: []
  type: TYPE_NORMAL
