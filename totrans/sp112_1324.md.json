["```py\nscipy.stats.mannwhitneyu(x, y, use_continuity=True, alternative='two-sided', axis=0, method='auto', *, nan_policy='propagate', keepdims=False)\n```", "```py\n>>> males = [19, 22, 16, 29, 24]\n>>> females = [20, 11, 17, 12] \n```", "```py\n>>> from scipy.stats import mannwhitneyu\n>>> U1, p = mannwhitneyu(males, females, method=\"exact\")\n>>> print(U1)\n17.0 \n```", "```py\n>>> nx, ny = len(males), len(females)\n>>> U2 = nx*ny - U1\n>>> print(U2)\n3.0 \n```", "```py\n>>> print(p)\n0.1111111111111111 \n```", "```py\n>>> _, pnorm = mannwhitneyu(males, females, method=\"asymptotic\")\n>>> print(pnorm)\n0.11134688653314041 \n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import norm\n>>> U = min(U1, U2)\n>>> N = nx + ny\n>>> z = (U - nx*ny/2 + 0.5) / np.sqrt(nx*ny * (N + 1)/ 12)\n>>> p = 2 * norm.cdf(z)  # use CDF to get p-value from smaller statistic\n>>> print(p)\n0.11134688653314041 \n```", "```py\n>>> _, pnorm = mannwhitneyu(males, females, use_continuity=False,\n...                         method=\"asymptotic\")\n>>> print(pnorm)\n0.0864107329737 \n```", "```py\n>>> res = mannwhitneyu(females, males, alternative=\"less\", method=\"exact\")\n>>> print(res)\nMannwhitneyuResult(statistic=3.0, pvalue=0.05555555555555555) \n```", "```py\n>>> from scipy.stats import ttest_ind\n>>> res = ttest_ind(females, males, alternative=\"less\")\n>>> print(res)\nTtest_indResult(statistic=-2.239334696520584, pvalue=0.030068441095757924) \n```"]