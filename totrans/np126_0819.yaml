- en: numpy.arctan2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.arctan2.html](https://numpy.org/doc/1.26/reference/generated/numpy.arctan2.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Element-wise arc tangent of `x1/x2` choosing the quadrant correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quadrant (i.e., branch) is chosen so that `arctan2(x1, x2)` is the signed
    angle in radians between the ray ending at the origin and passing through the
    point (1,0), and the ray ending at the origin and passing through the point (*x2*,
    *x1*). (Note the role reversal: the “*y*-coordinate” is the first function parameter,
    the “*x*-coordinate” is the second.) By IEEE convention, this function is defined
    for *x2* = +/-0 and for either or both of *x1* and *x2* = +/-inf (see Notes for
    specific values).'
  prefs: []
  type: TYPE_NORMAL
- en: This function is not defined for complex-valued arguments; for the so-called
    argument of complex values, use [`angle`](numpy.angle.html#numpy.angle "numpy.angle").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like, real-valued'
  prefs: []
  type: TYPE_NORMAL
- en: '*y*-coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like, real-valued'
  prefs: []
  type: TYPE_NORMAL
- en: '*x*-coordinates. If `x1.shape != x2.shape`, they must be broadcastable to a
    common shape (which becomes the shape of the output).'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of angles in radians, in the range `[-pi, pi]`. This is a scalar if both
    *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`arctan`](numpy.arctan.html#numpy.arctan "numpy.arctan"), [`tan`](numpy.tan.html#numpy.tan
    "numpy.tan"), [`angle`](numpy.angle.html#numpy.angle "numpy.angle")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '*arctan2* is identical to the *atan2* function of the underlying C library.
    The following special values are defined in the C standard: [[1]](#r73eacd397847-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '| *x1* | *x2* | *arctan2(x1,x2)* |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| +/- 0 | +0 | +/- 0 |'
  prefs: []
  type: TYPE_TB
- en: '| +/- 0 | -0 | +/- pi |'
  prefs: []
  type: TYPE_TB
- en: '| > 0 | +/-inf | +0 / +pi |'
  prefs: []
  type: TYPE_TB
- en: '| < 0 | +/-inf | -0 / -pi |'
  prefs: []
  type: TYPE_TB
- en: '| +/-inf | +inf | +/- (pi/4) |'
  prefs: []
  type: TYPE_TB
- en: '| +/-inf | -inf | +/- (3*pi/4) |'
  prefs: []
  type: TYPE_TB
- en: Note that +0 and -0 are distinct floating point numbers, as are +inf and -inf.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: ISO/IEC standard 9899:1999, “Programming language C.”
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider four points in different quadrants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the order of the parameters. [`arctan2`](#numpy.arctan2 "numpy.arctan2")
    is defined also when *x2* = 0 and at several other special points, obtaining values
    in the range `[-pi, pi]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
