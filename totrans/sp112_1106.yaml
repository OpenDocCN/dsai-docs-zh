- en: scipy.stats.rv_continuous
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A generic continuous random variable class meant for subclassing.
  prefs: []
  type: TYPE_NORMAL
- en: '[`rv_continuous`](#scipy.stats.rv_continuous "scipy.stats.rv_continuous") is
    a base class to construct specific distribution classes and instances for continuous
    random variables. It cannot be used directly as a distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**momtype**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of generic moment calculation to use: 0 for pdf, 1 (default) for ppf.'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Lower bound of the support of the distribution, default is minus infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '**b**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Upper bound of the support of the distribution, default is plus infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The tolerance for fixed point calculation for generic ppf.
  prefs: []
  type: TYPE_NORMAL
- en: '**badvalue**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value in a result arrays that indicates a value that for which some argument
    restriction is violated, default is np.nan.
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the instance. This string is used to construct the default example
    for distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '**longname**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'This string is used as part of the first line of the docstring returned when
    a subclass has no docstring of its own. Note: *longname* exists for backwards
    compatibility, do not use for new subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**shapes**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the distribution. For example `"m, n"` for a distribution that
    takes two integers as the two shape arguments for all its methods. If not provided,
    shape parameters will be inferred from the signature of the private methods, `_pdf`
    and `_cdf` of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Public methods of an instance of a distribution class (e.g., `pdf`, `cdf`) check
    their arguments and pass valid arguments to private, computational methods (`_pdf`,
    `_cdf`). For `pdf(x)`, `x` is valid if it is within the support of the distribution.
    Whether a shape parameter is valid is decided by an `_argcheck` method (which
    defaults to checking that its arguments are strictly positive.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Subclassing**'
  prefs: []
  type: TYPE_NORMAL
- en: New random variables can be defined by subclassing the [`rv_continuous`](#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class and re-defining at least the `_pdf` or the
    `_cdf` method (normalized to location 0 and scale 1).
  prefs: []
  type: TYPE_NORMAL
- en: If positive argument checking is not correct for your RV then you will also
    need to re-define the `_argcheck` method.
  prefs: []
  type: TYPE_NORMAL
- en: For most of the scipy.stats distributions, the support interval doesn’t depend
    on the shape parameters. `x` being in the support interval is equivalent to `self.a
    <= x <= self.b`. If either of the endpoints of the support do depend on the shape
    parameters, then i) the distribution must implement the `_get_support` method;
    and ii) those dependent endpoints must be omitted from the distribution’s call
    to the `rv_continuous` initializer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct, but potentially slow defaults exist for the remaining methods but
    for speed and/or accuracy you can over-ride:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The default method `_rvs` relies on the inverse of the cdf, `_ppf`, applied
    to a uniform random variate. In order to generate random variates efficiently,
    either the default `_ppf` needs to be overwritten (e.g. if the inverse cdf can
    expressed in an explicit form) or a sampling method needs to be implemented in
    a custom `_rvs` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If possible, you should override `_isf`, `_sf` or `_logsf`. The main reason
    would be to improve numerical accuracy: for example, the survival function `_sf`
    is computed as `1 - _cdf` which can result in loss of precision if `_cdf(x)` is
    close to one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Methods that can be overwritten by subclasses**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are additional (internal and private) generic methods that can be useful
    for cross-checking and for debugging, but might work in all cases when directly
    called.
  prefs: []
  type: TYPE_NORMAL
- en: 'A note on `shapes`: subclasses need not specify them explicitly. In this case,
    *shapes* will be automatically deduced from the signatures of the overridden methods
    ([`pdf`](scipy.stats.rv_continuous.pdf.html#scipy.stats.rv_continuous.pdf "scipy.stats.rv_continuous.pdf"),
    [`cdf`](scipy.stats.rv_continuous.cdf.html#scipy.stats.rv_continuous.cdf "scipy.stats.rv_continuous.cdf")
    etc). If, for some reason, you prefer to avoid relying on introspection, you can
    specify `shapes` explicitly as an argument to the instance constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frozen Distributions**'
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you must provide shape parameters (and, optionally, location and scale
    parameters to each call of a method of a distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the object may be called (as a function) to fix the shape, location,
    and scale parameters returning a “frozen” continuous RV object:'
  prefs: []
  type: TYPE_NORMAL
- en: rv = generic(<shape(s)>, loc=0, scale=1)
  prefs: []
  type: TYPE_NORMAL
- en: '*rv_frozen* object with the same methods but holding the given shape, location,
    and scale fixed'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statistics**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Statistics are computed using numerical integration by default. For speed you
    can redefine this using `_stats`:'
  prefs: []
  type: TYPE_NORMAL
- en: take shape parameters and return mu, mu2, g1, g2
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If you can’t compute one of these, return it as None
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Can also be defined with a keyword argument `moments`, which is a string composed
    of “m”, “v”, “s”, and/or “k”. Only the components appearing in string should be
    computed and returned in the order “m”, “v”, “s”, or “k” with missing values returned
    as None.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, you can override `_munp`, which takes `n` and shape parameters
    and returns the n-th non-central moment of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deepcopying / Pickling**'
  prefs: []
  type: TYPE_NORMAL
- en: If a distribution or frozen distribution is deepcopied (pickled/unpickled, etc.),
    any underlying random number generator is deepcopied with it. An implication is
    that if a distribution relies on the singleton RandomState before copying, it
    will rely on a copy of that random state after copying, and `np.random.seed` will
    no longer control the state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new Gaussian distribution, we would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`scipy.stats` distributions are *instances*, so here we subclass [`rv_continuous`](#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") and create an instance. With this, we now have a
    fully functional distribution with all relevant methods automagically generated
    by the framework.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that above we defined a standard normal distribution, with zero mean and
    unit variance. Shifting and scaling of the distribution can be done by using `loc`
    and `scale` parameters: `gaussian.pdf(x, loc, scale)` essentially computes `y
    = (x - loc) / scale` and `gaussian._pdf(y) / scale`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`random_state`](scipy.stats.rv_continuous.random_state.html#scipy.stats.rv_continuous.random_state
    "scipy.stats.rv_continuous.random_state")'
  prefs: []
  type: TYPE_NORMAL
- en: Get or set the generator object for generating random variates.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`rvs`](scipy.stats.rv_continuous.rvs.html#scipy.stats.rv_continuous.rvs
    "scipy.stats.rv_continuous.rvs")(*args, **kwds) | Random variates of given type.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdf`](scipy.stats.rv_continuous.pdf.html#scipy.stats.rv_continuous.pdf
    "scipy.stats.rv_continuous.pdf")(x, *args, **kwds) | Probability density function
    at x of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logpdf`](scipy.stats.rv_continuous.logpdf.html#scipy.stats.rv_continuous.logpdf
    "scipy.stats.rv_continuous.logpdf")(x, *args, **kwds) | Log of the probability
    density function at x of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cdf`](scipy.stats.rv_continuous.cdf.html#scipy.stats.rv_continuous.cdf
    "scipy.stats.rv_continuous.cdf")(x, *args, **kwds) | Cumulative distribution function
    of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logcdf`](scipy.stats.rv_continuous.logcdf.html#scipy.stats.rv_continuous.logcdf
    "scipy.stats.rv_continuous.logcdf")(x, *args, **kwds) | Log of the cumulative
    distribution function at x of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sf`](scipy.stats.rv_continuous.sf.html#scipy.stats.rv_continuous.sf "scipy.stats.rv_continuous.sf")(x, *args, **kwds)
    | Survival function (1 - [`cdf`](scipy.stats.rv_continuous.cdf.html#scipy.stats.rv_continuous.cdf
    "scipy.stats.rv_continuous.cdf")) at x of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logsf`](scipy.stats.rv_continuous.logsf.html#scipy.stats.rv_continuous.logsf
    "scipy.stats.rv_continuous.logsf")(x, *args, **kwds) | Log of the survival function
    of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ppf`](scipy.stats.rv_continuous.ppf.html#scipy.stats.rv_continuous.ppf
    "scipy.stats.rv_continuous.ppf")(q, *args, **kwds) | Percent point function (inverse
    of [`cdf`](scipy.stats.rv_continuous.cdf.html#scipy.stats.rv_continuous.cdf "scipy.stats.rv_continuous.cdf"))
    at q of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isf`](scipy.stats.rv_continuous.isf.html#scipy.stats.rv_continuous.isf
    "scipy.stats.rv_continuous.isf")(q, *args, **kwds) | Inverse survival function
    (inverse of [`sf`](scipy.stats.rv_continuous.sf.html#scipy.stats.rv_continuous.sf
    "scipy.stats.rv_continuous.sf")) at q of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`moment`](scipy.stats.rv_continuous.moment.html#scipy.stats.rv_continuous.moment
    "scipy.stats.rv_continuous.moment")(order, *args, **kwds) | non-central moment
    of distribution of specified order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stats`](scipy.stats.rv_continuous.stats.html#scipy.stats.rv_continuous.stats
    "scipy.stats.rv_continuous.stats")(*args, **kwds) | Some statistics of the given
    RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`entropy`](scipy.stats.rv_continuous.entropy.html#scipy.stats.rv_continuous.entropy
    "scipy.stats.rv_continuous.entropy")(*args, **kwds) | Differential entropy of
    the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expect`](scipy.stats.rv_continuous.expect.html#scipy.stats.rv_continuous.expect
    "scipy.stats.rv_continuous.expect")([func, args, loc, scale, lb, ub, ...]) | Calculate
    expected value of a function with respect to the distribution by numerical integration.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`median`](scipy.stats.rv_continuous.median.html#scipy.stats.rv_continuous.median
    "scipy.stats.rv_continuous.median")(*args, **kwds) | Median of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.stats.rv_continuous.mean.html#scipy.stats.rv_continuous.mean
    "scipy.stats.rv_continuous.mean")(*args, **kwds) | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](scipy.stats.rv_continuous.std.html#scipy.stats.rv_continuous.std
    "scipy.stats.rv_continuous.std")(*args, **kwds) | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](scipy.stats.rv_continuous.var.html#scipy.stats.rv_continuous.var
    "scipy.stats.rv_continuous.var")(*args, **kwds) | Variance of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`interval`](scipy.stats.rv_continuous.interval.html#scipy.stats.rv_continuous.interval
    "scipy.stats.rv_continuous.interval")(confidence, *args, **kwds) | Confidence
    interval with equal areas around the median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`__call__`](scipy.stats.rv_continuous.__call__.html#scipy.stats.rv_continuous.__call__
    "scipy.stats.rv_continuous.__call__")(*args, **kwds) | Freeze the distribution
    for the given arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fit`](scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit
    "scipy.stats.rv_continuous.fit")(data, *args, **kwds) | Return estimates of shape
    (if applicable), location, and scale parameters from data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fit_loc_scale`](scipy.stats.rv_continuous.fit_loc_scale.html#scipy.stats.rv_continuous.fit_loc_scale
    "scipy.stats.rv_continuous.fit_loc_scale")(data, *args) | Estimate loc and scale
    parameters from data using 1st and 2nd moments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nnlf`](scipy.stats.rv_continuous.nnlf.html#scipy.stats.rv_continuous.nnlf
    "scipy.stats.rv_continuous.nnlf")(theta, x) | Negative loglikelihood function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`support`](scipy.stats.rv_continuous.support.html#scipy.stats.rv_continuous.support
    "scipy.stats.rv_continuous.support")(*args, **kwargs) | Support of the distribution.
    |'
  prefs: []
  type: TYPE_TB
