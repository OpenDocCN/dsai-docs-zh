- en: scipy.io.FortranFile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.io.FortranFile.html#scipy.io.FortranFile](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.io.FortranFile.html#scipy.io.FortranFile)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A file object for unformatted sequential files from Fortran code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename**file or str'
  prefs: []
  type: TYPE_NORMAL
- en: Open file object or filename.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘r’, ‘w’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Read-write mode, default is ‘r’.
  prefs: []
  type: TYPE_NORMAL
- en: '**header_dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the header. Size and endianness must match the input/output file.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: These files are broken up into records of unspecified types. The size of each
    record is given at the start (although the size of this header is not standard)
    and the data is written onto disk without any formatting. Fortran compilers supporting
    the BACKSPACE statement will write a second copy of the size to facilitate backwards
    seeking.
  prefs: []
  type: TYPE_NORMAL
- en: This class only supports files written with both sizes for the record. It also
    does not support the subrecords used in Intel and gfortran compilers for records
    which are greater than 2GB with a 4-byte header.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of an unformatted sequential file in Fortran would be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since this is a non-standard file format, whose contents depend on the compiler
    and the endianness of the machine, caution is advised. Files from gfortran 4.8.0
    and gfortran 4.1.2 on x86_64 are known to work.
  prefs: []
  type: TYPE_NORMAL
- en: Consider using Fortran direct-access files or files from the newer Stream I/O,
    which can be easily read by [`numpy.fromfile`](https://numpy.org/devdocs/reference/generated/numpy.fromfile.html#numpy.fromfile
    "(in NumPy v2.0.dev0)").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an unformatted sequential Fortran file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To read this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, in Fortran:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`close`](scipy.io.FortranFile.close.html#scipy.io.FortranFile.close "scipy.io.FortranFile.close")()
    | Closes the file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_ints`](scipy.io.FortranFile.read_ints.html#scipy.io.FortranFile.read_ints
    "scipy.io.FortranFile.read_ints")([dtype]) | Reads a record of a given type from
    the file, defaulting to an integer type (`INTEGER*4` in Fortran). |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_reals`](scipy.io.FortranFile.read_reals.html#scipy.io.FortranFile.read_reals
    "scipy.io.FortranFile.read_reals")([dtype]) | Reads a record of a given type from
    the file, defaulting to a floating point number (`real*8` in Fortran). |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_record`](scipy.io.FortranFile.read_record.html#scipy.io.FortranFile.read_record
    "scipy.io.FortranFile.read_record")(*dtypes, **kwargs) | Reads a record of a given
    type from the file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write_record`](scipy.io.FortranFile.write_record.html#scipy.io.FortranFile.write_record
    "scipy.io.FortranFile.write_record")(*items) | Write a record (including sizes)
    to the file. |'
  prefs: []
  type: TYPE_TB
