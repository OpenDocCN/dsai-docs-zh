- en: pandas.io.formats.style.Styler.format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.format.html](https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.format.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Format the text display value of cells.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**formatter**str, callable, dict or None'
  prefs: []
  type: TYPE_NORMAL
- en: Object to define how values are displayed. See notes.
  prefs: []
  type: TYPE_NORMAL
- en: '**subset**label, array-like, IndexSlice, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A valid 2d input to DataFrame.loc[<subset>], or, in the case of a 1d input or
    single key, to DataFrame.loc[:, <subset>] where the columns are prioritised, to
    limit `data` to *before* applying the function.
  prefs: []
  type: TYPE_NORMAL
- en: '**na_rep**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Representation for missing values. If `na_rep` is None, no special formatting
    is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Floating point precision to use for display purposes, if not determined by the
    specified `formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**decimal**str, default “.”'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as decimal separator for floats, complex and integers.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**thousands**str, optional, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Character used as thousands separator for floats, complex and integers.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**escape**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Use ‘html’ to replace the characters `&`, `<`, `>`, `'`, and `"` in cell display
    string with HTML-safe sequences. Use ‘latex’ to replace the characters `&`, `%`,
    `$`, `#`, `_`, `{`, `}`, `~`, `^`, and `\` in the cell display string with LaTeX-safe
    sequences. Use ‘latex-math’ to replace the characters the same way as in ‘latex’
    mode, except for math substrings, which either are surrounded by two characters
    `$` or start with the character `\(` and end with `\)`. Escaping is done before
    `formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**hyperlinks**{“html”, “latex”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Convert string patterns containing [https://](https://), [http://](http://),
    [ftp://](ftp://) or www. to HTML <a> tags as clickable URL hyperlinks if “html”,
    or LaTeX href commands if “latex”.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Styler
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Styler.format_index`](pandas.io.formats.style.Styler.format_index.html#pandas.io.formats.style.Styler.format_index
    "pandas.io.formats.style.Styler.format_index")'
  prefs: []
  type: TYPE_NORMAL
- en: Format the text display value of index labels.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method assigns a formatting function, `formatter`, to each cell in the
    DataFrame. If `formatter` is `None`, then the default formatter is used. If a
    callable then that function should take a data value as input and return a displayable
    representation, such as a string. If `formatter` is given as a string this is
    assumed to be a valid Python format specification and is wrapped to a callable
    as `string.format(x)`. If a `dict` is given, keys should correspond to column
    names, and values should be string or callable, as above.
  prefs: []
  type: TYPE_NORMAL
- en: The default formatter currently expresses floats and complex numbers with the
    pandas display precision unless using the `precision` argument here. The default
    formatter does not adjust the representation of missing values unless the `na_rep`
    argument is used.
  prefs: []
  type: TYPE_NORMAL
- en: The `subset` argument defines which region to apply the formatting function
    to. If the `formatter` argument is given in dict form but does not include all
    columns within the subset then these columns will have the default formatter applied.
    Any columns in the formatter dict excluded from the subset will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: When using a `formatter` string the dtypes must be compatible, otherwise a ValueError
    will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'When instantiating a Styler, default formatting can be applied be setting the
    `pandas.options`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styler.format.formatter`: default None.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`styler.format.na_rep`: default None.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`styler.format.precision`: default 6.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`styler.format.decimal`: default “.”.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`styler.format.thousands`: default None.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`styler.format.escape`: default None.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Styler.format is ignored when using the output format Styler.to_excel, since
    Excel and Python have inherrently different formatting structures. However, it
    is possible to use the number-format pseudo CSS attribute to force Excel permissible
    formatting. See examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Using `na_rep` and `precision` with the default `formatter`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` specification on consistent column dtypes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using the default `formatter` for unspecified columns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Multiple `na_rep` or `precision` specifications under the default `formatter`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using a callable `formatter` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` with HTML `escape` and `na_rep`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using a `formatter` with `escape` in ‘latex’ mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Applying `escape` in ‘latex-math’ mode. In the example below we enter math mode
    using the character `$`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can use the character `\(` to enter math mode and the character `\)` to close
    math mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If we have in one DataFrame cell a combination of both shorthands for math formulas,
    the shorthand with the sign `$` will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Pandas defines a number-format pseudo CSS attribute instead of the .format method
    to create to_excel permissible formatting. Note that semi-colons are CSS protected
    characters but used as separators in Excel’s format string. Replace semi-colons
    with the section separator character (ASCII-245) when defining the formatting
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/format_excel_css.png](../Images/72b07913880385bb91eab0f51fad2292.png)'
  prefs: []
  type: TYPE_IMG
