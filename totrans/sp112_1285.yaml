- en: scipy.stats.scoreatpercentile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the score at a given percentile of the input sequence.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the score at *per=50* is the median. If the desired quantile lies
    between two data points, we interpolate between them, according to the value of
    *interpolation*. If the parameter *limit* is provided, it should be a tuple (lower,
    upper) of two values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D array of values from which to extract score.
  prefs: []
  type: TYPE_NORMAL
- en: '**per**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Percentile(s) at which to extract score. Values should be in range [0,100].
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of two scalars, the lower and upper limits within which to compute the
    percentile. Values of *a* outside this (closed) interval will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**interpolation_method**{‘fraction’, ‘lower’, ‘higher’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifies the interpolation method to use, when the desired quantile lies between
    two data points *i* and *j* The following options are available (default is ‘fraction’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘fraction’: `i + (j - i) * fraction` where `fraction` is the fractional part
    of the index surrounded by `i` and `j`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘lower’: `i`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘higher’: `j`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the percentiles are computed. Default is None. If None, compute
    over the whole array *a*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**score**float or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Score at percentile(s).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`percentileofscore`](scipy.stats.percentileofscore.html#scipy.stats.percentileofscore
    "scipy.stats.percentileofscore"), [`numpy.percentile`](https://numpy.org/devdocs/reference/generated/numpy.percentile.html#numpy.percentile
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function will become obsolete in the future. For NumPy 1.9 and higher,
    [`numpy.percentile`](https://numpy.org/devdocs/reference/generated/numpy.percentile.html#numpy.percentile
    "(in NumPy v2.0.dev0)") provides all the functionality that [`scoreatpercentile`](#scipy.stats.scoreatpercentile
    "scipy.stats.scoreatpercentile") provides. And it’s significantly faster. Therefore
    it’s recommended to use [`numpy.percentile`](https://numpy.org/devdocs/reference/generated/numpy.percentile.html#numpy.percentile
    "(in NumPy v2.0.dev0)") for users that have numpy >= 1.9.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
