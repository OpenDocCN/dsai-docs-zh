- en: numpy.linalg.qr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.linalg.qr.html](https://numpy.org/doc/1.26/reference/generated/numpy.linalg.qr.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the qr factorization of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Factor the matrix *a* as *qr*, where *q* is orthonormal and *r* is upper-triangular.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like, shape (…, M, N)'
  prefs: []
  type: TYPE_NORMAL
- en: An array-like object with the dimensionality of at least 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reduced’, ‘complete’, ‘r’, ‘raw’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If K = min(M, N), then
  prefs: []
  type: TYPE_NORMAL
- en: '‘reduced’ : returns Q, R with dimensions (…, M, K), (…, K, N) (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘complete’ : returns Q, R with dimensions (…, M, M), (…, M, N)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘r’ : returns R only with dimensions (…, K, N)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘raw’ : returns h, tau with dimensions (…, N, M), (…, K,)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The options ‘reduced’, ‘complete, and ‘raw’ are new in numpy 1.8, see the notes
    for more information. The default is ‘reduced’, and to maintain backward compatibility
    with earlier versions of numpy both it and the old default ‘full’ can be omitted.
    Note that array h returned in ‘raw’ mode is transposed for calling Fortran. The
    ‘economic’ mode is deprecated. The modes ‘full’ and ‘economic’ may be passed using
    only the first letter for backwards compatibility, but all others must be spelled
    out. See the Notes for more explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: When mode is ‘reduced’ or ‘complete’, the result will be a namedtuple with
  prefs: []
  type: TYPE_NORMAL
- en: the attributes *Q* and *R*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Q**ndarray of float or complex, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A matrix with orthonormal columns. When mode = ‘complete’ the result is an orthogonal/unitary
    matrix depending on whether or not a is real/complex. The determinant may be either
    +/- 1 in that case. In case the number of dimensions in the input array is greater
    than 2 then a stack of the matrices with above properties is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**R**ndarray of float or complex, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The upper-triangular matrix or a stack of upper-triangular matrices if the number
    of dimensions in the input array is greater than 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**(h, tau)**ndarrays of np.double or np.cdouble, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array h contains the Householder reflectors that generate q along with r.
    The tau array contains scaling factors for the reflectors. In the deprecated ‘economic’
    mode only h is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: LinAlgError
  prefs: []
  type: TYPE_NORMAL
- en: If factoring fails.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.qr`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html#scipy.linalg.qr
    "(in SciPy v1.11.2)")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar function in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.rq`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.rq.html#scipy.linalg.rq
    "(in SciPy v1.11.2)")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute RQ decomposition of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is an interface to the LAPACK routines `dgeqrf`, `zgeqrf`, `dorgqr`, and
    `zungqr`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the qr factorization, see for example: [https://en.wikipedia.org/wiki/QR_factorization](https://en.wikipedia.org/wiki/QR_factorization)'
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses of [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    are preserved except for the ‘raw’ mode. So if *a* is of type [`matrix`](numpy.matrix.html#numpy.matrix
    "numpy.matrix"), all the return values will be matrices too.
  prefs: []
  type: TYPE_NORMAL
- en: New ‘reduced’, ‘complete’, and ‘raw’ options for mode were added in NumPy 1.8.0
    and the old option ‘full’ was made an alias of ‘reduced’. In addition the options
    ‘full’ and ‘economic’ were deprecated. Because ‘full’ was the previous default
    and ‘reduced’ is the new default, backward compatibility can be maintained by
    letting *mode* default. The ‘raw’ option was added so that LAPACK routines that
    can multiply arrays by q using the Householder reflectors can be used. Note that
    in this case the returned arrays are of type np.double or np.cdouble and the h
    array is transposed to be FORTRAN compatible. No routines using the ‘raw’ return
    are currently exposed by numpy, but some are available in lapack_lite and just
    await the necessary work.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Example illustrating a common use of [`qr`](#numpy.linalg.qr "numpy.linalg.qr"):
    solving of least squares problems'
  prefs: []
  type: TYPE_NORMAL
- en: 'What are the least-squares-best *m* and *y0* in `y = y0 + mx` for the following
    data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points and you’ll see that it should
    be y0 = 0, m = 1.) The answer is provided by solving the over-determined matrix
    equation `Ax = b`, where:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If A = QR such that Q is orthonormal (which is always possible via Gram-Schmidt),
    then `x = inv(R) * (Q.T) * b`. (In numpy practice, however, we simply use [`lstsq`](numpy.linalg.lstsq.html#numpy.linalg.lstsq
    "numpy.linalg.lstsq").)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
