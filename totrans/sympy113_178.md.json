["```py\n>>> from sympy import symbols, cos, sin\n>>> from sympy.physics.mechanics import *\n>>> mechanics_printing(pretty_print=False)\n>>> q1, q2, q3 = dynamicsymbols('q1 q2 q3')\n>>> q1d, q2d, q3d = dynamicsymbols('q1 q2 q3', 1)\n>>> r, m, g = symbols('r m g') \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> Y = N.orientnew('Y', 'Axis', [q1, N.z])\n>>> L = Y.orientnew('L', 'Axis', [q2, Y.x])\n>>> R = L.orientnew('R', 'Axis', [q3, L.y]) \n```", "```py\n>>> C = Point('C')\n>>> C.set_vel(N, 0)\n>>> Dmc = C.locatenew('Dmc', r * L.z)\n>>> Dmc.v2pt_theory(C, N, R)\nr*(sin(q2)*q1' + q3')*L.x - r*q2'*L.y \n```", "```py\n>>> I = inertia(L, m / 4 * r**2, m / 2 * r**2, m / 4 * r**2)\n>>> mprint(I)\nm*r**2/4*(L.x|L.x) + m*r**2/2*(L.y|L.y) + m*r**2/4*(L.z|L.z)\n>>> BodyD = RigidBody('BodyD', Dmc, R, m, (I, Dmc)) \n```", "```py\n>>> BodyD.potential_energy = - m * g * r * cos(q2)\n>>> Lag = Lagrangian(N, BodyD) \n```", "```py\n>>> q = [q1, q2, q3]\n>>> l = LagrangesMethod(Lag, q)\n>>> le = l.form_lagranges_equations()\n>>> le.simplify(); le\nMatrix([\n[m*r**2*(6*sin(q2)*q3'' + 5*sin(2*q2)*q1'*q2' + 6*cos(q2)*q2'*q3' - 5*cos(2*q2)*q1''/2 + 7*q1''/2)/4],\n[                      m*r*(4*g*sin(q2) - 5*r*sin(2*q2)*q1'**2/2 - 6*r*cos(q2)*q1'*q3' + 5*r*q2'')/4],\n[                                                 3*m*r**2*(sin(q2)*q1'' + cos(q2)*q1'*q2' + q3'')/2]])\n>>> lrhs = l.rhs(); lrhs.simplify(); lrhs\nMatrix([\n[                                                          q1'],\n[                                                          q2'],\n[                                                          q3'],\n[                       -2*(2*tan(q2)*q1' + 3*q3'/cos(q2))*q2'],\n[-4*g*sin(q2)/(5*r) + sin(2*q2)*q1'**2/2 + 6*cos(q2)*q1'*q3'/5],\n[         (-5*cos(q2)*q1' + 6*tan(q2)*q3' + 4*q1'/cos(q2))*q2']]) \n```"]