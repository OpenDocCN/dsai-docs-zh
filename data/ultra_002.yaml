- en: Quickstart
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门
- en: 原文：[`docs.ultralytics.com/quickstart/`](https://docs.ultralytics.com/quickstart/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/quickstart/`](https://docs.ultralytics.com/quickstart/)
- en: Install Ultralytics
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Ultralytics
- en: Ultralytics provides various installation methods including pip, conda, and
    Docker. Install YOLOv8 via the `ultralytics` pip package for the latest stable
    release or by cloning the [Ultralytics GitHub repository](https://github.com/ultralytics/ultralytics)
    for the most up-to-date version. Docker can be used to execute the package in
    an isolated container, avoiding local installation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics 提供各种安装方法，包括 pip、conda 和 Docker。通过`ultralytics` pip 包安装最新稳定版本的 YOLOv8，或通过克隆[Ultralytics
    GitHub 仓库](https://github.com/ultralytics/ultralytics)获取最新版本。Docker 可用于在隔离的容器中执行该软件包，避免本地安装。
- en: '[`www.youtube.com/embed/_a7cVL9hqnk`](https://www.youtube.com/embed/_a7cVL9hqnk)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/_a7cVL9hqnk`](https://www.youtube.com/embed/_a7cVL9hqnk)'
- en: '**Watch:** Ultralytics YOLO Quick Start Guide'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** Ultralytics YOLO 快速入门指南'
- en: Install
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 安装
- en: '![PyPI - Python Version](img/c1c96b5d0d3404f036367589f6993a54.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![PyPI - Python Version](img/c1c96b5d0d3404f036367589f6993a54.png)'
- en: 'Install the `ultralytics` package using pip, or update an existing installation
    by running `pip install -U ultralytics`. Visit the Python Package Index (PyPI)
    for more details on the `ultralytics` package: [`pypi.org/project/ultralytics/`](https://pypi.org/project/ultralytics/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip 安装`ultralytics`包，或通过运行`pip install -U ultralytics`更新现有安装。有关`ultralytics`包的更多详情，请访问
    Python 包索引（PyPI）：[`pypi.org/project/ultralytics/`](https://pypi.org/project/ultralytics/)。
- en: '![PyPI - Version](https://pypi.org/project/ultralytics/) ![Downloads](https://pepy.tech/project/ultralytics)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![PyPI - 版本](https://pypi.org/project/ultralytics/) ![下载量](https://pepy.tech/project/ultralytics)'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can also install the `ultralytics` package directly from the GitHub [repository](https://github.com/ultralytics/ultralytics).
    This might be useful if you want the latest development version. Make sure to
    have the Git command-line tool installed on your system. The `@main` command installs
    the `main` branch and may be modified to another branch, i.e. `@my-branch`, or
    removed entirely to default to `main` branch.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以直接从 GitHub [仓库](https://github.com/ultralytics/ultralytics)安装`ultralytics`包。如果您需要最新的开发版本，这可能很有用。请确保在系统上安装了
    Git 命令行工具。`@main`命令安装`main`分支，并可以修改为其他分支，例如`@my-branch`，或完全删除以默认使用`main`分支。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Conda is an alternative package manager to pip which may also be used for installation.
    Visit Anaconda for more details at [`anaconda.org/conda-forge/ultralytics`](https://anaconda.org/conda-forge/ultralytics).
    Ultralytics feedstock repository for updating the conda package is at [`github.com/conda-forge/ultralytics-feedstock/`](https://github.com/conda-forge/ultralytics-feedstock/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Conda 是 pip 的另一种替代包管理器，也可用于安装。有关更多细节，请访问 Anaconda：[`anaconda.org/conda-forge/ultralytics`](https://anaconda.org/conda-forge/ultralytics)。更新
    conda 包的 Ultralytics feedstock 仓库位于[`github.com/conda-forge/ultralytics-feedstock/`](https://github.com/conda-forge/ultralytics-feedstock/)。
- en: '![Conda Version](https://anaconda.org/conda-forge/ultralytics) ![Conda Downloads](https://anaconda.org/conda-forge/ultralytics)
    ![Conda Recipe](https://anaconda.org/conda-forge/ultralytics) ![Conda Platforms](https://anaconda.org/conda-forge/ultralytics)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Conda 版本](https://anaconda.org/conda-forge/ultralytics) ![Conda 下载量](https://anaconda.org/conda-forge/ultralytics)
    ![Conda 配方](https://anaconda.org/conda-forge/ultralytics) ![Conda 平台](https://anaconda.org/conda-forge/ultralytics)'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are installing in a CUDA environment best practice is to install `ultralytics`,
    `pytorch` and `pytorch-cuda` in the same command to allow the conda package manager
    to resolve any conflicts, or else to install `pytorch-cuda` last to allow it override
    the CPU-specific `pytorch` package if necessary.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 CUDA 环境中安装，最佳做法是在同一命令中安装`ultralytics`，`pytorch`和`pytorch-cuda`，以允许 conda
    包管理器解决任何冲突，或者安装`pytorch-cuda`时最后进行以允许其覆盖 CPU 特定的`pytorch`包。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Conda Docker Image
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Conda Docker 镜像
- en: Ultralytics Conda Docker images are also available from [DockerHub](https://hub.docker.com/r/ultralytics/ultralytics).
    These images are based on [Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)
    and are an simple way to start using `ultralytics` in a Conda environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics Conda Docker 镜像也可从[DockerHub](https://hub.docker.com/r/ultralytics/ultralytics)获取。这些镜像基于[Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)，是在
    Conda 环境中开始使用`ultralytics`的简单方法。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Clone the `ultralytics` repository if you are interested in contributing to
    the development or wish to experiment with the latest source code. After cloning,
    navigate into the directory and install the package in editable mode `-e` using
    pip.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣贡献代码或希望使用最新的源代码进行实验，请克隆`ultralytics`仓库。克隆后，进入目录并使用pip以可编辑模式`-e`安装包。
- en: '![GitHub last commit](https://github.com/ultralytics/ultralytics) ![GitHub
    commit activity](https://github.com/ultralytics/ultralytics)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub最后提交](https://github.com/ultralytics/ultralytics) ![GitHub提交活动](https://github.com/ultralytics/ultralytics)'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Utilize Docker to effortlessly execute the `ultralytics` package in an isolated
    container, ensuring consistent and smooth performance across various environments.
    By choosing one of the official `ultralytics` images from [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics),
    you not only avoid the complexity of local installation but also benefit from
    access to a verified working environment. Ultralytics offers 5 main supported
    Docker images, each designed to provide high compatibility and efficiency for
    different platforms and use cases:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Docker在隔离的容器中轻松执行`ultralytics`包，确保在各种环境中保持一致且流畅的性能。通过选择[Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics)
    中的官方`ultralytics`镜像之一，您不仅避免了本地安装的复杂性，还能从验证过的工作环境中获益。Ultralytics提供了5种主要支持的Docker镜像，每种都设计用于不同平台和用例的高兼容性和效率：
- en: '![Docker Image Version](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker
    Pulls](https://hub.docker.com/r/ultralytics/ultralytics)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Docker镜像版本](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker拉取次数](https://hub.docker.com/r/ultralytics/ultralytics)'
- en: '**Dockerfile:** GPU image recommended for training.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile：** 推荐用于训练的GPU镜像。'
- en: '**Dockerfile-arm64:** Optimized for ARM64 architecture, allowing deployment
    on devices like Raspberry Pi and other ARM64-based platforms.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-arm64：** 针对ARM64架构优化，允许在像树莓派和其他基于ARM64的平台上部署。'
- en: '**Dockerfile-cpu:** Ubuntu-based CPU-only version suitable for inference and
    environments without GPUs.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-cpu：** 基于Ubuntu的仅CPU版本，适用于推理和没有GPU的环境。'
- en: '**Dockerfile-jetson:** Tailored for NVIDIA Jetson devices, integrating GPU
    support optimized for these platforms.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-jetson：** 专为NVIDIA Jetson设备定制，集成了针对这些平台优化的GPU支持。'
- en: '**Dockerfile-python:** Minimal image with just Python and necessary dependencies,
    ideal for lightweight applications and development.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-python：** 只包含Python和必要依赖项的最小镜像，非常适合轻量级应用和开发。'
- en: '**Dockerfile-conda:** Based on Miniconda3 with conda installation of ultralytics
    package.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile-conda：** 基于Miniconda3，通过conda安装`ultralytics`包。'
- en: 'Below are the commands to get the latest image and execute it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是获取最新镜像并执行的命令：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above command initializes a Docker container with the latest `ultralytics`
    image. The `-it` flag assigns a pseudo-TTY and maintains stdin open, enabling
    you to interact with the container. The `--ipc=host` flag sets the IPC (Inter-Process
    Communication) namespace to the host, which is essential for sharing memory between
    processes. The `--gpus all` flag enables access to all available GPUs inside the
    container, which is crucial for tasks that require GPU computation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令初始化了一个带有最新`ultralytics`镜像的Docker容器。`-it`标志分配了一个伪TTY并保持标准输入打开，使您能够与容器进行交互。`--ipc=host`标志设置IPC（进程间通信）命名空间为主机，这对于在进程之间共享内存至关重要。`--gpus
    all`标志启用了对容器内所有可用GPU的访问，这对需要GPU计算的任务至关重要。
- en: 'Note: To work with files on your local machine within the container, use Docker
    volumes for mounting a local directory into the container:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：要在容器内与本地机器上的文件一起工作，请使用Docker卷将本地目录挂载到容器中：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Alter `/path/on/host` with the directory path on your local machine, and `/path/in/container`
    with the desired path inside the Docker container for accessibility.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地机器上的目录路径替换`/path/on/host`，并在Docker容器中使用所需路径替换`/path/in/container`以便访问。
- en: For advanced Docker usage, feel free to explore the Ultralytics Docker Guide.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级的Docker使用，请随时查阅Ultralytics Docker指南。
- en: See the `ultralytics` [pyproject.toml](https://github.com/ultralytics/ultralytics/blob/main/pyproject.toml)
    file for a list of dependencies. Note that all examples above install all required
    dependencies.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`ultralytics` [pyproject.toml](https://github.com/ultralytics/ultralytics/blob/main/pyproject.toml)
    文件以获取依赖项列表。请注意，上述所有示例均安装了所有所需的依赖项。
- en: Tip
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: PyTorch requirements vary by operating system and CUDA requirements, so it's
    recommended to install PyTorch first following instructions at [`pytorch.org/get-started/locally`](https://pytorch.org/get-started/locally).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch的要求因操作系统和CUDA要求而异，因此建议首先根据[`pytorch.org/get-started/locally`](https://pytorch.org/get-started/locally)的说明安装PyTorch。
- en: '![PyTorch Installation Instructions](https://pytorch.org/get-started/locally/)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![PyTorch安装说明](https://pytorch.org/get-started/locally/)'
- en: Use Ultralytics with CLI
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CLI与Ultralytics
- en: The Ultralytics command line interface (CLI) allows for simple single-line commands
    without the need for a Python environment. CLI requires no customization or Python
    code. You can simply run all tasks from the terminal with the `yolo` command.
    Check out the CLI Guide to learn more about using YOLOv8 from the command line.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics命令行界面（CLI）允许简单的单行命令，无需Python环境。CLI无需定制或Python代码。您可以通过`yolo`命令直接从终端运行所有任务。查看CLI指南，了解更多关于如何从命令行使用YOLOv8的信息。
- en: Example
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Ultralytics `yolo` commands use the following syntax:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics `yolo`命令使用以下语法：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`TASK` (optional) is one of (detect, segment, classify, pose, obb)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TASK`（可选）是（detect, segment, classify, pose, obb）之一'
- en: '`MODE` (required) is one of (train, val, predict, export, track, benchmark)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODE`（必需）是（train, val, predict, export, track, benchmark）之一'
- en: '`ARGS` (optional) are `arg=value` pairs like `imgsz=640` that override defaults.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ARGS`（可选）是`arg=value`对，例如`imgsz=640`，用于覆盖默认值。'
- en: See all `ARGS` in the full Configuration Guide or with the `yolo cfg` CLI command.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看完整的配置指南或使用`yolo cfg` CLI命令中的所有`ARGS`。
- en: Train a detection model for 10 epochs with an initial learning_rate of 0.01
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用初始学习率为0.01训练10个epoch的检测模型
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Predict a YouTube video using a pretrained segmentation model at image size
    320:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 预测使用预训练分割模型在图像大小为320的YouTube视频：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Val a pretrained detection model at batch-size 1 and image size 640:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在批量大小为1且图像大小为640时评估预训练检测模型：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Export a YOLOv8n classification model to ONNX format at image size 224 by 128
    (no TASK required)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将YOLOv8n分类模型导出到ONNX格式，图像大小为224乘以128（无需任务要求）
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run special commands to see version, view settings, run checks and more:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行特殊命令以查看版本、查看设置、运行检查等：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Arguments must be passed as `arg=val` pairs, split by an equals `=` sign and
    delimited by spaces between pairs. Do not use `--` argument prefixes or commas
    `,` between arguments.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 参数必须以`arg=val`对形式传递，由等号`=`分隔，并且在对中使用空格分隔。不要使用`--`前缀或逗号`,`分隔参数。
- en: '`yolo predict model=yolov8n.pt imgsz=640 conf=0.25` ✅'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yolo predict model=yolov8n.pt imgsz=640 conf=0.25` ✅'
- en: '`yolo predict model yolov8n.pt imgsz 640 conf 0.25` ❌ (missing `=`)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yolo predict model yolov8n.pt imgsz 640 conf 0.25` ❌（缺少`=`）'
- en: '`yolo predict model=yolov8n.pt, imgsz=640, conf=0.25` ❌ (do not use `,`)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yolo predict model=yolov8n.pt, imgsz=640, conf=0.25` ❌（不要使用`,`）'
- en: '`yolo predict --model yolov8n.pt --imgsz 640 --conf 0.25` ❌ (do not use `--`)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yolo predict --model yolov8n.pt --imgsz 640 --conf 0.25` ❌（不要使用`--`）'
- en: CLI Guide
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: CLI指南
- en: Use Ultralytics with Python
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python与Ultralytics
- en: YOLOv8's Python interface allows for seamless integration into your Python projects,
    making it easy to load, run, and process the model's output. Designed with simplicity
    and ease of use in mind, the Python interface enables users to quickly implement
    object detection, segmentation, and classification in their projects. This makes
    YOLOv8's Python interface an invaluable tool for anyone looking to incorporate
    these functionalities into their Python projects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8的Python接口允许将其无缝集成到您的Python项目中，使您能够轻松加载、运行和处理模型的输出。设计时考虑了简易性和易用性，Python接口使用户能够快速实现对象检测、分割和分类。这使得YOLOv8的Python接口成为任何希望将这些功能集成到其Python项目中的人的宝贵工具。
- en: For example, users can load a model, train it, evaluate its performance on a
    validation set, and even export it to ONNX format with just a few lines of code.
    Check out the Python Guide to learn more about using YOLOv8 within your Python
    projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用户可以加载模型，训练模型，在验证集上评估其性能，甚至仅使用几行代码将其导出为ONNX格式。查看Python指南，了解如何在Python项目中使用YOLOv8更多信息。
- en: Example
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Python Guide
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python指南
- en: Ultralytics Settings
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ultralytics设置
- en: The Ultralytics library provides a powerful settings management system to enable
    fine-grained control over your experiments. By making use of the `SettingsManager`
    housed within the `ultralytics.utils` module, users can readily access and alter
    their settings. These are stored in a YAML file and can be viewed or modified
    either directly within the Python environment or via the Command-Line Interface
    (CLI).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics库提供了一个强大的设置管理系统，可以精细控制您的实验。通过使用`ultralytics.utils`模块中的`SettingsManager`，用户可以轻松访问和修改他们的设置。这些设置存储在一个YAML文件中，可以直接在Python环境中或通过命令行界面（CLI）中查看或修改。
- en: Inspecting Settings
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查设置
- en: 'To gain insight into the current configuration of your settings, you can view
    them directly:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解当前设置的配置，您可以直接查看它们：
- en: View settings
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 查看设置
- en: 'You can use Python to view your settings. Start by importing the `settings`
    object from the `ultralytics` module. Print and return settings using the following
    commands:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Python查看您的设置。首先从`ultralytics`模块导入`settings`对象。使用以下命令打印和返回设置：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Alternatively, the command-line interface allows you to check your settings
    with a simple command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，命令行界面允许您使用简单的命令检查您的设置：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Modifying Settings
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改设置
- en: 'Ultralytics allows users to easily modify their settings. Changes can be performed
    in the following ways:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics允许用户轻松修改其设置。可以通过以下方式进行更改：
- en: Update settings
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 更新设置
- en: 'Within the Python environment, call the `update` method on the `settings` object
    to change your settings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python环境中，调用`settings`对象的`update`方法来更改您的设置：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you prefer using the command-line interface, the following commands will
    allow you to modify your settings:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用命令行界面，以下命令将允许您修改您的设置：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Understanding Settings
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解设置
- en: The table below provides an overview of the settings available for adjustment
    within Ultralytics. Each setting is outlined along with an example value, the
    data type, and a brief description.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了在Ultralytics中可调整的设置概述。每个设置都包括示例值、数据类型和简要描述。
- en: '| Name | Example Value | Data Type | Description |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 示例值 | 数据类型 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `settings_version` | `''0.0.4''` | `str` | Ultralytics *settings* version
    (different from Ultralytics [pip](https://pypi.org/project/ultralytics/) version)
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `settings_version` | `''0.0.4''` | `str` | Ultralytics *settings*版本（与Ultralytics
    [pip](https://pypi.org/project/ultralytics/)版本不同） |'
- en: '| `datasets_dir` | `''/path/to/datasets''` | `str` | The directory where the
    datasets are stored |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `datasets_dir` | `''/path/to/datasets''` | `str` | 存储数据集的目录 |'
- en: '| `weights_dir` | `''/path/to/weights''` | `str` | The directory where the
    model weights are stored |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `weights_dir` | `''/path/to/weights''` | `str` | 存储模型权重的目录 |'
- en: '| `runs_dir` | `''/path/to/runs''` | `str` | The directory where the experiment
    runs are stored |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `runs_dir` | `''/path/to/runs''` | `str` | 存储实验运行的目录 |'
- en: '| `uuid` | `''a1b2c3d4''` | `str` | The unique identifier for the current settings
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `uuid` | `''a1b2c3d4''` | `str` | 当前设置的唯一标识符 |'
- en: '| `sync` | `True` | `bool` | Whether to sync analytics and crashes to HUB |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `sync` | `True` | `bool` | 是否将分析和崩溃同步到HUB |'
- en: '| `api_key` | `''''` | `str` | Ultralytics HUB [API Key](https://hub.ultralytics.com/settings?tab=api+keys)
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `api_key` | `''''` | `str` | Ultralytics HUB [API Key](https://hub.ultralytics.com/settings?tab=api+keys)
    |'
- en: '| `clearml` | `True` | `bool` | Whether to use ClearML logging |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `clearml` | `True` | `bool` | 是否使用ClearML进行日志记录 |'
- en: '| `comet` | `True` | `bool` | Whether to use [Comet ML](https://bit.ly/yolov8-readme-comet)
    for experiment tracking and visualization |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `comet` | `True` | `bool` | 是否使用[Comet ML](https://bit.ly/yolov8-readme-comet)进行实验跟踪和可视化
    |'
- en: '| `dvc` | `True` | `bool` | Whether to use [DVC for experiment tracking](https://dvc.org/doc/dvclive/ml-frameworks/yolo)
    and version control |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `dvc` | `True` | `bool` | 是否使用[DVC进行实验跟踪](https://dvc.org/doc/dvclive/ml-frameworks/yolo)和版本控制
    |'
- en: '| `hub` | `True` | `bool` | Whether to use [Ultralytics HUB](https://hub.ultralytics.com)
    integration |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `hub` | `True` | `bool` | 是否使用[Ultralytics HUB](https://hub.ultralytics.com)集成
    |'
- en: '| `mlflow` | `True` | `bool` | Whether to use MLFlow for experiment tracking
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `mlflow` | `True` | `bool` | 是否使用MLFlow进行实验跟踪 |'
- en: '| `neptune` | `True` | `bool` | Whether to use Neptune for experiment tracking
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `neptune` | `True` | `bool` | 是否使用Neptune进行实验跟踪 |'
- en: '| `raytune` | `True` | `bool` | Whether to use Ray Tune for hyperparameter
    tuning |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `raytune` | `True` | `bool` | 是否使用Ray Tune进行超参数调优 |'
- en: '| `tensorboard` | `True` | `bool` | Whether to use TensorBoard for visualization
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `tensorboard` | `True` | `bool` | 是否使用TensorBoard进行可视化 |'
- en: '| `wandb` | `True` | `bool` | Whether to use Weights & Biases logging |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `wandb` | `True` | `bool` | 是否使用 Weights & Biases 日志记录 |'
- en: As you navigate through your projects or experiments, be sure to revisit these
    settings to ensure that they are optimally configured for your needs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您浏览您的项目或实验时，请确保定期检查这些设置，以确保它们针对您的需求进行了最佳配置。
- en: FAQ
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: How do I install Ultralytics YOLOv8 using pip?
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 pip 安装 Ultralytics YOLOv8？
- en: 'To install Ultralytics YOLOv8 with pip, execute the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 pip 安装 Ultralytics YOLOv8，请执行以下命令：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For the latest stable release, this will install the `ultralytics` package directly
    from the Python Package Index (PyPI). For more details, visit the [ultralytics
    package on PyPI](https://pypi.org/project/ultralytics/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最新的稳定版本发布，这将直接从 Python 包索引（PyPI）安装 `ultralytics` 包。欲了解更多详细信息，请访问 [PyPI 上的
    ultralytics 包](https://pypi.org/project/ultralytics/)。
- en: 'Alternatively, you can install the latest development version directly from
    GitHub:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以直接从 GitHub 安装最新的开发版本：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Make sure to have the Git command-line tool installed on your system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的系统上安装了 Git 命令行工具。
- en: Can I install Ultralytics YOLOv8 using conda?
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我能使用 conda 安装 Ultralytics YOLOv8 吗？
- en: 'Yes, you can install Ultralytics YOLOv8 using conda by running:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以通过以下 conda 命令安装 Ultralytics YOLOv8：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This method is an excellent alternative to pip and ensures compatibility with
    other packages in your environment. For CUDA environments, it''s best to install
    `ultralytics`, `pytorch`, and `pytorch-cuda` simultaneously to resolve any conflicts:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是 pip 的一个很好的替代方案，并确保与您环境中的其他包兼容。对于 CUDA 环境，最好同时安装 `ultralytics`、`pytorch`
    和 `pytorch-cuda` 以解决任何冲突：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For more instructions, visit the Conda quickstart guide.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 欲获取更多指导，请查看 Conda 快速入门指南。
- en: What are the advantages of using Docker to run Ultralytics YOLOv8?
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Docker 运行 Ultralytics YOLOv8 的优势是什么？
- en: 'Using Docker to run Ultralytics YOLOv8 provides an isolated and consistent
    environment, ensuring smooth performance across different systems. It also eliminates
    the complexity of local installation. Official Docker images from Ultralytics
    are available on [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics),
    with different variants tailored for GPU, CPU, ARM64, NVIDIA Jetson, and Conda
    environments. Below are the commands to pull and run the latest image:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 运行 Ultralytics YOLOv8 可提供隔离和一致的环境，确保在不同系统上的平稳运行。它还消除了本地安装的复杂性。Ultralytics
    官方提供了适用于 GPU、CPU、ARM64、NVIDIA Jetson 和 Conda 环境的不同变体的 Docker 镜像，可以在 [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics)
    上获取最新镜像并运行以下命令：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For more detailed Docker instructions, check out the Docker quickstart guide.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更详细的 Docker 指南，请查看 Docker 快速入门指南。
- en: How do I clone the Ultralytics repository for development?
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何克隆 Ultralytics 代码库以进行开发？
- en: 'To clone the Ultralytics repository and set up a development environment, use
    the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆 Ultralytics 代码库并设置开发环境，请按以下步骤操作：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This approach allows you to contribute to the project or experiment with the
    latest source code. For more details, visit the [Ultralytics GitHub repository](https://github.com/ultralytics/ultralytics).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法允许您贡献到项目或使用最新的源代码进行实验。欲了解更多详细信息，请访问 [Ultralytics GitHub 代码库](https://github.com/ultralytics/ultralytics)。
- en: Why should I use Ultralytics YOLOv8 CLI?
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要使用 Ultralytics YOLOv8 CLI？
- en: 'The Ultralytics YOLOv8 command line interface (CLI) simplifies running object
    detection tasks without requiring Python code. You can execute single-line commands
    for tasks like training, validation, and prediction straight from your terminal.
    The basic syntax for `yolo` commands is:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8 命令行界面（CLI）简化了运行对象检测任务的流程，无需编写 Python 代码。您可以直接从终端执行单行命令，例如训练、验证和预测任务。`yolo`
    命令的基本语法如下：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For example, to train a detection model with specified parameters:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用指定参数训练检测模型：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Check out the full CLI Guide to explore more commands and usage examples.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 查看完整的 CLI 指南以探索更多命令和用法示例。
