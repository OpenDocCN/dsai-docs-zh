["```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") assert cap.isOpened(), \"Error reading video file\" w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))  # Video writer video_writer = cv2.VideoWriter(\"heatmap_output.avi\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))  # Init heatmap heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     names=model.names, )  while cap.isOpened():     success, im0 = cap.read()     if not success:         print(\"Video frame is empty or video processing has been successfully completed.\")         break     tracks = model.track(im0, persist=True, show=False)      im0 = heatmap_obj.generate_heatmap(im0, tracks)     video_writer.write(im0)  cap.release() video_writer.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") assert cap.isOpened(), \"Error reading video file\" w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))  # Video writer video_writer = cv2.VideoWriter(\"heatmap_output.avi\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))  line_points = [(20, 400), (1080, 404)]  # line for object counting  # Init heatmap heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     count_reg_pts=line_points,     names=model.names, )  while cap.isOpened():     success, im0 = cap.read()     if not success:         print(\"Video frame is empty or video processing has been successfully completed.\")         break      tracks = model.track(im0, persist=True, show=False)     im0 = heatmap_obj.generate_heatmap(im0, tracks)     video_writer.write(im0)  cap.release() video_writer.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") assert cap.isOpened(), \"Error reading video file\" w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))  # Video writer video_writer = cv2.VideoWriter(\"heatmap_output.avi\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))  # Define polygon points region_points = [(20, 400), (1080, 404), (1080, 360), (20, 360), (20, 400)]  # Init heatmap heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     count_reg_pts=region_points,     names=model.names, )  while cap.isOpened():     success, im0 = cap.read()     if not success:         print(\"Video frame is empty or video processing has been successfully completed.\")         break      tracks = model.track(im0, persist=True, show=False)     im0 = heatmap_obj.generate_heatmap(im0, tracks)     video_writer.write(im0)  cap.release() video_writer.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") assert cap.isOpened(), \"Error reading video file\" w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))  # Video writer video_writer = cv2.VideoWriter(\"heatmap_output.avi\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))  # Define region points region_points = [(20, 400), (1080, 404), (1080, 360), (20, 360)]  # Init heatmap heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     count_reg_pts=region_points,     names=model.names, )  while cap.isOpened():     success, im0 = cap.read()     if not success:         print(\"Video frame is empty or video processing has been successfully completed.\")         break      tracks = model.track(im0, persist=True, show=False)     im0 = heatmap_obj.generate_heatmap(im0, tracks)     video_writer.write(im0)  cap.release() video_writer.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8s.pt\")  # YOLOv8 custom/pretrained model  im0 = cv2.imread(\"path/to/image.png\")  # path to image file h, w = im0.shape[:2]  # image height and width  # Heatmap Init heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     names=model.names, )  results = model.track(im0, persist=True) im0 = heatmap_obj.generate_heatmap(im0, tracks=results) cv2.imwrite(\"ultralytics_output.png\", im0)` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") assert cap.isOpened(), \"Error reading video file\" w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))  # Video writer video_writer = cv2.VideoWriter(\"heatmap_output.avi\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, (w, h))  classes_for_heatmap = [0, 2]  # classes for heatmap  # Init heatmap heatmap_obj = solutions.Heatmap(     colormap=cv2.COLORMAP_PARULA,     view_img=True,     shape=\"circle\",     names=model.names, )  while cap.isOpened():     success, im0 = cap.read()     if not success:         print(\"Video frame is empty or video processing has been successfully completed.\")         break     tracks = model.track(im0, persist=True, show=False, classes=classes_for_heatmap)      im0 = heatmap_obj.generate_heatmap(im0, tracks)     video_writer.write(im0)  cap.release() video_writer.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") heatmap_obj = solutions.Heatmap(colormap=cv2.COLORMAP_PARULA, view_img=True, shape=\"circle\", names=model.names)  while cap.isOpened():     success, im0 = cap.read()     if not success:         break     tracks = model.track(im0, persist=True, show=False)     im0 = heatmap_obj.generate_heatmap(im0, tracks)     cv2.imshow(\"Heatmap\", im0)     if cv2.waitKey(1) & 0xFF == ord(\"q\"):         break  cap.release() cv2.destroyAllWindows()` \n```", "```py\n`import cv2  from ultralytics import YOLO, solutions  model = YOLO(\"yolov8n.pt\") cap = cv2.VideoCapture(\"path/to/video/file.mp4\") heatmap_obj = solutions.Heatmap(colormap=cv2.COLORMAP_PARULA, view_img=True, shape=\"circle\", names=model.names)  classes_for_heatmap = [0, 2]  # Classes to visualize while cap.isOpened():     success, im0 = cap.read()     if not success:         break     tracks = model.track(im0, persist=True, show=False, classes=classes_for_heatmap)     im0 = heatmap_obj.generate_heatmap(im0, tracks)     cv2.imshow(\"Heatmap\", im0)     if cv2.waitKey(1) & 0xFF == ord(\"q\"):         break  cap.release() cv2.destroyAllWindows()` \n```"]