- en: Iterables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可迭代对象
- en: Original text：[https://docs.sympy.org/latest/modules/utilities/iterables.html](https://docs.sympy.org/latest/modules/utilities/iterables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/utilities/iterables.html](https://docs.sympy.org/latest/modules/utilities/iterables.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use this as mixin when creating a class which is not supposed to return true
    when iterable() is called on its instances because calling list() on the instance,
    for example, would result in an infinite loop.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建不应在其实例上调用iterable()时返回true的类时使用此方法，例如，对实例调用list()将导致无限循环。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generates the binary partition of *n*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 生成*n*的二进制分区。
- en: A binary partition consists only of numbers that are powers of two. Each step
    reduces a \(2^{k+1}\) to \(2^k\) and \(2^k\). Thus 16 is converted to 8 and 8.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制分区仅由2的幂次数构成。每一步将\(2^{k+1}\)减少为\(2^k\)和\(2^k\)。因此，16转换为8和8。
- en: Examples
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: References
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1053](#id1)]'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1053](#id1)]'
- en: TAOCP 4, section 7.2.1.5, problem 64
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TAOCP 4，第7.2.1.5节，问题64
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Wrapper to necklaces to return a free (unrestricted) necklace.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 项链转换器以返回自由（无限制）项链。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Return the printed output of func().
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 返回func()的打印输出。
- en: '`func` should be a function without arguments that produces output with print
    statements.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`func`应为不带参数的函数，其通过打印语句产生输出。'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Return the subsequence that is a common start of sequences in `seqs`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 返回seqs中的公共起始子序列。
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return the subsequence that is a common ending of sequences in `seqs`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回seqs中的公共结束子序列。
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Connected components of an undirected graph or weakly connected components of
    a directed graph.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无向图的连通分量或有向图的弱连通分量。
- en: 'Parameters:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**G** : tuple[list, list[tuple[T, T]]'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**G**：元组[列表，列表[元组[T，T]]]'
- en: A tuple consisting of a list of vertices and a list of edges of a graph whose
    connected components are to be found.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由图的顶点列表和边列表组成的元组，其连接的组件将被找到。
- en: Examples
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Given an undirected graph:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个无向图：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: graph { A -- B C -- D }
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 { A -- B C -- D }
- en: 'We can find the connected components using this function if we include each
    edge in both directions:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在两个方向上都包含每条边，则可以使用此函数找到连接的组件。
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The weakly connected components of a directed graph can found the same way.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过相同的方式找到有向图的弱连通分量。
- en: Notes
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The vertices of the graph must be hashable for the data structures used. If
    the vertices are unhashable replace them with integer indices.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用于数据结构中必须为哈希的图顶点。如果顶点是不可哈希的，请用整数索引替换。
- en: This function uses Tarjan’s algorithm to compute the connected components in
    \(O(|V|+|E|)\) (linear) time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用Tarjan算法在\(O(|V|+|E|)\)（线性）时间内计算连接的组件。
- en: See also
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.utilities.iterables.strongly_connected_components`](#sympy.utilities.iterables.strongly_connected_components
    "sympy.utilities.iterables.strongly_connected_components")'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.strongly_connected_components`](#sympy.utilities.iterables.strongly_connected_components
    "sympy.utilities.iterables.strongly_connected_components")'
- en: References
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1054](#id2)]'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1054](#id2)]'
- en: '[https://en.wikipedia.org/wiki/Component_%28graph_theory%29](https://en.wikipedia.org/wiki/Component_%28graph_theory%29)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[图论组件](https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA%E7%BB%84%E4%BB%B6)'
- en: '[[R1055](#id3)]'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1055](#id3)]'
- en: '[https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm](https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[Tarjan强连通分量算法](https://zh.wikipedia.org/wiki/Tarjan%E7%9A%84%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E7%AE%97%E6%B3%95)'
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Merge dictionaries into a single dictionary.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将字典合并为单个字典。
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Only yield elements from \(iterator\) that do not occur in \(exclude\).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 仅从\(iterator\)中生成不出现在\(exclude\)中的元素。
- en: 'Parameters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**iterator** : iterable'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterator**：可迭代对象'
- en: iterator to take elements from
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从中取元素的迭代器
- en: '**exclude** : iterable'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**exclude**：可迭代对象'
- en: elements to exclude
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要排除的元素
- en: 'Returns:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**iterator** : iterator'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterator**：迭代器'
- en: filtered iterator
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 过滤的迭代器
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Recursively denest iterable containers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地去嵌套可迭代容器。
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you want to denest only a specified number of levels of nested containers,
    then set `levels` flag to the desired number of levels:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要仅取消嵌套的容器的指定层数，则将`levels`标志设置为所需的层数：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If cls argument is specified, it will only flatten instances of that class,
    for example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了cls参数，则仅展开该类的实例，例如：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: adapted from [https://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks](https://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 改编自[Python技巧](https://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks)
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Return permutations of [0, 1, …, n - 1] such that each permutation differs from
    the last by the exchange of a single pair of neighbors. The `n!` permutations
    are returned as an iterator. In order to obtain the next permutation from a random
    starting permutation, use the `next_trotterjohnson` method of the Permutation
    class (which generates the same sequence in a different manner).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回[0, 1, …, n - 1]的排列，使得每个排列与上一个排列仅通过交换一对相邻元素不同。将返回`n!`排列作为迭代器。为了从随机起始排列获取下一个排列，请使用Permutation类的`next_trotterjohnson`方法（以不同的方式生成相同的序列）。
- en: Examples
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is the sort of permutation used in the ringing of physical bells, and
    does not produce permutations in lexicographical order. Rather, the permutations
    differ from each other by exactly one inversion, and the position at which the
    swapping occurs varies periodically in a simple fashion. Consider the first few
    permutations of 4 elements generated by `permutations` and `generate_bell`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于物理钟声的排列，不按字典顺序生成排列。相反，排列彼此之间仅有一个反转，并且交换发生的位置以简单的方式周期性地变化。考虑由`permutations`和`generate_bell`生成的前几个4个元素的排列：
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice how the 2nd and 3rd lexicographical permutations have 3 elements out
    of place whereas each “bell” permutation always has only two elements out of place
    relative to the previous permutation (and so the signature (+/-1) of a permutation
    is opposite of the signature of the previous permutation).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第二和第三字典序排列的元素位置不同，而每个“贝尔”排列始终与前一个排列相比只有两个元素位置不同（因此排列的符号（+/-1）与前一个排列的符号相反）。
- en: 'How the position of inversion varies across the elements can be seen by tracing
    out where the largest number appears in the permutations:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过跟踪最大数出现的排列来看反转的位置是如何变化的：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.combinatorics.permutations.Permutation.next_trotterjohnson`](../combinatorics/permutations.html#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.combinatorics.permutations.Permutation.next_trotterjohnson`](../combinatorics/permutations.html#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
- en: References
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1056](#id4)]'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1056](#id4)]'
- en: '[https://en.wikipedia.org/wiki/Method_ringing](https://en.wikipedia.org/wiki/Method_ringing)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Method_ringing](https://en.wikipedia.org/wiki/Method_ringing)'
- en: '[[R1057](#id5)]'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1057](#id5)]'
- en: '[https://stackoverflow.com/questions/4856615/recursive-permutation/4857018](https://stackoverflow.com/questions/4856615/recursive-permutation/4857018)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stackoverflow.com/questions/4856615/recursive-permutation/4857018](https://stackoverflow.com/questions/4856615/recursive-permutation/4857018)'
- en: '[[R1058](#id6)]'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1058](#id6)]'
- en: '[https://web.archive.org/web/20160313023044/http://programminggeeks.com/bell-algorithm-for-permutation/](https://web.archive.org/web/20160313023044/http://programminggeeks.com/bell-algorithm-for-permutation/)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://web.archive.org/web/20160313023044/http://programminggeeks.com/bell-algorithm-for-permutation/](https://web.archive.org/web/20160313023044/http://programminggeeks.com/bell-algorithm-for-permutation/)'
- en: '[[R1059](#id7)]'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1059](#id7)]'
- en: '[https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm](https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm](https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm)'
- en: '[[R1060](#id8)]'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1060](#id8)]'
- en: Generating involutions, derangements, and relatives by ECO Vincent Vajnovszki,
    DMTCS vol 1 issue 12, 2010
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 生成自反排列、错位排列和亲戚的方法由ECO Vincent Vajnovszki, DMTCS vol 1 issue 12, 2010
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Return unique derangements of the elements of iterable `s`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 返回可迭代对象`s`的唯一错位排列。
- en: Examples
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.functions.combinatorial.factorials.subfactorial`](../functions/combinatorial.html#sympy.functions.combinatorial.factorials.subfactorial
    "sympy.functions.combinatorial.factorials.subfactorial")'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.functions.combinatorial.factorials.subfactorial`](../functions/combinatorial.html#sympy.functions.combinatorial.factorials.subfactorial
    "sympy.functions.combinatorial.factorials.subfactorial")'
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Generates involutions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成自反排列。
- en: An involution is a permutation that when multiplied by itself equals the identity
    permutation. In this implementation the involutions are generated using Fixed
    Points.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自反排列是一个乘以自身得到单位排列的排列。在这个实现中，自反排列使用固定点生成。
- en: Alternatively, an involution can be considered as a permutation that does not
    contain any cycles with a length that is greater than two.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以将自反排列视为不包含长度大于两个的循环的排列。
- en: Examples
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE28]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: References
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1061](#id9)]'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1061](#id9)]'
- en: '[https://mathworld.wolfram.com/PermutationInvolution.html](https://mathworld.wolfram.com/PermutationInvolution.html)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/PermutationInvolution.html](https://mathworld.wolfram.com/PermutationInvolution.html)'
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This algorithm generates oriented forests.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此算法生成有向森林。
- en: An oriented graph is a directed graph having no symmetric pair of directed edges.
    A forest is an acyclic graph, i.e., it has no cycles. A forest can also be described
    as a disjoint union of trees, which are graphs in which any two vertices are connected
    by exactly one simple path.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有向图是一种没有对称有向边的有向图。森林是无环图，即没有循环。森林也可以描述为树的不相交并集，其中任意两个顶点都恰好由一条简单路径连接。
- en: Examples
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE30]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: References
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R1062](#id10)]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1062](#id10)]'
- en: 'T. Beyer and S.M. Hedetniemi: constant time generation of rooted trees, SIAM
    J. Computing Vol. 9, No. 4, November 1980'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: T. Beyer和S.M. Hedetniemi：常数时间生成根树，SIAM J.计算机Vol. 9，No. 4，1980年11月
- en: '[[R1063](#id11)]'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1063](#id11)]'
- en: '[https://stackoverflow.com/questions/1633833/oriented-forest-taocp-algorithm-in-python](https://stackoverflow.com/questions/1633833/oriented-forest-taocp-algorithm-in-python)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stackoverflow.com/questions/1633833/oriented-forest-taocp-algorithm-in-python](https://stackoverflow.com/questions/1633833/oriented-forest-taocp-algorithm-in-python)'
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Splits a sequence into a list of lists of equal, adjacent elements.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将序列拆分为相等、相邻元素的列表。
- en: Examples
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 参见也
- en: '[`multiset`](#sympy.utilities.iterables.multiset "sympy.utilities.iterables.multiset")'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[`multiset`](#sympy.utilities.iterables.multiset "sympy.utilities.iterables.multiset")'
- en: '[PRE34]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return True if there are any duplicate elements in `seq`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`seq`中有任何重复元素，则返回True。
- en: Examples
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE35]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return True if there are any different elements in `seq`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`seq`中有任何不同的元素，则返回True。
- en: Examples
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return a list of length `bits` corresponding to the binary value of `n` with
    small bits to the right (last). If bits is omitted, the length will be the number
    required to represent `n`. If the bits are desired in reversed order, use the
    `[::-1]` slice of the returned list.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个长度为`bits`的列表，表示`n`的二进制值，小位于右侧（最后）。如果省略了`bits`，则长度将是表示`n`所需的位数。如果希望位的顺序是反向的，请使用返回列表的`[::-1]`切片。
- en: If a sequence of all bits-length lists starting from `[0, 0,..., 0]` through
    `[1, 1, ..., 1]` are desired, pass a non-integer for bits, e.g. `'all'`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望从`[0, 0,..., 0]`到`[1, 1, ..., 1]`开始的所有位长列表序列，则传递非整数以表示位，例如`'all'`。
- en: If the bit *string* is desired pass `str=True`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要位*串*，请传递`str=True`。
- en: Examples
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE40]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If all lists corresponding to 0 to 2**n - 1, pass a non-integer for bits:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有列表与0到2 ** n - 1对应，则传递非整数以表示位：
- en: '[PRE41]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If a bit string is desired of a given length, use str=True:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要指定特定长度的位串，请使用`str=True`：
- en: '[PRE42]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Cartesian product of iterables.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 可迭代集合的笛卡尔积。
- en: Generator of the Cartesian product of iterables. This is analogous to itertools.product
    except that it works with infinite iterables and will yield any item from the
    infinite product eventually.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 生成可迭代集合的笛卡尔积。这类似于itertools.product，但它可以处理无限可迭代对象，并且最终会产生来自无限积的任何项。
- en: Examples
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE44]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'With an infinite iterator:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用无限迭代器：
- en: '[PRE45]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: See also
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 参见也
- en: '[itertools.product](https://docs.python.org/3/library/itertools.html#itertools.product)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[itertools.product](https://docs.python.org/3/library/itertools.html#itertools.product)'
- en: '[PRE46]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Return True if the sequence is the same from left to right as it is from right
    to left in the whole sequence (default) or in the Python slice `s[i: j]`; else
    False.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '如果序列从左到右与整个序列中的右到左相同（默认），或在Python切片`s[i: j]`中，则返回True；否则返回False。'
- en: Examples
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE47]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Normal Python slicing is performed in place so there is no need to create a
    slice of the sequence for testing:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在原地执行普通的Python切片，因此不需要为测试创建序列的切片：
- en: '[PRE48]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: See also
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 参见也
- en: '[`sympy.ntheory.digits.is_palindromic`](../ntheory.html#sympy.ntheory.digits.is_palindromic
    "sympy.ntheory.digits.is_palindromic")'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.ntheory.digits.is_palindromic`](../ntheory.html#sympy.ntheory.digits.is_palindromic
    "sympy.ntheory.digits.is_palindromic")'
- en: tests integers
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 测试整数
- en: '[PRE49]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return a boolean indicating whether `i` is a sequence in the SymPy sense. If
    anything that fails the test below should be included as being a sequence for
    your application, set ‘include’ to that object’s type; multiple types should be
    passed as a tuple of types.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个布尔值，指示`i`是否在SymPy意义上是序列。如果你的应用程序需要包含任何不通过以下测试的对象作为序列，请将'include'设置为该对象的类型；多个类型应作为类型元组传递。
- en: 'Note: although generators can generate a sequence, they often need special
    handling to make sure their elements are captured before the generator is exhausted,
    so these are not included by default in the definition of a sequence.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：虽然生成器可以生成一个序列，但通常需要特殊处理以确保其元素在生成器耗尽之前被捕获，因此默认情况下不包括这些在序列的定义中。
- en: 'See also: iterable'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：可迭代对象
- en: Examples
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE50]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Return a boolean indicating whether `i` is SymPy iterable. True also indicates
    that the iterator is finite, e.g. you can call list(…) on the instance.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个布尔值，指示`i`是否为SymPy可迭代对象。True也表示迭代器是有限的，例如可以在实例上调用list(…)。
- en: When SymPy is working with iterables, it is almost always assuming that the
    iterable is not a string or a mapping, so those are excluded by default. If you
    want a pure Python definition, make exclude=None. To exclude multiple items, pass
    them as a tuple.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当SymPy处理可迭代对象时，几乎总是假设可迭代对象不是字符串或映射，因此默认情况下排除它们。如果希望纯Python定义，请设置exclude=None。要排除多个项，请作为元组传递它们。
- en: You can also set the _iterable attribute to True or False on your class, which
    will override the checks here, including the exclude test.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在您的类上将_iterable属性设置为True或False，这将覆盖这里的检查，包括排除测试。
- en: As a rule of thumb, some SymPy functions use this to check if they should recursively
    map over an object. If an object is technically iterable in the Python sense but
    does not desire this behavior (e.g., because its iteration is not finite, or because
    iteration might induce an unwanted computation), it should disable it by setting
    the _iterable attribute to False.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，某些SymPy函数使用这个来检查它们是否应该递归地映射一个对象。如果一个对象在Python意义上是可迭代的，但不希望有此行为（例如因为其迭代不是有限的，或者因为迭代可能引起不想要的计算），它应该通过将_iterable属性设置为False来禁用它。
- en: 'See also: is_sequence'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：is_sequence
- en: Examples
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE52]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Return sequence `l` partitioned into `k` bins.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列`l`分成`k`个箱子。
- en: Examples
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The default is to give the items in the same order, but grouped into k partitions
    without any reordering:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，按相同顺序提供项目，但分成k个分区而无需重新排序：
- en: '[PRE55]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `ordered` flag is either None (to give the simple partition of the elements)
    or is a 2 digit integer indicating whether the order of the bins and the order
    of the items in the bins matters. Given:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`ordered`标志要么为None（提供元素的简单分区），要么为一个两位数表示箱子的顺序和箱子中项目的顺序是否重要。给定：'
- en: '[PRE56]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'the following values for `ordered` have the shown meanings:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`ordered`的以下值具有所示的含义：'
- en: '[PRE57]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: See also
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`partitions`](#sympy.utilities.iterables.partitions "sympy.utilities.iterables.partitions"),
    [`multiset_partitions`](#sympy.utilities.iterables.multiset_partitions "sympy.utilities.iterables.multiset_partitions")'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`partitions`](#sympy.utilities.iterables.partitions "sympy.utilities.iterables.partitions"),
    [`multiset_partitions`](#sympy.utilities.iterables.multiset_partitions "sympy.utilities.iterables.multiset_partitions")'
- en: '[PRE59]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Returns the number of steps of left rotation required to obtain lexicographically
    minimal string/list/tuple, etc.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 返回获取词汇上最小的字符串/列表/元组等所需的左旋转步骤数。
- en: Examples
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE60]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: References
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1064](#id12)]'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1064](#id12)]'
- en: '[https://en.wikipedia.org/wiki/Lexicographically_minimal_string_rotation](https://en.wikipedia.org/wiki/Lexicographically_minimal_string_rotation)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zh.wikipedia.org/wiki/词汇最小化字符串旋转](https://zh.wikipedia.org/wiki/词汇最小化字符串旋转)'
- en: '[PRE61]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Return the rotation of the sequence in which the lexically smallest elements
    appear first, e.g. \(cba \rightarrow acb\).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列的旋转，在其中词汇上最小的元素首先出现，例如 \(cba \rightarrow acb\)。
- en: The sequence returned is a tuple, unless the input sequence is a string in which
    case a string is returned.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的序列是一个元组，除非输入序列是一个字符串，此时返回一个字符串。
- en: If `directed` is False then the smaller of the sequence and the reversed sequence
    is returned, e.g. \(cba \rightarrow abc\).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`directed`为False，则返回序列和反向序列中较小的那个，例如 \(cba \rightarrow abc\)。
- en: If `key` is not None then it is used to extract a comparison key from each element
    in iterable.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`key`不为None，则用于从可迭代对象的每个元素中提取比较键。
- en: Examples
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE62]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Return the hashable sequence in multiset form with values being the multiplicity
    of the item in the sequence.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 返回可散列序列的多重集形式，其中值是序列中项目的多重性。
- en: Examples
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE66]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: See also
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`group`](#sympy.utilities.iterables.group "sympy.utilities.iterables.group")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`group`](#sympy.utilities.iterables.group "sympy.utilities.iterables.group")'
- en: '[PRE67]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Return the unique combinations of size `n` from multiset `m`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 返回从多重集`m`中大小为`n`的唯一组合。
- en: Examples
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE68]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The number of combinations depends on the number of letters; the number of unique
    combinations depends on how the letters are repeated.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 组合数取决于字母的数量；唯一组合的数量取决于字母的重复方式。
- en: '[PRE70]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Generate derangements of the elements of s *in place*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在原地生成集合`s`的错排。
- en: Examples
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE72]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Because the derangements of multisets (not sets) are generated in place, copies
    of the return value must be made if a collection of derangements is desired or
    else all values will be the same:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因为多重集合（而不是集合）的错排是原地生成的，如果需要一组错排的副本，则必须进行复制，否则所有值将相同：
- en: '[PRE73]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Return unique partitions of the given multiset (in list form). If `m` is None,
    all multisets will be returned, otherwise only partitions with `m` parts will
    be returned.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定多重集合的唯一分区（以列表形式）。如果`m`为None，则将返回所有多重集合，否则仅返回具有`m`部分的分区。
- en: If `multiset` is an integer, a range [0, 1, …, multiset - 1] will be supplied.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`multiset`是整数，则提供一个范围[0, 1, …, multiset - 1]。
- en: Examples
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE75]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Only unique partitions are returned and these will be returned in a canonical
    order regardless of the order of the input:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 只返回唯一的分区，并且不管输入的顺序如何，它们将以规范顺序返回：
- en: '[PRE76]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'If m is omitted then all partitions will be returned:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略`m`，则将返回所有分区：
- en: '[PRE77]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Counting
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 计数
- en: 'The number of partitions of a set is given by the bell number:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 集合的分区数由贝尔数给出：
- en: '[PRE78]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The number of partitions of length k from a set of size n is given by the Stirling
    Number of the 2nd kind:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 从大小为n的集合中长度为k的分区数量由第二类斯特林数给出：
- en: '[PRE79]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: These comments on counting apply to *sets*, not multisets.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计数的注释适用于*集合*，而不是多重集。
- en: Notes
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: When all the elements are the same in the multiset, the order of the returned
    partitions is determined by the `partitions` routine. If one is counting partitions
    then it is better to use the `nT` function.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当多重集中的所有元素相同时，返回分区的顺序由`partitions`例程决定。如果要计数分区，则最好使用`nT`函数。
- en: See also
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`partitions`](#sympy.utilities.iterables.partitions "sympy.utilities.iterables.partitions"),
    [`sympy.combinatorics.partitions.Partition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.Partition
    "sympy.combinatorics.partitions.Partition"), [`sympy.combinatorics.partitions.IntegerPartition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.IntegerPartition
    "sympy.combinatorics.partitions.IntegerPartition"), [`sympy.functions.combinatorial.numbers.nT`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.nT
    "sympy.functions.combinatorial.numbers.nT")'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[`partitions`](#sympy.utilities.iterables.partitions "sympy.utilities.iterables.partitions"),
    [`sympy.combinatorics.partitions.Partition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.Partition
    "sympy.combinatorics.partitions.Partition"), [`sympy.combinatorics.partitions.IntegerPartition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.IntegerPartition
    "sympy.combinatorics.partitions.IntegerPartition"), [`sympy.functions.combinatorial.numbers.nT`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.nT
    "sympy.functions.combinatorial.numbers.nT")'
- en: '[PRE80]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Return the unique permutations of multiset `m`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 返回多重集合`m`的唯一排列。
- en: Examples
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE81]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: A routine to generate necklaces that may (free=True) or may not (free=False)
    be turned over to be viewed. The “necklaces” returned are comprised of `n` integers
    (beads) with `k` different values (colors). Only unique necklaces are returned.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于生成项链的例程，可能（free=True）或者不可以（free=False）被翻转查看。返回的“项链”由`n`个整数（珠子）组成，有`k`个不同的值（颜色）。只返回唯一的项链。
- en: Examples
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE83]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The “unrestricted necklace” is sometimes also referred to as a “bracelet” (an
    object that can be turned over, a sequence that can be reversed) and the term
    “necklace” is used to imply a sequence that cannot be reversed. So ACB == ABC
    for a bracelet (rotate and reverse) while the two are different for a necklace
    since rotation alone cannot make the two sequences the same.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: “无限制项链”有时也被称为“手镯”（一个可以翻转的对象，一个可以反转的序列），术语“项链”用来暗示一个不能被反转的序列。因此，对于手镯（旋转和反转），ACB
    == ABC，而对于项链，这两个序列是不同的，因为仅仅旋转不能使两个序列相同。
- en: '(mnemonic: Bracelets can be viewed Backwards, but Not Necklaces.)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: （记忆法：手镯可以反向查看，但项链不行。）
- en: '[PRE84]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: References
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R1065](#id13)]'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1065](#id13)]'
- en: '[https://mathworld.wolfram.com/Necklace.html](https://mathworld.wolfram.com/Necklace.html)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/Necklace.html](https://mathworld.wolfram.com/Necklace.html)'
- en: '[[R1066](#id14)]'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1066](#id14)]'
- en: Frank Ruskey, Carla Savage, and Terry Min Yih Wang, Generating necklaces, Journal
    of Algorithms 13 (1992), 414-430; [https://doi.org/10.1016/0196-6774(92)90047-G](https://doi.org/10.1016/0196-6774(92)90047-G)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Frank Ruskey, Carla Savage, and Terry Min Yih Wang, Generating necklaces, Journal
    of Algorithms 13 (1992), 414-430; [https://doi.org/10.1016/0196-6774(92)90047-G](https://doi.org/10.1016/0196-6774(92)90047-G)
- en: '[PRE87]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Generate an infinite stream of Symbols consisting of a prefix and increasing
    subscripts provided that they do not occur in `exclude`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 生成由前缀和递增下标组成的符号的无限流，前提是它们不会出现在`exclude`中。
- en: 'Parameters:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**prefix** : str, optional'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**prefix**：str，可选'
- en: The prefix to use. By default, this function will generate symbols of the form
    “x0”, “x1”, etc.
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要使用的前缀。默认情况下，此函数将生成形式为“x0”、“x1”等的符号。
- en: '**cls** : class, optional'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**cls**：class，可选'
- en: The class to use. By default, it uses `Symbol`, but you can also use `Wild`
    or `Dummy`.
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要使用的类。默认情况下，它使用`Symbol`，但您也可以使用`Wild`或`Dummy`。
- en: '**start** : int, optional'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**start**：int，可选'
- en: The start number. By default, it is 0.
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 起始编号。默认情况下为0。
- en: '**exclude** : list, tuple, set of cls, optional'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**exclude**：list、tuple、cls的集合，可选'
- en: Symbols to be excluded.
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要排除的符号。
- en: '***args, **kwargs**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '***args, **kwargs**'
- en: Additional positional and keyword arguments are passed to the *cls* class.
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递给*cls*类的额外位置和关键字参数。
- en: 'Returns:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**sym** : Symbol'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**sym**：符号'
- en: The subscripted symbols.
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 带下标的符号。
- en: '[PRE88]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Generates ordered partitions of integer *n*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 生成整数*n*的有序分区。
- en: 'Parameters:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**n** : int'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**：int'
- en: '**m** : int, optional'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**m**：int，可选'
- en: The default value gives partitions of all sizes else only those with size m.
    In addition, if *m* is not None then partitions are generated *in place* (see
    examples).
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认值提供所有尺寸的分区，否则只提供尺寸为m的分区。此外，如果*m*不为None，则会生成*就地*分区（请参见示例）。
- en: '**sort** : bool, default: True'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort**：bool，默认为True'
- en: Controls whether partitions are returned in sorted order when *m* is not None;
    when False, the partitions are returned as fast as possible with elements sorted,
    but when m|n the partitions will not be in ascending lexicographical order.
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 控制在*m*不为None时是否返回排序的分区；当False时，分区尽快返回并排序元素，但当m|n时，分区将不按升序字典顺序返回。
- en: Examples
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE89]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'All partitions of 5 in ascending lexicographical:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 所有大小为5的分区按升序字典顺序排列：
- en: '[PRE90]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Only partitions of 5 with two parts:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 只有两个部分的大小为5的分区：
- en: '[PRE91]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'When `m` is given, a given list objects will be used more than once for speed
    reasons so you will not see the correct partitions unless you make a copy of each
    as it is generated:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定`m`时，由于速度原因，将多次使用给定列表对象，因此除非在生成时复制每个对象，否则将无法看到正确的分区：
- en: '[PRE92]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: When `n` is a multiple of `m`, the elements are still sorted but the partitions
    themselves will be *unordered* if sort is False; the default is to return them
    in ascending lexicographical order.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当`n`是`m`的倍数时，元素仍然被排序，但如果sort为False，则分区本身将是*无序*的；默认是以升序字典顺序返回它们。
- en: '[PRE93]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'But if speed is more important than ordering, sort can be set to False:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果速度比顺序更重要，则可以将排序设置为False：
- en: '[PRE94]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: References
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1067](#id15)]'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1067](#id15)]'
- en: 'Generating Integer Partitions, [online], Available: [https://jeromekelleher.net/generating-integer-partitions.html](https://jeromekelleher.net/generating-integer-partitions.html)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 生成整数分区，[在线]，可用：[https://jeromekelleher.net/generating-integer-partitions.html](https://jeromekelleher.net/generating-integer-partitions.html)
- en: '[[R1068](#id16)]'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1068](#id16)]'
- en: 'Jerome Kelleher and Barry O’Sullivan, “Generating All Partitions: A Comparison
    Of Two Encodings”, [online], Available: [https://arxiv.org/pdf/0909.2331v2.pdf](https://arxiv.org/pdf/0909.2331v2.pdf)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Jerome Kelleher和Barry O’Sullivan，“生成所有分区：两种编码的比较”，[在线]，可用：[https://arxiv.org/pdf/0909.2331v2.pdf](https://arxiv.org/pdf/0909.2331v2.pdf)
- en: '[PRE95]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Generate all partitions of positive integer, n.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 生成正整数n的所有分区。
- en: 'Each partition is represented as a dictionary, mapping an integer to the number
    of copies of that integer in the partition. For example, the first partition of
    4 returned is {4: 1}, “4: one of them”.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '每个分区都表示为字典，将整数映射到分区中该整数的副本数。例如，返回的第一个大小为4的分区是{4: 1}，“4：其中一个”。'
- en: 'Parameters:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**n** : int'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**：int'
- en: '**m** : int, optional'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**m**：int，可选'
- en: 'limits number of parts in partition (mnemonic: m, maximum parts)'
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 限制分区中部分的数量（助记符：m，最大部分）
- en: '**k** : int, optional'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '**k**：int，可选'
- en: 'limits the numbers that are kept in the partition (mnemonic: k, keys)'
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 限制保留在分区中的数字（助记符：k，键）
- en: '**size** : bool, default: False'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**size**：bool，默认为False'
- en: If `True`, (M, P) is returned where M is the sum of the multiplicities and P
    is the generated partition. If `False`, only the generated partition is returned.
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为`True`，则返回(M, P)，其中M是多重度的总和，P是生成的分区。如果为`False`，则仅返回生成的分区。
- en: Examples
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE96]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The numbers appearing in the partition (the key of the returned dict) are limited
    with k:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在分区中出现的数字（返回字典的键）限制为k：
- en: '[PRE97]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The maximum number of parts in the partition (the sum of the values in the
    returned dict) are limited with m (default value, None, gives partitions from
    1 through n):'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 分区中的部分数目最多为分区中的值之和（返回的字典中的值之和），受 m 限制（默认值为 None，给出从 1 到 n 的分区）：
- en: '[PRE98]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: See also
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.combinatorics.partitions.Partition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.Partition
    "sympy.combinatorics.partitions.Partition"), [`sympy.combinatorics.partitions.IntegerPartition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.IntegerPartition
    "sympy.combinatorics.partitions.IntegerPartition")'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.combinatorics.partitions.Partition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.Partition
    "sympy.combinatorics.partitions.Partition")，[`sympy.combinatorics.partitions.IntegerPartition`](../combinatorics/partitions.html#sympy.combinatorics.partitions.IntegerPartition
    "sympy.combinatorics.partitions.IntegerPartition")'
- en: References
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1069](#id17)]'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1069](#id17)]'
- en: 'modified from Tim Peter’s version to allow for k and m values: [https://code.activestate.com/recipes/218332-generator-for-integer-partitions/](https://code.activestate.com/recipes/218332-generator-for-integer-partitions/)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 修改自 Tim Peter 的版本，以允许 k 和 m 值：[https://code.activestate.com/recipes/218332-generator-for-integer-partitions/](https://code.activestate.com/recipes/218332-generator-for-integer-partitions/)
- en: '[PRE99]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Return iterator in which the signs of non-zero elements of t are permuted.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个迭代器，其中 t 的非零元素的符号被排列。
- en: Examples
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE100]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Generate all postfixes of a sequence.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 生成序列的所有后缀。
- en: Examples
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE102]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Generate all prefixes of a sequence.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 生成序列的所有前缀。
- en: Examples
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE105]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return a list of elements in which none are in the same positions as they were
    originally. If an element fills more than half of the positions then an error
    will be raised since no derangement is possible. To obtain a derangement of as
    many items as possible–with some of the most numerous remaining in their original
    positions–pass \(strict=False\). To produce a pseudorandom derangment, pass a
    pseudorandom selector like \(choice\) (see below).
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元素列表，其中没有元素处于原始位置。如果一个元素填充了超过一半的位置，则会引发错误，因为不可能有一个置换。要获得尽可能多项目的置换 - 一些最多的保留在它们的原始位置
    - 通过传递像 `choice` 这样的伪随机选择器来产生一个伪随机置换（见下文）。
- en: Examples
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE108]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'A predictable result can be obtained by using a pseudorandom generator for
    the choice:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 使用伪随机生成器选择可以得到可预测的结果：
- en: '[PRE109]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'By reseeding, the same sequence can be obtained:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新播种，可以获得相同的序列：
- en: '[PRE110]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Reshape the sequence according to the template in `how`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `how` 中的模板重新整形序列。
- en: Examples
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE112]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Left rotates a list x by the number of steps specified in y.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 左旋转列表 x 按 y 中指定的步数。
- en: Examples
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE123]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Right rotates a list x by the number of steps specified in y.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 右旋转列表 x 按 y 中指定的步数。
- en: Examples
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE125]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Return a generator giving the items in s as list where each subsequent list
    has the items rotated to the left (default) or right (`dir=-1`) relative to the
    previous list.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个生成器，将 s 中的项作为列表给出，其中每个后续列表相对于前一个列表向左（默认）或向右（`dir=-1`）旋转。
- en: Examples
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE127]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'roundrobin recipe taken from itertools documentation: [https://docs.python.org/3/library/itertools.html#itertools-recipes](https://docs.python.org/3/library/itertools.html#itertools-recipes)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: roundrobin 配方取自 itertools 文档：[https://docs.python.org/3/library/itertools.html#itertools-recipes](https://docs.python.org/3/library/itertools.html#itertools-recipes)
- en: roundrobin(‘ABC’, ‘D’, ‘EF’) –> A D E B F C
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: roundrobin('ABC', 'D', 'EF') –> A D E B F C
- en: Recipe credited to George Sakkis
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 由 George Sakkis 贡献的配方
- en: '[PRE129]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Group the sequence into lists in which successive elements all compare the
    same with the comparison operator, `op`: op(seq[i + 1], seq[i]) is True from all
    elements in a run.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 将序列分组成列表，其中连续元素都使用比较运算符 `op` 相同：op(seq[i + 1], seq[i]) 从一个运行中的所有元素为 True。
- en: Examples
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE130]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Returns the partition of sequence \(l\) into \(n\) bins
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列 \(l\) 的分区为 \(n\) 个箱子
- en: 'Parameters:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**l** : Sequence[T]'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**l** : Sequence[T]'
- en: A nonempty sequence of any Python objects
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任意 Python 对象的非空序列
- en: '**n** : int'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : int'
- en: A positive integer
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正整数
- en: 'Yields:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '**out** : list[Sequence[T]]'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '**out** : list[Sequence[T]]'
- en: A list of sequences with concatenation equals \(l\). This should conform with
    the type of \(l\).
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个序列列表，其连接等于 \(l\)。这应符合 \(l\) 的类型。
- en: Explanation
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given the sequence \(l_1 \cdots l_m \in V^+\) where \(V^+\) is the Kleene plus
    of \(V\)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 给定序列 \(l_1 \cdots l_m \in V^+\)，其中 \(V^+\) 是 \(V\) 的 Kleene 加号
- en: 'The set of \(n\) partitions of \(l\) is defined as:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: \(l\) 的 \(n\) 个分区集合定义为：
- en: \[\{(s_1, \cdots, s_n) | s_1 \in V^+, \cdots, s_n \in V^+, s_1 \cdots s_n =
    l_1 \cdots l_m\}\]
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: \[\{(s_1, \cdots, s_n) | s_1 \in V^+, \cdots, s_n \in V^+, s_1 \cdots s_n =
    l_1 \cdots l_m\}\]
- en: Examples
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE132]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Notes
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记
- en: This is modified version of EnricoGiampieri’s partition generator from [https://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily](https://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对 EnricoGiampieri 的分区生成器的修改版本，来源于 [https://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily](https://stackoverflow.com/questions/13131491/partition-n-items-into-k-bins-in-python-lazily)
- en: See also
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sequence_partitions_empty`](#sympy.utilities.iterables.sequence_partitions_empty
    "sympy.utilities.iterables.sequence_partitions_empty")'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sequence_partitions_empty`](#sympy.utilities.iterables.sequence_partitions_empty
    "sympy.utilities.iterables.sequence_partitions_empty")'
- en: '[PRE133]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Returns the partition of sequence \(l\) into \(n\) bins with empty sequence
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列 \(l\) 的分区，分为 \(n\) 个空序列
- en: 'Parameters:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**l** : Sequence[T]'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**l** : Sequence[T]'
- en: A sequence of any Python objects (can be possibly empty)
  id: totrans-400
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任意Python对象的序列（可能为空）
- en: '**n** : int'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : int'
- en: A positive integer
  id: totrans-402
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个正整数
- en: 'Yields:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '产生:'
- en: '**out** : list[Sequence[T]]'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**out** : list[Sequence[T]]'
- en: A list of sequences with concatenation equals \(l\). This should conform with
    the type of \(l\).
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个序列的列表，其连接等于 \(l\)。这应符合 \(l\) 的类型。
- en: Explanation
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given the sequence \(l_1 \cdots l_m \in V^*\) where \(V^*\) is the Kleene star
    of \(V\)
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 给定序列 \(l_1 \cdots l_m \in V^*\)，其中 \(V^*\) 是 \(V\) 的 Kleene 星号
- en: 'The set of \(n\) partitions of \(l\) is defined as:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '\(l\) 的 \(n\) 个分区集合被定义为:'
- en: \[\{(s_1, \cdots, s_n) | s_1 \in V^*, \cdots, s_n \in V^*, s_1 \cdots s_n =
    l_1 \cdots l_m\}\]
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: \[\{(s_1, \cdots, s_n) | s_1 \in V^*, \cdots, s_n \in V^*, s_1 \cdots s_n =
    l_1 \cdots l_m\}\]
- en: There are more combinations than [`sequence_partitions()`](#sympy.utilities.iterables.sequence_partitions
    "sympy.utilities.iterables.sequence_partitions") because empty sequence can fill
    everywhere, so we try to provide different utility for this.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`sequence_partitions()`](#sympy.utilities.iterables.sequence_partitions "sympy.utilities.iterables.sequence_partitions")
    相比，有更多的组合，因为空序列可以填充到任何地方，因此我们尝试为此提供不同的实用工具。
- en: Examples
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE134]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: See also
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sequence_partitions`](#sympy.utilities.iterables.sequence_partitions "sympy.utilities.iterables.sequence_partitions")'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sequence_partitions`](#sympy.utilities.iterables.sequence_partitions "sympy.utilities.iterables.sequence_partitions")'
- en: '[PRE135]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Sift the sequence, `seq` according to `keyfunc`.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `keyfunc` 对序列 `seq` 进行筛选。
- en: 'Returns:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: When `binary` is `False` (default), the output is a dictionary
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `binary` 为 `False`（默认）时，输出是一个字典
- en: where elements of `seq` are stored in a list keyed to the value
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `seq` 的元素存储在一个列表中，以值为键
- en: of keyfunc for that element. If `binary` is True then a tuple
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 对于该元素的 keyfunc。如果 `binary` 为 True，则返回一个元组
- en: with lists `T` and `F` are returned where `T` is a list
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `T` 和 `F` 的列表，其中 `T` 是一个列表
- en: containing elements of seq for which `keyfunc` was `True` and
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 包含了 seq 的元素，其中 `keyfunc` 为 `True`，并且
- en: '`F` containing those elements for which `keyfunc` was `False`;'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 包含那些 `keyfunc` 为 `False` 的元素的 `F`;
- en: a ValueError is raised if the `keyfunc` is not binary.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `keyfunc` 不是二进制的，则会引发 ValueError。
- en: Examples
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE136]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: sift() returns a defaultdict() object, so any key that has no matches will give
    [].
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: sift() 返回一个 defaultdict() 对象，因此任何没有匹配的键都会返回 []。
- en: '[PRE138]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Sometimes you will not know how many keys you will get:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 有   有时您不知道将获得多少个键：
- en: '[PRE139]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Sometimes you expect the results to be binary; the results can be unpacked
    by setting `binary` to True:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您希望结果是二进制的；结果可以通过将 `binary` 设置为 True 来解包：
- en: '[PRE140]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'A ValueError is raised if the predicate was not actually binary (which is a
    good test for the logic where sifting is used and binary results were expected):'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '如果谓词实际上不是二进制的（这是用于测试筛选逻辑并且期望二进制结果的好测试）则引发 ValueError:'
- en: '[PRE141]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The non-binary sifting shows that there were 3 keys generated:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '非二进制筛选显示产生了 3 个键:'
- en: '[PRE142]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: If you need to sort the sifted items it might be better to use `ordered` which
    can economically apply multiple sort keys to a sequence while sorting.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要对筛选后的项目进行排序，最好使用 `ordered`，它可以在排序时将多个排序键经济地应用于序列。
- en: See also
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ordered`](../core.html#sympy.core.sorting.ordered "sympy.core.sorting.ordered")'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ordered`](../core.html#sympy.core.sorting.ordered "sympy.core.sorting.ordered")'
- en: '[PRE143]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Return iterator in which the signs of non-zero elements of t and the order of
    the elements are permuted and all returned values are unique.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 返回迭代器，其中 t 的非零元素的符号和元素的顺序被排列，并且所有返回的值都是唯一的。
- en: Examples
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE144]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Strongly connected components of a directed graph in reverse topological order.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 有向图的强连通分量按反向拓扑顺序排列。
- en: 'Parameters:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**G** : tuple[list, list[tuple[T, T]]'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '**G** : tuple[list, list[tuple[T, T]]'
- en: A tuple consisting of a list of vertices and a list of edges of a graph whose
    strongly connected components are to be found.
  id: totrans-449
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由顶点列表和边列表组成的元组，其中强连通分量的图将被找到。
- en: Examples
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider a directed graph (in dot notation):'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个有向图（使用点表示法）：
- en: '[PRE146]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: digraph { A -> B A -> C B -> C C -> B B -> D }
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 有向图 { A -> B A -> C B -> C C -> B B -> D }
- en: 'where vertices are the letters A, B, C and D. This graph can be encoded using
    Python’s elementary data structures as follows:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 其中顶点是字母 A、B、C 和 D。此图可以使用 Python 的基本数据结构编码，如下所示：
- en: '[PRE147]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The strongly connected components of this graph can be computed as
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 此图的强连通分量可以计算为
- en: '[PRE148]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: This also gives the components in reverse topological order.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 这也按照反向拓扑顺序给出组件。
- en: Since the subgraph containing B and C has a cycle they must be together in a
    strongly connected component. A and D are connected to the rest of the graph but
    not in a cyclic manner so they appear as their own strongly connected components.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 由于包含 B 和 C 的子图具有循环，它们必须作为一个强连通分量出现。A 和 D 与图的其余部分连接，但不是以循环方式连接，因此它们会作为它们自己的强连通分量出现。
- en: Notes
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: The vertices of the graph must be hashable for the data structures used. If
    the vertices are unhashable replace them with integer indices.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 图的顶点必须可散列以供所使用的数据结构使用。如果顶点不可散列，请用整数索引替换它们。
- en: This function uses Tarjan’s algorithm to compute the strongly connected components
    in \(O(|V|+|E|)\) (linear) time.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用 Tarjan 算法以 \(O(|V|+|E|)\)（线性）时间计算强连通分量。
- en: See also
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.utilities.iterables.connected_components`](#sympy.utilities.iterables.connected_components
    "sympy.utilities.iterables.connected_components")'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.connected_components`](#sympy.utilities.iterables.connected_components
    "sympy.utilities.iterables.connected_components")'
- en: References
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1070](#id18)]'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1070](#id18)]'
- en: '[https://en.wikipedia.org/wiki/Strongly_connected_component](https://en.wikipedia.org/wiki/Strongly_connected_component)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Strongly_connected_component](https://en.wikipedia.org/wiki/Strongly_connected_component)'
- en: '[[R1071](#id19)]'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1071](#id19)]'
- en: '[https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm](https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm](https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)'
- en: '[PRE150]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Generates all \(k\)-subsets (combinations) from an \(n\)-element set, `seq`.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 从 \(n\)-元素集合 `seq` 生成所有 \(k\)-子集（组合）。
- en: A \(k\)-subset of an \(n\)-element set is any subset of length exactly \(k\).
    The number of \(k\)-subsets of an \(n\)-element set is given by `binomial(n, k)`,
    whereas there are \(2^n\) subsets all together. If \(k\) is `None` then all \(2^n\)
    subsets will be returned from shortest to longest.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 \(n\)-元素集合的 \(k\)-子集是长度为 \(k\) 的任意子集。 \(n\)-元素集合的 \(k\)-子集数由 `binomial(n,
    k)` 给出，总共有 \(2^n\) 个子集。如果 \(k\) 是 `None`，则将按从最短到最长的顺序返回所有 \(2^n\) 个子集。
- en: Examples
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE151]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '`subsets(seq, k)` will return the \(\frac{n!}{k!(n - k)!}\) \(k\)-subsets (combinations)
    without repetition, i.e. once an item has been removed, it can no longer be “taken”:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`subsets(seq, k)` 将返回不重复的 \(\frac{n!}{k!(n - k)!}\) 个 \(k\)-子集（组合）：'
- en: '[PRE152]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '`subsets(seq, k, repetition=True)` will return the \(\frac{(n - 1 + k)!}{k!(n
    - 1)!}\) combinations *with* repetition:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`subsets(seq, k, repetition=True)` 将返回带有重复的 \(\frac{(n - 1 + k)!}{k!(n - 1)!}\)
    组合：'
- en: '[PRE153]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'If you ask for more items than are in the set you get the empty set unless
    you allow repetitions:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要求的项数超过集合中的项数，则会返回空集，除非允许重复：
- en: '[PRE154]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Return `n` items from `iter` iterator.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `iter` 迭代器返回 `n` 个项。
- en: '[PRE156]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Topological sort of graph’s vertices.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 图的顶点的拓扑排序。
- en: 'Parameters:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**graph** : tuple[list, list[tuple[T, T]]'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**graph**：元组[list, list[tuple[T, T]]'
- en: A tuple consisting of a list of vertices and a list of edges of a graph to be
    sorted topologically.
  id: totrans-488
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由图的顶点列表和边列表组成的元组，用于对图进行拓扑排序。
- en: '**key** : callable[T] (optional)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '**key**：callable[T]（可选）'
- en: Ordering key for vertices on the same level. By default the natural (e.g. lexicographic)
    ordering is used (in this case the base type must implement ordering relations).
  id: totrans-490
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在同一级别上对顶点进行排序的键。默认情况下使用自然（如词典）排序（在这种情况下，基本类型必须实现排序关系）。
- en: Examples
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider a graph:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个图：
- en: '[PRE157]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'where vertices are integers. This graph can be encoded using elementary Python’s
    data structures as follows:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 其中顶点是整数。此图可以使用 Python 的基本数据结构进行编码，如下所示：
- en: '[PRE158]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'To compute a topological sort for graph `(V, E)` issue:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算图 `(V, E)` 的拓扑排序，请执行：
- en: '[PRE159]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'If specific tie breaking approach is needed, use `key` parameter:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要特定的破解方法，请使用 `key` 参数：
- en: '[PRE160]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Only acyclic graphs can be sorted. If the input graph has a cycle, then `ValueError`
    will be raised:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 只有非循环图可以进行排序。如果输入图有循环，则会引发 `ValueError`：
- en: '[PRE161]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: References
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R1072](#id20)]'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1072](#id20)]'
- en: '[https://en.wikipedia.org/wiki/Topological_sorting](https://en.wikipedia.org/wiki/Topological_sorting)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Topological_sorting](https://en.wikipedia.org/wiki/Topological_sorting)'
- en: '[PRE162]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Group `iter` into tuples of length `n`. Raise an error if the length of `iter`
    is not a multiple of `n`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 将`iter`中的项分组成长度为`n`的元组。如果`iter`的长度不是`n`的倍数，则会引发错误。
- en: '[PRE163]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Yield unique elements from `seq` as an iterator. The second parameter `result`
    is used internally; it is not necessary to pass anything for this.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 将`seq`中的唯一元素作为迭代器返回。第二个参数`result`在内部使用；对于此参数，不需要传递任何内容。
- en: 'Note: changing the sequence during iteration will raise a RuntimeError if the
    size of the sequence is known; if you pass an iterator and advance the iterator
    you will change the output of this routine but there will be no warning.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在迭代过程中更改序列将引发RuntimeError（如果序列的大小已知）；如果传递一个迭代器并推进迭代器，您将更改此例程的输出，但不会收到警告。
- en: Examples
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '[PRE164]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Returns an iterator over the n-sized variations of `seq` (size N). `repetition`
    controls whether items in `seq` can appear more than once;
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`seq`的大小为N的n元变异的迭代器。`repetition`控制`seq`中的项是否可以多次出现；
- en: Examples
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: Examples
- en: '`variations(seq, n)` will return \(\frac{N!}{(N - n)!}\) permutations without
    repetition of `seq`’s elements:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`variations(seq, n)`将返回`seq`元素的无重复排列的\(\frac{N!}{(N - n)!}\)：'
- en: '[PRE167]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '`variations(seq, n, True)` will return the \(N^n\) permutations obtained by
    allowing repetition of elements:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`variations(seq, n, True)`将返回允许元素重复的\(N^n\)排列：'
- en: '[PRE168]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'If you ask for more items than are in the set you get the empty set unless
    you allow repetitions:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求的项数超过集合中的项数，则会得到空集，除非允许重复：
- en: '[PRE169]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: See also
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[itertools.permutations](https://docs.python.org/3/library/itertools.html#itertools.permutations),
    [itertools.product](https://docs.python.org/3/library/itertools.html#itertools.product)'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '[itertools.permutations](https://docs.python.org/3/library/itertools.html#itertools.permutations),
    [itertools.product](https://docs.python.org/3/library/itertools.html#itertools.product)'
- en: variations
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: variations
- en: variations(seq, n) Returns all the variations of the list of size n.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: variations(seq, n) 返回大小为n的列表的所有变异。
- en: Has an optional third argument. Must be a boolean value and makes the method
    return the variations with repetition if set to True, or the variations without
    repetition if set to False.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可选的第三个参数。必须是布尔值，如果设置为True，则方法返回带重复项的变异，如果设置为False，则返回不带重复项的变异。
- en: 'Examples::'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 'Examples::'
- en: '[PRE170]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: partitions
  id: totrans-529
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: partitions
- en: 'Although the combinatorics module contains Partition and IntegerPartition classes
    for investigation and manipulation of partitions, there are a few functions to
    generate partitions that can be used as low-level tools for routines: `partitions`
    and `multiset_partitions`. The former gives integer partitions, and the latter
    gives enumerated partitions of elements. There is also a routine `kbins` that
    will give a variety of permutations of partitions. And to obtain partitions as
    a list instead of a dictionary, there is the `ordered_partition` function which
    is quite fast. Finally, to simply obtain a count of the number of partitions without
    enumerating them, there is the `nT` function.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然组合模块包含用于研究和操作分区的Partition和IntegerPartition类，但有一些函数可生成分区，可用作低级工具进行例程：`partitions`和`multiset_partitions`。前者提供整数分区，后者提供元素的枚举分区。还有一个名为`kbins`的例程，它将给出分区的各种排列。为了将分区作为列表而不是字典获取，有`ordered_partition`函数，其速度相当快。最后，为了简单地获得分区数量的计数，有`nT`函数。
- en: See Also
  id: totrans-531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: See Also
- en: sympy.utilities.iterables.ordered_partitions, sympy.functions.combinatorial.numbers.nT
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: sympy.utilities.iterables.ordered_partitions, sympy.functions.combinatorial.numbers.nT
- en: 'partitions:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 'partitions:'
- en: '[PRE171]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'multiset_partitions:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 'multiset_partitions:'
- en: '[PRE172]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'kbins:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 'kbins:'
- en: '[PRE173]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
