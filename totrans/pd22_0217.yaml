- en: pandas.DataFrame.convert_dtypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert columns to the best possible dtypes using dtypes supporting `pd.NA`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**infer_objects**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether object dtypes should be converted to the best possible types.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_string**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether object dtypes should be converted to `StringDtype()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_integer**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether, if possible, conversion can be done to integer extension types.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_boolean**bool, defaults True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether object dtypes should be converted to `BooleanDtypes()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_floating**bool, defaults True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether, if possible, conversion can be done to floating extension types. If
    convert_integer is also True, preference will be give to integer dtypes if the
    floats can be faithfully casted to integers.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Copy of input object with new dtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`infer_objects`](pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: Infer dtypes of objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_datetime`](pandas.to_datetime.html#pandas.to_datetime "pandas.to_datetime")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to datetime.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_timedelta`](pandas.to_timedelta.html#pandas.to_timedelta "pandas.to_timedelta")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to timedelta.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_numeric`](pandas.to_numeric.html#pandas.to_numeric "pandas.to_numeric")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to a numeric type.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: By default, `convert_dtypes` will attempt to convert a Series (or each Series
    in a DataFrame) to dtypes that support `pd.NA`. By using the options `convert_string`,
    `convert_integer`, `convert_boolean` and `convert_floating`, it is possible to
    turn off individual conversions to `StringDtype`, the integer extension types,
    `BooleanDtype` or floating extension types, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: For object-dtyped columns, if `infer_objects` is `True`, use the inference rules
    as during normal Series/DataFrame construction. Then, if possible, convert to
    `StringDtype`, `BooleanDtype` or an appropriate integer or floating extension
    type, otherwise leave as `object`.
  prefs: []
  type: TYPE_NORMAL
- en: If the dtype is integer, convert to an appropriate integer extension type.
  prefs: []
  type: TYPE_NORMAL
- en: If the dtype is numeric, and consists of all integers, convert to an appropriate
    integer extension type. Otherwise, convert to an appropriate floating extension
    type.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, as new dtypes are added that support `pd.NA`, the results of
    this method will change to support those new dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Start with a DataFrame with default dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Convert the DataFrame to use best possible dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Start with a Series of strings and missing data represented by `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Obtain a Series with dtype `StringDtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
