["```py\nscipy.stats.monte_carlo_test(data, rvs, statistic, *, vectorized=None, n_resamples=9999, batch=None, alternative='two-sided', axis=0)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> def statistic(x, axis):\n...     return stats.skew(x, axis) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = stats.skewnorm.rvs(a=1, size=50, random_state=rng)\n>>> statistic(x, axis=0)\n0.12457412450240658 \n```", "```py\n>>> from scipy.stats import monte_carlo_test\n>>> # because our statistic is vectorized, we pass `vectorized=True`\n>>> rvs = lambda size: stats.norm.rvs(size=size, random_state=rng)\n>>> res = monte_carlo_test(x, rvs, statistic, vectorized=True)\n>>> print(res.statistic)\n0.12457412450240658\n>>> print(res.pvalue)\n0.7012 \n```", "```py\n>>> stats.skewtest(x).pvalue\n0.6892046027110614 \n```", "```py\n>>> x = stats.skewnorm.rvs(a=1, size=7, random_state=rng)\n>>> # stats.skewtest(x) would produce an error due to small sample\n>>> res = monte_carlo_test(x, rvs, statistic, vectorized=True) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots()\n>>> ax.hist(res.null_distribution, bins=50)\n>>> ax.set_title(\"Monte Carlo distribution of test statistic\")\n>>> ax.set_xlabel(\"Value of Statistic\")\n>>> ax.set_ylabel(\"Frequency\")\n>>> plt.show() \n```"]