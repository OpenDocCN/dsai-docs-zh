- en: scipy.linalg.lu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.lu.html#scipy.linalg.lu](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.lu.html#scipy.linalg.lu)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute LU decomposition of a matrix with partial pivoting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decomposition satisfies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: where `P` is a permutation matrix, `L` lower triangular with unit diagonal elements,
    and `U` upper triangular. If *permute_l* is set to `True` then `L` is returned
    already permuted and hence satisfying `A = L @ U`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(M, N) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to decompose
  prefs: []
  type: TYPE_NORMAL
- en: '**permute_l**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the multiplication P*L (Default: do not permute)'
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_a**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to overwrite data in a (may improve performance)
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input matrix contains only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination)
    if the inputs do contain infinities or NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '**p_indices**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If `True` the permutation information is returned as row indices. The default
    is `False` for backwards-compatibility reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(If `permute_l` is ``False``)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**p**(…, M, M) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Permutation arrays or vectors depending on *p_indices*
  prefs: []
  type: TYPE_NORMAL
- en: '**l**(…, M, K) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Lower triangular or trapezoidal array with unit diagonal. `K = min(M, N)`
  prefs: []
  type: TYPE_NORMAL
- en: '**u**(…, K, N) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Upper triangular or trapezoidal array
  prefs: []
  type: TYPE_NORMAL
- en: '**(If `permute_l` is ``True``)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**pl**(…, M, K) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Permuted L matrix. `K = min(M, N)`
  prefs: []
  type: TYPE_NORMAL
- en: '**u**(…, K, N) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Upper triangular or trapezoidal array
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Permutation matrices are costly since they are nothing but row reorder of `L`
    and hence indices are strongly recommended to be used instead if the permutation
    is required. The relation in the 2D case then becomes simply `A = L[P, :] @ U`.
    In higher dimensions, it is better to use *permute_l* to avoid complicated indexing
    tricks.
  prefs: []
  type: TYPE_NORMAL
- en: In 2D case, if one has the indices however, for some reason, the permutation
    matrix is still needed then it can be constructed by `np.eye(M)[P, :]`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use nd-arrays, for example, a demonstration with 4D array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
