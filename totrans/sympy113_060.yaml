- en: Prufer Sequences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/prufer.html](https://docs.sympy.org/latest/modules/combinatorics/prufer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Prufer correspondence is an algorithm that describes the bijection between
    labeled trees and the Prufer code. A Prufer code of a labeled tree is unique up
    to isomorphism and has a length of n - 2.
  prefs: []
  type: TYPE_NORMAL
- en: Prufer sequences were first used by Heinz Prufer to give a proof of Cayley’s
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R93](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LabeledTree.html](https://mathworld.wolfram.com/LabeledTree.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of edges and the number of nodes from the given runs that connect
    nodes in an integer-labelled tree.
  prefs: []
  type: TYPE_NORMAL
- en: All node numbers will be shifted so that the minimum node is 0\. It is not a
    problem if edges are repeated in the runs; only unique edges are returned. There
    is no assumption made about what the range of the node labels should be, but all
    nodes from the smallest through the largest must be present.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Duplicate edges are removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Prufer sequence that is delta beyond the current one.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of nodes in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Generates the Prufer sequence that is -delta before the current one.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Computes the rank of a Prufer sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns Prufer sequence for the Prufer object.
  prefs: []
  type: TYPE_NORMAL
- en: This sequence is found by removing the highest numbered vertex, recording the
    node it was attached to, and continuing until only two vertices remain. The Prufer
    sequence is the list of recorded nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_prufer`](#sympy.combinatorics.prufer.Prufer.to_prufer "sympy.combinatorics.prufer.Prufer.to_prufer")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the rank of the Prufer sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of possible trees of this Prufer object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return the Prufer sequence for a tree given as a list of edges where `n` is
    the number of nodes in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prufer_repr`](#sympy.combinatorics.prufer.Prufer.prufer_repr "sympy.combinatorics.prufer.Prufer.prufer_repr")'
  prefs: []
  type: TYPE_NORMAL
- en: returns Prufer sequence of a Prufer object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return the tree (as a list of edges) of the given Prufer sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`tree_repr`](#sympy.combinatorics.prufer.Prufer.tree_repr "sympy.combinatorics.prufer.Prufer.tree_repr")'
  prefs: []
  type: TYPE_NORMAL
- en: returns tree representation of a Prufer object.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R94](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html](https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Returns the tree representation of the Prufer object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_tree`](#sympy.combinatorics.prufer.Prufer.to_tree "sympy.combinatorics.prufer.Prufer.to_tree")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Finds the unranked Prufer sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
