- en: scipy.special.factorialk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.factorialk.html#scipy.special.factorialk](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.factorialk.html#scipy.special.factorialk)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multifactorial of n of order k, n(!!…!).
  prefs: []
  type: TYPE_NORMAL
- en: This is the multifactorial of n skipping k values. For example,
  prefs: []
  type: TYPE_NORMAL
- en: factorialk(17, 4) = 17!!!! = 17 * 13 * 9 * 5 * 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In particular, for any integer `n`, we have
  prefs: []
  type: TYPE_NORMAL
- en: factorialk(n, 1) = factorial(n)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: factorialk(n, 2) = factorial2(n)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int or array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate multifactorial. If *n* < 0, the return value is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int'
  prefs: []
  type: TYPE_NORMAL
- en: Order of multifactorial.
  prefs: []
  type: TYPE_NORMAL
- en: '**exact**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If exact is set to True, calculate the answer exactly using integer arithmetic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**val**int'
  prefs: []
  type: TYPE_NORMAL
- en: Multifactorial of *n*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: NotImplementedError
  prefs: []
  type: TYPE_NORMAL
- en: Raises when exact is False
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
