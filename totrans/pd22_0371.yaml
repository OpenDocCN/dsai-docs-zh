- en: pandas.DataFrame.join
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Join columns of another DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Join columns with other DataFrame either on index or on a key column. Efficiently
    join multiple DataFrame objects by index at once by passing a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other**DataFrame, Series, or a list containing any combination of them'
  prefs: []
  type: TYPE_NORMAL
- en: Index should be similar to one of the columns in this one. If a Series is passed,
    its name attribute must be set, and that will be used as the column name in the
    resulting joined DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**on**str, list of str, or array-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Column or index level name(s) in the caller to join on the index in other, otherwise
    joins index-on-index. If multiple values given, the other DataFrame must have
    a MultiIndex. Can pass an array as the join key if it is not already contained
    in the calling DataFrame. Like an Excel VLOOKUP operation.
  prefs: []
  type: TYPE_NORMAL
- en: '**how**{‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘left’'
  prefs: []
  type: TYPE_NORMAL
- en: How to handle the operation of the two objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'left: use calling frame’s index (or column if on is specified)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'right: use other’s index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'outer: form union of calling frame’s index (or column if on is specified) with
    other’s index, and sort it lexicographically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inner: form intersection of calling frame’s index (or column if on is specified)
    with other’s index, preserving the order of the calling’s one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cross: creates the cartesian product from both frames, preserves the order
    of the left keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lsuffix**str, default ‘’'
  prefs: []
  type: TYPE_NORMAL
- en: Suffix to use from left frame’s overlapping columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**rsuffix**str, default ‘’'
  prefs: []
  type: TYPE_NORMAL
- en: Suffix to use from right frame’s overlapping columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Order result DataFrame lexicographically by the join key. If False, the order
    of the join key depends on the join type (how keyword).
  prefs: []
  type: TYPE_NORMAL
- en: '**validate**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If specified, checks if join is of specified type.
  prefs: []
  type: TYPE_NORMAL
- en: '“one_to_one” or “1:1”: check if join keys are unique in both left and right
    datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“one_to_many” or “1:m”: check if join keys are unique in left dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“many_to_one” or “m:1”: check if join keys are unique in right dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“many_to_many” or “m:m”: allowed, but does not result in checks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe containing columns from both the caller and other.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.merge`](pandas.DataFrame.merge.html#pandas.DataFrame.merge "pandas.DataFrame.merge")'
  prefs: []
  type: TYPE_NORMAL
- en: For column(s)-on-column(s) operations.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Parameters on, lsuffix, and rsuffix are not supported when passing a list of
    DataFrame objects.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Join DataFrames using their indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we want to join using the key columns, we need to set key to be the index
    in both df and other. The joined DataFrame will have key as its index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Another option to join using the key columns is to use the on parameter. DataFrame.join
    always uses other’s index but we can use any column in df. This method preserves
    the original DataFrame’s index in the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using non-unique key values shows how they are matched.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
