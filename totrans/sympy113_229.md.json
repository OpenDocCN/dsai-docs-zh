["```py\n>>> from sympy import symbols, pprint, zeros, simplify\n>>> from sympy.physics.optics.polarization import (jones_vector, stokes_vector,\n...     half_wave_retarder, polarizing_beam_splitter, jones_2_stokes) \n```", "```py\n>>> psi, chi, p, I0 = symbols(\"psi, chi, p, I0\", real=True)\n>>> x0 = jones_vector(psi, chi)\n>>> pprint(x0, use_unicode=True)\n⎡-ⅈ⋅sin(χ)⋅sin(ψ) + cos(χ)⋅cos(ψ)⎤\n⎢                                ⎥\n⎣ⅈ⋅sin(χ)⋅cos(ψ) + sin(ψ)⋅cos(χ) ⎦ \n```", "```py\n>>> s0 = stokes_vector(psi, chi, p, I0)\n>>> pprint(s0, use_unicode=True)\n⎡          I₀          ⎤\n⎢                      ⎥\n⎢I₀⋅p⋅cos(2⋅χ)⋅cos(2⋅ψ)⎥\n⎢                      ⎥\n⎢I₀⋅p⋅sin(2⋅ψ)⋅cos(2⋅χ)⎥\n⎢                      ⎥\n⎣    I₀⋅p⋅sin(2⋅χ)     ⎦ \n```", "```py\n>>> alpha = symbols(\"alpha\", real=True)\n>>> HWP = half_wave_retarder(alpha)\n>>> x1 = simplify(HWP*x0) \n```", "```py\n>>> PBS = polarizing_beam_splitter()\n>>> X1 = zeros(4, 1)\n>>> X1[:2, :] = x1\n>>> X2 = PBS*X1\n>>> transmitted_port = X2[:2, :]\n>>> reflected_port = X2[2:, :] \n```", "```py\n>>> transmitted_power = jones_2_stokes(transmitted_port)[0]\n>>> reflected_power = jones_2_stokes(reflected_port)[0]\n>>> print(transmitted_power)\ncos(-2*alpha + chi + psi)**2/2 + cos(2*alpha + chi - psi)**2/2 \n```", "```py\n>>> print(reflected_power)\nsin(-2*alpha + chi + psi)**2/2 + sin(2*alpha + chi - psi)**2/2 \n```", "```py\nsympy.physics.optics.polarization.half_wave_retarder(theta)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import half_wave_retarder\n>>> theta= symbols(\"theta\", real=True)\n>>> HWP = half_wave_retarder(theta)\n>>> pprint(HWP, use_unicode=True)\n⎡   ⎛     2         2   ⎞                        ⎤\n⎢-ⅈ⋅⎝- sin (θ) + cos (θ)⎠    -2⋅ⅈ⋅sin(θ)⋅cos(θ)  ⎥\n⎢                                                ⎥\n⎢                             ⎛   2         2   ⎞⎥\n⎣   -2⋅ⅈ⋅sin(θ)⋅cos(θ)     -ⅈ⋅⎝sin (θ) - cos (θ)⎠⎦ \n```", "```py\nsympy.physics.optics.polarization.jones_2_stokes(e)\n```", "```py\n>>> from sympy import pprint, pi\n>>> from sympy.physics.optics.polarization import jones_vector\n>>> from sympy.physics.optics.polarization import jones_2_stokes\n>>> H = jones_vector(0, 0)\n>>> V = jones_vector(pi/2, 0)\n>>> D = jones_vector(pi/4, 0)\n>>> A = jones_vector(-pi/4, 0)\n>>> R = jones_vector(0, pi/4)\n>>> L = jones_vector(0, -pi/4)\n>>> pprint([jones_2_stokes(e) for e in [H, V, D, A, R, L]],\n...         use_unicode=True)\n⎡⎡1⎤  ⎡1 ⎤  ⎡1⎤  ⎡1 ⎤  ⎡1⎤  ⎡1 ⎤⎤\n⎢⎢ ⎥  ⎢  ⎥  ⎢ ⎥  ⎢  ⎥  ⎢ ⎥  ⎢  ⎥⎥\n⎢⎢1⎥  ⎢-1⎥  ⎢0⎥  ⎢0 ⎥  ⎢0⎥  ⎢0 ⎥⎥\n⎢⎢ ⎥, ⎢  ⎥, ⎢ ⎥, ⎢  ⎥, ⎢ ⎥, ⎢  ⎥⎥\n⎢⎢0⎥  ⎢0 ⎥  ⎢1⎥  ⎢-1⎥  ⎢0⎥  ⎢0 ⎥⎥\n⎢⎢ ⎥  ⎢  ⎥  ⎢ ⎥  ⎢  ⎥  ⎢ ⎥  ⎢  ⎥⎥\n⎣⎣0⎦  ⎣0 ⎦  ⎣0⎦  ⎣0 ⎦  ⎣1⎦  ⎣-1⎦⎦ \n```", "```py\nsympy.physics.optics.polarization.jones_vector(psi, chi)\n```", "```py\n>>> from sympy import pprint, symbols, pi\n>>> from sympy.physics.optics.polarization import jones_vector\n>>> psi, chi = symbols(\"psi, chi\", real=True) \n```", "```py\n>>> pprint(jones_vector(psi, chi), use_unicode=True)\n⎡-ⅈ⋅sin(χ)⋅sin(ψ) + cos(χ)⋅cos(ψ)⎤\n⎢                                ⎥\n⎣ⅈ⋅sin(χ)⋅cos(ψ) + sin(ψ)⋅cos(χ) ⎦ \n```", "```py\n>>> pprint(jones_vector(0, 0), use_unicode=True)\n⎡1⎤\n⎢ ⎥\n⎣0⎦ \n```", "```py\n>>> pprint(jones_vector(pi/2, 0), use_unicode=True)\n⎡0⎤\n⎢ ⎥\n⎣1⎦ \n```", "```py\n>>> pprint(jones_vector(pi/4, 0), use_unicode=True)\n⎡√2⎤\n⎢──⎥\n⎢2 ⎥\n⎢  ⎥\n⎢√2⎥\n⎢──⎥\n⎣2 ⎦ \n```", "```py\n>>> pprint(jones_vector(-pi/4, 0), use_unicode=True)\n⎡ √2 ⎤\n⎢ ── ⎥\n⎢ 2  ⎥\n⎢    ⎥\n⎢-√2 ⎥\n⎢────⎥\n⎣ 2  ⎦ \n```", "```py\n>>> pprint(jones_vector(0, pi/4), use_unicode=True)\n⎡ √2 ⎤\n⎢ ── ⎥\n⎢ 2  ⎥\n⎢    ⎥\n⎢√2⋅ⅈ⎥\n⎢────⎥\n⎣ 2  ⎦ \n```", "```py\n>>> pprint(jones_vector(0, -pi/4), use_unicode=True)\n⎡  √2  ⎤\n⎢  ──  ⎥\n⎢  2   ⎥\n⎢      ⎥\n⎢-√2⋅ⅈ ⎥\n⎢──────⎥\n⎣  2   ⎦ \n```", "```py\nsympy.physics.optics.polarization.linear_polarizer(theta=0)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import linear_polarizer\n>>> theta = symbols(\"theta\", real=True)\n>>> J = linear_polarizer(theta)\n>>> pprint(J, use_unicode=True)\n⎡      2                     ⎤\n⎢   cos (θ)     sin(θ)⋅cos(θ)⎥\n⎢                            ⎥\n⎢                     2      ⎥\n⎣sin(θ)⋅cos(θ)     sin (θ)   ⎦ \n```", "```py\nsympy.physics.optics.polarization.mueller_matrix(J)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import (mueller_matrix,\n...     linear_polarizer, half_wave_retarder, quarter_wave_retarder)\n>>> theta = symbols(\"theta\", real=True) \n```", "```py\n>>> pprint(mueller_matrix(linear_polarizer(theta)), use_unicode=True)\n⎡            cos(2⋅θ)      sin(2⋅θ)     ⎤\n⎢  1/2       ────────      ────────    0⎥\n⎢               2             2         ⎥\n⎢                                       ⎥\n⎢cos(2⋅θ)  cos(4⋅θ)   1    sin(4⋅θ)     ⎥\n⎢────────  ──────── + ─    ────────    0⎥\n⎢   2         4       4       4         ⎥\n⎢                                       ⎥\n⎢sin(2⋅θ)    sin(4⋅θ)    1   cos(4⋅θ)   ⎥\n⎢────────    ────────    ─ - ────────  0⎥\n⎢   2           4        4      4       ⎥\n⎢                                       ⎥\n⎣   0           0             0        0⎦ \n```", "```py\n>>> pprint(mueller_matrix(half_wave_retarder(theta)), use_unicode=True)\n⎡1              0                           0               0 ⎤\n⎢                                                             ⎥\n⎢        4           2                                        ⎥\n⎢0  8⋅sin (θ) - 8⋅sin (θ) + 1           sin(4⋅θ)            0 ⎥\n⎢                                                             ⎥\n⎢                                     4           2           ⎥\n⎢0          sin(4⋅θ)           - 8⋅sin (θ) + 8⋅sin (θ) - 1  0 ⎥\n⎢                                                             ⎥\n⎣0              0                           0               -1⎦ \n```", "```py\n>>> pprint(mueller_matrix(quarter_wave_retarder(theta)), use_unicode=True)\n⎡1       0             0            0    ⎤\n⎢                                        ⎥\n⎢   cos(4⋅θ)   1    sin(4⋅θ)             ⎥\n⎢0  ──────── + ─    ────────    -sin(2⋅θ)⎥\n⎢      2       2       2                 ⎥\n⎢                                        ⎥\n⎢     sin(4⋅θ)    1   cos(4⋅θ)           ⎥\n⎢0    ────────    ─ - ────────  cos(2⋅θ) ⎥\n⎢        2        2      2               ⎥\n⎢                                        ⎥\n⎣0    sin(2⋅θ)     -cos(2⋅θ)        0    ⎦ \n```", "```py\nsympy.physics.optics.polarization.phase_retarder(theta=0, delta=0)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import phase_retarder\n>>> theta, delta = symbols(\"theta, delta\", real=True)\n>>> R = phase_retarder(theta, delta)\n>>> pprint(R, use_unicode=True)\n⎡                          -ⅈ⋅δ               -ⅈ⋅δ               ⎤\n⎢                          ─────              ─────              ⎥\n⎢⎛ ⅈ⋅δ    2         2   ⎞    2    ⎛     ⅈ⋅δ⎞    2                ⎥\n⎢⎝ℯ   ⋅sin (θ) + cos (θ)⎠⋅ℯ       ⎝1 - ℯ   ⎠⋅ℯ     ⋅sin(θ)⋅cos(θ)⎥\n⎢                                                                ⎥\n⎢            -ⅈ⋅δ                                           -ⅈ⋅δ ⎥\n⎢            ─────                                          ─────⎥\n⎢⎛     ⅈ⋅δ⎞    2                  ⎛ ⅈ⋅δ    2         2   ⎞    2  ⎥\n⎣⎝1 - ℯ   ⎠⋅ℯ     ⋅sin(θ)⋅cos(θ)  ⎝ℯ   ⋅cos (θ) + sin (θ)⎠⋅ℯ     ⎦ \n```", "```py\nsympy.physics.optics.polarization.polarizing_beam_splitter(Tp=1, Rs=1, Ts=0, Rp=0, phia=0, phib=0)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import polarizing_beam_splitter\n>>> Ts, Rs, Tp, Rp = symbols(r\"Ts, Rs, Tp, Rp\", positive=True)\n>>> phia, phib = symbols(\"phi_a, phi_b\", real=True)\n>>> PBS = polarizing_beam_splitter(Tp, Rs, Ts, Rp, phia, phib)\n>>> pprint(PBS, use_unicode=False)\n[   ____                           ____                    ]\n[ \\/ Tp            0           I*\\/ Rp           0         ]\n[                                                          ]\n[                  ____                       ____  I*phi_a]\n[   0            \\/ Ts            0      -I*\\/ Rs *e       ]\n[                                                          ]\n[    ____                         ____                     ]\n[I*\\/ Rp           0            \\/ Tp            0         ]\n[                                                          ]\n[               ____  I*phi_b                    ____      ]\n[   0      -I*\\/ Rs *e            0            \\/ Ts       ] \n```", "```py\nsympy.physics.optics.polarization.quarter_wave_retarder(theta)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import quarter_wave_retarder\n>>> theta= symbols(\"theta\", real=True)\n>>> QWP = quarter_wave_retarder(theta)\n>>> pprint(QWP, use_unicode=True)\n⎡                       -ⅈ⋅π            -ⅈ⋅π               ⎤\n⎢                       ─────           ─────              ⎥\n⎢⎛     2         2   ⎞    4               4                ⎥\n⎢⎝ⅈ⋅sin (θ) + cos (θ)⎠⋅ℯ       (1 - ⅈ)⋅ℯ     ⋅sin(θ)⋅cos(θ)⎥\n⎢                                                          ⎥\n⎢         -ⅈ⋅π                                        -ⅈ⋅π ⎥\n⎢         ─────                                       ─────⎥\n⎢           4                  ⎛   2           2   ⎞    4  ⎥\n⎣(1 - ⅈ)⋅ℯ     ⋅sin(θ)⋅cos(θ)  ⎝sin (θ) + ⅈ⋅cos (θ)⎠⋅ℯ     ⎦ \n```", "```py\nsympy.physics.optics.polarization.reflective_filter(R)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import reflective_filter\n>>> R = symbols(\"R\", real=True)\n>>> pprint(reflective_filter(R), use_unicode=True)\n⎡√R   0 ⎤\n⎢       ⎥\n⎣0   -√R⎦ \n```", "```py\nsympy.physics.optics.polarization.stokes_vector(psi, chi, p=1, I=1)\n```", "```py\n>>> from sympy import pprint, symbols, pi\n>>> from sympy.physics.optics.polarization import stokes_vector\n>>> psi, chi, p, I = symbols(\"psi, chi, p, I\", real=True)\n>>> pprint(stokes_vector(psi, chi, p, I), use_unicode=True)\n⎡          I          ⎤\n⎢                     ⎥\n⎢I⋅p⋅cos(2⋅χ)⋅cos(2⋅ψ)⎥\n⎢                     ⎥\n⎢I⋅p⋅sin(2⋅ψ)⋅cos(2⋅χ)⎥\n⎢                     ⎥\n⎣    I⋅p⋅sin(2⋅χ)     ⎦ \n```", "```py\n>>> pprint(stokes_vector(0, 0), use_unicode=True)\n⎡1⎤\n⎢ ⎥\n⎢1⎥\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎣0⎦ \n```", "```py\n>>> pprint(stokes_vector(pi/2, 0), use_unicode=True)\n⎡1 ⎤\n⎢  ⎥\n⎢-1⎥\n⎢  ⎥\n⎢0 ⎥\n⎢  ⎥\n⎣0 ⎦ \n```", "```py\n>>> pprint(stokes_vector(pi/4, 0), use_unicode=True)\n⎡1⎤\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎢1⎥\n⎢ ⎥\n⎣0⎦ \n```", "```py\n>>> pprint(stokes_vector(-pi/4, 0), use_unicode=True)\n⎡1 ⎤\n⎢  ⎥\n⎢0 ⎥\n⎢  ⎥\n⎢-1⎥\n⎢  ⎥\n⎣0 ⎦ \n```", "```py\n>>> pprint(stokes_vector(0, pi/4), use_unicode=True)\n⎡1⎤\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎣1⎦ \n```", "```py\n>>> pprint(stokes_vector(0, -pi/4), use_unicode=True)\n⎡1 ⎤\n⎢  ⎥\n⎢0 ⎥\n⎢  ⎥\n⎢0 ⎥\n⎢  ⎥\n⎣-1⎦ \n```", "```py\n>>> pprint(stokes_vector(0, 0, 0), use_unicode=True)\n⎡1⎤\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎢0⎥\n⎢ ⎥\n⎣0⎦ \n```", "```py\nsympy.physics.optics.polarization.transmissive_filter(T)\n```", "```py\n>>> from sympy import pprint, symbols\n>>> from sympy.physics.optics.polarization import transmissive_filter\n>>> T = symbols(\"T\", real=True)\n>>> NDF = transmissive_filter(T)\n>>> pprint(NDF, use_unicode=True)\n⎡√T  0 ⎤\n⎢      ⎥\n⎣0   √T⎦ \n```"]