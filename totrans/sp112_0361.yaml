- en: scipy.ndimage.percentile_filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.percentile_filter.html#scipy.ndimage.percentile_filter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.percentile_filter.html#scipy.ndimage.percentile_filter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate a multidimensional percentile filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**percentile**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The percentile parameter may be less than zero, i.e., percentile = -20 equals
    percentile = 80
  prefs: []
  type: TYPE_NORMAL
- en: '**size**scalar or tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: See footprint, below. Ignored if footprint is given.
  prefs: []
  type: TYPE_NORMAL
- en: '**footprint**array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Either *size* or *footprint* must be defined. *size* gives the shape that is
    taken from the input array, at every element position, to define the input to
    the filter function. *footprint* is a boolean array that specifies (implicitly)
    a shape, but also which of the elements within this shape will get passed to the
    filter function. Thus `size=(n,m)` is equivalent to `footprint=np.ones((n,m))`.
    We adjust *size* to the number of dimensions of the input array, so that, if the
    input array is shape (10,10,10), and *size* is 2, then the actual size used is
    (2,2,2). When *footprint* is given, *size* is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reflect’, ‘constant’, ‘nearest’, ‘mirror’, ‘wrap’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended beyond its
    boundaries. Default is ‘reflect’. Behavior for each valid value is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'For consistency with the interpolation functions, the following mode names
    can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘wrap’.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**int or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the placement of the filter on the input array’s pixels. A value of
    0 (the default) centers the filter over the pixel, with positive values shifting
    the filter to the left, and negative ones to the right. By passing a sequence
    of origins with length equal to the number of dimensions of the input array, different
    shifts can be specified along each axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axes**tuple of int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If None, *input* is filtered along all axes. Otherwise, *input* is filtered
    along the specified axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**percentile_filter**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Filtered array. Has the same shape as *input*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-ndimage-percentile_filter-1.png](../Images/91fe42d52afa6dd9297c6f06522c548a.png)'
  prefs: []
  type: TYPE_IMG
