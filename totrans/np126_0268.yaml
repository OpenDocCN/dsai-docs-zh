- en: Constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/constants.html](https://numpy.org/doc/1.26/reference/constants.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'NumPy includes several constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of (positive) infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`inf`](#numpy.inf "numpy.inf") because [`Inf`](#numpy.Inf "numpy.Inf"),
    [`Infinity`](#numpy.Infinity "numpy.Infinity"), [`PINF`](#numpy.PINF "numpy.PINF")
    and [`infty`](#numpy.infty "numpy.infty") are aliases for [`inf`](#numpy.inf "numpy.inf").
    For more details, see [`inf`](#numpy.inf "numpy.inf").
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: inf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of (positive) infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`inf`](#numpy.inf "numpy.inf") because [`Inf`](#numpy.Inf "numpy.Inf"),
    [`Infinity`](#numpy.Infinity "numpy.Infinity"), [`PINF`](#numpy.PINF "numpy.PINF")
    and [`infty`](#numpy.infty "numpy.infty") are aliases for [`inf`](#numpy.inf "numpy.inf").
    For more details, see [`inf`](#numpy.inf "numpy.inf").
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: inf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of Not a Number (NaN).
  prefs: []
  type: TYPE_NORMAL
- en: '[`NaN`](#numpy.NaN "numpy.NaN") and [`NAN`](#numpy.NAN "numpy.NAN") are equivalent
    definitions of [`nan`](#numpy.nan "numpy.nan"). Please use [`nan`](#numpy.nan
    "numpy.nan") instead of [`NAN`](#numpy.NAN "numpy.NAN").'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: nan
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: yfloat
  prefs: []
  type: TYPE_NORMAL
- en: A floating point representation of negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'isinf : Shows which elements are positive or negative infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isposinf : Shows which elements are positive infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isneginf : Shows which elements are negative infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isnan : Shows which elements are Not a Number'
  prefs: []
  type: TYPE_NORMAL
- en: 'isfinite : Shows which elements are finite (not one of Not a Number, positive
    infinity and negative infinity)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). This means that Not a Number is not equivalent to infinity. Also that positive
    infinity is not equivalent to negative infinity. But infinity is equivalent to
    positive infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of negative zero.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: yfloat
  prefs: []
  type: TYPE_NORMAL
- en: A floating point representation of negative zero.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'PZERO : Defines positive zero.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isinf : Shows which elements are positive or negative infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isposinf : Shows which elements are positive infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isneginf : Shows which elements are negative infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isnan : Shows which elements are Not a Number.'
  prefs: []
  type: TYPE_NORMAL
- en: isfiniteShows which elements are finite - not one of
  prefs: []
  type: TYPE_NORMAL
- en: Not a Number, positive infinity and negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). Negative zero is considered to be a finite number.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of Not a Number (NaN).
  prefs: []
  type: TYPE_NORMAL
- en: '[`NaN`](#numpy.NaN "numpy.NaN") and [`NAN`](#numpy.NAN "numpy.NAN") are equivalent
    definitions of [`nan`](#numpy.nan "numpy.nan"). Please use [`nan`](#numpy.nan
    "numpy.nan") instead of [`NaN`](#numpy.NaN "numpy.NaN").'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: nan
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of (positive) infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`inf`](#numpy.inf "numpy.inf") because [`Inf`](#numpy.Inf "numpy.Inf"),
    [`Infinity`](#numpy.Infinity "numpy.Infinity"), [`PINF`](#numpy.PINF "numpy.PINF")
    and [`infty`](#numpy.infty "numpy.infty") are aliases for [`inf`](#numpy.inf "numpy.inf").
    For more details, see [`inf`](#numpy.inf "numpy.inf").
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: inf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of positive zero.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: yfloat
  prefs: []
  type: TYPE_NORMAL
- en: A floating point representation of positive zero.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'NZERO : Defines negative zero.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isinf : Shows which elements are positive or negative infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isposinf : Shows which elements are positive infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isneginf : Shows which elements are negative infinity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isnan : Shows which elements are Not a Number.'
  prefs: []
  type: TYPE_NORMAL
- en: isfiniteShows which elements are finite - not one of
  prefs: []
  type: TYPE_NORMAL
- en: Not a Number, positive infinity and negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). Positive zero is considered to be a finite number.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Euler’s constant, base of natural logarithms, Napier’s constant.
  prefs: []
  type: TYPE_NORMAL
- en: '`e = 2.71828182845904523536028747135266249775724709369995...`'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'exp : Exponential function log : Natural logarithm'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/E_%28mathematical_constant%29](https://en.wikipedia.org/wiki/E_%28mathematical_constant%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`γ = 0.5772156649015328606065120900824024310421...`'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Euler-Mascheroni_constant](https://en.wikipedia.org/wiki/Euler-Mascheroni_constant)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of (positive) infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: yfloat
  prefs: []
  type: TYPE_NORMAL
- en: A floating point representation of positive infinity.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'isinf : Shows which elements are positive or negative infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isposinf : Shows which elements are positive infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isneginf : Shows which elements are negative infinity'
  prefs: []
  type: TYPE_NORMAL
- en: 'isnan : Shows which elements are Not a Number'
  prefs: []
  type: TYPE_NORMAL
- en: 'isfinite : Shows which elements are finite (not one of Not a Number, positive
    infinity and negative infinity)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). This means that Not a Number is not equivalent to infinity. Also that positive
    infinity is not equivalent to negative infinity. But infinity is equivalent to
    positive infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Inf`](#numpy.Inf "numpy.Inf"), [`Infinity`](#numpy.Infinity "numpy.Infinity"),
    [`PINF`](#numpy.PINF "numpy.PINF") and [`infty`](#numpy.infty "numpy.infty") are
    aliases for [`inf`](#numpy.inf "numpy.inf").'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of (positive) infinity.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`inf`](#numpy.inf "numpy.inf") because [`Inf`](#numpy.Inf "numpy.Inf"),
    [`Infinity`](#numpy.Infinity "numpy.Infinity"), [`PINF`](#numpy.PINF "numpy.PINF")
    and [`infty`](#numpy.infty "numpy.infty") are aliases for [`inf`](#numpy.inf "numpy.inf").
    For more details, see [`inf`](#numpy.inf "numpy.inf").
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: inf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: IEEE 754 floating point representation of Not a Number (NaN).
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: 'y : A floating point representation of Not a Number.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs: []
  type: TYPE_NORMAL
- en: 'isnan : Shows which elements are Not a Number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'isfinite : Shows which elements are finite (not one of Not a Number, positive
    infinity and negative infinity)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). This means that Not a Number is not equivalent to infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[`NaN`](#numpy.NaN "numpy.NaN") and [`NAN`](#numpy.NAN "numpy.NAN") are aliases
    of [`nan`](#numpy.nan "numpy.nan").'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A convenient alias for None, useful for indexing arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Outer product, same as `outer(x, y)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`x[newaxis, :]` is equivalent to `x[newaxis]` and `x[None]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`pi = 3.1415926535897932384626433...`'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Pi](https://en.wikipedia.org/wiki/Pi)'
  prefs: []
  type: TYPE_NORMAL
