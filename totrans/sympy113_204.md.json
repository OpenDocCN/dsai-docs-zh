["```py\nclass sympy.physics.quantum.anticommutator.AntiCommutator(A, B)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.quantum import AntiCommutator\n>>> from sympy.physics.quantum import Operator, Dagger\n>>> x, y = symbols('x,y')\n>>> A = Operator('A')\n>>> B = Operator('B') \n```", "```py\n>>> ac = AntiCommutator(A,B); ac\n{A,B}\n>>> ac.doit()\nA*B + B*A \n```", "```py\n>>> ac = AntiCommutator(B,A); ac\n{A,B} \n```", "```py\n>>> AntiCommutator(3*x*A,x*y*B)\n3*x**2*y*{A,B} \n```", "```py\n>>> Dagger(AntiCommutator(A,B))\n{Dagger(A),Dagger(B)} \n```", "```py\ndoit(**hints)\n```"]