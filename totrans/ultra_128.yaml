- en: Train Custom Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[`docs.ultralytics.com/yolov5/tutorials/train_custom_data/`](https://docs.ultralytics.com/yolov5/tutorials/train_custom_data/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ðŸ“š This guide explains how to train your own **custom dataset** with [YOLOv5](https://github.com/ultralytics/yolov5)
    ðŸš€.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Start
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clone repo and install [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt)
    in a [**Python>=3.8.0**](https://www.python.org/) environment, including [**PyTorch>=1.8**](https://pytorch.org/get-started/locally/).
    [Models](https://github.com/ultralytics/yolov5/tree/master/models) and [datasets](https://github.com/ultralytics/yolov5/tree/master/data)
    download automatically from the latest YOLOv5 [release](https://github.com/ultralytics/yolov5/releases).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Train On Custom Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Ultralytics active learning](https://ultralytics.com/hub)'
  prefs: []
  type: TYPE_IMG
- en: Creating a custom model to detect your objects is an iterative process of collecting
    and organizing images, labeling your objects of interest, training a model, deploying
    it into the wild to make predictions, and then using that deployed model to collect
    examples of edge cases to repeat and improve.
  prefs: []
  type: TYPE_NORMAL
- en: Licensing
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultralytics offers two licensing options:'
  prefs: []
  type: TYPE_NORMAL
- en: The [AGPL-3.0 License](https://github.com/ultralytics/ultralytics/blob/main/LICENSE),
    an [OSI-approved](https://opensource.org/licenses/) open-source license ideal
    for students and enthusiasts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Enterprise License](https://ultralytics.com/license) for businesses seeking
    to incorporate our AI models into their products and services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details see [Ultralytics Licensing](https://ultralytics.com/license).
  prefs: []
  type: TYPE_NORMAL
- en: 'YOLOv5 models must be trained on labelled data in order to learn classes of
    objects in that data. There are two options for creating your dataset before you
    start training:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 1: Create a [Roboflow](https://roboflow.com/?ref=ultralytics) Dataset'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1.1 Collect Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your model will learn by example. Training on images similar to the ones it
    will see in the wild is of the utmost importance. Ideally, you will collect a
    wide variety of images from the same configuration (camera, angle, lighting, etc.)
    as you will ultimately deploy your project.
  prefs: []
  type: TYPE_NORMAL
- en: If this is not possible, you can start from [a public dataset](https://universe.roboflow.com/?ref=ultralytics)
    to train your initial model and then [sample images from the wild during inference](https://blog.roboflow.com/computer-vision-active-learning-tips/?ref=ultralytics)
    to improve your dataset and model iteratively.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Create Labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have collected images, you will need to annotate the objects of interest
    to create a ground truth for your model to learn from.
  prefs: []
  type: TYPE_NORMAL
- en: '![YOLOv5 accuracies](https://app.roboflow.com/?model=yolov5&ref=ultralytics
    "Create a Free Roboflow Account")'
  prefs: []
  type: TYPE_IMG
- en: '[Roboflow Annotate](https://roboflow.com/annotate?ref=ultralytics) is a simple
    web-based tool for managing and labeling your images with your team and exporting
    them in [YOLOv5''s annotation format](https://roboflow.com/formats/yolov5-pytorch-txt?ref=ultralytics).'
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Prepare Dataset for YOLOv5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whether you [label your images with Roboflow](https://roboflow.com/annotate?ref=ultralytics)
    or not, you can use it to convert your dataset into YOLO format, create a YOLOv5
    YAML configuration file, and host it for importing into your training script.
  prefs: []
  type: TYPE_NORMAL
- en: '[Create a free Roboflow account](https://app.roboflow.com/?model=yolov5&ref=ultralytics)
    and upload your dataset to a `Public` workspace, label any unannotated images,
    then generate and export a version of your dataset in `YOLOv5 Pytorch` format.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: YOLOv5 does online augmentation during training, so we do not recommend
    applying any augmentation steps in Roboflow for training with YOLOv5\. But we
    recommend applying the following preprocessing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommended Preprocessing Steps](img/ac7ffe631fd9af9f8bd369fc99a6cebc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Auto-Orient** - to strip EXIF orientation from your images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resize (Stretch)** - to the square input size of your model (640x640 is the
    YOLOv5 default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a version will give you a snapshot of your dataset, so you can always
    go back and compare your future model training runs against it, even if you add
    more images or change its configuration later.
  prefs: []
  type: TYPE_NORMAL
- en: '![Export in YOLOv5 Format](img/03af3625a1a6398c1d83acf98936d9d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Export in `YOLOv5 Pytorch` format, then copy the snippet into your training
    script or notebook to download your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Roboflow dataset download snippet](img/12be70e035123de5f9e65767cf1199ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Option 2: Create a Manual Dataset'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 2.1 Create `dataset.yaml`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[COCO128](https://www.kaggle.com/ultralytics/coco128) is an example small tutorial
    dataset composed of the first 128 images in [COCO](https://cocodataset.org/) train2017\.
    These same 128 images are used for both training and validation to verify our
    training pipeline is capable of overfitting. [data/coco128.yaml](https://github.com/ultralytics/yolov5/blob/master/data/coco128.yaml),
    shown below, is the dataset config file that defines 1) the dataset root directory
    `path` and relative paths to `train` / `val` / `test` image directories (or `*.txt`
    files with image paths) and 2) a class `names` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2.2 Create Labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After using an annotation tool to label your images, export your labels to
    **YOLO format**, with one `*.txt` file per image (if no objects in image, no `*.txt`
    file is required). The `*.txt` file specifications are:'
  prefs: []
  type: TYPE_NORMAL
- en: One row per object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each row is `class x_center y_center width height` format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box coordinates must be in **normalized xywh** format (from 0 to 1). If your
    boxes are in pixels, divide `x_center` and `width` by image width, and `y_center`
    and `height` by image height.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class numbers are zero-indexed (start from 0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Roboflow annotations](img/7862b814c7eb88586c58cc415aac0ee0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The label file corresponding to the above image contains 2 persons (class `0`)
    and a tie (class `27`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Roboflow dataset preprocessing](img/95161ff593802e8e1a7aee55e61c2d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 2.3 Organize Directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Organize your train and val images and labels according to the example below.
    YOLOv5 assumes `/coco128` is inside a `/datasets` directory **next to** the `/yolov5`
    directory. **YOLOv5 locates labels automatically for each image** by replacing
    the last instance of `/images/` in each image path with `/labels/`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![YOLOv5 dataset structure](img/af465e2a88df7a85a7bbf7dc4588995b.png)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Select a Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Select a pretrained model to start training from. Here we select [YOLOv5s](https://github.com/ultralytics/yolov5/blob/master/models/yolov5s.yaml),
    the second-smallest and fastest model available. See our README [table](https://github.com/ultralytics/yolov5#pretrained-checkpoints)
    for a full comparison of all models.
  prefs: []
  type: TYPE_NORMAL
- en: '![YOLOv5 models](img/ffa2ff00ee071ea0f899ac622121cf9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Train a YOLOv5s model on COCO128 by specifying dataset, batch-size, image size
    and either pretrained `--weights yolov5s.pt` (recommended), or randomly initialized
    `--weights '' --cfg yolov5s.yaml` (not recommended). Pretrained weights are auto-downloaded
    from the [latest YOLOv5 release](https://github.com/ultralytics/yolov5/releases).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ Add `--cache ram` or `--cache disk` to speed up training (requires significant
    RAM/disk resources).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ Always train from a local dataset. Mounted or network drives like Google Drive
    will be very slow.
  prefs: []
  type: TYPE_NORMAL
- en: All training results are saved to `runs/train/` with incrementing run directories,
    i.e. `runs/train/exp2`, `runs/train/exp3` etc. For more details see the Training
    section of our tutorial notebook. ![Open In Colab](https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb)
    ![Open In Kaggle](https://www.kaggle.com/ultralytics/yolov5)
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Visualize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Comet Logging and Visualization ðŸŒŸ NEW
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Comet](https://bit.ly/yolov5-readme-comet) is now fully integrated with YOLOv5\.
    Track and visualize model metrics in real time, save your hyperparameters, datasets,
    and model checkpoints, and visualize your model predictions with [Comet Custom
    Panels](https://bit.ly/yolov5-colab-comet-panels)! Comet makes sure you never
    lose track of your work and makes it easy to share results and collaborate across
    teams of all sizes!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting started is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn more about all the supported Comet features for this integration,
    check out the Comet Tutorial. If you''d like to learn more about Comet, head over
    to our [documentation](https://bit.ly/yolov5-colab-comet-docs). Get started by
    trying out the Comet Colab Notebook: ![Open In Colab](https://colab.research.google.com/drive/1RG0WOQyxlDlo5Km8GogJpIEJlg_5lyYO?usp=sharing)'
  prefs: []
  type: TYPE_NORMAL
- en: '![YOLO UI](img/ff37b378e0fc9906a44a9196515ec1f9.png)'
  prefs: []
  type: TYPE_IMG
- en: ClearML Logging and Automation ðŸŒŸ NEW
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[ClearML](https://clear.ml/) is completely integrated into YOLOv5 to track
    your experimentation, manage dataset versions and even remotely execute training
    runs. To enable ClearML:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install clearml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: run `clearml-init` to connect to a ClearML server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You''ll get all the great expected features from an experiment manager: live
    updates, model upload, experiment comparison etc. but ClearML also tracks uncommitted
    changes and installed packages for example. Thanks to that ClearML Tasks (which
    is what we call experiments) are also reproducible on different machines! With
    only 1 extra line, we can schedule a YOLOv5 training task on a queue to be executed
    by any number of ClearML Agents (workers).'
  prefs: []
  type: TYPE_NORMAL
- en: You can use ClearML Data to version your dataset and then pass it to YOLOv5
    simply using its unique ID. This will help you keep track of your data without
    adding extra hassle. Explore the ClearML Tutorial for details!
  prefs: []
  type: TYPE_NORMAL
- en: '![ClearML Experiment Management UI](https://clear.ml/)'
  prefs: []
  type: TYPE_IMG
- en: Local Logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Training results are automatically logged with [Tensorboard](https://www.tensorflow.org/tensorboard)
    and [CSV](https://github.com/ultralytics/yolov5/pull/4148) loggers to `runs/train`,
    with a new experiment directory created for each new training as `runs/train/exp2`,
    `runs/train/exp3`, etc.
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains train and val statistics, mosaics, labels, predictions
    and augmented mosaics, as well as metrics and charts including precision-recall
    (PR) curves and confusion matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Local logging results](img/3a55f7a591b526105186a450060fcee7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Results file `results.csv` is updated after each epoch, and then plotted as
    `results.png` (below) after training completes. You can also plot any `results.csv`
    file manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![results.png](img/35b4c06846d28420289c7aa59df324f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next Steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once your model is trained you can use your best checkpoint `best.pt` to:'
  prefs: []
  type: TYPE_NORMAL
- en: Run [CLI](https://github.com/ultralytics/yolov5#quick-start-examples) or Python
    inference on new images and videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Validate](https://github.com/ultralytics/yolov5/blob/master/val.py) accuracy
    on train, val and test splits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export to TensorFlow, Keras, ONNX, TFlite, TF.js, CoreML and TensorRT formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evolve hyperparameters to improve performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Improve](https://docs.roboflow.com/adding-data/upload-api?ref=ultralytics)
    your model by sampling real-world images and adding them to your dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultralytics provides a range of ready-to-use environments, each pre-installed
    with essential dependencies such as [CUDA](https://developer.nvidia.com/cuda),
    [CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/),
    and [PyTorch](https://pytorch.org/), to kickstart your projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Free GPU Notebooks**: ![Run on Gradient](https://bit.ly/yolov5-paperspace-notebook)
    ![Open In Colab](https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb)
    ![Open In Kaggle](https://www.kaggle.com/ultralytics/yolov5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud**: GCP Quickstart Guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon**: AWS Quickstart Guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: AzureML Quickstart Guide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker**: Docker Quickstart Guide ![Docker Pulls](https://hub.docker.com/r/ultralytics/yolov5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![YOLOv5 CI](https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml)'
  prefs: []
  type: TYPE_IMG
- en: 'This badge indicates that all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions)
    Continuous Integration (CI) tests are successfully passing. These CI tests rigorously
    check the functionality and performance of YOLOv5 across various key aspects:
    [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py),
    [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py),
    and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py).
    They ensure consistent and reliable operation on macOS, Windows, and Ubuntu, with
    tests conducted every 24 hours and upon each new commit.'
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I train YOLOv5 on my custom dataset?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Training YOLOv5 on a custom dataset involves several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prepare Your Dataset**: Collect and label images. Use tools like [Roboflow](https://roboflow.com/?ref=ultralytics)
    to organize data and export in [YOLOv5 format](https://roboflow.com/formats/yolov5-pytorch-txt?ref=ultralytics).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Setup Environment**: Clone the YOLOv5 repo and install dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Create Dataset Configuration**: Write a `dataset.yaml` file defining train/val
    paths and class names.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Train the Model**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What tools can I use to annotate my YOLOv5 dataset?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use [Roboflow Annotate](https://roboflow.com/annotate?ref=ultralytics),
    an intuitive web-based tool for labeling images. It supports team collaboration
    and exports in YOLOv5 format. After collecting images, use Roboflow to create
    and manage annotations efficiently. Other options include tools like LabelImg
    and CVAT for local annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I use Ultralytics HUB for training my YOLO models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ultralytics HUB offers an end-to-end platform for training, deploying, and
    managing YOLO models without needing extensive coding skills. Benefits of using
    Ultralytics HUB include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy Model Training**: Simplifies the training process with preconfigured
    environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Management**: Effortlessly manage datasets and version control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time Monitoring**: Integrates tools like [Comet](https://bit.ly/yolov5-readme-comet)
    for real-time metrics tracking and visualization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**: Ideal for team projects with shared resources and easy management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I convert my annotated data to YOLOv5 format?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To convert annotated data to YOLOv5 format using Roboflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Upload Your Dataset** to a Roboflow workspace.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Label Images** if not already labeled.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Generate and Export** the dataset in `YOLOv5 Pytorch` format. Ensure preprocessing
    steps like Auto-Orient and Resize (Stretch) to the square input size (e.g., 640x640)
    are applied.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Download the Dataset** and integrate it into your YOLOv5 training script.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the licensing options for using YOLOv5 in commercial applications?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ultralytics offers two licensing options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AGPL-3.0 License**: An open-source license suitable for non-commercial use,
    ideal for students and enthusiasts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise License**: Tailored for businesses seeking to integrate YOLOv5
    into commercial products and services. For detailed information, visit our [Licensing
    page](https://ultralytics.com/license).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, refer to our guide on [Ultralytics Licensing](https://ultralytics.com/license).
  prefs: []
  type: TYPE_NORMAL
