- en: Data type objects (dtype)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.dtypes.html](https://numpy.org/doc/1.26/reference/arrays.dtypes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A data type object (an instance of [`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class) describes how the bytes in the fixed-size block of memory
    corresponding to an array item should be interpreted. It describes the following
    aspects of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the data (integer, float, Python object, etc.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Size of the data (how many bytes is in *e.g.* the integer)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Byte order of the data ([little-endian](../glossary.html#term-little-endian)
    or [big-endian](../glossary.html#term-big-endian))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the data type is [structured data type](../glossary.html#term-structured-data-type),
    an aggregate of other data types, (*e.g.*, describing an array item consisting
    of an integer and a float),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: what are the names of the “[fields](../glossary.html#term-field)” of the structure,
    by which they can be [accessed](../user/basics.indexing.html#arrays-indexing-fields),
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: what is the data-type of each [field](../glossary.html#term-field), and
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: which part of the memory block each field takes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the data type is a sub-array, what is its shape and data type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To describe the type of scalar data, there are several [built-in scalar types](arrays.scalars.html#arrays-scalars-built-in)
    in NumPy for various precision of integers, floating-point numbers, *etc*. An
    item extracted from an array, *e.g.*, by indexing, will be a Python object whose
    type is the scalar type associated with the data type of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scalar types are not [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") objects, even though they can be used in place of one whenever
    a data type specification is needed in NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: Structured data types are formed by creating a data type whose [field](../glossary.html#term-field)
    contain other data types. Each field has a name by which it can be [accessed](../user/basics.indexing.html#arrays-indexing-fields).
    The parent data type should be of sufficient size to contain all its fields; the
    parent is nearly always based on the [`void`](arrays.scalars.html#numpy.void "numpy.void")
    type which allows an arbitrary item size. Structured data types may also contain
    nested structured sub-array data types in their fields.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a data type can describe items that are themselves arrays of items
    of another data type. These sub-arrays must, however, be of a fixed size.
  prefs: []
  type: TYPE_NORMAL
- en: If an array is created using a data-type describing a sub-array, the dimensions
    of the sub-array are appended to the shape of the array when the array is created.
    Sub-arrays in a field of a structured type behave differently, see [Field access](../user/basics.indexing.html#arrays-indexing-fields).
  prefs: []
  type: TYPE_NORMAL
- en: Sub-arrays always have a C-contiguous memory layout.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple data type containing a 32-bit big-endian integer: (see [Specifying
    and constructing data types](#arrays-dtypes-constructing) for details on construction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The corresponding array scalar type is [`int32`](arrays.scalars.html#numpy.int32
    "numpy.int32").
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'A structured data type containing a 16-character string (in field ‘name’) and
    a sub-array of two 64-bit floating-point number (in field ‘grades’):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Items of an array of this data type are wrapped in an [array scalar](arrays.scalars.html#arrays-scalars)
    type that also has two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '## Specifying and constructing data types'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever a data-type is required in a NumPy function or method, either a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") object or something that can be converted to one can be supplied.
    Such conversions are done by the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  prefs: []
  type: TYPE_TB
- en: 'What can be converted to a data-type object is described below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") object'
  prefs: []
  type: TYPE_NORMAL
- en: Used as-is.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: 'The default data type: [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_").'
  prefs: []
  type: TYPE_NORMAL
- en: Array-scalar types
  prefs: []
  type: TYPE_NORMAL
- en: The 24 built-in [array scalar type objects](arrays.scalars.html#arrays-scalars-built-in)
    all convert to an associated data-type object. This is true for their sub-classes
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that not all data-type information can be supplied with a type-object:
    for example, [`flexible`](arrays.scalars.html#numpy.flexible "numpy.flexible")
    data-types have a default *itemsize* of 0, and require an explicitly given size
    to be useful.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Generic types
  prefs: []
  type: TYPE_NORMAL
- en: 'The generic hierarchical type objects convert to corresponding type objects
    according to the associations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") |'
  prefs: []
  type: TYPE_TB
- en: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
  prefs: []
  type: TYPE_TB
- en: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
  prefs: []
  type: TYPE_TB
- en: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 1.19: This conversion of generic scalar types is deprecated.
    This is because it can be unexpected in a context such as `arr.astype(dtype=np.floating)`,
    which casts an array of `float32` to an array of `float64`, even though `float32`
    is a subdtype of `np.floating`.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Python types
  prefs: []
  type: TYPE_NORMAL
- en: 'Several python types are equivalent to a corresponding array scalar when used
    to generate a [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`int`](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python
    v3.11)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(in
    Python v3.11)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python
    v3.11)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
  prefs: []
  type: TYPE_TB
- en: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  prefs: []
  type: TYPE_TB
- en: '| (all others) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_")
    |'
  prefs: []
  type: TYPE_TB
- en: Note that `str` corresponds to UCS4 encoded unicode strings, while `string`
    is an alias to `bytes_`. The name `np.unicode_` is also available as an alias
    to `np.str_`, see [Note on string types](#string-dtype-note).
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All other types map to `object_` for convenience. Code should expect that such
    types may map to a specific (new) dtype in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Types with `.dtype`
  prefs: []
  type: TYPE_NORMAL
- en: 'Any type object with a `dtype` attribute: The attribute will be accessed and
    used directly. The attribute must return something that is convertible into a
    dtype object.'
  prefs: []
  type: TYPE_NORMAL
- en: Several kinds of strings can be converted. Recognized strings can be prepended
    with `'>'` ([big-endian](../glossary.html#term-big-endian)), `'<'` ([little-endian](../glossary.html#term-little-endian)),
    or `'='` (hardware-native, the default), to specify the byte order.
  prefs: []
  type: TYPE_NORMAL
- en: One-character strings
  prefs: []
  type: TYPE_NORMAL
- en: Each built-in data-type has a character code (the updated Numeric typecodes),
    that uniquely identifies it.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Array-protocol type strings (see [The array interface protocol](arrays.interface.html#arrays-interface))
  prefs: []
  type: TYPE_NORMAL
- en: The first character specifies the kind of data and the remaining characters
    specify the number of bytes per item, except for Unicode, where it is interpreted
    as the number of characters. The item size must correspond to an existing type,
    or an error will be raised. The supported kinds are
  prefs: []
  type: TYPE_NORMAL
- en: '| `''?''` | boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `''b''` | (signed) byte |'
  prefs: []
  type: TYPE_TB
- en: '| `''B''` | unsigned byte |'
  prefs: []
  type: TYPE_TB
- en: '| `''i''` | (signed) integer |'
  prefs: []
  type: TYPE_TB
- en: '| `''u''` | unsigned integer |'
  prefs: []
  type: TYPE_TB
- en: '| `''f''` | floating-point |'
  prefs: []
  type: TYPE_TB
- en: '| `''c''` | complex-floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `''m''` | timedelta |'
  prefs: []
  type: TYPE_TB
- en: '| `''M''` | datetime |'
  prefs: []
  type: TYPE_TB
- en: '| `''O''` | (Python) objects |'
  prefs: []
  type: TYPE_TB
- en: '| `''S''`, `''a''` | zero-terminated bytes (not recommended) |'
  prefs: []
  type: TYPE_TB
- en: '| `''U''` | Unicode string |'
  prefs: []
  type: TYPE_TB
- en: '| `''V''` | raw data ([`void`](arrays.scalars.html#numpy.void "numpy.void"))
    |'
  prefs: []
  type: TYPE_TB
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note on string types
  prefs: []
  type: TYPE_NORMAL
- en: For backward compatibility with existing code originally written to support
    Python 2, `S` and `a` typestrings are zero-terminated bytes and [`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_") continues to alias [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_
    "numpy.bytes_"). For unicode strings, use `U`, [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_"), or [`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_").
    For signed bytes that do not need zero-termination `b` or `i1` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: String with comma-separated fields
  prefs: []
  type: TYPE_NORMAL
- en: A short-hand notation for specifying the format of a structured data type is
    a comma-separated string of basic formats.
  prefs: []
  type: TYPE_NORMAL
- en: A basic format in this context is an optional shape specifier followed by an
    array-protocol type string. Parenthesis are required on the shape if it has more
    than one dimension. NumPy allows a modification on the format in that any string
    that can uniquely identify the type can be used to specify the data-type in a
    field. The generated data-type fields are named `'f0'`, `'f1'`, …, `'f<N-1>'`
    where N (>1) is the number of comma-separated basic formats in the string. If
    the optional shape specifier is provided, then the data-type for the corresponding
    field describes a sub-array.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: field named `f0` containing a 32-bit integer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f1` containing a 2 x 3 sub-array of 64-bit floating-point numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f2` containing a 32-bit floating-point number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: field named `f0` containing a 3-character string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f1` containing a sub-array of shape (3,) containing 64-bit unsigned
    integers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f2` containing a 3 x 4 sub-array containing 10-character strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Type strings
  prefs: []
  type: TYPE_NORMAL
- en: 'Any string in `numpy.sctypeDict`.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`(flexible_dtype, itemsize)`'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument must be an object that is converted to a zero-sized flexible
    data-type object, the second argument is an integer providing the desired itemsize.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`(fixed_dtype, shape)`'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is any object that can be converted into a fixed-size data-type
    object. The second argument is the desired shape of this type. If the shape parameter
    is 1, then the data-type object used to be equivalent to fixed dtype. This behaviour
    is deprecated since NumPy 1.17 and will raise an error in the future. If *shape*
    is a tuple, then the new dtype defines a sub-array of the given shape.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`[(field_name, field_dtype, field_shape), ...]`'
  prefs: []
  type: TYPE_NORMAL
- en: '*obj* should be a list of fields where each field is described by a tuple of
    length 2 or 3\. (Equivalent to the `descr` item in the [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") attribute.)'
  prefs: []
  type: TYPE_NORMAL
- en: The first element, *field_name*, is the field name (if this is `''` then a standard
    field name, `'f#'`, is assigned). The field name may also be a 2-tuple of strings
    where the first string is either a “title” (which may be any string or unicode
    string) or meta-data for the field which can be any object, and the second string
    is the “name” which must be a valid Python identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The second element, *field_dtype*, can be anything that can be interpreted as
    a data-type.
  prefs: []
  type: TYPE_NORMAL
- en: The optional third element *field_shape* contains the shape if this field represents
    an array of the data-type in the second element. Note that a 3-tuple with a third
    argument equal to 1 is equivalent to a 2-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: This style does not accept *align* in the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor as it is assumed that all of the memory is accounted
    for by the array interface description.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data-type with fields `big` (big-endian 32-bit integer) and `little` (little-endian
    32-bit integer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Data-type with fields `R`, `G`, `B`, `A`, each being an unsigned 8-bit integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
  prefs: []
  type: TYPE_NORMAL
- en: This style has two required and three optional keys. The *names* and *formats*
    keys are required. Their respective values are equal-length lists with the field
    names and the field formats. The field names must be strings and the field formats
    can be any object accepted by [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: When the optional keys *offsets* and *titles* are provided, their values must
    each be lists of the same length as the *names* and *formats* lists. The *offsets*
    value is a list of byte offsets (limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)")) for each field, while the *titles* value is a list of titles
    for each field (`None` can be used if no title is desired for that field). The
    *titles* can be any object, but when a [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") object will add another entry to the fields dictionary keyed
    by the title and referencing the same field tuple which will contain the title
    as an additional tuple member.
  prefs: []
  type: TYPE_NORMAL
- en: The *itemsize* key allows the total size of the dtype to be set, and must be
    an integer large enough so all the fields are within the dtype. If the dtype being
    constructed is aligned, the *itemsize* must also be divisible by the struct alignment.
    Total dtype *itemsize* is limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type with fields `r`, `g`, `b`, `a`, each being an 8-bit unsigned integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Data type with fields `r` and `b` (with the given titles), both being 8-bit
    unsigned integers, the first at byte position 0 from the start of the field and
    the second at position 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`{''field1'': ..., ''field2'': ..., ...}`'
  prefs: []
  type: TYPE_NORMAL
- en: This usage is discouraged, because it is ambiguous with the other dict-based
    construction method. If you have a field called ‘names’ and a field called ‘formats’
    there will be a conflict.
  prefs: []
  type: TYPE_NORMAL
- en: This style allows passing in the [`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields") attribute of a data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '*obj* should contain string or unicode keys that refer to `(data-type, offset)`
    or `(data-type, offset, title)` tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type containing field `col1` (10-character string at byte position 0),
    `col2` (32-bit float at byte position 10), and `col3` (integers at byte position
    14):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`(base_dtype, new_dtype)`'
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy 1.7 and later, this form allows *base_dtype* to be interpreted as a
    structured dtype. Arrays created with this dtype will have underlying dtype *base_dtype*
    but will have fields and flags taken from *new_dtype*. This is useful for creating
    custom structured dtypes, as done in [record arrays](arrays.classes.html#arrays-classes-rec).
  prefs: []
  type: TYPE_NORMAL
- en: This form also makes it possible to specify struct dtypes with overlapping fields,
    functioning like the ‘union’ type in C. This usage is discouraged, however, and
    the union mechanism is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: Both arguments must be convertible to data-type objects with the same total
    size.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 32-bit integer, whose first two bytes are interpreted as an integer via field
    `real`, and the following two bytes via field `imag`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '32-bit integer, which is interpreted as consisting of a sub-array of shape
    `(4,)` containing 8-bit integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '32-bit integer, containing fields `r`, `g`, `b`, `a` that interpret the 4 bytes
    in the integer as four unsigned integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy data type descriptions are instances of the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Size of the data is in turn described by:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Endianness of this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  prefs: []
  type: TYPE_TB
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  prefs: []
  type: TYPE_TB
- en: 'For data types that describe sub-arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Attributes providing additional information:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  prefs: []
  type: TYPE_TB
- en: 'Metadata attached by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data types have the following method for changing the byte order:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  prefs: []
  type: TYPE_TB
- en: 'The following methods implement the pickle protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  prefs: []
  type: TYPE_TB
- en: 'Comparison operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '## Specifying and constructing data types'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever a data-type is required in a NumPy function or method, either a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") object or something that can be converted to one can be supplied.
    Such conversions are done by the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  prefs: []
  type: TYPE_TB
- en: 'What can be converted to a data-type object is described below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") object'
  prefs: []
  type: TYPE_NORMAL
- en: Used as-is.
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: 'The default data type: [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_").'
  prefs: []
  type: TYPE_NORMAL
- en: Array-scalar types
  prefs: []
  type: TYPE_NORMAL
- en: The 24 built-in [array scalar type objects](arrays.scalars.html#arrays-scalars-built-in)
    all convert to an associated data-type object. This is true for their sub-classes
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that not all data-type information can be supplied with a type-object:
    for example, [`flexible`](arrays.scalars.html#numpy.flexible "numpy.flexible")
    data-types have a default *itemsize* of 0, and require an explicitly given size
    to be useful.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Generic types
  prefs: []
  type: TYPE_NORMAL
- en: 'The generic hierarchical type objects convert to corresponding type objects
    according to the associations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") |'
  prefs: []
  type: TYPE_TB
- en: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
  prefs: []
  type: TYPE_TB
- en: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
  prefs: []
  type: TYPE_TB
- en: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 1.19: This conversion of generic scalar types is deprecated.
    This is because it can be unexpected in a context such as `arr.astype(dtype=np.floating)`,
    which casts an array of `float32` to an array of `float64`, even though `float32`
    is a subdtype of `np.floating`.'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in Python types
  prefs: []
  type: TYPE_NORMAL
- en: 'Several python types are equivalent to a corresponding array scalar when used
    to generate a [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`int`](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python
    v3.11)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(in
    Python v3.11)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python
    v3.11)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
  prefs: []
  type: TYPE_TB
- en: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
  prefs: []
  type: TYPE_TB
- en: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  prefs: []
  type: TYPE_TB
- en: '| (all others) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_")
    |'
  prefs: []
  type: TYPE_TB
- en: Note that `str` corresponds to UCS4 encoded unicode strings, while `string`
    is an alias to `bytes_`. The name `np.unicode_` is also available as an alias
    to `np.str_`, see [Note on string types](#string-dtype-note).
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All other types map to `object_` for convenience. Code should expect that such
    types may map to a specific (new) dtype in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Types with `.dtype`
  prefs: []
  type: TYPE_NORMAL
- en: 'Any type object with a `dtype` attribute: The attribute will be accessed and
    used directly. The attribute must return something that is convertible into a
    dtype object.'
  prefs: []
  type: TYPE_NORMAL
- en: Several kinds of strings can be converted. Recognized strings can be prepended
    with `'>'` ([big-endian](../glossary.html#term-big-endian)), `'<'` ([little-endian](../glossary.html#term-little-endian)),
    or `'='` (hardware-native, the default), to specify the byte order.
  prefs: []
  type: TYPE_NORMAL
- en: One-character strings
  prefs: []
  type: TYPE_NORMAL
- en: Each built-in data-type has a character code (the updated Numeric typecodes),
    that uniquely identifies it.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Array-protocol type strings (see [The array interface protocol](arrays.interface.html#arrays-interface))
  prefs: []
  type: TYPE_NORMAL
- en: The first character specifies the kind of data and the remaining characters
    specify the number of bytes per item, except for Unicode, where it is interpreted
    as the number of characters. The item size must correspond to an existing type,
    or an error will be raised. The supported kinds are
  prefs: []
  type: TYPE_NORMAL
- en: '| `''?''` | boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `''b''` | (signed) byte |'
  prefs: []
  type: TYPE_TB
- en: '| `''B''` | unsigned byte |'
  prefs: []
  type: TYPE_TB
- en: '| `''i''` | (signed) integer |'
  prefs: []
  type: TYPE_TB
- en: '| `''u''` | unsigned integer |'
  prefs: []
  type: TYPE_TB
- en: '| `''f''` | floating-point |'
  prefs: []
  type: TYPE_TB
- en: '| `''c''` | complex-floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `''m''` | timedelta |'
  prefs: []
  type: TYPE_TB
- en: '| `''M''` | datetime |'
  prefs: []
  type: TYPE_TB
- en: '| `''O''` | (Python) objects |'
  prefs: []
  type: TYPE_TB
- en: '| `''S''`, `''a''` | zero-terminated bytes (not recommended) |'
  prefs: []
  type: TYPE_TB
- en: '| `''U''` | Unicode string |'
  prefs: []
  type: TYPE_TB
- en: '| `''V''` | raw data ([`void`](arrays.scalars.html#numpy.void "numpy.void"))
    |'
  prefs: []
  type: TYPE_TB
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note on string types
  prefs: []
  type: TYPE_NORMAL
- en: For backward compatibility with existing code originally written to support
    Python 2, `S` and `a` typestrings are zero-terminated bytes and [`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_") continues to alias [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_
    "numpy.bytes_"). For unicode strings, use `U`, [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_"), or [`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_").
    For signed bytes that do not need zero-termination `b` or `i1` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: String with comma-separated fields
  prefs: []
  type: TYPE_NORMAL
- en: A short-hand notation for specifying the format of a structured data type is
    a comma-separated string of basic formats.
  prefs: []
  type: TYPE_NORMAL
- en: A basic format in this context is an optional shape specifier followed by an
    array-protocol type string. Parenthesis are required on the shape if it has more
    than one dimension. NumPy allows a modification on the format in that any string
    that can uniquely identify the type can be used to specify the data-type in a
    field. The generated data-type fields are named `'f0'`, `'f1'`, …, `'f<N-1>'`
    where N (>1) is the number of comma-separated basic formats in the string. If
    the optional shape specifier is provided, then the data-type for the corresponding
    field describes a sub-array.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: field named `f0` containing a 32-bit integer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f1` containing a 2 x 3 sub-array of 64-bit floating-point numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f2` containing a 32-bit floating-point number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: field named `f0` containing a 3-character string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f1` containing a sub-array of shape (3,) containing 64-bit unsigned
    integers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: field named `f2` containing a 3 x 4 sub-array containing 10-character strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Type strings
  prefs: []
  type: TYPE_NORMAL
- en: 'Any string in `numpy.sctypeDict`.keys():'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`(flexible_dtype, itemsize)`'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument must be an object that is converted to a zero-sized flexible
    data-type object, the second argument is an integer providing the desired itemsize.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`(fixed_dtype, shape)`'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is any object that can be converted into a fixed-size data-type
    object. The second argument is the desired shape of this type. If the shape parameter
    is 1, then the data-type object used to be equivalent to fixed dtype. This behaviour
    is deprecated since NumPy 1.17 and will raise an error in the future. If *shape*
    is a tuple, then the new dtype defines a sub-array of the given shape.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`[(field_name, field_dtype, field_shape), ...]`'
  prefs: []
  type: TYPE_NORMAL
- en: '*obj* should be a list of fields where each field is described by a tuple of
    length 2 or 3\. (Equivalent to the `descr` item in the [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") attribute.)'
  prefs: []
  type: TYPE_NORMAL
- en: The first element, *field_name*, is the field name (if this is `''` then a standard
    field name, `'f#'`, is assigned). The field name may also be a 2-tuple of strings
    where the first string is either a “title” (which may be any string or unicode
    string) or meta-data for the field which can be any object, and the second string
    is the “name” which must be a valid Python identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The second element, *field_dtype*, can be anything that can be interpreted as
    a data-type.
  prefs: []
  type: TYPE_NORMAL
- en: The optional third element *field_shape* contains the shape if this field represents
    an array of the data-type in the second element. Note that a 3-tuple with a third
    argument equal to 1 is equivalent to a 2-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: This style does not accept *align* in the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor as it is assumed that all of the memory is accounted
    for by the array interface description.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data-type with fields `big` (big-endian 32-bit integer) and `little` (little-endian
    32-bit integer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Data-type with fields `R`, `G`, `B`, `A`, each being an unsigned 8-bit integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
  prefs: []
  type: TYPE_NORMAL
- en: This style has two required and three optional keys. The *names* and *formats*
    keys are required. Their respective values are equal-length lists with the field
    names and the field formats. The field names must be strings and the field formats
    can be any object accepted by [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: When the optional keys *offsets* and *titles* are provided, their values must
    each be lists of the same length as the *names* and *formats* lists. The *offsets*
    value is a list of byte offsets (limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)")) for each field, while the *titles* value is a list of titles
    for each field (`None` can be used if no title is desired for that field). The
    *titles* can be any object, but when a [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") object will add another entry to the fields dictionary keyed
    by the title and referencing the same field tuple which will contain the title
    as an additional tuple member.
  prefs: []
  type: TYPE_NORMAL
- en: The *itemsize* key allows the total size of the dtype to be set, and must be
    an integer large enough so all the fields are within the dtype. If the dtype being
    constructed is aligned, the *itemsize* must also be divisible by the struct alignment.
    Total dtype *itemsize* is limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type with fields `r`, `g`, `b`, `a`, each being an 8-bit unsigned integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Data type with fields `r` and `b` (with the given titles), both being 8-bit
    unsigned integers, the first at byte position 0 from the start of the field and
    the second at position 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`{''field1'': ..., ''field2'': ..., ...}`'
  prefs: []
  type: TYPE_NORMAL
- en: This usage is discouraged, because it is ambiguous with the other dict-based
    construction method. If you have a field called ‘names’ and a field called ‘formats’
    there will be a conflict.
  prefs: []
  type: TYPE_NORMAL
- en: This style allows passing in the [`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields") attribute of a data-type object.
  prefs: []
  type: TYPE_NORMAL
- en: '*obj* should contain string or unicode keys that refer to `(data-type, offset)`
    or `(data-type, offset, title)` tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type containing field `col1` (10-character string at byte position 0),
    `col2` (32-bit float at byte position 10), and `col3` (integers at byte position
    14):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`(base_dtype, new_dtype)`'
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy 1.7 and later, this form allows *base_dtype* to be interpreted as a
    structured dtype. Arrays created with this dtype will have underlying dtype *base_dtype*
    but will have fields and flags taken from *new_dtype*. This is useful for creating
    custom structured dtypes, as done in [record arrays](arrays.classes.html#arrays-classes-rec).
  prefs: []
  type: TYPE_NORMAL
- en: This form also makes it possible to specify struct dtypes with overlapping fields,
    functioning like the ‘union’ type in C. This usage is discouraged, however, and
    the union mechanism is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: Both arguments must be convertible to data-type objects with the same total
    size.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 32-bit integer, whose first two bytes are interpreted as an integer via field
    `real`, and the following two bytes via field `imag`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '32-bit integer, which is interpreted as consisting of a sub-array of shape
    `(4,)` containing 8-bit integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '32-bit integer, containing fields `r`, `g`, `b`, `a` that interpret the 4 bytes
    in the integer as four unsigned integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy data type descriptions are instances of the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Size of the data is in turn described by:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Endianness of this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  prefs: []
  type: TYPE_TB
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  prefs: []
  type: TYPE_TB
- en: 'For data types that describe sub-arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Attributes providing additional information:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  prefs: []
  type: TYPE_TB
- en: 'Metadata attached by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data types have the following method for changing the byte order:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  prefs: []
  type: TYPE_TB
- en: 'The following methods implement the pickle protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  prefs: []
  type: TYPE_TB
- en: 'Comparison operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Size of the data is in turn described by:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  prefs: []
  type: TYPE_TB
- en: 'Endianness of this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  prefs: []
  type: TYPE_TB
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  prefs: []
  type: TYPE_TB
- en: 'For data types that describe sub-arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Attributes providing additional information:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  prefs: []
  type: TYPE_TB
- en: 'Metadata attached by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data types have the following method for changing the byte order:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  prefs: []
  type: TYPE_TB
- en: 'The following methods implement the pickle protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  prefs: []
  type: TYPE_TB
- en: 'Comparison operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  prefs: []
  type: TYPE_TB
