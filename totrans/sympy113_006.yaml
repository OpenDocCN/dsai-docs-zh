- en: Gotchas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要注意的地方
- en: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/gotchas.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/gotchas.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/gotchas.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/gotchas.html)
- en: To begin, we should make something about SymPy clear. SymPy is nothing more
    than a Python library, like `NumPy`, `Django`, or even modules in the Python standard
    library `sys` or `re`. What this means is that SymPy does not add anything to
    the Python language. Limitations that are inherent in the Python language are
    also inherent in SymPy. It also means that SymPy tries to use Python idioms whenever
    possible, making programming with SymPy easy for those already familiar with programming
    with Python. As a simple example, SymPy uses Python syntax to build expressions.
    Implicit multiplication (like `3x` or `3 x`) is not allowed in Python, and thus
    not allowed in SymPy. To multiply `3` and `x`, you must type `3*x` with the `*`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们应该澄清一些关于SymPy的事情。SymPy只是一个Python库，就像`NumPy`、`Django`或者Python标准库中的模块`sys`或`re`一样。这意味着SymPy并没有为Python语言添加任何东西。Python语言固有的限制在SymPy中也同样存在。这也意味着SymPy尽可能使用Python惯用法，使得那些已经熟悉Python编程的人可以轻松地使用SymPy。作为一个简单的例子，SymPy使用Python语法来构建表达式。在Python中不允许隐式乘法（如`3x`或`3
    x`），因此在SymPy中也不允许。要将`3`和`x`相乘，必须输入`3*x`，带上`*`。
- en: '## Symbols'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## Symbols'
- en: 'One consequence of this fact is that SymPy can be used in any environment where
    Python is available. We just import it, like we would any other library:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事实的一个后果是，SymPy可以在任何可用Python的环境中使用。我们只需像导入任何其他库一样导入它：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This imports all the functions and classes from SymPy into our interactive Python
    session. Now, suppose we start to do a computation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把SymPy中的所有函数和类导入到我们的交互式Python会话中。现在，假设我们开始进行计算。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Oops! What happened here? We tried to use the variable `x`, but it tells us
    that `x` is not defined. In Python, variables have no meaning until they are defined.
    SymPy is no different. Unlike many symbolic manipulation systems you may have
    used, in SymPy, variables are not defined automatically. To define variables,
    we must use `symbols`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕！这里发生了什么？我们试图使用变量`x`，但它告诉我们`x`未定义。在Python中，变量在定义之前没有意义。SymPy也不例外。与你可能使用过的许多符号操作系统不同，在SymPy中，变量不会自动定义。要定义变量，我们必须使用`symbols`。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`symbols` takes a string of variable names separated by spaces or commas, and
    creates Symbols out of them. We can then assign these to variable names. Later,
    we will investigate some convenient ways we can work around this issue. For now,
    let us just define the most common variable names, `x`, `y`, and `z`, for use
    through the rest of this section'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`symbols`接受一个由空格或逗号分隔的变量名字符串，并从中创建Symbols。然后我们可以将这些符号赋予变量名。稍后，我们将研究一些方便的方法来解决这个问题。现在，让我们先定义最常见的变量名`x`、`y`和`z`，在本节的其余部分使用。'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As a final note, we note that the name of a Symbol and the name of the variable
    it is assigned to need not have anything to do with one another.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要注意的是，Symbol的名称与其分配给的变量名称之间不一定有任何关系。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we have done the very confusing thing of assigning a Symbol with the name
    `a` to the variable `b`, and a Symbol of the name `b` to the variable `a`. Now
    the Python variable named `a` points to the SymPy Symbol named `b`, and vice versa.
    How confusing. We could have also done something like
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们做了一件非常令人困惑的事情，将一个名为`a`的Symbol赋给变量`b`，将一个名为`b`的Symbol赋给变量`a`。现在名为`a`的Python变量指向名为`b`的SymPy
    Symbol，反之亦然。多么令人困惑。我们也可以做类似的事情：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This also shows that Symbols can have names longer than one character if we
    want.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这也表明Symbols的名称可以比一个字符长，如果我们希望的话。
- en: 'Usually, the best practice is to assign Symbols to Python variables of the
    same name, although there are exceptions: Symbol names can contain characters
    that are not allowed in Python variable names, or may just want to avoid typing
    long names by assigning Symbols with long names to single letter Python variables.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最佳实践是将Symbol分配给同名的Python变量，尽管也有例外：Symbol名称可以包含Python变量名称中不允许的字符，或者可能只是想通过将长名称的Symbols分配给单个字母Python变量来避免输入长名称。
- en: To avoid confusion, throughout this tutorial, Symbol names and Python variable
    names will always coincide. Furthermore, the word “Symbol” will refer to a SymPy
    Symbol and the word “variable” will refer to a Python variable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免混淆，在本教程中，Symbol名称和Python变量名称将始终相同。此外，“Symbol”一词将指代SymPy Symbol，“variable”一词将指代Python变量。
- en: 'Finally, let us be sure we understand the difference between SymPy Symbols
    and Python variables. Consider the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们确保我们理解SymPy符号和Python变量之间的区别。考虑以下内容：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What do you think the output of this code will be? If you thought `3`, you’re
    wrong. Let’s see what really happens
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为这段代码的输出会是什么？如果你认为是`3`，你错了。让我们看看实际发生了什么
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Changing `x` to `2` had no effect on `expr`. This is because `x = 2` changes
    the Python variable `x` to `2`, but has no effect on the SymPy Symbol `x`, which
    was what we used in creating `expr`. When we created `expr`, the Python variable
    `x` was a Symbol. After we created, it, we changed the Python variable `x` to
    2\. But `expr` remains the same. This behavior is not unique to SymPy. All Python
    programs work this way: if a variable is changed, expressions that were already
    created with that variable do not change automatically. For example'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将`x`更改为`2`对`expr`没有影响。这是因为`x = 2`将Python变量`x`更改为`2`，但对创建`expr`时使用的SymPy符号`x`没有影响。当我们创建`expr`时，Python变量`x`是一个Symbol。在创建后，我们将Python变量`x`更改为2。但`expr`保持不变。这种行为不是SymPy特有的。所有Python程序都是这样工作的：如果一个变量被更改，已经使用该变量创建的表达式不会自动更改。例如
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, if we want to know what `expr` is with the new value of `x`,
    we need to reevaluate the code that created `expr`, namely, `expr = x + 1`. This
    can be complicated if several lines created `expr`. One advantage of using a symbolic
    computation system like SymPy is that we can build a symbolic representation for
    `expr`, and then substitute `x` with values. The correct way to do this in SymPy
    is to use `subs`, which will be discussed in more detail later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，如果我们想知道`expr`在新值`x`下是什么，我们需要重新评估创建`expr`的代码，即`expr = x + 1`。如果有几行创建了`expr`，这可能会很复杂。使用像SymPy这样的符号计算系统的一个优点是我们可以为`expr`构建一个符号表示，然后用值替换`x`。在SymPy中正确的方法是使用`subs`，稍后将更详细讨论。
- en: '[PRE9]  ## Equals signs'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]  ## 等号'
- en: Another very important consequence of the fact that SymPy does not extend Python
    syntax is that `=` does not represent equality in SymPy. Rather it is Python variable
    assignment. This is hard-coded into the Python language, and SymPy makes no attempts
    to change that.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常重要的结果是，SymPy不扩展Python语法的事实是，`=`在SymPy中不表示相等。而是Python变量赋值。这是硬编码到Python语言中的，SymPy不会尝试改变这一点。
- en: You may think, however, that `==`, which is used for equality testing in Python,
    is used for SymPy as equality. This is not quite correct either. Let us see what
    happens when we use `==`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能认为在Python中用于相等测试的`==`也用于SymPy作为相等。这也不完全正确。让我们看看当我们使用`==`时会发生什么。
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Instead of treating `x + 1 == 4` symbolically, we just got `False`. In SymPy,
    `==` represents exact structural equality testing. This means that `a == b` means
    that we are *asking* if \(a = b\). We always get a `bool` as the result of `==`.
    There is a separate object, called `Eq`, which can be used to create symbolic
    equalities
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代替将`x + 1 == 4`象征性地处理，我们只是得到了`False`。在SymPy中，`==`表示精确的结构相等测试。这意味着`a == b`意味着我们在*询问*是否
    \(a = b\)。我们始终得到`bool`作为`==`的结果。有一个单独的对象，称为`Eq`，可以用来创建符号相等性。
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There is one additional caveat about `==` as well. Suppose we want to know
    if \((x + 1)^2 = x^2 + 2x + 1\). We might try something like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`==`还有一个额外的警告。假设我们想知道是否 \((x + 1)^2 = x^2 + 2x + 1\)。我们可能会尝试这样做：
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We got `False` again. However, \((x + 1)^2\) *does* equal \(x^2 + 2x + 1\).
    What is going on here? Did we find a bug in SymPy, or is it just not powerful
    enough to recognize this basic algebraic fact?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次得到了`False`。然而，\((x + 1)^2\)确实等于\(x^2 + 2x + 1\)。这里发生了什么？我们在SymPy中找到了一个错误吗，还是它只是不能识别这个基本的代数事实？
- en: Recall from above that `==` represents *exact* structural equality testing.
    “Exact” here means that two expressions will compare equal with `==` only if they
    are exactly equal structurally. Here, \((x + 1)^2\) and \(x^2 + 2x + 1\) are not
    the same structurally. One is the power of an addition of two terms, and the other
    is the addition of three terms.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面回顾，`==`表示*精确*的结构相等测试。“精确”在这里意味着只有两个表达式在结构上完全相等时才会用`==`比较相等。在这里，\((x + 1)^2\)和\(x^2
    + 2x + 1\)在结构上不相同。一个是两项相加的幂，另一个是三项相加。
- en: It turns out that when using SymPy as a library, having `==` test for exact
    structural equality is far more useful than having it represent symbolic equality,
    or having it test for mathematical equality. However, as a new user, you will
    probably care more about the latter two. We have already seen an alternative to
    representing equalities symbolically, `Eq`. To test if two things are equal, it
    is best to recall the basic fact that if \(a = b\), then \(a - b = 0\). Thus,
    the best way to check if \(a = b\) is to take \(a - b\) and simplify it, and see
    if it goes to 0\. We will learn [later](simplification.html#tutorial-simplify)
    that the function to do this is called `simplify`. This method is not infallible—in
    fact, it can be [theoretically proven](https://en.wikipedia.org/wiki/Richardson%27s_theorem)
    that it is impossible to determine if two symbolic expressions are identically
    equal in general—but for most common expressions, it works quite well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，在作为库使用 SymPy 时，将`==`用于精确的结构相等性比将其用于表示符号相等性或进行数学相等性的检测更加有用。然而，作为新用户，您可能更关心后两者。我们已经看到了表示等式的另一种选择，`Eq`。要测试两个事物是否相等，最好记住一个基本事实，即如果\(a
    = b\)，那么\(a - b = 0\)。因此，检查\(a = b\)的最佳方法是取\(a - b\)并简化它，看看它是否变为 0。我们将在[后面](simplification.html#tutorial-simplify)学习到，执行此操作的函数称为`simplify`。这种方法并非万无一失——事实上，可以[从理论上证明](https://en.wikipedia.org/wiki/Richardson%27s_theorem)无法确定一般情况下两个符号表达式是否完全相等——但对于大多数常见的表达式，它效果非常好。
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is also a method called `equals` that tests if two expressions are equal
    by evaluating them numerically at random points.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种叫做`equals`的方法，通过在随机点数值上评估它们来测试两个表达式是否相等。
- en: '[PRE14]  ## Two Final Notes: `^` and `/`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14]  ## 两个最后注意事项：`^` 和 `/`'
- en: 'You may have noticed that we have been using `**` for exponentiation instead
    of the standard `^`. That’s because SymPy follows Python’s conventions. In Python,
    `^` represents logical exclusive or. SymPy follows this convention:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们一直在使用`**`来表示乘方，而不是标准的`^`。这是因为 SymPy 遵循 Python 的惯例。在 Python 中，`^`
    表示逻辑异或。SymPy 也遵循了这一惯例：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, a small technical discussion on how SymPy works is in order. When you
    type something like `x + 1`, the SymPy Symbol `x` is added to the Python int `1`.
    Python’s operator rules then allow SymPy to tell Python that SymPy objects know
    how to be added to Python ints, and so `1` is automatically converted to the SymPy
    Integer object.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要对 SymPy 的工作原理进行一点技术性讨论。当您键入类似`x + 1`的表达式时，SymPy 的符号`x`会与 Python 的整数`1`相加。然后
    Python 的操作规则允许 SymPy 告诉 Python SymPy 对象知道如何与 Python 整数相加，因此`1`会自动转换为 SymPy 的整数对象。
- en: This sort of operator magic happens automatically behind the scenes, and you
    rarely need to even know that it is happening. However, there is one exception.
    Whenever you combine a SymPy object and a SymPy object, or a SymPy object and
    a Python object, you get a SymPy object, but whenever you combine two Python objects,
    SymPy never comes into play, and so you get a Python object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种运算符的魔术是在幕后自动发生的，你很少需要知道它正在发生。然而，也有一个例外。每当您结合一个 SymPy 对象和一个 SymPy 对象，或者一个 SymPy
    对象和一个 Python 对象时，您会得到一个 SymPy 对象，但是每当您结合两个 Python 对象时，SymPy 从不参与其中，因此您会得到一个 Python
    对象。
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is usually not a big deal. Python ints work much the same as SymPy Integers,
    but there is one important exception: division. In SymPy, the division of two
    Integers gives a Rational:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常不是什么大问题。Python 的整数与 SymPy 的整数工作方式基本相同，但有一个重要的例外：除法。在 SymPy 中，两个整数的除法会得到一个有理数：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'But in Python `/` represents either integer division or floating point division,
    depending on whether you are in Python 2 or Python 3, and depending on whether
    or not you have run `from __future__ import division` in Python 2 which is no
    longer supported from versions above SymPy 1.5.1:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在 Python 中，`/`表示整数除法或浮点数除法，具体取决于您使用的是 Python 2 还是 Python 3，以及是否在 Python 2
    中运行了`from __future__ import division`，这在 SymPy 1.5.1 以上的版本中不再支持：
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To avoid this, we can construct the rational object explicitly
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们可以显式地构造有理数对象。
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This problem also comes up whenever we have a larger symbolic expression with
    `int/int` in it. For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在一个较大的符号表达式中遇到带有`int/int`的情况时，也会出现这个问题。例如：
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This happens because Python first evaluates `1/2` into `0.5`, and then that
    is cast into a SymPy type when it is added to `x`. Again, we can get around this
    by explicitly creating a Rational:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 Python 首先将`1/2`计算为`0.5`，然后在将其与`x`相加时将其转换为 SymPy 类型。同样，我们可以通过显式创建有理数来避免这种情况：
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There are several tips on avoiding this situation in the [Gotchas and Pitfalls](../../explanation/gotchas.html#gotchas)
    document.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[陷阱与风险](../../explanation/gotchas.html#gotchas)文档中有几个避免这种情况的建议。
- en: Further Reading
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For more discussion on the topics covered in this section, see [Gotchas and
    Pitfalls](../../explanation/gotchas.html#gotchas).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本节涵盖的主题的更多讨论，请参阅[陷阱与风险](../../explanation/gotchas.html#gotchas)。
