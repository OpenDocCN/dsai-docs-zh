- en: Nullable Boolean data type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可空布尔数据类型
- en: 原文：[https://pandas.pydata.org/docs/user_guide/boolean.html](https://pandas.pydata.org/docs/user_guide/boolean.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/boolean.html](https://pandas.pydata.org/docs/user_guide/boolean.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: BooleanArray is currently experimental. Its API or implementation may change
    without warning.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: BooleanArray目前处于实验阶段。其API或实现可能会在没有警告的情况下更改。
- en: '## Indexing with NA values'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用NA值进行索引'
- en: pandas allows indexing with `NA` values in a boolean array, which are treated
    as `False`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: pandas允许在布尔数组中使用`NA`值进行索引，这些值被视为`False`。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you would prefer to keep the `NA` values you can manually fill them with
    `fillna(True)`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望保留`NA`值，可以手动用`fillna(True)`填充它们。
- en: '[PRE1]  ## Kleene logical operations'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ## Kleene逻辑操作'
- en: '[`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") implements [Kleene Logic](https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics)
    (sometimes called three-value logic) for logical operations like `&` (and), `|`
    (or) and `^` (exclusive-or).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray")实现了[Kleene逻辑](https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics)（有时称为三值逻辑）用于逻辑操作，如`&`（与）、`|`（或）和`^`（异或）。'
- en: This table demonstrates the results for every combination. These operations
    are symmetrical, so flipping the left- and right-hand side makes no difference
    in the result.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格展示了每种组合的结果。这些操作是对称的，因此左右两侧的翻转不会影响结果。
- en: '| Expression | Result |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 结果 |'
- en: '| --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `True & True` | `True` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `True & True` | `True` |'
- en: '| `True & False` | `False` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `True & False` | `False` |'
- en: '| `True & NA` | `NA` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `True & NA` | `NA` |'
- en: '| `False & False` | `False` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `False & False` | `False` |'
- en: '| `False & NA` | `False` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `False & NA` | `False` |'
- en: '| `NA & NA` | `NA` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `NA & NA` | `NA` |'
- en: '| `True &#124; True` | `True` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; True` | `True` |'
- en: '| `True &#124; False` | `True` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; False` | `True` |'
- en: '| `True &#124; NA` | `True` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; NA` | `True` |'
- en: '| `False &#124; False` | `False` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `False &#124; False` | `False` |'
- en: '| `False &#124; NA` | `NA` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `False &#124; NA` | `NA` |'
- en: '| `NA &#124; NA` | `NA` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `NA &#124; NA` | `NA` |'
- en: '| `True ^ True` | `False` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ True` | `False` |'
- en: '| `True ^ False` | `True` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ False` | `True` |'
- en: '| `True ^ NA` | `NA` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ NA` | `NA` |'
- en: '| `False ^ False` | `False` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `False ^ False` | `False` |'
- en: '| `False ^ NA` | `NA` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `False ^ NA` | `NA` |'
- en: '| `NA ^ NA` | `NA` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `NA ^ NA` | `NA` |'
- en: When an `NA` is present in an operation, the output value is `NA` only if the
    result cannot be determined solely based on the other input. For example, `True
    | NA` is `True`, because both `True | True` and `True | False` are `True`. In
    that case, we don’t actually need to consider the value of the `NA`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作中存在`NA`时，输出值仅在无法仅根据其他输入确定结果时为`NA`。例如，`True | NA`是`True`，因为`True | True`和`True
    | False`都是`True`。在这种情况下，我们实际上不需要考虑`NA`的值。
- en: On the other hand, `True & NA` is `NA`. The result depends on whether the `NA`
    really is `True` or `False`, since `True & True` is `True`, but `True & False`
    is `False`, so we can’t determine the output.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`True & NA`是`NA`。结果取决于`NA`是真是假，因为`True & True`是`True`，但`True & False`是`False`，所以我们无法确定输出。
- en: This differs from how `np.nan` behaves in logical operations. pandas treated
    `np.nan` is *always false in the output*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`np.nan`在逻辑操作中的行为不同。pandas将`np.nan`视为*输出中始终为假*。
- en: In `or`
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`or`中
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In `and`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`and`中
- en: '[PRE3]  ## Indexing with NA values'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3]  ## 使用NA值进行索引'
- en: pandas allows indexing with `NA` values in a boolean array, which are treated
    as `False`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: pandas允许在布尔数组中使用`NA`值进行索引，这些值被视为`False`。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you would prefer to keep the `NA` values you can manually fill them with
    `fillna(True)`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望保留`NA`值，可以手动用`fillna(True)`填充它们。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '## Kleene logical operations'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '## Kleene逻辑操作'
- en: '[`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") implements [Kleene Logic](https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics)
    (sometimes called three-value logic) for logical operations like `&` (and), `|`
    (or) and `^` (exclusive-or).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray")实现了[Kleene逻辑](https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics)（有时称为三值逻辑）用于逻辑操作，如`&`（与）、`|`（或）和`^`（异或）。'
- en: This table demonstrates the results for every combination. These operations
    are symmetrical, so flipping the left- and right-hand side makes no difference
    in the result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格展示了每种组合的结果。这些操作是对称的，因此左右两侧的翻转不会影响结果。
- en: '| Expression | Result |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 结果 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `True & True` | `True` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `True & True` | `True` |'
- en: '| `True & False` | `False` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `True & False` | `False` |'
- en: '| `True & NA` | `NA` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `True & NA` | `NA` |'
- en: '| `False & False` | `False` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `False & False` | `False` |'
- en: '| `False & NA` | `False` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `False & NA` | `False` |'
- en: '| `NA & NA` | `NA` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `NA & NA` | `NA` |'
- en: '| `True &#124; True` | `True` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; True` | `True` |'
- en: '| `True &#124; False` | `True` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; False` | `True` |'
- en: '| `True &#124; NA` | `True` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `True &#124; NA` | `True` |'
- en: '| `False &#124; False` | `False` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `False &#124; False` | `False` |'
- en: '| `False &#124; NA` | `NA` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `False &#124; NA` | `NA` |'
- en: '| `NA &#124; NA` | `NA` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `NA &#124; NA` | `NA` |'
- en: '| `True ^ True` | `False` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ True` | `False` |'
- en: '| `True ^ False` | `True` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ False` | `True` |'
- en: '| `True ^ NA` | `NA` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `True ^ NA` | `NA` |'
- en: '| `False ^ False` | `False` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `False ^ False` | `False` |'
- en: '| `False ^ NA` | `NA` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `False ^ NA` | `NA` |'
- en: '| `NA ^ NA` | `NA` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `NA ^ NA` | `NA` |'
- en: When an `NA` is present in an operation, the output value is `NA` only if the
    result cannot be determined solely based on the other input. For example, `True
    | NA` is `True`, because both `True | True` and `True | False` are `True`. In
    that case, we don’t actually need to consider the value of the `NA`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作中存在`NA`时，仅当结果无法仅基于其他输入确定时，输出值才为`NA`。例如，`True | NA`为`True`，因为`True | True`和`True
    | False`都为`True`。在这种情况下，我们实际上不需要考虑`NA`的值。
- en: On the other hand, `True & NA` is `NA`. The result depends on whether the `NA`
    really is `True` or `False`, since `True & True` is `True`, but `True & False`
    is `False`, so we can’t determine the output.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`True & NA`为`NA`。结果取决于`NA`是否真的为`True`或`False`，因为`True & True`为`True`，但`True
    & False`为`False`，所以我们无法确定输出。
- en: This differs from how `np.nan` behaves in logical operations. pandas treated
    `np.nan` is *always false in the output*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`np.nan`在逻辑操作中的行为不同。pandas将`np.nan`视为*输出中始终为假*。
- en: In `or`
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`or`中
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In `and`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`and`中
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
