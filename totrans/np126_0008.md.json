["```py\nimport numpy as np\nfrom scipy import io, integrate, linalg, signal\nfrom scipy.sparse.linalg import cg, eigs \n```", "```py\nfor i=1:3\n    fprintf('%i\\n',i)\nend \n```", "```py\nfor i in range(1, 4):\n   print(i) \n```", "```py\n>>  4  ==  4\nans  =  1\n>>  4  ==  5\nans  =  0 \n```", "```py\n>>> 4 == 4\nTrue\n>>> 4 == 5\nFalse \n```", "```py\na=4\nif  a==4\n  fprintf('a = 4\\n')\nelseif  a==5\n  fprintf('a = 5\\n')\nend \n```", "```py\na = 4\nif a == 4:\n    print('a = 4')\nelif a == 5:\n    print('a = 5') \n```", "```py\nrng(42,'twister')\nrand(3,4) \n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(42)\nrng.random(3, 4) \n```", "```py\n# Make all numpy available via shorter 'np' prefix\nimport numpy as np\n#\n# Make the SciPy linear algebra functions available as linalg.func()\n# e.g. linalg.lu, linalg.eig (for general l*B@u==A@u solution)\nfrom scipy import linalg\n#\n# Define a Hermitian function\ndef hermitian(A, **kwargs):\n    return np.conj(A,**kwargs).T\n# Make a shortcut for hermitian:\n#    hermitian(A) --> H(A)\nH = hermitian \n```", "```py\n# Make all matlib functions accessible at the top level via M.func()\nimport numpy.matlib as M\n# Make some matlib functions accessible directly at the top level via, e.g. rand(3,3)\nfrom numpy.matlib import matrix,rand,zeros,ones,empty,eye \n```", "```py\nimport numpy as np\nfrom scipy import io, integrate, linalg, signal\nfrom scipy.sparse.linalg import cg, eigs \n```", "```py\nfor i=1:3\n    fprintf('%i\\n',i)\nend \n```", "```py\nfor i in range(1, 4):\n   print(i) \n```", "```py\n>>  4  ==  4\nans  =  1\n>>  4  ==  5\nans  =  0 \n```", "```py\n>>> 4 == 4\nTrue\n>>> 4 == 5\nFalse \n```", "```py\na=4\nif  a==4\n  fprintf('a = 4\\n')\nelseif  a==5\n  fprintf('a = 5\\n')\nend \n```", "```py\na = 4\nif a == 4:\n    print('a = 4')\nelif a == 5:\n    print('a = 5') \n```", "```py\nrng(42,'twister')\nrand(3,4) \n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(42)\nrng.random(3, 4) \n```", "```py\nfor i=1:3\n    fprintf('%i\\n',i)\nend \n```", "```py\nfor i in range(1, 4):\n   print(i) \n```", "```py\n>>  4  ==  4\nans  =  1\n>>  4  ==  5\nans  =  0 \n```", "```py\n>>> 4 == 4\nTrue\n>>> 4 == 5\nFalse \n```", "```py\na=4\nif  a==4\n  fprintf('a = 4\\n')\nelseif  a==5\n  fprintf('a = 5\\n')\nend \n```", "```py\na = 4\nif a == 4:\n    print('a = 4')\nelif a == 5:\n    print('a = 5') \n```", "```py\nrng(42,'twister')\nrand(3,4) \n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(42)\nrng.random(3, 4) \n```", "```py\n# Make all numpy available via shorter 'np' prefix\nimport numpy as np\n#\n# Make the SciPy linear algebra functions available as linalg.func()\n# e.g. linalg.lu, linalg.eig (for general l*B@u==A@u solution)\nfrom scipy import linalg\n#\n# Define a Hermitian function\ndef hermitian(A, **kwargs):\n    return np.conj(A,**kwargs).T\n# Make a shortcut for hermitian:\n#    hermitian(A) --> H(A)\nH = hermitian \n```", "```py\n# Make all matlib functions accessible at the top level via M.func()\nimport numpy.matlib as M\n# Make some matlib functions accessible directly at the top level via, e.g. rand(3,3)\nfrom numpy.matlib import matrix,rand,zeros,ones,empty,eye \n```"]