- en: Version 0.19.0 (October 2, 2016)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/whatsnew/v0.19.0.html](https://pandas.pydata.org/docs/whatsnew/v0.19.0.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a major release from 0.18.1 and includes number of API changes, several
    new features, enhancements, and performance improvements along with a large number
    of bug fixes. We recommend that all users upgrade to this version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Highlights include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") for asof-style time-series joining, see [here](#whatsnew-0190-enhancements-asof-merge)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.rolling()` is now time-series aware, see [here](#whatsnew-0190-enhancements-rolling-ts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now supports parsing `Categorical` data, see [here](#whatsnew-0190-enhancements-read-csv-categorical)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function `union_categorical()` has been added for combining categoricals,
    see [here](#whatsnew-0190-enhancements-union-categoricals)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex` now has its own `period` dtype, and changed to be more consistent
    with other `Index` classes. See [here](#whatsnew-0190-api-period)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse data structures gained enhanced support of `int` and `bool` dtypes, see
    [here](#whatsnew-0190-sparse)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison operations with `Series` no longer ignores the index, see [here](#whatsnew-0190-api-series-ops)
    for an overview of the API changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction of a pandas development API for utility functions, see [here](#whatsnew-0190-dev-api).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecation of `Panel4D` and `PanelND`. We recommend to represent these types
    of n-dimensional data with the [xarray package](http://xarray.pydata.org/en/stable/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the previously deprecated modules `pandas.io.data`, `pandas.io.wb`,
    `pandas.tools.rplot`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: pandas >= 0.19.0 will no longer silence numpy ufunc warnings upon import, see
    [here](#whatsnew-0190-errstate).
  prefs: []
  type: TYPE_NORMAL
- en: What’s new in v0.19.0
  prefs: []
  type: TYPE_NORMAL
- en: '[New features](#new-features)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function `merge_asof` for asof-style time-series joining](#function-merge-asof-for-asof-style-time-series-joining)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `.rolling()` is now time-series aware](#method-rolling-is-now-time-series-aware)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `read_csv` has improved support for duplicate column names](#method-read-csv-has-improved-support-for-duplicate-column-names)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `read_csv` supports parsing `Categorical` directly](#method-read-csv-supports-parsing-categorical-directly)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Categorical concatenation](#categorical-concatenation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Semi-month offsets](#semi-month-offsets)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[New Index methods](#new-index-methods)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Google BigQuery enhancements](#google-bigquery-enhancements)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fine-grained NumPy errstate](#fine-grained-numpy-errstate)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `get_dummies` now returns integer dtypes](#method-get-dummies-now-returns-integer-dtypes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Downcast values to smallest possible dtype in `to_numeric`](#downcast-values-to-smallest-possible-dtype-in-to-numeric)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas development API](#pandas-development-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other enhancements](#other-enhancements)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[API changes](#api-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.tolist()` will now return Python types](#series-tolist-will-now-return-python-types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series` operators for different indexes](#series-operators-for-different-indexes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Arithmetic operators](#arithmetic-operators)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparison operators](#comparison-operators)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Logical operators](#logical-operators)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Flexible comparison methods](#flexible-comparison-methods)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series` type promotion on assignment](#series-type-promotion-on-assignment)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function `.to_datetime()` changes](#function-to-datetime-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Merging changes](#merging-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `.describe()` changes](#method-describe-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Period` changes](#period-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The `PeriodIndex` now has `period` dtype](#the-periodindex-now-has-period-dtype)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Period(''NaT'')` now returns `pd.NaT`](#period-nat-now-returns-pd-nat)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex.values` now returns array of `Period` object](#periodindex-values-now-returns-array-of-period-object)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Index `+` / `-` no longer used for set operations](#index-no-longer-used-for-set-operations)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.difference` and `.symmetric_difference` changes](#index-difference-and-symmetric-difference-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index.unique` consistently returns `Index`](#index-unique-consistently-returns-index)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MultiIndex` constructors, `groupby` and `set_index` preserve categorical
    dtypes](#multiindex-constructors-groupby-and-set-index-preserve-categorical-dtypes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Function `read_csv` will progressively enumerate chunks](#function-read-csv-will-progressively-enumerate-chunks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sparse changes](#sparse-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Types `int64` and `bool` support enhancements](#types-int64-and-bool-support-enhancements)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Operators now preserve dtypes](#operators-now-preserve-dtypes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other sparse fixes](#other-sparse-fixes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Indexer dtype changes](#indexer-dtype-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other API changes](#other-api-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deprecations](#deprecations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Removal of prior version deprecations/changes](#removal-of-prior-version-deprecations-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Performance improvements](#performance-improvements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bug fixes](#bug-fixes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributors](#contributors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## New features'
  prefs: []
  type: TYPE_NORMAL
- en: '### Function `merge_asof` for asof-style time-series joining'
  prefs: []
  type: TYPE_NORMAL
- en: A long-time requested feature has been added through the [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") function, to support asof style joining of time-series ([GH
    1870](https://github.com/pandas-dev/pandas/issues/1870), [GH 13695](https://github.com/pandas-dev/pandas/issues/13695),
    [GH 13709](https://github.com/pandas-dev/pandas/issues/13709), [GH 13902](https://github.com/pandas-dev/pandas/issues/13902)).
    Full documentation is [here](../user_guide/merging.html#merging-merge-asof).
  prefs: []
  type: TYPE_NORMAL
- en: The [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") performs an asof merge, which is similar to a left-join except
    that we match on nearest key rather than equal keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We typically want to match exactly when possible, and use the most recent value
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can also match rows ONLY with prior data, and not an exact match.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In a typical time-series example, we have `trades` and `quotes` and we want
    to `asof-join` them. This also illustrates using the `by` parameter to group data
    before merging.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An asof merge joins on the `on`, typically a datetimelike field, which is ordered,
    and in this case we are using a grouper in the `by` field. This is like a left-outer
    join, except that forward filling happens automatically taking the most recent
    non-NaN value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns a merged DataFrame with the entries in the same order as the original
    left passed DataFrame (`trades` in this case), with the fields of the `quotes`
    merged.  ### Method `.rolling()` is now time-series aware'
  prefs: []
  type: TYPE_NORMAL
- en: '`.rolling()` objects are now time-series aware and can accept a time-series
    offset (or convertible) for the `window` argument ([GH 13327](https://github.com/pandas-dev/pandas/issues/13327),
    [GH 12995](https://github.com/pandas-dev/pandas/issues/12995)). See the full documentation
    [here](../user_guide/window.html#window-generic).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a regular frequency index. Using an integer window parameter works to
    roll along the window frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Specifying an offset allows a more intuitive specification of the rolling frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using a non-regular, but still monotonic index, rolling with an integer window
    does not impart any special calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using the time-specification generates variable windows for this sparse data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, we now allow an optional `on` parameter to specify a column (rather
    than the default of the index) in a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]  ### Method `read_csv` has improved support for duplicate column names'
  prefs: []
  type: TYPE_NORMAL
- en: '[Duplicate column names](../user_guide/io.html#io-dupe-names) are now supported
    in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    whether they are in the file or passed in as the `names` parameter ([GH 7160](https://github.com/pandas-dev/pandas/issues/7160),
    [GH 9424](https://github.com/pandas-dev/pandas/issues/9424))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first `a` column contained the same data as the second `a` column, when
    it should have contained the values `[0, 3]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]  ### Method `read_csv` supports parsing `Categorical` directly'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    function now supports parsing a `Categorical` column when specified as a dtype
    ([GH 10153](https://github.com/pandas-dev/pandas/issues/10153)). Depending on
    the structure of the data, this can result in a faster parse time and lower memory
    usage compared to converting to `Categorical` after parsing. See the io [docs
    here](../user_guide/io.html#io-categorical).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Individual columns can be parsed as a `Categorical` using a dict specification
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The resulting categories will always be parsed as strings (object dtype). If
    the categories are numeric they can be converted using the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function, or as appropriate, another converter such as [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]  ### Categorical concatenation'
  prefs: []
  type: TYPE_NORMAL
- en: A function `union_categoricals()` has been added for combining categoricals,
    see [Unioning Categoricals](../user_guide/categorical.html#categorical-union)
    ([GH 13361](https://github.com/pandas-dev/pandas/issues/13361), [GH 13763](https://github.com/pandas-dev/pandas/issues/13763),
    [GH 13846](https://github.com/pandas-dev/pandas/issues/13846), [GH 14173](https://github.com/pandas-dev/pandas/issues/14173))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`concat` and `append` now can concat `category` dtypes with different `categories`
    as `object` dtype ([GH 13524](https://github.com/pandas-dev/pandas/issues/13524))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]  ### Semi-month offsets'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has gained new frequency offsets, `SemiMonthEnd` (‘SM’) and `SemiMonthBegin`
    (‘SMS’). These provide date offsets anchored (by default) to the 15th and end
    of month, and 15th and 1st of month respectively. ([GH 1543](https://github.com/pandas-dev/pandas/issues/1543))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthEnd**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthBegin**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using the anchoring suffix, you can also specify the day of month to use instead
    of the 15th.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]  ### New Index methods'
  prefs: []
  type: TYPE_NORMAL
- en: The following methods and options are added to `Index`, to be more consistent
    with the `Series` and `DataFrame` API.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index` now supports the `.where()` function for same shape indexing ([GH 13170](https://github.com/pandas-dev/pandas/issues/13170))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.dropna()` to exclude missing values ([GH 6194](https://github.com/pandas-dev/pandas/issues/6194))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: For `MultiIndex`, values are dropped if any level is missing by default. Specifying
    `how='all'` only drops values where all levels are missing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.str.extractall()` which returns a `DataFrame`, see the
    [docs here](../user_guide/text.html#text-extractall) ([GH 10008](https://github.com/pandas-dev/pandas/issues/10008),
    [GH 13156](https://github.com/pandas-dev/pandas/issues/13156))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`Index.astype()` now accepts an optional boolean argument `copy`, which allows
    optional copying if the requirements on dtype are satisfied ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))  ###
    Google BigQuery enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq "pandas.read_gbq")
    method has gained the `dialect` argument to allow users to specify whether to
    use BigQuery’s legacy SQL or BigQuery’s standard SQL. See the [docs](https://pandas-gbq.readthedocs.io/en/latest/reading.html)
    for more details ([GH 13615](https://github.com/pandas-dev/pandas/issues/13615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [`to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") method now allows the DataFrame column order to differ
    from the destination table schema ([GH 11359](https://github.com/pandas-dev/pandas/issues/11359)).  ###
    Fine-grained NumPy errstate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous versions of pandas would permanently silence numpy’s ufunc error handling
    when `pandas` was imported. pandas did this in order to silence the warnings that
    would arise from using numpy ufuncs on missing data, which are usually represented
    as `NaN` s. Unfortunately, this silenced legitimate warnings arising in non-pandas
    code in the application. Starting with 0.19.0, pandas will use the `numpy.errstate`
    context manager to silence these warnings in a more fine-grained manner, only
    around where these operations are actually used in the pandas code base. ([GH
    13109](https://github.com/pandas-dev/pandas/issues/13109), [GH 13145](https://github.com/pandas-dev/pandas/issues/13145))
  prefs: []
  type: TYPE_NORMAL
- en: 'After upgrading pandas, you may see *new* `RuntimeWarnings` being issued from
    your code. These are likely legitimate, and the underlying cause likely existed
    in the code when using previous versions of pandas that simply silenced the warning.
    Use [numpy.errstate](https://numpy.org/doc/stable/reference/generated/numpy.errstate.html)
    around the source of the `RuntimeWarning` to control how these conditions are
    handled.  ### Method `get_dummies` now returns integer dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: The `pd.get_dummies` function now returns dummy-encoded columns as small integers,
    rather than floats ([GH 8725](https://github.com/pandas-dev/pandas/issues/8725)).
    This should provide an improved memory footprint.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]  ### Downcast values to smallest possible dtype in `to_numeric`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.to_numeric()` now accepts a `downcast` parameter, which will downcast the
    data if possible to smallest specified numerical dtype ([GH 13352](https://github.com/pandas-dev/pandas/issues/13352))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]  ### pandas development API'
  prefs: []
  type: TYPE_NORMAL
- en: As part of making pandas API more uniform and accessible in the future, we have
    created a standard sub-package of pandas, `pandas.api` to hold public API’s. We
    are starting by exposing type introspection functions in `pandas.api.types`. More
    sub-packages and officially sanctioned API’s will be published in future versions
    of pandas ([GH 13147](https://github.com/pandas-dev/pandas/issues/13147), [GH
    13634](https://github.com/pandas-dev/pandas/issues/13634))
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are now part of this API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling these functions from the internal module `pandas.core.common` will
    now show a `DeprecationWarning` ([GH 13990](https://github.com/pandas-dev/pandas/issues/13990))  ###
    Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp` can now accept positional and keyword parameters similar to `datetime.datetime()`
    ([GH 10758](https://github.com/pandas-dev/pandas/issues/10758), [GH 11630](https://github.com/pandas-dev/pandas/issues/11630))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.resample()` function now accepts a `on=` or `level=` parameter for resampling
    on a datetimelike column or `MultiIndex` level ([GH 13500](https://github.com/pandas-dev/pandas/issues/13500))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.get_credentials()` method of `GbqConnector` can now first try to fetch
    [the application default credentials](https://developers.google.com/identity/protocols/application-default-credentials).
    See the docs for more details ([GH 13577](https://github.com/pandas-dev/pandas/issues/13577)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.tz_localize()` method of `DatetimeIndex` and `Timestamp` has gained the
    `errors` keyword, so you can potentially coerce nonexistent timestamps to `NaT`.
    The default behavior remains to raising a `NonExistentTimeError` ([GH 13057](https://github.com/pandas-dev/pandas/issues/13057))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_hdf/read_hdf()` now accept path objects (e.g. `pathlib.Path`, `py.path.local`)
    for the file path ([GH 11773](https://github.com/pandas-dev/pandas/issues/11773))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_csv()` with `engine='python'` has gained support for the `decimal`
    ([GH 12933](https://github.com/pandas-dev/pandas/issues/12933)), `na_filter` ([GH
    13321](https://github.com/pandas-dev/pandas/issues/13321)) and the `memory_map`
    option ([GH 13381](https://github.com/pandas-dev/pandas/issues/13381)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent with the Python API, `pd.read_csv()` will now interpret `+inf` as
    positive infinity ([GH 13274](https://github.com/pandas-dev/pandas/issues/13274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_html()` has gained support for the `na_values`, `converters`, `keep_default_na`
    options ([GH 13461](https://github.com/pandas-dev/pandas/issues/13461))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.astype()` now accepts an optional boolean argument `copy`, effective
    when dtype is categorical ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained the `.asof()` method to return the last non-NaN values
    according to the selected subset ([GH 13358](https://github.com/pandas-dev/pandas/issues/13358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DataFrame` constructor will now respect key ordering if a list of `OrderedDict`
    objects are passed in ([GH 13304](https://github.com/pandas-dev/pandas/issues/13304))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_html()` has gained support for the `decimal` option ([GH 12907](https://github.com/pandas-dev/pandas/issues/12907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` has gained the properties `.is_monotonic`, `.is_monotonic_increasing`,
    `.is_monotonic_decreasing`, similar to `Index` ([GH 13336](https://github.com/pandas-dev/pandas/issues/13336))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` now allows a single value as the SQL type for all columns
    ([GH 11886](https://github.com/pandas-dev/pandas/issues/11886)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.append` now supports the `ignore_index` option ([GH 13677](https://github.com/pandas-dev/pandas/issues/13677))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` can now write variable labels to Stata dta
    files using a dictionary to make column names to labels ([GH 13535](https://github.com/pandas-dev/pandas/issues/13535),
    [GH 13536](https://github.com/pandas-dev/pandas/issues/13536))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` will automatically convert `datetime64[ns]`
    columns to Stata format `%tc`, rather than raising a `ValueError` ([GH 12259](https://github.com/pandas-dev/pandas/issues/12259))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_stata()` and `StataReader` raise with a more explicit error message when
    reading Stata files with repeated value labels when `convert_categoricals=True`
    ([GH 13923](https://github.com/pandas-dev/pandas/issues/13923))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now render sparsified MultiIndexes ([GH 11655](https://github.com/pandas-dev/pandas/issues/11655))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now show column level names (e.g. `DataFrame.columns.names`)
    ([GH 13775](https://github.com/pandas-dev/pandas/issues/13775))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained support to re-order the columns based on the values
    in a row using `df.sort_values(by=''...'', axis=1)` ([GH 10806](https://github.com/pandas-dev/pandas/issues/10806))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Added documentation to [I/O](../user_guide/io.html#io-dtypes) regarding the
    perils of reading in columns with mixed dtypes and how to handle it ([GH 13746](https://github.com/pandas-dev/pandas/issues/13746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now has a `border` argument to control the value in
    the opening `<table>` tag. The default is the value of the `html.border` option,
    which defaults to 1\. This also affects the notebook HTML repr, but since Jupyter’s
    CSS includes a border-width attribute, the visual effect is the same. ([GH 11563](https://github.com/pandas-dev/pandas/issues/11563)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise `ImportError` in the sql functions when `sqlalchemy` is not installed
    and a connection string is used ([GH 11920](https://github.com/pandas-dev/pandas/issues/11920)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with matplotlib 2.0\. Older versions of pandas should also work
    with matplotlib 2.0 ([GH 13333](https://github.com/pandas-dev/pandas/issues/13333))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp`, `Period`, `DatetimeIndex`, `PeriodIndex` and `.dt` accessor have
    gained a `.is_leap_year` property to check whether the date belongs to a leap
    year. ([GH 13727](https://github.com/pandas-dev/pandas/issues/13727))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`astype()` will now accept a dict of column name to data types mapping as the
    `dtype` argument. ([GH 12086](https://github.com/pandas-dev/pandas/issues/12086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_json` and `DataFrame.to_json` has gained support for reading and
    writing json lines with `lines` option see [Line delimited json](../user_guide/io.html#io-jsonl)
    ([GH 9180](https://github.com/pandas-dev/pandas/issues/9180))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now supports the true_values and false_values keyword arguments
    ([GH 13347](https://github.com/pandas-dev/pandas/issues/13347))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby()` will now accept a scalar and a single-element list for specifying
    `level` on a non-`MultiIndex` grouper. ([GH 13907](https://github.com/pandas-dev/pandas/issues/13907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-convertible dates in an excel date column will be returned without conversion
    and the column will be `object` dtype, rather than raising an exception ([GH 10001](https://github.com/pandas-dev/pandas/issues/10001)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Timedelta(None)` is now accepted and will return `NaT`, mirroring `pd.Timestamp`
    ([GH 13687](https://github.com/pandas-dev/pandas/issues/13687))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_stata()` can now handle some format 111 files, which are produced
    by SAS when generating Stata dta files ([GH 11526](https://github.com/pandas-dev/pandas/issues/11526))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` and `Index` now support `divmod` which will return a tuple of series
    or indices. This behaves like a standard binary operator with regards to broadcasting
    rules ([GH 14208](https://github.com/pandas-dev/pandas/issues/14208)).  ## API
    changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types in the output, mimicking NumPy
    `.tolist()` behavior ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '### `Series` operators for different indexes'
  prefs: []
  type: TYPE_NORMAL
- en: Following `Series` operators have been changed to make all operators consistent,
    including `DataFrame` ([GH 1134](https://github.com/pandas-dev/pandas/issues/1134),
    [GH 4581](https://github.com/pandas-dev/pandas/issues/4581), [GH 13538](https://github.com/pandas-dev/pandas/issues/13538))
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` comparison operators now raise `ValueError` when `index` are different.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` logical operators align both `index` of left and right hand side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Until 0.18.1, comparing `Series` with the same length, would succeed even if
    the `.index` are different (the result ignores `.index`). As of 0.19.0, this will
    raises `ValueError` to be more strict. This section also describes how to keep
    previous behavior or align different indexes, using the flexible comparison methods
    like `.eq`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, `Series` and `DataFrame` operators behave as below:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arithmetic operators align both `index` (no changes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Comparison operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Comparison operators raise `ValueError` when `.index` are different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` compared values ignoring the `.index` as long as both had the same
    length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the same result as previous versions (compare values based on locations
    ignoring `.index`), compare both `.values`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to compare `Series` aligning its `.index`, see flexible comparison
    methods section below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Logical operators align both `.index` of left and right hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`), only left hand side `index` was kept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` logical operators fill a `NaN` result with `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve the same result as previous versions (compare values based on only
    left hand side index), you can use `reindex_like`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Flexible comparison methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Series` flexible comparison methods like `eq`, `ne`, `le`, `lt`, `ge` and
    `gt` now align both `index`. Use these operators if you want to compare two `Series`
    which has the different `index`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, this worked the same as comparison operators (see above).  ###
    `Series` type promotion on assignment'
  prefs: []
  type: TYPE_NORMAL
- en: A `Series` will now correctly promote its dtype for assignment with incompat
    values to the current dtype ([GH 13234](https://github.com/pandas-dev/pandas/issues/13234))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]  ### Function `.to_datetime()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously if `.to_datetime()` encountered mixed integers/floats and strings,
    but no datetimes with `errors='coerce'` it would convert all to `NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: This will now convert integers/floats with the default unit of `ns`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Bug fixes related to `.to_datetime()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing integers or floats, and no `unit` and
    `errors='coerce'` ([GH 13180](https://github.com/pandas-dev/pandas/issues/13180)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing invalid data types (e.g. bool); will
    now respect the `errors` keyword ([GH 13176](https://github.com/pandas-dev/pandas/issues/13176))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` which overflowed on `int8`, and `int16` dtypes ([GH
    13451](https://github.com/pandas-dev/pandas/issues/13451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` raise `AttributeError` with `NaN` and the other string
    is not valid when `errors='ignore'` ([GH 12424](https://github.com/pandas-dev/pandas/issues/12424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `pd.to_datetime()` did not cast floats correctly when `unit` was specified,
    resulting in truncated datetime ([GH 13834](https://github.com/pandas-dev/pandas/issues/13834))  ###
    Merging changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging will now preserve the dtype of the join keys ([GH 8596](https://github.com/pandas-dev/pandas/issues/8596))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: We are able to preserve the join keys
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Of course if you have missing values that are introduced, then the resulting
    dtype will be upcast, which is unchanged from previous.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]  ### Method `.describe()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Percentile identifiers in the index of a `.describe()` output will now be rounded
    to the least precision that keeps them distinct ([GH 13104](https://github.com/pandas-dev/pandas/issues/13104))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: The percentiles were rounded to at most one decimal place, which could raise
    `ValueError` for a data frame if the percentiles were duplicated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing duplicated `percentiles` will now raise a `ValueError`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `.describe()` on a DataFrame with a mixed-dtype column index, which
    would previously raise a `TypeError` ([GH 13288](https://github.com/pandas-dev/pandas/issues/13288))  ###
    `Period` changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PeriodIndex` now has `period` dtype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`PeriodIndex` now has its own `period` dtype. The `period` dtype is a pandas
    extension dtype like `category` or the [timezone aware dtype](../user_guide/timeseries.html#timeseries-timezone-series)
    (`datetime64[ns, tz]`) ([GH 13941](https://github.com/pandas-dev/pandas/issues/13941)).
    As a consequence of this change, `PeriodIndex` no longer has an integer dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '#### `Period(''NaT'')` now returns `pd.NaT`'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, `Period` has its own `Period('NaT')` representation different from
    `pd.NaT`. Now `Period('NaT')` has been changed to return `pd.NaT`. ([GH 12759](https://github.com/pandas-dev/pandas/issues/12759),
    [GH 13582](https://github.com/pandas-dev/pandas/issues/13582))
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: These result in `pd.NaT` without providing `freq` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: To be compatible with `Period` addition and subtraction, `pd.NaT` now supports
    addition and subtraction with `int`. Previously it raised `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '`PeriodIndex.values` now returns array of `Period` object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.values` is changed to return an array of `Period` objects, rather than an
    array of integers ([GH 13988](https://github.com/pandas-dev/pandas/issues/13988)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]  ### Index `+` / `-` no longer used for set operations'
  prefs: []
  type: TYPE_NORMAL
- en: Addition and subtraction of the base Index type and of DatetimeIndex (not the
    numeric index types) previously performed set operations (set union and difference).
    This behavior was already deprecated since 0.15.0 (in favor using the specific
    `.union()` and `.difference()` methods), and is now disabled. When possible, `+`
    and `-` are now used for element-wise operations, for example for concatenating
    strings or subtracting datetimes ([GH 8227](https://github.com/pandas-dev/pandas/issues/8227),
    [GH 14127](https://github.com/pandas-dev/pandas/issues/14127)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the same operation will now perform element-wise addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Note that numeric Index objects already performed element-wise operations. For
    example, the behavior of adding two integer Indexes is unchanged. The base `Index`
    is now made consistent with this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Further, because of this change, it is now possible to subtract two DatetimeIndex
    objects resulting in a TimedeltaIndex:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]  ### `Index.difference` and `.symmetric_difference` changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.difference` and `Index.symmetric_difference` will now, more consistently,
    treat `NaN` values as any other values. ([GH 13514](https://github.com/pandas-dev/pandas/issues/13514))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]  ### `Index.unique` consistently returns `Index`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.unique()` now returns unique values as an `Index` of the appropriate
    `dtype`. ([GH 13395](https://github.com/pandas-dev/pandas/issues/13395)). Previously,
    most `Index` classes returned `np.ndarray`, and `DatetimeIndex`, `TimedeltaIndex`
    and `PeriodIndex` returned `Index` to keep metadata like timezone.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]  ### `MultiIndex` constructors, `groupby` and `set_index` preserve
    categorical dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiIndex.from_arrays` and `MultiIndex.from_product` will now preserve categorical
    dtype in `MultiIndex` levels ([GH 13743](https://github.com/pandas-dev/pandas/issues/13743),
    [GH 13854](https://github.com/pandas-dev/pandas/issues/13854)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the single level is now a `CategoricalIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: An analogous change has been made to `MultiIndex.from_product`. As a consequence,
    `groupby` and `set_index` also preserve categorical dtypes in indexes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]  ### Function `read_csv` will progressively enumerate chunks'
  prefs: []
  type: TYPE_NORMAL
- en: When [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    is called with `chunksize=n` and without specifying an index, each chunk used
    to have an independently generated index from `0` to `n-1`. They are now given
    instead a progressive index, starting from `0` for the first chunk, from `n` for
    the second, and so on, so that, when concatenated, they are identical to the result
    of calling [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") without the `chunksize=` argument ([GH 12185](https://github.com/pandas-dev/pandas/issues/12185)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]  ### Sparse changes'
  prefs: []
  type: TYPE_NORMAL
- en: These changes allow pandas to handle sparse data with more dtypes, and for work
    to make a smoother experience with data handling.
  prefs: []
  type: TYPE_NORMAL
- en: Types `int64` and `bool` support enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structures now gained enhanced support of `int64` and `bool` `dtype`
    ([GH 667](https://github.com/pandas-dev/pandas/issues/667), [GH 13849](https://github.com/pandas-dev/pandas/issues/13849)).
  prefs: []
  type: TYPE_NORMAL
- en: Previously, sparse data were `float64` dtype by default, even if all inputs
    were of `int` or `bool` dtype. You had to specify `dtype` explicitly to create
    sparse data with `int64` dtype. Also, `fill_value` had to be specified explicitly
    because the default was `np.nan` which doesn’t appear in `int64` or `bool` data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: As of v0.19.0, sparse data keeps the input dtype, and uses more appropriate
    `fill_value` defaults (`0` for `int64` dtype, `False` for `bool` dtype).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See the [docs](../user_guide/sparse.html#sparse-dtype) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Operators now preserve dtypes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structure now can preserve `dtype` after arithmetic ops ([GH 13848](https://github.com/pandas-dev/pandas/issues/13848))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Sparse data structure now support `astype` to convert internal `dtype` ([GH
    13900](https://github.com/pandas-dev/pandas/issues/13900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '`astype` fails if data contains values which cannot be converted to specified
    `dtype`. Note that the limitation is applied to `fill_value` which default is
    `np.nan`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Other sparse fixes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Subclassed `SparseDataFrame` and `SparseSeries` now preserve class types when
    slicing or transposing. ([GH 13787](https://github.com/pandas-dev/pandas/issues/13787))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray` with `bool` dtype now supports logical (bool) operators ([GH
    14000](https://github.com/pandas-dev/pandas/issues/14000))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing may raise `IndexError`
    ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing result may have normal
    `Index` ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` in which `axis=None` did not default to `axis=0` ([GH
    13048](https://github.com/pandas-dev/pandas/issues/13048))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` creation with `object` dtype may
    raise `TypeError` ([GH 11633](https://github.com/pandas-dev/pandas/issues/11633))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` doesn’t respect passed `SparseArray` or `SparseSeries`
    ‘s dtype and `fill_value` ([GH 13866](https://github.com/pandas-dev/pandas/issues/13866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` and `SparseSeries` don’t apply ufunc to `fill_value` ([GH
    13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.abs` incorrectly keeps negative `fill_value` ([GH 13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in single row slicing on multi-type `SparseDataFrame` s, types were previously
    forced to float ([GH 13917](https://github.com/pandas-dev/pandas/issues/13917))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` slicing changes integer dtype to float ([GH 8292](https://github.com/pandas-dev/pandas/issues/8292))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme` comparison ops may raise `TypeError` ([GH 13001](https://github.com/pandas-dev/pandas/issues/13001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme.isnull` raises `ValueError` ([GH 8276](https://github.com/pandas-dev/pandas/issues/8276))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` representation with `bool` dtype may raise `IndexError`
    ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` of `bool` or `int64` dtype may display
    its values like `float64` dtype ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in sparse indexing using `SparseArray` with `bool` dtype may return incorrect
    result ([GH 13985](https://github.com/pandas-dev/pandas/issues/13985))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` created from `SparseSeries` may lose `dtype` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `SparseSeries` comparison with dense returns normal `Series` rather
    than `SparseSeries` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))  ###
    Indexer dtype changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This change only affects 64 bit python running on Windows, and only affects
    relatively advanced indexing operations
  prefs: []
  type: TYPE_NORMAL
- en: Methods such as `Index.get_indexer` that return an indexer array, coerce that
    array to a “platform int”, so that it can be directly used in 3rd party library
    operations like `numpy.take`. Previously, a platform int was defined as `np.int_`
    which corresponds to a C integer, but the correct type, and what is being used
    now, is `np.intp`, which corresponds to the C integer size that can hold a pointer
    ([GH 3033](https://github.com/pandas-dev/pandas/issues/3033), [GH 13972](https://github.com/pandas-dev/pandas/issues/13972)).
  prefs: []
  type: TYPE_NORMAL
- en: These types are the same on many platform, but for 64 bit python on Windows,
    `np.int_` is 32 bits, and `np.intp` is 64 bits. Changing this behavior improves
    performance for many operations on that platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]  ### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp.to_pydatetime` will issue a `UserWarning` when `warn=True`, and
    the instance has a non-zero number of nanoseconds, previously this would print
    a message to stdout ([GH 14101](https://github.com/pandas-dev/pandas/issues/14101)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.unique()` with datetime and timezone now returns return array of `Timestamp`
    with timezone ([GH 13565](https://github.com/pandas-dev/pandas/issues/13565)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel.to_sparse()` will raise a `NotImplementedError` exception when called
    ([GH 13778](https://github.com/pandas-dev/pandas/issues/13778)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.reshape()` will raise a `NotImplementedError` exception when called
    ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filter()` enforces mutual exclusion of the keyword arguments ([GH 12399](https://github.com/pandas-dev/pandas/issues/12399)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval`’s upcasting rules for `float32` types have been updated to be more consistent
    with NumPy’s rules. New behavior will not upcast to `float64` if you multiply
    a pandas `float32` object by a scalar float64 ([GH 12388](https://github.com/pandas-dev/pandas/issues/12388)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `UnsupportedFunctionCall` error is now raised if NumPy ufuncs like `np.mean`
    are called on groupby or resample objects ([GH 12811](https://github.com/pandas-dev/pandas/issues/12811)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__setitem__` will no longer apply a callable rhs as a function instead of
    storing it. Call `where` directly to get the previous behavior ([GH 13299](https://github.com/pandas-dev/pandas/issues/13299)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls to `.sample()` will respect the random seed set via `numpy.random.seed(n)`
    ([GH 13161](https://github.com/pandas-dev/pandas/issues/13161))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Styler.apply` is now more strict about the outputs your function must return.
    For `axis=0` or `axis=1`, the output shape must be identical. For `axis=None`,
    the output must be a DataFrame with identical columns and index labels ([GH 13222](https://github.com/pandas-dev/pandas/issues/13222)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.astype(int)` will now raise `ValueError` if `Float64Index` contains
    `NaN` values ([GH 13149](https://github.com/pandas-dev/pandas/issues/13149))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimedeltaIndex.astype(int)` and `DatetimeIndex.astype(int)` will now return
    `Int64Index` instead of `np.array` ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing `Period` with multiple frequencies to normal `Index` now returns `Index`
    with `object` dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.fillna` with `Period` has different freq now coerces to `object`
    dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceted boxplots from `DataFrame.boxplot(by=col)` now return a `Series` when
    `return_type` is not None. Previously these returned an `OrderedDict`. Note that
    when `return_type=None`, the default, these still return a 2-D NumPy array ([GH
    12216](https://github.com/pandas-dev/pandas/issues/12216), [GH 7096](https://github.com/pandas-dev/pandas/issues/7096)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_hdf` will now raise a `ValueError` instead of `KeyError`, if a mode
    other than `r`, `r+` and `a` is supplied. ([GH 13623](https://github.com/pandas-dev/pandas/issues/13623))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()`, `pd.read_table()`, and `pd.read_hdf()` raise the builtin `FileNotFoundError`
    exception for Python 3.x when called on a nonexistent file; this is back-ported
    as `IOError` in Python 2.x ([GH 14086](https://github.com/pandas-dev/pandas/issues/14086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More informative exceptions are passed through the csv parser. The exception
    type would now be the original exception type instead of `CParserError` ([GH 13652](https://github.com/pandas-dev/pandas/issues/13652)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()` in the C engine will now issue a `ParserWarning` or raise a
    `ValueError` when `sep` encoded is more than one character long ([GH 14065](https://github.com/pandas-dev/pandas/issues/14065))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.values` will now return `float64` with a `DataFrame` of mixed `int64`
    and `uint64` dtypes, conforming to `np.find_common_type` ([GH 10364](https://github.com/pandas-dev/pandas/issues/10364),
    [GH 13917](https://github.com/pandas-dev/pandas/issues/13917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.groupby.groups` will now return a dictionary of `Index` objects, rather than
    a dictionary of `np.ndarray` or `lists` ([GH 14293](https://github.com/pandas-dev/pandas/issues/14293))  ##
    Deprecations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.reshape` and `Categorical.reshape` have been deprecated and will be
    removed in a subsequent release ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882),
    [GH 12882](https://github.com/pandas-dev/pandas/issues/12882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.to_datetime` has been deprecated in favor of `PeriodIndex.to_timestamp`
    ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp.to_datetime` has been deprecated in favor of `Timestamp.to_pydatetime`
    ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.to_datetime` and `DatetimeIndex.to_datetime` have been deprecated in
    favor of `pd.to_datetime` ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.core.datetools` module has been deprecated and will be removed in a
    subsequent release ([GH 14094](https://github.com/pandas-dev/pandas/issues/14094))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseList` has been deprecated and will be removed in a future version ([GH
    13784](https://github.com/pandas-dev/pandas/issues/13784))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_html()` and `DataFrame.to_latex()` have dropped the `colSpace`
    parameter in favor of `col_space` ([GH 13857](https://github.com/pandas-dev/pandas/issues/13857))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` has deprecated the `flavor` parameter, as it is superfluous
    when SQLAlchemy is not installed ([GH 13611](https://github.com/pandas-dev/pandas/issues/13611))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated `read_csv` keywords:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compact_ints` and `use_unsigned` have been deprecated and will be removed
    in a future version ([GH 13320](https://github.com/pandas-dev/pandas/issues/13320))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buffer_lines` has been deprecated and will be removed in a future version
    ([GH 13360](https://github.com/pandas-dev/pandas/issues/13360))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`as_recarray` has been deprecated and will be removed in a future version ([GH
    13373](https://github.com/pandas-dev/pandas/issues/13373))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_footer` has been deprecated in favor of `skipfooter` and will be removed
    in a future version ([GH 13349](https://github.com/pandas-dev/pandas/issues/13349))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: top-level `pd.ordered_merge()` has been renamed to `pd.merge_ordered()` and
    the original name will be removed in a future version ([GH 13358](https://github.com/pandas-dev/pandas/issues/13358))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp.offset` property (and named arg in the constructor), has been deprecated
    in favor of `freq` ([GH 12160](https://github.com/pandas-dev/pandas/issues/12160))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.tseries.util.pivot_annual` is deprecated. Use `pivot_table` as alternative,
    an example is [here](../user_guide/cookbook.html#cookbook-pivot) ([GH 736](https://github.com/pandas-dev/pandas/issues/736))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.tseries.util.isleapyear` has been deprecated and will be removed in a subsequent
    release. Datetime-likes now have a `.is_leap_year` property ([GH 13727](https://github.com/pandas-dev/pandas/issues/13727))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel4D` and `PanelND` constructors are deprecated and will be removed in
    a future version. The recommended way to represent these types of n-dimensional
    data are with the [xarray package](http://xarray.pydata.org/en/stable/). pandas
    provides a `to_xarray()` method to automate this conversion ([GH 13564](https://github.com/pandas-dev/pandas/issues/13564)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.tseries.frequencies.get_standard_freq` is deprecated. Use `pandas.tseries.frequencies.to_offset(freq).rule_code`
    instead ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.tseries.frequencies.to_offset`’s `freqstr` keyword is deprecated in
    favor of `freq` ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.from_array` has been deprecated and will be removed in a future
    version ([GH 13854](https://github.com/pandas-dev/pandas/issues/13854))  ## Removal
    of prior version deprecations/changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SparsePanel` class has been removed ([GH 13778](https://github.com/pandas-dev/pandas/issues/13778))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.sandbox` module has been removed in favor of the external library `pandas-qt`
    ([GH 13670](https://github.com/pandas-dev/pandas/issues/13670))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pandas.io.data` and `pandas.io.wb` modules are removed in favor of the
    [pandas-datareader package](https://github.com/pydata/pandas-datareader) ([GH
    13724](https://github.com/pandas-dev/pandas/issues/13724)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pandas.tools.rplot` module has been removed in favor of the [seaborn package](https://github.com/mwaskom/seaborn)
    ([GH 13855](https://github.com/pandas-dev/pandas/issues/13855))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_csv()` has dropped the `engine` parameter, as was deprecated
    in 0.17.1 ([GH 11274](https://github.com/pandas-dev/pandas/issues/11274), [GH
    13419](https://github.com/pandas-dev/pandas/issues/13419))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_dict()` has dropped the `outtype` parameter in favor of `orient`
    ([GH 13627](https://github.com/pandas-dev/pandas/issues/13627), [GH 8486](https://github.com/pandas-dev/pandas/issues/8486))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Categorical` has dropped setting of the `ordered` attribute directly in
    favor of the `set_ordered` method ([GH 13671](https://github.com/pandas-dev/pandas/issues/13671))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Categorical` has dropped the `levels` attribute in favor of `categories`
    ([GH 8376](https://github.com/pandas-dev/pandas/issues/8376))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` has dropped the `mysql` option for the `flavor` parameter
    ([GH 13611](https://github.com/pandas-dev/pandas/issues/13611))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel.shift()` has dropped the `lags` parameter in favor of `periods` ([GH
    14041](https://github.com/pandas-dev/pandas/issues/14041))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Index` has dropped the `diff` method in favor of `difference` ([GH 13669](https://github.com/pandas-dev/pandas/issues/13669))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.DataFrame` has dropped the `to_wide` method in favor of `to_panel` ([GH
    14039](https://github.com/pandas-dev/pandas/issues/14039))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.to_csv` has dropped the `nanRep` parameter in favor of `na_rep` ([GH
    13804](https://github.com/pandas-dev/pandas/issues/13804))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.xs`, `DataFrame.xs`, `Panel.xs`, `Panel.major_xs`, and `Panel.minor_xs`
    have dropped the `copy` parameter ([GH 13781](https://github.com/pandas-dev/pandas/issues/13781))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str.split` has dropped the `return_type` parameter in favor of `expand` ([GH
    13701](https://github.com/pandas-dev/pandas/issues/13701))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the legacy time rules (offset aliases), deprecated since 0.17.0 (this
    has been alias since 0.8.0) ([GH 13590](https://github.com/pandas-dev/pandas/issues/13590),
    [GH 13868](https://github.com/pandas-dev/pandas/issues/13868)). Now legacy time
    rules raises `ValueError`. For the list of currently supported offsets, see [here](../user_guide/timeseries.html#timeseries-offset-aliases).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value for the `return_type` parameter for `DataFrame.plot.box` and
    `DataFrame.boxplot` changed from `None` to `"axes"`. These methods will now return
    a matplotlib axes by default instead of a dictionary of artists. See [here](../user_guide/visualization.html#visualization-box-return)
    ([GH 6581](https://github.com/pandas-dev/pandas/issues/6581)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `tquery` and `uquery` functions in the `pandas.io.sql` module are removed
    ([GH 5950](https://github.com/pandas-dev/pandas/issues/5950)).  ## Performance
    improvements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of sparse `IntIndex.intersect` ([GH 13082](https://github.com/pandas-dev/pandas/issues/13082))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of sparse arithmetic with `BlockIndex` when the number
    of blocks are large, though recommended to use `IntIndex` in such cases ([GH 13082](https://github.com/pandas-dev/pandas/issues/13082))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `DataFrame.quantile()` as it now operates per-block
    ([GH 11623](https://github.com/pandas-dev/pandas/issues/11623))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of float64 hash table operations, fixing some very slow
    indexing and groupby operations in python 3 ([GH 13166](https://github.com/pandas-dev/pandas/issues/13166),
    [GH 13334](https://github.com/pandas-dev/pandas/issues/13334))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `DataFrameGroupBy.transform` ([GH 12737](https://github.com/pandas-dev/pandas/issues/12737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `Index` and `Series` `.duplicated` ([GH 10235](https://github.com/pandas-dev/pandas/issues/10235))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `Index.difference` ([GH 12044](https://github.com/pandas-dev/pandas/issues/12044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `RangeIndex.is_monotonic_increasing` and `is_monotonic_decreasing`
    ([GH 13749](https://github.com/pandas-dev/pandas/issues/13749))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of datetime string parsing in `DatetimeIndex` ([GH 13692](https://github.com/pandas-dev/pandas/issues/13692))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of hashing `Period` ([GH 12817](https://github.com/pandas-dev/pandas/issues/12817))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `factorize` of datetime with timezone ([GH 13750](https://github.com/pandas-dev/pandas/issues/13750))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of by lazily creating indexing hashtables on larger Indexes
    ([GH 14266](https://github.com/pandas-dev/pandas/issues/14266))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `groupby.groups` ([GH 14293](https://github.com/pandas-dev/pandas/issues/14293))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unnecessary materializing of a MultiIndex when introspecting for memory usage
    ([GH 14308](https://github.com/pandas-dev/pandas/issues/14308))  ## Bug fixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby().shift()`, which could cause a segfault or corruption in rare
    circumstances when grouping by columns with missing values ([GH 13813](https://github.com/pandas-dev/pandas/issues/13813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby().cumsum()` calculating `cumprod` when `axis=1`. ([GH 13994](https://github.com/pandas-dev/pandas/issues/13994))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_timedelta()` in which the `errors` parameter was not being respected
    ([GH 13613](https://github.com/pandas-dev/pandas/issues/13613))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `io.json.json_normalize()`, where non-ascii keys raised an exception
    ([GH 13213](https://github.com/pandas-dev/pandas/issues/13213))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when passing a not-default-indexed `Series` as `xerr` or `yerr` in `.plot()`
    ([GH 11858](https://github.com/pandas-dev/pandas/issues/11858))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in area plot draws legend incorrectly if subplot is enabled or legend is
    moved after plot (matplotlib 1.5.0 is required to draw area plot legend properly)
    ([GH 9161](https://github.com/pandas-dev/pandas/issues/9161), [GH 13544](https://github.com/pandas-dev/pandas/issues/13544))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` assignment with an object-dtyped `Index` where the resultant
    column is mutable to the original object. ([GH 13522](https://github.com/pandas-dev/pandas/issues/13522))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in matplotlib `AutoDataFormatter`; this restores the second scaled formatting
    and re-adds micro-second scaled formatting ([GH 13131](https://github.com/pandas-dev/pandas/issues/13131))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in selection from a `HDFStore` with a fixed format and `start` and/or `stop`
    specified will now return the selected range ([GH 8287](https://github.com/pandas-dev/pandas/issues/8287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.from_codes()` where an unhelpful error was raised when an
    invalid `ordered` parameter was passed in ([GH 14058](https://github.com/pandas-dev/pandas/issues/14058))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` construction from a tuple of integers on windows not returning
    default dtype (int64) ([GH 13646](https://github.com/pandas-dev/pandas/issues/13646))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `TimedeltaIndex` addition with a Datetime-like object where addition
    overflow was not being caught ([GH 14068](https://github.com/pandas-dev/pandas/issues/14068))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.groupby(..).resample(..)` when the same object is called multiple times
    ([GH 13174](https://github.com/pandas-dev/pandas/issues/13174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_records()` when index name is a unicode string ([GH 13172](https://github.com/pandas-dev/pandas/issues/13172))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in calling `.memory_usage()` on object which doesn’t implement ([GH 12924](https://github.com/pandas-dev/pandas/issues/12924))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression in `Series.quantile` with nans (also shows up in `.median()` and
    `.describe()` ); furthermore now names the `Series` with the quantile ([GH 13098](https://github.com/pandas-dev/pandas/issues/13098),
    [GH 13146](https://github.com/pandas-dev/pandas/issues/13146))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SeriesGroupBy.transform` with datetime values and missing groups ([GH
    13191](https://github.com/pandas-dev/pandas/issues/13191))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where empty `Series` were incorrectly coerced in datetime-like numeric operations
    ([GH 13844](https://github.com/pandas-dev/pandas/issues/13844))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical` constructor when passed a `Categorical` containing datetimes
    with timezones ([GH 14190](https://github.com/pandas-dev/pandas/issues/14190))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.extractall()` with `str` index raises `ValueError` ([GH 13156](https://github.com/pandas-dev/pandas/issues/13156))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.extractall()` with single group and quantifier ([GH 13382](https://github.com/pandas-dev/pandas/issues/13382))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` and `Period` subtraction raises `ValueError` or `AttributeError`
    rather than `TypeError` ([GH 13078](https://github.com/pandas-dev/pandas/issues/13078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` and `Series` created with `NaN` and `NaT` mixed data may not
    have `datetime64` dtype ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` and `Series` may ignore `np.datetime64('nat')` and `np.timdelta64('nat')`
    to infer dtype ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex` and `Period` subtraction raises `AttributeError` ([GH 13071](https://github.com/pandas-dev/pandas/issues/13071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex` construction returning a `float64` index in some circumstances
    ([GH 13067](https://github.com/pandas-dev/pandas/issues/13067))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` with a `PeriodIndex` not changing its `freq` appropriately
    when empty ([GH 13067](https://github.com/pandas-dev/pandas/issues/13067))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` with a `PeriodIndex` not retaining its type or name with
    an empty `DataFrame` appropriately when empty ([GH 13212](https://github.com/pandas-dev/pandas/issues/13212))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).apply(..)` when the passed function returns scalar values
    per group ([GH 13468](https://github.com/pandas-dev/pandas/issues/13468)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).resample(..)` where passing some keywords would raise an
    exception ([GH 13235](https://github.com/pandas-dev/pandas/issues/13235))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.tz_convert` on a tz-aware `DateTimeIndex` that relied on index being
    sorted for correct results ([GH 13306](https://github.com/pandas-dev/pandas/issues/13306))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.tz_localize` with `dateutil.tz.tzlocal` may return incorrect result
    ([GH 13583](https://github.com/pandas-dev/pandas/issues/13583))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeTZDtype` dtype with `dateutil.tz.tzlocal` cannot be regarded
    as valid dtype ([GH 13583](https://github.com/pandas-dev/pandas/issues/13583))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_hdf()` where attempting to load an HDF file with a single dataset,
    that had one or more categorical columns, failed unless the key argument was set
    to the name of the dataset. ([GH 13231](https://github.com/pandas-dev/pandas/issues/13231))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling()` that allowed a negative integer window in construction of
    the `Rolling()` object, but would later fail on aggregation ([GH 13383](https://github.com/pandas-dev/pandas/issues/13383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` indexing with tuple-valued data and a numeric index ([GH 13509](https://github.com/pandas-dev/pandas/issues/13509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in printing `pd.DataFrame` where unusual elements with the `object` dtype
    were causing segfaults ([GH 13717](https://github.com/pandas-dev/pandas/issues/13717))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in ranking `Series` which could result in segfaults ([GH 13445](https://github.com/pandas-dev/pandas/issues/13445))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in various index types, which did not propagate the name of passed index
    ([GH 12309](https://github.com/pandas-dev/pandas/issues/12309))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex`, which did not honour the `copy=True` ([GH 13205](https://github.com/pandas-dev/pandas/issues/13205))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex.is_normalized` returns incorrectly for normalized date_range
    in case of local timezones ([GH 13459](https://github.com/pandas-dev/pandas/issues/13459))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.concat` and `.append` may coerces `datetime64` and `timedelta` to
    `object` dtype containing python built-in `datetime` or `timedelta` rather than
    `Timestamp` or `Timedelta` ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex.append` may raises `AttributeError` when the result is `object`
    dtype ([GH 13221](https://github.com/pandas-dev/pandas/issues/13221))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `CategoricalIndex.append` may accept normal `list` ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.concat` and `.append` with the same timezone get reset to UTC ([GH
    7795](https://github.com/pandas-dev/pandas/issues/7795))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` and `DataFrame` `.append` raises `AmbiguousTimeError` if data
    contains datetime near DST boundary ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.to_csv()` in which float values were being quoted even though
    quotations were specified for non-numeric values only ([GH 12922](https://github.com/pandas-dev/pandas/issues/12922),
    [GH 13259](https://github.com/pandas-dev/pandas/issues/13259))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.describe()` raising `ValueError` with only boolean columns
    ([GH 13898](https://github.com/pandas-dev/pandas/issues/13898))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `MultiIndex` slicing where extra elements were returned when level is
    non-unique ([GH 12896](https://github.com/pandas-dev/pandas/issues/12896))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.str.replace` does not raise `TypeError` for invalid replacement ([GH
    13438](https://github.com/pandas-dev/pandas/issues/13438))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `MultiIndex.from_arrays` which didn’t check for input array lengths matching
    ([GH 13599](https://github.com/pandas-dev/pandas/issues/13599))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `cartesian_product` and `MultiIndex.from_product` which may raise with
    empty input arrays ([GH 12258](https://github.com/pandas-dev/pandas/issues/12258))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which may cause a segfault or corruption when iterating
    in large chunks over a stream/file under rare circumstances ([GH 13703](https://github.com/pandas-dev/pandas/issues/13703))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which caused errors to be raised when a dictionary containing
    scalars is passed in for `na_values` ([GH 12224](https://github.com/pandas-dev/pandas/issues/12224))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which caused BOM files to be incorrectly parsed by not
    ignoring the BOM ([GH 4793](https://github.com/pandas-dev/pandas/issues/4793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` which raised errors when a numpy
    array was passed in for `usecols` ([GH 12546](https://github.com/pandas-dev/pandas/issues/12546))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` where the index columns were being incorrectly parsed
    when parsed as dates with a `thousands` parameter ([GH 14066](https://github.com/pandas-dev/pandas/issues/14066))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which `NaN` values weren’t
    being detected after data was converted to numeric values ([GH 13314](https://github.com/pandas-dev/pandas/issues/13314))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in which the `nrows` argument was not properly validated
    for both engines ([GH 10476](https://github.com/pandas-dev/pandas/issues/10476))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which infinities of mixed-case
    forms were not being interpreted properly ([GH 13274](https://github.com/pandas-dev/pandas/issues/13274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which trailing `NaN` values
    were not being parsed ([GH 13320](https://github.com/pandas-dev/pandas/issues/13320))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` when reading from a `tempfile.TemporaryFile`
    on Windows with Python 3 ([GH 13398](https://github.com/pandas-dev/pandas/issues/13398))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` that prevents `usecols` kwarg from accepting single-byte
    unicode strings ([GH 13219](https://github.com/pandas-dev/pandas/issues/13219))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` that prevents `usecols` from being an empty set ([GH
    13402](https://github.com/pandas-dev/pandas/issues/13402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in the C engine where the NULL character was not being
    parsed as NULL ([GH 14012](https://github.com/pandas-dev/pandas/issues/14012))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='c'` in which NULL `quotechar` was not accepted
    even though `quoting` was specified as `None` ([GH 13411](https://github.com/pandas-dev/pandas/issues/13411))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='c'` in which fields were not properly cast
    to float when quoting was specified as non-numeric ([GH 13411](https://github.com/pandas-dev/pandas/issues/13411))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in Python 2.x with non-UTF8 encoded, multi-character
    separated data ([GH 3404](https://github.com/pandas-dev/pandas/issues/3404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()`, where aliases for utf-xx (e.g. UTF-xx, UTF_xx, utf_xx)
    raised UnicodeDecodeError ([GH 13549](https://github.com/pandas-dev/pandas/issues/13549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv`, `pd.read_table`, `pd.read_fwf`, `pd.read_stata` and `pd.read_sas`
    where files were opened by parsers but not closed if both `chunksize` and `iterator`
    were `None`. ([GH 13940](https://github.com/pandas-dev/pandas/issues/13940))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `StataReader`, `StataWriter`, `XportReader` and `SAS7BDATReader` where
    a file was not properly closed when an error was raised. ([GH 13940](https://github.com/pandas-dev/pandas/issues/13940))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.pivot_table()` where `margins_name` is ignored when `aggfunc` is
    a list ([GH 13354](https://github.com/pandas-dev/pandas/issues/13354))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.Series.str.zfill`, `center`, `ljust`, `rjust`, and `pad` when passing
    non-integers, did not raise `TypeError` ([GH 13598](https://github.com/pandas-dev/pandas/issues/13598))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in checking for any null objects in a `TimedeltaIndex`, which always returned
    `True` ([GH 13603](https://github.com/pandas-dev/pandas/issues/13603))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` arithmetic raises `TypeError` if it contains datetime-like as
    `object` dtype ([GH 13043](https://github.com/pandas-dev/pandas/issues/13043))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug `Series.isnull()` and `Series.notnull()` ignore `Period('NaT')` ([GH 13737](https://github.com/pandas-dev/pandas/issues/13737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug `Series.fillna()` and `Series.dropna()` don’t affect to `Period('NaT')`
    ([GH 13737](https://github.com/pandas-dev/pandas/issues/13737)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.fillna(value=np.nan)` incorrectly raises `KeyError` on a `category`
    dtyped `Series` ([GH 14021](https://github.com/pandas-dev/pandas/issues/14021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in extension dtype creation where the created types were not is/identical
    ([GH 13285](https://github.com/pandas-dev/pandas/issues/13285))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` where incorrect warnings were triggered by IPython introspection
    ([GH 13618](https://github.com/pandas-dev/pandas/issues/13618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `NaT` - `Period` raises `AttributeError` ([GH 13071](https://github.com/pandas-dev/pandas/issues/13071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` comparison may output incorrect result if rhs contains `NaT`
    ([GH 9005](https://github.com/pandas-dev/pandas/issues/9005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` and `Index` comparison may output incorrect result if it contains
    `NaT` with `object` dtype ([GH 13592](https://github.com/pandas-dev/pandas/issues/13592))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` addition raises `TypeError` if `Period` is on right hand side
    ([GH 13069](https://github.com/pandas-dev/pandas/issues/13069))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` and `Series` or `Index` comparison raises `TypeError` ([GH 13200](https://github.com/pandas-dev/pandas/issues/13200))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.set_eng_float_format()` that would prevent NaN and Inf from formatting
    ([GH 11981](https://github.com/pandas-dev/pandas/issues/11981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.unstack` with `Categorical` dtype resets `.ordered` to `True` ([GH
    13249](https://github.com/pandas-dev/pandas/issues/13249))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean some compile time warnings in datetime parsing ([GH 13607](https://github.com/pandas-dev/pandas/issues/13607))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `factorize` raises `AmbiguousTimeError` if data contains datetime near
    DST boundary ([GH 13750](https://github.com/pandas-dev/pandas/issues/13750))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.set_index` raises `AmbiguousTimeError` if new index contains DST boundary
    and multi levels ([GH 12920](https://github.com/pandas-dev/pandas/issues/12920))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.shift` raises `AmbiguousTimeError` if data contains datetime near DST
    boundary ([GH 13926](https://github.com/pandas-dev/pandas/issues/13926))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_hdf()` returns incorrect result when a `DataFrame` with a `categorical`
    column and a query which doesn’t match any values ([GH 13792](https://github.com/pandas-dev/pandas/issues/13792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.iloc` when indexing with a non lexsorted MultiIndex ([GH 13797](https://github.com/pandas-dev/pandas/issues/13797))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.loc` when indexing with date strings in a reverse sorted `DatetimeIndex`
    ([GH 14316](https://github.com/pandas-dev/pandas/issues/14316))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` comparison operators when dealing with zero dim NumPy arrays
    ([GH 13006](https://github.com/pandas-dev/pandas/issues/13006))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.combine_first` may return incorrect `dtype` ([GH 7630](https://github.com/pandas-dev/pandas/issues/7630),
    [GH 10567](https://github.com/pandas-dev/pandas/issues/10567))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby` where `apply` returns different result depending on whether
    first result is `None` or not ([GH 12824](https://github.com/pandas-dev/pandas/issues/12824))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).nth()` where the group key is included inconsistently if
    called after `.head()/.tail()` ([GH 12839](https://github.com/pandas-dev/pandas/issues/12839))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_html`, `.to_latex` and `.to_string` silently ignore custom datetime
    formatter passed through the `formatters` key word ([GH 10690](https://github.com/pandas-dev/pandas/issues/10690))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.iterrows()`, not yielding a `Series` subclasse if defined
    ([GH 13977](https://github.com/pandas-dev/pandas/issues/13977))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_numeric` when `errors='coerce'` and input contains non-hashable
    objects ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid `Timedelta` arithmetic and comparison may raise `ValueError`
    rather than `TypeError` ([GH 13624](https://github.com/pandas-dev/pandas/issues/13624))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid datetime parsing in `to_datetime` and `DatetimeIndex` may raise
    `TypeError` rather than `ValueError` ([GH 11169](https://github.com/pandas-dev/pandas/issues/11169),
    [GH 11287](https://github.com/pandas-dev/pandas/issues/11287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` created with tz-aware `Timestamp` and mismatched `tz` option
    incorrectly coerces timezone ([GH 13692](https://github.com/pandas-dev/pandas/issues/13692))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` with nanosecond frequency does not include timestamp
    specified with `end` ([GH 13672](https://github.com/pandas-dev/pandas/issues/13672))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` when setting a slice with a `np.timedelta64` ([GH 14155](https://github.com/pandas-dev/pandas/issues/14155))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` raises `OutOfBoundsDatetime` if `datetime` exceeds `datetime64[ns]`
    bounds, rather than coercing to `object` dtype ([GH 13663](https://github.com/pandas-dev/pandas/issues/13663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` may ignore specified `datetime64` or `timedelta64` passed as
    `dtype` ([GH 13981](https://github.com/pandas-dev/pandas/issues/13981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `RangeIndex` can be created without no arguments rather than raises `TypeError`
    ([GH 13793](https://github.com/pandas-dev/pandas/issues/13793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.value_counts()` raises `OutOfBoundsDatetime` if data exceeds `datetime64[ns]`
    bounds ([GH 13663](https://github.com/pandas-dev/pandas/issues/13663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` may raise `OutOfBoundsDatetime` if input `np.datetime64`
    has other unit than `ns` ([GH 9114](https://github.com/pandas-dev/pandas/issues/9114))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` creation with `np.datetime64` which has other unit than `ns`
    as `object` dtype results in incorrect values ([GH 13876](https://github.com/pandas-dev/pandas/issues/13876))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `resample` with timedelta data where data was casted to float ([GH 13119](https://github.com/pandas-dev/pandas/issues/13119)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.isnull()` `pd.notnull()` raise `TypeError` if input datetime-like
    has other unit than `ns` ([GH 13389](https://github.com/pandas-dev/pandas/issues/13389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.merge()` may raise `TypeError` if input datetime-like has other unit
    than `ns` ([GH 13389](https://github.com/pandas-dev/pandas/issues/13389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `HDFStore`/`read_hdf()` discarded `DatetimeIndex.name` if `tz` was set
    ([GH 13884](https://github.com/pandas-dev/pandas/issues/13884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.remove_unused_categories()` changes `.codes` dtype to platform
    int ([GH 13261](https://github.com/pandas-dev/pandas/issues/13261))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby` with `as_index=False` returns all NaN’s when grouping on multiple
    columns including a categorical one ([GH 13204](https://github.com/pandas-dev/pandas/issues/13204))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `df.groupby(...)[...]` where getitem with `Int64Index` raised an error
    ([GH 13731](https://github.com/pandas-dev/pandas/issues/13731))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the CSS classes assigned to `DataFrame.style` for index names. Previously
    they were assigned `"col_heading level<n> col<c>"` where `n` was the number of
    levels + 1\. Now they are assigned `"index_name level<n>"`, where `n` is the correct
    level for that MultiIndex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug where `pd.read_gbq()` could throw `ImportError: No module named discovery`
    as a result of a naming conflict with another python package called apiclient
    ([GH 13454](https://github.com/pandas-dev/pandas/issues/13454))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.union` returns an incorrect result with a named empty index ([GH
    13432](https://github.com/pandas-dev/pandas/issues/13432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs in `Index.difference` and `DataFrame.join` raise in Python3 when using
    mixed-integer indexes ([GH 13432](https://github.com/pandas-dev/pandas/issues/13432),
    [GH 12814](https://github.com/pandas-dev/pandas/issues/12814))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in subtract tz-aware `datetime.datetime` from tz-aware `datetime64` series
    ([GH 14088](https://github.com/pandas-dev/pandas/issues/14088))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_excel()` when DataFrame contains a MultiIndex which contains a label
    with a NaN value ([GH 13511](https://github.com/pandas-dev/pandas/issues/13511))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid frequency offset string like “D1”, “-2-3H” may not raise `ValueError`
    ([GH 13930](https://github.com/pandas-dev/pandas/issues/13930))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `concat` and `groupby` for hierarchical frames with `RangeIndex` levels
    ([GH 13542](https://github.com/pandas-dev/pandas/issues/13542)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.contains()` for Series containing only `NaN` values of `object`
    dtype ([GH 14171](https://github.com/pandas-dev/pandas/issues/14171))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `agg()` function on groupby dataframe changes dtype of `datetime64[ns]`
    column to `float64` ([GH 12821](https://github.com/pandas-dev/pandas/issues/12821))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in using NumPy ufunc with `PeriodIndex` to add or subtract integer raise
    `IncompatibleFrequency`. Note that using standard operator like `+` or `-` is
    recommended, because standard operators use more efficient path ([GH 13980](https://github.com/pandas-dev/pandas/issues/13980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in operations on `NaT` returning `float` instead of `datetime64[ns]` ([GH
    12941](https://github.com/pandas-dev/pandas/issues/12941))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` flexible arithmetic methods (like `.add()`) raises `ValueError`
    when `axis=None` ([GH 13894](https://github.com/pandas-dev/pandas/issues/13894))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.to_csv()` with `MultiIndex` columns in which a stray empty
    line was added ([GH 6618](https://github.com/pandas-dev/pandas/issues/6618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex`, `TimedeltaIndex` and `PeriodIndex.equals()` may return
    `True` when input isn’t `Index` but contains the same values ([GH 13107](https://github.com/pandas-dev/pandas/issues/13107))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against datetime with timezone may not work if it contains
    datetime near DST boundary ([GH 14146](https://github.com/pandas-dev/pandas/issues/14146))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.eval()` and `HDFStore` query truncating long float literals with
    python 2 ([GH 14241](https://github.com/pandas-dev/pandas/issues/14241))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` raises `KeyError` displaying incorrect column when column is
    not in the df and columns contains duplicate values ([GH 13822](https://github.com/pandas-dev/pandas/issues/13822))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` and `PeriodIndex` creating wrong dates when frequency has combined
    offset aliases ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_string()` when called with an integer `line_width` and `index=False`
    raises an UnboundLocalError exception because `idx` referenced before assignment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `eval()` where the `resolvers` argument would not accept a list ([GH
    14095](https://github.com/pandas-dev/pandas/issues/14095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs in `stack`, `get_dummies`, `make_axis_dummies` which don’t preserve categorical
    dtypes in (multi)indexes ([GH 13854](https://github.com/pandas-dev/pandas/issues/13854))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex` can now accept `list` and `array` which contains `pd.NaT` ([GH
    13430](https://github.com/pandas-dev/pandas/issues/13430))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `df.groupby` where `.median()` returns arbitrary values if grouped dataframe
    contains empty bins ([GH 13629](https://github.com/pandas-dev/pandas/issues/13629))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `Index.copy()` where `name` parameter was ignored ([GH 14302](https://github.com/pandas-dev/pandas/issues/14302))  ##
    Contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A total of 117 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Adrien Emery +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Alekseyev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Vig +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allen Riddell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol Agrawal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andy R. Terrel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anthonios Partheniou
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben Kandel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bob Baxley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brett Rosen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camilo Cota +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Grinolds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Warth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Hudon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher C. Aycock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Siladji +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Douglas McNeil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drewrey Lupton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eduardo Blancas Reyes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elliot Marsden +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evan Wright
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Felix Marczinowski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Francis T. O’Donovan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geraint Duck +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giacomo Ferroni +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grant Roch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gábor Lipták
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haleemur Ali +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hassan Shamim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iulius Curt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ivan Nazarov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeffrey Gerard +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenn Olsen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jim Crist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joe Jevnik
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Evans +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Freeman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Liekezer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John W. O’Brien
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Zwinck +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Johnny Gill +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jordan Erenrich +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Josh Howes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jozef Brandys +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ka Wo Chen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kamil Sindi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kerby Shedden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthieu Brucher +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximilian Roos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Scherer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike Graham +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mortada Mehyar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Muhammad Haseeb Tariq +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nate George +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neil Parley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Bonnotte
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OXPHOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pan Deng / Zora +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Mestemaker +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pauli Virtanen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pawel Kordek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piotr Jucha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ravi Kumar Nimmi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Gieseke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Kern +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roger Thomas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roy Keyes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russell Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sahil Dua +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sanjiv Lobo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sašo Stanovnik +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shawn Heide +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Kappel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Choi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stewart Henderson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudarshan Konge +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas A Caswell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Bird +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uwe Hoffmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WillAyd +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xiang Zhang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YG-Riku +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yadunandan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yaroslav Halchenko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuichiro Kaneko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adneu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: agraboso +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: babakkeyvani +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: c123w +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cmazzullo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conquistador1492 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cr3 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dsm054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: harshul1610 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iamsimha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jackieleng +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mpuels +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pijucha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: priyankjain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wcwagner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: yui-knk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zhangjinjie +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: znmean +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '颜发才（Yan Facai） +  ## New features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Function `merge_asof` for asof-style time-series joining'
  prefs: []
  type: TYPE_NORMAL
- en: A long-time requested feature has been added through the [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") function, to support asof style joining of time-series ([GH
    1870](https://github.com/pandas-dev/pandas/issues/1870), [GH 13695](https://github.com/pandas-dev/pandas/issues/13695),
    [GH 13709](https://github.com/pandas-dev/pandas/issues/13709), [GH 13902](https://github.com/pandas-dev/pandas/issues/13902)).
    Full documentation is [here](../user_guide/merging.html#merging-merge-asof).
  prefs: []
  type: TYPE_NORMAL
- en: The [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") performs an asof merge, which is similar to a left-join except
    that we match on nearest key rather than equal keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: We typically want to match exactly when possible, and use the most recent value
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: We can also match rows ONLY with prior data, and not an exact match.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: In a typical time-series example, we have `trades` and `quotes` and we want
    to `asof-join` them. This also illustrates using the `by` parameter to group data
    before merging.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: An asof merge joins on the `on`, typically a datetimelike field, which is ordered,
    and in this case we are using a grouper in the `by` field. This is like a left-outer
    join, except that forward filling happens automatically taking the most recent
    non-NaN value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns a merged DataFrame with the entries in the same order as the original
    left passed DataFrame (`trades` in this case), with the fields of the `quotes`
    merged.  ### Method `.rolling()` is now time-series aware'
  prefs: []
  type: TYPE_NORMAL
- en: '`.rolling()` objects are now time-series aware and can accept a time-series
    offset (or convertible) for the `window` argument ([GH 13327](https://github.com/pandas-dev/pandas/issues/13327),
    [GH 12995](https://github.com/pandas-dev/pandas/issues/12995)). See the full documentation
    [here](../user_guide/window.html#window-generic).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: This is a regular frequency index. Using an integer window parameter works to
    roll along the window frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Specifying an offset allows a more intuitive specification of the rolling frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Using a non-regular, but still monotonic index, rolling with an integer window
    does not impart any special calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Using the time-specification generates variable windows for this sparse data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, we now allow an optional `on` parameter to specify a column (rather
    than the default of the index) in a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]  ### Method `read_csv` has improved support for duplicate column names'
  prefs: []
  type: TYPE_NORMAL
- en: '[Duplicate column names](../user_guide/io.html#io-dupe-names) are now supported
    in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    whether they are in the file or passed in as the `names` parameter ([GH 7160](https://github.com/pandas-dev/pandas/issues/7160),
    [GH 9424](https://github.com/pandas-dev/pandas/issues/9424))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The first `a` column contained the same data as the second `a` column, when
    it should have contained the values `[0, 3]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]  ### Method `read_csv` supports parsing `Categorical` directly'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    function now supports parsing a `Categorical` column when specified as a dtype
    ([GH 10153](https://github.com/pandas-dev/pandas/issues/10153)). Depending on
    the structure of the data, this can result in a faster parse time and lower memory
    usage compared to converting to `Categorical` after parsing. See the io [docs
    here](../user_guide/io.html#io-categorical).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Individual columns can be parsed as a `Categorical` using a dict specification
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The resulting categories will always be parsed as strings (object dtype). If
    the categories are numeric they can be converted using the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function, or as appropriate, another converter such as [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]  ### Categorical concatenation'
  prefs: []
  type: TYPE_NORMAL
- en: A function `union_categoricals()` has been added for combining categoricals,
    see [Unioning Categoricals](../user_guide/categorical.html#categorical-union)
    ([GH 13361](https://github.com/pandas-dev/pandas/issues/13361), [GH 13763](https://github.com/pandas-dev/pandas/issues/13763),
    [GH 13846](https://github.com/pandas-dev/pandas/issues/13846), [GH 14173](https://github.com/pandas-dev/pandas/issues/14173))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`concat` and `append` now can concat `category` dtypes with different `categories`
    as `object` dtype ([GH 13524](https://github.com/pandas-dev/pandas/issues/13524))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]  ### Semi-month offsets'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has gained new frequency offsets, `SemiMonthEnd` (‘SM’) and `SemiMonthBegin`
    (‘SMS’). These provide date offsets anchored (by default) to the 15th and end
    of month, and 15th and 1st of month respectively. ([GH 1543](https://github.com/pandas-dev/pandas/issues/1543))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthEnd**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthBegin**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Using the anchoring suffix, you can also specify the day of month to use instead
    of the 15th.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]  ### New Index methods'
  prefs: []
  type: TYPE_NORMAL
- en: The following methods and options are added to `Index`, to be more consistent
    with the `Series` and `DataFrame` API.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index` now supports the `.where()` function for same shape indexing ([GH 13170](https://github.com/pandas-dev/pandas/issues/13170))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.dropna()` to exclude missing values ([GH 6194](https://github.com/pandas-dev/pandas/issues/6194))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: For `MultiIndex`, values are dropped if any level is missing by default. Specifying
    `how='all'` only drops values where all levels are missing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.str.extractall()` which returns a `DataFrame`, see the
    [docs here](../user_guide/text.html#text-extractall) ([GH 10008](https://github.com/pandas-dev/pandas/issues/10008),
    [GH 13156](https://github.com/pandas-dev/pandas/issues/13156))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '`Index.astype()` now accepts an optional boolean argument `copy`, which allows
    optional copying if the requirements on dtype are satisfied ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))  ###
    Google BigQuery enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq "pandas.read_gbq")
    method has gained the `dialect` argument to allow users to specify whether to
    use BigQuery’s legacy SQL or BigQuery’s standard SQL. See the [docs](https://pandas-gbq.readthedocs.io/en/latest/reading.html)
    for more details ([GH 13615](https://github.com/pandas-dev/pandas/issues/13615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The [`to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") method now allows the DataFrame column order to differ
    from the destination table schema ([GH 11359](https://github.com/pandas-dev/pandas/issues/11359)).  ###
    Fine-grained NumPy errstate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previous versions of pandas would permanently silence numpy’s ufunc error handling
    when `pandas` was imported. pandas did this in order to silence the warnings that
    would arise from using numpy ufuncs on missing data, which are usually represented
    as `NaN` s. Unfortunately, this silenced legitimate warnings arising in non-pandas
    code in the application. Starting with 0.19.0, pandas will use the `numpy.errstate`
    context manager to silence these warnings in a more fine-grained manner, only
    around where these operations are actually used in the pandas code base. ([GH
    13109](https://github.com/pandas-dev/pandas/issues/13109), [GH 13145](https://github.com/pandas-dev/pandas/issues/13145))
  prefs: []
  type: TYPE_NORMAL
- en: 'After upgrading pandas, you may see *new* `RuntimeWarnings` being issued from
    your code. These are likely legitimate, and the underlying cause likely existed
    in the code when using previous versions of pandas that simply silenced the warning.
    Use [numpy.errstate](https://numpy.org/doc/stable/reference/generated/numpy.errstate.html)
    around the source of the `RuntimeWarning` to control how these conditions are
    handled.  ### Method `get_dummies` now returns integer dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: The `pd.get_dummies` function now returns dummy-encoded columns as small integers,
    rather than floats ([GH 8725](https://github.com/pandas-dev/pandas/issues/8725)).
    This should provide an improved memory footprint.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]  ### Downcast values to smallest possible dtype in `to_numeric`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.to_numeric()` now accepts a `downcast` parameter, which will downcast the
    data if possible to smallest specified numerical dtype ([GH 13352](https://github.com/pandas-dev/pandas/issues/13352))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]  ### pandas development API'
  prefs: []
  type: TYPE_NORMAL
- en: As part of making pandas API more uniform and accessible in the future, we have
    created a standard sub-package of pandas, `pandas.api` to hold public API’s. We
    are starting by exposing type introspection functions in `pandas.api.types`. More
    sub-packages and officially sanctioned API’s will be published in future versions
    of pandas ([GH 13147](https://github.com/pandas-dev/pandas/issues/13147), [GH
    13634](https://github.com/pandas-dev/pandas/issues/13634))
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are now part of this API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling these functions from the internal module `pandas.core.common` will
    now show a `DeprecationWarning` ([GH 13990](https://github.com/pandas-dev/pandas/issues/13990))  ###
    Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp` can now accept positional and keyword parameters similar to `datetime.datetime()`
    ([GH 10758](https://github.com/pandas-dev/pandas/issues/10758), [GH 11630](https://github.com/pandas-dev/pandas/issues/11630))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.resample()` function now accepts a `on=` or `level=` parameter for resampling
    on a datetimelike column or `MultiIndex` level ([GH 13500](https://github.com/pandas-dev/pandas/issues/13500))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.get_credentials()` method of `GbqConnector` can now first try to fetch
    [the application default credentials](https://developers.google.com/identity/protocols/application-default-credentials).
    See the docs for more details ([GH 13577](https://github.com/pandas-dev/pandas/issues/13577)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.tz_localize()` method of `DatetimeIndex` and `Timestamp` has gained the
    `errors` keyword, so you can potentially coerce nonexistent timestamps to `NaT`.
    The default behavior remains to raising a `NonExistentTimeError` ([GH 13057](https://github.com/pandas-dev/pandas/issues/13057))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_hdf/read_hdf()` now accept path objects (e.g. `pathlib.Path`, `py.path.local`)
    for the file path ([GH 11773](https://github.com/pandas-dev/pandas/issues/11773))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_csv()` with `engine='python'` has gained support for the `decimal`
    ([GH 12933](https://github.com/pandas-dev/pandas/issues/12933)), `na_filter` ([GH
    13321](https://github.com/pandas-dev/pandas/issues/13321)) and the `memory_map`
    option ([GH 13381](https://github.com/pandas-dev/pandas/issues/13381)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent with the Python API, `pd.read_csv()` will now interpret `+inf` as
    positive infinity ([GH 13274](https://github.com/pandas-dev/pandas/issues/13274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_html()` has gained support for the `na_values`, `converters`, `keep_default_na`
    options ([GH 13461](https://github.com/pandas-dev/pandas/issues/13461))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.astype()` now accepts an optional boolean argument `copy`, effective
    when dtype is categorical ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained the `.asof()` method to return the last non-NaN values
    according to the selected subset ([GH 13358](https://github.com/pandas-dev/pandas/issues/13358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DataFrame` constructor will now respect key ordering if a list of `OrderedDict`
    objects are passed in ([GH 13304](https://github.com/pandas-dev/pandas/issues/13304))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_html()` has gained support for the `decimal` option ([GH 12907](https://github.com/pandas-dev/pandas/issues/12907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` has gained the properties `.is_monotonic`, `.is_monotonic_increasing`,
    `.is_monotonic_decreasing`, similar to `Index` ([GH 13336](https://github.com/pandas-dev/pandas/issues/13336))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` now allows a single value as the SQL type for all columns
    ([GH 11886](https://github.com/pandas-dev/pandas/issues/11886)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.append` now supports the `ignore_index` option ([GH 13677](https://github.com/pandas-dev/pandas/issues/13677))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` can now write variable labels to Stata dta
    files using a dictionary to make column names to labels ([GH 13535](https://github.com/pandas-dev/pandas/issues/13535),
    [GH 13536](https://github.com/pandas-dev/pandas/issues/13536))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` will automatically convert `datetime64[ns]`
    columns to Stata format `%tc`, rather than raising a `ValueError` ([GH 12259](https://github.com/pandas-dev/pandas/issues/12259))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_stata()` and `StataReader` raise with a more explicit error message when
    reading Stata files with repeated value labels when `convert_categoricals=True`
    ([GH 13923](https://github.com/pandas-dev/pandas/issues/13923))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now render sparsified MultiIndexes ([GH 11655](https://github.com/pandas-dev/pandas/issues/11655))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now show column level names (e.g. `DataFrame.columns.names`)
    ([GH 13775](https://github.com/pandas-dev/pandas/issues/13775))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained support to re-order the columns based on the values
    in a row using `df.sort_values(by=''...'', axis=1)` ([GH 10806](https://github.com/pandas-dev/pandas/issues/10806))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Added documentation to [I/O](../user_guide/io.html#io-dtypes) regarding the
    perils of reading in columns with mixed dtypes and how to handle it ([GH 13746](https://github.com/pandas-dev/pandas/issues/13746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now has a `border` argument to control the value in
    the opening `<table>` tag. The default is the value of the `html.border` option,
    which defaults to 1\. This also affects the notebook HTML repr, but since Jupyter’s
    CSS includes a border-width attribute, the visual effect is the same. ([GH 11563](https://github.com/pandas-dev/pandas/issues/11563)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise `ImportError` in the sql functions when `sqlalchemy` is not installed
    and a connection string is used ([GH 11920](https://github.com/pandas-dev/pandas/issues/11920)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with matplotlib 2.0\. Older versions of pandas should also work
    with matplotlib 2.0 ([GH 13333](https://github.com/pandas-dev/pandas/issues/13333))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp`, `Period`, `DatetimeIndex`, `PeriodIndex` and `.dt` accessor have
    gained a `.is_leap_year` property to check whether the date belongs to a leap
    year. ([GH 13727](https://github.com/pandas-dev/pandas/issues/13727))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`astype()` will now accept a dict of column name to data types mapping as the
    `dtype` argument. ([GH 12086](https://github.com/pandas-dev/pandas/issues/12086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_json` and `DataFrame.to_json` has gained support for reading and
    writing json lines with `lines` option see [Line delimited json](../user_guide/io.html#io-jsonl)
    ([GH 9180](https://github.com/pandas-dev/pandas/issues/9180))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now supports the true_values and false_values keyword arguments
    ([GH 13347](https://github.com/pandas-dev/pandas/issues/13347))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby()` will now accept a scalar and a single-element list for specifying
    `level` on a non-`MultiIndex` grouper. ([GH 13907](https://github.com/pandas-dev/pandas/issues/13907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-convertible dates in an excel date column will be returned without conversion
    and the column will be `object` dtype, rather than raising an exception ([GH 10001](https://github.com/pandas-dev/pandas/issues/10001)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Timedelta(None)` is now accepted and will return `NaT`, mirroring `pd.Timestamp`
    ([GH 13687](https://github.com/pandas-dev/pandas/issues/13687))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_stata()` can now handle some format 111 files, which are produced
    by SAS when generating Stata dta files ([GH 11526](https://github.com/pandas-dev/pandas/issues/11526))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` and `Index` now support `divmod` which will return a tuple of series
    or indices. This behaves like a standard binary operator with regards to broadcasting
    rules ([GH 14208](https://github.com/pandas-dev/pandas/issues/14208)).  ### Function
    `merge_asof` for asof-style time-series joining'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long-time requested feature has been added through the [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") function, to support asof style joining of time-series ([GH
    1870](https://github.com/pandas-dev/pandas/issues/1870), [GH 13695](https://github.com/pandas-dev/pandas/issues/13695),
    [GH 13709](https://github.com/pandas-dev/pandas/issues/13709), [GH 13902](https://github.com/pandas-dev/pandas/issues/13902)).
    Full documentation is [here](../user_guide/merging.html#merging-merge-asof).
  prefs: []
  type: TYPE_NORMAL
- en: The [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") performs an asof merge, which is similar to a left-join except
    that we match on nearest key rather than equal keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: We typically want to match exactly when possible, and use the most recent value
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: We can also match rows ONLY with prior data, and not an exact match.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: In a typical time-series example, we have `trades` and `quotes` and we want
    to `asof-join` them. This also illustrates using the `by` parameter to group data
    before merging.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: An asof merge joins on the `on`, typically a datetimelike field, which is ordered,
    and in this case we are using a grouper in the `by` field. This is like a left-outer
    join, except that forward filling happens automatically taking the most recent
    non-NaN value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: This returns a merged DataFrame with the entries in the same order as the original
    left passed DataFrame (`trades` in this case), with the fields of the `quotes`
    merged.
  prefs: []
  type: TYPE_NORMAL
- en: '### Method `.rolling()` is now time-series aware'
  prefs: []
  type: TYPE_NORMAL
- en: '`.rolling()` objects are now time-series aware and can accept a time-series
    offset (or convertible) for the `window` argument ([GH 13327](https://github.com/pandas-dev/pandas/issues/13327),
    [GH 12995](https://github.com/pandas-dev/pandas/issues/12995)). See the full documentation
    [here](../user_guide/window.html#window-generic).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: This is a regular frequency index. Using an integer window parameter works to
    roll along the window frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Specifying an offset allows a more intuitive specification of the rolling frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Using a non-regular, but still monotonic index, rolling with an integer window
    does not impart any special calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Using the time-specification generates variable windows for this sparse data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, we now allow an optional `on` parameter to specify a column (rather
    than the default of the index) in a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '### Method `read_csv` has improved support for duplicate column names'
  prefs: []
  type: TYPE_NORMAL
- en: '[Duplicate column names](../user_guide/io.html#io-dupe-names) are now supported
    in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    whether they are in the file or passed in as the `names` parameter ([GH 7160](https://github.com/pandas-dev/pandas/issues/7160),
    [GH 9424](https://github.com/pandas-dev/pandas/issues/9424))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: The first `a` column contained the same data as the second `a` column, when
    it should have contained the values `[0, 3]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '### Method `read_csv` supports parsing `Categorical` directly'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    function now supports parsing a `Categorical` column when specified as a dtype
    ([GH 10153](https://github.com/pandas-dev/pandas/issues/10153)). Depending on
    the structure of the data, this can result in a faster parse time and lower memory
    usage compared to converting to `Categorical` after parsing. See the io [docs
    here](../user_guide/io.html#io-categorical).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Individual columns can be parsed as a `Categorical` using a dict specification
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The resulting categories will always be parsed as strings (object dtype). If
    the categories are numeric they can be converted using the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function, or as appropriate, another converter such as [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '### Categorical concatenation'
  prefs: []
  type: TYPE_NORMAL
- en: A function `union_categoricals()` has been added for combining categoricals,
    see [Unioning Categoricals](../user_guide/categorical.html#categorical-union)
    ([GH 13361](https://github.com/pandas-dev/pandas/issues/13361), [GH 13763](https://github.com/pandas-dev/pandas/issues/13763),
    [GH 13846](https://github.com/pandas-dev/pandas/issues/13846), [GH 14173](https://github.com/pandas-dev/pandas/issues/14173))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`concat` and `append` now can concat `category` dtypes with different `categories`
    as `object` dtype ([GH 13524](https://github.com/pandas-dev/pandas/issues/13524))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '### Semi-month offsets'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has gained new frequency offsets, `SemiMonthEnd` (‘SM’) and `SemiMonthBegin`
    (‘SMS’). These provide date offsets anchored (by default) to the 15th and end
    of month, and 15th and 1st of month respectively. ([GH 1543](https://github.com/pandas-dev/pandas/issues/1543))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthEnd**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '**SemiMonthBegin**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Using the anchoring suffix, you can also specify the day of month to use instead
    of the 15th.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '### New Index methods'
  prefs: []
  type: TYPE_NORMAL
- en: The following methods and options are added to `Index`, to be more consistent
    with the `Series` and `DataFrame` API.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index` now supports the `.where()` function for same shape indexing ([GH 13170](https://github.com/pandas-dev/pandas/issues/13170))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.dropna()` to exclude missing values ([GH 6194](https://github.com/pandas-dev/pandas/issues/6194))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: For `MultiIndex`, values are dropped if any level is missing by default. Specifying
    `how='all'` only drops values where all levels are missing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '`Index` now supports `.str.extractall()` which returns a `DataFrame`, see the
    [docs here](../user_guide/text.html#text-extractall) ([GH 10008](https://github.com/pandas-dev/pandas/issues/10008),
    [GH 13156](https://github.com/pandas-dev/pandas/issues/13156))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '`Index.astype()` now accepts an optional boolean argument `copy`, which allows
    optional copying if the requirements on dtype are satisfied ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs: []
  type: TYPE_NORMAL
- en: '### Google BigQuery enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`read_gbq()`](../reference/api/pandas.read_gbq.html#pandas.read_gbq "pandas.read_gbq")
    method has gained the `dialect` argument to allow users to specify whether to
    use BigQuery’s legacy SQL or BigQuery’s standard SQL. See the [docs](https://pandas-gbq.readthedocs.io/en/latest/reading.html)
    for more details ([GH 13615](https://github.com/pandas-dev/pandas/issues/13615)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`to_gbq()`](../reference/api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq") method now allows the DataFrame column order to differ
    from the destination table schema ([GH 11359](https://github.com/pandas-dev/pandas/issues/11359)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Fine-grained NumPy errstate'
  prefs: []
  type: TYPE_NORMAL
- en: Previous versions of pandas would permanently silence numpy’s ufunc error handling
    when `pandas` was imported. pandas did this in order to silence the warnings that
    would arise from using numpy ufuncs on missing data, which are usually represented
    as `NaN` s. Unfortunately, this silenced legitimate warnings arising in non-pandas
    code in the application. Starting with 0.19.0, pandas will use the `numpy.errstate`
    context manager to silence these warnings in a more fine-grained manner, only
    around where these operations are actually used in the pandas code base. ([GH
    13109](https://github.com/pandas-dev/pandas/issues/13109), [GH 13145](https://github.com/pandas-dev/pandas/issues/13145))
  prefs: []
  type: TYPE_NORMAL
- en: After upgrading pandas, you may see *new* `RuntimeWarnings` being issued from
    your code. These are likely legitimate, and the underlying cause likely existed
    in the code when using previous versions of pandas that simply silenced the warning.
    Use [numpy.errstate](https://numpy.org/doc/stable/reference/generated/numpy.errstate.html)
    around the source of the `RuntimeWarning` to control how these conditions are
    handled.
  prefs: []
  type: TYPE_NORMAL
- en: '### Method `get_dummies` now returns integer dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: The `pd.get_dummies` function now returns dummy-encoded columns as small integers,
    rather than floats ([GH 8725](https://github.com/pandas-dev/pandas/issues/8725)).
    This should provide an improved memory footprint.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '### Downcast values to smallest possible dtype in `to_numeric`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.to_numeric()` now accepts a `downcast` parameter, which will downcast the
    data if possible to smallest specified numerical dtype ([GH 13352](https://github.com/pandas-dev/pandas/issues/13352))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '### pandas development API'
  prefs: []
  type: TYPE_NORMAL
- en: As part of making pandas API more uniform and accessible in the future, we have
    created a standard sub-package of pandas, `pandas.api` to hold public API’s. We
    are starting by exposing type introspection functions in `pandas.api.types`. More
    sub-packages and officially sanctioned API’s will be published in future versions
    of pandas ([GH 13147](https://github.com/pandas-dev/pandas/issues/13147), [GH
    13634](https://github.com/pandas-dev/pandas/issues/13634))
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are now part of this API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Calling these functions from the internal module `pandas.core.common` will now
    show a `DeprecationWarning` ([GH 13990](https://github.com/pandas-dev/pandas/issues/13990))
  prefs: []
  type: TYPE_NORMAL
- en: '### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp` can now accept positional and keyword parameters similar to `datetime.datetime()`
    ([GH 10758](https://github.com/pandas-dev/pandas/issues/10758), [GH 11630](https://github.com/pandas-dev/pandas/issues/11630))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.resample()` function now accepts a `on=` or `level=` parameter for resampling
    on a datetimelike column or `MultiIndex` level ([GH 13500](https://github.com/pandas-dev/pandas/issues/13500))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.get_credentials()` method of `GbqConnector` can now first try to fetch
    [the application default credentials](https://developers.google.com/identity/protocols/application-default-credentials).
    See the docs for more details ([GH 13577](https://github.com/pandas-dev/pandas/issues/13577)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.tz_localize()` method of `DatetimeIndex` and `Timestamp` has gained the
    `errors` keyword, so you can potentially coerce nonexistent timestamps to `NaT`.
    The default behavior remains to raising a `NonExistentTimeError` ([GH 13057](https://github.com/pandas-dev/pandas/issues/13057))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_hdf/read_hdf()` now accept path objects (e.g. `pathlib.Path`, `py.path.local`)
    for the file path ([GH 11773](https://github.com/pandas-dev/pandas/issues/11773))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_csv()` with `engine='python'` has gained support for the `decimal`
    ([GH 12933](https://github.com/pandas-dev/pandas/issues/12933)), `na_filter` ([GH
    13321](https://github.com/pandas-dev/pandas/issues/13321)) and the `memory_map`
    option ([GH 13381](https://github.com/pandas-dev/pandas/issues/13381)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent with the Python API, `pd.read_csv()` will now interpret `+inf` as
    positive infinity ([GH 13274](https://github.com/pandas-dev/pandas/issues/13274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_html()` has gained support for the `na_values`, `converters`, `keep_default_na`
    options ([GH 13461](https://github.com/pandas-dev/pandas/issues/13461))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.astype()` now accepts an optional boolean argument `copy`, effective
    when dtype is categorical ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained the `.asof()` method to return the last non-NaN values
    according to the selected subset ([GH 13358](https://github.com/pandas-dev/pandas/issues/13358))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DataFrame` constructor will now respect key ordering if a list of `OrderedDict`
    objects are passed in ([GH 13304](https://github.com/pandas-dev/pandas/issues/13304))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_html()` has gained support for the `decimal` option ([GH 12907](https://github.com/pandas-dev/pandas/issues/12907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` has gained the properties `.is_monotonic`, `.is_monotonic_increasing`,
    `.is_monotonic_decreasing`, similar to `Index` ([GH 13336](https://github.com/pandas-dev/pandas/issues/13336))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` now allows a single value as the SQL type for all columns
    ([GH 11886](https://github.com/pandas-dev/pandas/issues/11886)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.append` now supports the `ignore_index` option ([GH 13677](https://github.com/pandas-dev/pandas/issues/13677))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` can now write variable labels to Stata dta
    files using a dictionary to make column names to labels ([GH 13535](https://github.com/pandas-dev/pandas/issues/13535),
    [GH 13536](https://github.com/pandas-dev/pandas/issues/13536))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.to_stata()` and `StataWriter` will automatically convert `datetime64[ns]`
    columns to Stata format `%tc`, rather than raising a `ValueError` ([GH 12259](https://github.com/pandas-dev/pandas/issues/12259))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_stata()` and `StataReader` raise with a more explicit error message when
    reading Stata files with repeated value labels when `convert_categoricals=True`
    ([GH 13923](https://github.com/pandas-dev/pandas/issues/13923))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now render sparsified MultiIndexes ([GH 11655](https://github.com/pandas-dev/pandas/issues/11655))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.style` will now show column level names (e.g. `DataFrame.columns.names`)
    ([GH 13775](https://github.com/pandas-dev/pandas/issues/13775))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame` has gained support to re-order the columns based on the values
    in a row using `df.sort_values(by=''...'', axis=1)` ([GH 10806](https://github.com/pandas-dev/pandas/issues/10806))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Added documentation to [I/O](../user_guide/io.html#io-dtypes) regarding the
    perils of reading in columns with mixed dtypes and how to handle it ([GH 13746](https://github.com/pandas-dev/pandas/issues/13746))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") now has a `border` argument to control the value in
    the opening `<table>` tag. The default is the value of the `html.border` option,
    which defaults to 1\. This also affects the notebook HTML repr, but since Jupyter’s
    CSS includes a border-width attribute, the visual effect is the same. ([GH 11563](https://github.com/pandas-dev/pandas/issues/11563)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise `ImportError` in the sql functions when `sqlalchemy` is not installed
    and a connection string is used ([GH 11920](https://github.com/pandas-dev/pandas/issues/11920)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility with matplotlib 2.0\. Older versions of pandas should also work
    with matplotlib 2.0 ([GH 13333](https://github.com/pandas-dev/pandas/issues/13333))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp`, `Period`, `DatetimeIndex`, `PeriodIndex` and `.dt` accessor have
    gained a `.is_leap_year` property to check whether the date belongs to a leap
    year. ([GH 13727](https://github.com/pandas-dev/pandas/issues/13727))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`astype()` will now accept a dict of column name to data types mapping as the
    `dtype` argument. ([GH 12086](https://github.com/pandas-dev/pandas/issues/12086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.read_json` and `DataFrame.to_json` has gained support for reading and
    writing json lines with `lines` option see [Line delimited json](../user_guide/io.html#io-jsonl)
    ([GH 9180](https://github.com/pandas-dev/pandas/issues/9180))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") now supports the true_values and false_values keyword arguments
    ([GH 13347](https://github.com/pandas-dev/pandas/issues/13347))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby()` will now accept a scalar and a single-element list for specifying
    `level` on a non-`MultiIndex` grouper. ([GH 13907](https://github.com/pandas-dev/pandas/issues/13907))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-convertible dates in an excel date column will be returned without conversion
    and the column will be `object` dtype, rather than raising an exception ([GH 10001](https://github.com/pandas-dev/pandas/issues/10001)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Timedelta(None)` is now accepted and will return `NaT`, mirroring `pd.Timestamp`
    ([GH 13687](https://github.com/pandas-dev/pandas/issues/13687))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_stata()` can now handle some format 111 files, which are produced
    by SAS when generating Stata dta files ([GH 11526](https://github.com/pandas-dev/pandas/issues/11526))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` and `Index` now support `divmod` which will return a tuple of series
    or indices. This behaves like a standard binary operator with regards to broadcasting
    rules ([GH 14208](https://github.com/pandas-dev/pandas/issues/14208)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## API changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types in the output, mimicking NumPy
    `.tolist()` behavior ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '### `Series` operators for different indexes'
  prefs: []
  type: TYPE_NORMAL
- en: Following `Series` operators have been changed to make all operators consistent,
    including `DataFrame` ([GH 1134](https://github.com/pandas-dev/pandas/issues/1134),
    [GH 4581](https://github.com/pandas-dev/pandas/issues/4581), [GH 13538](https://github.com/pandas-dev/pandas/issues/13538))
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` comparison operators now raise `ValueError` when `index` are different.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` logical operators align both `index` of left and right hand side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Until 0.18.1, comparing `Series` with the same length, would succeed even if
    the `.index` are different (the result ignores `.index`). As of 0.19.0, this will
    raises `ValueError` to be more strict. This section also describes how to keep
    previous behavior or align different indexes, using the flexible comparison methods
    like `.eq`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, `Series` and `DataFrame` operators behave as below:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arithmetic operators align both `index` (no changes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Comparison operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Comparison operators raise `ValueError` when `.index` are different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` compared values ignoring the `.index` as long as both had the same
    length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the same result as previous versions (compare values based on locations
    ignoring `.index`), compare both `.values`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to compare `Series` aligning its `.index`, see flexible comparison
    methods section below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Logical operators align both `.index` of left and right hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`), only left hand side `index` was kept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` logical operators fill a `NaN` result with `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve the same result as previous versions (compare values based on only
    left hand side index), you can use `reindex_like`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Flexible comparison methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Series` flexible comparison methods like `eq`, `ne`, `le`, `lt`, `ge` and
    `gt` now align both `index`. Use these operators if you want to compare two `Series`
    which has the different `index`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, this worked the same as comparison operators (see above).  ###
    `Series` type promotion on assignment'
  prefs: []
  type: TYPE_NORMAL
- en: A `Series` will now correctly promote its dtype for assignment with incompat
    values to the current dtype ([GH 13234](https://github.com/pandas-dev/pandas/issues/13234))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]  ### Function `.to_datetime()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously if `.to_datetime()` encountered mixed integers/floats and strings,
    but no datetimes with `errors='coerce'` it would convert all to `NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: This will now convert integers/floats with the default unit of `ns`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Bug fixes related to `.to_datetime()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing integers or floats, and no `unit` and
    `errors='coerce'` ([GH 13180](https://github.com/pandas-dev/pandas/issues/13180)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing invalid data types (e.g. bool); will
    now respect the `errors` keyword ([GH 13176](https://github.com/pandas-dev/pandas/issues/13176))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` which overflowed on `int8`, and `int16` dtypes ([GH
    13451](https://github.com/pandas-dev/pandas/issues/13451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` raise `AttributeError` with `NaN` and the other string
    is not valid when `errors='ignore'` ([GH 12424](https://github.com/pandas-dev/pandas/issues/12424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `pd.to_datetime()` did not cast floats correctly when `unit` was specified,
    resulting in truncated datetime ([GH 13834](https://github.com/pandas-dev/pandas/issues/13834))  ###
    Merging changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging will now preserve the dtype of the join keys ([GH 8596](https://github.com/pandas-dev/pandas/issues/8596))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: We are able to preserve the join keys
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Of course if you have missing values that are introduced, then the resulting
    dtype will be upcast, which is unchanged from previous.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]  ### Method `.describe()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Percentile identifiers in the index of a `.describe()` output will now be rounded
    to the least precision that keeps them distinct ([GH 13104](https://github.com/pandas-dev/pandas/issues/13104))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: The percentiles were rounded to at most one decimal place, which could raise
    `ValueError` for a data frame if the percentiles were duplicated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing duplicated `percentiles` will now raise a `ValueError`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `.describe()` on a DataFrame with a mixed-dtype column index, which
    would previously raise a `TypeError` ([GH 13288](https://github.com/pandas-dev/pandas/issues/13288))  ###
    `Period` changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PeriodIndex` now has `period` dtype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`PeriodIndex` now has its own `period` dtype. The `period` dtype is a pandas
    extension dtype like `category` or the [timezone aware dtype](../user_guide/timeseries.html#timeseries-timezone-series)
    (`datetime64[ns, tz]`) ([GH 13941](https://github.com/pandas-dev/pandas/issues/13941)).
    As a consequence of this change, `PeriodIndex` no longer has an integer dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '#### `Period(''NaT'')` now returns `pd.NaT`'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, `Period` has its own `Period('NaT')` representation different from
    `pd.NaT`. Now `Period('NaT')` has been changed to return `pd.NaT`. ([GH 12759](https://github.com/pandas-dev/pandas/issues/12759),
    [GH 13582](https://github.com/pandas-dev/pandas/issues/13582))
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: These result in `pd.NaT` without providing `freq` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: To be compatible with `Period` addition and subtraction, `pd.NaT` now supports
    addition and subtraction with `int`. Previously it raised `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '`PeriodIndex.values` now returns array of `Period` object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.values` is changed to return an array of `Period` objects, rather than an
    array of integers ([GH 13988](https://github.com/pandas-dev/pandas/issues/13988)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]  ### Index `+` / `-` no longer used for set operations'
  prefs: []
  type: TYPE_NORMAL
- en: Addition and subtraction of the base Index type and of DatetimeIndex (not the
    numeric index types) previously performed set operations (set union and difference).
    This behavior was already deprecated since 0.15.0 (in favor using the specific
    `.union()` and `.difference()` methods), and is now disabled. When possible, `+`
    and `-` are now used for element-wise operations, for example for concatenating
    strings or subtracting datetimes ([GH 8227](https://github.com/pandas-dev/pandas/issues/8227),
    [GH 14127](https://github.com/pandas-dev/pandas/issues/14127)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the same operation will now perform element-wise addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Note that numeric Index objects already performed element-wise operations. For
    example, the behavior of adding two integer Indexes is unchanged. The base `Index`
    is now made consistent with this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Further, because of this change, it is now possible to subtract two DatetimeIndex
    objects resulting in a TimedeltaIndex:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]  ### `Index.difference` and `.symmetric_difference` changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.difference` and `Index.symmetric_difference` will now, more consistently,
    treat `NaN` values as any other values. ([GH 13514](https://github.com/pandas-dev/pandas/issues/13514))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]  ### `Index.unique` consistently returns `Index`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.unique()` now returns unique values as an `Index` of the appropriate
    `dtype`. ([GH 13395](https://github.com/pandas-dev/pandas/issues/13395)). Previously,
    most `Index` classes returned `np.ndarray`, and `DatetimeIndex`, `TimedeltaIndex`
    and `PeriodIndex` returned `Index` to keep metadata like timezone.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]  ### `MultiIndex` constructors, `groupby` and `set_index` preserve
    categorical dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiIndex.from_arrays` and `MultiIndex.from_product` will now preserve categorical
    dtype in `MultiIndex` levels ([GH 13743](https://github.com/pandas-dev/pandas/issues/13743),
    [GH 13854](https://github.com/pandas-dev/pandas/issues/13854)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the single level is now a `CategoricalIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: An analogous change has been made to `MultiIndex.from_product`. As a consequence,
    `groupby` and `set_index` also preserve categorical dtypes in indexes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]  ### Function `read_csv` will progressively enumerate chunks'
  prefs: []
  type: TYPE_NORMAL
- en: When [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    is called with `chunksize=n` and without specifying an index, each chunk used
    to have an independently generated index from `0` to `n-1`. They are now given
    instead a progressive index, starting from `0` for the first chunk, from `n` for
    the second, and so on, so that, when concatenated, they are identical to the result
    of calling [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") without the `chunksize=` argument ([GH 12185](https://github.com/pandas-dev/pandas/issues/12185)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]  ### Sparse changes'
  prefs: []
  type: TYPE_NORMAL
- en: These changes allow pandas to handle sparse data with more dtypes, and for work
    to make a smoother experience with data handling.
  prefs: []
  type: TYPE_NORMAL
- en: Types `int64` and `bool` support enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structures now gained enhanced support of `int64` and `bool` `dtype`
    ([GH 667](https://github.com/pandas-dev/pandas/issues/667), [GH 13849](https://github.com/pandas-dev/pandas/issues/13849)).
  prefs: []
  type: TYPE_NORMAL
- en: Previously, sparse data were `float64` dtype by default, even if all inputs
    were of `int` or `bool` dtype. You had to specify `dtype` explicitly to create
    sparse data with `int64` dtype. Also, `fill_value` had to be specified explicitly
    because the default was `np.nan` which doesn’t appear in `int64` or `bool` data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: As of v0.19.0, sparse data keeps the input dtype, and uses more appropriate
    `fill_value` defaults (`0` for `int64` dtype, `False` for `bool` dtype).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: See the [docs](../user_guide/sparse.html#sparse-dtype) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Operators now preserve dtypes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structure now can preserve `dtype` after arithmetic ops ([GH 13848](https://github.com/pandas-dev/pandas/issues/13848))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Sparse data structure now support `astype` to convert internal `dtype` ([GH
    13900](https://github.com/pandas-dev/pandas/issues/13900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '`astype` fails if data contains values which cannot be converted to specified
    `dtype`. Note that the limitation is applied to `fill_value` which default is
    `np.nan`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Other sparse fixes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Subclassed `SparseDataFrame` and `SparseSeries` now preserve class types when
    slicing or transposing. ([GH 13787](https://github.com/pandas-dev/pandas/issues/13787))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray` with `bool` dtype now supports logical (bool) operators ([GH
    14000](https://github.com/pandas-dev/pandas/issues/14000))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing may raise `IndexError`
    ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing result may have normal
    `Index` ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` in which `axis=None` did not default to `axis=0` ([GH
    13048](https://github.com/pandas-dev/pandas/issues/13048))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` creation with `object` dtype may
    raise `TypeError` ([GH 11633](https://github.com/pandas-dev/pandas/issues/11633))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` doesn’t respect passed `SparseArray` or `SparseSeries`
    ‘s dtype and `fill_value` ([GH 13866](https://github.com/pandas-dev/pandas/issues/13866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` and `SparseSeries` don’t apply ufunc to `fill_value` ([GH
    13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.abs` incorrectly keeps negative `fill_value` ([GH 13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in single row slicing on multi-type `SparseDataFrame` s, types were previously
    forced to float ([GH 13917](https://github.com/pandas-dev/pandas/issues/13917))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` slicing changes integer dtype to float ([GH 8292](https://github.com/pandas-dev/pandas/issues/8292))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme` comparison ops may raise `TypeError` ([GH 13001](https://github.com/pandas-dev/pandas/issues/13001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme.isnull` raises `ValueError` ([GH 8276](https://github.com/pandas-dev/pandas/issues/8276))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` representation with `bool` dtype may raise `IndexError`
    ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` of `bool` or `int64` dtype may display
    its values like `float64` dtype ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in sparse indexing using `SparseArray` with `bool` dtype may return incorrect
    result ([GH 13985](https://github.com/pandas-dev/pandas/issues/13985))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` created from `SparseSeries` may lose `dtype` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in `SparseSeries` comparison with dense returns normal `Series` rather
    than `SparseSeries` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))  ###
    Indexer dtype changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This change only affects 64 bit python running on Windows, and only affects
    relatively advanced indexing operations
  prefs: []
  type: TYPE_NORMAL
- en: Methods such as `Index.get_indexer` that return an indexer array, coerce that
    array to a “platform int”, so that it can be directly used in 3rd party library
    operations like `numpy.take`. Previously, a platform int was defined as `np.int_`
    which corresponds to a C integer, but the correct type, and what is being used
    now, is `np.intp`, which corresponds to the C integer size that can hold a pointer
    ([GH 3033](https://github.com/pandas-dev/pandas/issues/3033), [GH 13972](https://github.com/pandas-dev/pandas/issues/13972)).
  prefs: []
  type: TYPE_NORMAL
- en: These types are the same on many platform, but for 64 bit python on Windows,
    `np.int_` is 32 bits, and `np.intp` is 64 bits. Changing this behavior improves
    performance for many operations on that platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]  ### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp.to_pydatetime` will issue a `UserWarning` when `warn=True`, and
    the instance has a non-zero number of nanoseconds, previously this would print
    a message to stdout ([GH 14101](https://github.com/pandas-dev/pandas/issues/14101)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.unique()` with datetime and timezone now returns return array of `Timestamp`
    with timezone ([GH 13565](https://github.com/pandas-dev/pandas/issues/13565)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel.to_sparse()` will raise a `NotImplementedError` exception when called
    ([GH 13778](https://github.com/pandas-dev/pandas/issues/13778)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.reshape()` will raise a `NotImplementedError` exception when called
    ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filter()` enforces mutual exclusion of the keyword arguments ([GH 12399](https://github.com/pandas-dev/pandas/issues/12399)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval`’s upcasting rules for `float32` types have been updated to be more consistent
    with NumPy’s rules. New behavior will not upcast to `float64` if you multiply
    a pandas `float32` object by a scalar float64 ([GH 12388](https://github.com/pandas-dev/pandas/issues/12388)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `UnsupportedFunctionCall` error is now raised if NumPy ufuncs like `np.mean`
    are called on groupby or resample objects ([GH 12811](https://github.com/pandas-dev/pandas/issues/12811)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__setitem__` will no longer apply a callable rhs as a function instead of
    storing it. Call `where` directly to get the previous behavior ([GH 13299](https://github.com/pandas-dev/pandas/issues/13299)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls to `.sample()` will respect the random seed set via `numpy.random.seed(n)`
    ([GH 13161](https://github.com/pandas-dev/pandas/issues/13161))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Styler.apply` is now more strict about the outputs your function must return.
    For `axis=0` or `axis=1`, the output shape must be identical. For `axis=None`,
    the output must be a DataFrame with identical columns and index labels ([GH 13222](https://github.com/pandas-dev/pandas/issues/13222)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.astype(int)` will now raise `ValueError` if `Float64Index` contains
    `NaN` values ([GH 13149](https://github.com/pandas-dev/pandas/issues/13149))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimedeltaIndex.astype(int)` and `DatetimeIndex.astype(int)` will now return
    `Int64Index` instead of `np.array` ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing `Period` with multiple frequencies to normal `Index` now returns `Index`
    with `object` dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.fillna` with `Period` has different freq now coerces to `object`
    dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceted boxplots from `DataFrame.boxplot(by=col)` now return a `Series` when
    `return_type` is not None. Previously these returned an `OrderedDict`. Note that
    when `return_type=None`, the default, these still return a 2-D NumPy array ([GH
    12216](https://github.com/pandas-dev/pandas/issues/12216), [GH 7096](https://github.com/pandas-dev/pandas/issues/7096)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_hdf` will now raise a `ValueError` instead of `KeyError`, if a mode
    other than `r`, `r+` and `a` is supplied. ([GH 13623](https://github.com/pandas-dev/pandas/issues/13623))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()`, `pd.read_table()`, and `pd.read_hdf()` raise the builtin `FileNotFoundError`
    exception for Python 3.x when called on a nonexistent file; this is back-ported
    as `IOError` in Python 2.x ([GH 14086](https://github.com/pandas-dev/pandas/issues/14086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More informative exceptions are passed through the csv parser. The exception
    type would now be the original exception type instead of `CParserError` ([GH 13652](https://github.com/pandas-dev/pandas/issues/13652)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()` in the C engine will now issue a `ParserWarning` or raise a
    `ValueError` when `sep` encoded is more than one character long ([GH 14065](https://github.com/pandas-dev/pandas/issues/14065))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.values` will now return `float64` with a `DataFrame` of mixed `int64`
    and `uint64` dtypes, conforming to `np.find_common_type` ([GH 10364](https://github.com/pandas-dev/pandas/issues/10364),
    [GH 13917](https://github.com/pandas-dev/pandas/issues/13917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.groupby.groups` will now return a dictionary of `Index` objects, rather than
    a dictionary of `np.ndarray` or `lists` ([GH 14293](https://github.com/pandas-dev/pandas/issues/14293))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Series.tolist()` will now return Python types in the output, mimicking NumPy
    `.tolist()` behavior ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '### `Series` operators for different indexes'
  prefs: []
  type: TYPE_NORMAL
- en: Following `Series` operators have been changed to make all operators consistent,
    including `DataFrame` ([GH 1134](https://github.com/pandas-dev/pandas/issues/1134),
    [GH 4581](https://github.com/pandas-dev/pandas/issues/4581), [GH 13538](https://github.com/pandas-dev/pandas/issues/13538))
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` comparison operators now raise `ValueError` when `index` are different.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` logical operators align both `index` of left and right hand side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Until 0.18.1, comparing `Series` with the same length, would succeed even if
    the `.index` are different (the result ignores `.index`). As of 0.19.0, this will
    raises `ValueError` to be more strict. This section also describes how to keep
    previous behavior or align different indexes, using the flexible comparison methods
    like `.eq`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, `Series` and `DataFrame` operators behave as below:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arithmetic operators align both `index` (no changes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Comparison operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Comparison operators raise `ValueError` when `.index` are different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` compared values ignoring the `.index` as long as both had the same
    length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the same result as previous versions (compare values based on locations
    ignoring `.index`), compare both `.values`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to compare `Series` aligning its `.index`, see flexible comparison
    methods section below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Logical operators align both `.index` of left and right hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`), only left hand side `index` was kept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` logical operators fill a `NaN` result with `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve the same result as previous versions (compare values based on only
    left hand side index), you can use `reindex_like`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Flexible comparison methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Series` flexible comparison methods like `eq`, `ne`, `le`, `lt`, `ge` and
    `gt` now align both `index`. Use these operators if you want to compare two `Series`
    which has the different `index`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Previously, this worked the same as comparison operators (see above).
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Arithmetic operators align both `index` (no changes).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Comparison operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Comparison operators raise `ValueError` when `.index` are different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` compared values ignoring the `.index` as long as both had the same
    length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the same result as previous versions (compare values based on locations
    ignoring `.index`), compare both `.values`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to compare `Series` aligning its `.index`, see flexible comparison
    methods section below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Logical operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Logical operators align both `.index` of left and right hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior** (`Series`), only left hand side `index` was kept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior** (`Series`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`Series` logical operators fill a `NaN` result with `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve the same result as previous versions (compare values based on only
    left hand side index), you can use `reindex_like`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior** (`DataFrame`, no change):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Flexible comparison methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Series` flexible comparison methods like `eq`, `ne`, `le`, `lt`, `ge` and
    `gt` now align both `index`. Use these operators if you want to compare two `Series`
    which has the different `index`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Previously, this worked the same as comparison operators (see above).
  prefs: []
  type: TYPE_NORMAL
- en: '### `Series` type promotion on assignment'
  prefs: []
  type: TYPE_NORMAL
- en: A `Series` will now correctly promote its dtype for assignment with incompat
    values to the current dtype ([GH 13234](https://github.com/pandas-dev/pandas/issues/13234))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '### Function `.to_datetime()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Previously if `.to_datetime()` encountered mixed integers/floats and strings,
    but no datetimes with `errors='coerce'` it would convert all to `NaT`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '**Current behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: This will now convert integers/floats with the default unit of `ns`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'Bug fixes related to `.to_datetime()`:'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing integers or floats, and no `unit` and
    `errors='coerce'` ([GH 13180](https://github.com/pandas-dev/pandas/issues/13180)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` when passing invalid data types (e.g. bool); will
    now respect the `errors` keyword ([GH 13176](https://github.com/pandas-dev/pandas/issues/13176))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` which overflowed on `int8`, and `int16` dtypes ([GH
    13451](https://github.com/pandas-dev/pandas/issues/13451))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` raise `AttributeError` with `NaN` and the other string
    is not valid when `errors='ignore'` ([GH 12424](https://github.com/pandas-dev/pandas/issues/12424))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_datetime()` did not cast floats correctly when `unit` was specified,
    resulting in truncated datetime ([GH 13834](https://github.com/pandas-dev/pandas/issues/13834))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Merging changes'
  prefs: []
  type: TYPE_NORMAL
- en: Merging will now preserve the dtype of the join keys ([GH 8596](https://github.com/pandas-dev/pandas/issues/8596))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: We are able to preserve the join keys
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Of course if you have missing values that are introduced, then the resulting
    dtype will be upcast, which is unchanged from previous.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '### Method `.describe()` changes'
  prefs: []
  type: TYPE_NORMAL
- en: Percentile identifiers in the index of a `.describe()` output will now be rounded
    to the least precision that keeps them distinct ([GH 13104](https://github.com/pandas-dev/pandas/issues/13104))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: The percentiles were rounded to at most one decimal place, which could raise
    `ValueError` for a data frame if the percentiles were duplicated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing duplicated `percentiles` will now raise a `ValueError`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.describe()` on a DataFrame with a mixed-dtype column index, which would
    previously raise a `TypeError` ([GH 13288](https://github.com/pandas-dev/pandas/issues/13288))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### `Period` changes'
  prefs: []
  type: TYPE_NORMAL
- en: The `PeriodIndex` now has `period` dtype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`PeriodIndex` now has its own `period` dtype. The `period` dtype is a pandas
    extension dtype like `category` or the [timezone aware dtype](../user_guide/timeseries.html#timeseries-timezone-series)
    (`datetime64[ns, tz]`) ([GH 13941](https://github.com/pandas-dev/pandas/issues/13941)).
    As a consequence of this change, `PeriodIndex` no longer has an integer dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '#### `Period(''NaT'')` now returns `pd.NaT`'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, `Period` has its own `Period('NaT')` representation different from
    `pd.NaT`. Now `Period('NaT')` has been changed to return `pd.NaT`. ([GH 12759](https://github.com/pandas-dev/pandas/issues/12759),
    [GH 13582](https://github.com/pandas-dev/pandas/issues/13582))
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: These result in `pd.NaT` without providing `freq` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: To be compatible with `Period` addition and subtraction, `pd.NaT` now supports
    addition and subtraction with `int`. Previously it raised `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '`PeriodIndex.values` now returns array of `Period` object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.values` is changed to return an array of `Period` objects, rather than an
    array of integers ([GH 13988](https://github.com/pandas-dev/pandas/issues/13988)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: The `PeriodIndex` now has `period` dtype
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`PeriodIndex` now has its own `period` dtype. The `period` dtype is a pandas
    extension dtype like `category` or the [timezone aware dtype](../user_guide/timeseries.html#timeseries-timezone-series)
    (`datetime64[ns, tz]`) ([GH 13941](https://github.com/pandas-dev/pandas/issues/13941)).
    As a consequence of this change, `PeriodIndex` no longer has an integer dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '#### `Period(''NaT'')` now returns `pd.NaT`'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, `Period` has its own `Period('NaT')` representation different from
    `pd.NaT`. Now `Period('NaT')` has been changed to return `pd.NaT`. ([GH 12759](https://github.com/pandas-dev/pandas/issues/12759),
    [GH 13582](https://github.com/pandas-dev/pandas/issues/13582))
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: These result in `pd.NaT` without providing `freq` option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: To be compatible with `Period` addition and subtraction, `pd.NaT` now supports
    addition and subtraction with `int`. Previously it raised `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '`PeriodIndex.values` now returns array of `Period` object'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`.values` is changed to return an array of `Period` objects, rather than an
    array of integers ([GH 13988](https://github.com/pandas-dev/pandas/issues/13988)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '### Index `+` / `-` no longer used for set operations'
  prefs: []
  type: TYPE_NORMAL
- en: Addition and subtraction of the base Index type and of DatetimeIndex (not the
    numeric index types) previously performed set operations (set union and difference).
    This behavior was already deprecated since 0.15.0 (in favor using the specific
    `.union()` and `.difference()` methods), and is now disabled. When possible, `+`
    and `-` are now used for element-wise operations, for example for concatenating
    strings or subtracting datetimes ([GH 8227](https://github.com/pandas-dev/pandas/issues/8227),
    [GH 14127](https://github.com/pandas-dev/pandas/issues/14127)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the same operation will now perform element-wise addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Note that numeric Index objects already performed element-wise operations. For
    example, the behavior of adding two integer Indexes is unchanged. The base `Index`
    is now made consistent with this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'Further, because of this change, it is now possible to subtract two DatetimeIndex
    objects resulting in a TimedeltaIndex:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '### `Index.difference` and `.symmetric_difference` changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.difference` and `Index.symmetric_difference` will now, more consistently,
    treat `NaN` values as any other values. ([GH 13514](https://github.com/pandas-dev/pandas/issues/13514))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '### `Index.unique` consistently returns `Index`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.unique()` now returns unique values as an `Index` of the appropriate
    `dtype`. ([GH 13395](https://github.com/pandas-dev/pandas/issues/13395)). Previously,
    most `Index` classes returned `np.ndarray`, and `DatetimeIndex`, `TimedeltaIndex`
    and `PeriodIndex` returned `Index` to keep metadata like timezone.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '### `MultiIndex` constructors, `groupby` and `set_index` preserve categorical
    dtypes'
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiIndex.from_arrays` and `MultiIndex.from_product` will now preserve categorical
    dtype in `MultiIndex` levels ([GH 13743](https://github.com/pandas-dev/pandas/issues/13743),
    [GH 13854](https://github.com/pandas-dev/pandas/issues/13854)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**: the single level is now a `CategoricalIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: An analogous change has been made to `MultiIndex.from_product`. As a consequence,
    `groupby` and `set_index` also preserve categorical dtypes in indexes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '### Function `read_csv` will progressively enumerate chunks'
  prefs: []
  type: TYPE_NORMAL
- en: When [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    is called with `chunksize=n` and without specifying an index, each chunk used
    to have an independently generated index from `0` to `n-1`. They are now given
    instead a progressive index, starting from `0` for the first chunk, from `n` for
    the second, and so on, so that, when concatenated, they are identical to the result
    of calling [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") without the `chunksize=` argument ([GH 12185](https://github.com/pandas-dev/pandas/issues/12185)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '### Sparse changes'
  prefs: []
  type: TYPE_NORMAL
- en: These changes allow pandas to handle sparse data with more dtypes, and for work
    to make a smoother experience with data handling.
  prefs: []
  type: TYPE_NORMAL
- en: Types `int64` and `bool` support enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structures now gained enhanced support of `int64` and `bool` `dtype`
    ([GH 667](https://github.com/pandas-dev/pandas/issues/667), [GH 13849](https://github.com/pandas-dev/pandas/issues/13849)).
  prefs: []
  type: TYPE_NORMAL
- en: Previously, sparse data were `float64` dtype by default, even if all inputs
    were of `int` or `bool` dtype. You had to specify `dtype` explicitly to create
    sparse data with `int64` dtype. Also, `fill_value` had to be specified explicitly
    because the default was `np.nan` which doesn’t appear in `int64` or `bool` data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: As of v0.19.0, sparse data keeps the input dtype, and uses more appropriate
    `fill_value` defaults (`0` for `int64` dtype, `False` for `bool` dtype).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: See the [docs](../user_guide/sparse.html#sparse-dtype) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Operators now preserve dtypes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structure now can preserve `dtype` after arithmetic ops ([GH 13848](https://github.com/pandas-dev/pandas/issues/13848))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: Sparse data structure now support `astype` to convert internal `dtype` ([GH
    13900](https://github.com/pandas-dev/pandas/issues/13900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '`astype` fails if data contains values which cannot be converted to specified
    `dtype`. Note that the limitation is applied to `fill_value` which default is
    `np.nan`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: Other sparse fixes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Subclassed `SparseDataFrame` and `SparseSeries` now preserve class types when
    slicing or transposing. ([GH 13787](https://github.com/pandas-dev/pandas/issues/13787))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray` with `bool` dtype now supports logical (bool) operators ([GH
    14000](https://github.com/pandas-dev/pandas/issues/14000))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing may raise `IndexError`
    ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing result may have normal
    `Index` ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` in which `axis=None` did not default to `axis=0` ([GH
    13048](https://github.com/pandas-dev/pandas/issues/13048))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` creation with `object` dtype may
    raise `TypeError` ([GH 11633](https://github.com/pandas-dev/pandas/issues/11633))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` doesn’t respect passed `SparseArray` or `SparseSeries`
    ‘s dtype and `fill_value` ([GH 13866](https://github.com/pandas-dev/pandas/issues/13866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` and `SparseSeries` don’t apply ufunc to `fill_value` ([GH
    13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.abs` incorrectly keeps negative `fill_value` ([GH 13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in single row slicing on multi-type `SparseDataFrame` s, types were previously
    forced to float ([GH 13917](https://github.com/pandas-dev/pandas/issues/13917))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` slicing changes integer dtype to float ([GH 8292](https://github.com/pandas-dev/pandas/issues/8292))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme` comparison ops may raise `TypeError` ([GH 13001](https://github.com/pandas-dev/pandas/issues/13001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme.isnull` raises `ValueError` ([GH 8276](https://github.com/pandas-dev/pandas/issues/8276))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` representation with `bool` dtype may raise `IndexError`
    ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` of `bool` or `int64` dtype may display
    its values like `float64` dtype ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in sparse indexing using `SparseArray` with `bool` dtype may return incorrect
    result ([GH 13985](https://github.com/pandas-dev/pandas/issues/13985))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` created from `SparseSeries` may lose `dtype` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` comparison with dense returns normal `Series` rather than
    `SparseSeries` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types `int64` and `bool` support enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structures now gained enhanced support of `int64` and `bool` `dtype`
    ([GH 667](https://github.com/pandas-dev/pandas/issues/667), [GH 13849](https://github.com/pandas-dev/pandas/issues/13849)).
  prefs: []
  type: TYPE_NORMAL
- en: Previously, sparse data were `float64` dtype by default, even if all inputs
    were of `int` or `bool` dtype. You had to specify `dtype` explicitly to create
    sparse data with `int64` dtype. Also, `fill_value` had to be specified explicitly
    because the default was `np.nan` which doesn’t appear in `int64` or `bool` data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: As of v0.19.0, sparse data keeps the input dtype, and uses more appropriate
    `fill_value` defaults (`0` for `int64` dtype, `False` for `bool` dtype).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: See the [docs](../user_guide/sparse.html#sparse-dtype) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Operators now preserve dtypes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sparse data structure now can preserve `dtype` after arithmetic ops ([GH 13848](https://github.com/pandas-dev/pandas/issues/13848))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: Sparse data structure now support `astype` to convert internal `dtype` ([GH
    13900](https://github.com/pandas-dev/pandas/issues/13900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '`astype` fails if data contains values which cannot be converted to specified
    `dtype`. Note that the limitation is applied to `fill_value` which default is
    `np.nan`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: Other sparse fixes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Subclassed `SparseDataFrame` and `SparseSeries` now preserve class types when
    slicing or transposing. ([GH 13787](https://github.com/pandas-dev/pandas/issues/13787))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray` with `bool` dtype now supports logical (bool) operators ([GH
    14000](https://github.com/pandas-dev/pandas/issues/14000))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing may raise `IndexError`
    ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` with `MultiIndex` `[]` indexing result may have normal
    `Index` ([GH 13144](https://github.com/pandas-dev/pandas/issues/13144))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` in which `axis=None` did not default to `axis=0` ([GH
    13048](https://github.com/pandas-dev/pandas/issues/13048))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` creation with `object` dtype may
    raise `TypeError` ([GH 11633](https://github.com/pandas-dev/pandas/issues/11633))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame` doesn’t respect passed `SparseArray` or `SparseSeries`
    ‘s dtype and `fill_value` ([GH 13866](https://github.com/pandas-dev/pandas/issues/13866))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` and `SparseSeries` don’t apply ufunc to `fill_value` ([GH
    13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.abs` incorrectly keeps negative `fill_value` ([GH 13853](https://github.com/pandas-dev/pandas/issues/13853))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in single row slicing on multi-type `SparseDataFrame` s, types were previously
    forced to float ([GH 13917](https://github.com/pandas-dev/pandas/issues/13917))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` slicing changes integer dtype to float ([GH 8292](https://github.com/pandas-dev/pandas/issues/8292))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme` comparison ops may raise `TypeError` ([GH 13001](https://github.com/pandas-dev/pandas/issues/13001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFarme.isnull` raises `ValueError` ([GH 8276](https://github.com/pandas-dev/pandas/issues/8276))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` representation with `bool` dtype may raise `IndexError`
    ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` and `SparseDataFrame` of `bool` or `int64` dtype may display
    its values like `float64` dtype ([GH 13110](https://github.com/pandas-dev/pandas/issues/13110))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in sparse indexing using `SparseArray` with `bool` dtype may return incorrect
    result ([GH 13985](https://github.com/pandas-dev/pandas/issues/13985))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseArray` created from `SparseSeries` may lose `dtype` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` comparison with dense returns normal `Series` rather than
    `SparseSeries` ([GH 13999](https://github.com/pandas-dev/pandas/issues/13999))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Indexer dtype changes'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This change only affects 64 bit python running on Windows, and only affects
    relatively advanced indexing operations
  prefs: []
  type: TYPE_NORMAL
- en: Methods such as `Index.get_indexer` that return an indexer array, coerce that
    array to a “platform int”, so that it can be directly used in 3rd party library
    operations like `numpy.take`. Previously, a platform int was defined as `np.int_`
    which corresponds to a C integer, but the correct type, and what is being used
    now, is `np.intp`, which corresponds to the C integer size that can hold a pointer
    ([GH 3033](https://github.com/pandas-dev/pandas/issues/3033), [GH 13972](https://github.com/pandas-dev/pandas/issues/13972)).
  prefs: []
  type: TYPE_NORMAL
- en: These types are the same on many platform, but for 64 bit python on Windows,
    `np.int_` is 32 bits, and `np.intp` is 64 bits. Changing this behavior improves
    performance for many operations on that platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '**New behavior**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp.to_pydatetime` will issue a `UserWarning` when `warn=True`, and
    the instance has a non-zero number of nanoseconds, previously this would print
    a message to stdout ([GH 14101](https://github.com/pandas-dev/pandas/issues/14101)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.unique()` with datetime and timezone now returns return array of `Timestamp`
    with timezone ([GH 13565](https://github.com/pandas-dev/pandas/issues/13565)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel.to_sparse()` will raise a `NotImplementedError` exception when called
    ([GH 13778](https://github.com/pandas-dev/pandas/issues/13778)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.reshape()` will raise a `NotImplementedError` exception when called
    ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.filter()` enforces mutual exclusion of the keyword arguments ([GH 12399](https://github.com/pandas-dev/pandas/issues/12399)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval`’s upcasting rules for `float32` types have been updated to be more consistent
    with NumPy’s rules. New behavior will not upcast to `float64` if you multiply
    a pandas `float32` object by a scalar float64 ([GH 12388](https://github.com/pandas-dev/pandas/issues/12388)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `UnsupportedFunctionCall` error is now raised if NumPy ufuncs like `np.mean`
    are called on groupby or resample objects ([GH 12811](https://github.com/pandas-dev/pandas/issues/12811)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__setitem__` will no longer apply a callable rhs as a function instead of
    storing it. Call `where` directly to get the previous behavior ([GH 13299](https://github.com/pandas-dev/pandas/issues/13299)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls to `.sample()` will respect the random seed set via `numpy.random.seed(n)`
    ([GH 13161](https://github.com/pandas-dev/pandas/issues/13161))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Styler.apply` is now more strict about the outputs your function must return.
    For `axis=0` or `axis=1`, the output shape must be identical. For `axis=None`,
    the output must be a DataFrame with identical columns and index labels ([GH 13222](https://github.com/pandas-dev/pandas/issues/13222)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float64Index.astype(int)` will now raise `ValueError` if `Float64Index` contains
    `NaN` values ([GH 13149](https://github.com/pandas-dev/pandas/issues/13149))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimedeltaIndex.astype(int)` and `DatetimeIndex.astype(int)` will now return
    `Int64Index` instead of `np.array` ([GH 13209](https://github.com/pandas-dev/pandas/issues/13209))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing `Period` with multiple frequencies to normal `Index` now returns `Index`
    with `object` dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.fillna` with `Period` has different freq now coerces to `object`
    dtype ([GH 13664](https://github.com/pandas-dev/pandas/issues/13664))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceted boxplots from `DataFrame.boxplot(by=col)` now return a `Series` when
    `return_type` is not None. Previously these returned an `OrderedDict`. Note that
    when `return_type=None`, the default, these still return a 2-D NumPy array ([GH
    12216](https://github.com/pandas-dev/pandas/issues/12216), [GH 7096](https://github.com/pandas-dev/pandas/issues/7096)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_hdf` will now raise a `ValueError` instead of `KeyError`, if a mode
    other than `r`, `r+` and `a` is supplied. ([GH 13623](https://github.com/pandas-dev/pandas/issues/13623))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()`, `pd.read_table()`, and `pd.read_hdf()` raise the builtin `FileNotFoundError`
    exception for Python 3.x when called on a nonexistent file; this is back-ported
    as `IOError` in Python 2.x ([GH 14086](https://github.com/pandas-dev/pandas/issues/14086))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More informative exceptions are passed through the csv parser. The exception
    type would now be the original exception type instead of `CParserError` ([GH 13652](https://github.com/pandas-dev/pandas/issues/13652)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv()` in the C engine will now issue a `ParserWarning` or raise a
    `ValueError` when `sep` encoded is more than one character long ([GH 14065](https://github.com/pandas-dev/pandas/issues/14065))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.values` will now return `float64` with a `DataFrame` of mixed `int64`
    and `uint64` dtypes, conforming to `np.find_common_type` ([GH 10364](https://github.com/pandas-dev/pandas/issues/10364),
    [GH 13917](https://github.com/pandas-dev/pandas/issues/13917))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.groupby.groups` will now return a dictionary of `Index` objects, rather than
    a dictionary of `np.ndarray` or `lists` ([GH 14293](https://github.com/pandas-dev/pandas/issues/14293))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Deprecations'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.reshape` and `Categorical.reshape` have been deprecated and will be
    removed in a subsequent release ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882),
    [GH 12882](https://github.com/pandas-dev/pandas/issues/12882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex.to_datetime` has been deprecated in favor of `PeriodIndex.to_timestamp`
    ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp.to_datetime` has been deprecated in favor of `Timestamp.to_pydatetime`
    ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.to_datetime` and `DatetimeIndex.to_datetime` have been deprecated in
    favor of `pd.to_datetime` ([GH 8254](https://github.com/pandas-dev/pandas/issues/8254))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.core.datetools` module has been deprecated and will be removed in a
    subsequent release ([GH 14094](https://github.com/pandas-dev/pandas/issues/14094))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseList` has been deprecated and will be removed in a future version ([GH
    13784](https://github.com/pandas-dev/pandas/issues/13784))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_html()` and `DataFrame.to_latex()` have dropped the `colSpace`
    parameter in favor of `col_space` ([GH 13857](https://github.com/pandas-dev/pandas/issues/13857))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` has deprecated the `flavor` parameter, as it is superfluous
    when SQLAlchemy is not installed ([GH 13611](https://github.com/pandas-dev/pandas/issues/13611))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated `read_csv` keywords:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compact_ints` and `use_unsigned` have been deprecated and will be removed
    in a future version ([GH 13320](https://github.com/pandas-dev/pandas/issues/13320))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buffer_lines` has been deprecated and will be removed in a future version
    ([GH 13360](https://github.com/pandas-dev/pandas/issues/13360))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`as_recarray` has been deprecated and will be removed in a future version ([GH
    13373](https://github.com/pandas-dev/pandas/issues/13373))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_footer` has been deprecated in favor of `skipfooter` and will be removed
    in a future version ([GH 13349](https://github.com/pandas-dev/pandas/issues/13349))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: top-level `pd.ordered_merge()` has been renamed to `pd.merge_ordered()` and
    the original name will be removed in a future version ([GH 13358](https://github.com/pandas-dev/pandas/issues/13358))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Timestamp.offset` property (and named arg in the constructor), has been deprecated
    in favor of `freq` ([GH 12160](https://github.com/pandas-dev/pandas/issues/12160))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.tseries.util.pivot_annual` is deprecated. Use `pivot_table` as alternative,
    an example is [here](../user_guide/cookbook.html#cookbook-pivot) ([GH 736](https://github.com/pandas-dev/pandas/issues/736))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.tseries.util.isleapyear` has been deprecated and will be removed in a subsequent
    release. Datetime-likes now have a `.is_leap_year` property ([GH 13727](https://github.com/pandas-dev/pandas/issues/13727))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel4D` and `PanelND` constructors are deprecated and will be removed in
    a future version. The recommended way to represent these types of n-dimensional
    data are with the [xarray package](http://xarray.pydata.org/en/stable/). pandas
    provides a `to_xarray()` method to automate this conversion ([GH 13564](https://github.com/pandas-dev/pandas/issues/13564)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.tseries.frequencies.get_standard_freq` is deprecated. Use `pandas.tseries.frequencies.to_offset(freq).rule_code`
    instead ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.tseries.frequencies.to_offset`’s `freqstr` keyword is deprecated in
    favor of `freq` ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical.from_array` has been deprecated and will be removed in a future
    version ([GH 13854](https://github.com/pandas-dev/pandas/issues/13854))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Removal of prior version deprecations/changes'
  prefs: []
  type: TYPE_NORMAL
- en: The `SparsePanel` class has been removed ([GH 13778](https://github.com/pandas-dev/pandas/issues/13778))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.sandbox` module has been removed in favor of the external library `pandas-qt`
    ([GH 13670](https://github.com/pandas-dev/pandas/issues/13670))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pandas.io.data` and `pandas.io.wb` modules are removed in favor of the
    [pandas-datareader package](https://github.com/pydata/pandas-datareader) ([GH
    13724](https://github.com/pandas-dev/pandas/issues/13724)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pandas.tools.rplot` module has been removed in favor of the [seaborn package](https://github.com/mwaskom/seaborn)
    ([GH 13855](https://github.com/pandas-dev/pandas/issues/13855))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_csv()` has dropped the `engine` parameter, as was deprecated
    in 0.17.1 ([GH 11274](https://github.com/pandas-dev/pandas/issues/11274), [GH
    13419](https://github.com/pandas-dev/pandas/issues/13419))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_dict()` has dropped the `outtype` parameter in favor of `orient`
    ([GH 13627](https://github.com/pandas-dev/pandas/issues/13627), [GH 8486](https://github.com/pandas-dev/pandas/issues/8486))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Categorical` has dropped setting of the `ordered` attribute directly in
    favor of the `set_ordered` method ([GH 13671](https://github.com/pandas-dev/pandas/issues/13671))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Categorical` has dropped the `levels` attribute in favor of `categories`
    ([GH 8376](https://github.com/pandas-dev/pandas/issues/8376))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.to_sql()` has dropped the `mysql` option for the `flavor` parameter
    ([GH 13611](https://github.com/pandas-dev/pandas/issues/13611))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Panel.shift()` has dropped the `lags` parameter in favor of `periods` ([GH
    14041](https://github.com/pandas-dev/pandas/issues/14041))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.Index` has dropped the `diff` method in favor of `difference` ([GH 13669](https://github.com/pandas-dev/pandas/issues/13669))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.DataFrame` has dropped the `to_wide` method in favor of `to_panel` ([GH
    14039](https://github.com/pandas-dev/pandas/issues/14039))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.to_csv` has dropped the `nanRep` parameter in favor of `na_rep` ([GH
    13804](https://github.com/pandas-dev/pandas/issues/13804))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series.xs`, `DataFrame.xs`, `Panel.xs`, `Panel.major_xs`, and `Panel.minor_xs`
    have dropped the `copy` parameter ([GH 13781](https://github.com/pandas-dev/pandas/issues/13781))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str.split` has dropped the `return_type` parameter in favor of `expand` ([GH
    13701](https://github.com/pandas-dev/pandas/issues/13701))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of the legacy time rules (offset aliases), deprecated since 0.17.0 (this
    has been alias since 0.8.0) ([GH 13590](https://github.com/pandas-dev/pandas/issues/13590),
    [GH 13868](https://github.com/pandas-dev/pandas/issues/13868)). Now legacy time
    rules raises `ValueError`. For the list of currently supported offsets, see [here](../user_guide/timeseries.html#timeseries-offset-aliases).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value for the `return_type` parameter for `DataFrame.plot.box` and
    `DataFrame.boxplot` changed from `None` to `"axes"`. These methods will now return
    a matplotlib axes by default instead of a dictionary of artists. See [here](../user_guide/visualization.html#visualization-box-return)
    ([GH 6581](https://github.com/pandas-dev/pandas/issues/6581)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tquery` and `uquery` functions in the `pandas.io.sql` module are removed
    ([GH 5950](https://github.com/pandas-dev/pandas/issues/5950)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Performance improvements'
  prefs: []
  type: TYPE_NORMAL
- en: Improved performance of sparse `IntIndex.intersect` ([GH 13082](https://github.com/pandas-dev/pandas/issues/13082))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of sparse arithmetic with `BlockIndex` when the number
    of blocks are large, though recommended to use `IntIndex` in such cases ([GH 13082](https://github.com/pandas-dev/pandas/issues/13082))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `DataFrame.quantile()` as it now operates per-block
    ([GH 11623](https://github.com/pandas-dev/pandas/issues/11623))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of float64 hash table operations, fixing some very slow
    indexing and groupby operations in python 3 ([GH 13166](https://github.com/pandas-dev/pandas/issues/13166),
    [GH 13334](https://github.com/pandas-dev/pandas/issues/13334))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `DataFrameGroupBy.transform` ([GH 12737](https://github.com/pandas-dev/pandas/issues/12737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `Index` and `Series` `.duplicated` ([GH 10235](https://github.com/pandas-dev/pandas/issues/10235))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `Index.difference` ([GH 12044](https://github.com/pandas-dev/pandas/issues/12044))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `RangeIndex.is_monotonic_increasing` and `is_monotonic_decreasing`
    ([GH 13749](https://github.com/pandas-dev/pandas/issues/13749))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of datetime string parsing in `DatetimeIndex` ([GH 13692](https://github.com/pandas-dev/pandas/issues/13692))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of hashing `Period` ([GH 12817](https://github.com/pandas-dev/pandas/issues/12817))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `factorize` of datetime with timezone ([GH 13750](https://github.com/pandas-dev/pandas/issues/13750))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of by lazily creating indexing hashtables on larger Indexes
    ([GH 14266](https://github.com/pandas-dev/pandas/issues/14266))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `groupby.groups` ([GH 14293](https://github.com/pandas-dev/pandas/issues/14293))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unnecessary materializing of a MultiIndex when introspecting for memory usage
    ([GH 14308](https://github.com/pandas-dev/pandas/issues/14308))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Bug fixes'
  prefs: []
  type: TYPE_NORMAL
- en: Bug in `groupby().shift()`, which could cause a segfault or corruption in rare
    circumstances when grouping by columns with missing values ([GH 13813](https://github.com/pandas-dev/pandas/issues/13813))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby().cumsum()` calculating `cumprod` when `axis=1`. ([GH 13994](https://github.com/pandas-dev/pandas/issues/13994))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_timedelta()` in which the `errors` parameter was not being respected
    ([GH 13613](https://github.com/pandas-dev/pandas/issues/13613))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `io.json.json_normalize()`, where non-ascii keys raised an exception
    ([GH 13213](https://github.com/pandas-dev/pandas/issues/13213))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when passing a not-default-indexed `Series` as `xerr` or `yerr` in `.plot()`
    ([GH 11858](https://github.com/pandas-dev/pandas/issues/11858))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in area plot draws legend incorrectly if subplot is enabled or legend is
    moved after plot (matplotlib 1.5.0 is required to draw area plot legend properly)
    ([GH 9161](https://github.com/pandas-dev/pandas/issues/9161), [GH 13544](https://github.com/pandas-dev/pandas/issues/13544))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` assignment with an object-dtyped `Index` where the resultant
    column is mutable to the original object. ([GH 13522](https://github.com/pandas-dev/pandas/issues/13522))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in matplotlib `AutoDataFormatter`; this restores the second scaled formatting
    and re-adds micro-second scaled formatting ([GH 13131](https://github.com/pandas-dev/pandas/issues/13131))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in selection from a `HDFStore` with a fixed format and `start` and/or `stop`
    specified will now return the selected range ([GH 8287](https://github.com/pandas-dev/pandas/issues/8287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.from_codes()` where an unhelpful error was raised when an
    invalid `ordered` parameter was passed in ([GH 14058](https://github.com/pandas-dev/pandas/issues/14058))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` construction from a tuple of integers on windows not returning
    default dtype (int64) ([GH 13646](https://github.com/pandas-dev/pandas/issues/13646))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `TimedeltaIndex` addition with a Datetime-like object where addition
    overflow was not being caught ([GH 14068](https://github.com/pandas-dev/pandas/issues/14068))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.groupby(..).resample(..)` when the same object is called multiple times
    ([GH 13174](https://github.com/pandas-dev/pandas/issues/13174))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_records()` when index name is a unicode string ([GH 13172](https://github.com/pandas-dev/pandas/issues/13172))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in calling `.memory_usage()` on object which doesn’t implement ([GH 12924](https://github.com/pandas-dev/pandas/issues/12924))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression in `Series.quantile` with nans (also shows up in `.median()` and
    `.describe()` ); furthermore now names the `Series` with the quantile ([GH 13098](https://github.com/pandas-dev/pandas/issues/13098),
    [GH 13146](https://github.com/pandas-dev/pandas/issues/13146))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SeriesGroupBy.transform` with datetime values and missing groups ([GH
    13191](https://github.com/pandas-dev/pandas/issues/13191))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug where empty `Series` were incorrectly coerced in datetime-like numeric operations
    ([GH 13844](https://github.com/pandas-dev/pandas/issues/13844))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical` constructor when passed a `Categorical` containing datetimes
    with timezones ([GH 14190](https://github.com/pandas-dev/pandas/issues/14190))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.extractall()` with `str` index raises `ValueError` ([GH 13156](https://github.com/pandas-dev/pandas/issues/13156))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.extractall()` with single group and quantifier ([GH 13382](https://github.com/pandas-dev/pandas/issues/13382))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` and `Period` subtraction raises `ValueError` or `AttributeError`
    rather than `TypeError` ([GH 13078](https://github.com/pandas-dev/pandas/issues/13078))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` and `Series` created with `NaN` and `NaT` mixed data may not
    have `datetime64` dtype ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` and `Series` may ignore `np.datetime64('nat')` and `np.timdelta64('nat')`
    to infer dtype ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex` and `Period` subtraction raises `AttributeError` ([GH 13071](https://github.com/pandas-dev/pandas/issues/13071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex` construction returning a `float64` index in some circumstances
    ([GH 13067](https://github.com/pandas-dev/pandas/issues/13067))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` with a `PeriodIndex` not changing its `freq` appropriately
    when empty ([GH 13067](https://github.com/pandas-dev/pandas/issues/13067))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` with a `PeriodIndex` not retaining its type or name with
    an empty `DataFrame` appropriately when empty ([GH 13212](https://github.com/pandas-dev/pandas/issues/13212))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).apply(..)` when the passed function returns scalar values
    per group ([GH 13468](https://github.com/pandas-dev/pandas/issues/13468)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).resample(..)` where passing some keywords would raise an
    exception ([GH 13235](https://github.com/pandas-dev/pandas/issues/13235))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.tz_convert` on a tz-aware `DateTimeIndex` that relied on index being
    sorted for correct results ([GH 13306](https://github.com/pandas-dev/pandas/issues/13306))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.tz_localize` with `dateutil.tz.tzlocal` may return incorrect result
    ([GH 13583](https://github.com/pandas-dev/pandas/issues/13583))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeTZDtype` dtype with `dateutil.tz.tzlocal` cannot be regarded
    as valid dtype ([GH 13583](https://github.com/pandas-dev/pandas/issues/13583))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_hdf()` where attempting to load an HDF file with a single dataset,
    that had one or more categorical columns, failed unless the key argument was set
    to the name of the dataset. ([GH 13231](https://github.com/pandas-dev/pandas/issues/13231))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling()` that allowed a negative integer window in construction of
    the `Rolling()` object, but would later fail on aggregation ([GH 13383](https://github.com/pandas-dev/pandas/issues/13383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` indexing with tuple-valued data and a numeric index ([GH 13509](https://github.com/pandas-dev/pandas/issues/13509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in printing `pd.DataFrame` where unusual elements with the `object` dtype
    were causing segfaults ([GH 13717](https://github.com/pandas-dev/pandas/issues/13717))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in ranking `Series` which could result in segfaults ([GH 13445](https://github.com/pandas-dev/pandas/issues/13445))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in various index types, which did not propagate the name of passed index
    ([GH 12309](https://github.com/pandas-dev/pandas/issues/12309))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex`, which did not honour the `copy=True` ([GH 13205](https://github.com/pandas-dev/pandas/issues/13205))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex.is_normalized` returns incorrectly for normalized date_range
    in case of local timezones ([GH 13459](https://github.com/pandas-dev/pandas/issues/13459))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.concat` and `.append` may coerces `datetime64` and `timedelta` to
    `object` dtype containing python built-in `datetime` or `timedelta` rather than
    `Timestamp` or `Timedelta` ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `PeriodIndex.append` may raises `AttributeError` when the result is `object`
    dtype ([GH 13221](https://github.com/pandas-dev/pandas/issues/13221))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `CategoricalIndex.append` may accept normal `list` ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.concat` and `.append` with the same timezone get reset to UTC ([GH
    7795](https://github.com/pandas-dev/pandas/issues/7795))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` and `DataFrame` `.append` raises `AmbiguousTimeError` if data
    contains datetime near DST boundary ([GH 13626](https://github.com/pandas-dev/pandas/issues/13626))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.to_csv()` in which float values were being quoted even though
    quotations were specified for non-numeric values only ([GH 12922](https://github.com/pandas-dev/pandas/issues/12922),
    [GH 13259](https://github.com/pandas-dev/pandas/issues/13259))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.describe()` raising `ValueError` with only boolean columns
    ([GH 13898](https://github.com/pandas-dev/pandas/issues/13898))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `MultiIndex` slicing where extra elements were returned when level is
    non-unique ([GH 12896](https://github.com/pandas-dev/pandas/issues/12896))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.str.replace` does not raise `TypeError` for invalid replacement ([GH
    13438](https://github.com/pandas-dev/pandas/issues/13438))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `MultiIndex.from_arrays` which didn’t check for input array lengths matching
    ([GH 13599](https://github.com/pandas-dev/pandas/issues/13599))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `cartesian_product` and `MultiIndex.from_product` which may raise with
    empty input arrays ([GH 12258](https://github.com/pandas-dev/pandas/issues/12258))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which may cause a segfault or corruption when iterating
    in large chunks over a stream/file under rare circumstances ([GH 13703](https://github.com/pandas-dev/pandas/issues/13703))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which caused errors to be raised when a dictionary containing
    scalars is passed in for `na_values` ([GH 12224](https://github.com/pandas-dev/pandas/issues/12224))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` which caused BOM files to be incorrectly parsed by not
    ignoring the BOM ([GH 4793](https://github.com/pandas-dev/pandas/issues/4793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` which raised errors when a numpy
    array was passed in for `usecols` ([GH 12546](https://github.com/pandas-dev/pandas/issues/12546))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` where the index columns were being incorrectly parsed
    when parsed as dates with a `thousands` parameter ([GH 14066](https://github.com/pandas-dev/pandas/issues/14066))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which `NaN` values weren’t
    being detected after data was converted to numeric values ([GH 13314](https://github.com/pandas-dev/pandas/issues/13314))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in which the `nrows` argument was not properly validated
    for both engines ([GH 10476](https://github.com/pandas-dev/pandas/issues/10476))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which infinities of mixed-case
    forms were not being interpreted properly ([GH 13274](https://github.com/pandas-dev/pandas/issues/13274))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` in which trailing `NaN` values
    were not being parsed ([GH 13320](https://github.com/pandas-dev/pandas/issues/13320))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='python'` when reading from a `tempfile.TemporaryFile`
    on Windows with Python 3 ([GH 13398](https://github.com/pandas-dev/pandas/issues/13398))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` that prevents `usecols` kwarg from accepting single-byte
    unicode strings ([GH 13219](https://github.com/pandas-dev/pandas/issues/13219))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` that prevents `usecols` from being an empty set ([GH
    13402](https://github.com/pandas-dev/pandas/issues/13402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in the C engine where the NULL character was not being
    parsed as NULL ([GH 14012](https://github.com/pandas-dev/pandas/issues/14012))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='c'` in which NULL `quotechar` was not accepted
    even though `quoting` was specified as `None` ([GH 13411](https://github.com/pandas-dev/pandas/issues/13411))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` with `engine='c'` in which fields were not properly cast
    to float when quoting was specified as non-numeric ([GH 13411](https://github.com/pandas-dev/pandas/issues/13411))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()` in Python 2.x with non-UTF8 encoded, multi-character
    separated data ([GH 3404](https://github.com/pandas-dev/pandas/issues/3404))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv()`, where aliases for utf-xx (e.g. UTF-xx, UTF_xx, utf_xx)
    raised UnicodeDecodeError ([GH 13549](https://github.com/pandas-dev/pandas/issues/13549))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_csv`, `pd.read_table`, `pd.read_fwf`, `pd.read_stata` and `pd.read_sas`
    where files were opened by parsers but not closed if both `chunksize` and `iterator`
    were `None`. ([GH 13940](https://github.com/pandas-dev/pandas/issues/13940))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `StataReader`, `StataWriter`, `XportReader` and `SAS7BDATReader` where
    a file was not properly closed when an error was raised. ([GH 13940](https://github.com/pandas-dev/pandas/issues/13940))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.pivot_table()` where `margins_name` is ignored when `aggfunc` is
    a list ([GH 13354](https://github.com/pandas-dev/pandas/issues/13354))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.Series.str.zfill`, `center`, `ljust`, `rjust`, and `pad` when passing
    non-integers, did not raise `TypeError` ([GH 13598](https://github.com/pandas-dev/pandas/issues/13598))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in checking for any null objects in a `TimedeltaIndex`, which always returned
    `True` ([GH 13603](https://github.com/pandas-dev/pandas/issues/13603))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` arithmetic raises `TypeError` if it contains datetime-like as
    `object` dtype ([GH 13043](https://github.com/pandas-dev/pandas/issues/13043))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug `Series.isnull()` and `Series.notnull()` ignore `Period('NaT')` ([GH 13737](https://github.com/pandas-dev/pandas/issues/13737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug `Series.fillna()` and `Series.dropna()` don’t affect to `Period('NaT')`
    ([GH 13737](https://github.com/pandas-dev/pandas/issues/13737)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.fillna(value=np.nan)` incorrectly raises `KeyError` on a `category`
    dtyped `Series` ([GH 14021](https://github.com/pandas-dev/pandas/issues/14021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in extension dtype creation where the created types were not is/identical
    ([GH 13285](https://github.com/pandas-dev/pandas/issues/13285))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.resample(..)` where incorrect warnings were triggered by IPython introspection
    ([GH 13618](https://github.com/pandas-dev/pandas/issues/13618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `NaT` - `Period` raises `AttributeError` ([GH 13071](https://github.com/pandas-dev/pandas/issues/13071))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` comparison may output incorrect result if rhs contains `NaT`
    ([GH 9005](https://github.com/pandas-dev/pandas/issues/9005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` and `Index` comparison may output incorrect result if it contains
    `NaT` with `object` dtype ([GH 13592](https://github.com/pandas-dev/pandas/issues/13592))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` addition raises `TypeError` if `Period` is on right hand side
    ([GH 13069](https://github.com/pandas-dev/pandas/issues/13069))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` and `Series` or `Index` comparison raises `TypeError` ([GH 13200](https://github.com/pandas-dev/pandas/issues/13200))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.set_eng_float_format()` that would prevent NaN and Inf from formatting
    ([GH 11981](https://github.com/pandas-dev/pandas/issues/11981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.unstack` with `Categorical` dtype resets `.ordered` to `True` ([GH
    13249](https://github.com/pandas-dev/pandas/issues/13249))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean some compile time warnings in datetime parsing ([GH 13607](https://github.com/pandas-dev/pandas/issues/13607))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `factorize` raises `AmbiguousTimeError` if data contains datetime near
    DST boundary ([GH 13750](https://github.com/pandas-dev/pandas/issues/13750))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.set_index` raises `AmbiguousTimeError` if new index contains DST boundary
    and multi levels ([GH 12920](https://github.com/pandas-dev/pandas/issues/12920))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.shift` raises `AmbiguousTimeError` if data contains datetime near DST
    boundary ([GH 13926](https://github.com/pandas-dev/pandas/issues/13926))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.read_hdf()` returns incorrect result when a `DataFrame` with a `categorical`
    column and a query which doesn’t match any values ([GH 13792](https://github.com/pandas-dev/pandas/issues/13792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.iloc` when indexing with a non lexsorted MultiIndex ([GH 13797](https://github.com/pandas-dev/pandas/issues/13797))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.loc` when indexing with date strings in a reverse sorted `DatetimeIndex`
    ([GH 14316](https://github.com/pandas-dev/pandas/issues/14316))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` comparison operators when dealing with zero dim NumPy arrays
    ([GH 13006](https://github.com/pandas-dev/pandas/issues/13006))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.combine_first` may return incorrect `dtype` ([GH 7630](https://github.com/pandas-dev/pandas/issues/7630),
    [GH 10567](https://github.com/pandas-dev/pandas/issues/10567))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby` where `apply` returns different result depending on whether
    first result is `None` or not ([GH 12824](https://github.com/pandas-dev/pandas/issues/12824))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby(..).nth()` where the group key is included inconsistently if
    called after `.head()/.tail()` ([GH 12839](https://github.com/pandas-dev/pandas/issues/12839))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_html`, `.to_latex` and `.to_string` silently ignore custom datetime
    formatter passed through the `formatters` key word ([GH 10690](https://github.com/pandas-dev/pandas/issues/10690))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.iterrows()`, not yielding a `Series` subclasse if defined
    ([GH 13977](https://github.com/pandas-dev/pandas/issues/13977))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.to_numeric` when `errors='coerce'` and input contains non-hashable
    objects ([GH 13324](https://github.com/pandas-dev/pandas/issues/13324))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid `Timedelta` arithmetic and comparison may raise `ValueError`
    rather than `TypeError` ([GH 13624](https://github.com/pandas-dev/pandas/issues/13624))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid datetime parsing in `to_datetime` and `DatetimeIndex` may raise
    `TypeError` rather than `ValueError` ([GH 11169](https://github.com/pandas-dev/pandas/issues/11169),
    [GH 11287](https://github.com/pandas-dev/pandas/issues/11287))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` created with tz-aware `Timestamp` and mismatched `tz` option
    incorrectly coerces timezone ([GH 13692](https://github.com/pandas-dev/pandas/issues/13692))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` with nanosecond frequency does not include timestamp
    specified with `end` ([GH 13672](https://github.com/pandas-dev/pandas/issues/13672))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` when setting a slice with a `np.timedelta64` ([GH 14155](https://github.com/pandas-dev/pandas/issues/14155))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` raises `OutOfBoundsDatetime` if `datetime` exceeds `datetime64[ns]`
    bounds, rather than coercing to `object` dtype ([GH 13663](https://github.com/pandas-dev/pandas/issues/13663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` may ignore specified `datetime64` or `timedelta64` passed as
    `dtype` ([GH 13981](https://github.com/pandas-dev/pandas/issues/13981))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `RangeIndex` can be created without no arguments rather than raises `TypeError`
    ([GH 13793](https://github.com/pandas-dev/pandas/issues/13793))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.value_counts()` raises `OutOfBoundsDatetime` if data exceeds `datetime64[ns]`
    bounds ([GH 13663](https://github.com/pandas-dev/pandas/issues/13663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex` may raise `OutOfBoundsDatetime` if input `np.datetime64`
    has other unit than `ns` ([GH 9114](https://github.com/pandas-dev/pandas/issues/9114))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` creation with `np.datetime64` which has other unit than `ns`
    as `object` dtype results in incorrect values ([GH 13876](https://github.com/pandas-dev/pandas/issues/13876))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `resample` with timedelta data where data was casted to float ([GH 13119](https://github.com/pandas-dev/pandas/issues/13119)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.isnull()` `pd.notnull()` raise `TypeError` if input datetime-like
    has other unit than `ns` ([GH 13389](https://github.com/pandas-dev/pandas/issues/13389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.merge()` may raise `TypeError` if input datetime-like has other unit
    than `ns` ([GH 13389](https://github.com/pandas-dev/pandas/issues/13389))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `HDFStore`/`read_hdf()` discarded `DatetimeIndex.name` if `tz` was set
    ([GH 13884](https://github.com/pandas-dev/pandas/issues/13884))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Categorical.remove_unused_categories()` changes `.codes` dtype to platform
    int ([GH 13261](https://github.com/pandas-dev/pandas/issues/13261))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby` with `as_index=False` returns all NaN’s when grouping on multiple
    columns including a categorical one ([GH 13204](https://github.com/pandas-dev/pandas/issues/13204))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `df.groupby(...)[...]` where getitem with `Int64Index` raised an error
    ([GH 13731](https://github.com/pandas-dev/pandas/issues/13731))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the CSS classes assigned to `DataFrame.style` for index names. Previously
    they were assigned `"col_heading level<n> col<c>"` where `n` was the number of
    levels + 1\. Now they are assigned `"index_name level<n>"`, where `n` is the correct
    level for that MultiIndex.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug where `pd.read_gbq()` could throw `ImportError: No module named discovery`
    as a result of a naming conflict with another python package called apiclient
    ([GH 13454](https://github.com/pandas-dev/pandas/issues/13454))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.union` returns an incorrect result with a named empty index ([GH
    13432](https://github.com/pandas-dev/pandas/issues/13432))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs in `Index.difference` and `DataFrame.join` raise in Python3 when using
    mixed-integer indexes ([GH 13432](https://github.com/pandas-dev/pandas/issues/13432),
    [GH 12814](https://github.com/pandas-dev/pandas/issues/12814))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in subtract tz-aware `datetime.datetime` from tz-aware `datetime64` series
    ([GH 14088](https://github.com/pandas-dev/pandas/issues/14088))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_excel()` when DataFrame contains a MultiIndex which contains a label
    with a NaN value ([GH 13511](https://github.com/pandas-dev/pandas/issues/13511))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in invalid frequency offset string like “D1”, “-2-3H” may not raise `ValueError`
    ([GH 13930](https://github.com/pandas-dev/pandas/issues/13930))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `concat` and `groupby` for hierarchical frames with `RangeIndex` levels
    ([GH 13542](https://github.com/pandas-dev/pandas/issues/13542)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.str.contains()` for Series containing only `NaN` values of `object`
    dtype ([GH 14171](https://github.com/pandas-dev/pandas/issues/14171))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `agg()` function on groupby dataframe changes dtype of `datetime64[ns]`
    column to `float64` ([GH 12821](https://github.com/pandas-dev/pandas/issues/12821))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in using NumPy ufunc with `PeriodIndex` to add or subtract integer raise
    `IncompatibleFrequency`. Note that using standard operator like `+` or `-` is
    recommended, because standard operators use more efficient path ([GH 13980](https://github.com/pandas-dev/pandas/issues/13980))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in operations on `NaT` returning `float` instead of `datetime64[ns]` ([GH
    12941](https://github.com/pandas-dev/pandas/issues/12941))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series` flexible arithmetic methods (like `.add()`) raises `ValueError`
    when `axis=None` ([GH 13894](https://github.com/pandas-dev/pandas/issues/13894))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.to_csv()` with `MultiIndex` columns in which a stray empty
    line was added ([GH 6618](https://github.com/pandas-dev/pandas/issues/6618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DatetimeIndex`, `TimedeltaIndex` and `PeriodIndex.equals()` may return
    `True` when input isn’t `Index` but contains the same values ([GH 13107](https://github.com/pandas-dev/pandas/issues/13107))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against datetime with timezone may not work if it contains
    datetime near DST boundary ([GH 14146](https://github.com/pandas-dev/pandas/issues/14146))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `pd.eval()` and `HDFStore` query truncating long float literals with
    python 2 ([GH 14241](https://github.com/pandas-dev/pandas/issues/14241))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index` raises `KeyError` displaying incorrect column when column is
    not in the df and columns contains duplicate values ([GH 13822](https://github.com/pandas-dev/pandas/issues/13822))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Period` and `PeriodIndex` creating wrong dates when frequency has combined
    offset aliases ([GH 13874](https://github.com/pandas-dev/pandas/issues/13874))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.to_string()` when called with an integer `line_width` and `index=False`
    raises an UnboundLocalError exception because `idx` referenced before assignment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `eval()` where the `resolvers` argument would not accept a list ([GH
    14095](https://github.com/pandas-dev/pandas/issues/14095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs in `stack`, `get_dummies`, `make_axis_dummies` which don’t preserve categorical
    dtypes in (multi)indexes ([GH 13854](https://github.com/pandas-dev/pandas/issues/13854))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PeriodIndex` can now accept `list` and `array` which contains `pd.NaT` ([GH
    13430](https://github.com/pandas-dev/pandas/issues/13430))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `df.groupby` where `.median()` returns arbitrary values if grouped dataframe
    contains empty bins ([GH 13629](https://github.com/pandas-dev/pandas/issues/13629))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Index.copy()` where `name` parameter was ignored ([GH 14302](https://github.com/pandas-dev/pandas/issues/14302))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Contributors'
  prefs: []
  type: TYPE_NORMAL
- en: A total of 117 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Adrien Emery +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Alekseyev
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Vig +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allen Riddell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol Agrawal +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andy R. Terrel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anthonios Partheniou
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ben Kandel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bob Baxley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brett Rosen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camilo Cota +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Grinolds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Warth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Hudon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher C. Aycock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Siladji +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Douglas McNeil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drewrey Lupton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eduardo Blancas Reyes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elliot Marsden +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evan Wright
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Felix Marczinowski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Francis T. O’Donovan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geraint Duck +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giacomo Ferroni +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grant Roch +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gábor Lipták
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Haleemur Ali +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hassan Shamim +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iulius Curt +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ivan Nazarov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeffrey Gerard +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenn Olsen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jim Crist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joe Jevnik
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Evans +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Freeman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Liekezer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John W. O’Brien
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John Zwinck +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Johnny Gill +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jordan Erenrich +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Josh Howes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jozef Brandys +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ka Wo Chen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kamil Sindi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kerby Shedden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthieu Brucher +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximilian Roos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Scherer +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike Graham +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mortada Mehyar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Muhammad Haseeb Tariq +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nate George +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neil Parley +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicolas Bonnotte
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OXPHOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pan Deng / Zora +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Mestemaker +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pauli Virtanen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pawel Kordek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piotr Jucha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ravi Kumar Nimmi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Gieseke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robert Kern +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roger Thomas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roy Keyes +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russell Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sahil Dua +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sanjiv Lobo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sašo Stanovnik +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shawn Heide +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephen Kappel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steve Choi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stewart Henderson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudarshan Konge +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas A Caswell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Bird +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uwe Hoffmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WillAyd +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xiang Zhang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YG-Riku +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yadunandan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yaroslav Halchenko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yuichiro Kaneko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adneu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: agraboso +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: babakkeyvani +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: c123w +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cmazzullo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conquistador1492 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cr3 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dsm054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: harshul1610 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iamsimha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jackieleng +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mpuels +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pijucha +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: priyankjain +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sinhrks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wcwagner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: yui-knk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zhangjinjie +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: znmean +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 颜发才（Yan Facai） +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
