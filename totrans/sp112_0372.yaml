- en: scipy.ndimage.geometric_transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.geometric_transform.html#scipy.ndimage.geometric_transform](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.geometric_transform.html#scipy.ndimage.geometric_transform)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply an arbitrary geometric transform.
  prefs: []
  type: TYPE_NORMAL
- en: The given mapping function is used to find, for each point in the output, the
    corresponding coordinates in the input. The value of the input at those coordinates
    is determined by spline interpolation of the requested order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**mapping**{callable, scipy.LowLevelCallable}'
  prefs: []
  type: TYPE_NORMAL
- en: A callable object that accepts a tuple of length equal to the output array rank,
    and returns the corresponding input coordinates as a tuple of length equal to
    the input array rank.
  prefs: []
  type: TYPE_NORMAL
- en: '**output_shape**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the spline interpolation, default is 3. The order has to be in
    the range 0-5.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reflect’, ‘grid-mirror’, ‘constant’, ‘grid-constant’, ‘nearest’,
    ‘mirror’, ‘grid-wrap’, ‘wrap’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended beyond its
    boundaries. Default is ‘constant’. Behavior for each valid value is as follows
    (see additional plots and details on [boundary modes](../../tutorial/ndimage.html#ndimage-interpolation-modes)):'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter. No interpolation is performed beyond the
    edges of the input.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter. Interpolation occurs for samples outside
    the input’s extent as well.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*d b c d | a b c d | b c a b*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge, but in a way
    such that the last point and initial point exactly overlap. In this case it is
    not well defined which sample will be chosen at the point of overlap.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**prefilter**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Determines if the input array is prefiltered with [`spline_filter`](scipy.ndimage.spline_filter.html#scipy.ndimage.spline_filter
    "scipy.ndimage.spline_filter") before interpolation. The default is True, which
    will create a temporary *float64* array of filtered values if *order > 1*. If
    setting this to False, the output will be slightly blurred if *order > 1*, unless
    the input is prefiltered, i.e. it is the result of calling [`spline_filter`](scipy.ndimage.spline_filter.html#scipy.ndimage.spline_filter
    "scipy.ndimage.spline_filter") on the original input.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_arguments**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to *mapping*.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_keywords**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra keywords passed to *mapping*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**output**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The filtered input.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`map_coordinates`](scipy.ndimage.map_coordinates.html#scipy.ndimage.map_coordinates
    "scipy.ndimage.map_coordinates"), [`affine_transform`](scipy.ndimage.affine_transform.html#scipy.ndimage.affine_transform
    "scipy.ndimage.affine_transform"), [`spline_filter1d`](scipy.ndimage.spline_filter1d.html#scipy.ndimage.spline_filter1d
    "scipy.ndimage.spline_filter1d")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function also accepts low-level callback functions with one the following
    signatures and wrapped in [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The calling function iterates over the elements of the output array, calling
    the callback function at each element. The coordinates of the current output element
    are passed through `output_coordinates`. The callback function must return the
    coordinates at which the input must be interpolated in `input_coordinates`. The
    rank of the input and output arrays are given by `input_rank` and `output_rank`
    respectively. `user_data` is the data pointer provided to [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable") as-is.
  prefs: []
  type: TYPE_NORMAL
- en: The callback function must return an integer error status that is zero if something
    went wrong and one otherwise. If an error occurs, you should normally set the
    Python error status with an informative message before returning, otherwise a
    default error message is set by the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, some other low-level function pointer specifications are accepted,
    but these are for backward compatibility only and should not be used in new code.
  prefs: []
  type: TYPE_NORMAL
- en: For complex-valued *input*, this function transforms the real and imaginary
    components independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.6.0: Complex-valued support added.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
