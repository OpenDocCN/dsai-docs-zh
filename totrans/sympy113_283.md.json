["```py\n>>> from sympy import *\n>>> x, y, z = symbols('x,y,z')\n>>> init_printing(use_unicode=True) \n```", "```py\n>>> lr = QQ.old_poly_ring(x, y, order=\"ilex\") / [y**2 - x**3]\n>>> lr\nℚ[x, y, order=ilex]\n───────────────────\n ╱   3    2╲\n ╲- x  + y ╱ \n```", "```py\n>>> X, Y = lr.convert(x), lr.convert(y) ; X\n ╱   3    2╲\nx + ╲- x  + y ╱\n\n>>> x**3 == y**2\nFalse\n\n>>> X**3 == Y**2\nTrue \n```", "```py\n>>> ar = QQ.old_poly_ring(x, y, z); ar\nℚ[x, y, z] \n```", "```py\nclass sympy.polys.domains.ring.Ring\n```", "```py\nfree_module(rank)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2)\nQQ[x]**2 \n```", "```py\nideal(*gens)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).ideal(x**2)\n<x**2> \n```", "```py\nquotient_ring(e)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).quotient_ring(QQ.old_poly_ring(x).ideal(x**2))\nQQ[x]/<x**2>\n>>> QQ.old_poly_ring(x).quotient_ring([x**2])\nQQ[x]/<x**2> \n```", "```py\n>>> QQ.old_poly_ring(x)/[x**2]\nQQ[x]/<x**2> \n```", "```py\nsympy.polys.domains.polynomialring.PolynomialRing(domain_or_ring, symbols=None, order=None)\n```", "```py\nclass sympy.polys.domains.quotientring.QuotientRing(ring, ideal)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> I = QQ.old_poly_ring(x).ideal(x**3 + 1)\n>>> QQ.old_poly_ring(x).quotient_ring(I)\nQQ[x]/<x**3 + 1> \n```", "```py\n>>> QQ.old_poly_ring(x)/I\nQQ[x]/<x**3 + 1> \n```", "```py\n>>> QQ.old_poly_ring(x)/[x**3 + 1]\nQQ[x]/<x**3 + 1> \n```", "```py\n>>> F = ar.free_module(4) ; F\n 4\nℚ[x, y, z]\n\n>>> S = F.submodule([1, x, x**2, x**3], [0, 1, 0, y]) ; S\n╱⎡       2   3⎤              ╲\n╲⎣1, x, x , x ⎦, [0, 1, 0, y]╱ \n```", "```py\nclass sympy.polys.agca.modules.Module(ring)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> QQ.old_poly_ring(x).free_module(2)\nQQ[x]**2 \n```", "```py\ncontains(elem)\n```", "```py\nconvert(elem, M=None)\n```", "```py\nidentity_hom()\n```", "```py\nis_submodule(other)\n```", "```py\nis_zero()\n```", "```py\nmultiply_ideal(other)\n```", "```py\nquotient_module(other)\n```", "```py\nsubmodule(*gens)\n```", "```py\nsubset(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.subset([(1, x), (x, 2)])\nTrue\n>>> F.subset([(1/x, x), (x, 2)])\nFalse \n```", "```py\nclass sympy.polys.agca.modules.FreeModule(ring, rank)\n```", "```py\nbasis()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(3).basis()\n([1, 0, 0], [0, 1, 0], [0, 0, 1]) \n```", "```py\nconvert(elem, M=None)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.convert([1, 0])\n[1, 0] \n```", "```py\ndtype\n```", "```py\nidentity_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2).identity_hom()\nMatrix([\n[1, 0], : QQ[x]**2 -> QQ[x]**2\n[0, 1]]) \n```", "```py\nis_submodule(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> M = F.submodule([2, x])\n>>> F.is_submodule(F)\nTrue\n>>> F.is_submodule(M)\nTrue\n>>> M.is_submodule(F)\nFalse \n```", "```py\nis_zero()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(0).is_zero()\nTrue\n>>> QQ.old_poly_ring(x).free_module(1).is_zero()\nFalse \n```", "```py\nmultiply_ideal(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> I = QQ.old_poly_ring(x).ideal(x)\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.multiply_ideal(I)\n<[x, 0], [0, x]> \n```", "```py\nquotient_module(submodule)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = QQ.old_poly_ring(x).free_module(2)\n>>> M.quotient_module(M.submodule([1, x], [x, 2]))\nQQ[x]**2/<[1, x], [x, 2]> \n```", "```py\n>>> QQ.old_poly_ring(x).free_module(2) / [[1, x], [x, 2]]\nQQ[x]**2/<[1, x], [x, 2]> \n```", "```py\nclass sympy.polys.agca.modules.FreeModuleElement(module, data)\n```", "```py\nclass sympy.polys.agca.modules.SubModule(gens, container)\n```", "```py\nconvert(elem, M=None)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = QQ.old_poly_ring(x).free_module(2).submodule([1, x])\n>>> M.convert([2, 2*x])\n[2, 2*x] \n```", "```py\nidentity_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2).submodule([x, x]).identity_hom()\nMatrix([\n[1, 0], : <[x, x]> -> <[x, x]>\n[0, 1]]) \n```", "```py\nin_terms_of_generators(e)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> M = F.submodule([1, 0], [1, 1])\n>>> M.in_terms_of_generators([x, x**2])  \n[DMP_Python([-1, 1, 0], QQ), DMP_Python([1, 0, 0], QQ)] \n```", "```py\ninclusion_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2).submodule([x, x]).inclusion_hom()\nMatrix([\n[1, 0], : <[x, x]> -> QQ[x]**2\n[0, 1]]) \n```", "```py\nintersect(other, **options)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x, y).free_module(2)\n>>> F.submodule([x, x]).intersect(F.submodule([y, y]))\n<[x*y, x*y]> \n```", "```py\n>>> F.submodule([x, x]).intersect(F.submodule([y, y]), relations=True)\n(<[x*y, x*y]>, [(DMP_Python([[1, 0]], QQ),)], [(DMP_Python([[1], []], QQ),)]) \n```", "```py\nis_full_module()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.submodule([x, 1]).is_full_module()\nFalse\n>>> F.submodule([1, 1], [1, 2]).is_full_module()\nTrue \n```", "```py\nis_submodule(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> M = F.submodule([2, x])\n>>> N = M.submodule([2*x, x**2])\n>>> M.is_submodule(M)\nTrue\n>>> M.is_submodule(N)\nTrue\n>>> N.is_submodule(M)\nFalse \n```", "```py\nis_zero()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.submodule([x, 1]).is_zero()\nFalse\n>>> F.submodule([0, 0]).is_zero()\nTrue \n```", "```py\nmodule_quotient(other, **options)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x, y\n>>> F = QQ.old_poly_ring(x, y).free_module(2)\n>>> S = F.submodule([x*y, x*y])\n>>> T = F.submodule([x, x])\n>>> S.module_quotient(T)\n<y> \n```", "```py\n>>> S.module_quotient(T, relations=True)\n(<y>, [[DMP_Python([[1]], QQ)]]) \n```", "```py\nmultiply_ideal(I)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> I = QQ.old_poly_ring(x).ideal(x**2)\n>>> M = QQ.old_poly_ring(x).free_module(2).submodule([1, 1])\n>>> I*M\n<[x**2, x**2]> \n```", "```py\nquotient_module(other, **opts)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> S1 = F.submodule([x, 1])\n>>> S2 = F.submodule([x**2, x])\n>>> S1.quotient_module(S2)\n<[x, 1] + <[x**2, x]>> \n```", "```py\n>>> F.submodule([x, 1]) / [(x**2, x)]\n<[x, 1] + <[x**2, x]>> \n```", "```py\nreduce_element(x)\n```", "```py\nsubmodule(*gens)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = QQ.old_poly_ring(x).free_module(2).submodule([x, 1])\n>>> M.submodule([x**2, x])\n<[x**2, x]> \n```", "```py\nsyzygy_module(**opts)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2).submodule([1, 0], [1, 1]).syzygy_module().is_zero()\nTrue \n```", "```py\n>>> M = QQ.old_poly_ring(x, y).free_module(2).submodule([x, 2*x], [y, 2*y])\n>>> S = QQ.old_poly_ring(x, y).free_module(2).submodule([y, -x])\n>>> M.syzygy_module() == S\nTrue \n```", "```py\nunion(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(1)\n>>> M = F.submodule([x**2 + x]) # <x(x+1)>\n>>> N = F.submodule([x**2 - 1]) # <(x-1)(x+1)>\n>>> M.union(N) == F.submodule([x+1])\nTrue \n```", "```py\n>>> I = lr.ideal(x, y)\n>>> I == lr.ideal(x)\nFalse\n\n>>> I == lr.ideal(y)\nFalse \n```", "```py\nclass sympy.polys.agca.ideals.Ideal(ring)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> QQ.old_poly_ring(x).ideal(x+1)\n<x + 1> \n```", "```py\ncontains(elem)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).ideal(x+1, x-1).contains(3)\nTrue\n>>> QQ.old_poly_ring(x).ideal(x**2, x**3).contains(x)\nFalse \n```", "```py\ndepth()\n```", "```py\nheight()\n```", "```py\nintersect(J)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import QQ\n>>> R = QQ.old_poly_ring(x, y)\n>>> R.ideal(x).intersect(R.ideal(y))\n<x*y> \n```", "```py\nis_maximal()\n```", "```py\nis_primary()\n```", "```py\nis_prime()\n```", "```py\nis_principal()\n```", "```py\nis_radical()\n```", "```py\nis_whole_ring()\n```", "```py\nis_zero()\n```", "```py\nproduct(J)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x, y).ideal(x).product(QQ.old_poly_ring(x, y).ideal(y))\n<x*y> \n```", "```py\nquotient(J, **opts)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import QQ\n>>> R = QQ.old_poly_ring(x, y)\n>>> R.ideal(x*y).quotient(R.ideal(x))\n<y> \n```", "```py\nradical()\n```", "```py\nreduce_element(x)\n```", "```py\nsaturate(J)\n```", "```py\nsubset(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> I = QQ.old_poly_ring(x).ideal(x+1)\n>>> I.subset([x**2 - 1, x**2 + 2*x + 1])\nTrue\n>>> I.subset([x**2 + 1, x + 1])\nFalse\n>>> I.subset(QQ.old_poly_ring(x).ideal(x**2 - 1))\nTrue \n```", "```py\nunion(J)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).ideal(x**2 - 1).union(QQ.old_poly_ring(x).ideal((x+1)**2)) == QQ.old_poly_ring(x).ideal(x+1)\nTrue \n```", "```py\nclass sympy.polys.agca.modules.QuotientModule(ring, base, submodule)\n```", "```py\nconvert(elem, M=None)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2) / [(1, 2), (1, x)]\n>>> F.convert([1, 0])\n[1, 0] + <[1, 2], [1, x]> \n```", "```py\ndtype\n```", "```py\nidentity_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = QQ.old_poly_ring(x).free_module(2) / [(1, 2), (1, x)]\n>>> M.identity_hom()\nMatrix([\n[1, 0], : QQ[x]**2/<[1, 2], [1, x]> -> QQ[x]**2/<[1, 2], [1, x]>\n[0, 1]]) \n```", "```py\nis_submodule(other)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> Q = QQ.old_poly_ring(x).free_module(2) / [(x, x)]\n>>> S = Q.submodule([1, 0])\n>>> Q.is_submodule(S)\nTrue\n>>> S.is_submodule(Q)\nFalse \n```", "```py\nis_zero()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> (F/[(1, 0)]).is_zero()\nFalse\n>>> (F/[(1, 0), (0, 1)]).is_zero()\nTrue \n```", "```py\nquotient_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = QQ.old_poly_ring(x).free_module(2) / [(1, 2), (1, x)]\n>>> M.quotient_hom()\nMatrix([\n[1, 0], : QQ[x]**2 -> QQ[x]**2/<[1, 2], [1, x]>\n[0, 1]]) \n```", "```py\nsubmodule(*gens, **opts)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> Q = QQ.old_poly_ring(x).free_module(2) / [(x, x)]\n>>> Q.submodule([x, 0])\n<[x, 0] + <[x, x]>> \n```", "```py\nclass sympy.polys.agca.modules.QuotientModuleElement(module, data)\n```", "```py\neq(d1, d2)\n```", "```py\nclass sympy.polys.agca.modules.SubQuotientModule(gens, container, **opts)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> S = F.submodule([1, 0], [1, x])\n>>> Q = F/[(1, 0)]\n>>> S/[(1, 0)] == Q.submodule([5, x])\nTrue \n```", "```py\nis_full_module()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> F.submodule([x, 1]).is_full_module()\nFalse\n>>> F.submodule([1, 1], [1, 2]).is_full_module()\nTrue \n```", "```py\nquotient_hom()\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> M = (QQ.old_poly_ring(x).free_module(2) / [(1, x)]).submodule([1, 0])\n>>> M.quotient_hom()\nMatrix([\n[1, 0], : <[1, 0], [1, x]> -> <[1, 0] + <[1, x]>, [1, x] + <[1, x]>>\n[0, 1]]) \n```", "```py\nsympy.polys.agca.homomorphisms.homomorphism(domain, codomain, matrix)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> R = QQ.old_poly_ring(x)\n>>> T = R.free_module(2) \n```", "```py\n>>> F = R.free_module(2)\n>>> h = homomorphism(F, T, [[1, x], [x**2, 0]])\n>>> h\nMatrix([\n[1, x**2], : QQ[x]**2 -> QQ[x]**2\n[x,    0]])\n>>> h([1, 0])\n[1, x]\n>>> h([0, 1])\n[x**2, 0]\n>>> h([1, 1])\n[x**2 + 1, x] \n```", "```py\n>>> S = F.submodule([1, 0], [0, x])\n>>> homomorphism(S, T, [[1, x], [x**2, 0]])\nMatrix([\n[1, x**2], : <[1, 0], [0, x]> -> QQ[x]**2\n[x,    0]]) \n```", "```py\n>>> homomorphism(S/[(1, 0)], T, [0, [x**2, 0]])\nMatrix([\n[0, x**2], : <[1, 0] + <[1, 0]>, [0, x] + <[1, 0]>, [1, 0] + <[1, 0]>> -> QQ[x]**2\n[0,    0]])\n>>> homomorphism(S/[(0, x)], T, [0, [x**2, 0]])\nTraceback (most recent call last):\n...\nValueError: kernel <[1, 0], [0, 0]> must contain sm, got <[0,x]> \n```", "```py\nclass sympy.polys.agca.homomorphisms.ModuleHomomorphism(domain, codomain)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> homomorphism(F, F, [[1, 0], [0, 1]])\nMatrix([\n[1, 0], : QQ[x]**2 -> QQ[x]**2\n[0, 1]]) \n```", "```py\nimage()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> homomorphism(F, F, [[1, 0], [x, 0]]).image() == F.submodule([1, 0])\nTrue \n```", "```py\nis_injective()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h.is_injective()\nFalse\n>>> h.quotient_domain(h.kernel()).is_injective()\nTrue \n```", "```py\nis_isomorphism()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h = h.restrict_codomain(h.image())\n>>> h.is_isomorphism()\nFalse\n>>> h.quotient_domain(h.kernel()).is_isomorphism()\nTrue \n```", "```py\nis_surjective()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h.is_surjective()\nFalse\n>>> h.restrict_codomain(h.image()).is_surjective()\nTrue \n```", "```py\nis_zero()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h.is_zero()\nFalse\n>>> h.restrict_domain(F.submodule()).is_zero()\nTrue\n>>> h.quotient_codomain(h.image()).is_zero()\nTrue \n```", "```py\nkernel()\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> homomorphism(F, F, [[1, 0], [x, 0]]).kernel()\n<[x, -1]> \n```", "```py\nquotient_codomain(sm)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2\n[0, 0]])\n>>> h.quotient_codomain(F.submodule([1, 1]))\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2/<[1, 1]>\n[0, 0]]) \n```", "```py\n>>> (F/[(1, 1)]).quotient_hom() * h\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2/<[1, 1]>\n[0, 0]]) \n```", "```py\nquotient_domain(sm)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2\n[0, 0]])\n>>> h.quotient_domain(F.submodule([-x, 1]))\nMatrix([\n[1, x], : QQ[x]**2/<[-x, 1]> -> QQ[x]**2\n[0, 0]]) \n```", "```py\nrestrict_codomain(sm)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2\n[0, 0]])\n>>> h.restrict_codomain(F.submodule([1, 0]))\nMatrix([\n[1, x], : QQ[x]**2 -> <[1, 0]>\n[0, 0]]) \n```", "```py\nrestrict_domain(sm)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> from sympy.polys.agca import homomorphism \n```", "```py\n>>> F = QQ.old_poly_ring(x).free_module(2)\n>>> h = homomorphism(F, F, [[1, 0], [x, 0]])\n>>> h\nMatrix([\n[1, x], : QQ[x]**2 -> QQ[x]**2\n[0, 0]])\n>>> h.restrict_domain(F.submodule([1, 0]))\nMatrix([\n[1, x], : <[1, 0]> -> QQ[x]**2\n[0, 0]]) \n```", "```py\n>>> h * F.submodule([1, 0]).inclusion_hom()\nMatrix([\n[1, x], : <[1, 0]> -> QQ[x]**2\n[0, 0]]) \n```", "```py\nclass sympy.polys.agca.extensions.MonogenicFiniteExtension(mod)\n```", "```py\n>>> from sympy import Symbol, Poly\n>>> from sympy.polys.agca.extensions import FiniteExtension\n>>> x = Symbol('x')\n>>> R = FiniteExtension(Poly(x**2 - 2)); R\nZZ[x]/(x**2 - 2)\n>>> R.rank\n2\n>>> R(1 + x)*(3 - 2*x)\nx - 1 \n```", "```py\n>>> F = FiniteExtension(Poly(x**3 + x**2 + 2, modulus=5)); F\nGF(5)[x]/(x**3 + x**2 + 2)\n>>> F.basis\n(1, x, x**2)\n>>> F(x + 3)/(x**2 + 2)\n-2*x**2 + x + 2 \n```", "```py\n>>> t = Symbol('t')\n>>> FiniteExtension(Poly(t**2 - x**3 - x + 1, t, field=True))\nZZ(x)[t]/(t**2 - x**3 - x + 1) \n```", "```py\ndtype\n```", "```py\nclass sympy.polys.agca.extensions.ExtensionElement(rep, ext)\n```", "```py\ninverse()\n```"]