- en: numpy.broadcast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.broadcast.html](https://numpy.org/doc/1.26/reference/generated/numpy.broadcast.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Produce an object that mimics broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**in1, in2, …**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**broadcast object'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast the input parameters against one another, and return an object that
    encapsulates the result. Amongst others, it has `shape` and `nd` properties, and
    may be used as an iterator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_arrays`](numpy.broadcast_arrays.html#numpy.broadcast_arrays "numpy.broadcast_arrays")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_to`](numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_shapes`](numpy.broadcast_shapes.html#numpy.broadcast_shapes "numpy.broadcast_shapes")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Manually adding two vectors, using broadcasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Compare against built-in broadcasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`index`](numpy.broadcast.index.html#numpy.broadcast.index "numpy.broadcast.index")'
  prefs: []
  type: TYPE_NORMAL
- en: current index in broadcasted result
  prefs: []
  type: TYPE_NORMAL
- en: '[`iters`](numpy.broadcast.iters.html#numpy.broadcast.iters "numpy.broadcast.iters")'
  prefs: []
  type: TYPE_NORMAL
- en: tuple of iterators along `self`’s “components.”
  prefs: []
  type: TYPE_NORMAL
- en: '[`nd`](numpy.broadcast.nd.html#numpy.broadcast.nd "numpy.broadcast.nd")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions of broadcasted result.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndim`](numpy.broadcast.ndim.html#numpy.broadcast.ndim "numpy.broadcast.ndim")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions of broadcasted result.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numiter`](numpy.broadcast.numiter.html#numpy.broadcast.numiter "numpy.broadcast.numiter")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterators possessed by the broadcasted result.
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of broadcasted result.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](numpy.broadcast.size.html#numpy.broadcast.size "numpy.broadcast.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Total size of broadcasted result.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`reset`](numpy.broadcast.reset.html#numpy.broadcast.reset "numpy.broadcast.reset")()
    | Reset the broadcasted result''s iterator(s). |'
  prefs: []
  type: TYPE_TB
