- en: Represent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/represent.html](https://docs.sympy.org/latest/modules/physics/quantum/represent.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Logic for representing operators in state in various bases.
  prefs: []
  type: TYPE_NORMAL
- en: 'TODO:'
  prefs: []
  type: TYPE_NORMAL
- en: Get represent working with continuous hilbert spaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document default basis functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns instances of the given state with dummy indices appended
  prefs: []
  type: TYPE_NORMAL
- en: 'Operates in two different modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Two arguments are passed to it. The first is the base state which is to be indexed,
    and the second argument is a list of indices to append.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Three arguments are passed. The first is again the base state to be indexed.
    The second is the start index for counting. The final argument is the number of
    kets you wish to receive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tries to call state._enumerate_state. If this fails, returns an empty list
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : list'
  prefs: []
  type: TYPE_NORMAL
- en: See list of operation modes above for explanation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns a basis state instance corresponding to the basis specified in options=s.
    If no basis is specified, the function tries to form a default basis state of
    the given expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: The basis specified in options is already an instance of StateBase. If this
    is the case, it is simply returned. If the class is specified but not an instance,
    a default instance is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The basis specified is an operator or set of operators. If this is the case,
    the operator_to_state mapping method is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No basis is specified. If expr is a state, then a default instance of its class
    is returned. If expr is an operator, then it is mapped to the corresponding state.
    If it is neither, then we cannot obtain the basis state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the basis cannot be mapped, then it is not changed.
  prefs: []
  type: TYPE_NORMAL
- en: This will be called from within represent, and represent will only pass QExpr’s.
  prefs: []
  type: TYPE_NORMAL
- en: 'TODO (?): Support for Muls and other types of expressions?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Operator or StateBase'
  prefs: []
  type: TYPE_NORMAL
- en: Expression whose basis is sought
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns the result of integrating over any unities `(|x><x|)` in the given expression.
    Intended for integrating over the result of representations in continuous bases.
  prefs: []
  type: TYPE_NORMAL
- en: This function integrates over any unities that may have been inserted into the
    quantum expression and returns the result. It uses the interval of the Hilbert
    space of the basis state passed to it in order to figure out the limits of integration.
    The unities option must be specified for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This is mostly used internally by represent(). Examples are given merely
    to show the use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orig_expr** : quantum expression'
  prefs: []
  type: TYPE_NORMAL
- en: The original expression which was to be represented
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**result: Expr**'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting representation that we wish to integrate over
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns an `<x'|A|x>` type representation for the given operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Operator'
  prefs: []
  type: TYPE_NORMAL
- en: Operator to be represented in the specified basis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns an innerproduct like representation (e.g. `<x'|x>`) for the given state.
  prefs: []
  type: TYPE_NORMAL
- en: Attempts to calculate inner product with a bra from the specified basis. Should
    only be passed an instance of KetBase or BraBase
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : KetBase or BraBase'
  prefs: []
  type: TYPE_NORMAL
- en: The expression to be represented
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Represent the quantum expression in the given basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'In quantum mechanics abstract states and operators can be represented in various
    basis sets. Under this operation the follow transforms happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Ket -> column vector or function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bra -> row vector of function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operator -> matrix or differential operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This function is the top-level interface for this action.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function walks the SymPy expression tree looking for `QExpr` instances
    that have a `_represent` method. This method is then called and the object is
    replaced by the representation returned by this method. By default, the `_represent`
    method will dispatch to other methods that handle the representation logic for
    a particular basis set. The naming convention for these methods is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This function will have the logic for representing instances of its class in
    the basis set having a class named `FooBasis`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The expression to represent.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**basis** : Operator, basis set'
  prefs: []
  type: TYPE_NORMAL
- en: An object that contains the information about the basis set. If an operator
    is used, the basis is assumed to be the orthonormal eigenvectors of that operator.
    In general though, the basis argument can be any object that contains the basis
    set information.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**options** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Key/value pairs of options that are passed to the underlying method that finds
    the representation. These options can be used to control how the representation
    is done. For example, this is where the size of the basis set would be set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**e** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The SymPy expression of the represented quantum expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Here we subclass `Operator` and `Ket` to create the z-spin operator and its
    spin 1/2 up eigenstate. By defining the `_represent_SzOp` method, the ket can
    be represented in the z-spin basis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here we see an example of representations in a continuous basis. We see that
    the result of representing various combinations of cartesian position operators
    and kets give us continuous expressions involving DiracDelta functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
