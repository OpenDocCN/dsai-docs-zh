- en: Documentation Style Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/contributing/documentation-style-guide.html](https://docs.sympy.org/latest/contributing/documentation-style-guide.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: General Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation is one of the most highly valued aspects of an open source project.
    Documentation teaches users and contributors how to use a project, how to contribute,
    and the standards of conduct within an open source community. But according to
    GitHub’s [Open Source Survey](https://opensourcesurvey.org/2017/), incomplete
    or confusing documentation is the most commonly encountered problem in open source.
    This style guide aims to change that.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this style guide is to provide the SymPy community with a set
    of style and formatting guidelines that can be utilized and followed when writing
    SymPy documentation. Adhering to the guidelines offered in this style guide will
    bring greater consistency and clarity to SymPy’s documentation, supporting its
    mission to become a full-featured, open source computer algebra system (CAS).
  prefs: []
  type: TYPE_NORMAL
- en: The SymPy documentation found at [docs.sympy.org](https://docs.sympy.org/latest/index.html)
    is generated from docstrings in the source code and dedicated narrative documentation
    files in the [doc/src directory](https://github.com/sympy/sympy/tree/master/doc/src).
    Both are written in [reStructuredText](https://docutils.sourceforge.io/rst.html)
    format extended by [Sphinx](https://www.sphinx-doc.org/en/master/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation contained in the [doc/src directory](https://github.com/sympy/sympy/tree/master/doc/src)
    and the docstrings embedded in the Python source code are processed by Sphinx
    and various Sphinx extensions. This means that the documentation source format
    is specified by the documentation processing tools. The SymPy Documentation Style
    Guide provides both the essential elements for writing SymPy documentation as
    well as any deviations in style we specify relative to these documentation processing
    tools. The following lists the processing tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'reStructuredText: Narrative documentation files and documentation strings embedded
    in Python code follow the reStructuredText format. Advanced features not described
    in this document can be found at [https://docutils.sourceforge.io/rst.html](https://docutils.sourceforge.io/rst.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sphinx: Sphinx includes additional default features for the reStructuredText
    specification that are described at: [https://www.sphinx-doc.org/en/master](https://www.sphinx-doc.org/en/master).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sphinx extensions included with Sphinx that we enable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sphinx.ext.autodoc`: Processes Python source code files for the associated
    documentation strings to automatically generate pages containing the Application
    Programming Interface (API). See section on calling autodoc directives in this
    document to get started. More information is at: [https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sphinx.ext.graphviz`: Provides a directive for adding Graphviz graphics. See
    [https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html](https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html)
    for more info.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sphinx.ext.mathjax`: Causes math written in LaTeX to display using MathJax
    in the HTML version of the documentation. More information is at: [https://www.sphinx-doc.org/en/master/usage/extensions/math.html#module-sphinx.ext.mathjax](https://www.sphinx-doc.org/en/master/usage/extensions/math.html#module-sphinx.ext.mathjax).
    *No bearing on documentation source format.*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sphinx.ext.linkcode`: Causes links to source code to direct to the related
    files on Github. More information is at: [https://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html](https://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html).
    *No bearing on documentation source format.*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sphinx extensions that are not included with Sphinx that we enable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpydoc`: Processes docstrings written in the “numpydoc” format, see [https://numpydoc.readthedocs.io/en/stable/](https://numpydoc.readthedocs.io/en/stable/).
    We recommend the subset of numpydoc formatting features in this document. (Note
    that we currently use an older modified fork of numpydoc, which is included in
    the SymPy source code.)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sphinx_math_dollar`: Allows math to be delimited with dollar signs instead
    of reStructuredText directives (e.g., `$a^2$` instead of `` :math:`a^2` ``). See
    [https://www.sympy.org/sphinx-math-dollar/](https://www.sympy.org/sphinx-math-dollar/)
    for more info.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matplotlib.sphinxext.plot_directive`: Provides directives for included matplotlib
    generated figures in reStructuredText. See [https://matplotlib.org/devel/plot_directive.html](https://matplotlib.org/devel/plot_directive.html)
    for more info.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything supported by the above processing tools is available for use in the
    SymPy documentation, but this style guide supersedes any recommendations made
    in the above documents. Note that we do not follow PEP 257 or the www.python.org
    documentation recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: If you are contributing to SymPy for the first time, please read our [Introduction
    to Contributing](introduction-to-contributing.html) page as well as this guide.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four main locations where SymPy’s documentation can be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SymPy Website** [https://www.sympy.org/](https://www.sympy.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SymPy website’s primary function is to advertise the software to users
    and developers. It also serves as an initial location to point viewers to other
    relevant resources on the web. The SymPy website has basic information on SymPy
    and how to obtain it, as well as examples to advertise it to users, but it does
    not have technical documentation. The source files are located in the SymPy [webpage
    directory](https://github.com/sympy/sympy.github.com). Appropriate items for the
    website are:'
  prefs: []
  type: TYPE_NORMAL
- en: General descriptions of what SymPy and the SymPy community are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explanations/demonstrations of major software features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listings of other major software that uses SymPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started info for users (download and install instructions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started info for developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where users can get help and support on using SymPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: News about SymPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SymPy Documentation** [https://docs.sympy.org](https://docs.sympy.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the main place where users go to learn how to use SymPy. It contains
    a tutorial for SymPy as well as technical documentation for all of the modules.
    The source files are hosted in the main SymPy repository in the [doc directory](https://github.com/sympy/sympy/tree/master/doc)
    at and are built using the [Sphinx site generator](https://www.sphinx-doc.org/en/master/)
    and uploaded to the docs.sympy.org site automatically. There are two primary types
    of pages that are generated from different source files in the docs directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Narrative Pages: reStructuredText files that correspond to manually written
    documentation pages not present in the Python source code. Examples are the [tutorial
    RST files](https://github.com/sympy/sympy/tree/master/doc/src/tutorials). In general,
    if your documentation is not API documentation it belongs in a narrative page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'API Documentation Pages: reStructuredText files that contain directives that
    generate the Application Programming Interface documentation. These are automatically
    generated from the SymPy Python source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SymPy Source Code** [https://github.com/sympy/sympy](https://github.com/sympy/sympy)'
  prefs: []
  type: TYPE_NORMAL
- en: Most functions and classes have documentation written inside it in the form
    of a docstring, which explains the function and includes examples called doctests.
    The purpose of these docstrings are to explain the API of that class or function.
    The doctests examples are tested as part of the test suite, so that we know that
    they always produce the output that they say that they do. Here is an [example
    docstring](https://github.com/sympy/sympy/blob/b176f6a1d9890b42dc361857c887992315e3d5ad/sympy/functions/elementary/complexes.py#L22-L47).
    Most docstrings are also automatically included in the Sphinx documentation above,
    so that they appear on the SymPy Documentation website. Here is that [`same docstring`](../modules/functions/elementary.html#sympy.functions.elementary.complexes.im
    "sympy.functions.elementary.complexes.im") on the SymPy website. The docstrings
    are formatted in a specific way so that Sphinx can render them correctly for the
    docs website. The SymPy sources all contain sparse technical documentation in
    the form of source code comments, although this does not generally constitute
    anything substantial and is not displayed on the documentation website.
  prefs: []
  type: TYPE_NORMAL
- en: '**SymPy Wiki** [https://github.com/sympy/sympy/wiki](https://github.com/sympy/sympy/wiki)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SymPy Wiki can be edited by anyone without review. It contains various
    types of documentation, including:'
  prefs: []
  type: TYPE_NORMAL
- en: 'High-level developer documentation (for example: [https://github.com/sympy/sympy/wiki/Args-Invariant](https://github.com/sympy/sympy/wiki/Args-Invariant))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Release notes (for example: [https://github.com/sympy/sympy/wiki/Release-Notes-for-1.5](https://github.com/sympy/sympy/wiki/Release-Notes-for-1.5))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various pages that different contributors have added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Narrative Documentation Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extensive documentation, or documentation that is not centered around an API
    reference, should be written as a narrative document in the Sphinx docs (located
    in the [doc/src directory](https://github.com/sympy/sympy/tree/master/doc/src)).
    The narrative documents do not reside in the Python source files, but as standalone
    restructured files in the doc/src directory. SymPy’s narrative documentation is
    defined as the collective documents, tutorials, and guides that teach users how
    to use SymPy. Reference documentation should go in the docstrings and be pulled
    into the RST with autodoc. The RST itself should only have narrative style documentation
    that is not a reference for a single specific function.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation using Markdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Narrative documentation can be written using either Restructured Text (`.rst`)
    or Markdown (`.md`). Markdown documentation uses [MyST](https://myst-parser.readthedocs.io/en/latest/index.html).
    See [this guide](https://myst-parser.readthedocs.io/en/latest/syntax/syntax.html)
    for more information on how to write documents in Markdown. Markdown is only supported
    for narrative documentation. Docstrings should continue to use RST syntax. Any
    part of this style guide that is not specific to RST syntax should still apply
    to Markdown documents.
  prefs: []
  type: TYPE_NORMAL
- en: '## Best Practices for Writing Documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Please follow these formatting, style, and tone preferences when writing documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting Preferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for math and code to render correctly on the SymPy website, please
    follow these formatting guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Math'
  prefs: []
  type: TYPE_NORMAL
- en: Text that is surrounded by dollar signs $ _ $ will be rendered as LaTeX math.
    Any text that is meant to appear as LaTeX math should be written as `$math$`.
    In the HTML version of the docs, MathJax will render the math.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]  #### LaTeX Recommendations'
  prefs: []
  type: TYPE_NORMAL
- en: If a docstring has any LaTeX, be sure to make it “raw.” See the [Docstring Formatting](docstring.html#style-guide-docstring-formatting)
    section for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not sure how to render something, you can use the SymPy [`latex()`](../modules/printing.html#sympy.printing.latex.latex
    "sympy.printing.latex.latex") function. But be sure to strip out the unimportant
    parts (the bullet points below).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid unnecessary `\left` and `\right` (but be sure to use them when they are
    required).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid unnecessary `{}`. (For example, write `x^2` instead of `x^{2}`.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use whitespace in a way that makes the equation easiest to read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always check the final rendering to make sure it looks the way you expect it
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML documentation build will not fail if there is invalid math, but rather
    it will show as an error on the page. However, the PDF build, which is run on
    GitHub Actions on pull requests, will fail. If the LaTeX PDF build fails on CI,
    there is likely an issue with LaTeX math somewhere.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Incorrect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For more in-depth resources on how to write math in LaTeX, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikibooks.org/wiki/LaTeX/Mathematics](https://en.wikibooks.org/wiki/LaTeX/Mathematics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.overleaf.com/learn/latex/Mathematical_expressions](https://www.overleaf.com/learn/latex/Mathematical_expressions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Text that should be printed verbatim, such as code, should be surrounded by
    a set of double backticks `like this`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes a variable will be the same in both math and code, and can even appear
    in the same paragraph, making it difficult to know if it should be formatted as
    math or code. If the sentence in question is discussing mathematics, then LaTeX
    should be used, but if the sentence is discussing the SymPy implementation specifically,
    then code should be used.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the rule of thumb is to consider if the variable in question were
    something that rendered differently in code and in math. For example, the Greek
    letter α would be written as `alpha` in code and `$\alpha$` in LaTeX. The reason
    being that `$\alpha$` cannot be used in contexts referring to Python code because
    it is not valid Python, and conversely `alpha` would be incorrect in a math context
    because it does not render as the Greek letter (α).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Variables listed in the parameters after the function name should, in written
    text, be italicized using Sphinx emphasis with asterisks like `*this*`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the above example, the first instances of *n* and *k* are referring
    to the input parameters of the function `stirling`. Because they are Python variables
    but also parameters listed by themselves, they are formatted as parameters in
    italics. The last instances of \(n\) and \(k\) are talking about mathematical
    expressions, so they are formatted as math.
  prefs: []
  type: TYPE_NORMAL
- en: If a variable is code, but is also a parameter written by itself, the parameter
    formatting takes precedence and it should be rendered in italics. However, if
    a parameter appears in a larger code expression it should be within double backticks
    to be rendered as code. If a variable is only code and not a parameter as well,
    it should be in double backticks to be rendered as code.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that references to other functions in SymPy are handled differently
    from parameters or code. If something is referencing another function in SymPy,
    the cross-reference reStructuredText syntax should be used. See the section on
    [Cross-Referencing](docstring.html#style-guide-cross-referencing) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Headings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Section headings in reStructuredText files are created by underlining (and optionally
    overlining) the section title with a punctuation character at least as long as
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, there are no heading levels assigned to certain characters as the
    structure is determined from the succession of headings. However, for SymPy’s
    documentation, here is a suggested convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '`===` with overline: title (top level heading)'
  prefs: []
  type: TYPE_NORMAL
- en: '`===` heading 1'
  prefs: []
  type: TYPE_NORMAL
- en: '`---` heading 2'
  prefs: []
  type: TYPE_NORMAL
- en: '`^^^` heading 3'
  prefs: []
  type: TYPE_NORMAL
- en: '`~~~` heading 4'
  prefs: []
  type: TYPE_NORMAL
- en: '`"""` heading 5'
  prefs: []
  type: TYPE_NORMAL
- en: Style Preferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spelling and Punctuation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All narrative writing in SymPy follows American spelling and punctuation standards.
    For example, “color” is preferred over “colour” and commas should be placed inside
    of quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If there is any ambiguity about the spelling of a word, such as in the case
    of a function named after a person, refer to the spelling of the actual SymPy
    function.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Chebyshev polynomials are named after Pafnuty Lvovich Tchebychev,
    whose name is sometimes transliterated from Russian to be spelled with a “T,”
    but in SymPy it should always be spelled “Chebyshev” to refer to the SymPy function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Capitalization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Title case capitalization is preferred in all SymPy headings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tone Preferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Across SymPy documentation, please write in:'
  prefs: []
  type: TYPE_NORMAL
- en: The present tense (e.g., In the following section, we are going to learn…)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first-person inclusive plural (e.g., We did this the long way, but now we
    can try it the short way…)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the generic pronoun “you” instead of “one.” Or use “the reader” or “the
    user.” (e.g., You can access this function by… The user can then access this function
    by…)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the gender-neutral pronoun “they” instead of “he” or “she.” (e.g., A good
    docstring tells the user exactly what they need to know.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid extraneous or belittling words such as “obviously,” “easily,” “simply,”
    “just,” or “straightforward.”
  prefs: []
  type: TYPE_NORMAL
- en: Avoid unwelcoming or judgement-based phrases like “That is wrong.” Instead use
    friendly and inclusive language like “A common mistake is…”
  prefs: []
  type: TYPE_NORMAL
- en: Avoid extraneous phrases like, “we just have to do one more thing.”
  prefs: []
  type: TYPE_NORMAL
