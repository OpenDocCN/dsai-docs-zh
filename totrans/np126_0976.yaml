- en: Sorting, searching, and counting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.sort.html](https://numpy.org/doc/1.26/reference/routines.sort.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort")(a[, axis, kind, order])
    | Return a sorted copy of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lexsort`](generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort")(keys[, axis])
    | Perform an indirect stable sort using a sequence of keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](generated/numpy.argsort.html#numpy.argsort "numpy.argsort")(a[, axis, kind, order])
    | Returns the indices that would sort an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort_complex`](generated/numpy.sort_complex.html#numpy.sort_complex "numpy.sort_complex")(a)
    | Sort a complex array using the real part first, then the imaginary part. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition")(a, kth[, axis, kind, order])
    | Return a partitioned copy of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition "numpy.argpartition")(a, kth[, axis, kind, order])
    | Perform an indirect partition along the given axis using the algorithm specified
    by the *kind* keyword. |'
  prefs: []
  type: TYPE_TB
- en: Searching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax")(a[, axis, out, keepdims])
    | Returns the indices of the maximum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanargmax`](generated/numpy.nanargmax.html#numpy.nanargmax "numpy.nanargmax")(a[, axis, out, keepdims])
    | Return the indices of the maximum values in the specified axis ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin")(a[, axis, out, keepdims])
    | Returns the indices of the minimum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanargmin`](generated/numpy.nanargmin.html#numpy.nanargmin "numpy.nanargmin")(a[, axis, out, keepdims])
    | Return the indices of the minimum values in the specified axis ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argwhere`](generated/numpy.argwhere.html#numpy.argwhere "numpy.argwhere")(a)
    | Find the indices of array elements that are non-zero, grouped by element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero")(a)
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatnonzero`](generated/numpy.flatnonzero.html#numpy.flatnonzero "numpy.flatnonzero")(a)
    | Return indices that are non-zero in the flattened version of a. |'
  prefs: []
  type: TYPE_TB
- en: '| [`where`](generated/numpy.where.html#numpy.where "numpy.where")(condition, [x, y], /)
    | Return elements chosen from *x* or *y* depending on *condition*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")(a, v[, side, sorter])
    | Find indices where elements should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`extract`](generated/numpy.extract.html#numpy.extract "numpy.extract")(condition, arr)
    | Return the elements of an array that satisfy some condition. |'
  prefs: []
  type: TYPE_TB
- en: Counting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`count_nonzero`](generated/numpy.count_nonzero.html#numpy.count_nonzero
    "numpy.count_nonzero")(a[, axis, keepdims]) | Counts the number of non-zero values
    in the array `a`. |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort")(a[, axis, kind, order])
    | Return a sorted copy of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lexsort`](generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort")(keys[, axis])
    | Perform an indirect stable sort using a sequence of keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](generated/numpy.argsort.html#numpy.argsort "numpy.argsort")(a[, axis, kind, order])
    | Returns the indices that would sort an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort_complex`](generated/numpy.sort_complex.html#numpy.sort_complex "numpy.sort_complex")(a)
    | Sort a complex array using the real part first, then the imaginary part. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition")(a, kth[, axis, kind, order])
    | Return a partitioned copy of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition "numpy.argpartition")(a, kth[, axis, kind, order])
    | Perform an indirect partition along the given axis using the algorithm specified
    by the *kind* keyword. |'
  prefs: []
  type: TYPE_TB
- en: Searching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax")(a[, axis, out, keepdims])
    | Returns the indices of the maximum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanargmax`](generated/numpy.nanargmax.html#numpy.nanargmax "numpy.nanargmax")(a[, axis, out, keepdims])
    | Return the indices of the maximum values in the specified axis ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin")(a[, axis, out, keepdims])
    | Returns the indices of the minimum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanargmin`](generated/numpy.nanargmin.html#numpy.nanargmin "numpy.nanargmin")(a[, axis, out, keepdims])
    | Return the indices of the minimum values in the specified axis ignoring NaNs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`argwhere`](generated/numpy.argwhere.html#numpy.argwhere "numpy.argwhere")(a)
    | Find the indices of array elements that are non-zero, grouped by element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero")(a)
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatnonzero`](generated/numpy.flatnonzero.html#numpy.flatnonzero "numpy.flatnonzero")(a)
    | Return indices that are non-zero in the flattened version of a. |'
  prefs: []
  type: TYPE_TB
- en: '| [`where`](generated/numpy.where.html#numpy.where "numpy.where")(condition, [x, y], /)
    | Return elements chosen from *x* or *y* depending on *condition*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")(a, v[, side, sorter])
    | Find indices where elements should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`extract`](generated/numpy.extract.html#numpy.extract "numpy.extract")(condition, arr)
    | Return the elements of an array that satisfy some condition. |'
  prefs: []
  type: TYPE_TB
- en: Counting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`count_nonzero`](generated/numpy.count_nonzero.html#numpy.count_nonzero
    "numpy.count_nonzero")(a[, axis, keepdims]) | Counts the number of non-zero values
    in the array `a`. |'
  prefs: []
  type: TYPE_TB
