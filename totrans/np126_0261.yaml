- en: The numpy.ma module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ma 模块
- en: 原文：[https://numpy.org/doc/1.26/reference/maskedarray.generic.html](https://numpy.org/doc/1.26/reference/maskedarray.generic.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/maskedarray.generic.html](https://numpy.org/doc/1.26/reference/maskedarray.generic.html)
- en: Rationale
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原因
- en: Masked arrays are arrays that may have missing or invalid entries. The [`numpy.ma`](#module-numpy.ma
    "numpy.ma") module provides a nearly work-alike replacement for numpy that supports
    data arrays with masks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组是可能具有缺失或无效条目的数组。[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块提供了一个几乎与 numpy
    类似的替代品，支持带有掩码的数据数组。
- en: What is a masked array?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是掩码数组？
- en: In many circumstances, datasets can be incomplete or tainted by the presence
    of invalid data. For example, a sensor may have failed to record a data, or recorded
    an invalid value. The [`numpy.ma`](#module-numpy.ma "numpy.ma") module provides
    a convenient way to address this issue, by introducing masked arrays.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，数据集可能是不完整的或受到无效数据的影响。例如，传感器可能未能记录数据，或记录了无效值。[`numpy.ma`](#module-numpy.ma
    "numpy.ma") 模块通过引入掩码数组提供了一种方便的解决此问题的方式。
- en: A masked array is the combination of a standard [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") and a mask. A mask is either [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask"), indicating that no value of the associated array is invalid,
    or an array of booleans that determines for each element of the associated array
    whether the value is valid or not. When an element of the mask is `False`, the
    corresponding element of the associated array is valid and is said to be unmasked.
    When an element of the mask is `True`, the corresponding element of the associated
    array is said to be masked (invalid).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组是标准[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")和掩码的组合。掩码可以是[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，表示关联数组的没有值是无效的，或者是一个布尔数组，用于确定关联数组的每个元素是否有效。当掩码的元素为`False`时，关联数组的相应元素是有效的，称为未掩码。当掩码的元素为`True`时，关联数组的相应元素被称为掩码（无效）。
- en: The package ensures that masked entries are not used in computations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 该包确保不使用掩码条目进行计算。
- en: 'As an illustration, let’s consider the following dataset:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们考虑以下数据集：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We wish to mark the fourth entry as invalid. The easiest is to create a masked
    array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将第四个条目标记为无效。最简单的方法是创建一个掩码数组：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now compute the mean of the dataset, without taking the invalid data
    into account:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以计算数据集的均值，而不考虑无效数据：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The [`numpy.ma`](#module-numpy.ma "numpy.ma") module
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块'
- en: The main feature of the [`numpy.ma`](#module-numpy.ma "numpy.ma") module is
    the [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    class, which is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"). The class, its attributes and methods are described in more
    details in the [MaskedArray class](maskedarray.baseclass.html#maskedarray-baseclass)
    section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块的主要特点是[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray") 类，它是[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类。该类及其属性和方法在[MaskedArray 类](maskedarray.baseclass.html#maskedarray-baseclass)部分中有更详细的描述。'
- en: 'The [`numpy.ma`](#module-numpy.ma "numpy.ma") module can be used as an addition
    to [`numpy`](index.html#module-numpy "numpy"):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块可以作为[`numpy`](index.html#module-numpy
    "numpy")的补充使用：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To create an array with the second element invalid, we would do:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个使第二个元素无效的数组，我们可以这样做：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To create a masked array where all values close to 1.e20 are invalid, we would
    do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个所有接近 1.e20 的值无效的掩码数组，我们可以这样做：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For a complete discussion of creation methods for masked arrays please see section
    [Constructing masked arrays](#maskedarray-generic-constructing).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建掩码数组的方法的完整讨论，请参见[构建掩码数组](#maskedarray-generic-constructing)部分。
- en: Rationale
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原因
- en: Masked arrays are arrays that may have missing or invalid entries. The [`numpy.ma`](#module-numpy.ma
    "numpy.ma") module provides a nearly work-alike replacement for numpy that supports
    data arrays with masks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组是可能具有缺失或无效条目的数组。[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块提供了一个几乎与 numpy
    类似的替代品，支持带有掩码的数据数组。
- en: What is a masked array?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是掩码数组？
- en: In many circumstances, datasets can be incomplete or tainted by the presence
    of invalid data. For example, a sensor may have failed to record a data, or recorded
    an invalid value. The [`numpy.ma`](#module-numpy.ma "numpy.ma") module provides
    a convenient way to address this issue, by introducing masked arrays.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，数据集可能是不完整的或受到无效数据的影响。例如，传感器可能未能记录数据，或记录了无效值。[`numpy.ma`](#module-numpy.ma
    "numpy.ma")模块通过引入掩码数组提供了一种方便的解决此问题的方式。
- en: A masked array is the combination of a standard [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") and a mask. A mask is either [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask"), indicating that no value of the associated array is invalid,
    or an array of booleans that determines for each element of the associated array
    whether the value is valid or not. When an element of the mask is `False`, the
    corresponding element of the associated array is valid and is said to be unmasked.
    When an element of the mask is `True`, the corresponding element of the associated
    array is said to be masked (invalid).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个掩码数组是标准[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")和一个掩码的组合。掩码可以是[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，表示关联数组的没有值是无效的，或者是一个布尔数组，用于确定关联数组的每个元素是否有效。当掩码的元素为`False`时，关联数组的相应元素是有效的，称为未掩码。当掩码的元素为`True`时，关联数组的相应元素被称为掩码（无效）。
- en: The package ensures that masked entries are not used in computations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该包确保不使用掩码条目进行计算。
- en: 'As an illustration, let’s consider the following dataset:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们考虑以下数据集：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We wish to mark the fourth entry as invalid. The easiest is to create a masked
    array:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将第四个条目标记为无效。最简单的方法是创建一个掩码数组：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now compute the mean of the dataset, without taking the invalid data
    into account:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以计算数据集的均值，而不考虑无效数据：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The [`numpy.ma`](#module-numpy.ma "numpy.ma") module
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma")模块'
- en: The main feature of the [`numpy.ma`](#module-numpy.ma "numpy.ma") module is
    the [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    class, which is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"). The class, its attributes and methods are described in more
    details in the [MaskedArray class](maskedarray.baseclass.html#maskedarray-baseclass)
    section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma")模块的主要特点是[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray")类，它是[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类。该类及其属性和方法在[MaskedArray类](maskedarray.baseclass.html#maskedarray-baseclass)部分有更详细的描述。'
- en: 'The [`numpy.ma`](#module-numpy.ma "numpy.ma") module can be used as an addition
    to [`numpy`](index.html#module-numpy "numpy"):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma")模块可以作为[`numpy`](index.html#module-numpy
    "numpy")的补充使用：'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To create an array with the second element invalid, we would do:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个第二个元素无效的数组，我们可以这样做：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To create a masked array where all values close to 1.e20 are invalid, we would
    do:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个掩码数组，其中所有接近`1.e20`的值都是无效的，我们可以这样做：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For a complete discussion of creation methods for masked arrays please see section
    [Constructing masked arrays](#maskedarray-generic-constructing).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建掩码数组的方法的完整讨论，请参见[构建掩码数组](#maskedarray-generic-constructing)部分。
- en: Using numpy.ma
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用numpy.ma
- en: '## Constructing masked arrays'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '## 构建掩码数组'
- en: There are several ways to construct a masked array.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以构建掩码数组。
- en: A first possibility is to directly invoke the [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray") class.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种可能性是直接调用[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")类。
- en: A second possibility is to use the two masked array constructors, [`array`](generated/numpy.ma.array.html#numpy.ma.array
    "numpy.ma.array") and [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array").
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种可能性是使用两个掩码数组构造函数，[`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")和[`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array")。
- en: '| [`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | 一个可能包含掩码值的数组类。 |'
- en: '| [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | `MaskedArray`的别名 |'
- en: A third option is to take the view of an existing array. In that case, the mask
    of the view is set to [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    if the array has no named fields, or an array of boolean with the same structure
    as the array otherwise.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项是查看现有数组的视图。在这种情况下，如果数组没有命名字段，则视图的掩码设置为[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，否则为与数组结构相同的布尔数组。
- en: '[PRE12]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Yet another possibility is to use any of the following functions:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种可能性是使用以下任一函数：
- en: '| [`asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | 将输入转换为给定数据类型的掩码数组。 |'
- en: '| [`asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray "numpy.ma.asanyarray")(a[, dtype])
    | Convert the input to a masked array, conserving subclasses. |'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray "numpy.ma.asanyarray")(a[, dtype])
    | 将输入转换为掩码数组，保留子类。 |'
- en: '| [`fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | 返回输入，使无效数据被掩码并替换为填充值。 |'
- en: '| [`masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | 掩码一个等于给定值的数组。 |'
- en: '| [`masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | 掩码一个大于给定值的数组。 |'
- en: '| [`masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | 掩码一个大于或等于给定值的数组。 |'
- en: '| [`masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | 掩码在给定区间内的数组。 |'
- en: '| [`masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | 掩码出现无效值（NaN或infs）的数组。 |'
- en: '| [`masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | 掩码一个小于给定值的数组。 |'
- en: '| [`masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | 掩码一个小于或等于给定值的数组。 |'
- en: '| [`masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | 掩码一个*不*等于给定值的数组。 |'
- en: '| [`masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | 掩码数组*x*，其中数据与值完全相等。 |'
- en: '| [`masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | 掩码在给定区间外的数组。 |'
- en: '| [`masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, copy, ...]) | Mask using floating
    point equality. |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, copy, ...]) | 使用浮点数相等性进行掩码。 |'
- en: '| [`masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | 在满足条件的情况下掩盖数组。 |'
- en: Accessing the data
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: 'The underlying data of a masked array can be accessed in several ways:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多种方式访问掩码数组的底层数据：
- en: through the [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data")
    attribute. The output is a view of the array as a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or one of its subclasses, depending on the type of the underlying
    data at the masked array creation.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data")属性。输出为[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")或其子类的视图，取决于掩码数组创建时底层数据的类型。
- en: through the [`__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__") method. The output is then a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")方法。然后输出为[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")。
- en: by directly taking a view of the masked array as a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or one of its subclass (which is actually what using the [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") attribute does).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接将掩码数组视为[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")或其子类之一（实际上使用[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")属性时的操作）。
- en: by using the [`getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")
    function.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")函数。
- en: None of these methods is completely satisfactory if some entries have been marked
    as invalid. As a general rule, where a representation of the array is required
    without any masked entries, it is recommended to fill the array with the [`filled`](generated/numpy.ma.filled.html#numpy.ma.filled
    "numpy.ma.filled") method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些条目被标记为无效，则这些方法都不完全令人满意。一般规则是，在需要表示数组而没有任何掩码条目的情况下，建议使用[`filled`](generated/numpy.ma.filled.html#numpy.ma.filled
    "numpy.ma.filled")方法填充数组。
- en: Accessing the mask
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问掩码
- en: The mask of a masked array is accessible through its [`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") attribute. We must keep in mind that a `True` entry
    in the mask indicates an *invalid* data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组的掩码可通过其[`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask")属性访问。必须记住，掩码中的`True`条目表示*无效*数据。
- en: Another possibility is to use the [`getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask
    "numpy.ma.getmask") and [`getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray") functions. `getmask(x)` outputs the mask of `x` if `x`
    is a masked array, and the special value [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") otherwise. `getmaskarray(x)` outputs the mask of `x` if `x`
    is a masked array. If `x` has no invalid entry or is not a masked array, the function
    outputs a boolean array of `False` with as many elements as `x`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是使用[`getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")和[`getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")函数。如果`x`是掩码数组，则`getmask(x)`输出`x`的掩码，否则输出特殊值[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")。如果`x`没有无效条目或不是掩码数组，则该函数输出一个具有与`x`相同数量元素的`False`布尔数组。
- en: Accessing only the valid entries
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅访问有效条目
- en: 'To retrieve only the valid entries, we can use the inverse of the mask as an
    index. The inverse of the mask can be calculated with the [`numpy.logical_not`](generated/numpy.logical_not.html#numpy.logical_not
    "numpy.logical_not") function or simply with the `~` operator:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅检索有效条目，可以使用掩码的反向作为索引。可以使用[`numpy.logical_not`](generated/numpy.logical_not.html#numpy.logical_not
    "numpy.logical_not")函数或简单地使用`~`运算符来计算掩码的反向：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Another way to retrieve the valid data is to use the [`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed") method, which returns a one-dimensional [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") (or one of its subclasses, depending on the value of the [`baseclass`](maskedarray.baseclass.html#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检索有效数据的方法是使用[`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")方法，它返回一个一维[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")（或其子类之一，取决于[`baseclass`](maskedarray.baseclass.html#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass")属性的值）：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that the output of [`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed") is always 1D.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed "numpy.ma.compressed")的输出始终为1D。
- en: Modifying the mask
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改掩码
- en: Masking an entry
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 屏蔽条目
- en: 'The recommended way to mark one or several specific entries of a masked array
    as invalid is to assign the special value [`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked") to them:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个特定条目标记为无效的推荐方法是将特殊值[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")分配给它们：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A second possibility is to modify the [`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") directly, but this usage is discouraged.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种可能性是直接修改[`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask")，但不建议使用此方法。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When creating a new masked array with a simple, non-structured datatype, the
    mask is initially set to the special value [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask"), that corresponds roughly to the boolean `False`. Trying to
    set an element of [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    will fail with a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.11)") exception, as a boolean does not support item assignment.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用简单的非结构化数据类型创建新的掩码数组时，掩码最初设置为特殊值[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，大致对应于布尔值`False`。尝试设置[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")的元素将导致[`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(在Python v3.11)")异常，因为布尔值不支持项目赋值。
- en: 'All the entries of an array can be masked at once by assigning `True` to the
    mask:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将`True`赋值给掩码来一次性屏蔽数组的所有条目：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, specific entries can be masked and/or unmasked by assigning to the
    mask a sequence of booleans:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以通过将一系列布尔值赋给掩码来屏蔽和/或解除屏蔽特定条目：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Unmasking an entry
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解除掩码的条目
- en: 'To unmask one or several specific entries, we can just assign one or several
    new valid values to them:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要解除一个或多个特定条目的掩码，我们只需将一个或多个新的有效值分配给它们：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Unmasking an entry by direct assignment will silently fail if the masked array
    has a *hard* mask, as shown by the [`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask") attribute. This feature was introduced to prevent
    overwriting the mask. To force the unmasking of an entry where the array has a
    hard mask, the mask must first to be softened using the [`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask") method before the allocation. It can be re-hardened with
    [`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask "numpy.ma.harden_mask"):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 直接赋值解除掩码的条目，如果掩码数组有*硬*掩码，则会悄悄失败，如[`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask")属性所示。此功能是为了防止覆盖掩码。要强制解除数组具有硬掩码的条目的掩码，必须首先使用[`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")方法软化掩码，然后再分配。可以使用[`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")重新硬化：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To unmask all masked entries of a masked array (provided the mask isn’t a hard
    mask), the simplest solution is to assign the constant [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") to the mask:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要解除掩码数组的所有屏蔽条目（前提是掩码不是硬掩码），最简单的解决方案是将常量[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")分配给掩码：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Indexing and slicing
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片
- en: As a [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it inherits its mechanisms for indexing and slicing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")是[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类，它继承了其用于索引和切片的机制。
- en: 'When accessing a single entry of a masked array with no named fields, the output
    is either a scalar (if the corresponding entry of the mask is `False`) or the
    special value [`masked`](maskedarray.baseclass.html#numpy.ma.masked "numpy.ma.masked")
    (if the corresponding entry of the mask is `True`):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问没有命名字段的掩码数组的单个条目时，输出要么是一个标量（如果掩码的对应条目为`False`），要么是特殊值[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")（如果掩码的对应条目为`True`）：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If the masked array has named fields, accessing a single entry returns a [`numpy.void`](arrays.scalars.html#numpy.void
    "numpy.void") object if none of the fields are masked, or a 0d masked array with
    the same dtype as the initial array if at least one of the fields is masked.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果掩码数组具有命名字段，访问单个条目会返回一个[`numpy.void`](arrays.scalars.html#numpy.void "numpy.void")对象，如果没有字段被掩码，或者如果至少有一个字段被掩码，则返回一个与初始数组相同dtype的0d掩码数组。
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When accessing a slice, the output is a masked array whose [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") attribute is a view of the original data, and whose
    mask is either [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    (if there was no invalid entries in the original array) or a view of the corresponding
    slice of the original mask. The view is required to ensure propagation of any
    modification of the mask to the original.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问切片时，输出是一个掩码数组，其[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")属性是原始数据的视图，其掩码要么是[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")（如果原始数组中没有无效条目），要么是原始掩码对应切片的视图。视图是必需的，以确保任何对掩码的修改传播到原始数据。
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Accessing a field of a masked array with structured datatype returns a [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray").
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有结构化数据类型的掩码数组的字段会返回一个[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray")。
- en: Operations on masked arrays
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掩码数组的操作
- en: Arithmetic and comparison operations are supported by masked arrays. As much
    as possible, invalid entries of a masked array are not processed, meaning that
    the corresponding [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") entries *should* be the same before and after the
    operation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组支持算术和比较操作。尽可能地，掩码数组的无效条目不会被处理，这意味着相应的[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")条目在操作之前和之后*应该*是相同的。
- en: Warning
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: We need to stress that this behavior may not be systematic, that masked data
    may be affected by the operation in some cases and therefore users should not
    rely on this data remaining unchanged.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要强调这种行为可能不是系统的，掩码数据在某些情况下可能会受到操作的影响，因此用户不应依赖于这些数据保持不变。
- en: 'The [`numpy.ma`](#module-numpy.ma "numpy.ma") module comes with a specific
    implementation of most ufuncs. Unary and binary functions that have a validity
    domain (such as [`log`](generated/numpy.log.html#numpy.log "numpy.log") or [`divide`](generated/numpy.divide.html#numpy.divide
    "numpy.divide")) return the [`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked") constant whenever the input is masked or falls outside the
    validity domain:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma")模块提供了大多数ufunc的特定实现。具有有效域的一元和二元函数（如[`log`](generated/numpy.log.html#numpy.log
    "numpy.log")或[`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")）在输入被掩码或超出有效域时返回[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")常量：'
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Masked arrays also support standard numpy ufuncs. The output is then a masked
    array. The result of a unary ufunc is masked wherever the input is masked. The
    result of a binary ufunc is masked wherever any of the input is masked. If the
    ufunc also returns the optional context output (a 3-element tuple containing the
    name of the ufunc, its arguments and its domain), the context is processed and
    entries of the output masked array are masked wherever the corresponding input
    fall outside the validity domain:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组还支持标准的numpy ufuncs。输出结果是一个掩码数组。一元ufunc的结果在输入被掩码的地方也被掩码。二元ufunc的结果在任何输入被掩码的地方也被掩码。如果ufunc还返回可选的上下文输出（包含ufunc名称、其参数和其域的3元组），则上下文被处理，并且输出掩码数组的条目在对应的输入超出有效域的地方被掩码：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '## Constructing masked arrays'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '## 构建掩码数组'
- en: There are several ways to construct a masked array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种构建掩码数组的方法。
- en: A first possibility is to directly invoke the [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray") class.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种可能性是直接调用[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")类。
- en: A second possibility is to use the two masked array constructors, [`array`](generated/numpy.ma.array.html#numpy.ma.array
    "numpy.ma.array") and [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array").
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种可能性是使用两个掩码数组构造函数，[`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")
    和 [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array")。
- en: '| [`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | 具有可能存在掩码值的数组类。 |'
- en: '| [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | `MaskedArray` 的别名 |'
- en: A third option is to take the view of an existing array. In that case, the mask
    of the view is set to [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    if the array has no named fields, or an array of boolean with the same structure
    as the array otherwise.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三种选择是查看现有数组的视图。在这种情况下，如果数组没有命名字段，则视图的掩码设置为 [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，否则��数组结构相同的布尔数组。
- en: '[PRE26]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Yet another possibility is to use any of the following functions:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有另一种可能性是使用以下任一函数之一：
- en: '| [`asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | 将输入转换为给定数据类型的掩码数组。 |'
- en: '| [`asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray "numpy.ma.asanyarray")(a[, dtype])
    | Convert the input to a masked array, conserving subclasses. |'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray "numpy.ma.asanyarray")(a[, dtype])
    | 将输入转换为掩码数组，保留子类。 |'
- en: '| [`fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | 返回通过掩码和用填充值替换的无效数据的输入。
    |'
- en: '| [`masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | 对等于给定值的数组进行掩码处理。 |'
- en: '| [`masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | 对大于给定值的数组进行掩码处理。 |'
- en: '| [`masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | 对大于或等于给定值的数组进行掩码处理。 |'
- en: '| [`masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | 对给定区间内的数组进行掩码处理。 |'
- en: '| [`masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | 对出现无效值（NaN 或 inf）的数组进行掩码处理。 |'
- en: '| [`masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | 对小于给定值的数组进行掩码处理。 |'
- en: '| [`masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | 对小于或等于给定值的数组进行掩码处理。 |'
- en: '| [`masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | 对不等于给定值的数组进行掩码处理。 |'
- en: '| [`masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | 对数组*x*中数据完全等于value的部分进行掩码处理。
    |'
- en: '| [`masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | 对给定区间外的数组进行掩码处理。 |'
- en: '| [`masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, copy, ...]) | Mask using floating
    point equality. |'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, copy, ...]) | 使用浮点数相等性进行掩码处理。
    |'
- en: '| [`masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| [`masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | 在满足条件的情况下对数组进行掩码处理。 |'
- en: Accessing the data
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: 'The underlying data of a masked array can be accessed in several ways:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组的底层数据可以通过多种方式访问：
- en: through the [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data")
    attribute. The output is a view of the array as a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or one of its subclasses, depending on the type of the underlying
    data at the masked array creation.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data")属性。输出是数组的视图，作为[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")或其子类之一，取决于创建掩码数组时底层数据的类型。
- en: through the [`__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__") method. The output is then a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")方法。输出是一个[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")。
- en: by directly taking a view of the masked array as a [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or one of its subclass (which is actually what using the [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") attribute does).
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过直接将掩码数组视为[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")或其子类之一（实际上使用[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")属性时所做的操作）。
- en: by using the [`getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")
    function.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用[`getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")函数。
- en: None of these methods is completely satisfactory if some entries have been marked
    as invalid. As a general rule, where a representation of the array is required
    without any masked entries, it is recommended to fill the array with the [`filled`](generated/numpy.ma.filled.html#numpy.ma.filled
    "numpy.ma.filled") method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一些条目被标记为无效，则这些方法都不完全令人满意。一般规则是，在需要没有任何掩码条目的数组表示时，建议使用[`filled`](generated/numpy.ma.filled.html#numpy.ma.filled
    "numpy.ma.filled")方法填充数组。
- en: Accessing the mask
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问掩码
- en: The mask of a masked array is accessible through its [`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") attribute. We must keep in mind that a `True` entry
    in the mask indicates an *invalid* data.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组的掩码通过其[`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask")属性可访问。我们必须记住，掩码中的`True`条目表示*无效*数据。
- en: Another possibility is to use the [`getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask
    "numpy.ma.getmask") and [`getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray") functions. `getmask(x)` outputs the mask of `x` if `x`
    is a masked array, and the special value [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") otherwise. `getmaskarray(x)` outputs the mask of `x` if `x`
    is a masked array. If `x` has no invalid entry or is not a masked array, the function
    outputs a boolean array of `False` with as many elements as `x`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是使用[`getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")和[`getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")函数。如果*x*是一个掩码数组，`getmask(x)`输出*x*的掩码，否则输出特殊值[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")。`getmaskarray(x)`输出*x*的掩码，如果*x*是一个掩码数组。如果*x*没有无效条目或不是一个掩码数组，则该函数输出一个具有与*x*相同数量元素的`False`布尔数组。
- en: Accessing only the valid entries
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅访问有效条目
- en: 'To retrieve only the valid entries, we can use the inverse of the mask as an
    index. The inverse of the mask can be calculated with the [`numpy.logical_not`](generated/numpy.logical_not.html#numpy.logical_not
    "numpy.logical_not") function or simply with the `~` operator:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅检索有效条目，我们可以使用遮罩的反向作为索引。可以使用[`numpy.logical_not`](generated/numpy.logical_not.html#numpy.logical_not
    "numpy.logical_not")函数或简单地使用`~`运算符计算遮罩的反向：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Another way to retrieve the valid data is to use the [`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed") method, which returns a one-dimensional [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") (or one of its subclasses, depending on the value of the [`baseclass`](maskedarray.baseclass.html#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 检索有效数据的另一种方法是使用[`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")方法，该方法返回一个一维[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")（或其子类之一，取决于[`baseclass`](maskedarray.baseclass.html#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass")属性的值）：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that the output of [`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed") is always 1D.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed "numpy.ma.compressed")的输出始终为1D。
- en: Modifying the mask
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改遮罩
- en: Masking an entry
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遮罩一个条目
- en: 'The recommended way to mark one or several specific entries of a masked array
    as invalid is to assign the special value [`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked") to them:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的标记一个或多个特定条目为无效的遮罩数组的方法是将特殊值[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")分配给它们：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: A second possibility is to modify the [`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") directly, but this usage is discouraged.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种可能性是直接修改[`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask")，但不建议使用此用法。
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When creating a new masked array with a simple, non-structured datatype, the
    mask is initially set to the special value [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask"), that corresponds roughly to the boolean `False`. Trying to
    set an element of [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    will fail with a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.11)") exception, as a boolean does not support item assignment.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用简单的非结构化数据类型创建新的遮罩数组时，遮罩最初设置为特殊值[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，大致对应于布尔值`False`。尝试设置[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")的元素将导致[`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(在Python v3.11)")异常，因为布尔值不支持项目分配。
- en: 'All the entries of an array can be masked at once by assigning `True` to the
    mask:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将`True`分配给遮罩一次性遮罩数组的所有条目：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, specific entries can be masked and/or unmasked by assigning to the
    mask a sequence of booleans:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以通过将一系列布尔值分配给掩码来遮罩和/或取消遮罩特定条目：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Unmasking an entry
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 取消遮罩一个条目
- en: 'To unmask one or several specific entries, we can just assign one or several
    new valid values to them:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消遮罩一个或多个特定条目，只需将一个或多个新的有效值分配给它们：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Unmasking an entry by direct assignment will silently fail if the masked array
    has a *hard* mask, as shown by the [`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask") attribute. This feature was introduced to prevent
    overwriting the mask. To force the unmasking of an entry where the array has a
    hard mask, the mask must first to be softened using the [`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask") method before the allocation. It can be re-hardened with
    [`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask "numpy.ma.harden_mask"):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接分配来取消遮罩一个条目，如果遮罩数组有*硬*遮罩，将会悄无声息地失败，如[`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask")属性所示。此功能是为了防止覆盖遮罩而引入的。要强制取消遮罩一个条目，其中数组有硬遮罩，必须首先使用[`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")方法软化遮罩，然后再分配。可以使用[`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")重新硬化：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To unmask all masked entries of a masked array (provided the mask isn’t a hard
    mask), the simplest solution is to assign the constant [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") to the mask:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消遮罩遮罩数组的所有遮罩条目（假设遮罩不是硬遮罩），最简单的解决方案是将常量[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")分配给遮罩：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Masking an entry
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遮罩一个条目
- en: 'The recommended way to mark one or several specific entries of a masked array
    as invalid is to assign the special value [`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked") to them:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个特定条目标记为无效的推荐方法是将特殊值[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")分配给它们：
- en: '[PRE35]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A second possibility is to modify the [`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") directly, but this usage is discouraged.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种可能性是直接修改[`mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask")，但不建议这样使用。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When creating a new masked array with a simple, non-structured datatype, the
    mask is initially set to the special value [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask"), that corresponds roughly to the boolean `False`. Trying to
    set an element of [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    will fail with a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(in Python v3.11)") exception, as a boolean does not support item assignment.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用简单的非结构化数据类型创建新的掩盖数组时，掩盖最初设置为特殊值[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")，大致对应于布尔值`False`。尝试设置[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")的元素将导致[`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError
    "(在 Python v3.11 中)")异常，因为布尔值不支持项目分配。
- en: 'All the entries of an array can be masked at once by assigning `True` to the
    mask:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将`True`分配给掩盖来一次性掩盖数组的所有条目：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, specific entries can be masked and/or unmasked by assigning to the
    mask a sequence of booleans:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以通过将一系列布尔值分配给掩盖来掩盖和/或取消掩盖特定条目：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Unmasking an entry
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 取消掩盖一个条目
- en: 'To unmask one or several specific entries, we can just assign one or several
    new valid values to them:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消掩盖一个或多个特定条目，我们只需将一个或多个新的有效值分配给它们：
- en: '[PRE38]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Unmasking an entry by direct assignment will silently fail if the masked array
    has a *hard* mask, as shown by the [`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask") attribute. This feature was introduced to prevent
    overwriting the mask. To force the unmasking of an entry where the array has a
    hard mask, the mask must first to be softened using the [`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask") method before the allocation. It can be re-hardened with
    [`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask "numpy.ma.harden_mask"):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果掩盖数组具有*硬*掩盖，则通过直接分配取消掩盖一个条目将悄悄失败，如[`hardmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.hardmask
    "numpy.ma.MaskedArray.hardmask")属性所示。此功能旨在防止覆盖掩盖。要强制取消掩盖数组具有硬掩盖的条目，必须首先使用[`soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")方法软化掩盖，然后再分配。可以使用[`harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")重新硬化：
- en: '[PRE39]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To unmask all masked entries of a masked array (provided the mask isn’t a hard
    mask), the simplest solution is to assign the constant [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") to the mask:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消掩盖数组的所有掩盖条目（假设掩盖不是硬掩盖），最简单的解决方案是将常量[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")分配给掩盖：
- en: '[PRE40]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Indexing and slicing
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和切片
- en: As a [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it inherits its mechanisms for indexing and slicing.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray "numpy.ma.MaskedArray")是[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类，它继承了其用于索引和切片的机制。
- en: 'When accessing a single entry of a masked array with no named fields, the output
    is either a scalar (if the corresponding entry of the mask is `False`) or the
    special value [`masked`](maskedarray.baseclass.html#numpy.ma.masked "numpy.ma.masked")
    (if the corresponding entry of the mask is `True`):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问没有命名字段的掩盖数组的单个条目时，输出要么是标量（如果掩盖的相应条目为`False`），要么是特殊值[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")（如果掩盖的相应条目为`True`）：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If the masked array has named fields, accessing a single entry returns a [`numpy.void`](arrays.scalars.html#numpy.void
    "numpy.void") object if none of the fields are masked, or a 0d masked array with
    the same dtype as the initial array if at least one of the fields is masked.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果掩盖数组具有命名字段，访问单个条目将返回一个[`numpy.void`](arrays.scalars.html#numpy.void "numpy.void")对象，如果没有字段被掩盖，或者如果至少有一个字段被掩盖，则返回一个与初始数组相同dtype的0d掩盖数组。
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: When accessing a slice, the output is a masked array whose [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") attribute is a view of the original data, and whose
    mask is either [`nomask`](maskedarray.baseclass.html#numpy.ma.nomask "numpy.ma.nomask")
    (if there was no invalid entries in the original array) or a view of the corresponding
    slice of the original mask. The view is required to ensure propagation of any
    modification of the mask to the original.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问一个切片时，输出是一个掩码数组，其[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")属性是原始数据的视图，其掩码要么是[`nomask`](maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask")（如果原始数组中没有无效条目），要么是原始掩码对应切片的视图。视图是必需的，以确保任何对掩码的修改传播到原始数据。
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Accessing a field of a masked array with structured datatype returns a [`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray").
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用结构化数据类型的掩码数组访问字段会返回一个[`MaskedArray`](maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray")。
- en: Operations on masked arrays
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作掩码数组
- en: Arithmetic and comparison operations are supported by masked arrays. As much
    as possible, invalid entries of a masked array are not processed, meaning that
    the corresponding [`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") entries *should* be the same before and after the
    operation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组支持算术和比较运算。尽可能地，掩码数组的无效条目不会被处理，这意味着相应的[`data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data")条目在操作前后*应该*是相同的。
- en: Warning
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: We need to stress that this behavior may not be systematic, that masked data
    may be affected by the operation in some cases and therefore users should not
    rely on this data remaining unchanged.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要强调这种行为可能不是系统性的，在某些情况下掩码数据可能会受到操作的影响，因此用户不应依赖于这些数据保持不变。
- en: 'The [`numpy.ma`](#module-numpy.ma "numpy.ma") module comes with a specific
    implementation of most ufuncs. Unary and binary functions that have a validity
    domain (such as [`log`](generated/numpy.log.html#numpy.log "numpy.log") or [`divide`](generated/numpy.divide.html#numpy.divide
    "numpy.divide")) return the [`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked") constant whenever the input is masked or falls outside the
    validity domain:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ma`](#module-numpy.ma "numpy.ma") 模块提供了大多数 ufuncs 的特定实现。具有有效域的一元和二元函数（如[`log`](generated/numpy.log.html#numpy.log
    "numpy.log")或[`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")）在输入被掩码或超出有效域时返回[`masked`](maskedarray.baseclass.html#numpy.ma.masked
    "numpy.ma.masked")常量：'
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Masked arrays also support standard numpy ufuncs. The output is then a masked
    array. The result of a unary ufunc is masked wherever the input is masked. The
    result of a binary ufunc is masked wherever any of the input is masked. If the
    ufunc also returns the optional context output (a 3-element tuple containing the
    name of the ufunc, its arguments and its domain), the context is processed and
    entries of the output masked array are masked wherever the corresponding input
    fall outside the validity domain:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组还支持标准的 numpy ufuncs。输出是一个掩码数组。一元ufunc的结果在输入被掩码的地方也被掩码。二元ufunc的结果在任何输入被掩码的地方也被掩码。如果ufunc还返回可选的上下文输出（包含ufunc名称、其参数和其域的3元组），则上下文会被处理，并且输出掩码数组的条目在对应输入超出有效域的地方也被掩码：
- en: '[PRE45]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Examples
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: Data with a given value representing missing data
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有表示缺失数据的给定值的数据
- en: 'Let’s consider a list of elements, `x`, where values of -9999\. represent missing
    data. We wish to compute the average value of the data and the vector of anomalies
    (deviations from the average):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个元素列表 `x`，其中值为 -9999 代表缺失数据。我们希望计算数据的平均值和异常向量（与平均值的偏差）：
- en: '[PRE46]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Filling in the missing data
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填补缺失数据
- en: Suppose now that we wish to print that same data, but with the missing values
    replaced by the average value.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们希望打印相同的数据，但将缺失值替换为平均值。
- en: '[PRE47]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Numerical operations
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值运算
- en: 'Numerical operations can be easily performed without worrying about missing
    values, dividing by zero, square roots of negative numbers, etc.:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 数值运算可以轻松进行，无需担心缺失值、除以零、负数的平方根等问题：
- en: '[PRE48]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Four values of the output are invalid: the first one comes from taking the
    square root of a negative number, the second from the division by zero, and the
    last two where the inputs were masked.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的四个值是无效的：第一个来自对负数取平方根，第二个来自除以零，最后两个是输入被掩码的情况。
- en: Ignoring extreme values
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忽略极端值
- en: 'Let’s consider an array `d` of floats between 0 and 1\. We wish to compute
    the average of the values of `d` while ignoring any data outside the range `[0.2,
    0.9]`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个浮点数数组`d`，取值范围在0到1之间。我们希望计算`d`的值的平均值，同时忽略范围在`[0.2, 0.9]`之外的任何数据：
- en: '[PRE49]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Data with a given value representing missing data
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有表示缺失数据的给定值的数据
- en: 'Let’s consider a list of elements, `x`, where values of -9999\. represent missing
    data. We wish to compute the average value of the data and the vector of anomalies
    (deviations from the average):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个元素列表`x`，其中数值为-9999表示缺失数据。我们希望计算数据的平均值和异常向量（与平均值的偏差）：
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Filling in the missing data
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充缺失数据
- en: Suppose now that we wish to print that same data, but with the missing values
    replaced by the average value.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们希望打印相同的数据，但将缺失值替换为平均值。
- en: '[PRE51]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Numerical operations
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值运算
- en: 'Numerical operations can be easily performed without worrying about missing
    values, dividing by zero, square roots of negative numbers, etc.:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 数值运算可以轻松进行，无需担心缺失值、除以零、负数的平方根等：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Four values of the output are invalid: the first one comes from taking the
    square root of a negative number, the second from the division by zero, and the
    last two where the inputs were masked.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的四个值是无效的：第一个来自于对负数开平方，第二个来自于除以零，最后两个是输入被屏蔽的情况。
- en: Ignoring extreme values
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忽略极端值
- en: 'Let’s consider an array `d` of floats between 0 and 1\. We wish to compute
    the average of the values of `d` while ignoring any data outside the range `[0.2,
    0.9]`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个浮点数数组`d`，取值范围在0到1之间。我们希望计算`d`的值的平均值，同时忽略范围在`[0.2, 0.9]`之外的任何数据：
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
