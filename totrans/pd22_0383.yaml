- en: pandas.DataFrame.tz_localize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.tz_localize.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.tz_localize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Localize tz-naive index of a Series or DataFrame to target time zone.
  prefs: []
  type: TYPE_NORMAL
- en: This operation localizes the Index. To localize the values in a timezone-naive
    Series, use [`Series.dt.tz_localize()`](pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize
    "pandas.Series.dt.tz_localize").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tz**str or tzinfo or None'
  prefs: []
  type: TYPE_NORMAL
- en: Time zone to localize. Passing `None` will remove the time zone information
    and preserve local time.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: The axis to localize
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int, str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If axis ia a MultiIndex, localize a specific level. Otherwise must be None.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Also make a copy of the underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The copy keyword will change behavior in pandas 3.0. [Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    will be enabled by default, which means that all methods with a copy keyword will
    use a lazy copy mechanism to defer the copy and ignore the copy keyword. The copy
    keyword will be removed in a future version of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: You can already get the future behavior and improvements through enabling copy
    on write `pd.options.mode.copy_on_write = True`
  prefs: []
  type: TYPE_NORMAL
- en: '**ambiguous**‘infer’, bool-ndarray, ‘NaT’, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: When clocks moved backward due to DST, ambiguous times may arise. For example
    in Central European Time (UTC+01), when going from 03:00 DST to 02:00 non-DST,
    02:30:00 local time occurs both at 00:30:00 UTC and at 01:30:00 UTC. In such a
    situation, the ambiguous parameter dictates how ambiguous times should be handled.
  prefs: []
  type: TYPE_NORMAL
- en: ‘infer’ will attempt to infer fall dst-transition hours based on order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bool-ndarray where True signifies a DST time, False designates a non-DST time
    (note that this flag is only applicable for ambiguous times)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT where there are ambiguous times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an AmbiguousTimeError if there are ambiguous times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nonexistent**str, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: 'A nonexistent time does not exist in a particular timezone where clocks moved
    forward due to DST. Valid values are:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘shift_forward’ will shift the nonexistent time forward to the closest existing
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘shift_backward’ will shift the nonexistent time backward to the closest existing
    time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT where there are nonexistent times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timedelta objects will shift nonexistent times by the timedelta
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an NonExistentTimeError if there are nonexistent times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series/DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Same type as the input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If the TimeSeries is tz-aware and tz is not None.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Localize local times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass None to convert to tz-naive index and preserve local time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Be careful with DST changes. When there is sequential data, pandas can infer
    the DST time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In some cases, inferring the DST is impossible. In such cases, you can pass
    an ndarray to the ambiguous parameter to set the DST explicitly
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the DST transition causes nonexistent times, you can shift these dates forward
    or backward with a timedelta object or ‘shift_forward’ or ‘shift_backward’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
