- en: scipy.signal.iirfilter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.iirfilter.html#scipy.signal.iirfilter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.iirfilter.html#scipy.signal.iirfilter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: IIR digital and analog filter design given order and critical points.
  prefs: []
  type: TYPE_NORMAL
- en: Design an Nth-order digital or analog filter and return the filter coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N**int'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wn**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A scalar or length-2 sequence giving the critical frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: For digital filters, *Wn* are in the same units as *fs*. By default, *fs* is
    2 half-cycles/sample, so these are normalized from 0 to 1, where 1 is the Nyquist
    frequency. (*Wn* is thus in half-cycles / sample.)
  prefs: []
  type: TYPE_NORMAL
- en: For analog filters, *Wn* is an angular frequency (e.g., rad/s).
  prefs: []
  type: TYPE_NORMAL
- en: When Wn is a length-2 sequence, `Wn[0]` must be less than `Wn[1]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**rp**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: For Chebyshev and elliptic filters, provides the maximum ripple in the passband.
    (dB)
  prefs: []
  type: TYPE_NORMAL
- en: '**rs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: For Chebyshev and elliptic filters, provides the minimum attenuation in the
    stop band. (dB)
  prefs: []
  type: TYPE_NORMAL
- en: '**btype**{‘bandpass’, ‘lowpass’, ‘highpass’, ‘bandstop’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of filter. Default is ‘bandpass’.
  prefs: []
  type: TYPE_NORMAL
- en: '**analog**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: When True, return an analog filter, otherwise a digital filter is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**ftype**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of IIR filter to design:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Butterworth : ‘butter’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chebyshev I : ‘cheby1’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chebyshev II : ‘cheby2’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Cauer/elliptic: ‘ellip’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Bessel/Thomson: ‘bessel’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output**{‘ba’, ‘zpk’, ‘sos’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter form of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'second-order sections (recommended): ‘sos’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'numerator/denominator (default) : ‘ba’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'pole-zero : ‘zpk’'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: In general the second-order sections (‘sos’) form is recommended because inferring
    the coefficients for the numerator/denominator form (‘ba’) suffers from numerical
    instabilities. For reasons of backward compatibility the default form is the numerator/denominator
    form (‘ba’), where the ‘b’ and the ‘a’ in ‘ba’ refer to the commonly used names
    of the coefficients used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Using the second-order sections form (‘sos’) is sometimes associated
    with additional computational costs: for data-intense use cases it is therefore
    recommended to also investigate the numerator/denominator form (‘ba’).'
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the digital system.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b, a**ndarray, ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator (*b*) and denominator (*a*) polynomials of the IIR filter. Only returned
    if `output='ba'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**z, p, k**ndarray, ndarray, float'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros, poles, and system gain of the IIR filter transfer function. Only returned
    if `output='zpk'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**sos**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Second-order sections representation of the IIR filter. Only returned if `output='sos'`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`butter`](scipy.signal.butter.html#scipy.signal.butter "scipy.signal.butter")'
  prefs: []
  type: TYPE_NORMAL
- en: Filter design using order and critical points
  prefs: []
  type: TYPE_NORMAL
- en: '[`cheby1`](scipy.signal.cheby1.html#scipy.signal.cheby1 "scipy.signal.cheby1"),
    [`cheby2`](scipy.signal.cheby2.html#scipy.signal.cheby2 "scipy.signal.cheby2"),
    [`ellip`](scipy.signal.ellip.html#scipy.signal.ellip "scipy.signal.ellip"), [`bessel`](scipy.signal.bessel.html#scipy.signal.bessel
    "scipy.signal.bessel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`buttord`](scipy.signal.buttord.html#scipy.signal.buttord "scipy.signal.buttord")'
  prefs: []
  type: TYPE_NORMAL
- en: Find order and critical points from passband and stopband spec
  prefs: []
  type: TYPE_NORMAL
- en: '[`cheb1ord`](scipy.signal.cheb1ord.html#scipy.signal.cheb1ord "scipy.signal.cheb1ord"),
    [`cheb2ord`](scipy.signal.cheb2ord.html#scipy.signal.cheb2ord "scipy.signal.cheb2ord"),
    [`ellipord`](scipy.signal.ellipord.html#scipy.signal.ellipord "scipy.signal.ellipord")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`iirdesign`](scipy.signal.iirdesign.html#scipy.signal.iirdesign "scipy.signal.iirdesign")'
  prefs: []
  type: TYPE_NORMAL
- en: General filter design using passband and stopband spec
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The `'sos'` output parameter was added in 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a 17th-order Chebyshev II analog bandpass filter from 50 Hz to 200
    Hz and plot the frequency response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-iirfilter-1_00_00.png](../Images/2d70bb9bd12b23f0367f5d5990f9e992.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a digital filter with the same properties, in a system with sampling
    rate of 2000 Hz, and plot the frequency response. (Second-order sections implementation
    is required to ensure stability of a filter of this order):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-iirfilter-1_01_00.png](../Images/8edf9120cb8568a17b882587a762ce32.png)'
  prefs: []
  type: TYPE_IMG
