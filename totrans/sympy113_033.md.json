["```py\n>>> from sympy import init_printing\n>>> init_printing(use_unicode=True) \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.matrices import Matrix\n>>> c, d, e = symbols(\"c, d, e\")\n>>> A = Matrix([[c,d], [1, -e]])\n>>> A\n⎡c  d ⎤\n⎢     ⎥\n⎣1  -e⎦\n>>> b = Matrix([2, 0])\n>>> b\n⎡2⎤\n⎢ ⎥\n⎣0⎦\n>>> A.solve(b)\n⎡  2⋅e  ⎤\n⎢───────⎥\n⎢c⋅e + d⎥\n⎢       ⎥\n⎢   2   ⎥\n⎢───────⎥\n⎣c⋅e + d⎦ \n```", "```py\n>>> from sympy import symbols, Matrix, eye, simplify\n>>> c, d, e = symbols(\"c, d, e\")\n>>> A = Matrix([[c,d], [1, -e]])\n>>> A\n⎡c  d ⎤\n⎢     ⎥\n⎣1  -e⎦\n>>> b = Matrix([2, 0])\n>>> b\n ⎡2⎤\n ⎢ ⎥\n ⎣0⎦\n>>> solution = A.LUsolve(b)\n>>> solution\n ⎡  2⋅e  ⎤\n ⎢───────⎥\n ⎢c⋅e + d⎥\n ⎢       ⎥\n ⎢   2   ⎥\n ⎢───────⎥\n ⎣c⋅e + d⎦\n>>> # Demonstrate that solution is correct\n>>> simplify(A * solution)\n ⎡2⎤\n ⎢ ⎥\n ⎣0⎦\n>>> b2 = Matrix([4, 0])\n>>> b2\n ⎡4⎤\n ⎢ ⎥\n ⎣0⎦\n>>> solution2 = A.LUsolve(b2)\n>>> solution2\n ⎡  4⋅e  ⎤\n ⎢───────⎥\n ⎢c⋅e + d⎥\n ⎢       ⎥\n ⎢   4   ⎥\n ⎢───────⎥\n ⎣c⋅e + d⎦\n>>> # Demonstrate that solution2 is correct\n>>> simplify(A * solution2)\n ⎡4⎤\n ⎢ ⎥\n ⎣0⎦ \n```", "```py\n>>> from sympy import symbols, Matrix, simplify\n>>> c, d, e = symbols(\"c, d, e\")\n>>> A = Matrix([[c,d], [1, -e]])\n>>> b = Matrix([2, 0])\n>>> b\n ⎡2⎤\n ⎢ ⎥\n ⎣0⎦\n>>> b2 = Matrix([4, 0])\n>>> b2\n ⎡4⎤\n ⎢ ⎥\n ⎣0⎦\n>>> inv = A.inv()\n>>> inv\n ⎡   e        d   ⎤\n ⎢───────  ───────⎥\n ⎢c⋅e + d  c⋅e + d⎥\n ⎢                ⎥\n ⎢   1       -c   ⎥\n ⎢───────  ───────⎥\n ⎣c⋅e + d  c⋅e + d⎦\n>>> # Solves Ax = b for x\n>>> solution = inv * b\n>>> solution\n ⎡  2⋅e  ⎤\n ⎢───────⎥\n ⎢c⋅e + d⎥\n ⎢       ⎥\n ⎢   2   ⎥\n ⎢───────⎥\n ⎣c⋅e + d⎦\n>>> # Demonstrate that solution is correct\n>>> simplify(A * solution)\n ⎡2⎤\n ⎢ ⎥\n ⎣0⎦\n>>> # Solves Ax = b2 for x\n>>> solution2 = inv * b2\n>>> solution2\n ⎡  4⋅e  ⎤\n ⎢───────⎥\n ⎢c⋅e + d⎥\n ⎢       ⎥\n ⎢   4   ⎥\n ⎢───────⎥\n ⎣c⋅e + d⎦\n>>> # Demonstrate that solution2 is correct\n>>> simplify(A * solution2)\n ⎡4⎤\n ⎢ ⎥\n ⎣0⎦ \n```", "```py\n>>> from sympy import MatrixSymbol\n>>> A = MatrixSymbol('A', 4, 4).as_explicit()\n>>> A\n⎡A₀₀  A₀₁  A₀₂  A₀₃⎤\n⎢                  ⎥\n⎢A₁₀  A₁₁  A₁₂  A₁₃⎥\n⎢                  ⎥\n⎢A₂₀  A₂₁  A₂₂  A₂₃⎥\n⎢                  ⎥\n⎣A₃₀  A₃₁  A₃₂  A₃₃⎦\n>>> A.det()\nA₀₀⋅A₁₁⋅A₂₂⋅A₃₃ - A₀₀⋅A₁₁⋅A₂₃⋅A₃₂ - A₀₀⋅A₁₂⋅A₂₁⋅A₃₃ + A₀₀⋅A₁₂⋅A₂₃⋅A₃₁ +\nA₀₀⋅A₁₃⋅A₂₁⋅A₃₂ - A₀₀⋅A₁₃⋅A₂₂⋅A₃₁ - A₀₁⋅A₁₀⋅A₂₂⋅A₃₃ + A₀₁⋅A₁₀⋅A₂₃⋅A₃₂ +\nA₀₁⋅A₁₂⋅A₂₀⋅A₃₃ - A₀₁⋅A₁₂⋅A₂₃⋅A₃₀ - A₀₁⋅A₁₃⋅A₂₀⋅A₃₂ + A₀₁⋅A₁₃⋅A₂₂⋅A₃₀ +\nA₀₂⋅A₁₀⋅A₂₁⋅A₃₃ - A₀₂⋅A₁₀⋅A₂₃⋅A₃₁ - A₀₂⋅A₁₁⋅A₂₀⋅A₃₃ + A₀₂⋅A₁₁⋅A₂₃⋅A₃₀ +\nA₀₂⋅A₁₃⋅A₂₀⋅A₃₁ - A₀₂⋅A₁₃⋅A₂₁⋅A₃₀ - A₀₃⋅A₁₀⋅A₂₁⋅A₃₂ + A₀₃⋅A₁₀⋅A₂₂⋅A₃₁ +\nA₀₃⋅A₁₁⋅A₂₀⋅A₃₂ - A₀₃⋅A₁₁⋅A₂₂⋅A₃₀ - A₀₃⋅A₁₂⋅A₂₀⋅A₃₁ + A₀₃⋅A₁₂⋅A₂₁⋅A₃₀ \n```", "```py\n>>> from sympy import symbols, simplify\n>>> from sympy.matrices import Matrix\n>>> c, d, e = symbols(\"c, d, e\")\n>>> A = Matrix([[c,d], [1, -e]])\n>>> b = Matrix([2, 0])\n>>> solution = A.solve(b)\n>>> solution\n ⎡  2⋅e  ⎤\n ⎢───────⎥\n ⎢c⋅e + d⎥\n ⎢       ⎥\n ⎢   2   ⎥\n ⎢───────⎥\n ⎣c⋅e + d⎦\n>>> # Not immediately obvious whether this result is a zeroes vector\n>>> (A * solution) - b\n ⎡ 2⋅c⋅e      2⋅d      ⎤\n ⎢─────── + ─────── - 2⎥\n ⎢c⋅e + d   c⋅e + d    ⎥\n ⎢                     ⎥\n ⎣          0          ⎦\n>>> # simplify reveals that this result is a zeroes vector\n>>> simplify((A * solution) - b)\n ⎡0⎤\n ⎢ ⎥\n ⎣0⎦ \n```", "```py\n>>> [element for element in solution]\n ⎡  2⋅e       2   ⎤\n ⎢───────, ───────⎥\n ⎣c⋅e + d  c⋅e + d⎦ \n```", "```py\n>>> solution[0]\n 2⋅e\n ───────\n c⋅e + d \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.matrices import Matrix\n>>> c, d, e = symbols(\"c, d, e\")\n>>> A = Matrix([[c*e**2, d*e], [c*e, d]])\n>>> A\n ⎡   2     ⎤\n ⎢c⋅e   d⋅e⎥\n ⎢         ⎥\n ⎣c⋅e    d ⎦\n>>> b = Matrix([2, 0])\n>>> A.LUsolve(b)\nTraceback (most recent call last):\n  ...\nNonInvertibleMatrixError: Matrix det == 0; not invertible. \n```"]