- en: scipy.spatial.ConvexHull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.ConvexHull.html#scipy.spatial.ConvexHull](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.ConvexHull.html#scipy.spatial.ConvexHull)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convex hulls in N dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**ndarray of floats, shape (npoints, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates of points to construct a convex hull from
  prefs: []
  type: TYPE_NORMAL
- en: '**incremental**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Allow adding new points incrementally. This takes up some additional resources.
  prefs: []
  type: TYPE_NORMAL
- en: '**qhull_options**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional options to pass to Qhull. See Qhull manual for details. (Default:
    “Qx” for ndim > 4 and “” otherwise) Option “Qt” is always enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: QhullError
  prefs: []
  type: TYPE_NORMAL
- en: Raised when Qhull encounters an error condition, such as geometrical degeneracy
    when options to resolve are not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: Raised if an incompatible array is given as input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The convex hull is computed using the [Qhull library](http://www.qhull.org/).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[Qhull]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.qhull.org/](http://www.qhull.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Convex hull of a random set of points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also have directly used the vertices of the hull, which for 2-D are
    guaranteed to be in counterclockwise order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-spatial-ConvexHull-1_00_00.png](../Images/e6b91b4822fa38c115e2c4cba88fedc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Facets visible from a point:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a square and add a point above the square.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Call ConvexHull with the QG option. QG4 means compute the portions of the hull
    not including point 4, indicating the facets that are visible from point 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The “good” array indicates which facets are visible from point 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now plot it, highlighting the visible facets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-spatial-ConvexHull-1_01_00.png](../Images/0b89717c4dae1b6ee6dac4cb9196fd6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**ndarray of double, shape (npoints, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates of input points.
  prefs: []
  type: TYPE_NORMAL
- en: '**vertices**ndarray of ints, shape (nvertices,)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of points forming the vertices of the convex hull. For 2-D convex hulls,
    the vertices are in counterclockwise order. For other dimensions, they are in
    input order.
  prefs: []
  type: TYPE_NORMAL
- en: '**simplices**ndarray of ints, shape (nfacet, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of points forming the simplical facets of the convex hull.
  prefs: []
  type: TYPE_NORMAL
- en: '**neighbors**ndarray of ints, shape (nfacet, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of neighbor facets for each facet. The kth neighbor is opposite to the
    kth vertex. -1 denotes no neighbor.
  prefs: []
  type: TYPE_NORMAL
- en: '**equations**ndarray of double, shape (nfacet, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[normal, offset] forming the hyperplane equation of the facet (see [Qhull documentation](http://www.qhull.org/)
    for more).'
  prefs: []
  type: TYPE_NORMAL
- en: '**coplanar**ndarray of int, shape (ncoplanar, 3)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of coplanar points and the corresponding indices of the nearest facets
    and nearest vertex indices. Coplanar points are input points which were *not*
    included in the triangulation due to numerical precision issues.
  prefs: []
  type: TYPE_NORMAL
- en: If option “Qc” is not specified, this list is not computed.
  prefs: []
  type: TYPE_NORMAL
- en: '**good**ndarray of bool or None'
  prefs: []
  type: TYPE_NORMAL
- en: 'A one-dimensional Boolean array indicating which facets are good. Used with
    options that compute good facets, e.g. QGn and QG-n. Good facets are defined as
    those that are visible (n) or invisible (-n) from point n, where n is the nth
    point in ‘points’. The ‘good’ attribute may be used as an index into ‘simplices’
    to return the good (visible) facets: simplices[good]. A facet is visible from
    the outside of the hull only, and neither coplanarity nor degeneracy count as
    cases of visibility.'
  prefs: []
  type: TYPE_NORMAL
- en: If a “QGn” or “QG-n” option is not specified, None is returned.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**area**float'
  prefs: []
  type: TYPE_NORMAL
- en: Surface area of the convex hull when input dimension > 2. When input [`points`](scipy.spatial.ConvexHull.points.html#scipy.spatial.ConvexHull.points
    "scipy.spatial.ConvexHull.points") are 2-dimensional, this is the perimeter of
    the convex hull.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**volume**float'
  prefs: []
  type: TYPE_NORMAL
- en: Volume of the convex hull when input dimension > 2. When input [`points`](scipy.spatial.ConvexHull.points.html#scipy.spatial.ConvexHull.points
    "scipy.spatial.ConvexHull.points") are 2-dimensional, this is the area of the
    convex hull.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`add_points`](scipy.spatial.ConvexHull.add_points.html#scipy.spatial.ConvexHull.add_points
    "scipy.spatial.ConvexHull.add_points")(points[, restart]) | Process a set of additional
    new points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`close`](scipy.spatial.ConvexHull.close.html#scipy.spatial.ConvexHull.close
    "scipy.spatial.ConvexHull.close")() | Finish incremental processing. |'
  prefs: []
  type: TYPE_TB
