["```py\nclass sympy.geometry.line.LinearEntity(p1, p2=None, **kwargs)\n```", "```py\nproperty ambient_dimension\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(1, 1)\n>>> l1 = Line(p1, p2)\n>>> l1.ambient_dimension\n2 \n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0, 0), Point(1, 1, 1)\n>>> l1 = Line(p1, p2)\n>>> l1.ambient_dimension\n3 \n```", "```py\nangle_between(l2)\n```", "```py\n>>> from sympy import Line\n>>> e = Line((0, 0), (1, 0))\n>>> ne = Line((0, 0), (1, 1))\n>>> sw = Line((1, 1), (0, 0))\n>>> ne.angle_between(e)\npi/4\n>>> sw.angle_between(e)\n3*pi/4 \n```", "```py\n>>> sw.smallest_angle_between(e)\npi/4 \n```", "```py\n>>> from sympy import Point3D, Line3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(-1, 2, 0)\n>>> l1, l2 = Line3D(p1, p2), Line3D(p2, p3)\n>>> l1.angle_between(l2)\nacos(-sqrt(2)/3)\n>>> l1.smallest_angle_between(l2)\nacos(sqrt(2)/3) \n```", "```py\narbitrary_point(parameter='t')\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(1, 0), Point(5, 3)\n>>> l1 = Line(p1, p2)\n>>> l1.arbitrary_point()\nPoint2D(4*t + 1, 3*t)\n>>> from sympy import Point3D, Line3D\n>>> p1, p2 = Point3D(1, 0, 0), Point3D(5, 3, 1)\n>>> l1 = Line3D(p1, p2)\n>>> l1.arbitrary_point()\nPoint3D(4*t + 1, 3*t, t) \n```", "```py\nstatic are_concurrent(*lines)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(3, 5)\n>>> p3, p4 = Point(-2, -2), Point(0, 2)\n>>> l1, l2, l3 = Line(p1, p2), Line(p1, p3), Line(p1, p4)\n>>> Line.are_concurrent(l1, l2, l3)\nTrue\n>>> l4 = Line(p2, p3)\n>>> Line.are_concurrent(l2, l3, l4)\nFalse\n>>> from sympy import Point3D, Line3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(3, 5, 2)\n>>> p3, p4 = Point3D(-2, -2, -2), Point3D(0, 2, 1)\n>>> l1, l2, l3 = Line3D(p1, p2), Line3D(p1, p3), Line3D(p1, p4)\n>>> Line3D.are_concurrent(l1, l2, l3)\nTrue\n>>> l4 = Line3D(p2, p3)\n>>> Line3D.are_concurrent(l2, l3, l4)\nFalse \n```", "```py\nbisectors(other)\n```", "```py\n>>> from sympy import Point3D, Line3D\n>>> r1 = Line3D(Point3D(0, 0, 0), Point3D(1, 0, 0))\n>>> r2 = Line3D(Point3D(0, 0, 0), Point3D(0, 1, 0))\n>>> r1.bisectors(r2)\n[Line3D(Point3D(0, 0, 0), Point3D(1, 1, 0)), Line3D(Point3D(0, 0, 0), Point3D(1, -1, 0))] \n```", "```py\ncontains(other)\n```", "```py\nproperty direction\n```", "```py\n>>> from sympy import Line\n>>> a, b = (1, 1), (1, 3)\n>>> Line(a, b).direction\nPoint2D(0, 2)\n>>> Line(b, a).direction\nPoint2D(0, -2) \n```", "```py\n>>> Line(b, a).direction.unit\nPoint2D(0, -1) \n```", "```py\nintersection(other)\n```", "```py\n>>> from sympy import Point, Line, Segment\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(7, 7)\n>>> l1 = Line(p1, p2)\n>>> l1.intersection(p3)\n[Point2D(7, 7)]\n>>> p4, p5 = Point(5, 0), Point(0, 3)\n>>> l2 = Line(p4, p5)\n>>> l1.intersection(l2)\n[Point2D(15/8, 15/8)]\n>>> p6, p7 = Point(0, 5), Point(2, 6)\n>>> s1 = Segment(p6, p7)\n>>> l1.intersection(s1)\n[]\n>>> from sympy import Point3D, Line3D, Segment3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(7, 7, 7)\n>>> l1 = Line3D(p1, p2)\n>>> l1.intersection(p3)\n[Point3D(7, 7, 7)]\n>>> l1 = Line3D(Point3D(4,19,12), Point3D(5,25,17))\n>>> l2 = Line3D(Point3D(-3, -15, -19), direction_ratio=[2,8,8])\n>>> l1.intersection(l2)\n[Point3D(1, 1, -3)]\n>>> p6, p7 = Point3D(0, 5, 2), Point3D(2, 6, 3)\n>>> s1 = Segment3D(p6, p7)\n>>> l1.intersection(s1)\n[] \n```", "```py\nis_parallel(l2)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(1, 1)\n>>> p3, p4 = Point(3, 4), Point(6, 7)\n>>> l1, l2 = Line(p1, p2), Line(p3, p4)\n>>> Line.is_parallel(l1, l2)\nTrue\n>>> p5 = Point(6, 6)\n>>> l3 = Line(p3, p5)\n>>> Line.is_parallel(l1, l3)\nFalse\n>>> from sympy import Point3D, Line3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(3, 4, 5)\n>>> p3, p4 = Point3D(2, 1, 1), Point3D(8, 9, 11)\n>>> l1, l2 = Line3D(p1, p2), Line3D(p3, p4)\n>>> Line3D.is_parallel(l1, l2)\nTrue\n>>> p5 = Point3D(6, 6, 6)\n>>> l3 = Line3D(p3, p5)\n>>> Line3D.is_parallel(l1, l3)\nFalse \n```", "```py\nis_perpendicular(l2)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(-1, 1)\n>>> l1, l2 = Line(p1, p2), Line(p1, p3)\n>>> l1.is_perpendicular(l2)\nTrue\n>>> p4 = Point(5, 3)\n>>> l3 = Line(p1, p4)\n>>> l1.is_perpendicular(l3)\nFalse\n>>> from sympy import Point3D, Line3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(-1, 2, 0)\n>>> l1, l2 = Line3D(p1, p2), Line3D(p2, p3)\n>>> l1.is_perpendicular(l2)\nFalse\n>>> p4 = Point3D(5, 3, 7)\n>>> l3 = Line3D(p1, p4)\n>>> l1.is_perpendicular(l3)\nFalse \n```", "```py\nis_similar(other)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 1), Point(3, 4), Point(2, 3)\n>>> l1 = Line(p1, p2)\n>>> l2 = Line(p1, p3)\n>>> l1.is_similar(l2)\nTrue \n```", "```py\nproperty length\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(3, 5)\n>>> l1 = Line(p1, p2)\n>>> l1.length\noo \n```", "```py\nproperty p1\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> l = Line(p1, p2)\n>>> l.p1\nPoint2D(0, 0) \n```", "```py\nproperty p2\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> l = Line(p1, p2)\n>>> l.p2\nPoint2D(5, 3) \n```", "```py\nparallel_line(p)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 0), Point(2, 3), Point(-2, 2)\n>>> l1 = Line(p1, p2)\n>>> l2 = l1.parallel_line(p3)\n>>> p3 in l2\nTrue\n>>> l1.is_parallel(l2)\nTrue\n>>> from sympy import Point3D, Line3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(2, 3, 4), Point3D(-2, 2, 0)\n>>> l1 = Line3D(p1, p2)\n>>> l2 = l1.parallel_line(p3)\n>>> p3 in l2\nTrue\n>>> l1.is_parallel(l2)\nTrue \n```", "```py\nperpendicular_line(p)\n```", "```py\n>>> from sympy import Point3D, Line3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(2, 3, 4), Point3D(-2, 2, 0)\n>>> L = Line3D(p1, p2)\n>>> P = L.perpendicular_line(p3); P\nLine3D(Point3D(-2, 2, 0), Point3D(4/29, 6/29, 8/29))\n>>> L.is_perpendicular(P)\nTrue \n```", "```py\n>>> P.p2 in L\nTrue \n```", "```py\nperpendicular_segment(p)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(0, 2)\n>>> l1 = Line(p1, p2)\n>>> s1 = l1.perpendicular_segment(p3)\n>>> l1.is_perpendicular(s1)\nTrue\n>>> p3 in s1\nTrue\n>>> l1.perpendicular_segment(Point(4, 0))\nSegment2D(Point2D(4, 0), Point2D(2, 2))\n>>> from sympy import Point3D, Line3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(0, 2, 0)\n>>> l1 = Line3D(p1, p2)\n>>> s1 = l1.perpendicular_segment(p3)\n>>> l1.is_perpendicular(s1)\nTrue\n>>> p3 in s1\nTrue\n>>> l1.perpendicular_segment(Point3D(4, 0, 0))\nSegment3D(Point3D(4, 0, 0), Point3D(4/3, 4/3, 4/3)) \n```", "```py\nproperty points\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(5, 11)\n>>> l1 = Line(p1, p2)\n>>> l1.points\n(Point2D(0, 0), Point2D(5, 11)) \n```", "```py\nprojection(other)\n```", "```py\n>>> from sympy import Point, Line, Segment, Rational\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(Rational(1, 2), 0)\n>>> l1 = Line(p1, p2)\n>>> l1.projection(p3)\nPoint2D(1/4, 1/4)\n>>> p4, p5 = Point(10, 0), Point(12, 1)\n>>> s1 = Segment(p4, p5)\n>>> l1.projection(s1)\nSegment2D(Point2D(5, 5), Point2D(13/2, 13/2))\n>>> p1, p2, p3 = Point(0, 0, 1), Point(1, 1, 2), Point(2, 0, 1)\n>>> l1 = Line(p1, p2)\n>>> l1.projection(p3)\nPoint3D(2/3, 2/3, 5/3)\n>>> p4, p5 = Point(10, 0, 1), Point(12, 1, 3)\n>>> s1 = Segment(p4, p5)\n>>> l1.projection(s1)\nSegment3D(Point3D(10/3, 10/3, 13/3), Point3D(5, 5, 6)) \n```", "```py\nrandom_point(seed=None)\n```", "```py\n>>> from sympy import Point, Line, Ray, Segment\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> line = Line(p1, p2)\n>>> r = line.random_point(seed=42)  # seed value is optional\n>>> r.n(3)\nPoint2D(-0.72, -0.432)\n>>> r in line\nTrue\n>>> Ray(p1, p2).random_point(seed=42).n(3)\nPoint2D(0.72, 0.432)\n>>> Segment(p1, p2).random_point(seed=42).n(3)\nPoint2D(3.2, 1.92) \n```", "```py\nsmallest_angle_between(l2)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 0), Point(0, 4), Point(2, -2)\n>>> l1, l2 = Line(p1, p2), Line(p1, p3)\n>>> l1.smallest_angle_between(l2)\npi/4 \n```", "```py\nclass sympy.geometry.line.Line(*args, **kwargs)\n```", "```py\n>>> from sympy import Line, Segment, Point, Eq\n>>> from sympy.abc import x, y, a, b \n```", "```py\n>>> L = Line(Point(2,3), Point(3,5))\n>>> L\nLine2D(Point2D(2, 3), Point2D(3, 5))\n>>> L.points\n(Point2D(2, 3), Point2D(3, 5))\n>>> L.equation()\n-2*x + y + 1\n>>> L.coefficients\n(-2, 1, 1) \n```", "```py\n>>> Line(Point(0, 0), slope=0)\nLine2D(Point2D(0, 0), Point2D(1, 0)) \n```", "```py\n>>> s = Segment((0, 0), (0, 1))\n>>> Line(s).equation()\nx \n```", "```py\n>>> Line(3*x + y + 18)\nLine2D(Point2D(0, -18), Point2D(1, -21)) \n```", "```py\n>>> Line(Eq(3*a + b, -18), x='a', y=b)\nLine2D(Point2D(0, -18), Point2D(1, -21)) \n```", "```py\ncontains(other)\n```", "```py\n>>> from sympy import Line,Point\n>>> p1, p2 = Point(0, 1), Point(3, 4)\n>>> l = Line(p1, p2)\n>>> l.contains(p1)\nTrue\n>>> l.contains((0, 1))\nTrue\n>>> l.contains((0, 0))\nFalse\n>>> a = (0, 0, 0)\n>>> b = (1, 1, 1)\n>>> c = (2, 2, 2)\n>>> l1 = Line(a, b)\n>>> l2 = Line(b, a)\n>>> l1 == l2\nFalse\n>>> l1 in l2\nTrue \n```", "```py\ndistance(other)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(1, 1)\n>>> s = Line(p1, p2)\n>>> s.distance(Point(-1, 1))\nsqrt(2)\n>>> s.distance((-1, 2))\n3*sqrt(2)/2\n>>> p1, p2 = Point(0, 0, 0), Point(1, 1, 1)\n>>> s = Line(p1, p2)\n>>> s.distance(Point(-1, 1, 1))\n2*sqrt(6)/3\n>>> s.distance((-1, 1, 1))\n2*sqrt(6)/3 \n```", "```py\nequals(other)\n```", "```py\nplot_interval(parameter='t')\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> l1 = Line(p1, p2)\n>>> l1.plot_interval()\n[t, -5, 5] \n```", "```py\nclass sympy.geometry.line.Ray(p1, p2=None, **kwargs)\n```", "```py\n>>> from sympy import Ray, Point, pi\n>>> r = Ray(Point(2, 3), Point(3, 5))\n>>> r\nRay2D(Point2D(2, 3), Point2D(3, 5))\n>>> r.points\n(Point2D(2, 3), Point2D(3, 5))\n>>> r.source\nPoint2D(2, 3)\n>>> r.xdirection\noo\n>>> r.ydirection\noo\n>>> r.slope\n2\n>>> Ray(Point(0, 0), angle=pi/4).slope\n1 \n```", "```py\ncontains(other)\n```", "```py\n>>> from sympy import Ray,Point,Segment\n>>> p1, p2 = Point(0, 0), Point(4, 4)\n>>> r = Ray(p1, p2)\n>>> r.contains(p1)\nTrue\n>>> r.contains((1, 1))\nTrue\n>>> r.contains((1, 3))\nFalse\n>>> s = Segment((1, 1), (2, 2))\n>>> r.contains(s)\nTrue\n>>> s = Segment((1, 2), (2, 5))\n>>> r.contains(s)\nFalse\n>>> r1 = Ray((2, 2), (3, 3))\n>>> r.contains(r1)\nTrue\n>>> r1 = Ray((2, 2), (3, 5))\n>>> r.contains(r1)\nFalse \n```", "```py\ndistance(other)\n```", "```py\n>>> from sympy import Point, Ray\n>>> p1, p2 = Point(0, 0), Point(1, 1)\n>>> s = Ray(p1, p2)\n>>> s.distance(Point(-1, -1))\nsqrt(2)\n>>> s.distance((-1, 2))\n3*sqrt(2)/2\n>>> p1, p2 = Point(0, 0, 0), Point(1, 1, 2)\n>>> s = Ray(p1, p2)\n>>> s\nRay3D(Point3D(0, 0, 0), Point3D(1, 1, 2))\n>>> s.distance(Point(-1, -1, 2))\n4*sqrt(3)/3\n>>> s.distance((-1, -1, 2))\n4*sqrt(3)/3 \n```", "```py\nequals(other)\n```", "```py\nplot_interval(parameter='t')\n```", "```py\n>>> from sympy import Ray, pi\n>>> r = Ray((0, 0), angle=pi/4)\n>>> r.plot_interval()\n[t, 0, 10] \n```", "```py\nproperty source\n```", "```py\n>>> from sympy import Point, Ray\n>>> p1, p2 = Point(0, 0), Point(4, 1)\n>>> r1 = Ray(p1, p2)\n>>> r1.source\nPoint2D(0, 0)\n>>> p1, p2 = Point(0, 0, 0), Point(4, 1, 5)\n>>> r1 = Ray(p2, p1)\n>>> r1.source\nPoint3D(4, 1, 5) \n```", "```py\nclass sympy.geometry.line.Segment(p1, p2, **kwargs)\n```", "```py\n>>> from sympy import Point, Segment\n>>> Segment((1, 0), (1, 1)) # tuples are interpreted as pts\nSegment2D(Point2D(1, 0), Point2D(1, 1))\n>>> s = Segment(Point(4, 3), Point(1, 1))\n>>> s.points\n(Point2D(4, 3), Point2D(1, 1))\n>>> s.slope\n2/3\n>>> s.length\nsqrt(13)\n>>> s.midpoint\nPoint2D(5/2, 2)\n>>> Segment((1, 0, 0), (1, 1, 1)) # tuples are interpreted as pts\nSegment3D(Point3D(1, 0, 0), Point3D(1, 1, 1))\n>>> s = Segment(Point(4, 3, 9), Point(1, 1, 7)); s\nSegment3D(Point3D(4, 3, 9), Point3D(1, 1, 7))\n>>> s.points\n(Point3D(4, 3, 9), Point3D(1, 1, 7))\n>>> s.length\nsqrt(17)\n>>> s.midpoint\nPoint3D(5/2, 2, 8) \n```", "```py\ncontains(other)\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2 = Point(0, 1), Point(3, 4)\n>>> s = Segment(p1, p2)\n>>> s2 = Segment(p2, p1)\n>>> s.contains(s2)\nTrue\n>>> from sympy import Point3D, Segment3D\n>>> p1, p2 = Point3D(0, 1, 1), Point3D(3, 4, 5)\n>>> s = Segment3D(p1, p2)\n>>> s2 = Segment3D(p2, p1)\n>>> s.contains(s2)\nTrue\n>>> s.contains((p1 + p2)/2)\nTrue \n```", "```py\ndistance(other)\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2 = Point(0, 1), Point(3, 4)\n>>> s = Segment(p1, p2)\n>>> s.distance(Point(10, 15))\nsqrt(170)\n>>> s.distance((0, 12))\nsqrt(73)\n>>> from sympy import Point3D, Segment3D\n>>> p1, p2 = Point3D(0, 0, 3), Point3D(1, 1, 4)\n>>> s = Segment3D(p1, p2)\n>>> s.distance(Point3D(10, 15, 12))\nsqrt(341)\n>>> s.distance((10, 15, 12))\nsqrt(341) \n```", "```py\nequals(other)\n```", "```py\nproperty length\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2 = Point(0, 0), Point(4, 3)\n>>> s1 = Segment(p1, p2)\n>>> s1.length\n5\n>>> from sympy import Point3D, Segment3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(4, 3, 3)\n>>> s1 = Segment3D(p1, p2)\n>>> s1.length\nsqrt(34) \n```", "```py\nproperty midpoint\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2 = Point(0, 0), Point(4, 3)\n>>> s1 = Segment(p1, p2)\n>>> s1.midpoint\nPoint2D(2, 3/2)\n>>> from sympy import Point3D, Segment3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(4, 3, 3)\n>>> s1 = Segment3D(p1, p2)\n>>> s1.midpoint\nPoint3D(2, 3/2, 3/2) \n```", "```py\nperpendicular_bisector(p=None)\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2, p3 = Point(0, 0), Point(6, 6), Point(5, 1)\n>>> s1 = Segment(p1, p2)\n>>> s1.perpendicular_bisector()\nLine2D(Point2D(3, 3), Point2D(-3, 9)) \n```", "```py\n>>> s1.perpendicular_bisector(p3)\nSegment2D(Point2D(5, 1), Point2D(3, 3)) \n```", "```py\nplot_interval(parameter='t')\n```", "```py\n>>> from sympy import Point, Segment\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> s1 = Segment(p1, p2)\n>>> s1.plot_interval()\n[t, 0, 1] \n```", "```py\nclass sympy.geometry.line.LinearEntity2D(p1, p2=None, **kwargs)\n```", "```py\nproperty bounds\n```", "```py\nperpendicular_line(p)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2, p3 = Point(0, 0), Point(2, 3), Point(-2, 2)\n>>> L = Line(p1, p2)\n>>> P = L.perpendicular_line(p3); P\nLine2D(Point2D(-2, 2), Point2D(-5, 4))\n>>> L.is_perpendicular(P)\nTrue \n```", "```py\n>>> Line(L.perpendicular_segment(p3))\nLine2D(Point2D(-2, 2), Point2D(4/13, 6/13)) \n```", "```py\nproperty slope\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(0, 0), Point(3, 5)\n>>> l1 = Line(p1, p2)\n>>> l1.slope\n5/3 \n```", "```py\n>>> p3 = Point(0, 4)\n>>> l2 = Line(p1, p3)\n>>> l2.slope\noo \n```", "```py\nclass sympy.geometry.line.Line2D(p1, pt=None, slope=None, **kwargs)\n```", "```py\n>>> from sympy import Line, Segment, Point\n>>> L = Line(Point(2,3), Point(3,5))\n>>> L\nLine2D(Point2D(2, 3), Point2D(3, 5))\n>>> L.points\n(Point2D(2, 3), Point2D(3, 5))\n>>> L.equation()\n-2*x + y + 1\n>>> L.coefficients\n(-2, 1, 1) \n```", "```py\n>>> Line(Point(0, 0), slope=0)\nLine2D(Point2D(0, 0), Point2D(1, 0)) \n```", "```py\n>>> s = Segment((0, 0), (0, 1))\n>>> Line(s).equation()\nx \n```", "```py\nproperty coefficients\n```", "```py\n>>> from sympy import Point, Line\n>>> from sympy.abc import x, y\n>>> p1, p2 = Point(0, 0), Point(5, 3)\n>>> l = Line(p1, p2)\n>>> l.coefficients\n(-3, 5, 0) \n```", "```py\n>>> p3 = Point(x, y)\n>>> l2 = Line(p1, p3)\n>>> l2.coefficients\n(-y, x, 0) \n```", "```py\nequation(x='x', y='y')\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(1, 0), Point(5, 3)\n>>> l1 = Line(p1, p2)\n>>> l1.equation()\n-3*x + 4*y + 3 \n```", "```py\nclass sympy.geometry.line.Ray2D(p1, pt=None, angle=None, **kwargs)\n```", "```py\n>>> from sympy import Point, pi, Ray\n>>> r = Ray(Point(2, 3), Point(3, 5))\n>>> r\nRay2D(Point2D(2, 3), Point2D(3, 5))\n>>> r.points\n(Point2D(2, 3), Point2D(3, 5))\n>>> r.source\nPoint2D(2, 3)\n>>> r.xdirection\noo\n>>> r.ydirection\noo\n>>> r.slope\n2\n>>> Ray(Point(0, 0), angle=pi/4).slope\n1 \n```", "```py\nclosing_angle(r2)\n```", "```py\n>>> from sympy import Ray, pi\n>>> r1 = Ray((0, 0), (1, 0))\n>>> r2 = r1.rotate(-pi/2)\n>>> angle = r1.closing_angle(r2); angle\npi/2\n>>> r2.rotate(angle).direction.unit == r1.direction.unit\nTrue\n>>> r2.closing_angle(r1)\n-pi/2 \n```", "```py\nproperty xdirection\n```", "```py\n>>> from sympy import Point, Ray\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(0, -1)\n>>> r1, r2 = Ray(p1, p2), Ray(p1, p3)\n>>> r1.xdirection\noo\n>>> r2.xdirection\n0 \n```", "```py\nproperty ydirection\n```", "```py\n>>> from sympy import Point, Ray\n>>> p1, p2, p3 = Point(0, 0), Point(-1, -1), Point(-1, 0)\n>>> r1, r2 = Ray(p1, p2), Ray(p1, p3)\n>>> r1.ydirection\n-oo\n>>> r2.ydirection\n0 \n```", "```py\nclass sympy.geometry.line.Segment2D(p1, p2, **kwargs)\n```", "```py\n>>> from sympy import Point, Segment\n>>> Segment((1, 0), (1, 1)) # tuples are interpreted as pts\nSegment2D(Point2D(1, 0), Point2D(1, 1))\n>>> s = Segment(Point(4, 3), Point(1, 1)); s\nSegment2D(Point2D(4, 3), Point2D(1, 1))\n>>> s.points\n(Point2D(4, 3), Point2D(1, 1))\n>>> s.slope\n2/3\n>>> s.length\nsqrt(13)\n>>> s.midpoint\nPoint2D(5/2, 2) \n```", "```py\nclass sympy.geometry.line.LinearEntity3D(p1, p2, **kwargs)\n```", "```py\nproperty direction_cosine\n```", "```py\n>>> from sympy import Point3D, Line3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(5, 3, 1)\n>>> l = Line3D(p1, p2)\n>>> l.direction_cosine\n[sqrt(35)/7, 3*sqrt(35)/35, sqrt(35)/35]\n>>> sum(i**2 for i in _)\n1 \n```", "```py\nproperty direction_ratio\n```", "```py\n>>> from sympy import Point3D, Line3D\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(5, 3, 1)\n>>> l = Line3D(p1, p2)\n>>> l.direction_ratio\n[5, 3, 1] \n```", "```py\nclass sympy.geometry.line.Line3D(p1, pt=None, direction_ratio=(), **kwargs)\n```", "```py\n>>> from sympy import Line3D, Point3D\n>>> L = Line3D(Point3D(2, 3, 4), Point3D(3, 5, 1))\n>>> L\nLine3D(Point3D(2, 3, 4), Point3D(3, 5, 1))\n>>> L.points\n(Point3D(2, 3, 4), Point3D(3, 5, 1)) \n```", "```py\ndistance(other)\n```", "```py\n>>> from sympy.geometry import Line3D\n>>> l1 = Line3D((0, 0, 0), (0, 0, 1))\n>>> l2 = Line3D((0, 1, 0), (1, 1, 1))\n>>> l1.distance(l2)\n1 \n```", "```py\n>>> from sympy.abc import x, y\n>>> l1 = Line3D((0, 0, 0), (0, 0, 1))\n>>> l2 = Line3D((0, x, 0), (y, x, 1))\n>>> l1.distance(l2)\nAbs(x*y)/Abs(sqrt(y**2)) \n```", "```py\nequation(x='x', y='y', z='z')\n```", "```py\n>>> from sympy import Point3D, Line3D, solve\n>>> from sympy.abc import x, y, z\n>>> p1, p2 = Point3D(1, 0, 0), Point3D(5, 3, 0)\n>>> l1 = Line3D(p1, p2)\n>>> eq = l1.equation(x, y, z); eq\n(-3*x + 4*y + 3, z)\n>>> solve(eq.subs(z, 0), (x, y, z))\n{x: 4*y/3 + 1} \n```", "```py\nclass sympy.geometry.line.Ray3D(p1, pt=None, direction_ratio=(), **kwargs)\n```", "```py\n>>> from sympy import Point3D, Ray3D\n>>> r = Ray3D(Point3D(2, 3, 4), Point3D(3, 5, 0))\n>>> r\nRay3D(Point3D(2, 3, 4), Point3D(3, 5, 0))\n>>> r.points\n(Point3D(2, 3, 4), Point3D(3, 5, 0))\n>>> r.source\nPoint3D(2, 3, 4)\n>>> r.xdirection\noo\n>>> r.ydirection\noo\n>>> r.direction_ratio\n[1, 2, -4] \n```", "```py\nproperty xdirection\n```", "```py\n>>> from sympy import Point3D, Ray3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(0, -1, 0)\n>>> r1, r2 = Ray3D(p1, p2), Ray3D(p1, p3)\n>>> r1.xdirection\noo\n>>> r2.xdirection\n0 \n```", "```py\nproperty ydirection\n```", "```py\n>>> from sympy import Point3D, Ray3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(-1, -1, -1), Point3D(-1, 0, 0)\n>>> r1, r2 = Ray3D(p1, p2), Ray3D(p1, p3)\n>>> r1.ydirection\n-oo\n>>> r2.ydirection\n0 \n```", "```py\nproperty zdirection\n```", "```py\n>>> from sympy import Point3D, Ray3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(-1, -1, -1), Point3D(-1, 0, 0)\n>>> r1, r2 = Ray3D(p1, p2), Ray3D(p1, p3)\n>>> r1.ydirection\n-oo\n>>> r2.ydirection\n0\n>>> r2.zdirection\n0 \n```", "```py\nclass sympy.geometry.line.Segment3D(p1, p2, **kwargs)\n```", "```py\n>>> from sympy import Point3D, Segment3D\n>>> Segment3D((1, 0, 0), (1, 1, 1)) # tuples are interpreted as pts\nSegment3D(Point3D(1, 0, 0), Point3D(1, 1, 1))\n>>> s = Segment3D(Point3D(4, 3, 9), Point3D(1, 1, 7)); s\nSegment3D(Point3D(4, 3, 9), Point3D(1, 1, 7))\n>>> s.points\n(Point3D(4, 3, 9), Point3D(1, 1, 7))\n>>> s.length\nsqrt(17)\n>>> s.midpoint\nPoint3D(5/2, 2, 8) \n```"]