["```py\nscipy.special.nbdtrc(k, n, p, out=None) = <ufunc 'nbdtrc'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import nbdtrc\n>>> nbdtrc(10, 5, 0.5)\n0.059234619140624986 \n```", "```py\n>>> nbdtrc([5, 10, 15], 10, 0.5)\narray([0.84912109, 0.41190147, 0.11476147]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> k = np.arange(130)\n>>> n_parameters = [20, 20, 20, 80]\n>>> p_parameters = [0.2, 0.5, 0.8, 0.5]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(p_parameters, n_parameters,\n...                            linestyles))\n>>> fig, ax = plt.subplots(figsize=(8, 8))\n>>> for parameter_set in parameters_list:\n...     p, n, style = parameter_set\n...     nbdtrc_vals = nbdtrc(k, n, p)\n...     ax.plot(k, nbdtrc_vals, label=rf\"$n={n},\\, p={p}$\",\n...             ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$k$\")\n>>> ax.set_title(\"Negative binomial distribution survival function\")\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import nbinom\n>>> k, n, p = 3, 5, 0.5\n>>> nbdtr_res = nbdtrc(k, n, p)  # this will often be faster than below\n>>> stats_res = nbinom(n, p).sf(k)\n>>> stats_res, nbdtr_res  # test that results are equal\n(0.6367187499999999, 0.6367187499999999) \n```", "```py\n>>> k = np.array([[5], [10], [15]])\n>>> p = np.array([0.3, 0.5, 0.7, 0.9])\n>>> k.shape, p.shape\n((3, 1), (4,)) \n```", "```py\n>>> nbdtrc(k, 5, p)\narray([[8.49731667e-01, 3.76953125e-01, 4.73489874e-02, 1.46902600e-04],\n [5.15491059e-01, 5.92346191e-02, 6.72234070e-04, 9.29610100e-09],\n [2.37507779e-01, 5.90896606e-03, 5.55025308e-06, 3.26346760e-13]]) \n```"]