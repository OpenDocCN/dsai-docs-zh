- en: Input and output
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入和输出
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.io.html](https://numpy.org/doc/1.26/reference/routines.io.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.io.html](https://numpy.org/doc/1.26/reference/routines.io.html)
- en: '## NumPy binary files (NPY, NPZ)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## NumPy 二进制文件（NPY，NPZ）'
- en: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | Load arrays or pickled objects from `.npy`, `.npz` or pickled files. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | 从`.npy`、`.npz`或pickled文件加载数组或pickled对象。 |'
- en: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | Save an array to a binary file in NumPy `.npy` format. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | 将数组保存为NumPy `.npy`格式的二进制文件。 |'
- en: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | Save several arrays into a single file in uncompressed `.npz` format. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | 将多个数组保存到一个未压缩的`.npz`格式文件中。 |'
- en: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | Save several arrays into a single
    file in compressed `.npz` format. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | 将多个数组保存到一个压缩的`.npz`格式文件中。 |'
- en: The format of these binary file types is documented in [`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些二进制文件类型的格式在[`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")中有文档记录。
- en: Text files
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本文件
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | 从文本文件加载数据。 |'
- en: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | Save an array to a text file. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | 将数组保存到文本文件。 |'
- en: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | Load data from a text file, with missing values handled as specified. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | 从文本文件加载数据，并根据指定的方式处理缺失值。 |'
- en: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | Construct an array from a text file, using regular expression parsing. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | 使用正则表达式解析构造数组。 |'
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | 从字符串中的文本数据初始化新的一维数组。 |'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组写入文件，可以选择文本或二进制格式（默认）。 |'
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | 将数组返回为Python标量的`a.ndim`级深度嵌套列表。 |'
- en: Raw binary files
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始二进制文件
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | 从文本或二进制文件中的数据构造数组。 |'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组写入文件，可以选择文本或二进制格式（默认）。 |'
- en: String formatting
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串格式化
- en: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | Return a string representation of an array. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | 返回数组的字符串表示形式。 |'
- en: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | Return the string representation of an array. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | 返回数组的字符串表示形式。 |'
- en: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | Return a string representation of the data in an array. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | 返回数组中数据的字符串表示。 |'
- en: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in positional notation. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | 将浮点标量格式化为十进制数的字符串表示。 |'
- en: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in scientific notation. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | 将浮点标量格式化为科学计数法的十进制字符串。
    |'
- en: Memory mapping files
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存映射文件
- en: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | Create a memory-map to an array stored in a *binary* file on disk. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | 在磁盘上的二进制文件中创建一个数组的内存映射。 |'
- en: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | Open a .npy file as a
    memory-mapped array. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | 打开一个 .npy 文件作为内存映射数组。
    |'
- en: Text formatting options
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本格式选项
- en: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | Set printing options.
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | 设置打印选项。 |'
- en: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | Return the current print options. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | 返回当前的打印选项。 |'
- en: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | Set a Python function to be used when
    pretty printing arrays. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | 设置要在打印数组时使用的 Python 函数。 |'
- en: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | Context manager for setting print options. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | 用于设置打印选项的上下文管理器。 |'
- en: Base-n representations
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于-n 表示
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | 将输入数字的二进制表示作为字符串返回。 |'
- en: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | Return a string representation of a number in the given base system. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | 返回给定基数系统中数字的字符串表示。 |'
- en: Data sources
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据来源
- en: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | A generic data source file (file, http, ftp, ...). |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | 通用数据源文件（文件、http、ftp 等）。 |'
- en: Binary format description
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制格式描述
- en: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | Binary serialization |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | 二进制序列化 |'
- en: NumPy binary files (NPY, NPZ)
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 二进制文件（NPY、NPZ）
- en: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | Load arrays or pickled objects from `.npy`, `.npz` or pickled files. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`load`](generated/numpy.load.html#numpy.load "numpy.load")(file[, mmap_mode, allow_pickle, ...])
    | 从 `.npy`、`.npz` 或 pickle 文件中加载数组或 pickle 对象。 |'
- en: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | Save an array to a binary file in NumPy `.npy` format. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`save`](generated/numpy.save.html#numpy.save "numpy.save")(file, arr[, allow_pickle, fix_imports])
    | 将数组保存到 NumPy 的二进制文件 `.npy` 格式中。 |'
- en: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | Save several arrays into a single file in uncompressed `.npz` format. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`savez`](generated/numpy.savez.html#numpy.savez "numpy.savez")(file, *args, **kwds)
    | 将多个数组保存到一个未压缩的 `.npz` 格式文件中。 |'
- en: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | Save several arrays into a single
    file in compressed `.npz` format. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`savez_compressed`](generated/numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed")(file, *args, **kwds) | 将多个数组保存到以`.npz`格式压缩的单个文件中。'
- en: The format of these binary file types is documented in [`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些二进制文件类型的格式在[`numpy.lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format
    "numpy.lib.format")中有详细文档。
- en: Text files
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本文件
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | 从文本文件中加载数据。'
- en: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | Save an array to a text file. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`savetxt`](generated/numpy.savetxt.html#numpy.savetxt "numpy.savetxt")(fname, X[, fmt, delimiter, newline, ...])
    | 将数组保存到文本文件中。'
- en: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | Load data from a text file, with missing values handled as specified. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`genfromtxt`](generated/numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")(fname[, dtype, comments, ...])
    | 从文本文件中加载数据，并根据指定方式处理缺失值。'
- en: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | Construct an array from a text file, using regular expression parsing. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`fromregex`](generated/numpy.fromregex.html#numpy.fromregex "numpy.fromregex")(file, regexp, dtype[, encoding])
    | 使用正则表达式解析，从文本文件中构建数组。'
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | 从字符串中的文本数据初始化一个新的1维数组。'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组以文本或二进制格式（默认为二进制）写入文件。'
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | 将数组作为`a.ndim`级别的嵌套Python标量列表返回。'
- en: Raw binary files
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始二进制文件
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | 从文本或二进制文件中构建数组。'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组写入文件，可以选择文本或二进制格式（默认为二进制）。'
- en: String formatting
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串格式化
- en: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | Return a string representation of an array. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`array2string`](generated/numpy.array2string.html#numpy.array2string "numpy.array2string")(a[, max_line_width, precision, ...])
    | 返回数组的字符串表示形式。'
- en: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | Return the string representation of an array. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`array_repr`](generated/numpy.array_repr.html#numpy.array_repr "numpy.array_repr")(arr[, max_line_width, precision, ...])
    | 返回数组的字符串表示形式。'
- en: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | Return a string representation of the data in an array. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`array_str`](generated/numpy.array_str.html#numpy.array_str "numpy.array_str")(a[, max_line_width, precision, ...])
    | 返回数组中数据的字符串表示形式。'
- en: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in positional notation. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")(x[, precision, ...]) | 以定点表示法将浮点标量格式化为十进制字符串。'
- en: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | Format a floating-point
    scalar as a decimal string in scientific notation. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")(x[, precision, ...]) | 以科学计数法将浮点标量格式化为十进制字符串。'
- en: Memory mapping files
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存映射文件
- en: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | Create a memory-map to an array stored in a *binary* file on disk. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`memmap`](generated/numpy.memmap.html#numpy.memmap "numpy.memmap")(filename[, dtype, mode, offset, ...])
    | 创建一个映射到存储在磁盘上的*二进制*文件中的数组的内存映射。 |'
- en: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | Open a .npy file as a
    memory-mapped array. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`lib.format.open_memmap`](generated/numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, ...]) | 打开一个 .npy 文件作为内存映射数组。
    |'
- en: Text formatting options
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本格式选项
- en: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | Set printing options.
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`set_printoptions`](generated/numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions")([precision, threshold, ...]) | 设置打印选项。 |'
- en: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | Return the current print options. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`get_printoptions`](generated/numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")() | 返回当前打印选项。 |'
- en: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | Set a Python function to be used when
    pretty printing arrays. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`set_string_function`](generated/numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function")(f[, repr]) | 设置在打印数组时使用的 Python 函数。 |'
- en: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | Context manager for setting print options. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`printoptions`](generated/numpy.printoptions.html#numpy.printoptions "numpy.printoptions")(*args, **kwargs)
    | 用于设置打印选项的上下文管理器。 |'
- en: Base-n representations
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Base-n 表示
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | 将输入数字的二进制表示作为字符串返回。 |'
- en: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | Return a string representation of a number in the given base system. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`base_repr`](generated/numpy.base_repr.html#numpy.base_repr "numpy.base_repr")(number[, base, padding])
    | 返回给定基本系统中数字的字符串表示。 |'
- en: Data sources
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据来源
- en: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | A generic data source file (file, http, ftp, ...). |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`DataSource`](generated/numpy.DataSource.html#numpy.DataSource "numpy.DataSource")([destpath])
    | 通用数据源文件（文件，http，ftp，...）。 |'
- en: Binary format description
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制格式描述
- en: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | Binary serialization |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`lib.format`](generated/numpy.lib.format.html#module-numpy.lib.format "numpy.lib.format")
    | 二进制序列化 |'
