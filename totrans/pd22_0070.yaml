- en: pandas.json_normalize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.json_normalize.html](https://pandas.pydata.org/docs/reference/api/pandas.json_normalize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Normalize semi-structured JSON data into a flat table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**dict or list of dicts'
  prefs: []
  type: TYPE_NORMAL
- en: Unserialized JSON objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**record_path**str or list of str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Path in each object to list of records. If not passed, data will be assumed
    to be an array of records.
  prefs: []
  type: TYPE_NORMAL
- en: '**meta**list of paths (str or list of str), default None'
  prefs: []
  type: TYPE_NORMAL
- en: Fields to use as metadata for each record in resulting table.
  prefs: []
  type: TYPE_NORMAL
- en: '**meta_prefix**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If True, prefix records with dotted (?) path, e.g. foo.bar.field if meta is
    [‘foo’, ‘bar’].
  prefs: []
  type: TYPE_NORMAL
- en: '**record_prefix**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If True, prefix records with dotted (?) path, e.g. foo.bar.field if path to
    records is [‘foo’, ‘bar’].
  prefs: []
  type: TYPE_NORMAL
- en: '**errors**{‘raise’, ‘ignore’}, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: Configures error handling.
  prefs: []
  type: TYPE_NORMAL
- en: '‘ignore’ : will ignore KeyError if keys listed in meta are not always present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘raise’ : will raise KeyError if keys listed in meta are not always present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sep**str, default ‘.’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nested records will generate names separated by sep. e.g., for sep=’.’, {‘foo’:
    {‘bar’: 0}} -> foo.bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_level**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Max number of levels(depth of dict) to normalize. if None, normalizes all levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**frame**DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Normalize semi-structured JSON data into a flat table.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Normalizes nested data up to level 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns normalized data with columns prefixed with the given string.
  prefs: []
  type: TYPE_NORMAL
