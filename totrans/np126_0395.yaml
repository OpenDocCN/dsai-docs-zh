- en: String operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.char.html](https://numpy.org/doc/1.26/reference/routines.char.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`numpy.char`](#module-numpy.char "numpy.char") module provides a set of
    vectorized string operations for arrays of type [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_") or [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_").
    For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The methods in this module are based on the methods in `String`
  prefs: []
  type: TYPE_NORMAL
- en: String operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | Return element-wise string concatenation for two arrays of str or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | Return (a * i), that is string multiple concatenation, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise
    for a pair of array_likes of str or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | Return a copy of *a* with only the first character
    of each element capitalized. |'
  prefs: []
  type: TYPE_TB
- en: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | Return a copy of *a* with its elements centered in a string of length *width*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | Calls *str.encode* element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  prefs: []
  type: TYPE_TB
- en: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | Return an array with the elements of *a* left-justified in a string of length
    *width*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | Return an array with the elements converted to lowercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | For each element in *a*, return a copy with the leading characters removed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | Partition each element in *a* around *sep*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | For each element in *a*, return a copy of the string with all occurrences of
    substring *old* replaced by *new*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | Return an array with the elements of *a* right-justified in a string of length
    *width*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | Partition (split) each element around the right-most
    separator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | For each element in *a*, return a copy with the trailing characters removed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | For each element in *a*, return a list
    of the lines in the element, breaking at line boundaries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | For each element in *a*, return a copy with the leading and trailing characters
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | Return element-wise a copy of the string with uppercase characters converted
    to lowercase and vice versa. |'
  prefs: []
  type: TYPE_TB
- en: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | Return element-wise title cased version of string or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | For each element in *a*, return a copy of the string where all characters occurring
    in the optional argument *deletechars* are removed, and the remaining characters
    have been mapped through the given translation table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | Return an array with the elements converted to uppercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | Return the numeric string left-filled with zeros |'
  prefs: []
  type: TYPE_TB
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the standard numpy comparison operators, the ones in the *char* module
    strip trailing whitespace characters before performing the comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | Return (x1 == x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | Return (x1 != x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | Return (x1 >= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | Return (x1 <= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | Return (x1 > x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | Return (x1 < x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | Performs element-wise
    comparison of two string arrays using the comparison operator specified by *cmp_op*.
    |'
  prefs: []
  type: TYPE_TB
- en: String information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | Returns a boolean array which is *True* where the string element in *a* ends
    with *suffix*, otherwise *False*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | Like [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find"),
    but raises *ValueError* when the substring is not found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | Returns true for each element if all characters in the string are alphabetic
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | Returns true for each element if all characters in the string are alphanumeric
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | For each element, return True if there are only decimal characters in the element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | Returns true for each element if all characters in the string are digits and
    there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | Returns true for each element if all cased characters in the string are lowercase
    and there is at least one cased character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | For each element, return True if there are only numeric characters in the element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | Returns true for each element if there are only whitespace characters in the
    string and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | Returns true for each element if the element is a titlecased string and there
    is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | Return true for each element if all cased characters in the string are uppercase
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | For each element in *a*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | Like [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind"),
    but raises *ValueError* when the substring *sub* is not found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith
    "numpy.char.startswith")(a, prefix[, start, end]) | Returns a boolean array which
    is *True* where the string element in *a* starts with *prefix*, otherwise *False*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | Return len(a) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Convenience class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | Convert the input to a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"), copying the data only if necessary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | Provides a convenient view on arrays of string and unicode values. |'
  prefs: []
  type: TYPE_TB
- en: String operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | Return element-wise string concatenation for two arrays of str or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | Return (a * i), that is string multiple concatenation, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise
    for a pair of array_likes of str or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | Return a copy of *a* with only the first character
    of each element capitalized. |'
  prefs: []
  type: TYPE_TB
- en: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | Return a copy of *a* with its elements centered in a string of length *width*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | Calls *str.encode* element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  prefs: []
  type: TYPE_TB
- en: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | Return an array with the elements of *a* left-justified in a string of length
    *width*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | Return an array with the elements converted to lowercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | For each element in *a*, return a copy with the leading characters removed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | Partition each element in *a* around *sep*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | For each element in *a*, return a copy of the string with all occurrences of
    substring *old* replaced by *new*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | Return an array with the elements of *a* right-justified in a string of length
    *width*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | Partition (split) each element around the right-most
    separator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | For each element in *a*, return a copy with the trailing characters removed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | For each element in *a*, return a list
    of the lines in the element, breaking at line boundaries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | For each element in *a*, return a copy with the leading and trailing characters
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | Return element-wise a copy of the string with uppercase characters converted
    to lowercase and vice versa. |'
  prefs: []
  type: TYPE_TB
- en: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | Return element-wise title cased version of string or unicode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | For each element in *a*, return a copy of the string where all characters occurring
    in the optional argument *deletechars* are removed, and the remaining characters
    have been mapped through the given translation table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | Return an array with the elements converted to uppercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | Return the numeric string left-filled with zeros |'
  prefs: []
  type: TYPE_TB
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the standard numpy comparison operators, the ones in the *char* module
    strip trailing whitespace characters before performing the comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | Return (x1 == x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | Return (x1 != x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | Return (x1 >= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | Return (x1 <= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | Return (x1 > x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | Return (x1 < x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | Performs element-wise
    comparison of two string arrays using the comparison operator specified by *cmp_op*.
    |'
  prefs: []
  type: TYPE_TB
- en: String information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | Returns a boolean array which is *True* where the string element in *a* ends
    with *suffix*, otherwise *False*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | Like [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find"),
    but raises *ValueError* when the substring is not found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | Returns true for each element if all characters in the string are alphabetic
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | Returns true for each element if all characters in the string are alphanumeric
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | For each element, return True if there are only decimal characters in the element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | Returns true for each element if all characters in the string are digits and
    there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | Returns true for each element if all cased characters in the string are lowercase
    and there is at least one cased character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | For each element, return True if there are only numeric characters in the element.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | Returns true for each element if there are only whitespace characters in the
    string and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | Returns true for each element if the element is a titlecased string and there
    is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | Return true for each element if all cased characters in the string are uppercase
    and there is at least one character, false otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | For each element in *a*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | Like [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind"),
    but raises *ValueError* when the substring *sub* is not found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith
    "numpy.char.startswith")(a, prefix[, start, end]) | Returns a boolean array which
    is *True* where the string element in *a* starts with *prefix*, otherwise *False*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | Return len(a) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Convenience class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | Convert the input to a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"), copying the data only if necessary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | Provides a convenient view on arrays of string and unicode values. |'
  prefs: []
  type: TYPE_TB
