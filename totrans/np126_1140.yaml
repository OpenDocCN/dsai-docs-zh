- en: NumPy 1.18.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.18.0 发行说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.18.0-notes.html](https://numpy.org/doc/1.26/release/1.18.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.18.0-notes.html](https://numpy.org/doc/1.26/release/1.18.0-notes.html)
- en: In addition to the usual bug fixes, this NumPy release cleans up and documents
    the new random C-API, expires a large number of old deprecations, and improves
    the appearance of the documentation. The Python versions supported are 3.5-3.8.
    This is the last NumPy release series that will support Python 3.5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常规的错误修复外，此 NumPy 发行版还清理和文档化了新的随机 C-API，废弃了大量旧的弃用内容，并改进了文档的外观。支持的 Python 版本为3.5-3.8。这是最后一个支持
    Python 3.5的 NumPy 发行系列。
- en: Downstream developers should use Cython >= 0.29.14 for Python 3.8 support and
    OpenBLAS >= 3.7 to avoid problems on the Skylake architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下游开发人员应使用Cython >= 0.29.14以支持Python 3.8，并使用OpenBLAS >= 3.7以避免在Skylake架构上出现问题。
- en: Highlights
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The C-API for `numpy.random` has been defined and documented.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.random`的C-API已定义和文档化。'
- en: Basic infrastructure for linking with 64 bit BLAS and LAPACK libraries.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与64位BLAS和LAPACK库链接的基础设施。
- en: Many documentation improvements.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多文档改进。
- en: New functions
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的功能
- en: Multivariate hypergeometric distribution added to `numpy.random`
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了多元超几何分布到`numpy.random`
- en: The method `multivariate_hypergeometric` has been added to the class [`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator"). This method generates random variates from the multivariate
    hypergeometric probability distribution. ([gh-13794](https://github.com/numpy/numpy/pull/13794))
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将方法`multivariate_hypergeometric`添加到类[`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator")中。此方法生成多元超几何概率分布的随机变量。([gh-13794](https://github.com/numpy/numpy/pull/13794))
- en: Deprecations
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: '`np.fromfile` and `np.fromstring` will error on bad data'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromfile`和`np.fromstring`将在错误数据上报错'
- en: In future numpy releases, the functions `np.fromfile` and `np.fromstring` will
    throw an error when parsing bad data. This will now give a `DeprecationWarning`
    where previously partial or even invalid data was silently returned. This deprecation
    also affects the C defined functions `PyArray_FromString` and `PyArray_FromFile`
    ([gh-13605](https://github.com/numpy/numpy/pull/13605))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的 numpy 发行版中，当解析错误数据时，函数`np.fromfile`和`np.fromstring`将抛出错误。这样做会产生`DeprecationWarning`，而以前会静默返回部分甚至无效的数据。此弃用还影响了
    C 定义的函数`PyArray_FromString`和`PyArray_FromFile` ([gh-13605](https://github.com/numpy/numpy/pull/13605))
- en: Deprecate non-scalar arrays as fill values in `ma.fill_value`
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用非标量数组作为`ma.fill_value`的填充值
- en: Setting a `MaskedArray.fill_value` to a non-scalar array is deprecated since
    the logic to broadcast the fill value to the array is fragile, especially when
    slicing. ([gh-13698](https://github.com/numpy/numpy/pull/13698))
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将非标量数组设置为`MaskedArray.fill_value`已弃用，因为广播填充值到数组的逻辑很脆弱，特别是在切片时。([gh-13698](https://github.com/numpy/numpy/pull/13698))
- en: Deprecate `PyArray_As1D`, `PyArray_As2D`
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`PyArray_As1D`，`PyArray_As2D`
- en: '`PyArray_As1D`, `PyArray_As2D` are deprecated, use `PyArray_AsCArray` instead
    ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用`PyArray_As1D`，`PyArray_As2D`，使用`PyArray_AsCArray`替代 ([gh-14036](https://github.com/numpy/numpy/pull/14036))
- en: Deprecate `np.alen`
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`np.alen`
- en: '`np.alen` was deprecated. Use `len` instead. ([gh-14181](https://github.com/numpy/numpy/pull/14181))'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.alen`已被弃用。请使用`len`替代。([gh-14181](https://github.com/numpy/numpy/pull/14181))'
- en: Deprecate the financial functions
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用财务函数
- en: In accordance with [NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html),
    the financial functions `fv` `ipmt`, `irr`, `mirr`, `nper`, `npv`, `pmt`, `ppmt`,
    `pv` and `rate` are deprecated, and will be removed from NumPy 1.20.The replacement
    for these functions is the Python package [numpy-financial](https://pypi.org/project/numpy-financial).
    ([gh-14720](https://github.com/numpy/numpy/pull/14720))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html)
    的规定，财务函数`fv` `ipmt`, `irr`, `mirr`, `nper`, `npv`, `pmt`, `ppmt`, `pv`和`rate`已被弃用，并将在
    NumPy 1.20 中移除。这些函数的替代品是 Python 包 [numpy-financial](https://pypi.org/project/numpy-financial)
    。([gh-14720](https://github.com/numpy/numpy/pull/14720))
- en: The `axis` argument to `numpy.ma.mask_cols` and `numpy.ma.mask_row` is deprecated
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma.mask_cols`和`numpy.ma.mask_row`的`axis`参数已弃用'
- en: This argument was always ignored. ([gh-14996](https://github.com/numpy/numpy/pull/14996))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数一直被忽略。([gh-14996](https://github.com/numpy/numpy/pull/14996))
- en: Expired deprecations
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期弃用
- en: '`PyArray_As1D` and `PyArray_As2D` have been removed in favor of `PyArray_AsCArray`
    ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_As1D`和`PyArray_As2D`已被移除，使用`PyArray_AsCArray`替代 ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
- en: '`np.rank` has been removed. This was deprecated in NumPy 1.10 and has been
    replaced by `np.ndim`. ([gh-14039](https://github.com/numpy/numpy/pull/14039))'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.rank`已被移除。这在NumPy 1.10中已被弃用，并已被`np.ndim`替代。([gh-14039](https://github.com/numpy/numpy/pull/14039))'
- en: The deprecation of `expand_dims` out-of-range axes in 1.13.0 has expired. ([gh-14051](https://github.com/numpy/numpy/pull/14051))
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand_dims`在1.13.0版本中废弃的超出范围轴已经过期。（[gh-14051](https://github.com/numpy/numpy/pull/14051)）'
- en: '`PyArray_FromDimsAndDataAndDescr` and `PyArray_FromDims` have been removed
    (they will always raise an error). Use `PyArray_NewFromDescr` and `PyArray_SimpleNew`
    instead. ([gh-14100](https://github.com/numpy/numpy/pull/14100))'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除`PyArray_FromDimsAndDataAndDescr`和`PyArray_FromDims`（它们将始终引发错误）。使用`PyArray_NewFromDescr`和`PyArray_SimpleNew`代替。([gh-14100](https://github.com/numpy/numpy/pull/14100))
- en: '`numeric.loads`, `numeric.load`, `np.ma.dump`, `np.ma.dumps`, `np.ma.load`,
    `np.ma.loads` are removed, use `pickle` methods instead ([gh-14256](https://github.com/numpy/numpy/pull/14256))'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numeric.loads`，`numeric.load`，`np.ma.dump`，`np.ma.dumps`，`np.ma.load`，`np.ma.loads`已被移除，使用`pickle`方法代替。([gh-14256](https://github.com/numpy/numpy/pull/14256))'
- en: '`arrayprint.FloatFormat`, `arrayprint.LongFloatFormat` has been removed, use
    `FloatingFormat` instead'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除`arrayprint.FloatFormat`，`arrayprint.LongFloatFormat`，使用`FloatingFormat`代替
- en: '`arrayprint.ComplexFormat`, `arrayprint.LongComplexFormat` has been removed,
    use `ComplexFloatingFormat` instead'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除`arrayprint.ComplexFormat`，`arrayprint.LongComplexFormat`，使用`ComplexFloatingFormat`代替
- en: '`arrayprint.StructureFormat` has been removed, use `StructureVoidFormat` instead
    ([gh-14259](https://github.com/numpy/numpy/pull/14259))'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除`arrayprint.StructureFormat`，使用`StructureVoidFormat`代替。([gh-14259](https://github.com/numpy/numpy/pull/14259))
- en: '`np.testing.rand` has been removed. This was deprecated in NumPy 1.11 and has
    been replaced by `np.random.rand`. ([gh-14325](https://github.com/numpy/numpy/pull/14325))'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.testing.rand`已被移除。这在NumPy 1.11中已被弃用，并已被`np.random.rand`替代。([gh-14325](https://github.com/numpy/numpy/pull/14325))'
- en: Class `SafeEval` in `numpy/lib/utils.py` has been removed. This was deprecated
    in NumPy 1.10\. Use `np.safe_eval` instead. ([gh-14335](https://github.com/numpy/numpy/pull/14335))
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`numpy/lib/utils.py`中移除`SafeEval`类。这在NumPy 1.10已被弃用。使用`np.safe_eval`代替。([gh-14335](https://github.com/numpy/numpy/pull/14335))
- en: Remove deprecated support for boolean and empty condition lists in `np.select`
    ([gh-14583](https://github.com/numpy/numpy/pull/14583))
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除对`np.select`中boolean和空条件列表的弃用支持。（[gh-14583](https://github.com/numpy/numpy/pull/14583)）
- en: Array order only accepts ‘C’, ‘F’, ‘A’, and ‘K’. More permissive options were
    deprecated in NumPy 1.11. ([gh-14596](https://github.com/numpy/numpy/pull/14596))
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组顺序只接受'C'，'F'，'A'和'K'。更宽容的选项在NumPy 1.11中已弃用。([gh-14596](https://github.com/numpy/numpy/pull/14596))
- en: np.linspace parameter `num` must be an integer. Deprecated in NumPy 1.12. ([gh-14620](https://github.com/numpy/numpy/pull/14620))
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: np.linspace参数`num`必须是整数。在NumPy 1.12中已弃用。([gh-14620](https://github.com/numpy/numpy/pull/14620))
- en: UFuncs with multiple outputs must use a tuple for the `out` kwarg. This finishes
    a deprecation started in NumPy 1.10. ([gh-14682](https://github.com/numpy/numpy/pull/14682))
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个输出的UFunc必须使用元组作为`out` kwarg。这完成了自NumPy 1.10起弃用的操作。([gh-14682](https://github.com/numpy/numpy/pull/14682))
- en: The files `numpy/testing/decorators.py`, `numpy/testing/noseclasses.py` and
    `numpy/testing/nosetester.py` have been removed. They were never meant to be public
    (all relevant objects are present in the `numpy.testing` namespace), and importing
    them has given a deprecation warning since NumPy 1.15.0 ([gh-14567](https://github.com/numpy/numpy/pull/14567))
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`numpy/testing/decorators.py`，`numpy/testing/noseclasses.py`和`numpy/testing/nosetester.py`已被移除。它们从未被视为公共内容（所有相关对象存在于`numpy.testing`名称空间中），并且自NumPy
    1.15.0以来导入它们即已弃用（[gh-14567](https://github.com/numpy/numpy/pull/14567)）
- en: Compatibility notes
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields") can no longer return None'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields")不再能返回None'
- en: 'If `drop_fields` is used to drop all fields, previously the array would be
    completely discarded and None returned. Now it returns an array of the same shape
    as the input, but with no fields. The old behavior can be retained with:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`drop_fields`来删除所有字段，则以前的数组将被完全丢弃并返回None。现在它返回与输入相同形状的数组，但没有字段。旧的行为可以保留为：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: converting the empty recarray to None ([gh-14510](https://github.com/numpy/numpy/pull/14510))
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将空的recarray转换为None。([gh-14510](https://github.com/numpy/numpy/pull/14510))
- en: '`numpy.argmin/argmax/min/max` returns `NaT` if it exists in array'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.argmin/argmax/min/max`如果在数组中存在则返回`NaT`'
- en: '`numpy.argmin`, `numpy.argmax`, `numpy.min`, and `numpy.max` will return `NaT`
    if it exists in the array. ([gh-14717](https://github.com/numpy/numpy/pull/14717))'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中存在 `NaT`，`numpy.argmin`、`numpy.argmax`、`numpy.min` 和 `numpy.max` 将返回 `NaT`。
    ([gh-14717](https://github.com/numpy/numpy/pull/14717))
- en: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')` is now `False`'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')` 现在为 `False`'
- en: Previously this was `True` - however, this was inconsistent with `uint64` not
    being safely castable to `int64`, and resulting in strange type resolution.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以前这是 `True` - 但是，这与 `uint64` 不能安全地转换为 `int64` 不一致，导致类型解析出现问题。
- en: If this impacts your code, cast `uint64` to `int64` first. ([gh-14718](https://github.com/numpy/numpy/pull/14718))
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这影响到您的代码，请先将 `uint64` 转换为 `int64`。 ([gh-14718](https://github.com/numpy/numpy/pull/14718))
- en: Changed random variate stream from `numpy.random.Generator.integers`
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 `numpy.random.Generator.integers` 改变了随机变量流
- en: There was a bug in `numpy.random.Generator.integers` that caused biased sampling
    of 8 and 16 bit integer types. Fixing that bug has changed the output stream from
    what it was in previous releases. ([gh-14777](https://github.com/numpy/numpy/pull/14777))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random.Generator.integers` 存在错误，导致 8 位和 16 位整数类型的抽样有偏误。修复该错误将改变输出流，与以前版本的输出流不同。
    ([gh-14777](https://github.com/numpy/numpy/pull/14777))'
- en: Add more ufunc loops for `datetime64`, `timedelta64`
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `datetime64`、`timedelta64` 添加更多的 ufunc 循环
- en: '`np.datetime(''NaT'')` should behave more like `float(''Nan'')`. Add needed
    infrastructure so `np.isinf(a)` and `np.isnan(a)` will run on `datetime64` and
    `timedelta64` dtypes. Also added specific loops for `numpy.fmin` and `numpy.fmax`
    that mask `NaT`. This may require adjustment to user- facing code. Specifically,
    code that either disallowed the calls to `numpy.isinf` or `numpy.isnan` or checked
    that they raised an exception will require adaptation, and code that mistakenly
    called `numpy.fmax` and `numpy.fmin` instead of `numpy.maximum` or `numpy.minimum`
    respectively will require adjustment. This also affects `numpy.nanmax` and `numpy.nanmin`.
    ([gh-14841](https://github.com/numpy/numpy/pull/14841))'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.datetime(''NaT'')` 应该更像 `float(''Nan'')`。添加所需的基础设施，以便在 `datetime64` 和 `timedelta64`
    dtypes 上运行 `np.isinf(a)` 和 `np.isnan(a)`。还为 `numpy.fmin` 和 `numpy.fmax` 添加了特定的循环，该循环蒙版了
    `NaT`。这可能需要调整用户代码。特别是，不允许调用 `numpy.isinf` 或 `numpy.isnan` 或检查它们是否引发异常的代码将需要调整，而错误调用
    `numpy.fmax` 和 `numpy.fmin` 而不是分别调整 `numpy.maximum` 或 `numpy.minimum` 的代码也需要调整。这也影响
    `numpy.nanmax` 和 `numpy.nanmin`。 ([gh-14841](https://github.com/numpy/numpy/pull/14841))'
- en: Moved modules in `numpy.random`
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy.random` 中移动模块
- en: As part of the API cleanup, the submodules in `numpy.random` `bit_generator`,
    `philox`, `pcg64`, `sfc64, ``common`, `generator`, and `bounded_integers` were
    moved to `_bit_generator`, `_philox`, `_pcg64`, `_sfc64, ``_common`, `_generator`,
    and `_bounded_integers` respectively to indicate that they are not part of the
    public interface. ([gh-14608](https://github.com/numpy/numpy/pull/14608))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 API 清理的一部分，`numpy.random` 中的子模块 `bit_generator`、`philox`、`pcg64`、`sfc64,  `common`、`generator`
    和 `bounded_integers` 分别移动到 `_bit_generator`、`_philox`、`_pcg64`、`_sfc64,  `_common`、`_generator`
    和 `_bounded_integers`，以指示它们不是公共接口的一部分。 ([gh-14608](https://github.com/numpy/numpy/pull/14608))
- en: C API changes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API 变更
- en: '`PyDataType_ISUNSIZED(descr)` now returns False for structured datatypes'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于结构化数据类型，`PyDataType_ISUNSIZED(descr)` 现在返回 False
- en: Previously this returned True for any datatype of itemsize 0, but now this returns
    false for the non-flexible datatype with itemsize 0, `np.dtype([])`. ([gh-14393](https://github.com/numpy/numpy/pull/14393))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以前对于项目大小为 0 的任何数据类型都会返回 True，但现在对于项目大小为 0 的非灵活数据类型 `np.dtype([])`，现在会返回 false。
    ([gh-14393](https://github.com/numpy/numpy/pull/14393))
- en: New Features
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: Add our own `*.pxd` cython import file
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自己的 `*.pxd` Cython 导入文件
- en: Added a `numpy/__init__.pxd` file. It will be used for `cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个 `numpy/__init__.pxd` 文件。它将用于 `cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
- en: A tuple of axes can now be input to `expand_dims`
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以将轴的元组输入到 `expand_dims`
- en: The `numpy.expand_dims` `axis` keyword can now accept a tuple of axes. Previously,
    `axis` was required to be an integer. ([gh-14051](https://github.com/numpy/numpy/pull/14051))
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.expand_dims` 的 `axis` 关键字现在可以接受轴的元组。以前，`axis` 必须是整数。 ([gh-14051](https://github.com/numpy/numpy/pull/14051))'
- en: Support for 64-bit OpenBLAS
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 64 位 OpenBLAS 的支持
- en: Added support for 64-bit (ILP64) OpenBLAS. See `site.cfg.example` for details.
    ([gh-15012](https://github.com/numpy/numpy/pull/15012))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对 64 位（ILP64）OpenBLAS 的支持。有关详细信息，请参见 `site.cfg.example`。 ([gh-15012](https://github.com/numpy/numpy/pull/15012))
- en: Add `--f2cmap` option to F2PY
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 F2PY 添加了 `--f2cmap` 选项
- en: Allow specifying a file to load Fortran-to-C type map customizations from. ([gh-15113](https://github.com/numpy/numpy/pull/15113))
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different C numeric types of the same size have unique names
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On any given platform, two of `np.intc`, `np.int_`, and `np.longlong` would
    previously appear indistinguishable through their `repr`, despite their corresponding
    `dtype` having different properties. A similar problem existed for the unsigned
    counterparts to these types, and on some platforms for `np.double` and `np.longdouble`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: These types now always print with a unique `__name__`. ([gh-10151](https://github.com/numpy/numpy/pull/10151))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`argwhere` now produces a consistent result on 0d arrays'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On N-d arrays, `numpy.argwhere` now always produces an array of shape `(n_non_zero,
    arr.ndim)`, even when `arr.ndim == 0`. Previously, the last axis would have a
    dimension of 1 in this case. ([gh-13610](https://github.com/numpy/numpy/pull/13610))
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Add `axis` argument for `random.permutation` and `random.shuffle`
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously the `random.permutation` and `random.shuffle` functions can only
    shuffle an array along the first axis; they now have a new argument `axis` which
    allows shuffle along a specified axis. ([gh-13829](https://github.com/numpy/numpy/pull/13829))
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`method` keyword argument for `np.random.multivariate_normal`'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `method` keyword argument is now available for `np.random.multivariate_normal`
    with possible values `{'svd', 'eigh', 'cholesky'}`. To use it, write `np.random.multivariate_normal(...,
    method=<method>)`. ([gh-14197](https://github.com/numpy/numpy/pull/14197))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Add complex number support for `numpy.fromstring`
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now `numpy.fromstring` can read complex numbers. ([gh-14227](https://github.com/numpy/numpy/pull/14227))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.unique` has consistent axes order when `axis` is not None'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `moveaxis` instead of `swapaxes` in `numpy.unique`, so that the ordering
    of axes except the axis in arguments will not be broken. ([gh-14255](https://github.com/numpy/numpy/pull/14255))
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.matmul` with boolean output now converts to boolean values'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `numpy.matmul` where the output is a boolean array would fill the array
    with uint8 equivalents of the result, rather than 0/1\. Now it forces the output
    to 0 or 1 (`NPY_TRUE` or `NPY_FALSE`). ([gh-14464](https://github.com/numpy/numpy/pull/14464))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.random.randint` produced incorrect value when the range was `2**32`'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The implementation introduced in 1.17.0 had an incorrect check when determining
    whether to use the 32-bit path or the full 64-bit path that incorrectly redirected
    random integer generation with a high - low range of `2**32` to the 64-bit generator.
    ([gh-14501](https://github.com/numpy/numpy/pull/14501))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Add complex number support for `numpy.fromfile`
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now `numpy.fromfile` can read complex numbers. ([gh-14730](https://github.com/numpy/numpy/pull/14730))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`std=c99` added if compiler is named `gcc`'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GCC before version 5 requires the `-std=c99` command line argument. Newer compilers
    automatically turn on C99 mode. The compiler setup code will automatically add
    the code if the compiler name has `gcc` in it. ([gh-14771](https://github.com/numpy/numpy/pull/14771))
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NaT` now sorts to the end of arrays'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`NaT` is now effectively treated as the largest integer for sorting purposes,
    so that it sorts to the end of arrays. This change is for consistency with `NaN`
    sorting behavior. ([gh-12658](https://github.com/numpy/numpy/pull/12658)) ([gh-15068](https://github.com/numpy/numpy/pull/15068))'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Incorrect `threshold` in `np.set_printoptions` raises `TypeError` or `ValueError`
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously an incorrect `threshold` raised `ValueError`; it now raises `TypeError`
    for non-numeric types and `ValueError` for `nan` values. ([gh-13899](https://github.com/numpy/numpy/pull/13899))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Warn when saving a dtype with metadata
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `UserWarning` will be emitted when saving an array via `numpy.save` with `metadata`.
    Saving such an array may not preserve metadata, and if metadata is preserved,
    loading it will cause a `ValueError`. This shortcoming in save and load will be
    addressed in a future release. ([gh-14142](https://github.com/numpy/numpy/pull/14142))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.distutils` append behavior changed for LDFLAGS and similar'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to `LDFLAGS` and other similar such
    environment variables for compiling Fortran extensions. Now the default behavior
    has changed to appending - which is the expected behavior in most situations.
    To preserve the old (overwriting) behavior, set the `NPY_DISTUTILS_APPEND_FLAGS`
    environment variable to 0\. This applies to: `LDFLAGS`, `F77FLAGS`, `F90FLAGS`,
    `FREEFLAGS`, `FOPT`, `FDEBUG`, and `FFLAGS`. NumPy 1.16 and 1.17 gave build warnings
    in situations where this change in behavior would have affected the compile flags
    used. ([gh-14248](https://github.com/numpy/numpy/pull/14248))'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Remove `numpy.random.entropy` without a deprecation
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.random.entropy` was added to the `numpy.random` namespace in 1.17.0.
    It was meant to be a private c-extension module, but was exposed as public. It
    has been replaced by `numpy.random.SeedSequence` so the module was completely
    removed. ([gh-14498](https://github.com/numpy/numpy/pull/14498))'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Add options to quiet build configuration and build with `-Werror`
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added two new configuration options. During the `build_src` subcommand, as part
    of configuring NumPy, the files `_numpyconfig.h` and `config.h` are created by
    probing support for various runtime functions and routines. Previously, the very
    verbose compiler output during this stage clouded more important information.
    By default the output is silenced. Running `runtests.py --debug-info` will add
    `--verbose-cfg` to the `build_src` subcommand,which will restore the previous
    behaviour.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Adding `CFLAGS=-Werror` to turn warnings into errors would trigger errors during
    the configuration. Now `runtests.py --warn-error` will add `--warn-error` to the
    `build` subcommand, which will percolate to the `build_ext` and `build_lib` subcommands.
    This will add the compiler flag to those stages and turn compiler warnings into
    errors while actually building NumPy itself, avoiding the `build_src` subcommand
    compiler calls.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置期间将`CFLAGS=-Werror`添加以将警告转换为错误会触发错误。现在`runtests.py --warn-error`将在`build`子命令中添加`--warn-error`，这将传播到`build_ext`和`build_lib`子命令。这将在这些阶段添加编译器标志，并在构建NumPy本身时将编译器警告转换为错误，避免`build_src`子命令的编译器调用。
- en: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
- en: Highlights
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The C-API for `numpy.random` has been defined and documented.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已定义和记录了`numpy.random`的C-API。
- en: Basic infrastructure for linking with 64 bit BLAS and LAPACK libraries.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与64位BLAS和LAPACK库进行链接的基本基础设施。
- en: Many documentation improvements.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多文档改进。
- en: New functions
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: Multivariate hypergeometric distribution added to `numpy.random`
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了多元超几何分布到`numpy.random`
- en: The method `multivariate_hypergeometric` has been added to the class [`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator"). This method generates random variates from the multivariate
    hypergeometric probability distribution. ([gh-13794](https://github.com/numpy/numpy/pull/13794))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 已向类[`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator")添加了方法`multivariate_hypergeometric`。该方法从多元超几何概率分布中生成随机变量。([gh-13794](https://github.com/numpy/numpy/pull/13794))
- en: Multivariate hypergeometric distribution added to `numpy.random`
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了多元超几何分布到`numpy.random`
- en: The method `multivariate_hypergeometric` has been added to the class [`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator"). This method generates random variates from the multivariate
    hypergeometric probability distribution. ([gh-13794](https://github.com/numpy/numpy/pull/13794))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 已向类[`numpy.random.Generator`](../reference/random/generator.html#numpy.random.Generator
    "numpy.random.Generator")添加了方法`multivariate_hypergeometric`。该方法从多元超几何概率分布中生成随机变量。([gh-13794](https://github.com/numpy/numpy/pull/13794))
- en: Deprecations
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: '`np.fromfile` and `np.fromstring` will error on bad data'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromfile`和`np.fromstring`在错误数据上将产生错误'
- en: In future numpy releases, the functions `np.fromfile` and `np.fromstring` will
    throw an error when parsing bad data. This will now give a `DeprecationWarning`
    where previously partial or even invalid data was silently returned. This deprecation
    also affects the C defined functions `PyArray_FromString` and `PyArray_FromFile`
    ([gh-13605](https://github.com/numpy/numpy/pull/13605))
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的numpy发布版本中，函数`np.fromfile`和`np.fromstring`将在解析错误数据时抛出错误。现在，以前部分甚至无效的数据将悄无声息地返回，而现在将产生`DeprecationWarning`。这种弃用还影响了C定义的函数`PyArray_FromString`和`PyArray_FromFile`（[gh-13605](https://github.com/numpy/numpy/pull/13605)）
- en: Deprecate non-scalar arrays as fill values in `ma.fill_value`
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`ma.fill_value`中的非标量数组作为填充值
- en: Setting a `MaskedArray.fill_value` to a non-scalar array is deprecated since
    the logic to broadcast the fill value to the array is fragile, especially when
    slicing. ([gh-13698](https://github.com/numpy/numpy/pull/13698))
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将`MaskedArray.fill_value`设置为非标量数组已被弃用，因为广播填充值到数组的逻辑是脆弱的，特别是在切片时。 ([gh-13698](https://github.com/numpy/numpy/pull/13698))
- en: Deprecate `PyArray_As1D`, `PyArray_As2D`
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`PyArray_As1D`，`PyArray_As2D`
- en: '`PyArray_As1D`, `PyArray_As2D` are deprecated, use `PyArray_AsCArray` instead
    ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_As1D`，`PyArray_As2D`已弃用，改用`PyArray_AsCArray`代替（[gh-14036](https://github.com/numpy/numpy/pull/14036)）'
- en: Deprecate `np.alen`
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`np.alen`
- en: '`np.alen` was deprecated. Use `len` instead. ([gh-14181](https://github.com/numpy/numpy/pull/14181))'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用`np.alen`。使用`len`代替。([gh-14181](https://github.com/numpy/numpy/pull/14181))
- en: Deprecate the financial functions
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用了金融函数
- en: In accordance with [NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html),
    the financial functions `fv` `ipmt`, `irr`, `mirr`, `nper`, `npv`, `pmt`, `ppmt`,
    `pv` and `rate` are deprecated, and will be removed from NumPy 1.20.The replacement
    for these functions is the Python package [numpy-financial](https://pypi.org/project/numpy-financial).
    ([gh-14720](https://github.com/numpy/numpy/pull/14720))
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html)的规定，金融函数`fv`、`ipmt`、`irr`、`mirr`、`nper`、`npv`、`pmt`、`ppmt`、`pv`和`rate`已被弃用，并将在NumPy
    1.20中被移除。这些函数的替代品是Python包[numpy-financial](https://pypi.org/project/numpy-financial)（[gh-14720](https://github.com/numpy/numpy/pull/14720)）
- en: The `axis` argument to `numpy.ma.mask_cols` and `numpy.ma.mask_row` is deprecated
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma.mask_cols`和`numpy.ma.mask_row`的`axis`参数已弃用'
- en: This argument was always ignored. ([gh-14996](https://github.com/numpy/numpy/pull/14996))
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数总是被忽略的（[gh-14996](https://github.com/numpy/numpy/pull/14996)）
- en: '`np.fromfile` and `np.fromstring` will error on bad data'
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromfile`和`np.fromstring`在解析错误数据时会出错'
- en: In future numpy releases, the functions `np.fromfile` and `np.fromstring` will
    throw an error when parsing bad data. This will now give a `DeprecationWarning`
    where previously partial or even invalid data was silently returned. This deprecation
    also affects the C defined functions `PyArray_FromString` and `PyArray_FromFile`
    ([gh-13605](https://github.com/numpy/numpy/pull/13605))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的NumPy版本中，当解析错误数据时，`np.fromfile`和`np.fromstring`将抛出错误。之前，部分甚至无效的数据会被悄无声息地返回。这个弃用还会影响C定义的函数`PyArray_FromString`和`PyArray_FromFile`（[gh-13605](https://github.com/numpy/numpy/pull/13605)）
- en: Deprecate non-scalar arrays as fill values in `ma.fill_value`
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`ma.fill_value`中的非标量数组作为填充值
- en: Setting a `MaskedArray.fill_value` to a non-scalar array is deprecated since
    the logic to broadcast the fill value to the array is fragile, especially when
    slicing. ([gh-13698](https://github.com/numpy/numpy/pull/13698))
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将`MaskedArray.fill_value`设置为非标量数组已弃用，因为将填充值广播到数组的逻辑不稳定，特别是在切片时（[gh-13698](https://github.com/numpy/numpy/pull/13698)）
- en: Deprecate `PyArray_As1D`, `PyArray_As2D`
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`PyArray_As1D`、`PyArray_As2D`
- en: '`PyArray_As1D`, `PyArray_As2D` are deprecated, use `PyArray_AsCArray` instead
    ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_As1D`、`PyArray_As2D`已弃用，请改用`PyArray_AsCArray`（[gh-14036](https://github.com/numpy/numpy/pull/14036)）'
- en: Deprecate `np.alen`
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用`np.alen`
- en: '`np.alen` was deprecated. Use `len` instead. ([gh-14181](https://github.com/numpy/numpy/pull/14181))'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用`np.alen`，请使用`len`（[gh-14181](https://github.com/numpy/numpy/pull/14181)）
- en: Deprecate the financial functions
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用金融函数
- en: In accordance with [NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html),
    the financial functions `fv` `ipmt`, `irr`, `mirr`, `nper`, `npv`, `pmt`, `ppmt`,
    `pv` and `rate` are deprecated, and will be removed from NumPy 1.20.The replacement
    for these functions is the Python package [numpy-financial](https://pypi.org/project/numpy-financial).
    ([gh-14720](https://github.com/numpy/numpy/pull/14720))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[NEP-32](https://numpy.org/neps/nep-0032-remove-financial-functions.html)的规定，金融函数`fv`、`ipmt`、`irr`、`mirr`、`nper`、`npv`、`pmt`、`ppmt`、`pv`和`rate`已被弃用，并将在NumPy
    1.20中被移除。这些函数的替代品是Python包[numpy-financial](https://pypi.org/project/numpy-financial)（[gh-14720](https://github.com/numpy/numpy/pull/14720)）
- en: The `axis` argument to `numpy.ma.mask_cols` and `numpy.ma.mask_row` is deprecated
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma.mask_cols`和`numpy.ma.mask_row`的`axis`参数已弃用'
- en: This argument was always ignored. ([gh-14996](https://github.com/numpy/numpy/pull/14996))
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数总是被忽略的（[gh-14996](https://github.com/numpy/numpy/pull/14996)）
- en: Expired deprecations
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用函数
- en: '`PyArray_As1D` and `PyArray_As2D` have been removed in favor of `PyArray_AsCArray`
    ([gh-14036](https://github.com/numpy/numpy/pull/14036))'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_As1D`和`PyArray_As2D`已被移除，推荐使用`PyArray_AsCArray`（[gh-14036](https://github.com/numpy/numpy/pull/14036)）'
- en: '`np.rank` has been removed. This was deprecated in NumPy 1.10 and has been
    replaced by `np.ndim`. ([gh-14039](https://github.com/numpy/numpy/pull/14039))'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.rank`已被移除。这在NumPy 1.10中已被弃用，并被`np.ndim`替代（[gh-14039](https://github.com/numpy/numpy/pull/14039)）'
- en: The deprecation of `expand_dims` out-of-range axes in 1.13.0 has expired. ([gh-14051](https://github.com/numpy/numpy/pull/14051))
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.13.0中过期的对`expand_dims`超出范围的轴的使用已经失效（[gh-14051](https://github.com/numpy/numpy/pull/14051)）
- en: '`PyArray_FromDimsAndDataAndDescr` and `PyArray_FromDims` have been removed
    (they will always raise an error). Use `PyArray_NewFromDescr` and `PyArray_SimpleNew`
    instead. ([gh-14100](https://github.com/numpy/numpy/pull/14100))'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PyArray_FromDimsAndDataAndDescr`和`PyArray_FromDims`已被移除（它们总是会触发错误）。请改用`PyArray_NewFromDescr`和`PyArray_SimpleNew`（[gh-14100](https://github.com/numpy/numpy/pull/14100)）'
- en: '`numeric.loads`, `numeric.load`, `np.ma.dump`, `np.ma.dumps`, `np.ma.load`,
    `np.ma.loads` are removed, use `pickle` methods instead ([gh-14256](https://github.com/numpy/numpy/pull/14256))'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 `numeric.loads`, `numeric.load`, `np.ma.dump`, `np.ma.dumps`, `np.ma.load`,
    `np.ma.loads`，请使用 `pickle` 方法代替 ([gh-14256](https://github.com/numpy/numpy/pull/14256))
- en: '`arrayprint.FloatFormat`, `arrayprint.LongFloatFormat` has been removed, use
    `FloatingFormat` instead'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrayprint.FloatFormat`, `arrayprint.LongFloatFormat` 已被移除，使用 `FloatingFormat`
    代替'
- en: '`arrayprint.ComplexFormat`, `arrayprint.LongComplexFormat` has been removed,
    use `ComplexFloatingFormat` instead'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrayprint.ComplexFormat`, `arrayprint.LongComplexFormat` 已被移除，使用 `ComplexFloatingFormat`
    代替'
- en: '`arrayprint.StructureFormat` has been removed, use `StructureVoidFormat` instead
    ([gh-14259](https://github.com/numpy/numpy/pull/14259))'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrayprint.StructureFormat` 已被移除，使用 `StructureVoidFormat` 代替。([gh-14259](https://github.com/numpy/numpy/pull/14259))'
- en: '`np.testing.rand` has been removed. This was deprecated in NumPy 1.11 and has
    been replaced by `np.random.rand`. ([gh-14325](https://github.com/numpy/numpy/pull/14325))'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.testing.rand` 已被移除。这在 NumPy 1.11 中已被弃用，已被 `np.random.rand` 替代。([gh-14325](https://github.com/numpy/numpy/pull/14325))'
- en: Class `SafeEval` in `numpy/lib/utils.py` has been removed. This was deprecated
    in NumPy 1.10\. Use `np.safe_eval` instead. ([gh-14335](https://github.com/numpy/numpy/pull/14335))
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy/lib/utils.py` 中的 `SafeEval` 类已被移除。这在 NumPy 1.10中已被弃用。使用 `np.safe_eval`
    代替。([gh-14335](https://github.com/numpy/numpy/pull/14335))'
- en: Remove deprecated support for boolean and empty condition lists in `np.select`
    ([gh-14583](https://github.com/numpy/numpy/pull/14583))
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了对 `np.select` 中布尔值和空条件列表的弃用支持 ([gh-14583](https://github.com/numpy/numpy/pull/14583))
- en: Array order only accepts ‘C’, ‘F’, ‘A’, and ‘K’. More permissive options were
    deprecated in NumPy 1.11. ([gh-14596](https://github.com/numpy/numpy/pull/14596))
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组顺序仅接受 'C', 'F', 'A', 和 'K'。在 NumPy 1.11中，更宽松的选项已被弃用。([gh-14596](https://github.com/numpy/numpy/pull/14596))
- en: np.linspace parameter `num` must be an integer. Deprecated in NumPy 1.12. ([gh-14620](https://github.com/numpy/numpy/pull/14620))
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: np.linspace 参数 `num` 必须是整数。在 NumPy 1.12中已被弃用。([gh-14620](https://github.com/numpy/numpy/pull/14620))
- en: UFuncs with multiple outputs must use a tuple for the `out` kwarg. This finishes
    a deprecation started in NumPy 1.10. ([gh-14682](https://github.com/numpy/numpy/pull/14682))
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个输出的 UFuncs 必须使用元组作为 `out` 关键字参数。这结束了在 NumPy 1.10中开始的弃用。([gh-14682](https://github.com/numpy/numpy/pull/14682))
- en: The files `numpy/testing/decorators.py`, `numpy/testing/noseclasses.py` and
    `numpy/testing/nosetester.py` have been removed. They were never meant to be public
    (all relevant objects are present in the `numpy.testing` namespace), and importing
    them has given a deprecation warning since NumPy 1.15.0 ([gh-14567](https://github.com/numpy/numpy/pull/14567))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `numpy/testing/decorators.py`, `numpy/testing/noseclasses.py` 和 `numpy/testing/nosetester.py`
    已被移除。它们从未被视为公共的 (所有相关对象都在 `numpy.testing` 命名空间中)，自 NumPy 1.15.0以来导入它们会产生弃用警告。([gh-14567](https://github.com/numpy/numpy/pull/14567))
- en: Compatibility notes
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields") can no longer return None'
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields") 不再返回 None'
- en: 'If `drop_fields` is used to drop all fields, previously the array would be
    completely discarded and None returned. Now it returns an array of the same shape
    as the input, but with no fields. The old behavior can be retained with:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `drop_fields` 用于删除所有字段，先前数组将完全被丢弃并返回 None。现在返回与输入形状相同但没有字段的数组。旧行为可通过以下方式保持：
- en: '[PRE1]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: converting the empty recarray to None ([gh-14510](https://github.com/numpy/numpy/pull/14510))
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将空的 recarray 转换为 None ([gh-14510](https://github.com/numpy/numpy/pull/14510))
- en: '`numpy.argmin/argmax/min/max` returns `NaT` if it exists in array'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.argmin/argmax/min/max` 如果在数组中存在 `NaT`，则返回 `NaT`'
- en: '`numpy.argmin`, `numpy.argmax`, `numpy.min`, and `numpy.max` will return `NaT`
    if it exists in the array. ([gh-14717](https://github.com/numpy/numpy/pull/14717))'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.argmin`, `numpy.argmax`, `numpy.min`, 和 `numpy.max` 如果在数组中存在 `NaT`，则会返回
    `NaT`。([gh-14717](https://github.com/numpy/numpy/pull/14717))'
- en: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')` is now `False`'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')` 现在为 `False`'
- en: Previously this was `True` - however, this was inconsistent with `uint64` not
    being safely castable to `int64`, and resulting in strange type resolution.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 先前这是 `True` - 但是，这与 `uint64` 无法安全转换为 `int64` 且导致奇怪类型解析是矛盾的。
- en: If this impacts your code, cast `uint64` to `int64` first. ([gh-14718](https://github.com/numpy/numpy/pull/14718))
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这影响到您的代码，请先将 `uint64` 转换为 `int64`。([gh-14718](https://github.com/numpy/numpy/pull/14718))
- en: Changed random variate stream from `numpy.random.Generator.integers`
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将随机变量流从 `numpy.random.Generator.integers` 改为
- en: There was a bug in `numpy.random.Generator.integers` that caused biased sampling
    of 8 and 16 bit integer types. Fixing that bug has changed the output stream from
    what it was in previous releases. ([gh-14777](https://github.com/numpy/numpy/pull/14777))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random.Generator.integers`存在一个bug，导致8位和16位整数类型出现偏倚抽样。修复了该bug后，输出流与先前版本有所不同。([gh-14777](https://github.com/numpy/numpy/pull/14777))'
- en: Add more ufunc loops for `datetime64`, `timedelta64`
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`datetime64`、`timedelta64`添加更多的ufunc循环
- en: '`np.datetime(''NaT'')` should behave more like `float(''Nan'')`. Add needed
    infrastructure so `np.isinf(a)` and `np.isnan(a)` will run on `datetime64` and
    `timedelta64` dtypes. Also added specific loops for `numpy.fmin` and `numpy.fmax`
    that mask `NaT`. This may require adjustment to user- facing code. Specifically,
    code that either disallowed the calls to `numpy.isinf` or `numpy.isnan` or checked
    that they raised an exception will require adaptation, and code that mistakenly
    called `numpy.fmax` and `numpy.fmin` instead of `numpy.maximum` or `numpy.minimum`
    respectively will require adjustment. This also affects `numpy.nanmax` and `numpy.nanmin`.
    ([gh-14841](https://github.com/numpy/numpy/pull/14841))'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.datetime(''NaT'')`的行为应更像`float(''Nan'')`。添加所需的基础设施，使得`np.isinf(a)`和`np.isnan(a)`能在`datetime64`和`timedelta64`
    dtypes上执行。还为`numpy.fmin`和`numpy.fmax`添加了特定的循环，用于屏蔽`NaT`。这可能需要调整用户界面代码。具体来说，不允许对`numpy.isinf`或`numpy.isnan`的调用或检查是否引发异常的代码将需要适应，以及错误地调用`numpy.fmax`和`numpy.fmin`而不是分别调用`numpy.maximum`或`numpy.minimum`的代码将需要调整。这也影响`numpy.nanmax`和`numpy.nanmin`。([gh-14841](https://github.com/numpy/numpy/pull/14841))'
- en: Moved modules in `numpy.random`
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动了 `numpy.random` 中的模块
- en: As part of the API cleanup, the submodules in `numpy.random` `bit_generator`,
    `philox`, `pcg64`, `sfc64, ``common`, `generator`, and `bounded_integers` were
    moved to `_bit_generator`, `_philox`, `_pcg64`, `_sfc64, ``_common`, `_generator`,
    and `_bounded_integers` respectively to indicate that they are not part of the
    public interface. ([gh-14608](https://github.com/numpy/numpy/pull/14608))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 作为API清理的一部分，`numpy.random`中的子模块`bit_generator`、`philox`、`pcg64`、`sfc64`、`common`、`generator`和`bounded_integers`被移动到`_bit_generator`、`_philox`、`_pcg64`、`_sfc64`、`_common`、`_generator`和`_bounded_integers`，分别表示它们不是公共接口的一部分。([gh-14608](https://github.com/numpy/numpy/pull/14608))
- en: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields") can no longer return None'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.lib.recfunctions.drop_fields`](../user/basics.rec.html#numpy.lib.recfunctions.drop_fields
    "numpy.lib.recfunctions.drop_fields") 现在不会返回 None'
- en: 'If `drop_fields` is used to drop all fields, previously the array would be
    completely discarded and None returned. Now it returns an array of the same shape
    as the input, but with no fields. The old behavior can be retained with:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`drop_fields`删除所有字段，先前数组将被完全丢弃并返回None。现在，它返回一个与输入形状相同的数组，但没有字段。可以通过以下方式保留旧行为：
- en: '[PRE2]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: converting the empty recarray to None ([gh-14510](https://github.com/numpy/numpy/pull/14510))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将空的recarray转换为None ([gh-14510](https://github.com/numpy/numpy/pull/14510))
- en: '`numpy.argmin/argmax/min/max` returns `NaT` if it exists in array'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.argmin/argmax/min/max`如果数组中存在`NaT`，则返回`NaT`'
- en: '`numpy.argmin`, `numpy.argmax`, `numpy.min`, and `numpy.max` will return `NaT`
    if it exists in the array. ([gh-14717](https://github.com/numpy/numpy/pull/14717))'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组中存在`NaT`，`numpy.argmin`、`numpy.argmax`、`numpy.min`和`numpy.max` 将返回`NaT`。
    ([gh-14717](https://github.com/numpy/numpy/pull/14717))
- en: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')` is now `False`'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.can_cast(np.uint64, np.timedelta64, casting=''safe'')`现在为`False`'
- en: Previously this was `True` - however, this was inconsistent with `uint64` not
    being safely castable to `int64`, and resulting in strange type resolution.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 先前为`True` - 但这与 `uint64` 无法安全转换为 `int64` 是不一致的，导致奇怪的类型解析。
- en: If this impacts your code, cast `uint64` to `int64` first. ([gh-14718](https://github.com/numpy/numpy/pull/14718))
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这影响了你的代码，先将`uint64`转换为`int64`。([gh-14718](https://github.com/numpy/numpy/pull/14718))
- en: Changed random variate stream from `numpy.random.Generator.integers`
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变了从`numpy.random.Generator.integers`的随机变量流
- en: There was a bug in `numpy.random.Generator.integers` that caused biased sampling
    of 8 and 16 bit integer types. Fixing that bug has changed the output stream from
    what it was in previous releases. ([gh-14777](https://github.com/numpy/numpy/pull/14777))
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random.Generator.integers`存在一个bug，导致8位和16位整数类型出现偏倚抽样。修复了该bug后，输出流与先前版本有所不同。([gh-14777](https://github.com/numpy/numpy/pull/14777))'
- en: Add more ufunc loops for `datetime64`, `timedelta64`
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`datetime64`、`timedelta64`添加更多的ufunc循环
- en: '`np.datetime(''NaT'')` should behave more like `float(''Nan'')`. Add needed
    infrastructure so `np.isinf(a)` and `np.isnan(a)` will run on `datetime64` and
    `timedelta64` dtypes. Also added specific loops for `numpy.fmin` and `numpy.fmax`
    that mask `NaT`. This may require adjustment to user- facing code. Specifically,
    code that either disallowed the calls to `numpy.isinf` or `numpy.isnan` or checked
    that they raised an exception will require adaptation, and code that mistakenly
    called `numpy.fmax` and `numpy.fmin` instead of `numpy.maximum` or `numpy.minimum`
    respectively will require adjustment. This also affects `numpy.nanmax` and `numpy.nanmin`.
    ([gh-14841](https://github.com/numpy/numpy/pull/14841))'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.datetime(''NaT'')`现在应该更像`float(''Nan'')`。添加所需的基础设施，使得`np.isinf(a)`和`np.isnan(a)`可以在`datetime64`和`timedelta64`数据类型上运行。还为`numpy.fmin`和`numpy.fmax`添加了特定的循环，用于屏蔽`NaT`。这可能需要调整用户端的代码。特别是，不允许调用`numpy.isinf`或`numpy.isnan`的代码或检查它们是否引发异常的代码将需要适应，而错误地调用`numpy.fmax`和`numpy.fmin`而不是`numpy.maximum`或`numpy.minimum`的代码将需要调整。这也影响到了`numpy.nanmax`和`numpy.nanmin`。
    ([gh-14841](https://github.com/numpy/numpy/pull/14841))'
- en: Moved modules in `numpy.random`
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动了`numpy.random`中的模块
- en: As part of the API cleanup, the submodules in `numpy.random` `bit_generator`,
    `philox`, `pcg64`, `sfc64, ``common`, `generator`, and `bounded_integers` were
    moved to `_bit_generator`, `_philox`, `_pcg64`, `_sfc64, ``_common`, `_generator`,
    and `_bounded_integers` respectively to indicate that they are not part of the
    public interface. ([gh-14608](https://github.com/numpy/numpy/pull/14608))
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 作为API清理的一部分，`numpy.random`中的子模块`bit_generator`，`philox`，`pcg64`，`sfc64`,`common`，`generator`和`bounded_integers`被移动到分别指示它们不是公共接口的`_bit_generator`，`_philox`，`_pcg64`，`_sfc64`,
    `_common`, `_generator`和`_bounded_integers`。 ([gh-14608](https://github.com/numpy/numpy/pull/14608))
- en: C API changes
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API更改
- en: '`PyDataType_ISUNSIZED(descr)` now returns False for structured datatypes'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`PyDataType_ISUNSIZED(descr)`现在对于结构化数据类型返回False'
- en: Previously this returned True for any datatype of itemsize 0, but now this returns
    false for the non-flexible datatype with itemsize 0, `np.dtype([])`. ([gh-14393](https://github.com/numpy/numpy/pull/14393))
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以前这个对itemsize为0的任何数据类型都返回True，但现在对于itemsize为0的非灵活数据类型`np.dtype([])`返回false。
    ([gh-14393](https://github.com/numpy/numpy/pull/14393))
- en: '`PyDataType_ISUNSIZED(descr)` now returns False for structured datatypes'
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`PyDataType_ISUNSIZED(descr)`现在对于结构化数据类型返回False'
- en: Previously this returned True for any datatype of itemsize 0, but now this returns
    false for the non-flexible datatype with itemsize 0, `np.dtype([])`. ([gh-14393](https://github.com/numpy/numpy/pull/14393))
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以前这个对itemsize为0的任何数据类型都返回True，但现在对于itemsize为0的非灵活数据类型`np.dtype([])`返回false。
    ([gh-14393](https://github.com/numpy/numpy/pull/14393))
- en: New Features
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: Add our own `*.pxd` cython import file
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加我们自己的`*.pxd` Cython导入文件
- en: Added a `numpy/__init__.pxd` file. It will be used for `cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个`numpy/__init__.pxd`文件。这将用于`cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
- en: A tuple of axes can now be input to `expand_dims`
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个轴的元组现在可以输入到`expand_dims`
- en: The `numpy.expand_dims` `axis` keyword can now accept a tuple of axes. Previously,
    `axis` was required to be an integer. ([gh-14051](https://github.com/numpy/numpy/pull/14051))
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.expand_dims`的`axis`关键字现在可以接受一个轴的元组。以前，`axis`必须是一个整数。 ([gh-14051](https://github.com/numpy/numpy/pull/14051))'
- en: Support for 64-bit OpenBLAS
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对64位OpenBLAS的支持
- en: Added support for 64-bit (ILP64) OpenBLAS. See `site.cfg.example` for details.
    ([gh-15012](https://github.com/numpy/numpy/pull/15012))
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对64位（ILP64）OpenBLAS的支持。详细信息请参见`site.cfg.example`。 ([gh-15012](https://github.com/numpy/numpy/pull/15012))
- en: Add `--f2cmap` option to F2PY
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加`--f2cmap`选项到F2PY
- en: Allow specifying a file to load Fortran-to-C type map customizations from. ([gh-15113](https://github.com/numpy/numpy/pull/15113))
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 允许指定一个文件来加载从Fortran到C类型映射的定制。 ([gh-15113](https://github.com/numpy/numpy/pull/15113))
- en: Add our own `*.pxd` cython import file
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加我们自己的`*.pxd` Cython导入文件
- en: Added a `numpy/__init__.pxd` file. It will be used for `cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个`numpy/__init__.pxd`文件。这将用于`cimport numpy` ([gh-12284](https://github.com/numpy/numpy/pull/12284))
- en: A tuple of axes can now be input to `expand_dims`
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个轴的元组现在可以输入到`expand_dims`
- en: The `numpy.expand_dims` `axis` keyword can now accept a tuple of axes. Previously,
    `axis` was required to be an integer. ([gh-14051](https://github.com/numpy/numpy/pull/14051))
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.expand_dims`的`axis`关键字现在可以接受一个轴的元组。以前，`axis`必须是一个整数。 ([gh-14051](https://github.com/numpy/numpy/pull/14051))'
- en: Support for 64-bit OpenBLAS
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对64位OpenBLAS的支持
- en: Added support for 64-bit (ILP64) OpenBLAS. See `site.cfg.example` for details.
    ([gh-15012](https://github.com/numpy/numpy/pull/15012))
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对64位（ILP64）OpenBLAS的支持。详细信息请参见`site.cfg.example`。 ([gh-15012](https://github.com/numpy/numpy/pull/15012))
- en: Add `--f2cmap` option to F2PY
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为F2PY添加 `--f2cmap` 选项
- en: Allow specifying a file to load Fortran-to-C type map customizations from. ([gh-15113](https://github.com/numpy/numpy/pull/15113))
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 允许从文件加载Fortran-to-C类型映射的定制。 ([gh-15113](https://github.com/numpy/numpy/pull/15113))
- en: Improvements
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Different C numeric types of the same size have unique names
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相同大小的不同C数值类型具有独特的名称
- en: On any given platform, two of `np.intc`, `np.int_`, and `np.longlong` would
    previously appear indistinguishable through their `repr`, despite their corresponding
    `dtype` having different properties. A similar problem existed for the unsigned
    counterparts to these types, and on some platforms for `np.double` and `np.longdouble`
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的平台上， 通过它们的 `repr`，`np.intc`、`np.int_` 和 `np.longlong` 三者以前都难以区分，尽管它们相应的
    `dtype` 有不同的特性。 与这些类型的无符号对应物也存在类似问题，在某些平台上也存在 `np.double` 和 `np.longdouble` 的问题。
- en: These types now always print with a unique `__name__`. ([gh-10151](https://github.com/numpy/numpy/pull/10151))
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型现在总是以唯一的 `__name__` 打印。 ([gh-10151](https://github.com/numpy/numpy/pull/10151))
- en: '`argwhere` now produces a consistent result on 0d arrays'
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`argwhere` 现在在0d数组上产生一致的结果'
- en: On N-d arrays, `numpy.argwhere` now always produces an array of shape `(n_non_zero,
    arr.ndim)`, even when `arr.ndim == 0`. Previously, the last axis would have a
    dimension of 1 in this case. ([gh-13610](https://github.com/numpy/numpy/pull/13610))
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于N-d数组，`numpy.argwhere` 现在总是产生形状为 `(n_non_zero, arr.ndim)` 的数组，即使 `arr.ndim
    == 0` 也是如此。 在这种情况下，以前的最后一个轴将具有一个维度为1。 ([gh-13610](https://github.com/numpy/numpy/pull/13610))
- en: Add `axis` argument for `random.permutation` and `random.shuffle`
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `random.permutation` 和 `random.shuffle` 添加 `axis` 参数
- en: Previously the `random.permutation` and `random.shuffle` functions can only
    shuffle an array along the first axis; they now have a new argument `axis` which
    allows shuffle along a specified axis. ([gh-13829](https://github.com/numpy/numpy/pull/13829))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以前 `random.permutation` 和 `random.shuffle` 函数只能沿着第一个轴进行洗牌；现在它们有一个新的 `axis` 参数，允许沿指定轴进行洗牌。
    ([gh-13829](https://github.com/numpy/numpy/pull/13829))
- en: '`method` keyword argument for `np.random.multivariate_normal`'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.random.multivariate_normal` 的 `method` 关键字参数'
- en: A `method` keyword argument is now available for `np.random.multivariate_normal`
    with possible values `{'svd', 'eigh', 'cholesky'}`. To use it, write `np.random.multivariate_normal(...,
    method=<method>)`. ([gh-14197](https://github.com/numpy/numpy/pull/14197))
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `np.random.multivariate_normal` 有一个可用的 `method` 关键字参数，可能的取值为 `{'svd', 'eigh',
    'cholesky'}`。 要使用它，写成 `np.random.multivariate_normal(..., method=<method>)。 ([gh-14197](https://github.com/numpy/numpy/pull/14197))
- en: Add complex number support for `numpy.fromstring`
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `numpy.fromstring` 添加支持复数的功能
- en: Now `numpy.fromstring` can read complex numbers. ([gh-14227](https://github.com/numpy/numpy/pull/14227))
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `numpy.fromstring` 可以读取复数。 ([gh-14227](https://github.com/numpy/numpy/pull/14227))
- en: '`numpy.unique` has consistent axes order when `axis` is not None'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当 `axis` 不为None时，`numpy.unique` 有一致的轴的顺序
- en: Using `moveaxis` instead of `swapaxes` in `numpy.unique`, so that the ordering
    of axes except the axis in arguments will not be broken. ([gh-14255](https://github.com/numpy/numpy/pull/14255))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `numpy.unique` 中使用 `moveaxis` 代替 `swapaxes`，这样除了参数中的轴之外的轴的顺序就不会被破坏。 ([gh-14255](https://github.com/numpy/numpy/pull/14255))
- en: '`numpy.matmul` with boolean output now converts to boolean values'
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.matmul` 现在转换为布尔值的输出'
- en: Calling `numpy.matmul` where the output is a boolean array would fill the array
    with uint8 equivalents of the result, rather than 0/1\. Now it forces the output
    to 0 or 1 (`NPY_TRUE` or `NPY_FALSE`). ([gh-14464](https://github.com/numpy/numpy/pull/14464))
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `numpy.matmul` 并且输出是布尔数组时，它会将数组填充为结果的 uint8 等效值，而不是0/1。现在它强制输出为0或1（`NPY_TRUE`
    或 `NPY_FALSE`）。 ([gh-14464](https://github.com/numpy/numpy/pull/14464))
- en: '`numpy.random.randint` produced incorrect value when the range was `2**32`'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当范围为`2**32`时，`numpy.random.randint` 生成了错误的值
- en: The implementation introduced in 1.17.0 had an incorrect check when determining
    whether to use the 32-bit path or the full 64-bit path that incorrectly redirected
    random integer generation with a high - low range of `2**32` to the 64-bit generator.
    ([gh-14501](https://github.com/numpy/numpy/pull/14501))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定是否使用32位路径还是完整64位路径时，引入于1.17.0 的实现存在错误的检查，错误地将范围为 `2**32` 的高低范围的随机整数生成重定向到64位生成器。
    ([gh-14501](https://github.com/numpy/numpy/pull/14501))
- en: Add complex number support for `numpy.fromfile`
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 `numpy.fromfile` 添加支持复数的功能
- en: Now `numpy.fromfile` can read complex numbers. ([gh-14730](https://github.com/numpy/numpy/pull/14730))
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `numpy.fromfile` 可以读取复数。 ([gh-14730](https://github.com/numpy/numpy/pull/14730))
- en: '`std=c99` added if compiler is named `gcc`'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果编译器命名为 `gcc`，则添加 `std=c99`
- en: GCC before version 5 requires the `-std=c99` command line argument. Newer compilers
    automatically turn on C99 mode. The compiler setup code will automatically add
    the code if the compiler name has `gcc` in it. ([gh-14771](https://github.com/numpy/numpy/pull/14771))
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: GCC在5版之前需要`-std=c99`命令行参数。更新的编译器会自动打开C99模式。如果编译器名称中带有`gcc`，则编译器设置代码将自动添加该代码。([gh-14771](https://github.com/numpy/numpy/pull/14771))
- en: Different C numeric types of the same size have unique names
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相同大小的不同C数字类型具有唯一名称
- en: On any given platform, two of `np.intc`, `np.int_`, and `np.longlong` would
    previously appear indistinguishable through their `repr`, despite their corresponding
    `dtype` having different properties. A similar problem existed for the unsigned
    counterparts to these types, and on some platforms for `np.double` and `np.longdouble`
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何平台上，`np.intc`，`np.int_`和`np.longlong`中的两个以前通过`repr`看起来一样，尽管它们对应的`dtype`具有不同的属性。它们的无符号对应类型存在类似的问题，以及在某些平台上对于`np.double`和`np.longdouble`
- en: These types now always print with a unique `__name__`. ([gh-10151](https://github.com/numpy/numpy/pull/10151))
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型现在始终具有唯一的`__name__`。([gh-10151](https://github.com/numpy/numpy/pull/10151))
- en: '`argwhere` now produces a consistent result on 0d arrays'
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`argwhere`现在在0d数组上产生一致的结果'
- en: On N-d arrays, `numpy.argwhere` now always produces an array of shape `(n_non_zero,
    arr.ndim)`, even when `arr.ndim == 0`. Previously, the last axis would have a
    dimension of 1 in this case. ([gh-13610](https://github.com/numpy/numpy/pull/13610))
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在N维数组上，`numpy.argwhere`现在总是产生形状为`（n_non_zero，arr.ndim）`的数组，即使`arr.ndim == 0`。在这种情况下，以前，最后一个轴的维度是1。([gh-13610](https://github.com/numpy/numpy/pull/13610))
- en: Add `axis` argument for `random.permutation` and `random.shuffle`
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`random.permutation`和`random.shuffle`添加`axis`参数
- en: Previously the `random.permutation` and `random.shuffle` functions can only
    shuffle an array along the first axis; they now have a new argument `axis` which
    allows shuffle along a specified axis. ([gh-13829](https://github.com/numpy/numpy/pull/13829))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`random.permutation`和`random.shuffle`函数只能沿着第一个轴对数组进行洗牌，现在它们有一个新的`axis`参数，允许沿指定轴进行洗牌。([gh-13829](https://github.com/numpy/numpy/pull/13829))
- en: '`method` keyword argument for `np.random.multivariate_normal`'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.random.multivariate_normal`的`method`关键字参数'
- en: A `method` keyword argument is now available for `np.random.multivariate_normal`
    with possible values `{'svd', 'eigh', 'cholesky'}`. To use it, write `np.random.multivariate_normal(...,
    method=<method>)`. ([gh-14197](https://github.com/numpy/numpy/pull/14197))
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.random.multivariate_normal`现在具有`method`关键字参数，可能的值为`{''svd''，''eigh''，''cholesky''}`。
    要使用它，请写`np.random.multivariate_normal（...，method=<method>）`。([gh-14197](https://github.com/numpy/numpy/pull/14197))'
- en: Add complex number support for `numpy.fromstring`
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`numpy.fromstring`添加支持复数
- en: Now `numpy.fromstring` can read complex numbers. ([gh-14227](https://github.com/numpy/numpy/pull/14227))
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`numpy.fromstring`可以读取复数。([gh-14227](https://github.com/numpy/numpy/pull/14227))
- en: '`numpy.unique` has consistent axes order when `axis` is not None'
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当`axis`不是None时，`numpy.unique`具有一致的轴顺序
- en: Using `moveaxis` instead of `swapaxes` in `numpy.unique`, so that the ordering
    of axes except the axis in arguments will not be broken. ([gh-14255](https://github.com/numpy/numpy/pull/14255))
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在`numpy.unique`中使用`moveaxis`而不是`swapaxes`，以保持参数中除指定轴外的轴的顺序不被破坏。([gh-14255](https://github.com/numpy/numpy/pull/14255))
- en: '`numpy.matmul` with boolean output now converts to boolean values'
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有布尔输出的`numpy.matmul`现在转换为布尔值
- en: Calling `numpy.matmul` where the output is a boolean array would fill the array
    with uint8 equivalents of the result, rather than 0/1\. Now it forces the output
    to 0 or 1 (`NPY_TRUE` or `NPY_FALSE`). ([gh-14464](https://github.com/numpy/numpy/pull/14464))
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`numpy.matmul`时，如果输出是布尔数组，则会用结果的uint8等价物来填充数组，而不是0/1。现在它会强制输出为0或1（`NPY_TRUE`或`NPY_FALSE`）。([gh-14464](https://github.com/numpy/numpy/pull/14464))
- en: '`numpy.random.randint` produced incorrect value when the range was `2**32`'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当范围为`2**32`时，`numpy.random.randint`生成的值不正确
- en: The implementation introduced in 1.17.0 had an incorrect check when determining
    whether to use the 32-bit path or the full 64-bit path that incorrectly redirected
    random integer generation with a high - low range of `2**32` to the 64-bit generator.
    ([gh-14501](https://github.com/numpy/numpy/pull/14501))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.17.0引入的实现中，在确定是否使用32位路径或完整64位路径时存在错误检查，将具有高低范围为`2**32`的随机整数生成不正确地重定向到64位生成器。([gh-14501](https://github.com/numpy/numpy/pull/14501))
- en: Add complex number support for `numpy.fromfile`
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`numpy.fromfile`添加复数支持
- en: Now `numpy.fromfile` can read complex numbers. ([gh-14730](https://github.com/numpy/numpy/pull/14730))
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`numpy.fromfile`可以读取复数。([gh-14730](https://github.com/numpy/numpy/pull/14730))
- en: '`std=c99` added if compiler is named `gcc`'
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果编译器名称为`gcc`，则添加`std=c99`
- en: GCC before version 5 requires the `-std=c99` command line argument. Newer compilers
    automatically turn on C99 mode. The compiler setup code will automatically add
    the code if the compiler name has `gcc` in it. ([gh-14771](https://github.com/numpy/numpy/pull/14771))
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: GCC版本5之前需要使用`-std=c99`命令行参数。更新的编译器会自动打开C99模式。如果编译器名称中含有`gcc`，编译器设置代码将自动添加此代码。([gh-14771](https://github.com/numpy/numpy/pull/14771))
- en: Changes
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变动
- en: '`NaT` now sorts to the end of arrays'
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NaT`现在在数组的末尾排序'
- en: '`NaT` is now effectively treated as the largest integer for sorting purposes,
    so that it sorts to the end of arrays. This change is for consistency with `NaN`
    sorting behavior. ([gh-12658](https://github.com/numpy/numpy/pull/12658)) ([gh-15068](https://github.com/numpy/numpy/pull/15068))'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaT`现在在排序中被有效地当作最大的整数处理，因此它将排在数组的末尾。这个更改是为了与`NaN`的排序行为保持一致。([gh-12658](https://github.com/numpy/numpy/pull/12658))
    ([gh-15068](https://github.com/numpy/numpy/pull/15068))'
- en: Incorrect `threshold` in `np.set_printoptions` raises `TypeError` or `ValueError`
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.set_printoptions`中的不正确的`threshold`会引发`TypeError`或`ValueError`'
- en: Previously an incorrect `threshold` raised `ValueError`; it now raises `TypeError`
    for non-numeric types and `ValueError` for `nan` values. ([gh-13899](https://github.com/numpy/numpy/pull/13899))
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的不正确的`threshold`引发`ValueError`；现在对于非数字类型引发`TypeError`，对于`nan`值引发`ValueError`。([gh-13899](https://github.com/numpy/numpy/pull/13899))
- en: Warn when saving a dtype with metadata
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当保存带有元数据的数组时发出警告
- en: A `UserWarning` will be emitted when saving an array via `numpy.save` with `metadata`.
    Saving such an array may not preserve metadata, and if metadata is preserved,
    loading it will cause a `ValueError`. This shortcoming in save and load will be
    addressed in a future release. ([gh-14142](https://github.com/numpy/numpy/pull/14142))
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过`numpy.save`保存数组时，如果使用`metadata`，将会发出`UserWarning`。保存这样的数组可能不会保留元数据，如果保留，加载它将导致`ValueError`。这个保存和加载的不足之处将在未来的版本中得到解决。([gh-14142](https://github.com/numpy/numpy/pull/14142))
- en: '`numpy.distutils` append behavior changed for LDFLAGS and similar'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`附加行为对于LDFLAGS和类似的变化'
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to `LDFLAGS` and other similar such
    environment variables for compiling Fortran extensions. Now the default behavior
    has changed to appending - which is the expected behavior in most situations.
    To preserve the old (overwriting) behavior, set the `NPY_DISTUTILS_APPEND_FLAGS`
    environment variable to 0\. This applies to: `LDFLAGS`, `F77FLAGS`, `F90FLAGS`,
    `FREEFLAGS`, `FOPT`, `FDEBUG`, and `FFLAGS`. NumPy 1.16 and 1.17 gave build warnings
    in situations where this change in behavior would have affected the compile flags
    used. ([gh-14248](https://github.com/numpy/numpy/pull/14248))'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")一直重写而不是附加`LDFLAGS`和其他类似的编译Fortran扩展的环境变量。现在默认行为已更改为追加
    - 这在大多数情况下是预期的行为。为保留旧的（覆盖）行为，将`NPY_DISTUTILS_APPEND_FLAGS`环境变量设置为0。这适用于：`LDFLAGS`、`F77FLAGS`、`F90FLAGS`、`FREEFLAGS`、`FOPT`、`FDEBUG`和`FFLAGS`。NumPy
    1.16和1.17在这种行为改变会影响到使用的编译标志时会发出构建警告。([gh-14248](https://github.com/numpy/numpy/pull/14248))'
- en: Remove `numpy.random.entropy` without a deprecation
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除`numpy.random.entropy`而不进行过时警告
- en: '`numpy.random.entropy` was added to the `numpy.random` namespace in 1.17.0.
    It was meant to be a private c-extension module, but was exposed as public. It
    has been replaced by `numpy.random.SeedSequence` so the module was completely
    removed. ([gh-14498](https://github.com/numpy/numpy/pull/14498))'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random.entropy`在`numpy.random`命名空间中在1.17.0版本中被加入。它原本是一个私有的C扩展模块，但被公开了。它已被`numpy.random.SeedSequence`替换，因此该模块被完全移除。([gh-14498](https://github.com/numpy/numpy/pull/14498))'
- en: Add options to quiet build configuration and build with `-Werror`
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加选项以安静地构建配置，并使用`-Werror`进行构建
- en: Added two new configuration options. During the `build_src` subcommand, as part
    of configuring NumPy, the files `_numpyconfig.h` and `config.h` are created by
    probing support for various runtime functions and routines. Previously, the very
    verbose compiler output during this stage clouded more important information.
    By default the output is silenced. Running `runtests.py --debug-info` will add
    `--verbose-cfg` to the `build_src` subcommand,which will restore the previous
    behaviour.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 增加了两个新的配置选项。在`build_src`子命令期间，在配置NumPy的过程中，通过探测对各种运行时函数和例程的支持来创建文件`_numpyconfig.h`和`config.h`。此前，在这个阶段非常冗长的编译器输出淹没了更重要的信息。默认情况下，输出被消除了。运行`runtests.py
    --debug-info`将会在`build_src`子命令中添加`--verbose-cfg`，这将恢复先前的行为。
- en: Adding `CFLAGS=-Werror` to turn warnings into errors would trigger errors during
    the configuration. Now `runtests.py --warn-error` will add `--warn-error` to the
    `build` subcommand, which will percolate to the `build_ext` and `build_lib` subcommands.
    This will add the compiler flag to those stages and turn compiler warnings into
    errors while actually building NumPy itself, avoiding the `build_src` subcommand
    compiler calls.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 将`CFLAGS=-Werror`添加到配置中将会触发错误。现在`runtests.py --warn-error`将会在`build`子命令中添加`--warn-error`，这将传递到`build_ext`和`build_lib`子命令。这将在构建NumPy本身时将编译警告转换为错误，避免了`build_src`子命令的编译调用。
- en: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
- en: '`NaT` now sorts to the end of arrays'
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NaT`现在排序到数组的末尾'
- en: '`NaT` is now effectively treated as the largest integer for sorting purposes,
    so that it sorts to the end of arrays. This change is for consistency with `NaN`
    sorting behavior. ([gh-12658](https://github.com/numpy/numpy/pull/12658)) ([gh-15068](https://github.com/numpy/numpy/pull/15068))'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaT`现在在排序目的上有效地被视为最大的整数，因此它将排序到数组的末尾。这一改变是为了与`NaN`的排序行为保持一致。 ([gh-12658](https://github.com/numpy/numpy/pull/12658))
    ([gh-15068](https://github.com/numpy/numpy/pull/15068))'
- en: Incorrect `threshold` in `np.set_printoptions` raises `TypeError` or `ValueError`
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.set_printoptions`中的`threshold`不正确，会引发`TypeError`或`ValueError`'
- en: Previously an incorrect `threshold` raised `ValueError`; it now raises `TypeError`
    for non-numeric types and `ValueError` for `nan` values. ([gh-13899](https://github.com/numpy/numpy/pull/13899))
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，一个不正确的`threshold`引发了`ValueError`；现在对于非数值类型引发`TypeError`，对于`nan`值引发`ValueError`。
    ([gh-13899](https://github.com/numpy/numpy/pull/13899))
- en: Warn when saving a dtype with metadata
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在保存带有元数据的dtype时发出警告
- en: A `UserWarning` will be emitted when saving an array via `numpy.save` with `metadata`.
    Saving such an array may not preserve metadata, and if metadata is preserved,
    loading it will cause a `ValueError`. This shortcoming in save and load will be
    addressed in a future release. ([gh-14142](https://github.com/numpy/numpy/pull/14142))
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过`numpy.save`保存数组时带有`metadata`时，将发出`UserWarning`。保存这样的数组可能不会保留元数据，如果保留了元数据，加载它将导致`ValueError`。此保存和加载的不足将在将来的版本中得到解决。
    ([gh-14142](https://github.com/numpy/numpy/pull/14142))
- en: '`numpy.distutils` append behavior changed for LDFLAGS and similar'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`的追加行为对LDFLAGS和类似的环境变量发生了变化'
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to `LDFLAGS` and other similar such
    environment variables for compiling Fortran extensions. Now the default behavior
    has changed to appending - which is the expected behavior in most situations.
    To preserve the old (overwriting) behavior, set the `NPY_DISTUTILS_APPEND_FLAGS`
    environment variable to 0\. This applies to: `LDFLAGS`, `F77FLAGS`, `F90FLAGS`,
    `FREEFLAGS`, `FOPT`, `FDEBUG`, and `FFLAGS`. NumPy 1.16 and 1.17 gave build warnings
    in situations where this change in behavior would have affected the compile flags
    used. ([gh-14248](https://github.com/numpy/numpy/pull/14248))'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")一直覆盖而不是追加`LDFLAGS`和其他类似的环境变量用于编译Fortran扩展。现在默认行为已更改为追加
    - 这在大多数情况下是预期行为。为了保留旧的（覆盖）行为，请将`NPY_DISTUTILS_APPEND_FLAGS`环境变量设置为0。这适用于：`LDFLAGS`、`F77FLAGS`、`F90FLAGS`、`FREEFLAGS`、`FOPT`、`FDEBUG`和`FFLAGS`。在NumPy
    1.16和1.17中，如果此行为的变化会影响使用的编译标志，将会出现构建警告。 ([gh-14248](https://github.com/numpy/numpy/pull/14248))'
- en: Remove `numpy.random.entropy` without a deprecation
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除了未经废弃的`numpy.random.entropy`
- en: '`numpy.random.entropy` was added to the `numpy.random` namespace in 1.17.0.
    It was meant to be a private c-extension module, but was exposed as public. It
    has been replaced by `numpy.random.SeedSequence` so the module was completely
    removed. ([gh-14498](https://github.com/numpy/numpy/pull/14498))'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.random.entropy`在1.17.0版本中添加到了`numpy.random`命名空间中。它原本是一个私有的c扩展模块，但被暴露为公共的。它已被`numpy.random.SeedSequence`替换，因此该模块被完全移除了。
    ([gh-14498](https://github.com/numpy/numpy/pull/14498))'
- en: Add options to quiet build configuration and build with `-Werror`
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加选项以安静地构建配置并用`-Werror`进行构建
- en: Added two new configuration options. During the `build_src` subcommand, as part
    of configuring NumPy, the files `_numpyconfig.h` and `config.h` are created by
    probing support for various runtime functions and routines. Previously, the very
    verbose compiler output during this stage clouded more important information.
    By default the output is silenced. Running `runtests.py --debug-info` will add
    `--verbose-cfg` to the `build_src` subcommand,which will restore the previous
    behaviour.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了两个新的配置选项。在`build_src`子命令期间，作为配置NumPy的一部分，通过探测对各种运行时函数和例程的支持，创建了文件`_numpyconfig.h`和`config.h`。先前，此阶段的非常冗长的编译器输出淹没了更重要的信息。默认情况下输出被压制。运行`runtests.py
    --debug-info`将在`build_src`子命令中添加`--verbose-cfg`，这将恢复先前的行为。
- en: Adding `CFLAGS=-Werror` to turn warnings into errors would trigger errors during
    the configuration. Now `runtests.py --warn-error` will add `--warn-error` to the
    `build` subcommand, which will percolate to the `build_ext` and `build_lib` subcommands.
    This will add the compiler flag to those stages and turn compiler warnings into
    errors while actually building NumPy itself, avoiding the `build_src` subcommand
    compiler calls.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`CFLAGS=-Werror`以将警告转换为错误会在配置过程中触发错误。现在，`runtests.py --warn-error`将在`build`子命令中添加`--warn-error`，这将向`build_ext`和`build_lib`子命令渗透。这将在这些阶段添加编译器标志，并在实际构建NumPy本身时将编译器警告转换为错误，避免`build_src`子命令的编译器调用。
- en: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14527](https://github.com/numpy/numpy/pull/14527)) ([gh-14518](https://github.com/numpy/numpy/pull/14518))
