["```py\ndef fdiff(self, argindex=1):\n  \"\"\"\n Returns the first derivative of a Heaviside Function.\n\n Examples\n ========\n\n >>> from sympy import Heaviside, diff\n >>> from sympy.abc import x\n\n >>> Heaviside(x).fdiff()\n DiracDelta(x)\n\n >>> Heaviside(x**2 - 1).fdiff()\n DiracDelta(x**2 - 1)\n\n >>> diff(Heaviside(x)).fdiff()\n DiracDelta(x, 1)\n\n \"\"\" \n```", "```py\n.. deprecated:: 1.1\n\n   The ``simplify_this`` function is deprecated. Use :func:`simplify`\n   instead. See its documentation for more information. \n```", "```py\nExplanation\n=========== \n```", "```py\nExamples\n======== \n```", "```py\n>>> import random\n>>> random.random()      \n0.6868680200532414 \n```", "```py\n>>> from sympy import Function, dsolve, cos, sin\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x),\n... f(x), hint='1st_exact')\nEq(x*cos(f(x)) + f(x)**3/3, C1) \n```", "```py\n>>> list(range(30))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29] \n```", "```py\nParameters\n========== \n```", "```py\ndef opt_cse(exprs, order='canonical'):\n  \"\"\"\n Find optimization opportunities in Adds, Muls, Pows and negative\n coefficient Muls.\n\n Parameters\n ==========\n\n exprs : list of sympy expressions\n The expressions to optimize.\n order : string, 'none' or 'canonical'\n The order by which Mul and Add arguments are processed. For large\n expressions where speed is a concern, use the setting order='none'.\n\n \"\"\" \n```", "```py\nSee Also\n======== \n```", "```py\nclass erf(Function):\n  r\"\"\"\n The Gauss error function.\n\n See Also\n ========\n\n erfc: Complementary error function.\n erfi: Imaginary error function.\n erf2: Two-argument error function.\n erfinv: Inverse error function.\n erfcinv: Inverse Complementary error function.\n erf2inv: Inverse two-argument error function.\n\n \"\"\" \n```", "```py\nclass besselj(BesselBase):\n  r\"\"\"\n Bessel function of the first kind.\n\n See Also\n ========\n\n bessely, besseli, besselk\n\n \"\"\" \n```", "```py\nReferences\n========== \n```", "```py\nReferences\n==========\n\n.. [1] [Kozen89] D. Kozen, S. Landau, Polynomial Decomposition Algorithms,\n       Journal of Symbolic Computation 7 (1989), pp. 445-456 \n```", "```py\nReferences\n==========\n\n.. [1] Abramowitz, Milton; Stegun, Irene A., \"Chapter 9,\" Handbook of\n       Mathematical Functions with Formulas, Graphs, and Mathematical\n       Tables, eds. (1965)\n.. [2] Luke, Y. L., The Special Functions and Their Approximations,\n       Volume 1, (1969)\n.. [3] https://en.wikipedia.org/wiki/Bessel_function\n.. [4] https://functions.wolfram.com/Bessel-TypeFunctions/BesselJ/ \n```", "```py\nclass gamma(Function):\n  r\"\"\"\n The gamma function\n\n .. math::\n \\Gamma(x) := \\int^{\\infty}_{0} t^{x-1} e^{-t} \\mathrm{d}t.\n\n Explanation\n ===========\n\n The ``gamma`` function implements the function which passes through the\n values of the factorial function (i.e., $\\Gamma(n) = (n - 1)!$), when n\n is an integer. More generally, $\\Gamma(z)$ is defined in the whole\n complex plane except at the negative integers where there are simple\n poles.\n\n Examples\n ========\n\n >>> from sympy import S, I, pi, oo, gamma\n >>> from sympy.abc import x\n\n Several special values are known:\n\n >>> gamma(1)\n 1\n >>> gamma(4)\n 6\n >>> gamma(S(3)/2)\n sqrt(pi)/2\n\n The ``gamma`` function obeys the mirror symmetry:\n\n >>> from sympy import conjugate\n >>> conjugate(gamma(x))\n gamma(conjugate(x))\n\n Differentiation with respect to $x$ is supported:\n\n >>> from sympy import diff\n >>> diff(gamma(x), x)\n gamma(x)*polygamma(0, x)\n\n Series expansion is also supported:\n\n >>> from sympy import series\n >>> series(gamma(x), x, 0, 3)\n 1/x - EulerGamma + x*(EulerGamma**2/2 + pi**2/12) +\n x**2*(-EulerGamma*pi**2/12 - zeta(3)/3 - EulerGamma**3/6) + O(x**3)\n\n We can numerically evaluate the ``gamma`` function to arbitrary\n precision on the whole complex plane:\n\n >>> gamma(pi).evalf(40)\n 2.288037795340032417959588909060233922890\n >>> gamma(1+I).evalf(20)\n 0.49801566811835604271 - 0.15494982830181068512*I\n\n See Also\n ========\n\n lowergamma: Lower incomplete gamma function.\n uppergamma: Upper incomplete gamma function.\n polygamma: Polygamma function.\n loggamma: Log Gamma function.\n digamma: Digamma function.\n trigamma: Trigamma function.\n beta: Euler Beta function.\n\n References\n ==========\n\n .. [1] https://en.wikipedia.org/wiki/Gamma_function\n .. [2] https://dlmf.nist.gov/5\n .. [3] https://mathworld.wolfram.com/GammaFunction.html\n .. [4] https://functions.wolfram.com/GammaBetaErf/Gamma/\n\n \"\"\" \n```", "```py\nUtils\n=====\n\n.. module:: sympy.geometry.util\n\n.. autofunction:: intersection\n\n.. autofunction:: convex_hull\n\n.. autofunction:: are_similar\n\nPoints\n======\n\n.. module:: sympy.geometry.point\n\n.. autoclass:: Point\n   :members:\n\nLines\n=====\n\n.. module:: sympy.geometry.line\n\n.. autoclass:: LinearEntity\n   :members:\n\n.. autoclass:: Line\n   :members:\n\n.. autoclass:: Ray\n   :members:\n\n.. autoclass:: Segment\n   :members:\n\nCurves\n======\n\n.. module:: sympy.geometry.curve\n\n.. autoclass:: Curve\n   :members:\n\nEllipses\n========\n\n.. module:: sympy.geometry.ellipse\n\n.. autoclass:: Ellipse\n   :members:\n\n.. autoclass:: Circle\n   :members:\n\nPolygons\n========\n\n.. module:: sympy.geometry.polygon\n\n.. autoclass:: Polygon\n  :members:\n\n.. autoclass:: RegularPolygon\n   :members:\n\n.. autoclass:: Triangle\n   :members: \n```", "```py\nWARNING: py:obj reference target not found: expand \n```", "```py\nWARNING: more than one target found for cross-reference 'subs()':\nsympy.core.basic.Basic.subs, sympy.matrices.matrixbase.MatrixBase.subs,\nsympy.physics.vector.vector.Vector.subs,\nsympy.physics.vector.dyadic.Dyadic.subs \n```"]