- en: Using the Convenience Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用便利类
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.classes.html](https://numpy.org/doc/1.26/reference/routines.polynomials.classes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.classes.html](https://numpy.org/doc/1.26/reference/routines.polynomials.classes.html)
- en: 'The convenience classes provided by the polynomial package are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式包提供的便利类包括：
- en: '| Name | Provides |'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 名称 | 提供 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Polynomial | Power series |'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 多项式 | 幂级数 |'
- en: '| Chebyshev | Chebyshev series |'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 切比雪夫 | 切比雪夫级数 |'
- en: '| Legendre | Legendre series |'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 勒让德 | 勒让德级数 |'
- en: '| Laguerre | Laguerre series |'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 拉盖尔 | 拉盖尔级数 |'
- en: '| Hermite | Hermite series |'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 厄米特 | 厄米特级数 |'
- en: '| HermiteE | HermiteE series |'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 厄米特E | 厄米特E级数 |'
- en: The series in this context are finite sums of the corresponding polynomial basis
    functions multiplied by coefficients. For instance, a power series looks like
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，系列是相应的多项式基函数的有限求和，乘以系数。例如，幂级数看起来像
- en: \[p(x) = 1 + 2x + 3x^2\]
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: \[p(x) = 1 + 2x + 3x^2\]
- en: and has coefficients \([1, 2, 3]\). The Chebyshev series with the same coefficients
    looks like
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并具有系数\([1, 2, 3]\)。具有相同系数的切比雪夫级数看起来像
- en: \[p(x) = 1 T_0(x) + 2 T_1(x) + 3 T_2(x)\]
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: \[p(x) = 1 T_0(x) + 2 T_1(x) + 3 T_2(x)\]
- en: and more generally
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地
- en: \[p(x) = \sum_{i=0}^n c_i T_i(x)\]
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: \[p(x) = \sum_{i=0}^n c_i T_i(x)\]
- en: where in this case the \(T_n\) are the Chebyshev functions of degree \(n\),
    but could just as easily be the basis functions of any of the other classes. The
    convention for all the classes is that the coefficient \(c[i]\) goes with the
    basis function of degree i.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，\(T_n\)表示度为\(n\)的切比雪夫函数，但也可以轻松地成为任何其他类的基函数。所有类的约定是系数\(c[i]\)与度为i的基函数相对应。
- en: All of the classes are immutable and have the same methods, and especially they
    implement the Python numeric operators +, -, *, //, %, divmod, **, ==, and !=.
    The last two can be a bit problematic due to floating point roundoff errors. We
    now give a quick demonstration of the various operations using NumPy version 1.7.0.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类都是不可变的，并且具有相同的方法，特别是它们实现了Python的数字运算符 +、-、*、//、%、divmod、**、==和!=。最后两个可能因为浮点精度误差而有些问题。我们现在通过NumPy版本1.7.0快速演示各种操作。
- en: Basics
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础
- en: 'First we need a polynomial class and a polynomial instance to play with. The
    classes can be imported directly from the polynomial package or from the module
    of the relevant type. Here we import from the package and use the conventional
    Polynomial class because of its familiarity:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个多项式类和一个多项式实例来玩耍。这些类可以直接从多项式包或相关类型的模块中导入。这里我们从包中导入并使用传统的Polynomial类，因为它很熟悉：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that there are three parts to the long version of the printout. The first
    is the coefficients, the second is the domain, and the third is the window:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，打印输出的长版本有三个部分。第一个是系数，第二个是域，第三个是窗口：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Printing a polynomial yields the polynomial expression in a more familiar format:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打印多项式会输出一个更熟悉格式的多项式表达式：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that the string representation of polynomials uses Unicode characters
    by default (except on Windows) to express powers and subscripts. An ASCII-based
    representation is also available (default on Windows). The polynomial string format
    can be toggled at the package-level with the [`set_default_printstyle`](generated/numpy.polynomial.set_default_printstyle.html#numpy.polynomial.set_default_printstyle
    "numpy.polynomial.set_default_printstyle") function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，多项式的字符串表示默认使用Unicode字符（在Windows上除外）来表示幂和下标。还提供了基于ASCII的表示形式（在Windows上为默认）。可以使用[`set_default_printstyle`](generated/numpy.polynomial.set_default_printstyle.html#numpy.polynomial.set_default_printstyle
    "numpy.polynomial.set_default_printstyle")函数在包级别切换多项式字符串格式：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'or controlled for individual polynomial instances with string formatting:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用字符串格式对单个多项式实例进行控制：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will deal with the domain and window when we get to fitting, for the moment
    we ignore them and run through the basic algebraic and arithmetic operations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行拟合时，会涉及到域和窗口，目前我们忽略它们，并进行基本的代数和算术操作。
- en: 'Addition and Subtraction:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 加法和减法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Multiplication:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Powers:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 幂：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Division:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除法：
- en: 'Floor division, ‘//’, is the division operator for the polynomial classes,
    polynomials are treated like integers in this regard. For Python versions < 3.x
    the ‘/’ operator maps to ‘//’, as it does for Python, for later versions the ‘/’
    will only work for division by scalars. At some point it will be deprecated:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 地板除法，‘//’, 是多项式类的除法运算符，在这方面多项式被视为整数。对于 Python 版本 < 3.x，‘/’ 运算符映射为 ‘//’，正如对 Python
    的会发生的那样，对于较新版本，‘/’ 只能用于标量的除法。某个时候将被弃用：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Remainder:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 余数：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Divmod:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Divmod（取商和余数）：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Evaluation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 评估：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Substitution:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 替换：
- en: 'Substitute a polynomial for x and expand the result. Here we substitute p in
    itself leading to a new polynomial of degree 4 after expansion. If the polynomials
    are regarded as functions this is composition of functions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用多项式替代 x，并展开结果。在这里，我们用 p 替代自身，展开后得到一个次数为 4 的新多项式。如果把多项式看作函数，这就是函数的复合：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Roots:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It isn’t always convenient to explicitly use Polynomial instances, so tuples,
    lists, arrays, and scalars are automatically cast in the arithmetic operations:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 并不总是方便明确使用多项式实例，因此元组、列表、数组和标量会在算术运算中被自动转换：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Polynomials that differ in domain, window, or class can’t be mixed in arithmetic:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在域、窗口或类不同的多项式之间不能在算术中混合使用：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But different types can be used for substitution. In fact, this is how conversion
    of Polynomial classes among themselves is done for type, domain, and window casting:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '但可以使用不同类型进行替换。实际上，这就是多项式类之间进行类型、域和窗口转换的方式： '
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Which gives the polynomial *p* in Chebyshev form. This works because \(T_1(x)
    = x\) and substituting \(x\) for \(x\) doesn’t change the original polynomial.
    However, all the multiplications and divisions will be done using Chebyshev series,
    hence the type of the result.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把多项式 *p* 转换为切比雪夫形式。这是因为 \(T_1(x) = x\)，将 \(x\) 替换为 \(x\) 不会改变原多项式。然而，所有的乘法和除法都将使用切比雪夫级数进行，因此结果的类型会有所变化。
- en: It is intended that all polynomial instances are immutable, therefore augmented
    operations (`+=`, `-=`, etc.) and any other functionality that would violate the
    immutablity of a polynomial instance are intentionally unimplemented.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有多项式实例都应为不可变对象，因此增强操作（`+=`, `-=` 等）和任何会违反多项式实例不变性的功能都被有意地未实现。
- en: Calculus
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微积分
- en: 'Polynomial instances can be integrated and differentiated.:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式实例可以进行积分和微分。
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The first example integrates *p* once, the second example integrates it twice.
    By default, the lower bound of the integration and the integration constant are
    0, but both can be specified.:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子对 *p* 进行一次积分，第二个例子对其进行两次积分。默认情况下，积分的下限和积分常数都为 0，但两者都可以指定：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the first case the lower bound of the integration is set to -1 and the integration
    constant is 0\. In the second the constant of integration is set to 1 as well.
    Differentiation is simpler since the only option is the number of times the polynomial
    is differentiated:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，积分的下限设为 -1，并且积分常数为 0。在第二种情况下，积分常数也设为 1。微分更简单，因为唯一的选项就是对多项式微分的次数：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Other Polynomial Constructors
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他多项式构造函数
- en: 'Constructing polynomials by specifying coefficients is just one way of obtaining
    a polynomial instance, they may also be created by specifying their roots, by
    conversion from other polynomial types, and by least squares fits. Fitting is
    discussed in its own section, the other methods are demonstrated below:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 指定系数来构造多项式只是获取多项式实例的一种方式，它们也可以通过指定它们的根、从其他多项式类型进行转换以及通过最小二乘拟合来创建。拟合在自己的部分中讨论，其他方法如下所示：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The convert method can also convert domain and window:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: convert 方法也可以转换域和窗口：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In numpy versions >= 1.7.0 the *basis* and *cast* class methods are also available.
    The cast method works like the convert method while the basis method returns the
    basis polynomial of given degree:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 numpy 版本 >= 1.7.0 中，*basis* 和 *cast* 类方法也可用。cast 方法类似于 convert 方法，而 basis
    方法返回给定次数的基函数多项式：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conversions between types can be useful, but it is *not* recommended for routine
    use. The loss of numerical precision in passing from a Chebyshev series of degree
    50 to a Polynomial series of the same degree can make the results of numerical
    evaluation essentially random.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 类型之间的转换可能很有用，但不建议常规使用。从一个次数为 50 的切比雪夫级数转换为相同次数的多项式级数可能导致数字精度损失，使数值评估的结果基本随机。
- en: Fitting
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拟合
- en: Fitting is the reason that the *domain* and *window* attributes are part of
    the convenience classes. To illustrate the problem, the values of the Chebyshev
    polynomials up to degree 5 are plotted below.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合是为了便利起见，*域*和*窗口*属性是其一部分。为了说明问题，下面绘制了5次Chebyshev多项式的值。
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![../_images/routines-polynomials-classes-1.png](../Images/6d79e2b61bbb83e904b2ea95224b4f80.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-1.png](../Images/6d79e2b61bbb83e904b2ea95224b4f80.png)'
- en: 'In the range -1 <= *x* <= 1 they are nice, equiripple functions lying between
    +/- 1. The same plots over the range -2 <= *x* <= 2 look very different:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在-1 <= *x* <= 1的范围内，它们是漂亮的，等波纹函数，位于+/- 1之间。在-2 <= *x* <= 2的范围内，相同的图形看起来截然不同：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![../_images/routines-polynomials-classes-2.png](../Images/46b6715bf8fdd2cd16c983468b821029.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-2.png](../Images/46b6715bf8fdd2cd16c983468b821029.png)'
- en: As can be seen, the “good” parts have shrunk to insignificance. In using Chebyshev
    polynomials for fitting we want to use the region where *x* is between -1 and
    1 and that is what the *window* specifies. However, it is unlikely that the data
    to be fit has all its data points in that interval, so we use *domain* to specify
    the interval where the data points lie. When the fit is done, the domain is first
    mapped to the window by a linear transformation and the usual least squares fit
    is done using the mapped data points. The window and domain of the fit are part
    of the returned series and are automatically used when computing values, derivatives,
    and such. If they aren’t specified in the call the fitting routine will use the
    default window and the smallest domain that holds all the data points. This is
    illustrated below for a fit to a noisy sine curve.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，“好的”部分已经变得微不足道。在使用Chebyshev多项式进行拟合时，我们希望使用*x*介于-1和1之间的区间，这就是*窗口*的作用。然而，要拟合的数据很少能够在该区间内，因此我们使用*域*来指定数据点所在的区间。拟合完成后，通过线性变换将域映射到窗口，并使用映射后的数据点进行通常的最小二乘拟合。拟合的窗口和域是返回系列的一部分，在计算值、导数等时会自动使用它们。如果在调用中没有指定它们，拟合例程将使用默认窗口和包含所有数据点的最小域。下面是对噪声正弦曲线拟合的示例。
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![../_images/routines-polynomials-classes-3.png](../Images/5a26f7aa7b35192835363053385515d0.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-3.png](../Images/5a26f7aa7b35192835363053385515d0.png)'
- en: Basics
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: 'First we need a polynomial class and a polynomial instance to play with. The
    classes can be imported directly from the polynomial package or from the module
    of the relevant type. Here we import from the package and use the conventional
    Polynomial class because of its familiarity:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个多项式类和一个多项式实例来玩耍。这些类可以直接从多项式包或相关类型的模块中导入。在这里，我们从包中导入并使用传统的多项式类，因为它更为熟悉：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that there are three parts to the long version of the printout. The first
    is the coefficients, the second is the domain, and the third is the window:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，打印长版本输出有三部分。第一部分是系数，第二部分是域，第三部分是窗口：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Printing a polynomial yields the polynomial expression in a more familiar format:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 打印多项式会以更熟悉的格式显示多项式表达式：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note that the string representation of polynomials uses Unicode characters
    by default (except on Windows) to express powers and subscripts. An ASCII-based
    representation is also available (default on Windows). The polynomial string format
    can be toggled at the package-level with the [`set_default_printstyle`](generated/numpy.polynomial.set_default_printstyle.html#numpy.polynomial.set_default_printstyle
    "numpy.polynomial.set_default_printstyle") function:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认情况下多项式的字符串表示使用Unicode字符（在Windows上除外）来表示幂和下标。也可以使用基于ASCII的表示（在Windows上为默认）。可以使用[`set_default_printstyle`](generated/numpy.polynomial.set_default_printstyle.html#numpy.polynomial.set_default_printstyle
    "numpy.polynomial.set_default_printstyle")函数在包级别切换多项式字符串格式：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'or controlled for individual polynomial instances with string formatting:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 或控制单个多项式实例的字符串格式：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We will deal with the domain and window when we get to fitting, for the moment
    we ignore them and run through the basic algebraic and arithmetic operations.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在拟合时处理域和窗口，目前我们忽略它们并进行基本的代数和算术运算。
- en: 'Addition and Subtraction:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 加法和减法：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Multiplication:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Powers:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 幂：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Division:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除法：
- en: 'Floor division, ‘//’, is the division operator for the polynomial classes,
    polynomials are treated like integers in this regard. For Python versions < 3.x
    the ‘/’ operator maps to ‘//’, as it does for Python, for later versions the ‘/’
    will only work for division by scalars. At some point it will be deprecated:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"地板除法"，‘//’，是多项式类的除法运算符，多项式在这个方面被处理得像整数一样。对于Python版本 < 3.x，‘/’运算符映射到‘//’，就像Python一样；对于以后的版本，‘/’只对标量进行除法运算有效。在某个时候它将被弃用：'
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Remainder:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '余数:'
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Divmod:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '除取余:'
- en: '[PRE36]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Evaluation:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '评估:'
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Substitution:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '替换:'
- en: 'Substitute a polynomial for x and expand the result. Here we substitute p in
    itself leading to a new polynomial of degree 4 after expansion. If the polynomials
    are regarded as functions this is composition of functions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 用一个多项式替换x并展开结果。在这里，我们将p代入自身，展开后得到一个新的4次多项式。如果把多项式看作函数，这就是函数的组合：
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Roots:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '根:'
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'It isn’t always convenient to explicitly use Polynomial instances, so tuples,
    lists, arrays, and scalars are automatically cast in the arithmetic operations:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 并不总是方便明确使用多项式实例，所以元组、列表、数组和标量在算术运算中自动进行类型转换：
- en: '[PRE40]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Polynomials that differ in domain, window, or class can’t be mixed in arithmetic:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '在域、窗口或类别上有所不同的多项式不能混合在算术中使用:'
- en: '[PRE41]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'But different types can be used for substitution. In fact, this is how conversion
    of Polynomial classes among themselves is done for type, domain, and window casting:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但是可以使用不同类型来进行替换。实际上，这就是如何在类型、域和窗口转换之间进行多项式类的相互转换的：
- en: '[PRE42]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Which gives the polynomial *p* in Chebyshev form. This works because \(T_1(x)
    = x\) and substituting \(x\) for \(x\) doesn’t change the original polynomial.
    However, all the multiplications and divisions will be done using Chebyshev series,
    hence the type of the result.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了切比雪夫形式的多项式*p*。这是因为\(T_1(x) = x\)，并且用\(x\)代替\(x\)不会改变原多项式。然而，所有乘法和除法都将使用切比雪夫级数进行计算，所以结果的类型也是如此。
- en: It is intended that all polynomial instances are immutable, therefore augmented
    operations (`+=`, `-=`, etc.) and any other functionality that would violate the
    immutablity of a polynomial instance are intentionally unimplemented.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所有多项式实例都是不可变的，因此,augmented操作(`+=`, `-=`,等)和任何其他会违反多项式实例的不可变性的功能都是有意未实现的。
- en: Calculus
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微积分
- en: 'Polynomial instances can be integrated and differentiated.:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式实例可以进行积分和微分。
- en: '[PRE43]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The first example integrates *p* once, the second example integrates it twice.
    By default, the lower bound of the integration and the integration constant are
    0, but both can be specified.:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例对*p*进行了一次积分，第二个示例对其进行了两次积分。默认情况下，积分的下限和积分常数都是0，但都可以指定。
- en: '[PRE44]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the first case the lower bound of the integration is set to -1 and the integration
    constant is 0\. In the second the constant of integration is set to 1 as well.
    Differentiation is simpler since the only option is the number of times the polynomial
    is differentiated:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，积分的下限设置为-1，积分常数为0。在第二种情况下，积分常数也设置为1。微分更简单，因为唯一的选择是多项式被微分的次数：
- en: '[PRE45]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Other Polynomial Constructors
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他多项式构造函数
- en: 'Constructing polynomials by specifying coefficients is just one way of obtaining
    a polynomial instance, they may also be created by specifying their roots, by
    conversion from other polynomial types, and by least squares fits. Fitting is
    discussed in its own section, the other methods are demonstrated below:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '通过指定系数构造多项式只是获得多项式实例的一种方式，它们还可以通过指定它们的根、通过从其他多项式类型转换获得，以及通过最小二乘拟合来创建。拟合在它自己的部分中进行讨论，其他方法如下所示:'
- en: '[PRE46]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The convert method can also convert domain and window:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: convert方法还可以转换域和窗口：
- en: '[PRE47]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In numpy versions >= 1.7.0 the *basis* and *cast* class methods are also available.
    The cast method works like the convert method while the basis method returns the
    basis polynomial of given degree:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在numpy版本 >= 1.7.0中，*basis*和*cast*类方法也是可用的。cast方法类似于convert方法，而basis方法返回给定次数的基础多项式：
- en: '[PRE48]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Conversions between types can be useful, but it is *not* recommended for routine
    use. The loss of numerical precision in passing from a Chebyshev series of degree
    50 to a Polynomial series of the same degree can make the results of numerical
    evaluation essentially random.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 类型之间的转换可能会有用，但*不*建议经常使用。在从50次切比雪夫级数转换成相同次数的多项式级数时，数值精度的丢失会使数值计算的结果基本上是随机的。
- en: Fitting
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拟合
- en: Fitting is the reason that the *domain* and *window* attributes are part of
    the convenience classes. To illustrate the problem, the values of the Chebyshev
    polynomials up to degree 5 are plotted below.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合是方便类的*domain*和*window*属性的原因。 为了说明问题，下面绘制了最高为5次的切比雪夫多项式的值。
- en: '[PRE49]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![../_images/routines-polynomials-classes-1.png](../Images/6d79e2b61bbb83e904b2ea95224b4f80.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-1.png](../Images/6d79e2b61bbb83e904b2ea95224b4f80.png)'
- en: 'In the range -1 <= *x* <= 1 they are nice, equiripple functions lying between
    +/- 1. The same plots over the range -2 <= *x* <= 2 look very different:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在范围-1 <= *x* <= 1内，它们是漂亮的函数，在+/- 1之间。 相同的区间在-2 <= *x* <= 2看起来大不相同：
- en: '[PRE50]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![../_images/routines-polynomials-classes-2.png](../Images/46b6715bf8fdd2cd16c983468b821029.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-2.png](../Images/46b6715bf8fdd2cd16c983468b821029.png)'
- en: As can be seen, the “good” parts have shrunk to insignificance. In using Chebyshev
    polynomials for fitting we want to use the region where *x* is between -1 and
    1 and that is what the *window* specifies. However, it is unlikely that the data
    to be fit has all its data points in that interval, so we use *domain* to specify
    the interval where the data points lie. When the fit is done, the domain is first
    mapped to the window by a linear transformation and the usual least squares fit
    is done using the mapped data points. The window and domain of the fit are part
    of the returned series and are automatically used when computing values, derivatives,
    and such. If they aren’t specified in the call the fitting routine will use the
    default window and the smallest domain that holds all the data points. This is
    illustrated below for a fit to a noisy sine curve.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，“好”的部分已经缩小到无关紧要的程度。 在使用切比雪夫多项式进行拟合时，我们想使用*x*在-1和1之间的区域，这正是*window*指定的。
    但是，要拟合的数据可能不会所有数据点都在该区间内，因此我们使用*domain*来指定数据点所在的区间。进行拟合时，首先通过线性变换将*domain*映射到*window*，然后使用映射后的数据点进行普通最小二乘拟合。
    拟合的窗口和域是返回系列的一部分，在计算值、导数等时会自动使用。 如果在调用中未指定它们，拟合例程将使用默认窗口和包含所有数据点的最小域。 下面这幅图是对噪声正弦曲线的拟合示例。
- en: '[PRE51]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![../_images/routines-polynomials-classes-3.png](../Images/5a26f7aa7b35192835363053385515d0.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/routines-polynomials-classes-3.png](../Images/5a26f7aa7b35192835363053385515d0.png)'
