- en: scipy.stats.multivariate_normal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A multivariate normal random variable.
  prefs: []
  type: TYPE_NORMAL
- en: The *mean* keyword specifies the mean. The *cov* keyword specifies the covariance
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mean**array_like, default: `[0]`'
  prefs: []
  type: TYPE_NORMAL
- en: Mean of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**cov**array_like or [`Covariance`](scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance"), default: `[1]`'
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric positive (semi)definite covariance matrix of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**allow_singular**bool, default: `False`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to allow a singular covariance matrix. This is ignored if *cov* is a
    [`Covariance`](scipy.stats.Covariance.html#scipy.stats.Covariance "scipy.stats.Covariance")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, np.random.RandomState, np.random.Generator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used for drawing random variates. If *seed* is *None*, the *RandomState* singleton
    is used. If *seed* is an int, a new `RandomState` instance is used, seeded with
    seed. If *seed* is already a `RandomState` or `Generator` instance, then that
    object is used. Default is *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Setting the parameter *mean* to *None* is equivalent to having *mean* be the
    zero-vector. The parameter *cov* can be a scalar, in which case the covariance
    matrix is the identity times that value, a vector of diagonal entries for the
    covariance matrix, a two-dimensional array_like, or a [`Covariance`](scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance") object.
  prefs: []
  type: TYPE_NORMAL
- en: The covariance matrix *cov* may be an instance of a subclass of [`Covariance`](scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance"), e.g. *scipy.stats.CovViaPrecision*. If so, *allow_singular*
    is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, *cov* must be a symmetric positive semidefinite matrix when *allow_singular*
    is True; it must be (strictly) positive definite when *allow_singular* is False.
    Symmetry is not checked; only the lower triangular portion is used. The determinant
    and inverse of *cov* are computed as the pseudo-determinant and pseudo-inverse,
    respectively, so that *cov* does not need to have full rank.
  prefs: []
  type: TYPE_NORMAL
- en: The probability density function for [`multivariate_normal`](#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") is
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) = \frac{1}{\sqrt{(2 \pi)^k \det \Sigma}} \exp\left( -\frac{1}{2} (x -
    \mu)^T \Sigma^{-1} (x - \mu) \right),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\mu\) is the mean, \(\Sigma\) the covariance matrix, \(k\) the rank
    of \(\Sigma\). In case of singular \(\Sigma\), SciPy extends this definition according
    to [[1]](#r244f92b1a4a2-1).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Multivariate Normal Distribution - Degenerate Case, Wikipedia, [https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Degenerate_case](https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Degenerate_case)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-multivariate_normal-1_00_00.png](../Images/a95d28953407a30a4134d8a10a843d32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, the object may be called (as a function) to fix the mean and
    covariance parameters, returning a “frozen” multivariate normal random variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The input quantiles can be any shape of array, as long as the last axis labels
    the components. This allows us for instance to display the frozen pdf for a non-isotropic
    random variable in 2D as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-multivariate_normal-1_01_00.png](../Images/cc2c91ddac9c3b3af853a10bd11e310e.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **pdf(x, mean=None, cov=1, allow_singular=False)** | Probability density
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, mean=None, cov=1, allow_singular=False)** | Log of the probability
    density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5,
    releps=1e-5, lower_limit=None)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5,
    releps=1e-5)** | Log of the cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **rvs(mean=None, cov=1, size=1, random_state=None)** | Draw random samples
    from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(mean=None, cov=1)** | Compute the differential entropy of the multivariate
    normal. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(x, fix_mean=None, fix_cov=None)** | Fit a multivariate normal distribution
    to data. |'
  prefs: []
  type: TYPE_TB
