["```py\nclass sympy.polys.domains.domain.Domain\n```", "```py\n>>> from sympy import Poly, symbols, Domain\n>>> x, y = symbols('x, y')\n>>> p = Poly(x**2 + y)\n>>> p\nPoly(x**2 + y, x, y, domain='ZZ')\n>>> p.domain\nZZ\n>>> isinstance(p.domain, Domain)\nTrue\n>>> Poly(x**2 + y/2)\nPoly(x**2 + 1/2*y, x, y, domain='QQ') \n```", "```py\n>>> from sympy import ZZ, QQ\n>>> ZZ(2)\n2\n>>> ZZ.dtype  \n<class 'int'>\n>>> type(ZZ(2))  \n<class 'int'>\n>>> QQ(1, 2)\n1/2\n>>> type(QQ(1, 2))  \n<class 'sympy.polys.domains.pythonrational.PythonRational'> \n```", "```py\n>>> ZZ(2) + ZZ(3)\n5\n>>> ZZ(5) // ZZ(2)\n2\n>>> ZZ(5) % ZZ(2)\n1\n>>> QQ(1, 2) / QQ(2, 3)\n3/4\n>>> ZZ.gcd(ZZ(4), ZZ(2))\n2\n>>> QQ.gcd(QQ(2,7), QQ(5,3))\n1/21\n>>> ZZ.is_Field\nFalse\n>>> QQ.is_Field\nTrue \n```", "```py\n>>> from sympy import Symbol, ZZ, Expr\n>>> x = Symbol('x')\n>>> K = ZZ[x]           # polynomial ring domain\n>>> K\nZZ[x]\n>>> type(K)             # class of the domain\n<class 'sympy.polys.domains.polynomialring.PolynomialRing'>\n>>> K.dtype             # class of the elements\n<class 'sympy.polys.rings.PolyElement'>\n>>> p_expr = x**2 + 1   # Expr\n>>> p_expr\nx**2 + 1\n>>> type(p_expr)\n<class 'sympy.core.add.Add'>\n>>> isinstance(p_expr, Expr)\nTrue\n>>> p_domain = K.from_sympy(p_expr)\n>>> p_domain            # domain element\nx**2 + 1\n>>> type(p_domain)\n<class 'sympy.polys.rings.PolyElement'>\n>>> K.to_sympy(p_domain) == p_expr\nTrue \n```", "```py\n>>> from sympy import ZZ, QQ\n>>> ez = ZZ(2)\n>>> eq = QQ.convert_from(ez, ZZ)\n>>> type(ez)  \n<class 'int'>\n>>> type(eq)  \n<class 'sympy.polys.domains.pythonrational.PythonRational'> \n```", "```py\n>>> from sympy import ZZ, QQ, symbols\n>>> x, y = symbols('x, y')\n>>> ZZ.unify(QQ)\nQQ\n>>> ZZ[x].unify(QQ)\nQQ[x]\n>>> ZZ[x].unify(QQ[y])\nQQ[x,y] \n```", "```py\n>>> from sympy import ZZ, QQ, Symbol\n>>> x = Symbol('x')\n>>> ZZ.has_assoc_Field\nTrue\n>>> ZZ.get_field()\nQQ\n>>> QQ.has_assoc_Ring\nTrue\n>>> QQ.get_ring()\nZZ\n>>> K = QQ[x]\n>>> K\nQQ[x]\n>>> K.get_field()\nQQ(x) \n```", "```py\nabs(a)\n```", "```py\nadd(a, b)\n```", "```py\nalg_field_from_poly(poly, alias=None, root_index=-1)\n```", "```py\n>>> from sympy import QQ, Poly\n>>> from sympy.abc import x\n>>> f = Poly(x**2 - 2)\n>>> K = QQ.alg_field_from_poly(f)\n>>> K.ext.minpoly == f\nTrue\n>>> g = Poly(8*x**3 - 6*x - 1)\n>>> L = QQ.alg_field_from_poly(g, \"alpha\")\n>>> L.ext.minpoly == g\nTrue\n>>> L.to_sympy(L([1, 1, 1]))\nalpha**2 + alpha + 1 \n```", "```py\nalgebraic_field(*extension, alias=None)\n```", "```py\nalmosteq(a, b, tolerance=None)\n```", "```py\ncharacteristic()\n```", "```py\ncofactors(a, b)\n```", "```py\nconvert(element, base=None)\n```", "```py\nconvert_from(element, base)\n```", "```py\ncyclotomic_field(n, ss=False, alias='zeta', gen=None, root_index=-1)\n```", "```py\n>>> from sympy import QQ, latex\n>>> K = QQ.cyclotomic_field(5)\n>>> K.to_sympy(K([-1, 1]))\n1 - zeta\n>>> L = QQ.cyclotomic_field(7, True)\n>>> a = L.to_sympy(L([-1, 1]))\n>>> print(a)\n1 - zeta7\n>>> print(latex(a))\n1 - \\zeta_{7} \n```", "```py\ndenom(a)\n```", "```py\ndiv(a, b)\n```", "```py\n>>> from sympy import ZZ, QQ\n>>> ZZ.div(ZZ(5), ZZ(2))\n(2, 1) \n```", "```py\n>>> QQ.div(QQ(5), QQ(2))\n(5/2, 0) \n```", "```py\n>>> a = QQ(1)\n>>> b = QQ(3, 2)\n>>> a               \nmpq(1,1)\n>>> b               \nmpq(3,2)\n>>> divmod(a, b)    \n(mpz(0), mpq(1,1))\n>>> QQ.div(a, b)    \n(mpq(2,3), mpq(0,1)) \n```", "```py\ndrop(*symbols)\n```", "```py\ndtype: type | None = None\n```", "```py\n>>> from sympy import ZZ, QQ, Symbol\n>>> ZZ.dtype\n<class 'int'>\n>>> z = ZZ(2)\n>>> z\n2\n>>> type(z)\n<class 'int'>\n>>> type(z) == ZZ.dtype\nTrue \n```", "```py\nevalf(a, prec=None, **options)\n```", "```py\nexquo(a, b)\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.exquo(ZZ(4), ZZ(2))\n2\n>>> ZZ.exquo(ZZ(5), ZZ(2))\nTraceback (most recent call last):\n  ...\nExactQuotientFailed: 2 does not divide 5 in ZZ \n```", "```py\n>>> from sympy import QQ\n>>> QQ.exquo(QQ(5), QQ(2))\n5/2\n>>> QQ(5) / QQ(2)\n5/2 \n```", "```py\n>>> ZZ(4) / ZZ(2) \n2.0\n>>> ZZ(5) / ZZ(2) \n2.5 \n```", "```py\n>>> ZZ(4) / ZZ(2) \nTraceback (most recent call last):\n...\nTypeError: unsupported operand type(s) for /: 'fmpz' and 'fmpz' \n```", "```py\nexsqrt(a)\n```", "```py\nfrac_field(*symbols, order=LexOrder())\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_ComplexField(a, K0)\n```", "```py\nfrom_ExpressionDomain(a, K0)\n```", "```py\nfrom_ExpressionRawDomain(a, K0)\n```", "```py\nfrom_FF(a, K0)\n```", "```py\nfrom_FF_gmpy(a, K0)\n```", "```py\nfrom_FF_python(a, K0)\n```", "```py\nfrom_FractionField(a, K0)\n```", "```py\nfrom_GlobalPolynomialRing(a, K0)\n```", "```py\nfrom_MonogenicFiniteExtension(a, K0)\n```", "```py\nfrom_PolynomialRing(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ngcd(a, b)\n```", "```py\ngcdex(a, b)\n```", "```py\nget_exact()\n```", "```py\nget_field()\n```", "```py\nget_ring()\n```", "```py\nhalf_gcdex(a, b)\n```", "```py\nhas_assoc_Field = False\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.has_assoc_Field\nTrue\n>>> ZZ.get_field()\nQQ \n```", "```py\nhas_assoc_Ring = False\n```", "```py\n>>> from sympy import QQ\n>>> QQ.has_assoc_Ring\nTrue\n>>> QQ.get_ring()\nZZ \n```", "```py\ninject(*symbols)\n```", "```py\ninvert(a, b)\n```", "```py\nis_Field = False\n```", "```py\n>>> from sympy import ZZ, QQ\n>>> ZZ.is_Field\nFalse\n>>> QQ.is_Field\nTrue \n```", "```py\nis_PID = False\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.has_assoc_Field\nTrue\n>>> ZZ.get_field()\nQQ \n```", "```py\nis_Ring = False\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.is_Ring\nTrue \n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_one(a)\n```", "```py\nis_positive(a)\n```", "```py\nis_square(a)\n```", "```py\nis_zero(a)\n```", "```py\nlcm(a, b)\n```", "```py\nlog(a, b)\n```", "```py\nmap(seq)\n```", "```py\nmul(a, b)\n```", "```py\nn(a, prec=None, **options)\n```", "```py\nneg(a)\n```", "```py\nnumer(a)\n```", "```py\nof_type(element)\n```", "```py\nold_frac_field(*symbols, **kwargs)\n```", "```py\nold_poly_ring(*symbols, **kwargs)\n```", "```py\none: Any = None\n```", "```py\n>>> from sympy import QQ\n>>> QQ.one\n1\n>>> QQ.of_type(QQ.one)\nTrue \n```", "```py\npoly_ring(*symbols, order=LexOrder())\n```", "```py\npos(a)\n```", "```py\npow(a, b)\n```", "```py\nquo(a, b)\n```", "```py\nrem(a, b)\n```", "```py\nrevert(a)\n```", "```py\nsqrt(a)\n```", "```py\nsub(a, b)\n```", "```py\nto_sympy(a)\n```", "```py\n>>> from sympy import QQ, Expr\n>>> q_domain = QQ(2)\n>>> q_domain\n2\n>>> q_expr = QQ.to_sympy(q_domain)\n>>> q_expr\n2 \n```", "```py\n>>> isinstance(q_domain, Expr)\nFalse\n>>> isinstance(q_expr, Expr)\nTrue \n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> K = QQ[x]\n>>> x_domain = K.gens[0]  # generator x as a domain element\n>>> p_domain = x_domain**2/3 + 1\n>>> p_domain\n1/3*x**2 + 1\n>>> p_expr = K.to_sympy(p_domain)\n>>> p_expr\nx**2/3 + 1 \n```", "```py\n>>> p_domain == p_expr\nFalse\n>>> K.from_sympy(p_expr) == p_domain\nTrue\n>>> K.to_sympy(p_domain) == p_expr\nTrue\n>>> K.from_sympy(K.to_sympy(p_domain)) == p_domain\nTrue\n>>> K.to_sympy(K.from_sympy(p_expr)) == p_expr\nTrue \n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> K = QQ[x]\n>>> K.from_sympy(x**2/3 + 1)\n1/3*x**2 + 1 \n```", "```py\nproperty tp\n```", "```py\nunify(K1, symbols=None)\n```", "```py\nunify_composite(K1)\n```", "```py\nzero: Any = None\n```", "```py\n>>> from sympy import QQ\n>>> QQ.zero\n0\n>>> QQ.of_type(QQ.zero)\nTrue \n```", "```py\nclass sympy.polys.domains.domainelement.DomainElement\n```", "```py\nparent()\n```", "```py\n>>> from sympy import ZZ, symbols\n>>> x, y = symbols('x, y')\n>>> K = ZZ[x,y]\n>>> p = K(x)**2 + K(y)**2\n>>> p\nx**2 + y**2\n>>> p.parent()\nZZ[x,y] \n```", "```py\nclass sympy.polys.domains.field.Field\n```", "```py\ndiv(a, b)\n```", "```py\nexquo(a, b)\n```", "```py\ngcd(a, b)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy import S, gcd, primitive\n>>> from sympy.abc import x \n```", "```py\n>>> QQ.gcd(QQ(2, 3), QQ(4, 9))\n2/9\n>>> gcd(S(2)/3, S(4)/9)\n2/9\n>>> primitive(2*x/3 + S(4)/9)\n(2/9, 3*x + 2) \n```", "```py\nget_field()\n```", "```py\nget_ring()\n```", "```py\nis_unit(a)\n```", "```py\nlcm(a, b)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy import S, lcm \n```", "```py\n>>> QQ.lcm(QQ(2, 3), QQ(4, 9))\n4/3\n>>> lcm(S(2)/3, S(4)/9)\n4/3 \n```", "```py\nquo(a, b)\n```", "```py\nrem(a, b)\n```", "```py\nrevert(a)\n```", "```py\nclass sympy.polys.domains.ring.Ring\n```", "```py\ndenom(a)\n```", "```py\ndiv(a, b)\n```", "```py\nexquo(a, b)\n```", "```py\nfree_module(rank)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).free_module(2)\nQQ[x]**2 \n```", "```py\nget_ring()\n```", "```py\nideal(*gens)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).ideal(x**2)\n<x**2> \n```", "```py\ninvert(a, b)\n```", "```py\nnumer(a)\n```", "```py\nquo(a, b)\n```", "```py\nquotient_ring(e)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> QQ.old_poly_ring(x).quotient_ring(QQ.old_poly_ring(x).ideal(x**2))\nQQ[x]/<x**2>\n>>> QQ.old_poly_ring(x).quotient_ring([x**2])\nQQ[x]/<x**2> \n```", "```py\n>>> QQ.old_poly_ring(x)/[x**2]\nQQ[x]/<x**2> \n```", "```py\nrem(a, b)\n```", "```py\nrevert(a)\n```", "```py\nclass sympy.polys.domains.simpledomain.SimpleDomain\n```", "```py\ninject(*gens)\n```", "```py\nclass sympy.polys.domains.compositedomain.CompositeDomain\n```", "```py\ndrop(*symbols)\n```", "```py\nget_exact()\n```", "```py\ninject(*symbols)\n```", "```py\nproperty is_Exact\n```", "```py\nset_domain(domain)\n```", "```py\nclass sympy.polys.domains.FiniteField(mod, symmetric=True)\n```", "```py\n>>> from sympy import Poly, Symbol\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + 1)\n>>> p\nPoly(x**2 + 1, x, domain='ZZ')\n>>> p.domain\nZZ\n>>> p2 = Poly(x**2 + 1, modulus=2)\n>>> p2\nPoly(x**2 + 1, x, modulus=2)\n>>> p2.domain\nGF(2) \n```", "```py\n>>> from sympy import factor, GF\n>>> factor(x**2 + 1)\nx**2 + 1\n>>> factor(x**2 + 1, modulus=2)\n(x + 1)**2\n>>> factor(x**2 + 1, domain=GF(2))\n(x + 1)**2\n>>> factor(x**2 + 1, domain='GF(2)')\n(x + 1)**2 \n```", "```py\n>>> from sympy import cancel, gcd\n>>> cancel((x**2 + 1)/(x + 1))\n(x**2 + 1)/(x + 1)\n>>> cancel((x**2 + 1)/(x + 1), domain=GF(2))\nx + 1\n>>> gcd(x**2 + 1, x + 1)\n1\n>>> gcd(x**2 + 1, x + 1, domain=GF(2))\nx + 1 \n```", "```py\n>>> from sympy import GF\n>>> K = GF(5)\n>>> K\nGF(5)\n>>> x = K(3)\n>>> y = K(2)\n>>> x\n3 mod 5\n>>> y\n2 mod 5\n>>> x * y\n1 mod 5\n>>> x / y\n4 mod 5 \n```", "```py\n>>> K = GF(9)\n>>> z = K(3)\n>>> z\n3 mod 9\n>>> z**2\n0 mod 9 \n```", "```py\ncharacteristic()\n```", "```py\nexsqrt(a)\n```", "```py\nfrom_FF(a, K0=None)\n```", "```py\nfrom_FF_gmpy(a, K0=None)\n```", "```py\nfrom_FF_python(a, K0=None)\n```", "```py\nfrom_QQ(a, K0=None)\n```", "```py\nfrom_QQ_gmpy(a, K0=None)\n```", "```py\nfrom_QQ_python(a, K0=None)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0=None)\n```", "```py\nfrom_ZZ_gmpy(a, K0=None)\n```", "```py\nfrom_ZZ_python(a, K0=None)\n```", "```py\nfrom_sympy(a)\n```", "```py\nget_field()\n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_positive(a)\n```", "```py\nis_square(a)\n```", "```py\nto_int(a)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.PythonFiniteField(mod, symmetric=True)\n```", "```py\nclass sympy.polys.domains.GMPYFiniteField(mod, symmetric=True)\n```", "```py\n>>> from sympy import Poly, Symbol\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + 1)\n>>> p\nPoly(x**2 + 1, x, domain='ZZ')\n>>> p.domain\nZZ \n```", "```py\n>>> from sympy import ZZ, QQ\n>>> ZZ.get_field()\nQQ\n>>> QQ.get_ring()\nZZ \n```", "```py\n>>> x = ZZ(5)\n>>> y = ZZ(2)\n>>> x // y  # floor division\n2\n>>> x % y   # modulo division (remainder)\n1 \n```", "```py\n>>> ZZ.gcd(ZZ(10), ZZ(2))\n2 \n```", "```py\nclass sympy.polys.domains.IntegerRing\n```", "```py\nalgebraic_field(*extension, alias=None)\n```", "```py\n>>> from sympy import ZZ, sqrt\n>>> ZZ.algebraic_field(sqrt(2))\nQQ<sqrt(2)> \n```", "```py\nexsqrt(a)\n```", "```py\nfactorial(a)\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_EX(a, K0)\n```", "```py\nfrom_FF(a, K0)\n```", "```py\nfrom_FF_gmpy(a, K0)\n```", "```py\nfrom_FF_python(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ngcd(a, b)\n```", "```py\ngcdex(a, b)\n```", "```py\nget_field()\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.get_field()\nQQ \n```", "```py\nis_square(a)\n```", "```py\nlcm(a, b)\n```", "```py\nlog(a, b)\n```", "```py\n>>> from sympy import ZZ\n>>> ZZ.log(ZZ(8), ZZ(2))\n3\n>>> ZZ.log(ZZ(9), ZZ(2))\n3 \n```", "```py\nsqrt(a)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.PythonIntegerRing\n```", "```py\nclass sympy.polys.domains.GMPYIntegerRing\n```", "```py\nfactorial(a)\n```", "```py\nfrom_FF_gmpy(a, K0)\n```", "```py\nfrom_FF_python(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ngcd(a, b)\n```", "```py\ngcdex(a, b)\n```", "```py\nlcm(a, b)\n```", "```py\nsqrt(a)\n```", "```py\nto_sympy(a)\n```", "```py\n>>> from sympy import Poly, Symbol\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + x/2)\n>>> p\nPoly(x**2 + 1/2*x, x, domain='QQ')\n>>> p.domain\nQQ \n```", "```py\n>>> from sympy import ZZ, QQ\n>>> QQ.get_ring()\nZZ\n>>> ZZ.get_field()\nQQ \n```", "```py\n>>> x = QQ(5)\n>>> y = QQ(2)\n>>> x / y  # true division\n5/2 \n```", "```py\nclass sympy.polys.domains.RationalField\n```", "```py\nalgebraic_field(*extension, alias=None)\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> QQ.algebraic_field(sqrt(2))\nQQ<sqrt(2)> \n```", "```py\ndenom(a)\n```", "```py\ndiv(a, b)\n```", "```py\nexquo(a, b)\n```", "```py\nexsqrt(a)\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\nget_ring()\n```", "```py\nis_square(a)\n```", "```py\nnumer(a)\n```", "```py\nquo(a, b)\n```", "```py\nrem(a, b)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.PythonRationalField\n```", "```py\nclass sympy.polys.domains.GMPYRationalField\n```", "```py\ndenom(a)\n```", "```py\ndiv(a, b)\n```", "```py\nexquo(a, b)\n```", "```py\nfactorial(a)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\nget_ring()\n```", "```py\nnumer(a)\n```", "```py\nquo(a, b)\n```", "```py\nrem(a, b)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.external.pythonmpq.PythonMPQ(numerator, denominator=None)\n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianDomain\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ninject(*gens)\n```", "```py\nis_negative(element)\n```", "```py\nis_nonnegative(element)\n```", "```py\nis_nonpositive(element)\n```", "```py\nis_positive(element)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianElement(x, y=0)\n```", "```py\nclassmethod new(x, y)\n```", "```py\nparent()\n```", "```py\nquadrant()\n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianIntegerRing\n```", "```py\n>>> from sympy import Poly, Symbol, I\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + I)\n>>> p\nPoly(x**2 + I, x, domain='ZZ_I')\n>>> p.domain\nZZ_I \n```", "```py\n>>> from sympy import factor\n>>> factor(x**2 + 1)\nx**2 + 1\n>>> factor(x**2 + 1, domain='ZZ_I')\n(x - I)*(x + I) \n```", "```py\n>>> from sympy import ZZ_I, QQ_I\n>>> ZZ_I.get_field()\nQQ_I\n>>> QQ_I.get_ring()\nZZ_I \n```", "```py\n>>> ZZ_I(3, 4)\n(3 + 4*I)\n>>> ZZ_I(5)\n(5 + 0*I) \n```", "```py\n>>> z1 = ZZ_I(5, 1)\n>>> z2 = ZZ_I(2, 3)\n>>> z1\n(5 + 1*I)\n>>> z2\n(2 + 3*I)\n>>> z1 + z2\n(7 + 4*I)\n>>> z1 * z2\n(7 + 17*I)\n>>> z1 ** 2\n(24 + 10*I) \n```", "```py\n>>> z3, z4 = ZZ_I(5), ZZ_I(1, 3)\n>>> z3 // z4  # floor division\n(1 + -1*I)\n>>> z3 % z4   # modulo division (remainder)\n(1 + -2*I)\n>>> (z3//z4)*z4 + z3%z4 == z3\nTrue \n```", "```py\n>>> z1 / z2\n(1 + -1*I)\n>>> ZZ_I.exquo(z1, z2)\n(1 + -1*I)\n>>> z3 / z4\n(1/2 + -3/2*I)\n>>> ZZ_I.exquo(z3, z4)\nTraceback (most recent call last):\n  ...\nExactQuotientFailed: (1 + 3*I) does not divide (5 + 0*I) in ZZ_I \n```", "```py\n>>> ZZ_I.gcd(ZZ_I(10), ZZ_I(2))\n(2 + 0*I)\n>>> ZZ_I.gcd(ZZ_I(5), ZZ_I(2, 1))\n(2 + 1*I) \n```", "```py\ndtype\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\ngcd(a, b)\n```", "```py\nget_field()\n```", "```py\nget_ring()\n```", "```py\nlcm(a, b)\n```", "```py\nnormalize(d, *args)\n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianInteger(x, y=0)\n```", "```py\n>>> from sympy import ZZ_I\n>>> z = ZZ_I(2, 3)\n>>> z\n(2 + 3*I)\n>>> type(z)\n<class 'sympy.polys.domains.gaussiandomains.GaussianInteger'> \n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianRationalField\n```", "```py\n>>> from sympy import Poly, Symbol, I\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + I/2)\n>>> p\nPoly(x**2 + I/2, x, domain='QQ_I')\n>>> p.domain\nQQ_I \n```", "```py\n>>> Poly(x**2)\nPoly(x**2, x, domain='ZZ')\n>>> Poly(x**2 + I)\nPoly(x**2 + I, x, domain='ZZ_I')\n>>> Poly(x**2/2)\nPoly(1/2*x**2, x, domain='QQ')\n>>> Poly(x**2, gaussian=True)\nPoly(x**2, x, domain='QQ_I')\n>>> Poly(x**2 + I, gaussian=True)\nPoly(x**2 + I, x, domain='QQ_I')\n>>> Poly(x**2/2, gaussian=True)\nPoly(1/2*x**2, x, domain='QQ_I') \n```", "```py\n>>> from sympy import factor, QQ_I\n>>> factor(x**2/4 + 1)\n(x**2 + 4)/4\n>>> factor(x**2/4 + 1, domain='QQ_I')\n(x - 2*I)*(x + 2*I)/4\n>>> factor(x**2/4 + 1, domain=QQ_I)\n(x - 2*I)*(x + 2*I)/4 \n```", "```py\n>>> from sympy import apart\n>>> apart(1/(1 + x**2))\n1/(x**2 + 1)\n>>> apart(1/(1 + x**2), domain=QQ_I)\nI/(2*(x + I)) - I/(2*(x - I)) \n```", "```py\n>>> from sympy import ZZ_I, QQ_I, QQ\n>>> ZZ_I.get_field()\nQQ_I\n>>> QQ_I.get_ring()\nZZ_I \n```", "```py\n>>> QQ_I(3, 4)\n(3 + 4*I)\n>>> QQ_I(5)\n(5 + 0*I)\n>>> QQ_I(QQ(2, 3), QQ(4, 5))\n(2/3 + 4/5*I) \n```", "```py\n>>> z1 = QQ_I(5, 1)\n>>> z2 = QQ_I(2, QQ(1, 2))\n>>> z1\n(5 + 1*I)\n>>> z2\n(2 + 1/2*I)\n>>> z1 + z2\n(7 + 3/2*I)\n>>> z1 * z2\n(19/2 + 9/2*I)\n>>> z2 ** 2\n(15/4 + 2*I) \n```", "```py\n>>> z1 / z2\n(42/17 + -2/17*I)\n>>> QQ_I.exquo(z1, z2)\n(42/17 + -2/17*I)\n>>> z1 == (z1/z2)*z2\nTrue \n```", "```py\n>>> z1 // z2\n(42/17 + -2/17*I)\n>>> z1 % z2\n(0 + 0*I)\n>>> QQ_I.div(z1, z2)\n((42/17 + -2/17*I), (0 + 0*I))\n>>> (z1//z2)*z2 + z1%z2 == z1\nTrue \n```", "```py\nas_AlgebraicField()\n```", "```py\ndenom(a)\n```", "```py\ndtype\n```", "```py\nfrom_ComplexField(a, K0)\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nget_field()\n```", "```py\nget_ring()\n```", "```py\nnumer(a)\n```", "```py\nclass sympy.polys.domains.gaussiandomains.GaussianRational(x, y=0)\n```", "```py\n>>> from sympy import QQ_I, QQ\n>>> z = QQ_I(QQ(2, 3), QQ(4, 5))\n>>> z\n(2/3 + 4/5*I)\n>>> type(z)\n<class 'sympy.polys.domains.gaussiandomains.GaussianRational'> \n```", "```py\nclass sympy.polys.domains.AlgebraicField(dom, *ext, alias=None)\n```", "```py\n>>> from sympy import Poly, Symbol, sqrt\n>>> x = Symbol('x')\n>>> Poly(x**2 + sqrt(2))\nPoly(x**2 + (sqrt(2)), x, sqrt(2), domain='ZZ') \n```", "```py\n>>> Poly(x**2 + sqrt(2), x)\nPoly(x**2 + sqrt(2), x, domain='EX')\n>>> Poly(x**2 + sqrt(2), x, extension=True)\nPoly(x**2 + sqrt(2), x, domain='QQ<sqrt(2)>') \n```", "```py\n>>> Poly(x**2 + 1)\nPoly(x**2 + 1, x, domain='ZZ')\n>>> Poly(x**2 + 1, extension=sqrt(2))\nPoly(x**2 + 1, x, domain='QQ<sqrt(2)>') \n```", "```py\n>>> from sympy import factor, QQ\n>>> factor(x**2 - 2)\nx**2 - 2\n>>> factor(x**2 - 2, extension=sqrt(2))\n(x - sqrt(2))*(x + sqrt(2))\n>>> factor(x**2 - 2, domain='QQ<sqrt(2)>')\n(x - sqrt(2))*(x + sqrt(2))\n>>> factor(x**2 - 2, domain=QQ.algebraic_field(sqrt(2)))\n(x - sqrt(2))*(x + sqrt(2)) \n```", "```py\n>>> p = x**3 + sqrt(2)*x**2 - 2*x - 2*sqrt(2)\n>>> factor(p)                         # treats sqrt(2) as a symbol\n(x + sqrt(2))*(x**2 - 2)\n>>> factor(p, extension=True)\n(x - sqrt(2))*(x + sqrt(2))**2\n>>> factor(x**2 - 2, extension=True)  # all rational coefficients\nx**2 - 2 \n```", "```py\n>>> from sympy import cancel, gcd\n>>> cancel((x**2 - 2)/(x - sqrt(2)))\n(x**2 - 2)/(x - sqrt(2))\n>>> cancel((x**2 - 2)/(x - sqrt(2)), extension=sqrt(2))\nx + sqrt(2)\n>>> gcd(x**2 - 2, x - sqrt(2))\n1\n>>> gcd(x**2 - 2, x - sqrt(2), extension=sqrt(2))\nx - sqrt(2) \n```", "```py\n>>> K = QQ.algebraic_field(sqrt(2))\n>>> K\nQQ<sqrt(2)>\n>>> xk = K.from_sympy(3 + 4*sqrt(2))\n>>> xk  \nANP([4, 3], [1, 0, -2], QQ) \n```", "```py\n>>> xk = K.from_sympy(3 + 4*sqrt(2))\n>>> yk = K.from_sympy(2 + 3*sqrt(2))\n>>> xk * yk  \nANP([17, 30], [1, 0, -2], QQ)\n>>> K.to_sympy(xk * yk)\n17*sqrt(2) + 30\n>>> K.to_sympy(xk + yk)\n5 + 7*sqrt(2)\n>>> K.to_sympy(xk ** 2)\n24*sqrt(2) + 41\n>>> K.to_sympy(xk / yk)\nsqrt(2)/14 + 9/7 \n```", "```py\n>>> from sympy import exp, I, pi, minpoly\n>>> g = exp(2*I*pi/3)\n>>> g\nexp(2*I*pi/3)\n>>> g.is_algebraic\nTrue\n>>> minpoly(g, x)\nx**2 + x + 1\n>>> factor(x**3 - 1, extension=g)\n(x - 1)*(x - exp(2*I*pi/3))*(x + 1 + exp(2*I*pi/3)) \n```", "```py\n>>> K = QQ.algebraic_field(sqrt(2), sqrt(3))\n>>> K\nQQ<sqrt(2) + sqrt(3)>\n>>> p = x**4 - 5*x**2 + 6\n>>> factor(p)\n(x**2 - 3)*(x**2 - 2)\n>>> factor(p, domain=K)\n(x - sqrt(2))*(x + sqrt(2))*(x - sqrt(3))*(x + sqrt(3))\n>>> factor(p, extension=[sqrt(2), sqrt(3)])\n(x - sqrt(2))*(x + sqrt(2))*(x - sqrt(3))*(x + sqrt(3)) \n```", "```py\n>>> from sympy import primitive_element\n>>> primitive_element([sqrt(2), sqrt(3)], x)\n(x**4 - 10*x**2 + 1, [1, 1])\n>>> minpoly(sqrt(2) + sqrt(3), x)\nx**4 - 10*x**2 + 1 \n```", "```py\n>>> K = QQ.algebraic_field(sqrt(2), sqrt(3))\n>>> K\nQQ<sqrt(2) + sqrt(3)>\n>>> K.ext\nsqrt(2) + sqrt(3)\n>>> K.orig_ext\n(sqrt(2), sqrt(3))\n>>> K.mod  \nDMP_Python([1, 0, -10, 0, 1], QQ) \n```", "```py\n>>> zeta5 = exp(2*I*pi/5)\n>>> K = QQ.algebraic_field(zeta5)\n>>> K\nQQ<exp(2*I*pi/5)>\n>>> K.discriminant()\n125\n>>> K = QQ.algebraic_field(sqrt(5))\n>>> K\nQQ<sqrt(5)>\n>>> K.integral_basis(fmt='sympy')\n[1, 1/2 + sqrt(5)/2]\n>>> K.maximal_order()\nSubmodule[[2, 0], [1, 1]]/2 \n```", "```py\n>>> zeta7 = exp(2*I*pi/7)\n>>> K = QQ.algebraic_field(zeta7)\n>>> K\nQQ<exp(2*I*pi/7)>\n>>> K.primes_above(11)\n[(11, _x**3 + 5*_x**2 + 4*_x - 1), (11, _x**3 - 4*_x**2 - 5*_x - 1)] \n```", "```py\n>>> K.galois_group(by_name=True)[0]\nS6TransitiveSubgroups.C6 \n```", "```py\nalgebraic_field(*extension, alias=None)\n```", "```py\ndenom(a)\n```", "```py\ndiscriminant()\n```", "```py\ndtype\n```", "```py\next\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> K = QQ.algebraic_field(sqrt(2), sqrt(3))\n>>> K.ext\nsqrt(2) + sqrt(3) \n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ngalois_group(by_name=False, max_tries=30, randomize=False)\n```", "```py\n>>> from sympy import QQ\n>>> from sympy.abc import x\n>>> k = QQ.alg_field_from_poly(x**4 + 1)\n>>> G, _ = k.galois_group()\n>>> G.order()\n4 \n```", "```py\n>>> k = QQ.alg_field_from_poly(x**4 - 2)\n>>> G, _ = k.galois_group()\n>>> G.order()\n8 \n```", "```py\nget_ring()\n```", "```py\nintegral_basis(fmt=None)\n```", "```py\n>>> from sympy import QQ, AlgebraicNumber, sqrt\n>>> alpha = AlgebraicNumber(sqrt(5), alias='alpha')\n>>> k = QQ.algebraic_field(alpha)\n>>> B0 = k.integral_basis()\n>>> B1 = k.integral_basis(fmt='sympy')\n>>> B2 = k.integral_basis(fmt='alg')\n>>> print(B0[1])  \nANP([mpq(1,2), mpq(1,2)], [mpq(1,1), mpq(0,1), mpq(-5,1)], QQ)\n>>> print(B1[1])\n1/2 + alpha/2\n>>> print(B2[1])\nalpha/2 + 1/2 \n```", "```py\n>>> print(type(B1[1]))\n<class 'sympy.core.add.Add'>\n>>> print(type(B2[1]))\n<class 'sympy.core.numbers.AlgebraicNumber'> \n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_positive(a)\n```", "```py\nmaximal_order()\n```", "```py\nmod\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> K = QQ.algebraic_field(sqrt(2))\n>>> K.mod\nDMP([1, 0, -2], QQ) \n```", "```py\nnumer(a)\n```", "```py\norig_ext\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> K = QQ.algebraic_field(sqrt(2), sqrt(3))\n>>> K.orig_ext\n(sqrt(2), sqrt(3)) \n```", "```py\nprimes_above(p)\n```", "```py\nto_alg_num(a)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.RealField(prec=53, dps=None, tol=None)\n```", "```py\nalmosteq(a, b, tolerance=None)\n```", "```py\nexsqrt(a)\n```", "```py\nfrom_sympy(expr)\n```", "```py\ngcd(a, b)\n```", "```py\nget_exact()\n```", "```py\nget_ring()\n```", "```py\nis_square(a)\n```", "```py\nlcm(a, b)\n```", "```py\nto_rational(element, limit=True)\n```", "```py\nto_sympy(element)\n```", "```py\nclass sympy.polys.domains.mpelements.RealElement(val=(0, 0, 0, 0), **kwargs)\n```", "```py\nclass sympy.polys.domains.ComplexField(prec=53, dps=None, tol=None)\n```", "```py\nalmosteq(a, b, tolerance=None)\n```", "```py\nexsqrt(a)\n```", "```py\nfrom_sympy(expr)\n```", "```py\ngcd(a, b)\n```", "```py\nget_exact()\n```", "```py\nget_ring()\n```", "```py\nis_negative(element)\n```", "```py\nis_nonnegative(element)\n```", "```py\nis_nonpositive(element)\n```", "```py\nis_positive(element)\n```", "```py\nis_square(a)\n```", "```py\nlcm(a, b)\n```", "```py\nto_sympy(element)\n```", "```py\nclass sympy.polys.domains.mpelements.ComplexElement(real=0, imag=0)\n```", "```py\nclass sympy.polys.domains.PolynomialRing(domain_or_ring, symbols=None, order=None)\n```", "```py\nfactorial(a)\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_ComplexField(a, K0)\n```", "```py\nfrom_FractionField(a, K0)\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_GlobalPolynomialRing(a, K0)\n```", "```py\nfrom_PolynomialRing(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\ngcd(a, b)\n```", "```py\ngcdex(a, b)\n```", "```py\nget_field()\n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_positive(a)\n```", "```py\nis_unit(a)\n```", "```py\nlcm(a, b)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.FractionField(domain_or_field, symbols=None, order=None)\n```", "```py\ndenom(a)\n```", "```py\nfactorial(a)\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_ComplexField(a, K0)\n```", "```py\nfrom_FractionField(a, K0)\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_PolynomialRing(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\nget_ring()\n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_positive(a)\n```", "```py\nnumer(a)\n```", "```py\nto_sympy(a)\n```", "```py\nclass sympy.polys.domains.ExpressionDomain\n```", "```py\nclass Expression(ex)\n```", "```py\ndenom(a)\n```", "```py\ndtype\n```", "```py\nfrom_AlgebraicField(a, K0)\n```", "```py\nfrom_ComplexField(a, K0)\n```", "```py\nfrom_ExpressionDomain(a, K0)\n```", "```py\nfrom_FractionField(a, K0)\n```", "```py\nfrom_GaussianIntegerRing(a, K0)\n```", "```py\nfrom_GaussianRationalField(a, K0)\n```", "```py\nfrom_PolynomialRing(a, K0)\n```", "```py\nfrom_QQ(a, K0)\n```", "```py\nfrom_QQ_gmpy(a, K0)\n```", "```py\nfrom_QQ_python(a, K0)\n```", "```py\nfrom_RealField(a, K0)\n```", "```py\nfrom_ZZ(a, K0)\n```", "```py\nfrom_ZZ_gmpy(a, K0)\n```", "```py\nfrom_ZZ_python(a, K0)\n```", "```py\nfrom_sympy(a)\n```", "```py\nget_field()\n```", "```py\nget_ring()\n```", "```py\nis_negative(a)\n```", "```py\nis_nonnegative(a)\n```", "```py\nis_nonpositive(a)\n```", "```py\nis_positive(a)\n```", "```py\nnumer(a)\n```", "```py\nto_sympy(a)\n```", "```py\nclass ExpressionDomain.Expression(ex)\n```", "```py\nclass sympy.polys.domains.quotientring.QuotientRing(ring, ideal)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import QQ\n>>> I = QQ.old_poly_ring(x).ideal(x**3 + 1)\n>>> QQ.old_poly_ring(x).quotient_ring(I)\nQQ[x]/<x**3 + 1> \n```", "```py\n>>> QQ.old_poly_ring(x)/I\nQQ[x]/<x**3 + 1> \n```", "```py\n>>> QQ.old_poly_ring(x)/[x**3 + 1]\nQQ[x]/<x**3 + 1> \n```", "```py\nsympy.polys.rings.ring(symbols, domain, order=LexOrder())\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex \n```", "```py\n>>> R, x, y, z = ring(\"x,y,z\", ZZ, lex)\n>>> R\nPolynomial ring in x, y, z over ZZ with lex order\n>>> x + y + z\nx + y + z\n>>> type(_)\n<class 'sympy.polys.rings.PolyElement'> \n```", "```py\nsympy.polys.rings.xring(symbols, domain, order=LexOrder())\n```", "```py\n>>> from sympy.polys.rings import xring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex \n```", "```py\n>>> R, (x, y, z) = xring(\"x,y,z\", ZZ, lex)\n>>> R\nPolynomial ring in x, y, z over ZZ with lex order\n>>> x + y + z\nx + y + z\n>>> type(_)\n<class 'sympy.polys.rings.PolyElement'> \n```", "```py\nsympy.polys.rings.vring(symbols, domain, order=LexOrder())\n```", "```py\n>>> from sympy.polys.rings import vring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex \n```", "```py\n>>> vring(\"x,y,z\", ZZ, lex)\nPolynomial ring in x, y, z over ZZ with lex order\n>>> x + y + z # noqa:\nx + y + z\n>>> type(_)\n<class 'sympy.polys.rings.PolyElement'> \n```", "```py\nsympy.polys.rings.sring(exprs, *symbols, **options)\n```", "```py\n>>> from sympy import sring, symbols \n```", "```py\n>>> x, y, z = symbols(\"x,y,z\")\n>>> R, f = sring(x + 2*y + 3*z)\n>>> R\nPolynomial ring in x, y, z over ZZ with lex order\n>>> f\nx + 2*y + 3*z\n>>> type(_)\n<class 'sympy.polys.rings.PolyElement'> \n```", "```py\nclass sympy.polys.rings.PolyRing(symbols, domain, order=LexOrder())\n```", "```py\nadd(*objs)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> R, x = ring(\"x\", ZZ)\n>>> R.add([ x**2 + 2*i + 3 for i in range(4) ])\n4*x**2 + 24\n>>> _.factor_list()\n(4, [(x**2 + 6, 1)]) \n```", "```py\nadd_gens(symbols)\n```", "```py\ncompose(other)\n```", "```py\ndrop(*gens)\n```", "```py\ndrop_to_ground(*gens)\n```", "```py\nindex(gen)\n```", "```py\nmonomial_basis(i)\n```", "```py\nmul(*objs)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> R, x = ring(\"x\", ZZ)\n>>> R.mul([ x**2 + 2*i + 3 for i in range(4) ])\nx**8 + 24*x**6 + 206*x**4 + 744*x**2 + 945\n>>> _.factor_list()\n(1, [(x**2 + 3, 1), (x**2 + 5, 1), (x**2 + 7, 1), (x**2 + 9, 1)]) \n```", "```py\nsymmetric_poly(n)\n```", "```py\nclass sympy.polys.rings.PolyElement\n```", "```py\nalmosteq(p2, tolerance=None)\n```", "```py\ncancel(g)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> (2*x**2 - 2).cancel(x**2 - 2*x + 1)\n(2*x + 2, x - 1) \n```", "```py\ncoeff(element)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y, z = ring(\"x,y,z\", ZZ)\n>>> f = 3*x**2*y - x*y*z + 7*z**3 + 23 \n```", "```py\n>>> f.coeff(x**2*y)\n3\n>>> f.coeff(x*y)\n0\n>>> f.coeff(1)\n23 \n```", "```py\ncoeff_wrt(x, deg)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x, y, z = ring(\"x, y, z\", ZZ) \n```", "```py\n>>> p = 2*x**4 + 3*y**4 + 10*z**2 + 10*x*z**2\n>>> deg = 2\n>>> p.coeff_wrt(2, deg) # Using the generator index\n10*x + 10\n>>> p.coeff_wrt(z, deg) # Using the generator\n10*x + 10\n>>> p.coeff(z**2) # shows the difference between coeff and coeff_wrt\n10 \n```", "```py\ncoeffs(order=None)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex, grlex \n```", "```py\n>>> _, x, y = ring(\"x, y\", ZZ, lex)\n>>> f = x*y**7 + 2*x**2*y**3 \n```", "```py\n>>> f.coeffs()\n[2, 1]\n>>> f.coeffs(grlex)\n[1, 2] \n```", "```py\nconst()\n```", "```py\ncontent()\n```", "```py\ncopy()\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.rings import ring \n```", "```py\n>>> R, x, y = ring('x, y', ZZ)\n>>> p = (x + y)**2\n>>> p1 = p.copy()\n>>> p2 = p\n>>> p[R.zero_monom] = 3\n>>> p\nx**2 + 2*x*y + y**2 + 3\n>>> p1\nx**2 + 2*x*y + y**2\n>>> p2\nx**2 + 2*x*y + y**2 + 3 \n```", "```py\ndegree(x=None)\n```", "```py\ndegrees()\n```", "```py\ndiff(x)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring(\"x,y\", ZZ)\n>>> p = x + x**2*y**3\n>>> p.diff(x)\n2*x*y**3 + 1 \n```", "```py\ndiv(fv)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring('x, y', ZZ)\n>>> f = x**3\n>>> f0 = x - y**2\n>>> f1 = x - y\n>>> qv, r = f.div((f0, f1))\n>>> qv[0]\nx**2 + x*y**2 + y**4\n>>> qv[1]\n0\n>>> r\ny**6 \n```", "```py\nimul_num(c)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring('x, y', ZZ)\n>>> p = x + y**2\n>>> p1 = p.imul_num(3)\n>>> p1\n3*x + 3*y**2\n>>> p1 is p\nTrue\n>>> p = x\n>>> p1 = p.imul_num(3)\n>>> p1\n3*x\n>>> p1 is p\nFalse \n```", "```py\nitercoeffs()\n```", "```py\nitermonoms()\n```", "```py\niterterms()\n```", "```py\nleading_expv()\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y, z = ring('x, y, z', ZZ)\n>>> p = x**4 + x**3*y + x**2*z**2 + z**7\n>>> p.leading_expv()\n(4, 0, 0) \n```", "```py\nleading_monom()\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring('x, y', ZZ)\n>>> (3*x*y + y**2).leading_monom()\nx*y \n```", "```py\nleading_term()\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring('x, y', ZZ)\n>>> (3*x*y + y**2).leading_term()\n3*x*y \n```", "```py\nlistcoeffs()\n```", "```py\nlistmonoms()\n```", "```py\nlistterms()\n```", "```py\nmonic()\n```", "```py\nmonoms(order=None)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex, grlex \n```", "```py\n>>> _, x, y = ring(\"x, y\", ZZ, lex)\n>>> f = x*y**7 + 2*x**2*y**3 \n```", "```py\n>>> f.monoms()\n[(2, 3), (1, 7)]\n>>> f.monoms(grlex)\n[(1, 7), (2, 3)] \n```", "```py\npdiv(g, x=None)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x, y = ring(\"x, y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2\n>>> f.pdiv(g) # first generator is chosen by default if it is not given\n(2*x + 2*y - 2, -4*y + 4)\n>>> f.div(g) # shows the difference between pdiv and div\n(0, x**2 + x*y)\n>>> f.pdiv(g, y) # generator is given\n(2*x**3 + 2*x**2*y + 6*x**2 + 2*x*y + 8*x + 4, 0)\n>>> f.pdiv(g, 1) # generator index is given\n(2*x**3 + 2*x**2*y + 6*x**2 + 2*x*y + 8*x + 4, 0) \n```", "```py\npexquo(g, x=None)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2*y\n>>> h = 2*x + 2\n>>> f.pexquo(g)\n2*x\n>>> f.exquo(g) # shows the differnce between pexquo and exquo\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x + 2*y does not divide x**2 + x*y\n>>> f.pexquo(h)\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x + 2 does not divide x**2 + x*y \n```", "```py\npquo(g, x=None)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2*y\n>>> h = 2*x + 2\n>>> f.pquo(g)\n2*x\n>>> f.quo(g) # shows the difference between pquo and quo\n0\n>>> f.pquo(h)\n2*x + 2*y - 2\n>>> f.quo(h) # shows the difference between pquo and quo\n0 \n```", "```py\nprem(g, x=None)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x, y = ring(\"x, y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2\n>>> f.prem(g) # first generator is chosen by default if it is not given\n-4*y + 4\n>>> f.rem(g) # shows the differnce between prem and rem\nx**2 + x*y\n>>> f.prem(g, y) # generator is given\n0\n>>> f.prem(g, 1) # generator index is given\n0 \n```", "```py\nprimitive()\n```", "```py\nsquare()\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y = ring('x, y', ZZ)\n>>> p = x + y**2\n>>> p.square()\nx**2 + 2*x*y**2 + y**4 \n```", "```py\nstrip_zero()\n```", "```py\nsubresultants(g, x=None)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x, y = ring(\"x, y\", ZZ) \n```", "```py\n>>> f = x**2*y + x*y\n>>> g = x + y\n>>> f.subresultants(g) # first generator is chosen by default if not given\n[x**2*y + x*y, x + y, y**3 - y**2]\n>>> f.subresultants(g, 0) # generator index is given\n[x**2*y + x*y, x + y, y**3 - y**2]\n>>> f.subresultants(g, y) # generator is given\n[x**2*y + x*y, x + y, x**3 + x**2] \n```", "```py\nsymmetrize()\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> R, x, y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + y**2\n>>> f.symmetrize()\n(x**2 - 2*y, 0, [(x, x + y), (y, x*y)]) \n```", "```py\n>>> f = x**2 - y**2\n>>> f.symmetrize()\n(x**2 - 2*y, -2*y**2, [(x, x + y), (y, x*y)]) \n```", "```py\ntail_degree(x=None)\n```", "```py\ntail_degrees()\n```", "```py\nterms(order=None)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.orderings import lex, grlex \n```", "```py\n>>> _, x, y = ring(\"x, y\", ZZ, lex)\n>>> f = x*y**7 + 2*x**2*y**3 \n```", "```py\n>>> f.terms()\n[((2, 3), 2), ((1, 7), 1)]\n>>> f.terms(grlex)\n[((1, 7), 1), ((2, 3), 2)] \n```", "```py\nsympy.polys.fields.field(symbols, domain, order=LexOrder())\n```", "```py\nsympy.polys.fields.xfield(symbols, domain, order=LexOrder())\n```", "```py\nsympy.polys.fields.vfield(symbols, domain, order=LexOrder())\n```", "```py\nsympy.polys.fields.sfield(exprs, *symbols, **options)\n```", "```py\n>>> from sympy import exp, log, symbols, sfield \n```", "```py\n>>> x = symbols(\"x\")\n>>> K, f = sfield((x*log(x) + 4*x**2)*exp(1/x + log(x)/3)/x**2)\n>>> K\nRational function field in x, exp(1/x), log(x), x**(1/3) over ZZ with lex order\n>>> f\n(4*x**2*(exp(1/x)) + x*(exp(1/x))*(log(x)))/((x**(1/3))**5) \n```", "```py\nclass sympy.polys.fields.FracField(symbols, domain, order=LexOrder())\n```", "```py\nclass sympy.polys.fields.FracElement(numer, denom=None)\n```", "```py\ndiff(x)\n```", "```py\n>>> from sympy.polys.fields import field\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> _, x, y, z = field(\"x,y,z\", ZZ)\n>>> ((x**2 + y)/(z + 1)).diff(x)\n2*x/(z + 1) \n```", "```py\nclass sympy.polys.polyclasses.DMP(rep, dom, lev=None)\n```", "```py\nLC()\n```", "```py\nTC()\n```", "```py\nabs()\n```", "```py\nadd(g)\n```", "```py\nadd_ground(c)\n```", "```py\nall_coeffs()\n```", "```py\nall_monoms()\n```", "```py\nall_terms()\n```", "```py\ncancel(g, include=True)\n```", "```py\ncauchy_lower_bound()\n```", "```py\ncauchy_upper_bound()\n```", "```py\nclear_denoms()\n```", "```py\ncoeffs(order=None)\n```", "```py\ncofactors(g)\n```", "```py\ncompose(g)\n```", "```py\ncontent()\n```", "```py\nconvert(dom)\n```", "```py\ncount_complex_roots(inf=None, sup=None)\n```", "```py\ncount_real_roots(inf=None, sup=None)\n```", "```py\ndecompose()\n```", "```py\ndeflate()\n```", "```py\ndegree(j=0)\n```", "```py\ndegree_list()\n```", "```py\ndiff(m=1, j=0)\n```", "```py\ndiscriminant()\n```", "```py\ndiv(g)\n```", "```py\neject(dom, front=False)\n```", "```py\neval(a, j=0)\n```", "```py\nexclude()\n```", "```py\n>>> from sympy.polys.polyclasses import DMP\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> DMP([[[ZZ(1)]], [[ZZ(1)], [ZZ(2)]]], ZZ).exclude()\n([2], DMP_Python([[1], [1, 2]], ZZ)) \n```", "```py\nexquo(g)\n```", "```py\nexquo_ground(c)\n```", "```py\nfactor_list()\n```", "```py\nfactor_list_include()\n```", "```py\nclassmethod from_list(rep, lev, dom)\n```", "```py\nclassmethod from_sympy_list(rep, lev, dom)\n```", "```py\ngcd(g)\n```", "```py\ngcdex(g)\n```", "```py\ngff_list()\n```", "```py\nground_new(coeff)\n```", "```py\nhalf_gcdex(g)\n```", "```py\nhomogeneous_order()\n```", "```py\nhomogenize(s)\n```", "```py\ninject(front=False)\n```", "```py\nintegrate(m=1, j=0)\n```", "```py\nintervals(all=False, eps=None, inf=None, sup=None, fast=False, sqf=False)\n```", "```py\ninvert(g)\n```", "```py\nproperty is_cyclotomic\n```", "```py\nproperty is_ground\n```", "```py\nproperty is_homogeneous\n```", "```py\nproperty is_irreducible\n```", "```py\nproperty is_linear\n```", "```py\nproperty is_monic\n```", "```py\nproperty is_monomial\n```", "```py\nproperty is_one\n```", "```py\nproperty is_primitive\n```", "```py\nproperty is_quadratic\n```", "```py\nproperty is_sqf\n```", "```py\nproperty is_zero\n```", "```py\nl1_norm()\n```", "```py\nl2_norm_squared()\n```", "```py\nlcm(g)\n```", "```py\nlift()\n```", "```py\nmax_norm()\n```", "```py\nmignotte_sep_bound_squared()\n```", "```py\nmonic()\n```", "```py\nmonoms(order=None)\n```", "```py\nmul(g)\n```", "```py\nmul_ground(c)\n```", "```py\nneg()\n```", "```py\nnorm()\n```", "```py\nnth(*N)\n```", "```py\npdiv(g)\n```", "```py\npermute(P)\n```", "```py\n>>> from sympy.polys.polyclasses import DMP\n>>> from sympy.polys.domains import ZZ \n```", "```py\n>>> DMP([[[ZZ(2)], [ZZ(1), ZZ(0)]], [[]]], ZZ).permute([1, 0, 2])\nDMP_Python([[[2], []], [[1, 0], []]], ZZ) \n```", "```py\n>>> DMP([[[ZZ(2)], [ZZ(1), ZZ(0)]], [[]]], ZZ).permute([1, 2, 0])\nDMP_Python([[[1], []], [[2, 0], []]], ZZ) \n```", "```py\npexquo(g)\n```", "```py\npow(n)\n```", "```py\npquo(g)\n```", "```py\nprem(g)\n```", "```py\nprimitive()\n```", "```py\nquo(g)\n```", "```py\nquo_ground(c)\n```", "```py\nrefine_root(s, t, eps=None, steps=None, fast=False)\n```", "```py\nrem(g)\n```", "```py\nproperty rep\n```", "```py\nresultant(g, includePRS=False)\n```", "```py\nrevert(n)\n```", "```py\nshift(a)\n```", "```py\nshift_list(a)\n```", "```py\nslice(m, n, j=0)\n```", "```py\nsqf_list(all=False)\n```", "```py\nsqf_list_include(all=False)\n```", "```py\nsqf_norm()\n```", "```py\nsqf_part()\n```", "```py\nsqr()\n```", "```py\nsturm()\n```", "```py\nsub(g)\n```", "```py\nsub_ground(c)\n```", "```py\nsubresultants(g)\n```", "```py\nterms(order=None)\n```", "```py\nterms_gcd()\n```", "```py\nto_best()\n```", "```py\nto_dict(zero=False)\n```", "```py\nto_exact()\n```", "```py\nto_field()\n```", "```py\nto_list()\n```", "```py\nto_ring()\n```", "```py\nto_sympy_dict(zero=False)\n```", "```py\nto_sympy_list()\n```", "```py\nto_tuple()\n```", "```py\ntotal_degree()\n```", "```py\ntransform(p, q)\n```", "```py\ntrunc(p)\n```", "```py\nunify_DMP(g)\n```", "```py\nclass sympy.polys.polyclasses.DMF(rep, dom, lev=None)\n```", "```py\nadd(g)\n```", "```py\nadd_ground(c)\n```", "```py\ncancel()\n```", "```py\ndenom()\n```", "```py\nexquo(g)\n```", "```py\nfrac_unify(g)\n```", "```py\nhalf_per(rep, kill=False)\n```", "```py\ninvert(check=True)\n```", "```py\nproperty is_one\n```", "```py\nproperty is_zero\n```", "```py\nmul(g)\n```", "```py\nneg()\n```", "```py\nnumer()\n```", "```py\nper(num, den, cancel=True, kill=False)\n```", "```py\npoly_unify(g)\n```", "```py\npow(n)\n```", "```py\nquo(g)\n```", "```py\nsub(g)\n```", "```py\nclass sympy.polys.polyclasses.ANP(rep, mod, dom)\n```", "```py\nLC()\n```", "```py\nTC()\n```", "```py\nadd_ground(c)\n```", "```py\nconvert(dom)\n```", "```py\nproperty is_ground\n```", "```py\nproperty is_one\n```", "```py\nproperty is_zero\n```", "```py\nmod_to_list()\n```", "```py\nmul_ground(c)\n```", "```py\npow(n)\n```", "```py\nquo_ground(c)\n```", "```py\nsub_ground(c)\n```", "```py\nto_dict()\n```", "```py\nto_list()\n```", "```py\nto_sympy_dict()\n```", "```py\nto_sympy_list()\n```", "```py\nto_tuple()\n```", "```py\nunify(g)\n```", "```py\nunify_ANP(g)\n```"]