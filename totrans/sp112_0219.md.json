["```py\nscipy.io.mmwrite(target, a, comment=None, field=None, precision=None, symmetry='AUTO')\n```", "```py\n>>> from io import BytesIO\n>>> import numpy as np\n>>> from scipy.sparse import coo_matrix\n>>> from scipy.io import mmwrite \n```", "```py\n>>> a = np.array([[1.0, 0, 0, 0], [0, 2.5, 0, 6.25]])\n>>> target = BytesIO()\n>>> mmwrite(target, a)\n>>> print(target.getvalue().decode('latin1'))\n%%MatrixMarket matrix array real general\n%\n2 4\n1\n0\n0\n2.5\n0\n0\n0\n6.25 \n```", "```py\n>>> target = BytesIO()\n>>> mmwrite(target, a, comment='\\n Some test data.\\n', precision=3)\n>>> print(target.getvalue().decode('latin1'))\n%%MatrixMarket matrix array real general\n%\n% Some test data.\n%\n2 4\n1.00e+00\n0.00e+00\n0.00e+00\n2.50e+00\n0.00e+00\n0.00e+00\n0.00e+00\n6.25e+00 \n```", "```py\n>>> target = BytesIO()\n>>> mmwrite(target, coo_matrix(a), precision=3)\n>>> print(target.getvalue().decode('latin1'))\n%%MatrixMarket matrix coordinate real general\n%\n2 4 3\n1 1 1.00e+00\n2 2 2.50e+00\n2 4 6.25e+00 \n```", "```py\n>>> z = np.array([[3, 1+2j, 4-3j], [1-2j, 1, -5j], [4+3j, 5j, 2.5]])\n>>> z\narray([[ 3\\. +0.j,  1\\. +2.j,  4\\. -3.j],\n [ 1\\. -2.j,  1\\. +0.j, -0\\. -5.j],\n [ 4\\. +3.j,  0\\. +5.j,  2.5+0.j]]) \n```", "```py\n>>> target = BytesIO()\n>>> mmwrite(target, z, precision=2)\n>>> print(target.getvalue().decode('latin1'))\n%%MatrixMarket matrix array complex hermitian\n%\n3 3\n3.0e+00 0.0e+00\n1.0e+00 -2.0e+00\n4.0e+00 3.0e+00\n1.0e+00 0.0e+00\n0.0e+00 5.0e+00\n2.5e+00 0.0e+00 \n```", "```py\n>>> import threadpoolctl\n>>>\n>>> target = BytesIO()\n>>> with threadpoolctl.threadpool_limits(limits=2):\n...     mmwrite(target, a) \n```"]