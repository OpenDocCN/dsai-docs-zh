- en: scipy.interpolate.RectSphereBivariateSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RectSphereBivariateSpline.html#scipy.interpolate.RectSphereBivariateSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RectSphereBivariateSpline.html#scipy.interpolate.RectSphereBivariateSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bivariate spline approximation over a rectangular mesh on a sphere.
  prefs: []
  type: TYPE_NORMAL
- en: Can be used for smoothing data.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**u**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array of colatitude coordinates in strictly ascending order. Coordinates
    must be given in radians and lie within the open interval `(0, pi)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**v**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array of longitude coordinates in strictly ascending order. Coordinates
    must be given in radians. First element (`v[0]`) must lie within the interval
    `[-pi, pi)`. Last element (`v[-1]`) must satisfy `v[-1] <= v[0] + 2*pi`.
  prefs: []
  type: TYPE_NORMAL
- en: '**r**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 2-D array of data with shape `(u.size, v.size)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Positive smoothing factor defined for estimation condition (`s=0` is for interpolation).
  prefs: []
  type: TYPE_NORMAL
- en: '**pole_continuity**bool or (bool, bool), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of continuity at the poles `u=0` (`pole_continuity[0]`) and `u=pi` (`pole_continuity[1]`).
    The order of continuity at the pole will be 1 or 0 when this is True or False,
    respectively. Defaults to False.
  prefs: []
  type: TYPE_NORMAL
- en: '**pole_values**float or (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data values at the poles `u=0` and `u=pi`. Either the whole parameter or each
    individual element can be None. Defaults to None.
  prefs: []
  type: TYPE_NORMAL
- en: '**pole_exact**bool or (bool, bool), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data value exactness at the poles `u=0` and `u=pi`. If True, the value is considered
    to be the right function value, and it will be fitted exactly. If False, the value
    will be considered to be a data value just like the other data values. Defaults
    to False.
  prefs: []
  type: TYPE_NORMAL
- en: '**pole_flat**bool or (bool, bool), optional'
  prefs: []
  type: TYPE_NORMAL
- en: For the poles at `u=0` and `u=pi`, specify whether or not the approximation
    has vanishing derivatives. Defaults to False.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a base class for bivariate splines.
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smooth univariate spline to fit a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothBivariateSpline`](scipy.interpolate.SmoothBivariateSpline.html#scipy.interpolate.SmoothBivariateSpline
    "scipy.interpolate.SmoothBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline through the given points
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQBivariateSpline`](scipy.interpolate.LSQBivariateSpline.html#scipy.interpolate.LSQBivariateSpline
    "scipy.interpolate.LSQBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothSphereBivariateSpline`](scipy.interpolate.SmoothSphereBivariateSpline.html#scipy.interpolate.SmoothSphereBivariateSpline
    "scipy.interpolate.SmoothSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline in spherical coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQSphereBivariateSpline`](scipy.interpolate.LSQSphereBivariateSpline.html#scipy.interpolate.LSQSphereBivariateSpline
    "scipy.interpolate.LSQSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline in spherical coordinates using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh.
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find a bivariate B-spline representation of a surface
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a bivariate B-spline and its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Currently, only the smoothing spline approximation (`iopt[0] = 0` and `iopt[0]
    = 1` in the FITPACK routine) is supported. The exact least-squares spline approximation
    is not implemented yet.
  prefs: []
  type: TYPE_NORMAL
- en: When actually performing the interpolation, the requested *v* values must lie
    within the same length 2pi interval that the original *v* values were chosen from.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see the [FITPACK](http://www.netlib.org/dierckx/spgrid.f)
    site about this function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have global data on a coarse grid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We want to interpolate it to a global one-degree grid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We need to set up the interpolator object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Finally we interpolate the data. The [`RectSphereBivariateSpline`](#scipy.interpolate.RectSphereBivariateSpline
    "scipy.interpolate.RectSphereBivariateSpline") object only takes 1-D arrays as
    input, therefore we need to do some reshaping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the original and the interpolated data, one can see that the interpolant
    reproduces the original data very well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-RectSphereBivariateSpline-1_00_00.png](../Images/8ac801f99d45be8804988d470678b023.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the optimal value of `s` can be a delicate task. Recommended values
    for `s` depend on the accuracy of the data values. If the user has an idea of
    the statistical errors on the data, she can also find a proper estimate for `s`.
    By assuming that, if she specifies the right `s`, the interpolator will use a
    spline `f(u,v)` which exactly reproduces the function underlying the data, she
    can evaluate `sum((r(i,j)-s(u(i),v(j)))**2)` to find a good estimate for this
    `s`. For example, if she knows that the statistical errors on her `r(i,j)`-values
    are not greater than 0.1, she may expect that a good `s` should have a value not
    larger than `u.size * v.size * (0.1)**2`.
  prefs: []
  type: TYPE_NORMAL
- en: If nothing is known about the statistical error in `r(i,j)`, `s` must be determined
    by trial and error. The best is then to start with a very large value of `s` (to
    determine the least-squares polynomial and the corresponding upper bound `fp0`
    for `s`) and then to progressively decrease the value of `s` (say by a factor
    10 in the beginning, i.e. `s = fp0 / 10, fp0 / 100, ...` and more carefully as
    the approximation shows more detail) to obtain closer fits.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interpolation results for different values of `s` give some insight into
    this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-RectSphereBivariateSpline-1_01_00.png](../Images/6e325b78cf5c9db9beeb5a0502ad2fd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.RectSphereBivariateSpline.__call__.html#scipy.interpolate.RectSphereBivariateSpline.__call__
    "scipy.interpolate.RectSphereBivariateSpline.__call__")(theta, phi[, dtheta, dphi, grid])
    | Evaluate the spline or its derivatives at given positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ev`](scipy.interpolate.RectSphereBivariateSpline.ev.html#scipy.interpolate.RectSphereBivariateSpline.ev
    "scipy.interpolate.RectSphereBivariateSpline.ev")(theta, phi[, dtheta, dphi])
    | Evaluate the spline at points |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_coeffs`](scipy.interpolate.RectSphereBivariateSpline.get_coeffs.html#scipy.interpolate.RectSphereBivariateSpline.get_coeffs
    "scipy.interpolate.RectSphereBivariateSpline.get_coeffs")() | Return spline coefficients.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_knots`](scipy.interpolate.RectSphereBivariateSpline.get_knots.html#scipy.interpolate.RectSphereBivariateSpline.get_knots
    "scipy.interpolate.RectSphereBivariateSpline.get_knots")() | Return a tuple (tx,ty)
    where tx,ty contain knots positions of the spline with respect to x-, y-variable,
    respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_residual`](scipy.interpolate.RectSphereBivariateSpline.get_residual.html#scipy.interpolate.RectSphereBivariateSpline.get_residual
    "scipy.interpolate.RectSphereBivariateSpline.get_residual")() | Return weighted
    sum of squared residuals of the spline approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`partial_derivative`](scipy.interpolate.RectSphereBivariateSpline.partial_derivative.html#scipy.interpolate.RectSphereBivariateSpline.partial_derivative
    "scipy.interpolate.RectSphereBivariateSpline.partial_derivative")(dx, dy) | Construct
    a new spline representing a partial derivative of this spline. |'
  prefs: []
  type: TYPE_TB
