- en: scipy.integrate.solve_bvp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.solve_bvp
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.solve_bvp.html#scipy.integrate.solve_bvp)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Solve a boundary value problem for a system of ODEs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 解决ODE系统的边界值问题。
- en: 'This function numerically solves a first order system of ODEs subject to two-point
    boundary conditions:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数数值解一个带有两点边界条件的一阶ODE系统：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here x is a 1-D independent variable, y(x) is an N-D vector-valued function
    and p is a k-D vector of unknown parameters which is to be found along with y(x).
    For the problem to be determined, there must be n + k boundary conditions, i.e.,
    bc must be an (n + k)-D function.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 x 是一个 1-D 独立变量，y(x) 是一个 N-D 向量值函数，p 是一个 k-D 未知参数向量，它与 y(x) 一起被找到。为了确定问题，必须有
    n + k 个边界条件，即 bc 必须是一个 (n + k)-D 函数。
- en: The last singular term on the right-hand side of the system is optional. It
    is defined by an n-by-n matrix S, such that the solution must satisfy S y(a) =
    0\. This condition will be forced during iterations, so it must not contradict
    boundary conditions. See [[2]](#r25f8479e577a-2) for the explanation how this
    term is handled when solving BVPs numerically.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 系统右手边的最后一个奇异项是可选的。它由一个 n×n 矩阵 S 定义，使得解必须满足 S y(a) = 0。此条件将在迭代过程中强制执行，因此不得与边界条件相矛盾。详见
    [[2]](#r25f8479e577a-2)，解释在数值求解 BVPs 时如何处理此项。
- en: Problems in a complex domain can be solved as well. In this case, y and p are
    considered to be complex, and f and bc are assumed to be complex-valued functions,
    but x stays real. Note that f and bc must be complex differentiable (satisfy Cauchy-Riemann
    equations [[4]](#r25f8479e577a-4)), otherwise you should rewrite your problem
    for real and imaginary parts separately. To solve a problem in a complex domain,
    pass an initial guess for y with a complex data type (see below).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以解决复杂域中的问题。在这种情况下，y 和 p 被视为复数，f 和 bc 被假定为复值函数，但 x 保持实数。注意 f 和 bc 必须是复可微的（满足柯西-黎曼方程
    [[4]](#r25f8479e577a-4)），否则应将问题分别重写为实部和虚部。要在复杂域中解决问题，请传递一个带有复数数据类型的初始猜测值 y。
- en: 'Parameters:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun**callable'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun**callable'
- en: 'Right-hand side of the system. The calling signature is `fun(x, y)`, or `fun(x,
    y, p)` if parameters are present. All arguments are ndarray: `x` with shape (m,),
    `y` with shape (n, m), meaning that `y[:, i]` corresponds to `x[i]`, and `p` with
    shape (k,). The return value must be an array with shape (n, m) and with the same
    layout as `y`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的右手边。调用签名为 `fun(x, y)` 或者如果存在参数则为 `fun(x, y, p)`。所有参数都是 ndarray：`x` 的形状为 (m,)，`y`
    的形状为 (n, m)，意味着 `y[:, i]` 对应于 `x[i]`，`p` 的形状为 (k,)。返回值必须是形状为 (n, m) 的数组，并且与 `y`
    的布局相同。
- en: '**bc**callable'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**bc**callable'
- en: 'Function evaluating residuals of the boundary conditions. The calling signature
    is `bc(ya, yb)`, or `bc(ya, yb, p)` if parameters are present. All arguments are
    ndarray: `ya` and `yb` with shape (n,), and `p` with shape (k,). The return value
    must be an array with shape (n + k,).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 评估边界条件残差的函数。调用签名为 `bc(ya, yb)` 或者如果存在参数则为 `bc(ya, yb, p)`。所有参数都是 ndarray：`ya`
    和 `yb` 的形状为 (n,)，`p` 的形状为 (k,)。返回值必须是形状为 (n + k,) 的数组。
- en: '**x**array_like, shape (m,)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**array_like，形状为 (m,)'
- en: Initial mesh. Must be a strictly increasing sequence of real numbers with `x[0]=a`
    and `x[-1]=b`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 初始网格。必须是一系列严格增加的实数，满足 `x[0]=a` 和 `x[-1]=b`。
- en: '**y**array_like, shape (n, m)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**array_like，形状为 (n, m)'
- en: Initial guess for the function values at the mesh nodes, ith column corresponds
    to `x[i]`. For problems in a complex domain pass *y* with a complex data type
    (even if the initial guess is purely real).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在网格节点处的初始猜测值，第 i 列对应于 `x[i]`。对于复数域中的问题，即使初始猜测是纯实数，也要传递带有复数数据类型的 *y*。
- en: '**p**array_like with shape (k,) or None, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**p**形状为 (k,) 的数组或 None，可选'
- en: Initial guess for the unknown parameters. If None (default), it is assumed that
    the problem doesn’t depend on any parameters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 未知参数的初始猜测值。如果为 None（默认），则假定问题不依赖于任何参数。
- en: '**S**array_like with shape (n, n) or None'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**S**形状为 (n, n) 的数组或 None'
- en: Matrix defining the singular term. If None (default), the problem is solved
    without the singular term.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 定义奇异项的矩阵。如果为 None（默认），则在没有奇异项的情况下解决问题。
- en: '**fun_jac**callable or None, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun_jac**callable 或 None，可选'
- en: 'Function computing derivatives of f with respect to y and p. The calling signature
    is `fun_jac(x, y)`, or `fun_jac(x, y, p)` if parameters are present. The return
    must contain 1 or 2 elements in the following order:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 f 对 y 和 p 的导数的函数。其调用签名为 `fun_jac(x, y)` 或者如果存在参数则为 `fun_jac(x, y, p)`。返回必须按以下顺序包含
    1 或 2 个元素：
- en: 'df_dy : array_like with shape (n, n, m), where an element (i, j, q) equals
    to d f_i(x_q, y_q, p) / d (y_q)_j.'
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: df_dy：形状为 (n, n, m) 的 array_like，其中元素 (i, j, q) 等于 d f_i(x_q, y_q, p) / d (y_q)_j。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'df_dp : array_like with shape (n, k, m), where an element (i, j, q) equals
    to d f_i(x_q, y_q, p) / d p_j.'
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: df_dp：形状为 (n, k, m) 的 array_like，其中元素 (i, j, q) 等于 d f_i(x_q, y_q, p) / d p_j。
- en: Here q numbers nodes at which x and y are defined, whereas i and j number vector
    components. If the problem is solved without unknown parameters, df_dp should
    not be returned.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此处 q 表示 x 和 y 定义的节点数，而 i 和 j 表示向量分量数。如果问题在没有未知参数的情况下解决，则不应返回 df_dp。
- en: If *fun_jac* is None (default), the derivatives will be estimated by the forward
    finite differences.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *fun_jac* 为 None（默认情况下），则通过向前有限差分法估计导数。
- en: '**bc_jac**callable or None, optional'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**bc_jac**可调用对象或 None，可选'
- en: 'Function computing derivatives of bc with respect to ya, yb, and p. The calling
    signature is `bc_jac(ya, yb)`, or `bc_jac(ya, yb, p)` if parameters are present.
    The return must contain 2 or 3 elements in the following order:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 bc 对 ya、yb 和 p 的导数的函数。其调用签名为 `bc_jac(ya, yb)` 或者如果存在参数则为 `bc_jac(ya, yb,
    p)`。返回必须按以下顺序包含 2 或 3 个元素：
- en: 'dbc_dya : array_like with shape (n, n), where an element (i, j) equals to d
    bc_i(ya, yb, p) / d ya_j.'
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: dbc_dya：形状为 (n, n) 的 array_like，其中元素 (i, j) 等于 d bc_i(ya, yb, p) / d ya_j。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dbc_dyb : array_like with shape (n, n), where an element (i, j) equals to d
    bc_i(ya, yb, p) / d yb_j.'
  id: totrans-35
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: dbc_dyb：形状为 (n, n) 的 array_like，其中元素 (i, j) 等于 d bc_i(ya, yb, p) / d yb_j。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dbc_dp : array_like with shape (n, k), where an element (i, j) equals to d
    bc_i(ya, yb, p) / d p_j.'
  id: totrans-38
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: dbc_dp：形状为 (n, k) 的 array_like，其中元素 (i, j) 等于 d bc_i(ya, yb, p) / d p_j。
- en: If the problem is solved without unknown parameters, dbc_dp should not be returned.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题在没有未知参数的情况下解决，则不应返回 dbc_dp。
- en: If *bc_jac* is None (default), the derivatives will be estimated by the forward
    finite differences.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *bc_jac* 为 None（默认情况下），则通过向前有限差分法估计导数。
- en: '**tol**float, optional'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**tol**float，可选'
- en: Desired tolerance of the solution. If we define `r = y' - f(x, y)`, where y
    is the found solution, then the solver tries to achieve on each mesh interval
    `norm(r / (1 + abs(f)) < tol`, where `norm` is estimated in a root mean squared
    sense (using a numerical quadrature formula). Default is 1e-3.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 求解的所需解的容差。如果我们定义 `r = y' - f(x, y)`，其中 y 是找到的解，则求解器试图在每个网格间隔上实现 `norm(r / (1
    + abs(f)) < tol` 的标准（使用数值积分公式估计的均方根）。默认为 1e-3。
- en: '**max_nodes**int, optional'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_nodes**int，可选'
- en: Maximum allowed number of the mesh nodes. If exceeded, the algorithm terminates.
    Default is 1000.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最大网格节点数。如果超过，则算法终止。默认为 1000。
- en: '**verbose**{0, 1, 2}, optional'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**{0, 1, 2}，可选'
- en: 'Level of algorithm’s verbosity:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 算法详细程度的级别：
- en: '0 (default) : work silently.'
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0（默认值）：静默工作。
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '1 : display a termination report.'
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1：显示终止报告。
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '2 : display progress during iterations.'
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2：迭代过程中显示进展。
- en: '**bc_tol**float, optional'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**bc_tol**float，可选'
- en: 'Desired absolute tolerance for the boundary condition residuals: *bc* value
    should satisfy `abs(bc) < bc_tol` component-wise. Equals to *tol* by default.
    Up to 10 iterations are allowed to achieve this tolerance.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 边界条件残差的所需绝对容差：*bc* 值应满足 `abs(bc) < bc_tol` 每个分量。默认为 *tol*。允许最多 10 次迭代以达到此容差。
- en: 'Returns:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'Bunch object with the following fields defined:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下字段定义的 Bunch 对象：
- en: '**sol**PPoly'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**sol**PPoly'
- en: Found solution for y as [`scipy.interpolate.PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly
    "scipy.interpolate.PPoly") instance, a C1 continuous cubic spline.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 找到关于 y 的解为 [`scipy.interpolate.PPoly`](https://scipy.interpolate.PPoly.html#scipy.interpolate.PPoly
    "scipy.interpolate.PPoly") 实例，一个 C1 连续的三次样条。
- en: '**p**ndarray or None, shape (k,)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**p**ndarray 或 None，形状 (k,)'
- en: Found parameters. None, if the parameters were not present in the problem.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 找到的参数。如果问题中不存在参数，则为 None。
- en: '**x**ndarray, shape (m,)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**ndarray，形状为 (m,)'
- en: Nodes of the final mesh.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最终网格的节点。
- en: '**y**ndarray, shape (n, m)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**ndarray，形状为 (n, m)'
- en: Solution values at the mesh nodes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格节点处的解值。
- en: '**yp**ndarray, shape (n, m)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**yp**ndarray，形状为 (n, m)'
- en: Solution derivatives at the mesh nodes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 解在网格节点处的导数。
- en: '**rms_residuals**ndarray, shape (m - 1,)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**rms_residuals**ndarray，形状为 (m - 1,)'
- en: RMS values of the relative residuals over each mesh interval (see the description
    of *tol* parameter).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于每个网格间隔的相对残差的 RMS 值（请参阅 *tol* 参数的描述）。
- en: '**niter**int'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**niter**int'
- en: Number of completed iterations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成迭代的次数。
- en: '**status**int'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**status**int'
- en: 'Reason for algorithm termination:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 算法终止的原因：
- en: '0: The algorithm converged to the desired accuracy.'
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0: 算法收敛到期望的精度。'
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '1: The maximum number of mesh nodes is exceeded.'
  id: totrans-77
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '1: 超过了最大网格节点数。'
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '2: A singular Jacobian encountered when solving the collocation system.'
  id: totrans-80
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2: 在解决匹配系统时遇到奇异雅可比矩阵。'
- en: '**message**string'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**message**string'
- en: Verbal description of the termination reason.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 终止原因的口头描述。
- en: '**success**bool'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**success**bool'
- en: True if the algorithm converged to the desired accuracy (`status=0`).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果算法收敛到期望的精度（`status=0`）则返回真。
- en: Notes
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This function implements a 4th order collocation algorithm with the control
    of residuals similar to [[1]](#r25f8479e577a-1). A collocation system is solved
    by a damped Newton method with an affine-invariant criterion function as described
    in [[3]](#r25f8479e577a-3).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数实现了一个具有残差控制的 4 阶匹配算法，类似于 [[1]](#r25f8479e577a-1)。一个匹配系统通过一个具有仿射不变判据函数的阻尼牛顿法解决，如
    [[3]](#r25f8479e577a-3) 所述。
- en: Note that in [[1]](#r25f8479e577a-1) integral residuals are defined without
    normalization by interval lengths. So, their definition is different by a multiplier
    of h**0.5 (h is an interval length) from the definition used here.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 [[1]](#r25f8479e577a-1) 中，积分残差的定义没有通过区间长度进行归一化。因此，它们的定义与此处使用的定义相差一个 h**0.5
    的乘数（其中 h 是区间长度）。
- en: New in version 0.18.0.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 0.18.0 开始新增。
- en: References
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] ([1](#id3),[2](#id5))'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] ([1](#id3),[2](#id5))'
- en: J. Kierzenka, L. F. Shampine, “A BVP Solver Based on Residual Control and the
    Maltab PSE”, ACM Trans. Math. Softw., Vol. 27, Number 3, pp. 299-316, 2001.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: J. Kierzenka, L. F. Shampine, “基于残差控制和 Maltab PSE 的 BVP 求解器”，ACM 数学软件交易，第 27
    卷，第 3 期，2001 年，299-316 页。
- en: '[[2](#id1)]'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id1)]'
- en: L.F. Shampine, P. H. Muir and H. Xu, “A User-Friendly Fortran BVP Solver”.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: L.F. Shampine, P. H. Muir 和 H. Xu，“一个用户友好的 Fortran BVP 求解器”。
- en: '[[3](#id4)]'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[[3](#id4)]'
- en: U. Ascher, R. Mattheij and R. Russell “Numerical Solution of Boundary Value
    Problems for Ordinary Differential Equations”.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: U. Ascher, R. Mattheij 和 R. Russell，“常微分方程边值问题的数值解法”。
- en: '[[4](#id2)]'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[[4](#id2)]'
- en: '[Cauchy-Riemann equations](https://en.wikipedia.org/wiki/Cauchy-Riemann_equations)
    on Wikipedia.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[共轭复数-黎曼方程](https://en.wikipedia.org/wiki/Cauchy-Riemann_equations) 在维基百科上。'
- en: Examples
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'In the first example, we solve Bratu’s problem:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，我们解决 Bratu 的问题：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: for k = 1.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 k = 1。
- en: 'We rewrite the equation as a first-order system and implement its right-hand
    side evaluation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将方程重写为一个一阶系统，并实现其右手边的评估：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Implement evaluation of the boundary condition residuals:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实现边界条件残差的评估：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Define the initial mesh with 5 nodes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 定义具有 5 个节点的初始网格：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This problem is known to have two solutions. To obtain both of them, we use
    two different initial guesses for y. We denote them by subscripts a and b.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题已知有两个解。为了获得这两个解，我们对 y 使用两个不同的初始猜测，分别用下标 a 和 b 表示。
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we are ready to run the solver.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行求解器。
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s plot the two found solutions. We take an advantage of having the solution
    in a spline form to produce a smooth plot.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们绘制这两个找到的解。我们利用解的样条形式来产生平滑的图形。  '
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![../../_images/scipy-integrate-solve_bvp-1_00_00.png](../Images/5cbea3df378a236a759fa4681cf3e2c3.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-integrate-solve_bvp-1_00_00.png](../Images/5cbea3df378a236a759fa4681cf3e2c3.png)'
- en: We see that the two solutions have similar shape, but differ in scale significantly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到两个解的形状相似，但在尺度上有显著差异。
- en: 'In the second example, we solve a simple Sturm-Liouville problem:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，我们解决一个简单的 Sturm-Liouville 问题：
- en: '[PRE10]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It is known that a non-trivial solution y = A * sin(k * x) is possible for
    k = pi * n, where n is an integer. To establish the normalization constant A =
    1 we add a boundary condition:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 已知对于 k = pi * n（其中 n 是整数），存在非平凡解 y = A * sin(k * x)。为了建立归一化常数 A = 1，我们添加一个边界条件：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, we rewrite our equation as a first-order system and implement its right-hand
    side evaluation:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将方程重写为一个一阶系统，并实现其右手边的评估：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that parameters p are passed as a vector (with one element in our case).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 [[1]](#r25f8479e577a-1) 中，参数 p 被作为一个向量传递（在我们的情况下只有一个元素）。
- en: 'Implement the boundary conditions:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 实现边界条件：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set up the initial mesh and guess for y. We aim to find the solution for k
    = 2 * pi, to achieve that we set values of y to approximately follow sin(2 * pi
    * x):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 设置初始网格和 y 的猜测。我们旨在找到 k = 2 * pi 的解，为此我们设置 y 的值以近似 sin(2 * pi * x)：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the solver with 6 as an initial guess for k.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 6 作为 k 的初始猜测来运行求解器。
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see that the found k is approximately correct:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到找到的 k 大致正确：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And, finally, plot the solution to see the anticipated sinusoid:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，绘制解以查看预期的正弦波形：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![../../_images/scipy-integrate-solve_bvp-1_01_00.png](../Images/175cf204d4121d0a36d80889d6cee876.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-integrate-solve_bvp-1_01_00.png](../Images/175cf204d4121d0a36d80889d6cee876.png)'
