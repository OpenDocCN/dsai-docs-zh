["```py\nscipy.stats.betabinom = <scipy.stats._discrete_distns.betabinom_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import betabinom\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> n, a, b = 5, 2.3, 0.63\n>>> mean, var, skew, kurt = betabinom.stats(n, a, b, moments='mvsk') \n```", "```py\n>>> x = np.arange(betabinom.ppf(0.01, n, a, b),\n...               betabinom.ppf(0.99, n, a, b))\n>>> ax.plot(x, betabinom.pmf(x, n, a, b), 'bo', ms=8, label='betabinom pmf')\n>>> ax.vlines(x, 0, betabinom.pmf(x, n, a, b), colors='b', lw=5, alpha=0.5) \n```", "```py\n>>> rv = betabinom(n, a, b)\n>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,\n...         label='frozen pmf')\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> prob = betabinom.cdf(x, n, a, b)\n>>> np.allclose(x, betabinom.ppf(prob, n, a, b))\nTrue \n```", "```py\n>>> r = betabinom.rvs(n, a, b, size=1000) \n```"]