- en: scipy.optimize.anderson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.anderson.html#scipy.optimize.anderson](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.anderson.html#scipy.optimize.anderson)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find a root of a function, using (extended) Anderson mixing.
  prefs: []
  type: TYPE_NORMAL
- en: The Jacobian is formed by for a ‘best’ solution in the space spanned by last
    *M* vectors. As a result, only a MxM matrix inversions and MxN multiplications
    are required. [[Ey]](#r00c808e12704-ey)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**F**function(x) -> f'
  prefs: []
  type: TYPE_NORMAL
- en: Function whose root to find; should take and return an array-like object.
  prefs: []
  type: TYPE_NORMAL
- en: '**xin**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess for the solution
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess for the Jacobian is (-1/alpha).
  prefs: []
  type: TYPE_NORMAL
- en: '**M**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of previous vectors to retain. Defaults to 5.
  prefs: []
  type: TYPE_NORMAL
- en: '**w0**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Regularization parameter for numerical stability. Compared to unity, good values
    of the order of 0.01.
  prefs: []
  type: TYPE_NORMAL
- en: '**iter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterations to make. If omitted (default), make as many as required
    to meet tolerances.
  prefs: []
  type: TYPE_NORMAL
- en: '**verbose**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Print status to stdout on every iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to make. If more are needed to meet convergence,
    *NoConvergence* is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**f_tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6.
  prefs: []
  type: TYPE_NORMAL
- en: '**f_rtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative tolerance for the residual. If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**x_tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute minimum step size, as determined from the Jacobian approximation. If
    the step size is smaller than this, optimization is terminated as successful.
    If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**x_rtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative minimum step size. If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol_norm**function(vector) -> scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Norm to use in convergence check. Default is the maximum norm.
  prefs: []
  type: TYPE_NORMAL
- en: '**line_search**{None, ‘armijo’ (default), ‘wolfe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Which type of a line search to use to determine the step size in the direction
    given by the Jacobian approximation. Defaults to ‘armijo’.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**function, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional callback function. It is called on every iteration as `callback(x,
    f)` where *x* is the current solution and *f* the corresponding residual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sol**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array (of similar array type as *x0*) containing the final solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: NoConvergence
  prefs: []
  type: TYPE_NORMAL
- en: When a solution was not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to root finding algorithms for multivariate functions. See `method='anderson'`
    in particular.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[Ey](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Eyert, J. Comp. Phys., 124, 271 (1996).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following functions define a system of nonlinear equations
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A solution can be obtained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
