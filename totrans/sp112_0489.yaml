- en: scipy.optimize.golden
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.golden.html#scipy.optimize.golden](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.golden.html#scipy.optimize.golden)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the minimizer of a function of one variable using the golden section
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Given a function of one variable and a possible bracketing interval, return
    a minimizer of the function isolated to a fractional precision of tol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable func(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to minimize.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Additional arguments (if present), passed to func.
  prefs: []
  type: TYPE_NORMAL
- en: '**brack**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Either a triple `(xa, xb, xc)` where `xa < xb < xc` and `func(xb) < func(xa)
    and  func(xb) < func(xc)`, or a pair (xa, xb) to be used as initial points for
    a downhill bracket search (see [`scipy.optimize.bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket")). The minimizer `x` will not necessarily satisfy `xa
    <= x <= xb`.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: x tolerance stop criterion
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xmin**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Optimum point.
  prefs: []
  type: TYPE_NORMAL
- en: '**fval**float'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) Optimum function value.
  prefs: []
  type: TYPE_NORMAL
- en: '**funcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) Number of objective function evaluations made.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for scalar univariate functions. See the
    ‘Golden’ *method* in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Uses analog of bisection method to decrease the bracketed interval.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We illustrate the behaviour of the function when *brack* is of size 2 and 3,
    respectively. In the case where *brack* is of the form (xa,xb), we can see for
    the given values, the output need not necessarily lie in the range `(xa, xb)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
