- en: scipy.fft.next_fast_len
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.fft.next_fast_len
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.next_fast_len.html#scipy.fft.next_fast_len](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.next_fast_len.html#scipy.fft.next_fast_len)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.next_fast_len.html#scipy.fft.next_fast_len](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.next_fast_len.html#scipy.fft.next_fast_len)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find the next fast size of input data to `fft`, for zero-padding, etc.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查找输入数据到`fft`的下一个快速大小，用于零填充等。
- en: SciPy’s FFT algorithms gain their speed by a recursive divide and conquer strategy.
    This relies on efficient functions for small prime factors of the input length.
    Thus, the transforms are fastest when using composites of the prime factors handled
    by the fft implementation. If there are efficient functions for all radices <=
    *n*, then the result will be a number *x* >= `target` with only prime factors
    < *n*. (Also known as *n*-smooth numbers)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy的FFT算法通过递归的分而治之策略获得其速度。这依赖于处理输入长度的小质因数的高效函数。因此，当使用FFT实现处理的质因数的复合数时，变换最快。如果对所有小于等于*n*的基数都有高效函数，则结果将是一个具有只有小于*n*的质因数的数*x*
    >= `target`。（也称为*n*-光滑数）
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**target**int'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**target**整数'
- en: Length to start searching from. Must be a positive integer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开始搜索的长度。必须是正整数。
- en: '**real**bool, optional'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**real**布尔型，可选'
- en: True if the FFT involves real input or output (e.g., [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft
    "scipy.fft.rfft") or [`hfft`](scipy.fft.hfft.html#scipy.fft.hfft "scipy.fft.hfft")
    but not [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")). Defaults to
    False.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果FFT涉及实数输入或输出（例如，[`rfft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.rfft.html#scipy.fft.rfft
    "scipy.fft.rfft")或[`hfft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.hfft.html#scipy.fft.hfft
    "scipy.fft.hfft")但不包括[`fft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft")），默认为False。
- en: 'Returns:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**out**int'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**整数'
- en: The smallest fast length greater than or equal to `target`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大于或等于`target`的最小快速长度。
- en: Notes
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The result of this function may change in future as performance considerations
    change, for example, if new prime factors are added.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的结果可能会随着性能考虑的变化而改变，例如，如果添加了新的质因数。
- en: Calling [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft") or [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft") with real input data performs an `'R2C'` transform internally.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`fft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft")或[`ifft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft")处理实数输入数据时，内部执行`'R2C'`变换。
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'On a particular machine, an FFT of prime length takes 11.4 ms:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定机器上，质数长度的FFT需要11.4 ms：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Zero-padding to the next regular length reduces computation time to 1.6 ms,
    a speedup of 7.3 times:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 零填充到下一个正规长度可将计算时间减少到1.6 ms，加快了7.3倍：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Rounding up to the next power of 2 is not optimal, taking 3.0 ms to compute;
    1.9 times longer than the size given by `next_fast_len`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将大小舍入到下一个2的幂不是最优的，计算时间为3.0 ms；比`next_fast_len`给出的大小长1.9倍：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
