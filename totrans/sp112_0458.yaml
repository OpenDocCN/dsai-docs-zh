- en: scipy.optimize.newton
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.newton
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton.html#scipy.optimize.newton](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton.html#scipy.optimize.newton)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton.html#scipy.optimize.newton](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.newton.html#scipy.optimize.newton)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find a root of a real or complex function using the Newton-Raphson (or secant
    or Halley’s) method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用牛顿-拉弗森（或割线或哈雷）方法找到实数或复数函数的根。
- en: Find a root of the scalar-valued function *func* given a nearby scalar starting
    point *x0*. The Newton-Raphson method is used if the derivative *fprime* of *func*
    is provided, otherwise the secant method is used. If the second order derivative
    *fprime2* of *func* is also provided, then Halley’s method is used.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 找到标量值函数*func*的根，给定附近的标量起始点*x0*。如果函数*func*的导数*fprime*被提供，则使用牛顿-拉弗森方法，否则使用割线法。如果函数*func*的二阶导数*fprime2*也被提供，则使用哈雷方法。
- en: 'If *x0* is a sequence with more than one item, [`newton`](#scipy.optimize.newton
    "scipy.optimize.newton") returns an array: the roots of the function from each
    (scalar) starting point in *x0*. In this case, *func* must be vectorized to return
    a sequence or array of the same shape as its first argument. If *fprime* (*fprime2*)
    is given, then its return must also have the same shape: each element is the first
    (second) derivative of *func* with respect to its only variable evaluated at each
    element of its first argument.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*x0*是一个具有多个项的序列，[`newton`](#scipy.optimize.newton "scipy.optimize.newton")
    将返回一个数组：从*x0*中的每个（标量）起始点的函数的根。在这种情况下，*func*必须被矢量化以返回与其第一个参数相同形状的序列或数组。如果给定*fprime*（*fprime2*），则其返回值也必须具有相同的形状：其每个元素是函数*func*相对于其唯一变量在其第一个参数的每个元素处求值的第一（第二）导数。
- en: '[`newton`](#scipy.optimize.newton "scipy.optimize.newton") is for finding roots
    of a scalar-valued functions of a single variable. For problems involving several
    variables, see [`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root").'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`newton`](#scipy.optimize.newton "scipy.optimize.newton") 用于查找单变量标量函数的根。对于涉及多个变量的问题，请参阅[`root`](scipy.optimize.root.html#scipy.optimize.root
    "scipy.optimize.root")。'
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**func**callable'
- en: The function whose root is wanted. It must be a function of a single variable
    of the form `f(x,a,b,c...)`, where `a,b,c...` are extra arguments that can be
    passed in the *args* parameter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的根函数。它必须是形式为`f(x,a,b,c...)`的单变量函数，其中`a,b,c...`是可以在*args*参数中传递的额外参数。
- en: '**x0**float, sequence, or ndarray'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**float, sequence, or ndarray'
- en: An initial estimate of the root that should be somewhere near the actual root.
    If not scalar, then *func* must be vectorized and return a sequence or array of
    the same shape as its first argument.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 应该接近实际根的初始估计。如果不是标量，则*func*必须被矢量化，并且返回与其第一个参数相同形状的序列或数组。
- en: '**fprime**callable, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**fprime**callable, optional'
- en: The derivative of the function when available and convenient. If it is None
    (default), then the secant method is used.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数的导数可用且方便时。如果为None（默认），则使用割线法。
- en: '**args**tuple, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**tuple, optional'
- en: Extra arguments to be used in the function call.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用于函数调用的额外参数。
- en: '**tol**float, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**tol**float, optional'
- en: The allowable error of the root’s value. If *func* is complex-valued, a larger
    *tol* is recommended as both the real and imaginary parts of *x* contribute to
    `|x - x0|`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根值的允许误差。如果*func*是复数值的，建议使用较大的*tol*，因为*x*的实部和虚部都会影响到`|x - x0|`。
- en: '**maxiter**int, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxiter**int, optional'
- en: Maximum number of iterations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最大迭代次数。
- en: '**fprime2**callable, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**fprime2**callable, optional'
- en: The second order derivative of the function when available and convenient. If
    it is None (default), then the normal Newton-Raphson or the secant method is used.
    If it is not None, then Halley’s method is used.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数的二阶导数可用且方便时。如果为None（默认），则使用正常的牛顿-拉弗森或割线法。如果不为None，则使用哈雷法。
- en: '**x1**float, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**x1**float, optional'
- en: Another estimate of the root that should be somewhere near the actual root.
    Used if *fprime* is not provided.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个估计的根，应该接近实际根。如果未提供*fprime*，则使用。
- en: '**rtol**float, optional'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol**float, optional'
- en: Tolerance (relative) for termination.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 终止的容差（相对值）。
- en: '**full_output**bool, optional'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**full_output**bool, optional'
- en: If *full_output* is False (default), the root is returned. If True and *x0*
    is scalar, the return value is `(x, r)`, where `x` is the root and `r` is a [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") object. If True and *x0* is non-scalar, the return
    value is `(x, converged, zero_der)` (see Returns section for details).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*full_output*为False（默认），则返回根。如果为True并且*x0*为标量，则返回值为`(x, r)`，其中`x`是根，`r`是[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")对象。如果为True并且*x0*为非标量，则返回值为`(x, converged, zero_der)`（详见返回部分）。
- en: '**disp**bool, optional'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**布尔值，可选'
- en: 'If True, raise a RuntimeError if the algorithm didn’t converge, with the error
    message containing the number of iterations and current function value. Otherwise,
    the convergence status is recorded in a [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") return object. Ignored if *x0* is not scalar. *Note:
    this has little to do with displaying, however, the `disp` keyword cannot be renamed
    for backwards compatibility.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则在算法未收敛时引发RuntimeError，错误消息包含迭代次数和当前函数值。否则，收敛状态记录在[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")返回对象中。如果*x0*不是标量，则忽略。*注意：这与显示无关，但为了向后兼容性，不能重命名`disp`关键字。*
- en: 'Returns:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**root**float, sequence, or ndarray'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**根**浮点数、序列或ndarray'
- en: Estimated location where function is zero.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 估计的函数为零的位置。
- en: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults"), optional'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")，可选'
- en: Present if `full_output=True` and *x0* is scalar. Object containing information
    about the convergence. In particular, `r.converged` is True if the routine converged.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`full_output=True`且*x0*为标量。包含有关收敛性的信息的对象。特别地，如果例程收敛，则`r.converged`为True。
- en: '**converged**ndarray of bool, optional'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**converged**布尔值的ndarray，可选'
- en: Present if `full_output=True` and *x0* is non-scalar. For vector functions,
    indicates which elements converged successfully.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`full_output=True`并且*x0*为非标量。对于向量函数，指示哪些元素成功收敛。
- en: '**zero_der**ndarray of bool, optional'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**zero_der**布尔值的ndarray，可选'
- en: Present if `full_output=True` and *x0* is non-scalar. For vector functions,
    indicates which elements had a zero derivative.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`full_output=True`并且*x0*不是标量。对于向量函数，指示哪些元素具有零导数。
- en: See also
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`root_scalar`](scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar")'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`root_scalar`](scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar")'
- en: interface to root solvers for scalar functions
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 标量函数的根求解器接口
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`根`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
- en: interface to root solvers for multi-input, multi-output functions
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 多输入多输出函数的根求解器接口
- en: Notes
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The convergence rate of the Newton-Raphson method is quadratic, the Halley method
    is cubic, and the secant method is sub-quadratic. This means that if the function
    is well-behaved the actual error in the estimated root after the nth iteration
    is approximately the square (cube for Halley) of the error after the (n-1)th step.
    However, the stopping criterion used here is the step size and there is no guarantee
    that a root has been found. Consequently, the result should be verified. Safer
    algorithms are brentq, brenth, ridder, and bisect, but they all require that the
    root first be bracketed in an interval where the function changes sign. The brentq
    algorithm is recommended for general use in one dimensional problems when such
    an interval has been found.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿-拉弗森方法的收敛速度是二次的，海莉方法是三次的，割线法是次二次的。这意味着如果函数表现良好，第n次迭代后估计根的实际误差大约是第(n-1)步后的平方（海莉方法为立方）。然而，此处使用的停止准则是步长，并不能保证找到根。因此，应验证结果。更安全的算法是brentq、brenth、ridder和bisect，但它们都要求在函数变号的区间中首先找到根。在找到这样的区间后，建议使用brentq算法进行一维问题的通用解决。
- en: 'When [`newton`](#scipy.optimize.newton "scipy.optimize.newton") is used with
    arrays, it is best suited for the following types of problems:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用数组进行[`newton`](#scipy.optimize.newton "scipy.optimize.newton")时，最适合以下类型的问题：
- en: The initial guesses, *x0*, are all relatively the same distance from the roots.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始猜测值*x0*相对于根的距离几乎相同。
- en: Some or all of the extra arguments, *args*, are also arrays so that a class
    of similar problems can be solved together.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分或全部的额外参数，*args*，也是数组，以便可以一起解决一类相似的问题。
- en: The size of the initial guesses, *x0*, is larger than O(100) elements. Otherwise,
    a naive loop may perform as well or better than a vector.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始猜测值 *x0* 的大小大于 O(100) 元素。否则，一个简单的循环可能比向量表现得更好。
- en: Examples
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`fprime` is not provided, use the secant method:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只提供了 `fprime`，使用割线法：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Only `fprime` is provided, use the Newton-Raphson method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 只有提供了 `fprime`，使用牛顿-拉夫逊法：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Both `fprime2` and `fprime` are provided, use Halley’s method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了 `fprime2` 和 `fprime`，使用 Halley 方法：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we want to find roots for a set of related starting values and/or function
    parameters, we can provide both of those as an array of inputs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要为一组相关的起始值和/或函数参数找到根时，我们可以将这些作为输入数组提供：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The above is the equivalent of solving for each value in `(x, a)` separately
    in a for-loop, just faster:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作相当于在 for 循环中分别解决每个 `(x, a)` 值，只是速度更快：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Plot the results found for all values of `a`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制找到的所有 `a` 值的结果：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![../../_images/scipy-optimize-newton-1.png](../Images/b8ff7b8af48e693b633f817523785ff1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-optimize-newton-1.png](../Images/b8ff7b8af48e693b633f817523785ff1.png)'
