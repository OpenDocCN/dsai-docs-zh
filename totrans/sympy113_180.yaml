- en: Multi Degree of Freedom Holonomic System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.html](https://docs.sympy.org/latest/modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this example we demonstrate the use of the functionality provided in [`sympy.physics.mechanics`](../index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics") for deriving the equations of motion (EOM) of a holonomic
    system that includes both particles and rigid bodies with contributing forces
    and torques, some of which are specified forces and torques. The system is shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../../../../_images/multidof-holonomic.png](../Images/e81fdb656d78e825ae6281edae83e759.png)'
  prefs: []
  type: TYPE_IMG
- en: The system will be modeled using [`System`](../api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System"). First we need to create the [`dynamicsymbols()`](../../vector/api/functions.html#sympy.physics.vector.dynamicsymbols
    "sympy.physics.vector.dynamicsymbols") needed to describe the system as shown
    in the above diagram. In this case, the generalized coordinates \(q_1\) represent
    lateral distance of block from wall, \(q_2\) represents angle of the compound
    pendulum from vertical, \(q_3\) represents angle of the simple pendulum from the
    compound pendulum. The generalized speeds \(u_1\) represents lateral speed of
    block, \(u_2\) represents lateral speed of compound pendulum and \(u_3\) represents
    angular speed of C relative to B.
  prefs: []
  type: TYPE_NORMAL
- en: We also create some [`symbols()`](../../../core.html#sympy.core.symbol.symbols
    "sympy.core.symbol.symbols") to represent the length and mass of the pendulum,
    as well as gravity and others.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With all symbols defined, we can now define the bodies and initialize our instance
    of [`System`](../api/system.html#sympy.physics.mechanics.system.System "sympy.physics.mechanics.system.System").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we connect the bodies using joints to establish the kinematics. Note that
    we specify the intermediate frames for both particles, as particles do not have
    an associated frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we can apply loads (forces and torques) to the bodies, gravity acts on all
    bodies, a linear spring and damper act on block and wall, a rotational linear
    spring acts on C relative to B specified torque T acts on compound_pend and block,
    specified force F acts on block.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With the system setup, we can now form the equations of motion with [`KanesMethod`](../api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod") in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
