- en: YOLO-NAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/models/yolo-nas/`](https://docs.ultralytics.com/models/yolo-nas/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by Deci AI, YOLO-NAS is a groundbreaking object detection foundational
    model. It is the product of advanced Neural Architecture Search technology, meticulously
    designed to address the limitations of previous YOLO models. With significant
    improvements in quantization support and accuracy-latency trade-offs, YOLO-NAS
    represents a major leap in object detection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Model example image](img/58557f3691492a3315aa8e6955c39a23.png) **Overview
    of YOLO-NAS.** YOLO-NAS employs quantization-aware blocks and selective quantization
    for optimal performance. The model, when converted to its INT8 quantized version,
    experiences a minimal precision drop, a significant improvement over other models.
    These advancements culminate in a superior architecture with unprecedented object
    detection capabilities and outstanding performance.'
  prefs: []
  type: TYPE_NORMAL
- en: Key Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Quantization-Friendly Basic Block:** YOLO-NAS introduces a new basic block
    that is friendly to quantization, addressing one of the significant limitations
    of previous YOLO models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sophisticated Training and Quantization:** YOLO-NAS leverages advanced training
    schemes and post-training quantization to enhance performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AutoNAC Optimization and Pre-training:** YOLO-NAS utilizes AutoNAC optimization
    and is pre-trained on prominent datasets such as COCO, Objects365, and Roboflow
    100\. This pre-training makes it extremely suitable for downstream object detection
    tasks in production environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-trained Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Experience the power of next-generation object detection with the pre-trained
    YOLO-NAS models provided by Ultralytics. These models are designed to deliver
    top-notch performance in terms of both speed and accuracy. Choose from a variety
    of options tailored to your specific needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Model | mAP | Latency (ms) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS S | 47.5 | 3.21 |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS M | 51.55 | 5.85 |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS L | 52.22 | 7.87 |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS S INT-8 | 47.03 | 2.36 |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS M INT-8 | 51.0 | 3.78 |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS L INT-8 | 52.1 | 4.78 |'
  prefs: []
  type: TYPE_TB
- en: Each model variant is designed to offer a balance between Mean Average Precision
    (mAP) and latency, helping you optimize your object detection tasks for both performance
    and speed.
  prefs: []
  type: TYPE_NORMAL
- en: Usage Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultralytics has made YOLO-NAS models easy to integrate into your Python applications
    via our `ultralytics` python package. The package provides a user-friendly Python
    API to streamline the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following examples show how to use YOLO-NAS models with the `ultralytics`
    package for inference and validation:'
  prefs: []
  type: TYPE_NORMAL
- en: Inference and Validation Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example we validate YOLO-NAS-s on the COCO8 dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: This example provides simple inference and validation code for YOLO-NAS. For
    handling inference results see Predict mode. For using YOLO-NAS with additional
    modes see Val and Export. YOLO-NAS on the `ultralytics` package does not support
    training.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyTorch pretrained `*.pt` models files can be passed to the `NAS()` class to
    create a model instance in python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'CLI commands are available to directly run the models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Supported Tasks and Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We offer three variants of the YOLO-NAS models: Small (s), Medium (m), and
    Large (l). Each variant is designed to cater to different computational and performance
    needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**YOLO-NAS-s**: Optimized for environments where computational resources are
    limited but efficiency is key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YOLO-NAS-m**: Offers a balanced approach, suitable for general-purpose object
    detection with higher accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YOLO-NAS-l**: Tailored for scenarios requiring the highest accuracy, where
    computational resources are less of a constraint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is a detailed overview of each model, including links to their pre-trained
    weights, the tasks they support, and their compatibility with different operating
    modes.
  prefs: []
  type: TYPE_NORMAL
- en: '| Model Type | Pre-trained Weights | Tasks Supported | Inference | Validation
    | Training | Export |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS-s | [yolo_nas_s.pt](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_s.pt)
    | Object Detection | ✅ | ✅ | ❌ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS-m | [yolo_nas_m.pt](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_m.pt)
    | Object Detection | ✅ | ✅ | ❌ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: '| YOLO-NAS-l | [yolo_nas_l.pt](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_l.pt)
    | Object Detection | ✅ | ✅ | ❌ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: Citations and Acknowledgements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you employ YOLO-NAS in your research or development work, please cite SuperGradients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We express our gratitude to Deci AI's [SuperGradients](https://github.com/Deci-AI/super-gradients/)
    team for their efforts in creating and maintaining this valuable resource for
    the computer vision community. We believe YOLO-NAS, with its innovative architecture
    and superior object detection capabilities, will become a critical tool for developers
    and researchers alike.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is YOLO-NAS and how does it improve over previous YOLO models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: YOLO-NAS, developed by Deci AI, is a state-of-the-art object detection model
    leveraging advanced Neural Architecture Search (NAS) technology. It addresses
    the limitations of previous YOLO models by introducing features like quantization-friendly
    basic blocks and sophisticated training schemes. This results in significant improvements
    in performance, particularly in environments with limited computational resources.
    YOLO-NAS also supports quantization, maintaining high accuracy even when converted
    to its INT8 version, enhancing its suitability for production environments. For
    more details, see the Overview section.
  prefs: []
  type: TYPE_NORMAL
- en: How can I integrate YOLO-NAS models into my Python application?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily integrate YOLO-NAS models into your Python application using
    the `ultralytics` package. Here''s a simple example of how to load a pre-trained
    YOLO-NAS model and perform inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more information, refer to the Inference and Validation Examples.
  prefs: []
  type: TYPE_NORMAL
- en: What are the key features of YOLO-NAS and why should I consider using it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YOLO-NAS introduces several key features that make it a superior choice for
    object detection tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quantization-Friendly Basic Block:** Enhanced architecture that improves
    model performance with minimal precision drop post quantization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sophisticated Training and Quantization:** Employs advanced training schemes
    and post-training quantization techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AutoNAC Optimization and Pre-training:** Utilizes AutoNAC optimization and
    is pre-trained on prominent datasets like COCO, Objects365, and Roboflow 100.
    These features contribute to its high accuracy, efficient performance, and suitability
    for deployment in production environments. Learn more in the Key Features section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which tasks and modes are supported by YOLO-NAS models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: YOLO-NAS models support various object detection tasks and modes such as inference,
    validation, and export. They do not support training. The supported models include
    YOLO-NAS-s, YOLO-NAS-m, and YOLO-NAS-l, each tailored to different computational
    capacities and performance needs. For a detailed overview, refer to the Supported
    Tasks and Modes section.
  prefs: []
  type: TYPE_NORMAL
- en: Are there pre-trained YOLO-NAS models available and how do I access them?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yes, Ultralytics provides pre-trained YOLO-NAS models that you can access directly.
    These models are pre-trained on datasets like COCO, ensuring high performance
    in terms of both speed and accuracy. You can download these models using the links
    provided in the Pre-trained Models section. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[YOLO-NAS-s](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_s.pt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[YOLO-NAS-m](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_m.pt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[YOLO-NAS-l](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolo_nas_l.pt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
