- en: scipy.stats.permutation_test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Performs a permutation test of a given statistic on provided data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For independent sample statistics, the null hypothesis is that the data are
    randomly sampled from the same distribution. For paired sample statistics, two
    null hypothesis can be tested: that the data are paired at random or that the
    data are assigned to samples at random.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**iterable of array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Contains the samples, each of which is an array of observations. Dimensions
    of sample arrays must be compatible for broadcasting except along *axis*.
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Statistic for which the p-value of the hypothesis test is to be calculated.
    *statistic* must be a callable that accepts samples as separate arguments (e.g.
    `statistic(*data)`) and returns the resulting statistic. If *vectorized* is set
    `True`, *statistic* must also accept a keyword argument *axis* and be vectorized
    to compute the statistic along the provided *axis* of the sample arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '**permutation_type**{‘independent’, ‘samples’, ‘pairings’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of permutations to be performed, in accordance with the null hypothesis.
    The first two permutation types are for paired sample statistics, in which all
    samples contain the same number of observations and observations with corresponding
    indices along *axis* are considered to be paired; the third is for independent
    sample statistics.
  prefs: []
  type: TYPE_NORMAL
- en: '`''samples''` : observations are assigned to different samples but remain paired
    with the same observations from other samples. This permutation type is appropriate
    for paired sample hypothesis tests such as the Wilcoxon signed-rank test and the
    paired t-test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pairings''` : observations are paired with different observations, but they
    remain within the same sample. This permutation type is appropriate for association/correlation
    tests with statistics such as Spearman’s \(\rho\), Kendall’s \(\tau\), and Pearson’s
    \(r\).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''independent''` (default) : observations are assigned to different samples.
    Samples may contain different numbers of observations. This permutation type is
    appropriate for independent sample hypothesis tests such as the Mann-Whitney \(U\)
    test and the independent sample t-test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please see the Notes section below for more detailed descriptions of the permutation
    types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *vectorized* is set `False`, *statistic* will not be passed keyword argument
    *axis* and is expected to calculate the statistic only for 1D samples. If `True`,
    *statistic* will be passed keyword argument *axis* and is expected to calculate
    the statistic along *axis* when passed an ND sample array. If `None` (default),
    *vectorized* will be set `True` if `axis` is a parameter of *statistic*. Use of
    a vectorized statistic typically reduces computation time.
  prefs: []
  type: TYPE_NORMAL
- en: '**n_resamples**int or np.inf, default: 9999'
  prefs: []
  type: TYPE_NORMAL
- en: Number of random permutations (resamples) used to approximate the null distribution.
    If greater than or equal to the number of distinct permutations, the exact null
    distribution will be computed. Note that the number of distinct permutations grows
    very rapidly with the sizes of samples, so exact tests are feasible only for very
    small data sets.
  prefs: []
  type: TYPE_NORMAL
- en: '**batch**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of permutations to process in each call to *statistic*. Memory usage
    is O( *batch* * `n` ), where `n` is the total size of all samples, regardless
    of the value of *vectorized*. Default is `None`, in which case `batch` is the
    number of permutations.
  prefs: []
  type: TYPE_NORMAL
- en: '**alternative**{‘two-sided’, ‘less’, ‘greater’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The alternative hypothesis for which the p-value is calculated. For each alternative,
    the p-value is defined for exact tests as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`''greater''` : the percentage of the null distribution that is greater than
    or equal to the observed value of the test statistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''less''` : the percentage of the null distribution that is less than or equal
    to the observed value of the test statistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''two-sided''` (default) : twice the smaller of the p-values above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that p-values for randomized tests are calculated according to the conservative
    (over-estimated) approximation suggested in [[2]](#r5641c5b1ce56-2) and [[3]](#r5641c5b1ce56-3)
    rather than the unbiased estimator suggested in [[4]](#r5641c5b1ce56-4). That
    is, when calculating the proportion of the randomized null distribution that is
    as extreme as the observed value of the test statistic, the values in the numerator
    and denominator are both increased by one. An interpretation of this adjustment
    is that the observed value of the test statistic is always included as an element
    of the randomized null distribution. The convention used for two-sided p-values
    is not universal; the observed test statistic and null distribution are returned
    in case a different definition is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the (broadcasted) samples over which to calculate the statistic.
    If samples have a different number of dimensions, singleton dimensions are prepended
    to samples with fewer dimensions before *axis* is considered.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pseudorandom number generator state used to generate permutations.
  prefs: []
  type: TYPE_NORMAL
- en: If *random_state* is `None` (default), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *random_state* is an int, a new
    `RandomState` instance is used, seeded with *random_state*. If *random_state*
    is already a `Generator` or `RandomState` instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**PermutationTestResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object with attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: statisticfloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The observed test statistic of the data.
  prefs: []
  type: TYPE_NORMAL
- en: pvaluefloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The p-value for the given alternative.
  prefs: []
  type: TYPE_NORMAL
- en: null_distributionndarray
  prefs: []
  type: TYPE_NORMAL
- en: The values of the test statistic generated under the null hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The three types of permutation tests supported by this function are described
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unpaired statistics** (`permutation_type=''independent''`):'
  prefs: []
  type: TYPE_NORMAL
- en: The null hypothesis associated with this permutation type is that all observations
    are sampled from the same underlying distribution and that they have been assigned
    to one of the samples at random.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose `data` contains two samples; e.g. `a, b = data`. When `1 < n_resamples
    < binom(n, k)`, where
  prefs: []
  type: TYPE_NORMAL
- en: '`k` is the number of observations in `a`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n` is the total number of observations in `a` and `b`, and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binom(n, k)` is the binomial coefficient (`n` choose `k`),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the data are pooled (concatenated), randomly assigned to either the first or
    second sample, and the statistic is calculated. This process is performed repeatedly,
    *permutation* times, generating a distribution of the statistic under the null
    hypothesis. The statistic of the original data is compared to this distribution
    to determine the p-value.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `n_resamples >= binom(n, k)`, an exact test is performed: the data are
    *partitioned* between the samples in each distinct way exactly once, and the exact
    null distribution is formed. Note that for a given partitioning of the data between
    the samples, only one ordering/permutation of the data *within* each sample is
    considered. For statistics that do not depend on the order of the data within
    samples, this dramatically reduces computational cost without affecting the shape
    of the null distribution (because the frequency/count of each value is affected
    by the same factor).'
  prefs: []
  type: TYPE_NORMAL
- en: For `a = [a1, a2, a3, a4]` and `b = [b1, b2, b3]`, an example of this permutation
    type is `x = [b3, a1, a2, b2]` and `y = [a4, b1, a3]`. Because only one ordering/permutation
    of the data *within* each sample is considered in an exact test, a resampling
    like `x = [b3, a1, b2, a2]` and `y = [a4, a3, b1]` would *not* be considered distinct
    from the example above.
  prefs: []
  type: TYPE_NORMAL
- en: '`permutation_type=''independent''` does not support one-sample statistics,
    but it can be applied to statistics with more than two samples. In this case,
    if `n` is an array of the number of observations within each sample, the number
    of distinct partitions is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Paired statistics, permute pairings** (`permutation_type=''pairings''`):'
  prefs: []
  type: TYPE_NORMAL
- en: The null hypothesis associated with this permutation type is that observations
    within each sample are drawn from the same underlying distribution and that pairings
    with elements of other samples are assigned at random.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose `data` contains only one sample; e.g. `a, = data`, and we wish to consider
    all possible pairings of elements of `a` with elements of a second sample, `b`.
    Let `n` be the number of observations in `a`, which must also equal the number
    of observations in `b`.
  prefs: []
  type: TYPE_NORMAL
- en: When `1 < n_resamples < factorial(n)`, the elements of `a` are randomly permuted.
    The user-supplied statistic accepts one data argument, say `a_perm`, and calculates
    the statistic considering `a_perm` and `b`. This process is performed repeatedly,
    *permutation* times, generating a distribution of the statistic under the null
    hypothesis. The statistic of the original data is compared to this distribution
    to determine the p-value.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `n_resamples >= factorial(n)`, an exact test is performed: `a` is permuted
    in each distinct way exactly once. Therefore, the *statistic* is computed for
    each unique pairing of samples between `a` and `b` exactly once.'
  prefs: []
  type: TYPE_NORMAL
- en: For `a = [a1, a2, a3]` and `b = [b1, b2, b3]`, an example of this permutation
    type is `a_perm = [a3, a1, a2]` while `b` is left in its original order.
  prefs: []
  type: TYPE_NORMAL
- en: '`permutation_type=''pairings''` supports `data` containing any number of samples,
    each of which must contain the same number of observations. All samples provided
    in `data` are permuted *independently*. Therefore, if `m` is the number of samples
    and `n` is the number of observations within each sample, then the number of permutations
    in an exact test is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that if a two-sample statistic, for example, does not inherently depend
    on the order in which observations are provided - only on the *pairings* of observations
    - then only one of the two samples should be provided in `data`. This dramatically
    reduces computational cost without affecting the shape of the null distribution
    (because the frequency/count of each value is affected by the same factor).
  prefs: []
  type: TYPE_NORMAL
- en: '**Paired statistics, permute samples** (`permutation_type=''samples''`):'
  prefs: []
  type: TYPE_NORMAL
- en: The null hypothesis associated with this permutation type is that observations
    within each pair are drawn from the same underlying distribution and that the
    sample to which they are assigned is random.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose `data` contains two samples; e.g. `a, b = data`. Let `n` be the number
    of observations in `a`, which must also equal the number of observations in `b`.
  prefs: []
  type: TYPE_NORMAL
- en: When `1 < n_resamples < 2**n`, the elements of `a` are `b` are randomly swapped
    between samples (maintaining their pairings) and the statistic is calculated.
    This process is performed repeatedly, *permutation* times, generating a distribution
    of the statistic under the null hypothesis. The statistic of the original data
    is compared to this distribution to determine the p-value.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `n_resamples >= 2**n`, an exact test is performed: the observations are
    assigned to the two samples in each distinct way (while maintaining pairings)
    exactly once.'
  prefs: []
  type: TYPE_NORMAL
- en: For `a = [a1, a2, a3]` and `b = [b1, b2, b3]`, an example of this permutation
    type is `x = [b1, a2, b3]` and `y = [a1, b2, a3]`.
  prefs: []
  type: TYPE_NORMAL
- en: '`permutation_type=''samples''` supports `data` containing any number of samples,
    each of which must contain the same number of observations. If `data` contains
    more than one sample, paired observations within `data` are exchanged between
    samples *independently*. Therefore, if `m` is the number of samples and `n` is
    the number of observations within each sample, then the number of permutations
    in an exact test is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Several paired-sample statistical tests, such as the Wilcoxon signed rank test
    and paired-sample t-test, can be performed considering only the *difference* between
    two paired elements. Accordingly, if `data` contains only one sample, then the
    null distribution is formed by independently changing the *sign* of each observation.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The p-value is calculated by counting the elements of the null distribution
    that are as extreme or more extreme than the observed value of the statistic.
    Due to the use of finite precision arithmetic, some statistic functions return
    numerically distinct values when the theoretical values would be exactly equal.
    In some cases, this could lead to a large error in the calculated p-value. [`permutation_test`](#scipy.stats.permutation_test
    "scipy.stats.permutation_test") guards against this by considering elements in
    the null distribution that are “close” (within a factor of `1+1e-14`) to the observed
    value of the test statistic as equal to the observed value of the test statistic.
    However, the user is advised to inspect the null distribution to assess whether
    this method of comparison is appropriate, and if not, calculate the p-value manually.
    See example below.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Fisher. The Design of Experiments, 6th Ed (1951).
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'B. Phipson and G. K. Smyth. “Permutation P-values Should Never Be Zero: Calculating
    Exact P-values When Permutations Are Randomly Drawn.” Statistical Applications
    in Genetics and Molecular Biology 9.1 (2010).'
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'M. D. Ernst. “Permutation Methods: A Basis for Exact Inference”. Statistical
    Science (2004).'
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: B. Efron and R. J. Tibshirani. An Introduction to the Bootstrap (1993).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we wish to test whether two samples are drawn from the same distribution.
    Assume that the underlying distributions are unknown to us, and that before observing
    the data, we hypothesized that the mean of the first sample would be less than
    that of the second sample. We decide that we will use the difference between the
    sample means as a test statistic, and we will consider a p-value of 0.05 to be
    statistically significant.
  prefs: []
  type: TYPE_NORMAL
- en: 'For efficiency, we write the function defining the test statistic in a vectorized
    fashion: the samples `x` and `y` can be ND arrays, and the statistic will be calculated
    for each axis-slice along *axis*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After collecting our data, we calculate the observed value of the test statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Indeed, the test statistic is negative, suggesting that the true mean of the
    distribution underlying `x` is less than that of the distribution underlying `y`.
    To determine the probability of this occurring by chance if the two samples were
    drawn from the same distribution, we perform a permutation test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The probability of obtaining a test statistic less than or equal to the observed
    value under the null hypothesis is 0.4329%. This is less than our chosen threshold
    of 5%, so we consider this to be significant evidence against the null hypothesis
    in favor of the alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Because the size of the samples above was small, [`permutation_test`](#scipy.stats.permutation_test
    "scipy.stats.permutation_test") could perform an exact test. For larger samples,
    we resort to a randomized permutation test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The approximate probability of obtaining a test statistic less than or equal
    to the observed value under the null hypothesis is 0.0225%. This is again less
    than our chosen threshold of 5%, so again we have significant evidence to reject
    the null hypothesis in favor of the alternative.
  prefs: []
  type: TYPE_NORMAL
- en: For large samples and number of permutations, the result is comparable to that
    of the corresponding asymptotic test, the independent sample t-test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The permutation distribution of the test statistic is provided for further investigation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-permutation_test-1_00_00.png](../Images/620be306f2224245fb92e2c81f248fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inspection of the null distribution is essential if the statistic suffers from
    inaccuracy due to limited machine precision. Consider the following case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this case, some elements of the null distribution differ from the observed
    value of the correlation coefficient `r` due to numerical noise. We manually inspect
    the elements of the null distribution that are nearly the same as the observed
    value of the test statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If [`permutation_test`](#scipy.stats.permutation_test "scipy.stats.permutation_test")
    were to perform the comparison naively, the elements of the null distribution
    with value `0.7999999999999999` would not be considered as extreme or more extreme
    as the observed value of the statistic, so the calculated p-value would be too
    small.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Instead, [`permutation_test`](#scipy.stats.permutation_test "scipy.stats.permutation_test")
    treats elements of the null distribution that are within `max(1e-14, abs(r)*1e-14)`
    of the observed value of the statistic `r` to be equal to `r`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This method of comparison is expected to be accurate in most practical situations,
    but the user is advised to assess this by inspecting the elements of the null
    distribution that are close to the observed value of the statistic. Also, consider
    the use of statistics that can be calculated using exact arithmetic (e.g. integer
    statistics).
  prefs: []
  type: TYPE_NORMAL
