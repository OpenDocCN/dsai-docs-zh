["```py\nscipy.special.gdtr(a, b, x, out=None) = <ufunc 'gdtr'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import gdtr\n>>> import matplotlib.pyplot as plt\n>>> gdtr(1., 2., 5.)\n0.9595723180054873 \n```", "```py\n>>> xvalues = np.array([1., 2., 3., 4])\n>>> gdtr(1., 1., xvalues)\narray([0.63212056, 0.86466472, 0.95021293, 0.98168436]) \n```", "```py\n>>> a = np.array([[0.5], [1.5], [2.5]])\n>>> x = np.array([1., 2., 3., 4])\n>>> a.shape, x.shape\n((3, 1), (4,)) \n```", "```py\n>>> gdtr(a, 3., x)\narray([[0.01438768, 0.0803014 , 0.19115317, 0.32332358],\n [0.19115317, 0.57680992, 0.82642193, 0.9380312 ],\n [0.45618688, 0.87534798, 0.97974328, 0.9972306 ]]) \n```", "```py\n>>> a_parameters = [0.3, 1, 2, 6]\n>>> b_parameters = [2, 10, 15, 20]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(a_parameters, b_parameters, linestyles))\n>>> x = np.linspace(0, 30, 1000)\n>>> fig, ax = plt.subplots()\n>>> for parameter_set in parameters_list:\n...     a, b, style = parameter_set\n...     gdtr_vals = gdtr(a, b, x)\n...     ax.plot(x, gdtr_vals, label=f\"$a= {a},\\, b={b}$\", ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$x$\")\n>>> ax.set_title(\"Gamma distribution cumulative distribution function\")\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import gamma\n>>> a = 2.\n>>> b = 3\n>>> x = 1.\n>>> gdtr_result = gdtr(a, b, x)  # this will often be faster than below\n>>> gamma_dist_result = gamma(b, scale=1/a).cdf(x)\n>>> gdtr_result == gamma_dist_result  # test that results are equal\nTrue \n```"]