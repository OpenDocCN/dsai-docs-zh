- en: Logic functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.logic.html](https://numpy.org/doc/1.26/reference/routines.logic.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Truth value testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims, where])
    | Test whether all array elements along a given axis evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims, where])
    | Test whether any array element along a given axis evaluates to True. |'
  prefs: []
  type: TYPE_TB
- en: Array contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  prefs: []
  type: TYPE_TB
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[, out])
    | Test element-wise for negative infinity, return result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[, out])
    | Test element-wise for positive infinity, return result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: Array type testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | Returns a bool array, where True if input element is complex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | Check for a complex type or an array of complex numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | Check if the array is Fortran contiguous but *not* C contiguous. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) |
    Returns a bool array, where True if input element is real. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | Return True if x is a not complex type or an array of complex numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | Returns True if the type of *element* is a scalar type. |'
  prefs: []
  type: TYPE_TB
- en: Logical operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | Returns a boolean array where two arrays are element-wise equal within a tolerance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | True if two arrays have the same shape and elements, False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | Returns True if input arrays are shape consistent and all elements equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Truth value testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`all`](generated/numpy.all.html#numpy.all "numpy.all")(a[, axis, out, keepdims, where])
    | Test whether all array elements along a given axis evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](generated/numpy.any.html#numpy.any "numpy.any")(a[, axis, out, keepdims, where])
    | Test whether any array element along a given axis evaluates to True. |'
  prefs: []
  type: TYPE_TB
- en: Array contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  prefs: []
  type: TYPE_TB
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`isneginf`](generated/numpy.isneginf.html#numpy.isneginf "numpy.isneginf")(x[, out])
    | Test element-wise for negative infinity, return result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isposinf`](generated/numpy.isposinf.html#numpy.isposinf "numpy.isposinf")(x[, out])
    | Test element-wise for positive infinity, return result as bool array. |'
  prefs: []
  type: TYPE_TB
- en: Array type testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`iscomplex`](generated/numpy.iscomplex.html#numpy.iscomplex "numpy.iscomplex")(x)
    | Returns a bool array, where True if input element is complex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iscomplexobj`](generated/numpy.iscomplexobj.html#numpy.iscomplexobj "numpy.iscomplexobj")(x)
    | Check for a complex type or an array of complex numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isfortran`](generated/numpy.isfortran.html#numpy.isfortran "numpy.isfortran")(a)
    | Check if the array is Fortran contiguous but *not* C contiguous. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isreal`](generated/numpy.isreal.html#numpy.isreal "numpy.isreal")(x) |
    Returns a bool array, where True if input element is real. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isrealobj`](generated/numpy.isrealobj.html#numpy.isrealobj "numpy.isrealobj")(x)
    | Return True if x is a not complex type or an array of complex numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isscalar`](generated/numpy.isscalar.html#numpy.isscalar "numpy.isscalar")(element)
    | Returns True if the type of *element* is a scalar type. |'
  prefs: []
  type: TYPE_TB
- en: Logical operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`allclose`](generated/numpy.allclose.html#numpy.allclose "numpy.allclose")(a, b[, rtol, atol, equal_nan])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isclose`](generated/numpy.isclose.html#numpy.isclose "numpy.isclose")(a, b[, rtol, atol, equal_nan])
    | Returns a boolean array where two arrays are element-wise equal within a tolerance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_equal`](generated/numpy.array_equal.html#numpy.array_equal "numpy.array_equal")(a1, a2[, equal_nan])
    | True if two arrays have the same shape and elements, False otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`array_equiv`](generated/numpy.array_equiv.html#numpy.array_equiv "numpy.array_equiv")(a1, a2)
    | Returns True if input arrays are shape consistent and all elements equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  prefs: []
  type: TYPE_TB
