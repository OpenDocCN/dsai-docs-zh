- en: Working with missing data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理缺失数据
- en: 原文：[https://pandas.pydata.org/docs/user_guide/missing_data.html](https://pandas.pydata.org/docs/user_guide/missing_data.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/missing_data.html](https://pandas.pydata.org/docs/user_guide/missing_data.html)
- en: '## Values considered “missing”'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 被视为“缺失”的值'
- en: pandas uses different sentinel values to represent a missing (also referred
    to as NA) depending on the data type.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: pandas使用不同的标记值来表示缺失值（也称为NA），具体取决于数据类型。
- en: '`numpy.nan` for NumPy data types. The disadvantage of using NumPy data types
    is that the original data type will be coerced to `np.float64` or `object`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.nan`适用于NumPy数据类型。使用NumPy数据类型的缺点是原始数据类型将被强制转换为`np.float64`或`object`。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT") for NumPy
    `np.datetime64`, `np.timedelta64`, and [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype"). For typing applications, use `api.types.NaTType`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT")适用于NumPy的`np.datetime64`、`np.timedelta64`和[`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype")。对于类型应用程序，请使用`api.types.NaTType`。'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") for [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") (and other bit widths), `Float64Dtype`(and other bit widths),
    :class:`BooleanDtype` and [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). These types will maintain the original data type of the
    data. For typing applications, use `api.types.NAType`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")适用于[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")、[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")（和其他位宽）、`Float64Dtype`（和其他位宽）、:class:`BooleanDtype`和[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")。这些类型将保持数据的原始数据类型。对于类型应用程序，请使用`api.types.NAType`。'
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To detect these missing value, use the [`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna") or [`notna()`](../reference/api/pandas.notna.html#pandas.notna
    "pandas.notna") methods.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这些缺失值，请使用[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")或[`notna()`](../reference/api/pandas.notna.html#pandas.notna
    "pandas.notna")方法。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") or
    [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna") will
    also consider `None` a missing value.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")或[`notna()`](../reference/api/pandas.notna.html#pandas.notna
    "pandas.notna")也会将`None`视为缺失值。'
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Warning
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Equality compaisons between `np.nan`, [`NaT`](../reference/api/pandas.NaT.html#pandas.NaT
    "pandas.NaT"), and [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    do not act like `None`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.nan`、[`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT")和[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")之间的相等比较不像`None`那样起作用。'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Therefore, an equality comparison between a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with one of these missing values does not provide the same information
    as [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") or
    [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")与这些缺失值之一进行相等比较并不提供与[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")或[`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")相同的信息。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '## [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") semantics'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '## [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")语义'
- en: Warning
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'Experimental: the behaviour of `NA`` can still change without warning.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实验性：`NA`的行为仍可能在没有警告的情况下发生变化。
- en: Starting from pandas 1.0, an experimental [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") value (singleton) is available to represent scalar missing values.
    The goal of [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") is provide
    a “missing” indicator that can be used consistently across data types (instead
    of `np.nan`, `None` or `pd.NaT` depending on the data type).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从pandas 1.0开始，实验性的[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")值（单例）可用于表示标量缺失值。[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")的目标是提供一个可以在各种数据类型之间一致使用的“缺失”指示器（而不是根据数据类型而定的`np.nan`、`None`或`pd.NaT`）。
- en: 'For example, when having missing values in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with the nullable integer dtype, it will use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在具有可空整数dtype的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 中存在缺失值时，它将使用 [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Currently, pandas does not yet use those data types using [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") by default a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), so you need to specify the dtype explicitly. An easy way to
    convert to those dtypes is explained in the [conversion section](#missing-data-na-conversion).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，pandas尚未默认使用那些使用 [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    的数据类型，如 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 或 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，因此您需要明确指定dtype。在[转换部分](#missing-data-na-conversion)中解释了将其转换为这些dtype的简单方法。
- en: Propagation in arithmetic and comparison operations
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术和比较操作中的传播
- en: In general, missing values *propagate* in operations involving [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). When one of the operands is unknown, the outcome of the operation
    is also unknown.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在涉及 [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 的操作中，缺失值会*传播*。当其中一个操作数未知时，操作的结果也是未知的。
- en: 'For example, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    propagates in arithmetic operations, similarly to `np.nan`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在算术操作中，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 会传播，类似于
    `np.nan`：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are a few special cases when the result is known, even when one of the
    operands is `NA`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特殊情况，即使其中一个操作数是`NA`，结果也是已知的。
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In equality and comparison operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") also propagates. This deviates from the behaviour of `np.nan`, where
    comparisons with `np.nan` always return `False`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在相等性和比较操作中，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 也会传播。这与`np.nan`的行为不同，其中与`np.nan`的比较总是返回`False`。
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To check if a value is equal to [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), use [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个值是否等于 [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")，请使用
    [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An exception on this basic propagation rule are *reductions* (such as the mean
    or the minimum), where pandas defaults to skipping missing values. See the [calculation
    section](#missing-data-calculations) for more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种基本传播规则上的一个例外是*缩减*（例如均值或最小值），pandas默认跳过缺失值。更多信息请参见[计算部分](#missing-data-calculations)。
- en: Logical operations
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: For logical operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    follows the rules of the [three-valued logic](https://en.wikipedia.org/wiki/Three-valued_logic)
    (or *Kleene logic*, similarly to R, SQL and Julia). This logic means to only propagate
    missing values when it is logically required.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于逻辑操作，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 遵循 [三值逻辑](https://en.wikipedia.org/wiki/Three-valued_logic)（或*Kleene逻辑*，类似于R、SQL和Julia）。这种逻辑意味着只有在逻辑上需要时才传播缺失值。
- en: 'For example, for the logical “or” operation (`|`), if one of the operands is
    `True`, we already know the result will be `True`, regardless of the other value
    (so regardless the missing value would be `True` or `False`). In this case, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") does not propagate:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于逻辑“或”操作（`|`），如果操作数之一是`True`，我们已经知道结果将是`True`，无论另一个值是什么（因此无论缺失值是`True`还是`False`）。在这种情况下，[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") 不会传播：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the other hand, if one of the operands is `False`, the result depends on
    the value of the other operand. Therefore, in this case [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") propagates:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果操作数之一是`False`，结果取决于另一个操作数的值。因此，在这种情况下，[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") 会传播：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The behaviour of the logical “and” operation (`&`) can be derived using similar
    logic (where now [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    will not propagate if one of the operands is already `False`):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑“与”操作（`&`）的行为可以使用类似的逻辑推导（现在，如果操作数之一已经是`False`，那么 [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") 将不会传播）：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`NA` in a boolean context'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在布尔上下文中的`NA`
- en: Since the actual value of an NA is unknown, it is ambiguous to convert NA to
    a boolean value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NA 的实际值是未知的，将 NA 转换为布尔值是模棱两可的。
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This also means that [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    cannot be used in a context where it is evaluated to a boolean, such as `if condition:
    ...` where `condition` can potentially be [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). In such cases, [`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna") can be used to check for [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") or `condition` being [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") can be avoided, for example by filling missing values beforehand.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '这也意味着[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")不能在被评估为布尔值的上下文中使用，例如`if
    condition: ...`，其中`condition`可能是[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")。在这种情况下，可以使用[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")来检查[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")或避免`condition`为[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")，例如在填充缺失值之前。'
- en: A similar situation occurs when using [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects in `if` statements, see [Using if/truth statements
    with pandas](gotchas.html#gotchas-truth).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`if`语句中使用[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象时，会出现类似情况，请参阅[在pandas中使用if/truth语句](gotchas.html#gotchas-truth)。
- en: NumPy ufuncs
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy ufuncs
- en: '[`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") implements
    NumPy’s `__array_ufunc__` protocol. Most ufuncs work with `NA`, and generally
    return `NA`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")实现了NumPy的`__array_ufunc__`协议。大多数ufunc与`NA`一起工作，并通常返回`NA`：'
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Warning
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 警��
- en: Currently, ufuncs involving an ndarray and `NA` will return an object-dtype
    filled with NA values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，涉及ndarray和`NA`的ufunc将返回一个填充有NA值的对象dtype。
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The return type here may change to return a different array type in the future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的返回类型可能会在将来更改为返回不同的数组类型。
- en: See [DataFrame interoperability with NumPy functions](dsintro.html#dsintro-numpy-interop)
    for more on ufuncs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于ufunc的信息，请参阅[DataFrame与NumPy函数的互操作性](dsintro.html#dsintro-numpy-interop)。
- en: '#### Conversion'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 转换'
- en: If you have a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") using `np.nan`, [`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes") and [`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes") in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that can convert data to use the data types that use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") such as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") or [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). This is especially helpful after reading in data sets from
    IO methods where data types were inferred.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个使用`np.nan`的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，可以在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中使用[`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes")和[`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")将数据转换为使用[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")等数据类型的数据，例如[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")或[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")。这在从IO方法读取数据集并推断数据类型后特别有帮助。
- en: In this example, while the dtypes of all columns are changed, we show the results
    for the first 10 columns.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，虽然所有列的dtype都已更改，但我们仅展示前10列的结果。
- en: '[PRE19]  ## Inserting missing data'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]  ## 插入缺失数据'
- en: You can insert missing values by simply assigning to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). The missing value sentinel used will be chosen based on the
    dtype.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过简单地赋值给[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")来插入缺失值。所使用的缺失值标记将根据dtype选择。
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For `object` types, pandas will use the value given:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`object`类型，pandas将使用给定的值：
- en: '[PRE21]  ## Calculations with missing data'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]  ## 使用缺失数据进行计算'
- en: Missing values propagate through arithmetic operations between pandas objects.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失值在pandas对象之间的算术运算中传播。
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The descriptive statistics and computational methods discussed in the [data
    structure overview](basics.html#basics-stats) (and listed [here](../reference/series.html#api-series-stats)
    and [here](../reference/frame.html#api-dataframe-stats)) are all account for missing
    data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在[数据结构概述](basics.html#basics-stats)中讨论的描述性统计和计算方法（在此处列出[series](../reference/series.html#api-series-stats)和[frame](../reference/frame.html#api-dataframe-stats)）都考虑了缺失数据。
- en: When summing data, NA values or empty data will be treated as zero.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数据求和时，NA值或空数据将被视为零。
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When taking the product, NA values or empty data will be treated as 1.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行乘法运算时，NA值或空数据将被视为1。
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Cumulative methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") ignore NA values by default preserve them in the result.
    This behavior can be changed with `skipna`
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 累积方法如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")默认情况下忽略NA值，但在结果中保留它们。可以使用`skipna`更改此行为。
- en: Cumulative methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") ignore NA values by default, but preserve them in
    the resulting arrays. To override this behaviour and include NA values, use `skipna=False`.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 累积方法如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")默认情况下忽略NA值，但在结果数组中保留它们。要覆盖此行为并包含NA值，请使用`skipna=False`。
- en: '[PRE25]  ## Dropping missing data'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]  ## 删除缺失数据'
- en: '[`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") dropa rows or columns with missing data.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")删除具有缺失数据的行或列。'
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Filling missing data
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充缺失数据
- en: '### Filling by value'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '### 按值填充'
- en: '[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") replaces NA values with non-NA data.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")用非NA数据替换NA值。'
- en: Replace NA with a scalar value
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 用标量值替换NA
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Fill gaps forward or backward
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向前或向后填补间隙
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Limit the number of NA values filled
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 限制填充的NA值数量
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: NA values can be replaced with corresponding value from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where the index and column aligns between the original object
    and the filled object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: NA值可以用与[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对齐的索引和列之间的对应值替换。
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") can also be used to fill NA values.Same result as above.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")也可用于填充NA值。与上述结果相同。'
- en: '[PRE31]  ### Interpolation'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE31]  ### 插值'
- en: '[`DataFrame.interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") and [`Series.interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") fills NA values using various interpolation methods.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")和[`Series.interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate")使用各种插值方法填充NA值。'
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![../_images/series_before_interpolate.png](../Images/23fad97a74daa24425af2bb6acf7d5f3.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_before_interpolate.png](../Images/23fad97a74daa24425af2bb6acf7d5f3.png)'
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![../_images/series_interpolate.png](../Images/15b6cc8149ecf5621177af8cce0b801f.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_interpolate.png](../Images/15b6cc8149ecf5621177af8cce0b801f.png)'
- en: Interpolation relative to a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") in the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") is available by setting `method="time"`
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")在[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")上的插值可通过设置`method="time"`来实现。
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For a floating-point index, use `method=''values''`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于浮点索引，请使用`method='values'`：
- en: '[PRE35]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you have [scipy](https://scipy.org/) installed, you can pass the name of
    a 1-d interpolation routine to `method`. as specified in the scipy interpolation
    [documentation](https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation)
    and reference [guide](https://docs.scipy.org/doc/scipy/tutorial/interpolate.html).
    The appropriate interpolation method will depend on the data type.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装了[scipy](https://scipy.org/)，您可以将一个1-d插值例程的名称传递给`method`。如在scipy插值[文档](https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation)和参考[指南](https://docs.scipy.org/doc/scipy/tutorial/interpolate.html)中指定。适当的插值方法将取决于数据类型。
- en: Tip
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you are dealing with a time series that is growing at an increasing rate,
    use `method='barycentric'`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您处理的是以增长速度增长的时间序列，请使用`method='barycentric'`。
- en: If you have values approximating a cumulative distribution function, use `method='pchip'`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有接近累积分布函数的值，请使用`method='pchip'`。
- en: To fill missing values with goal of smooth plotting use `method='akima'`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 若要填充缺失值以实现平滑绘图，请使用`method='akima'`。
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'When interpolating via a polynomial or spline approximation, you must also
    specify the degree or order of the approximation:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过多项式或样条逼近进行插值时，您还必须指定逼近的次数或阶数：
- en: '[PRE37]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Comparing several methods.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 比较几种方法。
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![../_images/compare_interpolations.png](../Images/5d2740529ed00c79d12be34ea861ac51.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/compare_interpolations.png](../Images/5d2740529ed00c79d12be34ea861ac51.png)'
- en: Interpolating new observations from expanding data with [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex").
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex")从扩展数据中插值新观测。
- en: '[PRE39]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '#### Interpolation limits'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 插值限制'
- en: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") accepts a `limit` keyword argument to limit the
    number of consecutive `NaN` values filled since the last valid observation'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")接受一个`limit`关键字参数，以限制自上次有效观测以来填充的连续`NaN`值的数量。'
- en: '[PRE40]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: By default, `NaN` values are filled in a `forward` direction. Use `limit_direction`
    parameter to fill `backward` or from `both` directions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`NaN`值以`forward`方向填充。使用`limit_direction`参数向`backward`或从`both`方向填充。
- en: '[PRE41]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: By default, `NaN` values are filled whether they are surrounded by existing
    valid values or outside existing valid values. The `limit_area` parameter restricts
    filling to either inside or outside values.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`NaN`值会被填充，无论它们是否被现有有效值包围或在现有有效值之外。`limit_area`参数限制填充到内部或外部值。
- en: '[PRE42]  ### Replacing values'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE42]  ### 替换值'
- en: '[`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") can be used similar to [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") to replace or insert missing values.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace")和[`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")可以类似于[`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna")和[`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")用于替换或插入缺失值。'
- en: '[PRE43]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Replacing more than one value is possible by passing a list.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递列表可以替换多个值。
- en: '[PRE44]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Replacing using a mapping dict.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用映射字典进行替换。
- en: '[PRE45]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '#### Regular expression replacement'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 正则表达式替换'
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Python strings prefixed with the `r` character such as `r'hello world'` are
    [“raw” strings](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals).
    They have different semantics regarding backslashes than strings without this
    prefix. Backslashes in raw strings will be interpreted as an escaped backslash,
    e.g., `r'\' == '\\'`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Python 字符串以 `r` 字符开头，例如 `r'hello world'` 是[“原始”字符串](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals)。
    它们在反斜杠方面具有与没有此前缀的字符串不同的语义。 原始字符串中的反斜杠将被解释为转义的反斜杠，例如，`r'\' == '\\'`。
- en: Replace the ‘.’ with `NaN`
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用 `NaN` 替换 ‘.’
- en: '[PRE46]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Replace the ‘.’ with `NaN` with regular expression that removes surrounding
    whitespace
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 用删除周围空格的正则表达式替换 ‘.’ 为 `NaN`。
- en: '[PRE47]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Replace with a list of regexes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 替换为一组正则表达式。
- en: '[PRE48]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Replace with a regex in a mapping dict.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用映射字典中的正则表达式替换。
- en: '[PRE49]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Pass nested dictionaries of regular expressions that use the `regex` keyword.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 传递使用 `regex` 关键字的正则表达式的嵌套字典。
- en: '[PRE50]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Pass a list of regular expressions that will replace matches with a scalar.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个正则表达式列表，将匹配项替换为标量。
- en: '[PRE51]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: All of the regular expression examples can also be passed with the `to_replace`
    argument as the `regex` argument. In this case the `value` argument must be passed
    explicitly by name or `regex` must be a nested dictionary.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的正则表达式示例也可以作为 `to_replace` 参数传递给 `regex` 参数。 在这种情况下，`value` 参数必须通过名称显式传递，或者
    `regex` 必须是一个嵌套字典。
- en: '[PRE52]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A regular expression object from `re.compile` is a valid input as well.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `re.compile` 的正则表达式对象也是有效的输入。
- en: Values considered “missing”
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 被视为“缺失”的值
- en: pandas uses different sentinel values to represent a missing (also referred
    to as NA) depending on the data type.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 使用不同的标记值来表示缺失值（也称为 NA），具体取决于数据类型。
- en: '`numpy.nan` for NumPy data types. The disadvantage of using NumPy data types
    is that the original data type will be coerced to `np.float64` or `object`.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.nan` 适用于 NumPy 数据类型。 使用 NumPy 数据类型的缺点是原始数据类型将被强制转换为 `np.float64` 或 `object`。'
- en: '[PRE53]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT") for NumPy
    `np.datetime64`, `np.timedelta64`, and [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype"). For typing applications, use `api.types.NaTType`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT") 适用于 NumPy
    `np.datetime64`, `np.timedelta64`, 和 [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype")。 对于类型应用程序，请使用 `api.types.NaTType`。'
- en: '[PRE54]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") for [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") (and other bit widths), `Float64Dtype`(and other bit widths),
    :class:`BooleanDtype` and [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). These types will maintain the original data type of the
    data. For typing applications, use `api.types.NAType`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 适用于 [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")（和其他位宽度）, `Float64Dtype`（和其他位宽度）, :class:`BooleanDtype` 和
    [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype "pandas.ArrowDtype")。
    这些类型将保持数据的原始数据类型。 对于类型应用程序，请使用 `api.types.NAType`。'
- en: '[PRE55]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: To detect these missing value, use the [`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna") or [`notna()`](../reference/api/pandas.notna.html#pandas.notna
    "pandas.notna") methods.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测这些缺失值，使用 [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
    或 [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")
    方法。
- en: '[PRE56]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") or
    [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna") will
    also consider `None` a missing value.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") 或 [`notna()`](../reference/api/pandas.notna.html#pandas.notna
    "pandas.notna") 也会将 `None` 视为缺失值。'
- en: '[PRE57]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Warning
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Equality compaisons between `np.nan`, [`NaT`](../reference/api/pandas.NaT.html#pandas.NaT
    "pandas.NaT"), and [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    do not act like `None`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.nan`, [`NaT`](../reference/api/pandas.NaT.html#pandas.NaT "pandas.NaT"),
    和 [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 之间的相等比较不像 `None`。'
- en: '[PRE58]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Therefore, an equality comparison between a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with one of these missing values does not provide the same information
    as [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") or
    [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna").
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")与这些缺失值之间的相等比较不提供与[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")或[`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")相同的信息。
- en: '[PRE59]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '## [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") semantics'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '## [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") 语义'
- en: Warning
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'Experimental: the behaviour of `NA`` can still change without warning.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 实验性：`NA`的行为仍可能在没有警告的情况下更改。
- en: Starting from pandas 1.0, an experimental [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") value (singleton) is available to represent scalar missing values.
    The goal of [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") is provide
    a “missing” indicator that can be used consistently across data types (instead
    of `np.nan`, `None` or `pd.NaT` depending on the data type).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从 pandas 1.0 开始，提供了一个实验性的[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")值（单例）来表示标量缺失值。[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")的目标是提供一个可以在各种数据类型中一致使用的“缺失”指示符（而不是根据数据类型使用`np.nan`、`None`或`pd.NaT`）。
- en: 'For example, when having missing values in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with the nullable integer dtype, it will use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，在具有可空整数dtype的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")中存在缺失值时，它将使用[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA"):'
- en: '[PRE60]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Currently, pandas does not yet use those data types using [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") by default a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), so you need to specify the dtype explicitly. An easy way to
    convert to those dtypes is explained in the [conversion section](#missing-data-na-conversion).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，pandas 尚未默认使用[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")这些数据类型在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")中，因此您需要明确指定dtype。在[转换部分](#missing-data-na-conversion)中解释了将其转换为这些dtype的简单方法。
- en: Propagation in arithmetic and comparison operations
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术和比较操作中的传播
- en: In general, missing values *propagate* in operations involving [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). When one of the operands is unknown, the outcome of the operation
    is also unknown.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在涉及[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")的操作中，缺失值会*传播*。当其中一个操作数未知时，操作的结果也是未知的。
- en: 'For example, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    propagates in arithmetic operations, similarly to `np.nan`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")在算术操作中传播，类似于`np.nan`：
- en: '[PRE61]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: There are a few special cases when the result is known, even when one of the
    operands is `NA`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特殊情况，即使其中一个操作数是`NA`，结果也是已知的。
- en: '[PRE62]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In equality and comparison operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") also propagates. This deviates from the behaviour of `np.nan`, where
    comparisons with `np.nan` always return `False`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在相等和比较操作中，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")也会传播。这与`np.nan`的行为不同，其中与`np.nan`的比较总是返回`False`。
- en: '[PRE63]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: To check if a value is equal to [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), use [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个值是否等于[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")，请使用[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")
- en: '[PRE64]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An exception on this basic propagation rule are *reductions* (such as the mean
    or the minimum), where pandas defaults to skipping missing values. See the [calculation
    section](#missing-data-calculations) for more.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种基本传播规则上的一个例外是*缩减*（例如平均值或最小值），pandas默认跳过缺失值。更多信息请参见[计算部分](#missing-data-calculations)。
- en: Logical operations
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: For logical operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    follows the rules of the [three-valued logic](https://en.wikipedia.org/wiki/Three-valued_logic)
    (or *Kleene logic*, similarly to R, SQL and Julia). This logic means to only propagate
    missing values when it is logically required.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于逻辑操作，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")遵循[三值逻辑](https://en.wikipedia.org/wiki/Three-valued_logic)的规则（或*Kleene逻辑*，类似于R、SQL和Julia）。这种逻辑意味着只有在逻辑上需要时才传播缺失值。
- en: 'For example, for the logical “or” operation (`|`), if one of the operands is
    `True`, we already know the result will be `True`, regardless of the other value
    (so regardless the missing value would be `True` or `False`). In this case, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") does not propagate:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于逻辑“或”操作（`|`），如果其中一个操作数为`True`，我们已经知道结果将是`True`，无论另一个值是什么（所以无论缺失值是`True`还是`False`）。在这种情况下，[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")不会传播：
- en: '[PRE65]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'On the other hand, if one of the operands is `False`, the result depends on
    the value of the other operand. Therefore, in this case [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") propagates:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果其中一个操作数是`False`，结果取决于另一个操作数的值。因此，在这种情况下，[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")会传播：
- en: '[PRE66]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The behaviour of the logical “and” operation (`&`) can be derived using similar
    logic (where now [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    will not propagate if one of the operands is already `False`):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑“与”操作（`&`）的行为可以使用类似的逻辑推导（现在，如果其中一个操作数已经是`False`，那么[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")将不会传播）：
- en: '[PRE67]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '`NA` in a boolean context'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在布尔上下文中的`NA`
- en: Since the actual value of an NA is unknown, it is ambiguous to convert NA to
    a boolean value.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NA的实际值是未知的，将NA转换为布尔值是模棱两可的。
- en: '[PRE69]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This also means that [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    cannot be used in a context where it is evaluated to a boolean, such as `if condition:
    ...` where `condition` can potentially be [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). In such cases, [`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna") can be used to check for [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") or `condition` being [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") can be avoided, for example by filling missing values beforehand.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '这也意味着[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")不能在被评估为布尔值的上下文中使用，例如`if
    condition: ...`，其中`condition`可能是[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")。在这种情况下，可以使用[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")来检查[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")，或者可以在此之前填充缺失值来避免`condition`为[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")。'
- en: A similar situation occurs when using [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects in `if` statements, see [Using if/truth statements
    with pandas](gotchas.html#gotchas-truth).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`if`语句中使用[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")对象时，会出现类似情况，请参见[在pandas中使用if/truth语句](gotchas.html#gotchas-truth)。
- en: NumPy ufuncs
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy ufuncs
- en: '[`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") implements
    NumPy’s `__array_ufunc__` protocol. Most ufuncs work with `NA`, and generally
    return `NA`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")实现了NumPy的`__array_ufunc__`协议。大多数ufuncs与`NA`一起工作，并通常返回`NA`：'
- en: '[PRE70]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Warning
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Currently, ufuncs involving an ndarray and `NA` will return an object-dtype
    filled with NA values.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，涉及ndarray和`NA`的ufuncs将返回一个填充有NA值的对象dtype。
- en: '[PRE71]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The return type here may change to return a different array type in the future.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的返回类型可能会在将来更改为返回不同的数组类型。
- en: See [DataFrame interoperability with NumPy functions](dsintro.html#dsintro-numpy-interop)
    for more on ufuncs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于ufuncs的信息，请参见[DataFrame与NumPy函数的互操作性](dsintro.html#dsintro-numpy-interop)。
- en: '#### Conversion'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 转换'
- en: If you have a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") using `np.nan`, [`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes") and [`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes") in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that can convert data to use the data types that use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") such as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") or [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). This is especially helpful after reading in data sets from
    IO methods where data types were inferred.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个使用`np.nan`的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，可以在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中使用[`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes")和[`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")将数据转换为使用[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")的数据类型，如[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")或[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")。这在从IO方法中读取数据集并推断数据类型后特别有帮助。
- en: In this example, while the dtypes of all columns are changed, we show the results
    for the first 10 columns.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，虽然所有列的数据类型都被更改，但我们展示了前10列的结果。
- en: '[PRE72]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Propagation in arithmetic and comparison operations
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术和比较操作中的传播
- en: In general, missing values *propagate* in operations involving [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). When one of the operands is unknown, the outcome of the operation
    is also unknown.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在涉及[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")的操作中，缺失值会*传播*。当操作数中有一个未知时，操作的结果也是未知的。
- en: 'For example, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    propagates in arithmetic operations, similarly to `np.nan`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")在算术操作中会传播，类似于`np.nan`：
- en: '[PRE73]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: There are a few special cases when the result is known, even when one of the
    operands is `NA`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些特殊情况下，即使操作数之一是`NA`，结果也是已知的。
- en: '[PRE74]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: In equality and comparison operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") also propagates. This deviates from the behaviour of `np.nan`, where
    comparisons with `np.nan` always return `False`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在相等性和比较操作中，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")也会传播。这与`np.nan`的行为不同，其中与`np.nan`的比较总是返回`False`。
- en: '[PRE75]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: To check if a value is equal to [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), use [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个值是否等于[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")，使用[`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna")
- en: '[PRE76]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Note
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An exception on this basic propagation rule are *reductions* (such as the mean
    or the minimum), where pandas defaults to skipping missing values. See the [calculation
    section](#missing-data-calculations) for more.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基本传播规则上的一个例外是*缩减*（如平均值或最小值），pandas默认跳过缺失值。更多信息请参见[计算部分](#missing-data-calculations)。
- en: Logical operations
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑操作
- en: For logical operations, [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    follows the rules of the [three-valued logic](https://en.wikipedia.org/wiki/Three-valued_logic)
    (or *Kleene logic*, similarly to R, SQL and Julia). This logic means to only propagate
    missing values when it is logically required.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于逻辑操作，[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")遵循[三值逻辑](https://en.wikipedia.org/wiki/Three-valued_logic)（或*Kleene逻辑*，类似于R、SQL和Julia）。这种逻辑意味着只在逻辑上需要时传播缺失值。
- en: 'For example, for the logical “or” operation (`|`), if one of the operands is
    `True`, we already know the result will be `True`, regardless of the other value
    (so regardless the missing value would be `True` or `False`). In this case, [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") does not propagate:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在逻辑“或”操作（`|`）中，如果操作数之一是`True`，我们已经知道结果将是`True`，无论另一个值是什么（因此无论缺失值是`True`还是`False`）。在这种情况下，[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")不会传播：
- en: '[PRE77]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'On the other hand, if one of the operands is `False`, the result depends on
    the value of the other operand. Therefore, in this case [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") propagates:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The behaviour of the logical “and” operation (`&`) can be derived using similar
    logic (where now [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    will not propagate if one of the operands is already `False`):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`NA` in a boolean context'
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the actual value of an NA is unknown, it is ambiguous to convert NA to
    a boolean value.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'This also means that [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")
    cannot be used in a context where it is evaluated to a boolean, such as `if condition:
    ...` where `condition` can potentially be [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"). In such cases, [`isna()`](../reference/api/pandas.isna.html#pandas.isna
    "pandas.isna") can be used to check for [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") or `condition` being [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") can be avoided, for example by filling missing values beforehand.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: A similar situation occurs when using [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects in `if` statements, see [Using if/truth statements
    with pandas](gotchas.html#gotchas-truth).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: NumPy ufuncs
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`pandas.NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA") implements
    NumPy’s `__array_ufunc__` protocol. Most ufuncs work with `NA`, and generally
    return `NA`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Warning
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Currently, ufuncs involving an ndarray and `NA` will return an object-dtype
    filled with NA values.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The return type here may change to return a different array type in the future.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: See [DataFrame interoperability with NumPy functions](dsintro.html#dsintro-numpy-interop)
    for more on ufuncs.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '#### Conversion'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: If you have a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") using `np.nan`, [`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes") and [`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes") in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that can convert data to use the data types that use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") such as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") or [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). This is especially helpful after reading in data sets from
    IO methods where data types were inferred.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: In this example, while the dtypes of all columns are changed, we show the results
    for the first 10 columns.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，虽然所有列的数据类型都发生了变化，但我们展示了前 10 列的结果。
- en: '[PRE84]  #### Conversion'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE84]  #### 转换'
- en: If you have a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") using `np.nan`, [`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes") and [`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes") in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that can convert data to use the data types that use [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA") such as [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype") or [`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype"). This is especially helpful after reading in data sets from
    IO methods where data types were inferred.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个使用`np.nan`的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，则可以在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中使用[`Series.convert_dtypes()`](../reference/api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes")和[`DataFrame.convert_dtypes()`](../reference/api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")将数据转换为使用[`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA")等数据类型的数据类型，如[`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype")或[`ArrowDtype`](../reference/api/pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype")。这在从 IO 方法读取数据集并推断数据类型后特别有帮助。
- en: In this example, while the dtypes of all columns are changed, we show the results
    for the first 10 columns.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，虽然所有列的数据类型都发生了变化，但我们展示了前 10 列的结果。
- en: '[PRE85]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '## Inserting missing data'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '## 插入缺失数据'
- en: You can insert missing values by simply assigning to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). The missing value sentinel used will be chosen based on the
    dtype.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过简单地分配给[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")来插入缺失值。所使用的缺失值标记将根据数据类型选择。
- en: '[PRE86]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For `object` types, pandas will use the value given:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`object`类型，pandas 将使用给定的值：
- en: '[PRE87]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '## Calculations with missing data'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '## 带有缺失数据的计算'
- en: Missing values propagate through arithmetic operations between pandas objects.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失值会在 pandas 对象之间的算术运算中传播。
- en: '[PRE88]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The descriptive statistics and computational methods discussed in the [data
    structure overview](basics.html#basics-stats) (and listed [here](../reference/series.html#api-series-stats)
    and [here](../reference/frame.html#api-dataframe-stats)) are all account for missing
    data.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在[数据结构概述](basics.html#basics-stats)中讨论的描述性统计和计算方法（并在[这里](../reference/series.html#api-series-stats)和[这里](../reference/frame.html#api-dataframe-stats)列出）都考虑了缺失数据。
- en: When summing data, NA values or empty data will be treated as zero.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在求和数据时，NA 值或空数据将被视为零。
- en: '[PRE89]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: When taking the product, NA values or empty data will be treated as 1.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行乘积运算时，NA 值或空数据将被视为 1。
- en: '[PRE90]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Cumulative methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") ignore NA values by default preserve them in the result.
    This behavior can be changed with `skipna`
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 累积方法如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")默认情况下会忽略 NA 值，在结果中保留它们。这种行为可以通过`skipna`进行更改。
- en: Cumulative methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") ignore NA values by default, but preserve them in
    the resulting arrays. To override this behaviour and include NA values, use `skipna=False`.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 累积方法如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")默认情况下会忽略 NA 值，但在结果数组中保留它们。要覆盖此行为并包含 NA 值，请使用`skipna=False`。
- en: '[PRE91]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '## Dropping missing data'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '## 删除缺失数据'
- en: '[`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") dropa rows or columns with missing data.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Filling missing data
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Filling by value'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") replaces NA values with non-NA data.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Replace NA with a scalar value
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Fill gaps forward or backward
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Limit the number of NA values filled
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: NA values can be replaced with corresponding value from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where the index and column aligns between the original object
    and the filled object.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") can also be used to fill NA values.Same result as above.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]  ### Interpolation'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") and [`Series.interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") fills NA values using various interpolation methods.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '![../_images/series_before_interpolate.png](../Images/23fad97a74daa24425af2bb6acf7d5f3.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: '[PRE99]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '![../_images/series_interpolate.png](../Images/15b6cc8149ecf5621177af8cce0b801f.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
- en: Interpolation relative to a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") in the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") is available by setting `method="time"`
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'For a floating-point index, use `method=''values''`:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: If you have [scipy](https://scipy.org/) installed, you can pass the name of
    a 1-d interpolation routine to `method`. as specified in the scipy interpolation
    [documentation](https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation)
    and reference [guide](https://docs.scipy.org/doc/scipy/tutorial/interpolate.html).
    The appropriate interpolation method will depend on the data type.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: If you are dealing with a time series that is growing at an increasing rate,
    use `method='barycentric'`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: If you have values approximating a cumulative distribution function, use `method='pchip'`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: To fill missing values with goal of smooth plotting use `method='akima'`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'When interpolating via a polynomial or spline approximation, you must also
    specify the degree or order of the approximation:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Comparing several methods.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '![../_images/compare_interpolations.png](../Images/5d2740529ed00c79d12be34ea861ac51.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: Interpolating new observations from expanding data with [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex").
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '#### Interpolation limits'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") accepts a `limit` keyword argument to limit the
    number of consecutive `NaN` values filled since the last valid observation'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") 接受一个 `limit` 关键字参数，以限制自上次有效观察以来填充的连续 `NaN` 值的数量'
- en: '[PRE106]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: By default, `NaN` values are filled in a `forward` direction. Use `limit_direction`
    parameter to fill `backward` or from `both` directions.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`NaN` 值以 `forward` 方向填充。使用 `limit_direction` 参数以 `backward` 或从 `both`
    方向填充。
- en: '[PRE107]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: By default, `NaN` values are filled whether they are surrounded by existing
    valid values or outside existing valid values. The `limit_area` parameter restricts
    filling to either inside or outside values.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`NaN` 值会被填充，无论它们是否被现有有效值包围或在现有有效值之外。`limit_area` 参数限制填充到值的内部或外部。
- en: '[PRE108]  ### Replacing values'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE108]  ### 替换值'
- en: '[`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") can be used similar to [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") to replace or insert missing values.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") 和 [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") 可以类似于 [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") 和 [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") 用于替换或插入缺失值。'
- en: '[PRE109]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Replacing more than one value is possible by passing a list.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递列表可以替换多个值。
- en: '[PRE110]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Replacing using a mapping dict.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 使用映射字典进行替换。
- en: '[PRE111]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '#### Regular expression replacement'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 正则表达式替换'
- en: Note
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Python strings prefixed with the `r` character such as `r'hello world'` are
    [“raw” strings](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals).
    They have different semantics regarding backslashes than strings without this
    prefix. Backslashes in raw strings will be interpreted as an escaped backslash,
    e.g., `r'\' == '\\'`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以 `r` 字符为前缀的 Python 字符串，例如 `r'hello world'` 是[“原始”字符串](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals)。它们在反斜杠方面具有不同的语义，与没有此前缀的字符串不同。原始字符串中的反斜杠将被解释为转义的反斜杠，例如，`r'\'
    == '\\'`。
- en: Replace the ‘.’ with `NaN`
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 用 `NaN` 替换‘.’
- en: '[PRE112]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Replace the ‘.’ with `NaN` with regular expression that removes surrounding
    whitespace
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 用删除周围空格的正则表达式将‘.’ 替换为 `NaN`
- en: '[PRE113]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Replace with a list of regexes.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 用正则表达式列表替换。
- en: '[PRE114]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Replace with a regex in a mapping dict.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 用映射字典中的正则表达式替换。
- en: '[PRE115]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Pass nested dictionaries of regular expressions that use the `regex` keyword.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 传递使用 `regex` 关键字的正则表达式嵌套字典。
- en: '[PRE116]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Pass a list of regular expressions that will replace matches with a scalar.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一组正则表达式，将匹配项替换为标量。
- en: '[PRE117]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: All of the regular expression examples can also be passed with the `to_replace`
    argument as the `regex` argument. In this case the `value` argument must be passed
    explicitly by name or `regex` must be a nested dictionary.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 所有正则表达式示例也可以作为 `to_replace` 参数传递给 `regex` 参数。在这种情况下，必须通过名称显式传递 `value` 参数或 `regex`
    必须是一个嵌套字典。
- en: '[PRE118]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Note
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A regular expression object from `re.compile` is a valid input as well.  ###
    Filling by value'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以传递由 `re.compile` 创建的正则表达式对象作为有效输入。### 按值填充
- en: '[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") replaces NA values with non-NA data.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") 用非 NA 数据替换 NA 值。'
- en: Replace NA with a scalar value
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ���标量值替换 NA 值
- en: '[PRE119]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Fill gaps forward or backward
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 向前或向后填充间隙
- en: '[PRE120]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Limit the number of NA values filled
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 限制填充的 NA 值数量
- en: '[PRE121]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: NA values can be replaced with corresponding value from a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where the index and column aligns between the original object
    and the filled object.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    或 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    中对应值替换 NA 值，其中原始对象和填充对象之间的索引和列对齐。
- en: '[PRE122]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Note
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where") can also be used to fill NA values.Same result as above.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '### Interpolation'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") and [`Series.interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") fills NA values using various interpolation methods.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '![../_images/series_before_interpolate.png](../Images/23fad97a74daa24425af2bb6acf7d5f3.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
- en: '[PRE125]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '![../_images/series_interpolate.png](../Images/15b6cc8149ecf5621177af8cce0b801f.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
- en: Interpolation relative to a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") in the [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") is available by setting `method="time"`
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'For a floating-point index, use `method=''values''`:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: If you have [scipy](https://scipy.org/) installed, you can pass the name of
    a 1-d interpolation routine to `method`. as specified in the scipy interpolation
    [documentation](https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation)
    and reference [guide](https://docs.scipy.org/doc/scipy/tutorial/interpolate.html).
    The appropriate interpolation method will depend on the data type.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: If you are dealing with a time series that is growing at an increasing rate,
    use `method='barycentric'`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: If you have values approximating a cumulative distribution function, use `method='pchip'`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: To fill missing values with goal of smooth plotting use `method='akima'`.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'When interpolating via a polynomial or spline approximation, you must also
    specify the degree or order of the approximation:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Comparing several methods.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '![../_images/compare_interpolations.png](../Images/5d2740529ed00c79d12be34ea861ac51.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
- en: Interpolating new observations from expanding data with [`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex").
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '#### Interpolation limits'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") accepts a `limit` keyword argument to limit the
    number of consecutive `NaN` values filled since the last valid observation'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: By default, `NaN` values are filled in a `forward` direction. Use `limit_direction`
    parameter to fill `backward` or from `both` directions.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: By default, `NaN` values are filled whether they are surrounded by existing
    valid values or outside existing valid values. The `limit_area` parameter restricts
    filling to either inside or outside values.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]  #### Interpolation limits'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpolate()`](../reference/api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate") accepts a `limit` keyword argument to limit the
    number of consecutive `NaN` values filled since the last valid observation'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: By default, `NaN` values are filled in a `forward` direction. Use `limit_direction`
    parameter to fill `backward` or from `both` directions.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: By default, `NaN` values are filled whether they are surrounded by existing
    valid values or outside existing valid values. The `limit_area` parameter restricts
    filling to either inside or outside values.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '### Replacing values'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.replace()`](../reference/api/pandas.Series.replace.html#pandas.Series.replace
    "pandas.Series.replace") and [`DataFrame.replace()`](../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") can be used similar to [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") to replace or insert missing values.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Replacing more than one value is possible by passing a list.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Replacing using a mapping dict.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '#### Regular expression replacement'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Python strings prefixed with the `r` character such as `r'hello world'` are
    [“raw” strings](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals).
    They have different semantics regarding backslashes than strings without this
    prefix. Backslashes in raw strings will be interpreted as an escaped backslash,
    e.g., `r'\' == '\\'`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Replace the ‘.’ with `NaN`
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Replace the ‘.’ with `NaN` with regular expression that removes surrounding
    whitespace
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Replace with a list of regexes.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Replace with a regex in a mapping dict.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Pass nested dictionaries of regular expressions that use the `regex` keyword.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Pass a list of regular expressions that will replace matches with a scalar.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: All of the regular expression examples can also be passed with the `to_replace`
    argument as the `regex` argument. In this case the `value` argument must be passed
    explicitly by name or `regex` must be a nested dictionary.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Note
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'A regular expression object from `re.compile` is a valid input as well.  ####
    Regular expression replacement'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Python strings prefixed with the `r` character such as `r'hello world'` are
    [“raw” strings](https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals).
    They have different semantics regarding backslashes than strings without this
    prefix. Backslashes in raw strings will be interpreted as an escaped backslash,
    e.g., `r'\' == '\\'`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Replace the ‘.’ with `NaN`
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Replace the ‘.’ with `NaN` with regular expression that removes surrounding
    whitespace
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Replace with a list of regexes.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Replace with a regex in a mapping dict.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Pass nested dictionaries of regular expressions that use the `regex` keyword.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Pass a list of regular expressions that will replace matches with a scalar.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个正则表达式列表，将匹配项替换为一个标量。
- en: '[PRE153]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: All of the regular expression examples can also be passed with the `to_replace`
    argument as the `regex` argument. In this case the `value` argument must be passed
    explicitly by name or `regex` must be a nested dictionary.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的正则表达式示例也可以作为`to_replace`参数传递给`regex`参数。在这种情况下，`value`参数必须通过名称显式传递，或者`regex`必须是一个嵌套字典。
- en: '[PRE154]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Note
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A regular expression object from `re.compile` is a valid input as well.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 从`re.compile`创建的正则表达式对象也是有效的输入。
