- en: numpy.lib.stride_tricks.sliding_window_view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.stride_tricks.sliding_window_view.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.stride_tricks.sliding_window_view.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a sliding window view into the array with the given window shape.
  prefs: []
  type: TYPE_NORMAL
- en: Also known as rolling or moving window, the window slides across all dimensions
    of the array and extracts subsets of the array at all window positions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to create the sliding window view from.
  prefs: []
  type: TYPE_NORMAL
- en: '**window_shape**int or tuple of int'
  prefs: []
  type: TYPE_NORMAL
- en: Size of window over each axis that takes part in the sliding window. If *axis*
    is not present, must have same length as the number of input array dimensions.
    Single integers *i* are treated as if they were the tuple *(i,)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or tuple of int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the sliding window is applied. By default, the sliding
    window is applied to all axes and *window_shape[i]* will refer to axis *i* of
    *x*. If *axis* is given as a *tuple of int*, *window_shape[i]* will refer to the
    axis *axis[i]* of *x*. Single integers *i* are treated as if they were the tuple
    *(i,)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**subok**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, sub-classes will be passed-through, otherwise the returned array will
    be forced to be a base-class array (default).
  prefs: []
  type: TYPE_NORMAL
- en: '**writeable**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'When true, allow writing to the returned view. The default is false, as this
    should be used with caution: the returned view contains the same memory location
    multiple times, so writing to one location will cause others to change.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**view**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Sliding window view of the array. The sliding window dimensions are inserted
    at the end, and the original dimensions are trimmed as required by the size of
    the sliding window. That is, `view.shape = x_shape_trimmed + window_shape`, where
    `x_shape_trimmed` is `x.shape` with every entry reduced by one less than the corresponding
    window size.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lib.stride_tricks.as_strided`](numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided
    "numpy.lib.stride_tricks.as_strided")'
  prefs: []
  type: TYPE_NORMAL
- en: A lower-level and less safe routine for creating arbitrary views from custom
    shape and strides.
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_to`](numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")'
  prefs: []
  type: TYPE_NORMAL
- en: broadcast an array to a given shape.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'For many applications using a sliding window view can be convenient, but potentially
    very slow. Often specialized solutions exist, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.signal.fftconvolve`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "(in SciPy v1.11.2)")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering functions in [`scipy.ndimage`](https://docs.scipy.org/doc/scipy/reference/ndimage.html#module-scipy.ndimage
    "(in SciPy v1.11.2)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: moving window functions provided by [bottleneck](https://github.com/pydata/bottleneck).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a rough estimate, a sliding window approach with an input size of *N* and
    a window size of *W* will scale as *O(N*W)* where frequently a special algorithm
    can achieve *O(N)*. That means that the sliding window variant for a window size
    of 100 can be a 100 times slower than a more specialized version.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, for small window sizes, when no custom algorithm exists, or as
    a prototyping and developing tool, this function can be a good solution.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This also works in more dimensions, e.g.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The axis can be specified explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The same axis can be used several times. In that case, every use reduces the
    corresponding original dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Combining with stepped slicing (*::step*), this can be used to take sliding
    views which skip elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: or views which move by multiple elements
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A common application of [`sliding_window_view`](#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view") is the calculation of running statistics.
    The simplest example is the [moving average](https://en.wikipedia.org/wiki/Moving_average):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that a sliding window approach is often **not** optimal (see Notes).
  prefs: []
  type: TYPE_NORMAL
