["```py\n>>> from sympy import cos, nsolve, Symbol\n>>> x = Symbol('x')\n>>> nsolve(cos(x) - x, x, 1)\n0.739085133215161 \n```", "```py\n>>> from sympy import nsolve\n>>> from sympy.abc import x\n>>> nsolve(x**2 + 2, 1) # Real initial point returns no root\nTraceback (most recent call last):\n  ...\nValueError: Could not find root within given tolerance. (4.18466446988997098217 > 2.16840434497100886801e-19)\nTry another starting point or tweak arguments.\n>>> from sympy import I\n>>> nsolve(x**2 + 2, I) # Imaginary initial point returns a complex root\n1.4142135623731*I\n>>> nsolve(x**2 + 2, 1 + I) # Complex initial point returns a complex root\n1.4142135623731*I \n```", "```py\n>>> from sympy import nsolve\n>>> from sympy.abc import x\n>>> nsolve(x**2 - 1, -0.1)\n1.00000000000000 \n```", "```py\n>>> from sympy import nsolve\n>>> from sympy.abc import x\n>>> nsolve(x**2 - 1, (-10, 0), solver='bisect')\n-1.00000000000000 \n```", "```py\n>>> from sympy import Symbol, nsolve\n>>> x1 = Symbol('x1')\n>>> x2 = Symbol('x2')\n>>> f1 = 3 * x1**2 - 2 * x2**2 - 1\n>>> f2 = x1**2 - 2 * x1 + x2**2 + 2 * x2 - 8\n>>> print(nsolve((f1, f2), (x1, x2), (-1, 1)))\nMatrix([[-1.19287309935246], [1.27844411169911]]) \n```", "```py\n>>> from sympy import Symbol, nsolve\n>>> x1 = Symbol('x1')\n>>> x2 = Symbol('x2')\n>>> f1 = 3 * x1**2 - 2 * x2**2 - 1\n>>> f2 = x1**2 - 2 * x1 + x2**2 + 2 * x2 - 8\n>>> print(nsolve((f1, f2), (x1, x2), (-1, 1), prec=25))\nMatrix([[-1.192873099352460791205211], [1.278444111699106966687122]]) \n```", "```py\n>>> from sympy import simplify, cos, sin, lambdify\n>>> from sympy.abc import x, y\n>>> from scipy.optimize import root_scalar\n>>> expr = cos(x * (x + x**2)/(x*sin(y)**2 + x*cos(y)**2 + x))\n>>> simplify(expr) # 1\\. symbolically simplify expression\ncos(x*(x + 1)/2)\n>>> lam_f = lambdify(x, cos(x*(x + 1)/2)) # 2\\. lambdify\n>>> sol = root_scalar(lam_f, bracket=[0, 2]) # 3\\. numerically solve using SciPy\n>>> sol.root\n1.3416277185114782 \n```", "```py\n>>> from sympy import cos, nsolve, Symbol\n>>> x = Symbol('x')\n>>> f = cos(x) - x\n>>> x_value = nsolve(f, x, 1); x_value\n0.739085133215161\n>>> f.evalf(subs={x: x_value})\n-5.12757857962640e-17 \n```", "```py\n>>> f.subs(x, x_value)\n0 \n```", "```py\n>>> from sympy import cos, nsolve, Symbol\n>>> x = Symbol('x')\n>>> f = cos(x) - x\n>>> x_value = nsolve(f, x, 1); x_value\n0.739085133215161\n>>> y = Symbol('y')\n>>> z = Symbol('z')\n>>> g = x * y**2\n>>> values = {x: x_value, y: 1}\n>>> (x + y - z).evalf(subs=values)\n1.73908513321516 - z \n```", "```py\n>>> from sympy import nsolve, exp\n>>> from sympy.abc import x\n>>> nsolve(exp(x), x, 1, prec=20)\nTraceback (most recent call last):\n...\nValueError: Could not find root within given tolerance. (5.4877893607115270300540019e-18 > 1.6543612251060553497428174e-24)\nTry another starting point or tweak arguments. \n```"]