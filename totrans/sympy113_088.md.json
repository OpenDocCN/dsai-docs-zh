["```py\n>>> from sympy.simplify.fu import fu, L, TR9, TR10i, TR11\n>>> from sympy import factor, sin, cos, powsimp\n>>> from sympy.abc import x, y, z, a\n>>> from time import time \n```", "```py\n>>> eq = cos(x + y)/cos(x)\n>>> TR10i(eq.expand(trig=True))\n-sin(x)*sin(y)/cos(x) + cos(y) \n```", "```py\n>>> TR10i(_.normal())\ncos(x + y)/cos(x) \n```", "```py\n>>> TR11(sin(2)**a*cos(1)**(-a), 1)\n(2*sin(1)*cos(1))**a/cos(1)**a\n>>> powsimp(_)\n(2*sin(1))**a \n```", "```py\n>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(y))\na*cos(x - y) \n```", "```py\n>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(z))\na*sin(x)*sin(z) + a*cos(x)*cos(y) \n```", "```py\n>>> expr=((15*sin(2*x) + 19*sin(x + y) + 17*sin(x + z) + 19*cos(x - z) +\n... 25)*(20*sin(2*x) + 15*sin(x + y) + sin(y + z) + 14*cos(x - z) +\n... 14*cos(y - z))*(9*sin(2*y) + 12*sin(y + z) + 10*cos(x - y) + 2*cos(y -\n... z) + 18)).expand(trig=True).expand() \n```", "```py\n>>> L(expr)\n932 \n```", "```py\n>>> def clock(f, n=2):\n...    t=time(); f(); return round(time()-t, n)\n...\n>>> clock(lambda: factor(expr))  \n0.86\n>>> clock(lambda: TR10i(expr), 3)  \n0.016 \n```", "```py\n>>> clock(lambda: TR10i(expr), 2)  \n0.28 \n```", "```py\n>>> expr = (sin(x)**2*cos(y)*cos(z) + sin(x)*sin(y)*cos(x)*cos(z) +\n... sin(x)*sin(z)*cos(x)*cos(y) + sin(y)*sin(z)*cos(x)**2 + sin(y)*sin(z) +\n... cos(y)*cos(z))\n>>> args = expr.args \n```", "```py\n>>> fu(expr)\n3*cos(y - z)/2 - cos(2*x + y + z)/2 \n```", "```py\n>>> TR9(-cos(x)**2*cos(y + z) + 3*cos(y - z)/2 +\n...     cos(y + z)/2 + cos(-2*x + y + z)/4 - cos(2*x + y + z)/4)\nsin(2*x)*sin(y + z)/2 - cos(x)**2*cos(y + z) + 3*cos(y - z)/2 + cos(y + z)/2 \n```", "```py\n>>> a = sin(x)*sin(z)*cos(x)*cos(y) + sin(x)*sin(y)*cos(x)*cos(z)\n>>> TR10i(a)\nsin(x)*sin(y + z)*cos(x)\n>>> newa = _\n>>> TR10i(expr - a)  # this combines two more of the remaining terms\nsin(x)**2*cos(y)*cos(z) + sin(y)*sin(z)*cos(x)**2 + cos(y - z)\n>>> TR10i(_ + newa) == _ + newa  # but now there is no more simplification\nTrue \n```", "```py\nsympy.simplify.fu.TR0(rv)\n```", "```py\nsympy.simplify.fu.TR1(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR1, sec, csc\n>>> from sympy.abc import x\n>>> TR1(2*csc(x) + sec(x))\n1/cos(x) + 2/sin(x) \n```", "```py\nsympy.simplify.fu.TR2(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR2\n>>> from sympy.abc import x\n>>> from sympy import tan, cot, sin, cos\n>>> TR2(tan(x))\nsin(x)/cos(x)\n>>> TR2(cot(x))\ncos(x)/sin(x)\n>>> TR2(tan(tan(x) - sin(x)/cos(x)))\n0 \n```", "```py\nsympy.simplify.fu.TR2i(rv, half=False)\n```", "```py\n>>> from sympy.simplify.fu import TR2i\n>>> from sympy.abc import x, a\n>>> from sympy import sin, cos\n>>> TR2i(sin(x)/cos(x))\ntan(x) \n```", "```py\n>>> TR2i(sin(x)**2/(cos(x) + 1)**2, half=True)\ntan(x/2)**2 \n```", "```py\n>>> TR2i(sin(x)**a/(cos(x) + 1)**a)\nsin(x)**a/(cos(x) + 1)**a \n```", "```py\nsympy.simplify.fu.TR3(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR3\n>>> from sympy.abc import x, y\n>>> from sympy import pi\n>>> from sympy import cos\n>>> TR3(cos(y - x*(y - x)))\ncos(x*(x - y) + y)\n>>> cos(pi/2 + x)\n-sin(x)\n>>> cos(30*pi/2 + x)\n-cos(x) \n```", "```py\nsympy.simplify.fu.TR4(rv)\n```", "```py\n>>> from sympy import pi\n>>> from sympy import cos, sin, tan, cot\n>>> for s in (0, pi/6, pi/4, pi/3, pi/2):\n...    print('%s  %s  %s  %s' % (cos(s), sin(s), tan(s), cot(s)))\n...\n1 0 0 zoo\nsqrt(3)/2 1/2 sqrt(3)/3 sqrt(3)\nsqrt(2)/2 sqrt(2)/2 1 1\n1/2 sqrt(3)/2 sqrt(3) sqrt(3)/3\n0 1 zoo 0 \n```", "```py\nsympy.simplify.fu.TR5(rv, max=4, pow=False)\n```", "```py\n>>> from sympy.simplify.fu import TR5\n>>> from sympy.abc import x\n>>> from sympy import sin\n>>> TR5(sin(x)**2)\n1 - cos(x)**2\n>>> TR5(sin(x)**-2)  # unchanged\nsin(x)**(-2)\n>>> TR5(sin(x)**4)\n(1 - cos(x)**2)**2 \n```", "```py\nsympy.simplify.fu.TR6(rv, max=4, pow=False)\n```", "```py\n>>> from sympy.simplify.fu import TR6\n>>> from sympy.abc import x\n>>> from sympy import cos\n>>> TR6(cos(x)**2)\n1 - sin(x)**2\n>>> TR6(cos(x)**-2)  #unchanged\ncos(x)**(-2)\n>>> TR6(cos(x)**4)\n(1 - sin(x)**2)**2 \n```", "```py\nsympy.simplify.fu.TR7(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR7\n>>> from sympy.abc import x\n>>> from sympy import cos\n>>> TR7(cos(x)**2)\ncos(2*x)/2 + 1/2\n>>> TR7(cos(x)**2 + 1)\ncos(2*x)/2 + 3/2 \n```", "```py\nsympy.simplify.fu.TR8(rv, first=True)\n```", "```py\n>>> from sympy.simplify.fu import TR8\n>>> from sympy import cos, sin\n>>> TR8(cos(2)*cos(3))\ncos(5)/2 + cos(1)/2\n>>> TR8(cos(2)*sin(3))\nsin(5)/2 + sin(1)/2\n>>> TR8(sin(2)*sin(3))\n-cos(5)/2 + cos(1)/2 \n```", "```py\nsympy.simplify.fu.TR9(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR9\n>>> from sympy import cos, sin\n>>> TR9(cos(1) + cos(2))\n2*cos(1/2)*cos(3/2)\n>>> TR9(cos(1) + 2*sin(1) + 2*sin(2))\ncos(1) + 4*sin(3/2)*cos(1/2) \n```", "```py\n>>> TR9(cos(3) + cos(3)*cos(2))\ncos(3) + cos(2)*cos(3) \n```", "```py\nsympy.simplify.fu.TR10(rv, first=True)\n```", "```py\n>>> from sympy.simplify.fu import TR10\n>>> from sympy.abc import a, b, c\n>>> from sympy import cos, sin\n>>> TR10(cos(a + b))\n-sin(a)*sin(b) + cos(a)*cos(b)\n>>> TR10(sin(a + b))\nsin(a)*cos(b) + sin(b)*cos(a)\n>>> TR10(sin(a + b + c))\n(-sin(a)*sin(b) + cos(a)*cos(b))*sin(c) +     (sin(a)*cos(b) + sin(b)*cos(a))*cos(c) \n```", "```py\nsympy.simplify.fu.TR10i(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR10i\n>>> from sympy import cos, sin, sqrt\n>>> from sympy.abc import x \n```", "```py\n>>> TR10i(cos(1)*cos(3) + sin(1)*sin(3))\ncos(2)\n>>> TR10i(cos(1)*sin(3) + sin(1)*cos(3) + cos(3))\ncos(3) + sin(4)\n>>> TR10i(sqrt(2)*cos(x)*x + sqrt(6)*sin(x)*x)\n2*sqrt(2)*x*sin(x + pi/6) \n```", "```py\nsympy.simplify.fu.TR11(rv, base=None)\n```", "```py\n>>> from sympy.simplify.fu import TR11\n>>> from sympy import cos, sin, pi\n>>> from sympy.abc import x\n>>> TR11(sin(2*x))\n2*sin(x)*cos(x)\n>>> TR11(cos(2*x))\n-sin(x)**2 + cos(x)**2\n>>> TR11(sin(4*x))\n4*(-sin(x)**2 + cos(x)**2)*sin(x)*cos(x)\n>>> TR11(sin(4*x/3))\n4*(-sin(x/3)**2 + cos(x/3)**2)*sin(x/3)*cos(x/3) \n```", "```py\n>>> TR11(cos(2))\ncos(2)\n>>> TR11(cos(4), 2)\n-sin(2)**2 + cos(2)**2 \n```", "```py\n>>> cos(6*pi/7) + cos(3*pi/7)\n-cos(pi/7) + cos(3*pi/7) \n```", "```py\n>>> TR11(_, 3*pi/7)\n-sin(3*pi/7)**2 + cos(3*pi/7)**2 + cos(3*pi/7) \n```", "```py\nsympy.simplify.fu.TR12(rv, first=True)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import tan\n>>> from sympy.simplify.fu import TR12\n>>> TR12(tan(x + y))\n(tan(x) + tan(y))/(-tan(x)*tan(y) + 1) \n```", "```py\nsympy.simplify.fu.TR12i(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR12i\n>>> from sympy import tan\n>>> from sympy.abc import a, b, c\n>>> ta, tb, tc = [tan(i) for i in (a, b, c)]\n>>> TR12i((ta + tb)/(-ta*tb + 1))\ntan(a + b)\n>>> TR12i((ta + tb)/(ta*tb - 1))\n-tan(a + b)\n>>> TR12i((-ta - tb)/(ta*tb - 1))\ntan(a + b)\n>>> eq = (ta + tb)/(-ta*tb + 1)**2*(-3*ta - 3*tc)/(2*(ta*tc - 1))\n>>> TR12i(eq.expand())\n-3*tan(a + b)*tan(a + c)/(2*(tan(a) + tan(b) - 1)) \n```", "```py\nsympy.simplify.fu.TR13(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR13\n>>> from sympy import tan, cot\n>>> TR13(tan(3)*tan(2))\n-tan(2)/tan(5) - tan(3)/tan(5) + 1\n>>> TR13(cot(3)*cot(2))\ncot(2)*cot(5) + 1 + cot(3)*cot(5) \n```", "```py\nsympy.simplify.fu.TRmorrie(rv)\n```", "```py\n>>> from sympy.simplify.fu import TRmorrie, TR8, TR3\n>>> from sympy.abc import x\n>>> from sympy import Mul, cos, pi\n>>> TRmorrie(cos(x)*cos(2*x))\nsin(4*x)/(4*sin(x))\n>>> TRmorrie(7*Mul(*[cos(x) for x in range(10)]))\n7*sin(12)*sin(16)*cos(5)*cos(7)*cos(9)/(64*sin(1)*sin(3)) \n```", "```py\n>>> TRmorrie(cos(pi/7)*cos(2*pi/7)*cos(4*pi/7))\n-sin(3*pi/7)*cos(3*pi/7)/(4*sin(pi/7)) \n```", "```py\n>>> TR8(_)\n-1/8 \n```", "```py\n>>> eq = cos(pi/9)*cos(2*pi/9)*cos(3*pi/9)*cos(4*pi/9)\n>>> TRmorrie(eq)\n1/16 \n```", "```py\n>>> TR3(eq)\nsin(pi/18)*cos(pi/9)*cos(2*pi/9)/2\n>>> TRmorrie(_)\nsin(pi/18)*sin(4*pi/9)/(8*sin(pi/9))\n>>> TR8(_)\ncos(7*pi/18)/(16*sin(pi/9))\n>>> TR3(_)\n1/16 \n```", "```py\n>>> TR8(eq)\n1/16 \n```", "```py\nsympy.simplify.fu.TR14(rv, first=True)\n```", "```py\n>>> from sympy.simplify.fu import TR14\n>>> from sympy.abc import x, y\n>>> from sympy import cos, sin\n>>> TR14((cos(x) - 1)*(cos(x) + 1))\n-sin(x)**2\n>>> TR14((sin(x) - 1)*(sin(x) + 1))\n-cos(x)**2\n>>> p1 = (cos(x) + 1)*(cos(x) - 1)\n>>> p2 = (cos(y) - 1)*2*(cos(y) + 1)\n>>> p3 = (3*(cos(y) - 1))*(3*(cos(y) + 1))\n>>> TR14(p1*p2*p3*(x - 1))\n-18*(x - 1)*sin(x)**2*sin(y)**4 \n```", "```py\nsympy.simplify.fu.TR15(rv, max=4, pow=False)\n```", "```py\n>>> from sympy.simplify.fu import TR15\n>>> from sympy.abc import x\n>>> from sympy import sin\n>>> TR15(1 - 1/sin(x)**2)\n-cot(x)**2 \n```", "```py\nsympy.simplify.fu.TR16(rv, max=4, pow=False)\n```", "```py\n>>> from sympy.simplify.fu import TR16\n>>> from sympy.abc import x\n>>> from sympy import cos\n>>> TR16(1 - 1/cos(x)**2)\n-tan(x)**2 \n```", "```py\nsympy.simplify.fu.TR111(rv)\n```", "```py\n>>> from sympy.simplify.fu import TR111\n>>> from sympy.abc import x\n>>> from sympy import tan\n>>> TR111(1 - 1/tan(x)**2)\n1 - cot(x)**2 \n```", "```py\nsympy.simplify.fu.TR22(rv, max=4, pow=False)\n```", "```py\n>>> from sympy.simplify.fu import TR22\n>>> from sympy.abc import x\n>>> from sympy import tan, cot\n>>> TR22(1 + tan(x)**2)\nsec(x)**2\n>>> TR22(1 + cot(x)**2)\ncsc(x)**2 \n```", "```py\nsympy.simplify.fu.TRpower(rv)\n```", "```py\n>>> from sympy.simplify.fu import TRpower\n>>> from sympy.abc import x\n>>> from sympy import cos, sin\n>>> TRpower(sin(x)**6)\n-15*cos(2*x)/32 + 3*cos(4*x)/16 - cos(6*x)/32 + 5/16\n>>> TRpower(sin(x)**3*cos(2*x)**4)\n(3*sin(x)/4 - sin(3*x)/4)*(cos(4*x)/2 + cos(8*x)/8 + 3/8) \n```", "```py\nsympy.simplify.fu.fu(rv, measure=<function <lambda>>)\n```", "```py\n>>> from sympy.simplify.fu import fu\n>>> from sympy import cos, sin, tan, pi, S, sqrt\n>>> from sympy.abc import x, y, a, b \n```", "```py\n>>> fu(sin(50)**2 + cos(50)**2 + sin(pi/6))\n3/2\n>>> fu(sqrt(6)*cos(x) + sqrt(2)*sin(x))\n2*sqrt(2)*sin(x + pi/3) \n```", "```py\n>>> eq = sin(x)**4 - cos(y)**2 + sin(y)**2 + 2*cos(x)**2\n>>> fu(eq)\ncos(x)**4 - 2*cos(y)**2 + 2 \n```", "```py\n>>> fu(S.Half - cos(2*x)/2)\nsin(x)**2 \n```", "```py\n>>> fu(sin(a)*(cos(b) - sin(b)) + cos(a)*(sin(b) + cos(b)))\nsqrt(2)*sin(a + b + pi/4) \n```", "```py\n>>> fu(sqrt(3)*cos(x)/2 + sin(x)/2)\nsin(x + pi/3) \n```", "```py\n>>> fu(1-sin(2*x)**2/4-sin(y)**2-cos(x)**4)\n-cos(x)**2 + cos(y)**2 \n```", "```py\n>>> fu(cos(4*pi/9))\nsin(pi/18)\n>>> fu(cos(pi/9)*cos(2*pi/9)*cos(3*pi/9)*cos(4*pi/9))\n1/16 \n```", "```py\n>>> fu(tan(7*pi/18)+tan(5*pi/18)-sqrt(3)*tan(5*pi/18)*tan(7*pi/18))\n-sqrt(3) \n```", "```py\n>>> fu(sin(x)/cos(x))  # default objective function\ntan(x)\n>>> fu(sin(x)/cos(x), measure=lambda x: -x.count_ops()) # maximize op count\nsin(x)/cos(x) \n```"]