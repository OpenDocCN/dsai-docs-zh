- en: pandas.factorize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.factorize.html](https://pandas.pydata.org/docs/reference/api/pandas.factorize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Encode the object as an enumerated type or categorical variable.
  prefs: []
  type: TYPE_NORMAL
- en: This method is useful for obtaining a numeric representation of an array when
    all that matters is identifying distinct values. factorize is available as both
    a top-level function [`pandas.factorize()`](#pandas.factorize "pandas.factorize"),
    and as a method [`Series.factorize()`](pandas.Series.factorize.html#pandas.Series.factorize
    "pandas.Series.factorize") and [`Index.factorize()`](pandas.Index.factorize.html#pandas.Index.factorize
    "pandas.Index.factorize").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D sequence. Sequences that aren’t pandas objects are coerced to ndarrays
    before factorization.
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Sort uniques and shuffle codes to maintain the relationship.
  prefs: []
  type: TYPE_NORMAL
- en: '**use_na_sentinel**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the sentinel -1 will be used for NaN values. If False, NaN values will
    be encoded as non-negative integers and will not drop the NaN from the uniques
    of the values.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**size_hint**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Hint to the hashtable sizer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**codes**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An integer ndarray that’s an indexer into uniques. `uniques.take(codes)` will
    have the same values as values.
  prefs: []
  type: TYPE_NORMAL
- en: '**uniques**ndarray, Index, or Categorical'
  prefs: []
  type: TYPE_NORMAL
- en: The unique valid values. When values is Categorical, uniques is a Categorical.
    When values is some other pandas object, an Index is returned. Otherwise, a 1-D
    ndarray is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Even if there’s a missing value in values, uniques will *not* contain an entry
    for it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`cut`](pandas.cut.html#pandas.cut "pandas.cut")'
  prefs: []
  type: TYPE_NORMAL
- en: Discretize continuous-valued array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`unique`](pandas.unique.html#pandas.unique "pandas.unique")'
  prefs: []
  type: TYPE_NORMAL
- en: Find the unique value in an array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Reference [the user guide](../../user_guide/reshaping.html#reshaping-factorize)
    for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: These examples all show factorize as a top-level method like `pd.factorize(values)`.
    The results are identical for methods like [`Series.factorize()`](pandas.Series.factorize.html#pandas.Series.factorize
    "pandas.Series.factorize").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With `sort=True`, the uniques will be sorted, and codes will be shuffled so
    that the relationship is the maintained.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When `use_na_sentinel=True` (the default), missing values are indicated in the
    codes with the sentinel value `-1` and missing values are not included in uniques.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Thus far, we’ve only factorized lists (which are internally coerced to NumPy
    arrays). When factorizing pandas objects, the type of uniques will differ. For
    Categoricals, a Categorical is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `'b'` is in `uniques.categories`, despite not being present in `cat.values`.
  prefs: []
  type: TYPE_NORMAL
- en: For all other pandas objects, an Index of the appropriate type is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If NaN is in the values, and we want to include NaN in the uniques of the values,
    it can be achieved by setting `use_na_sentinel=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
