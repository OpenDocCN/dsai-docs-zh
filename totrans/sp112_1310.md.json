["```py\nscipy.stats.kendalltau(x, y, *, initial_lexsort=<object object>, nan_policy='propagate', method='auto', variant='b', alternative='two-sided')\n```", "```py\ntau_b = (P - Q) / sqrt((P + Q + T) * (P + Q + U))\n\ntau_c = 2 (P - Q) / (n**2 * (m - 1) / m) \n```", "```py\n>>> import numpy as np\n>>> # total collagen (mg/g dry weight of liver)\n>>> x = np.array([7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4])\n>>> # free proline (Î¼ mole/g dry weight of liver)\n>>> y = np.array([2.8, 2.9, 2.8, 2.6, 3.5, 4.6, 5.0]) \n```", "```py\n>>> from scipy import stats\n>>> res = stats.kendalltau(x, y)\n>>> res.statistic\n0.5499999999999999 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> n = len(x)  # len(x) == len(y)\n>>> var = (2*(2*n + 5))/(9*n*(n - 1))\n>>> dist = stats.norm(scale=np.sqrt(var))\n>>> z_vals = np.linspace(-1.25, 1.25, 100)\n>>> pdf = dist.pdf(z_vals)\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> def plot(ax):  # we'll reuse this\n...     ax.plot(z_vals, pdf)\n...     ax.set_title(\"Kendall Tau Test Null Distribution\")\n...     ax.set_xlabel(\"statistic\")\n...     ax.set_ylabel(\"probability density\")\n>>> plot(ax)\n>>> plt.show() \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> pvalue = dist.cdf(-res.statistic) + dist.sf(res.statistic)\n>>> annotation = (f'p-value={pvalue:.4f}\\n(shaded area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (0.65, 0.15), (0.8, 0.3), arrowprops=props)\n>>> i = z_vals >= res.statistic\n>>> ax.fill_between(z_vals[i], y1=0, y2=pdf[i], color='C0')\n>>> i = z_vals <= -res.statistic\n>>> ax.fill_between(z_vals[i], y1=0, y2=pdf[i], color='C0')\n>>> ax.set_xlim(-1.25, 1.25)\n>>> ax.set_ylim(0, 0.5)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.09108705741631495  # approximate p-value \n```", "```py\n>>> def statistic(x):  # explore all possible pairings by permuting `x`\n...     return stats.kendalltau(x, y).statistic  # ignore pvalue\n>>> ref = stats.permutation_test((x,), statistic,\n...                              permutation_type='pairings')\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> bins = np.linspace(-1.25, 1.25, 25)\n>>> ax.hist(ref.null_distribution, bins=bins, density=True)\n>>> ax.legend(['aymptotic approximation\\n(many observations)',\n...            'exact null distribution'])\n>>> plot(ax)\n>>> plt.show() \n```", "```py\n>>> ref.pvalue\n0.12222222222222222  # exact p-value \n```"]