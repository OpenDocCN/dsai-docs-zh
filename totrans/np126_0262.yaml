- en: Constants of the numpy.ma module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html](https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In addition to the [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    class, the [`numpy.ma`](maskedarray.generic.html#module-numpy.ma "numpy.ma") module
    defines several constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`masked`](#numpy.ma.masked "numpy.ma.masked") constant is a special case
    of [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray"), with a float
    datatype and a null shape. It is used to test whether a specific entry of a masked
    array is masked, or to mask one or several entries of a masked array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Value indicating that a masked array has no invalid entry. [`nomask`](#numpy.ma.nomask
    "numpy.ma.nomask") is used internally to speed up computations when the mask is
    not needed. It is represented internally as `np.False_`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: String used in lieu of missing data when a masked array is printed. By default,
    this string is `'--'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `set_display()` to change the default string. Example usage: `numpy.ma.masked_print_option.set_display(''X'')`
    replaces missing data with `''X''`.'
  prefs: []
  type: TYPE_NORMAL
- en: '# The [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") class'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A subclass of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    designed to manipulate numerical arrays with missing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'An instance of [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    can be thought as the combination of several elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`data`](#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data"), as a regular
    [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    of any shape or datatype (the data).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A boolean [`mask`](#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask") with
    the same shape as the data, where a `True` value indicates that the corresponding
    element of the data is invalid. The special value [`nomask`](#numpy.ma.nomask
    "numpy.ma.nomask") is also acceptable for arrays without named fields, and indicates
    that no data is invalid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`fill_value`](#numpy.ma.MaskedArray.fill_value "numpy.ma.MaskedArray.fill_value"),
    a value that may be used to replace the invalid entries in order to return a standard
    [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Attributes and properties of masked arrays'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array Attributes](arrays.ndarray.html#arrays-ndarray-attributes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns the underlying data, as a view of the masked array.
  prefs: []
  type: TYPE_NORMAL
- en: If the underlying data is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it is returned as such.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The type of the data can be accessed through the [`baseclass`](#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Current mask.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Get or set the mask of the array if it has no named fields. For structured
    arrays, returns a ndarray of booleans where entries are `True` if **all** the
    fields are masked, `False` otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The filling value of the masked array is a scalar. When setting, None will set
    to a default based on the data type.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Reset to default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Class of the underlying data (read-only).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Share status of the mask (read-only).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Specifies whether values can be unmasked through assignments.
  prefs: []
  type: TYPE_NORMAL
- en: By default, assigning definite values to masked array entries will unmask them.
    When [`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")
    is `True`, the mask will not change through assignments.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since *m* has a soft mask, assigning an element value unmasks that element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After hardening, the mask is not affected by assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") is a subclass
    of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), a
    masked array also inherits all the attributes and properties of a [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") instance.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | Base object if memory is from some other object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | An object to simplify the interaction of the
    array with the ctypes module. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | Data-type of the array''s elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | Information about the memory layout of the array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | Length of one array element in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | Total bytes consumed by the elements of the array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | Number of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | Tuple of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | Number of elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | Tuple of bytes to step in each dimension when
    traversing an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | The imaginary part of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | The real part of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | Return a flat iterator, or set a flattened version
    of self to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |  ## Attributes and properties
    of masked arrays'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array Attributes](arrays.ndarray.html#arrays-ndarray-attributes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Returns the underlying data, as a view of the masked array.
  prefs: []
  type: TYPE_NORMAL
- en: If the underlying data is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it is returned as such.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The type of the data can be accessed through the [`baseclass`](#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Current mask.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Get or set the mask of the array if it has no named fields. For structured
    arrays, returns a ndarray of booleans where entries are `True` if **all** the
    fields are masked, `False` otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The filling value of the masked array is a scalar. When setting, None will set
    to a default based on the data type.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Reset to default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Class of the underlying data (read-only).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Share status of the mask (read-only).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Specifies whether values can be unmasked through assignments.
  prefs: []
  type: TYPE_NORMAL
- en: By default, assigning definite values to masked array entries will unmask them.
    When [`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")
    is `True`, the mask will not change through assignments.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Since *m* has a soft mask, assigning an element value unmasks that element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After hardening, the mask is not affected by assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") is a subclass
    of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), a
    masked array also inherits all the attributes and properties of a [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") instance.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | Base object if memory is from some other object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | An object to simplify the interaction of the
    array with the ctypes module. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | Data-type of the array''s elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | Information about the memory layout of the array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | Length of one array element in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | Total bytes consumed by the elements of the array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | Number of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | Tuple of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | Number of elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | Tuple of bytes to step in each dimension when
    traversing an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | The imaginary part of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | The real part of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | Return a flat iterator, or set a flattened version
    of self to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |'
  prefs: []
  type: TYPE_TB
- en: '[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array methods](arrays.ndarray.html#array-ndarray-methods)'
  prefs: []
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | Convert to float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | Convert to int. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | Return a view of the
    MaskedArray data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | Copy of the array,
    cast to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | Swap the bytes of the array elements
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | A compatibility alias
    for *tobytes*, with exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For array methods that take an `axis` keyword, it defaults to None. If axis
    is None, then the array is treated as a 1-D array. Any other value for `axis`
    represents the dimension along which the operation should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | Returns array of
    indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | Return array of
    indices to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | Return *a* where condition
    is `True`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | Copy an element of an array to a standard
    Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | Set storage-indexed locations
    to corresponding values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | Repeat elements of an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
  prefs: []
  type: TYPE_TB
- en: Pickling and copy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | Dump a pickle of the array to the specified
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | Returns the pickle of the array as a string.
    |'
  prefs: []
  type: TYPE_TB
- en: Calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | Return the complex conjugate, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic and comparison operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic, in-place:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  prefs: []
  type: TYPE_TB
- en: Representation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | Literal string representation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | Return str(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | Return the addresses of the data and mask areas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | Return a boolean indicating whether the
    data is contiguous. |'
  prefs: []
  type: TYPE_TB
- en: Special methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For standard library functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | Return the internal state of the masked
    array, for pickling purposes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | Return a 3-tuple for pickling a MaskedArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | Restore the internal state of the
    masked array, for pickling purposes. |'
  prefs: []
  type: TYPE_TB
- en: 'Basic customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | Create a new masked
    array from scratch. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | Returns either a new reference
    to self if dtype is not given or a new array of provided data type if dtype is
    different from the current dtype of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | Special hook for ufuncs.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | Return len(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y] |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | Delete self[key]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | Return key in self. |'
  prefs: []
  type: TYPE_TB
- en: Specific methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling the mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: Handling the *fill_value*
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: Counting the missing elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | Convert to float. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | Convert to int. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | Return a view of the
    MaskedArray data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | Copy of the array,
    cast to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | Swap the bytes of the array elements
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | A compatibility alias
    for *tobytes*, with exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For array methods that take an `axis` keyword, it defaults to None. If axis
    is None, then the array is treated as a 1-D array. Any other value for `axis`
    represents the dimension along which the operation should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | Returns array of
    indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | Return array of
    indices to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | Return *a* where condition
    is `True`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | Copy an element of an array to a standard
    Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | Set storage-indexed locations
    to corresponding values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | Repeat elements of an array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
  prefs: []
  type: TYPE_TB
- en: Pickling and copy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | Dump a pickle of the array to the specified
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | Returns the pickle of the array as a string.
    |'
  prefs: []
  type: TYPE_TB
- en: Calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | Return the complex conjugate, element-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic and comparison operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic, in-place:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  prefs: []
  type: TYPE_TB
- en: '### Comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic, in-place:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  prefs: []
  type: TYPE_TB
- en: Representation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | Literal string representation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | Return str(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | Return the addresses of the data and mask areas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | Return a boolean indicating whether the
    data is contiguous. |'
  prefs: []
  type: TYPE_TB
- en: Special methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For standard library functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | Return the internal state of the masked
    array, for pickling purposes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | Return a 3-tuple for pickling a MaskedArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | Restore the internal state of the
    masked array, for pickling purposes. |'
  prefs: []
  type: TYPE_TB
- en: 'Basic customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | Create a new masked
    array from scratch. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | Returns either a new reference
    to self if dtype is not given or a new array of provided data type if dtype is
    different from the current dtype of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | Special hook for ufuncs.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | Return len(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y] |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | Delete self[key]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | Return key in self. |'
  prefs: []
  type: TYPE_TB
- en: Specific methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling the mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: Handling the *fill_value*
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: Counting the missing elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: Handling the mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: Handling the *fill_value*
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: Counting the missing elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
