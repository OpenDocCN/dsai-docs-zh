- en: Statistical functions (scipy.stats)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module contains a large number of probability distributions, summary and
    frequency statistics, correlation functions and statistical tests, masked statistics,
    kernel density estimation, quasi-Monte Carlo functionality, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Statistics is a very large area, and there are topics that are out of scope
    for SciPy and are covered by other packages. Some of the most important ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[statsmodels](https://www.statsmodels.org/stable/index.html): regression, linear
    models, time series analysis, extensions to topics also covered by `scipy.stats`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pandas](https://pandas.pydata.org/): tabular data, time series functionality,
    interfaces to other statistical languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyMC](https://docs.pymc.io/): Bayesian statistical modeling, probabilistic
    machine learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scikit-learn](https://scikit-learn.org/): classification, regression, model
    selection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Seaborn](https://seaborn.pydata.org/): statistical data visualization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[rpy2](https://rpy2.github.io/): Python to R bridge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probability distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each univariate distribution is an instance of a subclass of [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") ([`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") for discrete distributions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous")([momtype, a, b, xtol, ...]) | A generic continuous
    random variable class meant for subclassing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete")([a, b, name, badvalue, ...]) | A generic discrete random
    variable class meant for subclassing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rv_histogram`](generated/scipy.stats.rv_histogram.html#scipy.stats.rv_histogram
    "scipy.stats.rv_histogram")(histogram, *args[, density]) | Generates a distribution
    given by a histogram. |'
  prefs: []
  type: TYPE_TB
- en: Continuous distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`alpha`](generated/scipy.stats.alpha.html#scipy.stats.alpha "scipy.stats.alpha")
    | An alpha continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`anglit`](generated/scipy.stats.anglit.html#scipy.stats.anglit "scipy.stats.anglit")
    | An anglit continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsine`](generated/scipy.stats.arcsine.html#scipy.stats.arcsine "scipy.stats.arcsine")
    | An arcsine continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argus`](generated/scipy.stats.argus.html#scipy.stats.argus "scipy.stats.argus")
    | Argus distribution |'
  prefs: []
  type: TYPE_TB
- en: '| [`beta`](generated/scipy.stats.beta.html#scipy.stats.beta "scipy.stats.beta")
    | A beta continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betaprime`](generated/scipy.stats.betaprime.html#scipy.stats.betaprime
    "scipy.stats.betaprime") | A beta prime continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bradford`](generated/scipy.stats.bradford.html#scipy.stats.bradford "scipy.stats.bradford")
    | A Bradford continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`burr`](generated/scipy.stats.burr.html#scipy.stats.burr "scipy.stats.burr")
    | A Burr (Type III) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`burr12`](generated/scipy.stats.burr12.html#scipy.stats.burr12 "scipy.stats.burr12")
    | A Burr (Type XII) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cauchy`](generated/scipy.stats.cauchy.html#scipy.stats.cauchy "scipy.stats.cauchy")
    | A Cauchy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chi`](generated/scipy.stats.chi.html#scipy.stats.chi "scipy.stats.chi")
    | A chi continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chi2`](generated/scipy.stats.chi2.html#scipy.stats.chi2 "scipy.stats.chi2")
    | A chi-squared continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosine`](generated/scipy.stats.cosine.html#scipy.stats.cosine "scipy.stats.cosine")
    | A cosine continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`crystalball`](generated/scipy.stats.crystalball.html#scipy.stats.crystalball
    "scipy.stats.crystalball") | Crystalball distribution |'
  prefs: []
  type: TYPE_TB
- en: '| [`dgamma`](generated/scipy.stats.dgamma.html#scipy.stats.dgamma "scipy.stats.dgamma")
    | A double gamma continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dweibull`](generated/scipy.stats.dweibull.html#scipy.stats.dweibull "scipy.stats.dweibull")
    | A double Weibull continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erlang`](generated/scipy.stats.erlang.html#scipy.stats.erlang "scipy.stats.erlang")
    | An Erlang continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expon`](generated/scipy.stats.expon.html#scipy.stats.expon "scipy.stats.expon")
    | An exponential continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponnorm`](generated/scipy.stats.exponnorm.html#scipy.stats.exponnorm
    "scipy.stats.exponnorm") | An exponentially modified Normal continuous random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponweib`](generated/scipy.stats.exponweib.html#scipy.stats.exponweib
    "scipy.stats.exponweib") | An exponentiated Weibull continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponpow`](generated/scipy.stats.exponpow.html#scipy.stats.exponpow "scipy.stats.exponpow")
    | An exponential power continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/scipy.stats.f.html#scipy.stats.f "scipy.stats.f") | An F
    continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fatiguelife`](generated/scipy.stats.fatiguelife.html#scipy.stats.fatiguelife
    "scipy.stats.fatiguelife") | A fatigue-life (Birnbaum-Saunders) continuous random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fisk`](generated/scipy.stats.fisk.html#scipy.stats.fisk "scipy.stats.fisk")
    | A Fisk continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`foldcauchy`](generated/scipy.stats.foldcauchy.html#scipy.stats.foldcauchy
    "scipy.stats.foldcauchy") | A folded Cauchy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`foldnorm`](generated/scipy.stats.foldnorm.html#scipy.stats.foldnorm "scipy.stats.foldnorm")
    | A folded normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genlogistic`](generated/scipy.stats.genlogistic.html#scipy.stats.genlogistic
    "scipy.stats.genlogistic") | A generalized logistic continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gennorm`](generated/scipy.stats.gennorm.html#scipy.stats.gennorm "scipy.stats.gennorm")
    | A generalized normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genpareto`](generated/scipy.stats.genpareto.html#scipy.stats.genpareto
    "scipy.stats.genpareto") | A generalized Pareto continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genexpon`](generated/scipy.stats.genexpon.html#scipy.stats.genexpon "scipy.stats.genexpon")
    | A generalized exponential continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genextreme`](generated/scipy.stats.genextreme.html#scipy.stats.genextreme
    "scipy.stats.genextreme") | A generalized extreme value continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gausshyper`](generated/scipy.stats.gausshyper.html#scipy.stats.gausshyper
    "scipy.stats.gausshyper") | A Gauss hypergeometric continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/scipy.stats.gamma.html#scipy.stats.gamma "scipy.stats.gamma")
    | A gamma continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gengamma`](generated/scipy.stats.gengamma.html#scipy.stats.gengamma "scipy.stats.gengamma")
    | A generalized gamma continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genhalflogistic`](generated/scipy.stats.genhalflogistic.html#scipy.stats.genhalflogistic
    "scipy.stats.genhalflogistic") | A generalized half-logistic continuous random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genhyperbolic`](generated/scipy.stats.genhyperbolic.html#scipy.stats.genhyperbolic
    "scipy.stats.genhyperbolic") | A generalized hyperbolic continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`geninvgauss`](generated/scipy.stats.geninvgauss.html#scipy.stats.geninvgauss
    "scipy.stats.geninvgauss") | A Generalized Inverse Gaussian continuous random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gibrat`](generated/scipy.stats.gibrat.html#scipy.stats.gibrat "scipy.stats.gibrat")
    | A Gibrat continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gompertz`](generated/scipy.stats.gompertz.html#scipy.stats.gompertz "scipy.stats.gompertz")
    | A Gompertz (or truncated Gumbel) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel_r`](generated/scipy.stats.gumbel_r.html#scipy.stats.gumbel_r "scipy.stats.gumbel_r")
    | A right-skewed Gumbel continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel_l`](generated/scipy.stats.gumbel_l.html#scipy.stats.gumbel_l "scipy.stats.gumbel_l")
    | A left-skewed Gumbel continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`halfcauchy`](generated/scipy.stats.halfcauchy.html#scipy.stats.halfcauchy
    "scipy.stats.halfcauchy") | A Half-Cauchy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`halflogistic`](generated/scipy.stats.halflogistic.html#scipy.stats.halflogistic
    "scipy.stats.halflogistic") | A half-logistic continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`halfnorm`](generated/scipy.stats.halfnorm.html#scipy.stats.halfnorm "scipy.stats.halfnorm")
    | A half-normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`halfgennorm`](generated/scipy.stats.halfgennorm.html#scipy.stats.halfgennorm
    "scipy.stats.halfgennorm") | The upper half of a generalized normal continuous
    random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypsecant`](generated/scipy.stats.hypsecant.html#scipy.stats.hypsecant
    "scipy.stats.hypsecant") | A hyperbolic secant continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invgamma`](generated/scipy.stats.invgamma.html#scipy.stats.invgamma "scipy.stats.invgamma")
    | An inverted gamma continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invgauss`](generated/scipy.stats.invgauss.html#scipy.stats.invgauss "scipy.stats.invgauss")
    | An inverse Gaussian continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invweibull`](generated/scipy.stats.invweibull.html#scipy.stats.invweibull
    "scipy.stats.invweibull") | An inverted Weibull continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`jf_skew_t`](generated/scipy.stats.jf_skew_t.html#scipy.stats.jf_skew_t
    "scipy.stats.jf_skew_t") | Jones and Faddy skew-t distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`johnsonsb`](generated/scipy.stats.johnsonsb.html#scipy.stats.johnsonsb
    "scipy.stats.johnsonsb") | A Johnson SB continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`johnsonsu`](generated/scipy.stats.johnsonsu.html#scipy.stats.johnsonsu
    "scipy.stats.johnsonsu") | A Johnson SU continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kappa4`](generated/scipy.stats.kappa4.html#scipy.stats.kappa4 "scipy.stats.kappa4")
    | Kappa 4 parameter distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kappa3`](generated/scipy.stats.kappa3.html#scipy.stats.kappa3 "scipy.stats.kappa3")
    | Kappa 3 parameter distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ksone`](generated/scipy.stats.ksone.html#scipy.stats.ksone "scipy.stats.ksone")
    | Kolmogorov-Smirnov one-sided test statistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kstwo`](generated/scipy.stats.kstwo.html#scipy.stats.kstwo "scipy.stats.kstwo")
    | Kolmogorov-Smirnov two-sided test statistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kstwobign`](generated/scipy.stats.kstwobign.html#scipy.stats.kstwobign
    "scipy.stats.kstwobign") | Limiting distribution of scaled Kolmogorov-Smirnov
    two-sided test statistic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/scipy.stats.laplace.html#scipy.stats.laplace "scipy.stats.laplace")
    | A Laplace continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace_asymmetric`](generated/scipy.stats.laplace_asymmetric.html#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric") | An asymmetric Laplace continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`levy`](generated/scipy.stats.levy.html#scipy.stats.levy "scipy.stats.levy")
    | A Levy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`levy_l`](generated/scipy.stats.levy_l.html#scipy.stats.levy_l "scipy.stats.levy_l")
    | A left-skewed Levy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`levy_stable`](generated/scipy.stats.levy_stable.html#scipy.stats.levy_stable
    "scipy.stats.levy_stable") | A Levy-stable continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/scipy.stats.logistic.html#scipy.stats.logistic "scipy.stats.logistic")
    | A logistic (or Sech-squared) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loggamma`](generated/scipy.stats.loggamma.html#scipy.stats.loggamma "scipy.stats.loggamma")
    | A log gamma continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loglaplace`](generated/scipy.stats.loglaplace.html#scipy.stats.loglaplace
    "scipy.stats.loglaplace") | A log-Laplace continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognorm`](generated/scipy.stats.lognorm.html#scipy.stats.lognorm "scipy.stats.lognorm")
    | A lognormal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loguniform`](generated/scipy.stats.loguniform.html#scipy.stats.loguniform
    "scipy.stats.loguniform") | A loguniform or reciprocal continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`lomax`](generated/scipy.stats.lomax.html#scipy.stats.lomax "scipy.stats.lomax")
    | A Lomax (Pareto of the second kind) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maxwell`](generated/scipy.stats.maxwell.html#scipy.stats.maxwell "scipy.stats.maxwell")
    | A Maxwell continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mielke`](generated/scipy.stats.mielke.html#scipy.stats.mielke "scipy.stats.mielke")
    | A Mielke Beta-Kappa / Dagum continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`moyal`](generated/scipy.stats.moyal.html#scipy.stats.moyal "scipy.stats.moyal")
    | A Moyal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nakagami`](generated/scipy.stats.nakagami.html#scipy.stats.nakagami "scipy.stats.nakagami")
    | A Nakagami continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncx2`](generated/scipy.stats.ncx2.html#scipy.stats.ncx2 "scipy.stats.ncx2")
    | A non-central chi-squared continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncf`](generated/scipy.stats.ncf.html#scipy.stats.ncf "scipy.stats.ncf")
    | A non-central F distribution continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nct`](generated/scipy.stats.nct.html#scipy.stats.nct "scipy.stats.nct")
    | A non-central Student''s t continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`norm`](generated/scipy.stats.norm.html#scipy.stats.norm "scipy.stats.norm")
    | A normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`norminvgauss`](generated/scipy.stats.norminvgauss.html#scipy.stats.norminvgauss
    "scipy.stats.norminvgauss") | A Normal Inverse Gaussian continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/scipy.stats.pareto.html#scipy.stats.pareto "scipy.stats.pareto")
    | A Pareto continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pearson3`](generated/scipy.stats.pearson3.html#scipy.stats.pearson3 "scipy.stats.pearson3")
    | A pearson type III continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`powerlaw`](generated/scipy.stats.powerlaw.html#scipy.stats.powerlaw "scipy.stats.powerlaw")
    | A power-function continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`powerlognorm`](generated/scipy.stats.powerlognorm.html#scipy.stats.powerlognorm
    "scipy.stats.powerlognorm") | A power log-normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`powernorm`](generated/scipy.stats.powernorm.html#scipy.stats.powernorm
    "scipy.stats.powernorm") | A power normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rdist`](generated/scipy.stats.rdist.html#scipy.stats.rdist "scipy.stats.rdist")
    | An R-distributed (symmetric beta) continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/scipy.stats.rayleigh.html#scipy.stats.rayleigh "scipy.stats.rayleigh")
    | A Rayleigh continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rel_breitwigner`](generated/scipy.stats.rel_breitwigner.html#scipy.stats.rel_breitwigner
    "scipy.stats.rel_breitwigner") | A relativistic Breit-Wigner random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`rice`](generated/scipy.stats.rice.html#scipy.stats.rice "scipy.stats.rice")
    | A Rice continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`recipinvgauss`](generated/scipy.stats.recipinvgauss.html#scipy.stats.recipinvgauss
    "scipy.stats.recipinvgauss") | A reciprocal inverse Gaussian continuous random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`semicircular`](generated/scipy.stats.semicircular.html#scipy.stats.semicircular
    "scipy.stats.semicircular") | A semicircular continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`skewcauchy`](generated/scipy.stats.skewcauchy.html#scipy.stats.skewcauchy
    "scipy.stats.skewcauchy") | A skewed Cauchy random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`skewnorm`](generated/scipy.stats.skewnorm.html#scipy.stats.skewnorm "scipy.stats.skewnorm")
    | A skew-normal random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`studentized_range`](generated/scipy.stats.studentized_range.html#scipy.stats.studentized_range
    "scipy.stats.studentized_range") | A studentized range continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`t`](generated/scipy.stats.t.html#scipy.stats.t "scipy.stats.t") | A Student''s
    t continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trapezoid`](generated/scipy.stats.trapezoid.html#scipy.stats.trapezoid
    "scipy.stats.trapezoid") | A trapezoidal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triang`](generated/scipy.stats.triang.html#scipy.stats.triang "scipy.stats.triang")
    | A triangular continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`truncexpon`](generated/scipy.stats.truncexpon.html#scipy.stats.truncexpon
    "scipy.stats.truncexpon") | A truncated exponential continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`truncnorm`](generated/scipy.stats.truncnorm.html#scipy.stats.truncnorm
    "scipy.stats.truncnorm") | A truncated normal continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`truncpareto`](generated/scipy.stats.truncpareto.html#scipy.stats.truncpareto
    "scipy.stats.truncpareto") | An upper truncated Pareto continuous random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`truncweibull_min`](generated/scipy.stats.truncweibull_min.html#scipy.stats.truncweibull_min
    "scipy.stats.truncweibull_min") | A doubly truncated Weibull minimum continuous
    random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tukeylambda`](generated/scipy.stats.tukeylambda.html#scipy.stats.tukeylambda
    "scipy.stats.tukeylambda") | A Tukey-Lamdba continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/scipy.stats.uniform.html#scipy.stats.uniform "scipy.stats.uniform")
    | A uniform continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/scipy.stats.vonmises.html#scipy.stats.vonmises "scipy.stats.vonmises")
    | A Von Mises continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises_line`](generated/scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") | A Von Mises continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/scipy.stats.wald.html#scipy.stats.wald "scipy.stats.wald")
    | A Wald continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull_min`](generated/scipy.stats.weibull_min.html#scipy.stats.weibull_min
    "scipy.stats.weibull_min") | Weibull minimum continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull_max`](generated/scipy.stats.weibull_max.html#scipy.stats.weibull_max
    "scipy.stats.weibull_max") | Weibull maximum continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wrapcauchy`](generated/scipy.stats.wrapcauchy.html#scipy.stats.wrapcauchy
    "scipy.stats.wrapcauchy") | A wrapped Cauchy continuous random variable. |'
  prefs: []
  type: TYPE_TB
- en: The `fit` method of the univariate continuous distributions uses maximum likelihood
    estimation to fit the distribution to a data set. The `fit` method can accept
    regular data or *censored data*. Censored data is represented with instances of
    the [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData") class.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData")([uncensored, left, right, interval]) | Instances of
    this class represent censored data. |'
  prefs: []
  type: TYPE_TB
- en: Multivariate distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") | A multivariate normal random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`matrix_normal`](generated/scipy.stats.matrix_normal.html#scipy.stats.matrix_normal
    "scipy.stats.matrix_normal") | A matrix normal random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/scipy.stats.dirichlet.html#scipy.stats.dirichlet
    "scipy.stats.dirichlet") | A Dirichlet random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet_multinomial`](generated/scipy.stats.dirichlet_multinomial.html#scipy.stats.dirichlet_multinomial
    "scipy.stats.dirichlet_multinomial") | A Dirichlet multinomial random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`wishart`](generated/scipy.stats.wishart.html#scipy.stats.wishart "scipy.stats.wishart")
    | A Wishart random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invwishart`](generated/scipy.stats.invwishart.html#scipy.stats.invwishart
    "scipy.stats.invwishart") | An inverse Wishart random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/scipy.stats.multinomial.html#scipy.stats.multinomial
    "scipy.stats.multinomial") | A multinomial random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`special_ortho_group`](generated/scipy.stats.special_ortho_group.html#scipy.stats.special_ortho_group
    "scipy.stats.special_ortho_group") | A Special Orthogonal matrix (SO(N)) random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ortho_group`](generated/scipy.stats.ortho_group.html#scipy.stats.ortho_group
    "scipy.stats.ortho_group") | An Orthogonal matrix (O(N)) random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unitary_group`](generated/scipy.stats.unitary_group.html#scipy.stats.unitary_group
    "scipy.stats.unitary_group") | A matrix-valued U(N) random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_correlation`](generated/scipy.stats.random_correlation.html#scipy.stats.random_correlation
    "scipy.stats.random_correlation") | A random correlation matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_t`](generated/scipy.stats.multivariate_t.html#scipy.stats.multivariate_t
    "scipy.stats.multivariate_t") | A multivariate t-distributed random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_hypergeom`](generated/scipy.stats.multivariate_hypergeom.html#scipy.stats.multivariate_hypergeom
    "scipy.stats.multivariate_hypergeom") | A multivariate hypergeometric random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_table`](generated/scipy.stats.random_table.html#scipy.stats.random_table
    "scipy.stats.random_table") | Contingency tables from independent samples with
    fixed marginal sums. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform_direction`](generated/scipy.stats.uniform_direction.html#scipy.stats.uniform_direction
    "scipy.stats.uniform_direction") | A vector-valued uniform direction. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises_fisher`](generated/scipy.stats.vonmises_fisher.html#scipy.stats.vonmises_fisher
    "scipy.stats.vonmises_fisher") | A von Mises-Fisher variable. |'
  prefs: []
  type: TYPE_TB
- en: '[`scipy.stats.multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") methods accept instances of the following class
    to represent the covariance.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Covariance`](generated/scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance")() | Representation of a covariance matrix |'
  prefs: []
  type: TYPE_TB
- en: Discrete distributions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`bernoulli`](generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli
    "scipy.stats.bernoulli") | A Bernoulli discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betabinom`](generated/scipy.stats.betabinom.html#scipy.stats.betabinom
    "scipy.stats.betabinom") | A beta-binomial discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betanbinom`](generated/scipy.stats.betanbinom.html#scipy.stats.betanbinom
    "scipy.stats.betanbinom") | A beta-negative-binomial discrete random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`binom`](generated/scipy.stats.binom.html#scipy.stats.binom "scipy.stats.binom")
    | A binomial discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boltzmann`](generated/scipy.stats.boltzmann.html#scipy.stats.boltzmann
    "scipy.stats.boltzmann") | A Boltzmann (Truncated Discrete Exponential) random
    variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dlaplace`](generated/scipy.stats.dlaplace.html#scipy.stats.dlaplace "scipy.stats.dlaplace")
    | A Laplacian discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geom`](generated/scipy.stats.geom.html#scipy.stats.geom "scipy.stats.geom")
    | A geometric discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeom`](generated/scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom") | A hypergeometric discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logser`](generated/scipy.stats.logser.html#scipy.stats.logser "scipy.stats.logser")
    | A Logarithmic (Log-Series, Series) discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbinom`](generated/scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")
    | A negative binomial discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nchypergeom_fisher`](generated/scipy.stats.nchypergeom_fisher.html#scipy.stats.nchypergeom_fisher
    "scipy.stats.nchypergeom_fisher") | A Fisher''s noncentral hypergeometric discrete
    random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nchypergeom_wallenius`](generated/scipy.stats.nchypergeom_wallenius.html#scipy.stats.nchypergeom_wallenius
    "scipy.stats.nchypergeom_wallenius") | A Wallenius'' noncentral hypergeometric
    discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nhypergeom`](generated/scipy.stats.nhypergeom.html#scipy.stats.nhypergeom
    "scipy.stats.nhypergeom") | A negative hypergeometric discrete random variable.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`planck`](generated/scipy.stats.planck.html#scipy.stats.planck "scipy.stats.planck")
    | A Planck discrete exponential random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/scipy.stats.poisson.html#scipy.stats.poisson "scipy.stats.poisson")
    | A Poisson discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`randint`](generated/scipy.stats.randint.html#scipy.stats.randint "scipy.stats.randint")
    | A uniform discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`skellam`](generated/scipy.stats.skellam.html#scipy.stats.skellam "scipy.stats.skellam")
    | A Skellam discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yulesimon`](generated/scipy.stats.yulesimon.html#scipy.stats.yulesimon
    "scipy.stats.yulesimon") | A Yule-Simon discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/scipy.stats.zipf.html#scipy.stats.zipf "scipy.stats.zipf")
    | A Zipf (Zeta) discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipfian`](generated/scipy.stats.zipfian.html#scipy.stats.zipfian "scipy.stats.zipfian")
    | A Zipfian discrete random variable. |'
  prefs: []
  type: TYPE_TB
- en: An overview of statistical functions is given below. Many of these functions
    have a similar version in [`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats
    "scipy.stats.mstats") which work for masked arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Summary statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`describe`](generated/scipy.stats.describe.html#scipy.stats.describe "scipy.stats.describe")(a[, axis, ddof, bias, nan_policy])
    | Compute several descriptive statistics of the passed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gmean`](generated/scipy.stats.gmean.html#scipy.stats.gmean "scipy.stats.gmean")(a[, axis, dtype, weights, nan_policy, ...])
    | Compute the weighted geometric mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hmean`](generated/scipy.stats.hmean.html#scipy.stats.hmean "scipy.stats.hmean")(a[, axis, dtype, weights, nan_policy, ...])
    | Calculate the weighted harmonic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pmean`](generated/scipy.stats.pmean.html#scipy.stats.pmean "scipy.stats.pmean")(a, p, *[, axis, dtype, weights, ...])
    | Calculate the weighted power mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kurtosis`](generated/scipy.stats.kurtosis.html#scipy.stats.kurtosis "scipy.stats.kurtosis")(a[, axis, fisher, bias, ...])
    | Compute the kurtosis (Fisher or Pearson) of a dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mode`](generated/scipy.stats.mode.html#scipy.stats.mode "scipy.stats.mode")(a[, axis, nan_policy, keepdims])
    | Return an array of the modal (most common) value in the passed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`moment`](generated/scipy.stats.moment.html#scipy.stats.moment "scipy.stats.moment")(a[, moment, axis, nan_policy, ...])
    | Calculate the nth moment about the mean for a sample. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expectile`](generated/scipy.stats.expectile.html#scipy.stats.expectile
    "scipy.stats.expectile")(a[, alpha, weights]) | Compute the expectile at the specified
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`skew`](generated/scipy.stats.skew.html#scipy.stats.skew "scipy.stats.skew")(a[, axis, bias, nan_policy, keepdims])
    | Compute the sample skewness of a data set. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kstat`](generated/scipy.stats.kstat.html#scipy.stats.kstat "scipy.stats.kstat")(data[, n, axis, nan_policy, keepdims])
    | Return the nth k-statistic (1<=n<=4 so far). |'
  prefs: []
  type: TYPE_TB
- en: '| [`kstatvar`](generated/scipy.stats.kstatvar.html#scipy.stats.kstatvar "scipy.stats.kstatvar")(data[, n, axis, nan_policy, keepdims])
    | Return an unbiased estimator of the variance of the k-statistic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tmean`](generated/scipy.stats.tmean.html#scipy.stats.tmean "scipy.stats.tmean")(a[, limits, inclusive, axis, ...])
    | Compute the trimmed mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tvar`](generated/scipy.stats.tvar.html#scipy.stats.tvar "scipy.stats.tvar")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tmin`](generated/scipy.stats.tmin.html#scipy.stats.tmin "scipy.stats.tmin")(a[, lowerlimit, axis, inclusive, ...])
    | Compute the trimmed minimum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tmax`](generated/scipy.stats.tmax.html#scipy.stats.tmax "scipy.stats.tmax")(a[, upperlimit, axis, inclusive, ...])
    | Compute the trimmed maximum. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tstd`](generated/scipy.stats.tstd.html#scipy.stats.tstd "scipy.stats.tstd")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed sample standard deviation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tsem`](generated/scipy.stats.tsem.html#scipy.stats.tsem "scipy.stats.tsem")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed standard error of the mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`variation`](generated/scipy.stats.variation.html#scipy.stats.variation
    "scipy.stats.variation")(a[, axis, nan_policy, ddof, keepdims]) | Compute the
    coefficient of variation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_repeats`](generated/scipy.stats.find_repeats.html#scipy.stats.find_repeats
    "scipy.stats.find_repeats")(arr) | Find repeats and repeat counts. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rankdata`](generated/scipy.stats.rankdata.html#scipy.stats.rankdata "scipy.stats.rankdata")(a[, method, axis, nan_policy])
    | Assign ranks to data, dealing with ties appropriately. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tiecorrect`](generated/scipy.stats.tiecorrect.html#scipy.stats.tiecorrect
    "scipy.stats.tiecorrect")(rankvals) | Tie correction factor for Mann-Whitney U
    and Kruskal-Wallis H tests. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trim_mean`](generated/scipy.stats.trim_mean.html#scipy.stats.trim_mean
    "scipy.stats.trim_mean")(a, proportiontocut[, axis]) | Return mean of array after
    trimming distribution from both tails. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gstd`](generated/scipy.stats.gstd.html#scipy.stats.gstd "scipy.stats.gstd")(a[, axis, ddof])
    | Calculate the geometric standard deviation of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iqr`](generated/scipy.stats.iqr.html#scipy.stats.iqr "scipy.stats.iqr")(x[, axis, rng, scale, nan_policy, ...])
    | Compute the interquartile range of the data along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sem`](generated/scipy.stats.sem.html#scipy.stats.sem "scipy.stats.sem")(a[, axis, ddof, nan_policy, keepdims])
    | Compute standard error of the mean. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bayes_mvs`](generated/scipy.stats.bayes_mvs.html#scipy.stats.bayes_mvs
    "scipy.stats.bayes_mvs")(data[, alpha]) | Bayesian confidence intervals for the
    mean, var, and std. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mvsdist`](generated/scipy.stats.mvsdist.html#scipy.stats.mvsdist "scipy.stats.mvsdist")(data)
    | ''Frozen'' distributions for mean, variance, and standard deviation of data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`entropy`](generated/scipy.stats.entropy.html#scipy.stats.entropy "scipy.stats.entropy")(pk[, qk, base, axis, nan_policy, ...])
    | Calculate the Shannon entropy/relative entropy of given distribution(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`differential_entropy`](generated/scipy.stats.differential_entropy.html#scipy.stats.differential_entropy
    "scipy.stats.differential_entropy")(values, *[, ...]) | Given a sample of a distribution,
    estimate the differential entropy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`median_abs_deviation`](generated/scipy.stats.median_abs_deviation.html#scipy.stats.median_abs_deviation
    "scipy.stats.median_abs_deviation")(x[, axis, center, ...]) | Compute the median
    absolute deviation of the data along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: Frequency statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`cumfreq`](generated/scipy.stats.cumfreq.html#scipy.stats.cumfreq "scipy.stats.cumfreq")(a[, numbins, defaultreallimits, weights])
    | Return a cumulative frequency histogram, using the histogram function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`percentileofscore`](generated/scipy.stats.percentileofscore.html#scipy.stats.percentileofscore
    "scipy.stats.percentileofscore")(a, score[, kind, nan_policy]) | Compute the percentile
    rank of a score relative to a list of scores. |'
  prefs: []
  type: TYPE_TB
- en: '| [`scoreatpercentile`](generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile
    "scipy.stats.scoreatpercentile")(a, per[, limit, ...]) | Calculate the score at
    a given percentile of the input sequence. |'
  prefs: []
  type: TYPE_TB
- en: '| [`relfreq`](generated/scipy.stats.relfreq.html#scipy.stats.relfreq "scipy.stats.relfreq")(a[, numbins, defaultreallimits, weights])
    | Return a relative frequency histogram, using the histogram function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binned_statistic`](generated/scipy.stats.binned_statistic.html#scipy.stats.binned_statistic
    "scipy.stats.binned_statistic")(x, values[, statistic, ...]) | Compute a binned
    statistic for one or more sets of data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binned_statistic_2d`](generated/scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d
    "scipy.stats.binned_statistic_2d")(x, y, values[, ...]) | Compute a bidimensional
    binned statistic for one or more sets of data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binned_statistic_dd`](generated/scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd
    "scipy.stats.binned_statistic_dd")(sample, values[, ...]) | Compute a multidimensional
    binned statistic for a set of data. |'
  prefs: []
  type: TYPE_TB
- en: Hypothesis Tests and related functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SciPy has many functions for performing hypothesis tests that return a test
    statistic and a p-value, and several of them return confidence intervals and/or
    other related information.
  prefs: []
  type: TYPE_NORMAL
- en: The headings below are based on common uses of the functions within, but due
    to the wide variety of statistical procedures, any attempt at coarse-grained categorization
    will be imperfect. Also, note that tests within the same heading are not interchangeable
    in general (e.g. many have different distributional assumptions).
  prefs: []
  type: TYPE_NORMAL
- en: One Sample Tests / Paired Sample Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One sample tests are typically used to assess whether a single sample was drawn
    from a specified distribution or a distribution with specified properties (e.g.
    zero mean).
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ttest_1samp`](generated/scipy.stats.ttest_1samp.html#scipy.stats.ttest_1samp
    "scipy.stats.ttest_1samp")(a, popmean[, axis, nan_policy, ...]) | Calculate the
    T-test for the mean of ONE group of scores. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomtest`](generated/scipy.stats.binomtest.html#scipy.stats.binomtest
    "scipy.stats.binomtest")(k, n[, p, alternative]) | Perform a test that the probability
    of success is p. |'
  prefs: []
  type: TYPE_TB
- en: '| [`quantile_test`](generated/scipy.stats.quantile_test.html#scipy.stats.quantile_test
    "scipy.stats.quantile_test")(x, *[, q, p, alternative]) | Perform a quantile test
    and compute a confidence interval of the quantile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`skewtest`](generated/scipy.stats.skewtest.html#scipy.stats.skewtest "scipy.stats.skewtest")(a[, axis, nan_policy, alternative])
    | Test whether the skew is different from the normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kurtosistest`](generated/scipy.stats.kurtosistest.html#scipy.stats.kurtosistest
    "scipy.stats.kurtosistest")(a[, axis, nan_policy, alternative]) | Test whether
    a dataset has normal kurtosis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normaltest`](generated/scipy.stats.normaltest.html#scipy.stats.normaltest
    "scipy.stats.normaltest")(a[, axis, nan_policy]) | Test whether a sample differs
    from a normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`jarque_bera`](generated/scipy.stats.jarque_bera.html#scipy.stats.jarque_bera
    "scipy.stats.jarque_bera")(x, *[, axis, nan_policy, keepdims]) | Perform the Jarque-Bera
    goodness of fit test on sample data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shapiro`](generated/scipy.stats.shapiro.html#scipy.stats.shapiro "scipy.stats.shapiro")(x)
    | Perform the Shapiro-Wilk test for normality. |'
  prefs: []
  type: TYPE_TB
- en: '| [`anderson`](generated/scipy.stats.anderson.html#scipy.stats.anderson "scipy.stats.anderson")(x[, dist])
    | Anderson-Darling test for data coming from a particular distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cramervonmises`](generated/scipy.stats.cramervonmises.html#scipy.stats.cramervonmises
    "scipy.stats.cramervonmises")(rvs, cdf[, args, axis, ...]) | Perform the one-sample
    Cramér-von Mises test for goodness of fit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ks_1samp`](generated/scipy.stats.ks_1samp.html#scipy.stats.ks_1samp "scipy.stats.ks_1samp")(x, cdf[, args, alternative, ...])
    | Performs the one-sample Kolmogorov-Smirnov test for goodness of fit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`goodness_of_fit`](generated/scipy.stats.goodness_of_fit.html#scipy.stats.goodness_of_fit
    "scipy.stats.goodness_of_fit")(dist, data, *[, ...]) | Perform a goodness of fit
    test comparing data to a distribution family. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/scipy.stats.chisquare.html#scipy.stats.chisquare
    "scipy.stats.chisquare")(f_obs[, f_exp, ddof, axis]) | Calculate a one-way chi-square
    test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power_divergence`](generated/scipy.stats.power_divergence.html#scipy.stats.power_divergence
    "scipy.stats.power_divergence")(f_obs[, f_exp, ddof, axis, ...]) | Cressie-Read
    power divergence statistic and goodness of fit test. |'
  prefs: []
  type: TYPE_TB
- en: Paired sample tests are often used to assess whether two samples were drawn
    from the same distribution; they differ from the independent sample tests below
    in that each observation in one sample is treated as paired with a closely-related
    observation in the other sample (e.g. when environmental factors are controlled
    between observations within a pair but not among pairs). They can also be interpreted
    or used as one-sample tests (e.g. tests on the mean or median of *differences*
    between paired observations).
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ttest_rel`](generated/scipy.stats.ttest_rel.html#scipy.stats.ttest_rel
    "scipy.stats.ttest_rel")(a, b[, axis, nan_policy, ...]) | Calculate the t-test
    on TWO RELATED samples of scores, a and b. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wilcoxon`](generated/scipy.stats.wilcoxon.html#scipy.stats.wilcoxon "scipy.stats.wilcoxon")(x[, y, zero_method, correction, ...])
    | Calculate the Wilcoxon signed-rank test. |'
  prefs: []
  type: TYPE_TB
- en: Association/Correlation Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These tests are often used to assess whether there is a relationship (e.g. linear)
    between paired observations in multiple samples or among the coordinates of multivariate
    observations.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`linregress`](generated/scipy.stats.linregress.html#scipy.stats.linregress
    "scipy.stats.linregress")(x[, y, alternative]) | Calculate a linear least-squares
    regression for two sets of measurements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pearsonr`](generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr "scipy.stats.pearsonr")(x, y, *[, alternative, method])
    | Pearson correlation coefficient and p-value for testing non-correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spearmanr`](generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "scipy.stats.spearmanr")(a[, b, axis, nan_policy, alternative]) | Calculate a
    Spearman correlation coefficient with associated p-value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pointbiserialr`](generated/scipy.stats.pointbiserialr.html#scipy.stats.pointbiserialr
    "scipy.stats.pointbiserialr")(x, y) | Calculate a point biserial correlation coefficient
    and its p-value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kendalltau`](generated/scipy.stats.kendalltau.html#scipy.stats.kendalltau
    "scipy.stats.kendalltau")(x, y, *[, initial_lexsort, ...]) | Calculate Kendall''s
    tau, a correlation measure for ordinal data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weightedtau`](generated/scipy.stats.weightedtau.html#scipy.stats.weightedtau
    "scipy.stats.weightedtau")(x, y[, rank, weigher, additive]) | Compute a weighted
    version of Kendall''s \(\tau\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`somersd`](generated/scipy.stats.somersd.html#scipy.stats.somersd "scipy.stats.somersd")(x[, y, alternative])
    | Calculates Somers'' D, an asymmetric measure of ordinal association. |'
  prefs: []
  type: TYPE_TB
- en: '| [`siegelslopes`](generated/scipy.stats.siegelslopes.html#scipy.stats.siegelslopes
    "scipy.stats.siegelslopes")(y[, x, method]) | Computes the Siegel estimator for
    a set of points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`theilslopes`](generated/scipy.stats.theilslopes.html#scipy.stats.theilslopes
    "scipy.stats.theilslopes")(y[, x, alpha, method]) | Computes the Theil-Sen estimator
    for a set of points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`page_trend_test`](generated/scipy.stats.page_trend_test.html#scipy.stats.page_trend_test
    "scipy.stats.page_trend_test")(data[, ranked, ...]) | Perform Page''s Test, a
    measure of trend in observations between treatments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiscale_graphcorr`](generated/scipy.stats.multiscale_graphcorr.html#scipy.stats.multiscale_graphcorr
    "scipy.stats.multiscale_graphcorr")(x, y[, ...]) | Computes the Multiscale Graph
    Correlation (MGC) test statistic. |'
  prefs: []
  type: TYPE_TB
- en: These association tests and are to work with samples in the form of contingency
    tables. Supporting functions are available in [`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`chi2_contingency`](generated/scipy.stats.chi2_contingency.html#scipy.stats.chi2_contingency
    "scipy.stats.chi2_contingency")(observed[, correction, lambda_]) | Chi-square
    test of independence of variables in a contingency table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fisher_exact`](generated/scipy.stats.fisher_exact.html#scipy.stats.fisher_exact
    "scipy.stats.fisher_exact")(table[, alternative]) | Perform a Fisher exact test
    on a 2x2 contingency table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`barnard_exact`](generated/scipy.stats.barnard_exact.html#scipy.stats.barnard_exact
    "scipy.stats.barnard_exact")(table[, alternative, pooled, n]) | Perform a Barnard
    exact test on a 2x2 contingency table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boschloo_exact`](generated/scipy.stats.boschloo_exact.html#scipy.stats.boschloo_exact
    "scipy.stats.boschloo_exact")(table[, alternative, n]) | Perform Boschloo''s exact
    test on a 2x2 contingency table. |'
  prefs: []
  type: TYPE_TB
- en: Independent Sample Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Independent sample tests are typically used to assess whether multiple samples
    were independently drawn from the same distribution or different distributions
    with a shared property (e.g. equal means).
  prefs: []
  type: TYPE_NORMAL
- en: Some tests are specifically for comparing two samples.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ttest_ind_from_stats`](generated/scipy.stats.ttest_ind_from_stats.html#scipy.stats.ttest_ind_from_stats
    "scipy.stats.ttest_ind_from_stats")(mean1, std1, nobs1, ...) | T-test for means
    of two independent samples from descriptive statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson_means_test`](generated/scipy.stats.poisson_means_test.html#scipy.stats.poisson_means_test
    "scipy.stats.poisson_means_test")(k1, n1, k2, n2, *[, ...]) | Performs the Poisson
    means test, AKA the "E-test". |'
  prefs: []
  type: TYPE_TB
- en: '| [`ttest_ind`](generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind
    "scipy.stats.ttest_ind")(a, b[, axis, equal_var, ...]) | Calculate the T-test
    for the means of *two independent* samples of scores. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mannwhitneyu`](generated/scipy.stats.mannwhitneyu.html#scipy.stats.mannwhitneyu
    "scipy.stats.mannwhitneyu")(x, y[, use_continuity, ...]) | Perform the Mann-Whitney
    U rank test on two independent samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bws_test`](generated/scipy.stats.bws_test.html#scipy.stats.bws_test "scipy.stats.bws_test")(x, y, *[, alternative, method])
    | Perform the Baumgartner-Weiss-Schindler test on two independent samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ranksums`](generated/scipy.stats.ranksums.html#scipy.stats.ranksums "scipy.stats.ranksums")(x, y[, alternative, axis, ...])
    | Compute the Wilcoxon rank-sum statistic for two samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`brunnermunzel`](generated/scipy.stats.brunnermunzel.html#scipy.stats.brunnermunzel
    "scipy.stats.brunnermunzel")(x, y[, alternative, ...]) | Compute the Brunner-Munzel
    test on samples x and y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mood`](generated/scipy.stats.mood.html#scipy.stats.mood "scipy.stats.mood")(x, y[, axis, alternative])
    | Perform Mood''s test for equal scale parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ansari`](generated/scipy.stats.ansari.html#scipy.stats.ansari "scipy.stats.ansari")(x, y[, alternative, axis, ...])
    | Perform the Ansari-Bradley test for equal scale parameters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cramervonmises_2samp`](generated/scipy.stats.cramervonmises_2samp.html#scipy.stats.cramervonmises_2samp
    "scipy.stats.cramervonmises_2samp")(x, y[, method, axis, ...]) | Perform the two-sample
    Cramér-von Mises test for goodness of fit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`epps_singleton_2samp`](generated/scipy.stats.epps_singleton_2samp.html#scipy.stats.epps_singleton_2samp
    "scipy.stats.epps_singleton_2samp")(x, y[, t, axis, ...]) | Compute the Epps-Singleton
    (ES) test statistic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ks_2samp`](generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp "scipy.stats.ks_2samp")(data1, data2[, alternative, ...])
    | Performs the two-sample Kolmogorov-Smirnov test for goodness of fit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kstest`](generated/scipy.stats.kstest.html#scipy.stats.kstest "scipy.stats.kstest")(rvs, cdf[, args, N, alternative, ...])
    | Performs the (one-sample or two-sample) Kolmogorov-Smirnov test for goodness
    of fit. |'
  prefs: []
  type: TYPE_TB
- en: Others are generalized to multiple samples.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`f_oneway`](generated/scipy.stats.f_oneway.html#scipy.stats.f_oneway "scipy.stats.f_oneway")(*samples[, axis])
    | Perform one-way ANOVA. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tukey_hsd`](generated/scipy.stats.tukey_hsd.html#scipy.stats.tukey_hsd
    "scipy.stats.tukey_hsd")(*args) | Perform Tukey''s HSD test for equality of means
    over multiple treatments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dunnett`](generated/scipy.stats.dunnett.html#scipy.stats.dunnett "scipy.stats.dunnett")(*samples, control[, alternative, ...])
    | Dunnett''s test: multiple comparisons of means against a control group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kruskal`](generated/scipy.stats.kruskal.html#scipy.stats.kruskal "scipy.stats.kruskal")(*samples[, nan_policy, axis, keepdims])
    | Compute the Kruskal-Wallis H-test for independent samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`alexandergovern`](generated/scipy.stats.alexandergovern.html#scipy.stats.alexandergovern
    "scipy.stats.alexandergovern")(*samples[, nan_policy]) | Performs the Alexander
    Govern test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fligner`](generated/scipy.stats.fligner.html#scipy.stats.fligner "scipy.stats.fligner")(*samples[, center, proportiontocut, ...])
    | Perform Fligner-Killeen test for equality of variance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`levene`](generated/scipy.stats.levene.html#scipy.stats.levene "scipy.stats.levene")(*samples[, center, proportiontocut, ...])
    | Perform Levene test for equal variances. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bartlett`](generated/scipy.stats.bartlett.html#scipy.stats.bartlett "scipy.stats.bartlett")(*samples[, axis, nan_policy, keepdims])
    | Perform Bartlett''s test for equal variances. |'
  prefs: []
  type: TYPE_TB
- en: '| [`median_test`](generated/scipy.stats.median_test.html#scipy.stats.median_test
    "scipy.stats.median_test")(*samples[, ties, correction, ...]) | Perform a Mood''s
    median test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`friedmanchisquare`](generated/scipy.stats.friedmanchisquare.html#scipy.stats.friedmanchisquare
    "scipy.stats.friedmanchisquare")(*samples) | Compute the Friedman test for repeated
    samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`anderson_ksamp`](generated/scipy.stats.anderson_ksamp.html#scipy.stats.anderson_ksamp
    "scipy.stats.anderson_ksamp")(samples[, midrank, method]) | The Anderson-Darling
    test for k-samples. |'
  prefs: []
  type: TYPE_TB
- en: Resampling and Monte Carlo Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following functions can reproduce the p-value and confidence interval results
    of most of the functions above, and often produce accurate results in a wider
    variety of conditions. They can also be used to perform hypothesis tests and generate
    confidence intervals for custom statistics. This flexibility comes at the cost
    of greater computational requirements and stochastic results.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`monte_carlo_test`](generated/scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test
    "scipy.stats.monte_carlo_test")(data, rvs, statistic, *[, ...]) | Perform a Monte
    Carlo hypothesis test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation_test`](generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test
    "scipy.stats.permutation_test")(data, statistic, *[, ...]) | Performs a permutation
    test of a given statistic on provided data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bootstrap`](generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap
    "scipy.stats.bootstrap")(data, statistic, *[, n_resamples, ...]) | Compute a two-sided
    bootstrap confidence interval of a statistic. |'
  prefs: []
  type: TYPE_TB
- en: Instances of the following object can be passed into some hypothesis test functions
    to perform a resampling or Monte Carlo version of the hypothesis test.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MonteCarloMethod`](generated/scipy.stats.MonteCarloMethod.html#scipy.stats.MonteCarloMethod
    "scipy.stats.MonteCarloMethod")([n_resamples, batch, rvs]) | Configuration information
    for a Monte Carlo hypothesis test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PermutationMethod`](generated/scipy.stats.PermutationMethod.html#scipy.stats.PermutationMethod
    "scipy.stats.PermutationMethod")([n_resamples, batch, ...]) | Configuration information
    for a permutation hypothesis test. |'
  prefs: []
  type: TYPE_TB
- en: '| [`BootstrapMethod`](generated/scipy.stats.BootstrapMethod.html#scipy.stats.BootstrapMethod
    "scipy.stats.BootstrapMethod")([n_resamples, batch, ...]) | Configuration information
    for a bootstrap confidence interval. |'
  prefs: []
  type: TYPE_TB
- en: Multiple Hypothesis Testing and Meta-Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These functions are for assessing the results of individual tests as a whole.
    Functions for performing specific multiple hypothesis tests (e.g. post hoc tests)
    are listed above.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`combine_pvalues`](generated/scipy.stats.combine_pvalues.html#scipy.stats.combine_pvalues
    "scipy.stats.combine_pvalues")(pvalues[, method, weights]) | Combine p-values
    from independent tests that bear upon the same hypothesis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`false_discovery_control`](generated/scipy.stats.false_discovery_control.html#scipy.stats.false_discovery_control
    "scipy.stats.false_discovery_control")(ps, *[, axis, method]) | Adjust p-values
    to control the false discovery rate. |'
  prefs: []
  type: TYPE_TB
- en: The following functions are related to the tests above but do not belong in
    the above categories.
  prefs: []
  type: TYPE_NORMAL
- en: Quasi-Monte Carlo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Quasi-Monte Carlo submodule (`scipy.stats.qmc`)](stats.qmc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quasi-Monte Carlo](stats.qmc.html#quasi-monte-carlo)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Engines](stats.qmc.html#engines)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.QMCEngine](generated/scipy.stats.qmc.QMCEngine.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.Sobol](generated/scipy.stats.qmc.Sobol.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.Halton](generated/scipy.stats.qmc.Halton.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.LatinHypercube](generated/scipy.stats.qmc.LatinHypercube.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.PoissonDisk](generated/scipy.stats.qmc.PoissonDisk.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.MultinomialQMC](generated/scipy.stats.qmc.MultinomialQMC.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.MultivariateNormalQMC](generated/scipy.stats.qmc.MultivariateNormalQMC.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Helpers](stats.qmc.html#helpers)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.discrepancy](generated/scipy.stats.qmc.discrepancy.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.geometric_discrepancy](generated/scipy.stats.qmc.geometric_discrepancy.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.update_discrepancy](generated/scipy.stats.qmc.update_discrepancy.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.qmc.scale](generated/scipy.stats.qmc.scale.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Quasi-Monte Carlo](stats.qmc.html#introduction-to-quasi-monte-carlo)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References](stats.qmc.html#references)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contingency Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Contingency table functions (`scipy.stats.contingency`)](stats.contingency.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.chi2_contingency](generated/scipy.stats.contingency.chi2_contingency.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`chi2_contingency`](generated/scipy.stats.contingency.chi2_contingency.html#scipy.stats.contingency.chi2_contingency)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.relative_risk](generated/scipy.stats.contingency.relative_risk.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`relative_risk`](generated/scipy.stats.contingency.relative_risk.html#scipy.stats.contingency.relative_risk)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.odds_ratio](generated/scipy.stats.contingency.odds_ratio.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`odds_ratio`](generated/scipy.stats.contingency.odds_ratio.html#scipy.stats.contingency.odds_ratio)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.crosstab](generated/scipy.stats.contingency.crosstab.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab`](generated/scipy.stats.contingency.crosstab.html#scipy.stats.contingency.crosstab)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.association](generated/scipy.stats.contingency.association.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`association`](generated/scipy.stats.contingency.association.html#scipy.stats.contingency.association)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.expected_freq](generated/scipy.stats.contingency.expected_freq.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`expected_freq`](generated/scipy.stats.contingency.expected_freq.html#scipy.stats.contingency.expected_freq)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.contingency.margins](generated/scipy.stats.contingency.margins.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`margins`](generated/scipy.stats.contingency.margins.html#scipy.stats.contingency.margins)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Masked statistics functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Statistical functions for masked arrays (`scipy.stats.mstats`)](stats.mstats.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Summary statistics](stats.mstats.html#summary-statistics)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.describe](generated/scipy.stats.mstats.describe.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`describe`](generated/scipy.stats.mstats.describe.html#scipy.stats.mstats.describe)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.gmean](generated/scipy.stats.mstats.gmean.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`gmean`](generated/scipy.stats.mstats.gmean.html#scipy.stats.mstats.gmean)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.hmean](generated/scipy.stats.mstats.hmean.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hmean`](generated/scipy.stats.mstats.hmean.html#scipy.stats.mstats.hmean)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kurtosis](generated/scipy.stats.mstats.kurtosis.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kurtosis`](generated/scipy.stats.mstats.kurtosis.html#scipy.stats.mstats.kurtosis)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.mode](generated/scipy.stats.mstats.mode.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mode`](generated/scipy.stats.mstats.mode.html#scipy.stats.mstats.mode)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.mquantiles](generated/scipy.stats.mstats.mquantiles.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mquantiles`](generated/scipy.stats.mstats.mquantiles.html#scipy.stats.mstats.mquantiles)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.hdmedian](generated/scipy.stats.mstats.hdmedian.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hdmedian`](generated/scipy.stats.mstats.hdmedian.html#scipy.stats.mstats.hdmedian)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.hdquantiles](generated/scipy.stats.mstats.hdquantiles.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hdquantiles`](generated/scipy.stats.mstats.hdquantiles.html#scipy.stats.mstats.hdquantiles)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.hdquantiles_sd](generated/scipy.stats.mstats.hdquantiles_sd.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hdquantiles_sd`](generated/scipy.stats.mstats.hdquantiles_sd.html#scipy.stats.mstats.hdquantiles_sd)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.idealfourths](generated/scipy.stats.mstats.idealfourths.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`idealfourths`](generated/scipy.stats.mstats.idealfourths.html#scipy.stats.mstats.idealfourths)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.plotting_positions](generated/scipy.stats.mstats.plotting_positions.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plotting_positions`](generated/scipy.stats.mstats.plotting_positions.html#scipy.stats.mstats.plotting_positions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.meppf](generated/scipy.stats.mstats.meppf.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`meppf`](generated/scipy.stats.mstats.meppf.html#scipy.stats.mstats.meppf)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.moment](generated/scipy.stats.mstats.moment.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`moment`](generated/scipy.stats.mstats.moment.html#scipy.stats.mstats.moment)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.skew](generated/scipy.stats.mstats.skew.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`skew`](generated/scipy.stats.mstats.skew.html#scipy.stats.mstats.skew)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.tmean](generated/scipy.stats.mstats.tmean.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tmean`](generated/scipy.stats.mstats.tmean.html#scipy.stats.mstats.tmean)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.tvar](generated/scipy.stats.mstats.tvar.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tvar`](generated/scipy.stats.mstats.tvar.html#scipy.stats.mstats.tvar)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.tmin](generated/scipy.stats.mstats.tmin.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tmin`](generated/scipy.stats.mstats.tmin.html#scipy.stats.mstats.tmin)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.tmax](generated/scipy.stats.mstats.tmax.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tmax`](generated/scipy.stats.mstats.tmax.html#scipy.stats.mstats.tmax)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.tsem](generated/scipy.stats.mstats.tsem.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tsem`](generated/scipy.stats.mstats.tsem.html#scipy.stats.mstats.tsem)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.variation](generated/scipy.stats.mstats.variation.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`variation`](generated/scipy.stats.mstats.variation.html#scipy.stats.mstats.variation)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.find_repeats](generated/scipy.stats.mstats.find_repeats.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`find_repeats`](generated/scipy.stats.mstats.find_repeats.html#scipy.stats.mstats.find_repeats)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.sem](generated/scipy.stats.mstats.sem.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sem`](generated/scipy.stats.mstats.sem.html#scipy.stats.mstats.sem)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimmed_mean](generated/scipy.stats.mstats.trimmed_mean.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimmed_mean`](generated/scipy.stats.mstats.trimmed_mean.html#scipy.stats.mstats.trimmed_mean)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimmed_mean_ci](generated/scipy.stats.mstats.trimmed_mean_ci.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimmed_mean_ci`](generated/scipy.stats.mstats.trimmed_mean_ci.html#scipy.stats.mstats.trimmed_mean_ci)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimmed_std](generated/scipy.stats.mstats.trimmed_std.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimmed_std`](generated/scipy.stats.mstats.trimmed_std.html#scipy.stats.mstats.trimmed_std)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimmed_var](generated/scipy.stats.mstats.trimmed_var.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimmed_var`](generated/scipy.stats.mstats.trimmed_var.html#scipy.stats.mstats.trimmed_var)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Frequency statistics](stats.mstats.html#frequency-statistics)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.scoreatpercentile](generated/scipy.stats.mstats.scoreatpercentile.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scoreatpercentile`](generated/scipy.stats.mstats.scoreatpercentile.html#scipy.stats.mstats.scoreatpercentile)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Correlation functions](stats.mstats.html#correlation-functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.f_oneway](generated/scipy.stats.mstats.f_oneway.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`f_oneway`](generated/scipy.stats.mstats.f_oneway.html#scipy.stats.mstats.f_oneway)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.pearsonr](generated/scipy.stats.mstats.pearsonr.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pearsonr`](generated/scipy.stats.mstats.pearsonr.html#scipy.stats.mstats.pearsonr)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.spearmanr](generated/scipy.stats.mstats.spearmanr.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`spearmanr`](generated/scipy.stats.mstats.spearmanr.html#scipy.stats.mstats.spearmanr)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.pointbiserialr](generated/scipy.stats.mstats.pointbiserialr.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pointbiserialr`](generated/scipy.stats.mstats.pointbiserialr.html#scipy.stats.mstats.pointbiserialr)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kendalltau](generated/scipy.stats.mstats.kendalltau.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kendalltau`](generated/scipy.stats.mstats.kendalltau.html#scipy.stats.mstats.kendalltau)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kendalltau_seasonal](generated/scipy.stats.mstats.kendalltau_seasonal.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kendalltau_seasonal`](generated/scipy.stats.mstats.kendalltau_seasonal.html#scipy.stats.mstats.kendalltau_seasonal)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.linregress](generated/scipy.stats.mstats.linregress.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`linregress`](generated/scipy.stats.mstats.linregress.html#scipy.stats.mstats.linregress)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.siegelslopes](generated/scipy.stats.mstats.siegelslopes.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`siegelslopes`](generated/scipy.stats.mstats.siegelslopes.html#scipy.stats.mstats.siegelslopes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.theilslopes](generated/scipy.stats.mstats.theilslopes.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`theilslopes`](generated/scipy.stats.mstats.theilslopes.html#scipy.stats.mstats.theilslopes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.sen_seasonal_slopes](generated/scipy.stats.mstats.sen_seasonal_slopes.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sen_seasonal_slopes`](generated/scipy.stats.mstats.sen_seasonal_slopes.html#scipy.stats.mstats.sen_seasonal_slopes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Statistical tests](stats.mstats.html#statistical-tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ttest_1samp](generated/scipy.stats.mstats.ttest_1samp.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ttest_1samp`](generated/scipy.stats.mstats.ttest_1samp.html#scipy.stats.mstats.ttest_1samp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ttest_onesamp](generated/scipy.stats.mstats.ttest_onesamp.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ttest_onesamp`](generated/scipy.stats.mstats.ttest_onesamp.html#scipy.stats.mstats.ttest_onesamp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ttest_ind](generated/scipy.stats.mstats.ttest_ind.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ttest_ind`](generated/scipy.stats.mstats.ttest_ind.html#scipy.stats.mstats.ttest_ind)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ttest_rel](generated/scipy.stats.mstats.ttest_rel.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ttest_rel`](generated/scipy.stats.mstats.ttest_rel.html#scipy.stats.mstats.ttest_rel)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.chisquare](generated/scipy.stats.mstats.chisquare.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`chisquare`](generated/scipy.stats.mstats.chisquare.html#scipy.stats.mstats.chisquare)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kstest](generated/scipy.stats.mstats.kstest.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kstest`](generated/scipy.stats.mstats.kstest.html#scipy.stats.mstats.kstest)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ks_2samp](generated/scipy.stats.mstats.ks_2samp.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ks_2samp`](generated/scipy.stats.mstats.ks_2samp.html#scipy.stats.mstats.ks_2samp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ks_1samp](generated/scipy.stats.mstats.ks_1samp.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ks_1samp`](generated/scipy.stats.mstats.ks_1samp.html#scipy.stats.mstats.ks_1samp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.ks_twosamp](generated/scipy.stats.mstats.ks_twosamp.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ks_twosamp`](generated/scipy.stats.mstats.ks_twosamp.html#scipy.stats.mstats.ks_twosamp)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.mannwhitneyu](generated/scipy.stats.mstats.mannwhitneyu.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mannwhitneyu`](generated/scipy.stats.mstats.mannwhitneyu.html#scipy.stats.mstats.mannwhitneyu)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.rankdata](generated/scipy.stats.mstats.rankdata.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`rankdata`](generated/scipy.stats.mstats.rankdata.html#scipy.stats.mstats.rankdata)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kruskal](generated/scipy.stats.mstats.kruskal.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kruskal`](generated/scipy.stats.mstats.kruskal.html#scipy.stats.mstats.kruskal)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kruskalwallis](generated/scipy.stats.mstats.kruskalwallis.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kruskalwallis`](generated/scipy.stats.mstats.kruskalwallis.html#scipy.stats.mstats.kruskalwallis)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.friedmanchisquare](generated/scipy.stats.mstats.friedmanchisquare.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`friedmanchisquare`](generated/scipy.stats.mstats.friedmanchisquare.html#scipy.stats.mstats.friedmanchisquare)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.brunnermunzel](generated/scipy.stats.mstats.brunnermunzel.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`brunnermunzel`](generated/scipy.stats.mstats.brunnermunzel.html#scipy.stats.mstats.brunnermunzel)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.skewtest](generated/scipy.stats.mstats.skewtest.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`skewtest`](generated/scipy.stats.mstats.skewtest.html#scipy.stats.mstats.skewtest)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.kurtosistest](generated/scipy.stats.mstats.kurtosistest.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kurtosistest`](generated/scipy.stats.mstats.kurtosistest.html#scipy.stats.mstats.kurtosistest)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.normaltest](generated/scipy.stats.mstats.normaltest.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`normaltest`](generated/scipy.stats.mstats.normaltest.html#scipy.stats.mstats.normaltest)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Transformations](stats.mstats.html#transformations)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.obrientransform](generated/scipy.stats.mstats.obrientransform.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`obrientransform`](generated/scipy.stats.mstats.obrientransform.html#scipy.stats.mstats.obrientransform)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trim](generated/scipy.stats.mstats.trim.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trim`](generated/scipy.stats.mstats.trim.html#scipy.stats.mstats.trim)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trima](generated/scipy.stats.mstats.trima.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trima`](generated/scipy.stats.mstats.trima.html#scipy.stats.mstats.trima)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimmed_stde](generated/scipy.stats.mstats.trimmed_stde.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimmed_stde`](generated/scipy.stats.mstats.trimmed_stde.html#scipy.stats.mstats.trimmed_stde)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimr](generated/scipy.stats.mstats.trimr.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimr`](generated/scipy.stats.mstats.trimr.html#scipy.stats.mstats.trimr)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimtail](generated/scipy.stats.mstats.trimtail.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimtail`](generated/scipy.stats.mstats.trimtail.html#scipy.stats.mstats.trimtail)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.trimboth](generated/scipy.stats.mstats.trimboth.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`trimboth`](generated/scipy.stats.mstats.trimboth.html#scipy.stats.mstats.trimboth)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.winsorize](generated/scipy.stats.mstats.winsorize.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`winsorize`](generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.zmap](generated/scipy.stats.mstats.zmap.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`zmap`](generated/scipy.stats.mstats.zmap.html#scipy.stats.mstats.zmap)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.zscore](generated/scipy.stats.mstats.zscore.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`zscore`](generated/scipy.stats.mstats.zscore.html#scipy.stats.mstats.zscore)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other](stats.mstats.html#other)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.argstoarray](generated/scipy.stats.mstats.argstoarray.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`argstoarray`](generated/scipy.stats.mstats.argstoarray.html#scipy.stats.mstats.argstoarray)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.count_tied_groups](generated/scipy.stats.mstats.count_tied_groups.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`count_tied_groups`](generated/scipy.stats.mstats.count_tied_groups.html#scipy.stats.mstats.count_tied_groups)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.msign](generated/scipy.stats.mstats.msign.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`msign`](generated/scipy.stats.mstats.msign.html#scipy.stats.mstats.msign)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.compare_medians_ms](generated/scipy.stats.mstats.compare_medians_ms.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`compare_medians_ms`](generated/scipy.stats.mstats.compare_medians_ms.html#scipy.stats.mstats.compare_medians_ms)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.median_cihs](generated/scipy.stats.mstats.median_cihs.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`median_cihs`](generated/scipy.stats.mstats.median_cihs.html#scipy.stats.mstats.median_cihs)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.mjci](generated/scipy.stats.mstats.mjci.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mjci`](generated/scipy.stats.mstats.mjci.html#scipy.stats.mstats.mjci)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.mquantiles_cimj](generated/scipy.stats.mstats.mquantiles_cimj.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mquantiles_cimj`](generated/scipy.stats.mstats.mquantiles_cimj.html#scipy.stats.mstats.mquantiles_cimj)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.mstats.rsh](generated/scipy.stats.mstats.rsh.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`rsh`](generated/scipy.stats.mstats.rsh.html#scipy.stats.mstats.rsh)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other statistical functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Transformations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`boxcox`](generated/scipy.stats.boxcox.html#scipy.stats.boxcox "scipy.stats.boxcox")(x[, lmbda, alpha, optimizer])
    | Return a dataset transformed by a Box-Cox power transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boxcox_normmax`](generated/scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax
    "scipy.stats.boxcox_normmax")(x[, brack, method, optimizer]) | Compute optimal
    Box-Cox transform parameter for input data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boxcox_llf`](generated/scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf
    "scipy.stats.boxcox_llf")(lmb, data) | The boxcox log-likelihood function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yeojohnson`](generated/scipy.stats.yeojohnson.html#scipy.stats.yeojohnson
    "scipy.stats.yeojohnson")(x[, lmbda]) | Return a dataset transformed by a Yeo-Johnson
    power transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yeojohnson_normmax`](generated/scipy.stats.yeojohnson_normmax.html#scipy.stats.yeojohnson_normmax
    "scipy.stats.yeojohnson_normmax")(x[, brack]) | Compute optimal Yeo-Johnson transform
    parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yeojohnson_llf`](generated/scipy.stats.yeojohnson_llf.html#scipy.stats.yeojohnson_llf
    "scipy.stats.yeojohnson_llf")(lmb, data) | The yeojohnson log-likelihood function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`obrientransform`](generated/scipy.stats.obrientransform.html#scipy.stats.obrientransform
    "scipy.stats.obrientransform")(*samples) | Compute the O''Brien transform on input
    data (any number of arrays). |'
  prefs: []
  type: TYPE_TB
- en: '| [`sigmaclip`](generated/scipy.stats.sigmaclip.html#scipy.stats.sigmaclip
    "scipy.stats.sigmaclip")(a[, low, high]) | Perform iterative sigma-clipping of
    array elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trimboth`](generated/scipy.stats.trimboth.html#scipy.stats.trimboth "scipy.stats.trimboth")(a, proportiontocut[, axis])
    | Slice off a proportion of items from both ends of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trim1`](generated/scipy.stats.trim1.html#scipy.stats.trim1 "scipy.stats.trim1")(a, proportiontocut[, tail, axis])
    | Slice off a proportion from ONE end of the passed array distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zmap`](generated/scipy.stats.zmap.html#scipy.stats.zmap "scipy.stats.zmap")(scores, compare[, axis, ddof, nan_policy])
    | Calculate the relative z-scores. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zscore`](generated/scipy.stats.zscore.html#scipy.stats.zscore "scipy.stats.zscore")(a[, axis, ddof, nan_policy])
    | Compute the z score. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gzscore`](generated/scipy.stats.gzscore.html#scipy.stats.gzscore "scipy.stats.gzscore")(a, *[, axis, ddof, nan_policy])
    | Compute the geometric standard score. |'
  prefs: []
  type: TYPE_TB
- en: Statistical distances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`wasserstein_distance`](generated/scipy.stats.wasserstein_distance.html#scipy.stats.wasserstein_distance
    "scipy.stats.wasserstein_distance")(u_values, v_values[, ...]) | Compute the first
    Wasserstein distance between two 1D distributions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`energy_distance`](generated/scipy.stats.energy_distance.html#scipy.stats.energy_distance
    "scipy.stats.energy_distance")(u_values, v_values[, ...]) | Compute the energy
    distance between two 1D distributions. |'
  prefs: []
  type: TYPE_TB
- en: Sampling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Random Number Generators (`scipy.stats.sampling`)](stats.sampling.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generators Wrapped](stats.sampling.html#generators-wrapped)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For continuous distributions](stats.sampling.html#for-continuous-distributions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.NumericalInverseHermite](generated/scipy.stats.sampling.NumericalInverseHermite.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.NumericalInversePolynomial](generated/scipy.stats.sampling.NumericalInversePolynomial.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.TransformedDensityRejection](generated/scipy.stats.sampling.TransformedDensityRejection.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.SimpleRatioUniforms](generated/scipy.stats.sampling.SimpleRatioUniforms.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.RatioUniforms](generated/scipy.stats.sampling.RatioUniforms.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For discrete distributions](stats.sampling.html#for-discrete-distributions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.DiscreteAliasUrn](generated/scipy.stats.sampling.DiscreteAliasUrn.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.DiscreteGuideTable](generated/scipy.stats.sampling.DiscreteGuideTable.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Warnings / Errors used in `scipy.stats.sampling`](stats.sampling.html#warnings-errors-used-in-scipy-stats-sampling)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.UNURANError](generated/scipy.stats.sampling.UNURANError.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generators for pre-defined distributions](stats.sampling.html#generators-for-pre-defined-distributions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion](generated/scipy.stats.sampling.FastGeneratorInversion.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`FastGeneratorInversion`](generated/scipy.stats.sampling.FastGeneratorInversion.html#scipy.stats.sampling.FastGeneratorInversion)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion.evaluate_error](generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion.ppf](generated/scipy.stats.sampling.FastGeneratorInversion.ppf.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion.qrvs](generated/scipy.stats.sampling.FastGeneratorInversion.qrvs.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion.rvs](generated/scipy.stats.sampling.FastGeneratorInversion.rvs.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats.sampling.FastGeneratorInversion.support](generated/scipy.stats.sampling.FastGeneratorInversion.support.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Random variate generation / CDF Inversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`rvs_ratio_uniforms`](generated/scipy.stats.rvs_ratio_uniforms.html#scipy.stats.rvs_ratio_uniforms
    "scipy.stats.rvs_ratio_uniforms")(pdf, umax, vmin, vmax[, ...]) | Generate random
    samples from a probability density function using the ratio-of-uniforms method.
    |'
  prefs: []
  type: TYPE_TB
- en: Fitting / Survival Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`fit`](generated/scipy.stats.fit.html#scipy.stats.fit "scipy.stats.fit")(dist, data[, bounds, guess, method, ...])
    | Fit a discrete or continuous distribution to data |'
  prefs: []
  type: TYPE_TB
- en: '| [`ecdf`](generated/scipy.stats.ecdf.html#scipy.stats.ecdf "scipy.stats.ecdf")(sample)
    | Empirical cumulative distribution function of a sample. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logrank`](generated/scipy.stats.logrank.html#scipy.stats.logrank "scipy.stats.logrank")(x, y[, alternative])
    | Compare the survival distributions of two samples via the logrank test. |'
  prefs: []
  type: TYPE_TB
- en: Directional statistical functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`directional_stats`](generated/scipy.stats.directional_stats.html#scipy.stats.directional_stats
    "scipy.stats.directional_stats")(samples, *[, axis, normalize]) | Computes sample
    statistics for directional data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`circmean`](generated/scipy.stats.circmean.html#scipy.stats.circmean "scipy.stats.circmean")(samples[, high, low, axis, ...])
    | Compute the circular mean for samples in a range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`circvar`](generated/scipy.stats.circvar.html#scipy.stats.circvar "scipy.stats.circvar")(samples[, high, low, axis, ...])
    | Compute the circular variance for samples assumed to be in a range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`circstd`](generated/scipy.stats.circstd.html#scipy.stats.circstd "scipy.stats.circstd")(samples[, high, low, axis, ...])
    | Compute the circular standard deviation for samples assumed to be in the range
    [low to high]. |'
  prefs: []
  type: TYPE_TB
- en: Sensitivity Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`sobol_indices`](generated/scipy.stats.sobol_indices.html#scipy.stats.sobol_indices
    "scipy.stats.sobol_indices")(*, func, n[, dists, method, ...]) | Global sensitivity
    indices of Sobol''. |'
  prefs: []
  type: TYPE_TB
- en: Plot-tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ppcc_max`](generated/scipy.stats.ppcc_max.html#scipy.stats.ppcc_max "scipy.stats.ppcc_max")(x[, brack, dist])
    | Calculate the shape parameter that maximizes the PPCC. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ppcc_plot`](generated/scipy.stats.ppcc_plot.html#scipy.stats.ppcc_plot
    "scipy.stats.ppcc_plot")(x, a, b[, dist, plot, N]) | Calculate and optionally
    plot probability plot correlation coefficient. |'
  prefs: []
  type: TYPE_TB
- en: '| [`probplot`](generated/scipy.stats.probplot.html#scipy.stats.probplot "scipy.stats.probplot")(x[, sparams, dist, fit, plot, rvalue])
    | Calculate quantiles for a probability plot, and optionally show the plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boxcox_normplot`](generated/scipy.stats.boxcox_normplot.html#scipy.stats.boxcox_normplot
    "scipy.stats.boxcox_normplot")(x, la, lb[, plot, N]) | Compute parameters for
    a Box-Cox normality plot, optionally show it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yeojohnson_normplot`](generated/scipy.stats.yeojohnson_normplot.html#scipy.stats.yeojohnson_normplot
    "scipy.stats.yeojohnson_normplot")(x, la, lb[, plot, N]) | Compute parameters
    for a Yeo-Johnson normality plot, optionally show it. |'
  prefs: []
  type: TYPE_TB
- en: Univariate and multivariate kernel density estimation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`gaussian_kde`](generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde")(dataset[, bw_method, weights]) | Representation of
    a kernel-density estimate using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: Warnings / Errors used in [`scipy.stats`](#module-scipy.stats "scipy.stats")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DegenerateDataWarning`](generated/scipy.stats.DegenerateDataWarning.html#scipy.stats.DegenerateDataWarning
    "scipy.stats.DegenerateDataWarning")([msg]) | Warns when data is degenerate and
    results may not be reliable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ConstantInputWarning`](generated/scipy.stats.ConstantInputWarning.html#scipy.stats.ConstantInputWarning
    "scipy.stats.ConstantInputWarning")([msg]) | Warns when all values in data are
    exactly equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`NearConstantInputWarning`](generated/scipy.stats.NearConstantInputWarning.html#scipy.stats.NearConstantInputWarning
    "scipy.stats.NearConstantInputWarning")([msg]) | Warns when all values in data
    are nearly equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FitError`](generated/scipy.stats.FitError.html#scipy.stats.FitError "scipy.stats.FitError")([msg])
    | Represents an error condition when fitting a distribution to data. |'
  prefs: []
  type: TYPE_TB
- en: Result classes used in [`scipy.stats`](#module-scipy.stats "scipy.stats")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: These classes are private, but they are included here because instances of them
    are returned by other statistical functions. User import and instantiation is
    not supported.
  prefs: []
  type: TYPE_NORMAL
- en: '[Result classes](stats._result_classes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.RelativeRiskResult](generated/scipy.stats._result_classes.RelativeRiskResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.BinomTestResult](generated/scipy.stats._result_classes.BinomTestResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.TukeyHSDResult](generated/scipy.stats._result_classes.TukeyHSDResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.DunnettResult](generated/scipy.stats._result_classes.DunnettResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.PearsonRResult](generated/scipy.stats._result_classes.PearsonRResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.FitResult](generated/scipy.stats._result_classes.FitResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.OddsRatioResult](generated/scipy.stats._result_classes.OddsRatioResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.TtestResult](generated/scipy.stats._result_classes.TtestResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.ECDFResult](generated/scipy.stats._result_classes.ECDFResult.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[scipy.stats._result_classes.EmpiricalDistributionFunction](generated/scipy.stats._result_classes.EmpiricalDistributionFunction.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
