- en: scipy.signal.firwin2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firwin2.html#scipy.signal.firwin2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firwin2.html#scipy.signal.firwin2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: FIR filter design using the window method.
  prefs: []
  type: TYPE_NORMAL
- en: From the given frequencies *freq* and corresponding gains *gain*, this function
    constructs an FIR filter with linear phase and (approximately) the given frequency
    response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numtaps**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of taps in the FIR filter. *numtaps* must be less than *nfreqs*.
  prefs: []
  type: TYPE_NORMAL
- en: '**freq**array_like, 1-D'
  prefs: []
  type: TYPE_NORMAL
- en: The frequency sampling points. Typically 0.0 to 1.0 with 1.0 being Nyquist.
    The Nyquist frequency is half *fs*. The values in *freq* must be nondecreasing.
    A value can be repeated once to implement a discontinuity. The first value in
    *freq* must be 0, and the last value must be `fs/2`. Values 0 and `fs/2` must
    not be repeated.
  prefs: []
  type: TYPE_NORMAL
- en: '**gain**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The filter gains at the frequency sampling points. Certain constraints to gain
    values, depending on the filter type, are applied, see Notes for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfreqs**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the interpolation mesh used to construct the filter. For most efficient
    behavior, this should be a power of 2 plus 1 (e.g, 129, 257, etc). The default
    is one more than the smallest power of 2 that is not less than *numtaps*. *nfreqs*
    must be greater than *numtaps*.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**string or (string, float) or float, or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Window function to use. Default is “hamming”. See [`scipy.signal.get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for the complete list of possible values. If None,
    no window function is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**nyq**float, optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: This is the Nyquist frequency. Each frequency in *freq* must be between 0 and
    *nyq*. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.0.0: [`firwin2`](#scipy.signal.firwin2 "scipy.signal.firwin2")
    keyword argument *nyq* is deprecated in favour of *fs* and will be removed in
    SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**antisymmetric**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether resulting impulse response is symmetric/antisymmetric. See Notes for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the signal. Each frequency in *cutoff* must be between
    0 and `fs/2`. Default is 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**taps**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The filter coefficients of the FIR filter, as a 1-D array of length *numtaps*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`firls`](scipy.signal.firls.html#scipy.signal.firls "scipy.signal.firls")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin`](scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum_phase`](scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`remez`](scipy.signal.remez.html#scipy.signal.remez "scipy.signal.remez")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: From the given set of frequencies and gains, the desired response is constructed
    in the frequency domain. The inverse FFT is applied to the desired response to
    create the associated convolution kernel, and the first *numtaps* coefficients
    of this kernel, scaled by *window*, are returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The FIR filter will have linear phase. The type of filter is determined by
    the value of ‘numtaps` and *antisymmetric* flag. There are four possible combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: odd *numtaps*, *antisymmetric* is False, type I filter is produced
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: even *numtaps*, *antisymmetric* is False, type II filter is produced
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: odd *numtaps*, *antisymmetric* is True, type III filter is produced
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: even *numtaps*, *antisymmetric* is True, type IV filter is produced
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Magnitude response of all but type I filters are subjects to following constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: type II – zero at the Nyquist frequency
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: type III – zero at zero and Nyquist frequencies
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: type IV – zero at zero frequency
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 0.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Oppenheim, A. V. and Schafer, R. W., “Discrete-Time Signal Processing”, Prentice-Hall,
    Englewood Cliffs, New Jersey (1989). (See, for example, Section 7.4.)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Smith, Steven W., “The Scientist and Engineer’s Guide to Digital Signal Processing”,
    Ch. 17\. [http://www.dspguide.com/ch17/1.htm](http://www.dspguide.com/ch17/1.htm)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A lowpass FIR filter with a response that is 1 on [0.0, 0.5], and that decreases
    linearly on [0.5, 1.0] from 1 to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
