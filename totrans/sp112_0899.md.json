["```py\nscipy.special.smirnov(n, d, out=None) = <ufunc 'smirnov'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import smirnov\n>>> from scipy.stats import norm \n```", "```py\n>>> smirnov(5, [0, 0.5, 1.0])\narray([ 1\\.   ,  0.056,  0\\.   ]) \n```", "```py\n>>> x = np.array([-1.392, -0.135, 0.114, 0.190, 1.82]) \n```", "```py\n>>> target = norm(0, 1)\n>>> cdfs = target.cdf(x)\n>>> cdfs\narray([0.0819612 , 0.44630594, 0.5453811 , 0.57534543, 0.9656205 ]) \n```", "```py\n>>> n = len(x)\n>>> ecdfs = np.arange(n+1, dtype=float)/n\n>>> cols = np.column_stack([x, ecdfs[1:], cdfs, cdfs - ecdfs[:n],\n...                        ecdfs[1:] - cdfs])\n>>> with np.printoptions(precision=3):\n...    print(cols)\n[[-1.392  0.2    0.082  0.082  0.118]\n [-0.135  0.4    0.446  0.246 -0.046]\n [ 0.114  0.6    0.545  0.145  0.055]\n [ 0.19   0.8    0.575 -0.025  0.225]\n [ 1.82   1\\.     0.966  0.166  0.034]]\n>>> gaps = cols[:, -2:]\n>>> Dnpm = np.max(gaps, axis=0)\n>>> print(f'Dn-={Dnpm[0]:f}, Dn+={Dnpm[1]:f}')\nDn-=0.246306, Dn+=0.224655\n>>> probs = smirnov(n, Dnpm)\n>>> print(f'For a sample of size {n} drawn from N(0, 1):',\n...       f' Smirnov n={n}: Prob(Dn- >= {Dnpm[0]:f}) = {probs[0]:.4f}',\n...       f' Smirnov n={n}: Prob(Dn+ >= {Dnpm[1]:f}) = {probs[1]:.4f}',\n...       sep='\\n')\nFor a sample of size 5 drawn from N(0, 1):\n Smirnov n=5: Prob(Dn- >= 0.246306) = 0.4711\n Smirnov n=5: Prob(Dn+ >= 0.224655) = 0.5245 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.step(np.concatenate(([-2.5], x, [2.5])),\n...          np.concatenate((ecdfs, [1])),\n...          where='post', label='Empirical CDF')\n>>> xx = np.linspace(-2.5, 2.5, 100)\n>>> plt.plot(xx, target.cdf(xx), '--', label='CDF for N(0, 1)') \n```", "```py\n>>> iminus, iplus = np.argmax(gaps, axis=0)\n>>> plt.vlines([x[iminus]], ecdfs[iminus], cdfs[iminus], color='r',\n...            alpha=0.5, lw=4)\n>>> plt.vlines([x[iplus]], cdfs[iplus], ecdfs[iplus+1], color='m',\n...            alpha=0.5, lw=4) \n```", "```py\n>>> plt.grid(True)\n>>> plt.legend(framealpha=1, shadow=True)\n>>> plt.show() \n```"]