- en: Geometry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/geometry/index.html](https://docs.sympy.org/latest/modules/geometry/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The geometry module for SymPy allows one to create two-dimensional geometrical
    entities, such as lines and circles, and query for information about these entities.
    This could include asking the area of an ellipse, checking for collinearity of
    a set of points, or finding the intersection between two lines. The primary use
    case of the module involves entities with numerical values, but it is possible
    to also use symbolic representations.
  prefs: []
  type: TYPE_NORMAL
- en: Available Entities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following entities are currently available in the geometry module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Line`](lines.html#sympy.geometry.line.Line "sympy.geometry.line.Line"), [`Segment`](lines.html#sympy.geometry.line.Segment
    "sympy.geometry.line.Segment"), [`Ray`](lines.html#sympy.geometry.line.Ray "sympy.geometry.line.Ray")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Ellipse`](ellipses.html#sympy.geometry.ellipse.Ellipse "sympy.geometry.ellipse.Ellipse"),
    [`Circle`](ellipses.html#sympy.geometry.ellipse.Circle "sympy.geometry.ellipse.Circle")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Polygon`](polygons.html#sympy.geometry.polygon.Polygon "sympy.geometry.polygon.Polygon"),
    [`RegularPolygon`](polygons.html#sympy.geometry.polygon.RegularPolygon "sympy.geometry.polygon.RegularPolygon"),
    [`Triangle`](polygons.html#sympy.geometry.polygon.Triangle "sympy.geometry.polygon.Triangle")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most of the work one will do will be through the properties and methods of
    these entities, but several global methods exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '`intersection(entity1, entity2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`are_similar(entity1, entity2)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`convex_hull(points)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a full API listing and an explanation of the methods and their return values
    please see the list of classes at the end of this document.
  prefs: []
  type: TYPE_NORMAL
- en: Example Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following Python session gives one an idea of how to work with some of the
    geometry module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Intersection of medians
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'An in-depth example: Pappus’ Hexagon Theorem'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From Wikipedia ([[WikiPappus]](#wikipappus)):'
  prefs: []
  type: TYPE_NORMAL
- en: Given one set of collinear points \(A\), \(B\), \(C\), and another set of collinear
    points \(a\), \(b\), \(c\), then the intersection points \(X\), \(Y\), \(Z\) of
    line pairs \(Ab\) and \(aB\), \(Ac\) and \(aC\), \(Bc\) and \(bC\) are collinear.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[[WikiPappus](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Pappus’s Hexagon Theorem” Wikipedia, the Free Encyclopedia. Web. 26 Apr. 2013.
    <[https://en.wikipedia.org/wiki/Pappus’s_hexagon_theorem](https://en.wikipedia.org/wiki/Pappus's_hexagon_theorem)>
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The area property of `Polygon` and `Triangle` may return a positive or negative
    value, depending on whether or not the points are oriented counter-clockwise or
    clockwise, respectively. If you always want a positive value be sure to use the
    `abs` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although `Polygon` can refer to any type of polygon, the code has been written
    for simple polygons. Hence, expect potential problems if dealing with complex
    polygons (overlapping sides).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since SymPy is still in its infancy some things may not simplify properly and
    hence some things that should return `True` (e.g., `Point.is_collinear`) may not
    actually do so. Similarly, attempting to find the intersection of entities that
    do intersect may result in an empty result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future Work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Truth Setting Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When one deals with symbolic entities, it often happens that an assertion cannot
    be guaranteed. For example, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Even though the result is currently `False`, this is not *always* true. If the
    quantity \(z - y - 2*y*z + 2*y**2 == 0\) then the points will be collinear. It
    would be really nice to inform the user of this because such a quantity may be
    useful to a user for further calculation and, at the very least, being nice to
    know. This could be potentially done by returning an object (e.g., GeometryResult)
    that the user could use. This actually would not involve an extensive amount of
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Three Dimensions and Beyond
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently a limited subset of the geometry module has been extended to three
    dimensions, but it certainly would be a good addition to extend more. This would
    probably involve a fair amount of work since many of the algorithms used are specific
    to two dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Geometry Visualization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The plotting module is capable of plotting geometric entities. See [Plotting
    Geometric Entities](../plotting.html#plot-geom) in the plotting module entry.
  prefs: []
  type: TYPE_NORMAL
- en: Submodules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Entities](entities.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Utils](utils.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Points](points.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lines](lines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Curves](curves.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ellipses](ellipses.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Polygons](polygons.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plane](plane.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
