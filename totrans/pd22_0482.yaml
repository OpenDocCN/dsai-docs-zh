- en: pandas.Timestamp.round
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.round.html](https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.round.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Round the Timestamp to the specified resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**freq**str'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency string indicating the rounding resolution.
  prefs: []
  type: TYPE_NORMAL
- en: '**ambiguous**bool or {‘raise’, ‘NaT’}, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: 'The behavior is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: bool contains flags to determine if time is dst or not (note that this flag
    is only applicable for ambiguous fall dst dates).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT for an ambiguous time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an AmbiguousTimeError for an ambiguous time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nonexistent**{‘raise’, ‘shift_forward’, ‘shift_backward, ‘NaT’, timedelta},
    default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: A nonexistent time does not exist in a particular timezone where clocks moved
    forward due to DST.
  prefs: []
  type: TYPE_NORMAL
- en: ‘shift_forward’ will shift the nonexistent time forward to the closest existing
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘shift_backward’ will shift the nonexistent time backward to the closest existing
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘NaT’ will return NaT where there are nonexistent times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timedelta objects will shift nonexistent times by the timedelta.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘raise’ will raise an NonExistentTimeError if there are nonexistent times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new Timestamp rounded to the given resolution of freq
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError if the freq cannot be converted
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the Timestamp has a timezone, rounding will take place relative to the local
    (“wall”) time and re-localized to the same timezone. When rounding near daylight
    savings time, use `nonexistent` and `ambiguous` to control the re-localization
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a timestamp object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A timestamp can be rounded using multiple frequency units:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`freq` can also be a multiple of a single unit, like ‘5min’ (i.e. 5 minutes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'or a combination of multiple units, like ‘1h30min’ (i.e. 1 hour and 30 minutes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Analogous for `pd.NaT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When rounding near a daylight savings time transition, use `ambiguous` or `nonexistent`
    to control how the timestamp should be re-localized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
