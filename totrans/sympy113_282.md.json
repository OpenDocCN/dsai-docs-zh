["```py\nsympy.polys.polytools.poly(expr, *gens, **args)\n```", "```py\n>>> from sympy import poly\n>>> from sympy.abc import x \n```", "```py\n>>> poly(x*(x**2 + x - 1)**2)\nPoly(x**5 + 2*x**4 - x**3 - 2*x**2 + x, x, domain='ZZ') \n```", "```py\nsympy.polys.polytools.poly_from_expr(expr, *gens, **args)\n```", "```py\nsympy.polys.polytools.parallel_poly_from_expr(exprs, *gens, **args)\n```", "```py\nsympy.polys.polytools.degree(f, gen=0)\n```", "```py\n>>> from sympy import degree\n>>> from sympy.abc import x, y \n```", "```py\n>>> degree(x**2 + y*x + 1, gen=x)\n2\n>>> degree(x**2 + y*x + 1, gen=y)\n1\n>>> degree(0, x)\n-oo \n```", "```py\nsympy.polys.polytools.degree_list(f, *gens, **args)\n```", "```py\n>>> from sympy import degree_list\n>>> from sympy.abc import x, y \n```", "```py\n>>> degree_list(x**2 + y*x + 1)\n(2, 1) \n```", "```py\nsympy.polys.polytools.LC(f, *gens, **args)\n```", "```py\n>>> from sympy import LC\n>>> from sympy.abc import x, y \n```", "```py\n>>> LC(4*x**2 + 2*x*y**2 + x*y + 3*y)\n4 \n```", "```py\nsympy.polys.polytools.LM(f, *gens, **args)\n```", "```py\n>>> from sympy import LM\n>>> from sympy.abc import x, y \n```", "```py\n>>> LM(4*x**2 + 2*x*y**2 + x*y + 3*y)\nx**2 \n```", "```py\nsympy.polys.polytools.LT(f, *gens, **args)\n```", "```py\n>>> from sympy import LT\n>>> from sympy.abc import x, y \n```", "```py\n>>> LT(4*x**2 + 2*x*y**2 + x*y + 3*y)\n4*x**2 \n```", "```py\nsympy.polys.polytools.pdiv(f, g, *gens, **args)\n```", "```py\n>>> from sympy import pdiv\n>>> from sympy.abc import x \n```", "```py\n>>> pdiv(x**2 + 1, 2*x - 4)\n(2*x + 4, 20) \n```", "```py\nsympy.polys.polytools.prem(f, g, *gens, **args)\n```", "```py\n>>> from sympy import prem\n>>> from sympy.abc import x \n```", "```py\n>>> prem(x**2 + 1, 2*x - 4)\n20 \n```", "```py\nsympy.polys.polytools.pquo(f, g, *gens, **args)\n```", "```py\n>>> from sympy import pquo\n>>> from sympy.abc import x \n```", "```py\n>>> pquo(x**2 + 1, 2*x - 4)\n2*x + 4\n>>> pquo(x**2 - 1, 2*x - 1)\n2*x + 1 \n```", "```py\nsympy.polys.polytools.pexquo(f, g, *gens, **args)\n```", "```py\n>>> from sympy import pexquo\n>>> from sympy.abc import x \n```", "```py\n>>> pexquo(x**2 - 1, 2*x - 2)\n2*x + 2 \n```", "```py\n>>> pexquo(x**2 + 1, 2*x - 4)\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x - 4 does not divide x**2 + 1 \n```", "```py\nsympy.polys.polytools.div(f, g, *gens, **args)\n```", "```py\n>>> from sympy import div, ZZ, QQ\n>>> from sympy.abc import x \n```", "```py\n>>> div(x**2 + 1, 2*x - 4, domain=ZZ)\n(0, x**2 + 1)\n>>> div(x**2 + 1, 2*x - 4, domain=QQ)\n(x/2 + 1, 5) \n```", "```py\nsympy.polys.polytools.rem(f, g, *gens, **args)\n```", "```py\n>>> from sympy import rem, ZZ, QQ\n>>> from sympy.abc import x \n```", "```py\n>>> rem(x**2 + 1, 2*x - 4, domain=ZZ)\nx**2 + 1\n>>> rem(x**2 + 1, 2*x - 4, domain=QQ)\n5 \n```", "```py\nsympy.polys.polytools.quo(f, g, *gens, **args)\n```", "```py\n>>> from sympy import quo\n>>> from sympy.abc import x \n```", "```py\n>>> quo(x**2 + 1, 2*x - 4)\nx/2 + 1\n>>> quo(x**2 - 1, x - 1)\nx + 1 \n```", "```py\nsympy.polys.polytools.exquo(f, g, *gens, **args)\n```", "```py\n>>> from sympy import exquo\n>>> from sympy.abc import x \n```", "```py\n>>> exquo(x**2 - 1, x - 1)\nx + 1 \n```", "```py\n>>> exquo(x**2 + 1, 2*x - 4)\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x - 4 does not divide x**2 + 1 \n```", "```py\nsympy.polys.polytools.half_gcdex(f, g, *gens, **args)\n```", "```py\n>>> from sympy import half_gcdex\n>>> from sympy.abc import x \n```", "```py\n>>> half_gcdex(x**4 - 2*x**3 - 6*x**2 + 12*x + 15, x**3 + x**2 - 4*x - 4)\n(3/5 - x/5, x + 1) \n```", "```py\nsympy.polys.polytools.gcdex(f, g, *gens, **args)\n```", "```py\n>>> from sympy import gcdex\n>>> from sympy.abc import x \n```", "```py\n>>> gcdex(x**4 - 2*x**3 - 6*x**2 + 12*x + 15, x**3 + x**2 - 4*x - 4)\n(3/5 - x/5, x**2/5 - 6*x/5 + 2, x + 1) \n```", "```py\nsympy.polys.polytools.invert(f, g, *gens, **args)\n```", "```py\n>>> from sympy import invert, S, mod_inverse\n>>> from sympy.abc import x \n```", "```py\n>>> invert(x**2 - 1, 2*x - 1)\n-4/3 \n```", "```py\n>>> invert(x**2 - 1, x - 1)\nTraceback (most recent call last):\n...\nNotInvertible: zero divisor \n```", "```py\n>>> mod_inverse(3, 5)\n2\n>>> (S(2)/5).invert(S(7)/3)\n5/2 \n```", "```py\nsympy.polys.polytools.subresultants(f, g, *gens, **args)\n```", "```py\n>>> from sympy import subresultants\n>>> from sympy.abc import x \n```", "```py\n>>> subresultants(x**2 + 1, x**2 - 1)\n[x**2 + 1, x**2 - 1, -2] \n```", "```py\nsympy.polys.polytools.resultant(f, g, *gens, includePRS=False, **args)\n```", "```py\n>>> from sympy import resultant\n>>> from sympy.abc import x \n```", "```py\n>>> resultant(x**2 + 1, x**2 - 1)\n4 \n```", "```py\nsympy.polys.polytools.discriminant(f, *gens, **args)\n```", "```py\n>>> from sympy import discriminant\n>>> from sympy.abc import x \n```", "```py\n>>> discriminant(x**2 + 2*x + 3)\n-8 \n```", "```py\nsympy.polys.polytools.terms_gcd(f, *gens, **args)\n```", "```py\n>>> from sympy import terms_gcd, cos\n>>> from sympy.abc import x, y\n>>> terms_gcd(x**6*y**2 + x**3*y, x, y)\nx**3*y*(x**3*y + 1) \n```", "```py\n>>> terms_gcd((3+3*x)*(x+x*y))\n3*x*(x*y + x + y + 1) \n```", "```py\n>>> terms_gcd((3+3*x)*(x+x*y), expand=False)\n(3*x + 3)*(x*y + x) \n```", "```py\n>>> terms_gcd((3 + 3*x)*(x + x*y), expand=False, deep=True)\n3*x*(x + 1)*(y + 1)\n>>> terms_gcd(cos(x + x*y), deep=True)\ncos(x*(y + 1)) \n```", "```py\n>>> terms_gcd(x + y/2)\n(2*x + y)/2 \n```", "```py\n>>> terms_gcd(x + y/2, clear=False)\nx + y/2\n>>> terms_gcd(x*y/2 + y**2, clear=False)\ny*(x/2 + y) \n```", "```py\n>>> terms_gcd(x/3 + y/2, clear=False)\n(2*x + 3*y)/6 \n```", "```py\nsympy.polys.polytools.cofactors(f, g, *gens, **args)\n```", "```py\n>>> from sympy import cofactors\n>>> from sympy.abc import x \n```", "```py\n>>> cofactors(x**2 - 1, x**2 - 3*x + 2)\n(x - 1, x + 1, x - 2) \n```", "```py\nsympy.polys.polytools.gcd(f, g=None, *gens, **args)\n```", "```py\n>>> from sympy import gcd\n>>> from sympy.abc import x \n```", "```py\n>>> gcd(x**2 - 1, x**2 - 3*x + 2)\nx - 1 \n```", "```py\nsympy.polys.polytools.gcd_list(seq, *gens, **args)\n```", "```py\n>>> from sympy import gcd_list\n>>> from sympy.abc import x \n```", "```py\n>>> gcd_list([x**3 - 1, x**2 - 1, x**2 - 3*x + 2])\nx - 1 \n```", "```py\nsympy.polys.polytools.lcm(f, g=None, *gens, **args)\n```", "```py\n>>> from sympy import lcm\n>>> from sympy.abc import x \n```", "```py\n>>> lcm(x**2 - 1, x**2 - 3*x + 2)\nx**3 - 2*x**2 - x + 2 \n```", "```py\nsympy.polys.polytools.lcm_list(seq, *gens, **args)\n```", "```py\n>>> from sympy import lcm_list\n>>> from sympy.abc import x \n```", "```py\n>>> lcm_list([x**3 - 1, x**2 - 1, x**2 - 3*x + 2])\nx**5 - x**4 - 2*x**3 - x**2 + x + 2 \n```", "```py\nsympy.polys.polytools.trunc(f, p, *gens, **args)\n```", "```py\n>>> from sympy import trunc\n>>> from sympy.abc import x \n```", "```py\n>>> trunc(2*x**3 + 3*x**2 + 5*x + 7, 3)\n-x**3 - x + 1 \n```", "```py\nsympy.polys.polytools.monic(f, *gens, **args)\n```", "```py\n>>> from sympy import monic\n>>> from sympy.abc import x \n```", "```py\n>>> monic(3*x**2 + 4*x + 2)\nx**2 + 4*x/3 + 2/3 \n```", "```py\nsympy.polys.polytools.content(f, *gens, **args)\n```", "```py\n>>> from sympy import content\n>>> from sympy.abc import x \n```", "```py\n>>> content(6*x**2 + 8*x + 12)\n2 \n```", "```py\nsympy.polys.polytools.primitive(f, *gens, **args)\n```", "```py\n>>> from sympy.polys.polytools import primitive\n>>> from sympy.abc import x \n```", "```py\n>>> primitive(6*x**2 + 8*x + 12)\n(2, 3*x**2 + 4*x + 6) \n```", "```py\n>>> eq = (2 + 2*x)*x + 2 \n```", "```py\n>>> primitive(eq)\n(2, x**2 + x + 1) \n```", "```py\n>>> primitive(eq, expand=False)\n(1, x*(2*x + 2) + 2) \n```", "```py\n>>> eq.as_content_primitive()\n(2, x*(x + 1) + 1) \n```", "```py\nsympy.polys.polytools.compose(f, g, *gens, **args)\n```", "```py\n>>> from sympy import compose\n>>> from sympy.abc import x \n```", "```py\n>>> compose(x**2 + x, x - 1)\nx**2 - x \n```", "```py\nsympy.polys.polytools.decompose(f, *gens, **args)\n```", "```py\n>>> from sympy import decompose\n>>> from sympy.abc import x \n```", "```py\n>>> decompose(x**4 + 2*x**3 - x - 1)\n[x**2 - x - 1, x**2 + x] \n```", "```py\nsympy.polys.polytools.sturm(f, *gens, **args)\n```", "```py\n>>> from sympy import sturm\n>>> from sympy.abc import x \n```", "```py\n>>> sturm(x**3 - 2*x**2 + x - 3)\n[x**3 - 2*x**2 + x - 3, 3*x**2 - 4*x + 1, 2*x/9 + 25/9, -2079/4] \n```", "```py\nsympy.polys.polytools.gff_list(f, *gens, **args)\n```", "```py\n>>> from sympy import gff_list, ff, Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(x**5 + 2*x**4 - x**3 - 2*x**2, x) \n```", "```py\n>>> gff_list(f)\n[(Poly(x, x, domain='ZZ'), 1), (Poly(x + 2, x, domain='ZZ'), 4)] \n```", "```py\n>>> (ff(Poly(x), 1)*ff(Poly(x + 2), 4)) == f\nTrue \n```", "```py\n>>> f = Poly(x**12 + 6*x**11 - 11*x**10 - 56*x**9 + 220*x**8 + 208*x**7 -         1401*x**6 + 1090*x**5 + 2715*x**4 - 6720*x**3 - 1092*x**2 + 5040*x, x) \n```", "```py\n>>> gff_list(f)\n[(Poly(x**3 + 7, x, domain='ZZ'), 2), (Poly(x**2 + 5*x, x, domain='ZZ'), 3)] \n```", "```py\n>>> ff(Poly(x**3 + 7, x), 2)*ff(Poly(x**2 + 5*x, x), 3) == f\nTrue \n```", "```py\nsympy.polys.polytools.gff(f, *gens, **args)\n```", "```py\nsympy.polys.polytools.sqf_norm(f, *gens, **args)\n```", "```py\n>>> from sympy import sqf_norm, sqrt\n>>> from sympy.abc import x \n```", "```py\n>>> sqf_norm(x**2 + 1, extension=[sqrt(3)])\n([1], x**2 - 2*sqrt(3)*x + 4, x**4 - 4*x**2 + 16) \n```", "```py\nsympy.polys.polytools.sqf_part(f, *gens, **args)\n```", "```py\n>>> from sympy import sqf_part\n>>> from sympy.abc import x \n```", "```py\n>>> sqf_part(x**3 - 3*x - 2)\nx**2 - x - 2 \n```", "```py\nsympy.polys.polytools.sqf_list(f, *gens, **args)\n```", "```py\n>>> from sympy import sqf_list\n>>> from sympy.abc import x \n```", "```py\n>>> sqf_list(2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16)\n(2, [(x + 1, 2), (x + 2, 3)]) \n```", "```py\nsympy.polys.polytools.sqf(f, *gens, **args)\n```", "```py\n>>> from sympy import sqf\n>>> from sympy.abc import x \n```", "```py\n>>> sqf(2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16)\n2*(x + 1)**2*(x + 2)**3 \n```", "```py\nsympy.polys.polytools.factor_list(f, *gens, **args)\n```", "```py\n>>> from sympy import factor_list\n>>> from sympy.abc import x, y \n```", "```py\n>>> factor_list(2*x**5 + 2*x**4*y + 4*x**3 + 4*x**2*y + 2*x + 2*y)\n(2, [(x + y, 1), (x**2 + 1, 2)]) \n```", "```py\nsympy.polys.polytools.factor(f, *gens, deep=False, **args)\n```", "```py\n>>> from sympy import factor, sqrt, exp\n>>> from sympy.abc import x, y \n```", "```py\n>>> factor(2*x**5 + 2*x**4*y + 4*x**3 + 4*x**2*y + 2*x + 2*y)\n2*(x + y)*(x**2 + 1)**2 \n```", "```py\n>>> factor(x**2 + 1)\nx**2 + 1\n>>> factor(x**2 + 1, modulus=2)\n(x + 1)**2\n>>> factor(x**2 + 1, gaussian=True)\n(x - I)*(x + I) \n```", "```py\n>>> factor(x**2 - 2, extension=sqrt(2))\n(x - sqrt(2))*(x + sqrt(2)) \n```", "```py\n>>> factor((x**2 - 1)/(x**2 + 4*x + 4))\n(x - 1)*(x + 1)/(x + 2)**2\n>>> factor((x**2 + 4*x + 4)**10000000*(x**2 + 1))\n(x + 2)**20000000*(x**2 + 1) \n```", "```py\n>>> eq = 2**(x**2 + 2*x + 1)\n>>> factor(eq)\n2**(x**2 + 2*x + 1) \n```", "```py\n>>> factor(eq, deep=True)\n2**((x + 1)**2) \n```", "```py\n>>> factor(5*x + 3*exp(2 - 7*x), deep=True)\n(5*x*exp(7*x) + 3*exp(2))*exp(-7*x)\n>>> factor(5*x + 3*exp(2 - 7*x), deep=True, fraction=False)\n5*x + 3*exp(2)*exp(-7*x) \n```", "```py\nsympy.polys.polytools.intervals(F, all=False, eps=None, inf=None, sup=None, strict=False, fast=False, sqf=False)\n```", "```py\n>>> from sympy import intervals\n>>> from sympy.abc import x \n```", "```py\n>>> intervals(x**2 - 3)\n[((-2, -1), 1), ((1, 2), 1)]\n>>> intervals(x**2 - 3, eps=1e-2)\n[((-26/15, -19/11), 1), ((19/11, 26/15), 1)] \n```", "```py\nsympy.polys.polytools.refine_root(f, s, t, eps=None, steps=None, fast=False, check_sqf=False)\n```", "```py\n>>> from sympy import refine_root\n>>> from sympy.abc import x \n```", "```py\n>>> refine_root(x**2 - 3, 1, 2, eps=1e-2)\n(19/11, 26/15) \n```", "```py\nsympy.polys.polytools.count_roots(f, inf=None, sup=None)\n```", "```py\n>>> from sympy import count_roots, I\n>>> from sympy.abc import x \n```", "```py\n>>> count_roots(x**4 - 4, -3, 3)\n2\n>>> count_roots(x**4 - 4, 0, 1 + 3*I)\n1 \n```", "```py\nsympy.polys.polytools.all_roots(f, multiple=True, radicals=True)\n```", "```py\n>>> from sympy import all_roots\n>>> from sympy.abc import x, y \n```", "```py\n>>> print(all_roots(x**3 + 1))\n[-1, 1/2 - sqrt(3)*I/2, 1/2 + sqrt(3)*I/2] \n```", "```py\n>>> print(all_roots(x**3 + x + 1))\n[CRootOf(x**3 + x + 1, 0), CRootOf(x**3 + x + 1, 1), CRootOf(x**3 + x + 1, 2)] \n```", "```py\n>>> p = x**5 - x - 1\n>>> for r in all_roots(p): print(r)\nCRootOf(x**5 - x - 1, 0)\nCRootOf(x**5 - x - 1, 1)\nCRootOf(x**5 - x - 1, 2)\nCRootOf(x**5 - x - 1, 3)\nCRootOf(x**5 - x - 1, 4)\n>>> [r.evalf(3) for r in all_roots(p)]\n[1.17, -0.765 - 0.352*I, -0.765 + 0.352*I, 0.181 - 1.08*I, 0.181 + 1.08*I] \n```", "```py\n>>> from sympy import sqrt, expand\n>>> p = expand((x - sqrt(2))*(x - sqrt(3)))\n>>> print(p)\nx**2 - sqrt(3)*x - sqrt(2)*x + sqrt(6)\n>>> all_roots(p)\nTraceback (most recent call last):\n...\nNotImplementedError: sorted roots not supported over EX \n```", "```py\n>>> from sympy import ground_roots\n>>> ground_roots(p, x, extension=True)\n{sqrt(2): 1, sqrt(3): 1} \n```", "```py\n>>> from sympy import nroots\n>>> nroots(p, 5)\n[1.4142, 1.732] \n```", "```py\n>>> from sympy import roots, ground_roots\n>>> p = x**2 - 3*x*y + 2*y**2\n>>> roots(p, x)\n{y: 1, 2*y: 1}\n>>> ground_roots(p, x)\n{y: 1, 2*y: 1} \n```", "```py\nsympy.polys.polytools.real_roots(f, multiple=True, radicals=True)\n```", "```py\n>>> from sympy import real_roots\n>>> from sympy.abc import x, y \n```", "```py\n>>> real_roots(2*x**3 - 7*x**2 + 4*x + 4)\n[-1/2, 2, 2]\n>>> real_roots(2*x**3 - 7*x**2 + 4*x + 4, multiple=False)\n[(-1/2, 1), (2, 2)] \n```", "```py\n>>> p = x**9 + 2*x + 2\n>>> print(real_roots(p))\n[CRootOf(x**9 + 2*x + 2, 0)]\n>>> [r.evalf(3) for r in real_roots(p)]\n[-0.865] \n```", "```py\n>>> p = (x + 7)*(x**2 - 2)*(x**3 + x + 1)\n>>> print(real_roots(p))\n[-7, -sqrt(2), CRootOf(x**3 + x + 1, 0), sqrt(2)]\n>>> print(real_roots(p, radicals=False))\n[-7, CRootOf(x**2 - 2, 0), CRootOf(x**3 + x + 1, 0), CRootOf(x**2 - 2, 1)] \n```", "```py\n>>> from sympy import roots\n>>> p = 2*x**3 - 9*x**2 - 6*x + 3\n>>> [r.evalf(5) for r in roots(p, multiple=True)]\n[5.0365 - 0.e-11*I, 0.33984 + 0.e-13*I, -0.87636 + 0.e-10*I]\n>>> [r.evalf(5) for r in real_roots(p, x)]\n[-0.87636, 0.33984, 5.0365]\n>>> [r.is_real for r in roots(p, multiple=True)]\n[None, None, None]\n>>> [r.is_real for r in real_roots(p)]\n[True, True, True] \n```", "```py\n>>> from sympy import all_roots\n>>> r = [r for r in all_roots(p) if r.is_real]\n>>> real_roots(p) == r\nTrue \n```", "```py\n>>> from sympy import sqrt, expand\n>>> p = expand((x - sqrt(2))*(x - sqrt(3)))\n>>> print(p)\nx**2 - sqrt(3)*x - sqrt(2)*x + sqrt(6)\n>>> real_roots(p)\nTraceback (most recent call last):\n...\nNotImplementedError: sorted roots not supported over EX \n```", "```py\n>>> from sympy import ground_roots\n>>> ground_roots(p, x, extension=True)\n{sqrt(2): 1, sqrt(3): 1} \n```", "```py\n>>> from sympy import nroots\n>>> nroots(p, 5)\n[1.4142, 1.732] \n```", "```py\n>>> from sympy import roots, ground_roots\n>>> p = x**2 - 3*x*y + 2*y**2\n>>> roots(p, x)\n{y: 1, 2*y: 1}\n>>> ground_roots(p, x)\n{y: 1, 2*y: 1} \n```", "```py\nsympy.polys.polytools.nroots(f, n=15, maxsteps=50, cleanup=True)\n```", "```py\n>>> from sympy import nroots\n>>> from sympy.abc import x \n```", "```py\n>>> nroots(x**2 - 3, n=15)\n[-1.73205080756888, 1.73205080756888]\n>>> nroots(x**2 - 3, n=30)\n[-1.73205080756887729352744634151, 1.73205080756887729352744634151] \n```", "```py\nsympy.polys.polytools.ground_roots(f, *gens, **args)\n```", "```py\n>>> from sympy import ground_roots\n>>> from sympy.abc import x \n```", "```py\n>>> ground_roots(x**6 - 4*x**4 + 4*x**3 - x**2)\n{0: 2, 1: 2} \n```", "```py\nsympy.polys.polytools.nth_power_roots_poly(f, n, *gens, **args)\n```", "```py\n>>> from sympy import nth_power_roots_poly, factor, roots\n>>> from sympy.abc import x \n```", "```py\n>>> f = x**4 - x**2 + 1\n>>> g = factor(nth_power_roots_poly(f, 2)) \n```", "```py\n>>> g\n(x**2 - x + 1)**2 \n```", "```py\n>>> R_f = [ (r**2).expand() for r in roots(f) ]\n>>> R_g = roots(g).keys() \n```", "```py\n>>> set(R_f) == set(R_g)\nTrue \n```", "```py\nsympy.polys.polytools.cancel(f, *gens, _signsimp=True, **args)\n```", "```py\n>>> from sympy import cancel, sqrt, Symbol, together\n>>> from sympy.abc import x\n>>> A = Symbol('A', commutative=False) \n```", "```py\n>>> cancel((2*x**2 - 2)/(x**2 - 2*x + 1))\n(2*x + 2)/(x - 1)\n>>> cancel((sqrt(3) + sqrt(15)*A)/(sqrt(2) + sqrt(10)*A))\nsqrt(6)/2 \n```", "```py\n>>> cancel(x/2 + 1)\nx/2 + 1\n>>> together(_)\n(x + 2)/2 \n```", "```py\nsympy.polys.polytools.reduced(f, G, *gens, **args)\n```", "```py\n>>> from sympy import reduced\n>>> from sympy.abc import x, y \n```", "```py\n>>> reduced(2*x**4 + y**2 - x**2 + y**3, [x**3 - x, y**3 - y])\n([2*x, 1], x**2 + y**2 + y) \n```", "```py\nsympy.polys.polytools.groebner(F, *gens, **args)\n```", "```py\n>>> from sympy import groebner\n>>> from sympy.abc import x, y \n```", "```py\n>>> F = [x*y - 2*y, 2*y**2 - x**2] \n```", "```py\n>>> groebner(F, x, y, order='lex')\nGroebnerBasis([x**2 - 2*y**2, x*y - 2*y, y**3 - 2*y], x, y,\n domain='ZZ', order='lex')\n>>> groebner(F, x, y, order='grlex')\nGroebnerBasis([y**3 - 2*y, x**2 - 2*y**2, x*y - 2*y], x, y,\n domain='ZZ', order='grlex')\n>>> groebner(F, x, y, order='grevlex')\nGroebnerBasis([y**3 - 2*y, x**2 - 2*y**2, x*y - 2*y], x, y,\n domain='ZZ', order='grevlex') \n```", "```py\n>>> F = [x**2 - x - 1, (2*x - 1) * y - (x**10 - (1 - x)**10)] \n```", "```py\n>>> groebner(F, x, y, method='buchberger')\nGroebnerBasis([x**2 - x - 1, y - 55], x, y, domain='ZZ', order='lex')\n>>> groebner(F, x, y, method='f5b')\nGroebnerBasis([x**2 - x - 1, y - 55], x, y, domain='ZZ', order='lex') \n```", "```py\nsympy.polys.polytools.is_zero_dimensional(F, *gens, **args)\n```", "```py\nclass sympy.polys.polytools.Poly(rep, *gens, **args)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x*(x**2 + x - 1)**2)\nPoly(x**5 + 2*x**4 - x**3 - 2*x**2 + x, x, domain='ZZ') \n```", "```py\n>>> from sympy import sqrt\n>>> Poly(x**2 + 2*x + sqrt(3), domain='R')\nPoly(1.0*x**2 + 2.0*x + 1.73205080756888, x, domain='RR') \n```", "```py\n>>> Poly(y*x**2 + x*y + 1)\nPoly(x**2*y + x*y + 1, x, y, domain='ZZ') \n```", "```py\n>>> Poly(y*x**2 + x*y + 1,x)\nPoly(y*x**2 + y*x + 1, x, domain='ZZ[y]') \n```", "```py\n>>> Poly(y*x**2 + x*y + 1,x).eval(2)\n6*y + 1 \n```", "```py\nEC(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x**2 + 3*x, x).EC()\n3 \n```", "```py\nEM(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(4*x**2 + 2*x*y**2 + x*y + 3*y, x, y).EM()\nx**0*y**1 \n```", "```py\nET(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(4*x**2 + 2*x*y**2 + x*y + 3*y, x, y).ET()\n(x**0*y**1, 3) \n```", "```py\nLC(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(4*x**3 + 2*x**2 + 3*x, x).LC()\n4 \n```", "```py\nLM(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(4*x**2 + 2*x*y**2 + x*y + 3*y, x, y).LM()\nx**2*y**0 \n```", "```py\nLT(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(4*x**2 + 2*x*y**2 + x*y + 3*y, x, y).LT()\n(x**2*y**0, 4) \n```", "```py\nTC()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x**2 + 3*x, x).TC()\n0 \n```", "```py\nabs()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).abs()\nPoly(x**2 + 1, x, domain='ZZ') \n```", "```py\nadd(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).add(Poly(x - 2, x))\nPoly(x**2 + x - 1, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x) + Poly(x - 2, x)\nPoly(x**2 + x - 1, x, domain='ZZ') \n```", "```py\nadd_ground(coeff)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x + 1).add_ground(2)\nPoly(x + 3, x, domain='ZZ') \n```", "```py\nall_coeffs()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x - 1, x).all_coeffs()\n[1, 0, 2, -1] \n```", "```py\nall_monoms()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x - 1, x).all_monoms()\n[(3,), (2,), (1,), (0,)] \n```", "```py\nall_roots(multiple=True, radicals=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**3 - 7*x**2 + 4*x + 4).all_roots()\n[-1/2, 2, 2]\n>>> Poly(x**3 + x + 1).all_roots()\n[CRootOf(x**3 + x + 1, 0),\n CRootOf(x**3 + x + 1, 1),\n CRootOf(x**3 + x + 1, 2)] \n```", "```py\nall_terms()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x - 1, x).all_terms()\n[((3,), 1), ((2,), 0), ((1,), 2), ((0,), -1)] \n```", "```py\nas_dict(native=False, zero=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 2*x*y**2 - y, x, y).as_dict()\n{(0, 1): -1, (1, 2): 2, (2, 0): 1} \n```", "```py\nas_expr(*gens)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = Poly(x**2 + 2*x*y**2 - y, x, y) \n```", "```py\n>>> f.as_expr()\nx**2 + 2*x*y**2 - y\n>>> f.as_expr({x: 5})\n10*y**2 - y + 25\n>>> f.as_expr(5, 6)\n379 \n```", "```py\nas_list(native=False)\n```", "```py\nas_poly(*gens, **args)\n```", "```py\n>>> from sympy import sin\n>>> from sympy.abc import x, y \n```", "```py\n>>> print((x**2 + x*y).as_poly())\nPoly(x**2 + x*y, x, y, domain='ZZ') \n```", "```py\n>>> print((x**2 + x*y).as_poly(x, y))\nPoly(x**2 + x*y, x, y, domain='ZZ') \n```", "```py\n>>> print((x**2 + sin(y)).as_poly(x, y))\nNone \n```", "```py\ncancel(g, include=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**2 - 2, x).cancel(Poly(x**2 - 2*x + 1, x))\n(1, Poly(2*x + 2, x, domain='ZZ'), Poly(x - 1, x, domain='ZZ')) \n```", "```py\n>>> Poly(2*x**2 - 2, x).cancel(Poly(x**2 - 2*x + 1, x), include=True)\n(Poly(2*x + 2, x, domain='ZZ'), Poly(x - 1, x, domain='ZZ')) \n```", "```py\nclear_denoms(convert=False)\n```", "```py\n>>> from sympy import Poly, S, QQ\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(x/2 + S(1)/3, x, domain=QQ) \n```", "```py\n>>> f.clear_denoms()\n(6, Poly(3*x + 2, x, domain='QQ'))\n>>> f.clear_denoms(convert=True)\n(6, Poly(3*x + 2, x, domain='ZZ')) \n```", "```py\ncoeff_monomial(monom)\n```", "```py\n>>> from sympy import Poly, exp\n>>> from sympy.abc import x, y \n```", "```py\n>>> p = Poly(24*x*y*exp(8) + 23*x, x, y) \n```", "```py\n>>> p.coeff_monomial(x)\n23\n>>> p.coeff_monomial(y)\n0\n>>> p.coeff_monomial(x*y)\n24*exp(8) \n```", "```py\n>>> p.as_expr().coeff(x)\n24*y*exp(8) + 23\n>>> p.as_expr().coeff(y)\n24*x*exp(8)\n>>> p.as_expr().coeff(x*y)\n24*exp(8) \n```", "```py\ncoeffs(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 + 2*x + 3, x).coeffs()\n[1, 2, 3] \n```", "```py\ncofactors(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).cofactors(Poly(x**2 - 3*x + 2, x))\n(Poly(x - 1, x, domain='ZZ'),\n Poly(x + 1, x, domain='ZZ'),\n Poly(x - 2, x, domain='ZZ')) \n```", "```py\ncompose(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + x, x).compose(Poly(x - 1, x))\nPoly(x**2 - x, x, domain='ZZ') \n```", "```py\ncontent()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(6*x**2 + 8*x + 12, x).content()\n2 \n```", "```py\ncount_roots(inf=None, sup=None)\n```", "```py\n>>> from sympy import Poly, I\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**4 - 4, x).count_roots(-3, 3)\n2\n>>> Poly(x**4 - 4, x).count_roots(0, 1 + 3*I)\n1 \n```", "```py\ndecompose()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**4 + 2*x**3 - x - 1, x, domain='ZZ').decompose()\n[Poly(x**2 - x - 1, x, domain='ZZ'), Poly(x**2 + x, x, domain='ZZ')] \n```", "```py\ndeflate()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**6*y**2 + x**3 + 1, x, y).deflate()\n((3, 2), Poly(x**2*y + x + 1, x, y, domain='ZZ')) \n```", "```py\ndegree(gen=0)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + y*x + 1, x, y).degree()\n2\n>>> Poly(x**2 + y*x + y, x, y).degree(y)\n1\n>>> Poly(0, x).degree()\n-oo \n```", "```py\ndegree_list()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + y*x + 1, x, y).degree_list()\n(2, 1) \n```", "```py\ndiff(*specs, **kwargs)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 2*x + 1, x).diff()\nPoly(2*x + 2, x, domain='ZZ') \n```", "```py\n>>> Poly(x*y**2 + x, x, y).diff((0, 0), (1, 1))\nPoly(2*x*y, x, y, domain='ZZ') \n```", "```py\ndiscriminant()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 2*x + 3, x).discriminant()\n-8 \n```", "```py\ndispersion(g=None)\n```", "```py\n>>> from sympy import poly\n>>> from sympy.polys.dispersion import dispersion, dispersionset\n>>> from sympy.abc import x \n```", "```py\n>>> fp = poly((x - 3)*(x + 3), x)\n>>> sorted(dispersionset(fp))\n[0, 6]\n>>> dispersion(fp)\n6 \n```", "```py\n>>> fp = poly(x**4 - 3*x**2 + 1, x)\n>>> gp = fp.shift(-3)\n>>> sorted(dispersionset(fp, gp))\n[2, 3, 4]\n>>> dispersion(fp, gp)\n4\n>>> sorted(dispersionset(gp, fp))\n[]\n>>> dispersion(gp, fp)\n-oo \n```", "```py\n>>> from sympy import sqrt\n>>> fp = poly(x**2 + sqrt(5)*x - 1, x, domain='QQ<sqrt(5)>')\n>>> gp = poly(x**2 + (2 + sqrt(5))*x + sqrt(5), x, domain='QQ<sqrt(5)>')\n>>> sorted(dispersionset(fp, gp))\n[2]\n>>> sorted(dispersionset(gp, fp))\n[1, 4] \n```", "```py\n>>> from sympy.abc import a\n>>> fp = poly(4*x**4 + (4*a + 8)*x**3 + (a**2 + 6*a + 4)*x**2 + (a**2 + 2*a)*x, x)\n>>> sorted(dispersionset(fp))\n[0, 1] \n```", "```py\ndispersionset(g=None)\n```", "```py\n>>> from sympy import poly\n>>> from sympy.polys.dispersion import dispersion, dispersionset\n>>> from sympy.abc import x \n```", "```py\n>>> fp = poly((x - 3)*(x + 3), x)\n>>> sorted(dispersionset(fp))\n[0, 6]\n>>> dispersion(fp)\n6 \n```", "```py\n>>> fp = poly(x**4 - 3*x**2 + 1, x)\n>>> gp = fp.shift(-3)\n>>> sorted(dispersionset(fp, gp))\n[2, 3, 4]\n>>> dispersion(fp, gp)\n4\n>>> sorted(dispersionset(gp, fp))\n[]\n>>> dispersion(gp, fp)\n-oo \n```", "```py\n>>> from sympy import sqrt\n>>> fp = poly(x**2 + sqrt(5)*x - 1, x, domain='QQ<sqrt(5)>')\n>>> gp = poly(x**2 + (2 + sqrt(5))*x + sqrt(5), x, domain='QQ<sqrt(5)>')\n>>> sorted(dispersionset(fp, gp))\n[2]\n>>> sorted(dispersionset(gp, fp))\n[1, 4] \n```", "```py\n>>> from sympy.abc import a\n>>> fp = poly(4*x**4 + (4*a + 8)*x**3 + (a**2 + 6*a + 4)*x**2 + (a**2 + 2*a)*x, x)\n>>> sorted(dispersionset(fp))\n[0, 1] \n```", "```py\ndiv(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).div(Poly(2*x - 4, x))\n(Poly(1/2*x + 1, x, domain='QQ'), Poly(5, x, domain='QQ')) \n```", "```py\n>>> Poly(x**2 + 1, x).div(Poly(2*x - 4, x), auto=False)\n(Poly(0, x, domain='ZZ'), Poly(x**2 + 1, x, domain='ZZ')) \n```", "```py\nproperty domain\n```", "```py\n>>> from sympy import Poly, Symbol\n>>> x = Symbol('x')\n>>> p = Poly(x**2 + x)\n>>> p\nPoly(x**2 + x, x, domain='ZZ')\n>>> p.domain\nZZ \n```", "```py\neject(*gens)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = Poly(x**2*y + x*y**3 + x*y + 1, x, y) \n```", "```py\n>>> f.eject(x)\nPoly(x*y**3 + (x**2 + x)*y + 1, y, domain='ZZ[x]')\n>>> f.eject(y)\nPoly(y*x**2 + (y**3 + y)*x + 1, x, domain='ZZ[y]') \n```", "```py\neval(x, a=None, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> Poly(x**2 + 2*x + 3, x).eval(2)\n11 \n```", "```py\n>>> Poly(2*x*y + 3*x + y + 2, x, y).eval(x, 2)\nPoly(5*y + 8, y, domain='ZZ') \n```", "```py\n>>> f = Poly(2*x*y + 3*x + y + 2*z, x, y, z) \n```", "```py\n>>> f.eval({x: 2})\nPoly(5*y + 2*z + 6, y, z, domain='ZZ')\n>>> f.eval({x: 2, y: 5})\nPoly(2*z + 31, z, domain='ZZ')\n>>> f.eval({x: 2, y: 5, z: 7})\n45 \n```", "```py\n>>> f.eval((2, 5))\nPoly(2*z + 31, z, domain='ZZ')\n>>> f(2, 5)\nPoly(2*z + 31, z, domain='ZZ') \n```", "```py\nexclude()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import a, b, c, d, x \n```", "```py\n>>> Poly(a + x, a, b, c, d, x).exclude()\nPoly(a + x, a, x, domain='ZZ') \n```", "```py\nexquo(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).exquo(Poly(x - 1, x))\nPoly(x + 1, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x).exquo(Poly(2*x - 4, x))\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x - 4 does not divide x**2 + 1 \n```", "```py\nexquo_ground(coeff)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x + 4).exquo_ground(2)\nPoly(x + 2, x, domain='ZZ') \n```", "```py\n>>> Poly(2*x + 3).exquo_ground(2)\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2 does not divide 3 in ZZ \n```", "```py\nfactor_list()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = 2*x**5 + 2*x**4*y + 4*x**3 + 4*x**2*y + 2*x + 2*y \n```", "```py\n>>> Poly(f).factor_list()\n(2, [(Poly(x + y, x, y, domain='ZZ'), 1),\n (Poly(x**2 + 1, x, y, domain='ZZ'), 2)]) \n```", "```py\nfactor_list_include()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = 2*x**5 + 2*x**4*y + 4*x**3 + 4*x**2*y + 2*x + 2*y \n```", "```py\n>>> Poly(f).factor_list_include()\n[(Poly(2*x + 2*y, x, y, domain='ZZ'), 1),\n (Poly(x**2 + 1, x, y, domain='ZZ'), 2)] \n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> Poly(x**2 + 1).free_symbols\n{x}\n>>> Poly(x**2 + y).free_symbols\n{x, y}\n>>> Poly(x**2 + y, x).free_symbols\n{x, y}\n>>> Poly(x**2 + y, x, z).free_symbols\n{x, y} \n```", "```py\nproperty free_symbols_in_domain\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 1).free_symbols_in_domain\nset()\n>>> Poly(x**2 + y).free_symbols_in_domain\nset()\n>>> Poly(x**2 + y, x).free_symbols_in_domain\n{y} \n```", "```py\nclassmethod from_dict(rep, *gens, **args)\n```", "```py\nclassmethod from_expr(rep, *gens, **args)\n```", "```py\nclassmethod from_list(rep, *gens, **args)\n```", "```py\nclassmethod from_poly(rep, *gens, **args)\n```", "```py\ngalois_group(by_name=False, max_tries=30, randomize=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x\n>>> f = Poly(x**4 - 2)\n>>> G, _ = f.galois_group(by_name=True)\n>>> print(G)\nS4TransitiveSubgroups.D4 \n```", "```py\ngcd(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).gcd(Poly(x**2 - 3*x + 2, x))\nPoly(x - 1, x, domain='ZZ') \n```", "```py\ngcdex(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = x**4 - 2*x**3 - 6*x**2 + 12*x + 15\n>>> g = x**3 + x**2 - 4*x - 4 \n```", "```py\n>>> Poly(f).gcdex(Poly(g))\n(Poly(-1/5*x + 3/5, x, domain='QQ'),\n Poly(1/5*x**2 - 6/5*x + 2, x, domain='QQ'),\n Poly(x + 1, x, domain='QQ')) \n```", "```py\nproperty gen\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).gen\nx \n```", "```py\nget_domain()\n```", "```py\nget_modulus()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, modulus=2).get_modulus()\n2 \n```", "```py\ngff_list()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = x**5 + 2*x**4 - x**3 - 2*x**2 \n```", "```py\n>>> Poly(f).gff_list()\n[(Poly(x, x, domain='ZZ'), 1), (Poly(x + 2, x, domain='ZZ'), 4)] \n```", "```py\nground_roots()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**6 - 4*x**4 + 4*x**3 - x**2).ground_roots()\n{0: 2, 1: 2} \n```", "```py\nhalf_gcdex(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = x**4 - 2*x**3 - 6*x**2 + 12*x + 15\n>>> g = x**3 + x**2 - 4*x - 4 \n```", "```py\n>>> Poly(f).half_gcdex(Poly(g))\n(Poly(-1/5*x + 3/5, x, domain='QQ'), Poly(x + 1, x, domain='QQ')) \n```", "```py\nhas_only_gens(*gens)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> Poly(x*y + 1, x, y, z).has_only_gens(x, y)\nTrue\n>>> Poly(x*y + z, x, y, z).has_only_gens(x, y)\nFalse \n```", "```py\nhomogeneous_order()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = Poly(x**5 + 2*x**3*y**2 + 9*x*y**4)\n>>> f.homogeneous_order()\n5 \n```", "```py\nhomogenize(s)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> f = Poly(x**5 + 2*x**2*y**2 + 9*x*y**3)\n>>> f.homogenize(z)\nPoly(x**5 + 2*x**2*y**2*z + 9*x*y**3*z, x, y, z, domain='ZZ') \n```", "```py\ninject(front=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = Poly(x**2*y + x*y**3 + x*y + 1, x) \n```", "```py\n>>> f.inject()\nPoly(x**2*y + x*y**3 + x*y + 1, x, y, domain='ZZ')\n>>> f.inject(front=True)\nPoly(y**3*x + y*x**2 + y*x + 1, y, x, domain='ZZ') \n```", "```py\nintegrate(*specs, **args)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 2*x + 1, x).integrate()\nPoly(1/3*x**3 + x**2 + x, x, domain='QQ') \n```", "```py\n>>> Poly(x*y**2 + x, x, y).integrate((0, 1), (1, 0))\nPoly(1/2*x**2*y**2 + 1/2*x**2, x, y, domain='QQ') \n```", "```py\nintervals(all=False, eps=None, inf=None, sup=None, fast=False, sqf=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 3, x).intervals()\n[((-2, -1), 1), ((1, 2), 1)]\n>>> Poly(x**2 - 3, x).intervals(eps=1e-2)\n[((-26/15, -19/11), 1), ((19/11, 26/15), 1)] \n```", "```py\ninvert(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).invert(Poly(2*x - 1, x))\nPoly(-4/3, x, domain='QQ') \n```", "```py\n>>> Poly(x**2 - 1, x).invert(Poly(x - 1, x))\nTraceback (most recent call last):\n...\nNotInvertible: zero divisor \n```", "```py\nproperty is_cyclotomic\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = x**16 + x**14 - x**10 + x**8 - x**6 + x**2 + 1 \n```", "```py\n>>> Poly(f).is_cyclotomic\nFalse \n```", "```py\n>>> g = x**16 + x**14 - x**10 - x**8 - x**6 + x**2 + 1 \n```", "```py\n>>> Poly(g).is_cyclotomic\nTrue \n```", "```py\nproperty is_ground\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x, x).is_ground\nFalse\n>>> Poly(2, x).is_ground\nTrue\n>>> Poly(y, x).is_ground\nTrue \n```", "```py\nproperty is_homogeneous\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + x*y, x, y).is_homogeneous\nTrue\n>>> Poly(x**3 + x*y, x, y).is_homogeneous\nFalse \n```", "```py\nproperty is_irreducible\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + x + 1, x, modulus=2).is_irreducible\nTrue\n>>> Poly(x**2 + 1, x, modulus=2).is_irreducible\nFalse \n```", "```py\nproperty is_linear\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x + y + 2, x, y).is_linear\nTrue\n>>> Poly(x*y + 2, x, y).is_linear\nFalse \n```", "```py\nproperty is_monic\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x + 2, x).is_monic\nTrue\n>>> Poly(2*x + 2, x).is_monic\nFalse \n```", "```py\nproperty is_monomial\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(3*x**2, x).is_monomial\nTrue\n>>> Poly(3*x**2 + 1, x).is_monomial\nFalse \n```", "```py\nproperty is_multivariate\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + x + 1, x).is_multivariate\nFalse\n>>> Poly(x*y**2 + x*y + 1, x, y).is_multivariate\nTrue\n>>> Poly(x*y**2 + x*y + 1, x).is_multivariate\nFalse\n>>> Poly(x**2 + x + 1, x, y).is_multivariate\nTrue \n```", "```py\nproperty is_one\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(0, x).is_one\nFalse\n>>> Poly(1, x).is_one\nTrue \n```", "```py\nproperty is_primitive\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**2 + 6*x + 12, x).is_primitive\nFalse\n>>> Poly(x**2 + 3*x + 6, x).is_primitive\nTrue \n```", "```py\nproperty is_quadratic\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x*y + 2, x, y).is_quadratic\nTrue\n>>> Poly(x*y**2 + 2, x, y).is_quadratic\nFalse \n```", "```py\nproperty is_sqf\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 2*x + 1, x).is_sqf\nFalse\n>>> Poly(x**2 - 1, x).is_sqf\nTrue \n```", "```py\nproperty is_univariate\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + x + 1, x).is_univariate\nTrue\n>>> Poly(x*y**2 + x*y + 1, x, y).is_univariate\nFalse\n>>> Poly(x*y**2 + x*y + 1, x).is_univariate\nTrue\n>>> Poly(x**2 + x + 1, x, y).is_univariate\nFalse \n```", "```py\nproperty is_zero\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(0, x).is_zero\nTrue\n>>> Poly(1, x).is_zero\nFalse \n```", "```py\nl1_norm()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(-x**2 + 2*x - 3, x).l1_norm()\n6 \n```", "```py\nlcm(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).lcm(Poly(x**2 - 3*x + 2, x))\nPoly(x**3 - 2*x**2 - x + 2, x, domain='ZZ') \n```", "```py\nlength()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 2*x - 1).length()\n3 \n```", "```py\nlift()\n```", "```py\n>>> from sympy import Poly, I\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + I*x + 1, x, extension=I).lift()\nPoly(x**4 + 3*x**2 + 1, x, domain='QQ') \n```", "```py\nltrim(gen)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> Poly(y**2 + y*z**2, x, y, z).ltrim(y)\nPoly(y**2 + y*z**2, y, z, domain='ZZ')\n>>> Poly(z, x, y, z).ltrim(-1)\nPoly(z, z, domain='ZZ') \n```", "```py\nmake_monic_over_integers_by_scaling_roots()\n```", "```py\n>>> from sympy import Poly, S\n>>> from sympy.abc import x\n>>> f = Poly(x**2/2 + S(1)/4 * x + S(1)/8, x, domain='QQ')\n>>> f.make_monic_over_integers_by_scaling_roots()\n(Poly(x**2 + 2*x + 4, x, domain='ZZ'), 4) \n```", "```py\nmatch(*args, **kwargs)\n```", "```py\nmax_norm()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(-x**2 + 2*x - 3, x).max_norm()\n3 \n```", "```py\nmonic(auto=True)\n```", "```py\n>>> from sympy import Poly, ZZ\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(3*x**2 + 6*x + 9, x, domain=ZZ).monic()\nPoly(x**2 + 2*x + 3, x, domain='QQ') \n```", "```py\n>>> Poly(3*x**2 + 4*x + 2, x, domain=ZZ).monic()\nPoly(x**2 + 4/3*x + 2/3, x, domain='QQ') \n```", "```py\nmonoms(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 2*x*y**2 + x*y + 3*y, x, y).monoms()\n[(2, 0), (1, 2), (1, 1), (0, 1)] \n```", "```py\nmul(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).mul(Poly(x - 2, x))\nPoly(x**3 - 2*x**2 + x - 2, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x)*Poly(x - 2, x)\nPoly(x**3 - 2*x**2 + x - 2, x, domain='ZZ') \n```", "```py\nmul_ground(coeff)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x + 1).mul_ground(2)\nPoly(2*x + 2, x, domain='ZZ') \n```", "```py\nneg()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).neg()\nPoly(-x**2 + 1, x, domain='ZZ') \n```", "```py\n>>> -Poly(x**2 - 1, x)\nPoly(-x**2 + 1, x, domain='ZZ') \n```", "```py\nclassmethod new(rep, *gens)\n```", "```py\nnorm()\n```", "```py\n>>> from sympy import Poly, sqrt\n>>> from sympy.abc import x \n```", "```py\n>>> a, b = sqrt(2), sqrt(3) \n```", "```py\n>>> f = Poly(x - a, x, extension=a)\n>>> f.norm()\nPoly(x**2 - 2, x, domain='QQ') \n```", "```py\n>>> f = Poly(x - a, x, extension=(a, b))\n>>> f.norm()\nPoly(x**4 - 4*x**2 + 4, x, domain='QQ') \n```", "```py\nnroots(n=15, maxsteps=50, cleanup=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 3).nroots(n=15)\n[-1.73205080756888, 1.73205080756888]\n>>> Poly(x**2 - 3).nroots(n=30)\n[-1.73205080756887729352744634151, 1.73205080756887729352744634151] \n```", "```py\nnth(*N)\n```", "```py\n>>> from sympy import Poly, sqrt\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**3 + 2*x**2 + 3*x, x).nth(2)\n2\n>>> Poly(x**3 + 2*x*y**2 + y**2, x, y).nth(1, 2)\n2\n>>> Poly(4*sqrt(x)*y)\nPoly(4*y*(sqrt(x)), y, sqrt(x), domain='ZZ')\n>>> _.nth(1, 1)\n4 \n```", "```py\nnth_power_roots_poly(n)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(x**4 - x**2 + 1) \n```", "```py\n>>> f.nth_power_roots_poly(2)\nPoly(x**4 - 2*x**3 + 3*x**2 - 2*x + 1, x, domain='ZZ')\n>>> f.nth_power_roots_poly(3)\nPoly(x**4 + 2*x**2 + 1, x, domain='ZZ')\n>>> f.nth_power_roots_poly(4)\nPoly(x**4 + 2*x**3 + 3*x**2 + 2*x + 1, x, domain='ZZ')\n>>> f.nth_power_roots_poly(12)\nPoly(x**4 - 4*x**3 + 6*x**2 - 4*x + 1, x, domain='ZZ') \n```", "```py\nproperty one\n```", "```py\npdiv(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).pdiv(Poly(2*x - 4, x))\n(Poly(2*x + 4, x, domain='ZZ'), Poly(20, x, domain='ZZ')) \n```", "```py\nper(rep, gens=None, remove=None)\n```", "```py\n>>> from sympy import Poly, ZZ\n>>> from sympy.abc import x, y \n```", "```py\n>>> from sympy.polys.polyclasses import DMP \n```", "```py\n>>> a = Poly(x**2 + 1) \n```", "```py\n>>> a.per(DMP([ZZ(1), ZZ(1)], ZZ), gens=[y])\nPoly(y + 1, y, domain='ZZ') \n```", "```py\npexquo(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 1, x).pexquo(Poly(2*x - 2, x))\nPoly(2*x + 2, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x).pexquo(Poly(2*x - 4, x))\nTraceback (most recent call last):\n...\nExactQuotientFailed: 2*x - 4 does not divide x**2 + 1 \n```", "```py\npow(n)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x - 2, x).pow(3)\nPoly(x**3 - 6*x**2 + 12*x - 8, x, domain='ZZ') \n```", "```py\n>>> Poly(x - 2, x)**3\nPoly(x**3 - 6*x**2 + 12*x - 8, x, domain='ZZ') \n```", "```py\npquo(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).pquo(Poly(2*x - 4, x))\nPoly(2*x + 4, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 - 1, x).pquo(Poly(2*x - 2, x))\nPoly(2*x + 2, x, domain='ZZ') \n```", "```py\nprem(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).prem(Poly(2*x - 4, x))\nPoly(20, x, domain='ZZ') \n```", "```py\nprimitive()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**2 + 8*x + 12, x).primitive()\n(2, Poly(x**2 + 4*x + 6, x, domain='ZZ')) \n```", "```py\nquo(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).quo(Poly(2*x - 4, x))\nPoly(1/2*x + 1, x, domain='QQ') \n```", "```py\n>>> Poly(x**2 - 1, x).quo(Poly(x - 1, x))\nPoly(x + 1, x, domain='ZZ') \n```", "```py\nquo_ground(coeff)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x + 4).quo_ground(2)\nPoly(x + 2, x, domain='ZZ') \n```", "```py\n>>> Poly(2*x + 3).quo_ground(2)\nPoly(x + 1, x, domain='ZZ') \n```", "```py\nrat_clear_denoms(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = Poly(x**2/y + 1, x)\n>>> g = Poly(x**3 + y, x) \n```", "```py\n>>> p, q = f.rat_clear_denoms(g) \n```", "```py\n>>> p\nPoly(x**2 + y, x, domain='ZZ[y]')\n>>> q\nPoly(y*x**3 + y**2, x, domain='ZZ[y]') \n```", "```py\nreal_roots(multiple=True, radicals=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**3 - 7*x**2 + 4*x + 4).real_roots()\n[-1/2, 2, 2]\n>>> Poly(x**3 + x + 1).real_roots()\n[CRootOf(x**3 + x + 1, 0)] \n```", "```py\nrefine_root(s, t, eps=None, steps=None, fast=False, check_sqf=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 3, x).refine_root(1, 2, eps=1e-2)\n(19/11, 26/15) \n```", "```py\nrem(g, auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).rem(Poly(2*x - 4, x))\nPoly(5, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x).rem(Poly(2*x - 4, x), auto=False)\nPoly(x**2 + 1, x, domain='ZZ') \n```", "```py\nreorder(*gens, **args)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + x*y**2, x, y).reorder(y, x)\nPoly(y**2*x + x**2, y, x, domain='ZZ') \n```", "```py\nreplace(x, y=None, **_ignore)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 1, x).replace(x, y)\nPoly(y**2 + 1, y, domain='ZZ') \n```", "```py\nresultant(g, includePRS=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(x**2 + 1, x) \n```", "```py\n>>> f.resultant(Poly(x**2 - 1, x))\n4\n>>> f.resultant(Poly(x**2 - 1, x), includePRS=True)\n(4, [Poly(x**2 + 1, x, domain='ZZ'), Poly(x**2 - 1, x, domain='ZZ'),\n Poly(-2, x, domain='ZZ')]) \n```", "```py\nretract(field=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(x**2 + 1, x, domain='QQ[y]')\n>>> f\nPoly(x**2 + 1, x, domain='QQ[y]') \n```", "```py\n>>> f.retract()\nPoly(x**2 + 1, x, domain='ZZ')\n>>> f.retract(field=True)\nPoly(x**2 + 1, x, domain='QQ') \n```", "```py\nrevert(n)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(1, x).revert(2)\nPoly(1, x, domain='ZZ') \n```", "```py\n>>> Poly(1 + x, x).revert(1)\nPoly(1, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 - 2, x).revert(2)\nTraceback (most recent call last):\n...\nNotReversible: only units are reversible in a ring \n```", "```py\n>>> Poly(1/x, x).revert(1)\nTraceback (most recent call last):\n...\nPolynomialError: 1/x contains an element of the generators set \n```", "```py\nroot(index, radicals=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = Poly(2*x**3 - 7*x**2 + 4*x + 4) \n```", "```py\n>>> f.root(0)\n-1/2\n>>> f.root(1)\n2\n>>> f.root(2)\n2\n>>> f.root(3)\nTraceback (most recent call last):\n...\nIndexError: root index out of [-3, 2] range, got 3 \n```", "```py\n>>> Poly(x**5 + x + 1).root(0)\nCRootOf(x**3 - x**2 + 1, 0) \n```", "```py\nsame_root(a, b)\n```", "```py\n>>> from sympy import Poly, cyclotomic_poly, exp, I, pi\n>>> f = Poly(cyclotomic_poly(5))\n>>> r0 = exp(2*I*pi/5)\n>>> indices = [i for i, r in enumerate(f.all_roots()) if f.same_root(r, r0)]\n>>> print(indices)\n[3] \n```", "```py\nset_domain(domain)\n```", "```py\nset_modulus(modulus)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(5*x**2 + 2*x - 1, x).set_modulus(2)\nPoly(x**2 + 1, x, modulus=2) \n```", "```py\nshift(a)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 2*x + 1, x).shift(2)\nPoly(x**2 + 2*x + 1, x, domain='ZZ') \n```", "```py\nshift_list(a)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x*y, [x,y]).shift_list([1, 2]) == Poly((x+1)*(y+2), [x,y])\nTrue \n```", "```py\nslice(x, m, n=None)\n```", "```py\nsqf_list(all=False)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16 \n```", "```py\n>>> Poly(f).sqf_list()\n(2, [(Poly(x + 1, x, domain='ZZ'), 2),\n (Poly(x + 2, x, domain='ZZ'), 3)]) \n```", "```py\n>>> Poly(f).sqf_list(all=True)\n(2, [(Poly(1, x, domain='ZZ'), 1),\n (Poly(x + 1, x, domain='ZZ'), 2),\n (Poly(x + 2, x, domain='ZZ'), 3)]) \n```", "```py\nsqf_list_include(all=False)\n```", "```py\n>>> from sympy import Poly, expand\n>>> from sympy.abc import x \n```", "```py\n>>> f = expand(2*(x + 1)**3*x**4)\n>>> f\n2*x**7 + 6*x**6 + 6*x**5 + 2*x**4 \n```", "```py\n>>> Poly(f).sqf_list_include()\n[(Poly(2, x, domain='ZZ'), 1),\n (Poly(x + 1, x, domain='ZZ'), 3),\n (Poly(x, x, domain='ZZ'), 4)] \n```", "```py\n>>> Poly(f).sqf_list_include(all=True)\n[(Poly(2, x, domain='ZZ'), 1),\n (Poly(1, x, domain='ZZ'), 2),\n (Poly(x + 1, x, domain='ZZ'), 3),\n (Poly(x, x, domain='ZZ'), 4)] \n```", "```py\nsqf_norm()\n```", "```py\n>>> from sympy import Poly, sqrt\n>>> from sympy.abc import x \n```", "```py\n>>> s, f, r = Poly(x**2 + 1, x, extension=[sqrt(3)]).sqf_norm() \n```", "```py\n>>> s\n[1]\n>>> f\nPoly(x**2 - 2*sqrt(3)*x + 4, x, domain='QQ<sqrt(3)>')\n>>> r\nPoly(x**4 - 4*x**2 + 16, x, domain='QQ') \n```", "```py\nsqf_part()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 - 3*x - 2, x).sqf_part()\nPoly(x**2 - x - 2, x, domain='ZZ') \n```", "```py\nsqr()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x - 2, x).sqr()\nPoly(x**2 - 4*x + 4, x, domain='ZZ') \n```", "```py\n>>> Poly(x - 2, x)**2\nPoly(x**2 - 4*x + 4, x, domain='ZZ') \n```", "```py\nsturm(auto=True)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**3 - 2*x**2 + x - 3, x).sturm()\n[Poly(x**3 - 2*x**2 + x - 3, x, domain='QQ'),\n Poly(3*x**2 - 4*x + 1, x, domain='QQ'),\n Poly(2/9*x + 25/9, x, domain='QQ'),\n Poly(-2079/4, x, domain='QQ')] \n```", "```py\nsub(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).sub(Poly(x - 2, x))\nPoly(x**2 - x + 3, x, domain='ZZ') \n```", "```py\n>>> Poly(x**2 + 1, x) - Poly(x - 2, x)\nPoly(x**2 - x + 3, x, domain='ZZ') \n```", "```py\nsub_ground(coeff)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x + 1).sub_ground(2)\nPoly(x - 1, x, domain='ZZ') \n```", "```py\nsubresultants(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x).subresultants(Poly(x**2 - 1, x))\n[Poly(x**2 + 1, x, domain='ZZ'),\n Poly(x**2 - 1, x, domain='ZZ'),\n Poly(-2, x, domain='ZZ')] \n```", "```py\nterms(order=None)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + 2*x*y**2 + x*y + 3*y, x, y).terms()\n[((2, 0), 1), ((1, 2), 2), ((1, 1), 1), ((0, 1), 3)] \n```", "```py\nterms_gcd()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**6*y**2 + x**3*y, x, y).terms_gcd()\n((3, 1), Poly(x**3*y + 1, x, y, domain='ZZ')) \n```", "```py\ntermwise(func, *gens, **args)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> def func(k, coeff):\n...     k = k[0]\n...     return coeff//10**(2-k) \n```", "```py\n>>> Poly(x**2 + 20*x + 400).termwise(func)\nPoly(x**2 + 2*x + 4, x, domain='ZZ') \n```", "```py\nto_exact()\n```", "```py\n>>> from sympy import Poly, RR\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1.0, x, domain=RR).to_exact()\nPoly(x**2 + 1, x, domain='QQ') \n```", "```py\nto_field()\n```", "```py\n>>> from sympy import Poly, ZZ\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, x, domain=ZZ).to_field()\nPoly(x**2 + 1, x, domain='QQ') \n```", "```py\nto_ring()\n```", "```py\n>>> from sympy import Poly, QQ\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 + 1, domain=QQ).to_ring()\nPoly(x**2 + 1, x, domain='ZZ') \n```", "```py\ntotal_degree()\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x, y \n```", "```py\n>>> Poly(x**2 + y*x + 1, x, y).total_degree()\n2\n>>> Poly(x + y**5, x, y).total_degree()\n5 \n```", "```py\ntransform(p, q)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(x**2 - 2*x + 1, x).transform(Poly(x + 1, x), Poly(x - 1, x))\nPoly(4, x, domain='ZZ') \n```", "```py\ntrunc(p)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> Poly(2*x**3 + 3*x**2 + 5*x + 7, x).trunc(3)\nPoly(-x**3 - x + 1, x, domain='ZZ') \n```", "```py\nunify(g)\n```", "```py\n>>> from sympy import Poly\n>>> from sympy.abc import x \n```", "```py\n>>> f, g = Poly(x/2 + 1), Poly(2*x + 1) \n```", "```py\n>>> f\nPoly(1/2*x + 1, x, domain='QQ')\n>>> g\nPoly(2*x + 1, x, domain='ZZ') \n```", "```py\n>>> F, G = f.unify(g) \n```", "```py\n>>> F\nPoly(1/2*x + 1, x, domain='QQ')\n>>> G\nPoly(2*x + 1, x, domain='QQ') \n```", "```py\nproperty unit\n```", "```py\nproperty zero\n```", "```py\nclass sympy.polys.polytools.PurePoly(rep, *gens, **args)\n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy import PurePoly\n>>> from sympy.abc import x, y \n```", "```py\n>>> PurePoly(x**2 + 1).free_symbols\nset()\n>>> PurePoly(x**2 + y).free_symbols\nset()\n>>> PurePoly(x**2 + y, x).free_symbols\n{y} \n```", "```py\nclass sympy.polys.polytools.GroebnerBasis(F, *gens, **args)\n```", "```py\ncontains(poly)\n```", "```py\n>>> from sympy import groebner\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = 2*x**3 + y**3 + 3*y\n>>> G = groebner([x**2 + y**2 - 1, x*y - 2]) \n```", "```py\n>>> G.contains(f)\nTrue\n>>> G.contains(f + 1)\nFalse \n```", "```py\nfglm(order)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import groebner \n```", "```py\n>>> F = [x**2 - 3*y - x + 1, y**2 - 2*x + y - 1]\n>>> G = groebner(F, x, y, order='grlex') \n```", "```py\n>>> list(G.fglm('lex'))\n[2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7]\n>>> list(groebner(F, x, y, order='lex'))\n[2*x - y**2 - y + 1, y**4 + 2*y**3 - 3*y**2 - 16*y + 7] \n```", "```py\nproperty is_zero_dimensional\n```", "```py\nreduce(expr, auto=True)\n```", "```py\n>>> from sympy import groebner, expand\n>>> from sympy.abc import x, y \n```", "```py\n>>> f = 2*x**4 - x**2 + y**3 + y**2\n>>> G = groebner([x**3 - x, y**3 - y]) \n```", "```py\n>>> G.reduce(f)\n([2*x, 1], x**2 + y**2 + y)\n>>> Q, r = _ \n```", "```py\n>>> expand(sum(q*g for q, g in zip(Q, G)) + r)\n2*x**4 - x**2 + y**3 + y**2\n>>> _ == f\nTrue \n```", "```py\nsympy.polys.polyfuncs.symmetrize(F, *gens, **args)\n```", "```py\n>>> from sympy.polys.polyfuncs import symmetrize\n>>> from sympy.abc import x, y \n```", "```py\n>>> symmetrize(x**2 + y**2)\n(-2*x*y + (x + y)**2, 0) \n```", "```py\n>>> symmetrize(x**2 + y**2, formal=True)\n(s1**2 - 2*s2, 0, [(s1, x + y), (s2, x*y)]) \n```", "```py\n>>> symmetrize(x**2 - y**2)\n(-2*x*y + (x + y)**2, -2*y**2) \n```", "```py\n>>> symmetrize(x**2 - y**2, formal=True)\n(s1**2 - 2*s2, -2*y**2, [(s1, x + y), (s2, x*y)]) \n```", "```py\nsympy.polys.polyfuncs.horner(f, *gens, **args)\n```", "```py\n>>> from sympy.polys.polyfuncs import horner\n>>> from sympy.abc import x, y, a, b, c, d, e \n```", "```py\n>>> horner(9*x**4 + 8*x**3 + 7*x**2 + 6*x + 5)\nx*(x*(x*(9*x + 8) + 7) + 6) + 5 \n```", "```py\n>>> horner(a*x**4 + b*x**3 + c*x**2 + d*x + e)\ne + x*(d + x*(c + x*(a*x + b))) \n```", "```py\n>>> f = 4*x**2*y**2 + 2*x**2*y + 2*x*y**2 + x*y \n```", "```py\n>>> horner(f, wrt=x)\nx*(x*y*(4*y + 2) + y*(2*y + 1)) \n```", "```py\n>>> horner(f, wrt=y)\ny*(x*y*(4*x + 2) + x*(2*x + 1)) \n```", "```py\nsympy.polys.polyfuncs.interpolate(data, x)\n```", "```py\n>>> from sympy.polys.polyfuncs import interpolate\n>>> from sympy.abc import a, b, x \n```", "```py\n>>> interpolate([1, 4, 9, 16], x)\nx**2 \n```", "```py\n>>> interpolate([(1, 1), (2, 4), (3, 9)], x)\nx**2 \n```", "```py\n>>> interpolate([(-1, 2), (1, 2), (2, 5)], x)\nx**2 + 1\n>>> interpolate({-1: 2, 1: 2, 2: 5}, x)\nx**2 + 1 \n```", "```py\n>>> interpolate([1, 4, 9], 5)\n25 \n```", "```py\n>>> [(i,interpolate((a, b), i)) for i in range(1, 4)]\n[(1, a), (2, b), (3, -a + 2*b)] \n```", "```py\nsympy.polys.polyfuncs.viete(f, roots=None, *gens, **args)\n```", "```py\n>>> from sympy.polys.polyfuncs import viete\n>>> from sympy import symbols \n```", "```py\n>>> x, a, b, c, r1, r2 = symbols('x,a:c,r1:3') \n```", "```py\n>>> viete(a*x**2 + b*x + c, [r1, r2], x)\n[(r1 + r2, -b/a), (r1*r2, c/a)] \n```", "```py\nsympy.polys.constructor.construct_domain(obj, **args)\n```", "```py\n>>> from sympy import construct_domain, S\n>>> expressions = [S(2), S(3), S(4)]\n>>> K, elements = construct_domain(expressions)\n>>> K\nZZ\n>>> elements\n[2, 3, 4]\n>>> type(elements[0])  \n<class 'int'>\n>>> type(expressions[0])\n<class 'sympy.core.numbers.Integer'> \n```", "```py\n>>> construct_domain([S(1)/2, S(3)/4])\n(QQ, [1/2, 3/4]) \n```", "```py\n>>> from sympy import symbols\n>>> x, y = symbols('x, y')\n>>> construct_domain([2*x + 1, S(3)/4])\n(QQ[x], [2*x + 1, 3/4])\n>>> construct_domain([2*x + 1, y])\n(ZZ[x,y], [2*x + 1, y]) \n```", "```py\n>>> construct_domain([y/x, x/(1 - y)])\n(ZZ(x,y), [y/x, -x/(y - 1)]) \n```", "```py\n>>> from sympy import sqrt\n>>> construct_domain([sqrt(2)])\n(EX, [EX(sqrt(2))])\n>>> construct_domain([sqrt(2)], extension=True)  \n(QQ<sqrt(2)>, [ANP([1, 0], [1, 0, -2], QQ)]) \n```", "```py\nclass sympy.polys.monomials.Monomial(monom, gens=None)\n```", "```py\nas_expr(*gens)\n```", "```py\ngcd(other)\n```", "```py\nlcm(other)\n```", "```py\nsympy.polys.monomials.itermonomials(variables, max_degrees, min_degrees=None)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.polys.monomials import itermonomials\n>>> from sympy.polys.orderings import monomial_key\n>>> from sympy.abc import x, y\n\n>>> sorted(itermonomials([x, y], 2), key=monomial_key('grlex', [y, x]))\n[1, x, y, x**2, x*y, y**2]\n\n>>> sorted(itermonomials([x, y], 3), key=monomial_key('grlex', [y, x]))\n[1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]\n\n>>> a, b = symbols('a, b', commutative=False)\n>>> set(itermonomials([a, b, x], 2))\n{1, a, a**2, b, b**2, x, x**2, a*b, b*a, x*a, x*b}\n\n>>> sorted(itermonomials([x, y], 2, 1), key=monomial_key('grlex', [y, x]))\n[x, y, x**2, x*y, y**2] \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.polys.monomials import itermonomials\n>>> from sympy.polys.orderings import monomial_key\n>>> from sympy.abc import x, y\n\n>>> sorted(itermonomials([x, y], [2, 4], [1, 2]), reverse=True, key=monomial_key('lex', [x, y]))\n[x**2*y**4, x**2*y**3, x**2*y**2, x*y**4, x*y**3, x*y**2] \n```", "```py\nsympy.polys.monomials.monomial_count(V, N)\n```", "```py\n>>> from sympy.polys.monomials import itermonomials, monomial_count\n>>> from sympy.polys.orderings import monomial_key\n>>> from sympy.abc import x, y \n```", "```py\n>>> monomial_count(2, 2)\n6 \n```", "```py\n>>> M = list(itermonomials([x, y], 2)) \n```", "```py\n>>> sorted(M, key=monomial_key('grlex', [y, x]))\n[1, x, y, x**2, x*y, y**2]\n>>> len(M)\n6 \n```", "```py\nclass sympy.polys.orderings.MonomialOrder\n```", "```py\nclass sympy.polys.orderings.LexOrder\n```", "```py\nclass sympy.polys.orderings.GradedLexOrder\n```", "```py\nclass sympy.polys.orderings.ReversedGradedLexOrder\n```", "```py\nsympy.polys.rootoftools.rootof(f, x, index=None, radicals=True, expand=True)\n```", "```py\nclass sympy.polys.rootoftools.RootOf(f, x, index=None, radicals=True, expand=True)\n```", "```py\nclass sympy.polys.rootoftools.ComplexRootOf(f, x, index=None, radicals=False, expand=True)\n```", "```py\n>>> from sympy import CRootOf, rootof\n>>> from sympy.abc import x \n```", "```py\n>>> CRootOf.clear_cache()  # for doctest reproducibility\n>>> CRootOf(x**2 - 4, 0)\n-2 \n```", "```py\n>>> CRootOf(x**2 - 3, 0)\nCRootOf(x**2 - 3, 0)\n>>> CRootOf(x**2 - 3, 0, radicals=True)\n-sqrt(3)\n>>> rootof(x**2 - 3, 0)\n-sqrt(3) \n```", "```py\n>>> r = rootof(4*x**5 + 16*x**3 + 12*x**2 + 7, 0); r\nCRootOf(4*x**5 + 16*x**3 + 12*x**2 + 7, 0) \n```", "```py\n>>> interval = r._get_interval(); interval\n(-1, 0)\n>>> r.evalf(2)\n-0.98 \n```", "```py\n>>> interval\n(-1, 0) \n```", "```py\n>>> r._get_interval() \n(-165/169, -206/211) \n```", "```py\n>>> r._reset()\n>>> r._get_interval()\n(-1, 0) \n```", "```py\n>>> r.eval_approx(2)\n-0.98 \n```", "```py\n>>> r._get_interval()\n(-1, -1/2) \n```", "```py\n>>> r.eval_rational(n=2)\n-69629/71318 \n```", "```py\n>>> t = CRootOf(x**3 + 10*x + 1, 1)\n>>> t.eval_rational(1e-1)\n15/256 - 805*I/256\n>>> t.eval_rational(1e-1, 1e-4)\n3275/65536 - 414645*I/131072\n>>> t.eval_rational(1e-4, 1e-4)\n6545/131072 - 414645*I/131072\n>>> t.eval_rational(n=2)\n104755/2097152 - 6634255*I/2097152 \n```", "```py\n>>> from sympy import exp, PurePoly\n>>> PurePoly(x) == PurePoly(exp(x))\nTrue\n>>> CRootOf(x - 1, 0)\n1\n>>> CRootOf(exp(x) - 1, 0)  # would correspond to x == 0\nTraceback (most recent call last):\n...\nsympy.polys.polyerrors.PolynomialError: generator must be a Symbol \n```", "```py\nclassmethod _all_roots(poly, use_cache=True)\n```", "```py\nclassmethod _complexes_index(complexes, index)\n```", "```py\nclassmethod _complexes_sorted(complexes)\n```", "```py\nclassmethod _count_roots(roots)\n```", "```py\n_ensure_complexes_init()\n```", "```py\n_ensure_reals_init()\n```", "```py\n_eval_evalf(prec, **kwargs)\n```", "```py\n_eval_is_imaginary()\n```", "```py\n_eval_is_real()\n```", "```py\nclassmethod _get_complexes(factors, use_cache=True)\n```", "```py\nclassmethod _get_complexes_sqf(currentfactor, use_cache=True)\n```", "```py\n_get_interval()\n```", "```py\nclassmethod _get_reals(factors, use_cache=True)\n```", "```py\nclassmethod _get_reals_sqf(currentfactor, use_cache=True)\n```", "```py\nclassmethod _get_roots(method, poly, radicals)\n```", "```py\nclassmethod _indexed_root(poly, index, lazy=False)\n```", "```py\nclassmethod _new(poly, index)\n```", "```py\nclassmethod _postprocess_root(root, radicals)\n```", "```py\nclassmethod _preprocess_roots(poly)\n```", "```py\nclassmethod _real_roots(poly)\n```", "```py\nclassmethod _reals_index(reals, index)\n```", "```py\nclassmethod _reals_sorted(reals)\n```", "```py\nclassmethod _refine_complexes(complexes)\n```", "```py\n_reset()\n```", "```py\nclassmethod _roots_trivial(poly, radicals)\n```", "```py\n_set_interval(interval)\n```", "```py\nclassmethod all_roots(poly, radicals=True)\n```", "```py\nclassmethod clear_cache()\n```", "```py\neval_approx(n, return_mpmath=False)\n```", "```py\neval_rational(dx=None, dy=None, n=15)\n```", "```py\n>>> from sympy import legendre_poly, Symbol\n>>> x = Symbol(\"x\")\n>>> p = legendre_poly(4, x, polys=True)\n>>> r = p.real_roots()[-1]\n>>> r.eval_rational(10**-8).n(6)\n0.861136 \n```", "```py\n>>> r.evalf(17)\n0.86113631159405258 \n```", "```py\nclassmethod real_roots(poly, radicals=True)\n```", "```py\nclass sympy.polys.rootoftools.RootSum(expr, func=None, x=None, auto=True, quadratic=False)\n```", "```py\nclassmethod new(poly, func, auto=True)\n```", "```py\nsympy.polys.polyroots.roots(f, *gens, auto=True, cubics=True, trig=False, quartics=True, quintics=False, multiple=False, filter=None, predicate=None, strict=False, **flags)\n```", "```py\n>>> from sympy import Poly, roots, degree\n>>> from sympy.abc import x, y \n```", "```py\n>>> roots(x**2 - 1, x)\n{-1: 1, 1: 1} \n```", "```py\n>>> p = Poly(x**2-1, x)\n>>> roots(p)\n{-1: 1, 1: 1} \n```", "```py\n>>> p = Poly(x**2-y, x, y) \n```", "```py\n>>> roots(Poly(p, x))\n{-sqrt(y): 1, sqrt(y): 1} \n```", "```py\n>>> roots(x**2 - y, x)\n{-sqrt(y): 1, sqrt(y): 1} \n```", "```py\n>>> roots([1, 0, -1])\n{-1: 1, 1: 1} \n```", "```py\n>>> roots((x-1)*(x**5-x+1), x)\n{1: 1} \n```", "```py\n>>> roots(x**7-3*x**2+1, x)\n{} \n```", "```py\n>>> f = x**3-2*x**2+1\n>>> sum(roots(f, x).values()) == degree(f, x)\nTrue\n>>> f = (x-1)*(x**5-x+1)\n>>> sum(roots(f, x).values()) == degree(f, x)\nFalse \n```", "```py\nsympy.polys.specialpolys.swinnerton_dyer_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.specialpolys.interpolating_poly(n, x, X='x', Y='y')\n```", "```py\nsympy.polys.specialpolys.cyclotomic_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.specialpolys.symmetric_poly(n, *gens, polys=False)\n```", "```py\nsympy.polys.specialpolys.random_poly(x, n, inf, sup, domain=ZZ, polys=False)\n```", "```py\nsympy.polys.orthopolys.chebyshevt_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.chebyshevu_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.gegenbauer_poly(n, a, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.hermite_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.hermite_prob_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.jacobi_poly(n, a, b, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.legendre_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.orthopolys.laguerre_poly(n, x=None, alpha=0, polys=False)\n```", "```py\nsympy.polys.orthopolys.spherical_bessel_fn(n, x=None, polys=False)\n```", "```py\n>>> from sympy.polys.orthopolys import spherical_bessel_fn as fn\n>>> from sympy import Symbol\n>>> z = Symbol(\"z\")\n>>> fn(1, z)\nz**(-2)\n>>> fn(2, z)\n-1/z + 3/z**3\n>>> fn(3, z)\n-6/z**2 + 15/z**4\n>>> fn(4, z)\n1/z - 45/z**3 + 105/z**5 \n```", "```py\nsympy.polys.appellseqs.bernoulli_poly(n, x=None, polys=False)\n```", "```py\n>>> from sympy import summation\n>>> from sympy.abc import x\n>>> from sympy.polys import bernoulli_poly\n>>> bernoulli_poly(5, x)\nx**5 - 5*x**4/2 + 5*x**3/3 - x/6 \n```", "```py\n>>> def psum(p, a, b):\n...     return (bernoulli_poly(p+1,b+1) - bernoulli_poly(p+1,a)) / (p+1)\n>>> psum(4, -6, 27)\n3144337\n>>> summation(x**4, (x, -6, 27))\n3144337 \n```", "```py\n>>> psum(1, 1, x).factor()\nx*(x + 1)/2\n>>> psum(2, 1, x).factor()\nx*(x + 1)*(2*x + 1)/6\n>>> psum(3, 1, x).factor()\nx**2*(x + 1)**2/4 \n```", "```py\nsympy.polys.appellseqs.bernoulli_c_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.appellseqs.genocchi_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.appellseqs.euler_poly(n, x=None, polys=False)\n```", "```py\nsympy.polys.appellseqs.andre_poly(n, x=None, polys=False)\n```", "```py\n>>> from sympy import bernoulli, euler, genocchi\n>>> from sympy.abc import x\n>>> from sympy.polys import andre_poly\n>>> andre_poly(9, x)\nx**9 - 36*x**7 + 630*x**5 - 5124*x**3 + 12465*x \n```", "```py\n>>> [andre_poly(n, 0) for n in range(11)]\n[1, 0, -1, 0, 5, 0, -61, 0, 1385, 0, -50521]\n>>> [euler(n) for n in range(11)]\n[1, 0, -1, 0, 5, 0, -61, 0, 1385, 0, -50521]\n>>> [andre_poly(n-1, 1) * n / (4**n - 2**n) for n in range(1, 11)]\n[1/2, 1/6, 0, -1/30, 0, 1/42, 0, -1/30, 0, 5/66]\n>>> [bernoulli(n) for n in range(1, 11)]\n[1/2, 1/6, 0, -1/30, 0, 1/42, 0, -1/30, 0, 5/66]\n>>> [-andre_poly(n-1, -1) * n / (-2)**(n-1) for n in range(1, 11)]\n[-1, -1, 0, 1, 0, -3, 0, 17, 0, -155]\n>>> [genocchi(n) for n in range(1, 11)]\n[-1, -1, 0, 1, 0, -3, 0, 17, 0, -155] \n```", "```py\n>>> [abs(andre_poly(n, n%2)) for n in range(11)]\n[1, 1, 1, 2, 5, 16, 61, 272, 1385, 7936, 50521] \n```", "```py\nsympy.polys.rationaltools.together(expr, deep=False, fraction=True)\n```", "```py\n>>> from sympy import together, exp\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> together(1/x + 1/y)\n(x + y)/(x*y)\n>>> together(1/x + 1/y + 1/z)\n(x*y + x*z + y*z)/(x*y*z) \n```", "```py\n>>> together(1/(x*y) + 1/y**2)\n(x + y)/(x*y**2) \n```", "```py\n>>> together(1/(1 + 1/x) + 1/(1 + 1/y))\n(x*(y + 1) + y*(x + 1))/((x + 1)*(y + 1)) \n```", "```py\n>>> together(exp(1/x + 1/y))\nexp(1/y + 1/x)\n>>> together(exp(1/x + 1/y), deep=True)\nexp((x + y)/(x*y)) \n```", "```py\n>>> together(1/exp(x) + 1/(x*exp(x)))\n(x + 1)*exp(-x)/x \n```", "```py\n>>> together(1/exp(2*x) + 1/(x*exp(3*x)))\n(x*exp(x) + 1)*exp(-3*x)/x \n```", "```py\nsympy.polys.partfrac.apart(f, x=None, full=False, **options)\n```", "```py\n>>> from sympy.polys.partfrac import apart\n>>> from sympy.abc import x, y \n```", "```py\n>>> apart(y/(x + 2)/(x + 1), x)\n-y/(x + 2) + y/(x + 1) \n```", "```py\n>>> apart(y/(x**2 + x + 1), x)\ny/(x**2 + x + 1) \n```", "```py\n>>> apart(y/(x**2 + x + 1), x, full=True)\nRootSum(_w**2 + _w + 1, Lambda(_a, (-2*_a*y/3 - y/3)/(-_a + x))) \n```", "```py\n>>> apart(y/(x**2 + x + 1), x, full=True).doit()\n(-y/3 - 2*y*(-1/2 - sqrt(3)*I/2)/3)/(x + 1/2 + sqrt(3)*I/2) + (-y/3 -\n 2*y*(-1/2 + sqrt(3)*I/2)/3)/(x + 1/2 - sqrt(3)*I/2) \n```", "```py\nsympy.polys.partfrac.apart_list(f, x=None, dummies=None, **options)\n```", "```py\n>>> from sympy.polys.partfrac import apart_list, assemble_partfrac_list\n>>> from sympy.abc import x, t \n```", "```py\n>>> f = (2*x**3 - 2*x) / (x**2 - 2*x + 1)\n>>> pfd = apart_list(f)\n>>> pfd\n(1,\nPoly(2*x + 4, x, domain='ZZ'),\n[(Poly(_w - 1, _w, domain='ZZ'), Lambda(_a, 4), Lambda(_a, -_a + x), 1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\n2*x + 4 + 4/(x - 1) \n```", "```py\n>>> f = (-2*x - 2*x**2) / (3*x**2 - 6*x)\n>>> pfd = apart_list(f)\n>>> pfd\n(-1,\nPoly(2/3, x, domain='QQ'),\n[(Poly(_w - 2, _w, domain='ZZ'), Lambda(_a, 2), Lambda(_a, -_a + x), 1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\n-2/3 - 2/(x - 2) \n```", "```py\n>>> pfd = apart_list(t/(x**2 + x + t), x)\n>>> pfd\n(1,\nPoly(0, x, domain='ZZ[t]'),\n[(Poly(_w**2 + _w + t, _w, domain='ZZ[t]'),\nLambda(_a, -2*_a*t/(4*t - 1) - t/(4*t - 1)),\nLambda(_a, -_a + x),\n1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\nRootSum(_w**2 + _w + t, Lambda(_a, (-2*_a*t/(4*t - 1) - t/(4*t - 1))/(-_a + x))) \n```", "```py\n>>> f = 36 / (x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2)\n>>> pfd = apart_list(f)\n>>> pfd\n(1,\nPoly(0, x, domain='ZZ'),\n[(Poly(_w - 2, _w, domain='ZZ'), Lambda(_a, 4), Lambda(_a, -_a + x), 1),\n(Poly(_w**2 - 1, _w, domain='ZZ'), Lambda(_a, -3*_a - 6), Lambda(_a, -_a + x), 2),\n(Poly(_w + 1, _w, domain='ZZ'), Lambda(_a, -4), Lambda(_a, -_a + x), 1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\n-4/(x + 1) - 3/(x + 1)**2 - 9/(x - 1)**2 + 4/(x - 2) \n```", "```py\nsympy.polys.partfrac.assemble_partfrac_list(partial_list)\n```", "```py\n>>> from sympy.polys.partfrac import apart_list, assemble_partfrac_list\n>>> from sympy.abc import x \n```", "```py\n>>> f = 36 / (x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2)\n>>> pfd = apart_list(f)\n>>> pfd\n(1,\nPoly(0, x, domain='ZZ'),\n[(Poly(_w - 2, _w, domain='ZZ'), Lambda(_a, 4), Lambda(_a, -_a + x), 1),\n(Poly(_w**2 - 1, _w, domain='ZZ'), Lambda(_a, -3*_a - 6), Lambda(_a, -_a + x), 2),\n(Poly(_w + 1, _w, domain='ZZ'), Lambda(_a, -4), Lambda(_a, -_a + x), 1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\n-4/(x + 1) - 3/(x + 1)**2 - 9/(x - 1)**2 + 4/(x - 2) \n```", "```py\n>>> pfd = apart_list(2/(x**2-2))\n>>> pfd\n(1,\nPoly(0, x, domain='ZZ'),\n[(Poly(_w**2 - 2, _w, domain='ZZ'),\nLambda(_a, _a/2),\nLambda(_a, -_a + x),\n1)]) \n```", "```py\n>>> pfda = assemble_partfrac_list(pfd)\n>>> pfda\nRootSum(_w**2 - 2, Lambda(_a, _a/(-_a + x)))/2 \n```", "```py\n>>> pfda.doit()\n-sqrt(2)/(2*(x + sqrt(2))) + sqrt(2)/(2*(x - sqrt(2))) \n```", "```py\n>>> from sympy import Dummy, Poly, Lambda, sqrt\n>>> a = Dummy(\"a\")\n>>> pfd = (1, Poly(0, x, domain='ZZ'), [([sqrt(2),-sqrt(2)], Lambda(a, a/2), Lambda(a, -a + x), 1)]) \n```", "```py\n>>> assemble_partfrac_list(pfd)\n-sqrt(2)/(2*(x + sqrt(2))) + sqrt(2)/(2*(x - sqrt(2))) \n```", "```py\nsympy.polys.dispersion.dispersionset(p, q=None, *gens, **args)\n```", "```py\n>>> from sympy import poly\n>>> from sympy.polys.dispersion import dispersion, dispersionset\n>>> from sympy.abc import x \n```", "```py\n>>> fp = poly((x - 3)*(x + 3), x)\n>>> sorted(dispersionset(fp))\n[0, 6]\n>>> dispersion(fp)\n6 \n```", "```py\n>>> fp = poly(x**4 - 3*x**2 + 1, x)\n>>> gp = fp.shift(-3)\n>>> sorted(dispersionset(fp, gp))\n[2, 3, 4]\n>>> dispersion(fp, gp)\n4\n>>> sorted(dispersionset(gp, fp))\n[]\n>>> dispersion(gp, fp)\n-oo \n```", "```py\n>>> from sympy import sqrt\n>>> fp = poly(x**2 + sqrt(5)*x - 1, x, domain='QQ<sqrt(5)>')\n>>> gp = poly(x**2 + (2 + sqrt(5))*x + sqrt(5), x, domain='QQ<sqrt(5)>')\n>>> sorted(dispersionset(fp, gp))\n[2]\n>>> sorted(dispersionset(gp, fp))\n[1, 4] \n```", "```py\n>>> from sympy.abc import a\n>>> fp = poly(4*x**4 + (4*a + 8)*x**3 + (a**2 + 6*a + 4)*x**2 + (a**2 + 2*a)*x, x)\n>>> sorted(dispersionset(fp))\n[0, 1] \n```", "```py\nsympy.polys.dispersion.dispersion(p, q=None, *gens, **args)\n```", "```py\n>>> from sympy import poly\n>>> from sympy.polys.dispersion import dispersion, dispersionset\n>>> from sympy.abc import x \n```", "```py\n>>> fp = poly((x - 3)*(x + 3), x)\n>>> sorted(dispersionset(fp))\n[0, 6]\n>>> dispersion(fp)\n6 \n```", "```py\n>>> fp = poly(x**4 - 3*x**2 + 1, x)\n>>> gp = fp.shift(-3)\n>>> sorted(dispersionset(fp, gp))\n[2, 3, 4]\n>>> dispersion(fp, gp)\n4\n>>> sorted(dispersionset(gp, fp))\n[]\n>>> dispersion(gp, fp)\n-oo \n```", "```py\n>>> from sympy import sqrt\n>>> fp = poly(x**2 + sqrt(5)*x - 1, x, domain='QQ<sqrt(5)>')\n>>> gp = poly(x**2 + (2 + sqrt(5))*x + sqrt(5), x, domain='QQ<sqrt(5)>')\n>>> sorted(dispersionset(fp, gp))\n[2]\n>>> sorted(dispersionset(gp, fp))\n[1, 4] \n```", "```py\n>>> from sympy.abc import a\n>>> fp = poly(4*x**4 + (4*a + 8)*x**3 + (a**2 + 6*a + 4)*x**2 + (a**2 + 2*a)*x, x)\n>>> sorted(dispersionset(fp))\n[0, 1] \n```"]