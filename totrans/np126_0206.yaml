- en: numpy.nonzero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nonzero.html](https://numpy.org/doc/1.26/reference/generated/numpy.nonzero.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the indices of the elements that are non-zero.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a tuple of arrays, one for each dimension of *a*, containing the indices
    of the non-zero elements in that dimension. The values in *a* are always tested
    and returned in row-major, C-style order.
  prefs: []
  type: TYPE_NORMAL
- en: To group the indices by element, rather than dimension, use [`argwhere`](numpy.argwhere.html#numpy.argwhere
    "numpy.argwhere"), which returns a row for each non-zero element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When called on a zero-d array or scalar, `nonzero(a)` is treated as `nonzero(atleast_1d(a))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.17.0: Use [`atleast_1d`](numpy.atleast_1d.html#numpy.atleast_1d
    "numpy.atleast_1d") explicitly if this behavior is deliberate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tuple_of_arrays**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of elements that are non-zero.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`flatnonzero`](numpy.flatnonzero.html#numpy.flatnonzero "numpy.flatnonzero")'
  prefs: []
  type: TYPE_NORMAL
- en: Return indices that are non-zero in the flattened version of the input array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.nonzero`](numpy.ndarray.nonzero.html#numpy.ndarray.nonzero "numpy.ndarray.nonzero")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent ndarray method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`count_nonzero`](numpy.count_nonzero.html#numpy.count_nonzero "numpy.count_nonzero")'
  prefs: []
  type: TYPE_NORMAL
- en: Counts the number of non-zero elements in the input array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: While the nonzero values can be obtained with `a[nonzero(a)]`, it is recommended
    to use `x[x.astype(bool)]` or `x[x != 0]` instead, which will correctly handle
    0-d arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A common use for `nonzero` is to find the indices of an array, where a condition
    is True. Given an array *a*, the condition *a* > 3 is a boolean array and since
    False is interpreted as 0, np.nonzero(a > 3) yields the indices of the *a* where
    the condition is true.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this result to index *a* is equivalent to using the mask directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`nonzero` can also be called as a method of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
