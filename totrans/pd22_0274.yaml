- en: pandas.DataFrame.groupby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Group DataFrame using a mapper or by a Series of columns.
  prefs: []
  type: TYPE_NORMAL
- en: A groupby operation involves some combination of splitting the object, applying
    a function, and combining the results. This can be used to group large amounts
    of data and compute operations on these groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**by**mapping, function, label, pd.Grouper or list of such'
  prefs: []
  type: TYPE_NORMAL
- en: Used to determine the groups for the groupby. If `by` is a function, it’s called
    on each value of the object’s index. If a dict or Series is passed, the Series
    or dict VALUES will be used to determine the groups (the Series’ values are first
    aligned; see `.align()` method). If a list or ndarray of length equal to the selected
    axis is passed (see the [groupby user guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups)),
    the values are used as-is to determine the groups. A label or list of labels may
    be passed to group by the columns in `self`. Notice that a tuple is interpreted
    as a (single) key.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: Split along rows (0) or columns (1). For Series this parameter is unused and
    defaults to 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: Will be removed and behave like axis=0 in a
    future version. For `axis=1`, do `frame.T.groupby(...)` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int, level name, or sequence of such, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If the axis is a MultiIndex (hierarchical), group by a particular level or levels.
    Do not specify both `by` and `level`.
  prefs: []
  type: TYPE_NORMAL
- en: '**as_index**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Return object with group labels as the index. Only relevant for DataFrame input.
    as_index=False is effectively “SQL-style” grouped output. This argument has no
    effect on filtrations (see the [filtrations in the user guide](https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration)),
    such as `head()`, `tail()`, `nth()` and in transformations (see the [transformations
    in the user guide](https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation)).
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Sort group keys. Get better performance by turning this off. Note this does
    not influence the order of observations within each group. Groupby preserves the
    order of rows within each group. If False, the groups will appear in the same
    order as they did in the original DataFrame. This argument has no effect on filtrations
    (see the [filtrations in the user guide](https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration)),
    such as `head()`, `tail()`, `nth()` and in transformations (see the [transformations
    in the user guide](https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: Specifying `sort=False` with an ordered categorical
    grouper will no longer sort the values.'
  prefs: []
  type: TYPE_NORMAL
- en: '**group_keys**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: When calling apply and the `by` argument produces a like-indexed (i.e. [a transform](../../user_guide/groupby.html#groupby-transform))
    result, add group keys to index to identify pieces. By default group keys are
    not included when the result’s index (and column) labels match the inputs, and
    are included otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.5.0: Warns that `group_keys` will no longer be ignored
    when the result from `apply` is a like-indexed Series or DataFrame. Specify `group_keys`
    explicitly to include the group keys or not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: `group_keys` now defaults to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**observed**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: 'This only applies if any of the groupers are Categoricals. If True: only show
    observed values for categorical groupers. If False: show all values for categorical
    groupers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: The default value will change to True in a
    future version of pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**dropna**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If True, and if group keys contain NA values, NA values together with row/column
    will be dropped. If False, NA values will also be treated as the key in groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas.api.typing.DataFrameGroupBy
  prefs: []
  type: TYPE_NORMAL
- en: Returns a groupby object that contains information about the groups.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`resample`](pandas.DataFrame.resample.html#pandas.DataFrame.resample "pandas.DataFrame.resample")'
  prefs: []
  type: TYPE_NORMAL
- en: Convenience method for frequency conversion and resampling of time series.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See the [user guide](https://pandas.pydata.org/pandas-docs/stable/groupby.html)
    for more detailed usage and examples, including splitting an object into groups,
    iterating through groups, selecting a group, aggregation, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Hierarchical Indexes**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can groupby different levels of a hierarchical index using the level parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also choose to include NA in group keys or not by setting dropna parameter,
    the default setting is True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When using `.apply()`, use `group_keys` to include or exclude the group keys.
    The `group_keys` argument defaults to `True` (include).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
