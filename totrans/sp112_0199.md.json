["```py\nclass scipy.interpolate.LSQUnivariateSpline(x, y, t, w=None, bbox=[None, None], k=3, ext=0, check_finite=False)\n```", "```py\nbbox[0] < t[0] < ... < t[-1] < bbox[-1] \n```", "```py\n>>> import numpy as np\n>>> from scipy.interpolate import LSQUnivariateSpline, UnivariateSpline\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng()\n>>> x = np.linspace(-3, 3, 50)\n>>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50) \n```", "```py\n>>> t = [-1, 0, 1]\n>>> spl = LSQUnivariateSpline(x, y, t) \n```", "```py\n>>> xs = np.linspace(-3, 3, 1000)\n>>> plt.plot(x, y, 'ro', ms=5)\n>>> plt.plot(xs, spl(xs), 'g-', lw=3)\n>>> plt.show() \n```", "```py\n>>> spl.get_knots()\narray([-3., -1., 0., 1., 3.]) \n```", "```py\n>>> x = np.arange(10)\n>>> s = UnivariateSpline(x, x, s=0)\n>>> s.get_knots()\narray([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.])\n>>> knt = s.get_knots()\n>>> s1 = LSQUnivariateSpline(x, x, knt[1:-1])    # Chop 1st and last knot\n>>> s1.get_knots()\narray([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.]) \n```"]