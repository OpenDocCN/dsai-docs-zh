- en: Datetimes and Timedeltas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期时间和时间增量
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.datetime.html](https://numpy.org/doc/1.26/reference/arrays.datetime.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/arrays.datetime.html](https://numpy.org/doc/1.26/reference/arrays.datetime.html)
- en: New in version 1.7.0.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从NumPy 1.7开始。
- en: Starting in NumPy 1.7, there are core array data types which natively support
    datetime functionality. The data type is called [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64"), so named because [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") is already taken by the Python standard library.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从NumPy 1.7开始，有核心数组数据类型原生支持日期时间功能。该数据类型称为[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")，因为[`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(在Python v3.11中)")已经被Python标准库使用。
- en: Datetime64 Conventions and Assumptions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Datetime64约定和假设
- en: Similar to the Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.11)") class, dates are expressed in the current Gregorian Calendar,
    indefinitely extended both in the future and in the past. [[1]](#id3) Contrary
    to Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.11)"), which supports only years in the 1 AD — 9999 AD range, [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") allows also for dates BC; years BC follow the [Astronomical
    year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering) convention,
    i.e. year 2 BC is numbered −1, year 1 BC is numbered 0, year 1 AD is numbered
    1.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(在Python v3.11中)")类似，日期是在当前的公历日历中表示的，无限地延伸到未来和过去。与Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(在Python v3.11中)")相反，它仅支持1 AD年至9999 AD年范围内的年份，[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")还允许BC年份；BC年份遵循[天文年编号](https://en.wikipedia.org/wiki/Astronomical_year_numbering)约定，即公元前2年编号为-1，公元前1年编号为0，公元1年编号为1。
- en: 'Time instants, say 16:23:32.234, are represented counting hours, minutes, seconds
    and fractions from midnight: i.e. 00:00:00.000 is midnight, 12:00:00.000 is noon,
    etc. Each calendar day has exactly 86400 seconds. This is a “naive” time, with
    no explicit notion of timezones or specific time scales (UT1, UTC, TAI, etc.).
    [[2]](#id4)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 时间点，比如16:23:32.234，是从午夜开始计算小时、分钟、秒和分数表示的：即00:00:00.000是午夜，12:00:00.000是中午，等等。每个日历日恰好有86400秒。这是一个“天真”的时间，没有明确的时区或特定的时间标度（UT1、UTC、TAI等）。
- en: Basic Datetimes
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本日期时间
- en: The most basic way to create datetimes is from strings in ISO 8601 date or datetime
    format. It is also possible to create datetimes from an integer by offset relative
    to the Unix epoch (00:00:00 UTC on 1 January 1970). The unit for internal storage
    is automatically selected from the form of the string, and can be either a [date
    unit](#arrays-dtypes-dateunits) or a [time unit](#arrays-dtypes-timeunits). The
    date units are years (‘Y’), months (‘M’), weeks (‘W’), and days (‘D’), while the
    time units are hours (‘h’), minutes (‘m’), seconds (‘s’), milliseconds (‘ms’),
    and some additional SI-prefix seconds-based units. The [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") data type also accepts the string “NAT”, in any combination
    of lowercase/uppercase letters, for a “Not A Time” value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创建日期时间的最基本方式是从ISO 8601日期或日期时间格式的字符串中创建。也可以通过相对于Unix纪元（1970年1月1日UTC 00:00:00）的整数偏移来创建日期时间。内部存储的单位会根据字符串的形式自动选择，并且可以是[date
    unit](#arrays-dtypes-dateunits)或[time unit](#arrays-dtypes-timeunits)。日期单位是年（‘Y’）、月（‘M’）、周（‘W’）和日（‘D’），而时间单位是小时（‘h’）、分钟（‘m’）、秒（‘s’）、毫秒（‘ms’）和一些额外的SI前缀秒为基础的单位。[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")数据类型还接受字符串“NAT”，无论是小写还是大写字母的任意组合，表示“非时间”值。
- en: Example
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'A simple ISO date:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的ISO日期：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From an integer and a date unit, 1 year since the UNIX epoch:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从整数和日期单位，自UNIX纪元以来的1年：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using months for the unit:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用月份作为单位：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Specifying just the month, but forcing a ‘days’ unit:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '仅指定月份，但强制使用‘天’单位： '
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From a date and time:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从日期和时间：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'NAT (not a time):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NAT（非时间）：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When creating an array of datetimes from a string, it is still possible to automatically
    select the unit from the inputs, by using the datetime type with generic units.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从字符串创建日期时间数组时，仍然可以通过使用具有通用单位的datetime类型从输入中自动选择单位。
- en: Example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: An array of datetimes can be constructed from integers representing POSIX timestamps
    with the given unit.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从表示POSIX时间戳的整数构建日期时间数组。
- en: Example
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The datetime type works with many common NumPy functions, for example [`arange`](generated/numpy.arange.html#numpy.arange
    "numpy.arange") can be used to generate ranges of dates.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Datetime 类型与许多常见的 NumPy 函数一起工作，例如 [`arange`](generated/numpy.arange.html#numpy.arange
    "numpy.arange") 可用于生成日期范围。
- en: Example
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'All the dates for one month:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个月的所有日期：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The datetime object represents a single moment in time. If two datetimes have
    different units, they may still be representing the same moment of time, and converting
    from a bigger unit like months to a smaller unit like days is considered a ‘safe’
    cast because the moment of time is still being represented exactly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: datetime 对象表示一个特定时刻。如果两个日期时间具有不同的单位，它们仍然可能表示相同的时刻，将一个较大单位（如月）转换为较小单位（如天）被认为是一种‘安全’转换，因为时刻仍然被准确表示。
- en: Example
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Deprecated since version 1.11.0: NumPy does not store timezone information.
    For backwards compatibility, datetime64 still parses timezone offsets, which it
    handles by converting to UTC±00:00 (Zulu time). This behaviour is deprecated and
    will raise an error in the future.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自 NumPy 版本 1.11.0 起已弃用：NumPy 不存储时区信息。为了向后兼容，datetime64 仍然解析时区偏移量，通过转换为 UTC±00:00
    (Zulu 时间) 处理。这种行为已被弃用，并将在未来引发错误。
- en: Datetime and Timedelta Arithmetic
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期时间和时间差运算
- en: NumPy allows the subtraction of two datetime values, an operation which produces
    a number with a time unit. Because NumPy doesn’t have a physical quantities system
    in its core, the [`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    data type was created to complement [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64"). The arguments for [`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64") are a number, to represent the number of units, and a date/time
    unit, such as (D)ay, (M)onth, (Y)ear, (h)ours, (m)inutes, or (s)econds. The [`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64") data type also accepts the string “NAT” in place of the number
    for a “Not A Time” value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 允许两个日期时间值相减，这个操作会产生一个带有时间单位的数字。因为 NumPy 的核心中没有物理量系统，所以创建了 [`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64") 数据类型来补充 [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")。[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    的参数是一个数字，表示单位的数量，以及一个日期/时间单位，比如 (D)ay, (M)onth, (Y)ear, (h)ours, (m)inutes, 或
    (s)econds。[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    数据类型还接受字符串“NAT”代替数字，表示“非时间”值。
- en: Example
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Datetimes and Timedeltas work together to provide ways for simple datetime calculations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间和时间差一起提供了简单的日期时间计算方式。
- en: Example
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are two Timedelta units (‘Y’, years and ‘M’, months) which are treated
    specially, because how much time they represent changes depending on when they
    are used. While a timedelta day unit is equivalent to 24 hours, there is no way
    to convert a month unit into days, because different months have different numbers
    of days.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个时间差单位（‘Y’, 年和‘M’, 月）被特殊处理，因为它们代表的时间量取决于它们的使用时间。虽然时间差的天单位等同于 24 小时，但无法将月单位转换为天数，因为不同的月份有不同的天数。
- en: Example
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Datetime Units
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期时间单位
- en: The Datetime and Timedelta data types support a large number of time units,
    as well as generic units which can be coerced into any of the other units based
    on input data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Datetime 和 Timedelta 数据类型支持大量的时间单位，以及可以根据输入数据强制转换为任何其他单位的通用单位。
- en: Datetimes are always stored with an epoch of 1970-01-01T00:00\. This means the
    supported dates are always a symmetric interval around the epoch, called “time
    span” in the table below.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Datetimes 总是以 1970-01-01T00:00 为纪元存储。这意味着支持的日期始终是围绕纪元对称的间隔，表格中称为“时间跨度”。
- en: The length of the span is the range of a 64-bit integer times the length of
    the date or unit. For example, the time span for ‘W’ (week) is exactly 7 times
    longer than the time span for ‘D’ (day), and the time span for ‘D’ (day) is exactly
    24 times longer than the time span for ‘h’ (hour).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 跨度的长度是 64 位整数的范围乘以日期或单位的长度。例如，‘W’（周）的时间跨度恰好是‘D’（天）的时间跨度的 7 倍，而‘D’（天）的时间跨���恰好是‘h’（小时）的时间跨度的
    24 倍。
- en: 'Here are the date units:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是日期单位：
- en: '| Code | Meaning | Time span (relative) | Time span (absolute) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 含义 | 时间跨度（相对） | 时间跨度（绝对） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Y | year | +/- 9.2e18 years | [9.2e18 BC, 9.2e18 AD] |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Y | 年 | +/- 9.2e18 年 | [9.2e18 BC, 9.2e18 AD] |'
- en: '| M | month | +/- 7.6e17 years | [7.6e17 BC, 7.6e17 AD] |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| M | 月 | +/- 7.6e17 年 | [7.6e17 BC, 7.6e17 AD] |'
- en: '| W | week | +/- 1.7e17 years | [1.7e17 BC, 1.7e17 AD] |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| W | 周 | +/- 1.7e17 年 | [1.7e17 BC, 1.7e17 AD] |'
- en: '| D | day | +/- 2.5e16 years | [2.5e16 BC, 2.5e16 AD] |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| D | 天 | +/- 2.5e16 年 | [2.5e16 BC, 2.5e16 AD] |'
- en: 'And here are the time units:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是时间单位：
- en: '| Code | Meaning | Time span (relative) | Time span (absolute) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 意义 | 时间跨度（相对） | 时间跨度（绝对） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| h | hour | +/- 1.0e15 years | [1.0e15 BC, 1.0e15 AD] |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| h | 小时 | +/- 1.0e15 年 | [1.0e15 BC, 1.0e15 AD] |'
- en: '| m | minute | +/- 1.7e13 years | [1.7e13 BC, 1.7e13 AD] |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| m | 分钟 | +/- 1.7e13 年 | [1.7e13 BC, 1.7e13 AD] |'
- en: '| s | second | +/- 2.9e11 years | [2.9e11 BC, 2.9e11 AD] |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| s | 秒 | +/- 2.9e11 年 | [2.9e11 BC, 2.9e11 AD] |'
- en: '| ms | millisecond | +/- 2.9e8 years | [ 2.9e8 BC, 2.9e8 AD] |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| ms | 毫秒 | +/- 2.9e8 年 | [ 2.9e8 BC, 2.9e8 AD] |'
- en: '| us / μs | microsecond | +/- 2.9e5 years | [290301 BC, 294241 AD] |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| us / μs | 微秒 | +/- 2.9e5 年 | [290301 BC, 294241 AD] |'
- en: '| ns | nanosecond | +/- 292 years | [ 1678 AD, 2262 AD] |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| ns | 纳秒 | +/- 292 年 | [ 1678 AD, 2262 AD] |'
- en: '| ps | picosecond | +/- 106 days | [ 1969 AD, 1970 AD] |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| ps | 皮秒 | +/- 106 天 | [ 1969 AD, 1970 AD] |'
- en: '| fs | femtosecond | +/- 2.6 hours | [ 1969 AD, 1970 AD] |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| fs | 飞秒 | +/- 2.6 小时 | [ 1969 AD, 1970 AD] |'
- en: '| as | attosecond | +/- 9.2 seconds | [ 1969 AD, 1970 AD] |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| as | 阿秒 | +/- 9.2 秒 | [ 1969 AD, 1970 AD] |'
- en: Business Day Functionality
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作日功能
- en: To allow the datetime to be used in contexts where only certain days of the
    week are valid, NumPy includes a set of “busday” (business day) functions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使datetime可以在只有某些周几有效的情况下使用，NumPy包含一组“busday”（工作日）函数。
- en: The default for busday functions is that the only valid days are Monday through
    Friday (the usual business days). The implementation is based on a “weekmask”
    containing 7 Boolean flags to indicate valid days; custom weekmasks are possible
    that specify other sets of valid days.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: busday函数的默认值是只有星期一到星期五（通常的工作日）是有效日期。该实现基于包含7个布尔标志以指示有效日期的“weekmask”；可以使用自定义星期掩码指定其他一组有效日期。
- en: The “busday” functions can additionally check a list of “holiday” dates, specific
    dates that are not valid days.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “busday”函数还可以检查一组“假期”日期，即不是有效日期的特定日期。
- en: The function [`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset") allows you to apply offsets specified in business days
    to datetimes with a unit of ‘D’ (day).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset "numpy.busday_offset")允许您将以‘D’（天）为单位指定的偏移应用于日期时间。
- en: Example
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When an input date falls on the weekend or a holiday, [`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset") first applies a rule to roll the date to a valid business
    day, then applies the offset. The default rule is ‘raise’, which simply raises
    an exception. The rules most typically used are ‘forward’ and ‘backward’.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入日期落在周末或假期时，[`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset")首先应用一个规则将日期滚动到有效的工作日，然后应用偏移。默认规则是‘raise’，简单地引���异常。最常用的规则是‘forward’和‘backward’。
- en: Example
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE28]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In some cases, an appropriate use of the roll and the offset is necessary to
    get a desired answer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，必须适当使用roll和offset才能获得所需的答案。
- en: Example
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The first business day on or after a date:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在日期之后的第一个工作日：
- en: '[PRE33]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The first business day strictly after a date:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 严格在日期之后的第一个工作日：
- en: '[PRE34]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The function is also useful for computing some kinds of days like holidays.
    In Canada and the U.S., Mother’s day is on the second Sunday in May, which can
    be computed with a custom weekmask.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数还可用于计算一些特殊的日期，如假期。在加拿大和美国，母亲节是五月的第二个星期日，可以使用自定义星期掩码计算。
- en: Example
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When performance is important for manipulating many business dates with one
    particular choice of weekmask and holidays, there is an object [`busdaycalendar`](generated/numpy.busdaycalendar.html#numpy.busdaycalendar
    "numpy.busdaycalendar") which stores the data necessary in an optimized form.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当性能对于使用特定的星期掩码和假期操纵许多业务日期很重要时，有一个[`busdaycalendar`](generated/numpy.busdaycalendar.html#numpy.busdaycalendar
    "numpy.busdaycalendar")对象以优化的形式存储必要的数据。
- en: 'np.is_busday():'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.is_busday():'
- en: To test a [`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")
    value to see if it is a valid day, use [`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday").
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试[`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")值是否为有效日期，请使用[`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday")。
- en: Example
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'np.busday_count():'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.busday_count():'
- en: 'To find how many valid days there are in a specified range of datetime64 dates,
    use [`busday_count`](generated/numpy.busday_count.html#numpy.busday_count "numpy.busday_count"):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '要查找指定的datetime64日期范围中有多少有效日期，请使用[`busday_count`](generated/numpy.busday_count.html#numpy.busday_count
    "numpy.busday_count"):'
- en: Example
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE37]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you have an array of datetime64 day values, and you want a count of how
    many of them are valid dates, you can do this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个datetime64日期值的数组，并且想知道其中有多少个是有效日期，你可以这样做：
- en: Example
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE38]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Custom Weekmasks
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义周掩码
- en: Here are several examples of custom weekmask values. These examples specify
    the “busday” default of Monday through Friday being valid days.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个自定义weekmask值的示例。这些示例指定了“busday”默认为周一至周五为有效日期。
- en: 'Some examples:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一些例子：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '## Datetime64 shortcomings'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '## Datetime64 的缺陷'
- en: The assumption that all days are exactly 86400 seconds long makes [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") largely compatible with Python [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime
    "(in Python v3.11)") and “POSIX time” semantics; therefore they all share the
    same well known shortcomings with respect to the UTC timescale and historical
    time determination. A brief non exhaustive summary is given below.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所有天都恰好是86400秒长的假设使得[`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")在很大程度上与Python的[`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime
    "(在Python v3.11中)")和“POSIX时间”语义兼容；因此它们都与UTC时间刻度和历史时间确定性共享同样众所周知的缺陷。以下是一个简要的非穷尽总结。
- en: It is impossible to parse valid UTC timestamps occurring during a positive leap
    second.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法解析在正闰秒期间发生的有效UTC时间戳。
- en: Example
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例
- en: '“2016-12-31 23:59:60 UTC” was a leap second, therefore “2016-12-31 23:59:60.450
    UTC” is a valid timestamp which is not parseable by [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64"):'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “2016-12-31 23:59:60 UTC”是一个闰秒，因此“2016-12-31 23:59:60.450 UTC”是一个有效的时间戳，但无法被[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")解析：
- en: '[PRE40]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Timedelta64 computations between two UTC dates can be wrong by an integer number
    of SI seconds.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个UTC日期之间的Timedelta64计算可能会出现整数倍的SI秒错误。
- en: Example
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��例
- en: 'Compute the number of SI seconds between “2021-01-01 12:56:23.423 UTC” and
    “2001-01-01 00:00:00.000 UTC”:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算“2021-01-01 12:56:23.423 UTC”和“2001-01-01 00:00:00.000 UTC”之间的SI秒数：
- en: '[PRE41]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: however correct answer is *631198588.423* SI seconds because there were 5 leap
    seconds between 2001 and 2021.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而正确答案是*631198588.423* SI秒，因为2001年至2021年之间有5个闰秒。
- en: Timedelta64 computations for dates in the past do not return SI seconds, as
    one would expect.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去日期的Timedelta64计算不会返回SI秒，这与预期不符。
- en: Example
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例
- en: 'Compute the number of seconds between “000-01-01 UT” and “1600-01-01 UT”, where
    UT is [universal time](https://en.wikipedia.org/wiki/Universal_Time):'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算“000-01-01 UT”和“1600-01-01 UT”之间的秒数，其中UT是[世界时](https://en.wikipedia.org/wiki/Universal_Time)：
- en: '[PRE42]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The computed results, *50491123200* seconds, is obtained as the elapsed number
    of days (*584388*) times *86400* seconds; this is the number of seconds of a clock
    in sync with earth rotation. The exact value in SI seconds can only be estimated,
    e.g using data published in [Measurement of the Earth’s rotation: 720 BC to AD
    2015, 2016, Royal Society’s Proceedings A 472, by Stephenson et.al.](https://doi.org/10.1098/rspa.2016.0404).
    A sensible estimate is *50491112870 ± 90* seconds, with a difference of 10330
    seconds.'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算结果为*50491123200*秒，是经过的天数（*584388*）乘以*86400*秒；这是与地球自转同步的时钟秒数。 SI秒的确切值只能估算，例如使用[测量地球自转：公元前720年至公元2015年，2016年，皇家学会A杂志472期，由斯蒂芬森等人发表的数据](https://doi.org/10.1098/rspa.2016.0404)。一个合理的估计是*50491112870
    ± 90*秒，差异为10330秒。
- en: Datetime64 Conventions and Assumptions
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Datetime64 约定和假设
- en: Similar to the Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.11)") class, dates are expressed in the current Gregorian Calendar,
    indefinitely extended both in the future and in the past. [[1]](#id3) Contrary
    to Python [`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.11)"), which supports only years in the 1 AD — 9999 AD range, [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") allows also for dates BC; years BC follow the [Astronomical
    year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering) convention,
    i.e. year 2 BC is numbered −1, year 1 BC is numbered 0, year 1 AD is numbered
    1.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python的[`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(在Python v3.11中)")类似，日期是以当前公历日历表示的，未来和过去都无限延伸。[[1]](#id3) 与Python的[`date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(在Python v3.11中)")不同，它仅支持1 AD至9999 AD范围内的年份，[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")还允许BC日期；BC年份遵循[天文年编号](https://en.wikipedia.org/wiki/Astronomical_year_numbering)约定，即公元前2年编号为-1，公元前1年编号为0，公元1年编号为1。
- en: 'Time instants, say 16:23:32.234, are represented counting hours, minutes, seconds
    and fractions from midnight: i.e. 00:00:00.000 is midnight, 12:00:00.000 is noon,
    etc. Each calendar day has exactly 86400 seconds. This is a “naive” time, with
    no explicit notion of timezones or specific time scales (UT1, UTC, TAI, etc.).
    [[2]](#id4)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 时间瞬间，比如16:23:32.234，是从午夜开始计算小时、分钟、秒和分数：即00:00:00.000是午夜，12:00:00.000是中午，等等。每个日历日恰好有86400秒。这是一个“天真”的时间，没有明确的时区或特定的时间刻度（UT1、UTC、TAI等）。
- en: Basic Datetimes
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的Datetime
- en: The most basic way to create datetimes is from strings in ISO 8601 date or datetime
    format. It is also possible to create datetimes from an integer by offset relative
    to the Unix epoch (00:00:00 UTC on 1 January 1970). The unit for internal storage
    is automatically selected from the form of the string, and can be either a [date
    unit](#arrays-dtypes-dateunits) or a [time unit](#arrays-dtypes-timeunits). The
    date units are years (‘Y’), months (‘M’), weeks (‘W’), and days (‘D’), while the
    time units are hours (‘h’), minutes (‘m’), seconds (‘s’), milliseconds (‘ms’),
    and some additional SI-prefix seconds-based units. The [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") data type also accepts the string “NAT”, in any combination
    of lowercase/uppercase letters, for a “Not A Time” value.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 创建datetime的最基本方法是从ISO 8601日期或datetime格式的字符串创建。还可以通过相对于Unix纪元（1970年1月1日UTC 00:00:00）的偏移量从整数创建datetime。内部存储的单位会根据字符串的形式自动选择，并且可以是[date
    unit](#arrays-dtypes-dateunits)或[time unit](#arrays-dtypes-timeunits)。日期单位是年（‘Y’）、月（‘M’）、周（‘W’）和日（‘D’），而时间单位是小时（‘h’）、分钟（‘m’）、秒（‘s’）、毫秒（‘ms’）和一些额外的SI前缀秒为基础的单位。[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")数据类型还接受字符串“NAT”，大小写字母的任意组合，表示“Not A Time”值。
- en: Example
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'A simple ISO date:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的ISO日期：
- en: '[PRE43]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'From an integer and a date unit, 1 year since the UNIX epoch:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从整数和日期单位开始，自UNIX纪元以来1年：
- en: '[PRE44]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Using months for the unit:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用月作为单位：
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Specifying just the month, but forcing a ‘days’ unit:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 仅指定月份，但强制使用‘天’单位：
- en: '[PRE46]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'From a date and time:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 从日期和时间开始：
- en: '[PRE47]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'NAT (not a time):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: NAT（不是时间）：
- en: '[PRE48]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: When creating an array of datetimes from a string, it is still possible to automatically
    select the unit from the inputs, by using the datetime type with generic units.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当从字符串创建datetime数组时，仍然可以通过使用具有通用单位的datetime类型从输入中自动选择单位。
- en: Example
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE49]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: An array of datetimes can be constructed from integers representing POSIX timestamps
    with the given unit.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从表示POSIX时间戳的整数构建datetime数组，并指定给定的单位。
- en: Example
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The datetime type works with many common NumPy functions, for example [`arange`](generated/numpy.arange.html#numpy.arange
    "numpy.arange") can be used to generate ranges of dates.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: datetime类型与许多常见的NumPy函数一起使用，例如[`arange`](generated/numpy.arange.html#numpy.arange
    "numpy.arange")可以用于生成日期范围。
- en: Example
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'All the dates for one month:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有一个月的日期：
- en: '[PRE53]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The datetime object represents a single moment in time. If two datetimes have
    different units, they may still be representing the same moment of time, and converting
    from a bigger unit like months to a smaller unit like days is considered a ‘safe’
    cast because the moment of time is still being represented exactly.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: datetime对象表示时间中的一个瞬间。如果两个datetime具有不同的单位，它们仍然可能表示相同的时间点，并且从较大的单位（如月）转换为较小的单位（如天）被认为是一种“安全”的转换，因为时间点仍然被准确表示。
- en: Example
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE54]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Deprecated since version 1.11.0: NumPy does not store timezone information.
    For backwards compatibility, datetime64 still parses timezone offsets, which it
    handles by converting to UTC±00:00 (Zulu time). This behaviour is deprecated and
    will raise an error in the future.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.11.0起弃用：NumPy不存储时区信息。为了向后兼容，datetime64仍然解析时区偏移量，它通过转换为UTC±00:00（Zulu时间）来处理。这种行为已被弃用，并将在未来引发错误。
- en: Datetime and Timedelta Arithmetic
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Datetime和Timedelta算术
- en: NumPy allows the subtraction of two datetime values, an operation which produces
    a number with a time unit. Because NumPy doesn’t have a physical quantities system
    in its core, the [`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    data type was created to complement [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64"). The arguments for [`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64") are a number, to represent the number of units, and a date/time
    unit, such as (D)ay, (M)onth, (Y)ear, (h)ours, (m)inutes, or (s)econds. The [`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64") data type also accepts the string “NAT” in place of the number
    for a “Not A Time” value.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy允许对两个日期时间值进行减法运算，这个操作会产生一个带有时间单位的数字。由于NumPy的核心中没有物理量系统，因此创建了[`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64")数据类型来补充[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")。[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")的参数是一个数字，表示单位的数量，以及一个日期/时间单位，比如（D）天，（M）月，（Y）年，（h）小时，（m）分钟或（s）秒。[`timedelta64`](arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64")数据类型还接受字符串“NAT”来代替数字，表示“非时间”值。
- en: Example
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE56]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Datetimes and Timedeltas work together to provide ways for simple datetime calculations.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间和时间差一起提供了简单日期时间计算的方法。
- en: Example
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE59]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: There are two Timedelta units (‘Y’, years and ‘M’, months) which are treated
    specially, because how much time they represent changes depending on when they
    are used. While a timedelta day unit is equivalent to 24 hours, there is no way
    to convert a month unit into days, because different months have different numbers
    of days.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个时间差单位（‘Y’，年和‘M’，月）被特殊处理，因为它们代表的时间量取决于它们何时使用。虽然时间差的天单位等同于24小时，但无法将月单位转换为天数，因为不同的月份有不同的天数。
- en: Example
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE66]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Datetime Units
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期时间单位
- en: The Datetime and Timedelta data types support a large number of time units,
    as well as generic units which can be coerced into any of the other units based
    on input data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间和时间差数据类型支持大量的时间单位，以及可以根据输入数据强制转换为任何其他单位的通用单位。
- en: Datetimes are always stored with an epoch of 1970-01-01T00:00\. This means the
    supported dates are always a symmetric interval around the epoch, called “time
    span” in the table below.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间始终以1970-01-01T00:00为基准。这意味着支持的日期始终是围绕基准对称的时间间隔，称为下表中的“时间跨度”。
- en: The length of the span is the range of a 64-bit integer times the length of
    the date or unit. For example, the time span for ‘W’ (week) is exactly 7 times
    longer than the time span for ‘D’ (day), and the time span for ‘D’ (day) is exactly
    24 times longer than the time span for ‘h’ (hour).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 跨度的长度是64位整数的范围乘以日期或单位的长度。例如，‘W’（周）的时间跨度恰好是‘D’（天）的时间跨度的7倍，而‘D’（天）的时间跨度恰好是‘h’（小时）的时间跨度的24倍。
- en: 'Here are the date units:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是日期单位：
- en: '| Code | Meaning | Time span (relative) | Time span (absolute) |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 含义 | 时间跨度（相对） | 时间跨度（绝对） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Y | year | +/- 9.2e18 years | [9.2e18 BC, 9.2e18 AD] |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| Y | 年 | +/- 9.2e18 年 | [9.2e18 BC, 9.2e18 AD] |'
- en: '| M | month | +/- 7.6e17 years | [7.6e17 BC, 7.6e17 AD] |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| M | 月 | +/- 7.6e17 年 | [7.6e17 BC, 7.6e17 AD] |'
- en: '| W | week | +/- 1.7e17 years | [1.7e17 BC, 1.7e17 AD] |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| W | 周 | +/- 1.7e17 年 | [1.7e17 BC, 1.7e17 AD] |'
- en: '| D | day | +/- 2.5e16 years | [2.5e16 BC, 2.5e16 AD] |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| D | 天 | +/- 2.5e16 年 | [2.5e16 BC, 2.5e16 AD] |'
- en: 'And here are the time units:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是时间单位：
- en: '| Code | Meaning | Time span (relative) | Time span (absolute) |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 含义 | 时间跨度（相对） | 时间跨度（绝对） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| h | hour | +/- 1.0e15 years | [1.0e15 BC, 1.0e15 AD] |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| h | 小时 | +/- 1.0e15 年 | [1.0e15 BC, 1.0e15 AD] |'
- en: '| m | minute | +/- 1.7e13 years | [1.7e13 BC, 1.7e13 AD] |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| m | 分钟 | +/- 1.7e13 年 | [1.7e13 BC, 1.7e13 AD] |'
- en: '| s | second | +/- 2.9e11 years | [2.9e11 BC, 2.9e11 AD] |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| s | 秒 | +/- 2.9e11 年 | [2.9e11 BC, 2.9e11 AD] |'
- en: '| ms | millisecond | +/- 2.9e8 years | [ 2.9e8 BC, 2.9e8 AD] |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| ms | 毫秒 | +/- 2.9e8 年 | [ 2.9e8 BC, 2.9e8 AD] |'
- en: '| us / μs | microsecond | +/- 2.9e5 years | [290301 BC, 294241 AD] |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| us / μs | 微秒 | +/- 2.9e5 年 | [290301 BC, 294241 AD] |'
- en: '| ns | nanosecond | +/- 292 years | [ 1678 AD, 2262 AD] |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| ns | 纳秒 | +/- 292 年 | [ 1678 年, 2262 年] |'
- en: '| ps | picosecond | +/- 106 days | [ 1969 AD, 1970 AD] |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| ps | 皮秒 | +/- 106 天 | [ 1969 年, 1970 年] |'
- en: '| fs | femtosecond | +/- 2.6 hours | [ 1969 AD, 1970 AD] |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| fs | 飞秒 | +/- 2.6 小时 | [ 1969 年, 1970 年] |'
- en: '| as | attosecond | +/- 9.2 seconds | [ 1969 AD, 1970 AD] |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| as | 阿秒 | +/- 9.2 秒 | [ 1969 年, 1970 年] |'
- en: Business Day Functionality
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作日功能
- en: To allow the datetime to be used in contexts where only certain days of the
    week are valid, NumPy includes a set of “busday” (business day) functions.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许日期时间在只有某些星期几有效的情况下使用，NumPy包含一组“busday”（工作日）函数。
- en: The default for busday functions is that the only valid days are Monday through
    Friday (the usual business days). The implementation is based on a “weekmask”
    containing 7 Boolean flags to indicate valid days; custom weekmasks are possible
    that specify other sets of valid days.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: busday函数的默认值是只有星期一到星期五（通常的工作日）是有效日期。实现基于包含7个布尔标志以指示有效日期的“weekmask”；可以使用自定义星期掩码指定其他一组有效日��。
- en: The “busday” functions can additionally check a list of “holiday” dates, specific
    dates that are not valid days.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: “busday”函数还可以检查一组“假期”日期，这些日期不是有效日期。
- en: The function [`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset") allows you to apply offsets specified in business days
    to datetimes with a unit of ‘D’ (day).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 函数[`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset "numpy.busday_offset")允许您将以“D”（天）为单位的偏移应用于工作日的日期时间。
- en: Example
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE69]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: When an input date falls on the weekend or a holiday, [`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset") first applies a rule to roll the date to a valid business
    day, then applies the offset. The default rule is ‘raise’, which simply raises
    an exception. The rules most typically used are ‘forward’ and ‘backward’.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入日期落在周末或假期时，[`busday_offset`](generated/numpy.busday_offset.html#numpy.busday_offset
    "numpy.busday_offset")首先应用规则将日期滚动到有效的工作日，然后应用偏移。默认规则是“raise”，简单地引发异常。最常用的规则是“forward”和“backward”。
- en: Example
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE71]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In some cases, an appropriate use of the roll and the offset is necessary to
    get a desired answer.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，需要适当使用滚动和偏移来获得所需的答案。
- en: Example
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The first business day on or after a date:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 日期后的第一个工作日：
- en: '[PRE76]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The first business day strictly after a date:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 日期后的第一个严格的工作日：
- en: '[PRE77]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The function is also useful for computing some kinds of days like holidays.
    In Canada and the U.S., Mother’s day is on the second Sunday in May, which can
    be computed with a custom weekmask.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数还可用于计算一些特殊日期，如假期。在加拿大和美国，母亲节是五月的第二个星期日，可以使用自定义的星期掩码来计算。
- en: Example
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE78]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: When performance is important for manipulating many business dates with one
    particular choice of weekmask and holidays, there is an object [`busdaycalendar`](generated/numpy.busdaycalendar.html#numpy.busdaycalendar
    "numpy.busdaycalendar") which stores the data necessary in an optimized form.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当对于使用一种特定的星期掩码和假期操作许多工作日期时性能很重要时，有一个对象[`busdaycalendar`](generated/numpy.busdaycalendar.html#numpy.busdaycalendar
    "numpy.busdaycalendar")以优化的形式存储必要的数据。
- en: 'np.is_busday():'
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.is_busday():'
- en: To test a [`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")
    value to see if it is a valid day, use [`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday").
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试[`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")值是否为有效日期，请使用[`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday")。
- en: Example
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE79]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'np.busday_count():'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.busday_count():'
- en: 'To find how many valid days there are in a specified range of datetime64 dates,
    use [`busday_count`](generated/numpy.busday_count.html#numpy.busday_count "numpy.busday_count"):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '要查找指定范围的datetime64日期中有多少个有效日期，请使用[`busday_count`](generated/numpy.busday_count.html#numpy.busday_count
    "numpy.busday_count"):'
- en: Example
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE80]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'If you have an array of datetime64 day values, and you want a count of how
    many of them are valid dates, you can do this:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个datetime64日期值的数组，并且想要计算其中有多少个有效日期，可以这样做：
- en: Example
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE81]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Custom Weekmasks
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义星期掩码
- en: Here are several examples of custom weekmask values. These examples specify
    the “busday” default of Monday through Friday being valid days.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个自定义星期掩码值的示例。这些示例指定了星期一到星期五为有效日期的“busday”默认值。
- en: 'Some examples:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例：
- en: '[PRE82]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'np.is_busday():'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.is_busday():'
- en: To test a [`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")
    value to see if it is a valid day, use [`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday").
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试[`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")值是否为有效日期，请使用[`is_busday`](generated/numpy.is_busday.html#numpy.is_busday
    "numpy.is_busday")。
- en: Example
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE83]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'np.busday_count():'
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'np.busday_count():'
- en: 'To find how many valid days there are in a specified range of datetime64 dates,
    use [`busday_count`](generated/numpy.busday_count.html#numpy.busday_count "numpy.busday_count"):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '要查找指定范围的datetime64日期中有多少个有效日期，请使用[`busday_count`](generated/numpy.busday_count.html#numpy.busday_count
    "numpy.busday_count"):'
- en: Example
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE84]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'If you have an array of datetime64 day values, and you want a count of how
    many of them are valid dates, you can do this:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个datetime64日期值的数组，并且想知道其中有多少个是有效日期，你可以这样做：
- en: Example
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE85]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Custom Weekmasks
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义周掩码
- en: Here are several examples of custom weekmask values. These examples specify
    the “busday” default of Monday through Friday being valid days.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个自定义周掩码值的例子。这些例子指定了周一到周五作为有效日期的“busday”默认值。
- en: 'Some examples:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一些例子：
- en: '[PRE86]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '## Datetime64 shortcomings'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '## Datetime64缺陷'
- en: The assumption that all days are exactly 86400 seconds long makes [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64") largely compatible with Python [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime
    "(in Python v3.11)") and “POSIX time” semantics; therefore they all share the
    same well known shortcomings with respect to the UTC timescale and historical
    time determination. A brief non exhaustive summary is given below.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 所有天数都恰好为86400秒长的假设使得[`datetime64`](arrays.scalars.html#numpy.datetime64 "numpy.datetime64")与Python
    [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "(在Python
    v3.11中)")以及“POSIX时间”语义基本兼容；因此它们都具有相同的关于UTC时间尺度和历史时间确定性的众所周知的缺陷。以下是一个简要的非详尽总结。
- en: It is impossible to parse valid UTC timestamps occurring during a positive leap
    second.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法解析发生在正闰秒期间的有效UTC时间戳。
- en: Example
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子
- en: '“2016-12-31 23:59:60 UTC” was a leap second, therefore “2016-12-31 23:59:60.450
    UTC” is a valid timestamp which is not parseable by [`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64"):'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “2016-12-31 23:59:60 UTC”是一个闰秒，因此“2016-12-31 23:59:60.450 UTC”是一个有效的时间戳，但无法被[`datetime64`](arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")解析：
- en: '[PRE87]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Timedelta64 computations between two UTC dates can be wrong by an integer number
    of SI seconds.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个UTC日期之间的Timedelta64计算可能会出现整数SI秒的错误。
- en: Example
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子
- en: 'Compute the number of SI seconds between “2021-01-01 12:56:23.423 UTC” and
    “2001-01-01 00:00:00.000 UTC”:'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算“2021-01-01 12:56:23.423 UTC”和“2001-01-01 00:00:00.000 UTC”之间的SI秒数：
- en: '[PRE88]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: however correct answer is *631198588.423* SI seconds because there were 5 leap
    seconds between 2001 and 2021.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而正确答案是*631198588.423* SI秒，因为2001年至2021年之间有5个闰秒。
- en: Timedelta64 computations for dates in the past do not return SI seconds, as
    one would expect.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去日期的Timedelta64计算不会返回SI秒，这与人们的预期不符。
- en: Example
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例子
- en: 'Compute the number of seconds between “000-01-01 UT” and “1600-01-01 UT”, where
    UT is [universal time](https://en.wikipedia.org/wiki/Universal_Time):'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算“000-01-01 UT”和“1600-01-01 UT”之间的秒数，其中UT是[世界时](https://en.wikipedia.org/wiki/Universal_Time)：
- en: '[PRE89]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The computed results, *50491123200* seconds, is obtained as the elapsed number
    of days (*584388*) times *86400* seconds; this is the number of seconds of a clock
    in sync with earth rotation. The exact value in SI seconds can only be estimated,
    e.g using data published in [Measurement of the Earth’s rotation: 720 BC to AD
    2015, 2016, Royal Society’s Proceedings A 472, by Stephenson et.al.](https://doi.org/10.1098/rspa.2016.0404).
    A sensible estimate is *50491112870 ± 90* seconds, with a difference of 10330
    seconds.'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算结果为*50491123200*秒，是通过天数（*584388*）乘以*86400*秒得到的；这是一个与地球自转同步的时钟的秒数。准确的SI秒值只能估算，例如使用[《测量地球自转：公元前720年至公元2015年，2016年，皇家学会A部门的论文》](https://doi.org/10.1098/rspa.2016.0404)中发布的数据。一个合理的估计是*50491112870
    ± 90*秒，差异为10330秒。
