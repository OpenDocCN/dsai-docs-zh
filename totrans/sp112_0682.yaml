- en: scipy.sparse.lil_array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Row-based LIst of Lists sparse array.
  prefs: []
  type: TYPE_NORMAL
- en: This is a structure for constructing sparse arrays incrementally. Note that
    inserting a single item can take linear time in the worst case; to construct the
    array efficiently, make sure the items are pre-sorted by index, per row.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be instantiated in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: lil_array(D)
  prefs: []
  type: TYPE_NORMAL
- en: where D is a 2-D ndarray
  prefs: []
  type: TYPE_NORMAL
- en: lil_array(S)
  prefs: []
  type: TYPE_NORMAL
- en: with another sparse array or matrix S (equivalent to S.tolil())
  prefs: []
  type: TYPE_NORMAL
- en: lil_array((M, N), [dtype])
  prefs: []
  type: TYPE_NORMAL
- en: to construct an empty array with shape (M, N) dtype is optional, defaulting
    to dtype=’d’.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Sparse arrays can be used in arithmetic operations: they support addition,
    subtraction, multiplication, division, and matrix power.'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of the LIL format
  prefs: []
  type: TYPE_NORMAL
- en: supports flexible slicing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changes to the array sparsity structure are efficient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of the LIL format
  prefs: []
  type: TYPE_NORMAL
- en: arithmetic operations LIL + LIL are slow (consider CSR or CSC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slow column slicing (consider CSC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slow matrix vector products (consider CSR or CSC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intended Usage
  prefs: []
  type: TYPE_NORMAL
- en: LIL is a convenient format for constructing sparse arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: once an array has been constructed, convert to CSR or CSC format for fast arithmetic
    and matrix vector operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: consider using the COO format when constructing large arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Structure
  prefs: []
  type: TYPE_NORMAL
- en: An array (`self.rows`) of rows, each of which is a sorted list of column indices
    of non-zero elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The corresponding nonzero values are stored in similar fashion in `self.data`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the array
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](scipy.sparse.lil_array.shape.html#scipy.sparse.lil_array.shape "scipy.sparse.lil_array.shape")2-tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions (this is always 2)
  prefs: []
  type: TYPE_NORMAL
- en: '[`nnz`](scipy.sparse.lil_array.nnz.html#scipy.sparse.lil_array.nnz "scipy.sparse.lil_array.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values, including explicit zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](scipy.sparse.lil_array.size.html#scipy.sparse.lil_array.size "scipy.sparse.lil_array.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values.
  prefs: []
  type: TYPE_NORMAL
- en: '**data**'
  prefs: []
  type: TYPE_NORMAL
- en: LIL format data array of the array
  prefs: []
  type: TYPE_NORMAL
- en: '**rows**'
  prefs: []
  type: TYPE_NORMAL
- en: LIL format row index array of the array
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](scipy.sparse.lil_array.T.html#scipy.sparse.lil_array.T "scipy.sparse.lil_array.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Transpose.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__len__`](scipy.sparse.lil_array.__len__.html#scipy.sparse.lil_array.__len__
    "scipy.sparse.lil_array.__len__")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`asformat`](scipy.sparse.lil_array.asformat.html#scipy.sparse.lil_array.asformat
    "scipy.sparse.lil_array.asformat")(format[, copy]) | Return this array/matrix
    in the passed format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfptype`](scipy.sparse.lil_array.asfptype.html#scipy.sparse.lil_array.asfptype
    "scipy.sparse.lil_array.asfptype")() | Upcast array/matrix to a floating point
    format (if necessary) |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](scipy.sparse.lil_array.astype.html#scipy.sparse.lil_array.astype
    "scipy.sparse.lil_array.astype")(dtype[, casting, copy]) | Cast the array/matrix
    elements to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](scipy.sparse.lil_array.conj.html#scipy.sparse.lil_array.conj "scipy.sparse.lil_array.conj")([copy])
    | Element-wise complex conjugation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](scipy.sparse.lil_array.conjugate.html#scipy.sparse.lil_array.conjugate
    "scipy.sparse.lil_array.conjugate")([copy]) | Element-wise complex conjugation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](scipy.sparse.lil_array.copy.html#scipy.sparse.lil_array.copy "scipy.sparse.lil_array.copy")()
    | Returns a copy of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`count_nonzero`](scipy.sparse.lil_array.count_nonzero.html#scipy.sparse.lil_array.count_nonzero
    "scipy.sparse.lil_array.count_nonzero")() | Number of non-zero entries, equivalent
    to |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](scipy.sparse.lil_array.diagonal.html#scipy.sparse.lil_array.diagonal
    "scipy.sparse.lil_array.diagonal")([k]) | Returns the kth diagonal of the array/matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dot`](scipy.sparse.lil_array.dot.html#scipy.sparse.lil_array.dot "scipy.sparse.lil_array.dot")(other)
    | Ordinary dot product |'
  prefs: []
  type: TYPE_TB
- en: '| [`getH`](scipy.sparse.lil_array.getH.html#scipy.sparse.lil_array.getH "scipy.sparse.lil_array.getH")()
    | Return the Hermitian transpose of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_shape`](scipy.sparse.lil_array.get_shape.html#scipy.sparse.lil_array.get_shape
    "scipy.sparse.lil_array.get_shape")() | Get shape of a sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getcol`](scipy.sparse.lil_array.getcol.html#scipy.sparse.lil_array.getcol
    "scipy.sparse.lil_array.getcol")(j) | Returns a copy of column j of the array/matrix,
    as an (m x 1) sparse array/matrix (column vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`getformat`](scipy.sparse.lil_array.getformat.html#scipy.sparse.lil_array.getformat
    "scipy.sparse.lil_array.getformat")() | Sparse array/matrix storage format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getmaxprint`](scipy.sparse.lil_array.getmaxprint.html#scipy.sparse.lil_array.getmaxprint
    "scipy.sparse.lil_array.getmaxprint")() | Maximum number of elements to display
    when printed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getnnz`](scipy.sparse.lil_array.getnnz.html#scipy.sparse.lil_array.getnnz
    "scipy.sparse.lil_array.getnnz")([axis]) | Number of stored values, including
    explicit zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getrow`](scipy.sparse.lil_array.getrow.html#scipy.sparse.lil_array.getrow
    "scipy.sparse.lil_array.getrow")(i) | Returns a copy of the ''i''th row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getrowview`](scipy.sparse.lil_array.getrowview.html#scipy.sparse.lil_array.getrowview
    "scipy.sparse.lil_array.getrowview")(i) | Returns a view of the ''i''th row (without
    copying). |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](scipy.sparse.lil_array.maximum.html#scipy.sparse.lil_array.maximum
    "scipy.sparse.lil_array.maximum")(other) | Element-wise maximum between this and
    another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.sparse.lil_array.mean.html#scipy.sparse.lil_array.mean "scipy.sparse.lil_array.mean")([axis, dtype, out])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](scipy.sparse.lil_array.minimum.html#scipy.sparse.lil_array.minimum
    "scipy.sparse.lil_array.minimum")(other) | Element-wise minimum between this and
    another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](scipy.sparse.lil_array.multiply.html#scipy.sparse.lil_array.multiply
    "scipy.sparse.lil_array.multiply")(other) | Point-wise multiplication by another
    array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](scipy.sparse.lil_array.nonzero.html#scipy.sparse.lil_array.nonzero
    "scipy.sparse.lil_array.nonzero")() | Nonzero indices of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](scipy.sparse.lil_array.power.html#scipy.sparse.lil_array.power
    "scipy.sparse.lil_array.power")(n[, dtype]) | Element-wise power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](scipy.sparse.lil_array.reshape.html#scipy.sparse.lil_array.reshape
    "scipy.sparse.lil_array.reshape")(self, shape[, order, copy]) | Gives a new shape
    to a sparse array/matrix without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](scipy.sparse.lil_array.resize.html#scipy.sparse.lil_array.resize
    "scipy.sparse.lil_array.resize")(*shape) | Resize the array/matrix in-place to
    dimensions given by `shape` |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_shape`](scipy.sparse.lil_array.set_shape.html#scipy.sparse.lil_array.set_shape
    "scipy.sparse.lil_array.set_shape")(shape) | See [`reshape`](scipy.sparse.lil_array.reshape.html#scipy.sparse.lil_array.reshape
    "scipy.sparse.lil_array.reshape"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiag`](scipy.sparse.lil_array.setdiag.html#scipy.sparse.lil_array.setdiag
    "scipy.sparse.lil_array.setdiag")(values[, k]) | Set diagonal or off-diagonal
    elements of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](scipy.sparse.lil_array.sum.html#scipy.sparse.lil_array.sum "scipy.sparse.lil_array.sum")([axis, dtype, out])
    | Sum the array/matrix elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`toarray`](scipy.sparse.lil_array.toarray.html#scipy.sparse.lil_array.toarray
    "scipy.sparse.lil_array.toarray")([order, out]) | Return a dense ndarray representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobsr`](scipy.sparse.lil_array.tobsr.html#scipy.sparse.lil_array.tobsr
    "scipy.sparse.lil_array.tobsr")([blocksize, copy]) | Convert this array/matrix
    to Block Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocoo`](scipy.sparse.lil_array.tocoo.html#scipy.sparse.lil_array.tocoo
    "scipy.sparse.lil_array.tocoo")([copy]) | Convert this array/matrix to COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsc`](scipy.sparse.lil_array.tocsc.html#scipy.sparse.lil_array.tocsc
    "scipy.sparse.lil_array.tocsc")([copy]) | Convert this array/matrix to Compressed
    Sparse Column format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsr`](scipy.sparse.lil_array.tocsr.html#scipy.sparse.lil_array.tocsr
    "scipy.sparse.lil_array.tocsr")([copy]) | Convert this array/matrix to Compressed
    Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todense`](scipy.sparse.lil_array.todense.html#scipy.sparse.lil_array.todense
    "scipy.sparse.lil_array.todense")([order, out]) | Return a dense representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todia`](scipy.sparse.lil_array.todia.html#scipy.sparse.lil_array.todia
    "scipy.sparse.lil_array.todia")([copy]) | Convert this array/matrix to sparse
    DIAgonal format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todok`](scipy.sparse.lil_array.todok.html#scipy.sparse.lil_array.todok
    "scipy.sparse.lil_array.todok")([copy]) | Convert this array/matrix to Dictionary
    Of Keys format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolil`](scipy.sparse.lil_array.tolil.html#scipy.sparse.lil_array.tolil
    "scipy.sparse.lil_array.tolil")([copy]) | Convert this array/matrix to List of
    Lists format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](scipy.sparse.lil_array.trace.html#scipy.sparse.lil_array.trace
    "scipy.sparse.lil_array.trace")([offset]) | Returns the sum along diagonals of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](scipy.sparse.lil_array.transpose.html#scipy.sparse.lil_array.transpose
    "scipy.sparse.lil_array.transpose")([axes, copy]) | Reverses the dimensions of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| **__getitem__** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **__mul__** |  |'
  prefs: []
  type: TYPE_TB
