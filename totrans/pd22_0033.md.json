["```py\nIn [1]: pd.Series([\"a\", \"b\", \"c\"])\nOut[1]: \n0    a\n1    b\n2    c\ndtype: object \n```", "```py\nIn [2]: pd.Series([\"a\", \"b\", \"c\"], dtype=\"string\")\nOut[2]: \n0    a\n1    b\n2    c\ndtype: string\n\nIn [3]: pd.Series([\"a\", \"b\", \"c\"], dtype=pd.StringDtype())\nOut[3]: \n0    a\n1    b\n2    c\ndtype: string \n```", "```py\nIn [4]: s = pd.Series([\"a\", \"b\", \"c\"])\n\nIn [5]: s\nOut[5]: \n0    a\n1    b\n2    c\ndtype: object\n\nIn [6]: s.astype(\"string\")\nOut[6]: \n0    a\n1    b\n2    c\ndtype: string \n```", "```py\nIn [7]: s = pd.Series([\"a\", 2, np.nan], dtype=\"string\")\n\nIn [8]: s\nOut[8]: \n0       a\n1       2\n2    <NA>\ndtype: string\n\nIn [9]: type(s[1])\nOut[9]: str \n```", "```py\nIn [10]: s1 = pd.Series([1, 2, np.nan], dtype=\"Int64\")\n\nIn [11]: s1\nOut[11]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [12]: s2 = s1.astype(\"string\")\n\nIn [13]: s2\nOut[13]: \n0       1\n1       2\n2    <NA>\ndtype: string\n\nIn [14]: type(s2[0])\nOut[14]: str \n```", "```py\n    In [15]: s = pd.Series([\"a\", None, \"b\"], dtype=\"string\")\n\n    In [16]: s\n    Out[16]: \n    0       a\n    1    <NA>\n    2       b\n    dtype: string\n\n    In [17]: s.str.count(\"a\")\n    Out[17]: \n    0       1\n    1    <NA>\n    2       0\n    dtype: Int64\n\n    In [18]: s.dropna().str.count(\"a\")\n    Out[18]: \n    0    1\n    2    0\n    dtype: Int64 \n    ```", "```py\n    In [19]: s2 = pd.Series([\"a\", None, \"b\"], dtype=\"object\")\n\n    In [20]: s2.str.count(\"a\")\n    Out[20]: \n    0    1.0\n    1    NaN\n    2    0.0\n    dtype: float64\n\n    In [21]: s2.dropna().str.count(\"a\")\n    Out[21]: \n    0    1\n    2    0\n    dtype: int64 \n    ```", "```py\n    In [22]: s.str.isdigit()\n    Out[22]: \n    0    False\n    1     <NA>\n    2    False\n    dtype: boolean\n\n    In [23]: s.str.match(\"a\")\n    Out[23]: \n    0     True\n    1     <NA>\n    2    False\n    dtype: boolean \n    ```", "```py\nIn [24]: s = pd.Series(\n ....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n ....: )\n ....: \n\nIn [25]: s.str.lower()\nOut[25]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5    <NA>\n6    caba\n7     dog\n8     cat\ndtype: string\n\nIn [26]: s.str.upper()\nOut[26]: \n0       A\n1       B\n2       C\n3    AABA\n4    BACA\n5    <NA>\n6    CABA\n7     DOG\n8     CAT\ndtype: string\n\nIn [27]: s.str.len()\nOut[27]: \n0       1\n1       1\n2       1\n3       4\n4       4\n5    <NA>\n6       4\n7       3\n8       3\ndtype: Int64 \n```", "```py\nIn [28]: idx = pd.Index([\" jack\", \"jill \", \" jesse \", \"frank\"])\n\nIn [29]: idx.str.strip()\nOut[29]: Index(['jack', 'jill', 'jesse', 'frank'], dtype='object')\n\nIn [30]: idx.str.lstrip()\nOut[30]: Index(['jack', 'jill ', 'jesse ', 'frank'], dtype='object')\n\nIn [31]: idx.str.rstrip()\nOut[31]: Index([' jack', 'jill', ' jesse', 'frank'], dtype='object') \n```", "```py\nIn [32]: df = pd.DataFrame(\n ....:    np.random.randn(3, 2), columns=[\" Column A \", \" Column B \"], index=range(3)\n ....: )\n ....: \n\nIn [33]: df\nOut[33]: \n Column A   Column B \n0   0.469112  -0.282863\n1  -1.509059  -1.135632\n2   1.212112  -0.173215 \n```", "```py\nIn [34]: df.columns.str.strip()\nOut[34]: Index(['Column A', 'Column B'], dtype='object')\n\nIn [35]: df.columns.str.lower()\nOut[35]: Index([' column a ', ' column b '], dtype='object') \n```", "```py\nIn [36]: df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n\nIn [37]: df\nOut[37]: \n column_a  column_b\n0  0.469112 -0.282863\n1 -1.509059 -1.135632\n2  1.212112 -0.173215 \n```", "```py\nIn [38]: s2 = pd.Series([\"a_b_c\", \"c_d_e\", np.nan, \"f_g_h\"], dtype=\"string\")\n\nIn [39]: s2.str.split(\"_\")\nOut[39]: \n0    [a, b, c]\n1    [c, d, e]\n2         <NA>\n3    [f, g, h]\ndtype: object \n```", "```py\nIn [40]: s2.str.split(\"_\").str.get(1)\nOut[40]: \n0       b\n1       d\n2    <NA>\n3       g\ndtype: object\n\nIn [41]: s2.str.split(\"_\").str[1]\nOut[41]: \n0       b\n1       d\n2    <NA>\n3       g\ndtype: object \n```", "```py\nIn [42]: s2.str.split(\"_\", expand=True)\nOut[42]: \n 0     1     2\n0     a     b     c\n1     c     d     e\n2  <NA>  <NA>  <NA>\n3     f     g     h \n```", "```py\nIn [43]: s2.str.split(\"_\", expand=True, n=1)\nOut[43]: \n 0     1\n0     a   b_c\n1     c   d_e\n2  <NA>  <NA>\n3     f   g_h \n```", "```py\nIn [44]: s2.str.rsplit(\"_\", expand=True, n=1)\nOut[44]: \n 0     1\n0   a_b     c\n1   c_d     e\n2  <NA>  <NA>\n3   f_g     h \n```", "```py\nIn [45]: s3 = pd.Series(\n ....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", \"\", np.nan, \"CABA\", \"dog\", \"cat\"],\n ....:    dtype=\"string\",\n ....: )\n ....: \n\nIn [46]: s3\nOut[46]: \n0       A\n1       B\n2       C\n3    Aaba\n4    Baca\n5 \n6    <NA>\n7    CABA\n8     dog\n9     cat\ndtype: string\n\nIn [47]: s3.str.replace(\"^.a|dog\", \"XX-XX \", case=False, regex=True)\nOut[47]: \n0           A\n1           B\n2           C\n3    XX-XX ba\n4    XX-XX ca\n5 \n6        <NA>\n7    XX-XX BA\n8      XX-XX \n9     XX-XX t\ndtype: string \n```", "```py\nIn [48]: s4 = pd.Series([\"a.b\", \".\", \"b\", np.nan, \"\"], dtype=\"string\")\n\nIn [49]: s4\nOut[49]: \n0     a.b\n1       .\n2       b\n3    <NA>\n4 \ndtype: string\n\nIn [50]: s4.str.replace(\".\", \"a\", regex=True)\nOut[50]: \n0     aaa\n1       a\n2       a\n3    <NA>\n4 \ndtype: string \n```", "```py\nIn [51]: dollars = pd.Series([\"12\", \"-$10\", \"$10,000\"], dtype=\"string\")\n\n# These lines are equivalent\nIn [52]: dollars.str.replace(r\"-\\$\", \"-\", regex=True)\nOut[52]: \n0         12\n1        -10\n2    $10,000\ndtype: string\n\nIn [53]: dollars.str.replace(\"-$\", \"-\", regex=False)\nOut[53]: \n0         12\n1        -10\n2    $10,000\ndtype: string \n```", "```py\n# Reverse every lowercase alphabetic word\nIn [54]: pat = r\"[a-z]+\"\n\nIn [55]: def repl(m):\n ....:    return m.group(0)[::-1]\n ....: \n\nIn [56]: pd.Series([\"foo 123\", \"bar baz\", np.nan], dtype=\"string\").str.replace(\n ....:    pat, repl, regex=True\n ....: )\n ....: \nOut[56]: \n0    oof 123\n1    rab zab\n2       <NA>\ndtype: string\n\n# Using regex groups\nIn [57]: pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n\nIn [58]: def repl(m):\n ....:    return m.group(\"two\").swapcase()\n ....: \n\nIn [59]: pd.Series([\"Foo Bar Baz\", np.nan], dtype=\"string\").str.replace(\n ....:    pat, repl, regex=True\n ....: )\n ....: \nOut[59]: \n0     bAR\n1    <NA>\ndtype: string \n```", "```py\nIn [60]: import re\n\nIn [61]: regex_pat = re.compile(r\"^.a|dog\", flags=re.IGNORECASE)\n\nIn [62]: s3.str.replace(regex_pat, \"XX-XX \", regex=True)\nOut[62]: \n0           A\n1           B\n2           C\n3    XX-XX ba\n4    XX-XX ca\n5 \n6        <NA>\n7    XX-XX BA\n8      XX-XX \n9     XX-XX t\ndtype: string \n```", "```py\nIn [63]: s3.str.replace(regex_pat, 'XX-XX ', flags=re.IGNORECASE)\n---------------------------------------------------------------------------\nValueError: case and flags cannot be set when pat is a compiled regex \n```", "```py\nIn [64]: s = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\n\nIn [65]: s.str.removeprefix(\"str_\")\nOut[65]: \n0          foo\n1          bar\n2    no_prefix\ndtype: object\n\nIn [66]: s = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\n\nIn [67]: s.str.removesuffix(\"_str\")\nOut[67]: \n0          foo\n1          bar\n2    no_suffix\ndtype: object \n```", "```py\nIn [68]: s = pd.Series([\"a\", \"b\", \"c\", \"d\"], dtype=\"string\")\n\nIn [69]: s.str.cat(sep=\",\")\nOut[69]: 'a,b,c,d' \n```", "```py\nIn [70]: s.str.cat()\nOut[70]: 'abcd' \n```", "```py\nIn [71]: t = pd.Series([\"a\", \"b\", np.nan, \"d\"], dtype=\"string\")\n\nIn [72]: t.str.cat(sep=\",\")\nOut[72]: 'a,b,d'\n\nIn [73]: t.str.cat(sep=\",\", na_rep=\"-\")\nOut[73]: 'a,b,-,d' \n```", "```py\nIn [74]: s.str.cat([\"A\", \"B\", \"C\", \"D\"])\nOut[74]: \n0    aA\n1    bB\n2    cC\n3    dD\ndtype: string \n```", "```py\nIn [75]: s.str.cat(t)\nOut[75]: \n0      aa\n1      bb\n2    <NA>\n3      dd\ndtype: string\n\nIn [76]: s.str.cat(t, na_rep=\"-\")\nOut[76]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string \n```", "```py\nIn [77]: d = pd.concat([t, s], axis=1)\n\nIn [78]: s\nOut[78]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [79]: d\nOut[79]: \n 0  1\n0     a  a\n1     b  b\n2  <NA>  c\n3     d  d\n\nIn [80]: s.str.cat(d, na_rep=\"-\")\nOut[80]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [81]: u = pd.Series([\"b\", \"d\", \"a\", \"c\"], index=[1, 3, 0, 2], dtype=\"string\")\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [83]: u\nOut[83]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [84]: s.str.cat(u)\nOut[84]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string\n\nIn [85]: s.str.cat(u, join=\"left\")\nOut[85]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string \n```", "```py\nIn [86]: v = pd.Series([\"z\", \"a\", \"b\", \"d\", \"e\"], index=[-1, 0, 1, 3, 4], dtype=\"string\")\n\nIn [87]: s\nOut[87]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [88]: v\nOut[88]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [89]: s.str.cat(v, join=\"left\", na_rep=\"-\")\nOut[89]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string\n\nIn [90]: s.str.cat(v, join=\"outer\", na_rep=\"-\")\nOut[90]: \n-1    -z\n 0    aa\n 1    bb\n 2    c-\n 3    dd\n 4    -e\ndtype: string \n```", "```py\nIn [91]: f = d.loc[[3, 2, 1, 0], :]\n\nIn [92]: s\nOut[92]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [93]: f\nOut[93]: \n 0  1\n3     d  d\n2  <NA>  c\n1     b  b\n0     a  a\n\nIn [94]: s.str.cat(f, join=\"left\", na_rep=\"-\")\nOut[94]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [95]: s\nOut[95]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [96]: u\nOut[96]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [97]: s.str.cat([u, u.to_numpy()], join=\"left\")\nOut[97]: \n0    aab\n1    bbd\n2    cca\n3    ddc\ndtype: string \n```", "```py\nIn [98]: v\nOut[98]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [99]: s.str.cat([v, u, u.to_numpy()], join=\"outer\", na_rep=\"-\")\nOut[99]: \n-1    -z--\n0     aaab\n1     bbbd\n2     c-ca\n3     dddc\n4     -e--\ndtype: string \n```", "```py\nIn [100]: u.loc[[3]]\nOut[100]: \n3    d\ndtype: string\n\nIn [101]: v.loc[[-1, 0]]\nOut[101]: \n-1    z\n 0    a\ndtype: string\n\nIn [102]: s.str.cat([u.loc[[3]], v.loc[[-1, 0]]], join=\"right\", na_rep=\"-\")\nOut[102]: \n 3    dd-\n-1    --z\n 0    a-a\ndtype: string \n```", "```py\nIn [103]: s = pd.Series(\n .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n .....: )\n .....: \n\nIn [104]: s.str[0]\nOut[104]: \n0       A\n1       B\n2       C\n3       A\n4       B\n5    <NA>\n6       C\n7       d\n8       c\ndtype: string\n\nIn [105]: s.str[1]\nOut[105]: \n0    <NA>\n1    <NA>\n2    <NA>\n3       a\n4       a\n5    <NA>\n6       A\n7       o\n8       a\ndtype: string \n```", "```py\nIn [106]: pd.Series(\n .....:    [\"a1\", \"b2\", \"c3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])(\\d)\", expand=False)\n .....: \nOut[106]: \n 0     1\n0     a     1\n1     b     2\n2  <NA>  <NA> \n```", "```py\nIn [107]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(\n .....:    r\"(?P<letter>[ab])(?P<digit>\\d)\", expand=False\n .....: )\n .....: \nOut[107]: \n letter digit\n0      a     1\n1      b     2\n2   <NA>  <NA> \n```", "```py\nIn [108]: pd.Series(\n .....:    [\"a1\", \"b2\", \"3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])?(\\d)\", expand=False)\n .....: \nOut[108]: \n 0  1\n0     a  1\n1     b  2\n2  <NA>  3 \n```", "```py\nIn [109]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=True)\nOut[109]: \n 0\n0     1\n1     2\n2  <NA> \n```", "```py\nIn [110]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=False)\nOut[110]: \n0       1\n1       2\n2    <NA>\ndtype: string \n```", "```py\nIn [111]: s = pd.Series([\"a1\", \"b2\", \"c3\"], [\"A11\", \"B22\", \"C33\"], dtype=\"string\")\n\nIn [112]: s\nOut[112]: \nA11    a1\nB22    b2\nC33    c3\ndtype: string\n\nIn [113]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=True)\nOut[113]: \n letter\n0      A\n1      B\n2      C \n```", "```py\nIn [114]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=False)\nOut[114]: Index(['A', 'B', 'C'], dtype='object', name='letter') \n```", "```py\nIn [115]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=True)\nOut[115]: \n letter   1\n0      A  11\n1      B  22\n2      C  33 \n```", "```py\nIn [116]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[116], line 1\n----> 1 s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:137, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n  136     raise TypeError(msg)\n--> 137 return func(self, *args, **kwargs)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:2743, in StringMethods.extract(self, pat, flags, expand)\n  2740     raise ValueError(\"pattern contains no capture groups\")\n  2742 if not expand and regex.groups > 1 and isinstance(self._data, ABCIndex):\n-> 2743     raise ValueError(\"only one regex group is supported with Index\")\n  2745 obj = self._data\n  2746 result_dtype = _result_dtype(obj)\n\nValueError: only one regex group is supported with Index \n```", "```py\nIn [117]: s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"], dtype=\"string\")\n\nIn [118]: s\nOut[118]: \nA    a1a2\nB      b1\nC      c1\ndtype: string\n\nIn [119]: two_groups = \"(?P<letter>[a-z])(?P<digit>[0-9])\"\n\nIn [120]: s.str.extract(two_groups, expand=True)\nOut[120]: \n letter digit\nA      a     1\nB      b     1\nC      c     1 \n```", "```py\nIn [121]: s.str.extractall(two_groups)\nOut[121]: \n letter digit\n match \nA 0          a     1\n 1          a     2\nB 0          b     1\nC 0          c     1 \n```", "```py\nIn [122]: s = pd.Series([\"a3\", \"b3\", \"c2\"], dtype=\"string\")\n\nIn [123]: s\nOut[123]: \n0    a3\n1    b3\n2    c2\ndtype: string \n```", "```py\nIn [124]: extract_result = s.str.extract(two_groups, expand=True)\n\nIn [125]: extract_result\nOut[125]: \n letter digit\n0      a     3\n1      b     3\n2      c     2\n\nIn [126]: extractall_result = s.str.extractall(two_groups)\n\nIn [127]: extractall_result\nOut[127]: \n letter digit\n match \n0 0          a     3\n1 0          b     3\n2 0          c     2\n\nIn [128]: extractall_result.xs(0, level=\"match\")\nOut[128]: \n letter digit\n0      a     3\n1      b     3\n2      c     2 \n```", "```py\nIn [129]: pd.Index([\"a1a2\", \"b1\", \"c1\"]).str.extractall(two_groups)\nOut[129]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1\n\nIn [130]: pd.Series([\"a1a2\", \"b1\", \"c1\"], dtype=\"string\").str.extractall(two_groups)\nOut[130]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1 \n```", "```py\nIn [131]: pattern = r\"[0-9][a-z]\"\n\nIn [132]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.contains(pattern)\n .....: \nOut[132]: \n0    False\n1    False\n2     True\n3     True\n4     True\n5     True\ndtype: boolean \n```", "```py\nIn [133]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.match(pattern)\n .....: \nOut[133]: \n0    False\n1    False\n2     True\n3     True\n4    False\n5     True\ndtype: boolean \n```", "```py\nIn [134]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.fullmatch(pattern)\n .....: \nOut[134]: \n0    False\n1    False\n2     True\n3     True\n4    False\n5    False\ndtype: boolean \n```", "```py\nIn [135]: s4 = pd.Series(\n .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n .....: )\n .....: \n\nIn [136]: s4.str.contains(\"A\", na=False)\nOut[136]: \n0     True\n1    False\n2    False\n3     True\n4    False\n5    False\n6     True\n7    False\n8    False\ndtype: boolean \n```", "```py\nIn [137]: s = pd.Series([\"a\", \"a|b\", np.nan, \"a|c\"], dtype=\"string\")\n\nIn [138]: s.str.get_dummies(sep=\"|\")\nOut[138]: \n a  b  c\n0  1  0  0\n1  1  1  0\n2  0  0  0\n3  1  0  1 \n```", "```py\nIn [139]: idx = pd.Index([\"a\", \"a|b\", np.nan, \"a|c\"])\n\nIn [140]: idx.str.get_dummies(sep=\"|\")\nOut[140]: \nMultiIndex([(1, 0, 0),\n (1, 1, 0),\n (0, 0, 0),\n (1, 0, 1)],\n names=['a', 'b', 'c']) \n```", "```py\nIn [1]: pd.Series([\"a\", \"b\", \"c\"])\nOut[1]: \n0    a\n1    b\n2    c\ndtype: object \n```", "```py\nIn [2]: pd.Series([\"a\", \"b\", \"c\"], dtype=\"string\")\nOut[2]: \n0    a\n1    b\n2    c\ndtype: string\n\nIn [3]: pd.Series([\"a\", \"b\", \"c\"], dtype=pd.StringDtype())\nOut[3]: \n0    a\n1    b\n2    c\ndtype: string \n```", "```py\nIn [4]: s = pd.Series([\"a\", \"b\", \"c\"])\n\nIn [5]: s\nOut[5]: \n0    a\n1    b\n2    c\ndtype: object\n\nIn [6]: s.astype(\"string\")\nOut[6]: \n0    a\n1    b\n2    c\ndtype: string \n```", "```py\nIn [7]: s = pd.Series([\"a\", 2, np.nan], dtype=\"string\")\n\nIn [8]: s\nOut[8]: \n0       a\n1       2\n2    <NA>\ndtype: string\n\nIn [9]: type(s[1])\nOut[9]: str \n```", "```py\nIn [10]: s1 = pd.Series([1, 2, np.nan], dtype=\"Int64\")\n\nIn [11]: s1\nOut[11]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [12]: s2 = s1.astype(\"string\")\n\nIn [13]: s2\nOut[13]: \n0       1\n1       2\n2    <NA>\ndtype: string\n\nIn [14]: type(s2[0])\nOut[14]: str \n```", "```py\n    In [15]: s = pd.Series([\"a\", None, \"b\"], dtype=\"string\")\n\n    In [16]: s\n    Out[16]: \n    0       a\n    1    <NA>\n    2       b\n    dtype: string\n\n    In [17]: s.str.count(\"a\")\n    Out[17]: \n    0       1\n    1    <NA>\n    2       0\n    dtype: Int64\n\n    In [18]: s.dropna().str.count(\"a\")\n    Out[18]: \n    0    1\n    2    0\n    dtype: Int64 \n    ```", "```py\n    In [19]: s2 = pd.Series([\"a\", None, \"b\"], dtype=\"object\")\n\n    In [20]: s2.str.count(\"a\")\n    Out[20]: \n    0    1.0\n    1    NaN\n    2    0.0\n    dtype: float64\n\n    In [21]: s2.dropna().str.count(\"a\")\n    Out[21]: \n    0    1\n    2    0\n    dtype: int64 \n    ```", "```py\n    In [22]: s.str.isdigit()\n    Out[22]: \n    0    False\n    1     <NA>\n    2    False\n    dtype: boolean\n\n    In [23]: s.str.match(\"a\")\n    Out[23]: \n    0     True\n    1     <NA>\n    2    False\n    dtype: boolean \n    ```", "```py\n    In [15]: s = pd.Series([\"a\", None, \"b\"], dtype=\"string\")\n\n    In [16]: s\n    Out[16]: \n    0       a\n    1    <NA>\n    2       b\n    dtype: string\n\n    In [17]: s.str.count(\"a\")\n    Out[17]: \n    0       1\n    1    <NA>\n    2       0\n    dtype: Int64\n\n    In [18]: s.dropna().str.count(\"a\")\n    Out[18]: \n    0    1\n    2    0\n    dtype: Int64 \n    ```", "```py\n    In [19]: s2 = pd.Series([\"a\", None, \"b\"], dtype=\"object\")\n\n    In [20]: s2.str.count(\"a\")\n    Out[20]: \n    0    1.0\n    1    NaN\n    2    0.0\n    dtype: float64\n\n    In [21]: s2.dropna().str.count(\"a\")\n    Out[21]: \n    0    1\n    2    0\n    dtype: int64 \n    ```", "```py\n    In [22]: s.str.isdigit()\n    Out[22]: \n    0    False\n    1     <NA>\n    2    False\n    dtype: boolean\n\n    In [23]: s.str.match(\"a\")\n    Out[23]: \n    0     True\n    1     <NA>\n    2    False\n    dtype: boolean \n    ```", "```py\nIn [24]: s = pd.Series(\n ....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n ....: )\n ....: \n\nIn [25]: s.str.lower()\nOut[25]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5    <NA>\n6    caba\n7     dog\n8     cat\ndtype: string\n\nIn [26]: s.str.upper()\nOut[26]: \n0       A\n1       B\n2       C\n3    AABA\n4    BACA\n5    <NA>\n6    CABA\n7     DOG\n8     CAT\ndtype: string\n\nIn [27]: s.str.len()\nOut[27]: \n0       1\n1       1\n2       1\n3       4\n4       4\n5    <NA>\n6       4\n7       3\n8       3\ndtype: Int64 \n```", "```py\nIn [28]: idx = pd.Index([\" jack\", \"jill \", \" jesse \", \"frank\"])\n\nIn [29]: idx.str.strip()\nOut[29]: Index(['jack', 'jill', 'jesse', 'frank'], dtype='object')\n\nIn [30]: idx.str.lstrip()\nOut[30]: Index(['jack', 'jill ', 'jesse ', 'frank'], dtype='object')\n\nIn [31]: idx.str.rstrip()\nOut[31]: Index([' jack', 'jill', ' jesse', 'frank'], dtype='object') \n```", "```py\nIn [32]: df = pd.DataFrame(\n ....:    np.random.randn(3, 2), columns=[\" Column A \", \" Column B \"], index=range(3)\n ....: )\n ....: \n\nIn [33]: df\nOut[33]: \n Column A   Column B \n0   0.469112  -0.282863\n1  -1.509059  -1.135632\n2   1.212112  -0.173215 \n```", "```py\nIn [34]: df.columns.str.strip()\nOut[34]: Index(['Column A', 'Column B'], dtype='object')\n\nIn [35]: df.columns.str.lower()\nOut[35]: Index([' column a ', ' column b '], dtype='object') \n```", "```py\nIn [36]: df.columns = df.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n\nIn [37]: df\nOut[37]: \n column_a  column_b\n0  0.469112 -0.282863\n1 -1.509059 -1.135632\n2  1.212112 -0.173215 \n```", "```py\nIn [38]: s2 = pd.Series([\"a_b_c\", \"c_d_e\", np.nan, \"f_g_h\"], dtype=\"string\")\n\nIn [39]: s2.str.split(\"_\")\nOut[39]: \n0    [a, b, c]\n1    [c, d, e]\n2         <NA>\n3    [f, g, h]\ndtype: object \n```", "```py\nIn [40]: s2.str.split(\"_\").str.get(1)\nOut[40]: \n0       b\n1       d\n2    <NA>\n3       g\ndtype: object\n\nIn [41]: s2.str.split(\"_\").str[1]\nOut[41]: \n0       b\n1       d\n2    <NA>\n3       g\ndtype: object \n```", "```py\nIn [42]: s2.str.split(\"_\", expand=True)\nOut[42]: \n 0     1     2\n0     a     b     c\n1     c     d     e\n2  <NA>  <NA>  <NA>\n3     f     g     h \n```", "```py\nIn [43]: s2.str.split(\"_\", expand=True, n=1)\nOut[43]: \n 0     1\n0     a   b_c\n1     c   d_e\n2  <NA>  <NA>\n3     f   g_h \n```", "```py\nIn [44]: s2.str.rsplit(\"_\", expand=True, n=1)\nOut[44]: \n 0     1\n0   a_b     c\n1   c_d     e\n2  <NA>  <NA>\n3   f_g     h \n```", "```py\nIn [45]: s3 = pd.Series(\n ....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", \"\", np.nan, \"CABA\", \"dog\", \"cat\"],\n ....:    dtype=\"string\",\n ....: )\n ....: \n\nIn [46]: s3\nOut[46]: \n0       A\n1       B\n2       C\n3    Aaba\n4    Baca\n5 \n6    <NA>\n7    CABA\n8     dog\n9     cat\ndtype: string\n\nIn [47]: s3.str.replace(\"^.a|dog\", \"XX-XX \", case=False, regex=True)\nOut[47]: \n0           A\n1           B\n2           C\n3    XX-XX ba\n4    XX-XX ca\n5 \n6        <NA>\n7    XX-XX BA\n8      XX-XX \n9     XX-XX t\ndtype: string \n```", "```py\nIn [48]: s4 = pd.Series([\"a.b\", \".\", \"b\", np.nan, \"\"], dtype=\"string\")\n\nIn [49]: s4\nOut[49]: \n0     a.b\n1       .\n2       b\n3    <NA>\n4 \ndtype: string\n\nIn [50]: s4.str.replace(\".\", \"a\", regex=True)\nOut[50]: \n0     aaa\n1       a\n2       a\n3    <NA>\n4 \ndtype: string \n```", "```py\nIn [51]: dollars = pd.Series([\"12\", \"-$10\", \"$10,000\"], dtype=\"string\")\n\n# These lines are equivalent\nIn [52]: dollars.str.replace(r\"-\\$\", \"-\", regex=True)\nOut[52]: \n0         12\n1        -10\n2    $10,000\ndtype: string\n\nIn [53]: dollars.str.replace(\"-$\", \"-\", regex=False)\nOut[53]: \n0         12\n1        -10\n2    $10,000\ndtype: string \n```", "```py\n# Reverse every lowercase alphabetic word\nIn [54]: pat = r\"[a-z]+\"\n\nIn [55]: def repl(m):\n ....:    return m.group(0)[::-1]\n ....: \n\nIn [56]: pd.Series([\"foo 123\", \"bar baz\", np.nan], dtype=\"string\").str.replace(\n ....:    pat, repl, regex=True\n ....: )\n ....: \nOut[56]: \n0    oof 123\n1    rab zab\n2       <NA>\ndtype: string\n\n# Using regex groups\nIn [57]: pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n\nIn [58]: def repl(m):\n ....:    return m.group(\"two\").swapcase()\n ....: \n\nIn [59]: pd.Series([\"Foo Bar Baz\", np.nan], dtype=\"string\").str.replace(\n ....:    pat, repl, regex=True\n ....: )\n ....: \nOut[59]: \n0     bAR\n1    <NA>\ndtype: string \n```", "```py\nIn [60]: import re\n\nIn [61]: regex_pat = re.compile(r\"^.a|dog\", flags=re.IGNORECASE)\n\nIn [62]: s3.str.replace(regex_pat, \"XX-XX \", regex=True)\nOut[62]: \n0           A\n1           B\n2           C\n3    XX-XX ba\n4    XX-XX ca\n5 \n6        <NA>\n7    XX-XX BA\n8      XX-XX \n9     XX-XX t\ndtype: string \n```", "```py\nIn [63]: s3.str.replace(regex_pat, 'XX-XX ', flags=re.IGNORECASE)\n---------------------------------------------------------------------------\nValueError: case and flags cannot be set when pat is a compiled regex \n```", "```py\nIn [64]: s = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\n\nIn [65]: s.str.removeprefix(\"str_\")\nOut[65]: \n0          foo\n1          bar\n2    no_prefix\ndtype: object\n\nIn [66]: s = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\n\nIn [67]: s.str.removesuffix(\"_str\")\nOut[67]: \n0          foo\n1          bar\n2    no_suffix\ndtype: object \n```", "```py\nIn [68]: s = pd.Series([\"a\", \"b\", \"c\", \"d\"], dtype=\"string\")\n\nIn [69]: s.str.cat(sep=\",\")\nOut[69]: 'a,b,c,d' \n```", "```py\nIn [70]: s.str.cat()\nOut[70]: 'abcd' \n```", "```py\nIn [71]: t = pd.Series([\"a\", \"b\", np.nan, \"d\"], dtype=\"string\")\n\nIn [72]: t.str.cat(sep=\",\")\nOut[72]: 'a,b,d'\n\nIn [73]: t.str.cat(sep=\",\", na_rep=\"-\")\nOut[73]: 'a,b,-,d' \n```", "```py\nIn [74]: s.str.cat([\"A\", \"B\", \"C\", \"D\"])\nOut[74]: \n0    aA\n1    bB\n2    cC\n3    dD\ndtype: string \n```", "```py\nIn [75]: s.str.cat(t)\nOut[75]: \n0      aa\n1      bb\n2    <NA>\n3      dd\ndtype: string\n\nIn [76]: s.str.cat(t, na_rep=\"-\")\nOut[76]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string \n```", "```py\nIn [77]: d = pd.concat([t, s], axis=1)\n\nIn [78]: s\nOut[78]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [79]: d\nOut[79]: \n 0  1\n0     a  a\n1     b  b\n2  <NA>  c\n3     d  d\n\nIn [80]: s.str.cat(d, na_rep=\"-\")\nOut[80]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [81]: u = pd.Series([\"b\", \"d\", \"a\", \"c\"], index=[1, 3, 0, 2], dtype=\"string\")\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [83]: u\nOut[83]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [84]: s.str.cat(u)\nOut[84]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string\n\nIn [85]: s.str.cat(u, join=\"left\")\nOut[85]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string \n```", "```py\nIn [86]: v = pd.Series([\"z\", \"a\", \"b\", \"d\", \"e\"], index=[-1, 0, 1, 3, 4], dtype=\"string\")\n\nIn [87]: s\nOut[87]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [88]: v\nOut[88]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [89]: s.str.cat(v, join=\"left\", na_rep=\"-\")\nOut[89]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string\n\nIn [90]: s.str.cat(v, join=\"outer\", na_rep=\"-\")\nOut[90]: \n-1    -z\n 0    aa\n 1    bb\n 2    c-\n 3    dd\n 4    -e\ndtype: string \n```", "```py\nIn [91]: f = d.loc[[3, 2, 1, 0], :]\n\nIn [92]: s\nOut[92]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [93]: f\nOut[93]: \n 0  1\n3     d  d\n2  <NA>  c\n1     b  b\n0     a  a\n\nIn [94]: s.str.cat(f, join=\"left\", na_rep=\"-\")\nOut[94]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [95]: s\nOut[95]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [96]: u\nOut[96]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [97]: s.str.cat([u, u.to_numpy()], join=\"left\")\nOut[97]: \n0    aab\n1    bbd\n2    cca\n3    ddc\ndtype: string \n```", "```py\nIn [98]: v\nOut[98]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [99]: s.str.cat([v, u, u.to_numpy()], join=\"outer\", na_rep=\"-\")\nOut[99]: \n-1    -z--\n0     aaab\n1     bbbd\n2     c-ca\n3     dddc\n4     -e--\ndtype: string \n```", "```py\nIn [100]: u.loc[[3]]\nOut[100]: \n3    d\ndtype: string\n\nIn [101]: v.loc[[-1, 0]]\nOut[101]: \n-1    z\n 0    a\ndtype: string\n\nIn [102]: s.str.cat([u.loc[[3]], v.loc[[-1, 0]]], join=\"right\", na_rep=\"-\")\nOut[102]: \n 3    dd-\n-1    --z\n 0    a-a\ndtype: string \n```", "```py\nIn [68]: s = pd.Series([\"a\", \"b\", \"c\", \"d\"], dtype=\"string\")\n\nIn [69]: s.str.cat(sep=\",\")\nOut[69]: 'a,b,c,d' \n```", "```py\nIn [70]: s.str.cat()\nOut[70]: 'abcd' \n```", "```py\nIn [71]: t = pd.Series([\"a\", \"b\", np.nan, \"d\"], dtype=\"string\")\n\nIn [72]: t.str.cat(sep=\",\")\nOut[72]: 'a,b,d'\n\nIn [73]: t.str.cat(sep=\",\", na_rep=\"-\")\nOut[73]: 'a,b,-,d' \n```", "```py\nIn [74]: s.str.cat([\"A\", \"B\", \"C\", \"D\"])\nOut[74]: \n0    aA\n1    bB\n2    cC\n3    dD\ndtype: string \n```", "```py\nIn [75]: s.str.cat(t)\nOut[75]: \n0      aa\n1      bb\n2    <NA>\n3      dd\ndtype: string\n\nIn [76]: s.str.cat(t, na_rep=\"-\")\nOut[76]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string \n```", "```py\nIn [77]: d = pd.concat([t, s], axis=1)\n\nIn [78]: s\nOut[78]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [79]: d\nOut[79]: \n 0  1\n0     a  a\n1     b  b\n2  <NA>  c\n3     d  d\n\nIn [80]: s.str.cat(d, na_rep=\"-\")\nOut[80]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [81]: u = pd.Series([\"b\", \"d\", \"a\", \"c\"], index=[1, 3, 0, 2], dtype=\"string\")\n\nIn [82]: s\nOut[82]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [83]: u\nOut[83]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [84]: s.str.cat(u)\nOut[84]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string\n\nIn [85]: s.str.cat(u, join=\"left\")\nOut[85]: \n0    aa\n1    bb\n2    cc\n3    dd\ndtype: string \n```", "```py\nIn [86]: v = pd.Series([\"z\", \"a\", \"b\", \"d\", \"e\"], index=[-1, 0, 1, 3, 4], dtype=\"string\")\n\nIn [87]: s\nOut[87]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [88]: v\nOut[88]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [89]: s.str.cat(v, join=\"left\", na_rep=\"-\")\nOut[89]: \n0    aa\n1    bb\n2    c-\n3    dd\ndtype: string\n\nIn [90]: s.str.cat(v, join=\"outer\", na_rep=\"-\")\nOut[90]: \n-1    -z\n 0    aa\n 1    bb\n 2    c-\n 3    dd\n 4    -e\ndtype: string \n```", "```py\nIn [91]: f = d.loc[[3, 2, 1, 0], :]\n\nIn [92]: s\nOut[92]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [93]: f\nOut[93]: \n 0  1\n3     d  d\n2  <NA>  c\n1     b  b\n0     a  a\n\nIn [94]: s.str.cat(f, join=\"left\", na_rep=\"-\")\nOut[94]: \n0    aaa\n1    bbb\n2    c-c\n3    ddd\ndtype: string \n```", "```py\nIn [95]: s\nOut[95]: \n0    a\n1    b\n2    c\n3    d\ndtype: string\n\nIn [96]: u\nOut[96]: \n1    b\n3    d\n0    a\n2    c\ndtype: string\n\nIn [97]: s.str.cat([u, u.to_numpy()], join=\"left\")\nOut[97]: \n0    aab\n1    bbd\n2    cca\n3    ddc\ndtype: string \n```", "```py\nIn [98]: v\nOut[98]: \n-1    z\n 0    a\n 1    b\n 3    d\n 4    e\ndtype: string\n\nIn [99]: s.str.cat([v, u, u.to_numpy()], join=\"outer\", na_rep=\"-\")\nOut[99]: \n-1    -z--\n0     aaab\n1     bbbd\n2     c-ca\n3     dddc\n4     -e--\ndtype: string \n```", "```py\nIn [100]: u.loc[[3]]\nOut[100]: \n3    d\ndtype: string\n\nIn [101]: v.loc[[-1, 0]]\nOut[101]: \n-1    z\n 0    a\ndtype: string\n\nIn [102]: s.str.cat([u.loc[[3]], v.loc[[-1, 0]]], join=\"right\", na_rep=\"-\")\nOut[102]: \n 3    dd-\n-1    --z\n 0    a-a\ndtype: string \n```", "```py\nIn [103]: s = pd.Series(\n .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n .....: )\n .....: \n\nIn [104]: s.str[0]\nOut[104]: \n0       A\n1       B\n2       C\n3       A\n4       B\n5    <NA>\n6       C\n7       d\n8       c\ndtype: string\n\nIn [105]: s.str[1]\nOut[105]: \n0    <NA>\n1    <NA>\n2    <NA>\n3       a\n4       a\n5    <NA>\n6       A\n7       o\n8       a\ndtype: string \n```", "```py\nIn [106]: pd.Series(\n .....:    [\"a1\", \"b2\", \"c3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])(\\d)\", expand=False)\n .....: \nOut[106]: \n 0     1\n0     a     1\n1     b     2\n2  <NA>  <NA> \n```", "```py\nIn [107]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(\n .....:    r\"(?P<letter>[ab])(?P<digit>\\d)\", expand=False\n .....: )\n .....: \nOut[107]: \n letter digit\n0      a     1\n1      b     2\n2   <NA>  <NA> \n```", "```py\nIn [108]: pd.Series(\n .....:    [\"a1\", \"b2\", \"3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])?(\\d)\", expand=False)\n .....: \nOut[108]: \n 0  1\n0     a  1\n1     b  2\n2  <NA>  3 \n```", "```py\nIn [109]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=True)\nOut[109]: \n 0\n0     1\n1     2\n2  <NA> \n```", "```py\nIn [110]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=False)\nOut[110]: \n0       1\n1       2\n2    <NA>\ndtype: string \n```", "```py\nIn [111]: s = pd.Series([\"a1\", \"b2\", \"c3\"], [\"A11\", \"B22\", \"C33\"], dtype=\"string\")\n\nIn [112]: s\nOut[112]: \nA11    a1\nB22    b2\nC33    c3\ndtype: string\n\nIn [113]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=True)\nOut[113]: \n letter\n0      A\n1      B\n2      C \n```", "```py\nIn [114]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=False)\nOut[114]: Index(['A', 'B', 'C'], dtype='object', name='letter') \n```", "```py\nIn [115]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=True)\nOut[115]: \n letter   1\n0      A  11\n1      B  22\n2      C  33 \n```", "```py\nIn [116]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[116], line 1\n----> 1 s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:137, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n  136     raise TypeError(msg)\n--> 137 return func(self, *args, **kwargs)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:2743, in StringMethods.extract(self, pat, flags, expand)\n  2740     raise ValueError(\"pattern contains no capture groups\")\n  2742 if not expand and regex.groups > 1 and isinstance(self._data, ABCIndex):\n-> 2743     raise ValueError(\"only one regex group is supported with Index\")\n  2745 obj = self._data\n  2746 result_dtype = _result_dtype(obj)\n\nValueError: only one regex group is supported with Index \n```", "```py\nIn [117]: s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"], dtype=\"string\")\n\nIn [118]: s\nOut[118]: \nA    a1a2\nB      b1\nC      c1\ndtype: string\n\nIn [119]: two_groups = \"(?P<letter>[a-z])(?P<digit>[0-9])\"\n\nIn [120]: s.str.extract(two_groups, expand=True)\nOut[120]: \n letter digit\nA      a     1\nB      b     1\nC      c     1 \n```", "```py\nIn [121]: s.str.extractall(two_groups)\nOut[121]: \n letter digit\n match \nA 0          a     1\n 1          a     2\nB 0          b     1\nC 0          c     1 \n```", "```py\nIn [122]: s = pd.Series([\"a3\", \"b3\", \"c2\"], dtype=\"string\")\n\nIn [123]: s\nOut[123]: \n0    a3\n1    b3\n2    c2\ndtype: string \n```", "```py\nIn [124]: extract_result = s.str.extract(two_groups, expand=True)\n\nIn [125]: extract_result\nOut[125]: \n letter digit\n0      a     3\n1      b     3\n2      c     2\n\nIn [126]: extractall_result = s.str.extractall(two_groups)\n\nIn [127]: extractall_result\nOut[127]: \n letter digit\n match \n0 0          a     3\n1 0          b     3\n2 0          c     2\n\nIn [128]: extractall_result.xs(0, level=\"match\")\nOut[128]: \n letter digit\n0      a     3\n1      b     3\n2      c     2 \n```", "```py\nIn [129]: pd.Index([\"a1a2\", \"b1\", \"c1\"]).str.extractall(two_groups)\nOut[129]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1\n\nIn [130]: pd.Series([\"a1a2\", \"b1\", \"c1\"], dtype=\"string\").str.extractall(two_groups)\nOut[130]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1 \n```", "```py\nIn [106]: pd.Series(\n .....:    [\"a1\", \"b2\", \"c3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])(\\d)\", expand=False)\n .....: \nOut[106]: \n 0     1\n0     a     1\n1     b     2\n2  <NA>  <NA> \n```", "```py\nIn [107]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(\n .....:    r\"(?P<letter>[ab])(?P<digit>\\d)\", expand=False\n .....: )\n .....: \nOut[107]: \n letter digit\n0      a     1\n1      b     2\n2   <NA>  <NA> \n```", "```py\nIn [108]: pd.Series(\n .....:    [\"a1\", \"b2\", \"3\"],\n .....:    dtype=\"string\",\n .....: ).str.extract(r\"([ab])?(\\d)\", expand=False)\n .....: \nOut[108]: \n 0  1\n0     a  1\n1     b  2\n2  <NA>  3 \n```", "```py\nIn [109]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=True)\nOut[109]: \n 0\n0     1\n1     2\n2  <NA> \n```", "```py\nIn [110]: pd.Series([\"a1\", \"b2\", \"c3\"], dtype=\"string\").str.extract(r\"[ab](\\d)\", expand=False)\nOut[110]: \n0       1\n1       2\n2    <NA>\ndtype: string \n```", "```py\nIn [111]: s = pd.Series([\"a1\", \"b2\", \"c3\"], [\"A11\", \"B22\", \"C33\"], dtype=\"string\")\n\nIn [112]: s\nOut[112]: \nA11    a1\nB22    b2\nC33    c3\ndtype: string\n\nIn [113]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=True)\nOut[113]: \n letter\n0      A\n1      B\n2      C \n```", "```py\nIn [114]: s.index.str.extract(\"(?P<letter>[a-zA-Z])\", expand=False)\nOut[114]: Index(['A', 'B', 'C'], dtype='object', name='letter') \n```", "```py\nIn [115]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=True)\nOut[115]: \n letter   1\n0      A  11\n1      B  22\n2      C  33 \n```", "```py\nIn [116]: s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[116], line 1\n----> 1 s.index.str.extract(\"(?P<letter>[a-zA-Z])([0-9]+)\", expand=False)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:137, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n  136     raise TypeError(msg)\n--> 137 return func(self, *args, **kwargs)\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:2743, in StringMethods.extract(self, pat, flags, expand)\n  2740     raise ValueError(\"pattern contains no capture groups\")\n  2742 if not expand and regex.groups > 1 and isinstance(self._data, ABCIndex):\n-> 2743     raise ValueError(\"only one regex group is supported with Index\")\n  2745 obj = self._data\n  2746 result_dtype = _result_dtype(obj)\n\nValueError: only one regex group is supported with Index \n```", "```py\nIn [117]: s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"], dtype=\"string\")\n\nIn [118]: s\nOut[118]: \nA    a1a2\nB      b1\nC      c1\ndtype: string\n\nIn [119]: two_groups = \"(?P<letter>[a-z])(?P<digit>[0-9])\"\n\nIn [120]: s.str.extract(two_groups, expand=True)\nOut[120]: \n letter digit\nA      a     1\nB      b     1\nC      c     1 \n```", "```py\nIn [121]: s.str.extractall(two_groups)\nOut[121]: \n letter digit\n match \nA 0          a     1\n 1          a     2\nB 0          b     1\nC 0          c     1 \n```", "```py\nIn [122]: s = pd.Series([\"a3\", \"b3\", \"c2\"], dtype=\"string\")\n\nIn [123]: s\nOut[123]: \n0    a3\n1    b3\n2    c2\ndtype: string \n```", "```py\nIn [124]: extract_result = s.str.extract(two_groups, expand=True)\n\nIn [125]: extract_result\nOut[125]: \n letter digit\n0      a     3\n1      b     3\n2      c     2\n\nIn [126]: extractall_result = s.str.extractall(two_groups)\n\nIn [127]: extractall_result\nOut[127]: \n letter digit\n match \n0 0          a     3\n1 0          b     3\n2 0          c     2\n\nIn [128]: extractall_result.xs(0, level=\"match\")\nOut[128]: \n letter digit\n0      a     3\n1      b     3\n2      c     2 \n```", "```py\nIn [129]: pd.Index([\"a1a2\", \"b1\", \"c1\"]).str.extractall(two_groups)\nOut[129]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1\n\nIn [130]: pd.Series([\"a1a2\", \"b1\", \"c1\"], dtype=\"string\").str.extractall(two_groups)\nOut[130]: \n letter digit\n match \n0 0          a     1\n 1          a     2\n1 0          b     1\n2 0          c     1 \n```", "```py\nIn [131]: pattern = r\"[0-9][a-z]\"\n\nIn [132]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.contains(pattern)\n .....: \nOut[132]: \n0    False\n1    False\n2     True\n3     True\n4     True\n5     True\ndtype: boolean \n```", "```py\nIn [133]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.match(pattern)\n .....: \nOut[133]: \n0    False\n1    False\n2     True\n3     True\n4    False\n5     True\ndtype: boolean \n```", "```py\nIn [134]: pd.Series(\n .....:    [\"1\", \"2\", \"3a\", \"3b\", \"03c\", \"4dx\"],\n .....:    dtype=\"string\",\n .....: ).str.fullmatch(pattern)\n .....: \nOut[134]: \n0    False\n1    False\n2     True\n3     True\n4    False\n5    False\ndtype: boolean \n```", "```py\nIn [135]: s4 = pd.Series(\n .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n .....: )\n .....: \n\nIn [136]: s4.str.contains(\"A\", na=False)\nOut[136]: \n0     True\n1    False\n2    False\n3     True\n4    False\n5    False\n6     True\n7    False\n8    False\ndtype: boolean \n```", "```py\nIn [137]: s = pd.Series([\"a\", \"a|b\", np.nan, \"a|c\"], dtype=\"string\")\n\nIn [138]: s.str.get_dummies(sep=\"|\")\nOut[138]: \n a  b  c\n0  1  0  0\n1  1  1  0\n2  0  0  0\n3  1  0  1 \n```", "```py\nIn [139]: idx = pd.Index([\"a\", \"a|b\", np.nan, \"a|c\"])\n\nIn [140]: idx.str.get_dummies(sep=\"|\")\nOut[140]: \nMultiIndex([(1, 0, 0),\n (1, 1, 0),\n (0, 0, 0),\n (1, 0, 1)],\n names=['a', 'b', 'c']) \n```"]