["```py\nclass sympy.physics.mechanics.particle.Particle(name, point=None, mass=None)\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point\n>>> from sympy import Symbol\n>>> po = Point('po')\n>>> m = Symbol('m')\n>>> pa = Particle('pa', po, m)\n>>> # Or you could change these later\n>>> pa.mass = m\n>>> pa.point = po \n```", "```py\nangular_momentum(point, frame)\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point, ReferenceFrame\n>>> from sympy.physics.mechanics import dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v, r = dynamicsymbols('m v r')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> A = O.locatenew('A', r * N.x)\n>>> P = Particle('P', A, m)\n>>> P.point.set_vel(N, v * N.y)\n>>> P.angular_momentum(O, N)\nm*r*v*N.z \n```", "```py\nkinetic_energy(frame)\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point, ReferenceFrame\n>>> from sympy import symbols\n>>> m, v, r = symbols('m v r')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> P = Particle('P', O, m)\n>>> P.point.set_vel(N, v * N.y)\n>>> P.kinetic_energy(N)\nm*v**2/2 \n```", "```py\nlinear_momentum(frame)\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point, ReferenceFrame\n>>> from sympy.physics.mechanics import dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v = dynamicsymbols('m v')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> A = Particle('A', P, m)\n>>> P.set_vel(N, v * N.x)\n>>> A.linear_momentum(N)\nm*v*N.x \n```", "```py\nproperty mass\n```", "```py\nproperty masscenter\n```", "```py\nproperty name\n```", "```py\nparallel_axis(point, frame)\n```", "```py\nproperty point\n```", "```py\nproperty potential_energy\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point\n>>> from sympy import symbols\n>>> m, g, h = symbols('m g h')\n>>> O = Point('O')\n>>> P = Particle('P', O, m)\n>>> P.potential_energy = m * g * h\n>>> P.potential_energy\ng*h*m \n```", "```py\nclass sympy.physics.mechanics.rigidbody.RigidBody(name, masscenter=None, frame=None, mass=None, inertia=None)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, RigidBody\n>>> from sympy.physics.mechanics import outer\n>>> m = Symbol('m')\n>>> A = ReferenceFrame('A')\n>>> P = Point('P')\n>>> I = outer (A.x, A.x)\n>>> inertia_tuple = (I, P)\n>>> B = RigidBody('B', P, A, m, inertia_tuple)\n>>> # Or you could change them afterwards\n>>> m2 = Symbol('m2')\n>>> B.mass = m2 \n```", "```py\nangular_momentum(point, frame)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v, r, omega = dynamicsymbols('m v r omega')\n>>> N = ReferenceFrame('N')\n>>> b = ReferenceFrame('b')\n>>> b.set_ang_vel(N, omega * b.x)\n>>> P = Point('P')\n>>> P.set_vel(N, 1 * N.x)\n>>> I = outer(b.x, b.x)\n>>> B = RigidBody('B', P, b, m, (I, P))\n>>> B.angular_momentum(P, N)\nomega*b.x \n```", "```py\nproperty central_inertia\n```", "```py\nproperty frame\n```", "```py\nproperty inertia\n```", "```py\nkinetic_energy(frame)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody\n>>> from sympy import symbols\n>>> m, v, r, omega = symbols('m v r omega')\n>>> N = ReferenceFrame('N')\n>>> b = ReferenceFrame('b')\n>>> b.set_ang_vel(N, omega * b.x)\n>>> P = Point('P')\n>>> P.set_vel(N, v * N.x)\n>>> I = outer (b.x, b.x)\n>>> inertia_tuple = (I, P)\n>>> B = RigidBody('B', P, b, m, inertia_tuple)\n>>> B.kinetic_energy(N)\nm*v**2/2 + omega**2/2 \n```", "```py\nlinear_momentum(frame)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, v = dynamicsymbols('m v')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, v * N.x)\n>>> I = outer (N.x, N.x)\n>>> Inertia_tuple = (I, P)\n>>> B = RigidBody('B', P, N, m, Inertia_tuple)\n>>> B.linear_momentum(N)\nm*v*N.x \n```", "```py\nproperty mass\n```", "```py\nproperty masscenter\n```", "```py\nproperty name\n```", "```py\nparallel_axis(point, frame=None)\n```", "```py\nproperty potential_energy\n```", "```py\n>>> from sympy.physics.mechanics import Particle, Point\n>>> from sympy import symbols\n>>> m, g, h = symbols('m g h')\n>>> O = Point('O')\n>>> P = Particle('P', O, m)\n>>> P.potential_energy = m * g * h\n>>> P.potential_energy\ng*h*m \n```", "```py\nproperty x\n```", "```py\nproperty y\n```", "```py\nproperty z\n```", "```py\nclass sympy.physics.mechanics.inertia.Inertia(dyadic, point)\n```", "```py\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, Inertia\n>>> N = ReferenceFrame('N')\n>>> Po = Point('Po')\n>>> Inertia(N.x.outer(N.x) + N.y.outer(N.y) + N.z.outer(N.z), Po)\n((N.x|N.x) + (N.y|N.y) + (N.z|N.z), Po) \n```", "```py\n>>> Inertia.from_inertia_scalars(Po, N, 1, 1, 1)\n((N.x|N.x) + (N.y|N.y) + (N.z|N.z), Po) \n```", "```py\nclassmethod from_inertia_scalars(point, frame, ixx, iyy, izz, ixy=0, iyz=0, izx=0)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, Inertia\n>>> ixx, iyy, izz, ixy, iyz, izx = symbols('ixx iyy izz ixy iyz izx')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> I = Inertia.from_inertia_scalars(P, N, ixx, iyy, izz, ixy, iyz, izx) \n```", "```py\n>>> I.dyadic.to_matrix(N)\nMatrix([\n[ixx, ixy, izx],\n[ixy, iyy, iyz],\n[izx, iyz, izz]]) \n```", "```py\nsympy.physics.mechanics.inertia.inertia(frame, ixx, iyy, izz, ixy=0, iyz=0, izx=0)\n```", "```py\n>>> from sympy.physics.mechanics import ReferenceFrame, inertia\n>>> N = ReferenceFrame('N')\n>>> inertia(N, 1, 2, 3)\n(N.x|N.x) + 2*(N.y|N.y) + 3*(N.z|N.z) \n```", "```py\nsympy.physics.mechanics.inertia.inertia_of_point_mass(mass, pos_vec, frame)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import ReferenceFrame, inertia_of_point_mass\n>>> N = ReferenceFrame('N')\n>>> r, m = symbols('r m')\n>>> px = r * N.x\n>>> inertia_of_point_mass(m, px, N)\nm*r**2*(N.y|N.y) + m*r**2*(N.z|N.z) \n```", "```py\nclass sympy.physics.mechanics.loads.Force(point, force)\n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, Force\n>>> N = ReferenceFrame('N')\n>>> Po = Point('Po')\n>>> Force(Po, 2 * N.x)\n(Po, 2*N.x) \n```", "```py\n>>> from sympy.physics.mechanics import Particle\n>>> P = Particle('P', point=Po)\n>>> Force(P, 2 * N.x)\n(Po, 2*N.x) \n```", "```py\nclass sympy.physics.mechanics.loads.Torque(frame, torque)\n```", "```py\n>>> from sympy.physics.mechanics import ReferenceFrame, Torque\n>>> N = ReferenceFrame('N')\n>>> Torque(N, 2 * N.x)\n(N, 2*N.x) \n```", "```py\n>>> from sympy.physics.mechanics import RigidBody\n>>> rb = RigidBody('rb', frame=N)\n>>> Torque(rb, 2 * N.x)\n(N, 2*N.x) \n```", "```py\nsympy.physics.mechanics.functions.center_of_mass(point, *bodies)\n```", "```py\n>>> from sympy import symbols, S\n>>> from sympy.physics.vector import Point\n>>> from sympy.physics.mechanics import Particle, ReferenceFrame, RigidBody, outer\n>>> from sympy.physics.mechanics.functions import center_of_mass\n>>> a = ReferenceFrame('a')\n>>> m = symbols('m', real=True)\n>>> p1 = Particle('p1', Point('p1_pt'), S(1))\n>>> p2 = Particle('p2', Point('p2_pt'), S(2))\n>>> p3 = Particle('p3', Point('p3_pt'), S(3))\n>>> p4 = Particle('p4', Point('p4_pt'), m)\n>>> b_f = ReferenceFrame('b_f')\n>>> b_cm = Point('b_cm')\n>>> mb = symbols('mb')\n>>> b = RigidBody('b', b_cm, b_f, mb, (outer(b_f.x, b_f.x), b_cm))\n>>> p2.point.set_pos(p1.point, a.x)\n>>> p3.point.set_pos(p1.point, a.x + a.y)\n>>> p4.point.set_pos(p1.point, a.y)\n>>> b.masscenter.set_pos(p1.point, a.y + a.z)\n>>> point_o=Point('o')\n>>> point_o.set_pos(p1.point, center_of_mass(p1.point, p1, p2, p3, p4, b))\n>>> expr = 5/(m + mb + 6)*a.x + (m + mb + 3)/(m + mb + 6)*a.y + mb/(m + mb + 6)*a.z\n>>> point_o.pos_from(p1.point)\n5/(m + mb + 6)*a.x + (m + mb + 3)/(m + mb + 6)*a.y + mb/(m + mb + 6)*a.z \n```", "```py\nsympy.physics.mechanics.functions.linear_momentum(frame, *body)\n```", "```py\n>>> from sympy.physics.mechanics import Point, Particle, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, outer, linear_momentum\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, 10 * N.x)\n>>> Pa = Particle('Pa', P, 1)\n>>> Ac = Point('Ac')\n>>> Ac.set_vel(N, 25 * N.y)\n>>> I = outer(N.x, N.x)\n>>> A = RigidBody('A', Ac, N, 20, (I, Ac))\n>>> linear_momentum(N, A, Pa)\n10*N.x + 500*N.y \n```", "```py\nsympy.physics.mechanics.functions.angular_momentum(point, frame, *body)\n```", "```py\n>>> from sympy.physics.mechanics import Point, Particle, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, outer, angular_momentum\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> P = O.locatenew('P', 1 * N.x)\n>>> P.set_vel(N, 10 * N.x)\n>>> Pa = Particle('Pa', P, 1)\n>>> Ac = O.locatenew('Ac', 2 * N.y)\n>>> Ac.set_vel(N, 5 * N.y)\n>>> a = ReferenceFrame('a')\n>>> a.set_ang_vel(N, 10 * N.z)\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, 20, (I, Ac))\n>>> angular_momentum(O, N, Pa, A)\n10*N.z \n```", "```py\nsympy.physics.mechanics.functions.kinetic_energy(frame, *body)\n```", "```py\n>>> from sympy.physics.mechanics import Point, Particle, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, outer, kinetic_energy\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> P = O.locatenew('P', 1 * N.x)\n>>> P.set_vel(N, 10 * N.x)\n>>> Pa = Particle('Pa', P, 1)\n>>> Ac = O.locatenew('Ac', 2 * N.y)\n>>> Ac.set_vel(N, 5 * N.y)\n>>> a = ReferenceFrame('a')\n>>> a.set_ang_vel(N, 10 * N.z)\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, 20, (I, Ac))\n>>> kinetic_energy(N, Pa, A)\n350 \n```", "```py\nsympy.physics.mechanics.functions.potential_energy(*body)\n```", "```py\n>>> from sympy.physics.mechanics import Point, Particle, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, outer, potential_energy\n>>> from sympy import symbols\n>>> M, m, g, h = symbols('M m g h')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> P = O.locatenew('P', 1 * N.x)\n>>> Pa = Particle('Pa', P, m)\n>>> Ac = O.locatenew('Ac', 2 * N.y)\n>>> a = ReferenceFrame('a')\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, M, (I, Ac))\n>>> Pa.potential_energy = m * g * h\n>>> A.potential_energy = M * g * h\n>>> potential_energy(Pa, A)\nM*g*h + g*h*m \n```", "```py\nsympy.physics.mechanics.functions.Lagrangian(frame, *body)\n```", "```py\n>>> from sympy.physics.mechanics import Point, Particle, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, outer, Lagrangian\n>>> from sympy import symbols\n>>> M, m, g, h = symbols('M m g h')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> P = O.locatenew('P', 1 * N.x)\n>>> P.set_vel(N, 10 * N.x)\n>>> Pa = Particle('Pa', P, 1)\n>>> Ac = O.locatenew('Ac', 2 * N.y)\n>>> Ac.set_vel(N, 5 * N.y)\n>>> a = ReferenceFrame('a')\n>>> a.set_ang_vel(N, 10 * N.z)\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, 20, (I, Ac))\n>>> Pa.potential_energy = m * g * h\n>>> A.potential_energy = M * g * h\n>>> Lagrangian(N, Pa, A)\n-M*g*h - g*h*m + 350 \n```", "```py\nsympy.physics.mechanics.functions.find_dynamicsymbols(expression, exclude=None, reference_frame=None)\n```", "```py\n>>> from sympy.physics.mechanics import dynamicsymbols, find_dynamicsymbols\n>>> from sympy.physics.mechanics import ReferenceFrame\n>>> x, y = dynamicsymbols('x, y')\n>>> expr = x + x.diff()*y\n>>> find_dynamicsymbols(expr)\n{x(t), y(t), Derivative(x(t), t)}\n>>> find_dynamicsymbols(expr, exclude=[x, y])\n{Derivative(x(t), t)}\n>>> a, b, c = dynamicsymbols('a, b, c')\n>>> A = ReferenceFrame('A')\n>>> v = a * A.x + b * A.y + c * A.z\n>>> find_dynamicsymbols(v, reference_frame=A)\n{a(t), b(t), c(t)} \n```"]