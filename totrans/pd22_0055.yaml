- en: pandas.read_table
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.read_table
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_table.html](https://pandas.pydata.org/docs/reference/api/pandas.read_table.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_table.html](https://pandas.pydata.org/docs/reference/api/pandas.read_table.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Read general delimited file into DataFrame.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将通用分隔文件读入DataFrame。
- en: Also supports optionally iterating or breaking of the file into chunks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 还支持可选地迭代或将文件分成块。
- en: Additional help can be found in the online docs for [IO Tools](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的帮助可以在[IO工具](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html)的在线文档中找到。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**filepath_or_buffer**str, path object or file-like object'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**filepath_or_buffer**str，路径对象或类文件对象'
- en: 'Any valid string path is acceptable. The string could be a URL. Valid URL schemes
    include http, ftp, s3, gs, and file. For file URLs, a host is expected. A local
    file could be: [file://localhost/path/to/table.csv](file://localhost/path/to/table.csv).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有效的字符串路径都可以接受。字符串可以是URL。有效的URL方案包括http、ftp、s3、gs和file。对于文件URL，期望有一个主机。本地文件可以是：[file://localhost/path/to/table.csv](file://localhost/path/to/table.csv)。
- en: If you want to pass in a path object, pandas accepts any `os.PathLike`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要传递路径对象，pandas接受任何`os.PathLike`。
- en: By file-like object, we refer to objects with a `read()` method, such as a file
    handle (e.g. via builtin `open` function) or `StringIO`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过类文件对象，我们指的是具有`read()`方法的对象，例如文件句柄（例如通过内置的`open`函数）或`StringIO`。
- en: '**sep**str, default ‘\t’ (tab-stop)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**sep**str，默认为‘\t’（制表符）'
- en: 'Character or regex pattern to treat as the delimiter. If `sep=None`, the C
    engine cannot automatically detect the separator, but the Python parsing engine
    can, meaning the latter will be used and automatically detect the separator from
    only the first valid row of the file by Python’s builtin sniffer tool, `csv.Sniffer`.
    In addition, separators longer than 1 character and different from `''\s+''` will
    be interpreted as regular expressions and will also force the use of the Python
    parsing engine. Note that regex delimiters are prone to ignoring quoted data.
    Regex example: `''\r\t''`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要视为分隔符的字符或正则表达式模式。如果`sep=None`，则C引擎无法自动检测分隔符，但Python解析引擎可以，这意味着将使用后者，并且Python的内置嗅探工具`csv.Sniffer`将仅从文件的第一行自动检测分隔符。此外，长度大于1个字符且不同于`'\s+'`的分隔符将被解释为正则表达式，并且还将强制使用Python解析引擎。请注意，正则表达式分隔符容易忽略带引号的数据。正则表达式示例：`'\r\t'`。
- en: '**delimiter**str, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**delimiter**str，可选'
- en: Alias for `sep`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`sep`的别名。'
- en: '**header**int, Sequence of int, ‘infer’ or None, default ‘infer’'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**header**int，int序列，‘infer’或None，默认为‘infer’'
- en: 'Row number(s) containing column labels and marking the start of the data (zero-indexed).
    Default behavior is to infer the column names: if no `names` are passed the behavior
    is identical to `header=0` and column names are inferred from the first line of
    the file, if column names are passed explicitly to `names` then the behavior is
    identical to `header=None`. Explicitly pass `header=0` to be able to replace existing
    names. The header can be a list of integers that specify row locations for a [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the columns e.g. `[0, 1, 3]`. Intervening rows that are
    not specified will be skipped (e.g. 2 in this example is skipped). Note that this
    parameter ignores commented lines and empty lines if `skip_blank_lines=True`,
    so `header=0` denotes the first line of data rather than the first line of the
    file.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包含列标签并标记数据起始位置的行号（从零开始索引）。默认行为是推断列名：如果没有传递`names`，则行为与`header=0`相同，并且列名从文件的第一行推断出来；如果列名明确传递给`names`，则行为与`header=None`相同。显式传递`header=0`以替换现有名称。标题可以是指定列的[`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")的行位置的整数列表，例如`[0, 1, 3]`。未指定的中间行将被跳过（例如，在此示例中跳过了2）。请注意，如果`skip_blank_lines=True`，此参数将忽略注释行和空行，因此`header=0`表示数据的第一行而不是文件的第一行。
- en: '**names**Sequence of Hashable, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**names**Hashable序列，可选'
- en: Sequence of column labels to apply. If the file contains a header row, then
    you should explicitly pass `header=0` to override the column names. Duplicates
    in this list are not allowed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用的列标签序列。如果文件包含标题行，则应明确传递`header=0`以覆盖列名。此列表中不允许重复项。
- en: '**index_col**Hashable, Sequence of Hashable or False, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**index_col**Hashable，Hashable序列或False，可选'
- en: Column(s) to use as row label(s), denoted either by column labels or column
    indices. If a sequence of labels or indices is given, [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") will be formed for the row labels.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: `index_col=False` can be used to force pandas to *not* use the first
    column as the index, e.g., when you have a malformed file with delimiters at the
    end of each line.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**usecols**Sequence of Hashable or Callable, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Subset of columns to select, denoted either by column labels or column indices.
    If list-like, all elements must either be positional (i.e. integer indices into
    the document columns) or strings that correspond to column names provided either
    by the user in `names` or inferred from the document header row(s). If `names`
    are given, the document header row(s) are not taken into account. For example,
    a valid list-like `usecols` parameter would be `[0, 1, 2]` or `['foo', 'bar',
    'baz']`. Element order is ignored, so `usecols=[0, 1]` is the same as `[1, 0]`.
    To instantiate a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    from `data` with element order preserved use `pd.read_csv(data, usecols=['foo',
    'bar'])[['foo', 'bar']]` for columns in `['foo', 'bar']` order or `pd.read_csv(data,
    usecols=['foo', 'bar'])[['bar', 'foo']]` for `['bar', 'foo']` order.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'If callable, the callable function will be evaluated against the column names,
    returning names where the callable function evaluates to `True`. An example of
    a valid callable argument would be `lambda x: x.upper() in [''AAA'', ''BBB'',
    ''DDD'']`. Using this parameter results in much faster parsing time and lower
    memory usage.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype or dict of {Hashabledtype}, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Data type(s) to apply to either the whole dataset or individual columns. E.g.,
    `{''a'': np.float64, ''b'': np.int32, ''c'': ''Int64''}` Use `str` or `object`
    together with suitable `na_values` settings to preserve and not interpret `dtype`.
    If `converters` are specified, they will be applied INSTEAD of `dtype` conversion.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Support for `defaultdict` was added. Specify a `defaultdict`
    as input where the default determines the `dtype` of the columns which are not
    explicitly listed.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**engine**{‘c’, ‘python’, ‘pyarrow’}, optional'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Parser engine to use. The C and pyarrow engines are faster, while the python
    engine is currently more feature-complete. Multithreading is currently only supported
    by the pyarrow engine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0: The ‘pyarrow’ engine was added as an *experimental* engine,
    and some features are unsupported, or may not work correctly, with this engine.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**converters**dict of {HashableCallable}, optional'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Functions for converting values in specified columns. Keys can either be column
    labels or column indices.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**true_values**list, optional'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Values to consider as `True` in addition to case-insensitive variants of ‘True’.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**false_values**list, optional'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Values to consider as `False` in addition to case-insensitive variants of ‘False’.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**skipinitialspace**bool, default False'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**skipinitialspace**bool，默认为False'
- en: Skip spaces after delimiter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在分隔符后跳过空格。
- en: '**skiprows**int, list of int or Callable, optional'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**skiprows**int，int列表或可调用，可选'
- en: Line numbers to skip (0-indexed) or number of lines to skip (`int`) at the start
    of the file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过的行号（从0开始）或文件开头要跳过的行数（`int`）。
- en: 'If callable, the callable function will be evaluated against the row indices,
    returning `True` if the row should be skipped and `False` otherwise. An example
    of a valid callable argument would be `lambda x: x in [0, 2]`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '如果是可调用的，可调用函数将根据行索引进行评估，如果应跳过该行则返回`True`，否则返回`False`。一个有效的可调用参数示例是`lambda x:
    x in [0, 2]`。'
- en: '**skipfooter**int, default 0'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**skipfooter**int，默认为0'
- en: Number of lines at bottom of file to skip (Unsupported with `engine='c'`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过的文件底部行数（使用`engine='c'`时不支持）。
- en: '**nrows**int, optional'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**nrows**int，可选'
- en: Number of rows of file to read. Useful for reading pieces of large files.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取的文件行数。用于读取大文件的片段。
- en: '**na_values**Hashable, Iterable of Hashable or dict of {HashableIterable},
    optional'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**na_values**可哈希，可迭代的可哈希或{可哈希迭代}的字典，可选'
- en: 'Additional strings to recognize as `NA`/`NaN`. If `dict` passed, specific per-column
    `NA` values. By default the following values are interpreted as `NaN`: “ “, “#N/A”,
    “#N/A N/A”, “#NA”, “-1.#IND”, “-1.#QNAN”, “-NaN”, “-nan”, “1.#IND”, “1.#QNAN”,
    “<NA>”, “N/A”, “NA”, “NULL”, “NaN”, “None”, “n/a”, “nan”, “null “.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 附加的字符串以识别为`NA`/`NaN`。如果传递了`dict`，则特定于每列的`NA`值。默认情况下，以下值被解释为`NaN`：“ “, “#N/A”,
    “#N/A N/A”, “#NA”, “-1.#IND”, “-1.#QNAN”, “-NaN”, “-nan”, “1.#IND”, “1.#QNAN”,
    “<NA>”, “N/A”, “NA”, “NULL”, “NaN”, “None”, “n/a”, “nan”, “null”。
- en: '**keep_default_na**bool, default True'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**keep_default_na**bool，默认为True'
- en: 'Whether or not to include the default `NaN` values when parsing the data. Depending
    on whether `na_values` is passed in, the behavior is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在解析数据时包括默认的`NaN`值。根据是否传入`na_values`，行为如下：
- en: If `keep_default_na` is `True`, and `na_values` are specified, `na_values` is
    appended to the default `NaN` values used for parsing.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`keep_default_na`为`True`，并且指定了`na_values`，则将`na_values`附加到用于解析的默认`NaN`值。
- en: If `keep_default_na` is `True`, and `na_values` are not specified, only the
    default `NaN` values are used for parsing.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`keep_default_na`为`True`，并且未指定`na_values`，则仅使用默认的`NaN`值进行解析。
- en: If `keep_default_na` is `False`, and `na_values` are specified, only the `NaN`
    values specified `na_values` are used for parsing.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`keep_default_na`为`False`，并且指定了`na_values`，则仅使用指定的`na_values`值进行解析。
- en: If `keep_default_na` is `False`, and `na_values` are not specified, no strings
    will be parsed as `NaN`.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`keep_default_na`为`False`，并且未指定`na_values`，则不会将任何字符串解析为`NaN`。
- en: Note that if `na_filter` is passed in as `False`, the `keep_default_na` and
    `na_values` parameters will be ignored.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果将`na_filter`传递为`False`，则将忽略`keep_default_na`和`na_values`参数。
- en: '**na_filter**bool, default True'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**na_filter**bool，默认为True'
- en: Detect missing value markers (empty strings and the value of `na_values`). In
    data without any `NA` values, passing `na_filter=False` can improve the performance
    of reading a large file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检测缺失值标记（空字符串和`na_values`的值）。在没有任何`NA`值的数据中，传递`na_filter=False`可以提高读取大文件的性能。
- en: '**verbose**bool, default False'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**bool，默认为False'
- en: Indicate number of `NA` values placed in non-numeric columns.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 指示放置在非数字列中的`NA`值的数量。
- en: Deprecated since version 2.2.0.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.2.0起已弃用。
- en: '**skip_blank_lines**bool, default True'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**skip_blank_lines**bool，默认为True'
- en: If `True`, skip over blank lines rather than interpreting as `NaN` values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为`True`，则跳过空行而不解释为`NaN`值。
- en: '**parse_dates**bool, list of Hashable, list of lists or dict of {Hashablelist},
    default False'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**parse_dates**bool，可哈希列表，列表的列表或{哈希列表}的字典，默认为False'
- en: 'The behavior is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 行为如下：
- en: '`bool`. If `True` -> try parsing the index. Note: Automatically set to `True`
    if `date_format` or `date_parser` arguments have been passed.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`。如果为`True` -> 尝试解析索引。注意：如果传递了`date_format`或`date_parser`参数，则会自动设置为`True`。'
- en: '`list` of `int` or names. e.g. If `[1, 2, 3]` -> try parsing columns 1, 2,
    3 each as a separate date column.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`或名称的`list`。例如，如果`[1, 2, 3]` -> 尝试将列1、2、3分别解析为单独的日期列。'
- en: '`list` of `list`. e.g. If `[[1, 3]]` -> combine columns 1 and 3 and parse as
    a single date column. Values are joined with a space before parsing.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`的`list`。例如，如果`[[1, 3]]` -> 将列1和3合并并解析为单个日期列。在解析之前，值用空格连接。'
- en: '`dict`, e.g. `{''foo'' : [1, 3]}` -> parse columns 1, 3 as date and call result
    ‘foo’. Values are joined with a space before parsing.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dict`，例如`{''foo'' : [1, 3]}` -> 将列1、3解析为日期并称为‘foo’。在解析之前，值用空格连接。'
- en: If a column or index cannot be represented as an array of `datetime`, say because
    of an unparsable value or a mixture of timezones, the column or index will be
    returned unaltered as an `object` data type. For non-standard `datetime` parsing,
    use [`to_datetime()`](pandas.to_datetime.html#pandas.to_datetime "pandas.to_datetime")
    after [`read_csv()`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某列或索引无法表示为`datetime`数组，比如因为存在无法解析的值或时区混合，该列或索引将以`object`数据类型不变返回。对于非标准的`datetime`解析，请在[`read_csv()`](pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")之后使用[`to_datetime()`](pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")。
- en: 'Note: A fast-path exists for iso8601-formatted dates.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：存在用于iso8601格式日期的快速路径。
- en: '**infer_datetime_format**bool, default False'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**infer_datetime_format**bool，默认为False'
- en: If `True` and `parse_dates` is enabled, pandas will attempt to infer the format
    of the `datetime` strings in the columns, and if it can be inferred, switch to
    a faster method of parsing them. In some cases this can increase the parsing speed
    by 5-10x.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`True`并且启用了`parse_dates`，pandas将尝试推断列中`datetime`字符串的格式，如果可以推断出来，将切换到更快的解析方法。在某些情况下，这可以将解析速度提高5-10倍。
- en: 'Deprecated since version 2.0.0: A strict version of this argument is now the
    default, passing it has no effect.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0.0起弃用：严格版本的此参数现在是默认的，传递它没有任何效果。
- en: '**keep_date_col**bool, default False'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**keep_date_col**bool，默认为False'
- en: If `True` and `parse_dates` specifies combining multiple columns then keep the
    original columns.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`True`并且`parse_dates`指定了合并多个列，则保留原始列。
- en: '**date_parser**Callable, optional'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**date_parser**可调用对象，可选'
- en: 'Function to use for converting a sequence of string columns to an array of
    `datetime` instances. The default uses `dateutil.parser.parser` to do the conversion.
    pandas will try to call `date_parser` in three different ways, advancing to the
    next if an exception occurs: 1) Pass one or more arrays (as defined by `parse_dates`)
    as arguments; 2) concatenate (row-wise) the string values from the columns defined
    by `parse_dates` into a single array and pass that; and 3) call `date_parser`
    once for each row using one or more strings (corresponding to the columns defined
    by `parse_dates`) as arguments.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将一系列字符串列转换为`datetime`实例数组的函数。默认使用`dateutil.parser.parser`进行转换。pandas将尝试以三种不同的方式调用`date_parser`，如果发生异常，则继续下一个：1)
    将一个或多个数组（由`parse_dates`定义）作为参数传递；2) 将由`parse_dates`定义的列中的字符串值（按行连接）合并为单个数组并传递；3)
    对每一行使用一个或多个字符串（对应于由`parse_dates`定义的列）调用`date_parser`。
- en: 'Deprecated since version 2.0.0: Use `date_format` instead, or read in as `object`
    and then apply [`to_datetime()`](pandas.to_datetime.html#pandas.to_datetime "pandas.to_datetime")
    as-needed.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0.0起弃用：改用`date_format`，或者读取为`object`，然后根据需要应用[`to_datetime()`](pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")。
- en: '**date_format**str or dict of column -> format, optional'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**date_format**str或列->格式的字典，可选'
- en: 'Format to use for parsing dates when used in conjunction with `parse_dates`.
    The strftime to parse time, e.g. `"%d/%m/%Y"`. See [strftime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)
    for more information on choices, though note that `"%f"` will parse all the way
    up to nanoseconds. You can also pass:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与`parse_dates`结合使用时用于解析日期的格式。解析时间的strftime，例如`"%d/%m/%Y"`。有关更多选择的信息，请参阅[strftime文档](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)，尽管请注意`"%f"`将解析直到纳秒。你也可以传递：
- en: “ISO8601”, to parse any [ISO8601](https://en.wikipedia.org/wiki/ISO_8601)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ISO8601”，解析任何[ISO8601](https://en.wikipedia.org/wiki/ISO_8601)
- en: time string (not necessarily in exactly the same format);
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间字符串（不一定完全相同的格式）；
- en: “mixed”, to infer the format for each element individually. This is risky,
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “mixed”，为了单独推断每个元素的格式。这是有风险的，
- en: and you should probably use it along with dayfirst.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能应该与dayfirst一起使用它。
- en: New in version 2.0.0.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.0中的新功能。
- en: '**dayfirst**bool, default False'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**dayfirst**bool，默认为False'
- en: DD/MM format dates, international and European format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: DD/MM格式日期，国际和欧洲格式。
- en: '**cache_dates**bool, default True'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**cache_dates**bool，默认为True'
- en: If `True`, use a cache of unique, converted dates to apply the `datetime` conversion.
    May produce significant speed-up when parsing duplicate date strings, especially
    ones with timezone offsets.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`True`，使用唯一的转换日期缓存来应用`datetime`转换。在解析重复日期字符串时可能会产生显著的加速，特别是带有时区偏移的日期字符串。
- en: '**iterator**bool, default False'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterator**bool，默认为False'
- en: Return `TextFileReader` object for iteration or getting chunks with `get_chunk()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于迭代或使用`get_chunk()`获取块的`TextFileReader`对象。
- en: '**chunksize**int, optional'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**chunksize**int，可选'
- en: Number of lines to read from the file per chunk. Passing a value will cause
    the function to return a `TextFileReader` object for iteration. See the [IO Tools
    docs](https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking) for more
    information on `iterator` and `chunksize`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中每块读取的行数。传递一个值会导致函数返回一个 `TextFileReader` 对象以进行迭代。有关 `iterator` 和 `chunksize`
    的更多信息，请参阅 [IO 工具文档](https://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking)。
- en: '**compression**str or dict, default ‘infer’'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**compression**str 或 dict，默认为 ‘infer’'
- en: 'For on-the-fly decompression of on-disk data. If ‘infer’ and ‘filepath_or_buffer’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). If using ‘zip’ or ‘tar’, the ZIP file must contain only one data
    file to be read in. Set to `None` for no decompression. Can also be a dict with
    key `''method''` set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`,
    `''xz''`, `''tar''`} and other key-value pairs are forwarded to `zipfile.ZipFile`,
    `gzip.GzipFile`, `bz2.BZ2File`, `zstandard.ZstdDecompressor`, `lzma.LZMAFile`
    or `tarfile.TarFile`, respectively. As an example, the following could be passed
    for Zstandard decompression using a custom compression dictionary: `compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '用于在磁盘上的数据的即时解压缩。如果‘infer’并且‘filepath_or_buffer’是类似路径的，则从以下扩展名检测压缩：‘.gz’、‘.bz2’、‘.zip’、‘.xz’、‘.zst’、‘.tar’、‘.tar.gz’、‘.tar.xz’或‘.tar.bz2’（否则不压缩）。如果使用‘zip’或‘tar’，ZIP文件必须只包含一个要读取的数据文件。设置为
    `None` 不进行解压缩。也可以是一个字典，其中键 `''method''` 设置为其中一个 {`''zip''`、`''gzip''`、`''bz2''`、`''zstd''`、`''xz''`、`''tar''`}，其他键值对被转发到
    `zipfile.ZipFile`、`gzip.GzipFile`、`bz2.BZ2File`、`zstandard.ZstdDecompressor`、`lzma.LZMAFile`
    或 `tarfile.TarFile`。例如，可以通过以下方式传递用于Zstandard解压缩的自定义压缩字典：`compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`。'
- en: 'New in version 1.5.0: Added support for .tar files.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5.0版本中的新功能：增加了对.tar文件的支持。
- en: 'Changed in version 1.4.0: Zstandard support.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.0版本中更改：增加了对Zstandard的支持。
- en: '**thousands**str (length 1), optional'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**thousands**str（长度为1），可选'
- en: Character acting as the thousands separator in numerical values.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 数值中的千位分隔符。
- en: '**decimal**str (length 1), default ‘.’'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**decimal**str（长度为1），默认为 ‘.’'
- en: Character to recognize as decimal point (e.g., use ‘,’ for European data).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将作为十进制点识别的字符（例如，使用‘，’表示欧洲数据）。
- en: '**lineterminator**str (length 1), optional'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**lineterminator**str（长度为1），可选'
- en: Character used to denote a line break. Only valid with C parser.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示换行的字符。只有与C解析器一起使用时才有效。
- en: '**quotechar**str (length 1), optional'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**quotechar**str（长度为1），可选'
- en: Character used to denote the start and end of a quoted item. Quoted items can
    include the `delimiter` and it will be ignored.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示引用项目的开始和结束的字符。引用项目可以包括 `delimiter`，并且将被忽略。
- en: '**quoting**{0 or csv.QUOTE_MINIMAL, 1 or csv.QUOTE_ALL, 2 or csv.QUOTE_NONNUMERIC,
    3 or csv.QUOTE_NONE}, default csv.QUOTE_MINIMAL'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**quoting**{0 或 csv.QUOTE_MINIMAL, 1 或 csv.QUOTE_ALL, 2 或 csv.QUOTE_NONNUMERIC,
    3 或 csv.QUOTE_NONE}，默认为 csv.QUOTE_MINIMAL'
- en: Control field quoting behavior per `csv.QUOTE_*` constants. Default is `csv.QUOTE_MINIMAL`
    (i.e., 0) which implies that only fields containing special characters are quoted
    (e.g., characters defined in `quotechar`, `delimiter`, or `lineterminator`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 控制字段引号行为的 `csv.QUOTE_*` 常量。默认为 `csv.QUOTE_MINIMAL`（即，0），表示仅引用包含特殊字符的字段（例如，在
    `quotechar`、`delimiter` 或 `lineterminator` 中定义的字符）。
- en: '**doublequote**bool, default True'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**doublequote**bool，默认为 True'
- en: When `quotechar` is specified and `quoting` is not `QUOTE_NONE`, indicate whether
    or not to interpret two consecutive `quotechar` elements INSIDE a field as a single
    `quotechar` element.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定了 `quotechar` 且 `quoting` 不是 `QUOTE_NONE` 时，指示是否将字段内连续的两个 `quotechar` 元素解释为单个
    `quotechar` 元素。
- en: '**escapechar**str (length 1), optional'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**escapechar**str（长度为1），可选'
- en: Character used to escape other characters.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 用于转义其他字符的字符。
- en: '**comment**str (length 1), optional'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**comment**str（长度为1），可选'
- en: Character indicating that the remainder of line should not be parsed. If found
    at the beginning of a line, the line will be ignored altogether. This parameter
    must be a single character. Like empty lines (as long as `skip_blank_lines=True`),
    fully commented lines are ignored by the parameter `header` but not by `skiprows`.
    For example, if `comment='#'`, parsing `#empty\na,b,c\n1,2,3` with `header=0`
    will result in `'a,b,c'` being treated as the header.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 表示应不解析行剩余部分的字符。如果在行的开头找到，将完全忽略该行。此参数必须是单个字符。与空行一样（只要 `skip_blank_lines=True`），完全被注释的行由参数
    `header` 忽略，但不由 `skiprows` 忽略。例如，如果 `comment='#'`，使用 `header=0` 解析 `#empty\na,b,c\n1,2,3`
    将导致 `'a,b,c'` 被视为标题。
- en: '**encoding**str, optional, default ‘utf-8’'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**encoding**str，可选，默认为 ‘utf-8’'
- en: Encoding to use for UTF when reading/writing (ex. `'utf-8'`). [List of Python
    standard encodings](https://docs.python.org/3/library/codecs.html#standard-encodings)
    .
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 读取/写入 UTF 时要使用的编码（例如。`'utf-8'`）。[Python 标准编码列表](https://docs.python.org/3/library/codecs.html#standard-encodings)。
- en: '**encoding_errors**str, optional, default ‘strict’'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**encoding_errors**str，可选，默认为‘strict’'
- en: How encoding errors are treated. [List of possible values](https://docs.python.org/3/library/codecs.html#error-handlers)
    .
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如何处理编码错误。[可能值列表](https://docs.python.org/3/library/codecs.html#error-handlers)。
- en: New in version 1.3.0.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.0 开始的新功能。
- en: '**dialect**str or csv.Dialect, optional'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**dialect**str 或 csv.Dialect，可选'
- en: 'If provided, this parameter will override values (default or not) for the following
    parameters: `delimiter`, `doublequote`, `escapechar`, `skipinitialspace`, `quotechar`,
    and `quoting`. If it is necessary to override values, a `ParserWarning` will be
    issued. See `csv.Dialect` documentation for more details.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供，此参数将覆盖以下参数的值（默认或非默认）：`delimiter`，`doublequote`，`escapechar`，`skipinitialspace`，`quotechar`
    和 `quoting`。如果需要覆盖值，则将发出`ParserWarning`。有关更多详细信息，请参阅 `csv.Dialect` 文档。
- en: '**on_bad_lines**{‘error’, ‘warn’, ‘skip’} or Callable, default ‘error’'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**on_bad_lines**{‘error’，‘warn’，‘skip’} 或 Callable，默认为‘error’'
- en: 'Specifies what to do upon encountering a bad line (a line with too many fields).
    Allowed values are :'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 指定在遇到错误行（字段过多的行）时要执行的操作。允许的值有：
- en: '`''error''`, raise an Exception when a bad line is encountered.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''error''`，当遇到错误行时引发异常。'
- en: '`''warn''`, raise a warning when a bad line is encountered and skip that line.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''warn''`，在遇到错误行时引发警告并跳过该行。'
- en: '`''skip''`, skip bad lines without raising or warning when they are encountered.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''skip''`，在遇到错误行时跳过，而不引发或警告。'
- en: New in version 1.3.0.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.0 开始的新功能。
- en: 'New in version 1.4.0:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.0 开始的新功能：
- en: 'Callable, function with signature `(bad_line: list[str]) -> list[str] | None`
    that will process a single bad line. `bad_line` is a list of strings split by
    the `sep`. If the function returns `None`, the bad line will be ignored. If the
    function returns a new `list` of strings with more elements than expected, a `ParserWarning`
    will be emitted while dropping extra elements. Only supported when `engine=''python''`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '可调用函数，具有签名 `(bad_line: list[str]) -> list[str] | None`，将处理单个错误行。`bad_line`是由`sep`分割的字符串列表。如果函数返回`None`，则会忽略错误行。如果函数返回具有比预期更多元素的新的字符串`list`，则会发出`ParserWarning`，同时删除额外的元素。仅在`engine=''python''`时受支持。'
- en: 'Changed in version 2.2.0:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.2.0 开始更改：
- en: Callable, function with signature as described in [pyarrow documentation](https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html#pyarrow.csv.ParseOptions.invalid_row_handler)
    when `engine='pyarrow'`
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`engine='pyarrow'`时，具有如[pyarrow 文档](https://arrow.apache.org/docs/python/generated/pyarrow.csv.ParseOptions.html#pyarrow.csv.ParseOptions.invalid_row_handler)中描述的签名的可调用函数。
- en: '**delim_whitespace**bool, default False'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**delim_whitespace**bool，默认为 False'
- en: Specifies whether or not whitespace (e.g. `' '` or `'\t'`) will be used as the
    `sep` delimiter. Equivalent to setting `sep='\s+'`. If this option is set to `True`,
    nothing should be passed in for the `delimiter` parameter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 指定是否使用空白字符（例如。`' '`或`'\t'`）作为`sep`分隔符。等效于设置`sep='\s+'`。如果将此选项设置为`True`，则不应传递任何内容给`delimiter`参数。
- en: 'Deprecated since version 2.2.0: Use `sep="\s+"` instead.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.2.0 起弃用：请改用`sep="\s+"`。
- en: '**low_memory**bool, default True'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**low_memory**bool，默认为 True'
- en: Internally process the file in chunks, resulting in lower memory use while parsing,
    but possibly mixed type inference. To ensure no mixed types either set `False`,
    or specify the type with the `dtype` parameter. Note that the entire file is read
    into a single [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    regardless, use the `chunksize` or `iterator` parameter to return the data in
    chunks. (Only valid with C parser).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件分块内部处理，以降低解析时的内存使用，但可能导致混合类型推断。为了确保没有混合类型，要么设置为`False`，要么使用`dtype`参数指定类型。请注意，无论如何整个文件都会被读入单个[`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中，可以使用`chunksize`或`iterator`参数以块返回数据。（仅在 C 解析器中有效）。
- en: '**memory_map**bool, default False'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**memory_map**bool，默认为 False'
- en: If a filepath is provided for `filepath_or_buffer`, map the file object directly
    onto memory and access the data directly from there. Using this option can improve
    performance because there is no longer any I/O overhead.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为`filepath_or_buffer`提供了文件路径，则将文件对象直接映射到内存中，并直接从中访问数据。使用此选项可以提高性能，因为不再有任何
    I/O 开销。
- en: '**float_precision**{‘high’, ‘legacy’, ‘round_trip’}, optional'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**float_precision**{‘high’，‘legacy’，‘round_trip’}，可选'
- en: Specifies which converter the C engine should use for floating-point values.
    The options are `None` or `'high'` for the ordinary converter, `'legacy'` for
    the original lower precision pandas converter, and `'round_trip'` for the round-trip
    converter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 指定C引擎应使用哪个转换器处理浮点值。选项为`None`或`'high'`表示普通转换器，`'legacy'`表示原始较低精度的pandas转换器，`'round_trip'`表示往返转换器。
- en: '**storage_options**dict, optional'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**storage_options**字典，可选'
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 针对特定存储连接有额外选项，例如主机、端口、用户名、密码等。对于HTTP(S) URL，键值对将作为头部选项转发给`urllib.request.Request`。对于其他URL（例如以“s3://”和“gcs://”开头的URL），键值对将转发给`fsspec.open`。更多详情请参阅`fsspec`和`urllib`，有关存储选项的更多示例请参考[此处](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files)。
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}，默认为‘numpy_nullable’'
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于结果[`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")的后端数据类型（仍处于实验阶段）。行为如下：
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"numpy_nullable"`：返回支持可空dtype的[`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")（默认值）。'
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"pyarrow"`：返回由pyarrow支持的可空[`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame。'
- en: New in version 2.0.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在2.0版本中新增。
- en: 'Returns:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: DataFrame or TextFileReader
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame或TextFileReader
- en: A comma-separated values (csv) file is returned as two-dimensional data structure
    with labeled axes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号分隔值（csv）文件被返回为带有标记轴的二维数据结构。
- en: See also
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`DataFrame.to_csv`](pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv "pandas.DataFrame.to_csv")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_csv`](pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv "pandas.DataFrame.to_csv")'
- en: Write DataFrame to a comma-separated values (csv) file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将DataFrame写入逗号分隔值（csv）文件。
- en: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
- en: Read a comma-separated values (csv) file into DataFrame.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将逗号分隔值（csv）文件读入DataFrame。
- en: '[`read_fwf`](pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`read_fwf`](pandas.read_fwf.html#pandas.read_fwf "pandas.read_fwf")'
- en: Read a table of fixed-width formatted lines into DataFrame.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将一张固定宽度格式的表格行读入DataFrame。
- en: Examples
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
