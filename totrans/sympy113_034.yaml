- en: Reduce One or a System of Inequalities for a Single Variable Algebraically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/guides/solving/reduce-inequalities-algebraically.html](https://docs.sympy.org/latest/guides/solving/reduce-inequalities-algebraically.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use SymPy to reduce one or a system of inequalities for a single variable algebraically.
    For example, reducing \(x^2 < \pi\), \(x > 0\) yields \(0 < x < \sqrt{\pi}\).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SymPy can currently reduce for only one symbol (variable) in an inequality.
  prefs: []
  type: TYPE_NORMAL
- en: SymPy can reduce a system containing more than one symbol, if there is only
    one symbol per inequality.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Consider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To reduce for more than one symbol in an inequality, try SciPy’s [`linprog()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "(in SciPy v1.13.1)")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To reduce Boolean expressions, use [`as_set`](../../modules/logic.html#sympy.logic.boolalg.Boolean.as_set
    "sympy.logic.boolalg.Boolean.as_set")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reducing a System of Inequalities for a Single Variable Algebraically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") accepts a list or tuple of inequalities
    to be reduced as a system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") currently accomplishes the same thing (by calling
    [`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") internally), that functionality
    may be deprecated or removed from [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve"). We thus recommend using [`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities").
  prefs: []
  type: TYPE_NORMAL
- en: '[`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") is the top-level inequality-reducing
    function which will internally call any other lower-level [inequality-reducing
    functions](../../modules/solvers/inequalities.html) as needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Reducing One Inequality for a Single Variable Algebraically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have only one inequality, you can optionally exclude the list construct
    and simply pass [`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") the inequality as an expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Guidance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Include the Variable to Be Reduced for in the Function Call
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend you include the variable to be reduced for as the second argument
    for [`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") to ensure that it reduces for
    the desired variable.
  prefs: []
  type: TYPE_NORMAL
- en: Reduce a System of Inequalities Algebraically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can create your inequalities, then reduce the system as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use the Result
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common way to use the result is to extract the bounds for the symbol (variable).
    For example, for a solution of \(0 < x < \sqrt{\pi}\), you might want to extract
    \(0\) and \(\sqrt{\pi}\).
  prefs: []
  type: TYPE_NORMAL
- en: Extract a List of Decomposed Relations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can decompose a set of relations which is joined by `^` ([`Or`](../../modules/logic.html#sympy.logic.boolalg.Or
    "sympy.logic.boolalg.Or")) or `&` ([`And`](../../modules/logic.html#sympy.logic.boolalg.And
    "sympy.logic.boolalg.And")) into individual relations using relational atoms.
    Using [`canonical`](../../modules/core.html#sympy.core.relational.Relational.canonical
    "sympy.core.relational.Relational.canonical") will put order each relation so
    the symbol is on the left, so you can take the right-hand side [`rhs`](../../modules/core.html#sympy.core.relational.Relational.rhs
    "sympy.core.relational.Relational.rhs") to extract the constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Extract a Tuple of Relations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [`args`](../../modules/core.html#sympy.core.basic.Basic.args "sympy.core.basic.Basic.args")
    (arguments) of reduced relations are the individual relations, so you can extract
    the constants from the left- or right-hand side of the `args`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Limitations of Inequality Reduction Using SymPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SymPy Can Reduce for Only One Symbol of Interest Per Inequality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SymPy can currently reduce for only one symbol (variable) of interest in a given
    inequality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can use SciPy’s [`linprog()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "(in SciPy v1.13.1)") to reduce this system of inequalities.
  prefs: []
  type: TYPE_NORMAL
- en: SymPy can reduce for more than one symbol in a system, if there is only one
    symbol of interest per inequality. For example, the following system of inequalities
    has two variables, \(x\) and \(y\). SymPy can reduce for \(x\), and gives the
    constraints on \(y\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: (`oo` is [`Infinity`](../../modules/core.html#sympy.core.numbers.Infinity "sympy.core.numbers.Infinity").)
  prefs: []
  type: TYPE_NORMAL
- en: 'If each inequality contains only one symbol to be reduced for, SymPy can reduce
    the set of inequalities for multiple symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this provides no mathematical insight beyond reducing the inequalities
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: so the benefit of solving such inequalities as a set maybe only convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations on Types of Inequalities That SymPy Can Solve
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") can solve a system of inequalities
    involving a power of the symbol to be reduced for, or involving another symbol,
    but not both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Not All Results Are Returned for Periodic Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results returned for trigonometric inequalities are restricted in its periodic
    interval. [`reduce_inequalities()`](../../modules/solvers/inequalities.html#sympy.solvers.inequalities.reduce_inequalities
    "sympy.solvers.inequalities.reduce_inequalities") tries to return just enough
    solutions so that all (infinitely many) solutions can generated from the returned
    solutions by adding integer multiples of the [`periodicity()`](../../modules/calculus/index.html#sympy.calculus.util.periodicity
    "sympy.calculus.util.periodicity") of the equation, here \(2\pi\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Not All Systems of Inequalities Can Be Reduced
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Systems of Inequalities Which Cannot Be Satisfied
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the system of inequalities has incompatible conditions, for example \(x
    < 0\) and \(x > \pi\), SymPy will return `False`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Systems of Inequalities That Cannot Be Reduced Analytically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SymPy may reflect that your system of inequalities has no solutions that can
    be expressed algebraically (symbolically) by returning an error such as `NotImplementedError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: so you may have to reduce your inequalities numerically instead using SciPy’s
    [`linprog()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog
    "(in SciPy v1.13.1)").
  prefs: []
  type: TYPE_NORMAL
- en: Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to [Limitations of Inequality Reduction Using SymPy](#limitations-of-inequality-reduction-using-sympy)
    above.
  prefs: []
  type: TYPE_NORMAL
- en: Report a Bug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find a bug with [`diophantine()`](../../modules/solvers/diophantine.html#sympy.solvers.diophantine.diophantine.diophantine
    "sympy.solvers.diophantine.diophantine.diophantine"), please post the problem
    on the [SymPy mailing list](https://groups.google.com/g/sympy). Until the issue
    is resolved, you can use a different method listed in [Alternatives to Consider](#alternatives-to-consider).
  prefs: []
  type: TYPE_NORMAL
