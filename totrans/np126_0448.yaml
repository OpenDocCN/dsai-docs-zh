- en: numpy.char.chararray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.char.chararray
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.char.chararray.html](https://numpy.org/doc/1.26/reference/generated/numpy.char.chararray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.char.chararray.html](https://numpy.org/doc/1.26/reference/generated/numpy.char.chararray.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Provides a convenient view on arrays of string and unicode values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了方便查看字符串和Unicode值数组的功能。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The [`chararray`](#numpy.char.chararray "numpy.char.chararray") class exists
    for backwards compatibility with Numarray, it is not recommended for new development.
    Starting from numpy 1.4, if one needs arrays of strings, it is recommended to
    use arrays of [`dtype`](numpy.char.chararray.dtype.html#numpy.char.chararray.dtype
    "numpy.char.chararray.dtype") `object_`, `bytes_` or `str_`, and use the free
    functions in the [`numpy.char`](../routines.char.html#module-numpy.char "numpy.char")
    module for fast vectorized string operations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`chararray`](#numpy.char.chararray "numpy.char.chararray")类是为了向后兼容Numarray而存在的，不建议用于新开发。从numpy
    1.4开始，如果需要字符串数组，建议使用[`dtype`](numpy.char.chararray.dtype.html#numpy.char.chararray.dtype
    "numpy.char.chararray.dtype")为`object_`、`bytes_`或`str_`的数组，并在[`numpy.char`](../routines.char.html#module-numpy.char
    "numpy.char")模块中使用免费函数进行快速矢量化的字符串操作。'
- en: 'Versus a regular NumPy array of type *str* or *unicode*, this class adds the
    following functionality:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规的*str*或*unicode*类型的NumPy数组相比，此类添加了以下功能：
- en: values automatically have whitespace removed from the end when indexed
  id: totrans-7
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 索引值时自动从末尾去除空格
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: comparison operators automatically remove whitespace from the end when comparing
    values
  id: totrans-10
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较运算符在比较值时自动去除末尾的空格
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: vectorized string operations are provided as methods (e.g. [`endswith`](numpy.char.chararray.endswith.html#numpy.char.chararray.endswith
    "numpy.char.chararray.endswith")) and infix operators (e.g. `"+", "*", "%"`)
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供作为方法（例如 [`endswith`](numpy.char.chararray.endswith.html#numpy.char.chararray.endswith
    "numpy.char.chararray.endswith")）或中缀运算符（例如 `"+", "*", "%"）的向量化字符串操作。
- en: chararrays should be created using [`numpy.char.array`](numpy.char.array.html#numpy.char.array
    "numpy.char.array") or [`numpy.char.asarray`](numpy.char.asarray.html#numpy.char.asarray
    "numpy.char.asarray"), rather than this constructor directly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应使用[`numpy.char.array`](numpy.char.array.html#numpy.char.array "numpy.char.array")或[`numpy.char.asarray`](numpy.char.asarray.html#numpy.char.asarray
    "numpy.char.asarray")创建chararrays，而不是直接使用此构造函数。
- en: This constructor creates the array, using *buffer* (with *offset* and [`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides")) if it is not `None`. If *buffer* is `None`, then
    constructs a new array with [`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides") in “C order”, unless both `len(shape) >= 2` and
    `order='F'`, in which case [`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides") is in “Fortran order”.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此构造函数使用 *buffer*（带有 *offset* 和[`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides")），如果它不是`None`，来创建数组。如果 *buffer* 是`None`，则以“C顺序”构造一个新数组，除非`len(shape)
    >= 2`和`order='F'`，在这种情况下[`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides")采用“Fortran顺序”。
- en: 'Parameters:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**shape**tuple'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**形状**元组'
- en: Shape of the array.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的形状。
- en: '**itemsize**int, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**itemsize**int，可选'
- en: Length of each array element, in number of characters. Default is 1.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素的长度，以字符数表示。默认为1。
- en: '**unicode**bool, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**unicode**bool，可选'
- en: Are the array elements of type unicode (True) or string (False). Default is
    False.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素是否为unicode类型（True）或字符串类型（False）。默认为False。
- en: '**buffer**object exposing the buffer interface or str, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓冲区**暴露缓冲区接口的对象或字符串，可选'
- en: Memory address of the start of the array data. Default is None, in which case
    a new array is created.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数据的起始内存地址。默认为None，在这种情况下创建一个新数组���
- en: '**offset**int, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset**int，可选'
- en: Fixed stride displacement from the beginning of an axis? Default is 0\. Needs
    to be >=0.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从轴的开始固定的跨度位移？默认为0。
- en: '**strides**array_like of ints, optional'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**strides**int数组，可选'
- en: Strides for the array (see `ndarray.strides` for full description). Default
    is None.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的跨度（参见`ndarray.strides`进行详细描述）。默认为None。
- en: '**order**{‘C’, ‘F’}, optional'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺序**{‘C’, ‘F’}，可选'
- en: 'The order in which the array data is stored in memory: ‘C’ -> “row major” order
    (the default), ‘F’ -> “column major” (Fortran) order.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数据在内存中存储的顺序：‘C’ -> “行优先”顺序（默认），‘F’ -> “列优先”（Fortran）顺序。
- en: Examples
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Attributes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`T`](numpy.char.chararray.T.html#numpy.char.chararray.T "numpy.char.chararray.T")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`T`](numpy.char.chararray.T.html#numpy.char.chararray.T "numpy.char.chararray.T")'
- en: View of the transposed array.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 转置数组的视图。
- en: '[`base`](numpy.char.chararray.base.html#numpy.char.chararray.base "numpy.char.chararray.base")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](numpy.char.chararray.base.html#numpy.char.chararray.base "numpy.char.chararray.base")'
- en: Base object if memory is from some other object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内存来自其他对象，则为基本对象。
- en: '[`ctypes`](numpy.char.chararray.ctypes.html#numpy.char.chararray.ctypes "numpy.char.chararray.ctypes")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ctypes`](numpy.char.chararray.ctypes.html#numpy.char.chararray.ctypes "numpy.char.chararray.ctypes")'
- en: An object to simplify the interaction of the array with the ctypes module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 简化数组与 ctypes 模块交互的对象。
- en: '[`data`](numpy.char.chararray.data.html#numpy.char.chararray.data "numpy.char.chararray.data")'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data`](numpy.char.chararray.data.html#numpy.char.chararray.data "numpy.char.chararray.data")'
- en: Python buffer object pointing to the start of the array’s data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组数据起始位置的 Python 缓冲区对象。
- en: '[`dtype`](numpy.char.chararray.dtype.html#numpy.char.chararray.dtype "numpy.char.chararray.dtype")'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.char.chararray.dtype.html#numpy.char.chararray.dtype "numpy.char.chararray.dtype")'
- en: Data-type of the array’s elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素的数据类型。
- en: '[`flags`](numpy.char.chararray.flags.html#numpy.char.chararray.flags "numpy.char.chararray.flags")'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flags`](numpy.char.chararray.flags.html#numpy.char.chararray.flags "numpy.char.chararray.flags")'
- en: Information about the memory layout of the array.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的内存布局信息。
- en: '[`flat`](numpy.char.chararray.flat.html#numpy.char.chararray.flat "numpy.char.chararray.flat")'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flat`](numpy.char.chararray.flat.html#numpy.char.chararray.flat "numpy.char.chararray.flat")'
- en: A 1-D iterator over the array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的一维迭代器。
- en: '[`imag`](numpy.char.chararray.imag.html#numpy.char.chararray.imag "numpy.char.chararray.imag")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`imag`](numpy.char.chararray.imag.html#numpy.char.chararray.imag "numpy.char.chararray.imag")'
- en: The imaginary part of the array.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的虚部。
- en: '[`itemsize`](numpy.char.chararray.itemsize.html#numpy.char.chararray.itemsize
    "numpy.char.chararray.itemsize")'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itemsize`](numpy.char.chararray.itemsize.html#numpy.char.chararray.itemsize
    "numpy.char.chararray.itemsize")'
- en: Length of one array element in bytes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组元素的字节长度。
- en: '[`nbytes`](numpy.char.chararray.nbytes.html#numpy.char.chararray.nbytes "numpy.char.chararray.nbytes")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nbytes`](numpy.char.chararray.nbytes.html#numpy.char.chararray.nbytes "numpy.char.chararray.nbytes")'
- en: Total bytes consumed by the elements of the array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素占用的总字节数。
- en: '[`ndim`](numpy.char.chararray.ndim.html#numpy.char.chararray.ndim "numpy.char.chararray.ndim")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndim`](numpy.char.chararray.ndim.html#numpy.char.chararray.ndim "numpy.char.chararray.ndim")'
- en: Number of array dimensions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数组维度的数量。
- en: '[`real`](numpy.char.chararray.real.html#numpy.char.chararray.real "numpy.char.chararray.real")'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`real`](numpy.char.chararray.real.html#numpy.char.chararray.real "numpy.char.chararray.real")'
- en: The real part of the array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的实部。
- en: '[`shape`](numpy.char.chararray.shape.html#numpy.char.chararray.shape "numpy.char.chararray.shape")'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape`](numpy.char.chararray.shape.html#numpy.char.chararray.shape "numpy.char.chararray.shape")'
- en: Tuple of array dimensions.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数组维度的元组。
- en: '[`size`](numpy.char.chararray.size.html#numpy.char.chararray.size "numpy.char.chararray.size")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`size`](numpy.char.chararray.size.html#numpy.char.chararray.size "numpy.char.chararray.size")'
- en: Number of elements in the array.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素数。
- en: '[`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strides`](numpy.char.chararray.strides.html#numpy.char.chararray.strides
    "numpy.char.chararray.strides")'
- en: Tuple of bytes to step in each dimension when traversing an array.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在遍历数组时，每个维度的步长的元组。
- en: Methods
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`astype`](numpy.char.chararray.astype.html#numpy.char.chararray.astype "numpy.char.chararray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`astype`](numpy.char.chararray.astype.html#numpy.char.chararray.astype "numpy.char.chararray.astype")(dtype[, order, casting, subok, copy])
    | 复制数组，并转换为指定类型。 |'
- en: '| [`argsort`](numpy.char.chararray.argsort.html#numpy.char.chararray.argsort
    "numpy.char.chararray.argsort")([axis, kind, order]) | Returns the indices that
    would sort this array. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`argsort`](numpy.char.chararray.argsort.html#numpy.char.chararray.argsort
    "numpy.char.chararray.argsort")([axis, kind, order]) | 返回对该数组进行排序的索引。 |'
- en: '| [`copy`](numpy.char.chararray.copy.html#numpy.char.chararray.copy "numpy.char.chararray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](numpy.char.chararray.copy.html#numpy.char.chararray.copy "numpy.char.chararray.copy")([order])
    | 返回数组的副本。 |'
- en: '| [`count`](numpy.char.chararray.count.html#numpy.char.chararray.count "numpy.char.chararray.count")(sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`count`](numpy.char.chararray.count.html#numpy.char.chararray.count "numpy.char.chararray.count")(sub[, start, end])
    | 返回范围[*start*,*end*]内子串 *sub* 的非重叠出现次数的数组。 |'
- en: '| [`decode`](numpy.char.chararray.decode.html#numpy.char.chararray.decode "numpy.char.chararray.decode")([encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`decode`](numpy.char.chararray.decode.html#numpy.char.chararray.decode "numpy.char.chararray.decode")([encoding, errors])
    | 逐元素调用`bytes.decode`。 |'
- en: '| [`dump`](numpy.char.chararray.dump.html#numpy.char.chararray.dump "numpy.char.chararray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`dump`](numpy.char.chararray.dump.html#numpy.char.chararray.dump "numpy.char.chararray.dump")(file)
    | 将数组的pickle转储到指定文件。'
- en: '| [`dumps`](numpy.char.chararray.dumps.html#numpy.char.chararray.dumps "numpy.char.chararray.dumps")()
    | Returns the pickle of the array as a string. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`dumps`](numpy.char.chararray.dumps.html#numpy.char.chararray.dumps "numpy.char.chararray.dumps")()
    | 返回数组的pickle作为字符串。'
- en: '| [`encode`](numpy.char.chararray.encode.html#numpy.char.chararray.encode "numpy.char.chararray.encode")([encoding, errors])
    | Calls *str.encode* element-wise. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`encode`](numpy.char.chararray.encode.html#numpy.char.chararray.encode "numpy.char.chararray.encode")([encoding, errors])
    | 逐元素调用*str.encode*。'
- en: '| [`endswith`](numpy.char.chararray.endswith.html#numpy.char.chararray.endswith
    "numpy.char.chararray.endswith")(suffix[, start, end]) | Returns a boolean array
    which is *True* where the string element in *self* ends with *suffix*, otherwise
    *False*. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith`](numpy.char.chararray.endswith.html#numpy.char.chararray.endswith
    "numpy.char.chararray.endswith")(suffix[, start, end]) | 返回一个布尔数组，在其中*True*表示*self*中的字符串元素以*suffix*结尾，否则为*False*。'
- en: '| [`expandtabs`](numpy.char.chararray.expandtabs.html#numpy.char.chararray.expandtabs
    "numpy.char.chararray.expandtabs")([tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`expandtabs`](numpy.char.chararray.expandtabs.html#numpy.char.chararray.expandtabs
    "numpy.char.chararray.expandtabs")([tabsize]) | 返回每个字符串元素的副本，其中所有制表符字符都被一个或多个空格字符替换。'
- en: '| [`fill`](numpy.char.chararray.fill.html#numpy.char.chararray.fill "numpy.char.chararray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`fill`](numpy.char.chararray.fill.html#numpy.char.chararray.fill "numpy.char.chararray.fill")(value)
    | 用标量值填充数组。'
- en: '| [`find`](numpy.char.chararray.find.html#numpy.char.chararray.find "numpy.char.chararray.find")(sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`find`](numpy.char.chararray.find.html#numpy.char.chararray.find "numpy.char.chararray.find")(sub[, start, end])
    | 对于每个元素，返回字符串中找到子字符串*sub*的最低索引。'
- en: '| [`flatten`](numpy.char.chararray.flatten.html#numpy.char.chararray.flatten
    "numpy.char.chararray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`flatten`](numpy.char.chararray.flatten.html#numpy.char.chararray.flatten
    "numpy.char.chararray.flatten")([order]) | 返回数组的一维折叠副本。'
- en: '| [`getfield`](numpy.char.chararray.getfield.html#numpy.char.chararray.getfield
    "numpy.char.chararray.getfield")(dtype[, offset]) | Returns a field of the given
    array as a certain type. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`getfield`](numpy.char.chararray.getfield.html#numpy.char.chararray.getfield
    "numpy.char.chararray.getfield")(dtype[, offset]) | 返回给定数组的某个字段作为特定类型。'
- en: '| [`index`](numpy.char.chararray.index.html#numpy.char.chararray.index "numpy.char.chararray.index")(sub[, start, end])
    | Like [`find`](numpy.char.find.html#numpy.char.find "numpy.char.find"), but raises
    *ValueError* when the substring is not found. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`index`](numpy.char.chararray.index.html#numpy.char.chararray.index "numpy.char.chararray.index")(sub[, start, end])
    | 类似于[`find`](numpy.char.find.html#numpy.char.find "numpy.char.find")，但当未找到子字符串时引发*ValueError*。'
- en: '| [`isalnum`](numpy.char.chararray.isalnum.html#numpy.char.chararray.isalnum
    "numpy.char.chararray.isalnum")() | Returns true for each element if all characters
    in the string are alphanumeric and there is at least one character, false otherwise.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum`](numpy.char.chararray.isalnum.html#numpy.char.chararray.isalnum
    "numpy.char.chararray.isalnum")() | 如果字符串中的所有字符都是字母数字字符，并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`isalpha`](numpy.char.chararray.isalpha.html#numpy.char.chararray.isalpha
    "numpy.char.chararray.isalpha")() | Returns true for each element if all characters
    in the string are alphabetic and there is at least one character, false otherwise.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha`](numpy.char.chararray.isalpha.html#numpy.char.chararray.isalpha
    "numpy.char.chararray.isalpha")() | 如果字符串中的所有字符都是字母字符，并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`isdecimal`](numpy.char.chararray.isdecimal.html#numpy.char.chararray.isdecimal
    "numpy.char.chararray.isdecimal")() | For each element in *self*, return True
    if there are only decimal characters in the element. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal`](numpy.char.chararray.isdecimal.html#numpy.char.chararray.isdecimal
    "numpy.char.chararray.isdecimal")() | 对于*self*中的每个元素，如果元素中只有十进制字符，则返回True。'
- en: '| [`isdigit`](numpy.char.chararray.isdigit.html#numpy.char.chararray.isdigit
    "numpy.char.chararray.isdigit")() | Returns true for each element if all characters
    in the string are digits and there is at least one character, false otherwise.
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit`](numpy.char.chararray.isdigit.html#numpy.char.chararray.isdigit
    "numpy.char.chararray.isdigit")() | 对于字符串中的每个元素，如果都是数字字符，并且至少有一个字符，则返回true，否则返回false。'
- en: '| [`islower`](numpy.char.chararray.islower.html#numpy.char.chararray.islower
    "numpy.char.chararray.islower")() | Returns true for each element if all cased
    characters in the string are lowercase and there is at least one cased character,
    false otherwise. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '[`islower`](numpy.char.chararray.islower.html#numpy.char.chararray.islower
    "numpy.char.chararray.islower")() | 如果字符串中所有大小写字符都是小写，并且至少有一个大小写字符，则对每个元素返回true，否则返回false。'
- en: '| [`isnumeric`](numpy.char.chararray.isnumeric.html#numpy.char.chararray.isnumeric
    "numpy.char.chararray.isnumeric")() | For each element in *self*, return True
    if there are only numeric characters in the element. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '[`isnumeric`](numpy.char.chararray.isnumeric.html#numpy.char.chararray.isnumeric
    "numpy.char.chararray.isnumeric")() | 对于*self*中的每个元素，如果元素中只有数字字符，则返回True。'
- en: '| [`isspace`](numpy.char.chararray.isspace.html#numpy.char.chararray.isspace
    "numpy.char.chararray.isspace")() | Returns true for each element if there are
    only whitespace characters in the string and there is at least one character,
    false otherwise. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '[`isspace`](numpy.char.chararray.isspace.html#numpy.char.chararray.isspace
    "numpy.char.chararray.isspace")() | 如果字符串中只有空白字符并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`istitle`](numpy.char.chararray.istitle.html#numpy.char.chararray.istitle
    "numpy.char.chararray.istitle")() | Returns true for each element if the element
    is a titlecased string and there is at least one character, false otherwise. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '[`istitle`](numpy.char.chararray.istitle.html#numpy.char.chararray.istitle
    "numpy.char.chararray.istitle")() | 对每个元素进行检查，如果元素是首字母大写的字符串且至少有一个字符，则返回true，否则返回false。'
- en: '| [`isupper`](numpy.char.chararray.isupper.html#numpy.char.chararray.isupper
    "numpy.char.chararray.isupper")() | Returns true for each element if all cased
    characters in the string are uppercase and there is at least one character, false
    otherwise. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '[`isupper`](numpy.char.chararray.isupper.html#numpy.char.chararray.isupper
    "numpy.char.chararray.isupper")() | 如果字符串中所有大小写字符都是大写并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`item`](numpy.char.chararray.item.html#numpy.char.chararray.item "numpy.char.chararray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '[`item`](numpy.char.chararray.item.html#numpy.char.chararray.item "numpy.char.chararray.item")(*args)
    | 将数组的一个元素复制到标准的Python标量并返回它。'
- en: '| [`join`](numpy.char.chararray.join.html#numpy.char.chararray.join "numpy.char.chararray.join")(seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '[`join`](numpy.char.chararray.join.html#numpy.char.chararray.join "numpy.char.chararray.join")(seq)
    | 返回一个字符串，其中包含*seq*序列中字符串的连接。'
- en: '| [`ljust`](numpy.char.chararray.ljust.html#numpy.char.chararray.ljust "numpy.char.chararray.ljust")(width[, fillchar])
    | Return an array with the elements of *self* left-justified in a string of length
    *width*. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '[`ljust`](numpy.char.chararray.ljust.html#numpy.char.chararray.ljust "numpy.char.chararray.ljust")(width[, fillchar])
    | 返回一个数组，其中*self*的元素左对齐在长度为*width*的字符串中。'
- en: '| [`lower`](numpy.char.chararray.lower.html#numpy.char.chararray.lower "numpy.char.chararray.lower")()
    | Return an array with the elements of *self* converted to lowercase. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '[`lower`](numpy.char.chararray.lower.html#numpy.char.chararray.lower "numpy.char.chararray.lower")()
    | 返回一个数组，其中*self*的元素转换为小写。'
- en: '| [`lstrip`](numpy.char.chararray.lstrip.html#numpy.char.chararray.lstrip "numpy.char.chararray.lstrip")([chars])
    | For each element in *self*, return a copy with the leading characters removed.
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '[`lstrip`](numpy.char.chararray.lstrip.html#numpy.char.chararray.lstrip "numpy.char.chararray.lstrip")([chars])
    | 对于*self*中的每个元素，返回一个删除前导字符的副本。'
- en: '| [`nonzero`](numpy.char.chararray.nonzero.html#numpy.char.chararray.nonzero
    "numpy.char.chararray.nonzero")() | Return the indices of the elements that are
    non-zero. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '[`nonzero`](numpy.char.chararray.nonzero.html#numpy.char.chararray.nonzero
    "numpy.char.chararray.nonzero")() | 返回非零元素的索引。'
- en: '| [`put`](numpy.char.chararray.put.html#numpy.char.chararray.put "numpy.char.chararray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '[`put`](numpy.char.chararray.put.html#numpy.char.chararray.put "numpy.char.chararray.put")(indices, values[, mode])
    | 设置`a.flat[n] = values[n]`，其中*n*为索引的所有值。'
- en: '| [`ravel`](numpy.char.chararray.ravel.html#numpy.char.chararray.ravel "numpy.char.chararray.ravel")([order])
    | Return a flattened array. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '[`ravel`](numpy.char.chararray.ravel.html#numpy.char.chararray.ravel "numpy.char.chararray.ravel")([order])
    | 返回一个扁平化的数组。'
- en: '| [`repeat`](numpy.char.chararray.repeat.html#numpy.char.chararray.repeat "numpy.char.chararray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '[`repeat`](numpy.char.chararray.repeat.html#numpy.char.chararray.repeat "numpy.char.chararray.repeat")(repeats[, axis])
    | 重复数组的元素。'
- en: '| [`replace`](numpy.char.chararray.replace.html#numpy.char.chararray.replace
    "numpy.char.chararray.replace")(old, new[, count]) | For each element in *self*,
    return a copy of the string with all occurrences of substring *old* replaced by
    *new*. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`replace`](numpy.char.chararray.replace.html#numpy.char.chararray.replace
    "numpy.char.chararray.replace")(old, new[, count]) | 对于 *self* 中的每个元素，返回一个将所有子字符串
    *old* 替换为 *new* 的副本字符串。 |'
- en: '| [`reshape`](numpy.char.chararray.reshape.html#numpy.char.chararray.reshape
    "numpy.char.chararray.reshape")(shape[, order]) | Returns an array containing
    the same data with a new shape. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](numpy.char.chararray.reshape.html#numpy.char.chararray.reshape
    "numpy.char.chararray.reshape")(shape[, order]) | 返回包含相同数据的数组，但具有新的形状。 |'
- en: '| [`resize`](numpy.char.chararray.resize.html#numpy.char.chararray.resize "numpy.char.chararray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](numpy.char.chararray.resize.html#numpy.char.chararray.resize "numpy.char.chararray.resize")(new_shape[, refcheck])
    | 改变数组的形状和大小。 |'
- en: '| [`rfind`](numpy.char.chararray.rfind.html#numpy.char.chararray.rfind "numpy.char.chararray.rfind")(sub[, start, end])
    | For each element in *self*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind`](numpy.char.chararray.rfind.html#numpy.char.chararray.rfind "numpy.char.chararray.rfind")(sub[, start, end])
    | 对于 *self* 中的每个元素，返回字符串中找到子字符串 *sub* 的最高的索引，使得 *sub* 包含在 [*start*, *end*] 中。
    |'
- en: '| [`rindex`](numpy.char.chararray.rindex.html#numpy.char.chararray.rindex "numpy.char.chararray.rindex")(sub[, start, end])
    | Like [`rfind`](numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind"), but
    raises *ValueError* when the substring *sub* is not found. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`rindex`](numpy.char.chararray.rindex.html#numpy.char.chararray.rindex "numpy.char.chararray.rindex")(sub[, start, end])
    | 类似于 [`rfind`](numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")，但在找不到子字符串
    *sub* 时引发 *ValueError*。 |'
- en: '| [`rjust`](numpy.char.chararray.rjust.html#numpy.char.chararray.rjust "numpy.char.chararray.rjust")(width[, fillchar])
    | Return an array with the elements of *self* right-justified in a string of length
    *width*. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust`](numpy.char.chararray.rjust.html#numpy.char.chararray.rjust "numpy.char.chararray.rjust")(width[, fillchar])
    | 返回一个 *self* 中元素右对齐在长度为 *width* 的字符串中的数组。 |'
- en: '| [`rsplit`](numpy.char.chararray.rsplit.html#numpy.char.chararray.rsplit "numpy.char.chararray.rsplit")([sep, maxsplit])
    | For each element in *self*, return a list of the words in the string, using
    *sep* as the delimiter string. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit`](numpy.char.chararray.rsplit.html#numpy.char.chararray.rsplit "numpy.char.chararray.rsplit")([sep, maxsplit])
    | 对于 *self* 中的每个元素，使用 *sep* 作为分隔符字符串，返回字符串中单词的列表。 |'
- en: '| [`rstrip`](numpy.char.chararray.rstrip.html#numpy.char.chararray.rstrip "numpy.char.chararray.rstrip")([chars])
    | For each element in *self*, return a copy with the trailing characters removed.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip`](numpy.char.chararray.rstrip.html#numpy.char.chararray.rstrip "numpy.char.chararray.rstrip")([chars])
    | 对于 *self* 中的每个元素，返回删除尾部字符的副本。 |'
- en: '| [`searchsorted`](numpy.char.chararray.searchsorted.html#numpy.char.chararray.searchsorted
    "numpy.char.chararray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`searchsorted`](numpy.char.chararray.searchsorted.html#numpy.char.chararray.searchsorted
    "numpy.char.chararray.searchsorted")(v[, side, sorter]) | 查找元素应插入到 *a* 中以保持顺序的索引。
    |'
- en: '| [`setfield`](numpy.char.chararray.setfield.html#numpy.char.chararray.setfield
    "numpy.char.chararray.setfield")(val, dtype[, offset]) | Put a value into a specified
    place in a field defined by a data-type. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`setfield`](numpy.char.chararray.setfield.html#numpy.char.chararray.setfield
    "numpy.char.chararray.setfield")(val, dtype[, offset]) | 在由数据类型定义的字段的特定位置放置一个值。
    |'
- en: '| [`setflags`](numpy.char.chararray.setflags.html#numpy.char.chararray.setflags
    "numpy.char.chararray.setflags")([write, align, uic]) | Set array flags WRITEABLE,
    ALIGNED, WRITEBACKIFCOPY, respectively. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`setflags`](numpy.char.chararray.setflags.html#numpy.char.chararray.setflags
    "numpy.char.chararray.setflags")([write, align, uic]) | 分别设置数组标志 WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY。 |'
- en: '| [`sort`](numpy.char.chararray.sort.html#numpy.char.chararray.sort "numpy.char.chararray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`sort`](numpy.char.chararray.sort.html#numpy.char.chararray.sort "numpy.char.chararray.sort")([axis, kind, order])
    | 原地对数组进行排序。 |'
- en: '| [`split`](numpy.char.chararray.split.html#numpy.char.chararray.split "numpy.char.chararray.split")([sep, maxsplit])
    | For each element in *self*, return a list of the words in the string, using
    *sep* as the delimiter string. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](numpy.char.chararray.split.html#numpy.char.chararray.split "numpy.char.chararray.split")([sep, maxsplit])
    | 对于 *self* 中的每个元素，使用 *sep* 作为分隔符字符串，返回字符串中单词的列表��� |'
- en: '| [`splitlines`](numpy.char.chararray.splitlines.html#numpy.char.chararray.splitlines
    "numpy.char.chararray.splitlines")([keepends]) | For each element in *self*, return
    a list of the lines in the element, breaking at line boundaries. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`splitlines`](numpy.char.chararray.splitlines.html#numpy.char.chararray.splitlines
    "numpy.char.chararray.splitlines")([keepends]) | 对*self*中的每个元素，返回在元素中的行列表，按行边界分割。
    |'
- en: '| [`squeeze`](numpy.char.chararray.squeeze.html#numpy.char.chararray.squeeze
    "numpy.char.chararray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`squeeze`](numpy.char.chararray.squeeze.html#numpy.char.chararray.squeeze
    "numpy.char.chararray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`startswith`](numpy.char.chararray.startswith.html#numpy.char.chararray.startswith
    "numpy.char.chararray.startswith")(prefix[, start, end]) | Returns a boolean array
    which is *True* where the string element in *self* starts with *prefix*, otherwise
    *False*. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`startswith`](numpy.char.chararray.startswith.html#numpy.char.chararray.startswith
    "numpy.char.chararray.startswith")(prefix[, start, end]) | 返回一个布尔数组，其中*True*表示*self*中的字符串元素以*prefix*开头，否则为*False*。
    |'
- en: '| [`strip`](numpy.char.chararray.strip.html#numpy.char.chararray.strip "numpy.char.chararray.strip")([chars])
    | For each element in *self*, return a copy with the leading and trailing characters
    removed. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`strip`](numpy.char.chararray.strip.html#numpy.char.chararray.strip "numpy.char.chararray.strip")([chars])
    | 对*self*中的每个元素，返回一个删除了前导和尾随字符的副本。 |'
- en: '| [`swapaxes`](numpy.char.chararray.swapaxes.html#numpy.char.chararray.swapaxes
    "numpy.char.chararray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](numpy.char.chararray.swapaxes.html#numpy.char.chararray.swapaxes
    "numpy.char.chararray.swapaxes")(axis1, axis2) | 返回轴*axis1*和*axis2*交换的数组视图。 |'
- en: '| [`swapcase`](numpy.char.chararray.swapcase.html#numpy.char.chararray.swapcase
    "numpy.char.chararray.swapcase")() | For each element in *self*, return a copy
    of the string with uppercase characters converted to lowercase and vice versa.
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase`](numpy.char.chararray.swapcase.html#numpy.char.chararray.swapcase
    "numpy.char.chararray.swapcase")() | 对*self*中的每个元素，返回一个将大写字符转换为小写字符，反之亦然的字符串副本。
    |'
- en: '| [`take`](numpy.char.chararray.take.html#numpy.char.chararray.take "numpy.char.chararray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`take`](numpy.char.chararray.take.html#numpy.char.chararray.take "numpy.char.chararray.take")(indices[, axis, out, mode])
    | 返回由给定索引处的*a*元素组成的数组。 |'
- en: '| [`title`](numpy.char.chararray.title.html#numpy.char.chararray.title "numpy.char.chararray.title")()
    | For each element in *self*, return a titlecased version of the string: words
    start with uppercase characters, all remaining cased characters are lowercase.
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`title`](numpy.char.chararray.title.html#numpy.char.chararray.title "numpy.char.chararray.title")()
    | 对*self*中的每个元素，返回一个单词首字母大写的版本：单词以大写字符开头，所有其余的字符都是小写的。 |'
- en: '| [`tofile`](numpy.char.chararray.tofile.html#numpy.char.chararray.tofile "numpy.char.chararray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`tofile`](numpy.char.chararray.tofile.html#numpy.char.chararray.tofile "numpy.char.chararray.tofile")(fid[, sep, format])
    | 将数组写入文件作为文本或二进制（默认）。 |'
- en: '| [`tolist`](numpy.char.chararray.tolist.html#numpy.char.chararray.tolist "numpy.char.chararray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`tolist`](numpy.char.chararray.tolist.html#numpy.char.chararray.tolist "numpy.char.chararray.tolist")()
    | 将数组作为一个`a.ndim`级别深的嵌套Python标量列表返回。 |'
- en: '| [`tostring`](numpy.char.chararray.tostring.html#numpy.char.chararray.tostring
    "numpy.char.chararray.tostring")([order]) | A compatibility alias for [`tobytes`](numpy.char.chararray.tobytes.html#numpy.char.chararray.tobytes
    "numpy.char.chararray.tobytes"), with exactly the same behavior. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`tostring`](numpy.char.chararray.tostring.html#numpy.char.chararray.tostring
    "numpy.char.chararray.tostring")([order]) | [`tobytes`](numpy.char.chararray.tobytes.html#numpy.char.chararray.tobytes
    "numpy.char.chararray.tobytes")的兼容别名，行为完全相同。 |'
- en: '| [`translate`](numpy.char.chararray.translate.html#numpy.char.chararray.translate
    "numpy.char.chararray.translate")(table[, deletechars]) | For each element in
    *self*, return a copy of the string where all characters occurring in the optional
    argument *deletechars* are removed, and the remaining characters have been mapped
    through the given translation table. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`translate`](numpy.char.chararray.translate.html#numpy.char.chararray.translate
    "numpy.char.chararray.translate")(table[, deletechars]) | 对*self*中的每个元素，返回一个删除了可选参数*deletechars*中出现的所有字符，并且剩余字符经过给定转换表映射的字符串副本。
    |'
- en: '| [`transpose`](numpy.char.chararray.transpose.html#numpy.char.chararray.transpose
    "numpy.char.chararray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](numpy.char.chararray.transpose.html#numpy.char.chararray.transpose
    "numpy.char.chararray.transpose")(*axes) | 返回一个具有轴转置的数组视图。 |'
- en: '| [`upper`](numpy.char.chararray.upper.html#numpy.char.chararray.upper "numpy.char.chararray.upper")()
    | Return an array with the elements of *self* converted to uppercase. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`upper`](numpy.char.chararray.upper.html#numpy.char.chararray.upper "numpy.char.chararray.upper")()
    | 返回一个将*self*中的元素转换为大写的数组。 |'
- en: '| [`view`](numpy.char.chararray.view.html#numpy.char.chararray.view "numpy.char.chararray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`view`](numpy.char.chararray.view.html#numpy.char.chararray.view "numpy.char.chararray.view")([dtype][, type])
    | 具有相同数据的数组的新视图。 |'
- en: '| [`zfill`](numpy.char.chararray.zfill.html#numpy.char.chararray.zfill "numpy.char.chararray.zfill")(width)
    | Return the numeric string left-filled with zeros in a string of length *width*.
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill`](numpy.char.chararray.zfill.html#numpy.char.chararray.zfill "numpy.char.chararray.zfill")(width)
    | 返回长度为*width*的数字字符串左侧填充零的字符串。 |'
