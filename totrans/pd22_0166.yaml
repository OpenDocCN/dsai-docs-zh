- en: pandas.Series.to_numpy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.Series.to_numpy.html](https://pandas.pydata.org/docs/reference/api/pandas.Series.to_numpy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A NumPy ndarray representing the values in this Series or Index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str or numpy.dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The dtype to pass to `numpy.asarray()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to ensure that the returned value is not a view on another array. Note
    that `copy=False` does not *ensure* that `to_numpy()` is no-copy. Rather, `copy=True`
    ensure that a copy is made, even if not strictly necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**na_value**Any, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value to use for missing values. The default value depends on dtype and
    the type of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keywords passed through to the `to_numpy` method of the underlying
    array (for extension arrays).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: numpy.ndarray
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.array`](pandas.Series.array.html#pandas.Series.array "pandas.Series.array")'
  prefs: []
  type: TYPE_NORMAL
- en: Get the actual data stored within.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.array`'
  prefs: []
  type: TYPE_NORMAL
- en: Get the actual data stored within.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_numpy`](pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar method for DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The returned array will be the same up to equality (values equal in self will
    be equal in the returned array; likewise for values that are not equal). When
    self contains an ExtensionArray, the dtype may be different. For example, for
    a category-dtype Series, `to_numpy()` will return a NumPy array and the categorical
    dtype will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: For NumPy dtypes, this will be a reference to the actual data stored in this
    Series or Index (assuming `copy=False`). Modifying the result in place will modify
    the data stored in the Series or Index (not that we recommend doing that).
  prefs: []
  type: TYPE_NORMAL
- en: For extension types, `to_numpy()` *may* require copying data and coercing the
    result to a NumPy type (possibly object), which may be expensive. When you need
    a no-copy reference to the underlying data, [`Series.array`](pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: This table lays out the different dtypes and default return types of `to_numpy()`
    for various dtypes within pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '| dtype | array type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| category[T] | ndarray[T] (same dtype as input) |'
  prefs: []
  type: TYPE_TB
- en: '| period | ndarray[object] (Periods) |'
  prefs: []
  type: TYPE_TB
- en: '| interval | ndarray[object] (Intervals) |'
  prefs: []
  type: TYPE_TB
- en: '| IntegerNA | ndarray[object] |'
  prefs: []
  type: TYPE_TB
- en: '| datetime64[ns] | datetime64[ns] |'
  prefs: []
  type: TYPE_TB
- en: '| datetime64[ns, tz] | ndarray[object] (Timestamps) |'
  prefs: []
  type: TYPE_TB
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Specify the dtype to control how datetime-aware data is represented. Use `dtype=object`
    to return an ndarray of pandas [`Timestamp`](pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects, each with the correct `tz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Or `dtype='datetime64[ns]'` to return an ndarray of native datetime64 values.
    The values are converted to UTC and the timezone info is dropped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
