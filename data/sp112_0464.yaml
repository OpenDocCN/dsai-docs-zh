- en: scipy.optimize.linprog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.linprog
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Linear programming: minimize a linear objective function subject to linear
    equality and inequality constraints.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 线性规划：最小化线性目标函数，受线性等式和不等式约束限制。
- en: 'Linear programming solves problems of the following form:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 线性规划解决如下形式的问题：
- en: \[\begin{split}\min_x \ & c^T x \\ \mbox{such that} \ & A_{ub} x \leq b_{ub},\\
    & A_{eq} x = b_{eq},\\ & l \leq x \leq u ,\end{split}\]
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\min_x \ & c^T x \\ \mbox{使得} \ & A_{ub} x \leq b_{ub},\\ & A_{eq}
    x = b_{eq},\\ & l \leq x \leq u ,\end{split}\]
- en: where \(x\) is a vector of decision variables; \(c\), \(b_{ub}\), \(b_{eq}\),
    \(l\), and \(u\) are vectors; and \(A_{ub}\) and \(A_{eq}\) are matrices.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(x\) 是决策变量向量；\(c\), \(b_{ub}\), \(b_{eq}\), \(l\), 和 \(u\) 是向量；\(A_{ub}\)
    和 \(A_{eq}\) 是矩阵。
- en: 'Alternatively, that’s:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者说：
- en: minimize
  id: totrans-8
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: such that
  id: totrans-15
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使得
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that by default `lb = 0` and `ub = None`. Other bounds can be specified
    with `bounds`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，默认情况下 `lb = 0` 和 `ub = None`。可以使用 `bounds` 指定其他边界。
- en: 'Parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**c**1-D array'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**c** 1-D数组'
- en: The coefficients of the linear objective function to be minimized.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要最小化的线性目标函数的系数。
- en: '**A_ub**2-D array, optional'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**A_ub** 2-D数组，可选'
- en: The inequality constraint matrix. Each row of `A_ub` specifies the coefficients
    of a linear inequality constraint on `x`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不等约束矩阵。`A_ub` 的每一行指定 `x` 的线性不等式约束的系数。
- en: '**b_ub**1-D array, optional'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**b_ub** 1-D数组，可选'
- en: The inequality constraint vector. Each element represents an upper bound on
    the corresponding value of `A_ub @ x`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不等约束向量。每个元素表示对应的`A_ub @ x`的上限。
- en: '**A_eq**2-D array, optional'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**A_eq** 2-D数组，可选'
- en: The equality constraint matrix. Each row of `A_eq` specifies the coefficients
    of a linear equality constraint on `x`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 等式约束矩阵。`A_eq` 的每一行指定 `x` 的线性等式约束的系数。
- en: '**b_eq**1-D array, optional'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**b_eq** 1-D数组，可选'
- en: The equality constraint vector. Each element of `A_eq @ x` must equal the corresponding
    element of `b_eq`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 等式约束向量。`A_eq @ x` 的每个元素必须等于 `b_eq` 的对应元素。
- en: '**bounds**sequence, optional'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**bounds** 序列，可选'
- en: A sequence of `(min, max)` pairs for each element in `x`, defining the minimum
    and maximum values of that decision variable. If a single tuple `(min, max)` is
    provided, then `min` and `max` will serve as bounds for all decision variables.
    Use `None` to indicate that there is no bound. For instance, the default bound
    `(0, None)` means that all decision variables are non-negative, and the pair `(None,
    None)` means no bounds at all, i.e. all variables are allowed to be any real.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `x` 中每个元素的 `(min, max)` 对序列，定义决策变量的最小和最大值。如果提供单个元组 `(min, max)`，则 `min` 和
    `max` 将作为所有决策变量的边界。使用 `None` 表示无边界。例如，默认边界 `(0, None)` 表示所有决策变量非负，而对 `(None, None)`
    表示无任何边界，即所有变量可以是任意实数。
- en: '**method**str, optional'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**method** 字符串，可选'
- en: The algorithm used to solve the standard form problem. [‘highs’](../optimize.linprog-highs.html#optimize-linprog-highs)
    (default), [‘highs-ds’](../optimize.linprog-highs-ds.html#optimize-linprog-highs-ds),
    [‘highs-ipm’](../optimize.linprog-highs-ipm.html#optimize-linprog-highs-ipm),
    [‘interior-point’](../optimize.linprog-interior-point.html#optimize-linprog-interior-point)
    (legacy), [‘revised simplex’](../optimize.linprog-revised_simplex.html#optimize-linprog-revised-simplex)
    (legacy), and [‘simplex’](../optimize.linprog-simplex.html#optimize-linprog-simplex)
    (legacy) are supported. The legacy methods are deprecated and will be removed
    in SciPy 1.11.0.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解决标准形式问题的算法。支持 [‘highs’](../optimize.linprog-highs.html#optimize-linprog-highs)（默认），[‘highs-ds’](../optimize.linprog-highs-ds.html#optimize-linprog-highs-ds)，[‘highs-ipm’](../optimize.linprog-highs-ipm.html#optimize-linprog-highs-ipm)，[‘interior-point’](../optimize.linprog-interior-point.html#optimize-linprog-interior-point)（遗留），[‘revised
    simplex’](../optimize.linprog-revised_simplex.html#optimize-linprog-revised-simplex)（遗留）和
    [‘simplex’](../optimize.linprog-simplex.html#optimize-linprog-simplex)（遗留）。遗留方法已弃用，将在
    SciPy 1.11.0 中移除。
- en: '**callback**callable, optional'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**callback** 可调用对象，可选'
- en: 'If a callback function is provided, it will be called at least once per iteration
    of the algorithm. The callback function must accept a single [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") consisting of the following fields:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了回调函数，则算法的每次迭代至少调用一次。回调函数必须接受单一的[`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult")，包含以下字段：
- en: x1-D array
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: x1-D 数组
- en: The current solution vector.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当前解向量。
- en: funfloat
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: funfloat
- en: The current value of the objective function `c @ x`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数 `c @ x` 的当前值。
- en: successbool
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: successbool
- en: '`True` when the algorithm has completed successfully.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`True` when the algorithm has completed successfully.'
- en: slack1-D array
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: slack1-D 数组
- en: The (nominally positive) values of the slack, `b_ub - A_ub @ x`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 松弛变量的（名义上的正）值，`b_ub - A_ub @ x`。
- en: con1-D array
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: con1-D 数组
- en: The (nominally zero) residuals of the equality constraints, `b_eq - A_eq @ x`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 等式约束的（名义上的零）残差，`b_eq - A_eq @ x`。
- en: phaseint
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: phaseint
- en: The phase of the algorithm being executed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正在执行的算法阶段。
- en: statusint
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: statusint
- en: An integer representing the status of the algorithm.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 表示算法状态的整数。
- en: '`0` : Optimization proceeding nominally.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`0` : 优化正常进行。'
- en: '`1` : Iteration limit reached.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`1` : 达到迭代限制。'
- en: '`2` : Problem appears to be infeasible.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`2` : Problem appears to be infeasible.'
- en: '`3` : Problem appears to be unbounded.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`3` : 问题似乎无界。'
- en: '`4` : Numerical difficulties encountered.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`4` : 遇到数值困难。'
- en: nitint
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: nitint
- en: The current iteration number.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当前迭代次数。
- en: messagestr
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: messagestr
- en: A string descriptor of the algorithm status.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 描述算法状态的字符串。
- en: Callback functions are not currently supported by the HiGHS methods.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 HiGHS 方法不支持回调函数。
- en: '**options**dict, optional'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**options**dict, optional'
- en: 'A dictionary of solver options. All methods accept the following options:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器选项的字典。所有方法都接受以下选项：
- en: maxiterint
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: maxiterint
- en: 'Maximum number of iterations to perform. Default: see method-specific documentation.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的最大迭代次数。默认值：请参阅特定方法的文档。
- en: dispbool
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: dispbool
- en: 'Set to `True` to print convergence messages. Default: `False`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 `True` 打印收敛消息。默认值：`False`。
- en: presolvebool
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: presolvebool
- en: 'Set to `False` to disable automatic presolve. Default: `True`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 `False` 禁用自动预处理。默认值：`True`。
- en: 'All methods except the HiGHS solvers also accept:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除 HiGHS 求解器外，所有方法都接受：
- en: tolfloat
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: tolfloat
- en: A tolerance which determines when a residual is “close enough” to zero to be
    considered exactly zero.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 决定残差何时“足够接近”零以被视为精确零的公差。
- en: autoscalebool
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: autoscalebool
- en: 'Set to `True` to automatically perform equilibration. Consider using this option
    if the numerical values in the constraints are separated by several orders of
    magnitude. Default: `False`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 `True` 自动执行均衡化。如果约束中的数值在数量级上相隔甚远，则考虑使用此选项。默认值：`False`。
- en: rrbool
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: rrbool
- en: 'Set to `False` to disable automatic redundancy removal. Default: `True`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 `False` 禁用自动冗余移除。默认值：`True`。
- en: rr_methodstring
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: rr_methodstring
- en: 'Method used to identify and remove redundant rows from the equality constraint
    matrix after presolve. For problems with dense input, the available methods for
    redundancy removal are:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在预处理后从等式约束矩阵中识别和删除多余行的方法。对于输入稠密的问题，可用的冗余移除方法有：
- en: '“SVD”:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '“SVD”:'
- en: Repeatedly performs singular value decomposition on the matrix, detecting redundant
    rows based on nonzeros in the left singular vectors that correspond with zero
    singular values. May be fast when the matrix is nearly full rank.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 反复对矩阵执行奇异值分解，基于左奇异向量中的非零元素检测冗余行，对于接近完全秩的矩阵可能很快。
- en: '“pivot”:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '“pivot”:'
- en: Uses the algorithm presented in [[5]](#ree0cad483161-5) to identify redundant
    rows.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[[5]](#ree0cad483161-5)中介绍的算法来识别多余的行。
- en: '“ID”:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '“ID”:'
- en: Uses a randomized interpolative decomposition. Identifies columns of the matrix
    transpose not used in a full-rank interpolative decomposition of the matrix.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机插值分解。识别矩阵转置的未在完全秩插值分解中使用的列。
- en: 'None:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'None:'
- en: Uses “svd” if the matrix is nearly full rank, that is, the difference between
    the matrix rank and the number of rows is less than five. If not, uses “pivot”.
    The behavior of this default is subject to change without prior notice.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果矩阵接近满秩，即矩阵秩与行数之差小于五，则使用“svd”。否则使用“pivot”。此默认行为可能会在未经通知的情况下更改。
- en: 'Default: None. For problems with sparse input, this option is ignored, and
    the pivot-based algorithm presented in [[5]](#ree0cad483161-5) is used.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值：无。对于输入稀疏的问题，此选项将被忽略，并使用基于“pivot”的算法，该算法见[[5]](#ree0cad483161-5)。
- en: For method-specific options, see [`show_options('linprog')`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options").
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定方法的选项，请参见[`show_options('linprog')`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")。
- en: '**x0**1-D array, optional'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**1-D 数组，可选'
- en: Guess values of the decision variables, which will be refined by the optimization
    algorithm. This argument is currently used only by the ‘revised simplex’ method,
    and can only be used if *x0* represents a basic feasible solution.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 决策变量的猜测值，将由优化算法细化。当前仅由‘revised simplex’方法使用，并且仅当*x0*表示基本可行解时才能使用。
- en: '**integrality**1-D array or int, optional'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**integrality**1-D 数组或整数，可选'
- en: Indicates the type of integrality constraint on each decision variable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 指示每个决策变量整数约束类型。
- en: '`0` : Continuous variable; no integrality constraint.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`0`：连续变量；没有整数约束。'
- en: '`1` : Integer variable; decision variable must be an integer within *bounds*.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`：整数变量；决策变量必须在*bounds*内为整数。'
- en: '`2` : Semi-continuous variable; decision variable must be within *bounds* or
    take value `0`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`2`：半连续变量；决策变量必须在*bounds*内或取值`0`。'
- en: '`3` : Semi-integer variable; decision variable must be an integer within *bounds*
    or take value `0`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`3`：半整数变量；决策变量必须在*bounds*内为整数或取值`0`。'
- en: By default, all variables are continuous.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有变量均为连续的。
- en: For mixed integrality constraints, supply an array of shape *c.shape*. To infer
    a constraint on each decision variable from shorter inputs, the argument will
    be broadcasted to *c.shape* using *np.broadcast_to*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于混合整数约束，请提供一个形状为*c.shape*的数组。为了从较短的输入推断出每个决策变量的约束条件，参数将使用*np.broadcast_to*广播到*c.shape*。
- en: This argument is currently used only by the `'highs'` method and ignored otherwise.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当前仅由‘highs’方法使用，否则忽略。
- en: 'Returns:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**res**OptimizeResult'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**res**OptimizeResult'
- en: 'A [`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") consisting of the fields below. Note that the
    return types of the fields may depend on whether the optimization was successful,
    therefore it is recommended to check *OptimizeResult.status* before relying on
    the other fields:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`scipy.optimize.OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult")，包含以下字段。请注意，字段的返回类型可能取决于优化是否成功，因此建议在依赖其他字段之前检查*OptimizeResult.status*：
- en: x1-D array
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: x1-D 数组
- en: The values of the decision variables that minimizes the objective function while
    satisfying the constraints.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使目标函数最小化同时满足约束条件的决策变量值。
- en: funfloat
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: funfloat
- en: The optimal value of the objective function `c @ x`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数的最优值`c @ x`。
- en: slack1-D array
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: slack1-D 数组
- en: The (nominally positive) values of the slack variables, `b_ub - A_ub @ x`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 松弛变量（通常为正值），`b_ub - A_ub @ x`。
- en: con1-D array
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: con1-D 数组
- en: The (nominally zero) residuals of the equality constraints, `b_eq - A_eq @ x`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 等式约束的（通常为零的）残差，`b_eq - A_eq @ x`。
- en: successbool
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: successbool
- en: '`True` when the algorithm succeeds in finding an optimal solution.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 找到最优解时为`True`。
- en: statusint
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 状态整数
- en: An integer representing the exit status of the algorithm.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 表示算法退出状态的整数。
- en: '`0` : Optimization terminated successfully.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`0`：优化成功终止。'
- en: '`1` : Iteration limit reached.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`：达到迭代限制。'
- en: '`2` : Problem appears to be infeasible.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`2`：问题似乎无解。'
- en: '`3` : Problem appears to be unbounded.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`3`：问题似乎无界。'
- en: '`4` : Numerical difficulties encountered.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`4`：遇到数值困难。'
- en: nitint
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: nitint
- en: The total number of iterations performed in all phases.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所有阶段中执行的总迭代次数。
- en: messagestr
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: messagestr
- en: A string descriptor of the exit status of the algorithm.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 表示算法退出状态的字符串描述。
- en: See also
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")'
- en: Additional options accepted by the solvers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器接受的附加选项。
- en: Notes
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section describes the available solvers that can be selected by the ‘method’
    parameter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述可以通过‘method’参数选择的可用求解器。
- en: '*‘highs-ds’* and *‘highs-ipm’* are interfaces to the HiGHS simplex and interior-point
    method solvers [[13]](#ree0cad483161-13), respectively. *‘highs’* (default) chooses
    between the two automatically. These are the fastest linear programming solvers
    in SciPy, especially for large, sparse problems; which of these two is faster
    is problem-dependent. The other solvers (*‘interior-point’*, *‘revised simplex’*,
    and *‘simplex’*) are legacy methods and will be removed in SciPy 1.11.0.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘highs-ds’* 和 *‘highs-ipm’* 是 HiGHS 单纯形和内点法求解器的接口[[13]](#ree0cad483161-13)，*‘highs’*（默认）会自动选择两者之一。这些是
    SciPy 中最快的线性规划求解器，特别适用于大型稀疏问题；哪个更快取决于问题本身。其他求解器（*‘interior-point’*、*‘revised simplex’*
    和 *‘simplex’*）是遗留方法，将在 SciPy 1.11.0 中移除。'
- en: Method *highs-ds* is a wrapper of the C++ high performance dual revised simplex
    implementation (HSOL) [[13]](#ree0cad483161-13), [[14]](#ree0cad483161-14). Method
    *highs-ipm* is a wrapper of a C++ implementation of an **i**nterior-**p**oint
    **m**ethod [[13]](#ree0cad483161-13); it features a crossover routine, so it is
    as accurate as a simplex solver. Method *highs* chooses between the two automatically.
    For new code involving [`linprog`](#scipy.optimize.linprog "scipy.optimize.linprog"),
    we recommend explicitly choosing one of these three method values.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*highs-ds* 方法是 C++ 高性能双修订单纯形实现（HSOL）的包装器[[13]](#ree0cad483161-13)，[[14]](#ree0cad483161-14)。*highs-ipm*
    方法是 C++ 内点法实现的包装器[[13]](#ree0cad483161-13)，它具有交叉路由，因此与单纯形求解器一样精确。*highs* 方法会自动选择两者中的一种。对于涉及
    [`linprog`](#scipy.optimize.linprog "scipy.optimize.linprog") 的新代码，建议明确选择这三种方法值之一。'
- en: New in version 1.6.0.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.6.0 新增。
- en: Method *interior-point* uses the primal-dual path following algorithm as outlined
    in [[4]](#ree0cad483161-4). This algorithm supports sparse constraint matrices
    and is typically faster than the simplex methods, especially for large, sparse
    problems. Note, however, that the solution returned may be slightly less accurate
    than those of the simplex methods and will not, in general, correspond with a
    vertex of the polytope defined by the constraints.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*interior-point* 方法使用在[[4]](#ree0cad483161-4)中概述的原始-对偶路径跟踪算法。此算法支持稀疏约束矩阵，对于大型稀疏问题特别快速。然而，返回的解可能比单纯形方法稍微不准确，并且通常不与约束定义的多面体顶点对应。'
- en: New in version 1.0.0.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.0.0 新增。
- en: Method *revised simplex* uses the revised simplex method as described in [[9]](#ree0cad483161-9),
    except that a factorization [[11]](#ree0cad483161-11) of the basis matrix, rather
    than its inverse, is efficiently maintained and used to solve the linear systems
    at each iteration of the algorithm.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '*修订单纯形法* 方法使用修订的单纯形法，如[[9]](#ree0cad483161-9)中所述，但在算法的每次迭代中，使用基础矩阵的因子分解[[11]](#ree0cad483161-11)来有效地维护和解决线性系统。'
- en: New in version 1.3.0.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3.0 新增。
- en: Method *simplex* uses a traditional, full-tableau implementation of Dantzig’s
    simplex algorithm [[1]](#ree0cad483161-1), [[2]](#ree0cad483161-2) (*not* the
    Nelder-Mead simplex). This algorithm is included for backwards compatibility and
    educational purposes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*simplex* 方法使用 Dantzig 单纯形算法的传统全表实现[[1]](#ree0cad483161-1)，[[2]](#ree0cad483161-2)（*不*是
    Nelder-Mead 单纯形）。此算法包含以保持向后兼容性和教育目的。'
- en: New in version 0.15.0.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 0.15.0 新增。
- en: 'Before applying *interior-point*, *revised simplex*, or *simplex*, a presolve
    procedure based on [[8]](#ree0cad483161-8) attempts to identify trivial infeasibilities,
    trivial unboundedness, and potential problem simplifications. Specifically, it
    checks for:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用 *interior-point*、*revised simplex* 或 *simplex* 之前，基于[[8]](#ree0cad483161-8)的预处理过程尝试识别平凡的不可行性、平凡的无界性和潜在的问题简化。具体来说，它检查以下情况：
- en: rows of zeros in `A_eq` or `A_ub`, representing trivial constraints;
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A_eq` 或 `A_ub` 中的零行，表示平凡约束；'
- en: columns of zeros in `A_eq` *and* `A_ub`, representing unconstrained variables;
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A_eq` 和 `A_ub` 中的零列，表示无约束变量；'
- en: column singletons in `A_eq`, representing fixed variables; and
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列单体在 `A_eq` 中，表示固定变量；
- en: column singletons in `A_ub`, representing simple bounds.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列单体在 `A_ub` 中，表示简单边界。
- en: If presolve reveals that the problem is unbounded (e.g. an unconstrained and
    unbounded variable has negative cost) or infeasible (e.g., a row of zeros in `A_eq`
    corresponds with a nonzero in `b_eq`), the solver terminates with the appropriate
    status code. Note that presolve terminates as soon as any sign of unboundedness
    is detected; consequently, a problem may be reported as unbounded when in reality
    the problem is infeasible (but infeasibility has not been detected yet). Therefore,
    if it is important to know whether the problem is actually infeasible, solve the
    problem again with option `presolve=False`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果预处理显示问题无界（例如，一个无约束和无界变量具有负成本）或不可行（例如，`A_eq`中的零行与`b_eq`中的非零对应），求解器将以适当的状态代码终止。请注意，预处理一旦检测到任何无界性的迹象就会终止；因此，当实际上问题是不可行时（但尚未检测到不可行性），可能会报告问题是无界的。因此，如果重要的是知道问题实际上是否不可行，请使用选项`presolve=False`重新解决问题。
- en: If neither infeasibility nor unboundedness are detected in a single pass of
    the presolve, bounds are tightened where possible and fixed variables are removed
    from the problem. Then, linearly dependent rows of the `A_eq` matrix are removed,
    (unless they represent an infeasibility) to avoid numerical difficulties in the
    primary solve routine. Note that rows that are nearly linearly dependent (within
    a prescribed tolerance) may also be removed, which can change the optimal solution
    in rare cases. If this is a concern, eliminate redundancy from your problem formulation
    and run with option `rr=False` or `presolve=False`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在预处理的单次通行中既未检测到不可行性也未检测到无界性，则在可能的情况下收紧界限并从问题中删除固定变量。然后，删除`A_eq`矩阵的线性相关行（除非它们代表不可行性），以避免主要求解例程中的数值困难。请注意，几乎线性相关的行（在规定的容差内）也可以被删除，这在极少数情况下可能会改变最优解。如果这是一个问题，请从您的问题表达中消除冗余并使用选项`rr=False`或`presolve=False`运行。
- en: 'Several potential improvements can be made here: additional presolve checks
    outlined in [[8]](#ree0cad483161-8) should be implemented, the presolve routine
    should be run multiple times (until no further simplifications can be made), and
    more of the efficiency improvements from [[5]](#ree0cad483161-5) should be implemented
    in the redundancy removal routines.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可以进行几个潜在的改进：应该实现在[[8]](#ree0cad483161-8)中概述的额外预处理检查，应该多次运行预处理例程（直到无法进一步简化为止），并且应该在冗余删除程序中实现[[5]](#ree0cad483161-5)的更多效率改进。
- en: After presolve, the problem is transformed to standard form by converting the
    (tightened) simple bounds to upper bound constraints, introducing non-negative
    slack variables for inequality constraints, and expressing unbounded variables
    as the difference between two non-negative variables. Optionally, the problem
    is automatically scaled via equilibration [[12]](#ree0cad483161-12). The selected
    algorithm solves the standard form problem, and a postprocessing routine converts
    the result to a solution to the original problem.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 经过预处理后，通过将（加紧的）简单界限转换为上界约束，为不等式约束引入非负松弛变量，并将无界变量表示为两个非负变量的差异，问题转换为标准形式。可选地，问题通过均衡转换自动进行缩放[[12]](#ree0cad483161-12)。所选算法解决标准形式问题，并通过后处理程序将结果转换为原问题的解决方案。
- en: References
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id10)]'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id10)]'
- en: Dantzig, George B., Linear programming and extensions. Rand Corporation Research
    Study Princeton Univ. Press, Princeton, NJ, 1963
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Dantzig, George B., 线性规划及其扩展。兰德公司研究学习普林斯顿大学出版社，普林斯顿，新泽西州，1963年。
- en: '[[2](#id11)]'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id11)]'
- en: Hillier, S.H. and Lieberman, G.J. (1995), “Introduction to Mathematical Programming”,
    McGraw-Hill, Chapter 4.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Hillier, S.H. 和 Lieberman, G.J. (1995), “数学规划导论”, 麦格劳-希尔, 第4章。
- en: '[3]'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[3]'
- en: 'Bland, Robert G. New finite pivoting rules for the simplex method. Mathematics
    of Operations Research (2), 1977: pp. 103-107.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Bland, Robert G. 简单法的新有限枢轴规则。运筹学数学（2），1977年：103-107页。
- en: '[[4](#id7)]'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[[4](#id7)]'
- en: 'Andersen, Erling D., and Knud D. Andersen. “The MOSEK interior point optimizer
    for linear programming: an implementation of the homogeneous algorithm.” High
    performance optimization. Springer US, 2000\. 197-232.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Andersen, Erling D. 和 Knud D. Andersen. “MOSEK内点优化器用于线性规划：同质算法的实现”。高性能优化。斯普林格美国出版，2000年。197-232页。
- en: '[5] ([1](#id1),[2](#id2),[3](#id14))'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] ([1](#id1),[2](#id2),[3](#id14))'
- en: 'Andersen, Erling D. “Finding all linearly dependent rows in large-scale linear
    programming.” Optimization Methods and Software 6.3 (1995): 219-227.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Andersen, Erling D. “在大规模线性规划中找到所有线性相关的行。” 优化方法和软件 6.3（1995）：219-227页。
- en: '[6]'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[6]'
- en: Freund, Robert M. “Primal-Dual Interior-Point Methods for Linear Programming
    based on Newton’s Method.” Unpublished Course Notes, March 2004\. Available 2/25/2017
    at [https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf](https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 弗洛伊德，罗伯特·M。“基于牛顿方法的线性规划原始-对偶内点方法。”未发表的课程笔记，2004年3月。可在2017年2月25日访问 [https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf](https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf)
- en: '[7]'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[7]'
- en: Fourer, Robert. “Solving Linear Programs by Interior-Point Methods.” Unpublished
    Course Notes, August 26, 2005\. Available 2/25/2017 at [http://www.4er.org/CourseNotes/Book%20B/B-III.pdf](http://www.4er.org/CourseNotes/Book%20B/B-III.pdf)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 福勒，罗伯特。“通过内点方法解线性规划问题。”未发表的课程笔记，2005年8月26日。可在2017年2月25日访问 [http://www.4er.org/CourseNotes/Book%20B/B-III.pdf](http://www.4er.org/CourseNotes/Book%20B/B-III.pdf)
- en: '[8] ([1](#id12),[2](#id13))'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[8] ([1](#id12),[2](#id13))'
- en: 'Andersen, Erling D., and Knud D. Andersen. “Presolving in linear programming.”
    Mathematical Programming 71.2 (1995): 221-245.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '安德森，埃尔林·D.，和克努德·D. 安德森。“线性规划中的预处理。”数学规划 71.2 (1995): 221-245。'
- en: '[[9](#id8)]'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[[9](#id8)]'
- en: 'Bertsimas, Dimitris, and J. Tsitsiklis. “Introduction to linear programming.”
    Athena Scientific 1 (1997): 997.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '贝茨马斯，迪米特里斯，和J. Tsitsiklis。“线性规划导论。”Athena Scientific 1 (1997): 997。'
- en: '[10]'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[10]'
- en: Andersen, Erling D., et al. Implementation of interior point methods for large
    scale linear programming. HEC/Universite de Geneve, 1996.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 安德森，埃尔林·D.，等人。大规模线性规划内点方法的实现。HEC/日内瓦大学，1996年。
- en: '[[11](#id9)]'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[[11](#id9)]'
- en: 'Bartels, Richard H. “A stabilization of the simplex method.” Journal in Numerische
    Mathematik 16.5 (1971): 414-434.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '巴特尔斯，理查德·H。“单纯形方法的稳定化。”Journal in Numerische Mathematik 16.5 (1971): 414-434。'
- en: '[[12](#id15)]'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[[12](#id15)]'
- en: 'Tomlin, J. A. “On scaling linear programming problems.” Mathematical Programming
    Study 4 (1975): 146-166.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '汤姆林，J. A.。“关于缩放线性规划问题。”数学规划研究 4 (1975): 146-166。'
- en: '[13] ([1](#id3),[2](#id4),[3](#id6))'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[13] ([1](#id3),[2](#id4),[3](#id6))'
- en: Huangfu, Q., Galabova, I., Feldmeier, M., and Hall, J. A. J. “HiGHS - high performance
    software for linear optimization.” [https://highs.dev/](https://highs.dev/)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 黄甫，秦，加拉博娃，伊娃，费尔德迈尔，马克，和霍尔，J. A. J.。“HiGHS - 用于线性优化的高性能软件。”[https://highs.dev/](https://highs.dev/)
- en: '[[14](#id5)]'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[[14](#id5)]'
- en: 'Huangfu, Q. and Hall, J. A. J. “Parallelizing the dual revised simplex method.”
    Mathematical Programming Computation, 10 (1), 119-142, 2018\. DOI: 10.1007/s12532-017-0130-5'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '黄甫，秦，和霍尔，J. A. J.。“对偶修订单纯形方法的并行化。”数学规划计算，10 (1)，119-142，2018年。DOI: 10.1007/s12532-017-0130-5'
- en: Examples
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Consider the following problem:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下问题：
- en: \[\begin{split}\min_{x_0, x_1} \ -x_0 + 4x_1 & \\ \mbox{such that} \ -3x_0 +
    x_1 & \leq 6,\\ -x_0 - 2x_1 & \geq -4,\\ x_1 & \geq -3.\end{split}\]
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{split}\min_{x_0, x_1} \ -x_0 + 4x_1 & \\ \mbox{这样的} \ -3x_0 + x_1 &
    \leq 6,\\ -x_0 - 2x_1 & \geq -4,\\ x_1 & \geq -3.\end{split}\]
- en: 'The problem is not presented in the form accepted by [`linprog`](#scipy.optimize.linprog
    "scipy.optimize.linprog"). This is easily remedied by converting the “greater
    than” inequality constraint to a “less than” inequality constraint by multiplying
    both sides by a factor of \(-1\). Note also that the last constraint is really
    the simple bound \(-3 \leq x_1 \leq \infty\). Finally, since there are no bounds
    on \(x_0\), we must explicitly specify the bounds \(-\infty \leq x_0 \leq \infty\),
    as the default is for variables to be non-negative. After collecting coeffecients
    into arrays and tuples, the input for this problem is:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的表述形式不符合[`linprog`](#scipy.optimize.linprog "scipy.optimize.linprog")接受的格式。通过将“大于”不等式约束转换为“小于”不等式约束，同时将两边乘以\(-1\)的方法可以轻松解决这个问题。还需注意，最后一个约束实际上是简单的界限条件\(-3
    \leq x_1 \leq \infty\)。最后，由于\(x_0\)没有边界，我们必须明确指定边界\(-\infty \leq x_0 \leq \infty\)，因为默认情况下变量是非负的。将系数收集到数组和元组中后，该问题的输入为：
- en: '[PRE3]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The marginals (AKA dual values / shadow prices / Lagrange multipliers) and residuals
    (slacks) are also available.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 边际（也称为对偶值 / 影子价格 / 拉格朗日乘子）和剩余量（余量）也是可用的。
- en: '[PRE4]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, because the marginal associated with the second inequality constraint
    is -1, we expect the optimal value of the objective function to decrease by `eps`
    if we add a small amount `eps` to the right hand side of the second inequality
    constraint:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，因为与第二个不等式约束相关联的边际为 -1，我们预期如果我们在第二个不等式约束的右侧添加一个小量`eps`，目标函数的最优值将减少`eps`：
- en: '[PRE5]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, because the residual on the first inequality constraint is 39, we can
    decrease the right hand side of the first constraint by 39 without affecting the
    optimal solution.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Also, because the residual on the first inequality constraint is 39, we can
    decrease the right hand side of the first constraint by 39 without affecting the
    optimal solution.
- en: '[PRE6]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
