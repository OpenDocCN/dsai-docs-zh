- en: numpy.isfinite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.isfinite
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.isfinite.html](https://numpy.org/doc/1.26/reference/generated/numpy.isfinite.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文:[https://numpy.org/doc/1.26/reference/generated/numpy.isfinite.html](https://numpy.org/doc/1.26/reference/generated/numpy.isfinite.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Test element-wise for finiteness (not infinity and not Not a Number).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 元素级检查有限性(非无穷且非 Not a Number)。
- en: The result is returned as a boolean array.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以布尔数组的形式返回。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**x**array_like'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**array_like'
- en: Input values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输入值。
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**ndarray, None, or tuple of ndarray and None, optional'
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 存储结果的位置。如果提供, 它必须具有与输入广播后的形状相同的形状。如果未提供或为 None, 则返回一个新分配的数组。元组(仅作为关键字参数可能出现)的长度必须等于输出的数量。
- en: '**where**array_like, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**where**array_like, optional'
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此条件会广播到输入中。在条件为 True 的位置, *out* 数组会被设置为 ufunc 的结果。其他位置, *out* 数组将保留其原始值。请注意,
    如果通过默认的 `out=None` 创建了未初始化的 *out* 数组, 在条件为 False 的位置将保持未初始化状态。
- en: '****kwargs**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '****kwargs**'
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他关键字参数, 请参阅 [ufunc 文档](../ufuncs.html#ufuncs-kwargs)。
- en: 'Returns:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '返回值:'
- en: '**y**ndarray, bool'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**ndarray, bool'
- en: True where `x` is not positive infinity, negative infinity, or NaN; false otherwise.
    This is a scalar if *x* is a scalar.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `x` 不是正无穷、负无穷或 NaN 时返回 True; 否则返回 False。如果 *x* 是标量，则结果也是标量。
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`isinf`](numpy.isinf.html#numpy.isinf "numpy.isinf"), [`isneginf`](numpy.isneginf.html#numpy.isneginf
    "numpy.isneginf"), [`isposinf`](numpy.isposinf.html#numpy.isposinf "numpy.isposinf"),
    [`isnan`](numpy.isnan.html#numpy.isnan "numpy.isnan")'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`isinf`](numpy.isinf.html#numpy.isinf "numpy.isinf")、[`isneginf`](numpy.isneginf.html#numpy.isneginf
    "numpy.isneginf")、[`isposinf`](numpy.isposinf.html#numpy.isposinf "numpy.isposinf")、[`isnan`](numpy.isnan.html#numpy.isnan
    "numpy.isnan")'
- en: Notes
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Not a Number, positive infinity and negative infinity are considered to be non-finite.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Not a Number、正无穷和负无穷被视为非有限。
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). This means that Not a Number is not equivalent to infinity. Also that positive
    infinity is not equivalent to negative infinity. But infinity is equivalent to
    positive infinity. Errors result if the second argument is also supplied when
    *x* is a scalar input, or if first and second arguments have different shapes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 使用 IEEE 754 标准进行浮点运算。这意味着 Not a Number 不等同于无穷大。同时, 正无穷也不等同于负无穷。但是, 正无穷等同于无穷大。如果第二个参数在
    *x* 为标量输入时提供, 或者第一个和第二个参数形状不同时会出错。
- en: Examples
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
