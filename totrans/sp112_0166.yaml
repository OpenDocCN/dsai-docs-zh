- en: scipy.interpolate.CubicHermiteSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.CubicHermiteSpline.html#scipy.interpolate.CubicHermiteSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.CubicHermiteSpline.html#scipy.interpolate.CubicHermiteSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Piecewise-cubic interpolator matching values and first derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: The result is represented as a [`PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly
    "scipy.interpolate.PPoly") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array containing values of the independent variable. Values must be real,
    finite and in strictly increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing values of the dependent variable. It can have arbitrary number
    of dimensions, but the length along `axis` (see below) must match the length of
    `x`. Values must be finite.
  prefs: []
  type: TYPE_NORMAL
- en: '**dydx**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing derivatives of the dependent variable. It can have arbitrary
    number of dimensions, but the length along `axis` (see below) must match the length
    of `x`. Values must be finite.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which *y* is assumed to be varying. Meaning that for `x[i]` the corresponding
    values are `np.take(y, i, axis=axis)`. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**{bool, ‘periodic’, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If bool, determines whether to extrapolate to out-of-bounds points based on
    first and last intervals, or to return NaNs. If ‘periodic’, periodic extrapolation
    is used. If None (default), it is set to True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Akima1DInterpolator`](scipy.interpolate.Akima1DInterpolator.html#scipy.interpolate.Akima1DInterpolator
    "scipy.interpolate.Akima1DInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Akima 1D interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PchipInterpolator`](scipy.interpolate.PchipInterpolator.html#scipy.interpolate.PchipInterpolator
    "scipy.interpolate.PchipInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: PCHIP 1-D monotonic cubic interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`CubicSpline`](scipy.interpolate.CubicSpline.html#scipy.interpolate.CubicSpline
    "scipy.interpolate.CubicSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Cubic spline data interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly "scipy.interpolate.PPoly")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise polynomial in terms of coefficients and breakpoints
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If you want to create a higher-order spline matching higher-order derivatives,
    use [`BPoly.from_derivatives`](scipy.interpolate.BPoly.from_derivatives.html#scipy.interpolate.BPoly.from_derivatives
    "scipy.interpolate.BPoly.from_derivatives").
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Cubic Hermite spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline)
    on Wikipedia.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints. The same `x` which was passed to the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray, shape (4, n-1, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of the polynomials on each segment. The trailing dimensions match
    the dimensions of *y*, excluding `axis`. For example, if *y* is 1-D, then `c[k,
    i]` is a coefficient for `(x-x[i])**(3-k)` on the segment between `x[i]` and `x[i+1]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis. The same axis which was passed to the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.CubicHermiteSpline.__call__.html#scipy.interpolate.CubicHermiteSpline.__call__
    "scipy.interpolate.CubicHermiteSpline.__call__")(x[, nu, extrapolate]) | Evaluate
    the piecewise polynomial or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.CubicHermiteSpline.derivative.html#scipy.interpolate.CubicHermiteSpline.derivative
    "scipy.interpolate.CubicHermiteSpline.derivative")([nu]) | Construct a new piecewise
    polynomial representing the derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.CubicHermiteSpline.antiderivative.html#scipy.interpolate.CubicHermiteSpline.antiderivative
    "scipy.interpolate.CubicHermiteSpline.antiderivative")([nu]) | Construct a new
    piecewise polynomial representing the antiderivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.interpolate.CubicHermiteSpline.integrate.html#scipy.interpolate.CubicHermiteSpline.integrate
    "scipy.interpolate.CubicHermiteSpline.integrate")(a, b[, extrapolate]) | Compute
    a definite integral over a piecewise polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots`](scipy.interpolate.CubicHermiteSpline.roots.html#scipy.interpolate.CubicHermiteSpline.roots
    "scipy.interpolate.CubicHermiteSpline.roots")([discontinuity, extrapolate]) |
    Find real roots of the piecewise polynomial. |'
  prefs: []
  type: TYPE_TB
