["```py\n>>> from sympy.interactive.printing import init_printing\n>>> init_printing(use_unicode=False)\n>>> from sympy.matrices import Matrix, eye, zeros, ones, diag, GramSchmidt\n>>> M = Matrix([[1,0,0], [0,0,0]]); M\n[1  0  0]\n[       ]\n[0  0  0]\n>>> Matrix([M, (0, 0, -1)])\n[1  0  0 ]\n[        ]\n[0  0  0 ]\n[        ]\n[0  0  -1]\n>>> Matrix([[1, 2, 3]])\n[1 2 3]\n>>> Matrix([1, 2, 3])\n[1]\n[ ]\n[2]\n[ ]\n[3] \n```", "```py\n>>> Matrix(2, 3, [1, 2, 3, 4, 5, 6])\n[1  2  3]\n[       ]\n[4  5  6] \n```", "```py\n>>> def f(i,j):\n...     if i == j:\n...         return 1\n...     else:\n...         return 0\n...\n>>> Matrix(4, 4, f)\n[1  0  0  0]\n[          ]\n[0  1  0  0]\n[          ]\n[0  0  1  0]\n[          ]\n[0  0  0  1] \n```", "```py\n>>> Matrix(3, 4, lambda i,j: 1 - (i+j) % 2)\n[1  0  1  0]\n[          ]\n[0  1  0  1]\n[          ]\n[1  0  1  0] \n```", "```py\n>>> eye(4)\n[1  0  0  0]\n[          ]\n[0  1  0  0]\n[          ]\n[0  0  1  0]\n[          ]\n[0  0  0  1]\n>>> zeros(2)\n[0  0]\n[    ]\n[0  0]\n>>> zeros(2, 5)\n[0  0  0  0  0]\n[             ]\n[0  0  0  0  0]\n>>> ones(3)\n[1  1  1]\n[       ]\n[1  1  1]\n[       ]\n[1  1  1]\n>>> ones(1, 3)\n[1  1  1]\n>>> diag(1, Matrix([[1, 2], [3, 4]]))\n[1  0  0]\n[       ]\n[0  1  2]\n[       ]\n[0  3  4] \n```", "```py\n>>> M = Matrix(2, 3, [1, 2, 3, 4, 5, 6])\n>>> M[4]\n5 \n```", "```py\n>>> M[1, 2]\n6\n>>> M[0, 0]\n1\n>>> M[1, 1]\n5 \n```", "```py\n>>> M[0:2, 0:2]\n[1  2]\n[    ]\n[4  5]\n>>> M[2:2, 2]\n[]\n>>> M[:, 2]\n[3]\n[ ]\n[6]\n>>> M[:1, 2]\n[3] \n```", "```py\n>>> M[:, 10] # the 10-th column (not there)\nTraceback (most recent call last):\n...\nIndexError: Index out of range: a[[0, 10]]\n>>> M[:, 10:11] # the 10-th column (if there)\n[]\n>>> M[:, :10] # all columns up to the 10-th\n[1  2  3]\n[       ]\n[4  5  6] \n```", "```py\n>>> Matrix(0, 3, [])[:, 1]\n[] \n```", "```py\n>>> M2 = M[:, :]\n>>> M2[0, 0] = 100\n>>> M[0, 0] == 100\nFalse \n```", "```py\n>>> M = Matrix(([1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]))\n>>> M\n[1   2   3   4 ]\n[              ]\n[5   6   7   8 ]\n[              ]\n[9   10  11  12]\n[              ]\n[13  14  15  16]\n>>> M[2,2] = M[0,3] = 0\n>>> M\n[1   2   3   0 ]\n[              ]\n[5   6   7   8 ]\n[              ]\n[9   10  0   12]\n[              ]\n[13  14  15  16] \n```", "```py\n>>> M = Matrix(([1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]))\n>>> M[2:,2:] = Matrix(2,2,lambda i,j: 0)\n>>> M\n[1   2   3  4]\n[            ]\n[5   6   7  8]\n[            ]\n[9   10  0  0]\n[            ]\n[13  14  0  0] \n```", "```py\n>>> M = Matrix(([1,2,3],[4,5,6],[7,8,9]))\n>>> M - M\n[0  0  0]\n[       ]\n[0  0  0]\n[       ]\n[0  0  0]\n>>> M + M\n[2   4   6 ]\n[          ]\n[8   10  12]\n[          ]\n[14  16  18]\n>>> M * M\n[30   36   42 ]\n[             ]\n[66   81   96 ]\n[             ]\n[102  126  150]\n>>> M2 = Matrix(3,1,[1,5,0])\n>>> M*M2\n[11]\n[  ]\n[29]\n[  ]\n[47]\n>>> M**2\n[30   36   42 ]\n[             ]\n[66   81   96 ]\n[             ]\n[102  126  150] \n```", "```py\n>>> M.row_del(0)\n>>> M\n[4  5  6]\n[       ]\n[7  8  9]\n>>> M.col_del(1)\n>>> M\n[4  6]\n[    ]\n[7  9]\n>>> v1 = Matrix([1,2,3])\n>>> v2 = Matrix([4,5,6])\n>>> v3 = v1.cross(v2)\n>>> v1.dot(v2)\n32\n>>> v2.dot(v3)\n0\n>>> v1.dot(v3)\n0 \n```", "```py\n>>> M1 = eye(3)\n>>> M2 = zeros(3, 4)\n>>> M1.row_join(M2)\n[1  0  0  0  0  0  0]\n[                   ]\n[0  1  0  0  0  0  0]\n[                   ]\n[0  0  1  0  0  0  0]\n>>> M3 = zeros(4, 3)\n>>> M1.col_join(M3)\n[1  0  0]\n[       ]\n[0  1  0]\n[       ]\n[0  0  1]\n[       ]\n[0  0  0]\n[       ]\n[0  0  0]\n[       ]\n[0  0  0]\n[       ]\n[0  0  0] \n```", "```py\n>>> M = eye(3)\n>>> 2*M\n[2  0  0]\n[       ]\n[0  2  0]\n[       ]\n[0  0  2]\n>>> 3*M\n[3  0  0]\n[       ]\n[0  3  0]\n[       ]\n[0  0  3] \n```", "```py\n>>> f = lambda x: 2*x\n>>> eye(3).applyfunc(f)\n[2  0  0]\n[       ]\n[0  2  0]\n[       ]\n[0  0  2] \n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import gcd\n>>> m = Matrix([[x, y], [1, x*y]]).inv('ADJ'); m\n[  x*y       -y    ]\n[--------  --------]\n[ 2         2      ]\n[x *y - y  x *y - y]\n[                  ]\n[  -1         x    ]\n[--------  --------]\n[ 2         2      ]\n[x *y - y  x *y - y]\n>>> gcd(tuple(_))\n 1\n--------\n 2\nx *y - y\n>>> m/_\n[x*y  -y]\n[       ]\n[-1   x ] \n```", "```py\n>>> from sympy import Symbol\n>>> x = Symbol('x')\n>>> M = eye(3) * x\n>>> M\n[x  0  0]\n[       ]\n[0  x  0]\n[       ]\n[0  0  x]\n>>> M.subs(x, 4)\n[4  0  0]\n[       ]\n[0  4  0]\n[       ]\n[0  0  4]\n>>> y = Symbol('y')\n>>> M.subs(x, y)\n[y  0  0]\n[       ]\n[0  y  0]\n[       ]\n[0  0  y] \n```", "```py\n>>> M = Matrix(( [1, 2, 3], [3, 6, 2], [2, 0, 1] ))\n>>> M.det()\n-28\n>>> M2 = eye(3)\n>>> M2.det()\n1\n>>> M3 = Matrix(( [1, 0, 0], [1, 0, 0], [1, 0, 0] ))\n>>> M3.det()\n0 \n```", "```py\n>>> M2.inv()\n[1  0  0]\n[       ]\n[0  1  0]\n[       ]\n[0  0  1]\n>>> M2.inv(method=\"LU\")\n[1  0  0]\n[       ]\n[0  1  0]\n[       ]\n[0  0  1]\n>>> M.inv(method=\"LU\")\n[-3/14  1/14  1/2 ]\n[                 ]\n[-1/28  5/28  -1/4]\n[                 ]\n[ 3/7   -1/7   0  ]\n>>> M * M.inv(method=\"LU\")\n[1  0  0]\n[       ]\n[0  1  0]\n[       ]\n[0  0  1] \n```", "```py\n>>> A = Matrix([[1,1,1],[1,1,3],[2,3,4]])\n>>> Q, R = A.QRdecomposition()\n>>> Q\n[  ___     ___      ___ ]\n[\\/ 6   -\\/ 3    -\\/ 2  ]\n[-----  -------  -------]\n[  6       3        2   ]\n[                       ]\n[  ___     ___      ___ ]\n[\\/ 6   -\\/ 3     \\/ 2  ]\n[-----  -------   ----- ]\n[  6       3        2   ]\n[                       ]\n[  ___     ___          ]\n[\\/ 6    \\/ 3           ]\n[-----   -----      0   ]\n[  3       3            ]\n>>> R\n[           ___         ]\n[  ___  4*\\/ 6       ___]\n[\\/ 6   -------  2*\\/ 6 ]\n[          3            ]\n[                       ]\n[          ___          ]\n[        \\/ 3           ]\n[  0     -----      0   ]\n[          3            ]\n[                       ]\n[                   ___ ]\n[  0       0      \\/ 2  ]\n>>> Q*R\n[1  1  1]\n[       ]\n[1  1  3]\n[       ]\n[2  3  4] \n```", "```py\n>>> A = Matrix([ [2, 3, 5], [3, 6, 2], [8, 3, 6] ])\n>>> x = Matrix(3,1,[3,7,5])\n>>> b = A*x\n>>> soln = A.LUsolve(b)\n>>> soln\n[3]\n[ ]\n[7]\n[ ]\n[5] \n```", "```py\n>>> L = [Matrix([2,3,5]), Matrix([3,6,2]), Matrix([8,3,6])]\n>>> out1 = GramSchmidt(L)\n>>> out2 = GramSchmidt(L, True) \n```", "```py\n>>> for i in out1:\n...     print(i)\n...\nMatrix([[2], [3], [5]])\nMatrix([[23/19], [63/19], [-47/19]])\nMatrix([[1692/353], [-1551/706], [-423/706]])\n>>> for i in out2:\n...      print(i)\n...\nMatrix([[sqrt(38)/19], [3*sqrt(38)/38], [5*sqrt(38)/38]])\nMatrix([[23*sqrt(6707)/6707], [63*sqrt(6707)/6707], [-47*sqrt(6707)/6707]])\nMatrix([[12*sqrt(706)/353], [-11*sqrt(706)/706], [-3*sqrt(706)/706]]) \n```", "```py\n>>> out1[0].dot(out1[1])\n0\n>>> out1[0].dot(out1[2])\n0\n>>> out1[1].dot(out1[2])\n0\n>>> out2[0].norm()\n1\n>>> out2[1].norm()\n1\n>>> out2[2].norm()\n1 \n```", "```py\nclass sympy.matrices.matrixbase.MatrixBase\n```", "```py\nproperty C\n```", "```py\nproperty D\n```", "```py\n>>> from sympy import Matrix, I, eye\n>>> m = Matrix((0, 1 + I, 2, 3))\n>>> m.D\nMatrix([[0, 1 - I, -2, -3]])\n>>> m = (eye(4) + I*eye(4))\n>>> m[0, 3] = 2\n>>> m.D\nMatrix([\n[1 - I,     0,      0,      0],\n[    0, 1 - I,      0,      0],\n[    0,     0, -1 + I,      0],\n[    2,     0,      0, -1 + I]]) \n```", "```py\n>>> Matrix(eye(2)).D\nTraceback (most recent call last):\n...\nAttributeError: Matrix has no attribute D. \n```", "```py\nproperty H\n```", "```py\n>>> from sympy import Matrix, I\n>>> m = Matrix((0, 1 + I, 2, 3))\n>>> m\nMatrix([\n[    0],\n[1 + I],\n[    2],\n[    3]])\n>>> m.H\nMatrix([[0, 1 - I, 2, 3]]) \n```", "```py\nLDLdecomposition(hermitian=True)\n```", "```py\n>>> from sympy import Matrix, eye\n>>> A = Matrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n>>> L, D = A.LDLdecomposition()\n>>> L\nMatrix([\n[   1,   0, 0],\n[ 3/5,   1, 0],\n[-1/5, 1/3, 1]])\n>>> D\nMatrix([\n[25, 0, 0],\n[ 0, 9, 0],\n[ 0, 0, 9]])\n>>> L * D * L.T * A.inv() == eye(A.rows)\nTrue \n```", "```py\n>>> from sympy import I\n>>> A = Matrix(((9, 3*I), (-3*I, 5)))\n>>> L, D = A.LDLdecomposition()\n>>> L\nMatrix([\n[   1, 0],\n[-I/3, 1]])\n>>> D\nMatrix([\n[9, 0],\n[0, 4]])\n>>> L*D*L.H == A\nTrue \n```", "```py\nLDLsolve(rhs)\n```", "```py\n>>> from sympy import Matrix, eye\n>>> A = eye(2)*2\n>>> B = Matrix([[1, 2], [3, 4]])\n>>> A.LDLsolve(B) == B/2\nTrue \n```", "```py\nLUdecomposition(iszerofunc=<function _iszero>, simpfunc=None, rankcheck=False)\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([[4, 3], [6, 3]])\n>>> L, U, _ = a.LUdecomposition()\n>>> L\nMatrix([\n[  1, 0],\n[3/2, 1]])\n>>> U\nMatrix([\n[4,    3],\n[0, -3/2]]) \n```", "```py\nLUdecompositionFF()\n```", "```py\nLUdecomposition_Simple(iszerofunc=<function _iszero>, simpfunc=None, rankcheck=False)\n```", "```py\nLUsolve(rhs, iszerofunc=<function _iszero>)\n```", "```py\nQRdecomposition()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[12, -51, 4], [6, 167, -68], [-4, 24, -41]])\n>>> Q, R = A.QRdecomposition()\n>>> Q\nMatrix([\n[ 6/7, -69/175, -58/175],\n[ 3/7, 158/175,   6/175],\n[-2/7,    6/35,  -33/35]])\n>>> R\nMatrix([\n[14,  21, -14],\n[ 0, 175, -70],\n[ 0,   0,  35]]) \n```", "```py\n>>> Q * Q.H\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> Q.H * Q\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]]) \n```", "```py\n>>> A == Q*R\nTrue \n```", "```py\n>>> A = Matrix([[12, -51, 0], [6, 167, 0], [-4, 24, 0]])\n>>> Q, R = A.QRdecomposition()\n>>> Q\nMatrix([\n[ 6/7, -69/175],\n[ 3/7, 158/175],\n[-2/7,    6/35]])\n>>> R\nMatrix([\n[14,  21, 0],\n[ 0, 175, 0]]) \n```", "```py\n>>> Q.H * Q\nMatrix([\n[1, 0],\n[0, 1]])\n>>> Q * Q.H\nMatrix([\n[27261/30625,   348/30625, -1914/6125],\n[  348/30625, 30589/30625,   198/6125],\n[ -1914/6125,    198/6125,   136/1225]]) \n```", "```py\n>>> Q_aug = Q.row_join(Matrix.eye(3))\n>>> Q_aug = Q_aug.QRdecomposition()[0]\n>>> Q_aug\nMatrix([\n[ 6/7, -69/175, 58/175],\n[ 3/7, 158/175, -6/175],\n[-2/7,    6/35,  33/35]])\n>>> Q_aug.H * Q_aug\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> Q_aug * Q_aug.H\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]]) \n```", "```py\n>>> R_aug = R.col_join(Matrix([[0, 0, 0]]))\n>>> R_aug\nMatrix([\n[14,  21, 0],\n[ 0, 175, 0],\n[ 0,   0, 0]])\n>>> Q_aug * R_aug == A\nTrue \n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix.zeros(3, 4)\n>>> Q, R = A.QRdecomposition() \n```", "```py\n>>> Q\nMatrix(3, 0, [])\n>>> R\nMatrix(0, 4, [])\n>>> Q*R\nMatrix([\n[0, 0, 0, 0],\n[0, 0, 0, 0],\n[0, 0, 0, 0]]) \n```", "```py\n>>> Q_aug = Q.row_join(Matrix.eye(3))\n>>> R_aug = R.col_join(Matrix.zeros(3, 4))\n>>> Q_aug * Q_aug.T\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> R_aug\nMatrix([\n[0, 0, 0, 0],\n[0, 0, 0, 0],\n[0, 0, 0, 0]])\n>>> Q_aug * R_aug == A\nTrue \n```", "```py\nQRsolve(b)\n```", "```py\nproperty T\n```", "```py\n__abs__()\n```", "```py\n__add__(other)\n```", "```py\n__getitem__(key)\n```", "```py\n__len__()\n```", "```py\n__mul__(other)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2, 3], [4, 5, 6]])\n>>> 2*A == A*2 == Matrix([[2, 4, 6], [8, 10, 12]])\nTrue\n>>> B = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> A*B\nMatrix([\n[30, 36, 42],\n[66, 81, 96]])\n>>> B*A\nTraceback (most recent call last):\n...\nShapeError: Matrices size mismatch.\n>>> \n```", "```py\n__pow__(exp)\n```", "```py\n__weakref__\n```", "```py\nadd(b)\n```", "```py\nadjoint()\n```", "```py\nadjugate(method='berkowitz')\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2], [3, 4]])\n>>> M.adjugate()\nMatrix([\n[ 4, -2],\n[-3,  1]]) \n```", "```py\nanalytic_func(f, x)\n```", "```py\n>>> from sympy import Symbol, Matrix, S, log \n```", "```py\n>>> x = Symbol('x')\n>>> m = Matrix([[S(5)/4, S(3)/4], [S(3)/4, S(5)/4]])\n>>> f = log(x)\n>>> m.analytic_func(f, x)\nMatrix([\n[     0, log(2)],\n[log(2),      0]]) \n```", "```py\napplyfunc(f)\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(2, 2, lambda i, j: i*2+j)\n>>> m\nMatrix([\n[0, 1],\n[2, 3]])\n>>> m.applyfunc(lambda i: 2*i)\nMatrix([\n[0, 2],\n[4, 6]]) \n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\natoms(*types)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import Matrix\n>>> Matrix([[x]])\nMatrix([[x]])\n>>> _.atoms()\n{x}\n>>> Matrix([[x, y], [y, x]])\nMatrix([\n[x, y],\n[y, x]])\n>>> _.atoms()\n{x, y} \n```", "```py\nberkowitz_det()\n```", "```py\nberkowitz_eigenvals(**flags)\n```", "```py\nberkowitz_minors()\n```", "```py\nbidiagonal_decomposition(upper=True)\n```", "```py\nbidiagonalize(upper=True)\n```", "```py\ncharpoly(x='lambda', simplify=<function _simplify>)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y\n>>> M = Matrix([[1, 3], [2, 0]])\n>>> M.charpoly()\nPurePoly(lambda**2 - lambda - 6, lambda, domain='ZZ')\n>>> M.charpoly(x) == M.charpoly(y)\nTrue\n>>> M.charpoly(x) == M.charpoly(y)\nTrue \n```", "```py\n>>> M.charpoly().as_expr()\nlambda**2 - lambda - 6 \n```", "```py\n>>> M = Matrix([[1, 2], [x, 0]])\n>>> M.charpoly(x).as_expr()\n_x**2 - _x - 2*x \n```", "```py\n>>> M.charpoly(x).gen\n_x\n>>> M.charpoly(x).gen == x\nFalse \n```", "```py\ncholesky(hermitian=True)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n>>> A.cholesky()\nMatrix([\n[ 5, 0, 0],\n[ 3, 3, 0],\n[-1, 1, 3]])\n>>> A.cholesky() * A.cholesky().T\nMatrix([\n[25, 15, -5],\n[15, 18,  0],\n[-5,  0, 11]]) \n```", "```py\n>>> from sympy import I\n>>> A = Matrix(((9, 3*I), (-3*I, 5)))\n>>> A.cholesky()\nMatrix([\n[ 3, 0],\n[-I, 2]])\n>>> A.cholesky() * A.cholesky().H\nMatrix([\n[   9, 3*I],\n[-3*I,   5]]) \n```", "```py\n>>> A = Matrix([[1, 2], [2, 1]])\n>>> L = A.cholesky(hermitian=False)\n>>> L\nMatrix([\n[1,         0],\n[2, sqrt(3)*I]])\n>>> L*L.T == A\nTrue \n```", "```py\ncholesky_solve(rhs)\n```", "```py\ncofactor(i, j, method='berkowitz')\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2], [3, 4]])\n>>> M.cofactor(0, 1)\n-3 \n```", "```py\ncofactor_matrix(method='berkowitz')\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2], [3, 4]])\n>>> M.cofactor_matrix()\nMatrix([\n[ 4, -3],\n[-2,  1]]) \n```", "```py\ncol(j)\n```", "```py\n>>> from sympy import eye\n>>> eye(2).col(0)\nMatrix([\n[1],\n[0]]) \n```", "```py\ncol_del(col)\n```", "```py\ncol_insert(pos, other)\n```", "```py\n>>> from sympy import zeros, ones\n>>> M = zeros(3)\n>>> V = ones(3, 1)\n>>> M.col_insert(1, V)\nMatrix([\n[0, 1, 0, 0],\n[0, 1, 0, 0],\n[0, 1, 0, 0]]) \n```", "```py\ncol_join(other)\n```", "```py\n>>> from sympy import zeros, ones\n>>> M = zeros(3)\n>>> V = ones(1, 3)\n>>> M.col_join(V)\nMatrix([\n[0, 0, 0],\n[0, 0, 0],\n[0, 0, 0],\n[1, 1, 1]]) \n```", "```py\ncolumnspace(simplify=False)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [1, 3, 0, -2, -6, 0, 3, 9, 6])\n>>> M\nMatrix([\n[ 1,  3, 0],\n[-2, -6, 0],\n[ 3,  9, 6]])\n>>> M.columnspace()\n[Matrix([\n[ 1],\n[-2],\n[ 3]]), Matrix([\n[0],\n[0],\n[6]])] \n```", "```py\nclassmethod companion(poly)\n```", "```py\n>>> from sympy import Matrix, Poly, Symbol, symbols\n>>> x = Symbol('x')\n>>> c0, c1, c2, c3, c4 = symbols('c0:5')\n>>> p = Poly(c0 + c1*x + c2*x**2 + c3*x**3 + c4*x**4 + x**5, x)\n>>> Matrix.companion(p)\nMatrix([\n[0, 0, 0, 0, -c0],\n[1, 0, 0, 0, -c1],\n[0, 1, 0, 0, -c2],\n[0, 0, 1, 0, -c3],\n[0, 0, 0, 1, -c4]]) \n```", "```py\ncondition_number()\n```", "```py\n>>> from sympy import Matrix, S\n>>> A = Matrix([[1, 0, 0], [0, 10, 0], [0, 0, S.One/10]])\n>>> A.condition_number()\n100 \n```", "```py\nconjugate()\n```", "```py\n>>> from sympy import SparseMatrix, I\n>>> a = SparseMatrix(((1, 2 + I), (3, 4), (I, -I)))\n>>> a\nMatrix([\n[1, 2 + I],\n[3,     4],\n[I,    -I]])\n>>> a.C\nMatrix([\n[ 1, 2 - I],\n[ 3,     4],\n[-I,     I]]) \n```", "```py\nconnected_components()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([\n...     [66, 0, 0, 68, 0, 0, 0, 0, 67],\n...     [0, 55, 0, 0, 0, 0, 54, 53, 0],\n...     [0, 0, 0, 0, 1, 2, 0, 0, 0],\n...     [86, 0, 0, 88, 0, 0, 0, 0, 87],\n...     [0, 0, 10, 0, 11, 12, 0, 0, 0],\n...     [0, 0, 20, 0, 21, 22, 0, 0, 0],\n...     [0, 45, 0, 0, 0, 0, 44, 43, 0],\n...     [0, 35, 0, 0, 0, 0, 34, 33, 0],\n...     [76, 0, 0, 78, 0, 0, 0, 0, 77]])\n>>> A.connected_components()\n[[0, 3, 8], [1, 6, 7], [2, 4, 5]] \n```", "```py\nconnected_components_decomposition()\n```", "```py\n>>> from sympy import Matrix, pprint\n>>> A = Matrix([\n...     [66, 0, 0, 68, 0, 0, 0, 0, 67],\n...     [0, 55, 0, 0, 0, 0, 54, 53, 0],\n...     [0, 0, 0, 0, 1, 2, 0, 0, 0],\n...     [86, 0, 0, 88, 0, 0, 0, 0, 87],\n...     [0, 0, 10, 0, 11, 12, 0, 0, 0],\n...     [0, 0, 20, 0, 21, 22, 0, 0, 0],\n...     [0, 45, 0, 0, 0, 0, 44, 43, 0],\n...     [0, 35, 0, 0, 0, 0, 34, 33, 0],\n...     [76, 0, 0, 78, 0, 0, 0, 0, 77]]) \n```", "```py\n>>> P, B = A.connected_components_decomposition()\n>>> pprint(P)\nPermutationMatrix((1 3)(2 8 5 7 4 6))\n>>> pprint(B)\n[[66  68  67]                            ]\n[[          ]                            ]\n[[86  88  87]       0             0      ]\n[[          ]                            ]\n[[76  78  77]                            ]\n[                                        ]\n[              [55  54  53]              ]\n[              [          ]              ]\n[     0        [45  44  43]       0      ]\n[              [          ]              ]\n[              [35  34  33]              ]\n[                                        ]\n[                            [0   1   2 ]]\n[                            [          ]]\n[     0             0        [10  11  12]]\n[                            [          ]]\n[                            [20  21  22]] \n```", "```py\n>>> P = P.as_explicit()\n>>> B = B.as_explicit()\n>>> P.T*B*P == A\nTrue \n```", "```py\ncopy()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix(2, 2, [1, 2, 3, 4])\n>>> A.copy()\nMatrix([\n[1, 2],\n[3, 4]]) \n```", "```py\ncramer_solve(rhs, det_method='laplace')\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[0, -6, 1], [0, -6, -1], [-5, -2, 3]])\n>>> B = Matrix([[-30, -9], [-18, -27], [-26, 46]])\n>>> x = A.cramer_solve(B)\n>>> x\nMatrix([\n[ 0, -5],\n[ 4,  3],\n[-6,  9]]) \n```", "```py\ncross(b)\n```", "```py\ndet(method='bareiss', iszerofunc=None)\n```", "```py\n>>> from sympy import Matrix, eye, det\n>>> I3 = eye(3)\n>>> det(I3)\n1\n>>> M = Matrix([[1, 2], [3, 4]])\n>>> det(M)\n-2\n>>> det(M) == M.det()\nTrue\n>>> M.det(method=\"domain-ge\")\n-2 \n```", "```py\ndet_LU_decomposition()\n```", "```py\nclassmethod diag(*args, strict=False, unpack=True, rows=None, cols=None, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> Matrix.diag(1, 2, 3)\nMatrix([\n[1, 0, 0],\n[0, 2, 0],\n[0, 0, 3]]) \n```", "```py\n>>> Matrix.diag([1, 2, 3]) == Matrix.diag(1, 2, 3)\nTrue \n```", "```py\n>>> col = [1, 2, 3]\n>>> row = [[4, 5]]\n>>> Matrix.diag(col, row)\nMatrix([\n[1, 0, 0],\n[2, 0, 0],\n[3, 0, 0],\n[0, 4, 5]]) \n```", "```py\n>>> Matrix.diag([[1, 2, 3], [4, 5], [6]], unpack=False)\nMatrix([\n[1, 2, 3],\n[4, 5, 0],\n[6, 0, 0]]) \n```", "```py\n>>> from sympy import ImmutableMatrix\n>>> from sympy.utilities.misc import func_name\n>>> func_name(Matrix.diag(1, cls=ImmutableMatrix))\n'ImmutableDenseMatrix' \n```", "```py\n>>> from sympy import ones\n>>> r2 = ones(0, 2)\n>>> Matrix.diag(r2, 1, 2)\nMatrix([\n[0, 0, 1, 0],\n[0, 0, 0, 2]]) \n```", "```py\ndiagonal(k=0)\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(3, 3, lambda i, j: j - i); m\nMatrix([\n[ 0,  1, 2],\n[-1,  0, 1],\n[-2, -1, 0]])\n>>> _.diagonal()\nMatrix([[0, 0, 0]])\n>>> m.diagonal(1)\nMatrix([[1, 1]])\n>>> m.diagonal(-2)\nMatrix([[-2]]) \n```", "```py\n>>> Matrix.diag(1, 2, 3).diagonal()[1]  # instead of [0, 1]\n2 \n```", "```py\ndiagonal_solve(rhs)\n```", "```py\n>>> from sympy import Matrix, eye\n>>> A = eye(2)*2\n>>> B = Matrix([[1, 2], [3, 4]])\n>>> A.diagonal_solve(B) == B/2\nTrue \n```", "```py\ndiagonalize(reals_only=False, sort=False, normalize=False)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [1, 2, 0, 0, 3, 0, 2, -4, 2])\n>>> M\nMatrix([\n[1,  2, 0],\n[0,  3, 0],\n[2, -4, 2]])\n>>> (P, D) = M.diagonalize()\n>>> D\nMatrix([\n[1, 0, 0],\n[0, 2, 0],\n[0, 0, 3]])\n>>> P\nMatrix([\n[-1, 0, -1],\n[ 0, 0, -1],\n[ 2, 1,  2]])\n>>> P.inv() * M * P\nMatrix([\n[1, 0, 0],\n[0, 2, 0],\n[0, 0, 3]]) \n```", "```py\ndiff(*args, evaluate=True, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y\n>>> M = Matrix([[x, y], [1, 0]])\n>>> M.diff(x)\nMatrix([\n[1, 0],\n[0, 0]]) \n```", "```py\ndot(b, hermitian=None, conjugate_convention=None)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> v = Matrix([1, 1, 1])\n>>> M.row(0).dot(v)\n6\n>>> M.col(0).dot(v)\n12\n>>> v = [3, 2, 1]\n>>> M.row(0).dot(v)\n10 \n```", "```py\n>>> from sympy import I\n>>> q = Matrix([1*I, 1*I, 1*I])\n>>> q.dot(q, hermitian=False)\n-3 \n```", "```py\n>>> q.dot(q, hermitian=True)\n3 \n```", "```py\n>>> q1 = Matrix([1, 1, 1*I])\n>>> q.dot(q1, hermitian=True, conjugate_convention=\"maths\")\n1 - 2*I\n>>> q.dot(q1, hermitian=True, conjugate_convention=\"physics\")\n1 + 2*I \n```", "```py\ndual()\n```", "```py\nechelon_form(iszerofunc=<function _iszero>, simplify=False, with_pivots=False)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2], [3, 4]])\n>>> M.echelon_form()\nMatrix([\n[1,  2],\n[0, -2]]) \n```", "```py\neigenvals(error_when_incomplete=True, **flags)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [0, 1, 1, 1, 0, 0, 1, 1, 1])\n>>> M.eigenvals()\n{-1: 1, 0: 1, 2: 1} \n```", "```py\neigenvects(error_when_incomplete=True, iszerofunc=<function _iszero>, **flags)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [0, 1, 1, 1, 0, 0, 1, 1, 1])\n>>> M.eigenvects()\n[(-1, 1, [Matrix([\n[-1],\n[ 1],\n[ 0]])]), (0, 1, [Matrix([\n[ 0],\n[-1],\n[ 1]])]), (2, 1, [Matrix([\n[2/3],\n[1/3],\n[  1]])])] \n```", "```py\nelementary_col_op(op='n->kn', col=None, k=None, col1=None, col2=None)\n```", "```py\nelementary_row_op(op='n->kn', row=None, k=None, row1=None, row2=None)\n```", "```py\nevalf(n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False)\n```", "```py\nexp()\n```", "```py\n>>> from sympy import Symbol, Matrix \n```", "```py\n>>> t = Symbol('t')\n>>> m = Matrix([[0, 1], [-1, 0]]) * t\n>>> m.exp()\nMatrix([\n[    exp(I*t)/2 + exp(-I*t)/2, -I*exp(I*t)/2 + I*exp(-I*t)/2],\n[I*exp(I*t)/2 - I*exp(-I*t)/2,      exp(I*t)/2 + exp(-I*t)/2]]) \n```", "```py\nexpand(deep=True, modulus=None, power_base=True, power_exp=True, mul=True, log=True, multinomial=True, basic=True, **hints)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import Matrix\n>>> Matrix(1, 1, [x*(x+1)])\nMatrix([[x*(x + 1)]])\n>>> _.expand()\nMatrix([[x**2 + x]]) \n```", "```py\nextract(rowsList, colsList)\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(4, 3, range(12))\n>>> m\nMatrix([\n[0,  1,  2],\n[3,  4,  5],\n[6,  7,  8],\n[9, 10, 11]])\n>>> m.extract([0, 1, 3], [0, 1])\nMatrix([\n[0,  1],\n[3,  4],\n[9, 10]]) \n```", "```py\n>>> m.extract([0, 0, 1], [-1])\nMatrix([\n[2],\n[2],\n[5]]) \n```", "```py\n>>> m.extract(range(0, m.rows, 2), [-1])\nMatrix([\n[2],\n[8]]) \n```", "```py\n>>> m.extract([0, 1, 2, 3], [True, False, True])\nMatrix([\n[0,  2],\n[3,  5],\n[6,  8],\n[9, 11]]) \n```", "```py\nclassmethod eye(rows, cols=None, **kwargs)\n```", "```py\nflat()\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix([[0, 2], [3, 4]])\n>>> m.flat()\n[0, 2, 3, 4] \n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import Matrix\n>>> Matrix([[x], [1]]).free_symbols\n{x} \n```", "```py\nclassmethod from_dok(rows, cols, dok)\n```", "```py\n>>> from sympy import Matrix\n>>> d = {(0, 0): 1, (1, 2): 3, (2, 1): 4}\n>>> Matrix.from_dok(3, 3, d)\nMatrix([\n[1, 0, 0],\n[0, 0, 3],\n[0, 4, 0]]) \n```", "```py\ngauss_jordan_solve(B, freevar=False)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2, 1, 1], [1, 2, 2, -1], [2, 4, 0, 6]])\n>>> B = Matrix([7, 12, 4])\n>>> sol, params = A.gauss_jordan_solve(B)\n>>> sol\nMatrix([\n[-2*tau0 - 3*tau1 + 2],\n[                 tau0],\n[           2*tau1 + 5],\n[                 tau1]])\n>>> params\nMatrix([\n[tau0],\n[tau1]])\n>>> taus_zeroes = { tau:0 for tau in params }\n>>> sol_unique = sol.xreplace(taus_zeroes)\n>>> sol_unique\n Matrix([\n[2],\n[0],\n[5],\n[0]]) \n```", "```py\n>>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\n>>> B = Matrix([3, 6, 9])\n>>> sol, params = A.gauss_jordan_solve(B)\n>>> sol\nMatrix([\n[-1],\n[ 2],\n[ 0]])\n>>> params\nMatrix(0, 1, []) \n```", "```py\n>>> A = Matrix([[2, -7], [-1, 4]])\n>>> B = Matrix([[-21, 3], [12, -2]])\n>>> sol, params = A.gauss_jordan_solve(B)\n>>> sol\nMatrix([\n[0, -2],\n[3, -1]])\n>>> params\nMatrix(0, 2, []) \n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2, 1, 1], [1, 2, 2, -1], [2, 4, 0, 6]])\n>>> B = Matrix([7, 12, 4])\n>>> sol, params, freevars = A.gauss_jordan_solve(B, freevar=True)\n>>> sol\nMatrix([\n[-2*tau0 - 3*tau1 + 2],\n[                 tau0],\n[           2*tau1 + 5],\n[                 tau1]])\n>>> params\nMatrix([\n[tau0],\n[tau1]])\n>>> freevars\n[1, 3] \n```", "```py\nget_diag_blocks()\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y, z\n>>> A = Matrix([[1, 3, 0, 0], [y, z*z, 0, 0], [0, 0, x, 0], [0, 0, 0, 0]])\n>>> a1, a2, a3 = A.get_diag_blocks()\n>>> a1\nMatrix([\n[1,    3],\n[y, z**2]])\n>>> a2\nMatrix([[x]])\n>>> a3\nMatrix([[0]]) \n```", "```py\nhas(*patterns)\n```", "```py\n>>> from sympy import Matrix, SparseMatrix, Float\n>>> from sympy.abc import x, y\n>>> A = Matrix(((1, x), (0.2, 3)))\n>>> B = SparseMatrix(((1, x), (0.2, 3)))\n>>> A.has(x)\nTrue\n>>> A.has(y)\nFalse\n>>> A.has(Float)\nTrue\n>>> B.has(x)\nTrue\n>>> B.has(y)\nFalse\n>>> B.has(Float)\nTrue \n```", "```py\nhat()\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([1, 2, 3])\n>>> a.hat()\nMatrix([\n[ 0, -3,  2],\n[ 3,  0, -1],\n[-2,  1,  0]]) \n```", "```py\n>>> b = Matrix([3, 2, 1])\n>>> a.hat() * b\nMatrix([\n[-4],\n[ 8],\n[-4]]) \n```", "```py\n>>> a.cross(b)\nMatrix([\n[-4],\n[ 8],\n[-4]]) \n```", "```py\nclassmethod hstack(*args)\n```", "```py\n>>> from sympy import Matrix, eye\n>>> Matrix.hstack(eye(2), 2*eye(2))\nMatrix([\n[1, 0, 2, 0],\n[0, 1, 0, 2]]) \n```", "```py\nintegrate(*args, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y\n>>> M = Matrix([[x, y], [1, 0]])\n>>> M.integrate((x, ))\nMatrix([\n[x**2/2, x*y],\n[     x,   0]])\n>>> M.integrate((x, 0, 2))\nMatrix([\n[2, 2*y],\n[2,   0]]) \n```", "```py\ninv(method=None, iszerofunc=<function _iszero>, try_block_diag=False)\n```", "```py\n>>> from sympy import SparseMatrix, Matrix\n>>> A = SparseMatrix([\n... [ 2, -1,  0],\n... [-1,  2, -1],\n... [ 0,  0,  2]])\n>>> A.inv('CH')\nMatrix([\n[2/3, 1/3, 1/6],\n[1/3, 2/3, 1/3],\n[  0,   0, 1/2]])\n>>> A.inv(method='LDL') # use of 'method=' is optional\nMatrix([\n[2/3, 1/3, 1/6],\n[1/3, 2/3, 1/3],\n[  0,   0, 1/2]])\n>>> A * _\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> A = Matrix(A)\n>>> A.inv('CH')\nMatrix([\n[2/3, 1/3, 1/6],\n[1/3, 2/3, 1/3],\n[  0,   0, 1/2]])\n>>> A.inv('ADJ') == A.inv('GE') == A.inv('LU') == A.inv('CH') == A.inv('LDL') == A.inv('QR')\nTrue \n```", "```py\ninverse_ADJ(iszerofunc=<function _iszero>)\n```", "```py\ninverse_BLOCK(iszerofunc=<function _iszero>)\n```", "```py\ninverse_CH(iszerofunc=<function _iszero>)\n```", "```py\ninverse_GE(iszerofunc=<function _iszero>)\n```", "```py\ninverse_LDL(iszerofunc=<function _iszero>)\n```", "```py\ninverse_LU(iszerofunc=<function _iszero>)\n```", "```py\ninverse_QR(iszerofunc=<function _iszero>)\n```", "```py\nclassmethod irregular(ntop, *matrices, **kwargs)\n```", "```py\n>>> from sympy import ones, Matrix\n>>> Matrix.irregular(3, ones(2,1), ones(3,3)*2, ones(2,2)*3,\n...   ones(1,1)*4, ones(2,2)*5, ones(1,2)*6, ones(1,2)*7)\nMatrix([\n [1, 2, 2, 2, 3, 3],\n [1, 2, 2, 2, 3, 3],\n [4, 2, 2, 2, 5, 5],\n [6, 6, 7, 7, 5, 5]]) \n```", "```py\nis_anti_symmetric(simplify=True)\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> m = Matrix(2, 2, [0, 1, -1, 0])\n>>> m\nMatrix([\n[ 0, 1],\n[-1, 0]])\n>>> m.is_anti_symmetric()\nTrue\n>>> x, y = symbols('x y')\n>>> m = Matrix(2, 3, [0, 0, x, -y, 0, 0])\n>>> m\nMatrix([\n[ 0, 0, x],\n[-y, 0, 0]])\n>>> m.is_anti_symmetric()\nFalse \n```", "```py\n>>> from sympy.abc import x, y\n>>> m = Matrix(3, 3, [0, x**2 + 2*x + 1, y,\n...                   -(x + 1)**2, 0, x*y,\n...                   -y, -x*y, 0]) \n```", "```py\n>>> m[0, 1] == -m[1, 0]\nFalse\n>>> m.is_anti_symmetric()\nTrue \n```", "```py\n>>> print(m.is_anti_symmetric(simplify=False))\nNone \n```", "```py\n>>> m = m.expand()\n>>> m.is_anti_symmetric(simplify=False)\nTrue \n```", "```py\nis_diagonal()\n```", "```py\n>>> from sympy import Matrix, diag\n>>> m = Matrix(2, 2, [1, 0, 0, 2])\n>>> m\nMatrix([\n[1, 0],\n[0, 2]])\n>>> m.is_diagonal()\nTrue \n```", "```py\n>>> m = Matrix(2, 2, [1, 1, 0, 2])\n>>> m\nMatrix([\n[1, 1],\n[0, 2]])\n>>> m.is_diagonal()\nFalse \n```", "```py\n>>> m = diag(1, 2, 3)\n>>> m\nMatrix([\n[1, 0, 0],\n[0, 2, 0],\n[0, 0, 3]])\n>>> m.is_diagonal()\nTrue \n```", "```py\nis_diagonalizable(reals_only=False, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2, 0], [0, 3, 0], [2, -4, 2]])\n>>> M.is_diagonalizable()\nTrue \n```", "```py\n>>> M = Matrix([[0, 1], [0, 0]])\n>>> M.is_diagonalizable()\nFalse \n```", "```py\n>>> M = Matrix([[0, 1], [-1, 0]])\n>>> M.is_diagonalizable(reals_only=False)\nTrue\n>>> M.is_diagonalizable(reals_only=True)\nFalse \n```", "```py\nproperty is_echelon\n```", "```py\nproperty is_hermitian\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy import I\n>>> from sympy.abc import x\n>>> a = Matrix([[1, I], [-I, 1]])\n>>> a\nMatrix([\n[ 1, I],\n[-I, 1]])\n>>> a.is_hermitian\nTrue\n>>> a[0, 0] = 2*I\n>>> a.is_hermitian\nFalse\n>>> a[0, 0] = x\n>>> a.is_hermitian\n>>> a[0, 1] = a[1, 0]*I\n>>> a.is_hermitian\nFalse \n```", "```py\nproperty is_indefinite\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> from sympy.plotting import plot3d\n>>> a, b = symbols('a b')\n>>> x = Matrix([a, b]) \n```", "```py\n>>> A = Matrix([[1, 0], [0, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, -1], [-1, 1]])\n>>> A.is_positive_definite\nFalse\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[-1, 0], [0, -1]])\n>>> A.is_negative_definite\nTrue\n>>> A.is_negative_semidefinite\nTrue\n>>> A.is_indefinite\nFalse \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [2, -1]])\n>>> A.is_indefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [-2, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\nproperty is_lower\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(2, 2, [1, 0, 0, 1])\n>>> m\nMatrix([\n[1, 0],\n[0, 1]])\n>>> m.is_lower\nTrue \n```", "```py\n>>> m = Matrix(4, 3, [0, 0, 0, 2, 0, 0, 1, 4, 0, 6, 6, 5])\n>>> m\nMatrix([\n[0, 0, 0],\n[2, 0, 0],\n[1, 4, 0],\n[6, 6, 5]])\n>>> m.is_lower\nTrue \n```", "```py\n>>> from sympy.abc import x, y\n>>> m = Matrix(2, 2, [x**2 + y, y**2 + x, 0, x + y])\n>>> m\nMatrix([\n[x**2 + y, x + y**2],\n[       0,    x + y]])\n>>> m.is_lower\nFalse \n```", "```py\nproperty is_lower_hessenberg\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([[1, 2, 0, 0], [5, 2, 3, 0], [3, 4, 3, 7], [5, 6, 1, 1]])\n>>> a\nMatrix([\n[1, 2, 0, 0],\n[5, 2, 3, 0],\n[3, 4, 3, 7],\n[5, 6, 1, 1]])\n>>> a.is_lower_hessenberg\nTrue \n```", "```py\nproperty is_negative_definite\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> from sympy.plotting import plot3d\n>>> a, b = symbols('a b')\n>>> x = Matrix([a, b]) \n```", "```py\n>>> A = Matrix([[1, 0], [0, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, -1], [-1, 1]])\n>>> A.is_positive_definite\nFalse\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[-1, 0], [0, -1]])\n>>> A.is_negative_definite\nTrue\n>>> A.is_negative_semidefinite\nTrue\n>>> A.is_indefinite\nFalse \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [2, -1]])\n>>> A.is_indefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [-2, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\nproperty is_negative_semidefinite\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> from sympy.plotting import plot3d\n>>> a, b = symbols('a b')\n>>> x = Matrix([a, b]) \n```", "```py\n>>> A = Matrix([[1, 0], [0, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, -1], [-1, 1]])\n>>> A.is_positive_definite\nFalse\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[-1, 0], [0, -1]])\n>>> A.is_negative_definite\nTrue\n>>> A.is_negative_semidefinite\nTrue\n>>> A.is_indefinite\nFalse \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [2, -1]])\n>>> A.is_indefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [-2, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\nis_nilpotent()\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([[0, 0, 0], [1, 0, 0], [1, 1, 0]])\n>>> a.is_nilpotent()\nTrue \n```", "```py\n>>> a = Matrix([[1, 0, 1], [1, 0, 0], [1, 1, 0]])\n>>> a.is_nilpotent()\nFalse \n```", "```py\nproperty is_positive_definite\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> from sympy.plotting import plot3d\n>>> a, b = symbols('a b')\n>>> x = Matrix([a, b]) \n```", "```py\n>>> A = Matrix([[1, 0], [0, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, -1], [-1, 1]])\n>>> A.is_positive_definite\nFalse\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[-1, 0], [0, -1]])\n>>> A.is_negative_definite\nTrue\n>>> A.is_negative_semidefinite\nTrue\n>>> A.is_indefinite\nFalse \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [2, -1]])\n>>> A.is_indefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [-2, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\nproperty is_positive_semidefinite\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> from sympy.plotting import plot3d\n>>> a, b = symbols('a b')\n>>> x = Matrix([a, b]) \n```", "```py\n>>> A = Matrix([[1, 0], [0, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, -1], [-1, 1]])\n>>> A.is_positive_definite\nFalse\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[-1, 0], [0, -1]])\n>>> A.is_negative_definite\nTrue\n>>> A.is_negative_semidefinite\nTrue\n>>> A.is_indefinite\nFalse \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [2, -1]])\n>>> A.is_indefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\n>>> A = Matrix([[1, 2], [-2, 1]])\n>>> A.is_positive_definite\nTrue\n>>> A.is_positive_semidefinite\nTrue \n```", "```py\n>>> p = plot3d((x.T*A*x)[0, 0], (a, -1, 1), (b, -1, 1)) \n```", "```py\nproperty is_square\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([[1, 2, 3], [4, 5, 6]])\n>>> b = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> c = Matrix([])\n>>> a.is_square\nFalse\n>>> b.is_square\nTrue\n>>> c.is_square\nTrue \n```", "```py\nproperty is_strongly_diagonally_dominant\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[3, -2, 1], [1, -3, 2], [-1, 2, 4]])\n>>> A.is_strongly_diagonally_dominant\nFalse \n```", "```py\n>>> A = Matrix([[-2, 2, 1], [1, 3, 2], [1, -2, 0]])\n>>> A.is_strongly_diagonally_dominant\nFalse \n```", "```py\n>>> A = Matrix([[-4, 2, 1], [1, 6, 2], [1, -2, 5]])\n>>> A.is_strongly_diagonally_dominant\nTrue \n```", "```py\nis_symbolic()\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y\n>>> M = Matrix([[x, y], [1, 0]])\n>>> M.is_symbolic()\nTrue \n```", "```py\nis_symmetric(simplify=True)\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(2, 2, [0, 1, 1, 2])\n>>> m\nMatrix([\n[0, 1],\n[1, 2]])\n>>> m.is_symmetric()\nTrue \n```", "```py\n>>> m = Matrix(2, 2, [0, 1, 2, 0])\n>>> m\nMatrix([\n[0, 1],\n[2, 0]])\n>>> m.is_symmetric()\nFalse \n```", "```py\n>>> m = Matrix(2, 3, [0, 0, 0, 0, 0, 0])\n>>> m\nMatrix([\n[0, 0, 0],\n[0, 0, 0]])\n>>> m.is_symmetric()\nFalse \n```", "```py\n>>> from sympy.abc import x, y\n>>> m = Matrix(3, 3, [1, x**2 + 2*x + 1, y, (x + 1)**2, 2, 0, y, 0, 3])\n>>> m\nMatrix([\n[         1, x**2 + 2*x + 1, y],\n[(x + 1)**2,              2, 0],\n[         y,              0, 3]])\n>>> m.is_symmetric()\nTrue \n```", "```py\n>>> bool(m.is_symmetric(simplify=False))\nFalse\n>>> m1 = m.expand()\n>>> m1.is_symmetric(simplify=False)\nTrue \n```", "```py\nproperty is_upper\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(2, 2, [1, 0, 0, 1])\n>>> m\nMatrix([\n[1, 0],\n[0, 1]])\n>>> m.is_upper\nTrue \n```", "```py\n>>> m = Matrix(4, 3, [5, 1, 9, 0, 4, 6, 0, 0, 5, 0, 0, 0])\n>>> m\nMatrix([\n[5, 1, 9],\n[0, 4, 6],\n[0, 0, 5],\n[0, 0, 0]])\n>>> m.is_upper\nTrue \n```", "```py\n>>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n>>> m\nMatrix([\n[4, 2, 5],\n[6, 1, 1]])\n>>> m.is_upper\nFalse \n```", "```py\nproperty is_upper_hessenberg\n```", "```py\n>>> from sympy import Matrix\n>>> a = Matrix([[1, 4, 2, 3], [3, 4, 1, 7], [0, 2, 3, 4], [0, 0, 1, 3]])\n>>> a\nMatrix([\n[1, 4, 2, 3],\n[3, 4, 1, 7],\n[0, 2, 3, 4],\n[0, 0, 1, 3]])\n>>> a.is_upper_hessenberg\nTrue \n```", "```py\nproperty is_weakly_diagonally_dominant\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[3, -2, 1], [1, -3, 2], [-1, 2, 4]])\n>>> A.is_weakly_diagonally_dominant\nTrue \n```", "```py\n>>> A = Matrix([[-2, 2, 1], [1, 3, 2], [1, -2, 0]])\n>>> A.is_weakly_diagonally_dominant\nFalse \n```", "```py\n>>> A = Matrix([[-4, 2, 1], [1, 6, 2], [1, -2, 5]])\n>>> A.is_weakly_diagonally_dominant\nTrue \n```", "```py\nproperty is_zero_matrix\n```", "```py\n>>> from sympy import Matrix, zeros\n>>> from sympy.abc import x\n>>> a = Matrix([[0, 0], [0, 0]])\n>>> b = zeros(3, 4)\n>>> c = Matrix([[0, 1], [0, 0]])\n>>> d = Matrix([])\n>>> e = Matrix([[x, 0], [0, 0]])\n>>> a.is_zero_matrix\nTrue\n>>> b.is_zero_matrix\nTrue\n>>> c.is_zero_matrix\nFalse\n>>> d.is_zero_matrix\nTrue\n>>> e.is_zero_matrix \n```", "```py\niter_items()\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix([[0, 1], [2, 3]])\n>>> list(m.iter_items())\n[((0, 1), 1), ((1, 0), 2), ((1, 1), 3)] \n```", "```py\niter_values()\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix([[0, 1], [2, 3]])\n>>> list(m.iter_values())\n[1, 2, 3] \n```", "```py\njacobian(X)\n```", "```py\n>>> from sympy import sin, cos, Matrix\n>>> from sympy.abc import rho, phi\n>>> X = Matrix([rho*cos(phi), rho*sin(phi), rho**2])\n>>> Y = Matrix([rho, phi])\n>>> X.jacobian(Y)\nMatrix([\n[cos(phi), -rho*sin(phi)],\n[sin(phi),  rho*cos(phi)],\n[   2*rho,             0]])\n>>> X = Matrix([rho*cos(phi), rho*sin(phi)])\n>>> X.jacobian(Y)\nMatrix([\n[cos(phi), -rho*sin(phi)],\n[sin(phi),  rho*cos(phi)]]) \n```", "```py\nclassmethod jordan_block(size=None, eigenvalue=None, *, band='upper', **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x\n>>> Matrix.jordan_block(4, x)\nMatrix([\n[x, 1, 0, 0],\n[0, x, 1, 0],\n[0, 0, x, 1],\n[0, 0, 0, x]]) \n```", "```py\n>>> Matrix.jordan_block(4, x, band='lower')\nMatrix([\n[x, 0, 0, 0],\n[1, x, 0, 0],\n[0, 1, x, 0],\n[0, 0, 1, x]]) \n```", "```py\n>>> Matrix.jordan_block(size=4, eigenvalue=x)\nMatrix([\n[x, 1, 0, 0],\n[0, x, 1, 0],\n[0, 0, x, 1],\n[0, 0, 0, x]]) \n```", "```py\njordan_form(calc_transform=True, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[ 6,  5, -2, -3], [-3, -1,  3,  3], [ 2,  1, -2, -3], [-1,  1,  5,  5]])\n>>> P, J = M.jordan_form()\n>>> J\nMatrix([\n[2, 1, 0, 0],\n[0, 2, 0, 0],\n[0, 0, 2, 1],\n[0, 0, 0, 2]]) \n```", "```py\nkey2bounds(keys)\n```", "```py\nkey2ij(key)\n```", "```py\nleft_eigenvects(**flags)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[0, 1, 1], [1, 0, 0], [1, 1, 1]])\n>>> M.eigenvects()\n[(-1, 1, [Matrix([\n[-1],\n[ 1],\n[ 0]])]), (0, 1, [Matrix([\n[ 0],\n[-1],\n[ 1]])]), (2, 1, [Matrix([\n[2/3],\n[1/3],\n[  1]])])]\n>>> M.left_eigenvects()\n[(-1, 1, [Matrix([[-2, 1, 1]])]), (0, 1, [Matrix([[-1, -1, 1]])]), (2,\n1, [Matrix([[1, 1, 1]])])] \n```", "```py\nlimit(*args)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x, y\n>>> M = Matrix([[x, y], [1, 0]])\n>>> M.limit(x, 2)\nMatrix([\n[2, y],\n[1, 0]]) \n```", "```py\nlog(simplify=<function cancel>)\n```", "```py\n>>> from sympy import S, Matrix \n```", "```py\n>>> m = Matrix([[1, 1], [0, 1]])\n>>> m.log()\nMatrix([\n[0, 1],\n[0, 0]]) \n```", "```py\n>>> m = Matrix([[S(5)/4, S(3)/4], [S(3)/4, S(5)/4]])\n>>> m.log()\nMatrix([\n[     0, log(2)],\n[log(2),      0]]) \n```", "```py\n>>> m = Matrix([[S(3)/4, S(5)/4], [S(5)/4, S(3)/4]])\n>>> m.log()\nMatrix([\n[         I*pi/2, log(2) - I*pi/2],\n[log(2) - I*pi/2,          I*pi/2]]) \n```", "```py\n>>> m = Matrix(\n...     [[0, 0, 0, 1],\n...      [0, 0, 1, 0],\n...      [0, 1, 0, 0],\n...      [1, 0, 0, 0]])\n>>> m.log()\nMatrix([\n[ I*pi/2,       0,       0, -I*pi/2],\n[      0,  I*pi/2, -I*pi/2,       0],\n[      0, -I*pi/2,  I*pi/2,       0],\n[-I*pi/2,       0,       0,  I*pi/2]]) \n```", "```py\nlower_triangular(k=0)\n```", "```py\n>>> from sympy import ones\n>>> A = ones(4)\n>>> A.lower_triangular()\nMatrix([\n[1, 0, 0, 0],\n[1, 1, 0, 0],\n[1, 1, 1, 0],\n[1, 1, 1, 1]]) \n```", "```py\n>>> A.lower_triangular(-2)\nMatrix([\n[0, 0, 0, 0],\n[0, 0, 0, 0],\n[1, 0, 0, 0],\n[1, 1, 0, 0]]) \n```", "```py\n>>> A.lower_triangular(1)\nMatrix([\n[1, 1, 0, 0],\n[1, 1, 1, 0],\n[1, 1, 1, 1],\n[1, 1, 1, 1]]) \n```", "```py\nlower_triangular_solve(rhs)\n```", "```py\nminor(i, j, method='berkowitz')\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> M.minor(1, 1)\n-12 \n```", "```py\nminor_submatrix(i, j)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> M.minor_submatrix(1, 1)\nMatrix([\n[1, 3],\n[7, 9]]) \n```", "```py\nmultiply(other, dotprodsimp=None)\n```", "```py\nmultiply_elementwise(other)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[0, 1, 2], [3, 4, 5]])\n>>> B = Matrix([[1, 10, 100], [100, 10, 1]])\n>>> A.multiply_elementwise(B)\nMatrix([\n[  0, 10, 200],\n[300, 40,   5]]) \n```", "```py\nn(*args, **kwargs)\n```", "```py\nnorm(ord=None)\n```", "```py\n>>> from sympy import Matrix, Symbol, trigsimp, cos, sin, oo\n>>> x = Symbol('x', real=True)\n>>> v = Matrix([cos(x), sin(x)])\n>>> trigsimp( v.norm() )\n1\n>>> v.norm(10)\n(sin(x)**10 + cos(x)**10)**(1/10)\n>>> A = Matrix([[1, 1], [1, 1]])\n>>> A.norm(1) # maximum sum of absolute values of A is 2\n2\n>>> A.norm(2) # Spectral norm (max of |Ax|/|x| under 2-vector-norm)\n2\n>>> A.norm(-2) # Inverse spectral norm (smallest singular value)\n0\n>>> A.norm() # Frobenius Norm\n2\n>>> A.norm(oo) # Infinity Norm\n2\n>>> Matrix([1, -2]).norm(oo)\n2\n>>> Matrix([-1, 2]).norm(-oo)\n1 \n```", "```py\nnormalized(iszerofunc=<function _iszero>)\n```", "```py\nnullspace(simplify=False, iszerofunc=<function _iszero>)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [1, 3, 0, -2, -6, 0, 3, 9, 6])\n>>> M\nMatrix([\n[ 1,  3, 0],\n[-2, -6, 0],\n[ 3,  9, 6]])\n>>> M.nullspace()\n[Matrix([\n[-3],\n[ 1],\n[ 0]])] \n```", "```py\nclassmethod ones(rows, cols=None, **kwargs)\n```", "```py\nclassmethod orthogonalize(*vecs, **kwargs)\n```", "```py\n>>> from sympy import I, Matrix\n>>> v = [Matrix([1, I]), Matrix([1, -I])]\n>>> Matrix.orthogonalize(*v)\n[Matrix([\n[1],\n[I]]), Matrix([\n[ 1],\n[-I]])] \n```", "```py\nper()\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> M.per()\n450\n>>> M = Matrix([1, 5, 7])\n>>> M.per()\n13 \n```", "```py\npermute(perm, orientation='rows', direction='forward')\n```", "```py\n>>> from sympy import eye\n>>> M = eye(3)\n>>> M.permute([[0, 1], [0, 2]], orientation='rows', direction='forward')\nMatrix([\n[0, 0, 1],\n[1, 0, 0],\n[0, 1, 0]]) \n```", "```py\n>>> from sympy import eye\n>>> M = eye(3)\n>>> M.permute([[0, 1], [0, 2]], orientation='rows', direction='backward')\nMatrix([\n[0, 1, 0],\n[0, 0, 1],\n[1, 0, 0]]) \n```", "```py\npermuteBkwd(perm)\n```", "```py\npermuteFwd(perm)\n```", "```py\npermute_cols(swaps, direction='forward')\n```", "```py\npermute_rows(swaps, direction='forward')\n```", "```py\npinv(method='RD')\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2, 3], [4, 5, 6]])\n>>> A.pinv()\nMatrix([\n[-17/18,  4/9],\n[  -1/9,  1/9],\n[ 13/18, -2/9]]) \n```", "```py\n>>> B = A.pinv(method='ED')\n>>> B.simplify()\n>>> B\nMatrix([\n[-17/18,  4/9],\n[  -1/9,  1/9],\n[ 13/18, -2/9]]) \n```", "```py\npinv_solve(B, arbitrary_matrix=None)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2, 3], [4, 5, 6]])\n>>> B = Matrix([7, 8])\n>>> A.pinv_solve(B)\nMatrix([\n[ _w0_0/6 - _w1_0/3 + _w2_0/6 - 55/18],\n[-_w0_0/3 + 2*_w1_0/3 - _w2_0/3 + 1/9],\n[ _w0_0/6 - _w1_0/3 + _w2_0/6 + 59/18]])\n>>> A.pinv_solve(B, arbitrary_matrix=Matrix([0, 0, 0]))\nMatrix([\n[-55/18],\n[   1/9],\n[ 59/18]]) \n```", "```py\npow(exp, method=None)\n```", "```py\nprint_nonzero(symb='X')\n```", "```py\n>>> from sympy import Matrix, eye\n>>> m = Matrix(2, 3, lambda i, j: i*3+j)\n>>> m\nMatrix([\n[0, 1, 2],\n[3, 4, 5]])\n>>> m.print_nonzero()\n[ XX]\n[XXX]\n>>> m = eye(4)\n>>> m.print_nonzero(\"x\")\n[x   ]\n[ x  ]\n[  x ]\n[   x] \n```", "```py\nproject(v)\n```", "```py\n>>> from sympy import Matrix, S, sqrt\n>>> V = Matrix([sqrt(3)/2, S.Half])\n>>> x = Matrix([[1, 0]])\n>>> V.project(x)\nMatrix([[sqrt(3)/2, 0]])\n>>> V.project(-x)\nMatrix([[sqrt(3)/2, 0]]) \n```", "```py\nrank(iszerofunc=<function _iszero>, simplify=False)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x\n>>> m = Matrix([[1, 2], [x, 1 - 1/x]])\n>>> m.rank()\n2\n>>> n = Matrix(3, 3, range(1, 10))\n>>> n.rank()\n2 \n```", "```py\nrank_decomposition(iszerofunc=<function _iszero>, simplify=False)\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([\n...     [1, 3, 1, 4],\n...     [2, 7, 3, 9],\n...     [1, 5, 3, 1],\n...     [1, 2, 0, 8]\n... ])\n>>> C, F = A.rank_decomposition()\n>>> C\nMatrix([\n[1, 3, 4],\n[2, 7, 9],\n[1, 5, 1],\n[1, 2, 8]])\n>>> F\nMatrix([\n[1, 0, -2, 0],\n[0, 1,  1, 0],\n[0, 0,  0, 1]])\n>>> C * F == A\nTrue \n```", "```py\nrefine(assumptions=True)\n```", "```py\n>>> from sympy import Symbol, Matrix, Abs, sqrt, Q\n>>> x = Symbol('x')\n>>> Matrix([[Abs(x)**2, sqrt(x**2)],[sqrt(x**2), Abs(x)**2]])\nMatrix([\n[ Abs(x)**2, sqrt(x**2)],\n[sqrt(x**2),  Abs(x)**2]])\n>>> _.refine(Q.real(x))\nMatrix([\n[  x**2, Abs(x)],\n[Abs(x),   x**2]]) \n```", "```py\nreplace(F, G, map=False, simultaneous=True, exact=None)\n```", "```py\n>>> from sympy import symbols, Function, Matrix\n>>> F, G = symbols('F, G', cls=Function)\n>>> M = Matrix(2, 2, lambda i, j: F(i+j)) ; M\nMatrix([\n[F(0), F(1)],\n[F(1), F(2)]])\n>>> N = M.replace(F,G)\n>>> N\nMatrix([\n[G(0), G(1)],\n[G(1), G(2)]]) \n```", "```py\nreshape(rows, cols)\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix(2, 3, lambda i, j: 1)\n>>> m\nMatrix([\n[1, 1, 1],\n[1, 1, 1]])\n>>> m.reshape(1, 6)\nMatrix([[1, 1, 1, 1, 1, 1]])\n>>> m.reshape(3, 2)\nMatrix([\n[1, 1],\n[1, 1],\n[1, 1]]) \n```", "```py\nrmultiply(other, dotprodsimp=None)\n```", "```py\nrot90(k=1)\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> A = Matrix(2, 2, symbols('a:d'))\n>>> A\nMatrix([\n[a, b],\n[c, d]]) \n```", "```py\n>>> A.rot90(1)\nMatrix([\n[c, a],\n[d, b]]) \n```", "```py\n>>> A.rot90(-2)\nMatrix([\n[d, c],\n[b, a]]) \n```", "```py\nrow(i)\n```", "```py\n>>> from sympy import eye\n>>> eye(2).row(0)\nMatrix([[1, 0]]) \n```", "```py\nrow_del(row)\n```", "```py\nrow_insert(pos, other)\n```", "```py\n>>> from sympy import zeros, ones\n>>> M = zeros(3)\n>>> V = ones(1, 3)\n>>> M.row_insert(1, V)\nMatrix([\n[0, 0, 0],\n[1, 1, 1],\n[0, 0, 0],\n[0, 0, 0]]) \n```", "```py\nrow_join(other)\n```", "```py\n>>> from sympy import zeros, ones\n>>> M = zeros(3)\n>>> V = ones(3, 1)\n>>> M.row_join(V)\nMatrix([\n[0, 0, 0, 1],\n[0, 0, 0, 1],\n[0, 0, 0, 1]]) \n```", "```py\nrowspace(simplify=False)\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix(3, 3, [1, 3, 0, -2, -6, 0, 3, 9, 6])\n>>> M\nMatrix([\n[ 1,  3, 0],\n[-2, -6, 0],\n[ 3,  9, 6]])\n>>> M.rowspace()\n[Matrix([[1, 3, 0]]), Matrix([[0, 0, 6]])] \n```", "```py\nrref(iszerofunc=<function _iszero>, simplify=False, pivots=True, normalize_last=True)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.abc import x\n>>> m = Matrix([[1, 2], [x, 1 - 1/x]])\n>>> m.rref()\n(Matrix([\n[1, 0],\n[0, 1]]), (0, 1))\n>>> rref_matrix, rref_pivots = m.rref()\n>>> rref_matrix\nMatrix([\n[1, 0],\n[0, 1]])\n>>> rref_pivots\n(0, 1) \n```", "```py\n>>> m = Matrix([[0.9, -0.1, -0.2, 0], [-0.8, 0.9, -0.4, 0], [-0.1, -0.8, 0.6, 0]])\n>>> m.rref()\n(Matrix([\n[1, 0, 0, 0],\n[0, 1, 0, 0],\n[0, 0, 1, 0]]), (0, 1, 2))\n>>> m.rref(iszerofunc=lambda x:abs(x)<1e-9)\n(Matrix([\n[1, 0, -0.301369863013699, 0],\n[0, 1, -0.712328767123288, 0],\n[0, 0,         0,          0]]), (0, 1)) \n```", "```py\nrref_rhs(rhs)\n```", "```py\n>>> from sympy import Matrix, symbols\n>>> r1, r2 = symbols('r1 r2')\n>>> Matrix([[1, 1], [2, 1]]).rref_rhs(Matrix([r1, r2]))\n(Matrix([\n[1, 0],\n[0, 1]]), Matrix([\n[ -r1 + r2],\n[2*r1 - r2]])) \n```", "```py\nproperty shape\n```", "```py\n>>> from sympy import zeros\n>>> M = zeros(2, 3)\n>>> M.shape\n(2, 3)\n>>> M.rows\n2\n>>> M.cols\n3 \n```", "```py\nsimplify(**kwargs)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import SparseMatrix, sin, cos\n>>> SparseMatrix(1, 1, [x*sin(y)**2 + x*cos(y)**2])\nMatrix([[x*sin(y)**2 + x*cos(y)**2]])\n>>> _.simplify()\nMatrix([[x]]) \n```", "```py\nsingular_value_decomposition()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[1, 2],[2,1]])\n>>> U, S, V = A.singular_value_decomposition()\n>>> U\nMatrix([\n[ sqrt(2)/2, sqrt(2)/2],\n[-sqrt(2)/2, sqrt(2)/2]])\n>>> S\nMatrix([\n[1, 0],\n[0, 3]])\n>>> V\nMatrix([\n[-sqrt(2)/2, sqrt(2)/2],\n[ sqrt(2)/2, sqrt(2)/2]]) \n```", "```py\n>>> U * U.H\nMatrix([\n[1, 0],\n[0, 1]])\n>>> U.H * U\nMatrix([\n[1, 0],\n[0, 1]]) \n```", "```py\n>>> V * V.H\nMatrix([\n[1, 0],\n[0, 1]])\n>>> V.H * V\nMatrix([\n[1, 0],\n[0, 1]])\n>>> A == U * S * V.H\nTrue \n```", "```py\n>>> C = Matrix([\n...         [1, 0, 0, 0, 2],\n...         [0, 0, 3, 0, 0],\n...         [0, 0, 0, 0, 0],\n...         [0, 2, 0, 0, 0],\n...     ])\n>>> U, S, V = C.singular_value_decomposition() \n```", "```py\n>>> V.H * V\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> V * V.H\nMatrix([\n[1/5, 0, 0, 0, 2/5],\n[  0, 1, 0, 0,   0],\n[  0, 0, 1, 0,   0],\n[  0, 0, 0, 0,   0],\n[2/5, 0, 0, 0, 4/5]]) \n```", "```py\n>>> V_aug = V.row_join(Matrix([[0,0,0,0,1],\n... [0,0,0,1,0]]).H)\n>>> V_aug = V_aug.QRdecomposition()[0]\n>>> V_aug\nMatrix([\n[0,   sqrt(5)/5, 0, -2*sqrt(5)/5, 0],\n[1,           0, 0,            0, 0],\n[0,           0, 1,            0, 0],\n[0,           0, 0,            0, 1],\n[0, 2*sqrt(5)/5, 0,    sqrt(5)/5, 0]])\n>>> V_aug.H * V_aug\nMatrix([\n[1, 0, 0, 0, 0],\n[0, 1, 0, 0, 0],\n[0, 0, 1, 0, 0],\n[0, 0, 0, 1, 0],\n[0, 0, 0, 0, 1]])\n>>> V_aug * V_aug.H\nMatrix([\n[1, 0, 0, 0, 0],\n[0, 1, 0, 0, 0],\n[0, 0, 1, 0, 0],\n[0, 0, 0, 1, 0],\n[0, 0, 0, 0, 1]]) \n```", "```py\n>>> U_aug = U.row_join(Matrix([0,0,1,0]))\n>>> U_aug = U_aug.QRdecomposition()[0]\n>>> U_aug\nMatrix([\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1],\n[1, 0, 0, 0]]) \n```", "```py\n>>> U_aug.H * U_aug\nMatrix([\n[1, 0, 0, 0],\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1]])\n>>> U_aug * U_aug.H\nMatrix([\n[1, 0, 0, 0],\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1]]) \n```", "```py\n>>> S_aug = S.col_join(Matrix([[0,0,0]]))\n>>> S_aug = S_aug.row_join(Matrix([[0,0,0,0],\n... [0,0,0,0]]).H)\n>>> S_aug\nMatrix([\n[2,       0, 0, 0, 0],\n[0, sqrt(5), 0, 0, 0],\n[0,       0, 3, 0, 0],\n[0,       0, 0, 0, 0]]) \n```", "```py\n>>> U_aug * S_aug * V_aug.H == C\nTrue \n```", "```py\nsingular_values()\n```", "```py\n>>> from sympy import Matrix, Symbol\n>>> x = Symbol('x', real=True)\n>>> M = Matrix([[0, 1, 0], [0, x, 0], [-1, 0, 0]])\n>>> M.singular_values()\n[sqrt(x**2 + 1), 1, 0] \n```", "```py\nsolve(rhs, method='GJ')\n```", "```py\nsolve_least_squares(rhs, method='CH')\n```", "```py\n>>> from sympy import Matrix, ones\n>>> A = Matrix([1, 2, 3])\n>>> B = Matrix([2, 3, 4])\n>>> S = Matrix(A.row_join(B))\n>>> S\nMatrix([\n[1, 2],\n[2, 3],\n[3, 4]]) \n```", "```py\n>>> r = S*Matrix([2, 3]); r\nMatrix([\n[ 8],\n[13],\n[18]]) \n```", "```py\n>>> xy = S.solve_least_squares(Matrix([8, 14, 18])); xy\nMatrix([\n[ 5/3],\n[10/3]]) \n```", "```py\n>>> S*xy - r\nMatrix([\n[1/3],\n[1/3],\n[1/3]])\n>>> _.norm().n(2)\n0.58 \n```", "```py\n>>> xy += ones(2, 1)/10\n>>> (S*xy - r).norm().n(2)\n1.5 \n```", "```py\nstrongly_connected_components()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([\n...     [44, 0, 0, 0, 43, 0, 45, 0, 0],\n...     [0, 66, 62, 61, 0, 68, 0, 60, 67],\n...     [0, 0, 22, 21, 0, 0, 0, 20, 0],\n...     [0, 0, 12, 11, 0, 0, 0, 10, 0],\n...     [34, 0, 0, 0, 33, 0, 35, 0, 0],\n...     [0, 86, 82, 81, 0, 88, 0, 80, 87],\n...     [54, 0, 0, 0, 53, 0, 55, 0, 0],\n...     [0, 0, 2, 1, 0, 0, 0, 0, 0],\n...     [0, 76, 72, 71, 0, 78, 0, 70, 77]])\n>>> A.strongly_connected_components()\n[[0, 4, 6], [2, 3, 7], [1, 5, 8]] \n```", "```py\nstrongly_connected_components_decomposition(lower=True)\n```", "```py\n>>> from sympy import Matrix, pprint\n>>> A = Matrix([\n...     [44, 0, 0, 0, 43, 0, 45, 0, 0],\n...     [0, 66, 62, 61, 0, 68, 0, 60, 67],\n...     [0, 0, 22, 21, 0, 0, 0, 20, 0],\n...     [0, 0, 12, 11, 0, 0, 0, 10, 0],\n...     [34, 0, 0, 0, 33, 0, 35, 0, 0],\n...     [0, 86, 82, 81, 0, 88, 0, 80, 87],\n...     [54, 0, 0, 0, 53, 0, 55, 0, 0],\n...     [0, 0, 2, 1, 0, 0, 0, 0, 0],\n...     [0, 76, 72, 71, 0, 78, 0, 70, 77]]) \n```", "```py\n>>> P, B = A.strongly_connected_components_decomposition()\n>>> pprint(P)\nPermutationMatrix((8)(1 4 3 2 6)(5 7))\n>>> pprint(B)\n[[44  43  45]   [0  0  0]     [0  0  0]  ]\n[[          ]   [       ]     [       ]  ]\n[[34  33  35]   [0  0  0]     [0  0  0]  ]\n[[          ]   [       ]     [       ]  ]\n[[54  53  55]   [0  0  0]     [0  0  0]  ]\n[                                        ]\n[ [0  0  0]    [22  21  20]   [0  0  0]  ]\n[ [       ]    [          ]   [       ]  ]\n[ [0  0  0]    [12  11  10]   [0  0  0]  ]\n[ [       ]    [          ]   [       ]  ]\n[ [0  0  0]    [2   1   0 ]   [0  0  0]  ]\n[                                        ]\n[ [0  0  0]    [62  61  60]  [66  68  67]]\n[ [       ]    [          ]  [          ]]\n[ [0  0  0]    [82  81  80]  [86  88  87]]\n[ [       ]    [          ]  [          ]]\n[ [0  0  0]    [72  71  70]  [76  78  77]] \n```", "```py\n>>> P = P.as_explicit()\n>>> B = B.as_explicit()\n>>> P.T * B * P == A\nTrue \n```", "```py\n>>> P, B = A.strongly_connected_components_decomposition(lower=False)\n>>> pprint(P)\nPermutationMatrix((0 1 5 7 4 3 2 8 6))\n>>> pprint(B)\n[[66  68  67]  [62  61  60]   [0  0  0]  ]\n[[          ]  [          ]   [       ]  ]\n[[86  88  87]  [82  81  80]   [0  0  0]  ]\n[[          ]  [          ]   [       ]  ]\n[[76  78  77]  [72  71  70]   [0  0  0]  ]\n[                                        ]\n[ [0  0  0]    [22  21  20]   [0  0  0]  ]\n[ [       ]    [          ]   [       ]  ]\n[ [0  0  0]    [12  11  10]   [0  0  0]  ]\n[ [       ]    [          ]   [       ]  ]\n[ [0  0  0]    [2   1   0 ]   [0  0  0]  ]\n[                                        ]\n[ [0  0  0]     [0  0  0]    [44  43  45]]\n[ [       ]     [       ]    [          ]]\n[ [0  0  0]     [0  0  0]    [34  33  35]]\n[ [       ]     [       ]    [          ]]\n[ [0  0  0]     [0  0  0]    [54  53  55]] \n```", "```py\n>>> P = P.as_explicit()\n>>> B = B.as_explicit()\n>>> P.T * B * P == A\nTrue \n```", "```py\nsubs(*args, **kwargs)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import SparseMatrix, Matrix\n>>> SparseMatrix(1, 1, [x])\nMatrix([[x]])\n>>> _.subs(x, y)\nMatrix([[y]])\n>>> Matrix(_).subs(y, x)\nMatrix([[x]]) \n```", "```py\ntable(printer, rowstart='[', rowend=']', rowsep='\\n', colsep=', ', align='right')\n```", "```py\n>>> from sympy import Matrix, StrPrinter\n>>> M = Matrix([[1, 2], [-33, 4]])\n>>> printer = StrPrinter()\n>>> M.table(printer)\n'[  1, 2]\\n[-33, 4]'\n>>> print(M.table(printer))\n[  1, 2]\n[-33, 4]\n>>> print(M.table(printer, rowsep=',\\n'))\n[  1, 2],\n[-33, 4]\n>>> print('[%s]' % M.table(printer, rowsep=',\\n'))\n[[  1, 2],\n[-33, 4]]\n>>> print(M.table(printer, colsep=' '))\n[  1 2]\n[-33 4]\n>>> print(M.table(printer, align='center'))\n[ 1 , 2]\n[-33, 4]\n>>> print(M.table(printer, rowstart='{', rowend='}'))\n{  1, 2}\n{-33, 4} \n```", "```py\ntodod()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[0, 1],[0, 3]])\n>>> A\nMatrix([\n[0, 1],\n[0, 3]])\n>>> A.todod()\n{0: {1: 1}, 1: {1: 3}} \n```", "```py\ntodok()\n```", "```py\n>>> from sympy import Matrix\n>>> M = Matrix.eye(3)\n>>> M.todok()\n{(0, 0): 1, (1, 1): 1, (2, 2): 1} \n```", "```py\ntolist()\n```", "```py\n>>> from sympy import Matrix, ones\n>>> m = Matrix(3, 3, range(9))\n>>> m\nMatrix([\n[0, 1, 2],\n[3, 4, 5],\n[6, 7, 8]])\n>>> m.tolist()\n[[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n>>> ones(3, 0).tolist()\n[[], [], []] \n```", "```py\n>>> ones(0, 3).tolist()\n[] \n```", "```py\ntrace()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix(2, 2, [1, 2, 3, 4])\n>>> A.trace()\n5 \n```", "```py\ntranspose()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix(2, 2, [1, 2, 3, 4])\n>>> A.transpose()\nMatrix([\n[1, 3],\n[2, 4]]) \n```", "```py\n>>> from sympy import Matrix, I\n>>> m=Matrix(((1, 2+I), (3, 4)))\n>>> m\nMatrix([\n[1, 2 + I],\n[3,     4]])\n>>> m.transpose()\nMatrix([\n[    1, 3],\n[2 + I, 4]])\n>>> m.T == m.transpose()\nTrue \n```", "```py\nupper_hessenberg_decomposition()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([\n...     [1,2,3],\n...     [-3,5,6],\n...     [4,-8,9],\n... ])\n>>> H, P = A.upper_hessenberg_decomposition()\n>>> H\nMatrix([\n[1,    6/5,    17/5],\n[5, 213/25, -134/25],\n[0, 216/25,  137/25]])\n>>> P\nMatrix([\n[1,    0,   0],\n[0, -3/5, 4/5],\n[0,  4/5, 3/5]])\n>>> P * H * P.H == A\nTrue \n```", "```py\nupper_triangular(k=0)\n```", "```py\n>>> from sympy import ones\n>>> A = ones(4)\n>>> A.upper_triangular()\nMatrix([\n[1, 1, 1, 1],\n[0, 1, 1, 1],\n[0, 0, 1, 1],\n[0, 0, 0, 1]]) \n```", "```py\n>>> A.upper_triangular(2)\nMatrix([\n[0, 0, 1, 1],\n[0, 0, 0, 1],\n[0, 0, 0, 0],\n[0, 0, 0, 0]]) \n```", "```py\n>>> A.upper_triangular(-1)\nMatrix([\n[1, 1, 1, 1],\n[1, 1, 1, 1],\n[0, 1, 1, 1],\n[0, 0, 1, 1]]) \n```", "```py\nupper_triangular_solve(rhs)\n```", "```py\nvalues()\n```", "```py\n>>> from sympy import Matrix\n>>> m = Matrix([[0, 1], [2, 3]])\n>>> m.values()\n[1, 2, 3] \n```", "```py\nvec()\n```", "```py\n>>> from sympy import Matrix\n>>> m=Matrix([[1, 3], [2, 4]])\n>>> m\nMatrix([\n[1, 3],\n[2, 4]])\n>>> m.vec()\nMatrix([\n[1],\n[2],\n[3],\n[4]]) \n```", "```py\nvech(diagonal=True, check_symmetry=True)\n```", "```py\n>>> from sympy import Matrix\n>>> m=Matrix([[1, 2], [2, 3]])\n>>> m\nMatrix([\n[1, 2],\n[2, 3]])\n>>> m.vech()\nMatrix([\n[1],\n[2],\n[3]])\n>>> m.vech(diagonal=False)\nMatrix([[2]]) \n```", "```py\nvee()\n```", "```py\n>>> from sympy import Matrix\n>>> A = Matrix([[0, -3, 2], [3, 0, -1], [-2, 1, 0]])\n>>> a = A.vee()\n>>> a\nMatrix([\n[1],\n[2],\n[3]]) \n```", "```py\n>>> b = Matrix([3, 2, 1])\n>>> A * b\nMatrix([\n[-4],\n[ 8],\n[-4]]) \n```", "```py\n>>> a.cross(b)\nMatrix([\n[-4],\n[ 8],\n[-4]]) \n```", "```py\n>>> from sympy import rot_ccw_axis3, trigsimp\n>>> from sympy.physics.mechanics import dynamicsymbols\n>>> theta = dynamicsymbols('theta')\n>>> R = rot_ccw_axis3(theta)\n>>> R\nMatrix([\n[cos(theta(t)), -sin(theta(t)), 0],\n[sin(theta(t)),  cos(theta(t)), 0],\n[            0,              0, 1]]) \n```", "```py\n>>> Omega = R.T * R.diff()\n>>> Omega = trigsimp(Omega)\n>>> Omega.vee()\nMatrix([\n[                      0],\n[                      0],\n[Derivative(theta(t), t)]]) \n```", "```py\nclassmethod vstack(*args)\n```", "```py\n>>> from sympy import Matrix, eye\n>>> Matrix.vstack(eye(2), 2*eye(2))\nMatrix([\n[1, 0],\n[0, 1],\n[2, 0],\n[0, 2]]) \n```", "```py\nclassmethod wilkinson(n, **kwargs)\n```", "```py\n>>> from sympy import Matrix\n>>> wminus, wplus = Matrix.wilkinson(3)\n>>> wminus\nMatrix([\n[-3,  1,  0, 0, 0, 0, 0],\n[ 1, -2,  1, 0, 0, 0, 0],\n[ 0,  1, -1, 1, 0, 0, 0],\n[ 0,  0,  1, 0, 1, 0, 0],\n[ 0,  0,  0, 1, 1, 1, 0],\n[ 0,  0,  0, 0, 1, 2, 1],\n[ 0,  0,  0, 0, 0, 1, 3]])\n>>> wplus\nMatrix([\n[3, 1, 0, 0, 0, 0, 0],\n[1, 2, 1, 0, 0, 0, 0],\n[0, 1, 1, 1, 0, 0, 0],\n[0, 0, 1, 0, 1, 0, 0],\n[0, 0, 0, 1, 1, 1, 0],\n[0, 0, 0, 0, 1, 2, 1],\n[0, 0, 0, 0, 0, 1, 3]]) \n```", "```py\nxreplace(rule)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import SparseMatrix, Matrix\n>>> SparseMatrix(1, 1, [x])\nMatrix([[x]])\n>>> _.xreplace({x: y})\nMatrix([[y]])\n>>> Matrix(_).xreplace({y: x})\nMatrix([[x]]) \n```", "```py\nclassmethod zeros(rows, cols=None, **kwargs)\n```", "```py\nclass sympy.matrices.matrixbase.MatrixError\n```", "```py\nclass sympy.matrices.matrixbase.ShapeError\n```", "```py\nclass sympy.matrices.matrixbase.NonSquareMatrixError\n```", "```py\nsympy.matrices.dense.matrix_multiply_elementwise(A, B)\n```", "```py\n>>> from sympy import Matrix, matrix_multiply_elementwise\n>>> A = Matrix([[0, 1, 2], [3, 4, 5]])\n>>> B = Matrix([[1, 10, 100], [100, 10, 1]])\n>>> matrix_multiply_elementwise(A, B)\nMatrix([\n[  0, 10, 200],\n[300, 40,   5]]) \n```", "```py\nsympy.matrices.dense.zeros(*args, **kwargs)\n```", "```py\nsympy.matrices.dense.ones(*args, **kwargs)\n```", "```py\nsympy.matrices.dense.eye(*args, **kwargs)\n```", "```py\nsympy.matrices.dense.diag(*values, strict=True, unpack=False, **kwargs)\n```", "```py\n>>> from sympy import diag \n```", "```py\n>>> diag([1, 2, 3], unpack=True)  # = diag(1,2,3) or diag(*[1,2,3])\nMatrix([\n[1, 0, 0],\n[0, 2, 0],\n[0, 0, 3]]) \n```", "```py\n>>> diag([1, 2, 3])  # a column vector\nMatrix([\n[1],\n[2],\n[3]]) \n```", "```py\nsympy.matrices.dense.jordan_cell(eigenval, n)\n```", "```py\n>>> from sympy import jordan_cell\n>>> from sympy.abc import x\n>>> jordan_cell(x, 4)\nMatrix([\n[x, 1, 0, 0],\n[0, x, 1, 0],\n[0, 0, x, 1],\n[0, 0, 0, x]]) \n```", "```py\nsympy.matrices.dense.hessian(f, varlist, constraints=())\n```", "```py\n>>> from sympy import Function, hessian, pprint\n>>> from sympy.abc import x, y\n>>> f = Function('f')(x, y)\n>>> g1 = Function('g')(x, y)\n>>> g2 = x**2 + 3*y\n>>> pprint(hessian(f, (x, y), [g1, g2]))\n[                   d               d            ]\n[     0        0    --(g(x, y))     --(g(x, y))  ]\n[                   dx              dy           ]\n[                                                ]\n[     0        0        2*x              3       ]\n[                                                ]\n[                     2               2          ]\n[d                   d               d           ]\n[--(g(x, y))  2*x   ---(f(x, y))   -----(f(x, y))]\n[dx                   2            dy dx         ]\n[                   dx                           ]\n[                                                ]\n[                     2               2          ]\n[d                   d               d           ]\n[--(g(x, y))   3   -----(f(x, y))   ---(f(x, y)) ]\n[dy                dy dx              2          ]\n[                                   dy           ] \n```", "```py\nsympy.matrices.dense.GramSchmidt(vlist, orthonormal=False)\n```", "```py\nsympy.matrices.dense.wronskian(functions, var, method='bareiss')\n```", "```py\n | f1       f2        ...   fn      |\n                 | f1'      f2'       ...   fn'     |\n                 |  .        .        .      .      |\nW(f1, ..., fn) = |  .        .         .     .      |\n                 |  .        .          .    .      |\n                 |  (n)      (n)            (n)     |\n                 | D   (f1) D   (f2)  ...  D   (fn) | \n```", "```py\nsympy.matrices.dense.casoratian(seqs, n, zero=True)\n```", "```py\n+  a(n)     b(n)     . . . z(n)     +\n|  a(n+1)   b(n+1)   . . . z(n+1)   |\n|    .         .     .        .     |\n|    .         .       .      .     |\n|    .         .         .    .     |\n+  a(n+k-1) b(n+k-1) . . . z(n+k-1) + \n```", "```py\n>>> from sympy import Symbol, casoratian, factorial\n>>> n = Symbol('n', integer=True) \n```", "```py\n>>> casoratian([2**n, factorial(n)], n) != 0\nTrue \n```", "```py\nsympy.matrices.dense.randMatrix(r, c=None, min=0, max=99, seed=None, symmetric=False, percent=100, prng=None)\n```", "```py\n>>> from sympy import randMatrix\n>>> randMatrix(3) \n[25, 45, 27]\n[44, 54,  9]\n[23, 96, 46]\n>>> randMatrix(3, 2) \n[87, 29]\n[23, 37]\n[90, 26]\n>>> randMatrix(3, 3, 0, 2) \n[0, 2, 0]\n[2, 0, 1]\n[0, 0, 1]\n>>> randMatrix(3, symmetric=True) \n[85, 26, 29]\n[26, 71, 43]\n[29, 43, 57]\n>>> A = randMatrix(3, seed=1)\n>>> B = randMatrix(3, seed=2)\n>>> A == B\nFalse\n>>> A == randMatrix(3, seed=1)\nTrue\n>>> randMatrix(3, symmetric=True, percent=50) \n[77, 70,  0],\n[70,  0,  0],\n[ 0,  0, 88] \n```", "```py\nsympy.matrices.dense.rot_givens(i, j, theta, dim=3)\n```", "```py\n>>> from sympy import pi, rot_givens \n```", "```py\n>>> rot_givens(1, 0, pi/3)\nMatrix([\n[      1/2, -sqrt(3)/2, 0],\n[sqrt(3)/2,        1/2, 0],\n[        0,          0, 1]]) \n```", "```py\n>>> rot_givens(1, 0, pi/2)\nMatrix([\n[0, -1, 0],\n[1,  0, 0],\n[0,  0, 1]]) \n```", "```py\n>>> rot_givens(1, 0, pi/2, dim=4)\nMatrix([\n[0, -1, 0, 0],\n[1,  0, 0, 0],\n[0,  0, 1, 0],\n[0,  0, 0, 1]]) \n```", "```py\nsympy.matrices.dense.rot_axis1(theta)\n```", "```py\n>>> from sympy import pi, rot_axis1 \n```", "```py\n>>> theta = pi/3\n>>> rot_axis1(theta)\nMatrix([\n[1,          0,         0],\n[0,        1/2, sqrt(3)/2],\n[0, -sqrt(3)/2,       1/2]]) \n```", "```py\n>>> rot_axis1(pi/2)\nMatrix([\n[1,  0, 0],\n[0,  0, 1],\n[0, -1, 0]]) \n```", "```py\nsympy.matrices.dense.rot_axis2(theta)\n```", "```py\n>>> from sympy import pi, rot_axis2 \n```", "```py\n>>> theta = pi/3\n>>> rot_axis2(theta)\nMatrix([\n[      1/2, 0, -sqrt(3)/2],\n[        0, 1,          0],\n[sqrt(3)/2, 0,        1/2]]) \n```", "```py\n>>> rot_axis2(pi/2)\nMatrix([\n[0, 0, -1],\n[0, 1,  0],\n[1, 0,  0]]) \n```", "```py\nsympy.matrices.dense.rot_axis3(theta)\n```", "```py\n>>> from sympy import pi, rot_axis3 \n```", "```py\n>>> theta = pi/3\n>>> rot_axis3(theta)\nMatrix([\n[       1/2, sqrt(3)/2, 0],\n[-sqrt(3)/2,       1/2, 0],\n[         0,         0, 1]]) \n```", "```py\n>>> rot_axis3(pi/2)\nMatrix([\n[ 0, 1, 0],\n[-1, 0, 0],\n[ 0, 0, 1]]) \n```", "```py\nsympy.matrices.dense.rot_ccw_axis1(theta)\n```", "```py\n>>> from sympy import pi, rot_ccw_axis1 \n```", "```py\n>>> theta = pi/3\n>>> rot_ccw_axis1(theta)\nMatrix([\n[1,         0,          0],\n[0,       1/2, -sqrt(3)/2],\n[0, sqrt(3)/2,        1/2]]) \n```", "```py\n>>> rot_ccw_axis1(pi/2)\nMatrix([\n[1, 0,  0],\n[0, 0, -1],\n[0, 1,  0]]) \n```", "```py\nsympy.matrices.dense.rot_ccw_axis2(theta)\n```", "```py\n>>> from sympy import pi, rot_ccw_axis2 \n```", "```py\n>>> theta = pi/3\n>>> rot_ccw_axis2(theta)\nMatrix([\n[       1/2, 0, sqrt(3)/2],\n[         0, 1,         0],\n[-sqrt(3)/2, 0,       1/2]]) \n```", "```py\n>>> rot_ccw_axis2(pi/2)\nMatrix([\n[ 0,  0,  1],\n[ 0,  1,  0],\n[-1,  0,  0]]) \n```", "```py\nsympy.matrices.dense.rot_ccw_axis3(theta)\n```", "```py\n>>> from sympy import pi, rot_ccw_axis3 \n```", "```py\n>>> theta = pi/3\n>>> rot_ccw_axis3(theta)\nMatrix([\n[      1/2, -sqrt(3)/2, 0],\n[sqrt(3)/2,        1/2, 0],\n[        0,          0, 1]]) \n```", "```py\n>>> rot_ccw_axis3(pi/2)\nMatrix([\n[0, -1, 0],\n[1,  0, 0],\n[0,  0, 1]]) \n```", "```py\nsympy.matrices.dense.list2numpy(l, dtype=<class 'object'>)\n```", "```py\nsympy.matrices.dense.matrix2numpy(m, dtype=<class 'object'>)\n```", "```py\nsympy.matrices.dense.symarray(prefix, shape, **kwargs)\n```", "```py\n>>> from sympy import symarray\n>>> symarray('', 3)\n[_0 _1 _2] \n```", "```py\n>>> a = symarray('', 3)\n>>> b = symarray('', 3)\n>>> a[0] == b[0]\nTrue\n>>> a = symarray('a', 3)\n>>> b = symarray('b', 3)\n>>> a[0] == b[0]\nFalse \n```", "```py\n>>> symarray('a', 3)\n[a_0 a_1 a_2] \n```", "```py\n>>> symarray('a', (2, 3))\n[[a_0_0 a_0_1 a_0_2]\n [a_1_0 a_1_1 a_1_2]]\n>>> symarray('a', (2, 3, 2))\n[[[a_0_0_0 a_0_0_1]\n [a_0_1_0 a_0_1_1]\n [a_0_2_0 a_0_2_1]]\n\n [[a_1_0_0 a_1_0_1]\n [a_1_1_0 a_1_1_1]\n [a_1_2_0 a_1_2_1]]] \n```", "```py\n>>> [s.is_real for s in symarray('a', 2, real=True)]\n[True, True] \n```", "```py\nsympy.matrices.matrixbase.a2idx(j, n=None)\n```"]