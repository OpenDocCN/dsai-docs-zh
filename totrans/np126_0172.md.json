["```py\n>>> dt = np.dtype('>i4')\n>>> dt.byteorder\n'>'\n>>> dt.itemsize\n4\n>>> dt.name\n'int32'\n>>> dt.type is np.int32\nTrue \n```", "```py\n>>> dt = np.dtype([('name', np.unicode_, 16), ('grades', np.float64, (2,))])\n>>> dt['name']\ndtype('<U16')\n>>> dt['grades']\ndtype(('<f8', (2,))) \n```", "```py\n>>> x = np.array([('Sarah', (8.0, 7.0)), ('John', (6.0, 7.0))], dtype=dt)\n>>> x[1]\n('John', [6., 7.])\n>>> x[1]['grades']\narray([6.,  7.])\n>>> type(x[1])\n<class 'numpy.void'>\n>>> type(x[1]['grades'])\n<class 'numpy.ndarray'> \n```", "```py\n>>> dt = np.dtype(np.int32)      # 32-bit integer\n>>> dt = np.dtype(np.complex128) # 128-bit complex floating-point number \n```", "```py\n>>> dt = np.dtype(float)   # Python-compatible floating-point number\n>>> dt = np.dtype(int)     # Python-compatible integer\n>>> dt = np.dtype(object)  # Python object \n```", "```py\n>>> dt = np.dtype('b')  # byte, native byte order\n>>> dt = np.dtype('>H') # big-endian unsigned short\n>>> dt = np.dtype('<f') # little-endian single-precision float\n>>> dt = np.dtype('d')  # double-precision floating-point number \n```", "```py\n>>> dt = np.dtype('i4')   # 32-bit signed integer\n>>> dt = np.dtype('f8')   # 64-bit floating-point number\n>>> dt = np.dtype('c16')  # 128-bit complex floating-point number\n>>> dt = np.dtype('a25')  # 25-length zero-terminated bytes\n>>> dt = np.dtype('U25')  # 25-character string \n```", "```py\n>>> dt = np.dtype(\"i4, (2,3)f8, f4\") \n```", "```py\n>>> dt = np.dtype(\"a3, 3u8, (3,4)a10\") \n```", "```py\n>>> dt = np.dtype('uint32')   # 32-bit unsigned integer\n>>> dt = np.dtype('float64')  # 64-bit floating-point number \n```", "```py\n>>> dt = np.dtype((np.void, 10))  # 10-byte wide data block\n>>> dt = np.dtype(('U', 10))   # 10-character unicode string \n```", "```py\n>>> dt = np.dtype((np.int32, (2,2)))          # 2 x 2 integer sub-array\n>>> dt = np.dtype(('i4, (2,3)f8, f4', (2,3))) # 2 x 3 structured sub-array \n```", "```py\n>>> dt = np.dtype([('big', '>i4'), ('little', '<i4')]) \n```", "```py\n>>> dt = np.dtype([('R','u1'), ('G','u1'), ('B','u1'), ('A','u1')]) \n```", "```py\n>>> dt = np.dtype({'names': ['r','g','b','a'],\n...                'formats': [np.uint8, np.uint8, np.uint8, np.uint8]}) \n```", "```py\n>>> dt = np.dtype({'names': ['r','b'], 'formats': ['u1', 'u1'],\n...                'offsets': [0, 2],\n...                'titles': ['Red pixel', 'Blue pixel']}) \n```", "```py\n>>> dt = np.dtype({'col1': ('U10', 0), 'col2': (np.float32, 10),\n...                'col3': (int, 14)}) \n```", "```py\n>>> dt = np.dtype((np.int32,{'real':(np.int16, 0),'imag':(np.int16, 2)})) \n```", "```py\n>>> dt = np.dtype((np.int32, (np.int8, 4))) \n```", "```py\n>>> dt = np.dtype(('i4', [('r','u1'),('g','u1'),('b','u1'),('a','u1')])) \n```", "```py\n>>> dt = np.dtype(np.int32)      # 32-bit integer\n>>> dt = np.dtype(np.complex128) # 128-bit complex floating-point number \n```", "```py\n>>> dt = np.dtype(float)   # Python-compatible floating-point number\n>>> dt = np.dtype(int)     # Python-compatible integer\n>>> dt = np.dtype(object)  # Python object \n```", "```py\n>>> dt = np.dtype('b')  # byte, native byte order\n>>> dt = np.dtype('>H') # big-endian unsigned short\n>>> dt = np.dtype('<f') # little-endian single-precision float\n>>> dt = np.dtype('d')  # double-precision floating-point number \n```", "```py\n>>> dt = np.dtype('i4')   # 32-bit signed integer\n>>> dt = np.dtype('f8')   # 64-bit floating-point number\n>>> dt = np.dtype('c16')  # 128-bit complex floating-point number\n>>> dt = np.dtype('a25')  # 25-length zero-terminated bytes\n>>> dt = np.dtype('U25')  # 25-character string \n```", "```py\n>>> dt = np.dtype(\"i4, (2,3)f8, f4\") \n```", "```py\n>>> dt = np.dtype(\"a3, 3u8, (3,4)a10\") \n```", "```py\n>>> dt = np.dtype('uint32')   # 32-bit unsigned integer\n>>> dt = np.dtype('float64')  # 64-bit floating-point number \n```", "```py\n>>> dt = np.dtype((np.void, 10))  # 10-byte wide data block\n>>> dt = np.dtype(('U', 10))   # 10-character unicode string \n```", "```py\n>>> dt = np.dtype((np.int32, (2,2)))          # 2 x 2 integer sub-array\n>>> dt = np.dtype(('i4, (2,3)f8, f4', (2,3))) # 2 x 3 structured sub-array \n```", "```py\n>>> dt = np.dtype([('big', '>i4'), ('little', '<i4')]) \n```", "```py\n>>> dt = np.dtype([('R','u1'), ('G','u1'), ('B','u1'), ('A','u1')]) \n```", "```py\n>>> dt = np.dtype({'names': ['r','g','b','a'],\n...                'formats': [np.uint8, np.uint8, np.uint8, np.uint8]}) \n```", "```py\n>>> dt = np.dtype({'names': ['r','b'], 'formats': ['u1', 'u1'],\n...                'offsets': [0, 2],\n...                'titles': ['Red pixel', 'Blue pixel']}) \n```", "```py\n>>> dt = np.dtype({'col1': ('U10', 0), 'col2': (np.float32, 10),\n...                'col3': (int, 14)}) \n```", "```py\n>>> dt = np.dtype((np.int32,{'real':(np.int16, 0),'imag':(np.int16, 2)})) \n```", "```py\n>>> dt = np.dtype((np.int32, (np.int8, 4))) \n```", "```py\n>>> dt = np.dtype(('i4', [('r','u1'),('g','u1'),('b','u1'),('a','u1')])) \n```"]