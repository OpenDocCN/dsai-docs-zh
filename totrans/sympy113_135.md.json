["```py\nclass sympy.vector.orienters.Orienter(*args)\n```", "```py\nrotation_matrix()\n```", "```py\nclass sympy.vector.orienters.AxisOrienter(angle, axis)\n```", "```py\n__init__(angle, axis)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy import symbols\n>>> q1 = symbols('q1')\n>>> N = CoordSys3D('N')\n>>> from sympy.vector import AxisOrienter\n>>> orienter = AxisOrienter(q1, N.i + 2 * N.j)\n>>> B = N.orient_new('B', (orienter, )) \n```", "```py\nrotation_matrix(system)\n```", "```py\nclass sympy.vector.orienters.BodyOrienter(angle1, angle2, angle3, rot_order)\n```", "```py\n__init__(angle1, angle2, angle3, rot_order)\n```", "```py\n>>> from sympy.vector import CoordSys3D, BodyOrienter\n>>> from sympy import symbols\n>>> q1, q2, q3 = symbols('q1 q2 q3')\n>>> N = CoordSys3D('N') \n```", "```py\n>>> body_orienter = BodyOrienter(q1, q2, q3, '123')\n>>> D = N.orient_new('D', (body_orienter, )) \n```", "```py\n>>> from sympy.vector import AxisOrienter\n>>> axis_orienter1 = AxisOrienter(q1, N.i)\n>>> D = N.orient_new('D', (axis_orienter1, ))\n>>> axis_orienter2 = AxisOrienter(q2, D.j)\n>>> D = D.orient_new('D', (axis_orienter2, ))\n>>> axis_orienter3 = AxisOrienter(q3, D.k)\n>>> D = D.orient_new('D', (axis_orienter3, )) \n```", "```py\n>>> body_orienter1 = BodyOrienter(q1, q2, q3, '123')\n>>> body_orienter2 = BodyOrienter(q1, q2, 0, 'ZXZ')\n>>> body_orienter3 = BodyOrienter(0, 0, 0, 'XYX') \n```", "```py\nclass sympy.vector.orienters.SpaceOrienter(angle1, angle2, angle3, rot_order)\n```", "```py\n__init__(angle1, angle2, angle3, rot_order)\n```", "```py\n>>> from sympy.vector import CoordSys3D, SpaceOrienter\n>>> from sympy import symbols\n>>> q1, q2, q3 = symbols('q1 q2 q3')\n>>> N = CoordSys3D('N') \n```", "```py\n>>> space_orienter = SpaceOrienter(q1, q2, q3, '312')\n>>> D = N.orient_new('D', (space_orienter, )) \n```", "```py\n>>> from sympy.vector import AxisOrienter\n>>> axis_orienter1 = AxisOrienter(q1, N.i)\n>>> B = N.orient_new('B', (axis_orienter1, ))\n>>> axis_orienter2 = AxisOrienter(q2, N.j)\n>>> C = B.orient_new('C', (axis_orienter2, ))\n>>> axis_orienter3 = AxisOrienter(q3, N.k)\n>>> D = C.orient_new('C', (axis_orienter3, )) \n```", "```py\nclass sympy.vector.orienters.QuaternionOrienter(q0, q1, q2, q3)\n```", "```py\n__init__(angle1, angle2, angle3, rot_order)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy import symbols\n>>> q0, q1, q2, q3 = symbols('q0 q1 q2 q3')\n>>> N = CoordSys3D('N')\n>>> from sympy.vector import QuaternionOrienter\n>>> q_orienter = QuaternionOrienter(q0, q1, q2, q3)\n>>> B = N.orient_new('B', (q_orienter, )) \n```"]