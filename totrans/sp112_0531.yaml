- en: scipy.signal.lfilter_zi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct initial conditions for lfilter for step response steady-state.
  prefs: []
  type: TYPE_NORMAL
- en: Compute an initial state *zi* for the [`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter
    "scipy.signal.lfilter") function that corresponds to the steady state of the step
    response.
  prefs: []
  type: TYPE_NORMAL
- en: A typical use of this function is to set the initial state so that the output
    of the filter starts at the same value as the first element of the signal to be
    filtered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b, a**array_like (1-D)'
  prefs: []
  type: TYPE_NORMAL
- en: The IIR filter coefficients. See [`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter
    "scipy.signal.lfilter") for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**zi**1-D ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The initial state for the filter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter "scipy.signal.lfilter"),
    [`lfiltic`](scipy.signal.lfiltic.html#scipy.signal.lfiltic "scipy.signal.lfiltic"),
    [`filtfilt`](scipy.signal.filtfilt.html#scipy.signal.filtfilt "scipy.signal.filtfilt")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'A linear filter with order m has a state space representation (A, B, C, D),
    for which the output y of the filter can be expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'where z(n) is a vector of length m, A has shape (m, m), B has shape (m, 1),
    C has shape (1, m) and D has shape (1, 1) (assuming x(n) is a scalar). lfilter_zi
    solves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In other words, it finds the initial condition for which the response to an
    input of all ones is a constant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the filter coefficients *a* and *b*, the state space matrices for the
    transposed direct form II implementation of the linear filter, which is the implementation
    used by scipy.signal.lfilter, are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: assuming *a[0]* is 1.0; if *a[0]* is not 1, *a* and *b* are first divided by
    a[0].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following code creates a lowpass Butterworth filter. Then it applies that
    filter to an array whose values are all 1.0; the output is also all 1.0, as expected
    for a lowpass filter. If the *zi* argument of [`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter
    "scipy.signal.lfilter") had not been given, the output would have shown the transient
    signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that the *zi* argument to [`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter
    "scipy.signal.lfilter") was computed using [`lfilter_zi`](#scipy.signal.lfilter_zi
    "scipy.signal.lfilter_zi") and scaled by *x[0]*. Then the output *y* has no transient
    until the input drops from 0.5 to 0.0.
  prefs: []
  type: TYPE_NORMAL
