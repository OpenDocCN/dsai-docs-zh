- en: What kind of data does pandas handle?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/01_table_oriented.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*   I want to start using pandas'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To load the pandas package and start working with it, import the package. The
    community agreed alias for pandas is `pd`, so loading pandas as `pd` is assumed
    standard practice for all of the pandas documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pandas data table representation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/01_table_dataframe.svg](../Images/c03492341d8dce1961b25ef7b4180639.png)'
  prefs: []
  type: TYPE_IMG
- en: I want to store passenger data of the Titanic. For a number of passengers, I
    know the name (characters), age (integers) and sex (male/female) data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To manually store data in a table, create a `DataFrame`. When using a Python
    dictionary of lists, the dictionary keys will be used as column headers and the
    values in each list as columns of the `DataFrame`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is a 2-dimensional data structure that can store data of different types (including
    characters, integers, floating point values, categorical data and more) in columns.
    It is similar to a spreadsheet, a SQL table or the `data.frame` in R.
  prefs: []
  type: TYPE_NORMAL
- en: The table has 3 columns, each of them with a column label. The column labels
    are respectively `Name`, `Age` and `Sex`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column `Name` consists of textual data with each value a string, the column
    `Age` are numbers and the column `Sex` is textual data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In spreadsheet software, the table representation of our data would look very
    similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/01_table_spreadsheet.png](../Images/636efc1574bd40c1855777c2f4988a8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Each column in a `DataFrame` is a `Series`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/01_table_series.svg](../Images/93671bd07490fe56cb10bacba6e9585d.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m just interested in working with the data in the column `Age`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When selecting a single column of a pandas [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the result is a pandas [`Series`](../../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). To select the column, use the column label in between square
    brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Python [dictionaries](https://docs.python.org/3/tutorial/datastructures.html#tut-dictionaries
    "(in Python v3.12)"), the selection of a single column is very similar to the
    selection of dictionary values based on the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a `Series` from scratch as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A pandas `Series` has no column labels, as it is just a single column of a `DataFrame`.
    A Series does have row labels.
  prefs: []
  type: TYPE_NORMAL
- en: Do something with a DataFrame or Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to know the maximum Age of the passengers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can do this on the `DataFrame` by selecting the `Age` column and applying
    `max()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or to the `Series`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As illustrated by the `max()` method, you can *do* things with a `DataFrame`
    or `Series`. pandas provides a lot of functionalities, each of them a *method*
    you can apply to a `DataFrame` or `Series`. As methods are functions, do not forget
    to use parentheses `()`.
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in some basic statistics of the numerical data of my data table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method provides a quick overview of the numerical
    data in a `DataFrame`. As the `Name` and `Sex` columns are textual data, these
    are by default not taken into account by the [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Many pandas operations return a `DataFrame` or a `Series`. The [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method is an example of a pandas operation returning
    a pandas `Series` or a pandas `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: Check more options on `describe` in the user guide section about [aggregations
    with describe](../../user_guide/basics.html#basics-describe)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is just a starting point. Similar to spreadsheet software, pandas represents
    data as a table with columns and rows. Apart from the representation, also the
    data manipulations and calculations you would do in spreadsheet software are supported
    by pandas. Continue reading the next tutorials to get started!
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Import the package, aka `import pandas as pd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table of data is stored as a pandas `DataFrame`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each column in a `DataFrame` is a `Series`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can do things by applying a method to a `DataFrame` or `Series`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A more extended explanation to `DataFrame` and `Series` is provided in the [introduction
    to data structures](../../user_guide/dsintro.html#dsintro).
  prefs: []
  type: TYPE_NORMAL
- en: pandas data table representation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/01_table_dataframe.svg](../Images/c03492341d8dce1961b25ef7b4180639.png)'
  prefs: []
  type: TYPE_IMG
- en: I want to store passenger data of the Titanic. For a number of passengers, I
    know the name (characters), age (integers) and sex (male/female) data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To manually store data in a table, create a `DataFrame`. When using a Python
    dictionary of lists, the dictionary keys will be used as column headers and the
    values in each list as columns of the `DataFrame`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is a 2-dimensional data structure that can store data of different types (including
    characters, integers, floating point values, categorical data and more) in columns.
    It is similar to a spreadsheet, a SQL table or the `data.frame` in R.
  prefs: []
  type: TYPE_NORMAL
- en: The table has 3 columns, each of them with a column label. The column labels
    are respectively `Name`, `Age` and `Sex`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The column `Name` consists of textual data with each value a string, the column
    `Age` are numbers and the column `Sex` is textual data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In spreadsheet software, the table representation of our data would look very
    similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/01_table_spreadsheet.png](../Images/636efc1574bd40c1855777c2f4988a8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Each column in a `DataFrame` is a `Series`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/01_table_series.svg](../Images/93671bd07490fe56cb10bacba6e9585d.png)'
  prefs: []
  type: TYPE_IMG
- en: I’m just interested in working with the data in the column `Age`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When selecting a single column of a pandas [`DataFrame`](../../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the result is a pandas [`Series`](../../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"). To select the column, use the column label in between square
    brackets `[]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Python [dictionaries](https://docs.python.org/3/tutorial/datastructures.html#tut-dictionaries
    "(in Python v3.12)"), the selection of a single column is very similar to the
    selection of dictionary values based on the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a `Series` from scratch as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A pandas `Series` has no column labels, as it is just a single column of a `DataFrame`.
    A Series does have row labels.
  prefs: []
  type: TYPE_NORMAL
- en: Do something with a DataFrame or Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to know the maximum Age of the passengers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can do this on the `DataFrame` by selecting the `Age` column and applying
    `max()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or to the `Series`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As illustrated by the `max()` method, you can *do* things with a `DataFrame`
    or `Series`. pandas provides a lot of functionalities, each of them a *method*
    you can apply to a `DataFrame` or `Series`. As methods are functions, do not forget
    to use parentheses `()`.
  prefs: []
  type: TYPE_NORMAL
- en: I’m interested in some basic statistics of the numerical data of my data table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method provides a quick overview of the numerical
    data in a `DataFrame`. As the `Name` and `Sex` columns are textual data, these
    are by default not taken into account by the [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Many pandas operations return a `DataFrame` or a `Series`. The [`describe()`](../../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") method is an example of a pandas operation returning
    a pandas `Series` or a pandas `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: Check more options on `describe` in the user guide section about [aggregations
    with describe](../../user_guide/basics.html#basics-describe)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is just a starting point. Similar to spreadsheet software, pandas represents
    data as a table with columns and rows. Apart from the representation, also the
    data manipulations and calculations you would do in spreadsheet software are supported
    by pandas. Continue reading the next tutorials to get started!
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Import the package, aka `import pandas as pd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table of data is stored as a pandas `DataFrame`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each column in a `DataFrame` is a `Series`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can do things by applying a method to a `DataFrame` or `Series`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A more extended explanation to `DataFrame` and `Series` is provided in the [introduction
    to data structures](../../user_guide/dsintro.html#dsintro).
  prefs: []
  type: TYPE_NORMAL
