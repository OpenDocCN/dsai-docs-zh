- en: scipy.signal.sweep_poly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sweep_poly.html#scipy.signal.sweep_poly](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sweep_poly.html#scipy.signal.sweep_poly)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Frequency-swept cosine generator, with a time-dependent frequency.
  prefs: []
  type: TYPE_NORMAL
- en: This function generates a sinusoidal function whose instantaneous frequency
    varies with time. The frequency at time *t* is given by the polynomial *poly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Times at which to evaluate the waveform.
  prefs: []
  type: TYPE_NORMAL
- en: '**poly**1-D array_like or instance of numpy.poly1d'
  prefs: []
  type: TYPE_NORMAL
- en: The desired frequency expressed as a polynomial. If *poly* is a list or ndarray
    of length n, then the elements of *poly* are the coefficients of the polynomial,
    and the instantaneous frequency is
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = poly[0]*t**(n-1) + poly[1]*t**(n-2) + ... + poly[n-1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *poly* is an instance of numpy.poly1d, then the instantaneous frequency is
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = poly(t)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**phi**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Phase offset, in degrees, Default: 0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sweep_poly**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A numpy array containing the signal evaluated at *t* with the requested time-varying
    frequency. More precisely, the function returns `cos(phase + (pi/180)*phi)`, where
    *phase* is the integral (from 0 to t) of `2 * pi * f(t)`; `f(t)` is defined above.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`chirp`](scipy.signal.chirp.html#scipy.signal.chirp "scipy.signal.chirp")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'If *poly* is a list or ndarray of length *n*, then the elements of *poly* are
    the coefficients of the polynomial, and the instantaneous frequency is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = poly[0]*t**(n-1) + poly[1]*t**(n-2) + ... + poly[n-1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If *poly* is an instance of [`numpy.poly1d`](https://numpy.org/devdocs/reference/generated/numpy.poly1d.html#numpy.poly1d
    "(in NumPy v2.0.dev0)"), then the instantaneous frequency is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = poly(t)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Finally, the output *s* is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cos(phase + (pi/180)*phi)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where *phase* is the integral from 0 to *t* of `2 * pi * f(t)`, `f(t)` as defined
    above.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute the waveform with instantaneous frequency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: over the interval 0 <= t <= 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-sweep_poly-1.png](../Images/3e2d66bff9247f1df062c917f3833b2d.png)'
  prefs: []
  type: TYPE_IMG
