["```py\nscipy.special.fdtri(dfn, dfd, p, out=None) = <ufunc 'fdtri'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import fdtri, fdtr\n>>> df1, df2 = 1, 2\n>>> x = 3\n>>> cdf_value =  fdtr(df1, df2, x)\n>>> fdtri(df1, df2, cdf_value)\n3.000000000000006 \n```", "```py\n>>> x = np.array([0.1, 0.4, 0.7])\n>>> fdtri(1, 2, x)\narray([0.02020202, 0.38095238, 1.92156863]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> dfn_parameters = [50, 10, 1, 50]\n>>> dfd_parameters = [0.5, 1, 1, 5]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(dfn_parameters, dfd_parameters,\n...                            linestyles))\n>>> x = np.linspace(0, 1, 1000)\n>>> fig, ax = plt.subplots()\n>>> for parameter_set in parameters_list:\n...     dfn, dfd, style = parameter_set\n...     fdtri_vals = fdtri(dfn, dfd, x)\n...     ax.plot(x, fdtri_vals, label=rf\"$d_n={dfn},\\, d_d={dfd}$\",\n...             ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$x$\")\n>>> title = \"F distribution inverse cumulative distribution function\"\n>>> ax.set_title(title)\n>>> ax.set_ylim(0, 30)\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import f\n>>> dfn, dfd = 1, 2\n>>> x = 0.7\n>>> fdtri_res = fdtri(dfn, dfd, x)  # this will often be faster than below\n>>> f_dist_res = f(dfn, dfd).ppf(x)\n>>> f_dist_res == fdtri_res  # test that results are equal\nTrue \n```"]