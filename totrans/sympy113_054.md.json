["```py\nsympy.calculus.euler.euler_equations(L, funcs=(), vars=())\n```", "```py\n>>> from sympy import euler_equations, Symbol, Function\n>>> x = Function('x')\n>>> t = Symbol('t')\n>>> L = (x(t).diff(t))**2/2 - x(t)**2/2\n>>> euler_equations(L, x(t), t)\n[Eq(-x(t) - Derivative(x(t), (t, 2)), 0)]\n>>> u = Function('u')\n>>> x = Symbol('x')\n>>> L = (u(t, x).diff(t))**2/2 - (u(t, x).diff(x))**2/2\n>>> euler_equations(L, u(t, x), [t, x])\n[Eq(-Derivative(u(t, x), (t, 2)) + Derivative(u(t, x), (x, 2)), 0)] \n```", "```py\nsympy.calculus.singularities.is_decreasing(expression, interval=Reals, symbol=None)\n```", "```py\n>>> from sympy import is_decreasing\n>>> from sympy.abc import x, y\n>>> from sympy import S, Interval, oo\n>>> is_decreasing(1/(x**2 - 3*x), Interval.open(S(3)/2, 3))\nTrue\n>>> is_decreasing(1/(x**2 - 3*x), Interval.open(1.5, 3))\nTrue\n>>> is_decreasing(1/(x**2 - 3*x), Interval.Lopen(3, oo))\nTrue\n>>> is_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, S(3)/2))\nFalse\n>>> is_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, 1.5))\nFalse\n>>> is_decreasing(-x**2, Interval(-oo, 0))\nFalse\n>>> is_decreasing(-x**2 + y, Interval(-oo, 0), x)\nFalse \n```", "```py\nsympy.calculus.singularities.is_increasing(expression, interval=Reals, symbol=None)\n```", "```py\n>>> from sympy import is_increasing\n>>> from sympy.abc import x, y\n>>> from sympy import S, Interval, oo\n>>> is_increasing(x**3 - 3*x**2 + 4*x, S.Reals)\nTrue\n>>> is_increasing(-x**2, Interval(-oo, 0))\nTrue\n>>> is_increasing(-x**2, Interval(0, oo))\nFalse\n>>> is_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval(-2, 3))\nFalse\n>>> is_increasing(x**2 + y, Interval(1, 2), x)\nTrue \n```", "```py\nsympy.calculus.singularities.is_monotonic(expression, interval=Reals, symbol=None)\n```", "```py\n>>> from sympy import is_monotonic\n>>> from sympy.abc import x, y\n>>> from sympy import S, Interval, oo\n>>> is_monotonic(1/(x**2 - 3*x), Interval.open(S(3)/2, 3))\nTrue\n>>> is_monotonic(1/(x**2 - 3*x), Interval.open(1.5, 3))\nTrue\n>>> is_monotonic(1/(x**2 - 3*x), Interval.Lopen(3, oo))\nTrue\n>>> is_monotonic(x**3 - 3*x**2 + 4*x, S.Reals)\nTrue\n>>> is_monotonic(-x**2, S.Reals)\nFalse\n>>> is_monotonic(x**2 + y + 1, Interval(1, 2), x)\nTrue \n```", "```py\nsympy.calculus.singularities.is_strictly_decreasing(expression, interval=Reals, symbol=None)\n```", "```py\n>>> from sympy import is_strictly_decreasing\n>>> from sympy.abc import x, y\n>>> from sympy import S, Interval, oo\n>>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Lopen(3, oo))\nTrue\n>>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, S(3)/2))\nFalse\n>>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, 1.5))\nFalse\n>>> is_strictly_decreasing(-x**2, Interval(-oo, 0))\nFalse\n>>> is_strictly_decreasing(-x**2 + y, Interval(-oo, 0), x)\nFalse \n```", "```py\nsympy.calculus.singularities.is_strictly_increasing(expression, interval=Reals, symbol=None)\n```", "```py\n>>> from sympy import is_strictly_increasing\n>>> from sympy.abc import x, y\n>>> from sympy import Interval, oo\n>>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.Ropen(-oo, -2))\nTrue\n>>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.Lopen(3, oo))\nTrue\n>>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.open(-2, 3))\nFalse\n>>> is_strictly_increasing(-x**2, Interval(0, oo))\nFalse\n>>> is_strictly_increasing(-x**2 + y, Interval(-oo, 0), x)\nFalse \n```", "```py\nsympy.calculus.singularities.monotonicity_helper(expression, predicate, interval=Reals, symbol=None)\n```", "```py\nsympy.calculus.singularities.singularities(expression, symbol, domain=None)\n```", "```py\n>>> from sympy import singularities, Symbol, log\n>>> x = Symbol('x', real=True)\n>>> y = Symbol('y', real=False)\n>>> singularities(x**2 + x + 1, x)\nEmptySet\n>>> singularities(1/(x + 1), x)\n{-1}\n>>> singularities(1/(y**2 + 1), y)\n{-I, I}\n>>> singularities(1/(y**3 + 1), y)\n{-1, 1/2 - sqrt(3)*I/2, 1/2 + sqrt(3)*I/2}\n>>> singularities(log(x), x)\n{0} \n```", "```py\nsympy.calculus.finite_diff.apply_finite_diff(order, x_list, y_list, x0=0)\n```", "```py\n>>> from sympy import apply_finite_diff\n>>> cube = lambda arg: (1.0*arg)**3\n>>> xlist = range(-3,3+1)\n>>> apply_finite_diff(2, xlist, map(cube, xlist), 2) - 12 \n-3.55271367880050e-15 \n```", "```py\n>>> from sympy import IndexedBase, Idx\n>>> x, y = map(IndexedBase, 'xy')\n>>> i = Idx('i')\n>>> x_list, y_list = zip(*[(x[i+j], y[i+j]) for j in range(-1,2)])\n>>> apply_finite_diff(1, x_list, y_list, x[i])\n((x[i + 1] - x[i])/(-x[i - 1] + x[i]) - 1)*y[i]/(x[i + 1] - x[i]) -\n(x[i + 1] - x[i])*y[i - 1]/((x[i + 1] - x[i - 1])*(-x[i - 1] + x[i])) +\n(-x[i - 1] + x[i])*y[i + 1]/((x[i + 1] - x[i - 1])*(x[i + 1] - x[i])) \n```", "```py\nsympy.calculus.finite_diff.differentiate_finite(expr, *symbols, points=1, x0=None, wrt=None, evaluate=False)\n```", "```py\n>>> from sympy import sin, Function, differentiate_finite\n>>> from sympy.abc import x, y, h\n>>> f, g = Function('f'), Function('g')\n>>> differentiate_finite(f(x)*g(x), x, points=[x-h, x+h])\n-f(-h + x)*g(-h + x)/(2*h) + f(h + x)*g(h + x)/(2*h) \n```", "```py\n>>> differentiate_finite(f(x) + sin(x), x, 2)\n-2*f(x) + f(x - 1) + f(x + 1) - 2*sin(x) + sin(x - 1) + sin(x + 1)\n>>> differentiate_finite(f(x, y), x, y)\nf(x - 1/2, y - 1/2) - f(x - 1/2, y + 1/2) - f(x + 1/2, y - 1/2) + f(x + 1/2, y + 1/2)\n>>> differentiate_finite(f(x)*g(x).diff(x), x)\n(-g(x) + g(x + 1))*f(x + 1/2) - (g(x) - g(x - 1))*f(x - 1/2) \n```", "```py\n>>> dx = Function('dx')\n>>> differentiate_finite(f(x)*g(x).diff(x), points=dx(x))\n-(-g(x - dx(x)/2 - dx(x - dx(x)/2)/2)/dx(x - dx(x)/2) +\ng(x - dx(x)/2 + dx(x - dx(x)/2)/2)/dx(x - dx(x)/2))*f(x - dx(x)/2)/dx(x) +\n(-g(x + dx(x)/2 - dx(x + dx(x)/2)/2)/dx(x + dx(x)/2) +\ng(x + dx(x)/2 + dx(x + dx(x)/2)/2)/dx(x + dx(x)/2))*f(x + dx(x)/2)/dx(x) \n```", "```py\nsympy.calculus.finite_diff.finite_diff_weights(order, x_list, x0=1)\n```", "```py\n>>> from sympy import finite_diff_weights, S\n>>> res = finite_diff_weights(1, [-S(1)/2, S(1)/2, S(3)/2, S(5)/2], 0)\n>>> res\n[[[1, 0, 0, 0],\n [1/2, 1/2, 0, 0],\n [3/8, 3/4, -1/8, 0],\n [5/16, 15/16, -5/16, 1/16]],\n [[0, 0, 0, 0],\n [-1, 1, 0, 0],\n [-1, 1, 0, 0],\n [-23/24, 7/8, 1/8, -1/24]]]\n>>> res[0][-1]  # FD weights for 0th derivative, using full x_list\n[5/16, 15/16, -5/16, 1/16]\n>>> res[1][-1]  # FD weights for 1st derivative\n[-23/24, 7/8, 1/8, -1/24]\n>>> res[1][-2]  # FD weights for 1st derivative, using x_list[:-1]\n[-1, 1, 0, 0]\n>>> res[1][-1][0]  # FD weight for 1st deriv. for x_list[0]\n-23/24\n>>> res[1][-1][1]  # FD weight for 1st deriv. for x_list[1], etc.\n7/8 \n```", "```py\n>>> res = finite_diff_weights(1, [S(0), S(1), -S(1), S(2), -S(2)], 0)[1]\n>>> res\n[[0, 0, 0, 0, 0],\n [-1, 1, 0, 0, 0],\n [0, 1/2, -1/2, 0, 0],\n [-1/2, 1, -1/3, -1/6, 0],\n [0, 2/3, -2/3, -1/12, 1/12]]\n>>> res[0]  # no approximation possible, using x_list[0] only\n[0, 0, 0, 0, 0]\n>>> res[1]  # classic forward step approximation\n[-1, 1, 0, 0, 0]\n>>> res[2]  # classic centered approximation\n[0, 1/2, -1/2, 0, 0]\n>>> res[3:]  # higher order approximations\n[[-1/2, 1, -1/3, -1/6, 0], [0, 2/3, -2/3, -1/12, 1/12]] \n```", "```py\n>>> foo = finite_diff_weights(1, [-S(2), -S(1), S(0), S(1), S(2)], 0)[1]\n>>> foo\n[[0, 0, 0, 0, 0],\n [-1, 1, 0, 0, 0],\n [1/2, -2, 3/2, 0, 0],\n [1/6, -1, 1/2, 1/3, 0],\n [1/12, -2/3, 0, 2/3, -1/12]]\n>>> foo[1]  # not the same and of lower accuracy as res[1]!\n[-1, 1, 0, 0, 0]\n>>> foo[2]  # classic double backward step approximation\n[1/2, -2, 3/2, 0, 0]\n>>> foo[4]  # the same as res[4]\n[1/12, -2/3, 0, 2/3, -1/12] \n```", "```py\n>>> from sympy import cos, symbols, pi, simplify\n>>> N, (h, x) = 4, symbols('h x')\n>>> x_list = [x+h*cos(i*pi/(N)) for i in range(N,-1,-1)] # chebyshev nodes\n>>> print(x_list)\n[-h + x, -sqrt(2)*h/2 + x, x, sqrt(2)*h/2 + x, h + x]\n>>> mycoeffs = finite_diff_weights(1, x_list, 0)[1][4]\n>>> [simplify(c) for c in  mycoeffs] \n[(h**3/2 + h**2*x - 3*h*x**2 - 4*x**3)/h**4,\n(-sqrt(2)*h**3 - 4*h**2*x + 3*sqrt(2)*h*x**2 + 8*x**3)/h**4,\n(6*h**2*x - 8*x**3)/h**4,\n(sqrt(2)*h**3 - 4*h**2*x - 3*sqrt(2)*h*x**2 + 8*x**3)/h**4,\n(-h**3/2 + h**2*x + 3*h*x**2 - 4*x**3)/h**4] \n```", "```py\nsympy.calculus.util.continuous_domain(f, symbol, domain)\n```", "```py\n>>> from sympy import Interval, Symbol, S, tan, log, pi, sqrt\n>>> from sympy.calculus.util import continuous_domain\n>>> x = Symbol('x')\n>>> continuous_domain(1/x, x, S.Reals)\nUnion(Interval.open(-oo, 0), Interval.open(0, oo))\n>>> continuous_domain(tan(x), x, Interval(0, pi))\nUnion(Interval.Ropen(0, pi/2), Interval.Lopen(pi/2, pi))\n>>> continuous_domain(sqrt(x - 2), x, Interval(-5, 5))\nInterval(2, 5)\n>>> continuous_domain(log(2*x - 1), x, S.Reals)\nInterval.open(1/2, oo) \n```", "```py\nsympy.calculus.util.function_range(f, symbol, domain)\n```", "```py\n>>> from sympy import Interval, Symbol, S, exp, log, pi, sqrt, sin, tan\n>>> from sympy.calculus.util import function_range\n>>> x = Symbol('x')\n>>> function_range(sin(x), x, Interval(0, 2*pi))\nInterval(-1, 1)\n>>> function_range(tan(x), x, Interval(-pi/2, pi/2))\nInterval(-oo, oo)\n>>> function_range(1/x, x, S.Reals)\nUnion(Interval.open(-oo, 0), Interval.open(0, oo))\n>>> function_range(exp(x), x, S.Reals)\nInterval.open(0, oo)\n>>> function_range(log(x), x, S.Reals)\nInterval(-oo, oo)\n>>> function_range(sqrt(x), x, Interval(-5, 9))\nInterval(0, 3) \n```", "```py\nsympy.calculus.util.is_convex(f, *syms, domain=Reals)\n```", "```py\n>>> from sympy import is_convex, symbols, exp, oo, Interval\n>>> x = symbols('x')\n>>> is_convex(exp(x), x)\nTrue\n>>> is_convex(x**3, x, domain = Interval(-1, oo))\nFalse\n>>> is_convex(1/x**2, x, domain=Interval.open(0, oo))\nTrue \n```", "```py\nsympy.calculus.util.lcim(numbers)\n```", "```py\n>>> from sympy.calculus.util import lcim\n>>> from sympy import S, pi\n>>> lcim([S(1)/2, S(3)/4, S(5)/6])\n15/2\n>>> lcim([2*pi, 3*pi, pi, pi/2])\n6*pi\n>>> lcim([S(1), 2*pi]) \n```", "```py\nsympy.calculus.util.maximum(f, symbol, domain=Reals)\n```", "```py\n>>> from sympy import Interval, Symbol, S, sin, cos, pi, maximum\n>>> x = Symbol('x') \n```", "```py\n>>> f = -x**2 + 2*x + 5\n>>> maximum(f, x, S.Reals)\n6 \n```", "```py\n>>> maximum(sin(x), x, Interval(-pi, pi/4))\nsqrt(2)/2 \n```", "```py\n>>> maximum(sin(x)*cos(x), x)\n1/2 \n```", "```py\nsympy.calculus.util.minimum(f, symbol, domain=Reals)\n```", "```py\n>>> from sympy import Interval, Symbol, S, sin, cos, minimum\n>>> x = Symbol('x') \n```", "```py\n>>> f = x**2 + 2*x + 5\n>>> minimum(f, x, S.Reals)\n4 \n```", "```py\n>>> minimum(sin(x), x, Interval(2, 3))\nsin(3) \n```", "```py\n>>> minimum(sin(x)*cos(x), x)\n-1/2 \n```", "```py\nsympy.calculus.util.not_empty_in(finset_intersection, *syms)\n```", "```py\n>>> from sympy import FiniteSet, Interval, not_empty_in, oo\n>>> from sympy.abc import x\n>>> not_empty_in(FiniteSet(x/2).intersect(Interval(0, 1)), x)\nInterval(0, 2)\n>>> not_empty_in(FiniteSet(x, x**2).intersect(Interval(1, 2)), x)\nUnion(Interval(1, 2), Interval(-sqrt(2), -1))\n>>> not_empty_in(FiniteSet(x**2/(x + 2)).intersect(Interval(1, oo)), x)\nUnion(Interval.Lopen(-2, -1), Interval(2, oo)) \n```", "```py\nsympy.calculus.util.periodicity(f, symbol, check=False)\n```", "```py\n>>> from sympy import periodicity, Symbol, sin, cos, tan, exp\n>>> x = Symbol('x')\n>>> f = sin(x) + sin(2*x) + sin(3*x)\n>>> periodicity(f, x)\n2*pi\n>>> periodicity(sin(x)*cos(x), x)\npi\n>>> periodicity(exp(tan(2*x) - 1), x)\npi/2\n>>> periodicity(sin(4*x)**cos(2*x), x)\npi\n>>> periodicity(exp(x), x) \n```", "```py\nsympy.calculus.util.stationary_points(f, symbol, domain=Reals)\n```", "```py\n>>> from sympy import Interval, Symbol, S, sin, pi, pprint, stationary_points\n>>> x = Symbol('x') \n```", "```py\n>>> stationary_points(1/x, x, S.Reals)\nEmptySet \n```", "```py\n>>> pprint(stationary_points(sin(x), x), use_unicode=False)\n pi                              3*pi\n{2*n*pi + -- | n in Integers} U {2*n*pi + ---- | n in Integers}\n 2                                2 \n```", "```py\n>>> stationary_points(sin(x),x, Interval(0, 4*pi))\n{pi/2, 3*pi/2, 5*pi/2, 7*pi/2} \n```"]