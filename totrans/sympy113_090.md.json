["```py\n>>> from sympy.solvers.diophantine import diophantine \n```", "```py\n>>> from sympy import symbols\n>>> x, y, z = symbols(\"x, y, z\", integer=True) \n```", "```py\n>>> diophantine(2*x + 3*y - 5)\n{(3*t_0 - 5, 5 - 2*t_0)} \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_solve\n>>> diop_solve(2*x + 3*y - 5)\n(3*t_0 - 5, 5 - 2*t_0) \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_linear\n>>> diop_linear(2*x + 3*y - 5)\n(3*t_0 - 5, 5 - 2*t_0) \n```", "```py\n>>> diophantine(2*x + 4*y - 3)\nset()\n>>> diop_solve(2*x + 4*y - 3)\n(None, None)\n>>> diop_linear(2*x + 4*y - 3)\n(None, None) \n```", "```py\n>>> m = symbols(\"m\", integer=True)\n>>> diop_solve(2*x + 3*y - 5, m)\n(3*m_0 - 5, 5 - 2*m_0) \n```", "```py\n>>> diop_solve(2*x + 3*y - 5*z + 7, m)\n(m_0, m_0 + 5*m_1 - 14, m_0 + 3*m_1 - 7) \n```", "```py\n>>> diophantine(x**2 - 4*x*y + 8*y**2 - 3*x + 7*y - 5)\n{(2, 1), (5, 1)} \n```", "```py\n>>> diophantine(3*x**2 - 6*x*y + 3*y**2 - 3*x + 7*y - 5)\nset()\n>>> diophantine(x**2 - 4*x*y + 4*y**2 - 3*x + 7*y - 5)\n{(-2*t**2 - 7*t + 10, -t**2 - 3*t + 5)}\n>>> diophantine(x**2 + 2*x*y + y**2 - 3*x - 3*y)\n{(t_0, -t_0), (t_0, 3 - t_0)} \n```", "```py\n>>> diophantine(x**2 - 4*x*y + 2*y**2 - 3*x + 7*y - 5)\nset()\n>>> from sympy import sqrt\n>>> n = symbols(\"n\", integer=True)\n>>> s = diophantine(x**2 -  2*y**2 - 2*x - 4*y, n)\n>>> x_1, y_1 = s.pop()\n>>> x_2, y_2 = s.pop()\n>>> x_n = -(-2*sqrt(2) + 3)**n/2 + sqrt(2)*(-2*sqrt(2) + 3)**n/2 - sqrt(2)*(2*sqrt(2) + 3)**n/2 - (2*sqrt(2) + 3)**n/2 + 1\n>>> x_1 == x_n or x_2 == x_n\nTrue\n>>> y_n = -sqrt(2)*(-2*sqrt(2) + 3)**n/4 + (-2*sqrt(2) + 3)**n/2 + sqrt(2)*(2*sqrt(2) + 3)**n/4 + (2*sqrt(2) + 3)**n/2 - 1\n>>> y_1 == y_n or y_2 == y_n\nTrue \n```", "```py\n>>> from sympy import simplify\n>>> simplify(x_n.subs({n: 9}))\n-9369318 \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import find_DN, diop_DN, transformation_to_DN\n>>> find_DN(x**2 - 3*x*y + y**2 - 7*x + 5*y - 3)\n(5, 920) \n```", "```py\n>>> A, B = transformation_to_DN(x**2 - 3*x*y + y**2 - 7*x + 5*y - 3) \n```", "```py\n>>> A\nMatrix([\n[1/10, 3/10],\n[   0,  1/5]])\n>>> B\nMatrix([\n[  1/5],\n[-11/5]]) \n```", "```py\n>>> diop_DN(5, 920)\n[] \n```", "```py\n>>> diophantine(3*x**2 + 4*y**2 - 5*z**2 + 4*x*y + 6*y*z + 7*z*x)\n{(0, 0, 0)}\n>>> diophantine(3*x**2 + 4*y**2 - 5*z**2 + 4*x*y - 7*y*z + 7*z*x)\n{(-16*p**2 + 28*p*q + 20*q**2, 3*p**2 + 38*p*q - 25*q**2, 4*p**2 - 24*p*q + 68*q**2)} \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_ternary_quadratic\n>>> diop_ternary_quadratic(3*x**2 + 4*y**2 - 5*z**2 + 4*x*y - 7*y*z + 7*z*x)\n(-4, 5, 1) \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import descent\n>>> descent(3, 1) # solves the equation w**2 = 3*Y**2 + Z**2\n(1, 0, 1) \n```", "```py\n>>> from sympy.abc import a, b, c, d, e, f\n>>> diophantine(9*a**2 + 16*b**2 + c**2 + 49*d**2 + 4*e**2 - 25*f**2)\n{(70*t1**2 + 70*t2**2 + 70*t3**2 + 70*t4**2 - 70*t5**2, 105*t1*t5, 420*t2*t5, 60*t3*t5, 210*t4*t5, 42*t1**2 + 42*t2**2 + 42*t3**2 + 42*t4**2 + 42*t5**2)} \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_general_sum_of_squares\n>>> eq = a**2 + b**2 + c**2 + d**2 - 18\n>>> diophantine(eq)\n{(0, 0, 3, 3), (0, 1, 1, 4), (1, 2, 2, 3)}\n>>> diop_general_sum_of_squares(eq, 2)\n{(0, 0, 3, 3), (1, 2, 2, 3)} \n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import sum_of_squares\n>>> sos = sum_of_squares(18, 4, zeros=True)\n>>> next(sos)\n(1, 2, 2, 3)\n>>> next(sos)\n(0, 0, 3, 3) \n```", "```py\n>>> from sympy import Eq, S\n>>> diophantine(Eq(1/x + 1/y, S(1)/2))\n{(-2, 1), (1, -2), (3, 6), (4, 4), (6, 3)} \n```", "```py\nsympy.solvers.diophantine.diophantine.diophantine(eq, param=t, syms=None, permute=False)\n```", "```py\n>>> from sympy import diophantine\n>>> from sympy.abc import a, b\n>>> eq = a**4 + b**4 - (2**4 + 3**4)\n>>> diophantine(eq)\n{(2, 3)}\n>>> diophantine(eq, permute=True)\n{(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)} \n```", "```py\n>>> from sympy.abc import x, y, z\n>>> diophantine(x**2 - y**2)\n{(t_0, -t_0), (t_0, t_0)} \n```", "```py\n>>> diophantine(x*(2*x + 3*y - z))\n{(0, n1, n2), (t_0, t_1, 2*t_0 + 3*t_1)}\n>>> diophantine(x**2 + 3*x*y + 4*x)\n{(0, n1), (-3*t_0 - 4, t_0)} \n```", "```py\nsympy.solvers.diophantine.diophantine.classify_diop(eq, _dict=True)\n```", "```py\nsympy.solvers.diophantine.diophantine.diop_solve(eq, param=t)\n```", "```py\n>>> from sympy.solvers.diophantine import diop_solve\n>>> from sympy.abc import x, y, z, w\n>>> diop_solve(2*x + 3*y - 5)\n(3*t_0 - 5, 5 - 2*t_0)\n>>> diop_solve(4*x + 3*y - 4*z + 5)\n(t_0, 8*t_0 + 4*t_1 + 5, 7*t_0 + 3*t_1 + 5)\n>>> diop_solve(x + 3*y - 4*z + w - 6)\n(t_0, t_0 + t_1, 6*t_0 + 5*t_1 + 4*t_2 - 6, 5*t_0 + 4*t_1 + 3*t_2 - 6)\n>>> diop_solve(x**2 + y**2 - 5)\n{(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)} \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_linear(eq, param=t)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_linear\n>>> from sympy.abc import x, y, z\n>>> diop_linear(2*x - 3*y - 5) # solves equation 2*x - 3*y - 5 == 0\n(3*t_0 - 5, 2*t_0 - 5) \n```", "```py\n>>> diop_linear(2*x - 3*y - 4*z -3)\n(t_0, 2*t_0 + 4*t_1 + 3, -t_0 - 3*t_1 - 3) \n```", "```py\nsympy.solvers.diophantine.diophantine.base_solution_linear(c, a, b, t=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import base_solution_linear\n>>> from sympy.abc import t\n>>> base_solution_linear(5, 2, 3) # equation 2*x + 3*y = 5\n(-5, 5)\n>>> base_solution_linear(0, 5, 7) # equation 5*x + 7*y = 0\n(0, 0)\n>>> base_solution_linear(5, 2, 3, t) # equation 2*x + 3*y = 5\n(3*t - 5, 5 - 2*t)\n>>> base_solution_linear(0, 5, 7, t) # equation 5*x + 7*y = 0\n(7*t, -5*t) \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_quadratic(eq, param=t)\n```", "```py\n>>> from sympy.abc import x, y, t\n>>> from sympy.solvers.diophantine.diophantine import diop_quadratic\n>>> diop_quadratic(x**2 + y**2 + 2*x + 2*y + 2, t)\n{(-1, -1)} \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_DN(D, N, t=t)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_DN\n>>> diop_DN(13, -4) # Solves equation x**2 - 13*y**2 = -4\n[(3, 1), (393, 109), (36, 10)] \n```", "```py\n>>> diop_DN(986, 1) # Solves equation x**2 - 986*y**2 = 1\n[(49299, 1570)] \n```", "```py\nsympy.solvers.diophantine.diophantine.cornacchia(a: int, b: int, m: int) â†’ set[tuple[int, int]]\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import cornacchia\n>>> cornacchia(2, 3, 35) # equation 2x**2 + 3y**2 = 35\n{(2, 3), (4, 1)}\n>>> cornacchia(1, 1, 25) # equation x**2 + y**2 = 25\n{(4, 3)} \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_bf_DN(D, N, t=t)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_bf_DN\n>>> diop_bf_DN(13, -4)\n[(3, 1), (-3, 1), (36, 10)]\n>>> diop_bf_DN(986, 1)\n[(49299, 1570)] \n```", "```py\nsympy.solvers.diophantine.diophantine.transformation_to_DN(eq)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy.solvers.diophantine.diophantine import transformation_to_DN\n>>> A, B = transformation_to_DN(x**2 - 3*x*y - y**2 - 2*y + 1)\n>>> A\nMatrix([\n[1/26, 3/26],\n[   0, 1/13]])\n>>> B\nMatrix([\n[-6/13],\n[-4/13]]) \n```", "```py\n>>> from sympy.abc import X, Y\n>>> from sympy import Matrix, simplify\n>>> u = (A*Matrix([X, Y]) + B)[0] # Transformation for x\n>>> u\nX/26 + 3*Y/26 - 6/13\n>>> v = (A*Matrix([X, Y]) + B)[1] # Transformation for y\n>>> v\nY/13 - 4/13 \n```", "```py\n>>> eq = simplify((x**2 - 3*x*y - y**2 - 2*y + 1).subs(zip((x, y), (u, v))))\n>>> eq\nX**2/676 - Y**2/52 + 17/13 \n```", "```py\n>>> eq * 676\nX**2 - 13*Y**2 + 884 \n```", "```py\nsympy.solvers.diophantine.diophantine.transformation_to_normal(eq)\n```", "```py\nsympy.solvers.diophantine.diophantine.find_DN(eq)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy.solvers.diophantine.diophantine import find_DN\n>>> find_DN(x**2 - 3*x*y - y**2 - 2*y + 1)\n(13, -884) \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_ternary_quadratic(eq, parameterize=False)\n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy.solvers.diophantine.diophantine import diop_ternary_quadratic\n>>> diop_ternary_quadratic(x**2 + 3*y**2 - z**2)\n(1, 0, 1)\n>>> diop_ternary_quadratic(4*x**2 + 5*y**2 - z**2)\n(1, 0, 2)\n>>> diop_ternary_quadratic(45*x**2 - 7*y**2 - 8*x*y - z**2)\n(28, 45, 105)\n>>> diop_ternary_quadratic(x**2 - 49*y**2 - z**2 + 13*z*y -8*x*y)\n(9, 1, 5) \n```", "```py\nsympy.solvers.diophantine.diophantine.square_factor(a)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import square_factor\n>>> square_factor(24)\n2\n>>> square_factor(-36*3)\n6\n>>> square_factor(1)\n1\n>>> square_factor({3: 2, 2: 1, -1: 1})  # -18\n3 \n```", "```py\nsympy.solvers.diophantine.diophantine.descent(A, B)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import descent\n>>> descent(3, 1) # x**2 = 3*y**2 + z**2\n(1, 0, 1) \n```", "```py\n>>> descent(41, -113)\n(-16, -3, 1) \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_general_pythagorean(eq, param=m)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_general_pythagorean\n>>> from sympy.abc import a, b, c, d, e\n>>> diop_general_pythagorean(a**2 + b**2 + c**2 - d**2)\n(m1**2 + m2**2 - m3**2, 2*m1*m3, 2*m2*m3, m1**2 + m2**2 + m3**2)\n>>> diop_general_pythagorean(9*a**2 - 4*b**2 + 16*c**2 + 25*d**2 + e**2)\n(10*m1**2  + 10*m2**2  + 10*m3**2 - 10*m4**2, 15*m1**2  + 15*m2**2  + 15*m3**2  + 15*m4**2, 15*m1*m4, 12*m2*m4, 60*m3*m4) \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_general_sum_of_squares(eq, limit=1)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_general_sum_of_squares\n>>> from sympy.abc import a, b, c, d, e\n>>> diop_general_sum_of_squares(a**2 + b**2 + c**2 + d**2 + e**2 - 2345)\n{(15, 22, 22, 24, 24)} \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers(eq, limit=1)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import diop_general_sum_of_even_powers\n>>> from sympy.abc import a, b\n>>> diop_general_sum_of_even_powers(a**4 + b**4 - (2**4 + 3**4))\n{(2, 3)} \n```", "```py\nsympy.solvers.diophantine.diophantine.power_representation(n, p, k, zeros=False)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import power_representation \n```", "```py\n>>> f = power_representation(1729, 3, 2)\n>>> next(f)\n(9, 10)\n>>> next(f)\n(1, 12) \n```", "```py\n>>> list(power_representation(125, 2, 3, zeros=True))\n[(5, 6, 8), (3, 4, 10), (0, 5, 10), (0, 2, 11)] \n```", "```py\n>>> from sympy.utilities.iterables import permute_signs\n>>> list(permute_signs((1, 12)))\n[(1, 12), (-1, 12), (1, -12), (-1, -12)] \n```", "```py\n>>> from sympy.utilities.iterables import signed_permutations\n>>> list(signed_permutations((1, 12)))\n[(1, 12), (-1, 12), (1, -12), (-1, -12), (12, 1), (-12, 1), (12, -1), (-12, -1)] \n```", "```py\nsympy.solvers.diophantine.diophantine.partition(n, k=None, zeros=False)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import partition\n>>> f = partition(5)\n>>> next(f)\n(1, 1, 1, 1, 1)\n>>> next(f)\n(1, 1, 1, 2)\n>>> g = partition(5, 3)\n>>> next(g)\n(1, 1, 3)\n>>> next(g)\n(1, 2, 2)\n>>> g = partition(5, 3, zeros=True)\n>>> next(g)\n(0, 0, 5) \n```", "```py\nsympy.solvers.diophantine.diophantine.sum_of_three_squares(n)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import sum_of_three_squares\n>>> sum_of_three_squares(44542)\n(18, 37, 207) \n```", "```py\nsympy.solvers.diophantine.diophantine.sum_of_four_squares(n)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import sum_of_four_squares\n>>> sum_of_four_squares(3456)\n(8, 8, 32, 48)\n>>> sum_of_four_squares(1294585930293)\n(0, 1234, 2161, 1137796) \n```", "```py\nsympy.solvers.diophantine.diophantine.sum_of_powers(n, p, k, zeros=False)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import power_representation \n```", "```py\n>>> f = power_representation(1729, 3, 2)\n>>> next(f)\n(9, 10)\n>>> next(f)\n(1, 12) \n```", "```py\n>>> list(power_representation(125, 2, 3, zeros=True))\n[(5, 6, 8), (3, 4, 10), (0, 5, 10), (0, 2, 11)] \n```", "```py\n>>> from sympy.utilities.iterables import permute_signs\n>>> list(permute_signs((1, 12)))\n[(1, 12), (-1, 12), (1, -12), (-1, -12)] \n```", "```py\n>>> from sympy.utilities.iterables import signed_permutations\n>>> list(signed_permutations((1, 12)))\n[(1, 12), (-1, 12), (1, -12), (-1, -12), (12, 1), (-12, 1), (12, -1), (-12, -1)] \n```", "```py\nsympy.solvers.diophantine.diophantine.sum_of_squares(n, k, zeros=False)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import sum_of_squares\n>>> list(sum_of_squares(25, 2))\n[(3, 4)]\n>>> list(sum_of_squares(25, 2, True))\n[(3, 4), (0, 5)]\n>>> list(sum_of_squares(25, 4))\n[(1, 2, 2, 4)] \n```", "```py\nsympy.solvers.diophantine.diophantine.merge_solution(var, var_t, solution)\n```", "```py\nsympy.solvers.diophantine.diophantine.divisible(a, b)\n```", "```py\nsympy.solvers.diophantine.diophantine.PQa(P_0, Q_0, D)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import PQa\n>>> pqa = PQa(13, 4, 5) # (13 + sqrt(5))/4\n>>> next(pqa) # (P_0, Q_0, a_0, A_0, B_0, G_0)\n(13, 4, 3, 3, 1, -1)\n>>> next(pqa) # (P_1, Q_1, a_1, A_1, B_1, G_1)\n(-1, 1, 1, 4, 1, 3) \n```", "```py\nsympy.solvers.diophantine.diophantine.equivalent(u, v, r, s, D, N)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import equivalent\n>>> equivalent(18, 5, -18, -5, 13, -1)\nTrue\n>>> equivalent(3, 1, -18, 393, 109, -4)\nFalse \n```", "```py\nsympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic(eq)\n```", "```py\n>>> from sympy import Tuple, ordered\n>>> from sympy.abc import x, y, z\n>>> from sympy.solvers.diophantine.diophantine import parametrize_ternary_quadratic \n```", "```py\n>>> parametrize_ternary_quadratic(2*x**2 + y**2 - 2*z**2)\n(p**2 - 2*q**2, -2*p**2 + 4*p*q - 4*p*r - 4*q**2, p**2 - 4*p*q + 2*q**2 - 4*q*r) \n```", "```py\n>>> parametrize_ternary_quadratic(4*x**2 + 2*y**2 - 3*z**2)\n(2*p**2 - 3*q**2, -4*p**2 + 12*p*q - 6*q**2, 4*p**2 - 8*p*q + 6*q**2) \n```", "```py\n>>> sol = Tuple(*_)\n>>> p, q = ordered(sol.free_symbols)\n>>> sol.subs([(p, 3), (q, 2)])\n(6, 12, 12)\n>>> sol.subs([(q, 1), (p, 1)])\n(-1, 2, 2)\n>>> sol.subs([(q, 0), (p, 1)])\n(2, -4, 4)\n>>> sol.subs([(q, 1), (p, 0)])\n(-3, -6, 6) \n```", "```py\nsympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal(eq, parameterize=False)\n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy.solvers.diophantine.diophantine import diop_ternary_quadratic_normal\n>>> diop_ternary_quadratic_normal(x**2 + 3*y**2 - z**2)\n(1, 0, 1)\n>>> diop_ternary_quadratic_normal(4*x**2 + 5*y**2 - z**2)\n(1, 0, 2)\n>>> diop_ternary_quadratic_normal(34*x**2 - 3*y**2 - 301*z**2)\n(4, 9, 1) \n```", "```py\nsympy.solvers.diophantine.diophantine.ldescent(A, B)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import ldescent\n>>> ldescent(1, 1) # w^2 = x^2 + y^2\n(1, 1, 0)\n>>> ldescent(4, -7) # w^2 = 4x^2 - 7y^2\n(2, -1, 0) \n```", "```py\n>>> ldescent(5, -1) # w^2 = 5x^2 - y^2\n(2, 1, -1) \n```", "```py\nsympy.solvers.diophantine.diophantine.gaussian_reduce(w: int, a: int, b: int) â†’ tuple[int, int]\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import gaussian_reduce\n>>> from sympy.ntheory.residue_ntheory import sqrt_mod\n>>> a, b = 19, 101\n>>> gaussian_reduce(sqrt_mod(a, b), a, b) # 1**2 - 19*(-4)**2 = -303\n(1, -4)\n>>> a, b = 11, 14\n>>> x, z = gaussian_reduce(sqrt_mod(a, b), a, b)\n>>> (x**2 - a*z**2) % b == 0\nTrue \n```", "```py\n>>> a, b = 6, 95\n>>> min_x, min_z = 1, 4\n>>> x, z = gaussian_reduce(sqrt_mod(a, b), a, b)\n>>> (x**2 - a*z**2) % b == 0 and (min_x**2 - a*min_z**2) % b == 0\nTrue\n>>> min_x**2 + abs(a)*min_z**2 < x**2 + abs(a)*z**2\nTrue \n```", "```py\nsympy.solvers.diophantine.diophantine.holzer(x, y, z, a, b, c)\n```", "```py\nsympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares(p)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import prime_as_sum_of_two_squares\n>>> prime_as_sum_of_two_squares(7)  # can't be done\n>>> prime_as_sum_of_two_squares(5)\n(1, 2) \n```", "```py\nsympy.solvers.diophantine.diophantine.sqf_normal(a, b, c, steps=False)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import sqf_normal\n>>> sqf_normal(2 * 3**2 * 5, 2 * 5 * 11, 2 * 7**2 * 11)\n(11, 1, 5)\n>>> sqf_normal(2 * 3**2 * 5, 2 * 5 * 11, 2 * 7**2 * 11, True)\n((3, 1, 7), (5, 55, 11), (11, 1, 5)) \n```", "```py\nsympy.solvers.diophantine.diophantine.reconstruct(A, B, z)\n```", "```py\nclass sympy.solvers.diophantine.diophantine.DiophantineSolutionSet(symbols_seq, parameters)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import DiophantineSolutionSet\n>>> from sympy.abc import x, y, t, u\n>>> s1 = DiophantineSolutionSet([x, y], [t, u])\n>>> s1\nset()\n>>> s1.add((2, 3))\n>>> s1.add((-1, u))\n>>> s1\n{(-1, u), (2, 3)}\n>>> s2 = DiophantineSolutionSet([x, y], [t, u])\n>>> s2.add((3, 4))\n>>> s1.update(*s2)\n>>> s1\n{(-1, u), (2, 3), (3, 4)} \n```", "```py\n>>> list(s1.dict_iterator())\n[{x: -1, y: u}, {x: 2, y: 3}, {x: 3, y: 4}] \n```", "```py\n>>> s3 = DiophantineSolutionSet([x, y], [t, u])\n>>> s3.add((t**2, t + u))\n>>> s3\n{(t**2, t + u)}\n>>> s3.subs({t: 2, u: 3})\n{(4, 5)}\n>>> s3.subs(t, -1)\n{(1, u - 1)}\n>>> s3.subs(t, 3)\n{(9, u + 3)} \n```", "```py\n>>> s3(-2, 3)\n{(4, 1)}\n>>> s3(5)\n{(25, u + 5)}\n>>> s3(None, 2)\n{(t**2, t + 2)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.DiophantineEquationType(equation, free_symbols=None)\n```", "```py\nmatches()\n```", "```py\nclass sympy.solvers.diophantine.diophantine.Univariate(equation, free_symbols=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import Univariate\n>>> from sympy.abc import x\n>>> Univariate((x - 2)*(x - 3)**2).solve() # solves equation (x - 2)*(x - 3)**2 == 0\n{(2,), (3,)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.Linear(equation, free_symbols=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import Linear\n>>> from sympy.abc import x, y, z\n>>> l1 = Linear(2*x - 3*y - 5)\n>>> l1.matches() # is this equation linear\nTrue\n>>> l1.solve() # solves equation 2*x - 3*y - 5 == 0\n{(3*t_0 - 5, 2*t_0 - 5)} \n```", "```py\n>>> Linear(2*x - 3*y - 4*z -3).solve()\n{(t_0, 2*t_0 + 4*t_1 + 3, -t_0 - 3*t_1 - 3)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.BinaryQuadratic(equation, free_symbols=None)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy.solvers.diophantine.diophantine import BinaryQuadratic\n>>> b1 = BinaryQuadratic(x**3 + y**2 + 1)\n>>> b1.matches()\nFalse\n>>> b2 = BinaryQuadratic(x**2 + y**2 + 2*x + 2*y + 2)\n>>> b2.matches()\nTrue\n>>> b2.solve()\n{(-1, -1)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic(equation, free_symbols=None)\n```", "```py\nclass sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal(equation, free_symbols=None)\n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy.solvers.diophantine.diophantine import HomogeneousTernaryQuadraticNormal\n>>> HomogeneousTernaryQuadraticNormal(4*x**2 - 5*y**2 + z**2).solve()\n{(1, 2, 4)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic(equation, free_symbols=None)\n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy.solvers.diophantine.diophantine import HomogeneousTernaryQuadratic\n>>> HomogeneousTernaryQuadratic(x**2 + y**2 - 3*z**2 + x*y).solve()\n{(-1, 2, 1)}\n>>> HomogeneousTernaryQuadratic(3*x**2 + y**2 - 3*z**2 + 5*x*y + y*z).solve()\n{(3, 12, 13)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic(equation, free_symbols=None)\n```", "```py\nclass sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic(equation, free_symbols=None)\n```", "```py\nclass sympy.solvers.diophantine.diophantine.GeneralSumOfSquares(equation, free_symbols=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import GeneralSumOfSquares\n>>> from sympy.abc import a, b, c, d, e\n>>> GeneralSumOfSquares(a**2 + b**2 + c**2 + d**2 + e**2 - 2345).solve()\n{(15, 22, 22, 24, 24)} \n```", "```py\n>>> sorted(GeneralSumOfSquares(a**2 + b**2 + c**2 + d**2 + e**2 - 2345).solve(limit=3))\n[(15, 22, 22, 24, 24), (16, 19, 24, 24, 24), (16, 20, 22, 23, 26)] \n```", "```py\nclass sympy.solvers.diophantine.diophantine.GeneralPythagorean(equation, free_symbols=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import GeneralPythagorean\n>>> from sympy.abc import a, b, c, d, e, x, y, z, t\n>>> GeneralPythagorean(a**2 + b**2 + c**2 - d**2).solve()\n{(t_0**2 + t_1**2 - t_2**2, 2*t_0*t_2, 2*t_1*t_2, t_0**2 + t_1**2 + t_2**2)}\n>>> GeneralPythagorean(9*a**2 - 4*b**2 + 16*c**2 + 25*d**2 + e**2).solve(parameters=[x, y, z, t])\n{(-10*t**2 + 10*x**2 + 10*y**2 + 10*z**2, 15*t**2 + 15*x**2 + 15*y**2 + 15*z**2, 15*t*x, 12*t*y, 60*t*z)} \n```", "```py\nclass sympy.solvers.diophantine.diophantine.CubicThue(equation, free_symbols=None)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy.solvers.diophantine.diophantine import CubicThue\n>>> c1 = CubicThue(x**3 + y**2 + 1)\n>>> c1.matches()\nTrue \n```", "```py\nclass sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers(equation, free_symbols=None)\n```", "```py\n>>> from sympy.solvers.diophantine.diophantine import GeneralSumOfEvenPowers\n>>> from sympy.abc import a, b\n>>> GeneralSumOfEvenPowers(a**4 + b**4 - (2**4 + 3**4)).solve()\n{(2, 3)} \n```"]