- en: Packaging (numpy.distutils)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/distutils.html](https://numpy.org/doc/1.26/reference/distutils.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.distutils` is deprecated, and will be removed for Python >= 3.12\. For
    more details, see [Status of numpy.distutils and migration advice](distutils_status_migration.html#distutils-status-migration)'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Note that `setuptools` does major releases often and those may contain changes
    that break `numpy.distutils`, which will *not* be updated anymore for new `setuptools`
    versions. It is therefore recommended to set an upper version bound in your build
    configuration for the last known version of `setuptools` that works with your
    build.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy provides enhanced distutils functionality to make it easier to build and
    install sub-packages, auto-generate code, and extension modules that use Fortran-compiled
    libraries. To use features of NumPy distutils, use the `setup` command from `numpy.distutils.core`.
    A useful [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    class is also provided in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util") that can make it easier to construct keyword arguments
    to pass to the setup function (by passing the dictionary obtained from the todict()
    method of the class). More information is available in the [NumPy distutils -
    users guide](distutils_guide.html#distutils-user-guide).
  prefs: []
  type: TYPE_NORMAL
- en: The choice and location of linked libraries such as BLAS and LAPACK as well
    as include paths and other such build options can be specified in a `site.cfg`
    file located in the NumPy root repository or a `.numpy-site.cfg` file in your
    home directory. See the `site.cfg.example` example file included in the NumPy
    repository or sdist for documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '## Modules in [`numpy.distutils`](#module-numpy.distutils "numpy.distutils")'
  prefs: []
  type: TYPE_NORMAL
- en: '[distutils.misc_util](distutils/misc_util.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | Provides the *CCompilerOpt* class, used for
    handling the CPU/hardware optimization, starting from parsing the command arguments,
    to managing the relation between the CPU baseline and dispatch-able features,
    also generating the required C headers and ending with compiling the sources with
    proper compiler''s flags. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
  prefs: []
  type: TYPE_TB
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
  prefs: []
  type: TYPE_TB
- en: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) | Returns a list of files
    named ''fname'' from 1) System-wide directory (directory-location of this module)
    2) Users HOME directory (os.environ[''HOME'']) 3) Local directory |'
  prefs: []
  type: TYPE_TB
- en: Configuration class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct a configuration instance for the given package name. If *parent_name*
    is not None, then construct the package as a sub-package of the *parent_name*
    package. If *top_path* and *package_path* are None then they are assumed equal
    to the path of the file this instance was created in. The setup.py files in the
    numpy distribution are good examples of how to use the [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary compatible with the keyword arguments of distutils setup
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Return the distutils distribution object for self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Return list of subpackage configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_name**str or None'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the subpackage to get the configuration. ‘*’ in subpackage_name is handled
    as a wildcard.
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_path**str'
  prefs: []
  type: TYPE_NORMAL
- en: If None, then the path is assumed to be the local path plus the subpackage_name.
    If a setup.py file is not found in the subpackage_path, then a default configuration
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**parent_name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Parent name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Add a sub-package to the current Configuration instance.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful in a setup.py script for adding sub-packages to a package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_name**str'
  prefs: []
  type: TYPE_NORMAL
- en: name of the subpackage
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_path**str'
  prefs: []
  type: TYPE_NORMAL
- en: if given, the subpackage path such as the subpackage is in subpackage_path /
    subpackage_name. If None,the subpackage is assumed to be located in the local
    path / subpackage_name.
  prefs: []
  type: TYPE_NORMAL
- en: '**standalone**bool'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Add data files to configuration data_files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**files**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Argument(s) can be either
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<datadir prefix>,<path to data file(s)>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: paths to data files where python datadir prefix defaults to package dir.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The form of each element of the files sequence is very flexible allowing many
    combinations of where to get the files from the package and where they should
    ultimately be installed on the system. The most basic usage is for an element
    of the files argument sequence to be a simple filename. This will cause that file
    from the local path to be installed to the installation path of the self.name
    package (package path). The file argument can also be a relative path in which
    case the entire relative path will be installed into the package directory. Finally,
    the file can be an absolute path name in which case the file will be found at
    the absolute path name but installed to the package path.
  prefs: []
  type: TYPE_NORMAL
- en: This basic behavior can be augmented by passing a 2-tuple in as the file argument.
    The first element of the tuple should specify the relative path (under the package
    install directory) where the remaining sequence of files should be installed to
    (it has nothing to do with the file-names in the source distribution). The second
    element of the tuple is the sequence of files that should be installed. The files
    in this sequence can be filenames, relative paths, or absolute paths. For absolute
    paths the file will be installed in the top-level package installation directory
    (regardless of the first argument). Filenames and relative path names will be
    installed in the package install directory under the path name given as the first
    element of the tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules for installation paths:'
  prefs: []
  type: TYPE_NORMAL
- en: file.txt -> (., file.txt)-> parent/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*`.txt -> parent/a.txt, parent/b.txt'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: An additional feature is that the path to a data-file can actually be a function
    that takes no arguments and returns the actual path(s) to the data-files. This
    is useful when the data files are generated while building the package.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Add files to the list of data_files to be included with the package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'will install these data files to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'where <package install directory> is the package (or sub-package) directory
    such as ‘/usr/lib/python2.4/site-packages/mypackage’ (‘C: Python2.4 Lib site-packages
    mypackage’) or ‘/usr/lib/python2.4/site- packages/mypackage/mysubpackage’ (‘C:
    Python2.4 Lib site-packages mypackage mysubpackage’).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Recursively add files under data_path to data_files list.
  prefs: []
  type: TYPE_NORMAL
- en: Recursively add files under data_path to the list of data_files to be installed
    (and distributed). The data_path can be either a relative path-name, or an absolute
    path-name, or a 2-tuple where the first argument shows where in the install directory
    the data directory should be installed to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_path**seq or str'
  prefs: []
  type: TYPE_NORMAL
- en: Argument can be either
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<datadir suffix>, <path to data directory>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path to data directory where python datadir suffix defaults to package dir.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules for installation paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For example suppose the source directory contains fun/foo.dat and fun/bar/car.dat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Will install data-files to the locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Add paths to configuration include directories.
  prefs: []
  type: TYPE_NORMAL
- en: Add the given sequence of paths to the beginning of the include_dirs list. This
    list will be visible to all extension modules of the current package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Add installable headers to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Add the given sequence of files to the beginning of the headers list. By default,
    headers will be installed under <python- include>/<self.name.replace(‘.’,’/’)>/
    directory. If an item of files is a tuple, then its first argument specifies the
    actual installation location relative to the <python-include> path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**files**str or seq'
  prefs: []
  type: TYPE_NORMAL
- en: 'Argument(s) can be either:'
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<includedir suffix>,<path to header file(s)>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path(s) to header file(s) where python includedir suffix will default to package
    name.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add extension to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Create and add an Extension instance to the ext_modules list. This method also
    takes the following optional keyword arguments that are passed on to the Extension
    constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: name of the extension
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**seq'
  prefs: []
  type: TYPE_NORMAL
- en: list of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  prefs: []
  type: TYPE_NORMAL
- en: '**include_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**define_macros**'
  prefs: []
  type: TYPE_NORMAL
- en: '**undef_macros**'
  prefs: []
  type: TYPE_NORMAL
- en: '**library_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**libraries**'
  prefs: []
  type: TYPE_NORMAL
- en: '**runtime_library_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_objects**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_link_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_f77_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_f90_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**export_symbols**'
  prefs: []
  type: TYPE_NORMAL
- en: '**swig_opts**'
  prefs: []
  type: TYPE_NORMAL
- en: '**depends**'
  prefs: []
  type: TYPE_NORMAL
- en: The depends list contains paths to files or directories that the sources of
    the extension module depend on. If any path in the depends list is newer than
    the extension module, then the module will be rebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: '**language**'
  prefs: []
  type: TYPE_NORMAL
- en: '**f2py_options**'
  prefs: []
  type: TYPE_NORMAL
- en: '**module_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_info**dict or list'
  prefs: []
  type: TYPE_NORMAL
- en: dict or list of dict of keywords to be appended to keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The self.paths(…) method is applied to all lists that may contain paths.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Add library to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: List of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  prefs: []
  type: TYPE_NORMAL
- en: '**build_info**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keys are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: depends
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Add scripts to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Add the sequence of files to the beginning of the scripts list. Scripts will
    be installed under the <prefix>/bin/ directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Similar to add_library, but the specified library is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Most C libraries used with [`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(in Python v3.11)") are only used to build python extensions, but libraries built
    through this method will be installed so that they can be reused by third-party
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the installed library.
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: List of the library’s source files. See [`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library") for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**install_dir**str'
  prefs: []
  type: TYPE_NORMAL
- en: Path to install the library, relative to the current sub-package.
  prefs: []
  type: TYPE_NORMAL
- en: '**build_info**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keys are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: depends
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library"),
    [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The best way to encode the options required to link against the specified C
    libraries is to use a “libname.ini” file, and use [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") to retrieve the required options (see [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config") for more information).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Generate and install a npy-pkg config file from a template.
  prefs: []
  type: TYPE_NORMAL
- en: The config file generated from *template* is installed in the given install
    directory, using *subst_dict* for variable substitution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**template**str'
  prefs: []
  type: TYPE_NORMAL
- en: The path of the template, relatively to the current package path.
  prefs: []
  type: TYPE_NORMAL
- en: '**install_dir**str'
  prefs: []
  type: TYPE_NORMAL
- en: Where to install the npy-pkg config file, relatively to the current package
    path.
  prefs: []
  type: TYPE_NORMAL
- en: '**subst_dict**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If given, any string of the form `@key@` will be replaced by `subst_dict[key]`
    in the template file when installed. The install prefix is always available through
    the variable `@prefix@`, since the install prefix is not easy to get reliably
    from setup.py.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This works for both standard installs and in-place builds, i.e. the `@prefix@`
    refer to the source directory for in-place builds.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming the foo.ini.in file has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated file will have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: and will be installed as foo.ini in the ‘lib’ subpath.
  prefs: []
  type: TYPE_NORMAL
- en: When cross-compiling with numpy distutils, it might be necessary to use modified
    npy-pkg-config files. Using the default/generated files will link with the host
    libraries (i.e. libnpymath.a). For cross-compilation you of-course need to link
    with target libraries, while using the host Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: You can copy out the numpy/core/lib/npy-pkg-config directory, add a pkgdir value
    to the .ini files and set NPY_PKG_CONFIG_PATH environment variable to point to
    the directory with the modified npy-pkg-config files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example npymath.ini modified for cross-compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Apply glob to paths and prepend local_path if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Applies glob.glob(…) to each path in the sequence (if needed) and pre-pends
    the local_path if needed. Because this is called on all source lists, this allows
    wildcard characters to be specified in lists of sources for extension modules
    and libraries and scripts and allows path-names be relative to the source directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the numpy.distutils config command instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Return a path to a temporary directory where temporary files should be placed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Check for availability of Fortran 77 compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: True if a Fortran 77 compiler is available (because a simple Fortran 77 code
    was able to be compiled successfully).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Check for availability of Fortran 90 compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: True if a Fortran 90 compiler is available (because a simple Fortran 90 code
    was able to be compiled successfully)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Try to get version string of a package.
  prefs: []
  type: TYPE_NORMAL
- en: Return a version string of the current package or None if the version information
    could not be detected.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method scans files named __version__.py, <packagename>_version.py, version.py,
    and __svn_version__.py for string variables version, __version__, and <packagename>_version,
    until a version number is found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Appends a data function to the data_files list that will generate __svn_version__.py
    file to the current package directory.
  prefs: []
  type: TYPE_NORMAL
- en: Generate package __svn_version__.py file from SVN revision number, it will be
    removed after python exits but will be available when sdist, etc commands are
    executed.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If __svn_version__.py existed before, nothing is done.
  prefs: []
  type: TYPE_NORMAL
- en: This is intended for working with source directories that are in an SVN repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Generate package __config__.py file containing system_info information used
    during building the package.
  prefs: []
  type: TYPE_NORMAL
- en: This file is installed to the package installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Get resources information.
  prefs: []
  type: TYPE_NORMAL
- en: Return information (from system_info.get_info) for all of the names in the argument
    list in a single dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Building Installable C libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conventional C libraries (installed through *add_library*) are not installed,
    and are just used during the build (they are statically linked). An installable
    C library is a pure C library, which does not depend on the python C runtime,
    and is installed such that it may be used by third-party packages. To build and
    install the C library, you just use the method *add_installed_library* instead
    of *add_library*, which takes the same arguments except for an additional `install_dir`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: npy-pkg-config files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'and the following code in setup.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing a C library from another package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  prefs: []
  type: TYPE_NORMAL
- en: Conversion of `.src` files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases. See [Conversion of .src files using
    Templates](distutils_guide.html#templating).
  prefs: []
  type: TYPE_NORMAL
- en: '## Modules in [`numpy.distutils`](#module-numpy.distutils "numpy.distutils")'
  prefs: []
  type: TYPE_NORMAL
- en: '[distutils.misc_util](distutils/misc_util.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | Provides the *CCompilerOpt* class, used for
    handling the CPU/hardware optimization, starting from parsing the command arguments,
    to managing the relation between the CPU baseline and dispatch-able features,
    also generating the required C headers and ending with compiling the sources with
    proper compiler''s flags. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
  prefs: []
  type: TYPE_TB
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
  prefs: []
  type: TYPE_TB
- en: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) | Returns a list of files
    named ''fname'' from 1) System-wide directory (directory-location of this module)
    2) Users HOME directory (os.environ[''HOME'']) 3) Local directory |'
  prefs: []
  type: TYPE_TB
- en: Configuration class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Construct a configuration instance for the given package name. If *parent_name*
    is not None, then construct the package as a sub-package of the *parent_name*
    package. If *top_path* and *package_path* are None then they are assumed equal
    to the path of the file this instance was created in. The setup.py files in the
    numpy distribution are good examples of how to use the [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary compatible with the keyword arguments of distutils setup
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Return the distutils distribution object for self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return list of subpackage configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_name**str or None'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the subpackage to get the configuration. ‘*’ in subpackage_name is handled
    as a wildcard.
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_path**str'
  prefs: []
  type: TYPE_NORMAL
- en: If None, then the path is assumed to be the local path plus the subpackage_name.
    If a setup.py file is not found in the subpackage_path, then a default configuration
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**parent_name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Parent name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Add a sub-package to the current Configuration instance.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful in a setup.py script for adding sub-packages to a package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_name**str'
  prefs: []
  type: TYPE_NORMAL
- en: name of the subpackage
  prefs: []
  type: TYPE_NORMAL
- en: '**subpackage_path**str'
  prefs: []
  type: TYPE_NORMAL
- en: if given, the subpackage path such as the subpackage is in subpackage_path /
    subpackage_name. If None,the subpackage is assumed to be located in the local
    path / subpackage_name.
  prefs: []
  type: TYPE_NORMAL
- en: '**standalone**bool'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Add data files to configuration data_files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**files**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Argument(s) can be either
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<datadir prefix>,<path to data file(s)>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: paths to data files where python datadir prefix defaults to package dir.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The form of each element of the files sequence is very flexible allowing many
    combinations of where to get the files from the package and where they should
    ultimately be installed on the system. The most basic usage is for an element
    of the files argument sequence to be a simple filename. This will cause that file
    from the local path to be installed to the installation path of the self.name
    package (package path). The file argument can also be a relative path in which
    case the entire relative path will be installed into the package directory. Finally,
    the file can be an absolute path name in which case the file will be found at
    the absolute path name but installed to the package path.
  prefs: []
  type: TYPE_NORMAL
- en: This basic behavior can be augmented by passing a 2-tuple in as the file argument.
    The first element of the tuple should specify the relative path (under the package
    install directory) where the remaining sequence of files should be installed to
    (it has nothing to do with the file-names in the source distribution). The second
    element of the tuple is the sequence of files that should be installed. The files
    in this sequence can be filenames, relative paths, or absolute paths. For absolute
    paths the file will be installed in the top-level package installation directory
    (regardless of the first argument). Filenames and relative path names will be
    installed in the package install directory under the path name given as the first
    element of the tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules for installation paths:'
  prefs: []
  type: TYPE_NORMAL
- en: file.txt -> (., file.txt)-> parent/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*`.txt -> parent/a.txt, parent/b.txt'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: An additional feature is that the path to a data-file can actually be a function
    that takes no arguments and returns the actual path(s) to the data-files. This
    is useful when the data files are generated while building the package.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Add files to the list of data_files to be included with the package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'will install these data files to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'where <package install directory> is the package (or sub-package) directory
    such as ‘/usr/lib/python2.4/site-packages/mypackage’ (‘C: Python2.4 Lib site-packages
    mypackage’) or ‘/usr/lib/python2.4/site- packages/mypackage/mysubpackage’ (‘C:
    Python2.4 Lib site-packages mypackage mysubpackage’).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Recursively add files under data_path to data_files list.
  prefs: []
  type: TYPE_NORMAL
- en: Recursively add files under data_path to the list of data_files to be installed
    (and distributed). The data_path can be either a relative path-name, or an absolute
    path-name, or a 2-tuple where the first argument shows where in the install directory
    the data directory should be installed to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data_path**seq or str'
  prefs: []
  type: TYPE_NORMAL
- en: Argument can be either
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<datadir suffix>, <path to data directory>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path to data directory where python datadir suffix defaults to package dir.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules for installation paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For example suppose the source directory contains fun/foo.dat and fun/bar/car.dat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Will install data-files to the locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Add paths to configuration include directories.
  prefs: []
  type: TYPE_NORMAL
- en: Add the given sequence of paths to the beginning of the include_dirs list. This
    list will be visible to all extension modules of the current package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Add installable headers to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Add the given sequence of files to the beginning of the headers list. By default,
    headers will be installed under <python- include>/<self.name.replace(‘.’,’/’)>/
    directory. If an item of files is a tuple, then its first argument specifies the
    actual installation location relative to the <python-include> path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**files**str or seq'
  prefs: []
  type: TYPE_NORMAL
- en: 'Argument(s) can be either:'
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence (<includedir suffix>,<path to header file(s)>)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path(s) to header file(s) where python includedir suffix will default to package
    name.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Add extension to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Create and add an Extension instance to the ext_modules list. This method also
    takes the following optional keyword arguments that are passed on to the Extension
    constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: name of the extension
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**seq'
  prefs: []
  type: TYPE_NORMAL
- en: list of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  prefs: []
  type: TYPE_NORMAL
- en: '**include_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**define_macros**'
  prefs: []
  type: TYPE_NORMAL
- en: '**undef_macros**'
  prefs: []
  type: TYPE_NORMAL
- en: '**library_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**libraries**'
  prefs: []
  type: TYPE_NORMAL
- en: '**runtime_library_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_objects**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_link_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_f77_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_f90_compile_args**'
  prefs: []
  type: TYPE_NORMAL
- en: '**export_symbols**'
  prefs: []
  type: TYPE_NORMAL
- en: '**swig_opts**'
  prefs: []
  type: TYPE_NORMAL
- en: '**depends**'
  prefs: []
  type: TYPE_NORMAL
- en: The depends list contains paths to files or directories that the sources of
    the extension module depend on. If any path in the depends list is newer than
    the extension module, then the module will be rebuilt.
  prefs: []
  type: TYPE_NORMAL
- en: '**language**'
  prefs: []
  type: TYPE_NORMAL
- en: '**f2py_options**'
  prefs: []
  type: TYPE_NORMAL
- en: '**module_dirs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_info**dict or list'
  prefs: []
  type: TYPE_NORMAL
- en: dict or list of dict of keywords to be appended to keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The self.paths(…) method is applied to all lists that may contain paths.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Add library to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: List of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  prefs: []
  type: TYPE_NORMAL
- en: '**build_info**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keys are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: depends
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Add scripts to configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Add the sequence of files to the beginning of the scripts list. Scripts will
    be installed under the <prefix>/bin/ directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Similar to add_library, but the specified library is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Most C libraries used with [`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(in Python v3.11)") are only used to build python extensions, but libraries built
    through this method will be installed so that they can be reused by third-party
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the installed library.
  prefs: []
  type: TYPE_NORMAL
- en: '**sources**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: List of the library’s source files. See [`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library") for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**install_dir**str'
  prefs: []
  type: TYPE_NORMAL
- en: Path to install the library, relative to the current sub-package.
  prefs: []
  type: TYPE_NORMAL
- en: '**build_info**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keys are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: depends
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library"),
    [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The best way to encode the options required to link against the specified C
    libraries is to use a “libname.ini” file, and use [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") to retrieve the required options (see [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config") for more information).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Generate and install a npy-pkg config file from a template.
  prefs: []
  type: TYPE_NORMAL
- en: The config file generated from *template* is installed in the given install
    directory, using *subst_dict* for variable substitution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**template**str'
  prefs: []
  type: TYPE_NORMAL
- en: The path of the template, relatively to the current package path.
  prefs: []
  type: TYPE_NORMAL
- en: '**install_dir**str'
  prefs: []
  type: TYPE_NORMAL
- en: Where to install the npy-pkg config file, relatively to the current package
    path.
  prefs: []
  type: TYPE_NORMAL
- en: '**subst_dict**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If given, any string of the form `@key@` will be replaced by `subst_dict[key]`
    in the template file when installed. The install prefix is always available through
    the variable `@prefix@`, since the install prefix is not easy to get reliably
    from setup.py.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This works for both standard installs and in-place builds, i.e. the `@prefix@`
    refer to the source directory for in-place builds.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming the foo.ini.in file has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated file will have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: and will be installed as foo.ini in the ‘lib’ subpath.
  prefs: []
  type: TYPE_NORMAL
- en: When cross-compiling with numpy distutils, it might be necessary to use modified
    npy-pkg-config files. Using the default/generated files will link with the host
    libraries (i.e. libnpymath.a). For cross-compilation you of-course need to link
    with target libraries, while using the host Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: You can copy out the numpy/core/lib/npy-pkg-config directory, add a pkgdir value
    to the .ini files and set NPY_PKG_CONFIG_PATH environment variable to point to
    the directory with the modified npy-pkg-config files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example npymath.ini modified for cross-compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Apply glob to paths and prepend local_path if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Applies glob.glob(…) to each path in the sequence (if needed) and pre-pends
    the local_path if needed. Because this is called on all source lists, this allows
    wildcard characters to be specified in lists of sources for extension modules
    and libraries and scripts and allows path-names be relative to the source directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Returns the numpy.distutils config command instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Return a path to a temporary directory where temporary files should be placed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Check for availability of Fortran 77 compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: True if a Fortran 77 compiler is available (because a simple Fortran 77 code
    was able to be compiled successfully).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Check for availability of Fortran 90 compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: True if a Fortran 90 compiler is available (because a simple Fortran 90 code
    was able to be compiled successfully)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Try to get version string of a package.
  prefs: []
  type: TYPE_NORMAL
- en: Return a version string of the current package or None if the version information
    could not be detected.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method scans files named __version__.py, <packagename>_version.py, version.py,
    and __svn_version__.py for string variables version, __version__, and <packagename>_version,
    until a version number is found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Appends a data function to the data_files list that will generate __svn_version__.py
    file to the current package directory.
  prefs: []
  type: TYPE_NORMAL
- en: Generate package __svn_version__.py file from SVN revision number, it will be
    removed after python exits but will be available when sdist, etc commands are
    executed.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If __svn_version__.py existed before, nothing is done.
  prefs: []
  type: TYPE_NORMAL
- en: This is intended for working with source directories that are in an SVN repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Generate package __config__.py file containing system_info information used
    during building the package.
  prefs: []
  type: TYPE_NORMAL
- en: This file is installed to the package installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Get resources information.
  prefs: []
  type: TYPE_NORMAL
- en: Return information (from system_info.get_info) for all of the names in the argument
    list in a single dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Building Installable C libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conventional C libraries (installed through *add_library*) are not installed,
    and are just used during the build (they are statically linked). An installable
    C library is a pure C library, which does not depend on the python C runtime,
    and is installed such that it may be used by third-party packages. To build and
    install the C library, you just use the method *add_installed_library* instead
    of *add_library*, which takes the same arguments except for an additional `install_dir`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: npy-pkg-config files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'and the following code in setup.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing a C library from another package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  prefs: []
  type: TYPE_NORMAL
- en: npy-pkg-config files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'and the following code in setup.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing a C library from another package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  prefs: []
  type: TYPE_NORMAL
- en: Conversion of `.src` files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases. See [Conversion of .src files using
    Templates](distutils_guide.html#templating).
  prefs: []
  type: TYPE_NORMAL
