["```py\nscipy.special.gdtrc(a, b, x, out=None) = <ufunc 'gdtrc'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import gdtrc\n>>> import matplotlib.pyplot as plt\n>>> gdtrc(1., 2., 5.)\n0.04042768199451279 \n```", "```py\n>>> xvalues = np.array([1., 2., 3., 4])\n>>> gdtrc(1., 1., xvalues)\narray([0.36787944, 0.13533528, 0.04978707, 0.01831564]) \n```", "```py\n>>> a = np.array([[0.5], [1.5], [2.5]])\n>>> x = np.array([1., 2., 3., 4])\n>>> a.shape, x.shape\n((3, 1), (4,)) \n```", "```py\n>>> gdtrc(a, 3., x)\narray([[0.98561232, 0.9196986 , 0.80884683, 0.67667642],\n [0.80884683, 0.42319008, 0.17357807, 0.0619688 ],\n [0.54381312, 0.12465202, 0.02025672, 0.0027694 ]]) \n```", "```py\n>>> a_parameters = [0.3, 1, 2, 6]\n>>> b_parameters = [2, 10, 15, 20]\n>>> linestyles = ['solid', 'dashed', 'dotted', 'dashdot']\n>>> parameters_list = list(zip(a_parameters, b_parameters, linestyles))\n>>> x = np.linspace(0, 30, 1000)\n>>> fig, ax = plt.subplots()\n>>> for parameter_set in parameters_list:\n...     a, b, style = parameter_set\n...     gdtrc_vals = gdtrc(a, b, x)\n...     ax.plot(x, gdtrc_vals, label=f\"$a= {a},\\, b={b}$\", ls=style)\n>>> ax.legend()\n>>> ax.set_xlabel(\"$x$\")\n>>> ax.set_title(\"Gamma distribution survival function\")\n>>> plt.show() \n```", "```py\n>>> from scipy.stats import gamma\n>>> a = 2\n>>> b = 3\n>>> x = 1.\n>>> gdtrc_result = gdtrc(a, b, x)  # this will often be faster than below\n>>> gamma_dist_result = gamma(b, scale=1/a).sf(x)\n>>> gdtrc_result == gamma_dist_result  # test that results are equal\nTrue \n```"]