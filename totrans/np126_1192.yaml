- en: NumPy 1.6.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.6.0-notes.html](https://numpy.org/doc/1.26/release/1.6.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This release includes several new features as well as numerous bug fixes and
    improved documentation. It is backward compatible with the 1.5.0 release, and
    supports Python 2.4 - 2.7 and 3.1 - 3.2.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Re-introduction of datetime dtype support to deal with dates in arrays.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new 16-bit floating point type.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new iterator, which improves performance of many functions.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New 16-bit floating point type
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This release adds support for the IEEE 754-2008 binary16 format, available as
    the data type `numpy.half`. Within Python, the type behaves similarly to *float*
    or *double*, and C extensions can add support for it with the exposed half-float
    API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: New iterator
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new iterator has been added, replacing the functionality of the existing iterator
    and multi-iterator with a single object and API. This iterator works well with
    general memory layouts different from C or Fortran contiguous, and handles both
    standard NumPy and customized broadcasting. The buffering, automatic data type
    conversion, and optional output parameters, offered by ufuncs but difficult to
    replicate elsewhere, are now exposed by this iterator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Legendre, Laguerre, Hermite, HermiteE polynomials in `numpy.polynomial`
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extend the number of polynomials available in the polynomial package. In addition,
    a new `window` attribute has been added to the classes in order to specify the
    range the `domain` maps to. This is mostly useful for the Laguerre, Hermite, and
    HermiteE polynomials whose natural domains are infinite and provides a more intuitive
    way to get the correct mapping of values without playing unnatural tricks with
    the domain.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Fortran assumed shape array and size function support in `numpy.f2py`
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: F2py now supports wrapping Fortran 90 routines that use assumed shape arrays.
    Before such routines could be called from Python but the corresponding Fortran
    routines received assumed shape arrays as zero length arrays which caused unpredicted
    results. Thanks to Lorenz Hüdepohl for pointing out the correct way to interface
    routines with assumed shape arrays.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In addition, f2py supports now automatic wrapping of Fortran routines that use
    two argument `size` function in dimension specifications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Other new functions
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.ravel_multi_index` : Converts a multi-index tuple into an array of flat
    indices, applying boundary modes to the indices.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.einsum` : Evaluate the Einstein summation convention. Using the Einstein
    summation convention, many common multi-dimensional array operations can be represented
    in a simple fashion. This function provides a way compute such summations.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.count_nonzero` : Counts the number of non-zero elements in an array.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.result_type` and `numpy.min_scalar_type` : These functions expose the
    underlying type promotion used by the ufuncs and other operations to determine
    the types of outputs. These improve upon the `numpy.common_type` and `numpy.mintypecode`
    which provide similar functionality but do not match the ufunc implementation.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.result_type`和`numpy.min_scalar_type`：这些函数暴露了ufuncs和其他操作使用的底层类型提升，用于确定输出类型。这些函数改进了`numpy.common_type`和`numpy.mintypecode`，它们提供了类似的功能，但与ufunc实现不匹配。'
- en: Changes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: '`default error handling`'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`默认错误处理`'
- en: The default error handling has been change from `print` to `warn` for all except
    for `underflow`, which remains as `ignore`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认错误处理已从`print`更改为对所有情况的`warn`，除了`underflow`仍然是`ignore`。
- en: '`numpy.distutils`'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: 'Several new compilers are supported for building Numpy: the Portland Group
    Fortran compiler on OS X, the PathScale compiler suite and the 64-bit Intel C
    compiler on Linux.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 支持构建Numpy的多个新编译器：OS X上的Portland Group Fortran编译器、PathScale编译器套件和Linux上的64位Intel
    C编译器。
- en: '`numpy.testing`'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing`'
- en: The testing framework gained `numpy.testing.assert_allclose`, which provides
    a more convenient way to compare floating point arrays than *assert_almost_equal*,
    *assert_approx_equal* and *assert_array_almost_equal*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试框架增加了`numpy.testing.assert_allclose`，提供了比*assert_almost_equal*、*assert_approx_equal*和*assert_array_almost_equal*更方便的比较浮点数组的方式。
- en: '`C API`'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`C API`'
- en: In addition to the APIs for the new iterator and half data type, a number of
    other additions have been made to the C API. The type promotion mechanism used
    by ufuncs is exposed via `PyArray_PromoteTypes`, `PyArray_ResultType`, and `PyArray_MinScalarType`.
    A new enumeration `NPY_CASTING` has been added which controls what types of casts
    are permitted. This is used by the new functions `PyArray_CanCastArrayTo` and
    `PyArray_CanCastTypeTo`. A more flexible way to handle conversion of arbitrary
    python objects into arrays is exposed by `PyArray_GetArrayParamsFromObject`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了新迭代器和半数据类型的API之外，C API还做了许多其他增加。ufunc使用的类型提升机制通过`PyArray_PromoteTypes`、`PyArray_ResultType`和`PyArray_MinScalarType`暴露出来。添加了一个新的枚举`NPY_CASTING`，用于控制允许的类型转换类型。这由新函数`PyArray_CanCastArrayTo`和`PyArray_CanCastTypeTo`使用。通过`PyArray_GetArrayParamsFromObject`暴露了一种更灵活地将任意Python对象转换为数组的方法。
- en: Deprecated features
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 废弃的特性
- en: The “normed” keyword in `numpy.histogram` is deprecated. Its functionality will
    be replaced by the new “density” keyword.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.histogram`中的“normed”关键字已被废弃。其功能将由新的“density”关键字替代。'
- en: Removed features
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除的特性
- en: '`numpy.fft`'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fft`'
- en: The functions *refft*, *refft2*, *refftn*, *irefft*, *irefft2*, *irefftn*, which
    were aliases for the same functions without the ‘e’ in the name, were removed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 已移除了*refft*、*refft2*、*refftn*、*irefft*、*irefft2*、*irefftn*这些函数，它们是不带有名称中的‘e’的相同函数的别名。
- en: '`numpy.memmap`'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.memmap`'
- en: The *sync()* and *close()* methods of memmap were removed. Use *flush()* and
    “del memmap” instead.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: memmap的*sync()*和*close()*方法已被移除。改用*flush()*和“del memmap”。
- en: '`numpy.lib`'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.lib`'
- en: The deprecated functions `numpy.unique1d`, `numpy.setmember1d`, `numpy.intersect1d_nu`
    and `numpy.lib.ufunclike.log2` were removed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 删除了废弃的函数`numpy.unique1d`，`numpy.setmember1d`，`numpy.intersect1d_nu`和`numpy.lib.ufunclike.log2`。
- en: '`numpy.ma`'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma`'
- en: 'Several deprecated items were removed from the `numpy.ma` module:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从`numpy.ma`模块中删除了几个已弃用的项目：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`numpy.distutils`'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: The `numpy.get_numpy_include` function was removed, use `numpy.get_include`
    instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 移除了`numpy.get_numpy_include`函数，改用`numpy.get_include`。
- en: Highlights
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Re-introduction of datetime dtype support to deal with dates in arrays.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新引入了datetime dtype的支持来处理数组中的日期。
- en: A new 16-bit floating point type.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的16位浮点类型。
- en: A new iterator, which improves performance of many functions.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的迭代器，提高了许多函数的性能。
- en: New features
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: New 16-bit floating point type
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的16位浮点类型
- en: This release adds support for the IEEE 754-2008 binary16 format, available as
    the data type `numpy.half`. Within Python, the type behaves similarly to *float*
    or *double*, and C extensions can add support for it with the exposed half-float
    API.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本增加了对IEEE 754-2008二进制16位格式的支持，可用作数据类型`numpy.half`。在Python中，该类型的行为类似于*float*或*double*，并且C扩展可以使用公开的半浮点API来支持它。
- en: New iterator
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的迭代器
- en: A new iterator has been added, replacing the functionality of the existing iterator
    and multi-iterator with a single object and API. This iterator works well with
    general memory layouts different from C or Fortran contiguous, and handles both
    standard NumPy and customized broadcasting. The buffering, automatic data type
    conversion, and optional output parameters, offered by ufuncs but difficult to
    replicate elsewhere, are now exposed by this iterator.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了新的迭代器，用单个对象和API取代现有迭代器和多迭代器的功能。这个迭代器可以很好地处理与C或Fortran紧密不相同的一般内存布局，并且处理标准NumPy和定制广播。
    ufuncs提供的缓冲、自动数据类型转换和可选输出参数，现在通过这个迭代器暴露出来，这些功能在其他地方很难复制。
- en: Legendre, Laguerre, Hermite, HermiteE polynomials in `numpy.polynomial`
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.polynomial`中的Legendre、Laguerre、Hermite和HermiteE多项式'
- en: Extend the number of polynomials available in the polynomial package. In addition,
    a new `window` attribute has been added to the classes in order to specify the
    range the `domain` maps to. This is mostly useful for the Laguerre, Hermite, and
    HermiteE polynomials whose natural domains are infinite and provides a more intuitive
    way to get the correct mapping of values without playing unnatural tricks with
    the domain.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展了多项式包中可用的多项式数量。此外，为了指定`domain`映射到的范围，已向类添加了新的`window`属性。这在很大程度上对Laguerre、Hermite和HermiteE多项式特别有用，因为它们的自然域是无限的，并提供了更直观的方法来获得正确的值映射，而不用在域上玩弄不自然的技巧。
- en: Fortran assumed shape array and size function support in `numpy.f2py`
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fortran假定形状数组和`numpy.f2py`中的size函数支持
- en: F2py now supports wrapping Fortran 90 routines that use assumed shape arrays.
    Before such routines could be called from Python but the corresponding Fortran
    routines received assumed shape arrays as zero length arrays which caused unpredicted
    results. Thanks to Lorenz Hüdepohl for pointing out the correct way to interface
    routines with assumed shape arrays.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: F2py现在支持封装使用假定形状数组的Fortran 90例程。在此之前，这样的例程可以从Python中调用，但相应的Fortran例程接收的是假定形状数组作为零长度数组，这会导致不可预测的结果。感谢Lorenz
    Hüdepohl指出了与假定形状数组接口化例程的正确方法。
- en: In addition, f2py supports now automatic wrapping of Fortran routines that use
    two argument `size` function in dimension specifications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，f2py现在支持自动封装在维度规范中使用两个参数`size`函数的Fortran例程。
- en: Other new functions
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他新功能
- en: '`numpy.ravel_multi_index` : Converts a multi-index tuple into an array of flat
    indices, applying boundary modes to the indices.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ravel_multi_index`：将多索引元组转换为扁平索引数组，同时将边界模式应用于索引。'
- en: '`numpy.einsum` : Evaluate the Einstein summation convention. Using the Einstein
    summation convention, many common multi-dimensional array operations can be represented
    in a simple fashion. This function provides a way compute such summations.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.einsum`：评估爱因斯坦求和约定。使用爱因斯坦求和约定，许多常见的多维数组操作可以用简洁的方式表示。此功能提供了一种计算这样的求和的方法。'
- en: '`numpy.count_nonzero` : Counts the number of non-zero elements in an array.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.count_nonzero`：计算数组中非零元素的数量。'
- en: '`numpy.result_type` and `numpy.min_scalar_type` : These functions expose the
    underlying type promotion used by the ufuncs and other operations to determine
    the types of outputs. These improve upon the `numpy.common_type` and `numpy.mintypecode`
    which provide similar functionality but do not match the ufunc implementation.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.result_type`和`numpy.min_scalar_type`：这些函数暴露了ufunc和其他操作使用的底层类型提升，以确定输出类型。这些函数改进了`numpy.common_type`和`numpy.mintypecode`，它们提供了类似的功能，但与ufunc实现不匹配。'
- en: New 16-bit floating point type
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的16位浮点类型
- en: This release adds support for the IEEE 754-2008 binary16 format, available as
    the data type `numpy.half`. Within Python, the type behaves similarly to *float*
    or *double*, and C extensions can add support for it with the exposed half-float
    API.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本添加了对IEEE 754-2008二进制16格式的支持，作为数据类型`numpy.half`可用。在Python中，该类型的行为类似于*float*或*double*，并且C扩展可以通过暴露的半浮点API为其添加支持。
- en: New iterator
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的迭代器
- en: A new iterator has been added, replacing the functionality of the existing iterator
    and multi-iterator with a single object and API. This iterator works well with
    general memory layouts different from C or Fortran contiguous, and handles both
    standard NumPy and customized broadcasting. The buffering, automatic data type
    conversion, and optional output parameters, offered by ufuncs but difficult to
    replicate elsewhere, are now exposed by this iterator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加新的迭代器，替代了现有迭代器和多迭代器的功能，使用单个对象和 API。这个迭代器适用于一般的内存布局，不同于 C 或 Fortran 连续，并处理标准的
    NumPy 和自定义广播。这个迭代器现在公开了缓冲、自动数据类型转换和可选的输出参数，这些是ufuncs提供的但其他地方难以复制的功能。
- en: Legendre, Laguerre, Hermite, HermiteE polynomials in `numpy.polynomial`
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy.polynomial` 中的 Legendre、Laguerre、Hermite 和 HermiteE 多项式
- en: Extend the number of polynomials available in the polynomial package. In addition,
    a new `window` attribute has been added to the classes in order to specify the
    range the `domain` maps to. This is mostly useful for the Laguerre, Hermite, and
    HermiteE polynomials whose natural domains are infinite and provides a more intuitive
    way to get the correct mapping of values without playing unnatural tricks with
    the domain.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展了多项式包中可用的多项式数量。此外，新添加了一个 `window` 属性到类中，用于指定 `domain` 映射的范围。这对于 Laguerre、Hermite
    和 HermiteE 多项式特别有用，它们的自然域是无限的，提供了一个更直观的方法来获取正确的值映射，而不必用域进行不自然的处理。
- en: Fortran assumed shape array and size function support in `numpy.f2py`
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy.f2py` 中支持 Fortran 假定形状数组和 size 函数。
- en: F2py now supports wrapping Fortran 90 routines that use assumed shape arrays.
    Before such routines could be called from Python but the corresponding Fortran
    routines received assumed shape arrays as zero length arrays which caused unpredicted
    results. Thanks to Lorenz Hüdepohl for pointing out the correct way to interface
    routines with assumed shape arrays.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: F2py 现在支持包装使用假定形状数组的 Fortran 90 例程。之前这样的例程可以从 Python 中调用，但相应的 Fortran 例程接收到的假定形状数组作为零长度数组，这会导致不可预测的结果。感谢
    Lorenz Hüdepohl 指出了与假定形状数组接口例程的正确方式。
- en: In addition, f2py supports now automatic wrapping of Fortran routines that use
    two argument `size` function in dimension specifications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，f2py 现在支持自动包装使用两个参数 `size` 函数在维度规范中的Fortran例程。
- en: Other new functions
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他新功能
- en: '`numpy.ravel_multi_index` : Converts a multi-index tuple into an array of flat
    indices, applying boundary modes to the indices.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ravel_multi_index`：将多索引元组转换为一维索引数组，应用边界模式到索引。'
- en: '`numpy.einsum` : Evaluate the Einstein summation convention. Using the Einstein
    summation convention, many common multi-dimensional array operations can be represented
    in a simple fashion. This function provides a way compute such summations.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.einsum`：求解爱因斯坦求和约定。使用爱因斯坦求和约定，许多常见的多维数组操作可以以简单的方式表示。这个函数提供了一种计算这样的求和的方法。'
- en: '`numpy.count_nonzero` : Counts the number of non-zero elements in an array.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.count_nonzero`：计算数组中非零元素的个数。'
- en: '`numpy.result_type` and `numpy.min_scalar_type` : These functions expose the
    underlying type promotion used by the ufuncs and other operations to determine
    the types of outputs. These improve upon the `numpy.common_type` and `numpy.mintypecode`
    which provide similar functionality but do not match the ufunc implementation.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.result_type` 和 `numpy.min_scalar_type`：这些函数公开了用于决定输出类型的类型提升，ufuncs 和其他操作使用这些提升。这些函数优于
    `numpy.common_type` 和 `numpy.mintypecode`，它们提供了类似的功能，但与 ufunc 实现不匹配。'
- en: Changes
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: '`default error handling`'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`默认错误处理`'
- en: The default error handling has been change from `print` to `warn` for all except
    for `underflow`, which remains as `ignore`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 默认错误处理已从 `print` 更改为 `warn`，除了 `underflow` 仍然是 `ignore`。
- en: '`numpy.distutils`'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: 'Several new compilers are supported for building Numpy: the Portland Group
    Fortran compiler on OS X, the PathScale compiler suite and the 64-bit Intel C
    compiler on Linux.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 支持使用多个新编译器构建 Numpy：在 OS X 上的 Portland Group Fortran 编译器，PathScale 编译套件以及在 Linux
    上的 64 位 Intel C 编译器。
- en: '`numpy.testing`'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing`'
- en: The testing framework gained `numpy.testing.assert_allclose`, which provides
    a more convenient way to compare floating point arrays than *assert_almost_equal*,
    *assert_approx_equal* and *assert_array_almost_equal*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 测试框架增加了 `numpy.testing.assert_allclose`，比 *assert_almost_equal*、*assert_approx_equal*
    和 *assert_array_almost_equal* 更方便地比较浮点数组的方法。
- en: '`C API`'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`C API`'
- en: In addition to the APIs for the new iterator and half data type, a number of
    other additions have been made to the C API. The type promotion mechanism used
    by ufuncs is exposed via `PyArray_PromoteTypes`, `PyArray_ResultType`, and `PyArray_MinScalarType`.
    A new enumeration `NPY_CASTING` has been added which controls what types of casts
    are permitted. This is used by the new functions `PyArray_CanCastArrayTo` and
    `PyArray_CanCastTypeTo`. A more flexible way to handle conversion of arbitrary
    python objects into arrays is exposed by `PyArray_GetArrayParamsFromObject`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对于新迭代器和半数据类型的API之外，C API还增加了一些其他的功能。ufuncs所使用的类型提升机制可通过`PyArray_PromoteTypes`，`PyArray_ResultType`和`PyArray_MinScalarType`来访问。还新增了一个控制允许哪些类型转换的枚举`NPY_CASTING`。新的函数`PyArray_CanCastArrayTo`和`PyArray_CanCastTypeTo`会使用这个枚举。通过`PyArray_GetArrayParamsFromObject`还增加了一种更灵活的处理任意Python对象转换为数组的方式。
- en: '`default error handling`'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认错误处理方式
- en: The default error handling has been change from `print` to `warn` for all except
    for `underflow`, which remains as `ignore`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有除了`underflow`之外，默认错误处理方式已经从`print`变更为`warn`。
- en: '`numpy.distutils`'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: 'Several new compilers are supported for building Numpy: the Portland Group
    Fortran compiler on OS X, the PathScale compiler suite and the 64-bit Intel C
    compiler on Linux.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 新增了对于构建Numpy的几种新编译器的支持：OS X上的Portland Group Fortran编译器，PathScale编译器套件和Linux上的64位Intel
    C编译器。
- en: '`numpy.testing`'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.testing`'
- en: The testing framework gained `numpy.testing.assert_allclose`, which provides
    a more convenient way to compare floating point arrays than *assert_almost_equal*,
    *assert_approx_equal* and *assert_array_almost_equal*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 测试框架增加了`numpy.testing.assert_allclose`，提供了比*assert_almost_equal*，*assert_approx_equal*和*assert_array_almost_equal*更方便的比较浮点数组的方法。
- en: '`C API`'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: In addition to the APIs for the new iterator and half data type, a number of
    other additions have been made to the C API. The type promotion mechanism used
    by ufuncs is exposed via `PyArray_PromoteTypes`, `PyArray_ResultType`, and `PyArray_MinScalarType`.
    A new enumeration `NPY_CASTING` has been added which controls what types of casts
    are permitted. This is used by the new functions `PyArray_CanCastArrayTo` and
    `PyArray_CanCastTypeTo`. A more flexible way to handle conversion of arbitrary
    python objects into arrays is exposed by `PyArray_GetArrayParamsFromObject`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对于新迭代器和半数据类型的API之外，C API还增加了一些其他的功能。ufuncs所使用的类型提升机制可通过`PyArray_PromoteTypes`，`PyArray_ResultType`和`PyArray_MinScalarType`来访问。还新增了一个控制允许哪些类型转换的枚举`NPY_CASTING`。新的函数`PyArray_CanCastArrayTo`和`PyArray_CanCastTypeTo`会使用这个枚举。通过`PyArray_GetArrayParamsFromObject`还增加了一种更灵活的处理任意Python对象转换为数组的方式。
- en: Deprecated features
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用的功能
- en: The “normed” keyword in `numpy.histogram` is deprecated. Its functionality will
    be replaced by the new “density” keyword.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.histogram`中的“normed”关键字已被弃用。它的功能将由新的“density”关键字来代替。'
- en: Removed features
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除的功能
- en: '`numpy.fft`'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fft`'
- en: The functions *refft*, *refft2*, *refftn*, *irefft*, *irefft2*, *irefftn*, which
    were aliases for the same functions without the ‘e’ in the name, were removed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 函数*refft*，*refft2*，*refftn*，*irefft*，*irefft2*，*irefftn*，它们是同名函数的别名，名称中不带‘e’，已经被删除。
- en: '`numpy.memmap`'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.memmap`'
- en: The *sync()* and *close()* methods of memmap were removed. Use *flush()* and
    “del memmap” instead.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: memmap的*sync()*和*close()*方法已被移除。使用*flush()*和“del memmap”代替。
- en: '`numpy.lib`'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.lib`'
- en: The deprecated functions `numpy.unique1d`, `numpy.setmember1d`, `numpy.intersect1d_nu`
    and `numpy.lib.ufunclike.log2` were removed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 移除了弃用的函数`numpy.unique1d`，`numpy.setmember1d`，`numpy.intersect1d_nu`和`numpy.lib.ufunclike.log2`。
- en: '`numpy.ma`'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma`'
- en: 'Several deprecated items were removed from the `numpy.ma` module:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ma`模块中移除了一些弃用的项：'
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`numpy.distutils`'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: The `numpy.get_numpy_include` function was removed, use `numpy.get_include`
    instead.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 移除了函数*refft*，*refft2*，*refftn*，*irefft*，*irefft2*，*irefftn*，它们是同名函数的别名，名称中不带‘e’。
- en: '`numpy.fft`'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fft`'
- en: The functions *refft*, *refft2*, *refftn*, *irefft*, *irefft2*, *irefftn*, which
    were aliases for the same functions without the ‘e’ in the name, were removed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 移除了函数*refft*，*refft2*，*refftn*，*irefft*，*irefft2*，*irefftn*，它们是同名函数的别名，名称中不带‘e’。
- en: '`numpy.memmap`'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.memmap`'
- en: The *sync()* and *close()* methods of memmap were removed. Use *flush()* and
    “del memmap” instead.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: memmap的*sync()*和*close()*方法已被移除。使用*flush()*和“del memmap”代替。
- en: '`numpy.lib`'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.lib`'
- en: The deprecated functions `numpy.unique1d`, `numpy.setmember1d`, `numpy.intersect1d_nu`
    and `numpy.lib.ufunclike.log2` were removed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 移除了弃用的函数`numpy.unique1d`，`numpy.setmember1d`，`numpy.intersect1d_nu`和`numpy.lib.ufunclike.log2`。
- en: '`numpy.ma`'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.ma`'
- en: 'Several deprecated items were removed from the `numpy.ma` module:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ma`模块中移除了一些弃用的项：'
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`numpy.distutils`'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils`'
- en: The `numpy.get_numpy_include` function was removed, use `numpy.get_include`
    instead.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`numpy.get_numpy_include`已移除，请使用`numpy.get_include`代替。
