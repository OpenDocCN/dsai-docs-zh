- en: Data Type API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/dtype.html](https://numpy.org/doc/1.26/reference/c-api/dtype.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The standard array can have 24 different data types (and has some support for
    adding your own types). These data types all have an enumerated type, an enumerated
    type-character, and a corresponding array scalar Python type object (placed in
    a hierarchy). There are also standard C typedefs to make it easier to manipulate
    elements of the given data type. For the numeric types, there are also bit-width
    equivalent C typedefs and named typenumbers that make it easier to select the
    precision desired.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The names for the types in c code follows c naming conventions more closely.
    The Python names for these types follow Python conventions. Thus, [`NPY_FLOAT`](#c.NPY_TYPES.NPY_FLOAT
    "NPY_FLOAT") picks up a 32-bit float in C, but [`numpy.float_`](../arrays.scalars.html#numpy.float_
    "numpy.float_") in Python corresponds to a 64-bit double. The bit-width names
    can be used in both Python and C for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerated Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a list of enumerated types defined providing the basic 24 data types
    plus some useful generic names. Whenever the code requires a type number, one
    of these enumerated types is requested. The types are all called `NPY_{NAME}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for the boolean type, stored as one byte. It may only
    be set to the values 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an 8-bit/1-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Equivalent to either NPY_INT or NPY_LONGLONG, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an 8-bit/1-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Equivalent to either NPY_UINT or NPY_ULONGLONG, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte IEEE 754-2008 compatible floating
    point type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte IEEE 754 compatible floating point
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte IEEE 754 compatible floating point
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a platform-specific floating point type which is at
    least as large as NPY_DOUBLE, but larger on many platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte complex type made up of two NPY_FLOAT
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 128-bit/16-byte complex type made up of two NPY_DOUBLE
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a platform-specific complex floating point type which
    is made up of two NPY_LONGDOUBLE values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a data type which holds dates or datetimes with a
    precision based on selectable date or time units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a data type which holds lengths of times in integers
    of selectable date or time units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for ASCII strings of a selectable size. The strings have
    a fixed maximum size within a given array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for UCS4 strings of a selectable size. The strings have
    a fixed maximum size within a given array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for references to arbitrary Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Primarily used to hold struct dtypes, but can contain arbitrary binary data.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful aliases of the above types are
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a signed integer type which is the same size as a
    (void *) pointer. This is the type used by all arrays of indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an unsigned integer type which is the same size as
    a (void *) pointer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value of the type used for masks, such as with the [`NPY_ITER_ARRAYMASK`](iterator.html#c.NPY_ITER_ARRAYMASK
    "NPY_ITER_ARRAYMASK") iterator flag. This is equivalent to [`NPY_UINT8`](#c.NPY_TYPES.NPY_UINT8
    "NPY_UINT8").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The default type to use when no dtype is explicitly specified, for example when
    calling np.zero(shape). This is equivalent to [`NPY_DOUBLE`](#c.NPY_TYPES.NPY_DOUBLE
    "NPY_DOUBLE").
  prefs: []
  type: TYPE_NORMAL
- en: Other useful related constants are
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The total number of built-in NumPy types. The enumeration covers the range from
    0 to NPY_NTYPES-1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: A signal value guaranteed not to be a valid type enumeration number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The start of type numbers used for Custom Data types.
  prefs: []
  type: TYPE_NORMAL
- en: The various character codes indicating certain types are also part of an enumerated
    list. References to type characters (should they be needed at all) should always
    use these enumerations. The form of them is `NPY_{NAME}LTR` where `{NAME}` can
    be
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOL**, **BYTE**, **UBYTE**, **SHORT**, **USHORT**, **INT**, **UINT**, **LONG**,
    **ULONG**, **LONGLONG**, **ULONGLONG**, **HALF**, **FLOAT**, **DOUBLE**, **LONGDOUBLE**,
    **CFLOAT**, **CDOUBLE**, **CLONGDOUBLE**, **DATETIME**, **TIMEDELTA**, **OBJECT**,
    **STRING**, **VOID**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**INTP**, **UINTP**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**GENBOOL**, **SIGNED**, **UNSIGNED**, **FLOATING**, **COMPLEX**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The latter group of `{NAME}s` corresponds to letters used in the array interface
    typestring specification.
  prefs: []
  type: TYPE_NORMAL
- en: Defines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Max and min values for integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`NPY_MAX_INT{bits}`, `NPY_MAX_UINT{bits}`, `NPY_MIN_INT{bits}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are defined for `{bits}` = 8, 16, 32, 64, 128, and 256 and provide the
    maximum (minimum) value of the corresponding (unsigned) integer type. Note: the
    actual integer type may not be available on all platforms (i.e. 128-bit and 256-bit
    integers are rare).'
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MIN_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for `{type}` = **BYTE**, **SHORT**, **INT**, **LONG**, **LONGLONG**,
    **INTP**
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MAX_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for all defined for `{type}` = **BYTE**, **UBYTE**, **SHORT**,
    **USHORT**, **INT**, **UINT**, **LONG**, **ULONG**, **LONGLONG**, **ULONGLONG**,
    **INTP**, **UINTP**
  prefs: []
  type: TYPE_NORMAL
- en: Number of bits in data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All `NPY_SIZEOF_{CTYPE}` constants have corresponding `NPY_BITSOF_{CTYPE}` constants
    defined. The `NPY_BITSOF_{CTYPE}` constants provide the number of bits in the
    data type. Specifically, the available `{CTYPE}s` are
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOL**, **CHAR**, **SHORT**, **INT**, **LONG**, **LONGLONG**, **FLOAT**,
    **DOUBLE**, **LONGDOUBLE**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bit-width references to enumerated typenums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the numeric data types (integer, floating point, and complex) have constants
    that are defined to be a specific enumerated type number. Exactly which enumerated
    type a bit-width type refers to is platform dependent. In particular, the constants
    available are `PyArray_{NAME}{BITS}` where `{NAME}` is **INT**, **UINT**, **FLOAT**,
    **COMPLEX** and `{BITS}` can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and
    512\. Obviously not all bit-widths are available on all platforms for all the
    kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats;
    and 64-, 128-bit complex types are available.
  prefs: []
  type: TYPE_NORMAL
- en: Integer that can hold a pointer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The constants **NPY_INTP** and **NPY_UINTP** refer to an enumerated integer
    type that is large enough to hold a pointer on the platform. Index arrays should
    always be converted to **NPY_INTP** , because the dimension of the array is of
    type npy_intp.
  prefs: []
  type: TYPE_NORMAL
- en: C-type names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are standard variable types for each of the numeric data types and the
    bool data type. Some of these are already available in the C-specification. You
    can create variables in extension code with these types.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char; The constants [`NPY_FALSE`](array.html#c.NPY_FALSE "NPY_FALSE")
    and [`NPY_TRUE`](array.html#c.NPY_TRUE "NPY_TRUE") are also defined.
  prefs: []
  type: TYPE_NORMAL
- en: (Un)Signed Integer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unsigned versions of the integers can be defined by pre-pending a ‘u’ to the
    front of the integer name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: unsigned short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: unsigned int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: unsigned Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: (Complex) Floating point
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit complex float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit complex double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: long double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: long complex double
  prefs: []
  type: TYPE_NORMAL
- en: complex types are structures with **.real** and **.imag** members (in that order).
  prefs: []
  type: TYPE_NORMAL
- en: Bit-width names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are also typedefs for signed integers, unsigned integers, floating point,
    and complex floating point types of specific bit- widths. The available type names
    are
  prefs: []
  type: TYPE_NORMAL
- en: '`npy_int{bits}`, `npy_uint{bits}`, `npy_float{bits}`, and `npy_complex{bits}`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where `{bits}` is the number of bits in the type and can be **8**, **16**, **32**,
    **64**, 128, and 256 for integer types; 16, **32** , **64**, 80, 96, 128, and
    256 for floating-point types; and 32, **64**, **128**, 160, 192, and 512 for complex-valued
    types. Which bit-widths are available is platform dependent. The bolded bit-widths
    are usually available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Printf Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For help in printing, the following strings are defined as the correct format
    specifier in printf and related commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Enumerated Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a list of enumerated types defined providing the basic 24 data types
    plus some useful generic names. Whenever the code requires a type number, one
    of these enumerated types is requested. The types are all called `NPY_{NAME}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for the boolean type, stored as one byte. It may only
    be set to the values 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an 8-bit/1-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Equivalent to either NPY_INT or NPY_LONGLONG, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte signed integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an 8-bit/1-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Equivalent to either NPY_UINT or NPY_ULONGLONG, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte unsigned integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 16-bit/2-byte IEEE 754-2008 compatible floating
    point type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 32-bit/4-byte IEEE 754 compatible floating point
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte IEEE 754 compatible floating point
    type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a platform-specific floating point type which is at
    least as large as NPY_DOUBLE, but larger on many platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 64-bit/8-byte complex type made up of two NPY_FLOAT
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a 128-bit/16-byte complex type made up of two NPY_DOUBLE
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a platform-specific complex floating point type which
    is made up of two NPY_LONGDOUBLE values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a data type which holds dates or datetimes with a
    precision based on selectable date or time units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a data type which holds lengths of times in integers
    of selectable date or time units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for ASCII strings of a selectable size. The strings have
    a fixed maximum size within a given array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for UCS4 strings of a selectable size. The strings have
    a fixed maximum size within a given array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for references to arbitrary Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Primarily used to hold struct dtypes, but can contain arbitrary binary data.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful aliases of the above types are
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for a signed integer type which is the same size as a
    (void *) pointer. This is the type used by all arrays of indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value for an unsigned integer type which is the same size as
    a (void *) pointer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The enumeration value of the type used for masks, such as with the [`NPY_ITER_ARRAYMASK`](iterator.html#c.NPY_ITER_ARRAYMASK
    "NPY_ITER_ARRAYMASK") iterator flag. This is equivalent to [`NPY_UINT8`](#c.NPY_TYPES.NPY_UINT8
    "NPY_UINT8").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: The default type to use when no dtype is explicitly specified, for example when
    calling np.zero(shape). This is equivalent to [`NPY_DOUBLE`](#c.NPY_TYPES.NPY_DOUBLE
    "NPY_DOUBLE").
  prefs: []
  type: TYPE_NORMAL
- en: Other useful related constants are
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The total number of built-in NumPy types. The enumeration covers the range from
    0 to NPY_NTYPES-1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: A signal value guaranteed not to be a valid type enumeration number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: The start of type numbers used for Custom Data types.
  prefs: []
  type: TYPE_NORMAL
- en: The various character codes indicating certain types are also part of an enumerated
    list. References to type characters (should they be needed at all) should always
    use these enumerations. The form of them is `NPY_{NAME}LTR` where `{NAME}` can
    be
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOL**, **BYTE**, **UBYTE**, **SHORT**, **USHORT**, **INT**, **UINT**, **LONG**,
    **ULONG**, **LONGLONG**, **ULONGLONG**, **HALF**, **FLOAT**, **DOUBLE**, **LONGDOUBLE**,
    **CFLOAT**, **CDOUBLE**, **CLONGDOUBLE**, **DATETIME**, **TIMEDELTA**, **OBJECT**,
    **STRING**, **VOID**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**INTP**, **UINTP**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**GENBOOL**, **SIGNED**, **UNSIGNED**, **FLOATING**, **COMPLEX**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The latter group of `{NAME}s` corresponds to letters used in the array interface
    typestring specification.
  prefs: []
  type: TYPE_NORMAL
- en: Defines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Max and min values for integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`NPY_MAX_INT{bits}`, `NPY_MAX_UINT{bits}`, `NPY_MIN_INT{bits}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are defined for `{bits}` = 8, 16, 32, 64, 128, and 256 and provide the
    maximum (minimum) value of the corresponding (unsigned) integer type. Note: the
    actual integer type may not be available on all platforms (i.e. 128-bit and 256-bit
    integers are rare).'
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MIN_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for `{type}` = **BYTE**, **SHORT**, **INT**, **LONG**, **LONGLONG**,
    **INTP**
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MAX_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for all defined for `{type}` = **BYTE**, **UBYTE**, **SHORT**,
    **USHORT**, **INT**, **UINT**, **LONG**, **ULONG**, **LONGLONG**, **ULONGLONG**,
    **INTP**, **UINTP**
  prefs: []
  type: TYPE_NORMAL
- en: Number of bits in data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All `NPY_SIZEOF_{CTYPE}` constants have corresponding `NPY_BITSOF_{CTYPE}` constants
    defined. The `NPY_BITSOF_{CTYPE}` constants provide the number of bits in the
    data type. Specifically, the available `{CTYPE}s` are
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOL**, **CHAR**, **SHORT**, **INT**, **LONG**, **LONGLONG**, **FLOAT**,
    **DOUBLE**, **LONGDOUBLE**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bit-width references to enumerated typenums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the numeric data types (integer, floating point, and complex) have constants
    that are defined to be a specific enumerated type number. Exactly which enumerated
    type a bit-width type refers to is platform dependent. In particular, the constants
    available are `PyArray_{NAME}{BITS}` where `{NAME}` is **INT**, **UINT**, **FLOAT**,
    **COMPLEX** and `{BITS}` can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and
    512\. Obviously not all bit-widths are available on all platforms for all the
    kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats;
    and 64-, 128-bit complex types are available.
  prefs: []
  type: TYPE_NORMAL
- en: Integer that can hold a pointer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The constants **NPY_INTP** and **NPY_UINTP** refer to an enumerated integer
    type that is large enough to hold a pointer on the platform. Index arrays should
    always be converted to **NPY_INTP** , because the dimension of the array is of
    type npy_intp.
  prefs: []
  type: TYPE_NORMAL
- en: Max and min values for integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`NPY_MAX_INT{bits}`, `NPY_MAX_UINT{bits}`, `NPY_MIN_INT{bits}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are defined for `{bits}` = 8, 16, 32, 64, 128, and 256 and provide the
    maximum (minimum) value of the corresponding (unsigned) integer type. Note: the
    actual integer type may not be available on all platforms (i.e. 128-bit and 256-bit
    integers are rare).'
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MIN_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for `{type}` = **BYTE**, **SHORT**, **INT**, **LONG**, **LONGLONG**,
    **INTP**
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_MAX_{type}`'
  prefs: []
  type: TYPE_NORMAL
- en: This is defined for all defined for `{type}` = **BYTE**, **UBYTE**, **SHORT**,
    **USHORT**, **INT**, **UINT**, **LONG**, **ULONG**, **LONGLONG**, **ULONGLONG**,
    **INTP**, **UINTP**
  prefs: []
  type: TYPE_NORMAL
- en: Number of bits in data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All `NPY_SIZEOF_{CTYPE}` constants have corresponding `NPY_BITSOF_{CTYPE}` constants
    defined. The `NPY_BITSOF_{CTYPE}` constants provide the number of bits in the
    data type. Specifically, the available `{CTYPE}s` are
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOL**, **CHAR**, **SHORT**, **INT**, **LONG**, **LONGLONG**, **FLOAT**,
    **DOUBLE**, **LONGDOUBLE**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bit-width references to enumerated typenums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the numeric data types (integer, floating point, and complex) have constants
    that are defined to be a specific enumerated type number. Exactly which enumerated
    type a bit-width type refers to is platform dependent. In particular, the constants
    available are `PyArray_{NAME}{BITS}` where `{NAME}` is **INT**, **UINT**, **FLOAT**,
    **COMPLEX** and `{BITS}` can be 8, 16, 32, 64, 80, 96, 128, 160, 192, 256, and
    512\. Obviously not all bit-widths are available on all platforms for all the
    kinds of numeric types. Commonly 8-, 16-, 32-, 64-bit integers; 32-, 64-bit floats;
    and 64-, 128-bit complex types are available.
  prefs: []
  type: TYPE_NORMAL
- en: Integer that can hold a pointer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The constants **NPY_INTP** and **NPY_UINTP** refer to an enumerated integer
    type that is large enough to hold a pointer on the platform. Index arrays should
    always be converted to **NPY_INTP** , because the dimension of the array is of
    type npy_intp.
  prefs: []
  type: TYPE_NORMAL
- en: C-type names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are standard variable types for each of the numeric data types and the
    bool data type. Some of these are already available in the C-specification. You
    can create variables in extension code with these types.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char; The constants [`NPY_FALSE`](array.html#c.NPY_FALSE "NPY_FALSE")
    and [`NPY_TRUE`](array.html#c.NPY_TRUE "NPY_TRUE") are also defined.
  prefs: []
  type: TYPE_NORMAL
- en: (Un)Signed Integer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unsigned versions of the integers can be defined by pre-pending a ‘u’ to the
    front of the integer name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: unsigned short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: unsigned int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: unsigned Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: (Complex) Floating point
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit complex float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit complex double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: long double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: long complex double
  prefs: []
  type: TYPE_NORMAL
- en: complex types are structures with **.real** and **.imag** members (in that order).
  prefs: []
  type: TYPE_NORMAL
- en: Bit-width names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are also typedefs for signed integers, unsigned integers, floating point,
    and complex floating point types of specific bit- widths. The available type names
    are
  prefs: []
  type: TYPE_NORMAL
- en: '`npy_int{bits}`, `npy_uint{bits}`, `npy_float{bits}`, and `npy_complex{bits}`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where `{bits}` is the number of bits in the type and can be **8**, **16**, **32**,
    **64**, 128, and 256 for integer types; 16, **32** , **64**, 80, 96, 128, and
    256 for floating-point types; and 32, **64**, **128**, 160, 192, and 512 for complex-valued
    types. Which bit-widths are available is platform dependent. The bolded bit-widths
    are usually available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char; The constants [`NPY_FALSE`](array.html#c.NPY_FALSE "NPY_FALSE")
    and [`NPY_TRUE`](array.html#c.NPY_TRUE "NPY_TRUE") are also defined.
  prefs: []
  type: TYPE_NORMAL
- en: (Un)Signed Integer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unsigned versions of the integers can be defined by pre-pending a ‘u’ to the
    front of the integer name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: unsigned char
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: unsigned short
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: unsigned int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit unsigned integer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: unsigned long long int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: unsigned Py_intptr_t (an integer that is the size of a pointer on the platform).
  prefs: []
  type: TYPE_NORMAL
- en: (Complex) Floating point
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 16-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 32-bit complex float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 64-bit complex double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: long double
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: long complex double
  prefs: []
  type: TYPE_NORMAL
- en: complex types are structures with **.real** and **.imag** members (in that order).
  prefs: []
  type: TYPE_NORMAL
- en: Bit-width names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are also typedefs for signed integers, unsigned integers, floating point,
    and complex floating point types of specific bit- widths. The available type names
    are
  prefs: []
  type: TYPE_NORMAL
- en: '`npy_int{bits}`, `npy_uint{bits}`, `npy_float{bits}`, and `npy_complex{bits}`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where `{bits}` is the number of bits in the type and can be **8**, **16**, **32**,
    **64**, 128, and 256 for integer types; 16, **32** , **64**, 80, 96, 128, and
    256 for floating-point types; and 32, **64**, **128**, 160, 192, and 512 for complex-valued
    types. Which bit-widths are available is platform dependent. The bolded bit-widths
    are usually available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Printf Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For help in printing, the following strings are defined as the correct format
    specifier in printf and related commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
