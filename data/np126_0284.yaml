- en: Array creation routines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Array creation routines
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.array-creation.html](https://numpy.org/doc/1.26/reference/routines.array-creation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.array-creation.html](https://numpy.org/doc/1.26/reference/routines.array-creation.html)
- en: See also
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: See also
- en: '[Array creation](../user/basics.creation.html#arrays-creation)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组创建](../user/basics.creation.html#arrays-creation)'
- en: From shape or value
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: From shape or value
- en: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，但不初始化条目。 |'
- en: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | Return a new array with the same shape and type as a given array. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | 返回一个与给定数组具有相同形状和类型的新数组。 |'
- en: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | Return a 2-D array with ones on the diagonal and zeros elsewhere. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | 返回一个二维数组，对角线上为1，其他地方为0。 |'
- en: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | Return the identity array. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | 返回单位矩阵。 |'
- en: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with ones. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为1。 |'
- en: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | Return an array of ones with the same shape and type as a given array. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | 返回一个与给定数组具有相同形状和类型的全1数组。 |'
- en: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为零。 |'
- en: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | Return an array of zeros with the same shape and type as a given array. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | 返回一个与给定数组具有相同形状和类型的零数组。 |'
- en: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | Return a new array of given shape and type, filled with *fill_value*. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为*fill_value*。 |'
- en: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | Return a full array with the same shape and type as a given array. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | 返回一个与给定数组具有相同形状和类型的全数组。 |'
- en: From existing data
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: From existing data
- en: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | Create an array. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | 创建一个数组。 |'
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | 将输入转换为数组。 |'
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | 将输入转换为ndarray，但通过ndarray子类。 |'
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | 返回一个在内存中连续的数组（ndim >= 1）（C顺序）。
    |'
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | 将输入解释为矩阵。 |'
- en: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | Return an array copy of the given object. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | 返回给定对象的数组副本。 |'
- en: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | Interpret a buffer as a 1-dimensional array. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | 将缓冲区解释为一维数组。 |'
- en: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | Create a NumPy array from an object implementing the `__dlpack__` protocol.
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | 从实现`__dlpack__`协议的对象创建一个NumPy数组。 |'
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | 从文本或二进制文件中的数据构造一个数组。 |'
- en: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | Construct an array by executing a function over each coordinate. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | 通过在每个坐标上执行函数来构造一个数组。 |'
- en: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | Create a new 1-dimensional array from an iterable object. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | 从可迭代对象创建一个新的一维数组。 |'
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | 从字符串中的文本数据初始化一个新的一维数组。 |'
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | 从文本文件中加载数据。 |'
- en: '## Creating record arrays (`numpy.rec`)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建记录数组 (`numpy.rec`)'
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`numpy.rec` is the preferred alias for `numpy.core.records`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.rec` 是`numpy.core.records`的首选别名。'
- en: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | Construct a record array
    from a wide-variety of objects. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | 从各种对象构造一个记录数组。 |'
- en: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | Create a record array
    from a (flat) list of arrays |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | 从（扁平化的）数组列表创建一个记录数组
    |'
- en: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | Create a recarray from
    a list of records in text form. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | 从文本形式的记录列表创建一个recarray。
    |'
- en: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | Create a record array
    from binary data |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | 从二进制数据创建一个记录数组 |'
- en: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | Create an array from
    binary file data |  ## Creating character arrays ([`numpy.char`](routines.char.html#module-numpy.char
    "numpy.char"))'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | 从二进制文件数据创建一个数组 |  ##
    创建字符数组 ([`numpy.char`](routines.char.html#module-numpy.char "numpy.char"))'
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") is the preferred
    alias for `numpy.core.defchararray`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") 是`numpy.core.defchararray`的首选别名。'
- en: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray"). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | 创建一个[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray")。 |'
- en: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | Convert the input to
    a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.chararray"),
    copying the data only if necessary. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | 将输入转换为[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray")，仅在必要时复制数据。 |'
- en: Numerical ranges
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值范围
- en: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | 返回给定区间内均匀间隔的值。 |'
- en: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | Return evenly spaced numbers over a specified interval. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | 返回指定区间内均匀间隔的数字。 |'
- en: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | Return numbers spaced evenly on a log scale. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | 在对数刻度上均匀间隔的数字。 |'
- en: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | Return numbers spaced evenly on a log scale (a geometric progression). |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | 在对数刻度上均匀间隔的数字（几何级数）。 |'
- en: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | Return a list of coordinate matrices from coordinate vectors. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | 从坐标向量返回坐标矩阵的列表。 |'
- en: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | An instance
    which returns a dense multi-dimensional "meshgrid". |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | 返回一个密集的多维“网格”。
    |'
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | 返回一个开放的多维“网格”。
    |'
- en: Building matrices
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建矩阵
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | 提取对角线或构造对角线数组。
    |'
- en: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | Create a two-dimensional array with the flattened input as a diagonal. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | 使用输入的扁平化内容创建一个二维数组作为对角线。 |'
- en: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | An array with ones at and below the given diagonal and zeros elsewhere. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | 对角线及其以下为1，其他位置为0的数组。 |'
- en: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | Lower
    triangle of an array. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | 数组的下三角。
    |'
- en: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | Upper
    triangle of an array. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | 数组的上三角。
    |'
- en: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | Generate a Vandermonde matrix. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | 生成一个范德蒙德矩阵。 |'
- en: The Matrix class
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵类
- en: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    Interpret the input as a matrix. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    将输入解释为矩阵。 |'
- en: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | Build a matrix object from a string, nested sequence, or array. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | 从字符串、嵌套序列或数组构建矩阵对象。 |'
- en: From shape or value
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自形状或值
- en: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | 返回给定形状和类型的新数组，但不初始化条目。 |'
- en: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | Return a new array with the same shape and type as a given array. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | 返回与给定数组相同形状和类型的新数组。 |'
- en: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | Return a 2-D array with ones on the diagonal and zeros elsewhere. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | 返回一个对角线为1，其他位置为0的二维数组。 |'
- en: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | Return the identity array. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | 返回单位矩阵。 |'
- en: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with ones. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为1。 |'
- en: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | Return an array of ones with the same shape and type as a given array. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | 返回一个与给定数组相同形状和类型的全为1的数组。 |'
- en: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为0。 |'
- en: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | Return an array of zeros with the same shape and type as a given array. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | 返回一个与给定数组相同形状和类型的全为0的数组。 |'
- en: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | Return a new array of given shape and type, filled with *fill_value*. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | 返回一个给定形状和类型的新数组，填充为*fill_value*。 |'
- en: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | Return a full array with the same shape and type as a given array. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | 返回一个与给定数组相同形状和类型的全为指定值的数组。 |'
- en: From existing data
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从现有数据
- en: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | Create an array. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | 创建一个数组。 |'
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | 将输入转换为数组。 |'
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | 将输入转换为ndarray，但通过ndarray子类。 |'
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | 返回一个在内存中连续的数组（ndim >= 1）（C顺序）。
    |'
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | 将输入解释为矩阵。 |'
- en: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | Return an array copy of the given object. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | 返回给定对象的数组副本。 |'
- en: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | Interpret a buffer as a 1-dimensional array. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | 将缓冲区解释为一维数组。 |'
- en: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | Create a NumPy array from an object implementing the `__dlpack__` protocol.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | 从实现`__dlpack__`协议的对象创建一个NumPy数组。 |'
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | 从文本或二进制文件中的数据构造数组。 |'
- en: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | Construct an array by executing a function over each coordinate. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | 通过在每个坐标上执行函数来构造数组。 |'
- en: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | Create a new 1-dimensional array from an iterable object. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | 从可迭代对象创建一个新的一维数组。 |'
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | 从字符串中的文本数据初始化一个新的一维数组。 |'
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | 从文本文件加载数据。 |'
- en: '## Creating record arrays (`numpy.rec`)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建记录数组（`numpy.rec`）'
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`numpy.rec` is the preferred alias for `numpy.core.records`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.rec` 是 `numpy.core.records` 的首选别名。'
- en: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | Construct a record array
    from a wide-variety of objects. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | 从各种对象构造一个记录数组。 |'
- en: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | Create a record array
    from a (flat) list of arrays |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | 从（扁平化的）数组列表创建一个记录数组
    |'
- en: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | Create a recarray from
    a list of records in text form. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | 从文本形式的记录列表创建一个记录数组。
    |'
- en: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | Create a record array
    from binary data |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | 从二进制数据创建一个记录数组 |'
- en: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | Create an array from
    binary file data |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | 从二进制文件数据创建一个数组 |'
- en: '## Creating character arrays ([`numpy.char`](routines.char.html#module-numpy.char
    "numpy.char"))'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建字符数组（[`numpy.char`](routines.char.html#module-numpy.char "numpy.char")）'
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") is the preferred
    alias for `numpy.core.defchararray`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") 是 `numpy.core.defchararray`
    的首选别名。'
- en: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray"). |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | 创建一个[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray")。 |'
- en: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | Convert the input to
    a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.chararray"),
    copying the data only if necessary. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | 将输入转换为[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray")，仅在必要时复制数据。 |'
- en: Numerical ranges
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值范围
- en: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | 在给定区间内返回均匀间隔的值。 |'
- en: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | Return evenly spaced numbers over a specified interval. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | 返回在指定区间上均匀间隔的数字。 |'
- en: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | Return numbers spaced evenly on a log scale. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | 返回在对数刻度上均匀间隔的数字。 |'
- en: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | Return numbers spaced evenly on a log scale (a geometric progression). |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | 在对数刻度上均匀间隔的数字（几何级数）。 |'
- en: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | Return a list of coordinate matrices from coordinate vectors. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | 从坐标向量返回坐标矩阵的列表。 |'
- en: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | An instance
    which returns a dense multi-dimensional "meshgrid". |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | 返回一个密集的多维“网格”。
    |'
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | 返回一个开放的多维“网格”。
    |'
- en: Building matrices
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建矩阵
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | 提取对角线或构造对角线数组。
    |'
- en: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | Create a two-dimensional array with the flattened input as a diagonal. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | 创建一个以输入展平数组为对角线的二维数组。 |'
- en: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | An array with ones at and below the given diagonal and zeros elsewhere. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | 在给定对角线及其以下位置为1，其他位置为0的数组。 |'
- en: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | Lower
    triangle of an array. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | 数组的下三角。
    |'
- en: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | Upper
    triangle of an array. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | 数组的上三角。
    |'
- en: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | Generate a Vandermonde matrix. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | 生成一个范德蒙德矩阵。 |'
- en: The Matrix class
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵类
- en: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    Interpret the input as a matrix. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    将输入解释为矩阵。 |'
- en: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | Build a matrix object from a string, nested sequence, or array. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | 从字符串、嵌套序列或数组构建一个矩阵对象。 |'
