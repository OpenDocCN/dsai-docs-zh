- en: scipy.stats.laplace_asymmetric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.laplace_asymmetric.html#scipy.stats.laplace_asymmetric](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.laplace_asymmetric.html#scipy.stats.laplace_asymmetric)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An asymmetric Laplace continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`laplace_asymmetric`](#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric") object inherits from it a collection of generic
    methods (see below for the full list), and completes them with details specific
    for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`laplace`](scipy.stats.laplace.html#scipy.stats.laplace "scipy.stats.laplace")'
  prefs: []
  type: TYPE_NORMAL
- en: Laplace distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The probability density function for [`laplace_asymmetric`](#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric") is
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x, \kappa) &= \frac{1}{\kappa+\kappa^{-1}}\exp(-x\kappa),\quad
    x\ge0\\ &= \frac{1}{\kappa+\kappa^{-1}}\exp(x/\kappa),\quad x<0\\\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(-\infty < x < \infty\), \(\kappa > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`laplace_asymmetric`](#scipy.stats.laplace_asymmetric "scipy.stats.laplace_asymmetric")
    takes `kappa` as a shape parameter for \(\kappa\). For \(\kappa = 1\), it is identical
    to a Laplace distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: The probability density above is defined in the “standardized” form. To shift
    and/or scale the distribution use the `loc` and `scale` parameters. Specifically,
    `laplace_asymmetric.pdf(x, kappa, loc, scale)` is identically equivalent to `laplace_asymmetric.pdf(y,
    kappa) / scale` with `y = (x - loc) / scale`. Note that shifting the location
    of a distribution does not make it a “noncentral” distribution; noncentral generalizations
    of some distributions are available in separate classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the scale parameter of some references is the reciprocal of SciPy’s
    `scale`. For example, \(\lambda = 1/2\) in the parameterization of [[1]](#r35937c1253a7-1)
    is equivalent to `scale = 2` with [`laplace_asymmetric`](#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric").
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Asymmetric Laplace distribution”, Wikipedia [https://en.wikipedia.org/wiki/Asymmetric_Laplace_distribution](https://en.wikipedia.org/wiki/Asymmetric_Laplace_distribution)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Kozubowski TJ and Podgórski K. A Multivariate and Asymmetric Generalization
    of Laplace Distribution, Computational Statistics 15, 531–540 (2000). [DOI:10.1007/PL00022717](https://doi.org/10.1007/PL00022717)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability density function (`pdf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape, location and scale parameters. This returns a “frozen” RV object holding
    the given parameters fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And compare the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-laplace_asymmetric-1.png](../Images/2fd883a2ed5271637c4b33aa2339c2c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(kappa, loc=0, scale=1, size=1, random_state=None)** | Random variates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, kappa, loc=0, scale=1)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, kappa, loc=0, scale=1)** | Log of the probability density function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, kappa, loc=0, scale=1)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, kappa, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, kappa, loc=0, scale=1)** | Survival function (also defined as `1
    - cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, kappa, loc=0, scale=1)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, kappa, loc=0, scale=1)** | Percent point function (inverse of `cdf`
    — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, kappa, loc=0, scale=1)** | Inverse survival function (inverse of
    `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, kappa, loc=0, scale=1)** | Non-central moment of the specified
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(kappa, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(kappa, loc=0, scale=1)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(kappa,), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(kappa, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(kappa, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(kappa, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(kappa, loc=0, scale=1)** | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, kappa, loc=0, scale=1)** | Confidence interval with
    equal areas around the median. |'
  prefs: []
  type: TYPE_TB
