- en: Glossary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语表
- en: 原文：[https://numpy.org/doc/1.26/glossary.html](https://numpy.org/doc/1.26/glossary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/glossary.html](https://numpy.org/doc/1.26/glossary.html)
- en: (*n*,)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: (*n*,)
- en: A parenthesized number followed by a comma denotes a tuple with one element.
    The trailing comma distinguishes a one-element tuple from a parenthesized `n`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中跟着逗号的数字表示一个具有一个元素的元组。尾随逗号将一个元素元组与括号`n`区分开。
- en: '-1'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '-1'
- en: '**In a dimension entry**, instructs NumPy to choose the length that will keep
    the total number of array elements the same.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在维度入口中**，指示NumPy选择长度，以保持数组元素总数不变。'
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**In an index**, any negative value [denotes](https://docs.python.org/dev/faq/programming.html#what-s-a-negative-index)
    indexing from the right.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在索引中**，任何负值表示从右边进行索引。'
- en: …
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: An [`Ellipsis`](https://docs.python.org/3/library/constants.html#Ellipsis "(in
    Python v3.11)").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`省略号`](https://docs.python.org/3/library/constants.html#Ellipsis "(in Python
    v3.11)")。
- en: '**When indexing an array**, shorthand that the missing axes, if they exist,
    are full slices.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当索引数组时**，缺失的轴简称为全切片。'
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It can be used at most once; `a[...,0,...]` raises an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError
    "(in Python v3.11)").
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它最多可以使用一次；`a[...,0,...]`会引发一个[`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError
    "(in Python v3.11)")。
- en: '**In printouts**, NumPy substitutes `...` for the middle elements of large
    arrays. To see the entire array, use [`numpy.printoptions`](reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在打印输出中**，NumPy用`...`替代大数组的中间元素。要查看整个数组，使用[`numpy.printoptions`](reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")'
- en: ':'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: 'The Python [slice](https://docs.python.org/3/glossary.html#term-slice "(in
    Python v3.11)") operator. In ndarrays, slicing can be applied to every axis:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python的[切片](https://docs.python.org/3/glossary.html#term-slice "(in Python v3.11)")操作符。在ndarrays中，切片可以应用于每个轴：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Trailing slices can be omitted:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尾部切片可以省略：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In contrast to Python, where slicing creates a copy, in NumPy slicing creates
    a [view](#term-view).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python不同，NumPy中切片创建一个[视图](#term-view)而不是副本。
- en: For details, see [Combining advanced and basic indexing](user/basics.indexing.html#combining-advanced-and-basic-indexing).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 详见[组合高级和基本索引](user/basics.indexing.html#combining-advanced-and-basic-indexing)。
- en: <
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: In a dtype declaration, indicates that the data is [little-endian](#term-little-endian)
    (the bracket is big on the right).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在dtype声明中，表示数据为[小端](#term-little-endian)（右边是大括号）。
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: In a dtype declaration, indicates that the data is [big-endian](#term-big-endian)
    (the bracket is big on the left).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 dtype 声明中，表示数据为[大端](#term-big-endian)（左边是大括号）。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: advanced indexing
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 高级索引
- en: Rather than using a [scalar](reference/arrays.scalars.html) or slice as an index,
    an axis can be indexed with an array, providing fine-grained selection. This is
    known as [advanced indexing](user/basics.indexing.html#advanced-indexing) or “fancy
    indexing”.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用[标量](reference/arrays.scalars.html)或切片作为索引，一个轴可以用数组作为索引，提供精细选择。这被称为[高级索引](user/basics.indexing.html#advanced-indexing)或“花式索引”。
- en: along an axis
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 沿轴
- en: An operation *along axis n* of array `a` behaves as if its argument were an
    array of slices of `a` where each slice has a successive index of axis *n*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数组`a`的操作*沿轴n*的行为就好像它的参数是数组`a`的切片数组，每个切片在轴*n*上具有连续索引。
- en: 'For example, if `a` is a 3 x *N* array, an operation along axis 0 behaves as
    if its argument were an array containing slices of each row:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`a`是一个3 x *N*数组，沿轴0的操作表现得好像它的参数是包含每行切片的数组：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To make it concrete, we can pick the operation to be the array-reversal function
    [`numpy.flip`](reference/generated/numpy.flip.html#numpy.flip "numpy.flip"), which
    accepts an `axis` argument. We construct a 3 x 4 array `a`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 具体起见，我们可以选择操作为数组反转函数[`numpy.flip`](reference/generated/numpy.flip.html#numpy.flip
    "numpy.flip")，它接受一个`axis`参数。我们构造一个3 x 4数组`a`：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Reversing along axis 0 (the row axis) yields
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 沿轴 0（行轴）翻转得到
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Recalling the definition of *along an axis*, `flip` along axis 0 is treating
    its argument as if it were
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 回想*沿轴*的定义，沿轴 0 翻转是将其参数视为
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'and the result of `np.flip(a,axis=0)` is to reverse the slices:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而`np.flip(a,axis=0)`的结果是翻转切片：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: array
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数组
- en: Used synonymously in the NumPy docs with [ndarray](#term-ndarray).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy文档中与[ndarray](#term-ndarray)同义使用。
- en: array_like
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: array_like
- en: Any [scalar](reference/arrays.scalars.html) or [sequence](https://docs.python.org/3/glossary.html#term-sequence
    "(in Python v3.11)") that can be interpreted as an ndarray. In addition to ndarrays
    and scalars this category includes lists (possibly nested and with different element
    types) and tuples. Any argument accepted by [numpy.array](reference/generated/numpy.array.html)
    is array_like.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以解释为ndarray的[标量](reference/arrays.scalars.html)或[序列](https://docs.python.org/3/glossary.html#term-sequence
    "(in Python v3.11)")。除了ndarrays和标量，此类别还包括列表（可能嵌套并具有不同的元素类型）和元组。由[numpy.array](reference/generated/numpy.array.html)接受的任何参数都是array_like。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: array scalar
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量
- en: An [array scalar](reference/arrays.scalars.html) is an instance of the types/classes
    float32, float64, etc.. For uniformity in handling operands, NumPy treats a scalar
    as an array of zero dimension. In contrast, a 0-dimensional array is an [ndarray](reference/arrays.ndarray.html)
    instance containing precisely one value.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组标量](reference/arrays.scalars.html)是类型/类float32，float64等的实例。为了处理操作数的统一性，NumPy将标量视为零维数组。相比之下，零维数组是包含精确一个值的[ndarray](reference/arrays.ndarray.html)实例。'
- en: axis
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 轴
- en: Another term for an array dimension. Axes are numbered left to right; axis 0
    is the first element in the shape tuple.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数组维度的另一个术语。轴从左到右编号；轴0是形状元组中的第一个元素。
- en: In a two-dimensional vector, the elements of axis 0 are rows and the elements
    of axis 1 are columns.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在二维矢量中，轴0的元素是行，轴1的元素是列。
- en: 'In higher dimensions, the picture changes. NumPy prints higher-dimensional
    vectors as replications of row-by-column building blocks, as in this three-dimensional
    vector:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高的维度中，情况就不一样了。NumPy将更高维度的矢量打印为行列建造块的复制，就像这个三维矢量一样：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`a` is depicted as a two-element array whose elements are 2x3 vectors. From
    this point of view, rows and columns are the final two axes, respectively, in
    any shape.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`a`被描述为一个其元素为2x3矢量的两元素数组。从这个角度来看，行和列分别是任何形状中的最终两个轴。'
- en: 'This rule helps you anticipate how a vector will be printed, and conversely
    how to find the index of any of the printed elements. For instance, in the example,
    the last two values of 8’s index must be 0 and 2\. Since 8 appears in the second
    of the two 2x3’s, the first index must be 1:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则可以帮助你预测矢量将如何打印，反过来也可以帮助你找到任何打印元素的索引。例如，在这个例子中，8的最后两个值的索引必须是0和2。由于8出现在两个2x3中的第二个中，第一个索引必须是1：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A convenient way to count dimensions in a printed vector is to count `[` symbols
    after the open-parenthesis. This is useful in distinguishing, say, a (1,2,3) shape
    from a (2,3) shape:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印矢量时，计算维度的一个方便方法是在开括号后计数`[`符号。这在区分例如(1,2,3)形状和(2,3)形状时非常有用：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: .base
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: .base
- en: If an array does not own its memory, then its [base](reference/generated/numpy.ndarray.base.html)
    attribute returns the object whose memory the array is referencing. That object
    may be referencing the memory from still another object, so the owning object
    may be `a.base.base.base...`. Some writers erroneously claim that testing `base`
    determines if arrays are [view](#term-view)s. For the correct way, see [`numpy.shares_memory`](reference/generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory").
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个数组没有拥有它的内存，那么它的[基础](reference/generated/numpy.ndarray.base.html)属性会返回数组正在引用的对象的内存。该对象可能正在引用另一个对象的内存，因此拥有对象可能是`a.base.base.base...`。一些作家错误地声称测试`base`决定数组是否是[视图](#term-view)。有关正确的方法，请参阅[`numpy.shares_memory`](reference/generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory")。
- en: big-endian
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大端
- en: See [Endianness](https://en.wikipedia.org/wiki/Endianness).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[字节序](https://en.wikipedia.org/wiki/Endianness)。
- en: BLAS
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: BLAS
- en: '[Basic Linear Algebra Subprograms](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[基本线性代数子程序](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms)'
- en: broadcast
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 广播
- en: '*broadcasting* is NumPy’s ability to process ndarrays of different sizes as
    if all were the same size.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*广播*是NumPy处理不同大小的ndarray的能力，就好像它们都是相同大小一样。'
- en: It permits an elegant do-what-I-mean behavior where, for instance, adding a
    scalar to a vector adds the scalar value to every element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许优雅的做-我-知道什么的行为，在这种情况下，将标量添加到向量会将标量值添加到每个元素。
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ordinarly, vector operands must all be the same size, because NumPy works element
    by element – for instance, `c = a * b` is
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，向量操作数必须全部具有相同的大小，因为NumPy逐元素工作——例如，`c = a * b`是
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: But in certain useful cases, NumPy can duplicate data along “missing” axes or
    “too-short” dimensions so shapes will match. The duplication costs no memory or
    time. For details, see [Broadcasting.](user/basics.broadcasting.html)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某些有用的情况下，NumPy可以沿着“缺失”的轴或“太短”的维度复制数据，使形状匹配。复制不会占用内存或时间。详情请参见[广播](user/basics.broadcasting.html)。
- en: C order
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: C顺序
- en: Same as [row-major](#term-row-major).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与[行主导](#term-row-major)相同。
- en: column-major
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 列主导
- en: See [Row- and column-major order](https://en.wikipedia.org/wiki/Row-_and_column-major_order).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[行优先和列优先顺序](https://en.wikipedia.org/wiki/Row-_and_column-major_order)。
- en: contiguous
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 连续的
- en: 'An array is contiguous if:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组是连续的，则：
- en: it occupies an unbroken block of memory, and
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它占据了一块连续的内存块，以及
- en: array elements with higher indexes occupy higher addresses (that is, no [stride](#term-stride)
    is negative).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有更高索引的数组元素占据更高地址（即，没有[步长](#term-stride)为负）。
- en: 'There are two types of proper-contiguous NumPy arrays:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的适当连续的NumPy数组：
- en: Fortran-contiguous arrays refer to data that is stored column-wise, i.e. the
    indexing of data as stored in memory starts from the lowest dimension;
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fortran连续数组指的是以列方式存储的数据，即存储在内存中的数据索引从最低维开始；
- en: C-contiguous, or simply contiguous arrays, refer to data that is stored row-wise,
    i.e. the indexing of data as stored in memory starts from the highest dimension.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C连续，或简单连续的数组，指的是以行方式存储的数据，即存储在内存中的数据索引从最高维开始。
- en: For one-dimensional arrays these notions coincide.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维数组，这些概念是相同的。
- en: 'For example, a 2x2 array `A` is Fortran-contiguous if its elements are stored
    in memory in the following order:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，2x2数组`A`如果其元素按以下顺序存储在内存中，则为Fortran连续：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and C-contiguous if the order is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 且如果顺序如下，则为C连续：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To test whether an array is C-contiguous, use the `.flags.c_contiguous` attribute
    of NumPy arrays. To test for Fortran contiguity, use the `.flags.f_contiguous`
    attribute.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试数组是否为C连续，请使用NumPy数组的`.flags.c_contiguous`属性。要测试Fortran连续性，请使用`.flags.f_contiguous`属性。
- en: copy
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 拷贝
- en: See [view](#term-view).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[视图](#term-view)。
- en: dimension
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 维度
- en: See [axis](#term-axis).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[轴](#term-axis)。
- en: dtype
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型
- en: The datatype describing the (identically typed) elements in an ndarray. It can
    be changed to reinterpret the array contents. For details, see [Data type objects
    (dtype).](reference/arrays.dtypes.html)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 描述ndarray中（类型相同的）元素的数据类型。它可以更改以重新解释数组内容。详情请参见[数据类型对象（dtype）](reference/arrays.dtypes.html)。
- en: fancy indexing
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 精细索引
- en: Another term for [advanced indexing](#term-advanced-indexing).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[高级索引](#term-advanced-indexing)的另一个术语。'
- en: field
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 字段
- en: In a [structured data type](#term-structured-data-type), each subtype is called
    a *field*. The *field* has a name (a string), a type (any valid dtype), and an
    optional *title*. See [Data type objects (dtype)](reference/arrays.dtypes.html#arrays-dtypes).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在[结构化数据类型](#term-structured-data-type)中，每个子类型称为*字段*。*字段*具有名称（字符串）、类型（任何有效的dtype）和可选的*标题*。请参见[数据类型对象（dtype）](reference/arrays.dtypes.html#arrays-dtypes)。
- en: Fortran order
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Fortran顺序
- en: Same as [column-major](#term-column-major).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与[列主导](#term-column-major)相同。
- en: flattened
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 展平
- en: See [ravel](#term-ravel).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[拉伸](#term-ravel)。
- en: homogeneous
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 同质的
- en: All elements of a homogeneous array have the same type. ndarrays, in contrast
    to Python lists, are homogeneous. The type can be complicated, as in a [structured
    array](#term-structured-array), but all elements have that type.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 同质数组的所有元素具有相同类型。与Python列表相反，ndarrays是同质的。类型可能很复杂，如[结构化数组](#term-structured-array)，但所有元素都具有该类型。
- en: NumPy [object arrays](#term-object-array), which contain references to Python
    objects, fill the role of heterogeneous arrays.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的[对象数组](#term-object-array)，其中包含指向Python对象的引用，起到异构数组的作用。
- en: itemsize
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数据项大小
- en: The size of the dtype element in bytes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: dtype元素的字节大小。
- en: little-endian
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 小端
- en: See [Endianness](https://en.wikipedia.org/wiki/Endianness).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[字节顺序](https://en.wikipedia.org/wiki/Endianness)。
- en: mask
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码
- en: 'A boolean array used to select only certain elements for an operation:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用于选��仅对某些元素进行操作的布尔数组：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: masked array
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙版数组
- en: Bad or missing data can be cleanly ignored by putting it in a masked array,
    which has an internal boolean array indicating invalid entries. Operations with
    masked arrays ignore these entries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 坏的或缺失的数据可以通过将其放入蒙版数组中，该数组具有指示无效条目的内部布尔数组来干净地忽略。对于带有蒙版数组的操作会忽略这些条目。
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For details, see [Masked arrays.](reference/maskedarray.html)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 详情请参见[蒙版数组](reference/maskedarray.html)。
- en: matrix
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵
- en: NumPy’s two-dimensional [matrix class](reference/generated/numpy.matrix.html)
    should no longer be used; use regular ndarrays.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的二维[矩阵类](reference/generated/numpy.matrix.html)不应再使用；请使用常规ndarrays。
- en: ndarray
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray
- en: '[NumPy’s basic structure](reference/arrays.html).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: object array
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: An array whose dtype is `object`; that is, it contains references to Python
    objects. Indexing the array dereferences the Python objects, so unlike other ndarrays,
    an object array has the ability to hold heterogeneous objects.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: ravel
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.ravel](reference/generated/numpy.ravel.html) and [numpy.flatten](reference/generated/numpy.ndarray.flatten.html)
    both flatten an ndarray. `ravel` will return a view if possible; `flatten` always
    returns a copy.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Flattening collapses a multidimensional array to a single dimension; details
    of how this is done (for instance, whether `a[n+1]` should be the next row or
    next column) are parameters.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: record array
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: A [structured array](#term-structured-array) with allowing access in an attribute
    style (`a.field`) in addition to `a['field']`. For details, see [numpy.recarray.](reference/generated/numpy.recarray.html)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: row-major
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: See [Row- and column-major order](https://en.wikipedia.org/wiki/Row-_and_column-major_order).
    NumPy creates arrays in row-major order by default.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: scalar
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy, usually a synonym for [array scalar](#term-array-scalar).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: shape
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: A tuple showing the length of each dimension of an ndarray. The length of the
    tuple itself is the number of dimensions ([numpy.ndim](reference/generated/numpy.ndarray.ndim.html)).
    The product of the tuple elements is the number of elements in the array. For
    details, see [numpy.ndarray.shape](reference/generated/numpy.ndarray.shape.html).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: stride
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Physical memory is one-dimensional; strides provide a mechanism to map a given
    index to an address in memory. For an N-dimensional array, its `strides` attribute
    is an N-element tuple; advancing from index `i` to index `i+1` on axis `n` means
    adding `a.strides[n]` bytes to the address.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Strides are computed automatically from an array’s dtype and shape, but can
    be directly specified using [as_strided.](reference/generated/numpy.lib.stride_tricks.as_strided.html)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: For details, see [numpy.ndarray.strides](reference/generated/numpy.ndarray.strides.html).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how striding underlies the power of NumPy views, see [The NumPy array:
    a structure for efficient numerical computation.](https://arxiv.org/pdf/1102.1523.pdf)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: structured array
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Array whose [dtype](#term-dtype) is a [structured data type](#term-structured-data-type).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: structured data type
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Users can create arbitrarily complex [dtypes](#term-dtype) that can include
    other arrays and dtypes. These composite dtypes are called [structured data types.](user/basics.rec.html)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: subarray
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'An array nested in a [structured data type](#term-structured-data-type), as
    `b` is here:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: subarray data type
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: An element of a structured datatype that behaves like an ndarray.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: title
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: An alias for a field name in a structured datatype.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: type
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy, usually a synonym for [dtype](#term-dtype). For the more general Python
    meaning, [see here.](https://docs.python.org/3/glossary.html#term-type "(in Python
    v3.11)")
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: ufunc
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: NumPy’s fast element-by-element computation ([vectorization](#term-vectorization))
    gives a choice which function gets applied. The general term for the function
    is `ufunc`, short for `universal function`. NumPy routines have built-in ufuncs,
    but users can also [write their own.](reference/ufuncs.html)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 的快速逐元素计算（[向量化](#term-vectorization)）可以选择应用哪个函数。该函数的通用术语是`ufunc`，缩写为`universal
    function`。NumPy 例程具有内置的 ufunc，但用户也可以[编写自己的。](reference/ufuncs.html)
- en: vectorization
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化
- en: NumPy hands off array processing to C, where looping and computation are much
    faster than in Python. To exploit this, programmers using NumPy eliminate Python
    loops in favor of array-to-array operations. [vectorization](#term-vectorization)
    can refer both to the C offloading and to structuring NumPy code to leverage it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 把数组处理交给了 C 语言，在那里循环和计算比在 Python 中快得多。为了利用这一点，使用 NumPy 的程序员取消了 Python 循环，而是使用数组对数组操作。[向量化](#term-vectorization)
    既可以指 C 的卸载，也可以指结构化 NumPy 代码以利用它。
- en: view
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 视图
- en: Without touching underlying data, NumPy can make one array appear to change
    its datatype and shape.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 不触及底层数据，NumPy 可使一个数组看起来改变其数据类型和形状。
- en: An array created this way is a *view*, and NumPy often exploits the performance
    gain of using a view versus making a new array.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以此方式创建的数组是一个*视图*，而且 NumPy 经常利用使用视图而不是创建新数组来获得性能优势。
- en: A potential drawback is that writing to a view can alter the original as well.
    If this is a problem, NumPy instead needs to create a physically distinct array
    – a [`copy`](https://docs.python.org/3/library/copy.html#module-copy "(in Python
    v3.11)").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的缺点是对视图的写入也可能改变原始数组。如果这是一个问题，NumPy 需要创建一个物理上不同的数组 - 一个[`copy`](https://docs.python.org/3/library/copy.html#module-copy
    "(在 Python v3.11 中)").
- en: Some NumPy routines always return views, some always return copies, some may
    return one or the other, and for some the choice can be specified. Responsibility
    for managing views and copies falls to the programmer. [`numpy.shares_memory`](reference/generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory") will check whether `b` is a view of `a`, but an exact answer
    isn’t always feasible, as the documentation page explains.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 NumPy 例程总是返回视图，一些总是返回副本，有些可能返回其中之一，对于一些情况可以指定选择。管理视图和副本的责任落在程序员身上。[`numpy.shares_memory`](reference/generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory") 可以检查`b`是否为`a`的视图，但精确答案并非总是可行，就像文档页面所解释的那样。
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
