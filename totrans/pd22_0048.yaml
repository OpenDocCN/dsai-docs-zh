- en: Sparse data structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稀疏数据结构
- en: 原文：[https://pandas.pydata.org/docs/user_guide/sparse.html](https://pandas.pydata.org/docs/user_guide/sparse.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/sparse.html](https://pandas.pydata.org/docs/user_guide/sparse.html)
- en: pandas provides data structures for efficiently storing sparse data. These are
    not necessarily sparse in the typical “mostly 0”. Rather, you can view these objects
    as being “compressed” where any data matching a specific value (`NaN` / missing
    value, though any value can be chosen, including 0) is omitted. The compressed
    values are not actually stored in the array.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供了用于高效存储稀疏数据的数据结构。这些数据结构不一定是典型的“大部分为0”的稀疏数据。相反，您可以将这些对象视为“压缩的”，其中任何与特定值匹配的数据（`NaN`
    / 缺失值，尽管可以选择任何值，包括0）都被省略。压缩的值实际上并未存储在数组中。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice the dtype, `Sparse[float64, nan]`. The `nan` means that elements in the
    array that are `nan` aren’t actually stored, only the non-`nan` elements are.
    Those non-`nan` elements have a `float64` dtype.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意dtype，`Sparse[float64, nan]`。`nan`表示数组中的`nan`元素实际上并未存储，只有非`nan`元素。这些非`nan`元素具有`float64`
    dtype。
- en: 'The sparse objects exist for memory efficiency reasons. Suppose you had a large,
    mostly NA [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏对象存在是为了内存效率的原因。假设您有一个大多数为NA的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, the density (% of values that have not been “compressed”) is
    extremely low. This sparse object takes up much less memory on disk (pickled)
    and in the Python interpreter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，密度（未“压缩”的值的百分比）非常低。这个稀疏对象在磁盘（pickled）和Python解释器中占用的内存要少得多。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functionally, their behavior should be nearly identical to their dense counterparts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，它们的行为应该几乎与它们的密集对应物相同。
- en: '## SparseArray'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 稀疏数组'
- en: '[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") is a [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") for storing an array of sparse values
    (see [dtypes](basics.html#basics-dtypes) for more on extension arrays). It is
    a 1-dimensional ndarray-like object storing only values distinct from the `fill_value`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") 是用于存储稀疏值数组的[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")（有关扩展数组的更多信息，请参见[dtypes](basics.html#basics-dtypes)）。它是一个一维类似ndarray的对象，仅存储与`fill_value`不同的值：'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A sparse array can be converted to a regular (dense) ndarray with `numpy.asarray()`
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏数组可以使用`numpy.asarray()`转换为常规（密集）ndarray
- en: '[PRE4]  ## SparseDtype'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]  ## 稀疏dtype'
- en: The `SparseArray.dtype` property stores two pieces of information
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`SparseArray.dtype` 属性存储两个信息'
- en: The dtype of the non-sparse values
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非稀疏值的dtype
- en: The scalar fill value
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标量填充值
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype") may be constructed by passing only a dtype
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过仅传递dtype来构造[`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype")
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: in which case a default fill value will be used (for NumPy dtypes this is often
    the “missing” value for that dtype). To override this default an explicit fill
    value may be passed instead
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将使用默认填充值（对于NumPy dtypes，通常是该dtype的“缺失”值）。可以传递显式填充值来覆盖此默认值
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, the string alias `'Sparse[dtype]'` may be used to specify a sparse
    dtype in many places
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，字符串别名`'Sparse[dtype]'`可用于在许多地方指定稀疏dtype
- en: '[PRE8]  ## Sparse accessor'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]  ## 稀疏访问器'
- en: pandas provides a `.sparse` accessor, similar to `.str` for string data, `.cat`
    for categorical data, and `.dt` for datetime-like data. This namespace provides
    attributes and methods that are specific to sparse data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供了一个`.sparse`访问器，类似于字符串数据的`.str`，分类数据的`.cat`和日期时间数据的`.dt`。此命名空间提供了特定于稀疏数据的属性和方法。
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This accessor is available only on data with `SparseDtype`, and on the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") class itself for creating a Series with sparse data from a scipy
    COO matrix with.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此访问器仅适用于具有`SparseDtype`的数据，并且适用于[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")类本身，用于从scipy COO矩阵创建具有稀疏数据的Series。
- en: 'A `.sparse` accessor has been added for [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as well. See [Sparse accessor](../reference/frame.html#api-frame-sparse)
    for more.  ## Sparse calculation'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '为[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")也添加了一个`.sparse`访问器。更多信息请参见[Sparse
    accessor](../reference/frame.html#api-frame-sparse)。  ## 稀疏计算'
- en: You can apply NumPy [ufuncs](https://numpy.org/doc/stable/reference/ufuncs.html)
    to [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") and get a [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") as a result.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将NumPy [ufuncs](https://numpy.org/doc/stable/reference/ufuncs.html)应用于[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray)，并得到一个[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray)作为结果。
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The *ufunc* is also applied to `fill_value`. This is needed to get the correct
    dense result.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*ufunc*也应用于`fill_value`。这是为了获得正确的稠密结果。'
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Conversion**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**转换**'
- en: To convert data from sparse to dense, use the `.sparse` accessors
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要将稀疏数据转换为稠密数据，使用`.sparse`访问器
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From dense to sparse, use [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") with a [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从稠密到稀疏，使用带有[`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype")的[`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")。
- en: '[PRE13]  ## Interaction with *scipy.sparse*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]  ## 与*scipy.sparse*的交互'
- en: Use [`DataFrame.sparse.from_spmatrix()`](../reference/api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix") to create a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values from a sparse matrix.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`DataFrame.sparse.from_spmatrix()`](../reference/api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")从稀疏矩阵创建具有稀疏值的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")。
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All sparse formats are supported, but matrices that are not in [`COOrdinate`](https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse
    "(in SciPy v1.13.0)") format will be converted, copying data as needed. To convert
    back to sparse SciPy matrix in COO format, you can use the [`DataFrame.sparse.to_coo()`](../reference/api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo") method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有稀疏格式都受支持，但不在[`COOrdinate`](https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse
    "(在 SciPy v1.13.0)")格式中的矩阵将被转换，根据需要复制数据。要转换回COO格式的稀疏SciPy矩阵，可以使用[`DataFrame.sparse.to_coo()`](../reference/api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")方法：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[`Series.sparse.to_coo()`](../reference/api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo") is implemented for transforming a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values indexed by a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") to a [`scipy.sparse.coo_matrix`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html#scipy.sparse.coo_matrix
    "(in SciPy v1.13.0)").'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sparse.to_coo()`](../reference/api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo")用于将由[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")索引的具有稀疏值的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")转换为[`scipy.sparse.coo_matrix`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html#scipy.sparse.coo_matrix
    "(在 SciPy v1.13.0)")。'
- en: The method requires a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with two or more levels.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法需要具有两个或更多级别的[`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")。
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the example below, we transform the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to a sparse representation of a 2-d array by specifying that
    the first and second `MultiIndex` levels define labels for the rows and the third
    and fourth levels define labels for the columns. We also specify that the column
    and row labels should be sorted in the final sparse representation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们通过指定第一和第二个`MultiIndex`级别定义行的标签，第三和第四个级别定义列的标签，将[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")转换为2维数组的稀疏表示。我们还指定列和行标签应在最终稀疏表示中排序。
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Specifying different row and column labels (and not sorting them) yields a
    different sparse matrix:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A convenience method [`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo") is implemented for creating a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values from a `scipy.sparse.coo_matrix`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The default behaviour (with `dense_index=False`) simply returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") containing only the non-null entries.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Specifying `dense_index=True` will result in an index that is the Cartesian
    product of the row and columns coordinates of the matrix. Note that this will
    consume a significant amount of memory (relative to `dense_index=False`) if the
    sparse matrix is large (and sparse) enough.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]  ## SparseArray'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") is a [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") for storing an array of sparse values
    (see [dtypes](basics.html#basics-dtypes) for more on extension arrays). It is
    a 1-dimensional ndarray-like object storing only values distinct from the `fill_value`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A sparse array can be converted to a regular (dense) ndarray with `numpy.asarray()`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '## SparseDtype'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The `SparseArray.dtype` property stores two pieces of information
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The dtype of the non-sparse values
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The scalar fill value
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype") may be constructed by passing only a dtype
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: in which case a default fill value will be used (for NumPy dtypes this is often
    the “missing” value for that dtype). To override this default an explicit fill
    value may be passed instead
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Finally, the string alias `'Sparse[dtype]'` may be used to specify a sparse
    dtype in many places
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '## Sparse accessor'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides a `.sparse` accessor, similar to `.str` for string data, `.cat`
    for categorical data, and `.dt` for datetime-like data. This namespace provides
    attributes and methods that are specific to sparse data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This accessor is available only on data with `SparseDtype`, and on the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") class itself for creating a Series with sparse data from a scipy
    COO matrix with.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: A `.sparse` accessor has been added for [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as well. See [Sparse accessor](../reference/frame.html#api-frame-sparse)
    for more.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '## Sparse calculation'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: You can apply NumPy [ufuncs](https://numpy.org/doc/stable/reference/ufuncs.html)
    to [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") and get a [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") as a result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The *ufunc* is also applied to `fill_value`. This is needed to get the correct
    dense result.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Conversion**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: To convert data from sparse to dense, use the `.sparse` accessors
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: From dense to sparse, use [`DataFrame.astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") with a [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '## Interaction with *scipy.sparse*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Use [`DataFrame.sparse.from_spmatrix()`](../reference/api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix") to create a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with sparse values from a sparse matrix.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'All sparse formats are supported, but matrices that are not in [`COOrdinate`](https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse
    "(in SciPy v1.13.0)") format will be converted, copying data as needed. To convert
    back to sparse SciPy matrix in COO format, you can use the [`DataFrame.sparse.to_coo()`](../reference/api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo") method:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[`Series.sparse.to_coo()`](../reference/api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo") is implemented for transforming a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values indexed by a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") to a [`scipy.sparse.coo_matrix`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html#scipy.sparse.coo_matrix
    "(in SciPy v1.13.0)").'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The method requires a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with two or more levels.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the example below, we transform the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to a sparse representation of a 2-d array by specifying that
    the first and second `MultiIndex` levels define labels for the rows and the third
    and fourth levels define labels for the columns. We also specify that the column
    and row labels should be sorted in the final sparse representation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Specifying different row and column labels (and not sorting them) yields a
    different sparse matrix:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: A convenience method [`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo") is implemented for creating a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with sparse values from a `scipy.sparse.coo_matrix`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的方法[`Series.sparse.from_coo()`](../reference/api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo")被实现用于从`scipy.sparse.coo_matrix`创建一个稀疏值的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The default behaviour (with `dense_index=False`) simply returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") containing only the non-null entries.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为（使用`dense_index=False`）简单地返回一个只包含非空条目的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE39]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Specifying `dense_index=True` will result in an index that is the Cartesian
    product of the row and columns coordinates of the matrix. Note that this will
    consume a significant amount of memory (relative to `dense_index=False`) if the
    sparse matrix is large (and sparse) enough.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`dense_index=True`将导致一个索引，该索引是矩阵的行和列坐标的笛卡尔积。请注意，如果稀疏矩阵足够大（且稀疏），这将消耗大量内存（相对于`dense_index=False`）。
- en: '[PRE40]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
