- en: Development workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/development_workflow.html](https://numpy.org/doc/1.26/dev/development_workflow.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You already have your own forked copy of the [NumPy](https://www.numpy.org)
    repository, by following [Create a NumPy fork](gitwash/development_setup.html#forking),
    [Make the local copy](gitwash/development_setup.html#set-up-fork), you have configured
    [git](https://git-scm.com/) by following [Git configuration](gitwash/configure_git.html#configure-git),
    and have linked the upstream repository as explained in [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)").
  prefs: []
  type: TYPE_NORMAL
- en: What is described below is a recommended workflow with Git.
  prefs: []
  type: TYPE_NORMAL
- en: Basic workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hack away! See [below](#editing-workflow)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Core developers*: If you want to push changes without further review, see
    the notes [below](#pushing-to-main).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: There are many online tutorials to help you [learn git](https://try.github.io/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  prefs: []
  type: TYPE_NORMAL
- en: '### Making a new feature branch'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, fetch new commits from the `upstream` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]  ### The editing workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In more detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You have to use `--set-upstream` for each new branch that you create.
  prefs: []
  type: TYPE_NORMAL
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Writing the commit message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard acronyms to start the commit message with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Commands to skip continuous integration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[skip ci]`: skip all CI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip actions]`: skip GitHub Actions jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip travis]`: skip TravisCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip azp]`: skip Azure jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip circle]`: skip CircleCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip cirrus]`: skip Cirrus jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test building wheels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`14 - Release`: for pull requests preparing for a release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: by a weekly cron job or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`  ### Get
    the mailing list’s opinion'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.  ###
    Asking for your changes to be merged with the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.  ### Getting your PR reviewed'
  prefs: []
  type: TYPE_NORMAL
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.  ### Rebasing on main'
  prefs: []
  type: TYPE_NORMAL
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to update the feature branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, remove the backup branch upon a successful rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.  ###
    Recovering from mess-ups'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you mess up during a rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you notice you messed up after the rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you forgot to make a backup branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).
  prefs: []
  type: TYPE_NORMAL
- en: Additional things you might want to do
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Rewriting commit history'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do this only for your own feature branches.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done via *interactive rebasing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that the commit history looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rewrite the commit message for `13d7934` to something more sensible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open an editor with the following text in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To achieve what we want, we will make the following changes to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'and the history looks now like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  prefs: []
  type: TYPE_NORMAL
- en: Several people sharing a single repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  prefs: []
  type: TYPE_NORMAL
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  prefs: []
  type: TYPE_NORMAL
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Now all those people can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Checkout changes from an existing pull request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  prefs: []
  type: TYPE_NORMAL
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Checkout the newly created branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You now have the changes in the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring your repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see a graphical representation of the repository branches and commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To see a linear list of commits for this branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  prefs: []
  type: TYPE_NORMAL
- en: Backporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push the new branch to your Github repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '### Pushing changes to the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: '*Requires commit rights to the main NumPy repo.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, merge or rebase on the target branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Only a few, unrelated commits then prefer rebasing:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: See [Rebasing on main](#rebasing-on-main).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If all of the commits are related, create a merge commit:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that what you are going to push looks sensible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push to upstream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It’s usually a good idea to use the `-n` flag to `git push` to check first that
    you’re about to push the changes you want to the place you want.
  prefs: []
  type: TYPE_NORMAL
- en: Basic workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hack away! See [below](#editing-workflow)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Core developers*: If you want to push changes without further review, see
    the notes [below](#pushing-to-main).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: There are many online tutorials to help you [learn git](https://try.github.io/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  prefs: []
  type: TYPE_NORMAL
- en: '### Making a new feature branch'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, fetch new commits from the `upstream` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]  ### The editing workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In more detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You have to use `--set-upstream` for each new branch that you create.
  prefs: []
  type: TYPE_NORMAL
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Writing the commit message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard acronyms to start the commit message with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Commands to skip continuous integration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[skip ci]`: skip all CI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip actions]`: skip GitHub Actions jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip travis]`: skip TravisCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip azp]`: skip Azure jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip circle]`: skip CircleCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip cirrus]`: skip Cirrus jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test building wheels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`14 - Release`: for pull requests preparing for a release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: by a weekly cron job or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`  ### Get
    the mailing list’s opinion'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.  ###
    Asking for your changes to be merged with the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.  ### Getting your PR reviewed'
  prefs: []
  type: TYPE_NORMAL
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  prefs: []
  type: TYPE_NORMAL
- en: 'If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.  ### Rebasing on main'
  prefs: []
  type: TYPE_NORMAL
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to update the feature branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, remove the backup branch upon a successful rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.  ###
    Recovering from mess-ups'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you mess up during a rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If you notice you messed up after the rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If you forgot to make a backup branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).  ###
    Making a new feature branch'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, fetch new commits from the `upstream` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '### The editing workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In more detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You have to use `--set-upstream` for each new branch that you create.
  prefs: []
  type: TYPE_NORMAL
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Writing the commit message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard acronyms to start the commit message with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Commands to skip continuous integration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[skip ci]`: skip all CI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip actions]`: skip GitHub Actions jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip travis]`: skip TravisCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip azp]`: skip Azure jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip circle]`: skip CircleCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip cirrus]`: skip Cirrus jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test building wheels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`14 - Release`: for pull requests preparing for a release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: by a weekly cron job or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In more detail
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Push the changes to your forked repo on [github](https://github.com/numpy/numpy):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/numpy/numpy) repo called `origin`.
    In git >= 1.7 you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/numpy/numpy)
    repo. Subsequent push calls are then simplified to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You have to use `--set-upstream` for each new branch that you create.
  prefs: []
  type: TYPE_NORMAL
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](#rebasing-on-main) section of this document to apply those changes to
    your branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Writing the commit message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Standard acronyms to start the commit message with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Commands to skip continuous integration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[skip ci]`: skip all CI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip actions]`: skip GitHub Actions jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip travis]`: skip TravisCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip azp]`: skip Azure jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip circle]`: skip CircleCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip cirrus]`: skip Cirrus jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test building wheels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`14 - Release`: for pull requests preparing for a release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: by a weekly cron job or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  prefs: []
  type: TYPE_NORMAL
- en: Commands to skip continuous integration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'By default a lot of continuous integration (CI) jobs are run for every PR,
    from running the test suite on different operating systems and hardware platforms
    to building the docs. In some cases you already know that CI isn’t needed (or
    not all of it), for example if you work on CI config files, text in the README,
    or other files that aren’t involved in regular build, test or docs sequences.
    In such cases you may explicitly skip CI by including one of these fragments in
    your commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[skip ci]`: skip all CI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only recommended if you are still not ready for the checks to run on your PR
    (for example, if this is only a draft.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip actions]`: skip GitHub Actions jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://docs.github.com/actions) is where most of the CI checks
    are run, including the linter, benchmarking, running basic tests for most architectures
    and OSs, and several compiler and CPU optimization settings. [See the configuration
    files for these checks.](https://github.com/numpy/numpy/tree/main/.github/workflows)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip travis]`: skip TravisCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TravisCI](https://www.travis-ci.com/) will test your changes against Python
    3.9 on the PowerPC and s390x architectures. [See the configuration file for these
    checks.](https://github.com/numpy/numpy/blob/main/.travis.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip azp]`: skip Azure jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Azure](https://azure.microsoft.com/en-us/products/devops/pipelines) is where
    all comprehensive tests are run. This is an expensive run, and one you could typically
    skip if you do documentation-only changes, for example. [See the main configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/azure-pipelines.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip circle]`: skip CircleCI jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CircleCI](https://circleci.com/) is where we build the documentation and store
    the generated artifact for preview in each PR. This check will also run all the
    docstrings examples and verify their results. If you don’t make documentation
    changes, but you make changes to a function’s API, for example, you may need to
    run these tests to verify that the doctests are still valid. [See the configuration
    file for these checks.](https://github.com/numpy/numpy/blob/main/.circleci/config.yml)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`[skip cirrus]`: skip Cirrus jobs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CirrusCI](https://cirrus-ci.org/) mostly triggers Linux aarch64 and MacOS
    Arm64 wheels uploads. [See the configuration file for these checks.](https://github.com/numpy/numpy/blob/main/.cirrus.star)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test building wheels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Numpy currently uses [cibuildwheel](https://https://cibuildwheel.readthedocs.io/en/stable/)
    in order to build wheels through continuous integration services. To save resources,
    the cibuildwheel wheel builders are not run by default on every single PR or commit
    to main.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to test that your pull request do not break the wheel builders,
    you may either append `[wheel build]` to the end of the commit message of the
    commit or add one of the following labels to the pull request(if you have the
    permissions to do so):'
  prefs: []
  type: TYPE_NORMAL
- en: '`36 - Build`: for pull requests changing build processes/configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`03 - Maintenance`: for pull requests upgrading dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`14 - Release`: for pull requests preparing for a release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wheels built via github actions (including 64-bit linux, macOS, and windows,
    arm64 macOS, and 32-bit windows) will be uploaded as artifacts in zip files. You
    can access them from the Summary page of the “Wheel builder” [Action](https://github.com/numpy/numpy/actions).
    The aarch64 wheels built via [travis](https://app.travis-ci.com/github/numpy/numpy/builds)
    CI are not available as artifacts. Additionally, the wheels will be uploaded to
    [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)
    on the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: by a weekly cron job or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the github action or travis build has been manually triggered, which requires
    appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wheels will be uploaded to [https://anaconda.org/multibuild-wheels-staging/](https://anaconda.org/multibuild-wheels-staging/)
    if the build was triggered by a tag to the repo that begins with `v`
  prefs: []
  type: TYPE_NORMAL
- en: '### Get the mailing list’s opinion'
  prefs: []
  type: TYPE_NORMAL
- en: If you plan a new feature or API change, it’s wisest to first email the NumPy
    [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion) asking
    for comment. If you haven’t heard back in a week, it’s OK to ping the list again.
  prefs: []
  type: TYPE_NORMAL
- en: '### Asking for your changes to be merged with the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  prefs: []
  type: TYPE_NORMAL
- en: If your changes involve modifications to the API or addition/modification of
    a function, add a release note to the `doc/release/upcoming_changes/` directory,
    following the instructions and format in the `doc/release/upcoming_changes/README.rst`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '### Getting your PR reviewed'
  prefs: []
  type: TYPE_NORMAL
- en: We review pull requests as soon as we can, typically within a week. If you get
    no review comments within two weeks, feel free to ask for feedback by adding a
    comment on your PR (this will notify maintainers).
  prefs: []
  type: TYPE_NORMAL
- en: If your PR is large or complicated, asking for input on the numpy-discussion
    mailing list may also be useful.
  prefs: []
  type: TYPE_NORMAL
- en: '### Rebasing on main'
  prefs: []
  type: TYPE_NORMAL
- en: 'This updates your feature branch with changes from the upstream [NumPy github](https://github.com/numpy/numpy)
    repo. If you do not absolutely need to do this, try to avoid doing it, except
    perhaps when you are finished. The first step will be to update the remote repository
    with new commits from upstream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to update the feature branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If you have made changes to files that have changed also upstream, this may
    generate merge conflicts that you need to resolve. See [below](#recovering-from-mess-up)
    for help in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, remove the backup branch upon a successful rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Rebasing on main is preferred over merging upstream back to your branch. Using
    `git merge` and `git pull` is discouraged when working on feature branches.
  prefs: []
  type: TYPE_NORMAL
- en: '### Recovering from mess-ups'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you mess up merges or rebases. Luckily, in Git it is relatively straightforward
    to recover from such mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you mess up during a rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If you notice you messed up after the rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If you forgot to make a backup branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: If you didn’t actually mess up but there are merge conflicts, you need to resolve
    those. This can be one of the trickier things to get right. For a good description
    of how to do this, see [this article on merging conflicts](https://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts).
  prefs: []
  type: TYPE_NORMAL
- en: Additional things you might want to do
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Rewriting commit history'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do this only for your own feature branches.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done via *interactive rebasing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that the commit history looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rewrite the commit message for `13d7934` to something more sensible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open an editor with the following text in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'To achieve what we want, we will make the following changes to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'and the history looks now like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  prefs: []
  type: TYPE_NORMAL
- en: Several people sharing a single repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  prefs: []
  type: TYPE_NORMAL
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  prefs: []
  type: TYPE_NORMAL
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Now all those people can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Checkout changes from an existing pull request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  prefs: []
  type: TYPE_NORMAL
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Checkout the newly created branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: You now have the changes in the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring your repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see a graphical representation of the repository branches and commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'To see a linear list of commits for this branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  prefs: []
  type: TYPE_NORMAL
- en: Backporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push the new branch to your Github repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '### Pushing changes to the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: '*Requires commit rights to the main NumPy repo.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, merge or rebase on the target branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Only a few, unrelated commits then prefer rebasing:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: See [Rebasing on main](#rebasing-on-main).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If all of the commits are related, create a merge commit:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that what you are going to push looks sensible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push to upstream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s usually a good idea to use the `-n` flag to `git push` to check first
    that you’re about to push the changes you want to the place you want.  ### Rewriting
    commit history'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do this only for your own feature branches.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an embarrassing typo in a commit you made? Or perhaps you made several
    false starts you would like the posterity not to see.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done via *interactive rebasing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that the commit history looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'and `6ad92e5` is the last commit in the `main` branch. Suppose we want to make
    the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rewrite the commit message for `13d7934` to something more sensible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the commits `2dec1ac`, `a815645`, `eadc391` into a single one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open an editor with the following text in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'To achieve what we want, we will make the following changes to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: This means that (i) we want to edit the commit message for `13d7934`, and (ii)
    collapse the last three commits into one. Now we save and quit the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git will then immediately bring up an editor for editing the commit message.
    After revising it, we get the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'and the history looks now like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: If it went wrong, recovery is again possible as explained [above](#recovering-from-mess-up).
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a branch on [github](https://github.com/numpy/numpy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'See also: [https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely)'
  prefs: []
  type: TYPE_NORMAL
- en: Several people sharing a single repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to work on some stuff with other people, where you are all committing
    into the same repository, or even the same branch, then just share it via [github](https://github.com/numpy/numpy).
  prefs: []
  type: TYPE_NORMAL
- en: First fork NumPy into your account, as from [Create a NumPy fork](gitwash/development_setup.html#forking).
  prefs: []
  type: TYPE_NORMAL
- en: Then, go to your forked repository github page, say `https://github.com/your-user-name/numpy`
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the ‘Admin’ button, and add anyone else to the repo as a collaborator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/pull_button.png](../Images/d9f57a07c985576ccac113b960131340.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Now all those people can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Remember that links starting with `git@` use the ssh protocol and are read-write;
    links starting with `git://` are read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your collaborators can then commit directly into that repo with the usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Checkout changes from an existing pull request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to test the changes in a pull request or continue the work in a
    new pull request, the commits are to be cloned into a local branch in your forked
    repository
  prefs: []
  type: TYPE_NORMAL
- en: First ensure your upstream points to the main repo, as from [Linking your repository
    to the upstream repo](https://scikit-image.org/docs/stable/gitwash/set_up_fork.html#linking-to-upstream
    "(in skimage v0.21.0)")
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, fetch the changes and create a local branch. Assuming `$ID` is the pull
    request number and `$BRANCHNAME` is the name of the *new local* branch you wish
    to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Checkout the newly created branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: You now have the changes in the pull request.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring your repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see a graphical representation of the repository branches and commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'To see a linear list of commits for this branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: You can also look at the [network graph visualizer](https://github.blog/2008-04-10-say-hello-to-the-network-graph-visualizer/)
    for your [github](https://github.com/numpy/numpy) repo.
  prefs: []
  type: TYPE_NORMAL
- en: Backporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Backporting is the process of copying new feature/fixes committed in [numpy/main](https://github.com/numpy/numpy)
    back to stable release branches. To do this you make a branch off the branch you
    are backporting to, cherry pick the commits you want from `numpy/main`, and then
    submit a pull request for the branch containing the backport.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to make the branch you will work on. This needs to be based
    on the older version of NumPy (not main):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you need to apply the changes from main to this branch using [git cherry-pick](https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might run into some conflicts cherry picking here. These are resolved the
    same way as merge/rebase conflicts. Except here you can use [git blame](https://www.kernel.org/pub/software/scm/git/docs/git-blame.html)
    to see the difference between main and the backported branch to make sure nothing
    gets screwed up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push the new branch to your Github repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally make a pull request using Github. Make sure it is against the maintenance
    branch and not main, Github will usually suggest you make the pull request against
    main.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '### Pushing changes to the main repo'
  prefs: []
  type: TYPE_NORMAL
- en: '*Requires commit rights to the main NumPy repo.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have a set of “ready” changes in a feature branch ready for NumPy’s
    `main` or `maintenance` branches, you can push them to `upstream` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, merge or rebase on the target branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Only a few, unrelated commits then prefer rebasing:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: See [Rebasing on main](#rebasing-on-main).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If all of the commits are related, create a merge commit:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that what you are going to push looks sensible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push to upstream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It’s usually a good idea to use the `-n` flag to `git push` to check first that
    you’re about to push the changes you want to the place you want.
  prefs: []
  type: TYPE_NORMAL
