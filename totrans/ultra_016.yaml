- en: Models Supported by Ultralytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[`docs.ultralytics.com/models/`](https://docs.ultralytics.com/models/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Welcome to Ultralytics' model documentation! We offer support for a wide range
    of models, each tailored to specific tasks like object detection, instance segmentation,
    image classification, pose estimation, and multi-object tracking. If you're interested
    in contributing your model architecture to Ultralytics, check out our Contributing
    Guide.
  prefs: []
  type: TYPE_NORMAL
- en: Featured Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the key models supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '**YOLOv3**: The third iteration of the YOLO model family, originally by Joseph
    Redmon, known for its efficient real-time object detection capabilities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv4**: A darknet-native update to YOLOv3, released by Alexey Bochkovskiy
    in 2020.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv5**: An improved version of the YOLO architecture by Ultralytics, offering
    better performance and speed trade-offs compared to previous versions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv6**: Released by [Meituan](https://about.meituan.com/) in 2022, and
    in use in many of the company''s autonomous delivery robots.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv7**: Updated YOLO models released in 2022 by the authors of YOLOv4.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv8 NEW ðŸš€**: The latest version of the YOLO family, featuring enhanced
    capabilities such as instance segmentation, pose/keypoints estimation, and classification.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv9**: An experimental model trained on the Ultralytics YOLOv5 codebase
    implementing Programmable Gradient Information (PGI).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLOv10**: By Tsinghua University, featuring NMS-free training and efficiency-accuracy
    driven architecture, delivering state-of-the-art performance and latency.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Segment Anything Model (SAM)**: Meta''s original Segment Anything Model (SAM).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Segment Anything Model 2 (SAM2)**: The next generation of Meta''s Segment
    Anything Model (SAM) for videos and images.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mobile Segment Anything Model (MobileSAM)**: MobileSAM for mobile applications,
    by Kyung Hee University.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fast Segment Anything Model (FastSAM)**: FastSAM by Image & Video Analysis
    Group, Institute of Automation, Chinese Academy of Sciences.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLO-NAS**: YOLO Neural Architecture Search (NAS) Models.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Realtime Detection Transformers (RT-DETR)**: Baidu''s PaddlePaddle Realtime
    Detection Transformer (RT-DETR) models.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**YOLO-World**: Real-time Open Vocabulary Object Detection models from Tencent
    AI Lab.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/MWq1UxqTClU?si=nHAW-lYDzrz68jR0`](https://www.youtube.com/embed/MWq1UxqTClU?si=nHAW-lYDzrz68jR0)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Run Ultralytics YOLO models in just a few lines of code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting Started: Usage Examples'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example provides simple YOLO training and inference examples. For full
    documentation on these and other modes see the Predict, Train, Val and Export
    docs pages.
  prefs: []
  type: TYPE_NORMAL
- en: Note the below example is for YOLOv8 Detect models for object detection. For
    additional supported tasks see the Segment, Classify and Pose docs.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'PyTorch pretrained `*.pt` models as well as configuration `*.yaml` files can
    be passed to the `YOLO()`, `SAM()`, `NAS()` and `RTDETR()` classes to create a
    model instance in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'CLI commands are available to directly run the models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Contributing New Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interested in contributing your model to Ultralytics? Great! We're always open
    to expanding our model portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fork the Repository**: Start by forking the [Ultralytics GitHub repository](https://github.com/ultralytics/ultralytics).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Clone Your Fork**: Clone your fork to your local machine and create a new
    branch to work on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Implement Your Model**: Add your model following the coding standards and
    guidelines provided in our Contributing Guide.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test Thoroughly**: Make sure to test your model rigorously, both in isolation
    and as part of the pipeline.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create a Pull Request**: Once you''re satisfied with your model, create a
    pull request to the main repository for review.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code Review & Merging**: After review, if your model meets our criteria,
    it will be merged into the main repository.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For detailed steps, consult our Contributing Guide.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are the key advantages of using Ultralytics YOLOv8 for object detection?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8 offers enhanced capabilities such as real-time object detection,
    instance segmentation, pose estimation, and classification. Its optimized architecture
    ensures high-speed performance without sacrificing accuracy, making it ideal for
    a variety of applications. YOLOv8 also includes built-in compatibility with popular
    datasets and models, as detailed on the YOLOv8 documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: How can I train a YOLOv8 model on custom data?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Training a YOLOv8 model on custom data can be easily accomplished using Ultralytics''
    libraries. Here''s a quick example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For more detailed instructions, visit the Train documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: Which YOLO versions are supported by Ultralytics?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics supports a comprehensive range of YOLO (You Only Look Once) versions
    from YOLOv3 to YOLOv10, along with models like NAS, SAM, and RT-DETR. Each version
    is optimized for various tasks such as detection, segmentation, and classification.
    For detailed information on each model, refer to the Models Supported by Ultralytics
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I use Ultralytics HUB for machine learning projects?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics HUB provides a no-code, end-to-end platform for training, deploying,
    and managing YOLO models. It simplifies complex workflows, enabling users to focus
    on model performance and application. The HUB also offers cloud training capabilities,
    comprehensive dataset management, and user-friendly interfaces. Learn more about
    it on the Ultralytics HUB documentation page.
  prefs: []
  type: TYPE_NORMAL
- en: What types of tasks can YOLOv8 perform, and how does it compare to other YOLO
    versions?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: YOLOv8 is a versatile model capable of performing tasks including object detection,
    instance segmentation, classification, and pose estimation. Compared to earlier
    versions like YOLOv3 and YOLOv4, YOLOv8 offers significant improvements in speed
    and accuracy due to its optimized architecture. For a deeper comparison, refer
    to the YOLOv8 documentation and the Task pages for more details on specific tasks.
  prefs: []
  type: TYPE_NORMAL
