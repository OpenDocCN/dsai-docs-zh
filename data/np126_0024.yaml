- en: numpy.ndarray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ndarray
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html)'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: An array object represents a multidimensional, homogeneous array of fixed-size
    items. An associated data-type object describes the format of each element in
    the array (its byte-order, how many bytes it occupies in memory, whether it is
    an integer, a floating point number, or something else, etc.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数组对象表示固定大小项的多维、同构数组。一个关联的数据类型对象描述了数组中每个元素的格式（它的字节顺序、它在内存中占用多少字节、它是整数、浮点数还是其他内容等等）。
- en: Arrays should be constructed using [`array`](numpy.array.html#numpy.array "numpy.array"),
    [`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros") or [`empty`](numpy.empty.html#numpy.empty
    "numpy.empty") (refer to the See Also section below). The parameters given here
    refer to a low-level method (*ndarray(…)*) for instantiating an array.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数组应该使用 [`array`](numpy.array.html#numpy.array "numpy.array")、[`zeros`](numpy.zeros.html#numpy.zeros
    "numpy.zeros") 或 [`empty`](numpy.empty.html#numpy.empty "numpy.empty") 来构造（请参阅下面的参考部分）。这里给出的参数指的是用于实例化数组的低级方法（*ndarray(…)）。
- en: For more information, refer to the [`numpy`](../index.html#module-numpy "numpy")
    module and examine the methods and attributes of an array.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考 [`numpy`](../index.html#module-numpy "numpy") 模块并检查数组的方法和属性。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**(for the __new__ method; see Notes below)**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （对于 __new__ 方法；看下面的注意）**
- en: '**shape**tuple of ints'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**shape** 一组整数'
- en: Shape of created array.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数组的形状。
- en: '**dtype**data-type, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype** 数据类型，可选'
- en: Any object that can be interpreted as a numpy data type.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以被解释为 numpy 数据类型的对象。
- en: '**buffer**object exposing buffer interface, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**buffer** 暴露缓冲区接口的对象，可选'
- en: Used to fill the array with data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于用数据填充数组。
- en: '**offset**int, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**offset** 整数，可选'
- en: Offset of array data in buffer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数据在缓冲区中的偏移量。
- en: '**strides**tuple of ints, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**strides** 一组整数，可选'
- en: Strides of data in memory.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中数据的步幅。
- en: '**order**{‘C’, ‘F’}, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**{‘C’, ‘F’}，可选'
- en: Row-major (C-style) or column-major (Fortran-style) order.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 行主要（C 风格）或列主要（Fortran 风格）顺序。
- en: See also
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`array`](numpy.array.html#numpy.array "numpy.array")'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](numpy.array.html#numpy.array "numpy.array")'
- en: Construct an array.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个数组。
- en: '[`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros")'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros")'
- en: Create an array, each element of which is zero.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个每个元素都为零的数组。
- en: '[`empty`](numpy.empty.html#numpy.empty "numpy.empty")'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`empty`](numpy.empty.html#numpy.empty "numpy.empty")'
- en: Create an array, but leave its allocated memory unchanged (i.e., it contains
    “garbage”).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个数组，但不改变其已分配的内存（也就是说，它包含“垃圾”）。
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
- en: Create a data-type.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据类型。
- en: '[`numpy.typing.NDArray`](../typing.html#numpy.typing.NDArray "numpy.typing.NDArray")'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.typing.NDArray`](../typing.html#numpy.typing.NDArray "numpy.typing.NDArray")'
- en: An ndarray alias [generic](https://docs.python.org/3/glossary.html#term-generic-type
    "(in Python v3.11)") w.r.t. its [`dtype.type`](numpy.dtype.type.html#numpy.dtype.type
    "numpy.dtype.type").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关于其 [`dtype.type`](numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    的别名的 ndarray [泛型](https://docs.python.org/3/glossary.html#term-generic-type "(在
    Python v3.11 中)")。
- en: Notes
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'There are two modes of creating an array using `__new__`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种使用 `__new__` 创建数组的模式：
- en: If *buffer* is None, then only [`shape`](numpy.shape.html#numpy.shape "numpy.shape"),
    [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), and *order* are used.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *buffer* 为 None，则只使用 [`shape`](numpy.shape.html#numpy.shape "numpy.shape")、[`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") 和 *order*。
- en: If *buffer* is an object exposing the buffer interface, then all keywords are
    interpreted.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 *buffer* 是一个暴露缓冲区接口的对象，则所有关键字都会被解释。
- en: No `__init__` method is needed because the array is fully initialized after
    the `__new__` method.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要 `__init__` 方法，因为在 `__new__` 方法之后数组已完全初始化。
- en: Examples
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: These examples illustrate the low-level [`ndarray`](#numpy.ndarray "numpy.ndarray")
    constructor. Refer to the *See Also* section above for easier ways of constructing
    an ndarray.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例说明了使用底层 [`ndarray`](#numpy.ndarray "numpy.ndarray") 构造函数。请参考上面的 *参考* 部分以了解更简单的构建
    ndarray 的方法。
- en: 'First mode, *buffer* is None:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种模式，*buffer* 为 None：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Second mode:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种模式：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Attributes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`T`](numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")ndarray'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`T`](numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T") ndarray'
- en: View of the transposed array.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 转置数组的视图。
- en: '[`data`](numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")buffer'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data`](numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data") 缓冲区'
- en: Python buffer object pointing to the start of the array’s data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组数据起始位置的 Python 缓冲区对象。
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")dtype object'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")dtype 对象'
- en: Data-type of the array’s elements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素的数据类型。
- en: '[`flags`](numpy.ndarray.flags.html#numpy.ndarray.flags "numpy.ndarray.flags")dict'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flags`](numpy.ndarray.flags.html#numpy.ndarray.flags "numpy.ndarray.flags")dict'
- en: Information about the memory layout of the array.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的内存布局信息。
- en: '[`flat`](numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")numpy.flatiter
    object'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flat`](numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")numpy.flatiter
    对象'
- en: A 1-D iterator over the array.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的一维迭代器。
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")ndarray'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")ndarray'
- en: The imaginary part of the array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的虚部。
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")ndarray'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`real`](numpy.real.html#numpy.real "numpy.real")ndarray'
- en: The real part of the array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的实部。
- en: '[`size`](numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")int'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`size`](numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")int'
- en: Number of elements in the array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的元素数。
- en: '[`itemsize`](numpy.ndarray.itemsize.html#numpy.ndarray.itemsize "numpy.ndarray.itemsize")int'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itemsize`](numpy.ndarray.itemsize.html#numpy.ndarray.itemsize "numpy.ndarray.itemsize")int'
- en: Length of one array element in bytes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数组元素的字节数。
- en: '[`nbytes`](numpy.ndarray.nbytes.html#numpy.ndarray.nbytes "numpy.ndarray.nbytes")int'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nbytes`](numpy.ndarray.nbytes.html#numpy.ndarray.nbytes "numpy.ndarray.nbytes")int'
- en: Total bytes consumed by the elements of the array.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素所消耗的总字节数。
- en: '[`ndim`](numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")int'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndim`](numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")int'
- en: Number of array dimensions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的维度数。
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")tuple of ints'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")int 元组'
- en: Tuple of array dimensions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的维度的元组。
- en: '[`strides`](numpy.ndarray.strides.html#numpy.ndarray.strides "numpy.ndarray.strides")tuple
    of ints'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strides`](numpy.ndarray.strides.html#numpy.ndarray.strides "numpy.ndarray.strides")int
    元组'
- en: Tuple of bytes to step in each dimension when traversing an array.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在遍历数组时在每个维度中步进的字节数元组。
- en: '[`ctypes`](numpy.ndarray.ctypes.html#numpy.ndarray.ctypes "numpy.ndarray.ctypes")ctypes
    object'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ctypes`](numpy.ndarray.ctypes.html#numpy.ndarray.ctypes "numpy.ndarray.ctypes")ctypes
    对象'
- en: An object to simplify the interaction of the array with the ctypes module.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简化数组与 ctypes 模块交互的对象。
- en: '[`base`](numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")ndarray'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")ndarray'
- en: Base object if memory is from some other object.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内存来自其他对象，则是基础对象。
- en: Methods
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`all`](numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`all`](numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | 如果所有元素均为 True，则返回 True。 |'
- en: '| [`any`](numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`any`](numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | 如果 *a* 中的任何元素为 True，则返回 True。 |'
- en: '| [`argmax`](numpy.ndarray.argmax.html#numpy.ndarray.argmax "numpy.ndarray.argmax")([axis, out, keepdims])
    | Return indices of the maximum values along the given axis. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`argmax`](numpy.ndarray.argmax.html#numpy.ndarray.argmax "numpy.ndarray.argmax")([axis, out, keepdims])
    | 返回沿给定轴的最大值的索引。 |'
- en: '| [`argmin`](numpy.ndarray.argmin.html#numpy.ndarray.argmin "numpy.ndarray.argmin")([axis, out, keepdims])
    | Return indices of the minimum values along the given axis. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`argmin`](numpy.ndarray.argmin.html#numpy.ndarray.argmin "numpy.ndarray.argmin")([axis, out, keepdims])
    | 返回沿给定轴的最小值的索引。 |'
- en: '| [`argpartition`](numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`argpartition`](numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | 返回对数组进行分区的索引。 |'
- en: '| [`argsort`](numpy.ndarray.argsort.html#numpy.ndarray.argsort "numpy.ndarray.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`argsort`](numpy.ndarray.argsort.html#numpy.ndarray.argsort "numpy.ndarray.argsort")([axis, kind, order])
    | 返回对数组进行排序的索引。 |'
- en: '| [`astype`](numpy.ndarray.astype.html#numpy.ndarray.astype "numpy.ndarray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`astype`](numpy.ndarray.astype.html#numpy.ndarray.astype "numpy.ndarray.astype")(dtype[, order, casting, subok, copy])
    | 数组的副本，强制转换为指定的类型。 |'
- en: '| [`byteswap`](numpy.ndarray.byteswap.html#numpy.ndarray.byteswap "numpy.ndarray.byteswap")([inplace])
    | Swap the bytes of the array elements |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`byteswap`](numpy.ndarray.byteswap.html#numpy.ndarray.byteswap "numpy.ndarray.byteswap")([inplace])
    | 交换数组元素的字节 |'
- en: '| [`choose`](numpy.ndarray.choose.html#numpy.ndarray.choose "numpy.ndarray.choose")(choices[, out, mode])
    | Use an index array to construct a new array from a set of choices. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`choose`](numpy.ndarray.choose.html#numpy.ndarray.choose "numpy.ndarray.choose")(choices[, out, mode])
    | 使用索引数组从一组选择中构建新数组。 |'
- en: '| [`clip`](numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`clip`](numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | 返回值限制在 `[min, max]` 范围内的数组。 |'
- en: '| [`compress`](numpy.ndarray.compress.html#numpy.ndarray.compress "numpy.ndarray.compress")(condition[, axis, out])
    | Return selected slices of this array along given axis. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`compress`](numpy.ndarray.compress.html#numpy.ndarray.compress "numpy.ndarray.compress")(condition[, axis, out])
    | 返回沿给定轴选择的该数组的切片。 |'
- en: '| [`conj`](numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | 全部元素进行复共轭。 |'
- en: '| [`conjugate`](numpy.ndarray.conjugate.html#numpy.ndarray.conjugate "numpy.ndarray.conjugate")()
    | Return the complex conjugate, element-wise. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](numpy.ndarray.conjugate.html#numpy.ndarray.conjugate "numpy.ndarray.conjugate")()
    | 返回复共轭，逐元素。 |'
- en: '| [`copy`](numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | 返回数组的副本。 |'
- en: '| [`cumprod`](numpy.ndarray.cumprod.html#numpy.ndarray.cumprod "numpy.ndarray.cumprod")([axis, dtype, out])
    | Return the cumulative product of the elements along the given axis. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod`](numpy.ndarray.cumprod.html#numpy.ndarray.cumprod "numpy.ndarray.cumprod")([axis, dtype, out])
    | 返回沿给定轴的元素的累积乘积。 |'
- en: '| [`cumsum`](numpy.ndarray.cumsum.html#numpy.ndarray.cumsum "numpy.ndarray.cumsum")([axis, dtype, out])
    | Return the cumulative sum of the elements along the given axis. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum`](numpy.ndarray.cumsum.html#numpy.ndarray.cumsum "numpy.ndarray.cumsum")([axis, dtype, out])
    | 返回沿给定轴的元素的累积和。 |'
- en: '| [`diagonal`](numpy.ndarray.diagonal.html#numpy.ndarray.diagonal "numpy.ndarray.diagonal")([offset, axis1, axis2])
    | Return specified diagonals. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`diagonal`](numpy.ndarray.diagonal.html#numpy.ndarray.diagonal "numpy.ndarray.diagonal")([offset, axis1, axis2])
    | 返回指定的对角线。 |'
- en: '| [`dump`](numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`dump`](numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | 将数组的 pickle 格式存储到指定文件。 |'
- en: '| [`dumps`](numpy.ndarray.dumps.html#numpy.ndarray.dumps "numpy.ndarray.dumps")()
    | Returns the pickle of the array as a string. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`dumps`](numpy.ndarray.dumps.html#numpy.ndarray.dumps "numpy.ndarray.dumps")()
    | 将数组的 pickle 格式作为字符串返回。 |'
- en: '| [`fill`](numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`fill`](numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | 用标量值填充数组。 |'
- en: '| [`flatten`](numpy.ndarray.flatten.html#numpy.ndarray.flatten "numpy.ndarray.flatten")([order])
    | Return a copy of the array collapsed into one dimension. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`flatten`](numpy.ndarray.flatten.html#numpy.ndarray.flatten "numpy.ndarray.flatten")([order])
    | 返回将数组展平为一维的副本。 |'
- en: '| [`getfield`](numpy.ndarray.getfield.html#numpy.ndarray.getfield "numpy.ndarray.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`getfield`](numpy.ndarray.getfield.html#numpy.ndarray.getfield "numpy.ndarray.getfield")(dtype[, offset])
    | 返回给定数组的某个字段为特定类型。 |'
- en: '| [`item`](numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`item`](numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | 将数组的元素复制到标准 Python 标量并返回。 |'
- en: '| [`itemset`](numpy.ndarray.itemset.html#numpy.ndarray.itemset "numpy.ndarray.itemset")(*args)
    | Insert scalar into an array (scalar is cast to array''s dtype, if possible)
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`itemset`](numpy.ndarray.itemset.html#numpy.ndarray.itemset "numpy.ndarray.itemset")(*args)
    | 将标量插入数组（如果可能，将标量转换为数组的数据类型） |'
- en: '| [`max`](numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, where])
    | Return the maximum along a given axis. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`max`](numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, where])
    | 返回给定轴上的最大值。 |'
- en: '| [`mean`](numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`mean`](numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | 返回沿给定轴的数组元素的平均值。 |'
- en: '| [`min`](numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, where])
    | Return the minimum along a given axis. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`min`](numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, where])
    | 返回给定轴上的最小值。 |'
- en: '| [`newbyteorder`](numpy.ndarray.newbyteorder.html#numpy.ndarray.newbyteorder
    "numpy.ndarray.newbyteorder")([new_order]) | Return the array with the same data
    viewed with a different byte order. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '[`newbyteorder`](numpy.ndarray.newbyteorder.html#numpy.ndarray.newbyteorder
    "numpy.ndarray.newbyteorder")([new_order]) | 使用不同的字节顺序返回相同数据的数组。'
- en: '| [`nonzero`](numpy.ndarray.nonzero.html#numpy.ndarray.nonzero "numpy.ndarray.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '[`nonzero`](numpy.ndarray.nonzero.html#numpy.ndarray.nonzero "numpy.ndarray.nonzero")()
    | 返回非零元素的索引。'
- en: '| [`partition`](numpy.ndarray.partition.html#numpy.ndarray.partition "numpy.ndarray.partition")(kth[, axis, kind, order])
    | Rearranges the elements in the array in such a way that the value of the element
    in kth position is in the position it would be in a sorted array. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '[`partition`](numpy.ndarray.partition.html#numpy.ndarray.partition "numpy.ndarray.partition")(kth[, axis, kind, order])
    | 重新排列数组中的元素，使得第k个位置的元素值在排序后的数组中所处的位置。'
- en: '| [`prod`](numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | Return the product of the array elements over the given axis |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '[`prod`](numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | 返回给定轴上数组元素的乘积。'
- en: '| [`ptp`](numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '[`ptp`](numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | 沿指定轴的峰值至峰值（最大值 - 最小值）。'
- en: '| [`put`](numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '[`put`](numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | 对所有* n *中的`a.flat[n] = values[n]`进行设置，其中n为索引。'
- en: '| [`ravel`](numpy.ndarray.ravel.html#numpy.ndarray.ravel "numpy.ndarray.ravel")([order])
    | Return a flattened array. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '[`ravel`](numpy.ndarray.ravel.html#numpy.ndarray.ravel "numpy.ndarray.ravel")([order])
    | 返回一个扁平化的数组。'
- en: '| [`repeat`](numpy.ndarray.repeat.html#numpy.ndarray.repeat "numpy.ndarray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '[`repeat`](numpy.ndarray.repeat.html#numpy.ndarray.repeat "numpy.ndarray.repeat")(repeats[, axis])
    | 重复数组的元素。'
- en: '| [`reshape`](numpy.ndarray.reshape.html#numpy.ndarray.reshape "numpy.ndarray.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '[`reshape`](numpy.ndarray.reshape.html#numpy.ndarray.reshape "numpy.ndarray.reshape")(shape[, order])
    | 返回一个包含相同数据的新形状数组。'
- en: '| [`resize`](numpy.ndarray.resize.html#numpy.ndarray.resize "numpy.ndarray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '[`resize`](numpy.ndarray.resize.html#numpy.ndarray.resize "numpy.ndarray.resize")(new_shape[, refcheck])
    | 在原地改变数组的形状和大小。'
- en: '| [`round`](numpy.ndarray.round.html#numpy.ndarray.round "numpy.ndarray.round")([decimals, out])
    | Return *a* with each element rounded to the given number of decimals. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '[`round`](numpy.ndarray.round.html#numpy.ndarray.round "numpy.ndarray.round")([decimals, out])
    | 返回* a *中每个元素舍入到给定小数位数。'
- en: '| [`searchsorted`](numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '[`searchsorted`](numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | 找到应该插入v中的元素在a中保持顺序的索引位置。'
- en: '| [`setfield`](numpy.ndarray.setfield.html#numpy.ndarray.setfield "numpy.ndarray.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '[`setfield`](numpy.ndarray.setfield.html#numpy.ndarray.setfield "numpy.ndarray.setfield")(val, dtype[, offset])
    | 将一个值放入由数据类型定义的字段的指定位置。'
- en: '| [`setflags`](numpy.ndarray.setflags.html#numpy.ndarray.setflags "numpy.ndarray.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '[`setflags`](numpy.ndarray.setflags.html#numpy.ndarray.setflags "numpy.ndarray.setflags")([write, align, uic])
    | 设置数组标志可写，对齐，WRITEBACKIFCOPY分别。'
- en: '| [`sort`](numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '[`sort`](numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | 原地对数组进行排序。'
- en: '| [`squeeze`](numpy.ndarray.squeeze.html#numpy.ndarray.squeeze "numpy.ndarray.squeeze")([axis])
    | Remove axes of length one from *a*. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '[`squeeze`](numpy.ndarray.squeeze.html#numpy.ndarray.squeeze "numpy.ndarray.squeeze")([axis])
    | 从*a*中删除长度为一的轴。'
- en: '| [`std`](numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, keepdims, where])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '[`std`](numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, keepdims, where])
    | 返回沿给定轴的数组元素的标准差。'
- en: '| [`sum`](numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, initial, where])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`sum`](numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, initial, where])
    | 返回沿给定轴的数组元素的和。 |'
- en: '| [`swapaxes`](numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes "numpy.ndarray.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes "numpy.ndarray.swapaxes")(axis1, axis2)
    | 返回数组的视图，交换*axis1*和*axis2*。 |'
- en: '| [`take`](numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`take`](numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | 返回一个由*a*给定索引处元素组成的数组。 |'
- en: '| [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes "numpy.ndarray.tobytes")([order])
    | Construct Python bytes containing the raw data bytes in the array. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes "numpy.ndarray.tobytes")([order])
    | 构造包含数组中原始数据字节的Python字节。 |'
- en: '| [`tofile`](numpy.ndarray.tofile.html#numpy.ndarray.tofile "numpy.ndarray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`tofile`](numpy.ndarray.tofile.html#numpy.ndarray.tofile "numpy.ndarray.tofile")(fid[, sep, format])
    | 将数组以文本或二进制（默认）形式写入文件。 |'
- en: '| [`tolist`](numpy.ndarray.tolist.html#numpy.ndarray.tolist "numpy.ndarray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`tolist`](numpy.ndarray.tolist.html#numpy.ndarray.tolist "numpy.ndarray.tolist")()
    | 将数组作为一个`a.ndim`级别深的Python标量嵌套列表返回。 |'
- en: '| [`tostring`](numpy.ndarray.tostring.html#numpy.ndarray.tostring "numpy.ndarray.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes"), with exactly the same behavior. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`tostring`](numpy.ndarray.tostring.html#numpy.ndarray.tostring "numpy.ndarray.tostring")([order])
    | [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes "numpy.ndarray.tobytes")的兼容别名，具有完全相同的行为。
    |'
- en: '| [`trace`](numpy.ndarray.trace.html#numpy.ndarray.trace "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`trace`](numpy.ndarray.trace.html#numpy.ndarray.trace "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out])
    | 返回数组对角线上的和。 |'
- en: '| [`transpose`](numpy.ndarray.transpose.html#numpy.ndarray.transpose "numpy.ndarray.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](numpy.ndarray.transpose.html#numpy.ndarray.transpose "numpy.ndarray.transpose")(*axes)
    | 返回数组的轴转置视图。 |'
- en: '| [`var`](numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, keepdims, where])
    | Returns the variance of the array elements, along given axis. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`var`](numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, keepdims, where])
    | 返回数组元素沿着给定轴的方差。 |'
- en: '| [`view`](numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`view`](numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | 以相同数据创建数组的新视图。 |'
- en: '| **dot** |  |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **dot** |  |'
