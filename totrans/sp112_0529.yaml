- en: scipy.signal.lfilter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lfilter.html#scipy.signal.lfilter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lfilter.html#scipy.signal.lfilter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Filter data along one-dimension with an IIR or FIR filter.
  prefs: []
  type: TYPE_NORMAL
- en: Filter a data sequence, *x*, using a digital filter. This works for many fundamental
    data types (including Object type). The filter is a direct form II transposed
    implementation of the standard difference equation (see Notes).
  prefs: []
  type: TYPE_NORMAL
- en: The function [`sosfilt`](scipy.signal.sosfilt.html#scipy.signal.sosfilt "scipy.signal.sosfilt")
    (and filter design using `output='sos'`) should be preferred over [`lfilter`](#scipy.signal.lfilter
    "scipy.signal.lfilter") for most filtering tasks, as second-order sections have
    fewer numerical problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The numerator coefficient vector in a 1-D sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The denominator coefficient vector in a 1-D sequence. If `a[0]` is not 1, then
    both *a* and *b* are normalized by `a[0]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An N-dimensional input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the input data array along which to apply the linear filter. The
    filter is applied to each subarray along this axis. Default is -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**zi**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial conditions for the filter delays. It is a vector (or array of vectors
    for an N-dimensional input) of length `max(len(a), len(b)) - 1`. If *zi* is None
    or is not given then initial rest is assumed. See [`lfiltic`](scipy.signal.lfiltic.html#scipy.signal.lfiltic
    "scipy.signal.lfiltic") for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array'
  prefs: []
  type: TYPE_NORMAL
- en: The output of the digital filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**zf**array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *zi* is None, this is not returned, otherwise, *zf* holds the final filter
    delay values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lfiltic`](scipy.signal.lfiltic.html#scipy.signal.lfiltic "scipy.signal.lfiltic")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct initial conditions for [`lfilter`](#scipy.signal.lfilter "scipy.signal.lfilter").
  prefs: []
  type: TYPE_NORMAL
- en: '[`lfilter_zi`](scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi "scipy.signal.lfilter_zi")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute initial state (steady state of step response) for [`lfilter`](#scipy.signal.lfilter
    "scipy.signal.lfilter").
  prefs: []
  type: TYPE_NORMAL
- en: '[`filtfilt`](scipy.signal.filtfilt.html#scipy.signal.filtfilt "scipy.signal.filtfilt")'
  prefs: []
  type: TYPE_NORMAL
- en: A forward-backward filter, to obtain a filter with zero phase.
  prefs: []
  type: TYPE_NORMAL
- en: '[`savgol_filter`](scipy.signal.savgol_filter.html#scipy.signal.savgol_filter
    "scipy.signal.savgol_filter")'
  prefs: []
  type: TYPE_NORMAL
- en: A Savitzky-Golay filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sosfilt`](scipy.signal.sosfilt.html#scipy.signal.sosfilt "scipy.signal.sosfilt")'
  prefs: []
  type: TYPE_NORMAL
- en: Filter data using cascaded second-order sections.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sosfiltfilt`](scipy.signal.sosfiltfilt.html#scipy.signal.sosfiltfilt "scipy.signal.sosfiltfilt")'
  prefs: []
  type: TYPE_NORMAL
- en: A forward-backward filter using second-order sections.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The filter function is implemented as a direct II transposed structure. This
    means that the filter implements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'where *M* is the degree of the numerator, *N* is the degree of the denominator,
    and *n* is the sample number. It is implemented using the following difference
    equations (assuming M = N):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: where *d* are the state variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rational transfer function describing this filter in the z-transform domain
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a noisy signal to be filtered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an order 3 lowpass butterworth filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the filter to xn. Use lfilter_zi to choose the initial condition of the
    filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the filter again, to have a result filtered at an order the same as filtfilt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Use filtfilt to apply the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the original signal and the various filtered versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-lfilter-1.png](../Images/92b6e4a5f0824a73a6f036fb725f7a42.png)'
  prefs: []
  type: TYPE_IMG
