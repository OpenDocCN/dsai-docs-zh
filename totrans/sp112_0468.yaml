- en: scipy.optimize.approx_fprime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.approx_fprime.html#scipy.optimize.approx_fprime](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.approx_fprime.html#scipy.optimize.approx_fprime)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Finite difference approximation of the derivatives of a scalar or vector-valued
    function.
  prefs: []
  type: TYPE_NORMAL
- en: If a function maps from \(R^n\) to \(R^m\), its derivatives form an m-by-n matrix
    called the Jacobian, where an element \((i, j)\) is a partial derivative of f[i]
    with respect to `xk[j]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xk**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinate vector at which to determine the gradient of *f*.
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Function of which to estimate the derivatives of. Has the signature `f(xk, *args)`
    where *xk* is the argument in the form of a 1-D array and *args* is a tuple of
    any additional fixed parameters needed to completely specify the function. The
    argument *xk* passed to this function is an ndarray of shape (n,) (never a scalar
    even if n=1). It must return a 1-D array_like of shape (m,) or a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.9.0: *f* is now able to return a 1-D array-like, with
    the \((m, n)\) Jacobian being estimated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**{float, array_like}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Increment to *xk* to use for determining the function gradient. If a scalar,
    uses the same finite difference delta for all partial derivatives. If an array,
    should contain one value per element of *xk*. Defaults to `sqrt(np.finfo(float).eps)`,
    which is approximately 1.49e-08.
  prefs: []
  type: TYPE_NORMAL
- en: '***args**args, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any other arguments that are to be passed to *f*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**jac**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The partial derivatives of *f* to *xk*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`check_grad`](scipy.optimize.check_grad.html#scipy.optimize.check_grad "scipy.optimize.check_grad")'
  prefs: []
  type: TYPE_NORMAL
- en: Check correctness of gradient function against approx_fprime.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The function gradient is determined by the forward finite difference formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
