- en: scipy.spatial.Delaunay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.Delaunay.html#scipy.spatial.Delaunay](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.Delaunay.html#scipy.spatial.Delaunay)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Delaunay tessellation in N dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**ndarray of floats, shape (npoints, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates of points to triangulate
  prefs: []
  type: TYPE_NORMAL
- en: '**furthest_site**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether to compute a furthest-site Delaunay triangulation. Default: False'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**incremental**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Allow adding new points incrementally. This takes up some additional resources.
  prefs: []
  type: TYPE_NORMAL
- en: '**qhull_options**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Additional options to pass to Qhull. See Qhull manual for details. Option “Qt”
    is always enabled. Default:”Qbb Qc Qz Qx Q12” for ndim > 4 and “Qbb Qc Qz Q12”
    otherwise. Incremental mode omits “Qz”.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: QhullError
  prefs: []
  type: TYPE_NORMAL
- en: Raised when Qhull encounters an error condition, such as geometrical degeneracy
    when options to resolve are not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: Raised if an incompatible array is given as input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The tessellation is computed using the Qhull library [Qhull library](http://www.qhull.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Unless you pass in the Qhull option “QJ”, Qhull does not guarantee that each
    input point appears as a vertex in the Delaunay triangulation. Omitted points
    are listed in the *coplanar* attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Triangulation of a set of points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-spatial-Delaunay-1_00_00.png](../Images/0b9df0fd45caf4063b82936945ba7454.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Point indices and coordinates for the two triangles forming the triangulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that depending on how rounding errors go, the simplices may be in a different
    order than above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Triangle 0 is the only neighbor of triangle 1, and it’s opposite to vertex
    1 of triangle 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can find out which triangle points are in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The returned integers in the array are the indices of the simplex the corresponding
    point is in. If -1 is returned, the point is in no simplex. Be aware that the
    shortcut in the following example only works correctly for valid points as invalid
    points result in -1 which is itself a valid index for the last simplex in the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also compute barycentric coordinates in triangle 1 for these points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The coordinates for the first point are all positive, meaning it is indeed inside
    the triangle. The third point is on an edge, hence its null third coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**ndarray of double, shape (npoints, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Coordinates of input points.
  prefs: []
  type: TYPE_NORMAL
- en: '**simplices**ndarray of ints, shape (nsimplex, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of the points forming the simplices in the triangulation. For 2-D, the
    points are oriented counterclockwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**neighbors**ndarray of ints, shape (nsimplex, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of neighbor simplices for each simplex. The kth neighbor is opposite
    to the kth vertex. For simplices at the boundary, -1 denotes no neighbor.
  prefs: []
  type: TYPE_NORMAL
- en: '**equations**ndarray of double, shape (nsimplex, ndim+2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[normal, offset] forming the hyperplane equation of the facet on the paraboloid
    (see [Qhull documentation](http://www.qhull.org/) for more).'
  prefs: []
  type: TYPE_NORMAL
- en: '**paraboloid_scale, paraboloid_shift**float'
  prefs: []
  type: TYPE_NORMAL
- en: Scale and shift for the extra paraboloid dimension (see [Qhull documentation](http://www.qhull.org/)
    for more).
  prefs: []
  type: TYPE_NORMAL
- en: '[`transform`](../spatial.transform.html#module-scipy.spatial.transform "scipy.spatial.transform")ndarray
    of double, shape (nsimplex, ndim+1, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Affine transform from `x` to the barycentric coordinates `c`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`vertex_to_simplex`](scipy.spatial.Delaunay.vertex_to_simplex.html#scipy.spatial.Delaunay.vertex_to_simplex
    "scipy.spatial.Delaunay.vertex_to_simplex")ndarray of int, shape (npoints,)'
  prefs: []
  type: TYPE_NORMAL
- en: Lookup array, from a vertex, to some simplex which it is a part of.
  prefs: []
  type: TYPE_NORMAL
- en: '[`convex_hull`](scipy.spatial.Delaunay.convex_hull.html#scipy.spatial.Delaunay.convex_hull
    "scipy.spatial.Delaunay.convex_hull")ndarray of int, shape (nfaces, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Vertices of facets forming the convex hull of the point set.
  prefs: []
  type: TYPE_NORMAL
- en: '**coplanar**ndarray of int, shape (ncoplanar, 3)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of coplanar points and the corresponding indices of the nearest facet
    and the nearest vertex. Coplanar points are input points which were *not* included
    in the triangulation due to numerical precision issues.
  prefs: []
  type: TYPE_NORMAL
- en: If option “Qc” is not specified, this list is not computed.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[`vertex_neighbor_vertices`](scipy.spatial.Delaunay.vertex_neighbor_vertices.html#scipy.spatial.Delaunay.vertex_neighbor_vertices
    "scipy.spatial.Delaunay.vertex_neighbor_vertices")tuple of two ndarrays of int;
    (indptr, indices)'
  prefs: []
  type: TYPE_NORMAL
- en: Neighboring vertices of vertices.
  prefs: []
  type: TYPE_NORMAL
- en: '**furthest_site**'
  prefs: []
  type: TYPE_NORMAL
- en: True if this was a furthest site triangulation and False if not.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`add_points`](scipy.spatial.Delaunay.add_points.html#scipy.spatial.Delaunay.add_points
    "scipy.spatial.Delaunay.add_points")(points[, restart]) | Process a set of additional
    new points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`close`](scipy.spatial.Delaunay.close.html#scipy.spatial.Delaunay.close
    "scipy.spatial.Delaunay.close")() | Finish incremental processing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_simplex`](scipy.spatial.Delaunay.find_simplex.html#scipy.spatial.Delaunay.find_simplex
    "scipy.spatial.Delaunay.find_simplex")(self, xi[, bruteforce, tol]) | Find the
    simplices containing the given points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lift_points`](scipy.spatial.Delaunay.lift_points.html#scipy.spatial.Delaunay.lift_points
    "scipy.spatial.Delaunay.lift_points")(self, x) | Lift points to the Qhull paraboloid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`plane_distance`](scipy.spatial.Delaunay.plane_distance.html#scipy.spatial.Delaunay.plane_distance
    "scipy.spatial.Delaunay.plane_distance")(self, xi) | Compute hyperplane distances
    to the point *xi* from all simplices. |'
  prefs: []
  type: TYPE_TB
