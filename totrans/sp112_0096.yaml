- en: scipy.fftpack.dct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.dct.html#scipy.fftpack.dct](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.dct.html#scipy.fftpack.dct)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the Discrete Cosine Transform of arbitrary type sequence x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**type**{1, 2, 3, 4}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the DCT (see Notes). Default type is 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transform. If `n < x.shape[axis]`, *x* is truncated. If `n > x.shape[axis]`,
    *x* is zero-padded. The default results in `n = x.shape[axis]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the dct is computed; the default is over the last axis (i.e.,
    `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{None, ‘ortho’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see Notes). Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray of real'
  prefs: []
  type: TYPE_NORMAL
- en: The transformed input array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`idct`](scipy.fftpack.idct.html#scipy.fftpack.idct "scipy.fftpack.idct")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse DCT
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For a single dimension array `x`, `dct(x, norm='ortho')` is equal to MATLAB
    `dct(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: There are, theoretically, 8 types of the DCT, only the first 4 types are implemented
    in scipy. ‘The’ DCT generally refers to DCT type 2, and ‘the’ Inverse DCT generally
    refers to DCT type 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type I**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-I; we use the following (for `norm=None`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = x_0 + (-1)^k x_{N-1} + 2 \sum_{n=1}^{N-2} x_n \cos\left( \frac{\pi k
    n}{N-1} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `norm='ortho'`, `x[0]` and `x[N-1]` are multiplied by a scaling factor of
    \(\sqrt{2}\), and `y[k]` is multiplied by a scaling factor `f`
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f = \begin{cases} \frac{1}{2}\sqrt{\frac{1}{N-1}} & \text{if
    }k=0\text{ or }N-1, \\ \frac{1}{2}\sqrt{\frac{2}{N-1}} & \text{otherwise} \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.2.0: Orthonormalization in DCT-I.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The DCT-I is only supported for input size > 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type II**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-II; we use the following (for `norm=None`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \cos\left(\frac{\pi k(2n+1)}{2N} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `norm='ortho'`, `y[k]` is multiplied by a scaling factor `f`
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f = \begin{cases} \sqrt{\frac{1}{4N}} & \text{if }k=0, \\ \sqrt{\frac{1}{2N}}
    & \text{otherwise} \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: which makes the corresponding matrix of coefficients orthonormal (`O @ O.T =
    np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Type III**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions, we use the following (for `norm=None`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = x_0 + 2 \sum_{n=1}^{N-1} x_n \cos\left(\frac{\pi(2k+1)n}{2N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: or, for `norm='ortho'`
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = \frac{x_0}{\sqrt{N}} + \sqrt{\frac{2}{N}} \sum_{n=1}^{N-1} x_n \cos\left(\frac{\pi(2k+1)n}{2N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: The (unnormalized) DCT-III is the inverse of the (unnormalized) DCT-II, up to
    a factor *2N*. The orthonormalized DCT-III is exactly the inverse of the orthonormalized
    DCT-II.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type IV**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-IV; we use the following (for `norm=None`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \cos\left(\frac{\pi(2k+1)(2n+1)}{4N} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `norm='ortho'`, `y[k]` is multiplied by a scaling factor `f`
  prefs: []
  type: TYPE_NORMAL
- en: \[f = \frac{1}{\sqrt{2N}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.2.0: Support for DCT-IV.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: ‘A Fast Cosine Transform in One and Two Dimensions’, by J. Makhoul, *IEEE Transactions
    on acoustics, speech and signal processing* vol. 28(1), pp. 27-34, [DOI:10.1109/TASSP.1980.1163351](https://doi.org/10.1109/TASSP.1980.1163351)
    (1980).
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Discrete cosine transform”, [https://en.wikipedia.org/wiki/Discrete_cosine_transform](https://en.wikipedia.org/wiki/Discrete_cosine_transform)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The Type 1 DCT is equivalent to the FFT (though faster) for real, even-symmetrical
    inputs. The output is also real and even-symmetrical. Half of the FFT input is
    used to generate half of the FFT output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
