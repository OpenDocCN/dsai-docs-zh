- en: Discrete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/discrete.html](https://docs.sympy.org/latest/modules/discrete.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `discrete` module in SymPy implements methods to compute discrete transforms
    and convolutions of finite sequences.
  prefs: []
  type: TYPE_NORMAL
- en: This module contains functions which operate on discrete sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Transforms - `fft`, `ifft`, `ntt`, `intt`, `fwht`, `ifwht`,
  prefs: []
  type: TYPE_NORMAL
- en: '`mobius_transform`, `inverse_mobius_transform`'
  prefs: []
  type: TYPE_NORMAL
- en: Convolutions - `convolution`, `convolution_fft`, `convolution_ntt`,
  prefs: []
  type: TYPE_NORMAL
- en: '`convolution_fwht`, `convolution_subset`, `covering_product`, `intersecting_product`'
  prefs: []
  type: TYPE_NORMAL
- en: Since the discrete transforms can be used to reduce the computational complexity
    of the discrete convolutions, the `convolutions` module makes use of the `transforms`
    module for efficient computation (notable for long input sequences).
  prefs: []
  type: TYPE_NORMAL
- en: '## Transforms'
  prefs: []
  type: TYPE_NORMAL
- en: This section lists the methods which implement the basic transforms for discrete
    sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Fast Fourier Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Discrete Fourier Transform (**DFT**) in the complex domain.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    FFT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: This method should be used with default arguments only for short sequences as
    the complexity of expressions increases with the size of the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which **DFT** is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dps** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the number of decimal digits for precision.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R178](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R179](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FastFourierTransform.html](https://mathworld.wolfram.com/FastFourierTransform.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Discrete Fourier Transform (**DFT**) in the complex domain.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    FFT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: This method should be used with default arguments only for short sequences as
    the complexity of expressions increases with the size of the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which **DFT** is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dps** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the number of decimal digits for precision.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R180](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R181](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FastFourierTransform.html](https://mathworld.wolfram.com/FastFourierTransform.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Number Theoretic Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Number Theoretic Transform (**NTT**), which specializes the Discrete
    Fourier Transform (**DFT**) over quotient ring \(Z/pZ\) for prime \(p\) instead
    of complex numbers \(C\).
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    NTT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which **DFT** is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**prime** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Prime modulus of the form \((m 2^k + 1)\) to be used for performing **NTT**
    on the sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R182](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apfloat.org/ntt.html](http://www.apfloat.org/ntt.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R183](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/NumberTheoreticTransform.html](https://mathworld.wolfram.com/NumberTheoreticTransform.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R184](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29](https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Number Theoretic Transform (**NTT**), which specializes the Discrete
    Fourier Transform (**DFT**) over quotient ring \(Z/pZ\) for prime \(p\) instead
    of complex numbers \(C\).
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    NTT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which **DFT** is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**prime** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Prime modulus of the form \((m 2^k + 1)\) to be used for performing **NTT**
    on the sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R185](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.apfloat.org/ntt.html](http://www.apfloat.org/ntt.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R186](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/NumberTheoreticTransform.html](https://mathworld.wolfram.com/NumberTheoreticTransform.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R187](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29](https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Fast Walsh Hadamard Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Walsh Hadamard Transform (**WHT**), and uses Hadamard ordering
    for the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    FWHT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which WHT is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R188](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hadamard_transform](https://en.wikipedia.org/wiki/Hadamard_transform)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R189](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform](https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Walsh Hadamard Transform (**WHT**), and uses Hadamard ordering
    for the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the *radix-2
    FWHT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which WHT is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R190](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hadamard_transform](https://en.wikipedia.org/wiki/Hadamard_transform)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R191](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform](https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform)'
  prefs: []
  type: TYPE_NORMAL
- en: Möbius Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Mobius Transform for subset lattice with indices of sequence as
    bitmasks.
  prefs: []
  type: TYPE_NORMAL
- en: The indices of each argument, considered as bit strings, correspond to subsets
    of a finite set.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the definition
    of subset/superset based on bitmasks (indices) requires the size of sequence to
    be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which Mobius Transform is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**subset** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies if Mobius Transform is applied by enumerating subsets or supersets
    of the given set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R192](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula](https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R193](#id16)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf](https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R194](#id17)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://arxiv.org/pdf/1211.0189.pdf](https://arxiv.org/pdf/1211.0189.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Performs the Mobius Transform for subset lattice with indices of sequence as
    bitmasks.
  prefs: []
  type: TYPE_NORMAL
- en: The indices of each argument, considered as bit strings, correspond to subsets
    of a finite set.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the definition
    of subset/superset based on bitmasks (indices) requires the size of sequence to
    be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seq** : iterable'
  prefs: []
  type: TYPE_NORMAL
- en: The sequence on which Mobius Transform is to be applied.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**subset** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies if Mobius Transform is applied by enumerating subsets or supersets
    of the given set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R195](#id18)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula](https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R196](#id19)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf](https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R197](#id20)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://arxiv.org/pdf/1211.0189.pdf](https://arxiv.org/pdf/1211.0189.pdf)  ##
    Convolutions'
  prefs: []
  type: TYPE_NORMAL
- en: This section lists the methods which implement the basic convolutions for discrete
    sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Convolution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a general method for calculating the convolution of discrete sequences,
    which internally calls one of the methods `convolution_fft`, `convolution_ntt`,
    `convolution_fwht`, or `convolution_subset`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Performs convolution by determining the type of desired convolution using hints.
  prefs: []
  type: TYPE_NORMAL
- en: Exactly one of `dps`, `prime`, `dyadic`, `subset` arguments should be specified
    explicitly for identifying the type of convolution, and the argument `cycle` can
    be specified optionally.
  prefs: []
  type: TYPE_NORMAL
- en: For the default arguments, linear convolution is performed using **FFT**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which convolution is performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**cycle** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the length for doing cyclic convolution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dps** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the number of decimal digits for precision for performing **FFT**
    on the sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**prime** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Prime modulus of the form \((m 2^k + 1)\) to be used for performing **NTT**
    on the sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dyadic** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Identifies the convolution type as dyadic (*bitwise-XOR*) convolution, which
    is performed using **FWHT**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**subset** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Identifies the convolution type as subset convolution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Convolution using Fast Fourier Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Performs linear convolution using Fast Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which convolution is performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dps** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the number of decimal digits for precision.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R198](#id21)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Convolution_theorem](https://en.wikipedia.org/wiki/Convolution_theorem)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R199](#id22)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29](https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Convolution using Number Theoretic Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Performs linear convolution using Number Theoretic Transform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which convolution is performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**prime** : Integer'
  prefs: []
  type: TYPE_NORMAL
- en: Prime modulus of the form \((m 2^k + 1)\) to be used for performing **NTT**
    on the sequence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R200](#id23)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Convolution_theorem](https://en.wikipedia.org/wiki/Convolution_theorem)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R201](#id24)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29](https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29)'
  prefs: []
  type: TYPE_NORMAL
- en: Convolution using Fast Walsh Hadamard Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Performs dyadic (*bitwise-XOR*) convolution using Fast Walsh Hadamard Transform.
  prefs: []
  type: TYPE_NORMAL
- en: The convolution is automatically padded to the right with zeros, as the *radix-2
    FWHT* requires the number of sample points to be a power of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which convolution is performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R202](#id25)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.radioeng.cz/fulltexts/2002/02_03_40_42.pdf](https://www.radioeng.cz/fulltexts/2002/02_03_40_42.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R203](#id26)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hadamard_transform](https://en.wikipedia.org/wiki/Hadamard_transform)'
  prefs: []
  type: TYPE_NORMAL
- en: Subset Convolution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Performs Subset Convolution of given sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The indices of each argument, considered as bit strings, correspond to subsets
    of a finite set.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the definition
    of subset based on bitmasks (indices) requires the size of sequence to be a power
    of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which convolution is performed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R204](#id27)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf](https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Covering Product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Returns the covering product of given sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The indices of each argument, considered as bit strings, correspond to subsets
    of a finite set.
  prefs: []
  type: TYPE_NORMAL
- en: The covering product of given sequences is a sequence which contains the sum
    of products of the elements of the given sequences grouped by the *bitwise-OR*
    of the corresponding indices.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the definition
    of subset based on bitmasks (indices) requires the size of sequence to be a power
    of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which covering product is to be obtained.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R205](#id28)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf](https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Intersecting Product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns the intersecting product of given sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The indices of each argument, considered as bit strings, correspond to subsets
    of a finite set.
  prefs: []
  type: TYPE_NORMAL
- en: The intersecting product of given sequences is the sequence which contains the
    sum of products of the elements of the given sequences grouped by the *bitwise-AND*
    of the corresponding indices.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence is automatically padded to the right with zeros, as the definition
    of subset based on bitmasks (indices) requires the size of sequence to be a power
    of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b** : iterables'
  prefs: []
  type: TYPE_NORMAL
- en: The sequences for which intersecting product is to be obtained.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R206](#id29)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf](https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf)'
  prefs: []
  type: TYPE_NORMAL
