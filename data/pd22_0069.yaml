- en: pandas.read_json
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.read_json
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_json.html](https://pandas.pydata.org/docs/reference/api/pandas.read_json.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_json.html](https://pandas.pydata.org/docs/reference/api/pandas.read_json.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Convert a JSON string to pandas object.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将JSON字符串转换为pandas对象。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**path_or_buf**a valid JSON str, path object or file-like object'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**path_or_buf**有效的JSON字符串、路径对象或类文件对象'
- en: 'Any valid string path is acceptable. The string could be a URL. Valid URL schemes
    include http, ftp, s3, and file. For file URLs, a host is expected. A local file
    could be: `file://localhost/path/to/table.json`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有效的字符串路径都可以接受。字符串可以是URL。有效的URL方案包括http、ftp、s3和file。对于文件URL，期望有一个主机。本地文件可以是：`file://localhost/path/to/table.json`。
- en: If you want to pass in a path object, pandas accepts any `os.PathLike`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要传递路径对象，pandas接受任何`os.PathLike`。
- en: By file-like object, we refer to objects with a `read()` method, such as a file
    handle (e.g. via builtin `open` function) or `StringIO`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过类文件对象，我们指的是具有`read()`方法的对象，例如文件句柄（例如通过内置的`open`函数）或`StringIO`。
- en: 'Deprecated since version 2.1.0: Passing json literal strings is deprecated.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.1.0版本起已弃用：传递json文字字符串已弃用。
- en: '**orient**str, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**orient**字符串，可选'
- en: 'Indication of expected JSON string format. Compatible JSON strings can be produced
    by `to_json()` with a corresponding orient value. The set of possible orients
    is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的JSON字符串格式指示。兼容的JSON字符串可以通过具有相应orient值的`to_json()`生成。可能的orient集合是：
- en: '`''split''` : dict like `{index -> [index], columns -> [columns], data -> [values]}`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''split''`：类似于`{index -> [index], columns -> [columns], data -> [values]}`'
- en: '`''records''` : list like `[{column -> value}, ... , {column -> value}]`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''records''`：类似于`[{column -> value}, ... , {column -> value}]`'
- en: '`''index''` : dict like `{index -> {column -> value}}`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''index''`：类似于`{index -> {column -> value}}`'
- en: '`''columns''` : dict like `{column -> {index -> value}}`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''columns''`：类似于`{column -> {index -> value}}`'
- en: '`''values''` : just the values array'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''values''`：仅值数组'
- en: '`''table''` : dict like `{''schema'': {schema}, ''data'': {data}}`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''table''`：类似于`{''schema'': {schema}, ''data'': {data}}`'
- en: The allowed and default values depend on the value of the typ parameter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的默认值取决于typ参数的值。
- en: when `typ == 'series'`,
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`typ == 'series'`时，
- en: allowed orients are `{'split','records','index'}`
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的方向是`{'split','records','index'}`
- en: default is `'index'`
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认为`'index'`
- en: The Series index must be unique for orient `'index'`.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`'index'`，Series索引必须是唯一的。
- en: when `typ == 'frame'`,
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`typ == 'frame'`时，
- en: allowed orients are `{'split','records','index', 'columns','values', 'table'}`
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的方向是`{'split','records','index', 'columns','values', 'table'}`
- en: default is `'columns'`
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认为`'columns'`
- en: The DataFrame index must be unique for orients `'index'` and `'columns'`.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`'index'`和`'columns'`，DataFrame索引必须是唯一的。
- en: The DataFrame columns must be unique for orients `'index'`, `'columns'`, and
    `'records'`.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`'index'`、`'columns'`和`'records'`，DataFrame列必须是唯一的。
- en: '**typ**{‘frame’, ‘series’}, default ‘frame’'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**typ**{‘frame’, ‘series’}，默认为‘frame’'
- en: The type of object to recover.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复的对象类型。
- en: '**dtype**bool or dict, default None'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**布尔值或字典，默认为None'
- en: If True, infer dtypes; if a dict of column to dtype, then use those; if False,
    then don’t infer dtypes at all, applies only to the data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则推断数据类型；如果为列到数据类型的字典，则使用这些数据类型；如果为False，则根本不推断数据类型，仅适用于数据。
- en: For all `orient` values except `'table'`, default is True.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除了`'table'`之外的所有`orient`值，默认为True。
- en: '**convert_axes**bool, default None'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_axes**布尔值，默认为None'
- en: Try to convert the axes to the proper dtypes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将轴转换为适当的数据类型。
- en: For all `orient` values except `'table'`, default is True.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除了`'table'`之外的所有`orient`值，默认为True。
- en: '**convert_dates**bool or list of str, default True'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**convert_dates**布尔值或字符串列表，默认为True'
- en: If True then default datelike columns may be converted (depending on keep_default_dates).
    If False, no dates will be converted. If a list of column names, then those columns
    will be converted and default datelike columns may also be converted (depending
    on keep_default_dates).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则默认的日期列可能会被转换（取决于keep_default_dates）。如果为False，则不会转换任何日期。如果是列名称列表，则这些列将被转换，同时默认的日期列也可能会被转换（取决于keep_default_dates）。
- en: '**keep_default_dates**bool, default True'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**keep_default_dates**布尔值，默认为True'
- en: If parsing dates (convert_dates is not False), then try to parse the default
    datelike columns. A column label is datelike if
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果解析日期（convert_dates不为False），则尝试解析默认的日期列。如果列标签是日期样式的，则为日期样式。
- en: it ends with `'_at'`,
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`'_at'`结尾，
- en: it ends with `'_time'`,
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`'_time'`结尾，
- en: it begins with `'timestamp'`,
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`'timestamp'`开头，
- en: it is `'modified'`, or
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是`'modified'`，或
- en: it is `'date'`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是`'date'`。
- en: '**precise_float**bool, default False'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**precise_float**布尔值，默认为False'
- en: Set to enable usage of higher precision (strtod) function when decoding string
    to double values. Default (False) is to use fast but less precise builtin functionality.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为启用更高精度（strtod）函数在将字符串解码为双精度值时。默认（False）是使用快速但不太精确的内置功能。
- en: '**date_unit**str, default None'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**date_unit**str，默认为None'
- en: The timestamp unit to detect if converting dates. The default behaviour is to
    try and detect the correct precision, but if this is not desired then pass one
    of ‘s’, ‘ms’, ‘us’ or ‘ns’ to force parsing only seconds, milliseconds, microseconds
    or nanoseconds respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳单位，用于检测日期转换。默认行为是尝试检测正确的精度，但如果不需要，则传递‘s’、‘ms’、‘us’或‘ns’中的一个，以强制仅解析秒、毫秒、微秒或纳秒。
- en: '**encoding**str, default is ‘utf-8’'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**encoding**str，默认为‘utf-8’'
- en: The encoding to use to decode py3 bytes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解码py3字节的编码。
- en: '**encoding_errors**str, optional, default “strict”'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**encoding_errors**str，可选，默认为“strict”'
- en: How encoding errors are treated. [List of possible values](https://docs.python.org/3/library/codecs.html#error-handlers)
    .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如何处理编码错误。[可能值的列表](https://docs.python.org/3/library/codecs.html#error-handlers)。
- en: New in version 1.3.0.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.3.0版本中新增。
- en: '**lines**bool, default False'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**lines**bool，默认为False'
- en: Read the file as a json object per line.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按行读取文件作为json对象。
- en: '**chunksize**int, optional'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**chunksize**int，可选'
- en: Return JsonReader object for iteration. See the [line-delimited json docs](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json)
    for more information on `chunksize`. This can only be passed if lines=True. If
    this is None, the file will be read into memory all at once.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 返回JsonReader对象以进行迭代。有关`chunksize`的更多信息，请参阅[行分隔的json文档](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json)。只有在lines=True时才能传递此参数。如果为None，则文件将一次性全部读入内存。
- en: '**compression**str or dict, default ‘infer’'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**compression**str或dict，默认为‘infer’'
- en: 'For on-the-fly decompression of on-disk data. If ‘infer’ and ‘path_or_buf’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). If using ‘zip’ or ‘tar’, the ZIP file must contain only one data
    file to be read in. Set to `None` for no decompression. Can also be a dict with
    key `''method''` set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`,
    `''xz''`, `''tar''`} and other key-value pairs are forwarded to `zipfile.ZipFile`,
    `gzip.GzipFile`, `bz2.BZ2File`, `zstandard.ZstdDecompressor`, `lzma.LZMAFile`
    or `tarfile.TarFile`, respectively. As an example, the following could be passed
    for Zstandard decompression using a custom compression dictionary: `compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '用于在磁盘上的数据进行即时解压缩。如果‘infer’和‘path_or_buf’是类似路径的，则从以下扩展名中检测压缩：‘.gz’、‘.bz2’、‘.zip’、‘.xz’、‘.zst’、‘.tar’、‘.tar.gz’、‘.tar.xz’或‘.tar.bz2’（否则不压缩）。如果使用‘zip’或‘tar’，ZIP文件必须只包含一个要读取的数据文件。设置为`None`表示不解压缩。也可以是一个字典，其中键`''method''`设置为其中之一{`''zip''`、`''gzip''`、`''bz2''`、`''zstd''`、`''xz''`、`''tar''`}，其他键值对转发到`zipfile.ZipFile`、`gzip.GzipFile`、`bz2.BZ2File`、`zstandard.ZstdDecompressor`、`lzma.LZMAFile`或`tarfile.TarFile`。例如，可以通过传递以下内容来进行Zstandard解压缩，使用自定义压缩字典：`compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`。'
- en: 'New in version 1.5.0: Added support for .tar files.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.5.0版本中新增：对.tar文件的支持。
- en: 'Changed in version 1.4.0: Zstandard support.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.0版本中更改：Zstandard支持。
- en: '**nrows**int, optional'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**nrows**int，可选'
- en: The number of lines from the line-delimited jsonfile that has to be read. This
    can only be passed if lines=True. If this is None, all the rows will be returned.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 必须读取的行数，来自行分隔的json文件。只有在lines=True时才能传递此参数。如果为None，则将返回所有行。
- en: '**storage_options**dict, optional'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**storage_options**dict，可选'
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于特定存储连接的额外选项，例如主机、端口、用户名、密码等。对于HTTP(S) URL，键值对将作为标头选项转发到`urllib.request.Request`。对于其他URL（例如以“s3://”和“gcs://”开头的URL），键值对将转发到`fsspec.open`。请参阅`fsspec`和`urllib`以获取更多详细信息，并有关存储选项的更多示例，请参考[这里](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files)。
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype_backend**{‘numpy_nullable’、‘pyarrow’}，默认为‘numpy_nullable’'
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于结果 [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    的后端数据类型（仍处于试验阶段）。行为如下：
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"numpy_nullable"`：返回支持可空 dtype 的 [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")（默认值）。'
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"pyarrow"`：返回支持 pyarrow 的可空 [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame。'
- en: New in version 2.0.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始新增。
- en: '**engine**{“ujson”, “pyarrow”}, default “ujson”'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**engine**{“ujson”, “pyarrow”}，默认为 “ujson”'
- en: Parser engine to use. The `"pyarrow"` engine is only available when `lines=True`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的解析引擎。当 `lines=True` 时才可用 `"pyarrow"` 引擎。
- en: New in version 2.0.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始新增。
- en: 'Returns:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Series, DataFrame, or pandas.api.typing.JsonReader
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Series、DataFrame 或 pandas.api.typing.JsonReader
- en: A JsonReader is returned when `chunksize` is not `0` or `None`. Otherwise, the
    type returned depends on the value of `typ`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `chunksize` 不为 `0` 或 `None` 时返回一个 JsonReader。否则，返回的类型取决于 `typ` 的值。
- en: See also
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DataFrame.to_json`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_json`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")'
- en: Convert a DataFrame to a JSON string.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将 DataFrame 转换为 JSON 字符串。
- en: '[`Series.to_json`](pandas.Series.to_json.html#pandas.Series.to_json "pandas.Series.to_json")'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.to_json`](pandas.Series.to_json.html#pandas.Series.to_json "pandas.Series.to_json")'
- en: Convert a Series to a JSON string.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Series 转换为 JSON 字符串。
- en: '[`json_normalize`](pandas.json_normalize.html#pandas.json_normalize "pandas.json_normalize")'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`json_normalize`](pandas.json_normalize.html#pandas.json_normalize "pandas.json_normalize")'
- en: Normalize semi-structured JSON data into a flat table.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将半结构化的 JSON 数据规范化为平面表格。
- en: Notes
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Specific to `orient='table'`, if a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a literal [`Index`](pandas.Index.html#pandas.Index "pandas.Index")
    name of index gets written with `to_json()`, the subsequent read operation will
    incorrectly set the [`Index`](pandas.Index.html#pandas.Index "pandas.Index") name
    to `None`. This is because index is also used by [`DataFrame.to_json()`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") to denote a missing [`Index`](pandas.Index.html#pandas.Index
    "pandas.Index") name, and the subsequent [`read_json()`](#pandas.read_json "pandas.read_json")
    operation cannot distinguish between the two. The same limitation is encountered
    with a [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")
    and any names beginning with `'level_'`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `orient='table'`，如果一个带有文字 [`Index`](pandas.Index.html#pandas.Index "pandas.Index")
    名称为 index 的 [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    被写入 `to_json()`，后续的读操作会错误地将 [`Index`](pandas.Index.html#pandas.Index "pandas.Index")
    名称设置为 `None`。这是因为 index 也被 [`DataFrame.to_json()`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") 用来表示缺少的 [`Index`](pandas.Index.html#pandas.Index "pandas.Index")
    名称，后续的 [`read_json()`](#pandas.read_json "pandas.read_json") 操作无法区分两者。对于 [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") 和任何以 `'level_'` 开头的名称，也会遇到相同的限制。
- en: Examples
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Encoding/decoding a Dataframe using `''split''` formatted JSON:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `'split'` 格式化的 JSON 对 Dataframe 进行编码/解码：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Encoding/decoding a Dataframe using `''index''` formatted JSON:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `'index'` 格式化的 JSON 对 Dataframe 进行编码/解码：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Encoding/decoding a Dataframe using `'records'` formatted JSON. Note that index
    labels are not preserved with this encoding.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `'records'` 格式化的 JSON 对 Dataframe 进行编码/解码。请注意，此编码不会保留索引标签。
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Encoding with Table Schema
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Table Schema 进行编码
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The following example uses `dtype_backend="numpy_nullable"`
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用 `dtype_backend="numpy_nullable"`
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
