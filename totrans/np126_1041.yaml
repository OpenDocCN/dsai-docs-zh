- en: numpy.testing.suppress_warnings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.suppress_warnings.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.suppress_warnings.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Context manager and decorator doing much the same as `warnings.catch_warnings`.
  prefs: []
  type: TYPE_NORMAL
- en: However, it also provides a filter mechanism to work around [https://bugs.python.org/issue4180](https://bugs.python.org/issue4180).
  prefs: []
  type: TYPE_NORMAL
- en: This bug causes Python before 3.4 to not reliably show warnings again after
    they have been ignored once (even within catch_warnings). It means that no “ignore”
    filter can be used easily, since following tests might need to see the warning.
    Additionally it allows easier specificity for testing warnings and can be nested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**forwarding_rule**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: One of “always”, “once”, “module”, or “location”. Analogous to the usual warnings
    module filter mode, it is useful to reduce noise mostly on the outmost level.
    Unsuppressed and unrecorded warnings will be forwarded based on this rule. Defaults
    to “always”. “location” is equivalent to the warnings “default”, match by exact
    location the warning warning originated from.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Filters added inside the context manager will be discarded again when leaving
    it. Upon entering all filters defined outside a context will be applied automatically.
  prefs: []
  type: TYPE_NORMAL
- en: When a recording filter is added, matching warnings are stored in the `log`
    attribute as well as in the list returned by `record`.
  prefs: []
  type: TYPE_NORMAL
- en: If filters are added and the `module` keyword is given, the warning registry
    of this module will additionally be cleared when applying it, entering the context,
    or exiting it. This could cause warnings to appear a second time after leaving
    the context if they were configured to be printed once (default) and were already
    printed before the context was entered.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting this context manager will work as expected when the forwarding rule
    is “always” (default). Unfiltered and unrecorded warnings will be passed out and
    be matched by the outer level. On the outmost level they will be printed (or caught
    by another warnings context). The forwarding rule argument can modify this behaviour.
  prefs: []
  type: TYPE_NORMAL
- en: Like `catch_warnings` this context manager is not threadsafe.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'With a context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or as a decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](numpy.testing.suppress_warnings.__call__.html#numpy.testing.suppress_warnings.__call__
    "numpy.testing.suppress_warnings.__call__")(func) | Function decorator to apply
    certain suppressions to a whole function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`filter`](numpy.testing.suppress_warnings.filter.html#numpy.testing.suppress_warnings.filter
    "numpy.testing.suppress_warnings.filter")([category, message, module]) | Add a
    new suppressing filter or apply it if the state is entered. |'
  prefs: []
  type: TYPE_TB
- en: '| [`record`](numpy.testing.suppress_warnings.record.html#numpy.testing.suppress_warnings.record
    "numpy.testing.suppress_warnings.record")([category, message, module]) | Append
    a new recording filter or apply it if the state is entered. |'
  prefs: []
  type: TYPE_TB
