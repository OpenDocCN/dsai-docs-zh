- en: scipy.optimize.fmin_bfgs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Minimize a function using the BFGS algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable `f(x,*args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess, shape (n,)
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime**callable `f''(x,*args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient of f.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to f and fprime.
  prefs: []
  type: TYPE_NORMAL
- en: '**gtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Terminate successfully if gradient norm is less than *gtol*
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of norm (Inf is max, -Inf is min)
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**int or ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *fprime* is approximated, use this value for the step size.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An optional user-supplied function to call after each iteration. Called as `callback(xk)`,
    where `xk` is the current parameter vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in addition
    to `xopt`.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Print convergence message if True.
  prefs: []
  type: TYPE_NORMAL
- en: '**retall**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of results at each iteration if True.
  prefs: []
  type: TYPE_NORMAL
- en: '**xrtol**float, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: Relative tolerance for *x*. Terminate successfully if step size is less than
    `xk * xrtol` where `xk` is the current parameter vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**c1**float, default: 1e-4'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for Armijo condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**c2**float, default: 0.9'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for curvature condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**hess_inv0**None or ndarray, optional``'
  prefs: []
  type: TYPE_NORMAL
- en: Initial inverse hessian estimate, shape (n, n). If None (default) then the identity
    matrix is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters which minimize f, i.e., `f(xopt) == fopt`.
  prefs: []
  type: TYPE_NORMAL
- en: '**fopt**float'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum value.
  prefs: []
  type: TYPE_NORMAL
- en: '**gopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Value of gradient at minimum, f’(xopt), which should be near 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Value of 1/f’’(xopt), i.e., the inverse Hessian matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**func_calls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of function_calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**grad_calls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of gradient calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**warnflag**integer'
  prefs: []
  type: TYPE_NORMAL
- en: '1 : Maximum number of iterations exceeded. 2 : Gradient and/or function calls
    not changing. 3 : NaN result encountered.'
  prefs: []
  type: TYPE_NORMAL
- en: '**allvecs**list'
  prefs: []
  type: TYPE_NORMAL
- en: The value of *xopt* at each iteration. Only returned if *retall* is True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for multivariate functions. See `method='BFGS'`
    in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Optimize the function, *f*, whose gradient is given by *fprime* using the quasi-Newton
    method of Broyden, Fletcher, Goldfarb, and Shanno (BFGS).
  prefs: []
  type: TYPE_NORMAL
- en: Parameters *c1* and *c2* must satisfy `0 < c1 < c2 < 1`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Wright, and Nocedal ‘Numerical Optimization’, 1999, p. 198.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
