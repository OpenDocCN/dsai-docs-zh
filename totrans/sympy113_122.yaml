- en: Indexed Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/tensor/indexed.html](https://docs.sympy.org/latest/modules/tensor/indexed.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Module that defines indexed objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The classes `IndexedBase`, `Indexed`, and `Idx` represent a matrix element
    `M[i, j]` as in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There can be any number of indices on an Indexed object. No transformation properties
    are implemented in these Base objects, but implicit contraction of repeated indices
    is supported.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the support for complicated (i.e. non-atomic) integer expressions
    as indices is limited. (This should be improved in future releases.)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To express the above matrix element example you would write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Repeated indices in a product implies a summation, so to express a matrix-vector
    product in terms of Indexed objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the indexed objects will be converted to component based arrays, e.g. with
    the code printers or the autowrap framework, you also need to provide (symbolic
    or numerical) dimensions. This can be done by passing an optional shape parameter
    to IndexedBase upon construction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If an IndexedBase object has no shape information, it is assumed that the array
    is as large as the ranges of its indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The above can be compared with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To analyze the structure of indexed expressions, you can use the methods get_indices()
    and get_contraction_structure():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See the appropriate docstrings for a detailed explanation of the output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Represents an integer index as an `Integer` or integer expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways to create an `Idx` object. The constructor takes
    two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label`'
  prefs: []
  type: TYPE_NORMAL
- en: An integer or a symbol that labels the index.
  prefs: []
  type: TYPE_NORMAL
- en: '`range`'
  prefs: []
  type: TYPE_NORMAL
- en: Optionally you can specify a range as either
  prefs: []
  type: TYPE_NORMAL
- en: '`Symbol` or integer: This is interpreted as a dimension. Lower and upper bounds
    are set to `0` and `range - 1`, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tuple`: The two elements are interpreted as the lower and upper bounds of
    the range, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: bounds of the range are assumed to be either integer or infinite (oo
    and -oo are allowed to specify an unbounded range). If `n` is given as a bound,
    then `n.is_integer` must not return false.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For convenience, if the label is given as a string it is automatically converted
    to an integer symbol. (Note: this conversion is not done for range or dimension
    arguments.)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If a string is given for the label an integer `Symbol` is created and the bounds
    are both `None`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Both upper and lower bounds can be specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When only a single bound is given it is interpreted as the dimension and the
    lower bound defaults to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns the label (Integer or integer expression) of the Idx object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the lower bound of the `Idx`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the upper bound of the `Idx`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Represents a mathematical object with indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'It is recommended that `Indexed` objects be created by indexing `IndexedBase`:
    `IndexedBase(''A'')[i, j]` instead of `Indexed(IndexedBase(''A''), i, j)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns the `IndexedBase` of the `Indexed` object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Returns the indices of the `Indexed` object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of tuples with lower and upper range of each index.
  prefs: []
  type: TYPE_NORMAL
- en: If an index does not define the data members upper and lower, the corresponding
    slot in the list contains `None` instead of a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns the rank of the `Indexed` object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list with dimensions of each index.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions is a property of the array, not of the indices. Still, if the `IndexedBase`
    does not define a shape attribute, it is assumed that the ranges of the indices
    correspond to the shape of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Represent the base or stem of an indexed object
  prefs: []
  type: TYPE_NORMAL
- en: 'The IndexedBase class represent an array that contains elements. The main purpose
    of this class is to allow the convenient creation of objects of the Indexed class.
    The __getitem__ method of IndexedBase returns an instance of Indexed. Alone, without
    indices, the IndexedBase class can be used as a notation for e.g. matrix equations,
    resembling what you could do with the Symbol class. But, the IndexedBase class
    adds functionality that is not available for Symbol instances:'
  prefs: []
  type: TYPE_NORMAL
- en: An IndexedBase object can optionally store shape information. This can be used
    in to check array conformance and conditions for numpy broadcasting. (TODO)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An IndexedBase object implements syntactic sugar that allows easy symbolic representation
    of array operations, using implicit summation of repeated indices.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The IndexedBase object symbolizes a mathematical structure equivalent to arrays,
    and is recognized as such for code generation and automatic compilation and wrapping.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When an IndexedBase object receives indices, it returns an array with named
    axes, represented by an Indexed object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The IndexedBase constructor takes an optional shape argument. If given, it overrides
    any shape information in the indices. (But not the index ranges!)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Assumptions can be specified with keyword arguments the same way as for Symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Assumptions can also be inherited if a Symbol is used to initialize the IndexedBase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns the label of the `IndexedBase` object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Returns the offset for the `IndexedBase` object.
  prefs: []
  type: TYPE_NORMAL
- en: This is the value added to the resulting index when the 2D Indexed object is
    unrolled to a 1D form. Used in code generation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shape of the `IndexedBase` object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: If the shape of the `IndexedBase` is specified, it will override any
    shape information given by the indices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Returns the strided scheme for the `IndexedBase` object.
  prefs: []
  type: TYPE_NORMAL
- en: Normally this is a tuple denoting the number of steps to take in the respective
    dimension when traversing an array. For code generation purposes strides=’C’ and
    strides=’F’ can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: strides=’C’ would mean that code printer would unroll in row-major order and
    ‘F’ means unroll in column major order.
  prefs: []
  type: TYPE_NORMAL
