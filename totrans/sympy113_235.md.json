["```py\ncontrol_plots.pole_zero_plot(pole_color='blue', pole_markersize=10, zero_color='orange', zero_markersize=7, grid=True, show_axes=True, show=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import pole_zero_plot\n>>> tf1 = TransferFunction(s**2 + 1, s**4 + 4*s**3 + 6*s**2 + 5*s + 2, s)\n>>> pole_zero_plot(tf1) \n```", "```py\ncontrol_plots.pole_zero_numerical_data()\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import pole_zero_numerical_data\n>>> tf1 = TransferFunction(s**2 + 1, s**4 + 4*s**3 + 6*s**2 + 5*s + 2, s)\n>>> pole_zero_numerical_data(tf1)   \n([-0.+1.j  0.-1.j], [-2\\. +0.j        -0.5+0.8660254j -0.5-0.8660254j -1\\. +0.j       ]) \n```", "```py\ncontrol_plots.bode_plot(initial_exp=-5, final_exp=5, grid=True, show_axes=False, show=True, freq_unit='rad/sec', phase_unit='rad', phase_unwrap=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import bode_plot\n>>> tf1 = TransferFunction(1*s**2 + 0.1*s + 7.5, 1*s**4 + 0.12*s**3 + 9*s**2, s)\n>>> bode_plot(tf1, initial_exp=0.2, final_exp=0.7) \n```", "```py\ncontrol_plots.bode_magnitude_plot(initial_exp=-5, final_exp=5, color='b', show_axes=False, grid=True, show=True, freq_unit='rad/sec', **kwargs)\n```", "```py\ncontrol_plots.bode_phase_plot(initial_exp=-5, final_exp=5, color='b', show_axes=False, grid=True, show=True, freq_unit='rad/sec', phase_unit='rad', phase_unwrap=True, **kwargs)\n```", "```py\ncontrol_plots.bode_magnitude_numerical_data(initial_exp=-5, final_exp=5, freq_unit='rad/sec', **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import bode_magnitude_numerical_data\n>>> tf1 = TransferFunction(s**2 + 1, s**4 + 4*s**3 + 6*s**2 + 5*s + 2, s)\n>>> bode_magnitude_numerical_data(tf1)   \n([1e-05, 1.5148378120533502e-05,..., 68437.36188804005, 100000.0],\n[-6.020599914256786, -6.0205999155219505,..., -193.4117304087953, -200.00000000260573]) \n```", "```py\ncontrol_plots.bode_phase_numerical_data(initial_exp=-5, final_exp=5, freq_unit='rad/sec', phase_unit='rad', phase_unwrap=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import bode_phase_numerical_data\n>>> tf1 = TransferFunction(s**2 + 1, s**4 + 4*s**3 + 6*s**2 + 5*s + 2, s)\n>>> bode_phase_numerical_data(tf1)   \n([1e-05, 1.4472354033813751e-05, 2.035581932165858e-05,..., 47577.3248186011, 67884.09326036123, 100000.0],\n[-2.5000000000291665e-05, -3.6180885085e-05, -5.08895483066e-05,...,-3.1415085799262523, -3.14155265358979]) \n```", "```py\ncontrol_plots.impulse_response_plot(color='b', prec=8, lower_limit=0, upper_limit=10, show_axes=False, grid=True, show=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import impulse_response_plot\n>>> tf1 = TransferFunction(8*s**2 + 18*s + 32, s**3 + 6*s**2 + 14*s + 24, s)\n>>> impulse_response_plot(tf1) \n```", "```py\ncontrol_plots.impulse_response_numerical_data(prec=8, lower_limit=0, upper_limit=10, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import impulse_response_numerical_data\n>>> tf1 = TransferFunction(s, s**2 + 5*s + 8, s)\n>>> impulse_response_numerical_data(tf1)   \n([0.0, 0.06616480200395854,... , 9.854500743565858, 10.0],\n[0.9999999799999999, 0.7042848373025861,...,7.170748906965121e-13, -5.1901263495547205e-12]) \n```", "```py\ncontrol_plots.step_response_plot(color='b', prec=8, lower_limit=0, upper_limit=10, show_axes=False, grid=True, show=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import step_response_plot\n>>> tf1 = TransferFunction(8*s**2 + 18*s + 32, s**3 + 6*s**2 + 14*s + 24, s)\n>>> step_response_plot(tf1) \n```", "```py\ncontrol_plots.step_response_numerical_data(prec=8, lower_limit=0, upper_limit=10, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import step_response_numerical_data\n>>> tf1 = TransferFunction(s, s**2 + 5*s + 8, s)\n>>> step_response_numerical_data(tf1)   \n([0.0, 0.025413462339411542, 0.0484508722725343, ... , 9.670250533855183, 9.844291913708725, 10.0],\n[0.0, 0.023844582399907256, 0.042894276802320226, ..., 6.828770759094287e-12, 6.456457160755703e-12]) \n```", "```py\ncontrol_plots.ramp_response_plot(slope=1, color='b', prec=8, lower_limit=0, upper_limit=10, show_axes=False, grid=True, show=True, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import ramp_response_plot\n>>> tf1 = TransferFunction(s, (s+4)*(s+8), s)\n>>> ramp_response_plot(tf1, upper_limit=2) \n```", "```py\ncontrol_plots.ramp_response_numerical_data(slope=1, prec=8, lower_limit=0, upper_limit=10, **kwargs)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy.physics.control.control_plots import ramp_response_numerical_data\n>>> tf1 = TransferFunction(s, s**2 + 5*s + 8, s)\n>>> ramp_response_numerical_data(tf1)   \n(([0.0, 0.12166980856813935,..., 9.861246379582118, 10.0],\n[1.4504508011325967e-09, 0.006046440489058766,..., 0.12499999999568202, 0.12499999999661349])) \n```"]