- en: Data type objects (dtype)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型对象（dtype）
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.dtypes.html](https://numpy.org/doc/1.26/reference/arrays.dtypes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/arrays.dtypes.html](https://numpy.org/doc/1.26/reference/arrays.dtypes.html)
- en: 'A data type object (an instance of [`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class) describes how the bytes in the fixed-size block of memory
    corresponding to an array item should be interpreted. It describes the following
    aspects of the data:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型对象（[`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")类的一个实例）描述了与数组项对应的固定大小内存块中的字节应如何解释。它描述了数据的以下方面：
- en: Type of the data (integer, float, Python object, etc.)
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的类型（整数、浮点数、Python对象等）
- en: Size of the data (how many bytes is in *e.g.* the integer)
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的大小（*例如* 整数占据多少字节）
- en: Byte order of the data ([little-endian](../glossary.html#term-little-endian)
    or [big-endian](../glossary.html#term-big-endian))
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的字节顺序（[小端](../glossary.html#term-little-endian)或[大端](../glossary.html#term-big-endian)）
- en: If the data type is [structured data type](../glossary.html#term-structured-data-type),
    an aggregate of other data types, (*e.g.*, describing an array item consisting
    of an integer and a float),
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数据类型是[结构化数据类型](../glossary.html#term-structured-data-type)，即其他数据类型的聚合，（*例如*，描述由整数和浮点数组成的数组项），
- en: what are the names of the “[fields](../glossary.html#term-field)” of the structure,
    by which they can be [accessed](../user/basics.indexing.html#arrays-indexing-fields),
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构的“[字段](../glossary.html#term-field)”的名称是什么，通过这些名称可以进行[访问](../user/basics.indexing.html#arrays-indexing-fields)，
- en: what is the data-type of each [field](../glossary.html#term-field), and
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个[字段](../glossary.html#term-field)的数据类型是什么，以及
- en: which part of the memory block each field takes.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个字段占据内存块的哪个部分。
- en: If the data type is a sub-array, what is its shape and data type.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数据类型是子数组，则其形状和数据类型是什么。
- en: To describe the type of scalar data, there are several [built-in scalar types](arrays.scalars.html#arrays-scalars-built-in)
    in NumPy for various precision of integers, floating-point numbers, *etc*. An
    item extracted from an array, *e.g.*, by indexing, will be a Python object whose
    type is the scalar type associated with the data type of the array.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为描述标量数据类型，NumPy中有几种[内置标量类型](arrays.scalars.html#arrays-scalars-built-in)，用于不同精度的整数、浮点数等。从数组中提取的项，*例如*
    通过索引，将是一个Python对象，其类型是与数组的数据类型相关联的标量类型。
- en: Note that the scalar types are not [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") objects, even though they can be used in place of one whenever
    a data type specification is needed in NumPy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，标量类型不是[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")对象，尽管它们可以在NumPy中需要数据类型规范的任何地方替代一个。
- en: Structured data types are formed by creating a data type whose [field](../glossary.html#term-field)
    contain other data types. Each field has a name by which it can be [accessed](../user/basics.indexing.html#arrays-indexing-fields).
    The parent data type should be of sufficient size to contain all its fields; the
    parent is nearly always based on the [`void`](arrays.scalars.html#numpy.void "numpy.void")
    type which allows an arbitrary item size. Structured data types may also contain
    nested structured sub-array data types in their fields.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数据类型是通过创建一个其字段包含其他数据类型的数据类型来形成的。每个字段都有一个名称，可以通过该名称进行[访问](../user/basics.indexing.html#arrays-indexing-fields)。父数据类型应具有足够的大小以包含其所有字段；父类型几乎总是基于允许任意项大小的[`void`](arrays.scalars.html#numpy.void
    "numpy.void")类型。结构化数据类型还可以在其字段中包含嵌套的结构化子数组数据类型。
- en: Finally, a data type can describe items that are themselves arrays of items
    of another data type. These sub-arrays must, however, be of a fixed size.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，数据类型可以描述其本身是另一种数据类型的项数组。但是，这些子数组必须是固定大小的。
- en: If an array is created using a data-type describing a sub-array, the dimensions
    of the sub-array are appended to the shape of the array when the array is created.
    Sub-arrays in a field of a structured type behave differently, see [Field access](../user/basics.indexing.html#arrays-indexing-fields).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用描述子数组的数据类型创建数组，则在创建数组时，子数组的维度将附加到数组的形状上。结构化类型字段中的子数组行为不同，请参阅[字段访问](../user/basics.indexing.html#arrays-indexing-fields)。
- en: Sub-arrays always have a C-contiguous memory layout.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 子数组始终具有C连续的内存布局。
- en: Example
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'A simple data type containing a 32-bit big-endian integer: (see [Specifying
    and constructing data types](#arrays-dtypes-constructing) for details on construction)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 包含32位大端整数的简单数据类型：（有关构造详细信息，请参见[指定和构造数据类型](#arrays-dtypes-constructing)）
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The corresponding array scalar type is [`int32`](arrays.scalars.html#numpy.int32
    "numpy.int32").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的数组标量类型是[`int32`](arrays.scalars.html#numpy.int32 "numpy.int32")。
- en: Example
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'A structured data type containing a 16-character string (in field ‘name’) and
    a sub-array of two 64-bit floating-point number (in field ‘grades’):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一个16字符字符串（在字段‘name’中）和两个64位浮点数子数组（在字段‘grades’中）的结构化数据类型：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Items of an array of this data type are wrapped in an [array scalar](arrays.scalars.html#arrays-scalars)
    type that also has two fields:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据类型数组的项被包装在一个具有两个字段的[array scalar](arrays.scalars.html#arrays-scalars)类型中：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '## Specifying and constructing data types'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '## 指定和构造数据类型'
- en: 'Whenever a data-type is required in a NumPy function or method, either a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") object or something that can be converted to one can be supplied.
    Such conversions are done by the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在 NumPy 函数或方法中需要数据类型时，可以提供一个[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")对象或可以转换为其的内容。这些转换是由[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")构造函数完成的：
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | 创建一个数据类型对象。 |'
- en: 'What can be converted to a data-type object is described below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面描述了可以转换为数据类型对象的内容：
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") object'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") 对象'
- en: Used as-is.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 原样使用。
- en: None
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无
- en: 'The default data type: [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_").'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认数据类型：[`float_`](arrays.scalars.html#numpy.float_ "numpy.float_")。
- en: Array-scalar types
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量类型
- en: The 24 built-in [array scalar type objects](arrays.scalars.html#arrays-scalars-built-in)
    all convert to an associated data-type object. This is true for their sub-classes
    as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内置的[数组标量类型对象](arrays.scalars.html#arrays-scalars-built-in)都转换为相关联的数据类型对象。对于它们的子类也是如此。
- en: 'Note that not all data-type information can be supplied with a type-object:
    for example, [`flexible`](arrays.scalars.html#numpy.flexible "numpy.flexible")
    data-types have a default *itemsize* of 0, and require an explicitly given size
    to be useful.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据类型信息都可以通过类型对象提供：例如，[`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") 数据类型的默认*itemsize*为0，需要明确给定大小才能使用。
- en: Example
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Generic types
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型
- en: 'The generic hierarchical type objects convert to corresponding type objects
    according to the associations:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通用层次类型对象根据关联转换为相应类型对象：
- en: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(在 Python
    v3.11 中)") |'
- en: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
- en: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
- en: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
- en: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
- en: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
- en: 'Deprecated since version 1.19: This conversion of generic scalar types is deprecated.
    This is because it can be unexpected in a context such as `arr.astype(dtype=np.floating)`,
    which casts an array of `float32` to an array of `float64`, even though `float32`
    is a subdtype of `np.floating`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起已弃用：通用标量类型的此转换已弃用。这是因为在`arr.astype(dtype=np.floating)`这样的上下文中可能会出现意外情况，它将`float32`数组转换为`float64`数组，即使`float32`是`np.floating`的子类型也是如此。
- en: Built-in Python types
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的Python类型
- en: 'Several python types are equivalent to a corresponding array scalar when used
    to generate a [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")
    object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于生成[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")对象时，几种Python类型等效于相应的数组标量：
- en: '| [`int`](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`int`](https://docs.python.org/3/library/functions.html#int "(在 Python v3.11
    中)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
- en: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python
    v3.11)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(在 Python
    v3.11 中)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
- en: '| [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`float`](https://docs.python.org/3/library/functions.html#float "(在 Python
    v3.11 中)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
- en: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(in
    Python v3.11)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(在
    Python v3.11 中)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
- en: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python
    v3.11)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(在 Python
    v3.11 中)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
- en: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(在 Python v3.11
    中)") | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
- en: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
- en: '| (all others) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_")
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| (其他所有) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_") |'
- en: Note that `str` corresponds to UCS4 encoded unicode strings, while `string`
    is an alias to `bytes_`. The name `np.unicode_` is also available as an alias
    to `np.str_`, see [Note on string types](#string-dtype-note).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`str`对应于UCS4编码的Unicode字符串，而`string`是`bytes_`的别名。名称`np.unicode_`也可用作`np.str_`的别名，请参阅[字符串类型说明](#string-dtype-note)。
- en: Example
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All other types map to `object_` for convenience. Code should expect that such
    types may map to a specific (new) dtype in the future.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他类型为方便起见映射到`object_`。代码应该预期这些类型将来可能映射到特定（新的）dtype。
- en: Types with `.dtype`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`.dtype`的类型
- en: 'Any type object with a `dtype` attribute: The attribute will be accessed and
    used directly. The attribute must return something that is convertible into a
    dtype object.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`dtype`属性的任何类型对象：将直接访问和使用该属性。该属性必须返回可转换为dtype对象的内容。
- en: Several kinds of strings can be converted. Recognized strings can be prepended
    with `'>'` ([big-endian](../glossary.html#term-big-endian)), `'<'` ([little-endian](../glossary.html#term-little-endian)),
    or `'='` (hardware-native, the default), to specify the byte order.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以转换多种类型的字符串。识别的字符串可以用`'>'`（[大端](../glossary.html#term-big-endian)）、`'<'`（[小端](../glossary.html#term-little-endian)）或`'='`（硬件本机，默认）作为前缀，以指定字节顺序。
- en: One-character strings
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 单字符字符串
- en: Each built-in data-type has a character code (the updated Numeric typecodes),
    that uniquely identifies it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每种内置数据类型都有一个字符代码（更新后的 Numeric 类型代码），用于唯一标识它。
- en: Example
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Array-protocol type strings (see [The array interface protocol](arrays.interface.html#arrays-interface))
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数组协议类型字符串（参见[数组接口协议](arrays.interface.html#arrays-interface)）
- en: The first character specifies the kind of data and the remaining characters
    specify the number of bytes per item, except for Unicode, where it is interpreted
    as the number of characters. The item size must correspond to an existing type,
    or an error will be raised. The supported kinds are
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符指定数据类型，剩余字符指定每个项的字节数，除了Unicode，其中它被解释为字符数。项大小必须对应于现有类型，否则将引发错误。支持的类型有
- en: '| `''?''` | boolean |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `''?''` | 布尔值 |'
- en: '| `''b''` | (signed) byte |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `''b''` | (有符号) 字节 |'
- en: '| `''B''` | unsigned byte |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `''B''` | 无符号字节 |'
- en: '| `''i''` | (signed) integer |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `''i''` | (有符号) 整数 |'
- en: '| `''u''` | unsigned integer |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `''u''` | 无符号整数 |'
- en: '| `''f''` | floating-point |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `''f''` | 浮点数 |'
- en: '| `''c''` | complex-floating point |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `''c''` | 复数浮点数 |'
- en: '| `''m''` | timedelta |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `''m''` | 时间差 |'
- en: '| `''M''` | datetime |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `''M''` | 日期时间 |'
- en: '| `''O''` | (Python) objects |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `''O''` | (Python) 对象 |'
- en: '| `''S''`, `''a''` | zero-terminated bytes (not recommended) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `''S''`, `''a''` | 以零结尾的字节（不建议使用） |'
- en: '| `''U''` | Unicode string |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `''U''` | Unicode 字符串 |'
- en: '| `''V''` | raw data ([`void`](arrays.scalars.html#numpy.void "numpy.void"))
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `''V''` | 原始数据（[`void`](arrays.scalars.html#numpy.void "numpy.void")） |'
- en: Example
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note on string types
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串类型说明
- en: For backward compatibility with existing code originally written to support
    Python 2, `S` and `a` typestrings are zero-terminated bytes and [`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_") continues to alias [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_
    "numpy.bytes_"). For unicode strings, use `U`, [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_"), or [`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_").
    For signed bytes that do not need zero-termination `b` or `i1` can be used.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容原始编写支持Python 2的现有代码，`S`和`a`类型字符串是以零结尾的字节，[`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_")继续别名为[`numpy.bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_")。对于Unicode字符串，请使用`U`，[`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_")或[`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_")。对于不需要零终止的有符号字节，可以使用`b`或`i1`。
- en: String with comma-separated fields
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号分隔字段的字符串
- en: A short-hand notation for specifying the format of a structured data type is
    a comma-separated string of basic formats.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定结构化数据类型格式的简写符号是基本格式的逗号分隔字符串。
- en: A basic format in this context is an optional shape specifier followed by an
    array-protocol type string. Parenthesis are required on the shape if it has more
    than one dimension. NumPy allows a modification on the format in that any string
    that can uniquely identify the type can be used to specify the data-type in a
    field. The generated data-type fields are named `'f0'`, `'f1'`, …, `'f<N-1>'`
    where N (>1) is the number of comma-separated basic formats in the string. If
    the optional shape specifier is provided, then the data-type for the corresponding
    field describes a sub-array.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此上下文中，基本格式是一个可选的形状说明符，后跟一个数组协议类型字符串。如果形状具有多个维度，则需要括号。NumPy允许在格式上进行修改，任何可以唯一标识类型的字符串都可以用于指定字段的数据类型。生成的数据类型字段命名为`'f0'`，`'f1'`，…，`'f<N-1>'`，其中N（>1）是字符串中逗号分隔的基本格式的数量。如果提供了可选的形状说明符，则相应字段的数据类型描述一个子数组。
- en: Example
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: field named `f0` containing a 32-bit integer
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f0`的字段包含一个32位整数
- en: field named `f1` containing a 2 x 3 sub-array of 64-bit floating-point numbers
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f1`的字段包含一个2 x 3的64位浮点数子数组
- en: field named `f2` containing a 32-bit floating-point number
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f2`的字段包含一个32位浮点数
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: field named `f0` containing a 3-character string
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f0`的字段包含一个3字符字符串
- en: field named `f1` containing a sub-array of shape (3,) containing 64-bit unsigned
    integers
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f1`的字段包含一个形状为(3,)的子数组，其中包含64位无符号整数
- en: field named `f2` containing a 3 x 4 sub-array containing 10-character strings
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`f2`的字段包含一个3 x 4的子数组，其中包含10个字符的字符串
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Type strings
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 类型字符串
- en: 'Any string in `numpy.sctypeDict`.keys():'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '任何字符串在`numpy.sctypeDict`.keys():'
- en: Example
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`(flexible_dtype, itemsize)`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: （灵活的数据类型，项大小）
- en: The first argument must be an object that is converted to a zero-sized flexible
    data-type object, the second argument is an integer providing the desired itemsize.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数必须是一个转换为零大小灵活数据类型对象的对象，第二个参数是提供所需项大小的整数。
- en: Example
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`(fixed_dtype, shape)`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: （固定数据类型，形状）
- en: The first argument is any object that can be converted into a fixed-size data-type
    object. The second argument is the desired shape of this type. If the shape parameter
    is 1, then the data-type object used to be equivalent to fixed dtype. This behaviour
    is deprecated since NumPy 1.17 and will raise an error in the future. If *shape*
    is a tuple, then the new dtype defines a sub-array of the given shape.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是任何可以转换为固定大小数据类型对象的对象。第二个参数是此类型的所需形状。如果形状参数为1，则数据类型对象用于等效于固定数据类型。自NumPy
    1.17以来，此行为已弃用，并将在将来引发错误。如果*形状*是一个元组，则新数据类型定义给定形状的子数组。
- en: Example
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`[(field_name, field_dtype, field_shape), ...]`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`[(field_name, field_dtype, field_shape), ...]`'
- en: '*obj* should be a list of fields where each field is described by a tuple of
    length 2 or 3\. (Equivalent to the `descr` item in the [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") attribute.)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*obj* 应该是一个字段列表，其中每个字段由长度为 2 或 3 的元组描述。（等同于 [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") 属性中的 `descr` 项。）'
- en: The first element, *field_name*, is the field name (if this is `''` then a standard
    field name, `'f#'`, is assigned). The field name may also be a 2-tuple of strings
    where the first string is either a “title” (which may be any string or unicode
    string) or meta-data for the field which can be any object, and the second string
    is the “name” which must be a valid Python identifier.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个元素 *field_name* 是字段名称（如果为 `''`，则分配标准字段名称 `'f#'`）。字段名称也可以是两个字符串的 2 元组，其中第一个字符串是“标题”（可以是任何字符串或
    Unicode 字符串）或字段的元数据，可以是任何对象，第二个字符串是“名称”，必须是有效的 Python 标识符。
- en: The second element, *field_dtype*, can be anything that can be interpreted as
    a data-type.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个元素 *field_dtype* 可以是任何可解释为数据类型的内容。
- en: The optional third element *field_shape* contains the shape if this field represents
    an array of the data-type in the second element. Note that a 3-tuple with a third
    argument equal to 1 is equivalent to a 2-tuple.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的第三个元素 *field_shape* 包含形状，如果此字段表示第二个元素中数据类型的数组。请注意，具有第三个参数等于 1 的 3 元组等效于 2
    元组。
- en: This style does not accept *align* in the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor as it is assumed that all of the memory is accounted
    for by the array interface description.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此样式在 [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") 构造函数中不接受
    *align*，因为假定所有内存都由数组接口描述占用。
- en: Example
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data-type with fields `big` (big-endian 32-bit integer) and `little` (little-endian
    32-bit integer):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`big`（大端 32 位整数）和`little`（小端 32 位整数）字段的数据类型：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Data-type with fields `R`, `G`, `B`, `A`, each being an unsigned 8-bit integer:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`R`、`G`、`B`、`A`字段的数据类型，每个字段都是无符号 8 位整数：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
- en: This style has two required and three optional keys. The *names* and *formats*
    keys are required. Their respective values are equal-length lists with the field
    names and the field formats. The field names must be strings and the field formats
    can be any object accepted by [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此样式有两个必需键和三个可选键。*names* 和 *formats* 键是必需的。它们的值分别是等长的字段名称列表和字段格式列表。字段名称必须是字符串，字段格式可以是
    [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") 构造函数接受的任何对象。
- en: When the optional keys *offsets* and *titles* are provided, their values must
    each be lists of the same length as the *names* and *formats* lists. The *offsets*
    value is a list of byte offsets (limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)")) for each field, while the *titles* value is a list of titles
    for each field (`None` can be used if no title is desired for that field). The
    *titles* can be any object, but when a [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") object will add another entry to the fields dictionary keyed
    by the title and referencing the same field tuple which will contain the title
    as an additional tuple member.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供可选键 *offsets* 和 *titles* 时，它们的值必须分别是与 *names* 和 *formats* 列表长度相同的列表。*offsets*
    值是每个字段的字节偏移量列表（限制为 [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(在 Python v3.11 中)")），而 *titles* 值是每个字段的标题列表（如果不需要该字段的标题，则可以使用 `None`）。*titles*
    可以是任何对象，但当一个 [`str`](https://docs.python.org/3/library/stdtypes.html#str "(在 Python
    v3.11 中)") 对象时，将为字段字典添加另一个由标题为键并引用相同字段元组的条目，该元组将包含标题作为附加元组成员。
- en: The *itemsize* key allows the total size of the dtype to be set, and must be
    an integer large enough so all the fields are within the dtype. If the dtype being
    constructed is aligned, the *itemsize* must also be divisible by the struct alignment.
    Total dtype *itemsize* is limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)").
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*itemsize* 键允许设置 dtype 的总大小，并且必须是足够大的整数，以便所有字段都在 dtype 内。如果正在构造的 dtype 是对齐的，则
    *itemsize* 也必须能够被结构对齐整除。总 dtype *itemsize* 限制为 [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(在 Python v3.11 中)")。'
- en: Example
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data type with fields `r`, `g`, `b`, `a`, each being an 8-bit unsigned integer:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`r`、`g`、`b`、`a`字段的数据类型，每个字段都是 8 位无符号整数：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Data type with fields `r` and `b` (with the given titles), both being 8-bit
    unsigned integers, the first at byte position 0 from the start of the field and
    the second at position 2:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 具有字段`r`和`b`（具有给定标题）的数据类型，都是8位无符号整数，第一个位于字段开始处的字节位置0，第二个位于位置2：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`{''field1'': ..., ''field2'': ..., ...}`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`{''field1'': ..., ''field2'': ..., ...}`'
- en: This usage is discouraged, because it is ambiguous with the other dict-based
    construction method. If you have a field called ‘names’ and a field called ‘formats’
    there will be a conflict.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 不鼓励使用此用法，因为它与其他基于字典的构造方法存在歧义。如果有一个名为‘names’的字段和一个名为‘formats’的字段，将会产生冲突。
- en: This style allows passing in the [`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields") attribute of a data-type object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此样式允许传递��据类型对象的[`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields")属性。
- en: '*obj* should contain string or unicode keys that refer to `(data-type, offset)`
    or `(data-type, offset, title)` tuples.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*obj*应包含引用`(数据类型，偏移量)`或`(数据类型，偏移量，标题)`元组的字符串或unicode键。'
- en: Example
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data type containing field `col1` (10-character string at byte position 0),
    `col2` (32-bit float at byte position 10), and `col3` (integers at byte position
    14):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 包含字段`col1`（位于字节位置0的10字符字符串），`col2`（位于字节位置10的32位浮点数）和`col3`（位于字节位置14的整数）的数据类型：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`(base_dtype, new_dtype)`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`(base_dtype, new_dtype)`'
- en: In NumPy 1.7 and later, this form allows *base_dtype* to be interpreted as a
    structured dtype. Arrays created with this dtype will have underlying dtype *base_dtype*
    but will have fields and flags taken from *new_dtype*. This is useful for creating
    custom structured dtypes, as done in [record arrays](arrays.classes.html#arrays-classes-rec).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.7及更高版本中，此形式允许*base_dtype*被解释为结构化dtype。使用此dtype创建的数组将具有基础dtype*base_dtype*，但将具有从*new_dtype*中获取的字段和标志。这对于创建自定义结构化dtypes很有用，就像在[记录数组](arrays.classes.html#arrays-classes-rec)中所做的那样。
- en: This form also makes it possible to specify struct dtypes with overlapping fields,
    functioning like the ‘union’ type in C. This usage is discouraged, however, and
    the union mechanism is preferred.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式还使得可以指定具有重叠字段的结构化dtypes，类似于C中的‘union’类型。然而，不鼓励使用此用法，更倾向于使用union机制。
- en: Both arguments must be convertible to data-type objects with the same total
    size.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 两个参数必须能够转换为具有相同总大小的数据类型对象。
- en: Example
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 32-bit integer, whose first two bytes are interpreted as an integer via field
    `real`, and the following two bytes via field `imag`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，其前两个字节通过字段`real`解释为整数，接下来两个字节通过字段`imag`解释。
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '32-bit integer, which is interpreted as consisting of a sub-array of shape
    `(4,)` containing 8-bit integers:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，被解释为包含8位整数的形状为`(4,)`的子数组：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '32-bit integer, containing fields `r`, `g`, `b`, `a` that interpret the 4 bytes
    in the integer as four unsigned integers:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，包含字段`r`、`g`、`b`、`a`，将整数中的4个字节解释为四个无符号整数：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
- en: NumPy data type descriptions are instances of the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数据类型描述是[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")类的实例。
- en: Attributes
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的类型由以下[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")属性描述：
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | 用于标识数据的一般类型的字符代码（''biufcmMOSUV''之一）。 |'
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | 每种21种不同内置类型的唯一字符代码。 |'
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | 每种21种不同内置类型的唯一数字。 |'
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | 此数据类型对象的数组协议类型字符串。 |'
- en: 'Size of the data is in turn described by:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的大小依次由以下描述：
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | 此数据类型的位宽名称。 |'
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | 此数据类型对象的元素大小。 |'
- en: 'Endianness of this data:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据的字节顺序：
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | 指示此数据类型对象的字节顺序的字符。 |'
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在[结构化数据类型](../glossary.html#term-structured-data-type)中关于子数据类型的信息：
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | 为此数据类型定义的命名字段的字典，或为`None`。 |'
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | 字段名称的有序列表，如果没有字段则为`None`。 |'
- en: 'For data types that describe sub-arrays:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对描述子数组的数据类型：
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | 如果此[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")描述一个子数组，则为元组`(item_dtype, shape)`，否则为`None`。 |'
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | 如果此数据类型描述一个子数组，则为子数组的形状元组，否则为`()`。 |'
- en: 'Attributes providing additional information:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 提供额外信息的属性：
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | 指示此数据类型是否在任何字段或子数据类型中包含任何引用计数对象的布尔值。 |'
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | 描述如何解释此数据类型的位标志。 |'
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | 指示此数据类型与内置数据类型的关系的整数。 |'
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | 指示此数据类型的字节顺序是否为平台本地的布尔值。 |'
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | 数据类型的*__array_interface__*描述。 |'
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | 根据编译器，此数据类型所需的对齐方式（字节）。 |'
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | 返回子数组的基本元素的数据类型，不考虑其维度或形状。 |'
- en: 'Metadata attached by the user:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 用户附加的元数据：
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | 要么为`None`，要么为只读的元数据字典（mappingproxy）。 |'
- en: Methods
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: 'Data types have the following method for changing the byte order:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型具有以下用于更改字节顺序的方法：
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | 返回一个具有不同字节顺序的新 dtype。 |'
- en: 'The following methods implement the pickle protocol:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法实现了 pickle 协议：
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | pickle 的辅助函数。 |'
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
- en: 'Utility method for typing:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 用于输入的实用方法：
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | 返回一个围绕 [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") 类型的参数化包装器。 |'
- en: 'Comparison operations:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作：
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | 返回 self>=value。 |'
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | 返回 self>value。 |'
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | 返回 self<=value。 |'
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | 返回 self<value。 |'
- en: '## Specifying and constructing data types'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '## 指定和构造数据类型'
- en: 'Whenever a data-type is required in a NumPy function or method, either a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") object or something that can be converted to one can be supplied.
    Such conversions are done by the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在 NumPy 函数或方法中需要数据类型时，可以提供一个 [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") 对象或可以转换为其中一个的内容。这些转换是由 [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") 构造函数完成的：
- en: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | Create a data type object. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")(dtype[, align, copy])
    | 创建一个数据类型对象。 |'
- en: 'What can be converted to a data-type object is described below:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下面描述了可以转换为数据类型对象的内容：
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") object'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") 对象'
- en: Used as-is.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如原样使用。
- en: None
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 无
- en: 'The default data type: [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_").'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认数据类型：[`float_`](arrays.scalars.html#numpy.float_ "numpy.float_")。
- en: Array-scalar types
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量类型
- en: The 24 built-in [array scalar type objects](arrays.scalars.html#arrays-scalars-built-in)
    all convert to an associated data-type object. This is true for their sub-classes
    as well.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 24 个内置的 [数组标量类型对象](arrays.scalars.html#arrays-scalars-built-in) 都转换为一个关联的数据类型对象。对于它们的子类也是如此。
- en: 'Note that not all data-type information can be supplied with a type-object:
    for example, [`flexible`](arrays.scalars.html#numpy.flexible "numpy.flexible")
    data-types have a default *itemsize* of 0, and require an explicitly given size
    to be useful.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据类型信息都可以通过类型对象提供：例如，[`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") 数据类型的默认 *itemsize* 为 0，需要明确给定大小才能使用。
- en: Example
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE20]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Generic types
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型
- en: 'The generic hierarchical type objects convert to corresponding type objects
    according to the associations:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的分层类型对象根据关联转换为相应的类型对象：
- en: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`number`](arrays.scalars.html#numpy.number "numpy.number"), [`inexact`](arrays.scalars.html#numpy.inexact
    "numpy.inexact"), [`floating`](arrays.scalars.html#numpy.floating "numpy.floating")
    | [`float`](https://docs.python.org/3/library/functions.html#float "(�� Python
    v3.11)") |'
- en: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`complexfloating`](arrays.scalars.html#numpy.complexfloating "numpy.complexfloating")
    | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat") |'
- en: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`integer`](arrays.scalars.html#numpy.integer "numpy.integer"), [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_")
    |'
- en: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`unsignedinteger`](arrays.scalars.html#numpy.unsignedinteger "numpy.unsignedinteger")
    | [`uint`](arrays.scalars.html#numpy.uint "numpy.uint") |'
- en: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`character`](arrays.scalars.html#numpy.character "numpy.character") | `string`
    |'
- en: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`generic`](arrays.scalars.html#numpy.generic "numpy.generic"), [`flexible`](arrays.scalars.html#numpy.flexible
    "numpy.flexible") | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
- en: 'Deprecated since version 1.19: This conversion of generic scalar types is deprecated.
    This is because it can be unexpected in a context such as `arr.astype(dtype=np.floating)`,
    which casts an array of `float32` to an array of `float64`, even though `float32`
    is a subdtype of `np.floating`.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：通用标量类型的此转换已弃用。这是因为在诸如`arr.astype(dtype=np.floating)`的上下文中可能会出现意外情况，该操作将`float32`数组转换为`float64`数组，即使`float32`是`np.floating`的子dtype。
- en: Built-in Python types
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Python内置类型
- en: 'Several python types are equivalent to a corresponding array scalar when used
    to generate a [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")
    object:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于生成[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")对象时，几种Python类型等效于相应的数组标量：
- en: '| [`int`](https://docs.python.org/3/library/functions.html#int "(in Python
    v3.11)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`int`](https://docs.python.org/3/library/functions.html#int "(在 Python v3.11
    中)") | [`int_`](arrays.scalars.html#numpy.int_ "numpy.int_") |'
- en: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python
    v3.11)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`bool`](https://docs.python.org/3/library/functions.html#bool "(在 Python
    v3.11 中)") | [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
- en: '| [`float`](https://docs.python.org/3/library/functions.html#float "(in Python
    v3.11)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`float`](https://docs.python.org/3/library/functions.html#float "(在 Python
    v3.11 中)") | [`float_`](arrays.scalars.html#numpy.float_ "numpy.float_") |'
- en: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(in
    Python v3.11)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`complex`](https://docs.python.org/3/library/functions.html#complex "(在
    Python v3.11 中)") | [`cfloat`](arrays.scalars.html#numpy.cfloat "numpy.cfloat")
    |'
- en: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python
    v3.11)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "(在 Python
    v3.11 中)") | [`bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_") |'
- en: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.11)")
    | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`str`](https://docs.python.org/3/library/stdtypes.html#str "(在 Python v3.11
    中)") | [`str_`](arrays.scalars.html#numpy.str_ "numpy.str_") |'
- en: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `buffer` | [`void`](arrays.scalars.html#numpy.void "numpy.void") |'
- en: '| (all others) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_")
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| (其他所有) | [`object_`](arrays.scalars.html#numpy.object_ "numpy.object_") |'
- en: Note that `str` corresponds to UCS4 encoded unicode strings, while `string`
    is an alias to `bytes_`. The name `np.unicode_` is also available as an alias
    to `np.str_`, see [Note on string types](#string-dtype-note).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`str`对应于UCS4编码的Unicode字符串，而`string`是`bytes_`的别名。名称`np.unicode_`也可作为`np.str_`的别名使用，参见[字符串类型说明](#string-dtype-note)。
- en: Example
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All other types map to `object_` for convenience. Code should expect that such
    types may map to a specific (new) dtype in the future.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他类型都映射到`object_`以方便使用。代码应该预期这些类型将来可能映射到特定的（新的）dtype。
- en: Types with `.dtype`
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`.dtype`的类型
- en: 'Any type object with a `dtype` attribute: The attribute will be accessed and
    used directly. The attribute must return something that is convertible into a
    dtype object.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`dtype`属性的任何类型对象：将直接访问和使用该属性。该属性必须返回可转换为dtype对象的内容。
- en: Several kinds of strings can be converted. Recognized strings can be prepended
    with `'>'` ([big-endian](../glossary.html#term-big-endian)), `'<'` ([little-endian](../glossary.html#term-little-endian)),
    or `'='` (hardware-native, the default), to specify the byte order.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 可以转换多种类型的字符串。识别的字符串可以以`'>'`（[大端](../glossary.html#term-big-endian)��、`'<'`（[小端](../glossary.html#term-little-endian)）或`'='`（硬件本机，默认）开头，以指定字节顺序。
- en: One-character strings
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 单字符字符串
- en: Each built-in data-type has a character code (the updated Numeric typecodes),
    that uniquely identifies it.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 每种内置数据类型都有一个字符代码（更新后的Numeric类型代码），用于唯一标识它。
- en: Example
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE22]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Array-protocol type strings (see [The array interface protocol](arrays.interface.html#arrays-interface))
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 数组协议类型字符串（参见[数组接口协议](arrays.interface.html#arrays-interface)）
- en: The first character specifies the kind of data and the remaining characters
    specify the number of bytes per item, except for Unicode, where it is interpreted
    as the number of characters. The item size must correspond to an existing type,
    or an error will be raised. The supported kinds are
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符指定数据类型，剩余字符指定每个项目的字节数，除了Unicode，它被解释为字符数。项目大小必须对应于现有类型，否则将引发错误。支持的类型有
- en: '| `''?''` | boolean |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `''?''` | 布尔值 |'
- en: '| `''b''` | (signed) byte |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `''b''` | （有符号）字节 |'
- en: '| `''B''` | unsigned byte |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `''B''` | 无符号字节 |'
- en: '| `''i''` | (signed) integer |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `''i''` | （有符号）整数 |'
- en: '| `''u''` | unsigned integer |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `''u''` | 无符号整数 |'
- en: '| `''f''` | floating-point |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `''f''` | 浮点数 |'
- en: '| `''c''` | complex-floating point |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `''c''` | 复数浮点数 |'
- en: '| `''m''` | timedelta |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `''m''` | 时间间隔 |'
- en: '| `''M''` | datetime |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `''M''` | 日期时间 |'
- en: '| `''O''` | (Python) objects |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `''O''` | （Python）对象 |'
- en: '| `''S''`, `''a''` | zero-terminated bytes (not recommended) |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `''S''`, `''a''` | 零结尾字节（不建议使用） |'
- en: '| `''U''` | Unicode string |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `''U''` | Unicode字符串 |'
- en: '| `''V''` | raw data ([`void`](arrays.scalars.html#numpy.void "numpy.void"))
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `''V''` | 原始数据（[`void`](arrays.scalars.html#numpy.void "numpy.void")） |'
- en: Example
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE23]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note on string types
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串类型说明
- en: For backward compatibility with existing code originally written to support
    Python 2, `S` and `a` typestrings are zero-terminated bytes and [`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_") continues to alias [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_
    "numpy.bytes_"). For unicode strings, use `U`, [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_"), or [`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_").
    For signed bytes that do not need zero-termination `b` or `i1` can be used.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容原始编写支持Python 2的现有代码，`S`和`a`类型字符串是零结尾字节，[`numpy.string_`](arrays.scalars.html#numpy.string_
    "numpy.string_")继续别名为[`numpy.bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_")。对于Unicode字符串，请使用`U`，[`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_")或[`numpy.unicode_`](arrays.scalars.html#numpy.unicode_ "numpy.unicode_")。对于不需要零结尾的有符号字节，可以使用`b`或`i1`。
- en: String with comma-separated fields
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 逗号分隔字段的字符串
- en: A short-hand notation for specifying the format of a structured data type is
    a comma-separated string of basic formats.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定结构化数据类型格式的简写符号是基本格式的逗号分隔字符串。
- en: A basic format in this context is an optional shape specifier followed by an
    array-protocol type string. Parenthesis are required on the shape if it has more
    than one dimension. NumPy allows a modification on the format in that any string
    that can uniquely identify the type can be used to specify the data-type in a
    field. The generated data-type fields are named `'f0'`, `'f1'`, …, `'f<N-1>'`
    where N (>1) is the number of comma-separated basic formats in the string. If
    the optional shape specifier is provided, then the data-type for the corresponding
    field describes a sub-array.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，基本格式是可选的形状说明符，后跟一个数组协议类型字符串。如果形状具有多个维度，则需要括号。NumPy允许对格式进行修改，以便使用任何可以唯一标识类型的字符串来指定字段的数据类型。生成的数据类型字段命名为`'f0'`，`'f1'`，…，`'f<N-1>'`，其中N（>1）是字符串中逗号分隔的基本格式的数量。如果提供了可选的形状说明符，则相应字段的数据类型描述一个子数组。
- en: Example
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: field named `f0` containing a 32-bit integer
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f0`，包含一个32位整数
- en: field named `f1` containing a 2 x 3 sub-array of 64-bit floating-point numbers
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f1`，包含一个2 x 3的64位浮点数子数组
- en: field named `f2` containing a 32-bit floating-point number
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f2`，包含一个32位浮点数
- en: '[PRE24]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: field named `f0` containing a 3-character string
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f0`，包含一个3字符字符串
- en: field named `f1` containing a sub-array of shape (3,) containing 64-bit unsigned
    integers
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f1`，包含一个形状为(3,)的64位无符号整数子数组
- en: field named `f2` containing a 3 x 4 sub-array containing 10-character strings
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段名为`f2`，包含一个3 x 4的子数组，其中包含10字符字符串
- en: '[PRE25]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Type strings
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 类型字符串
- en: 'Any string in `numpy.sctypeDict`.keys():'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.sctypeDict`中的任何字符串.keys():'
- en: Example
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE26]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`(flexible_dtype, itemsize)`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`(flexible_dtype, itemsize)`'
- en: The first argument must be an object that is converted to a zero-sized flexible
    data-type object, the second argument is an integer providing the desired itemsize.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数必须是转换为零大小灵活数据类型对象的对象，第二个参数是提供所需itemsize的整数。
- en: Example
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE27]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`(fixed_dtype, shape)`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`(fixed_dtype, shape)`'
- en: The first argument is any object that can be converted into a fixed-size data-type
    object. The second argument is the desired shape of this type. If the shape parameter
    is 1, then the data-type object used to be equivalent to fixed dtype. This behaviour
    is deprecated since NumPy 1.17 and will raise an error in the future. If *shape*
    is a tuple, then the new dtype defines a sub-array of the given shape.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是可以转换为固定大小数据类型对象的任何对象。第二个参数是此类型的期望形状。如果形状参数为1，则数据类型对象用于等效于固定数据类型。自NumPy
    1.17起，此行为已弃用，并将在将来引发错误。如果*shape*是一个元组，则新数据类型定义给定形状的子数组。
- en: Example
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE28]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`[(field_name, field_dtype, field_shape), ...]`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`[(field_name, field_dtype, field_shape), ...]`'
- en: '*obj* should be a list of fields where each field is described by a tuple of
    length 2 or 3\. (Equivalent to the `descr` item in the [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") attribute.)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*obj*应该是一个字段列表，其中每个字段由长度为2或3的元组描述。（等同于[`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__")属性中的`descr`项。）'
- en: The first element, *field_name*, is the field name (if this is `''` then a standard
    field name, `'f#'`, is assigned). The field name may also be a 2-tuple of strings
    where the first string is either a “title” (which may be any string or unicode
    string) or meta-data for the field which can be any object, and the second string
    is the “name” which must be a valid Python identifier.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个元素，*field_name*，是字段名称（如果为`''`，则分配一个标准字段名称，`'f#'`）。字段名称也可以是一个包含两个字符串的元组，其中第一个字符串是“标题”（可以是任何字符串或Unicode字符串）或字段的元数据，可以是任何对象，第二个字符串是“名称”，必须是有效的Python标识符。
- en: The second element, *field_dtype*, can be anything that can be interpreted as
    a data-type.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个元素，*field_dtype*，可以是任何可解释为数据类型的内容。
- en: The optional third element *field_shape* contains the shape if this field represents
    an array of the data-type in the second element. Note that a 3-tuple with a third
    argument equal to 1 is equivalent to a 2-tuple.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的第三个元素*field_shape*包含形状，如果此字段表示第二个元素中数据类型的数组。请注意，具有第三个参数等于1的3元组等同于2元组。
- en: This style does not accept *align* in the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor as it is assumed that all of the memory is accounted
    for by the array interface description.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这种风格在[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")构造函数中不接受*align*，因为假定所有内存都由数组接口描述占用。
- en: Example
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data-type with fields `big` (big-endian 32-bit integer) and `little` (little-endian
    32-bit integer):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 具有字段`big`（大端32位整数）和`little`（小端32位整数）的数据类型：
- en: '[PRE29]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Data-type with fields `R`, `G`, `B`, `A`, each being an unsigned 8-bit integer:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 具有字段`R`、`G`、`B`、`A`的数据类型，每个字段都是无符号8位整数：
- en: '[PRE30]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`{''names'': ..., ''formats'': ..., ''offsets'': ..., ''titles'': ..., ''itemsize'':
    ...}`'
- en: This style has two required and three optional keys. The *names* and *formats*
    keys are required. Their respective values are equal-length lists with the field
    names and the field formats. The field names must be strings and the field formats
    can be any object accepted by [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这种风格有两个必需的和三个可选的键。*names*和*formats*键是必需的。它们各自的值是长度相等的列表，其中包含字段名称和字段格式。字段名称必须是字符串，字段格式可以是[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")构造函数接受的任何对象。
- en: When the optional keys *offsets* and *titles* are provided, their values must
    each be lists of the same length as the *names* and *formats* lists. The *offsets*
    value is a list of byte offsets (limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)")) for each field, while the *titles* value is a list of titles
    for each field (`None` can be used if no title is desired for that field). The
    *titles* can be any object, but when a [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") object will add another entry to the fields dictionary keyed
    by the title and referencing the same field tuple which will contain the title
    as an additional tuple member.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供可选键*offsets*和*titles*时，它们的值必须与*names*和*formats*列表的长度相同。*offsets*值是每个字段的字节偏移量的列表（限制为[`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(在 Python v3.11 中)")），而*titles*值是每个字段的标题的列表（如果不需要标题，则可以使用`None`）。*titles*可以是任何对象，但当一个[`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.11 中)")对象将为字段字典添加另一个条目，以标题为键，并引用相同的字段元组，该元组将包含标题作为附加元组成员。
- en: The *itemsize* key allows the total size of the dtype to be set, and must be
    an integer large enough so all the fields are within the dtype. If the dtype being
    constructed is aligned, the *itemsize* must also be divisible by the struct alignment.
    Total dtype *itemsize* is limited to [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)").
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '*itemsize*键允许设置dtype的总大小，并且必须是一个足够大的整数，以便所有字段都在dtype内。如果正在构建的dtype是对齐的，则*itemsize*也必须能够被结构对齐整除。总dtype
    *itemsize* 限制为[`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(在 Python v3.11 中)")。'
- en: Example
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data type with fields `r`, `g`, `b`, `a`, each being an 8-bit unsigned integer:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 具有字段`r`、`g`、`b`、`a`，每个字段都是8位无符号整数的数据类型：
- en: '[PRE31]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Data type with fields `r` and `b` (with the given titles), both being 8-bit
    unsigned integers, the first at byte position 0 from the start of the field and
    the second at position 2:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 具有字段`r`和`b`（具有给定标题），都是8位无符号整数的数据类型，第一个位于字段开始处的字节位置0，第二个位于位置2：
- en: '[PRE32]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`{''field1'': ..., ''field2'': ..., ...}`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`{''field1'': ..., ''field2'': ..., ...}`'
- en: This usage is discouraged, because it is ambiguous with the other dict-based
    construction method. If you have a field called ‘names’ and a field called ‘formats’
    there will be a conflict.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 不鼓励使用此用法，因为它与其他基于字典的构造方法存在歧义。如果有一个名为‘names’的字段和一个名为‘formats’的字段，将会产生冲突。
- en: This style allows passing in the [`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields") attribute of a data-type object.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这种样式允许传递数据类型对象的[`fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields
    "numpy.dtype.fields")属性。
- en: '*obj* should contain string or unicode keys that refer to `(data-type, offset)`
    or `(data-type, offset, title)` tuples.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '*obj*应包含引用`(数据类型，偏移量)`或`(数据类型，偏移量，标题)`元组的字符串或unicode键。'
- en: Example
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Data type containing field `col1` (10-character string at byte position 0),
    `col2` (32-bit float at byte position 10), and `col3` (integers at byte position
    14):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 包含字段`col1`（位于字节位置0处的10个字符字符串）、`col2`（位于字节位置10处的32位浮点数）和`col3`（位于字节位置14处的整数）的数据类型：
- en: '[PRE33]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`(base_dtype, new_dtype)`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`(base_dtype, new_dtype)`'
- en: In NumPy 1.7 and later, this form allows *base_dtype* to be interpreted as a
    structured dtype. Arrays created with this dtype will have underlying dtype *base_dtype*
    but will have fields and flags taken from *new_dtype*. This is useful for creating
    custom structured dtypes, as done in [record arrays](arrays.classes.html#arrays-classes-rec).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.7及更高版本中，此形式允许将*base_dtype*解释为结构化dtype。使用此dtype创建的数组将具有基础dtype *base_dtype*，但将从*new_dtype*中获取字段和标志。这对于创建自定义结构化dtypes很有用，就像在[记录数组](arrays.classes.html#arrays-classes-rec)中所做的那样。
- en: This form also makes it possible to specify struct dtypes with overlapping fields,
    functioning like the ‘union’ type in C. This usage is discouraged, however, and
    the union mechanism is preferred.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式还可以指定具有重叠字段的结构dtype，类似于C中的‘union’类型。但是，不鼓励使用此用法，更倾向于使用union机制。
- en: Both arguments must be convertible to data-type objects with the same total
    size.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 两个参数必须能够���换为具有相同总大小的数据类型对象。
- en: Example
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 32-bit integer, whose first two bytes are interpreted as an integer via field
    `real`, and the following two bytes via field `imag`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，其前两个字节通过字段`real`解释为整数，后两个字节通过字段`imag`解释。
- en: '[PRE34]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '32-bit integer, which is interpreted as consisting of a sub-array of shape
    `(4,)` containing 8-bit integers:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，被解释为包含8位整数的形状为`(4,)`的子数组：
- en: '[PRE35]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '32-bit integer, containing fields `r`, `g`, `b`, `a` that interpret the 4 bytes
    in the integer as four unsigned integers:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数，包含字段`r`、`g`、`b`、`a`，将整数中的4个字节解释为四个无符号整数：
- en: '[PRE36]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")'
- en: NumPy data type descriptions are instances of the [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") class.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数据类型描述是[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")类的实例。
- en: Attributes
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型的类型由以��[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")属性描述：
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | 一个字符代码（''biufcmMOSUV''之一），用于标识数据的一般类型。 |'
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | 每种21种不同内置类型的唯一字符代码。 |'
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | 每种21种不同内置类型的唯一编号。 |'
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | 此数据类型对象的数组协议类型字符串。 |'
- en: 'Size of the data is in turn described by:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的大小由以下描述：
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | 此数据类型的位宽名称。 |'
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | 此数据类型对象的元素大小。 |'
- en: 'Endianness of this data:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据的字节顺序：
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | 指示此数据类型对象的字节顺序的字符。 |'
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[结构化数据类型](../glossary.html#term-structured-data-type)中子数据类型的信息：
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | 为此数据类型定义的命名字段的字典，或`None`。 |'
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | 字段名称的有序列表，如果没有字段，则为`None`。 |'
- en: 'For data types that describe sub-arrays:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对于描述子数组的数据类型：
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | 如果此[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")描述一个子数组，则为元组`(item_dtype, shape)`，否则为`None`。 |'
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | 如果此数据类型描述一个子数组，则为子数组的形状元组，否则为`()`。 |'
- en: 'Attributes providing additional information:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 提供额外信息的属性：
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | 布尔值，指示此dtype是否在任何字段或子数据类型中包含任何引用计数对象。 |'
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | 描述如何解释此数据类型的位标志。 |'
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | 指示此数据类型与内置数据类型的关系的整数。'
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | 布尔值，指示此数据类型的字节顺序是否为平台本机的。'
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | 数据类型的*__array_interface__*描述。'
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | 根据编译器，此数据类型所需的对齐方式（字节）。'
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | 返回子数组的基本元素的数据类型，不考虑其维度或形状。'
- en: 'Metadata attached by the user:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 用户附加的元数据：
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | `None`或只读元数据字典（mappingproxy）。'
- en: Methods
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: 'Data types have the following method for changing the byte order:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型具有以下用于更改字节顺序的方法：
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | 返回具有不同字节顺序的新数据类型。'
- en: 'The following methods implement the pickle protocol:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法实现了pickle协议：
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | pickle的辅助函数。'
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
- en: 'Utility method for typing:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 类型的实用方法：
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | 返回围绕[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")类型的参数化包装器。'
- en: 'Comparison operations:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作：
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | 返回self>=value。'
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | 返回self>value。'
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | 返回self<=value。'
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | 返回self<value。'
- en: Attributes
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: 'The type of the data is described by the following [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") attributes:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的类型由以下[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")属性描述：
- en: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.type`](generated/numpy.dtype.type.html#numpy.dtype.type "numpy.dtype.type")
    |  |'
- en: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | A character code (one of ''biufcmMOSUV'') identifying the general kind of data.
    |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.kind`](generated/numpy.dtype.kind.html#numpy.dtype.kind "numpy.dtype.kind")
    | 识别数据的一般类型的字符代码（''biufcmMOSUV''之一）。'
- en: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | A unique character code for each of the 21 different built-in types. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.char`](generated/numpy.dtype.char.html#numpy.dtype.char "numpy.dtype.char")
    | 21种不同内置类型的每种的唯一字符代码。 |'
- en: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | A unique number for each of the 21 different built-in types. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.num`](generated/numpy.dtype.num.html#numpy.dtype.num "numpy.dtype.num")
    | 21种不同内置类型的每种的唯一编号。 |'
- en: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | The array-protocol typestring of this data-type object. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.str`](generated/numpy.dtype.str.html#numpy.dtype.str "numpy.dtype.str")
    | 此数据类型对象的数组协议类型字符串。 |'
- en: 'Size of the data is in turn described by:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的大小由S
- en: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | A bit-width name for this data-type. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.name`](generated/numpy.dtype.name.html#numpy.dtype.name "numpy.dtype.name")
    | 此数据类型的位宽名称。 |'
- en: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | The element size of this data-type object. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.itemsize`](generated/numpy.dtype.itemsize.html#numpy.dtype.itemsize
    "numpy.dtype.itemsize") | 此数据类型对象的元素大小。 |'
- en: 'Endianness of this data:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的字节顺序：
- en: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | A character indicating the byte-order of this data-type
    object. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.byteorder`](generated/numpy.dtype.byteorder.html#numpy.dtype.byteorder
    "numpy.dtype.byteorder") | 指示此数据类型对象的字节顺序的字符。 |'
- en: 'Information about sub-data-types in a [structured data type](../glossary.html#term-structured-data-type):'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[结构化数据类型](../glossary.html#term-structured-data-type)中子数据类型的信息：
- en: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | Dictionary of named fields defined for this data type, or `None`. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.fields`](generated/numpy.dtype.fields.html#numpy.dtype.fields "numpy.dtype.fields")
    | 为此数据类型定义的命名字段的字典，或`None`。 |'
- en: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | Ordered list of field names, or `None` if there are no fields. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.names`](generated/numpy.dtype.names.html#numpy.dtype.names "numpy.dtype.names")
    | 字段名称的有序列表，如果没有字段，则为`None`。 |'
- en: 'For data types that describe sub-arrays:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 对于描述子数组的数据类型：
- en: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | Tuple `(item_dtype, shape)` if this [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") describes a sub-array, and None otherwise. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.subdtype`](generated/numpy.dtype.subdtype.html#numpy.dtype.subdtype
    "numpy.dtype.subdtype") | 如果此[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")描述子数组，则为元组`(item_dtype, shape)`，否则为None。 |'
- en: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | Shape tuple of the sub-array if this data type describes a sub-array, and `()`
    otherwise. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.shape`](generated/numpy.dtype.shape.html#numpy.dtype.shape "numpy.dtype.shape")
    | 如果此数据类型描述子数组，则为子数组的形状元组，否则为`()`。 |'
- en: 'Attributes providing additional information:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 提供额外信息的属性：
- en: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | Boolean indicating whether this dtype contains any
    reference-counted objects in any fields or sub-dtypes. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.hasobject`](generated/numpy.dtype.hasobject.html#numpy.dtype.hasobject
    "numpy.dtype.hasobject") | 布尔值，指示此数据类型是否在任何字段或子数据类型中包含任何引用计数对象。 |'
- en: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | Bit-flags describing how this data type is to be interpreted. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.flags`](generated/numpy.dtype.flags.html#numpy.dtype.flags "numpy.dtype.flags")
    | 描述如何解释此数据类型的位标志。 |'
- en: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin") | Integer indicating how this dtype relates to the built-in
    dtypes. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isbuiltin`](generated/numpy.dtype.isbuiltin.html#numpy.dtype.isbuiltin
    "numpy.dtype.isbuiltin灵") | 指示此数据类型与内置数据类型的关系的整数。 |'
- en: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | Boolean indicating whether the byte order of this dtype
    is native to the platform. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.isnative`](generated/numpy.dtype.isnative.html#numpy.dtype.isnative
    "numpy.dtype.isnative") | 布尔值，指示此数据类型的字节顺序是否与平台本地。 |'
- en: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | *__array_interface__* description of the data-type. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.descr`](generated/numpy.dtype.descr.html#numpy.dtype.descr "numpy.dtype.descr")
    | 数据类型的*__array_interface__*描述。 |'
- en: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | The required alignment (bytes) of this data-type according
    to the compiler. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.alignment`](generated/numpy.dtype.alignment.html#numpy.dtype.alignment
    "numpy.dtype.alignment") | 根据编译器，此数据类型所需的对齐方式（字节）。 |'
- en: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | Returns dtype for the base element of the subarrays, regardless of their dimension
    or shape. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.base`](generated/numpy.dtype.base.html#numpy.dtype.base "numpy.dtype.base")
    | 返回子数组的基本元素的dtype，不考虑其维度或形状。 |'
- en: 'Metadata attached by the user:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 用户附加的元数据：
- en: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | Either `None` or a readonly dictionary of metadata (mappingproxy).
    |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.metadata`](generated/numpy.dtype.metadata.html#numpy.dtype.metadata
    "numpy.dtype.metadata") | 可能是`None`，也可能是一个只读的元数据字典（mappingproxy）。 |'
- en: Methods
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: 'Data types have the following method for changing the byte order:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型具有以下用于更改字节顺序的方法：
- en: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | Return a new dtype with a different
    byte order. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.newbyteorder`](generated/numpy.dtype.newbyteorder.html#numpy.dtype.newbyteorder
    "numpy.dtype.newbyteorder")([new_order]) | 返回具有不同字节顺序的新dtype。 |'
- en: 'The following methods implement the pickle protocol:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法实现了pickle协议：
- en: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | Helper for pickle. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__reduce__`](generated/numpy.dtype.__reduce__.html#numpy.dtype.__reduce__
    "numpy.dtype.__reduce__") | pickle的辅助函数。 |'
- en: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__setstate__`](generated/numpy.dtype.__setstate__.html#numpy.dtype.__setstate__
    "numpy.dtype.__setstate__") |  |'
- en: 'Utility method for typing:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 用于类型的实用方法：
- en: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") type. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__class_getitem__`](generated/numpy.dtype.__class_getitem__.html#numpy.dtype.__class_getitem__
    "numpy.dtype.__class_getitem__")(item, /) | 返回一个围绕[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")类型的参数化包装器。 |'
- en: 'Comparison operations:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作：
- en: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | Return self>=value. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__ge__`](generated/numpy.dtype.__ge__.html#numpy.dtype.__ge__ "numpy.dtype.__ge__")(value, /)
    | 返回self>=value。 |'
- en: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | Return self>value. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__gt__`](generated/numpy.dtype.__gt__.html#numpy.dtype.__gt__ "numpy.dtype.__gt__")(value, /)
    | 返回self>value。 |'
- en: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | Return self<=value. |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__le__`](generated/numpy.dtype.__le__.html#numpy.dtype.__le__ "numpy.dtype.__le__")(value, /)
    | 返回self<=value。 |'
- en: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | Return self<value. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`dtype.__lt__`](generated/numpy.dtype.__lt__.html#numpy.dtype.__lt__ "numpy.dtype.__lt__")(value, /)
    | 返回self<value。 |'
