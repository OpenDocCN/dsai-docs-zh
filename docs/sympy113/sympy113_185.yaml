- en: SymPy Mechanics for Autolev Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适用于Autolev用户的SymPy Mechanics
- en: Original text：[https://docs.sympy.org/latest/modules/physics/mechanics/sympy_mechanics_for_autolev_users.html](https://docs.sympy.org/latest/modules/physics/mechanics/sympy_mechanics_for_autolev_users.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/mechanics/sympy_mechanics_for_autolev_users.html](https://docs.sympy.org/latest/modules/physics/mechanics/sympy_mechanics_for_autolev_users.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 介绍'
- en: Autolev (now superseded by MotionGenesis) is a domain specific programming language
    which is used for symbolic multibody dynamics. The SymPy mechanics module now
    has enough power and functionality to be a fully featured symbolic dynamics module.
    The PyDy package extends the SymPy output to the numerical domain for simulation,
    analyses and visualization. Autolev and SymPy Mechanics have a lot in common but
    there are also many differences between them. This page shall expand upon their
    differences. It is meant to be a go-to reference for Autolev users who want to
    transition to SymPy Mechanics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Autolev（现在被MotionGenesis取代）是一种特定领域的编程语言，用于符号多体动力学。SymPy mechanics模块现在具有足够的功能和功能，可以成为一个完全功能的符号动力学模块。PyDy包将SymPy输出扩展到数值领域，用于仿真、分析和可视化。Autolev和SymPy
    Mechanics有很多共同点，但它们之间也有许多不同之处。本页将扩展这些差异，旨在成为Autolev用户转向SymPy Mechanics的参考。
- en: It would be nice to have a basic understanding of SymPy and SymPy Mechanics
    before going over this page. If you are completely new to Python, you can check
    out the official [Python Tutorial](https://docs.python.org/3/tutorial/). Check
    out the [SymPy Documentation](../../../index.html#documentation), especially the
    tutorial to get a feel for SymPy. For an introduction to Multibody dynamics in
    Python, [this](https://www.youtube.com/watch?v=mdo2NYtA-xY&t=6950s) lecture is
    very helpful.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览本页之前，了解SymPy和SymPy Mechanics的基本理解将非常有帮助。如果您完全是Python的新手，可以查看官方[Python教程](https://docs.python.org/3/tutorial/)。尤其是查看[SymPy文档](../../../index.html#documentation)中的教程，以便对SymPy有所了解。此外，对于想要了解Python中多体动力学的介绍，[这个](https://www.youtube.com/watch?v=mdo2NYtA-xY&t=6950s)讲座非常有帮助。
- en: You might also find the [Autolev Parser](autolev_parser.html#autolev-parser)
    which is a part of SymPy to be helpful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会发现[Autolev解析器](autolev_parser.html#autolev-parser)，它是SymPy的一部分，非常有帮助。
- en: Some Key Differences
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些关键差异
- en: '| **Autolev** | **SymPy Mechanics** |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **Autolev** | **SymPy Mechanics** |'
- en: '| --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Autolev is a domain specific programming language designed to perform multibody
    dynamics. Since it is a language of its own, it has a very rigid language specification.
    It predefines, assumes and computes many things based on the input code. Its code
    is a lot cleaner and concise as a result of this. | SymPy is a library written
    in the general purpose language Python. Although Autolev’s code is more compact,
    SymPy (by virtue of being an add on to Python) is more flexible. The users have
    more control over what they can do. For example, one can create a class in their
    code for let’s say a type of rigibodies with common properties. The wide array
    of scientific Python libraries available is also a big plus. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| Autolev是一种特定领域的编程语言，旨在执行多体动力学。由于它是一种独立的语言，它有非常严格的语言规范。它根据输入代码预定义、假设和计算许多内容。因此，它的代码更加清晰简洁。
    | SymPy是用通用目的语言Python编写的库。虽然Autolev的代码更紧凑，但SymPy（作为Python的补充）更加灵活。用户可以更多地控制他们可以做的事情。例如，可以在他们的代码中创建一个类，用于定义具有共同属性的刚体类型。还有广泛的科学Python库可供使用，这也是一个重要的优势。
    |'
- en: '| Autolev generates Matlab, C, or Fortran code from a small set of symbolic
    mathematics. | SymPy generates numerical Python, C or Octave/Matlab code from
    a large set of symbolic mathematics created with SymPy. It also builds on the
    popular scientific Python stack such as NumPy, SciPy, IPython, matplotlib, Cython
    and Theano. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| Autolev从一小部分符号数学生成Matlab、C或Fortran代码。 | SymPy从使用SymPy创建的大量符号数学生成数值Python、C或Octave/Matlab代码。它还建立在流行的科学Python堆栈上，如NumPy、SciPy、IPython、matplotlib、Cython和Theano。
    |'
- en: '| Autolev uses 1 (one) based indexing. The initial element of a sequence is
    found using a[1]. | Python uses 0 (zero) based indexing. The initial element of
    a sequence is found using a[0]. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Autolev使用基于1的索引。序列的初始元素使用a[1]找到。 | Python使用基于0的索引。序列的初始元素使用a[0]找到。 |'
- en: '| Autolev is case insensitive. | SymPy code being Python code is case sensitive.
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Autolev不区分大小写。 | SymPy代码作为Python代码区分大小写。 |'
- en: '| One can define their own commands in Autolev by making .R and .A files which
    can be used in their programs. | SymPy code is Python code, so one can define
    functions in their code. This is a lot more convenient. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 在 Autolev 中，可以通过创建 .R 和 .A 文件来定义自己的命令，这些文件可以在程序中使用。 | SymPy 代码是 Python 代码，因此可以在代码中定义函数。这要方便得多。
    |'
- en: '| Autolev is proprietary. | SymPy is open source. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| Autolev 是专有的。 | SymPy 是开源的。 |'
- en: Rough Autolev-SymPy Equivalents
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粗略的 Autolev-SymPy 等价物
- en: The tables below give rough equivalents for some common Autolev expressions.
    **These are not exact equivalents**, but rather should be taken as hints to get
    you going in the right direction. For more detail read the built-in documentation
    on [SymPy vectors](../vector/index.html#physics-vector), [SymPy mechanics](index.html#classical-mechanics)
    and [PyDy](https://www.pydy.org/documentation.html) .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了一些常见 Autolev 表达式的粗略等价物。**这些并非完全等价**，而是应视为指导以便朝正确方向前进。更多细节请参阅内置文档 [SymPy
    vectors](../vector/index.html#physics-vector)、[SymPy mechanics](index.html#classical-mechanics)
    和 [PyDy](https://www.pydy.org/documentation.html) 。
- en: 'In the tables below, it is assumed that you have executed the following commands
    in Python:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，假设您已在 Python 中执行了以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mathematical Equivalents
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学等价物
- en: '| **Autolev** | **SymPy** | **Notes** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **Autolev** | **SymPy** | **备注** |'
- en: '| --- | --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Constants A, B` | `a, b = sm.symbols(‘a b’, real=True)` | Note that the
    names of the symbols can be different from the names of the variables they are
    assigned to. We can define `a, b = symbols(‘b a’)` but its good practice to follow
    the convention. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `Constants A, B` | `a, b = sm.symbols(''a b'', real=True)` | 注意，符号的名称可以与其分配的变量的名称不同。我们可以定义
    `a, b = symbols(''b a'')`，但遵循惯例是个好习惯。 |'
- en: '| `Constants C+` | `c = sm.symbols(‘c’, real=True, nonnegative=True)` | Refer
    to SymPy [assumptions](../../assumptions/index.html#assumptions-module) for more
    information. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Constants C+` | `c = sm.symbols(''c'', real=True, nonnegative=True)` | 更多信息请参阅
    SymPy [assumptions](../../assumptions/index.html#assumptions-module)。 |'
- en: '| `Constants D-` | `d = sm.symbols(‘d’, real=True, nonpositive=True)` |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `Constants D-` | `d = sm.symbols(''d'', real=True, nonpositive=True)` |  |'
- en: '| `Constants K{4}` | `k1, k2, k3, k4 = sm.symbols(''k1 k2 k3 k4'', real=True)`
    |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `Constants K{4}` | `k1, k2, k3, k4 = sm.symbols(''k1 k2 k3 k4'', real=True)`
    |  |'
- en: '| `Constants a{2:4}` | `a2, a3, a4 = sm.symbols(''a2 a3 a4'', real=True)` |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `Constants a{2:4}` | `a2, a3, a4 = sm.symbols(''a2 a3 a4'', real=True)` |  |'
- en: '| `Constants b{1:2, 1:2}` | `b11, b12, b21, b22 = sm.symbols(''b11 b12 b21
    b22'', real=True)` |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `Constants b{1:2, 1:2}` | `b11, b12, b21, b22 = sm.symbols(''b11 b12 b21
    b22'', real=True)` |  |'
- en: '| `Specified Phi` | `phi = me.dynamicsymbols(‘phi '')` |  |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `Specified Phi` | `phi = me.dynamicsymbols(''phi'')` |  |'
- en: '| `Variables q, s` | `q, s = me.dynamicsymbols(q, s)` |  |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `Variables q, s` | `q, s = me.dynamicsymbols(''q'', ''s'')` |  |'
- en: '| `Variables x’’` | `x = me.dynamicsymbols(‘x’ )``xd = me.dynamicsymbols(‘x’
    , 1)``xd2 = me.dynamicsymbols(‘x’ , 2)` |  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `Variables x''''` | `x = me.dynamicsymbols(''x'')``xd = me.dynamicsymbols(''x'',
    1)``xd2 = me.dynamicsymbols(''x'', 2)` |  |'
- en: '| `Variables y{2}’` | `y1 = me.dynamicsymbols(‘y1’ )``y2 = me.dynamicsymbols(‘y2’
    )``y1d = me.dynamicsymbols(‘y1’ , 1)``y2d = me.dynamicsymbols(‘y2'' , 1)` |  |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `Variables y{2}''` | `y1 = me.dynamicsymbols(''y1'')``y2 = me.dynamicsymbols(''y2'')``y1d
    = me.dynamicsymbols(''y1'', 1)``y2d = me.dynamicsymbols(''y2'', 1)` |  |'
- en: '| `MotionVariables u{2}` | `u1 = me.dynamicsymbols(‘u1’ )``u2 = me.dynamicsymbols(''u2''
    )` | SymPy doesn’t differentiate between variables, motionvariables and specifieds
    during declaration. Instead, it takes different lists of these as parameters in
    objects like the KanesMethod. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `MotionVariables u{2}` | `u1 = me.dynamicsymbols(''u1'')``u2 = me.dynamicsymbols(''u2'')`
    | SymPy 在声明过程中不区分变量、运动变量和指定项。相反，它将这些不同类型的变量作为参数传递给像 KanesMethod 这样的对象。 |'
- en: '| `Imaginary j` | `j = sm.I` | I is a sympy object which stands for the imaginary
    unit. One can define complex numbers using it.`z = x + I*y`where x, y and z are
    symbols. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `Imaginary j` | `j = sm.I` | I 是一个 sympy 对象，代表虚数单位。可以使用它定义复数，例如 `z = x +
    I*y`，其中 x、y 和 z 是符号。 |'
- en: '| `Tina = 2*pi``s = u*t + a*t^2/2` | `tina = 2*sm.pi``tina = tina.evalf()``t
    = me.dynamicsymbols._t``s = u*t + a*t**2/2` | Using `.evalf()` will result in
    the numeric value. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `Tina = 2*pi``s = u*t + a*t^2/2` | `tina = 2*sm.pi``tina = tina.evalf()``t
    = me.dynamicsymbols._t``s = u*t + a*t**2/2` | 使用 `.evalf()` 将得到数值结果。 |'
- en: '| `abs(x)^3 + sin(x)^2 + acos(x)` | `sm.abs(x)**3 + sm.sin(x)**2 + sm.acos(x)`
    |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `abs(x)^3 + sin(x)^2 + acos(x)` | `sm.abs(x)**3 + sm.sin(x)**2 + sm.acos(x)`
    |  |'
- en: '| `E = (x+2*y)^2 + 3*(7+x)*(x+y)``Expand(E)``Factor(E, x)``Coef(y, x)``Replace(y,
    sin(x)=3)``Exclude(E,x)``Include(E,x)``Arrange(E,2,y)` | `E = (x+2*y)**2 + 3*(7+x)*(x+y)``sm.expand(E)``sm.horner(E,
    wrt=x)``y.coeff(x)``y.subs({sm.sin(x): 3})``e.collect(x).coeff( x, 0)``e.collect(x).coeff(
    x, 1)``e.collect(y)` | For more information refer to [simplification.](../../../tutorials/intro-tutorial/simplification.html#tutorial-simplify)These
    SymPy functions do not work in place. They just return expressions. If you want
    to overwrite the original expression you would have to do something like:`y =
    y.subs({sm.sin(x): 3})` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `E = (x+2*y)^2 + 3*(7+x)*(x+y)` `Expand(E)` `Factor(E, x)` `Coef(y, x)` `Replace(y,
    sin(x)=3)` `Exclude(E,x)` `Include(E,x)` `Arrange(E,2,y)` | `E = (x+2*y)**2 +
    3*(7+x)*(x+y)` `sm.expand(E)` `sm.horner(E, wrt=x)` `y.coeff(x)` `y.subs({sm.sin(x):
    3})` `e.collect(x).coeff(x, 0)` `e.collect(x).coeff(x, 1)` `e.collect(y)`要了解更多信息，请参阅[simplification.](../../../tutorials/intro-tutorial/simplification.html#tutorial-simplify)这些SymPy函数不会原地操作。它们只返回表达式。如果要覆盖原始表达式，可以像这样操作：`y
    = y.subs({sm.sin(x): 3})` |'
- en: '| `Dy = D(E, y)``Dt = Dt(E)``Dt2 = Dt(V, A)` where V is a vector and A is a
    frame`Dy2 = D(V, y, A)` | `E.diff(y)``E.diff( me.dynamicsymbols._t )`Works if
    the expression is made up of dynamicsymbols.`dt2 = v.dt(A)``dy2 = v.diff(y, A)`
    | For more information refer to [calculus.](../../../tutorials/intro-tutorial/calculus.html#calculus)
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `Dy = D(E, y)` `Dt = Dt(E)` `Dt2 = Dt(V, A)`，其中V是向量，A是框架。`Dy2 = D(V, y, A)`
    | `E.diff(y)` `E.diff(me.dynamicsymbols._t)`如果表达式由动力符号组成，则有效。`dt2 = v.dt(A)` `dy2
    = v.diff(y, A)`要了解更多信息，请参阅[calculus.](../../../tutorials/intro-tutorial/calculus.html#calculus)
    |'
- en: '| `E = COS(X*Y)``TY = Taylor(E, 0:2, x=0, y=0)` | `e = sm.cos(x*y)``b = e.series(x,
    0, 2).removeO().series(y, 0, 2).removeO()` | For more information refer to [series.](../../series/series.html#series-expansions)
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `E = COS(X*Y)` `TY = Taylor(E, 0:2, x=0, y=0)` | `e = sm.cos(x*y)` `b = e.series(x,
    0, 2).removeO().series(y, 0, 2).removeO()`要了解更多信息，请参阅[series.](../../series/series.html#series-expansions)
    |'
- en: '| `F = Evaluate(E, x=a, y=2)` | `E.subs([(x, a), (y, 2)])`To get floating point
    numbers from numerical expressions use `.evalf()``E.evalf((a + sm.pi).subs({a:
    3}))` |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `F = Evaluate(E, x=a, y=2)` | `E.subs([(x, a), (y, 2)])`要从数值表达式中获得浮点数，请使用`.evalf()`。`E.evalf((a
    + sm.pi).subs({a: 3}))` |  |'
- en: '| `P = Polynomial([a, b, c], x)` | `p = sm.Poly(sm.Matrix([a, b, c]).reshape(1,
    3), x)` | For more information refer to [polys.](../../polys/reference.html#polys-reference)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `P = Polynomial([a, b, c], x)` | `p = sm.Poly(sm.Matrix([a, b, c]).reshape(1,
    3), x)`要了解更多信息，请参阅[polys.](../../polys/reference.html#polys-reference) |'
- en: '| `Roots(Polynomial( a*x^2 + b*x + c, x, 2)``Roots([1;2;3])` | `sm.solve( sm.Poly(a*x**2
    + b*x + c))``sm.solve(sm.Poly( sm.Matrix([1,2,3]). reshape(3, 1), x), x)` | For
    more information refer to [Solvers](../../solvers/solvers.html#solvers-docs).For
    numerical computation related to polynomials and roots refer to [mpmath/calculus.](https://web.archive.org/web/20180731093609/http://docs.sympy.org/0.7.6/modules/mpmath/calculus/polynomials.html)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `Roots(Polynomial(a*x^2 + b*x + c, x, 2)` `Roots([1;2;3])` | `sm.solve(sm.Poly(a*x**2
    + b*x + c))` `sm.solve(sm.Poly(sm.Matrix([1,2,3]).reshape(3, 1), x), x)`要了解更多信息，请参阅[Solvers](../../solvers/solvers.html#solvers-docs)。有关与多项式和根相关的数值计算，请参阅[mpmath/calculus.](https://web.archive.org/web/20180731093609/http://docs.sympy.org/0.7.6/modules/mpmath/calculus/polynomials.html)
    |'
- en: '| `Solve(A, x1, x2)`where A is an augmented matrix that represents the linear
    equations and x1, x2 are the variables to solve for. | `sm.linsolve(A, (x1, x2))`where
    A is an augmented matrix | For more information refer to :ref:` solvers/solveset.
    <solveset>`For non linear solvers refer to `nonlinsolve` and `nsolve` in [solvers.](../../solvers/solvers.html#solvers-docs)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `解(A, x1, x2)`其中A是表示线性方程的增广矩阵，x1, x2是要解的变量。 | `sm.linsolve(A, (x1, x2))`其中A是增广矩阵。要了解更多信息，请参阅：:ref:`
    solvers/solveset. <solveset>`要查看非线性求解器，请参阅[solvers.](../../solvers/solvers.html#solvers-docs)
    |'
- en: '| `RowMatrix = [1, 2, 3, 4]``ColMatrix = [1; 2; 3; 4]``MO = [a, b; c, 0]``MO[2,
    2] := d``A + B*C``Cols(A)``Cols(A, 1)``Rows(A)``Rows(A, 1)``Det(A)``Element(A,
    2, 3)``Inv(A)``Trace(A)``Transpose(A)``Diagmat(4, 1)``Eig(A)``Eig(A, EigVal, EigVec)`
    | `row_matrix = sm.Matrix([[1],[2], [3],[4]])``col_matrix = sm.Matrix([1, 2, 3,
    4])``MO = sm.Matrix([[a, b], [c, 0]])``MO[1, 1] = d``A + B*C``A.cols``A.col(0)``A.rows``A.row(0)``M.det()``M[2,
    3]``M**-1``sm.trace(A)``A.T``sm.diag(1,1,1,1)``A.eigenvals()``eigval = A.eigenvals()``eigvec
    = A.eigenvects()` | For more information refer to [matrices.](../../../tutorials/intro-tutorial/matrices.html#matrices)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `RowMatrix = [1, 2, 3, 4]` `ColMatrix = [1; 2; 3; 4]` `MO = [a, b; c, 0]`
    `MO[2, 2] := d` `A + B*C` `Cols(A)` `Cols(A, 1)` `Rows(A)` `Rows(A, 1)` `Det(A)`
    `Element(A, 2, 3)` `Inv(A)` `Trace(A)` `Transpose(A)` `Diagmat(4, 1)` `Eig(A)`
    `Eig(A, EigVal, EigVec)` | `row_matrix = sm.Matrix([[1],[2], [3],[4]])` `col_matrix
    = sm.Matrix([1, 2, 3, 4])` `MO = sm.Matrix([[a, b], [c, 0]])` `MO[1, 1] = d` `A
    + B*C` `A.cols` `A.col(0)` `A.rows` `A.row(0)` `M.det()` `M[2, 3]` `M**-1` `sm.trace(A)`
    `A.T` `sm.diag(1,1,1,1)` `A.eigenvals()` `eigval = A.eigenvals()` `eigvec = A.eigenvects()`要了解更多信息，请参阅[matrices.](../../../tutorials/intro-tutorial/matrices.html#matrices)
    |'
- en: Physical Equivalents
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物理等效
- en: '| **Autolev** | **SymPy** | **Notes** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **Autolev** | **SymPy** | **Notes** |'
- en: '| --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Bodies A`Declares A, its masscenter Ao, and orthonormal vectors A1>, A2>
    and A3> fixed in A. | `m =sm.symbols(‘m’)``Ao = sm.symbols(‘Ao’)``Af = me.ReferenceFrame(‘Af’
    )``I = me.outer(Af.x,Af.x)``P = me.Point(‘P’)``A =me.RigidBody(‘A’, Ao, Af, m,
    (I, P))`Af.x, Af.y and Af.z are equivalent to A1>, A2> and A3>. | The 4th and
    5th arguments are for the mass and inertia. These are specified after the declaration
    in Autolev.One can pass a dummy for the parameters and use setters `A.mass = \_`
    and `A.inertia = \_` to set them later.For more information refer to [mechanics/masses
    .](masses.html#masses) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `Bodies A`声明了A、其质心Ao以及在A中固定的正交向量A1>、A2>和A3>。 | `m =sm.symbols(‘m’)``Ao =
    sm.symbols(‘Ao’)``Af = me.ReferenceFrame(‘Af’ )``I = me.outer(Af.x,Af.x)``P =
    me.Point(‘P’)``A =me.RigidBody(‘A’, Ao, Af, m, (I, P))`Af.x、Af.y和Af.z等价于A1>、A2>和A3>。
    | Autolev在声明后指定质量和惯性，第四和第五个参数用于此。可以传递参数占位符，并使用设置器`A.mass = \_`和`A.inertia = \_`来稍后设置它们。更多信息请参考[力学/质量。](masses.html#masses)
    |'
- en: '| `Frames A``V1> = X1*A1> + X2*A2>` | `A = me.ReferenceFrame(‘A’ )``v1 = x1*A.x
    + x2*A.y` | For more information refer to [physics/vectors.](../../../tutorials/intro-tutorial/matrices.html#matrices)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `Frames A``V1> = X1*A1> + X2*A2>` | `A = me.ReferenceFrame(‘A’ )``v1 = x1*A.x
    + x2*A.y` | 更多信息请参考[物理/矢量。](../../../tutorials/intro-tutorial/matrices.html#matrices)
    |'
- en: '| `Newtonian N` | `N = me.ReferenceFrame(‘N’ )` | SymPy doesn’t specify that
    a frame is inertial during declaration. Many functions such as `set_ang_vel()`
    take the inertial reference frame as a parameter. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `Newtonian N` | `N = me.ReferenceFrame(‘N’ )` | SymPy 在声明时没有明确指定参考系为惯性参考系。许多函数如`set_ang_vel()`需要惯性参考系作为参数。
    |'
- en: '| `Particles C` | `m = sm.symbols(‘m’)``Po = me.Point(‘Po’)``C = me.Particle(‘C’,
    Po, m)` | The 2nd and 3rd arguments are for the point and mass. In Autolev, these
    are specified after the declaration.One can pass a dummy and use setters (`A.point
    = \_` and `A.mass = \_`) to set them later. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `Particles C` | `m = sm.symbols(‘m’)``Po = me.Point(‘Po’)``C = me.Particle(‘C’,
    Po, m)` | 第二个和第三个参数是用于点和质量。在Autolev中，这些在声明后指定。可以传递占位符，并使用设置器（`A.point = \_`和`A.mass
    = \_`）稍后设置它们。 |'
- en: '| `Points P, Q` | `P = me.Point(‘P’)``Q = me.Point(‘Q’)` |  |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `Points P, Q` | `P = me.Point(‘P’)``Q = me.Point(‘Q’)` |  |'
- en: '| `Mass B=mB` | `mB = symbols(‘mB’)``B.mass = mB` |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Mass B=mB` | `mB = symbols(‘mB’)``B.mass = mB` |  |'
- en: '| `Inertia B, I1, I2, I3, I12, I23, I31` | `I = me.inertia(Bf, i1, i2, i3,
    i12, i23, i31)``B.inertia = (I, P)` where B is a rigidbody, Bf is the related
    frame and P is the center of mass of B.Inertia dyadics can also be formed using
    vector outer products.`I = me.outer(N.x, N.x)` | For more information refer to
    the [mechanics api.](api/part_bod.html#part-bod) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `Inertia B, I1, I2, I3, I12, I23, I31` | `I = me.inertia(Bf, i1, i2, i3,
    i12, i23, i31)``B.inertia = (I, P)` B是一个刚体，Bf是相关的参考框架，P是B的质心。也可以使用矢量外积形成惯性二元。`I
    = me.outer(N.x, N.x)` | 更多信息请参考[力学 API。](api/part_bod.html#part-bod) |'
- en: '| `vec> = P_O_Q>/L``vec> = u1*N1> + u2*N2>``Cross(a>, b>)``Dot(a>, b>)``Mag(v>)``Unitvec(v>)``DYAD>>
    = 3*A1>*A1> + A2>*A2> + 2*A3>*A3>` | `vec  = (Qo.pos_from(O))/L``vec = u1*N.x
    + u2*N.y``cross(a, b)``dot(a, b)``v.magnitude()``v.normalize()``dyad = 3*me.outer(a.x
    ,a.x) + me.outer(a.y, a.y) + 2*me.outer(a.z ,a.z)` | For more information refer
    to [physics/vectors.](../vector/index.html#physics-vector) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `vec> = P_O_Q>/L``vec> = u1*N1> + u2*N2>``Cross(a>, b>)``Dot(a>, b>)``Mag(v>)``Unitvec(v>)``DYAD>>
    = 3*A1>*A1> + A2>*A2> + 2*A3>*A3>` | `vec  = (Qo.pos_from(O))/L``vec = u1*N.x
    + u2*N.y``cross(a, b)``dot(a, b)``v.magnitude()``v.normalize()``dyad = 3*me.outer(a.x
    ,a.x) + me.outer(a.y, a.y) + 2*me.outer(a.z ,a.z)` | 更多信息请参考[物理/矢量。](../vector/index.html#physics-vector)
    |'
- en: '| `P_O_Q> = LA*A1>``P_P_Q> = LA*A1>` | `Q.point = O.locatenew(‘Qo’, LA*A.x)`where
    A is a reference frame.`Q.point = P.point.locatenew(‘Qo ’, LA*A.x)` | For more
    information refer to the [kinematics api.](../vector/api/kinematics.html#kinematics)All
    these vector and kinematic functions are to be used on `Point` objects and not
    `Particle` objects so `.point` must be used for particles. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `P_O_Q> = LA*A1>``P_P_Q> = LA*A1>` | `Q.point = O.locatenew(‘Qo’, LA*A.x)`where
    A is a reference frame.`Q.point = P.point.locatenew(‘Qo ’, LA*A.x)` | 更多信息请参考[运动学
    API。](../vector/api/kinematics.html#kinematics)`这些矢量和运动学函数都应用在`Point`对象上而不是`Particle`对象上，因此必须使用`.point`来表示粒子。
    |'
- en: '| `V_O_N> = u3*N.1> + u4*N.2>``Partials(V_O_N>, u3)` | `O.set_vel(N, u1*N.x
    + u2*N.y)``O.partial_velocity(N , u3)` | The getter would be `O.vel(N)`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `V_O_N> = u3*N.1> + u4*N.2>``Partials(V_O_N>, u3)` | `O.set_vel(N, u1*N.x
    + u2*N.y)``O.partial_velocity(N , u3)` | 获取器为`O.vel(N)`。 |'
- en: '| `A_O_N> = 0>`Acceleration of point O in reference frame N. | `O.set_acc(N,
    0)` | The getter would be `O.acc(N)`. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `A_O_N> = 0>` 点O在参考框架N中的加速度。 | `O.set_acc(N, 0)` | 获取器为`O.acc(N)`。 |'
- en: '| `W_B_N> = qB’*B3>`Angular velocity of body B in reference frame F. | `B.set_ang_vel(N,
    qBd*Bf.z)`where Bf is the frame associated with the body B. | The getter would
    be `B.ang_vel_in(N)`. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `W_B_N> = qB’*B3>` | `B.set_ang_vel(N, qBd*Bf.z)`，这里 Bf 是与体 B 相关的框架。 | 获取器应为
    `B.ang_vel_in(N)`。 |'
- en: '| `ALF_B_N> =Dt(W_B_N>, N)`Angular acceleration of body B in reference frame
    N. | `B.set_ang_acc(N, diff(B.ang_vel_in(N) )` | The getter would be `B.ang_acc_in(N)`.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `ALF_B_N> =Dt(W_B_N>, N)` | `B.set_ang_acc(N, diff(B.ang_vel_in(N) )` | 获取器应为
    `B.ang_acc_in(N)`。 |'
- en: '| `Force_O> = F1*N1> + F2*N2>``Torque_A> = -c*qA’*A3>` | In SymPy one should
    have a list which contains all the forces and torques.`fL.append((O, f1*N.x +
    f2*N.y))`where fL is the force list.`fl.append((A, -c*qAd*A.z))` |  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `Force_O> = F1*N1> + F2*N2>` | `Torque_A> = -c*qA’*A3>` | 在 SymPy 中，需要使用包含所有力和力矩的列表。`fL.append((O,
    f1*N.x + f2*N.y))`，这里 fL 是力列表。`fl.append((A, -c*qAd*A.z))` |  |'
- en: '| `A_B = M` where M is a matrix and A, B are frames.`D = A_B*2 + 1` | `B.orient(A,
    ''DCM'', M)` where M is a SymPy Matrix.`D = A.dcm(B)*2 + 1` |  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `A_B = M` where M is a matrix and A, B are frames.`D = A_B*2 + 1` | `B.orient(A,
    ''DCM'', M)`，其中 M 是 SymPy 矩阵。`D = A.dcm(B)*2 + 1` |  |'
- en: '| `CM(B)` | `B.masscenter` |  |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `CM(B)` | `B.masscenter` |  |'
- en: '| `Mass(A,B,C)` | `A.mass + B.mass + C.mass` |  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `Mass(A,B,C)` | `A.mass + B.mass + C.mass` |  |'
- en: '| `V1pt(A,B,P,Q)` | `Q.v1pt_theory(P, A, B)` | P and Q are assumed to be `Point`
    objects here. Remember to use `.point` for particles. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `V1pt(A,B,P,Q)` | `Q.v1pt_theory(P, A, B)` | 这里假设 P 和 Q 是 `Point` 对象。记得使用
    `.point` 表示粒子。 |'
- en: '| `V2pts(A,B,P,Q)` | `Q.v2pt_theory(P, A, B)` |  |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `V2pts(A,B,P,Q)` | `Q.v2pt_theory(P, A, B)` |  |'
- en: '| `A1pt(A,B,P,Q)` | `Q.a1pt_theory(P, A, B)` |  |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `A1pt(A,B,P,Q)` | `Q.a1pt_theory(P, A, B)` |  |'
- en: '| `A2pts(A,B,P,Q)` | `Q.a2pt_theory(P, A, B)` |  |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `A2pts(A,B,P,Q)` | `Q.a2pt_theory(P, A, B)` |  |'
- en: '| `Angvel(A,B)` | `B.ang_vel_in(A)` |  |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `Angvel(A,B)` | `B.ang_vel_in(A)` |  |'
- en: '| `Simprot(A, B, 1, qA)` | `B.orient(A, ‘Axis’, qA, A.x)` |  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `Simprot(A, B, 1, qA)` | `B.orient(A, ‘Axis’, qA, A.x)` |  |'
- en: '| `Gravity(G*N1>)` | `fL.extend(gravity( g*N.x, P1, P2, ...))` | In SymPy we
    must use a forceList (here fL) which contains tuples of the form `(point, force_vector)`.
    This is passed to the `kanes_equations()` method of the KanesMethod object. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `Gravity(G*N1>)` | `fL.extend(gravity( g*N.x, P1, P2, ...))` | 在 SymPy 中，我们必须使用包含形式为
    `(point, force_vector)` 的 forceList（这里是 fL）。这将传递给 KanesMethod 对象的 `kanes_equations()`
    方法。 |'
- en: '| `CM(O,P1,R)` | `me.functions. center_of_mass(o, p1, r)` |  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `CM(O,P1,R)` | `me.functions. center_of_mass(o, p1, r)` |  |'
- en: '| `Force(P/Q, v>)` | `fL.append((P, -1*v), (Q, v))` |  |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `Force(P/Q, v>)` | `fL.append((P, -1*v), (Q, v))` |  |'
- en: '| `Torque(A/B, v>)` | `fL.append((A, -1*v), (B, v))` |  |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `Torque(A/B, v>)` | `fL.append((A, -1*v), (B, v))` |  |'
- en: '| `Kindiffs(A, B ...)` | `KM.kindiffdict()` |  |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `Kindiffs(A, B ...)` | `KM.kindiffdict()` |  |'
- en: '| `Momentum(option)` | `linear_momentum(N, B1, B2 ...)`reference frame followed
    by one or more bodies`angular_momentum(O, N, B1, B2 ...)`point, reference frame
    followed by one or more bodies |  |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `Momentum(option)` | `linear_momentum(N, B1, B2 ...)`参考框架后跟一个或多个物体 `angular_momentum(O,
    N, B1, B2 ...)`点、参考框架后跟一个或多个物体 |  |'
- en: '| `KE()` | `kinetic_energy(N, B1, B2 ...)`reference frame followed by one or
    more bodies |  |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `KE()` | `kinetic_energy(N, B1, B2 ...)`参考框架后跟一个或多个物体 |  |'
- en: '| `Constrain(...)` | `velocity_constraints = [...]``u_dependent = [...]``u_auxiliary
    = [...]`These lists are passed to the KanesMethod object. | For more details refer
    to [mechanics/kane](kane.html#kane-method) and the [kane api.](api/kane_lagrange.html#kane-lagrange)
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `Constrain(...)` | `velocity_constraints = [...]``u_dependent = [...]``u_auxiliary
    = [...]`这些列表会传递给 KanesMethod 对象。 | 更多详细信息，请参阅 [mechanics/kane](kane.html#kane-method)
    和 [kane api.](api/kane_lagrange.html#kane-lagrange) |'
- en: '| `Fr()` `FrStar()` | `KM = KanesMethod(f, q_ind, u_ind, kd_eqs, q_dependent,
    configura tion_constraints, u_de pendent, velocity_cons traints, acceleration_
    constraints, u_auxilia ry)`The KanesMethod object takes a reference frame followed
    by multiple lists as arguments.`(fr, frstar) = KM.kanes_equations(fL, bL)` where
    fL and bL are lists of forces and bodies respectively. | For more details refer
    to [mechanics/kane](kane.html#kane-method) and the [kane api.](api/kane_lagrange.html#kane-lagrange)
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `Fr()` `FrStar()` | `KM = KanesMethod(f, q_ind, u_ind, kd_eqs, q_dependent,
    configura tion_constraints, u_de pendent, velocity_cons traints, acceleration_
    constraints, u_auxilia ry)`KanesMethod 对象接受一个参考框架，后面跟着多个列表作为参数。`(fr, frstar) =
    KM.kanes_equations(fL, bL)`，其中 fL 和 bL 是力和刚体的列表。 | 更多详细信息，请参阅 [mechanics/kane](kane.html#kane-method)
    和 [kane api.](api/kane_lagrange.html#kane-lagrange) |'
- en: Numerical Evaluation and Visualization
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值评估与可视化
- en: Autolev’s CODE Option() command allows one to generate Matlab, C, or Fortran
    code for numerical evaluation and visualization. Option can be Dynamics, ODE,
    Nonlinear or Algebraic.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Autolev 的 CODE Option() 命令允许生成 Matlab、C 或 Fortran 代码用于数值评估和可视化。Option 可以是 Dynamics、ODE、Nonlinear
    或 Algebraic。
- en: 'Numerical evaluation for dynamics can be achieved using PyDy. One can pass
    in the KanesMethod object to the System class along with the values for the constants,
    specifieds, initial conditions and time steps. The equations of motion can then
    be integrated. The plotting is achieved using matlplotlib. Here is an example
    from the [PyDy Documentation](https://www.pydy.org/documentation.html) on how
    it is done:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用PyDy进行动力学的数值评估。可以将KanesMethod对象传递给System类，以及常数、指定值、初始条件和时间步长。然后可以积分运动方程。使用matlplotlib进行绘图。以下是来自[PyDy文档](https://www.pydy.org/documentation.html)的示例：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For information on all the things PyDy can accomplish refer to the [PyDy Documentation](https://www.pydy.org/documentation.html).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有关PyDy可以完成的所有信息，请参阅[PyDy文档](https://www.pydy.org/documentation.html)。
- en: 'The tools in the PyDy workflow are :'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: PyDy工作流中的工具包括：
- en: '[SymPy](https://sympy.org): SymPy is a Python library for'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SymPy](https://sympy.org)：SymPy是Python的一个库，用于'
- en: symbolic computation. It provides computer algebra capabilities either as a
    standalone application, as a library to other applications, or live on the web
    as SymPy Live or SymPy Gamma.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 符号计算。它提供计算机代数能力，可以作为独立应用程序、其他应用程序的库，或作为SymPy Live或SymPy Gamma上的Web实时存在。
- en: '[NumPy](https://numpy.org/): NumPy is a library for the'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NumPy](https://numpy.org/)：NumPy是一个库，用于'
- en: Python programming language, adding support for large, multi-dimensional arrays
    and matrices, along with a large collection of high-level mathematical functions
    to operate on these arrays.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python编程语言，添加对大型多维数组和矩阵的支持，以及大量高级数学函数集合，用于操作这些数组。
- en: '[SciPy](https://scipy.org/): SciPy is an open source'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SciPy](https://scipy.org/)：SciPy是一个开源的'
- en: Python library used for scientific computing and technical computing. SciPy
    contains modules for optimization, linear algebra, integration, interpolation,
    special functions, FFT, signal and image processing, ODE solvers and other tasks
    common in science and engineering.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于科学计算和技术计算的Python库。SciPy包含优化、线性代数、积分、插值、特殊函数、FFT、信号和图像处理、ODE求解器以及其他在科学与工程中常见的任务模块。
- en: '[IPython](https://ipython.org/): IPython is a command shell'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IPython](https://ipython.org/)：IPython是一个命令行外壳'
- en: for interactive computing in multiple programming languages, originally developed
    for the Python programming language, that offers introspection, rich media, shell
    syntax, tab completion, and history.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于多种编程语言的交互计算，最初为Python编程语言开发，提供内省、丰富的媒体、shell语法、选项完成和历史记录。
- en: '[Aesara](https://aesara.readthedocs.io/en/latest/): Aesara is'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Aesara](https://aesara.readthedocs.io/en/latest/)：Aesara是'
- en: a numerical computation library for Python. In Aesara, computations are expressed
    using a NumPy-esque syntax and compiled to run efficiently on either CPU or GPU
    architectures.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python的数值计算库。在Aesara中，使用类似NumPy的语法表达计算，并编译以在CPU或GPU架构上高效运行。
- en: '[Cython](https://cython.org/): Cython is a superset of the'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cython](https://cython.org/)：Cython是一个超集'
- en: Python programming language, designed to give C-like performance with code that
    is mostly written in Python. Cython is a compiled language that generates CPython
    extension modules.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python编程语言，旨在通过大部分Python编写的代码提供类似C的性能。Cython是一种编译语言，用于生成CPython扩展模块。
- en: '[matplotlib](https://matplotlib.org/): matplotlib is a'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[matplotlib](https://matplotlib.org/)：matplotlib是一个'
- en: plotting library for the Python programming language and its numerical mathematics
    extension NumPy.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于Python编程语言及其数学扩展NumPy的绘图库。
- en: One will be able to write code equivalent to the Matlab, C or Fortran code generated
    by Autolev using these scientific computing tools. It is recommended to go over
    these modules to gain an understanding of scientific computing with Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些科学计算工具，可以编写与Autolev生成的Matlab、C或Fortran代码等效的代码。建议详细了解这些模块，以便理解Python科学计算。
- en: Links
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: '[SymPy Introductory Tutorial](../../../tutorials/intro-tutorial/index.html#intro-tutorial)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[SymPy入门教程](../../../tutorials/intro-tutorial/index.html#intro-tutorial)'
- en: '[SymPy Documentation](../../../index.html#documentation)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[SymPy文档](../../../index.html#documentation)'
- en: '[SymPy Physics Vector Documentation](../vector/index.html#physics-vector)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[SymPy物理向量文档](../vector/index.html#physics-vector)'
- en: '[SymPy Mechanics Documentation](index.html#classical-mechanics)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[SymPy力学文档](index.html#classical-mechanics)'
- en: '[PyDy Documentation](https://www.pydy.org/documentation.html)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyDy文档](https://www.pydy.org/documentation.html)'
- en: '[MultiBody Dynamics with Python](https://www.youtube.com/watch?v=mdo2NYtA-xY)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Python进行多体动力学](https://www.youtube.com/watch?v=mdo2NYtA-xY)'
