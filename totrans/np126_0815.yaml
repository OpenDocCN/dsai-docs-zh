- en: numpy.arcsin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.arcsin.html](https://numpy.org/doc/1.26/reference/generated/numpy.arcsin.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Inverse sine, element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: '*y*-coordinate on the unit circle.'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse sine of each element in *x*, in radians and in the closed interval
    `[-pi/2, pi/2]`. This is a scalar if *x* is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](numpy.sin.html#numpy.sin "numpy.sin"), [`cos`](numpy.cos.html#numpy.cos
    "numpy.cos"), [`arccos`](numpy.arccos.html#numpy.arccos "numpy.arccos"), [`tan`](numpy.tan.html#numpy.tan
    "numpy.tan"), [`arctan`](numpy.arctan.html#numpy.arctan "numpy.arctan"), [`arctan2`](numpy.arctan2.html#numpy.arctan2
    "numpy.arctan2"), [`emath.arcsin`](numpy.emath.arcsin.html#numpy.emath.arcsin
    "numpy.emath.arcsin")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`arcsin`](#numpy.arcsin "numpy.arcsin") is a multivalued function: for each
    *x* there are infinitely many numbers *z* such that \(sin(z) = x\). The convention
    is to return the angle *z* whose real part lies in [-pi/2, pi/2].'
  prefs: []
  type: TYPE_NORMAL
- en: For real-valued input data types, *arcsin* always returns real output. For each
    value that cannot be expressed as a real number or infinity, it yields `nan` and
    sets the *invalid* floating point error flag.
  prefs: []
  type: TYPE_NORMAL
- en: For complex-valued input, [`arcsin`](#numpy.arcsin "numpy.arcsin") is a complex
    analytic function that has, by convention, the branch cuts [-inf, -1] and [1,
    inf] and is continuous from above on the former and from below on the latter.
  prefs: []
  type: TYPE_NORMAL
- en: The inverse sine is also known as *asin* or sin^{-1}.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Abramowitz, M. and Stegun, I. A., *Handbook of Mathematical Functions*, 10th
    printing, New York: Dover, 1964, pp. 79ff. [https://personal.math.ubc.ca/~cbm/aands/page_79.htm](https://personal.math.ubc.ca/~cbm/aands/page_79.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
