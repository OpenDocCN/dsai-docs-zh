- en: numpy.nanmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nanmin.html](https://numpy.org/doc/1.26/reference/generated/numpy.nanmin.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return minimum of an array or minimum along an axis, ignoring any NaNs. When
    all-NaN slices are encountered a `RuntimeWarning` is raised and Nan is returned
    for that slice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing numbers whose minimum is desired. If *a* is not an array, a
    conversion is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{int, tuple of int, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the minimum is computed. The default is to compute
    the minimum of the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. The default is `None`;
    if provided, it must have the same shape as the expected output, but the type
    will be cast if necessary. See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*.
  prefs: []
  type: TYPE_NORMAL
- en: If the value is anything but the default, then *keepdims* will be passed through
    to the [`min`](numpy.min.html#numpy.min "numpy.min") method of sub-classes of
    [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray"). If the sub-classes
    methods does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an output element. Must be present to allow computation
    on empty slice. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to compare for the minimum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nanmin**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array with the same shape as *a*, with the specified axis removed. If *a*
    is a 0-d array, or if axis is None, an ndarray scalar is returned. The same dtype
    as *a* is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nanmax`](numpy.nanmax.html#numpy.nanmax "numpy.nanmax")'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an array along a given axis, ignoring any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`amin`](numpy.amin.html#numpy.amin "numpy.amin")'
  prefs: []
  type: TYPE_NORMAL
- en: The minimum value of an array along a given axis, propagating any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fmin`](numpy.fmin.html#numpy.fmin "numpy.fmin")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise minimum of two arrays, ignoring any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum`](numpy.minimum.html#numpy.minimum "numpy.minimum")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise minimum of two arrays, propagating any NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isnan`](numpy.isnan.html#numpy.isnan "numpy.isnan")'
  prefs: []
  type: TYPE_NORMAL
- en: Shows which elements are Not a Number (NaN).
  prefs: []
  type: TYPE_NORMAL
- en: '[`isfinite`](numpy.isfinite.html#numpy.isfinite "numpy.isfinite")'
  prefs: []
  type: TYPE_NORMAL
- en: Shows which elements are neither NaN nor infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[`amax`](numpy.amax.html#numpy.amax "numpy.amax"), [`fmax`](numpy.fmax.html#numpy.fmax
    "numpy.fmax"), [`maximum`](numpy.maximum.html#numpy.maximum "numpy.maximum")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic (IEEE
    754). This means that Not a Number is not equivalent to infinity. Positive infinity
    is treated as a very large number and negative infinity is treated as a very small
    (i.e. negative) number.
  prefs: []
  type: TYPE_NORMAL
- en: If the input has a integer type the function is equivalent to np.min.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When positive infinity and negative infinity are present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
