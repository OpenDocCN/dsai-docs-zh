- en: Scalar and Vector Field Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/vector/fields.html](https://docs.sympy.org/latest/modules/physics/vector/fields.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vectors and Scalars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In physics, we deal with two kinds of quantities – scalars and vectors.
  prefs: []
  type: TYPE_NORMAL
- en: A scalar is an entity which only has a magnitude – no direction. Examples of
    scalar quantities include mass, electric charge, temperature, distance, etc.
  prefs: []
  type: TYPE_NORMAL
- en: A vector, on the other hand, is an entity that is characterized by a magnitude
    and a direction. Examples of vector quantities are displacement, velocity, magnetic
    field, etc.
  prefs: []
  type: TYPE_NORMAL
- en: A scalar can be depicted just by a number, for e.g. a temperature of 300 K.
    On the other hand, vectorial quantities like acceleration are usually denoted
    by a vector. Given a vector \(\mathbf{V}\), the magnitude of the corresponding
    quantity can be calculated as the magnitude of the vector itself \(\Vert \mathbf{V}
    \Vert\), while the direction would be specified by a unit vector in the direction
    of the original vector, \(\mathbf{\hat{V}} = \frac{\mathbf{V}}{\Vert \mathbf{V}
    \Vert}\).
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider a displacement of \((3\mathbf{\hat{i}} + 4\mathbf{\hat{j}}
    + 5\mathbf{\hat{k}})\) m, where , as per standard convention, \(\mathbf{\hat{i}}\),
    \(\mathbf{\hat{j}}\) and \(\mathbf{\hat{k}}\) represent unit vectors in the \(\mathbf{X}\),
    \(\mathbf{Y}\) and \(\mathbf{Z}\) directions respectively. Therefore, it can be
    concluded that the distance traveled is \(\Vert 3\mathbf{\hat{i}} + 4\mathbf{\hat{j}}
    + 5\mathbf{\hat{k}} \Vert\) m = \(5\sqrt{2}\) m. The direction of travel is given
    by the unit vector \(\frac{3}{5\sqrt{2}}\mathbf{\hat{i}} + \frac{4}{5\sqrt{2}}\mathbf{\hat{j}}
    + \frac{5}{5\sqrt{2}}\mathbf{\hat{k}}\).
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In general, a \(field\) is a vector or scalar quantity that can be specified
    everywhere in space as a function of position (Note that in general a field may
    also be dependent on time and other custom variables). In this module, we deal
    with 3-dimensional spaces only. Hence, a field is defined as a function of the
    \(x\), \(y\) and \(z\) coordinates corresponding to a location in 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: For example, temperate in 3 dimensional space (a temperature field) can be written
    as \(T(x, y, z)\) – a scalar function of the position. An example of a scalar
    field in electromagnetism is the electric potential.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar manner, a vector field can be defined as a vectorial function of
    the location \((x, y, z)\) of any point in space.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, every point on the earth may be considered to be in the gravitational
    force field of the earth. We may specify the field by the magnitude and the direction
    of acceleration due to gravity (i.e. force per unit mass ) \(g(x, y, z)\) at every
    point in space.
  prefs: []
  type: TYPE_NORMAL
- en: To give an example from electromagnetism, consider an electric potential of
    form \(2{x}^{2}y\), a scalar field in 3D space. The corresponding conservative
    electric field can be computed as the gradient of the electric potential function,
    and expressed as \(4xy\mathbf{\hat{i}} + 2{x}^{2}\mathbf{\hat{j}}\). The magnitude
    of this electric field can in turn be expressed as a scalar field of the form
    \(\sqrt{4{x}^{4} + 16{x}^{2}{y}^{2}}\).
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of fields in sympy.physics.vector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [`sympy.physics.vector`](index.html#module-sympy.physics.vector "sympy.physics.vector"),
    every [`ReferenceFrame`](api/classes.html#sympy.physics.vector.frame.ReferenceFrame
    "sympy.physics.vector.frame.ReferenceFrame") instance is assigned basis vectors
    corresponding to the \(X\), \(Y\) and \(Z\) directions. These can be accessed
    using the attributes named `x`, `y` and `z` respectively. Hence, to define a vector
    \(\mathbf{v}\) of the form \(3\mathbf{\hat{i}} + 4\mathbf{\hat{j}} + 5\mathbf{\hat{k}}\)
    with respect to a given frame \(\mathbf{R}\), you would do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Vector math and basic calculus operations with respect to vectors have already
    been elaborated upon in other sections of this module’s documentation.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, base scalars (or coordinate variables) are implemented as
    special SymPy [`Symbol`](../../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")s
    assigned to every frame, one for each direction from \(X\), \(Y\) and \(Z\). For
    a frame `R`, the \(X\), \(Y\) and \(Z\) base scalar [`Symbol`](../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol")s can be accessed using the `R[0]`, `R[1]` and `R[2]`
    expressions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to generate the expression for the aforementioned electric potential
    field \(2{x}^{2}y\), you would have to do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In string representation, `R_x` denotes the \(X\) base scalar assigned to [`ReferenceFrame`](api/classes.html#sympy.physics.vector.frame.ReferenceFrame
    "sympy.physics.vector.frame.ReferenceFrame") `R`. Essentially, `R_x` is the string
    representation of `R[0]`.
  prefs: []
  type: TYPE_NORMAL
- en: Scalar fields can be treated just as any other SymPy expression, for any math/calculus
    functionality. Hence, to differentiate the above electric potential with respect
    to \(x\) (i.e. `R[0]`), you would have to use the [`diff`](../../core.html#sympy.core.function.diff
    "sympy.core.function.diff") function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Like vectors (and vector fields), scalar fields can also be re-expressed in
    other frames of reference, apart from the one they were defined in – assuming
    that an orientation relationship exists between the concerned frames. This can
    be done using the [`sympy.physics.vector.vector.Vector.express`](api/classes.html#sympy.physics.vector.vector.Vector.express
    "sympy.physics.vector.vector.Vector.express") method, in a way similar to vectors
    - but with the `variables` parameter set to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Moreover, considering scalars can also be functions of time just as vectors,
    differentiation with respect to time is also possible. Depending on the [`Symbol`](../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol")s present in the expression and the frame with respect
    to which the time differentiation is being done, the output will change/remain
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Field operators and other related functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we describe some basic field-related functionality implemented in sympy.physics.vector
  prefs: []
  type: TYPE_NORMAL
- en: Curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A curl is a mathematical operator that describes an infinitesimal rotation of
    a vector in 3D space. The direction is determined by the right-hand rule (along
    the axis of rotation), and the magnitude is given by the magnitude of rotation.
  prefs: []
  type: TYPE_NORMAL
- en: In the 3D Cartesian system, the curl of a 3D vector \(\mathbf{F}\) , denoted
    by \(\nabla \times \mathbf{F}\) is given by -
  prefs: []
  type: TYPE_NORMAL
- en: \(\nabla \times \mathbf{F} = \left(\frac{\partial F_z}{\partial y} - \frac{\partial
    F_y}{\partial z}\right) \mathbf{\hat{i}} + \left(\frac{\partial F_x}{\partial
    z} - \frac{\partial F_z}{\partial x}\right) \mathbf{\hat{j}} + \left(\frac{\partial
    F_y}{\partial x} - \frac{\partial F_x}{\partial y}\right) \mathbf{\hat{k}}\)
  prefs: []
  type: TYPE_NORMAL
- en: where \(F_x\) denotes the \(X\) component of vector \(\mathbf{F}\).
  prefs: []
  type: TYPE_NORMAL
- en: To compute the curl of a vector field in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector"), you would do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Divergence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Divergence is a vector operator that measures the magnitude of a vector field’s
    source or sink at a given point, in terms of a signed scalar.
  prefs: []
  type: TYPE_NORMAL
- en: The divergence operator always returns a scalar after operating on a vector.
  prefs: []
  type: TYPE_NORMAL
- en: In the 3D Cartesian system, the divergence of a 3D vector \(\mathbf{F}\), denoted
    by \(\nabla\cdot\mathbf{F}\) is given by -
  prefs: []
  type: TYPE_NORMAL
- en: \(\nabla\cdot\mathbf{F} =\frac{\partial U}{\partial x} +\frac{\partial V}{\partial
    y} +\frac{\partial W}{\partial z }\)
  prefs: []
  type: TYPE_NORMAL
- en: where \(U\), \(V\) and \(W\) denote the \(X\), \(Y\) and \(Z\) components of
    \(\mathbf{F}\) respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To compute the divergence of a vector field in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector"), you would do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Gradient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider a scalar field \(f(x, y, z)\) in 3D space. The gradient of this field
    is defined as the vector of the 3 partial derivatives of \(f\) with respect to
    \(x\), \(y\) and \(z\) in the \(X\), \(Y\) and \(Z\) directions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In the 3D Cartesian system, the gradient of a scalar field \(f\), denoted by
    \(\nabla f\) is given by -
  prefs: []
  type: TYPE_NORMAL
- en: \(\nabla f = \frac{\partial f}{\partial x} \mathbf{\hat{i}} + \frac{\partial
    f}{\partial y} \mathbf{\hat{j}} + \frac{\partial f}{\partial z} \mathbf{\hat{k}}\)
  prefs: []
  type: TYPE_NORMAL
- en: To compute the gradient of a scalar field in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector"), you would do
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Conservative and Solenoidal fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In vector calculus, a conservative field is a field that is the gradient of
    some scalar field. Conservative fields have the property that their line integral
    over any path depends only on the end-points, and is independent of the path between
    them. A conservative vector field is also said to be ‘irrotational’, since the
    curl of a conservative field is always zero.
  prefs: []
  type: TYPE_NORMAL
- en: In physics, conservative fields represent forces in physical systems where energy
    is conserved.
  prefs: []
  type: TYPE_NORMAL
- en: To check if a vector field is conservative in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector"), use the [`sympy.physics.vector.fieldfunctions.is_conservative`](api/fieldfunctions.html#sympy.physics.vector.fieldfunctions.is_conservative
    "sympy.physics.vector.fieldfunctions.is_conservative") function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A solenoidal field, on the other hand, is a vector field whose divergence is
    zero at all points in space.
  prefs: []
  type: TYPE_NORMAL
- en: To check if a vector field is solenoidal in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector"), use the [`sympy.physics.vector.fieldfunctions.is_solenoidal`](api/fieldfunctions.html#sympy.physics.vector.fieldfunctions.is_solenoidal
    "sympy.physics.vector.fieldfunctions.is_solenoidal") function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Scalar potential functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have previously mentioned that every conservative field can be defined as
    the gradient of some scalar field. This scalar field is also called the ‘scalar
    potential field’ corresponding to the aforementioned conservative field.
  prefs: []
  type: TYPE_NORMAL
- en: The [`sympy.physics.vector.fieldfunctions.scalar_potential`](api/fieldfunctions.html#sympy.physics.vector.fieldfunctions.scalar_potential
    "sympy.physics.vector.fieldfunctions.scalar_potential") function in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector") calculates the scalar potential field corresponding to
    a given conservative vector field in 3D space - minus the extra constant of integration,
    of course.
  prefs: []
  type: TYPE_NORMAL
- en: Example of usage -
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Providing a non-conservative vector field as an argument to [`sympy.physics.vector.fieldfunctions.scalar_potential`](api/fieldfunctions.html#sympy.physics.vector.fieldfunctions.scalar_potential
    "sympy.physics.vector.fieldfunctions.scalar_potential") raises a `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: The scalar potential difference, or simply ‘potential difference’, corresponding
    to a conservative vector field can be defined as the difference between the values
    of its scalar potential function at two points in space. This is useful in calculating
    a line integral with respect to a conservative function, since it depends only
    on the endpoints of the path.
  prefs: []
  type: TYPE_NORMAL
- en: This computation is performed as follows in [`sympy.physics.vector`](index.html#module-sympy.physics.vector
    "sympy.physics.vector").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If provided with a scalar expression instead of a vector field, [`sympy.physics.vector.fieldfunctions.scalar_potential_difference`](api/fieldfunctions.html#sympy.physics.vector.fieldfunctions.scalar_potential_difference
    "sympy.physics.vector.fieldfunctions.scalar_potential_difference") returns the
    difference between the values of that scalar field at the two given points in
    space.
  prefs: []
  type: TYPE_NORMAL
