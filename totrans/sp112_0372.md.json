["```py\nscipy.ndimage.geometric_transform(input, mapping, output_shape=None, output=None, order=3, mode='constant', cval=0.0, prefilter=True, extra_arguments=(), extra_keywords={})\n```", "```py\nint  mapping(npy_intp  *output_coordinates,  double  *input_coordinates,\n  int  output_rank,  int  input_rank,  void  *user_data)\nint  mapping(intptr_t  *output_coordinates,  double  *input_coordinates,\n  int  output_rank,  int  input_rank,  void  *user_data) \n```", "```py\n>>> import numpy as np\n>>> from scipy.ndimage import geometric_transform\n>>> a = np.arange(12.).reshape((4, 3))\n>>> def shift_func(output_coords):\n...     return (output_coords[0] - 0.5, output_coords[1] - 0.5)\n...\n>>> geometric_transform(a, shift_func)\narray([[ 0\\.   ,  0\\.   ,  0\\.   ],\n [ 0\\.   ,  1.362,  2.738],\n [ 0\\.   ,  4.812,  6.187],\n [ 0\\.   ,  8.263,  9.637]]) \n```", "```py\n>>> b = [1, 2, 3, 4, 5]\n>>> def shift_func(output_coords):\n...     return (output_coords[0] - 3,)\n...\n>>> geometric_transform(b, shift_func, mode='constant')\narray([0, 0, 0, 1, 2])\n>>> geometric_transform(b, shift_func, mode='nearest')\narray([1, 1, 1, 1, 2])\n>>> geometric_transform(b, shift_func, mode='reflect')\narray([3, 2, 1, 1, 2])\n>>> geometric_transform(b, shift_func, mode='wrap')\narray([2, 3, 4, 1, 2]) \n```"]