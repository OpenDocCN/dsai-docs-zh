- en: scipy.linalg.eigh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.eigh.html#scipy.linalg.eigh](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.eigh.html#scipy.linalg.eigh)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Solve a standard or generalized eigenvalue problem for a complex Hermitian or
    real symmetric matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find eigenvalues array `w` and optionally eigenvectors array `v` of array `a`,
    where `b` is positive definite such that for every eigenvalue λ (i-th entry of
    w) and its eigenvector `vi` (i-th column of `v`) satisfies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the standard problem, `b` is assumed to be the identity matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(M, M) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A complex Hermitian or real symmetric matrix whose eigenvalues and eigenvectors
    will be computed.
  prefs: []
  type: TYPE_NORMAL
- en: '**b**(M, M) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A complex Hermitian or real symmetric definite positive matrix in. If omitted,
    identity matrix is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: '**lower**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether the pertinent array data is taken from the lower or upper triangle
    of `a` and, if applicable, `b`. (Default: lower)'
  prefs: []
  type: TYPE_NORMAL
- en: '**eigvals_only**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether to calculate only eigenvalues and no eigenvectors. (Default: both are
    calculated)'
  prefs: []
  type: TYPE_NORMAL
- en: '**subset_by_index**iterable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, this two-element iterable defines the start and the end indices
    of the desired eigenvalues (ascending order and 0-indexed). To return only the
    second smallest to fifth smallest eigenvalues, `[1, 4]` is used. `[n-3, n-1]`
    returns the largest three. Only available with “evr”, “evx”, and “gvx” drivers.
    The entries are directly converted to integers via `int()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**subset_by_value**iterable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, this two-element iterable defines the half-open interval `(a, b]`
    that, if any, only the eigenvalues between these values are returned. Only available
    with “evr”, “evx”, and “gvx” drivers. Use `np.inf` for the unconstrained ends.
  prefs: []
  type: TYPE_NORMAL
- en: '**driver**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Defines which LAPACK driver should be used. Valid options are “ev”, “evd”, “evr”,
    “evx” for standard problems and “gv”, “gvd”, “gvx” for generalized (where b is
    not None) problems. See the Notes section. The default for standard problems is
    “evr”. For generalized problems, “gvd” is used for full set, and “gvx” for subset
    requested cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**type**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the generalized problems, this keyword specifies the problem type to be
    solved for `w` and `v` (only takes 1, 2, 3 as possible inputs):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This keyword is ignored for standard problems.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_a**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to overwrite data in `a` (may improve performance). Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_b**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to overwrite data in `b` (may improve performance). Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input matrices contain only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination)
    if the inputs do contain infinities or NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '**turbo**bool, optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.5.0: [`eigh`](#scipy.linalg.eigh "scipy.linalg.eigh")
    keyword argument *turbo* is deprecated in favour of `driver=gvd` keyword instead
    and will be removed in SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**eigvals**tuple (lo, hi), optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.5.0: [`eigh`](#scipy.linalg.eigh "scipy.linalg.eigh")
    keyword argument [`eigvals`](scipy.linalg.eigvals.html#scipy.linalg.eigvals "scipy.linalg.eigvals")
    is deprecated in favour of *subset_by_index* keyword instead and will be removed
    in SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**w**(N,) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The N (N<=M) selected eigenvalues, in ascending order, each repeated according
    to its multiplicity.
  prefs: []
  type: TYPE_NORMAL
- en: '**v**(M, N) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The normalized eigenvector corresponding to the eigenvalue `w[i]` is the column
    `v[:,i]`. Only returned if `eigvals_only=False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: LinAlgError
  prefs: []
  type: TYPE_NORMAL
- en: If eigenvalue computation does not converge, an error occurred, or b matrix
    is not definite positive. Note that if input matrices are not symmetric or Hermitian,
    no error will be reported but results will be wrong.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eigvalsh`](scipy.linalg.eigvalsh.html#scipy.linalg.eigvalsh "scipy.linalg.eigvalsh")'
  prefs: []
  type: TYPE_NORMAL
- en: eigenvalues of symmetric or Hermitian arrays
  prefs: []
  type: TYPE_NORMAL
- en: '[`eig`](scipy.linalg.eig.html#scipy.linalg.eig "scipy.linalg.eig")'
  prefs: []
  type: TYPE_NORMAL
- en: eigenvalues and right eigenvectors for non-symmetric arrays
  prefs: []
  type: TYPE_NORMAL
- en: '[`eigh_tridiagonal`](scipy.linalg.eigh_tridiagonal.html#scipy.linalg.eigh_tridiagonal
    "scipy.linalg.eigh_tridiagonal")'
  prefs: []
  type: TYPE_NORMAL
- en: eigenvalues and right eiegenvectors for symmetric/Hermitian tridiagonal matrices
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function does not check the input array for being Hermitian/symmetric in
    order to allow for representing arrays with only their upper/lower triangular
    parts. Also, note that even though not taken into account, finiteness check applies
    to the whole array and unaffected by “lower” keyword.
  prefs: []
  type: TYPE_NORMAL
- en: This function uses LAPACK drivers for computations in all possible keyword combinations,
    prefixed with `sy` if arrays are real and `he` if complex, e.g., a float array
    with “evr” driver is solved via “syevr”, complex arrays with “gvx” driver problem
    is solved via “hegvx” etc.
  prefs: []
  type: TYPE_NORMAL
- en: As a brief summary, the slowest and the most robust driver is the classical
    `<sy/he>ev` which uses symmetric QR. `<sy/he>evr` is seen as the optimal choice
    for the most general cases. However, there are certain occasions that `<sy/he>evd`
    computes faster at the expense of more memory usage. `<sy/he>evx`, while still
    being faster than `<sy/he>ev`, often performs worse than the rest except when
    very few eigenvalues are requested for large arrays though there is still no performance
    guarantee.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the generalized problem, normalization with respect to the given type argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Request only the eigenvalues
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Request eigenvalues that are less than 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Request the second smallest eigenvalue and its eigenvector
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
