- en: numpy.digitize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.digitize.html](https://numpy.org/doc/1.26/reference/generated/numpy.digitize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the indices of the bins to which each value in input array belongs.
  prefs: []
  type: TYPE_NORMAL
- en: '| *right* | order of bins | returned index *i* satisfies |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `False` | increasing | `bins[i-1] <= x < bins[i]` |'
  prefs: []
  type: TYPE_TB
- en: '| `True` | increasing | `bins[i-1] < x <= bins[i]` |'
  prefs: []
  type: TYPE_TB
- en: '| `False` | decreasing | `bins[i-1] > x >= bins[i]` |'
  prefs: []
  type: TYPE_TB
- en: '| `True` | decreasing | `bins[i-1] >= x > bins[i]` |'
  prefs: []
  type: TYPE_TB
- en: If values in *x* are beyond the bounds of *bins*, 0 or `len(bins)` is returned
    as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array to be binned. Prior to NumPy 1.10.0, this array had to be 1-dimensional,
    but can now have any shape.
  prefs: []
  type: TYPE_NORMAL
- en: '**bins**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array of bins. It has to be 1-dimensional and monotonic.
  prefs: []
  type: TYPE_NORMAL
- en: '**right**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Indicating whether the intervals include the right or the left bin edge. Default
    behavior is (right==False) indicating that the interval does not include the right
    edge. The left bin end is open in this case, i.e., bins[i-1] <= x < bins[i] is
    the default behavior for monotonically increasing bins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**ndarray of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Output array of indices, of same shape as *x*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If *bins* is not monotonic.
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If the type of the input is complex.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bincount`](numpy.bincount.html#numpy.bincount "numpy.bincount"), [`histogram`](numpy.histogram.html#numpy.histogram
    "numpy.histogram"), [`unique`](numpy.unique.html#numpy.unique "numpy.unique"),
    [`searchsorted`](numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If values in *x* are such that they fall outside the bin range, attempting to
    index *bins* with the indices that [`digitize`](#numpy.digitize "numpy.digitize")
    returns will result in an IndexError.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: '*np.digitize* is implemented in terms of *np.searchsorted*. This means that
    a binary search is used to bin the values, which scales much better for larger
    number of bins than the previous linear search. It also removes the requirement
    for the input array to be 1-dimensional.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For monotonically _increasing_ *bins*, the following are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that as the order of the arguments are reversed, the side must be too.
    The [`searchsorted`](numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")
    call is marginally faster, as it does not do any monotonicity checks. Perhaps
    more importantly, it supports all dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
