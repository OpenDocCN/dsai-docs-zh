["```py\nscipy.stats.normaltest(a, axis=0, nan_policy='propagate')\n```", "```py\n>>> import numpy as np\n>>> x = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236]) \n```", "```py\n>>> from scipy import stats\n>>> res = stats.normaltest(x)\n>>> res.statistic\n13.034263121192582 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> dist = stats.chi2(df=2)\n>>> stat_vals = np.linspace(0, 16, 100)\n>>> pdf = dist.pdf(stat_vals)\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> def plot(ax):  # we'll reuse this\n...     ax.plot(stat_vals, pdf)\n...     ax.set_title(\"Normality Test Null Distribution\")\n...     ax.set_xlabel(\"statistic\")\n...     ax.set_ylabel(\"probability density\")\n>>> plot(ax)\n>>> plt.show() \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> pvalue = dist.sf(res.statistic)\n>>> annotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (13.5, 5e-4), (14, 5e-3), arrowprops=props)\n>>> i = stat_vals >= res.statistic  # index more extreme statistic values\n>>> ax.fill_between(stat_vals[i], y1=0, y2=pdf[i])\n>>> ax.set_xlim(8, 16)\n>>> ax.set_ylim(0, 0.01)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.0014779023013100172 \n```", "```py\n>>> def statistic(x, axis):\n...     # Get only the `normaltest` statistic; ignore approximate p-value\n...     return stats.normaltest(x, axis=axis).statistic\n>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic,\n...                              alternative='greater')\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> ax.hist(res.null_distribution, np.linspace(0, 25, 50),\n...         density=True)\n>>> ax.legend(['aymptotic approximation (many observations)',\n...            'Monte Carlo approximation (11 observations)'])\n>>> ax.set_xlim(0, 14)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.0082  # may vary \n```"]