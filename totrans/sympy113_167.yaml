- en: Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/masses.html](https://docs.sympy.org/latest/modules/physics/mechanics/masses.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This document will describe how to represent masses and inertias in [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics") and use of the [`RigidBody`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") and [`Particle`](api/part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") classes.
  prefs: []
  type: TYPE_NORMAL
- en: It is assumed that the reader is familiar with the basics of these topics, such
    as finding the center of mass for a system of particles, how to manipulate an
    inertia tensor, and the definition of a particle and rigid body. Any advanced
    dynamics text can provide a reference for these details.
  prefs: []
  type: TYPE_NORMAL
- en: Mass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only requirement for a mass is that it needs to be a `sympify`-able expression.
    Keep in mind that masses can be time varying.
  prefs: []
  type: TYPE_NORMAL
- en: Particle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Particles are created with the class [`Particle`](api/part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") in [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics"). A [`Particle`](api/part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle") object has an associated point and
    an associated mass which are the only two attributes of the object.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The associated point contains the position, velocity and acceleration of the
    particle. [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics") allows one to perform kinematic analysis of points
    separate from their association with masses.
  prefs: []
  type: TYPE_NORMAL
- en: Inertia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inertia consists out of two parts: a quantity and a reference. The quantity
    is expressed as a [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") and the reference is a [`Point`](../vector/api/kinematics.html#sympy.physics.vector.point.Point
    "sympy.physics.vector.point.Point"). The [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") can be defined as the outer product between
    two vectors, which returns the juxtaposition of these vectors. For further information,
    please refer to the [Dyadic](../vector/advanced.html#dyadic) section in the advanced
    documentation of the [`sympy.physics.vector`](../vector/index.html#module-sympy.physics.vector
    "sympy.physics.vector") module. Another more intuitive method to define the [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") is to use the [`inertia()`](api/part_bod.html#sympy.physics.mechanics.inertia.inertia
    "sympy.physics.mechanics.inertia.inertia") function as described below in the
    section ‘Inertia (Dyadics)’. The [`Point`](../vector/api/kinematics.html#sympy.physics.vector.point.Point
    "sympy.physics.vector.point.Point") about which the [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") is specified can be any point, as long as
    it is defined with respect to the center of mass. The most common reference point
    is of course the center of mass itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The inertia of a body can be specified using either an [`Inertia`](api/part_bod.html#sympy.physics.mechanics.inertia.Inertia
    "sympy.physics.mechanics.inertia.Inertia") object or a `tuple`. If a `tuple` is
    used, then it should have a length of two, with the first entry being a [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") and the second entry being a [`Point`](../vector/api/kinematics.html#sympy.physics.vector.point.Point
    "sympy.physics.vector.point.Point") about which the inertia dyadic is defined.
    Internally this `tuple` gets converted to an [`Inertia`](api/part_bod.html#sympy.physics.mechanics.inertia.Inertia
    "sympy.physics.mechanics.inertia.Inertia") object. An example of using a `tuple`
    about the center of mass is given below in the ‘Rigid Body’ section. The [`Inertia`](api/part_bod.html#sympy.physics.mechanics.inertia.Inertia
    "sympy.physics.mechanics.inertia.Inertia") object can be created as follows.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Inertia (Dyadics)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A dyadic tensor is a second order tensor formed by the juxtaposition of a pair
    of vectors. There are various operations defined with respect to dyadics, which
    have been implemented in [`vector`](../vector/index.html#module-sympy.physics.vector
    "sympy.physics.vector") in the form of class [`Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic"). To know more, refer to the [`sympy.physics.vector.dyadic.Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") and [`sympy.physics.vector.vector.Vector`](../vector/api/classes.html#sympy.physics.vector.vector.Vector
    "sympy.physics.vector.vector.Vector") class APIs. Dyadics are used to define the
    inertia of bodies within [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics"). Inertia dyadics can be defined explicitly using the
    outer product, but the [`inertia()`](api/part_bod.html#sympy.physics.mechanics.inertia.inertia
    "sympy.physics.mechanics.inertia.inertia") function is typically much more convenient
    for the user.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the [`inertia()`](api/part_bod.html#sympy.physics.mechanics.inertia.inertia
    "sympy.physics.mechanics.inertia.inertia") function returns a dyadic with each
    component represented as two unit vectors separated by a `|` (outer product).
    Refer to the [`sympy.physics.vector.dyadic.Dyadic`](../vector/api/classes.html#sympy.physics.vector.dyadic.Dyadic
    "sympy.physics.vector.dyadic.Dyadic") section for more information about dyadics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inertia is often expressed in a matrix, or tensor, form, especially for numerical
    purposes. Since the matrix form does not contain any information about the reference
    frame(s) the inertia dyadic is defined in, you must provide one or two reference
    frames to extract the measure numbers from the dyadic. There is a convenience
    function to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Rigid Body
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rigid bodies are created in a similar fashion as particles. The [`RigidBody`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") class generates objects with four
    attributes: mass, center of mass, a reference frame, and an [`Inertia`](api/part_bod.html#sympy.physics.mechanics.inertia.Inertia
    "sympy.physics.mechanics.inertia.Inertia") (a `tuple` can be passed as well).:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The mass is specified exactly as is in a particle. Similar to the [`Particle`](api/part_bod.html#sympy.physics.mechanics.particle.Particle
    "sympy.physics.mechanics.particle.Particle")’s `.point`, the [`RigidBody`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody")’s center of mass, `.masscenter`
    must be specified. The reference frame is stored in an analogous fashion and holds
    information about the body’s orientation and angular velocity.
  prefs: []
  type: TYPE_NORMAL
- en: Loads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")
    loads can either be represented with tuples or with the dedicated classes [`Force`](api/part_bod.html#sympy.physics.mechanics.loads.Force
    "sympy.physics.mechanics.loads.Force") and [`Torque`](api/part_bod.html#sympy.physics.mechanics.loads.Torque
    "sympy.physics.mechanics.loads.Torque"). Generally the first argument (or item
    in the case of a tuple) is the location of the load. The second argument is the
    vector. In the case of a force the first argument is a point and the second a
    vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The location of a torque, on the other hand, is a frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Optionally, one can also pass the body when using dedicated classes. If so,
    the force will use the center of mass and the torque will use the associated frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Linear Momentum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The linear momentum of a particle P is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[L_P = m\mathbf{v}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m\) is the mass of the particle P and \(\mathbf{v}\) is the velocity
    of the particle in the inertial frame.[Likins1973]_.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly the linear momentum of a rigid body is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[L_B = m\mathbf{v^*}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m\) is the mass of the rigid body, B, and \(\mathbf{v^*}\) is the velocity
    of the mass center of B in the inertial frame.
  prefs: []
  type: TYPE_NORMAL
- en: Angular Momentum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The angular momentum of a particle P about an arbitrary point O in an inertial
    frame N is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[^N \mathbf{H} ^ {P/O} = \mathbf{r} \times m\mathbf{v}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\mathbf{r}\) is a position vector from point O to the particle of mass
    \(m\) and \(\mathbf{v}\) is the velocity of the particle in the inertial frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly the angular momentum of a rigid body B about a point O in an inertial
    frame N is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[^N \mathbf{H} ^ {B/O} = ^N \mathbf{H} ^ {B/B^*} + ^N \mathbf{H} ^ {B^*/O}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where the angular momentum of the body about it’s mass center is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[^N \mathbf{H} ^ {B/B^*} = \mathbf{I^*} \cdot \omega\]
  prefs: []
  type: TYPE_NORMAL
- en: 'and the angular momentum of the mass center about O is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[^N \mathbf{H} ^ {B^*/O} = \mathbf{r^*} \times m \mathbf{v^*}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\mathbf{I^*}\) is the central inertia dyadic of rigid body B, \(\omega\)
    is the inertial angular velocity of B, \(\mathbf{r^*}\) is a position vector from
    point O to the mass center of B, \(m\) is the mass of B and \(\mathbf{v^*}\) is
    the velocity of the mass center in the inertial frame.
  prefs: []
  type: TYPE_NORMAL
- en: Using momenta functions in Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following example shows how to use the momenta functions in [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics").
  prefs: []
  type: TYPE_NORMAL
- en: One begins by creating the requisite symbols to describe the system. Then the
    reference frame is created and the kinematics are done.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the bodies that make up the system are created. In this case the system
    consists of a particle Pa and a RigidBody A.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then one can either choose to evaluate the momenta of individual components
    of the system or of the entire system itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It should be noted that the user can determine either momenta in any frame in
    [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")
    as the user is allowed to specify the reference frame when calling the function.
    In other words the user is not limited to determining just inertial linear and
    angular momenta. Please refer to the docstrings on each function to learn more
    about how each function works precisely.
  prefs: []
  type: TYPE_NORMAL
- en: Kinetic Energy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The kinetic energy of a particle P is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[T_P = \frac{1}{2} m \mathbf{v^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m\) is the mass of the particle P and \(\mathbf{v}\) is the velocity
    of the particle in the inertial frame.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly the kinetic energy of a rigid body B is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[T_B = T_t + T_r\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where the translational kinetic energy is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: \[T_t = \frac{1}{2} m \mathbf{v^*} \cdot \mathbf{v^*}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'and the rotational kinetic energy is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: \[T_r = \frac{1}{2} \omega \cdot \mathbf{I^*} \cdot \omega\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m\) is the mass of the rigid body, \(\mathbf{v^*}\) is the velocity
    of the mass center in the inertial frame, \(\omega\) is the inertial angular velocity
    of the body and \(\mathbf{I^*}\) is the central inertia dyadic.
  prefs: []
  type: TYPE_NORMAL
- en: Potential Energy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Potential energy is defined as the energy possessed by a body or system by virtue
    of its position or arrangement.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are a variety of definitions for potential energy, this is not discussed
    further here. One can learn more about this in any elementary text book on dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: Lagrangian
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Lagrangian of a body or a system of bodies is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathcal{L} = T - V\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(T\) and \(V\) are the kinetic and potential energies respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Using energy functions in Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following example shows how to use the energy functions in [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics").
  prefs: []
  type: TYPE_NORMAL
- en: As was discussed above in the momenta functions, one first creates the system
    by going through an identical procedure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The user can then determine the kinetic energy of any number of entities of
    the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It should be noted that the user can determine either kinetic energy relative
    to any frame in [`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics") as the user is allowed to specify the reference frame
    when calling the function. In other words the user is not limited to determining
    just inertial kinetic energy.
  prefs: []
  type: TYPE_NORMAL
- en: 'For potential energies, the user must first specify the potential energy of
    every entity of the system using the [`sympy.physics.mechanics.rigidbody.RigidBody.potential_energy`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody.potential_energy
    "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy") property. The
    potential energy of any number of entities comprising the system can then be determined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'One can also determine the Lagrangian for this system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Please refer to the docstrings to learn more about each function.
  prefs: []
  type: TYPE_NORMAL
