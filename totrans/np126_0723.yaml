- en: numpy.ma.masked_where
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.masked_where.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.masked_where.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Mask an array where a condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: Return *a* as an array masked where *condition* is True. Any masked values of
    *a* or *condition* are also masked in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**condition**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Masking condition. When *condition* tests floating point values for equality,
    consider using `masked_values` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to mask.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True (default) make a copy of *a* in the result. If False modify *a* in place
    and return a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**MaskedArray'
  prefs: []
  type: TYPE_NORMAL
- en: The result of masking *a* where *condition* is True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_values`](numpy.ma.masked_values.html#numpy.ma.masked_values "numpy.ma.masked_values")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask using floating point equality.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_equal`](numpy.ma.masked_equal.html#numpy.ma.masked_equal "numpy.ma.masked_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where equal to a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_not_equal`](numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where *not* equal to a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_less_equal`](numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where less than or equal to a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_greater_equal`](numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where greater than or equal to a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_less`](numpy.ma.masked_less.html#numpy.ma.masked_less "numpy.ma.masked_less")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where less than a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_greater`](numpy.ma.masked_greater.html#numpy.ma.masked_greater "numpy.ma.masked_greater")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask where greater than a given value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_inside`](numpy.ma.masked_inside.html#numpy.ma.masked_inside "numpy.ma.masked_inside")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask inside a given interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_outside`](numpy.ma.masked_outside.html#numpy.ma.masked_outside "numpy.ma.masked_outside")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask outside a given interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[`masked_invalid`](numpy.ma.masked_invalid.html#numpy.ma.masked_invalid "numpy.ma.masked_invalid")'
  prefs: []
  type: TYPE_NORMAL
- en: Mask invalid values (NaNs or infs).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Mask array *b* conditional on *a*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Effect of the [`copy`](numpy.copy.html#numpy.copy "numpy.copy") argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When *condition* or *a* contain masked values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
