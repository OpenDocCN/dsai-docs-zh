["```py\nscipy.stats.vonmises_fisher = <scipy.stats._multivariate.vonmises_fisher_gen object>\n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.stats import vonmises_fisher\n>>> from matplotlib.colors import Normalize\n>>> n_grid = 100\n>>> u = np.linspace(0, np.pi, n_grid)\n>>> v = np.linspace(0, 2 * np.pi, n_grid)\n>>> u_grid, v_grid = np.meshgrid(u, v)\n>>> vertices = np.stack([np.cos(v_grid) * np.sin(u_grid),\n...                      np.sin(v_grid) * np.sin(u_grid),\n...                      np.cos(u_grid)],\n...                     axis=2)\n>>> x = np.outer(np.cos(v), np.sin(u))\n>>> y = np.outer(np.sin(v), np.sin(u))\n>>> z = np.outer(np.ones_like(u), np.cos(u))\n>>> def plot_vmf_density(ax, x, y, z, vertices, mu, kappa):\n...     vmf = vonmises_fisher(mu, kappa)\n...     pdf_values = vmf.pdf(vertices)\n...     pdfnorm = Normalize(vmin=pdf_values.min(), vmax=pdf_values.max())\n...     ax.plot_surface(x, y, z, rstride=1, cstride=1,\n...                     facecolors=plt.cm.viridis(pdfnorm(pdf_values)),\n...                     linewidth=0)\n...     ax.set_aspect('equal')\n...     ax.view_init(azim=-130, elev=0)\n...     ax.axis('off')\n...     ax.set_title(rf\"$\\kappa={kappa}$\")\n>>> fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(9, 4),\n...                          subplot_kw={\"projection\": \"3d\"})\n>>> left, middle, right = axes\n>>> mu = np.array([-np.sqrt(0.5), -np.sqrt(0.5), 0])\n>>> plot_vmf_density(left, x, y, z, vertices, mu, 5)\n>>> plot_vmf_density(middle, x, y, z, vertices, mu, 20)\n>>> plot_vmf_density(right, x, y, z, vertices, mu, 100)\n>>> plt.subplots_adjust(top=1, bottom=0.0, left=0.0, right=1.0, wspace=0.)\n>>> plt.show() \n```", "```py\n>>> rng = np.random.default_rng()\n>>> mu = np.array([0, 0, 1])\n>>> samples = vonmises_fisher(mu, 20).rvs(5, random_state=rng)\n>>> samples\narray([[ 0.3884594 , -0.32482588,  0.86231516],\n [ 0.00611366, -0.09878289,  0.99509023],\n [-0.04154772, -0.01637135,  0.99900239],\n [-0.14613735,  0.12553507,  0.98126695],\n [-0.04429884, -0.23474054,  0.97104814]]) \n```", "```py\n>>> np.linalg.norm(samples, axis=1)\narray([1., 1., 1., 1., 1.]) \n```", "```py\n>>> def plot_vmf_samples(ax, x, y, z, mu, kappa):\n...     vmf = vonmises_fisher(mu, kappa)\n...     samples = vmf.rvs(20)\n...     ax.plot_surface(x, y, z, rstride=1, cstride=1, linewidth=0,\n...                     alpha=0.2)\n...     ax.scatter(samples[:, 0], samples[:, 1], samples[:, 2], c='k', s=5)\n...     ax.scatter(mu[0], mu[1], mu[2], c='r', s=30)\n...     ax.set_aspect('equal')\n...     ax.view_init(azim=-130, elev=0)\n...     ax.axis('off')\n...     ax.set_title(rf\"$\\kappa={kappa}$\")\n>>> mu = np.array([-np.sqrt(0.5), -np.sqrt(0.5), 0])\n>>> fig, axes = plt.subplots(nrows=1, ncols=3,\n...                          subplot_kw={\"projection\": \"3d\"},\n...                          figsize=(9, 4))\n>>> left, middle, right = axes\n>>> plot_vmf_samples(left, x, y, z, mu, 5)\n>>> plot_vmf_samples(middle, x, y, z, mu, 20)\n>>> plot_vmf_samples(right, x, y, z, mu, 100)\n>>> plt.subplots_adjust(top=1, bottom=0.0, left=0.0,\n...                     right=1.0, wspace=0.)\n>>> plt.show() \n```", "```py\n>>> mu, kappa = np.array([0, 0, 1]), 20\n>>> samples = vonmises_fisher(mu, kappa).rvs(1000, random_state=rng)\n>>> mu_fit, kappa_fit = vonmises_fisher.fit(samples)\n>>> mu_fit, kappa_fit\n(array([0.01126519, 0.01044501, 0.99988199]), 19.306398751730995) \n```"]