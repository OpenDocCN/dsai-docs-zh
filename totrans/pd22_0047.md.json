["```py\nIn [1]: import pandas as pd\n\nIn [2]: import numpy as np\n\nIn [3]: def make_timeseries(start=\"2000-01-01\", end=\"2000-12-31\", freq=\"1D\", seed=None):\n ...:    index = pd.date_range(start=start, end=end, freq=freq, name=\"timestamp\")\n ...:    n = len(index)\n ...:    state = np.random.RandomState(seed)\n ...:    columns = {\n ...:        \"name\": state.choice([\"Alice\", \"Bob\", \"Charlie\"], size=n),\n ...:        \"id\": state.poisson(1000, size=n),\n ...:        \"x\": state.rand(n) * 2 - 1,\n ...:        \"y\": state.rand(n) * 2 - 1,\n ...:    }\n ...:    df = pd.DataFrame(columns, index=index, columns=sorted(columns))\n ...:    if df.index[-1] == end:\n ...:        df = df.iloc[:-1]\n ...:    return df\n ...: \n\nIn [4]: timeseries = [\n ...:    make_timeseries(freq=\"1min\", seed=i).rename(columns=lambda x: f\"{x}_{i}\")\n ...:    for i in range(10)\n ...: ]\n ...: \n\nIn [5]: ts_wide = pd.concat(timeseries, axis=1)\n\nIn [6]: ts_wide.head()\nOut[6]: \n id_0 name_0       x_0  ...   name_9       x_9       y_9\ntimestamp                                   ... \n2000-01-01 00:00:00   977  Alice -0.821225  ...  Charlie -0.957208 -0.757508\n2000-01-01 00:01:00  1018    Bob -0.219182  ...    Alice -0.414445 -0.100298\n2000-01-01 00:02:00   927  Alice  0.660908  ...  Charlie -0.325838  0.581859\n2000-01-01 00:03:00   997    Bob -0.852458  ...      Bob  0.992033 -0.686692\n2000-01-01 00:04:00   965    Bob  0.717283  ...  Charlie -0.924556 -0.184161\n\n[5 rows x 40 columns]\n\nIn [7]: ts_wide.to_parquet(\"timeseries_wide.parquet\") \n```", "```py\nIn [8]: columns = [\"id_0\", \"name_0\", \"x_0\", \"y_0\"]\n\nIn [9]: pd.read_parquet(\"timeseries_wide.parquet\")[columns]\nOut[9]: \n id_0 name_0       x_0       y_0\ntimestamp \n2000-01-01 00:00:00   977  Alice -0.821225  0.906222\n2000-01-01 00:01:00  1018    Bob -0.219182  0.350855\n2000-01-01 00:02:00   927  Alice  0.660908 -0.798511\n2000-01-01 00:03:00   997    Bob -0.852458  0.735260\n2000-01-01 00:04:00   965    Bob  0.717283  0.393391\n...                   ...    ...       ...       ...\n2000-12-30 23:56:00  1037    Bob -0.814321  0.612836\n2000-12-30 23:57:00   980    Bob  0.232195 -0.618828\n2000-12-30 23:58:00   965  Alice -0.231131  0.026310\n2000-12-30 23:59:00   984  Alice  0.942819  0.853128\n2000-12-31 00:00:00  1003  Alice  0.201125 -0.136655\n\n[525601 rows x 4 columns] \n```", "```py\nIn [10]: pd.read_parquet(\"timeseries_wide.parquet\", columns=columns)\nOut[10]: \n id_0 name_0       x_0       y_0\ntimestamp \n2000-01-01 00:00:00   977  Alice -0.821225  0.906222\n2000-01-01 00:01:00  1018    Bob -0.219182  0.350855\n2000-01-01 00:02:00   927  Alice  0.660908 -0.798511\n2000-01-01 00:03:00   997    Bob -0.852458  0.735260\n2000-01-01 00:04:00   965    Bob  0.717283  0.393391\n...                   ...    ...       ...       ...\n2000-12-30 23:56:00  1037    Bob -0.814321  0.612836\n2000-12-30 23:57:00   980    Bob  0.232195 -0.618828\n2000-12-30 23:58:00   965  Alice -0.231131  0.026310\n2000-12-30 23:59:00   984  Alice  0.942819  0.853128\n2000-12-31 00:00:00  1003  Alice  0.201125 -0.136655\n\n[525601 rows x 4 columns] \n```", "```py\nIn [11]: ts = make_timeseries(freq=\"30s\", seed=0)\n\nIn [12]: ts.to_parquet(\"timeseries.parquet\")\n\nIn [13]: ts = pd.read_parquet(\"timeseries.parquet\")\n\nIn [14]: ts\nOut[14]: \n id     name         x         y\ntimestamp \n2000-01-01 00:00:00  1041    Alice  0.889987  0.281011\n2000-01-01 00:00:30   988      Bob -0.455299  0.488153\n2000-01-01 00:01:00  1018    Alice  0.096061  0.580473\n2000-01-01 00:01:30   992      Bob  0.142482  0.041665\n2000-01-01 00:02:00   960      Bob -0.036235  0.802159\n...                   ...      ...       ...       ...\n2000-12-30 23:58:00  1022    Alice  0.266191  0.875579\n2000-12-30 23:58:30   974    Alice -0.009826  0.413686\n2000-12-30 23:59:00  1028  Charlie  0.307108 -0.656789\n2000-12-30 23:59:30  1002    Alice  0.202602  0.541335\n2000-12-31 00:00:00   987    Alice  0.200832  0.615972\n\n[1051201 rows x 4 columns] \n```", "```py\nIn [15]: ts.dtypes\nOut[15]: \nid        int64\nname     object\nx       float64\ny       float64\ndtype: object \n```", "```py\nIn [16]: ts.memory_usage(deep=True)  # memory usage in bytes\nOut[16]: \nIndex     8409608\nid        8409608\nname     65176434\nx         8409608\ny         8409608\ndtype: int64 \n```", "```py\nIn [17]: ts2 = ts.copy()\n\nIn [18]: ts2[\"name\"] = ts2[\"name\"].astype(\"category\")\n\nIn [19]: ts2.memory_usage(deep=True)\nOut[19]: \nIndex    8409608\nid       8409608\nname     1051495\nx        8409608\ny        8409608\ndtype: int64 \n```", "```py\nIn [20]: ts2[\"id\"] = pd.to_numeric(ts2[\"id\"], downcast=\"unsigned\")\n\nIn [21]: ts2[[\"x\", \"y\"]] = ts2[[\"x\", \"y\"]].apply(pd.to_numeric, downcast=\"float\")\n\nIn [22]: ts2.dtypes\nOut[22]: \nid        uint16\nname    category\nx        float32\ny        float32\ndtype: object \n```", "```py\nIn [23]: ts2.memory_usage(deep=True)\nOut[23]: \nIndex    8409608\nid       2102402\nname     1051495\nx        4204804\ny        4204804\ndtype: int64 \n```", "```py\nIn [24]: reduction = ts2.memory_usage(deep=True).sum() / ts.memory_usage(deep=True).sum()\n\nIn [25]: print(f\"{reduction:0.2f}\")\n0.20 \n```", "```py\nIn [26]: import pathlib\n\nIn [27]: N = 12\n\nIn [28]: starts = [f\"20{i:>02d}-01-01\" for i in range(N)]\n\nIn [29]: ends = [f\"20{i:>02d}-12-13\" for i in range(N)]\n\nIn [30]: pathlib.Path(\"data/timeseries\").mkdir(exist_ok=True)\n\nIn [31]: for i, (start, end) in enumerate(zip(starts, ends)):\n ....:    ts = make_timeseries(start=start, end=end, freq=\"1min\", seed=i)\n ....:    ts.to_parquet(f\"data/timeseries/ts-{i:0>2d}.parquet\")\n ....: \n```", "```py\ndata\n\u2514\u2500\u2500 timeseries\n    \u251c\u2500\u2500 ts-00.parquet\n    \u251c\u2500\u2500 ts-01.parquet\n    \u251c\u2500\u2500 ts-02.parquet\n    \u251c\u2500\u2500 ts-03.parquet\n    \u251c\u2500\u2500 ts-04.parquet\n    \u251c\u2500\u2500 ts-05.parquet\n    \u251c\u2500\u2500 ts-06.parquet\n    \u251c\u2500\u2500 ts-07.parquet\n    \u251c\u2500\u2500 ts-08.parquet\n    \u251c\u2500\u2500 ts-09.parquet\n    \u251c\u2500\u2500 ts-10.parquet\n    \u2514\u2500\u2500 ts-11.parquet \n```", "```py\nIn [32]: %%time\n ....: files = pathlib.Path(\"data/timeseries/\").glob(\"ts*.parquet\")\n ....: counts = pd.Series(dtype=int)\n ....: for path in files:\n ....:    df = pd.read_parquet(path)\n ....:    counts = counts.add(df[\"name\"].value_counts(), fill_value=0)\n ....: counts.astype(int)\n ....: \nCPU times: user 760 ms, sys: 26.1 ms, total: 786 ms\nWall time: 559 ms\nOut[32]: \nname\nAlice      1994645\nBob        1993692\nCharlie    1994875\ndtype: int64 \n```", "```py\nIn [1]: import pandas as pd\n\nIn [2]: import numpy as np\n\nIn [3]: def make_timeseries(start=\"2000-01-01\", end=\"2000-12-31\", freq=\"1D\", seed=None):\n ...:    index = pd.date_range(start=start, end=end, freq=freq, name=\"timestamp\")\n ...:    n = len(index)\n ...:    state = np.random.RandomState(seed)\n ...:    columns = {\n ...:        \"name\": state.choice([\"Alice\", \"Bob\", \"Charlie\"], size=n),\n ...:        \"id\": state.poisson(1000, size=n),\n ...:        \"x\": state.rand(n) * 2 - 1,\n ...:        \"y\": state.rand(n) * 2 - 1,\n ...:    }\n ...:    df = pd.DataFrame(columns, index=index, columns=sorted(columns))\n ...:    if df.index[-1] == end:\n ...:        df = df.iloc[:-1]\n ...:    return df\n ...: \n\nIn [4]: timeseries = [\n ...:    make_timeseries(freq=\"1min\", seed=i).rename(columns=lambda x: f\"{x}_{i}\")\n ...:    for i in range(10)\n ...: ]\n ...: \n\nIn [5]: ts_wide = pd.concat(timeseries, axis=1)\n\nIn [6]: ts_wide.head()\nOut[6]: \n id_0 name_0       x_0  ...   name_9       x_9       y_9\ntimestamp                                   ... \n2000-01-01 00:00:00   977  Alice -0.821225  ...  Charlie -0.957208 -0.757508\n2000-01-01 00:01:00  1018    Bob -0.219182  ...    Alice -0.414445 -0.100298\n2000-01-01 00:02:00   927  Alice  0.660908  ...  Charlie -0.325838  0.581859\n2000-01-01 00:03:00   997    Bob -0.852458  ...      Bob  0.992033 -0.686692\n2000-01-01 00:04:00   965    Bob  0.717283  ...  Charlie -0.924556 -0.184161\n\n[5 rows x 40 columns]\n\nIn [7]: ts_wide.to_parquet(\"timeseries_wide.parquet\") \n```", "```py\nIn [8]: columns = [\"id_0\", \"name_0\", \"x_0\", \"y_0\"]\n\nIn [9]: pd.read_parquet(\"timeseries_wide.parquet\")[columns]\nOut[9]: \n id_0 name_0       x_0       y_0\ntimestamp \n2000-01-01 00:00:00   977  Alice -0.821225  0.906222\n2000-01-01 00:01:00  1018    Bob -0.219182  0.350855\n2000-01-01 00:02:00   927  Alice  0.660908 -0.798511\n2000-01-01 00:03:00   997    Bob -0.852458  0.735260\n2000-01-01 00:04:00   965    Bob  0.717283  0.393391\n...                   ...    ...       ...       ...\n2000-12-30 23:56:00  1037    Bob -0.814321  0.612836\n2000-12-30 23:57:00   980    Bob  0.232195 -0.618828\n2000-12-30 23:58:00   965  Alice -0.231131  0.026310\n2000-12-30 23:59:00   984  Alice  0.942819  0.853128\n2000-12-31 00:00:00  1003  Alice  0.201125 -0.136655\n\n[525601 rows x 4 columns] \n```", "```py\nIn [10]: pd.read_parquet(\"timeseries_wide.parquet\", columns=columns)\nOut[10]: \n id_0 name_0       x_0       y_0\ntimestamp \n2000-01-01 00:00:00   977  Alice -0.821225  0.906222\n2000-01-01 00:01:00  1018    Bob -0.219182  0.350855\n2000-01-01 00:02:00   927  Alice  0.660908 -0.798511\n2000-01-01 00:03:00   997    Bob -0.852458  0.735260\n2000-01-01 00:04:00   965    Bob  0.717283  0.393391\n...                   ...    ...       ...       ...\n2000-12-30 23:56:00  1037    Bob -0.814321  0.612836\n2000-12-30 23:57:00   980    Bob  0.232195 -0.618828\n2000-12-30 23:58:00   965  Alice -0.231131  0.026310\n2000-12-30 23:59:00   984  Alice  0.942819  0.853128\n2000-12-31 00:00:00  1003  Alice  0.201125 -0.136655\n\n[525601 rows x 4 columns] \n```", "```py\nIn [11]: ts = make_timeseries(freq=\"30s\", seed=0)\n\nIn [12]: ts.to_parquet(\"timeseries.parquet\")\n\nIn [13]: ts = pd.read_parquet(\"timeseries.parquet\")\n\nIn [14]: ts\nOut[14]: \n id     name         x         y\ntimestamp \n2000-01-01 00:00:00  1041    Alice  0.889987  0.281011\n2000-01-01 00:00:30   988      Bob -0.455299  0.488153\n2000-01-01 00:01:00  1018    Alice  0.096061  0.580473\n2000-01-01 00:01:30   992      Bob  0.142482  0.041665\n2000-01-01 00:02:00   960      Bob -0.036235  0.802159\n...                   ...      ...       ...       ...\n2000-12-30 23:58:00  1022    Alice  0.266191  0.875579\n2000-12-30 23:58:30   974    Alice -0.009826  0.413686\n2000-12-30 23:59:00  1028  Charlie  0.307108 -0.656789\n2000-12-30 23:59:30  1002    Alice  0.202602  0.541335\n2000-12-31 00:00:00   987    Alice  0.200832  0.615972\n\n[1051201 rows x 4 columns] \n```", "```py\nIn [15]: ts.dtypes\nOut[15]: \nid        int64\nname     object\nx       float64\ny       float64\ndtype: object \n```", "```py\nIn [16]: ts.memory_usage(deep=True)  # memory usage in bytes\nOut[16]: \nIndex     8409608\nid        8409608\nname     65176434\nx         8409608\ny         8409608\ndtype: int64 \n```", "```py\nIn [17]: ts2 = ts.copy()\n\nIn [18]: ts2[\"name\"] = ts2[\"name\"].astype(\"category\")\n\nIn [19]: ts2.memory_usage(deep=True)\nOut[19]: \nIndex    8409608\nid       8409608\nname     1051495\nx        8409608\ny        8409608\ndtype: int64 \n```", "```py\nIn [20]: ts2[\"id\"] = pd.to_numeric(ts2[\"id\"], downcast=\"unsigned\")\n\nIn [21]: ts2[[\"x\", \"y\"]] = ts2[[\"x\", \"y\"]].apply(pd.to_numeric, downcast=\"float\")\n\nIn [22]: ts2.dtypes\nOut[22]: \nid        uint16\nname    category\nx        float32\ny        float32\ndtype: object \n```", "```py\nIn [23]: ts2.memory_usage(deep=True)\nOut[23]: \nIndex    8409608\nid       2102402\nname     1051495\nx        4204804\ny        4204804\ndtype: int64 \n```", "```py\nIn [24]: reduction = ts2.memory_usage(deep=True).sum() / ts.memory_usage(deep=True).sum()\n\nIn [25]: print(f\"{reduction:0.2f}\")\n0.20 \n```", "```py\nIn [26]: import pathlib\n\nIn [27]: N = 12\n\nIn [28]: starts = [f\"20{i:>02d}-01-01\" for i in range(N)]\n\nIn [29]: ends = [f\"20{i:>02d}-12-13\" for i in range(N)]\n\nIn [30]: pathlib.Path(\"data/timeseries\").mkdir(exist_ok=True)\n\nIn [31]: for i, (start, end) in enumerate(zip(starts, ends)):\n ....:    ts = make_timeseries(start=start, end=end, freq=\"1min\", seed=i)\n ....:    ts.to_parquet(f\"data/timeseries/ts-{i:0>2d}.parquet\")\n ....: \n```", "```py\ndata\n\u2514\u2500\u2500 timeseries\n    \u251c\u2500\u2500 ts-00.parquet\n    \u251c\u2500\u2500 ts-01.parquet\n    \u251c\u2500\u2500 ts-02.parquet\n    \u251c\u2500\u2500 ts-03.parquet\n    \u251c\u2500\u2500 ts-04.parquet\n    \u251c\u2500\u2500 ts-05.parquet\n    \u251c\u2500\u2500 ts-06.parquet\n    \u251c\u2500\u2500 ts-07.parquet\n    \u251c\u2500\u2500 ts-08.parquet\n    \u251c\u2500\u2500 ts-09.parquet\n    \u251c\u2500\u2500 ts-10.parquet\n    \u2514\u2500\u2500 ts-11.parquet \n```", "```py\nIn [32]: %%time\n ....: files = pathlib.Path(\"data/timeseries/\").glob(\"ts*.parquet\")\n ....: counts = pd.Series(dtype=int)\n ....: for path in files:\n ....:    df = pd.read_parquet(path)\n ....:    counts = counts.add(df[\"name\"].value_counts(), fill_value=0)\n ....: counts.astype(int)\n ....: \nCPU times: user 760 ms, sys: 26.1 ms, total: 786 ms\nWall time: 559 ms\nOut[32]: \nname\nAlice      1994645\nBob        1993692\nCharlie    1994875\ndtype: int64 \n```"]