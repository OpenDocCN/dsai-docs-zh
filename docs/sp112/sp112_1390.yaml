- en: Cross compilation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨编译
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/building/cross_compilation.html](https://docs.scipy.org/doc/scipy-1.12.0/building/cross_compilation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/building/cross_compilation.html](https://docs.scipy.org/doc/scipy-1.12.0/building/cross_compilation.html)
- en: Cross compilation is a complex topic, we only add some hopefully helpful hints
    here (for now). As of May 2023, cross-compilation based on `crossenv` is known
    to work, as used (for example) in conda-forge. Cross-compilation without `crossenv`
    requires some manual overrides. You instruct these overrides by passing options
    to `meson setup` via [meson-python](https://meson-python.readthedocs.io/en/latest/how-to-guides/meson-args.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 跨编译是一个复杂的主题，我们目前只添加了一些希望有帮助的提示。截至2023年5月，基于`crossenv`的跨编译已知可以工作，例如在conda-forge中使用。没有`crossenv`的跨编译需要一些手动覆盖。您可以通过向[meson-python](https://meson-python.readthedocs.io/en/latest/how-to-guides/meson-args.html)传递选项来指示这些覆盖项到`meson
    setup`中。
- en: 'All distributions that are known to successfully cross compile SciPy are using
    `python -m build` (`pypa/build`), but using `pip` for that should be possible
    as well. Here are links to the SciPy’s “build recipes” on those distros:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有已知成功进行SciPy跨编译的发行版都在使用`python -m build`（`pypa/build`），但使用`pip`也应该是可能的。以下是这些发行版上SciPy“构建配方”的链接：
- en: '[Void Linux](https://github.com/void-linux/void-packages/blob/master/srcpkgs/python3-scipy/template)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Void Linux](https://github.com/void-linux/void-packages/blob/master/srcpkgs/python3-scipy/template)'
- en: '[Nix](https://github.com/nixos/nixpkgs/blob/master/pkgs/development/python-modules/scipy/default.nix)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nix](https://github.com/nixos/nixpkgs/blob/master/pkgs/development/python-modules/scipy/default.nix)'
- en: '[Conda-forge](https://github.com/conda-forge/scipy-feedstock/blob/main/recipe/build.sh)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Conda-forge](https://github.com/conda-forge/scipy-feedstock/blob/main/recipe/build.sh)'
- en: See also [Meson’s documentation on cross compilation](https://mesonbuild.com/Cross-compilation.html)
    to learn what options you may need to pass to Meson to successfully cross compile.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Meson关于跨编译的文档](https://mesonbuild.com/Cross-compilation.html)以了解您可能需要向Meson传递哪些选项才能成功进行跨编译。
- en: 'One common hiccup is that `numpy` and `pythran` require running Python code
    in order to obtain their include directories. This tends to not work well, either
    accidentally picking up the packages from the build (native) Python rather than
    the host (cross) Python or requiring `crossenv` or QEMU to run the host Python.
    To avoid this problem, specify the paths to the relevant directories in your *cross
    file*:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见问题是，`numpy`和`pythran`需要运行Python代码以获取它们的包含目录。这往往效果不佳，可能会意外地从构建（本地）Python中获取软件包，而不是主机（跨）Python，或者需要`crossenv`或QEMU来运行主机Python。为了避免这个问题，在您的*跨文件*中指定相关目录的路径：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For more details and the current status around cross compilation, see:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关跨编译的更多详细信息和当前状态，请参阅：
- en: 'Tracking issue for SciPy cross-compilation needs and issues: [scipy#14812](https://github.com/scipy/scipy/issues/14812)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy跨编译需求和问题的跟踪问题：[scipy#14812](https://github.com/scipy/scipy/issues/14812)
- en: 'The state of cross compilation in Python: [pypackaging-native key issue page](https://pypackaging-native.github.io/key-issues/cross_compilation/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的跨编译状态：[pypackaging-native关键问题页面](https://pypackaging-native.github.io/key-issues/cross_compilation/)
