- en: scipy.fft.ifft2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft2.html#scipy.fft.ifft2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft2.html#scipy.fft.ifft2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the 2-D inverse discrete Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the 2-D discrete Fourier Transform over
    any number of axes in an M-D array by means of the Fast Fourier Transform (FFT).
    In other words, `ifft2(fft2(x)) == x` to within numerical accuracy. By default,
    the inverse transform is computed over the last two axes of the input array.
  prefs: []
  type: TYPE_NORMAL
- en: The input, analogously to [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft"),
    should be ordered in the same way as is returned by [`fft2`](scipy.fft.fft2.html#scipy.fft.fft2
    "scipy.fft.fft2"), i.e., it should have the term for zero frequency in the low-order
    corner of the two axes, the positive frequency terms in the first half of these
    axes, the term for the Nyquist frequency in the middle of the axes and the negative
    frequency terms in the second half of both axes, in order of decreasingly negative
    frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, can be complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape (length of each axis) of the output (`s[0]` refers to axis 0, `s[1]` to
    axis 1, etc.). This corresponds to *n* for `ifft(x, n)`. Along each axis, if the
    given shape is smaller than that of the input, the input is cropped. If it is
    larger, the input is padded with zeros. if *s* is not given, the shape of the
    input along the axes specified by *axes* is used. See notes for issue on [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft") zero padding.
  prefs: []
  type: TYPE_NORMAL
- en: '**axes**sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axes over which to compute the FFT. If not given, the last two axes are used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")).
    Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axes indicated by
    *axes*, or the last two axes if *axes* is not given.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If *s* and *axes* have different length, or *axes* not given and `len(s) !=
    2`.
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If an element of *axes* is larger than the number of axes of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft2`](scipy.fft.fft2.html#scipy.fft.fft2 "scipy.fft.fft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The forward 2-D FFT, of which [`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2")
    is the inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the N-D FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft")'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D inverse FFT.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft2`](#scipy.fft.ifft2 "scipy.fft.ifft2") is just [`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn
    "scipy.fft.ifftn") with a different default for *axes*.'
  prefs: []
  type: TYPE_NORMAL
- en: See [`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn") for details
    and a plotting example, and [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")
    for definition and conventions used.
  prefs: []
  type: TYPE_NORMAL
- en: Zero-padding, analogously with [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft"),
    is performed by appending zeros to the input along the specified dimension. Although
    this is the common approach, it might lead to surprising results. If another form
    of zero padding is desired, it must be performed before [`ifft2`](#scipy.fft.ifft2
    "scipy.fft.ifft2") is called.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
