- en: scipy.fft.fft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.fft.html#scipy.fft.fft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.fft.html#scipy.fft.fft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the 1-D discrete Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the 1-D *n*-point discrete Fourier Transform (DFT) with
    the efficient Fast Fourier Transform (FFT) algorithm [[1]](#r33a4a1a5944b-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, can be complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transformed axis of the output. If *n* is smaller than the length
    of the input, the input is cropped. If it is larger, the input is padded with
    zeros. If *n* is not given, the length of the input along the axis specified by
    *axis* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode. Default is “backward”, meaning no normalization on the forward
    transforms and scaling by `1/n` on the [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft"). “forward” instead applies the `1/n` factor on the forward transform.
    For `norm="ortho"`, both directions are scaled by `1/sqrt(n)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.6.0: `norm={"forward", "backward"}` options were added'
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See the
    notes below for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See below for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: if *axes* is larger than the last axis of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft`](scipy.fft.ifft.html#scipy.fft.ifft "scipy.fft.ifft")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of [`fft`](#scipy.fft.fft "scipy.fft.fft").
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft2`](scipy.fft.fft2.html#scipy.fft.fft2 "scipy.fft.fft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The 2-D FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fftn`](scipy.fft.fftn.html#scipy.fft.fftn "scipy.fft.fftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The N-D FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfftn`](scipy.fft.rfftn.html#scipy.fft.rfftn "scipy.fft.rfftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The N-D FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fftfreq`](scipy.fft.fftfreq.html#scipy.fft.fftfreq "scipy.fft.fftfreq")'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency bins for given FFT parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_fast_len`](scipy.fft.next_fast_len.html#scipy.fft.next_fast_len "scipy.fft.next_fast_len")'
  prefs: []
  type: TYPE_NORMAL
- en: Size to pad input to for most efficient transforms
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform
    (DFT) can be calculated efficiently, by using symmetries in the calculated terms.
    The symmetry is highest when *n* is a power of 2, and the transform is therefore
    most efficient for these sizes. For poorly factorizable sizes, [`scipy.fft`](../fft.html#module-scipy.fft
    "scipy.fft") uses Bluestein’s algorithm [[2]](#r33a4a1a5944b-2) and so is never
    worse than O(*n* log *n*). Further performance improvements may be seen by zero-padding
    the input using [`next_fast_len`](scipy.fft.next_fast_len.html#scipy.fft.next_fast_len
    "scipy.fft.next_fast_len").
  prefs: []
  type: TYPE_NORMAL
- en: If `x` is a 1d array, then the [`fft`](#scipy.fft.fft "scipy.fft.fft") is equivalent
    to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The frequency term `f=k/n` is found at `y[k]`. At `y[n/2]` we reach the Nyquist
    frequency and wrap around to the negative-frequency terms. So, for an 8-point
    transform, the frequencies of the result are [0, 1, 2, 3, -4, -3, -2, -1]. To
    rearrange the fft output so that the zero-frequency component is centered, like
    [-4, -3, -2, -1, 0, 1, 2, 3], use [`fftshift`](scipy.fft.fftshift.html#scipy.fft.fftshift
    "scipy.fft.fftshift").
  prefs: []
  type: TYPE_NORMAL
- en: Transforms can be done in single, double, or extended precision (long double)
    floating point. Half precision inputs will be converted to single precision and
    non-floating-point inputs will be converted to double precision.
  prefs: []
  type: TYPE_NORMAL
- en: If the data type of `x` is real, a “real FFT” algorithm is automatically used,
    which roughly halves the computation time. To increase efficiency a little further,
    use [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft "scipy.fft.rfft"), which does
    the same calculation, but only outputs half of the symmetrical spectrum. If the
    data are both real and symmetrical, the [`dct`](scipy.fft.dct.html#scipy.fft.dct
    "scipy.fft.dct") can again double the efficiency, by generating half of the spectrum
    from half of the signal.
  prefs: []
  type: TYPE_NORMAL
- en: When `overwrite_x=True` is specified, the memory referenced by `x` may be used
    by the implementation in any way. This may include reusing the memory for the
    result, but this is in no way guaranteed. You should not rely on the contents
    of `x` after the transform as this may change in future without warning.
  prefs: []
  type: TYPE_NORMAL
- en: The `workers` argument specifies the maximum number of parallel jobs to split
    the FFT computation into. This will execute independent 1-D FFTs within `x`. So,
    `x` must be at least 2-D and the non-transformed axes must be large enough to
    split into chunks. If `x` is too small, fewer jobs may be used than requested.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cooley, James W., and John W. Tukey, 1965, “An algorithm for the machine calculation
    of complex Fourier series,” *Math. Comput.* 19: 297-301.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bluestein, L., 1970, “A linear filtering approach to the computation of discrete
    Fourier transform”. *IEEE Transactions on Audio and Electroacoustics.* 18 (4):
    451-455.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, real input has an FFT which is Hermitian, i.e., symmetric
    in the real part and anti-symmetric in the imaginary part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-fft-fft-1.png](../Images/804529bc158e9d5b55381632892c2333.png)'
  prefs: []
  type: TYPE_IMG
