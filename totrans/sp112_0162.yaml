- en: scipy.interpolate.KroghInterpolator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.interpolate.KroghInterpolator
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Interpolating polynomial for a set of points.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一组点的插值多项式。
- en: The polynomial passes through all the pairs `(xi, yi)`. One may additionally
    specify a number of derivatives at each point *xi*; this is done by repeating
    the value *xi* and specifying the derivatives as successive *yi* values.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该多项式通过所有配对的`(xi, yi)`。还可以指定每个点*xi*处的多个导数；通过重复值*xi*并按顺序指定导数值*yi*来完成。
- en: Allows evaluation of the polynomial and all its derivatives. For reasons of
    numerical stability, this function does not compute the coefficients of the polynomial,
    although they can be obtained by evaluating all the derivatives.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 允许评估多项式及其所有导数。出于数值稳定性的原因，此函数不计算多项式的系数，但可以通过评估所有导数来获得它们。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**xi**array_like, shape (npoints, )'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**xi**类数组，形状（npoints，）'
- en: Known x-coordinates. Must be sorted in increasing order.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的x坐标。必须按升序排列。
- en: '**yi**array_like, shape (…, npoints, …)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**yi**类数组，形状（…，npoints，…）'
- en: Known y-coordinates. When an xi occurs two or more times in a row, the corresponding
    yi’s represent derivative values. The length of *yi* along the interpolation axis
    must be equal to the length of *xi*. Use the *axis* parameter to select the correct
    axis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 已知的y坐标。当xi连续出现两次或更多时，对应的yi表示导数值。沿插值轴的*yi*的长度必须等于*xi*的长度。使用*axis*参数选择正确的轴。
- en: '**axis**int, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**整型，可选'
- en: Axis in the *yi* array corresponding to the x-coordinate values. Defaults to
    `axis=0`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在*yi*数组中对应于x坐标值的轴。默认为`axis=0`。
- en: Notes
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Be aware that the algorithms implemented here are not necessarily the most numerically
    stable known. Moreover, even in a world of exact computation, unless the x coordinates
    are chosen very carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice
    - polynomial interpolation itself is a very ill-conditioned process due to the
    Runge phenomenon. In general, even with well-chosen x values, degrees higher than
    about thirty cause problems with numerical instability in this code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里实现的算法不一定是已知的最稳定的。此外，即使在精确计算的世界中，除非选择的x坐标非常谨慎 - Chebyshev零点（例如，cos(i*pi/n)）是一个很好的选择
    - 多项式插值本身也是一个非常病态的过程，因为Runge现象。一般来说，即使选择了良好的x值，在本代码中，大于约30的度数会导致数值不稳定性问题。
- en: Based on [[1]](#r47cfdf6b0bbf-1).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于[[1]](#r47cfdf6b0bbf-1)。
- en: References
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[1](#id1)]'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: Krogh, “Efficient Algorithms for Polynomial Interpolation and Numerical Differentiation”,
    1970.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Krogh，《多项式插值和数值微分的高效算法》，1970年。
- en: Examples
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: To produce a polynomial that is zero at 0 and 1 and has derivative 2 at 0, call
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个在0和1处为零且在0处导数为2的多项式，请调用
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This constructs the quadratic \(2x^2-2x\). The derivative condition is indicated
    by the repeated zero in the *xi* array; the corresponding yi values are 0, the
    function value, and 2, the derivative value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这构造了二次多项式\(2x^2-2x\)。在*xi*数组中通过重复的零指示导数条件；对应的yi值为0，函数值为2，导数值为2。
- en: 'For another example, given *xi*, *yi*, and a derivative *ypi* for each point,
    appropriate arrays can be constructed as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，对于给定的*xi*、*yi*和每个点的导数*ypi*，可以构建适当的数组如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To produce a vector-valued polynomial, supply a higher-dimensional array for
    *yi*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个向量值多项式，请为*yi*提供一个更高维度的数组：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This constructs a linear polynomial giving (2,3) at 0 and (4,5) at 1.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这构造了一个线性多项式，在0处给出(2,3)，在1处给出(4,5)。
- en: 'Attributes:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**dtype**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**'
- en: Methods
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`__call__`](scipy.interpolate.KroghInterpolator.__call__.html#scipy.interpolate.KroghInterpolator.__call__
    "scipy.interpolate.KroghInterpolator.__call__")(x) | Evaluate the interpolant
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`__call__`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator.__call__
    "scipy.interpolate.KroghInterpolator.__call__")(x) | 评估插值 |'
- en: '| [`derivative`](scipy.interpolate.KroghInterpolator.derivative.html#scipy.interpolate.KroghInterpolator.derivative
    "scipy.interpolate.KroghInterpolator.derivative")(x[, der]) | Evaluate a single
    derivative of the polynomial at the point *x*. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '[`derivative`](scipy.interpolate.KroghInterpolator.derivative.html#scipy.interpolate.KroghInterpolator.derivative
    "scipy.interpolate.KroghInterpolator.derivative")(x[, der]) | 在点 *x* 处评估单个多项式导数。'
- en: '| [`derivatives`](scipy.interpolate.KroghInterpolator.derivatives.html#scipy.interpolate.KroghInterpolator.derivatives
    "scipy.interpolate.KroghInterpolator.derivatives")(x[, der]) | Evaluate several
    derivatives of the polynomial at the point *x* |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '[`derivatives`](scipy.interpolate.KroghInterpolator.derivatives.html#scipy.interpolate.KroghInterpolator.derivatives
    "scipy.interpolate.KroghInterpolator.derivatives")(x[, der]) | 在点 *x* 处评估多个多项式导数。'
