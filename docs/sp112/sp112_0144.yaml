- en: scipy.integrate.RK23
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.RK23
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK23.html#scipy.integrate.RK23](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK23.html#scipy.integrate.RK23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK23.html#scipy.integrate.RK23](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK23.html#scipy.integrate.RK23)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Explicit Runge-Kutta method of order 3(2).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 显式三阶Runge-Kutta方法（2阶）。
- en: This uses the Bogacki-Shampine pair of formulas [[1]](#r92ed875e1372-1). The
    error is controlled assuming accuracy of the second-order method, but steps are
    taken using the third-order accurate formula (local extrapolation is done). A
    cubic Hermite polynomial is used for the dense output.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用Bogacki-Shampine配对的公式[[1]](#r92ed875e1372-1)。误差受二阶方法精度控制，但使用三阶准确公式进行步骤（局部外推完成）。稠密输出使用三次Hermite多项式。
- en: Can be applied in the complex domain.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可应用于复数域。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun**callable'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun**可调用对象'
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. `fun` must return an array of the same shape
    as `y`. See *vectorized* for more information.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的右手边：在时间`t`处状态`y`的时间导数。调用签名为`fun(t, y)`，其中`t`是标量，`y`是具有`len(y) = len(y0)`形状的ndarray。`fun`必须返回与`y`相同形状的数组。有关更多信息，请参见*vectorized*。
- en: '**t0**float'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**t0**浮点数'
- en: Initial time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时间。
- en: '**y0**array_like, shape (n,)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**y0**array_like，形状为(n,)'
- en: Initial state.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态。
- en: '**t_bound**float'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound**浮点数'
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间 - 积分不会超出此时间。它还确定积分的方向。
- en: '**first_step**float or None, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**first_step**浮点数或None，可选'
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 初始步长。默认为`None`，表示算法应选择。
- en: '**max_step**float, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_step**浮点数，可选'
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最大步长。默认为np.inf，即步长无界，完全由求解器确定。
- en: '**rtol, atol**float and array_like, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol, atol**浮点数和array_like，可选'
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相对和绝对容差。求解器保持局部误差估计小于`atol + rtol * abs(y)`。这里*rtol*控制相对精度（正确数字的数量），而*atol*控制绝对精度（正确小数位数）。为了达到期望的*rtol*，将*atol*设置为比`rtol
    * abs(y)`预期的最小值更小，以便*rtol*主导可接受的误差。如果*atol*大于`rtol * abs(y)`，则不能保证正确数字的数量。反之，为了达到期望的*atol*，设置*rtol*使得`rtol
    * abs(y)`始终小于*atol*可能是有益的。如果y的组成部分具有不同的比例，可能有益于通过传递形状为(n,)的array_like为*atol*的不同组件设置不同的*atol*值。*rtol*的默认值为1e-3，*atol*的默认值为1e-6。
- en: '**vectorized**bool, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**vectorized**布尔值，可选'
- en: Whether *fun* may be called in a vectorized fashion. False (default) is recommended
    for this solver.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*fun*是否可以以向量化方式调用。对于此求解器，建议设置为False（默认）。'
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为False，则*fun*始终使用形状为`(n,)`的`y`调用，其中`n = len(y0)`。
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为True，则*fun*可以使用形状为`(n, k)`的`y`调用，其中`k`为整数。在这种情况下，*fun*必须表现出`fun(t,
    y)[:, i] == fun(t, y[:, i])`的行为（即返回数组的每一列是对应`y`列的状态的时间导数）。
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by methods ‘Radau’ and ‘BDF’, but will result in slower execution
    for this solver.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`vectorized=True`允许‘Radau’和‘BDF’方法更快地近似雅可比矩阵的有限差分，但会导致此求解器执行速度较慢。
- en: References
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id1)]'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: P. Bogacki, L.F. Shampine, “A 3(2) Pair of Runge-Kutta Formulas”, Appl. Math.
    Lett. Vol. 2, No. 4\. pp. 321-325, 1989.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: P. Bogacki, L.F. Shampine, “A 3(2) Pair of Runge-Kutta Formulas”, Appl. Math.
    Lett. Vol. 2, No. 4\. pp. 321-325, 1989.
- en: 'Attributes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '属性:'
- en: '**n**int'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int'
- en: Number of equations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 方程数量。
- en: '**status**string'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**status**string'
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器的当前状态：'running'（运行中）、'finished'（已完成）或 'failed'（失败）。
- en: '**t_bound**float'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound**float'
- en: Boundary time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间。
- en: '**direction**float'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**direction**float'
- en: 'Integration direction: +1 or -1.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 积分方向：+1 或 -1。
- en: '**t**float'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**t**float'
- en: Current time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当前时间。
- en: '**y**ndarray'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**ndarray'
- en: Current state.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当前状态。
- en: '**t_old**float'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_old**float'
- en: Previous time. None if no steps were made yet.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前一次时间。如果尚未进行步骤，则为 None。
- en: '**step_size**float'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**step_size**float'
- en: Size of the last successful step. None if no steps were made yet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次成功步长的大小。如果尚未进行步骤，则为 None。
- en: '**nfev**int'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**nfev**int'
- en: Number evaluations of the system’s right-hand side.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 系统右侧函数的评估次数。
- en: '**njev**int'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**njev**int'
- en: Number of evaluations of the Jacobian. Is always 0 for this solver as it does
    not use the Jacobian.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 雅可比矩阵的评估次数。对于此求解器始终为 0，因为它不使用雅可比矩阵。
- en: '**nlu**int'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**nlu**int'
- en: Number of LU decompositions. Is always 0 for this solver.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: LU 分解次数。对于此求解器始终为 0。
- en: Methods
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`dense_output`](scipy.integrate.RK23.dense_output.html#scipy.integrate.RK23.dense_output
    "scipy.integrate.RK23.dense_output")() | Compute a local interpolant over the
    last successful step. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`dense_output`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.RK23.dense_output.html#scipy.integrate.RK23.dense_output
    "scipy.integrate.RK23.dense_output")() | 计算在最后一次成功步骤上的局部插值。 |'
- en: '| [`step`](scipy.integrate.RK23.step.html#scipy.integrate.RK23.step "scipy.integrate.RK23.step")()
    | Perform one integration step. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`step`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.RK23.step.html#scipy.integrate.RK23.step
    "scipy.integrate.RK23.step")() | 执行一步积分。 |'
