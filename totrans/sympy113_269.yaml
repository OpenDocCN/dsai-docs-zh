- en: Polygons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/geometry/polygons.html](https://docs.sympy.org/latest/modules/geometry/polygons.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A two-dimensional polygon.
  prefs: []
  type: TYPE_NORMAL
- en: A simple polygon in space. Can be constructed from a sequence of points or from
    a center, radius, number of sides and rotation angle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vertices**'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If \(> 0\), an n-sided RegularPolygon is created. Default value is \(0\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GeometryError**'
  prefs: []
  type: TYPE_NORMAL
- en: If all parameters are not Points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Polygons are treated as closed paths rather than 2D areas so some calculations
    can be be negative or positive (e.g., area) based on the orientation of the points.
  prefs: []
  type: TYPE_NORMAL
- en: Any consecutive identical points are reduced to a single point and any points
    collinear and between two points will be removed unless they are needed to define
    an explicit intersection (see examples).
  prefs: []
  type: TYPE_NORMAL
- en: A Triangle, Segment or Point will be returned when there are 3 or fewer points
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The area of a polygon is calculated as positive when vertices are traversed
    in a ccw direction. When the sides of a polygon cross the area will have positive
    and negative contributions. The following defines a Z shape where the bottom right
    connects back to the top left.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When the keyword \(n\) is used to define the number of sides of the Polygon
    then a RegularPolygon is created and the other arguments are interpreted as center,
    radius and rotation. The unrotated RegularPolygon will always have a vertex at
    Point(r, 0) where \(r\) is the radius of the circle that circumscribes the RegularPolygon.
    Its method \(spin\) can be used to increment that angle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment"),
    [`Triangle`](#sympy.geometry.polygon.Triangle "sympy.geometry.polygon.Triangle")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| area |  |'
  prefs: []
  type: TYPE_TB
- en: '| angles |  |'
  prefs: []
  type: TYPE_TB
- en: '| perimeter |  |'
  prefs: []
  type: TYPE_TB
- en: '| vertices |  |'
  prefs: []
  type: TYPE_TB
- en: '| centroid |  |'
  prefs: []
  type: TYPE_TB
- en: '| sides |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The internal angle at each vertex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angles** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary where each key is a vertex and each value is the internal angle
    at that vertex. The vertices are represented as Points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.LinearEntity.angle_between`](lines.html#sympy.geometry.line.LinearEntity.angle_between
    "sympy.geometry.line.LinearEntity.angle_between")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A parameterized point on the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter, varying from 0 to 1, assigns points to the position on the perimeter
    that is that fraction of the total perimeter. So the point evaluated at t=1/2
    would return the point from the first vertex that is 1/2 way around the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default value is ‘t’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arbitrary_point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: When \(parameter\) already appears in the Polygon’s definition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The area of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The area calculation can be positive or negative based on the orientation of
    the points. If any side of the polygon crosses any other side, there will be areas
    having opposite signs.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Z shaped polygon (with the lower right connecting back to the upper
    left) the areas cancel out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the M shaped polygon, areas do not cancel because no side crosses any other
    (though there is a point of contact).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.ellipse.Ellipse.area`](ellipses.html#sympy.geometry.ellipse.Ellipse.area
    "sympy.geometry.ellipse.Ellipse.area")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns angle bisectors of a polygon. If prec is given then approximate the
    point defining the ray to that precision.
  prefs: []
  type: TYPE_NORMAL
- en: The distance between the points defining the bisector ray is 1.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple (xmin, ymin, xmax, ymax) representing the bounding rectangle
    for the geometric figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The centroid of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**centroid** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.util.centroid`](utils.html#sympy.geometry.util.centroid "sympy.geometry.util.centroid")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns a tuple of two polygon segments that lie above and below the intersecting
    line respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**line: Line object of geometry module**'
  prefs: []
  type: TYPE_NORMAL
- en: line which cuts the Polygon. The part of the Polygon that lies above and below
    this line is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'upper_polygon, lower_polygon: Polygon objects or None'
  prefs: []
  type: TYPE_NORMAL
- en: upper_polygon is the polygon that lies above the given line. lower_polygon is
    the polygon that lies below the given line. upper_polygon and lower polygon are
    `None` when no polygon exists above the line or below the line.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError: When the line does not intersect the polygon**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R553](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/sympy/sympy/wiki/A-method-to-return-a-cut-section-of-any-polygon-geometry](https://github.com/sympy/sympy/wiki/A-method-to-return-a-cut-section-of-any-polygon-geometry)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shortest distance between self and o.
  prefs: []
  type: TYPE_NORMAL
- en: If o is a point, then self does not need to be convex. If o is another polygon
    self and o must be convex.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Return True if p is enclosed by (is inside of) self.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**encloses_point** : True, False or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Being on the border of self is considered False.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.ellipse.Ellipse.encloses_point`](ellipses.html#sympy.geometry.ellipse.Ellipse.encloses_point
    "sympy.geometry.ellipse.Ellipse.encloses_point")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R554](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://paulbourke.net/geometry/polygonmesh/#insidepoly](https://paulbourke.net/geometry/polygonmesh/#insidepoly)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first moment of area of a two-dimensional polygon with respect to
    a certain point of interest.
  prefs: []
  type: TYPE_NORMAL
- en: First moment of area is a measure of the distribution of the area of a polygon
    in relation to an axis. The first moment of area of the entire polygon about its
    own centroid is always zero. Therefore, here it is calculated for an area, above
    or below a certain point of interest, that makes up a smaller portion of the polygon.
    This area is bounded by the point of interest and the extreme end (top or bottom)
    of the polygon. The first moment for this area is is then determined about the
    centroidal axis of the initial polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point: Point, two-tuple of sympifyable objects, or None (default=None)**'
  prefs: []
  type: TYPE_NORMAL
- en: point is the point above or below which the area of interest lies If `point=None`
    then the centroid acts as the point of interest.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q_x, Q_y: number or SymPy expressions'
  prefs: []
  type: TYPE_NORMAL
- en: Q_x is the first moment of area about the x-axis Q_y is the first moment of
    area about the y-axis A negative sign indicates that the section modulus is determined
    for a section below (or left of) the centroidal axis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R555](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://skyciv.com/docs/tutorials/section-tutorials/calculating-the-statical-or-first-moment-of-area-of-beam-sections/?cc=BMD](https://skyciv.com/docs/tutorials/section-tutorials/calculating-the-statical-or-first-moment-of-area-of-beam-sections/?cc=BMD)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R556](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mechanicalc.com/reference/cross-sections](https://mechanicalc.com/reference/cross-sections)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The intersection of polygon and geometry entity.
  prefs: []
  type: TYPE_NORMAL
- en: The intersection may be empty and can contain individual Points and complete
    Line Segments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other: GeometryEntity**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** : list'
  prefs: []
  type: TYPE_NORMAL
- en: The list of Segments and Points
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Is the polygon convex?
  prefs: []
  type: TYPE_NORMAL
- en: A polygon is convex if all its interior angles are less than 180 degrees and
    there are no intersections between sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_convex** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: True if this polygon is convex, False otherwise.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.util.convex_hull`](utils.html#sympy.geometry.util.convex_hull
    "sympy.geometry.util.convex_hull")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The perimeter of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**perimeter** : number or Basic instance'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.length`](lines.html#sympy.geometry.line.Segment.length
    "sympy.geometry.line.Segment.length")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The plot interval for the default geometric plot of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default value is ‘t’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**plot_interval** : list (plot interval)'
  prefs: []
  type: TYPE_NORMAL
- en: '[parameter, lower_bound, upper_bound]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Returns the polar modulus of a two-dimensional polygon
  prefs: []
  type: TYPE_NORMAL
- en: It is a constituent of the second moment of area, linked through the perpendicular
    axis theorem. While the planar second moment of area describes an object’s resistance
    to deflection (bending) when subjected to a force applied to a plane parallel
    to the central axis, the polar second moment of area describes an object’s resistance
    to deflection when subjected to a moment applied in a plane perpendicular to the
    object’s central axis (i.e. parallel to the cross-section)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R557](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Polar_moment_of_inertia](https://en.wikipedia.org/wiki/Polar_moment_of_inertia)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns the second moment and product moment of area of a two dimensional polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point, two-tuple of sympifyable objects, or None(default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: point is the point about which second moment of area is to be found. If “point=None”
    it will be calculated about the axis passing through the centroid of the polygon.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**I_xx, I_yy, I_xy** : number or SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: I_xx, I_yy are second moment of area of a two dimensional polygon. I_xy is product
    moment of area of a two dimensional polygon.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R558](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Second_moment_of_area](https://en.wikipedia.org/wiki/Second_moment_of_area)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns a tuple with the section modulus of a two-dimensional polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Section modulus is a geometric property of a polygon defined as the ratio of
    second moment of area to the distance of the extreme end of the polygon from the
    centroidal axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point, two-tuple of sympifyable objects, or None(default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: point is the point at which section modulus is to be found. If “point=None”
    it will be calculated for the point farthest from the centroidal axis of the polygon.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'S_x, S_y: numbers or SymPy expressions'
  prefs: []
  type: TYPE_NORMAL
- en: S_x is the section modulus with respect to the x-axis S_y is the section modulus
    with respect to the y-axis A negative sign indicates that the section modulus
    is determined for a point below the centroidal axis
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R559](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Section_modulus](https://en.wikipedia.org/wiki/Section_modulus)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The directed line segments that form the sides of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sides** : list of sides'
  prefs: []
  type: TYPE_NORMAL
- en: Each side is a directed Segment.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The vertices of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vertices** : list of Points'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When iterating over the vertices, it is more efficient to index self rather
    than to request the vertices and index them. Only use the vertices when you want
    to process all of them at once. This is even more important with RegularPolygons
    that calculate each vertex.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: A regular polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Such a polygon has all internal angles equal and all sides the same length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**center** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**radius** : number or Basic instance'
  prefs: []
  type: TYPE_NORMAL
- en: The distance from the center to a vertex
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of sides
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GeometryError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the \(center\) is not a Point, or the \(radius\) is not a number or Basic
    instance, or the number of sides, \(n\), is less than three.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: A RegularPolygon can be instantiated with Polygon with the kwarg n.
  prefs: []
  type: TYPE_NORMAL
- en: Regular polygons are instantiated with a center, radius, number of sides and
    a rotation angle. Whereas the arguments of a Polygon are vertices, the vertices
    of the RegularPolygon must be obtained with the vertices method.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`Polygon`](#sympy.geometry.polygon.Polygon "sympy.geometry.polygon.Polygon")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| vertices |  |'
  prefs: []
  type: TYPE_TB
- en: '| center |  |'
  prefs: []
  type: TYPE_TB
- en: '| radius |  |'
  prefs: []
  type: TYPE_TB
- en: '| rotation |  |'
  prefs: []
  type: TYPE_TB
- en: '| apothem |  |'
  prefs: []
  type: TYPE_TB
- en: '| interior_angle |  |'
  prefs: []
  type: TYPE_TB
- en: '| exterior_angle |  |'
  prefs: []
  type: TYPE_TB
- en: '| circumcircle |  |'
  prefs: []
  type: TYPE_TB
- en: '| incircle |  |'
  prefs: []
  type: TYPE_TB
- en: '| angles |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Returns a dictionary with keys, the vertices of the Polygon, and values, the
    interior angle at each vertex.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The inradius of the RegularPolygon.
  prefs: []
  type: TYPE_NORMAL
- en: The apothem/inradius is the radius of the inscribed circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**apothem** : number or instance of Basic'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.length`](lines.html#sympy.geometry.line.Segment.length
    "sympy.geometry.line.Segment.length"), [`sympy.geometry.ellipse.Circle.radius`](ellipses.html#sympy.geometry.ellipse.Circle.radius
    "sympy.geometry.ellipse.Circle.radius")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Returns the area.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Returns the center point, the radius, the number of sides, and the orientation
    angle.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The center of the RegularPolygon
  prefs: []
  type: TYPE_NORMAL
- en: This is also the center of the circumscribing circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**center** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.ellipse.Ellipse.center`](ellipses.html#sympy.geometry.ellipse.Ellipse.center
    "sympy.geometry.ellipse.Ellipse.center")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The center of the RegularPolygon
  prefs: []
  type: TYPE_NORMAL
- en: This is also the center of the circumscribing circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**center** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.ellipse.Ellipse.center`](ellipses.html#sympy.geometry.ellipse.Ellipse.center
    "sympy.geometry.ellipse.Ellipse.center")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Alias for center.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The circumcircle of the RegularPolygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**circumcircle** : Circle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`circumcenter`](#sympy.geometry.polygon.RegularPolygon.circumcenter "sympy.geometry.polygon.RegularPolygon.circumcenter"),
    [`sympy.geometry.ellipse.Circle`](ellipses.html#sympy.geometry.ellipse.Circle
    "sympy.geometry.ellipse.Circle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Alias for radius.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Return True if p is enclosed by (is inside of) self.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**encloses_point** : True, False or None'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Being on the border of self is considered False.
  prefs: []
  type: TYPE_NORMAL
- en: The general Polygon.encloses_point method is called only if a point is not within
    or beyond the incircle or circumcircle, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.ellipse.Ellipse.encloses_point`](ellipses.html#sympy.geometry.ellipse.Ellipse.encloses_point
    "sympy.geometry.ellipse.Ellipse.encloses_point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Measure of the exterior angles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exterior_angle** : number'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.angle_between`](lines.html#sympy.geometry.line.LinearEntity.angle_between
    "sympy.geometry.line.LinearEntity.angle_between")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The incircle of the RegularPolygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**incircle** : Circle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`inradius`](#sympy.geometry.polygon.RegularPolygon.inradius "sympy.geometry.polygon.RegularPolygon.inradius"),
    [`sympy.geometry.ellipse.Circle`](ellipses.html#sympy.geometry.ellipse.Circle
    "sympy.geometry.ellipse.Circle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Alias for apothem.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Measure of the interior angles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**interior_angle** : number'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.angle_between`](lines.html#sympy.geometry.line.LinearEntity.angle_between
    "sympy.geometry.line.LinearEntity.angle_between")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns the length of the sides.
  prefs: []
  type: TYPE_NORMAL
- en: The half-length of the side and the apothem form two legs of a right triangle
    whose hypotenuse is the radius of the regular polygon.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Radius of the RegularPolygon
  prefs: []
  type: TYPE_NORMAL
- en: This is also the radius of the circumscribing circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**radius** : number or instance of Basic'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.length`](lines.html#sympy.geometry.line.Segment.length
    "sympy.geometry.line.Segment.length"), [`sympy.geometry.ellipse.Circle.radius`](ellipses.html#sympy.geometry.ellipse.Circle.radius
    "sympy.geometry.ellipse.Circle.radius")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Override GeometryEntity.reflect since this is not made of only points.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Override GeometryEntity.rotate to first rotate the RegularPolygon about its
    center.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rotation`](#sympy.geometry.polygon.RegularPolygon.rotation "sympy.geometry.polygon.RegularPolygon.rotation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`spin`](#sympy.geometry.polygon.RegularPolygon.spin "sympy.geometry.polygon.RegularPolygon.spin")'
  prefs: []
  type: TYPE_NORMAL
- en: Rotates a RegularPolygon in place
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: CCW angle by which the RegularPolygon is rotated
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rotation** : number or instance of Basic'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Numerical rotation angles are made canonical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Override GeometryEntity.scale since it is the radius that must be scaled (if
    x == y) or else a new Polygon must be returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Symmetric scaling returns a RegularPolygon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Asymmetric scaling returns a kite as a Polygon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Increment *in place* the virtual Polygon’s rotation by ccw angle.
  prefs: []
  type: TYPE_NORMAL
- en: 'See also: rotate method which moves the center.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rotation`](#sympy.geometry.polygon.RegularPolygon.rotation "sympy.geometry.polygon.RegularPolygon.rotation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`rotate`](#sympy.geometry.polygon.RegularPolygon.rotate "sympy.geometry.polygon.RegularPolygon.rotate")'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a copy of the RegularPolygon rotated about a Point
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The vertices of the RegularPolygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vertices** : list'
  prefs: []
  type: TYPE_NORMAL
- en: Each vertex is a Point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: A polygon with three vertices and three sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** : sequence of Points'
  prefs: []
  type: TYPE_NORMAL
- en: '**keyword: asa, sas, or sss to specify sides/angles of the triangle**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GeometryError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the number of vertices is not equal to three, or one of the vertices is not
    a Point, or a valid keyword is not given.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Keywords sss, sas, or asa can be used to give the desired side lengths (in
    order) and interior angles (in degrees) that define the triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`Polygon`](#sympy.geometry.polygon.Polygon "sympy.geometry.polygon.Polygon")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| vertices |  |'
  prefs: []
  type: TYPE_TB
- en: '| altitudes |  |'
  prefs: []
  type: TYPE_TB
- en: '| orthocenter |  |'
  prefs: []
  type: TYPE_TB
- en: '| circumcenter |  |'
  prefs: []
  type: TYPE_TB
- en: '| circumradius |  |'
  prefs: []
  type: TYPE_TB
- en: '| circumcircle |  |'
  prefs: []
  type: TYPE_TB
- en: '| inradius |  |'
  prefs: []
  type: TYPE_TB
- en: '| incircle |  |'
  prefs: []
  type: TYPE_TB
- en: '| exradii |  |'
  prefs: []
  type: TYPE_TB
- en: '| medians |  |'
  prefs: []
  type: TYPE_TB
- en: '| medial |  |'
  prefs: []
  type: TYPE_TB
- en: '| nine_point_circle |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The altitudes of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: An altitude of a triangle is a segment through a vertex, perpendicular to the
    opposite side, with length being the height of the vertex measured from the line
    containing the side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**altitudes** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary consists of keys which are vertices and values which are Segments.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Segment.length`](lines.html#sympy.geometry.line.Segment.length
    "sympy.geometry.line.Segment.length")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: The angle bisectors of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: An angle bisector of a triangle is a straight line through a vertex which cuts
    the corresponding angle in half.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bisectors** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Each key is a vertex (Point) and each value is the corresponding bisector (Segment).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The circumcenter of the triangle
  prefs: []
  type: TYPE_NORMAL
- en: The circumcenter is the center of the circumcircle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**circumcenter** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The circle which passes through the three vertices of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**circumcircle** : Circle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.ellipse.Circle`](ellipses.html#sympy.geometry.ellipse.Circle
    "sympy.geometry.ellipse.Circle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: The radius of the circumcircle of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**circumradius** : number of Basic instance'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.ellipse.Circle.radius`](ellipses.html#sympy.geometry.ellipse.Circle.radius
    "sympy.geometry.ellipse.Circle.radius")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The Euler line of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The line which passes through circumcenter, centroid and orthocenter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eulerline** : Line (or Point for equilateral triangles in which case all'
  prefs: []
  type: TYPE_NORMAL
- en: centers coincide)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Excenters of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: An excenter is the center of a circle that is tangent to a side of the triangle
    and the extensions of the other two sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**excenters** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The excenters are keyed to the side of the triangle to which their corresponding
    excircle is tangent: The center is keyed, e.g. the excenter of a circle touching
    side 0 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.polygon.Triangle.exradii`](#sympy.geometry.polygon.Triangle.exradii
    "sympy.geometry.polygon.Triangle.exradii")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R560](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Excircles.html](https://mathworld.wolfram.com/Excircles.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The radius of excircles of a triangle.
  prefs: []
  type: TYPE_NORMAL
- en: An excircle of the triangle is a circle lying outside the triangle, tangent
    to one of its sides and tangent to the extensions of the other two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exradii** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The exradius touches the side of the triangle to which it is keyed, e.g. the
    exradius touching side 2 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.polygon.Triangle.inradius`](#sympy.geometry.polygon.Triangle.inradius
    "sympy.geometry.polygon.Triangle.inradius")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R561](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Exradius.html](https://mathworld.wolfram.com/Exradius.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R562](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Excircles.html](https://mathworld.wolfram.com/Excircles.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: The center of the incircle.
  prefs: []
  type: TYPE_NORMAL
- en: The incircle is the circle which lies inside the triangle and touches all three
    sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**incenter** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`incircle`](#sympy.geometry.polygon.Triangle.incircle "sympy.geometry.polygon.Triangle.incircle"),
    [`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: The incircle of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The incircle is the circle which lies inside the triangle and touches all three
    sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**incircle** : Circle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.ellipse.Circle`](ellipses.html#sympy.geometry.ellipse.Circle
    "sympy.geometry.ellipse.Circle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The radius of the incircle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**inradius** : number of Basic instance'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`incircle`](#sympy.geometry.polygon.Triangle.incircle "sympy.geometry.polygon.Triangle.incircle"),
    [`sympy.geometry.ellipse.Circle.radius`](ellipses.html#sympy.geometry.ellipse.Circle.radius
    "sympy.geometry.ellipse.Circle.radius")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Are all the sides the same length?
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_equilateral** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.entity.GeometryEntity.is_similar`](entities.html#sympy.geometry.entity.GeometryEntity.is_similar
    "sympy.geometry.entity.GeometryEntity.is_similar"), [`RegularPolygon`](#sympy.geometry.polygon.RegularPolygon
    "sympy.geometry.polygon.RegularPolygon"), [`is_isosceles`](#sympy.geometry.polygon.Triangle.is_isosceles
    "sympy.geometry.polygon.Triangle.is_isosceles"), [`is_right`](#sympy.geometry.polygon.Triangle.is_right
    "sympy.geometry.polygon.Triangle.is_right"), [`is_scalene`](#sympy.geometry.polygon.Triangle.is_scalene
    "sympy.geometry.polygon.Triangle.is_scalene")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Are two or more of the sides the same length?
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_isosceles** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_equilateral`](#sympy.geometry.polygon.Triangle.is_equilateral "sympy.geometry.polygon.Triangle.is_equilateral"),
    [`is_right`](#sympy.geometry.polygon.Triangle.is_right "sympy.geometry.polygon.Triangle.is_right"),
    [`is_scalene`](#sympy.geometry.polygon.Triangle.is_scalene "sympy.geometry.polygon.Triangle.is_scalene")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Is the triangle right-angled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_right** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.is_perpendicular`](lines.html#sympy.geometry.line.LinearEntity.is_perpendicular
    "sympy.geometry.line.LinearEntity.is_perpendicular"), [`is_equilateral`](#sympy.geometry.polygon.Triangle.is_equilateral
    "sympy.geometry.polygon.Triangle.is_equilateral"), [`is_isosceles`](#sympy.geometry.polygon.Triangle.is_isosceles
    "sympy.geometry.polygon.Triangle.is_isosceles"), [`is_scalene`](#sympy.geometry.polygon.Triangle.is_scalene
    "sympy.geometry.polygon.Triangle.is_scalene")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Are all the sides of the triangle of different lengths?
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_scalene** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_equilateral`](#sympy.geometry.polygon.Triangle.is_equilateral "sympy.geometry.polygon.Triangle.is_equilateral"),
    [`is_isosceles`](#sympy.geometry.polygon.Triangle.is_isosceles "sympy.geometry.polygon.Triangle.is_isosceles"),
    [`is_right`](#sympy.geometry.polygon.Triangle.is_right "sympy.geometry.polygon.Triangle.is_right")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Is another triangle similar to this one.
  prefs: []
  type: TYPE_NORMAL
- en: Two triangles are similar if one can be uniformly scaled to the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other: Triangle**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_similar** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.entity.GeometryEntity.is_similar`](entities.html#sympy.geometry.entity.GeometryEntity.is_similar
    "sympy.geometry.entity.GeometryEntity.is_similar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: The medial triangle of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The triangle which is formed from the midpoints of the three sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**medial** : Triangle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.midpoint`](lines.html#sympy.geometry.line.Segment.midpoint
    "sympy.geometry.line.Segment.midpoint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: The medians of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: A median of a triangle is a straight line through a vertex and the midpoint
    of the opposite side, and divides the triangle into two equal areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**medians** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: Each key is a vertex (Point) and each value is the median (Segment) at that
    point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.midpoint`](points.html#sympy.geometry.point.Point.midpoint
    "sympy.geometry.point.Point.midpoint"), [`sympy.geometry.line.Segment.midpoint`](lines.html#sympy.geometry.line.Segment.midpoint
    "sympy.geometry.line.Segment.midpoint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: The nine-point circle of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: Nine-point circle is the circumcircle of the medial triangle, which passes through
    the feet of altitudes and the middle points of segments connecting the vertices
    and the orthocenter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nine_point_circle** : Circle'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.midpoint`](lines.html#sympy.geometry.line.Segment.midpoint
    "sympy.geometry.line.Segment.midpoint"), [`sympy.geometry.polygon.Triangle.medial`](#sympy.geometry.polygon.Triangle.medial
    "sympy.geometry.polygon.Triangle.medial"), [`sympy.geometry.polygon.Triangle.orthocenter`](#sympy.geometry.polygon.Triangle.orthocenter
    "sympy.geometry.polygon.Triangle.orthocenter")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: The orthocenter of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The orthocenter is the intersection of the altitudes of a triangle. It may lie
    inside, outside or on the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**orthocenter** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: The triangle’s vertices
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**vertices** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Each element in the tuple is a Point
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
