- en: NumPy 1.15.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.15.0 发行说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.15.0-notes.html](https://numpy.org/doc/1.26/release/1.15.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/1.26/release/1.15.0-notes.html](https://numpy.org/doc/1.26/release/1.15.0-notes.html)'
- en: NumPy 1.15.0 is a release with an unusual number of cleanups, many deprecations
    of old functions, and improvements to many existing functions. Please read the
    detailed descriptions below to see if you are affected.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.15.0 是一个进行大量清理、许多旧功能弃用以及改进现有功能的特殊版本。请阅读下面的详细描述，以确定您是否受影响。
- en: For testing, we have switched to pytest as a replacement for the no longer maintained
    nose framework. The old nose based interface remains for downstream projects who
    may still be using it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，我们已经切换到 pytest 作为不再维护的 nose 框架的替代品。老式的基于 nose 的接口仍对可能仍在使用它的下游项目保留。
- en: The Python versions supported by this release are 2.7, 3.4-3.7\. The wheels
    are linked with OpenBLAS v0.3.0, which should fix some of the linalg problems
    reported for NumPy 1.14.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本支持的 Python 版本是 2.7、3.4-3.7\. 这些版本的 wheels 链接使用了 OpenBLAS v0.3.0，可以修复 NumPy
    1.14 报告的一些 linalg 问题。
- en: Highlights
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: NumPy has switched to pytest for testing.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 已经切换到 pytest 进行测试。
- en: A new [`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions") context manager.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")上下文管理器。
- en: Many improvements to the histogram functions.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直方图功能的许多改进。
- en: Support for unicode field names in python 2.7.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在 Python 2.7 中使用 Unicode 字段名称。
- en: Improved support for PyPy.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyPy的改进支持。
- en: Fixes and improvements to [`numpy.einsum`](../reference/generated/numpy.einsum.html#numpy.einsum
    "numpy.einsum").
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 [`numpy.einsum`](../reference/generated/numpy.einsum.html#numpy.einsum "numpy.einsum")
    进行了修复和改进。
- en: New functions
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新添加的功能
- en: '[`numpy.gcd`](../reference/generated/numpy.gcd.html#numpy.gcd "numpy.gcd")
    and [`numpy.lcm`](../reference/generated/numpy.lcm.html#numpy.lcm "numpy.lcm"),
    to compute the greatest common divisor and least common multiple.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.gcd`](../reference/generated/numpy.gcd.html#numpy.gcd "numpy.gcd")
    和 [`numpy.lcm`](../reference/generated/numpy.lcm.html#numpy.lcm "numpy.lcm")，用于计算最大公约数和最小公倍数。'
- en: '[`numpy.ma.stack`](../reference/generated/numpy.ma.stack.html#numpy.ma.stack
    "numpy.ma.stack"), the [`numpy.stack`](../reference/generated/numpy.stack.html#numpy.stack
    "numpy.stack") array-joining function generalized to masked arrays.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.ma.stack`](../reference/generated/numpy.ma.stack.html#numpy.ma.stack
    "numpy.ma.stack")，[`numpy.stack`](../reference/generated/numpy.stack.html#numpy.stack
    "numpy.stack") 数组连接功能的泛化形式。'
- en: '[`numpy.quantile`](../reference/generated/numpy.quantile.html#numpy.quantile
    "numpy.quantile") function, an interface to `percentile` without factors of 100'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.quantile`](../reference/generated/numpy.quantile.html#numpy.quantile
    "numpy.quantile") 函数，是 `percentile` 的接口而不是百分之百'
- en: '[`numpy.nanquantile`](../reference/generated/numpy.nanquantile.html#numpy.nanquantile
    "numpy.nanquantile") function, an interface to `nanpercentile` without factors
    of 100'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.nanquantile`](../reference/generated/numpy.nanquantile.html#numpy.nanquantile
    "numpy.nanquantile") 函数，是 `nanpercentile` 的接口而不是百分之百'
- en: '[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions"), a context manager that sets print options temporarily for
    the scope of the `with` block:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")，一个临时设置打印选项的上下文管理器，用于 `with` 块的范围内：'
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`numpy.histogram_bin_edges`](../reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges"), a function to get the edges of the bins used by
    a histogram without needing to calculate the histogram.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.histogram_bin_edges`](../reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges") 函数，用于获取直方图使用的边缘，而无需计算直方图。'
- en: C functions *npy_get_floatstatus_barrier* and *npy_clear_floatstatus_barrier*
    have been added to deal with compiler optimization changing the order of operations.
    See below for details.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新添加了 C 函数 *npy_get_floatstatus_barrier* 和 *npy_clear_floatstatus_barrier* 来处理编译器优化改变操作顺序的问题。详情请见下文。
- en: Deprecations
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧功能弃用
- en: 'Aliases of builtin [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.11)") functions are deprecated, in favor of their unaliased `pickle.<func>`
    names:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的`pickle`函数的别名已被弃用，而是采用了它们未别名化的`pickle.<func>`名称：
- en: '*numpy.loads*'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.loads*'
- en: '*numpy.core.numeric.load*'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.numeric.load*'
- en: '*numpy.core.numeric.loads*'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.numeric.loads*'
- en: '*numpy.ma.loads*, *numpy.ma.dumps*'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.ma.loads*, *numpy.ma.dumps*'
- en: '*numpy.ma.load*, *numpy.ma.dump* - these functions already failed on python
    3 when called with a string.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.ma.load*, *numpy.ma.dump* - 当以字符串调用这些函数时，这些函数在 python 3 中已经失败了。'
- en: Multidimensional indexing with anything but a tuple is deprecated. This means
    that the index list in `ind = [slice(None), 0]; arr[ind]` should be changed to
    a tuple, e.g., `ind = [slice(None), 0]; arr[tuple(ind)]` or `arr[(slice(None),
    0)]`. That change is necessary to avoid ambiguity in expressions such as `arr[[[0,
    1], [0, 1]]]`, currently interpreted as `arr[array([0, 1]), array([0, 1])]`, that
    will be interpreted as `arr[array([[0, 1], [0, 1]])]` in the future.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了元组以外的任何多维索引都已被弃用。这意味着`ind = [slice(None), 0]; arr[ind]`中的索引列表应该改为一个元组，例如`ind
    = [slice(None), 0]; arr[tuple(ind)]`或`arr[(slice(None), 0)]`。这一变化是必要的，以避免在诸如`arr[[[0,
    1], [0, 1]]]`这样的表达式中产生歧义，它目前被解释为`arr[array([0, 1]), array([0, 1])]`，但在将来将被解释为`arr[array([[0,
    1], [0, 1]])]`。
- en: Imports from the following sub-modules are deprecated, they will be removed
    at some future date.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从以下子模块导入的内容已弃用，它们将在将来的某个日期被移除。
- en: '*numpy.testing.utils*'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.utils*'
- en: '*numpy.testing.decorators*'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.decorators*'
- en: '*numpy.testing.nosetester*'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.nosetester*'
- en: '*numpy.testing.noseclasses*'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.noseclasses*'
- en: '*numpy.core.umath_tests*'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.umath_tests*'
- en: Giving a generator to [`numpy.sum`](../reference/generated/numpy.sum.html#numpy.sum
    "numpy.sum") is now deprecated. This was undocumented behavior, but worked. Previously,
    it would calculate the sum of the generator expression. In the future, it might
    return a different result. Use `np.sum(np.from_iter(generator))` or the built-in
    Python `sum` instead.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在已经弃用给[`numpy.sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum")的生成器。这是未记录的行为，但有效。以前，它将计算生成器表达式的和。将来，它可能返回不同的结果。请改用`np.sum(np.from_iter(generator))`或内置的Python
    `sum`。
- en: Users of the C-API should call `PyArrayResolveWriteBackIfCopy` or `PyArray_DiscardWritebackIfCopy`
    on any array with the `WRITEBACKIFCOPY` flag set, before deallocating the array.
    A deprecation warning will be emitted if those calls are not used when needed.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C-API的用户应在释放数组之前对任何带有`WRITEBACKIFCOPY`标志的数组调用`PyArrayResolveWriteBackIfCopy`或`PyArray_DiscardWritebackIfCopy`。如果需要但未使用这些调用，将会发出弃用警告。
- en: Users of `nditer` should use the nditer object as a context manager anytime
    one of the iterator operands is writeable, so that numpy can manage writeback
    semantics, or should call `it.close()`. A *RuntimeWarning* may be emitted otherwise
    in these cases.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`nditer`的用户操作数中有一个可写的，则应始终将nditer对象用作上下文管理器，以便numpy可以管理写回语义，或者应调用`it.close()`。否则在这些情况下可能会发出*RuntimeWarning*。
- en: The `normed` argument of `np.histogram`, deprecated long ago in 1.6.0, now emits
    a `DeprecationWarning`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.6.0版本中很久以前已被弃用的`np.histogram`的`normed`参数现在会产生`DeprecationWarning`。
- en: Future Changes
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变更
- en: NumPy 1.16 will drop support for Python 3.4.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.16将不再支持Python 3.4。
- en: NumPy 1.17 will drop support for Python 2.7.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.17将不再支持Python 2.7。
- en: Compatibility notes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Compiled testing modules renamed and made private
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已重命名并私有化编译的测试模块
- en: 'The following compiled modules have been renamed and made private:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '以下编译模块已重命名并私有化:'
- en: '`umath_tests` -> `_umath_tests`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umath_tests` -> `_umath_tests`'
- en: '`test_rational` -> `_rational_tests`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_rational` -> `_rational_tests`'
- en: '`multiarray_tests` -> `_multiarray_tests`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiarray_tests` -> `_multiarray_tests`'
- en: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
- en: '`operand_flag_tests` -> `_operand_flag_tests`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operand_flag_tests` -> `_operand_flag_tests`'
- en: The `umath_tests` module is still available for backwards compatibility, but
    will be removed in the future.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`umath_tests`模块目前仍可供向后兼容使用，但将来将被移除。'
- en: The `NpzFile` returned by `np.savez` is now a `collections.abc.Mapping`
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由`np.savez`返回的`NpzFile`现在是一个`collections.abc.Mapping`
- en: This means it behaves like a readonly dictionary, and has a new `.values()`
    method and `len()` implementation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它的行为类似于只读字典，并且具有新的`.values()`方法和`len()` 实现。
- en: For python 3, this means that `.iteritems()`, `.iterkeys()` have been deprecated,
    and `.keys()` and `.items()` now return views and not lists. This is consistent
    with how the builtin `dict` type changed between python 2 and python 3.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python 3，这意味着`.iteritems()`，`.iterkeys()`已被弃用，而`.keys()`和`.items()`现在返回视图而不是列表。这与内置的`dict`类型在Python
    2和Python 3之间的变化保持一致。
- en: Under certain conditions, `nditer` must be used in a context manager
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些条件下，必须在`nditer`中使用上下文管理器
- en: 'When using an [`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer
    "numpy.nditer") with the `"writeonly"` or `"readwrite"` flags, there are some
    circumstances where nditer doesn’t actually give you a view of the writable array.
    Instead, it gives you a copy, and if you make changes to the copy, nditer later
    writes those changes back into your actual array. Currently, this writeback occurs
    when the array objects are garbage collected, which makes this API error-prone
    on CPython and entirely broken on PyPy. Therefore, `nditer` should now be used
    as a context manager whenever it is used with writeable arrays, e.g., `with np.nditer(...)
    as it: ...`. You may also explicitly call `it.close()` for cases where a context
    manager is unusable, for instance in generator expressions.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用一个[`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer
    "numpy.nditer") 且带有`"writeonly"`或`"readwrite"`标志时，存在一些情况下，nditer实际上并没有给你一个可写数组的视图。相反，它会给你一个副本，如果你对副本进行更改，nditer稍后会将这些更改写回实际的数组。目前，当数组对象被垃圾回收时，写回会发生，这使得这个
    API 在 CPython 上容易出错，在 PyPy 上完全无法使用。因此，当`nditer` 与可写数组一起使用时，现在应该将其作为上下文管理器进行使用，例如
    `with np.nditer(...) as it: ...`。对于无法使用上下文管理器的情况，例如在生成器表达式中，也可以显式调用`it.close()`。'
- en: Numpy has switched to using pytest instead of nose for testing
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy 已经转而使用 pytest 而不是 nose 进行测试。
- en: The last nose release was 1.3.7 in June, 2015, and development of that tool
    has ended, consequently NumPy has now switched to using pytest. The old decorators
    and nose tools that were previously used by some downstream projects remain available,
    but will not be maintained. The standard testing utilities, `assert_almost_equal`
    and such, are not be affected by this change except for the nose specific functions
    `import_nose` and `raises`. Those functions are not used in numpy, but are kept
    for downstream compatibility.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个 nose 发布版本是在2015年6月的 1.3.7版本，该工具的开发已结束，因此 NumPy 现在已经转而使用 pytest。以前由一些下游项目使用的旧装饰器和
    nose 工具仍然可用，但不再维护。标准测试工具，如 `assert_almost_equal` 等，不受此更改的影响，除了 `import_nose` 和
    `raises` 这些与 nose 相关的函数。这些函数不在 numpy 中使用，但为了向下兼容性而被保留。
- en: Numpy no longer monkey-patches `ctypes` with `__array_interface__`
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy 不再通过 `__array_interface__` 对 `ctypes` 进行修改。
- en: Previously numpy added `__array_interface__` attributes to all the integer types
    from `ctypes`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以前 numpy 为所有整数类型从 `ctypes` 添加了 `__array_interface__` 属性。
- en: '`np.ma.notmasked_contiguous` and `np.ma.flatnotmasked_contiguous` always return
    lists'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.notmasked_contiguous` 和 `np.ma.flatnotmasked_contiguous` 总是返回列表。'
- en: This is the documented behavior, but previously the result could be any of slice,
    None, or list.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文档中记录的行为，但以前的结果可以是切片、None 或列表中的任何一个。
- en: All downstream users seem to check for the `None` result from `flatnotmasked_contiguous`
    and replace it with `[]`. Those callers will continue to work as before.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有下游用户似乎都检查`flatnotmasked_contiguous`的`None`结果，并将其替换为`[]`。这些调用者将像以前一样继续工作。
- en: '`np.squeeze` restores old behavior of objects that cannot handle an `axis`
    argument'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.squeeze` 恢复了不能处理 `axis` 参数的对象的旧行为。'
- en: Prior to version `1.7.0`, [`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze") did not have an `axis` argument and all empty axes were removed
    by default. The incorporation of an `axis` argument made it possible to selectively
    squeeze single or multiple empty axes, but the old API expectation was not respected
    because axes could still be selectively removed (silent success) from an object
    expecting all empty axes to be removed. That silent, selective removal of empty
    axes for objects expecting the old behavior has been fixed and the old behavior
    restored.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本`1.7.0`之前，[`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze") 没有 `axis` 参数，并且默认情况下删除所有空轴。引入`axis`参数使得可以选择性地挤压单个或多个空轴，但由于旧的
    API 预期没有得到尊重，因为轴仍然可以从一个期望所有空轴被删除的对象中被选择性地移除（无声成功）。这种对旧行为的无声、选择性移除空轴已经得到修复，并恢复了旧的行为。
- en: unstructured void array’s `.item` method now returns a bytes object
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无结构 void 数组的 `.item`方法现在返回一个字节对象。
- en: '`.item` now returns a `bytes` object instead of a buffer or byte array. This
    may affect code which assumed the return value was mutable, which is no longer
    the case.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`.item`现在返回一个`bytes`对象，而不是缓冲区或字节数组。这可能会影响曾假设返回值是可变的代码，而这不再是一个案例。'
- en: '`copy.copy` and `copy.deepcopy` no longer turn `masked` into an array'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`copy.copy` 和 `copy.deepcopy` 不再将 `masked` 转变为一个数组。'
- en: Since `np.ma.masked` is a readonly scalar, copying should be a no-op. These
    functions now behave consistently with `np.copy()`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`np.ma.masked`是只读标量，复制应该是一个无操作。现在这些函数的行为与`np.copy()`一致。
- en: Multifield Indexing of Structured Arrays will still return a copy
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引仍将返回一个副本
- en: The change that multi-field indexing of structured arrays returns a view instead
    of a copy is pushed back to 1.16\. A new method `numpy.lib.recfunctions.repack_fields`
    has been introduced to help mitigate the effects of this change, which can be
    used to write code compatible with both numpy 1.15 and 1.16\. For more information
    on how to update code to account for this future change see the “accessing multiple
    fields” section of the [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引返回一个视图而不是副本的更改被推迟到了1.16版本。新增了一种名为`numpy.lib.recfunctions.repack_fields`的方法，用于减轻这一变化的影响，可以用于编写兼容numpy
    1.15和1.16的代码。有关如何更新代码以适应此未来变化的更多信息，请参阅[user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html)的“访问多个字段”部分。
- en: C API changes
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API更改
- en: New functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新增函数`npy_get_floatstatus_barrier` 和 `npy_clear_floatstatus_barrier`
- en: Functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
    have been added and should be used in place of the `npy_get_floatstatus``and ``npy_clear_status`
    functions. Optimizing compilers like GCC 8.1 and Clang were rearranging the order
    of operations when the previous functions were used in the ufunc SIMD functions,
    resulting in the floatstatus flags being checked before the operation whose status
    we wanted to check was run. See [#10339](https://github.com/numpy/numpy/issues/10370).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了函数`npy_get_floatstatus_barrier`和`npy_clear_floatstatus_barrier`，并应在`npy_get_floatstatus`和`npy_clear_status`函数的位置使用。优化编译器如GCC
    8.1和Clang在ufunc SIMD函数中使用先前的函数时会重新排列操作的顺序，导致在运行我们想要检查其状态的操作之前检查了floatstatus标志。详见[#10339](https://github.com/numpy/numpy/issues/10370)。
- en: Changes to `PyArray_GetDTypeTransferFunction`
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`PyArray_GetDTypeTransferFunction`的变更
- en: '`PyArray_GetDTypeTransferFunction` now defaults to using user-defined `copyswapn`
    / `copyswap` for user-defined dtypes. If this causes a significant performance
    hit, consider implementing `copyswapn` to reflect the implementation of `PyArray_GetStridedCopyFn`.
    See [#10898](https://github.com/numpy/numpy/pull/10898).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_GetDTypeTransferFunction`现在默认使用用户定义的`copyswapn`/`copyswap`来定义用户定义的dtypes。如果这导致了显著的性能损失，请考虑实现`copyswapn`以反映`PyArray_GetStridedCopyFn`的实现。详见[#10898](https://github.com/numpy/numpy/pull/10898)。'
- en: New Features
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: '`np.gcd` and `np.lcm` ufuncs added for integer and objects types'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为整数和对象类型新增了`np.gcd`和`np.lcm` ufuncs
- en: These compute the greatest common divisor, and lowest common multiple, respectively.
    These work on all the numpy integer types, as well as the builtin arbitrary-precision
    `Decimal` and `long` types.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些分别计算最大公约数和最小公倍数。这些适用于所有的numpy整数类型，以及内置的任意精度`Decimal`和`long`类型。
- en: Support for cross-platform builds for iOS
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持iOS的跨平台构建
- en: The build system has been modified to add support for the `_PYTHON_HOST_PLATFORM`
    environment variable, used by `distutils` when compiling on one platform for another
    platform. This makes it possible to compile NumPy for iOS targets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统已修改以支持`_PYTHON_HOST_PLATFORM`环境变量，当在一个平台上编译到另一个平台时，`distutils`使用该变量。这使得可以为iOS目标编译NumPy。
- en: This only enables you to compile NumPy for one specific platform at a time.
    Creating a full iOS-compatible NumPy package requires building for the 5 architectures
    supported by iOS (i386, x86_64, armv7, armv7s and arm64), and combining these
    5 compiled builds products into a single “fat” binary.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这只允许您一次为一个特定平台编译NumPy。创建完全兼容iOS的NumPy软件包需要为iOS支持的5种架构（i386、x86_64、armv7、armv7s和arm64）进行编译，并将这5种已编译的产品组合成一个单一的“fat”二进制文件。
- en: '`return_indices` keyword added for `np.intersect1d`'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`np.intersect1d` 添加了`return_indices` 关键字
- en: New keyword `return_indices` returns the indices of the two input arrays that
    correspond to the common elements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 新的关键字`return_indices`返回与两个输入数组中的共同元素对应的索引。
- en: '`np.quantile` and `np.nanquantile`'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.quantile`和`np.nanquantile`'
- en: Like `np.percentile` and `np.nanpercentile`, but takes quantiles in [0, 1] rather
    than percentiles in [0, 100]. `np.percentile` is now a thin wrapper around `np.quantile`
    with the extra step of dividing by 100.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`np.percentile`和`np.nanpercentile`一样，但是接受[0, 1]之间的分位数，而不是[0, 100]之间的百分位数。`np.percentile`现在只是`np.quantile`的一个简单包装器，多出一步是除以100。
- en: Build system
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the 64-bit RISC-V architecture.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 增加了对64位RISC-V架构的实验性支持。
- en: Improvements
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`np.einsum` updates'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum`更新'
- en: 'Syncs einsum path optimization tech between [`numpy`](../reference/index.html#module-numpy
    "numpy") and *opt_einsum*. In particular, the *greedy* path has received many
    enhancements by @jcmgray. A full list of issues fixed are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`numpy`](../reference/index.html#module-numpy "numpy")和*opt_einsum*之间同步了`einsum`路径优化技术。特别是*greedy*路径在@jcmgray的许多增强。已解决的问题的完整列表如下：
- en: Arbitrary memory can be passed into the *greedy* path. Fixes gh-11210.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将任意内存传递到*greedy*路径。修复了gh-11210的问题。
- en: The greedy path has been updated to contain more dynamic programming ideas preventing
    a large number of duplicate (and expensive) calls that figure out the actual pair
    contraction that takes place. Now takes a few seconds on several hundred input
    tensors. Useful for matrix product state theories.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*greedy*路径已更新，包含了更多的动态规划思想，防止了大量重复（和昂贵）的调用，以确定实际进行的对偶收缩。现在在几百个输入张量上只需几秒钟。对于矩阵乘积状态理论非常有用。'
- en: Reworks the broadcasting dot error catching found in gh-11218 gh-10352 to be
    a bit earlier in the process.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新设计了广播点错误捕捉，找到在gh-11218 gh-10352更早一些的过程中。
- en: Enhances the *can_dot* functionality that previous missed an edge case (part
    of gh-11308).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强了以前在*can_dot*功能中遗漏的一个边缘情况（gh-11308的一部分）。
- en: '`np.ufunc.reduce` and related functions now accept an initial value'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ufunc.reduce`和相关函数现在接受初始值'
- en: '`np.ufunc.reduce`, `np.sum`, `np.prod`, `np.min` and `np.max` all now accept
    an `initial` keyword argument that specifies the value to start the reduction
    with.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ufunc.reduce`，`np.sum`，`np.prod`，`np.min`和`np.max`现在都接受一个`initial`关键字参数，指定起始值来进行缩减。'
- en: '`np.flip` can operate over multiple axes'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.flip`可以在多个轴上操作'
- en: '`np.flip` now accepts None, or tuples of int, in its `axis` argument. If axis
    is None, it will flip over all the axes.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.flip`现在可以在其`axis`参数中接受None，或int的元组。如果axis为None，它将在所有轴上进行翻转。'
- en: '`histogram` and `histogramdd` functions have moved to `np.lib.histograms`'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram`和`histogramdd`函数已移至`np.lib.histograms`'
- en: These were originally found in `np.lib.function_base`. They are still available
    under their un-scoped `np.histogram(dd)` names, and to maintain compatibility,
    aliased at `np.lib.function_base.histogram(dd)`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原始找到在`np.lib.function_base`中。它们仍然在它们的未作用域的`np.histogram(dd)`名称下可用，为了保持兼容性，也在`np.lib.function_base.histogram(dd)`中添加了别名。
- en: Code that does `from np.lib.function_base import *` will need to be updated
    with the new location, and should consider not using `import *` in future.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 做`from np.lib.function_base import *`的代码将需要使用新位置，并且将来考虑不再使用`import *`。
- en: '`histogram` will accept NaN values when explicit bins are given'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当显式仓时，`histogram`将接受NaN值
- en: Previously it would fail when trying to compute a finite range for the data.
    Since the range is ignored anyway when the bins are given explicitly, this error
    was needless.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，在试图计算数据的有限范围时会失败。由于在显式给出箱子时范围被忽略，这个错误是不必要的。
- en: Note that calling `histogram` on NaN values continues to raise the `RuntimeWarning`
    s typical of working with nan values, which can be silenced as usual with `errstate`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对NaN值调用`histogram`仍然会引发典型的`RuntimeWarning`，这与处理NaN值的工作方式一样，可以像往常一样使用`errstate`来消除。
- en: '`histogram` works on datetime types, when explicit bin edges are given'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当显式给出bin边时，`histogram`在日期时间类型上工作
- en: Dates, times, and timedeltas can now be histogrammed. The bin edges must be
    passed explicitly, and are not yet computed automatically.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 日期、时间和时间差现在可以进行直方图化。边缘必须显式传递，并且尚未自动计算。
- en: '`histogram` “auto” estimator handles limited variance better'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram`“自动”估计器处理有限变化更好'
- en: No longer does an IQR of 0 result in `n_bins=1`, rather the number of bins chosen
    is related to the data size in this situation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: IQR为0不再导致`n_bins=1`，而是在这种情况下所选的箱子数量与数据大小有关。
- en: The edges returned by *histogram`* and `histogramdd` now match the data float
    type
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*histogram`*和`histogramdd`返回的边与数据的浮点类型匹配'
- en: When passed `np.float16`, `np.float32`, or `np.longdouble` data, the returned
    edges are now of the same dtype. Previously, `histogram` would only return the
    same type if explicit bins were given, and `histogram` would produce `float64`
    bins no matter what the inputs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递`np.float16`，`np.float32`或`np.longdouble`数据时，返回的边现在是相同的dtype。以前，只有在显式给出箱子时，`histogram`才会返回相同类型，而不管输入是什么，`histogram`都会产生`float64`箱。
- en: '`histogramdd` allows explicit ranges to be given in a subset of axes'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogramdd`允许在部分轴上显式给出范围'
- en: The `range` argument of [`numpy.histogramdd`](../reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "numpy.histogramdd") can now contain `None` values to indicate that the range
    for the corresponding axis should be computed from the data. Previously, this
    could not be specified on a per-axis basis.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.histogramdd`](../reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "numpy.histogramdd")的`range`参数现在可以包含`None`值，以指示应从数据计算对应轴的范围。以前，无法对每个轴指定这一点。'
- en: The normed arguments of `histogramdd` and `histogram2d` have been renamed
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogramdd`和`histogram2d`的`normed`参数已重命名'
- en: These arguments are now called `density`, which is consistent with `histogram`.
    The old argument continues to work, but the new name should be preferred.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数现在称为`density`，这与`histogram`一致。旧参数仍然有效，但应优先使用新名称。
- en: '`np.r_` works with 0d arrays, and `np.ma.mr_` works with `np.ma.masked`'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.r_`可以与0d数组一起使用，`np.ma.mr_`可以与`np.ma.masked`一起使用'
- en: 0d arrays passed to the *r_* and *mr_* concatenation helpers are now treated
    as though they are arrays of length 1\. Previously, passing these was an error.
    As a result, [`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_") now works correctly on the `masked` constant.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将0d数组传递给*r_*和*mr_*连接辅助程序现在被当作长度为1的数组处理。以前，传递这些会引发错误。因此，[`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_")现在可以在`masked`常量上正确工作。
- en: '`np.ptp` accepts a `keepdims` argument, and extended axis tuples'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ptp` 接受`keepdims`参数和扩展的轴元组'
- en: '`np.ptp` (peak-to-peak) can now work over multiple axes, just like `np.max`
    and `np.min`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ptp`（峰-峰值）现在可以跨多个轴工作，就像`np.max`和`np.min`一样。'
- en: '`MaskedArray.astype` now is identical to `ndarray.astype`'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.astype` 现在与`ndarray.astype`完全相同'
- en: This means it takes all the same arguments, making more code written for ndarray
    work for masked array too.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它接受所有相同的参数，使为ndarray编写的更多代码也能为masked array工作。
- en: Enable AVX2/AVX512 at compile time
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在编译时启用AVX2/AVX512
- en: Change to simd.inc.src to allow use of AVX2 or AVX512 at compile time. Previously
    compilation for avx2 (or 512) with -march=native would still use the SSE code
    for the simd functions even when the rest of the code got AVX2.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时更改simd.inc.src以允许使用AVX2或AVX512。以前，使用-march=native编译avx2（或512）仍然会在simd函数的其余代码得到AVX2时使用SSE代码。
- en: '`nan_to_num` always returns scalars when receiving scalar or 0d inputs'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nan_to_num` 在接收标量或0d输入时，总是返回标量'
- en: Previously an array was returned for integer scalar inputs, which is inconsistent
    with the behavior for float inputs, and that of ufuncs in general. For all types
    of scalar or 0d input, the result is now a scalar.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，对于整数标量输入，返回数组，这与浮点输入的行为以及一般ufuncs的行为不一致。对于所有类型的标量或0d输入，结果现在是一个标量。
- en: '`np.flatnonzero` works on numpy-convertible types'
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.flatnonzero` 可用于 numpy-可转换类型'
- en: '`np.flatnonzero` now uses `np.ravel(a)` instead of `a.ravel()`, so it works
    for lists, tuples, etc.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.flatnonzero` 现在使用`np.ravel(a)`，而不是`a.ravel()`，因此可以用于列表、元组等。'
- en: '`np.interp` returns numpy scalars rather than builtin scalars'
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.interp` 返回的是numpy标量而不是内置标量'
- en: Previously `np.interp(0.5, [0, 1], [10, 20])` would return a `float`, but now
    it returns a `np.float64` object, which more closely matches the behavior of other
    functions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以前`np.interp(0.5, [0, 1], [10, 20])`会返回一个`float`，但现在返回`np.float64`对象，这更接近其他函数的行为。
- en: Additionally, the special case of `np.interp(object_array_0d, ...)` is no longer
    supported, as `np.interp(object_array_nd)` was never supported anyway.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，不再支持`np.interp(object_array_0d, ...)`的特殊情况，因为`np.interp(object_array_nd)`从未得到支持。
- en: As a result of this change, the `period` argument can now be used on 0d arrays.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个更改，`period`参数现在可以用于0d数组。
- en: Allow dtype field names to be unicode in Python 2
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许在Python 2中使用unicode类型的字段名称
- en: Previously `np.dtype([(u'name', float)])` would raise a `TypeError` in Python
    2, as only bytestrings were allowed in field names. Now any unicode string field
    names will be encoded with the `ascii` codec, raising a `UnicodeEncodeError` upon
    failure.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的`np.dtype([(u'name', float)])`在Python 2中会引发`TypeError`，因为只允许字节串作为字段名称。现在，任何unicode字符串字段名称都将使用`ascii`编解码器编码，失败时引发`UnicodeEncodeError`。
- en: This change makes it easier to write Python 2/3 compatible code using `from
    __future__ import unicode_literals`, which previously would cause string literal
    field names to raise a TypeError in Python 2.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改使得使用`from __future__ import unicode_literals`编写Python 2/3兼容代码变得更容易，此前，这会导致Python
    2中的字符串字面量字段名称引发TypeError。
- en: Comparison ufuncs accept `dtype=object`, overriding the default `bool`
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较ufuncs接受`dtype=object`，覆盖默认的`bool`
- en: This allows object arrays of symbolic types, which override `==` and other operators
    to return expressions, to be compared elementwise with `np.equal(a, b, dtype=object)`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许符号类型的对象数组，它们覆盖了`==`和其他操作符以返回表达式，与`np.equal(a, b, dtype=object)`进行逐个元素比较。
- en: '`sort` functions accept `kind=''stable''`'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sort`函数接受`kind=''stable''`。'
- en: 'Up until now, to perform a stable sort on the data, the user must do:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，要对数据执行稳定排序，用户必须这样做：
- en: '[PRE1]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: because merge sort is the only stable sorting algorithm available in NumPy.
    However, having kind=’mergesort’ does not make it explicit that the user wants
    to perform a stable sort thus harming the readability.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因为归并排序是NumPy中唯一可用的稳定排序算法。然而，使用`kind='mergesort'`并不明确表明用户想要执行稳定排序，因此影响了可读性。
- en: This change allows the user to specify kind=’stable’ thus clarifying the intent.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此改动允许用户指定`kind='stable'`，从而澄清意图。
- en: Do not make temporary copies for in-place accumulation
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要进行临时复制进行原地累加。
- en: When ufuncs perform accumulation they no longer make temporary copies because
    of the overlap between input an output, that is, the next element accumulated
    is added before the accumulated result is stored in its place, hence the overlap
    is safe. Avoiding the copy results in faster execution.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当ufunc执行累积时，它们不再进行临时复制，因为输入和输出之间存在重叠，即，在累积结果存储在其位置之前添加下一个被累积的元素，因此重叠是安全的。避免复制导致更快的执行。
- en: '`linalg.matrix_power` can now handle stacks of matrices'
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.matrix_power`现在可以处理矩阵的堆栈。'
- en: Like other functions in `linalg`, `matrix_power` can now deal with arrays of
    dimension larger than 2, which are treated as stacks of matrices. As part of the
    change, to further improve consistency, the name of the first argument has been
    changed to `a` (from `M`), and the exceptions for non-square matrices have been
    changed to `LinAlgError` (from `ValueError`).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与`linalg`中的其他函数一样，`matrix_power`现在可以处理大于2维的数组，它们被视为矩阵的堆栈。作为改动的一部分，为了进一步改善一致性，第一个参数的名称已从`M`改为`a`，非方阵的异常已从`ValueError`改为`LinAlgError`。
- en: Increased performance in `random.permutation` for multidimensional arrays
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`random.permutation`在多维数组中的性能增加。'
- en: '`permutation` uses the fast path in `random.shuffle` for all input array dimensions.
    Previously the fast path was only used for 1-d arrays.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`permutation`现在对所有输入数组维度都使用`random.shuffle`中的快速路径。先前，快速路径只用于1维数组。'
- en: Generalized ufuncs now accept `axes`, `axis` and `keepdims` arguments
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义通用函数现在接受`axes`、`axis`和`keepdims`参数。
- en: One can control over which axes a generalized ufunc operates by passing in an
    `axes` argument, a list of tuples with indices of particular axes. For instance,
    for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. If one wanted to use leading dimensions instead,
    one would pass in `[(0, 1), (0, 1), (0, 1)]`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递一个`axes`参数，可以控制广义ufunc作用的轴，这是一个特定轴索引的元组列表。例如，对于矩阵乘法适用的签名`(i,j),(j,k)->(i,k)`，基本元素是二维矩阵，它们被认为存储在每个参数的最后两个轴中。相应的`axes`关键字将是`[(-2,
    -1), (-2, -1), (-2, -1)]`。如果要使用前导维度，可以传递`[(0, 1), (0, 1), (0, 1)]`。
- en: For simplicity, for generalized ufuncs that operate on 1-dimensional arrays
    (vectors), a single integer is accepted instead of a single-element tuple, and
    for generalized ufuncs for which all outputs are scalars, the (empty) output tuples
    can be omitted. Hence, for a signature of `(i),(i)->()` appropriate for an inner
    product, one could pass in `axes=[0, 0]` to indicate that the vectors are stored
    in the first dimensions of the two inputs arguments.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，对于操作在一维数组（向量）上的广义通用函数，接受单个整数而不是单个元组内的单元素，以及对所有输出都是标量的广义通用函数，（空）输出元组可以被省略。因此，对于对于内积适用的的签名`(i),(i)->()`，可以传入`axes=[0,
    0]`以表示向量存储在两个输入参数的第一个维度中。
- en: As a short-cut for generalized ufuncs that are similar to reductions, i.e.,
    that act on a single, shared core dimension such as the inner product example
    above, one can pass an `axis` argument. This is equivalent to passing in `axes`
    with identical entries for all arguments with that core dimension (e.g., for the
    example above, `axes=[(axis,), (axis,)]`).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类似于缩减的广义通用函数的快捷方式，即对单个共享核心维度进行操作的函数，例如上面的内积示例，可以传递一个`axis`参数。这等同于对具有该核心维度的所有参数使用相同条目的`axes`（例如，对于上面的示例，`axes=[(axis,),
    (axis,)]`）。
- en: Furthermore, like for reductions, for generalized ufuncs that have inputs that
    all have the same number of core dimensions and outputs with no core dimension,
    one can pass in `keepdims` to leave a dimension with size 1 in the outputs, thus
    allowing proper broadcasting against the original inputs. The location of the
    extra dimension can be controlled with `axes`. For instance, for the inner-product
    example, `keepdims=True, axes=[-2, -2, -2]` would act on the inner-product example,
    `keepdims=True, axis=-2` would act on the one-but-last dimension of the input
    arguments, and leave a size 1 dimension in that place in the output.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于具有相同核心维度数量的所有输入和没有核心维度的输出的广义ufunc，可以传入`keepdims`以在输出中保留大小为1的维度，从而允许正确地与原始输入进行广播。可以使用`axes`控制额外维度的位置。例如，对于内积示例，`keepdims=True,
    axes=[-2, -2, -2]`将作用于内积示例，`keepdims=True, axis=-2` 将作用于输入参数的倒数第二维，并在输出中保留一个大小为1的维度。
- en: float128 values now print correctly on ppc systems
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在ppc系统上，`float128`值现在可以正确打印。
- en: Previously printing float128 values was buggy on ppc, since the special double-double
    floating-point-format on these systems was not accounted for. float128s now print
    with correct rounding and uniqueness.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以前在ppc上打印`float128`值存在错误，因为这些系统上的特殊双精度浮点格式没有被考虑。现在`float128`以正确四舍五入和唯一性打印。
- en: 'Warning to ppc users: You should upgrade glibc if it is version <=2.23, especially
    if using float128\. On ppc, glibc’s malloc in these version often misaligns allocated
    memory which can crash numpy when using float128 values.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 警告给ppc用户：如果使用`float128`，并且`glibc`版本<=2.23，应该升级`glibc`，因为在ppc上，这些版本的`glibc`的`malloc`经常会对分配的内存进行错误对齐，这可能会导致使用`float128`值时崩溃numpy。
- en: New `np.take_along_axis` and `np.put_along_axis` functions
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 `np.take_along_axis` 和 `np.put_along_axis` 函数。
- en: 'When used on multidimensional arrays, `argsort`, `argmin`, `argmax`, and `argpartition`
    return arrays that are difficult to use as indices. `take_along_axis` provides
    an easy way to use these indices to lookup values within an array, so that:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当在多维数组上使用`argsort`、`argmin`、`argmax`和`argpartition`时，返回的数组很难用作索引。`take_along_axis`提供了一种方便的方式来使用这些索引在数组中查找值，以便：
- en: '[PRE2]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'is the same as:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与：
- en: '[PRE3]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`np.put_along_axis` acts as the dual operation for writing to these indices
    within an array.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.put_along_axis` 作为在数组中写入这些索引的双重操作。'
- en: Highlights
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: NumPy has switched to pytest for testing.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy已经转换为pytest进行测试。
- en: A new [`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions") context manager.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")上下文管理器。
- en: Many improvements to the histogram functions.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多改进的直方图函数。
- en: Support for unicode field names in python 2.7.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python 2.7中支持Unicode字段名称。
- en: Improved support for PyPy.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了对PyPy的支持。
- en: Fixes and improvements to [`numpy.einsum`](../reference/generated/numpy.einsum.html#numpy.einsum
    "numpy.einsum").
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对[`numpy.einsum`](../reference/generated/numpy.einsum.html#numpy.einsum "numpy.einsum")的修复和改进。
- en: New functions
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的函数
- en: '[`numpy.gcd`](../reference/generated/numpy.gcd.html#numpy.gcd "numpy.gcd")
    and [`numpy.lcm`](../reference/generated/numpy.lcm.html#numpy.lcm "numpy.lcm"),
    to compute the greatest common divisor and least common multiple.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.gcd`](../reference/generated/numpy.gcd.html#numpy.gcd "numpy.gcd")
    和 [`numpy.lcm`](../reference/generated/numpy.lcm.html#numpy.lcm "numpy.lcm")，用于计算最大公约数和最小公倍数。'
- en: '[`numpy.ma.stack`](../reference/generated/numpy.ma.stack.html#numpy.ma.stack
    "numpy.ma.stack"), the [`numpy.stack`](../reference/generated/numpy.stack.html#numpy.stack
    "numpy.stack") array-joining function generalized to masked arrays.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.ma.stack`](../reference/generated/numpy.ma.stack.html#numpy.ma.stack
    "numpy.ma.stack")，将 [`numpy.stack`](../reference/generated/numpy.stack.html#numpy.stack
    "numpy.stack") 的数组连接函数推广到掩模数组。'
- en: '[`numpy.quantile`](../reference/generated/numpy.quantile.html#numpy.quantile
    "numpy.quantile") function, an interface to `percentile` without factors of 100'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.quantile`](../reference/generated/numpy.quantile.html#numpy.quantile
    "numpy.quantile")函数，是`percentile`的接口，不含100的因子。'
- en: '[`numpy.nanquantile`](../reference/generated/numpy.nanquantile.html#numpy.nanquantile
    "numpy.nanquantile") function, an interface to `nanpercentile` without factors
    of 100'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.nanquantile`](../reference/generated/numpy.nanquantile.html#numpy.nanquantile
    "numpy.nanquantile")函数，是`nanpercentile`的接口，不含100的因子。'
- en: '[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions"), a context manager that sets print options temporarily for
    the scope of the `with` block:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.printoptions`](../reference/generated/numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions")，一个临时设置打印选项的上下文管理器： '
- en: '[PRE4]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`numpy.histogram_bin_edges`](../reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges"), a function to get the edges of the bins used by
    a histogram without needing to calculate the histogram.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.histogram_bin_edges`](../reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges")，用于获取直方图使用的箱子边缘而无需计算直方图的函数。'
- en: C functions *npy_get_floatstatus_barrier* and *npy_clear_floatstatus_barrier*
    have been added to deal with compiler optimization changing the order of operations.
    See below for details.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C函数*npy_get_floatstatus_barrier*和*npy_clear_floatstatus_barrier*已添加以处理编译器优化改变操作顺序。详情请参见下文。
- en: Deprecations
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: 'Aliases of builtin [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle
    "(in Python v3.11)") functions are deprecated, in favor of their unaliased `pickle.<func>`
    names:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对内置[`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "(在Python
    v3.11中)")函数的别名已弃用，改用它们未别名化的`pickle.<func>`名称：
- en: '*numpy.loads*'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.loads*'
- en: '*numpy.core.numeric.load*'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.numeric.load*'
- en: '*numpy.core.numeric.loads*'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.numeric.loads*'
- en: '*numpy.ma.loads*, *numpy.ma.dumps*'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.ma.loads*, *numpy.ma.dumps*'
- en: '*numpy.ma.load*, *numpy.ma.dump* - these functions already failed on python
    3 when called with a string.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.ma.load*, *numpy.ma.dump* - 这些函数在使用字符串调用时已在Python 3上失败。'
- en: Multidimensional indexing with anything but a tuple is deprecated. This means
    that the index list in `ind = [slice(None), 0]; arr[ind]` should be changed to
    a tuple, e.g., `ind = [slice(None), 0]; arr[tuple(ind)]` or `arr[(slice(None),
    0)]`. That change is necessary to avoid ambiguity in expressions such as `arr[[[0,
    1], [0, 1]]]`, currently interpreted as `arr[array([0, 1]), array([0, 1])]`, that
    will be interpreted as `arr[array([[0, 1], [0, 1]])]` in the future.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了元组以外的任何多维索引都已被弃用。这意味着在`ind = [slice(None), 0]; arr[ind]`中，索引列表应更改为元组，例如`ind
    = [slice(None), 0]; arr[tuple(ind)]`或`arr[(slice(None), 0)]`。为了避免表达式的歧义，这种改变是必要的，例如`arr[[[0,
    1], [0, 1]]]`，当前被解释为`arr[array([0, 1]), array([0, 1])]`，将来将被解释为`arr[array([[0,
    1], [0, 1]])]`。
- en: Imports from the following sub-modules are deprecated, they will be removed
    at some future date.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引自以下子模块的导入已被弃用，它们将在将来的某个日期被移除。
- en: '*numpy.testing.utils*'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.utils*'
- en: '*numpy.testing.decorators*'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.decorators*'
- en: '*numpy.testing.nosetester*'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.nosetester*'
- en: '*numpy.testing.noseclasses*'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.testing.noseclasses*'
- en: '*numpy.core.umath_tests*'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.core.umath_tests*'
- en: Giving a generator to [`numpy.sum`](../reference/generated/numpy.sum.html#numpy.sum
    "numpy.sum") is now deprecated. This was undocumented behavior, but worked. Previously,
    it would calculate the sum of the generator expression. In the future, it might
    return a different result. Use `np.sum(np.from_iter(generator))` or the built-in
    Python `sum` instead.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生成器传递给[`numpy.sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum")现在已被弃用。这是未记录的行为，但是可行的。以前，它会计算生成器表达式的总和。将来，它可能返回不同的结果。请使用`np.sum(np.from_iter(generator))`或内置的Python
    `sum`代替。
- en: Users of the C-API should call `PyArrayResolveWriteBackIfCopy` or `PyArray_DiscardWritebackIfCopy`
    on any array with the `WRITEBACKIFCOPY` flag set, before deallocating the array.
    A deprecation warning will be emitted if those calls are not used when needed.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C-API的用户应该在释放数组之前对任何带`WRITEBACKIFCOPY`标志的数组调用`PyArrayResolveWriteBackIfCopy`或`PyArray_DiscardWritebackIfCopy`，否则将发出弃用警告。
- en: Users of `nditer` should use the nditer object as a context manager anytime
    one of the iterator operands is writeable, so that numpy can manage writeback
    semantics, or should call `it.close()`. A *RuntimeWarning* may be emitted otherwise
    in these cases.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`nditer`的用户应该在任何可写的迭代器操作数之一上将nditer对象用作上下文管理器，以便numpy可以管理写回语义，或者应该调用`it.close()`。否则，在这些情况下可能会产生*RuntimeWarning*。
- en: The `normed` argument of `np.histogram`, deprecated long ago in 1.6.0, now emits
    a `DeprecationWarning`.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.histogram`的`normed`参数，在1.6.0之前就已过时，现在会发出`DeprecationWarning`。'
- en: Future Changes
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来更改
- en: NumPy 1.16 will drop support for Python 3.4.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.16将不再支持Python 3.4。
- en: NumPy 1.17 will drop support for Python 2.7.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.17将不再支持Python 2.7。
- en: Compatibility notes
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Compiled testing modules renamed and made private
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已重命名并私有化的编译测试模块
- en: 'The following compiled modules have been renamed and made private:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下已重命名并私有化编译模块：
- en: '`umath_tests` -> `_umath_tests`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umath_tests` -> `_umath_tests`'
- en: '`test_rational` -> `_rational_tests`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_rational` -> `_rational_tests`'
- en: '`multiarray_tests` -> `_multiarray_tests`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiarray_tests` -> `_multiarray_tests`'
- en: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
- en: '`operand_flag_tests` -> `_operand_flag_tests`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operand_flag_tests` -> `_operand_flag_tests`'
- en: The `umath_tests` module is still available for backwards compatibility, but
    will be removed in the future.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`umath_tests`模块仍可用于向后兼容，但将在将来删除。'
- en: The `NpzFile` returned by `np.savez` is now a `collections.abc.Mapping`
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.savez`返回的`NpzFile`现在是一个`collections.abc.Mapping`。'
- en: This means it behaves like a readonly dictionary, and has a new `.values()`
    method and `len()` implementation.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它的行为类似只读字典，并且有一个新的`.values()`方法和`len()`实现。
- en: For python 3, this means that `.iteritems()`, `.iterkeys()` have been deprecated,
    and `.keys()` and `.items()` now return views and not lists. This is consistent
    with how the builtin `dict` type changed between python 2 and python 3.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于python 3，这意味着`.iteritems()`、`.iterkeys()`已经被弃用，而`.keys()`和`.items()`现在返回视图而不是列表。这与python
    2和python 3之间的内置`dict`类型的变化保持一致。
- en: Under certain conditions, `nditer` must be used in a context manager
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下，必须使用`nditer`作为上下文管理器。
- en: 'When using an [`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer
    "numpy.nditer") with the `"writeonly"` or `"readwrite"` flags, there are some
    circumstances where nditer doesn’t actually give you a view of the writable array.
    Instead, it gives you a copy, and if you make changes to the copy, nditer later
    writes those changes back into your actual array. Currently, this writeback occurs
    when the array objects are garbage collected, which makes this API error-prone
    on CPython and entirely broken on PyPy. Therefore, `nditer` should now be used
    as a context manager whenever it is used with writeable arrays, e.g., `with np.nditer(...)
    as it: ...`. You may also explicitly call `it.close()` for cases where a context
    manager is unusable, for instance in generator expressions.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '使用带有`"writeonly"`或`"readwrite"`标志的[`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer
    "numpy.nditer")时，存在一些情况，其中`nditer`实际上不会给你一个可写数组的视图，而是给你一个副本，如果对副本进行更改，则`nditer`稍后将这些更改写回到你的实际数组中。目前，当数组对象被垃圾回收时，会发生这种写回，这使得这种API在CPython上容易出错，在PyPy上完全不起作用。因此，每当与可写数组一起使用时，现在应该将`nditer`用作上下文管理器，例如，`with
    np.nditer(...) as it: ...`。在无法使用上下文管理器的情况下，您还可以显式调用`it.close()`。'
- en: Numpy has switched to using pytest instead of nose for testing
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy已经开始使用pytest而不是nose进行测试。
- en: The last nose release was 1.3.7 in June, 2015, and development of that tool
    has ended, consequently NumPy has now switched to using pytest. The old decorators
    and nose tools that were previously used by some downstream projects remain available,
    but will not be maintained. The standard testing utilities, `assert_almost_equal`
    and such, are not be affected by this change except for the nose specific functions
    `import_nose` and `raises`. Those functions are not used in numpy, but are kept
    for downstream compatibility.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次的`nose`发布版本是在2015年6月的1.3.7，那个工具的开发已经结束，因此现在NumPy已经转而使用pytest进行测试。一些下游项目之前使用的旧装饰器和`nose`工具仍然可用，但不再维护。标准测试工具`assert_almost_equal`等都不会受到这一变化的影响，除了一些`nose`特定的函数`import_nose`和`raises`。这些函数在numpy中并未被使用，但为了下游兼容性而保留。
- en: Numpy no longer monkey-patches `ctypes` with `__array_interface__`
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy不再使用`ctypes`对`__array_interface__`进行修补。
- en: Previously numpy added `__array_interface__` attributes to all the integer types
    from `ctypes`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，numpy向所有来自`ctypes`的整数类型添加了`__array_interface__`属性。
- en: '`np.ma.notmasked_contiguous` and `np.ma.flatnotmasked_contiguous` always return
    lists'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.notmasked_contiguous`和`np.ma.flatnotmasked_contiguous`总是返回列表。'
- en: This is the documented behavior, but previously the result could be any of slice,
    None, or list.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文档化的行为，但之前结果可以是任何切片、None或列表中的任何一个。
- en: All downstream users seem to check for the `None` result from `flatnotmasked_contiguous`
    and replace it with `[]`. Those callers will continue to work as before.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 所有下游用户似乎都检查`flatnotmasked_contiguous`的`None`结果并将其替换为`[]`。那些调用者将继续像以前一样工作。
- en: '`np.squeeze` restores old behavior of objects that cannot handle an `axis`
    argument'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.squeeze`恢复了无法处理`axis`参数的对象的旧行为。'
- en: Prior to version `1.7.0`, [`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze") did not have an `axis` argument and all empty axes were removed
    by default. The incorporation of an `axis` argument made it possible to selectively
    squeeze single or multiple empty axes, but the old API expectation was not respected
    because axes could still be selectively removed (silent success) from an object
    expecting all empty axes to be removed. That silent, selective removal of empty
    axes for objects expecting the old behavior has been fixed and the old behavior
    restored.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `1.7.0` 版本之前，[`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze") 没有 `axis` 参数，默认情况下会移除所有空轴。增加了 `axis` 参数使得可以选择性地挤压单个或多个空轴，但旧的
    API 预期未被遵守，因为仍可以从期望移除所有空轴的对象中选择性地移除（静默成功）空轴。修复了旧行为并恢复了旧行为。
- en: unstructured void array’s `.item` method now returns a bytes object
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无结构的空数组的 `.item` 方法现在返回一个 bytes 对象
- en: '`.item` now returns a `bytes` object instead of a buffer or byte array. This
    may affect code which assumed the return value was mutable, which is no longer
    the case.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`.item` 现在返回一个 `bytes` 对象，而不是缓冲区或字节数组。这可能会影响假定返回值可变的代码，但现在不再是这种情况。'
- en: '`copy.copy` and `copy.deepcopy` no longer turn `masked` into an array'
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`copy.copy` 和 `copy.deepcopy` 不再将 `masked` 转换为数组'
- en: Since `np.ma.masked` is a readonly scalar, copying should be a no-op. These
    functions now behave consistently with `np.copy()`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `np.ma.masked` 是只读标量，复制操作应该是一个无操作。这些函数现在与 `np.copy()` 一致地行为。
- en: Multifield Indexing of Structured Arrays will still return a copy
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对结构化数组进行多字段索引仍将返回一个副本
- en: The change that multi-field indexing of structured arrays returns a view instead
    of a copy is pushed back to 1.16\. A new method `numpy.lib.recfunctions.repack_fields`
    has been introduced to help mitigate the effects of this change, which can be
    used to write code compatible with both numpy 1.15 and 1.16\. For more information
    on how to update code to account for this future change see the “accessing multiple
    fields” section of the [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引返回视图而不是副本的变化推迟到 1.16 版。引入了一个新的方法 `numpy.lib.recfunctions.repack_fields`
    来帮助缓解这一变化的影响，可以用来编写与 numpy 1.15 和 1.16 兼容的代码。有关如何更新代码以应对这种未来变化的更多信息，请参阅[用户指南](https://docs.scipy.org/doc/numpy/user/basics.rec.html)的“访问多个字段”部分。
- en: Compiled testing modules renamed and made private
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译测试模块已重命名并设为私有
- en: 'The following compiled modules have been renamed and made private:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 下列编译模块已改名并设为私有：
- en: '`umath_tests` -> `_umath_tests`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umath_tests` -> `_umath_tests`'
- en: '`test_rational` -> `_rational_tests`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_rational` -> `_rational_tests`'
- en: '`multiarray_tests` -> `_multiarray_tests`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiarray_tests` -> `_multiarray_tests`'
- en: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`struct_ufunc_test` -> `_struct_ufunc_tests`'
- en: '`operand_flag_tests` -> `_operand_flag_tests`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operand_flag_tests` -> `_operand_flag_tests`'
- en: The `umath_tests` module is still available for backwards compatibility, but
    will be removed in the future.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`umath_tests` 模块仍可用于向后兼容性，但将来会被移除。'
- en: The `NpzFile` returned by `np.savez` is now a `collections.abc.Mapping`
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由 `np.savez` 返回的 `NpzFile` 现在是 `collections.abc.Mapping`
- en: This means it behaves like a readonly dictionary, and has a new `.values()`
    method and `len()` implementation.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它的行为类似于只读字典，并具有新的 `.values()` 方法和 `len()` 实现。
- en: For python 3, this means that `.iteritems()`, `.iterkeys()` have been deprecated,
    and `.keys()` and `.items()` now return views and not lists. This is consistent
    with how the builtin `dict` type changed between python 2 and python 3.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 python 3，这意味着 `.iteritems()`，`.iterkeys()` 已被弃用，而 `.keys()` 和 `.items()`
    现在返回视图而不是列表。这与 python 2 和 python 3 之间的内置 `dict` 类型的变化保持一致。
- en: Under certain conditions, `nditer` must be used in a context manager
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下，必须使用 `nditer` 在上下文管理器中
- en: 'When using an [`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer
    "numpy.nditer") with the `"writeonly"` or `"readwrite"` flags, there are some
    circumstances where nditer doesn’t actually give you a view of the writable array.
    Instead, it gives you a copy, and if you make changes to the copy, nditer later
    writes those changes back into your actual array. Currently, this writeback occurs
    when the array objects are garbage collected, which makes this API error-prone
    on CPython and entirely broken on PyPy. Therefore, `nditer` should now be used
    as a context manager whenever it is used with writeable arrays, e.g., `with np.nditer(...)
    as it: ...`. You may also explicitly call `it.close()` for cases where a context
    manager is unusable, for instance in generator expressions.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用[`numpy.nditer`](../reference/generated/numpy.nditer.html#numpy.nditer "numpy.nditer")时，使用`"writeonly"`或`"readwrite"`标志时，有些情况下nditer实际上并不会给你一个可写数组的视图。相反，它会给你一个副本，如果你对副本进行更改，nditer稍后会将这些更改写回到你的实际数组中。当前，当数组对象被垃圾收集时会发生这种写回的行为，这使得这个API在CPython上容易出错，在PyPy上完全破解。因此，无论何时使用可写数组，都应该将`nditer`作为上下文管理器使用，例如`with
    np.nditer(...) as it: ...`。你还可以显式调用`it.close()`，例如在生成器表达式中无法使用上下文管理器的情况下。'
- en: Numpy has switched to using pytest instead of nose for testing
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy已经开始使用pytest而不是nose进行测试
- en: The last nose release was 1.3.7 in June, 2015, and development of that tool
    has ended, consequently NumPy has now switched to using pytest. The old decorators
    and nose tools that were previously used by some downstream projects remain available,
    but will not be maintained. The standard testing utilities, `assert_almost_equal`
    and such, are not be affected by this change except for the nose specific functions
    `import_nose` and `raises`. Those functions are not used in numpy, but are kept
    for downstream compatibility.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个nose版本是2015年6月的1.3.7，该工具的开发已经结束，因此NumPy现在已经转而使用pytest。以前某些下游项目使用的旧装饰器和nose工具仍然可用，但不会得到维护。标准的测试工具，如`assert_almost_equal`等，不受此改变的影响，除了nose特有的函数`import_nose`和`raises`。这些函数不会在numpy中使用，但会保留以保持向下兼容性。
- en: Numpy no longer monkey-patches `ctypes` with `__array_interface__`
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Numpy不再使用pytest将`ctypes`进行monkey-patch
- en: Previously numpy added `__array_interface__` attributes to all the integer types
    from `ctypes`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，numpy将`__array_interface__`属性添加到`ctypes`的所有整数类型中。
- en: '`np.ma.notmasked_contiguous` and `np.ma.flatnotmasked_contiguous` always return
    lists'
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.notmasked_contiguous`和`np.ma.flatnotmasked_contiguous`总是返回列表'
- en: This is the documented behavior, but previously the result could be any of slice,
    None, or list.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文档化的行为，但以前的结果可以是slice、None或list中的任何一个。
- en: All downstream users seem to check for the `None` result from `flatnotmasked_contiguous`
    and replace it with `[]`. Those callers will continue to work as before.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的下游用户似乎都会检查`flatnotmasked_contiguous`的`None`结果，并用`[]`替换它。这些调用者将继续如之前一样工作。
- en: '`np.squeeze` restores old behavior of objects that cannot handle an `axis`
    argument'
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.squeeze`恢复了无法处理`axis`参数的对象的旧行为'
- en: Prior to version `1.7.0`, [`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze") did not have an `axis` argument and all empty axes were removed
    by default. The incorporation of an `axis` argument made it possible to selectively
    squeeze single or multiple empty axes, but the old API expectation was not respected
    because axes could still be selectively removed (silent success) from an object
    expecting all empty axes to be removed. That silent, selective removal of empty
    axes for objects expecting the old behavior has been fixed and the old behavior
    restored.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在`1.7.0`版本之前，[`numpy.squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze
    "numpy.squeeze")没有`axis`参数，默认情况下所有空轴都会被移除。加入了`axis`参数使得可以选择性地挤压单个或多个空轴，但旧的API预期没有得到尊重，因为轴仍然可以被有选择性地移除（无声成功）从一个期望所有空轴被移除的对象中。为那些期望旧行为的对象静默、有选择性地删除已被修正，并恢复了旧的行为。
- en: unstructured void array’s `.item` method now returns a bytes object
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无结构的void数组的`.item`方法现在返回一个bytes对象
- en: '`.item` now returns a `bytes` object instead of a buffer or byte array. This
    may affect code which assumed the return value was mutable, which is no longer
    the case.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`.item`现在返回一个`bytes`对象，而不是一个缓冲区或字节数组。这可能会影响假设返回值是可变的代码，但现在已经不是这种情况了。'
- en: '`copy.copy` and `copy.deepcopy` no longer turn `masked` into an array'
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`copy.copy`和`copy.deepcopy`不再将`masked`转换为数组'
- en: Since `np.ma.masked` is a readonly scalar, copying should be a no-op. These
    functions now behave consistently with `np.copy()`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`np.ma.masked`是只读标量，复制应该是无操作。这些函数现在与`np.copy()`行为一致。
- en: Multifield Indexing of Structured Arrays will still return a copy
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段索引仍将返回副本
- en: The change that multi-field indexing of structured arrays returns a view instead
    of a copy is pushed back to 1.16\. A new method `numpy.lib.recfunctions.repack_fields`
    has been introduced to help mitigate the effects of this change, which can be
    used to write code compatible with both numpy 1.15 and 1.16\. For more information
    on how to update code to account for this future change see the “accessing multiple
    fields” section of the [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 多字段索引结构化数组返回视图而不是副本的更改推迟到1.16版。引入了一个新方法`numpy.lib.recfunctions.repack_fields`来帮助缓解这一变化的影响，可以用于编写兼容numpy
    1.15和1.16的代码。有关如何更新代码以适应这一未来变化的更多信息，请参阅[user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html)中的“访问多个字段”部分。
- en: C API changes
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API变动
- en: New functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数`npy_get_floatstatus_barrier`和`npy_clear_floatstatus_barrier`
- en: Functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
    have been added and should be used in place of the `npy_get_floatstatus``and ``npy_clear_status`
    functions. Optimizing compilers like GCC 8.1 and Clang were rearranging the order
    of operations when the previous functions were used in the ufunc SIMD functions,
    resulting in the floatstatus flags being checked before the operation whose status
    we wanted to check was run. See [#10339](https://github.com/numpy/numpy/issues/10370).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了函数`npy_get_floatstatus_barrier`和`npy_clear_floatstatus_barrier`，应在`npy_get_floatstatus`和`npy_clear_status`函数的位置使用。优化编译器如GCC
    8.1和Clang在ufunc SIMD函数中使用之前的函数时重新排列操作的顺序，导致在运行我们想要检查状态的操作之前检查了floatstatus标志。参见[#10339](https://github.com/numpy/numpy/issues/10370)。
- en: Changes to `PyArray_GetDTypeTransferFunction`
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`PyArray_GetDTypeTransferFunction`的变更
- en: '`PyArray_GetDTypeTransferFunction` now defaults to using user-defined `copyswapn`
    / `copyswap` for user-defined dtypes. If this causes a significant performance
    hit, consider implementing `copyswapn` to reflect the implementation of `PyArray_GetStridedCopyFn`.
    See [#10898](https://github.com/numpy/numpy/pull/10898).'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_GetDTypeTransferFunction`现在默认使用用户定义的`copyswapn` / `copyswap`来处理用户定义的数据类型。如果这导致显著的性能损失，请考虑实现`copyswapn`来反映`PyArray_GetStridedCopyFn`的实现。参见[#10898](https://github.com/numpy/numpy/pull/10898)。'
- en: New functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数`npy_get_floatstatus_barrier`和`npy_clear_floatstatus_barrier`
- en: Functions `npy_get_floatstatus_barrier` and `npy_clear_floatstatus_barrier`
    have been added and should be used in place of the `npy_get_floatstatus``and ``npy_clear_status`
    functions. Optimizing compilers like GCC 8.1 and Clang were rearranging the order
    of operations when the previous functions were used in the ufunc SIMD functions,
    resulting in the floatstatus flags being checked before the operation whose status
    we wanted to check was run. See [#10339](https://github.com/numpy/numpy/issues/10370).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了函数`npy_get_floatstatus_barrier`和`npy_clear_floatstatus_barrier`，应在`npy_get_floatstatus`和`npy_clear_status`函数的位置使用。优化编译器如GCC
    8.1和Clang在ufunc SIMD函数中使用之前的函数时重新排列操作的顺序，导致在运行我们想要检查状态的操作之前检查了floatstatus标志。参见[#10339](https://github.com/numpy/numpy/issues/10370)。
- en: Changes to `PyArray_GetDTypeTransferFunction`
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`PyArray_GetDTypeTransferFunction`的变更
- en: '`PyArray_GetDTypeTransferFunction` now defaults to using user-defined `copyswapn`
    / `copyswap` for user-defined dtypes. If this causes a significant performance
    hit, consider implementing `copyswapn` to reflect the implementation of `PyArray_GetStridedCopyFn`.
    See [#10898](https://github.com/numpy/numpy/pull/10898).'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_GetDTypeTransferFunction`现在默认使用用户定义的`copyswapn` / `copyswap`来处理用户定义的数据类型。如果这导致显著的性能损失，请考虑实现`copyswapn`来反映`PyArray_GetStridedCopyFn`的实现。参见[#10898](https://github.com/numpy/numpy/pull/10898)。'
- en: New Features
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: '`np.gcd` and `np.lcm` ufuncs added for integer and objects types'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为整数和对象类型添加了`np.gcd`和`np.lcm` ufuncs
- en: These compute the greatest common divisor, and lowest common multiple, respectively.
    These work on all the numpy integer types, as well as the builtin arbitrary-precision
    `Decimal` and `long` types.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数分别计算最大公约数和最小公倍数。它们可以用于所有numpy整数类型，以及内置的任意精度`Decimal`和`long`类型。
- en: Support for cross-platform builds for iOS
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持iOS的跨平台构建
- en: The build system has been modified to add support for the `_PYTHON_HOST_PLATFORM`
    environment variable, used by `distutils` when compiling on one platform for another
    platform. This makes it possible to compile NumPy for iOS targets.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统已经修改以支持`_PYTHON_HOST_PLATFORM`环境变量，在`distutils`编译一个平台用于另一个平台时使用。这样就可以将NumPy编译为iOS目标。
- en: This only enables you to compile NumPy for one specific platform at a time.
    Creating a full iOS-compatible NumPy package requires building for the 5 architectures
    supported by iOS (i386, x86_64, armv7, armv7s and arm64), and combining these
    5 compiled builds products into a single “fat” binary.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这只允许您一次仅为一个特定平台编译NumPy。创建一个完全与iOS兼容的NumPy包需要为iOS支持的5种架构（i386、x86_64、armv7、armv7s和arm64）构建，并将这5个编译构建产品合并为一个“fat”二进制文件。
- en: '`return_indices` keyword added for `np.intersect1d`'
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.intersect1d`添加了`return_indices`关键字'
- en: New keyword `return_indices` returns the indices of the two input arrays that
    correspond to the common elements.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 新关键字`return_indices`返回与公共元素对应的两个输入数组的索引。
- en: '`np.quantile` and `np.nanquantile`'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.quantile`和`np.nanquantile`'
- en: Like `np.percentile` and `np.nanpercentile`, but takes quantiles in [0, 1] rather
    than percentiles in [0, 100]. `np.percentile` is now a thin wrapper around `np.quantile`
    with the extra step of dividing by 100.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 像`np.percentile`和`np.nanpercentile`一样，但接受[0, 1]范围内的分位数，而不是[0, 100]范围内的百分位数。`np.percentile`现在是对`np.quantile`的一个简单包装，额外的一步是将结果除以100。
- en: Build system
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the 64-bit RISC-V architecture.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对64位RISC-V架构的实验性支持。
- en: '`np.gcd` and `np.lcm` ufuncs added for integer and objects types'
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为整数和对象类型添加了`np.gcd`和`np.lcm` ufuncs
- en: These compute the greatest common divisor, and lowest common multiple, respectively.
    These work on all the numpy integer types, as well as the builtin arbitrary-precision
    `Decimal` and `long` types.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计算最大公约数和最小公倍数。这些适用于所有的numpy整数类型，还有内置的任意精度`Decimal`和`long`类型。
- en: Support for cross-platform builds for iOS
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持iOS的跨平台构建
- en: The build system has been modified to add support for the `_PYTHON_HOST_PLATFORM`
    environment variable, used by `distutils` when compiling on one platform for another
    platform. This makes it possible to compile NumPy for iOS targets.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统已经修改以支持`_PYTHON_HOST_PLATFORM`环境变量，在`distutils`编译一个平台用于另一个平台时使用。这样就可以将NumPy编译为iOS目标。
- en: This only enables you to compile NumPy for one specific platform at a time.
    Creating a full iOS-compatible NumPy package requires building for the 5 architectures
    supported by iOS (i386, x86_64, armv7, armv7s and arm64), and combining these
    5 compiled builds products into a single “fat” binary.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这只允许您一次仅为一个特定平台编译NumPy。创建一个完全与iOS兼容的NumPy包需要为iOS支持的5种架构（i386、x86_64、armv7、armv7s和arm64）构建，并将这5个编译构建产品合并为一个“fat”二进制文件。
- en: '`return_indices` keyword added for `np.intersect1d`'
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.intersect1d`添加了`return_indices`关键字'
- en: New keyword `return_indices` returns the indices of the two input arrays that
    correspond to the common elements.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 新关键字`return_indices`返回与公共元素对应的两个输入数组的索引。
- en: '`np.quantile` and `np.nanquantile`'
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.quantile`和`np.nanquantile`'
- en: Like `np.percentile` and `np.nanpercentile`, but takes quantiles in [0, 1] rather
    than percentiles in [0, 100]. `np.percentile` is now a thin wrapper around `np.quantile`
    with the extra step of dividing by 100.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 像`np.percentile`和`np.nanpercentile`一样，但接受[0, 1]范围内的分位数，而不是[0, 100]范围内的百分位数。`np.percentile`现在是对`np.quantile`的一个简单包装，额外的一步是将结果除以100。
- en: Build system
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the 64-bit RISC-V architecture.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对64位RISC-V架构的实验性支持。
- en: Improvements
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`np.einsum` updates'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum`更新'
- en: 'Syncs einsum path optimization tech between [`numpy`](../reference/index.html#module-numpy
    "numpy") and *opt_einsum*. In particular, the *greedy* path has received many
    enhancements by @jcmgray. A full list of issues fixed are:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`numpy`](../reference/index.html#module-numpy "numpy")和*opt_einsum*之间同步了einsum路径优化技术。特别是*greedy*路径得到了@jcmgray的许多增强。修复的问题的完整列表如下：
- en: Arbitrary memory can be passed into the *greedy* path. Fixes gh-11210.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意内存可以传递到*greedy*路径。修复gh-11210。
- en: The greedy path has been updated to contain more dynamic programming ideas preventing
    a large number of duplicate (and expensive) calls that figure out the actual pair
    contraction that takes place. Now takes a few seconds on several hundred input
    tensors. Useful for matrix product state theories.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: greedy路径已更新，包含了更多的动态规划思想，避免了大量重复（和昂贵）的调用，找出实际的对应进行压缩。现在对几百个输入张量只需几秒钟。对于矩阵乘积态理论很有用。
- en: Reworks the broadcasting dot error catching found in gh-11218 gh-10352 to be
    a bit earlier in the process.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhances the *can_dot* functionality that previous missed an edge case (part
    of gh-11308).
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.ufunc.reduce` and related functions now accept an initial value'
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.ufunc.reduce`, `np.sum`, `np.prod`, `np.min` and `np.max` all now accept
    an `initial` keyword argument that specifies the value to start the reduction
    with.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '`np.flip` can operate over multiple axes'
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.flip` now accepts None, or tuples of int, in its `axis` argument. If axis
    is None, it will flip over all the axes.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '`histogram` and `histogramdd` functions have moved to `np.lib.histograms`'
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These were originally found in `np.lib.function_base`. They are still available
    under their un-scoped `np.histogram(dd)` names, and to maintain compatibility,
    aliased at `np.lib.function_base.histogram(dd)`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Code that does `from np.lib.function_base import *` will need to be updated
    with the new location, and should consider not using `import *` in future.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '`histogram` will accept NaN values when explicit bins are given'
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously it would fail when trying to compute a finite range for the data.
    Since the range is ignored anyway when the bins are given explicitly, this error
    was needless.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Note that calling `histogram` on NaN values continues to raise the `RuntimeWarning`
    s typical of working with nan values, which can be silenced as usual with `errstate`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`histogram` works on datetime types, when explicit bin edges are given'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dates, times, and timedeltas can now be histogrammed. The bin edges must be
    passed explicitly, and are not yet computed automatically.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '`histogram` “auto” estimator handles limited variance better'
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No longer does an IQR of 0 result in `n_bins=1`, rather the number of bins chosen
    is related to the data size in this situation.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The edges returned by *histogram`* and `histogramdd` now match the data float
    type
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When passed `np.float16`, `np.float32`, or `np.longdouble` data, the returned
    edges are now of the same dtype. Previously, `histogram` would only return the
    same type if explicit bins were given, and `histogram` would produce `float64`
    bins no matter what the inputs.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '`histogramdd` allows explicit ranges to be given in a subset of axes'
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `range` argument of [`numpy.histogramdd`](../reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "numpy.histogramdd") can now contain `None` values to indicate that the range
    for the corresponding axis should be computed from the data. Previously, this
    could not be specified on a per-axis basis.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: The normed arguments of `histogramdd` and `histogram2d` have been renamed
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These arguments are now called `density`, which is consistent with `histogram`.
    The old argument continues to work, but the new name should be preferred.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '`np.r_` works with 0d arrays, and `np.ma.mr_` works with `np.ma.masked`'
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 0d arrays passed to the *r_* and *mr_* concatenation helpers are now treated
    as though they are arrays of length 1\. Previously, passing these was an error.
    As a result, [`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_") now works correctly on the `masked` constant.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '*r_*和*mr_*连接帮助器传递的0d数组现在会被视为长度为1的数组。以前，传递这些数组会导致错误。因此，[`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_")现在可以正确地在`masked`常量上工作。'
- en: '`np.ptp` accepts a `keepdims` argument, and extended axis tuples'
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ptp`接受`keepdims`参数和扩展的轴元组'
- en: '`np.ptp` (peak-to-peak) can now work over multiple axes, just like `np.max`
    and `np.min`.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ptp`（峰峰值）现在可以跨多个轴工作，就像`np.max`和`np.min`一样。'
- en: '`MaskedArray.astype` now is identical to `ndarray.astype`'
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.astype`现在与`ndarray.astype`相同'
- en: This means it takes all the same arguments, making more code written for ndarray
    work for masked array too.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它接受所有相同的参数，使得为`ndarray`编写的更多代码也适用于`masked array`。
- en: Enable AVX2/AVX512 at compile time
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在编译时启用 AVX2/AVX512
- en: Change to simd.inc.src to allow use of AVX2 or AVX512 at compile time. Previously
    compilation for avx2 (or 512) with -march=native would still use the SSE code
    for the simd functions even when the rest of the code got AVX2.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 更改simd.inc.src以在编译时允许使用AVX2或AVX512。以前，使用-march=native编译avx2（或512）时，simd函数的其余部分仍会使用SSE代码。
- en: '`nan_to_num` always returns scalars when receiving scalar or 0d inputs'
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当接收标量或0d输入时，`nan_to_num`始终返回标量
- en: Previously an array was returned for integer scalar inputs, which is inconsistent
    with the behavior for float inputs, and that of ufuncs in general. For all types
    of scalar or 0d input, the result is now a scalar.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，整数标量输入会返回数组，这与浮点输入的行为不一致，也与ufuncs的一般行为不一致。现在，对于所有类型的标量或0d输入，结果都是标量。
- en: '`np.flatnonzero` works on numpy-convertible types'
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.flatnonzero`适用于numpy可转换类型'
- en: '`np.flatnonzero` now uses `np.ravel(a)` instead of `a.ravel()`, so it works
    for lists, tuples, etc.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.flatnonzero`现在使用`np.ravel(a)`而不是`a.ravel()`，因此适用于列表，元组等。'
- en: '`np.interp` returns numpy scalars rather than builtin scalars'
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.interp`返回numpy标量，而不是内置标量'
- en: Previously `np.interp(0.5, [0, 1], [10, 20])` would return a `float`, but now
    it returns a `np.float64` object, which more closely matches the behavior of other
    functions.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.interp(0.5, [0, 1], [10, 20])`将返回一个`float`，但现在它返回一个`np.float64`对象，更符合其他函数的行为。
- en: Additionally, the special case of `np.interp(object_array_0d, ...)` is no longer
    supported, as `np.interp(object_array_nd)` was never supported anyway.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，不再支持`np.interp(object_array_0d, ...)`这种特殊情况，因为`np.interp(object_array_nd)`从来都不支持。
- en: As a result of this change, the `period` argument can now be used on 0d arrays.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此更改，`period`参数现在可以用于0d数组。
- en: Allow dtype field names to be unicode in Python 2
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许Python 2中将dtype字段名称设置为Unicode
- en: Previously `np.dtype([(u'name', float)])` would raise a `TypeError` in Python
    2, as only bytestrings were allowed in field names. Now any unicode string field
    names will be encoded with the `ascii` codec, raising a `UnicodeEncodeError` upon
    failure.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在Python 2中，`np.dtype([(u'name', float)])`将引发`TypeError`，因为字段名只允许字节字符串。现在，任何Unicode字符串字段名都将使用`ascii`编码，即在失败时引发`UnicodeEncodeError`。
- en: This change makes it easier to write Python 2/3 compatible code using `from
    __future__ import unicode_literals`, which previously would cause string literal
    field names to raise a TypeError in Python 2.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化使得使用`from __future__ import unicode_literals`编写Python 2/3兼容代码更容易，而以前会导致Python
    2中的字符串文字字段名称引发TypeError。
- en: Comparison ufuncs accept `dtype=object`, overriding the default `bool`
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较ufuncs接受`dtype=object`，重写默认的`bool`
- en: This allows object arrays of symbolic types, which override `==` and other operators
    to return expressions, to be compared elementwise with `np.equal(a, b, dtype=object)`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许具有符号类型的对象数组，这些符号类型可以重写`==`和其他运算符以返回表达式，并且可以通过`np.equal(a, b, dtype=object)`逐元素进行比较。
- en: '`sort` functions accept `kind=''stable''`'
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sort`函数接受 `kind=''stable''`'
- en: 'Up until now, to perform a stable sort on the data, the user must do:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，要对数据进行稳定排序，用户必须执行：
- en: '[PRE5]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: because merge sort is the only stable sorting algorithm available in NumPy.
    However, having kind=’mergesort’ does not make it explicit that the user wants
    to perform a stable sort thus harming the readability.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 因为归并排序是NumPy中唯一可用的稳定排序算法。然而，根据kind=’mergesort’并不能明确表示用户想要执行稳定排序，因此会影响可读性。
- en: This change allows the user to specify kind=’stable’ thus clarifying the intent.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改允许用户指定kind=’stable’，从而澄清意图。
- en: Do not make temporary copies for in-place accumulation
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要为原地累积制作临时副本
- en: When ufuncs perform accumulation they no longer make temporary copies because
    of the overlap between input an output, that is, the next element accumulated
    is added before the accumulated result is stored in its place, hence the overlap
    is safe. Avoiding the copy results in faster execution.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 当ufunc执行累积时，它们不再产生临时副本，因为输入和输出之间存在重叠，即，在累积结果存储在其位置之前添加下一个累积元素，因此重叠是安全的。避免副本会导致更快的执行。
- en: '`linalg.matrix_power` can now handle stacks of matrices'
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.matrix_power`现在可以处理矩阵的堆栈'
- en: Like other functions in `linalg`, `matrix_power` can now deal with arrays of
    dimension larger than 2, which are treated as stacks of matrices. As part of the
    change, to further improve consistency, the name of the first argument has been
    changed to `a` (from `M`), and the exceptions for non-square matrices have been
    changed to `LinAlgError` (from `ValueError`).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 与`linalg`中的其他函数一样，`matrix_power`现在可以处理维数大于2的数组，这些数组被视为矩阵的堆栈。作为改变的一部分，为了进一步提高一致性，第一个参数的名称已更改为`a`（从`M`），并且非方阵的异常已更改为`LinAlgError`（从`ValueError`）。
- en: Increased performance in `random.permutation` for multidimensional arrays
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高了多维数组的`random.permutation`性能
- en: '`permutation` uses the fast path in `random.shuffle` for all input array dimensions.
    Previously the fast path was only used for 1-d arrays.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`permutation`对所有输入数组维度使用`random.shuffle`中的快速路径。以前只对1维数组使用快速路径。'
- en: Generalized ufuncs now accept `axes`, `axis` and `keepdims` arguments
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc现在接受`axes`，`axis`和`keepdims`参数
- en: One can control over which axes a generalized ufunc operates by passing in an
    `axes` argument, a list of tuples with indices of particular axes. For instance,
    for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. If one wanted to use leading dimensions instead,
    one would pass in `[(0, 1), (0, 1), (0, 1)]`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传入`axes`参数（带有特定轴索引的元组列表），可以控制广义ufunc操作的轴。例如，对于适用于矩阵乘法的签名`(i,j),(j,k)->(i,k)`，基本元素是二维矩阵，这些被视为存储在每个参数的最后两个轴中。相应的axes关键字将是`[(-2,
    -1), (-2, -1), (-2, -1)]`。如果想要使用前导维度，可以传入`[(0, 1), (0, 1), (0, 1)]`。
- en: For simplicity, for generalized ufuncs that operate on 1-dimensional arrays
    (vectors), a single integer is accepted instead of a single-element tuple, and
    for generalized ufuncs for which all outputs are scalars, the (empty) output tuples
    can be omitted. Hence, for a signature of `(i),(i)->()` appropriate for an inner
    product, one could pass in `axes=[0, 0]` to indicate that the vectors are stored
    in the first dimensions of the two inputs arguments.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简化起见，对于在一维数组（向量）上操作的广义ufunc，可以接受一个整数而不是单个元组，对于所有输出都是标量的广义ufunc，可以省略（空）输出元组。因此，对于适用于内积的签名`(i),(i)->()`，可以传递`axes=[0,
    0]`以指示向量存储在两个输入参数的第一个维度中。
- en: As a short-cut for generalized ufuncs that are similar to reductions, i.e.,
    that act on a single, shared core dimension such as the inner product example
    above, one can pass an `axis` argument. This is equivalent to passing in `axes`
    with identical entries for all arguments with that core dimension (e.g., for the
    example above, `axes=[(axis,), (axis,)]`).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类似于缩减的广义ufunc的快捷方式，即对单个共享核心维度进行操作的广义ufunc，例如上面的内积示例，可以传递`axis`参数。这相当于对所有具有该核心维度的参数传递具有相同条目的`axes`（例如，对于上面的示例，`axes=[(axis,),
    (axis,)]`）。
- en: Furthermore, like for reductions, for generalized ufuncs that have inputs that
    all have the same number of core dimensions and outputs with no core dimension,
    one can pass in `keepdims` to leave a dimension with size 1 in the outputs, thus
    allowing proper broadcasting against the original inputs. The location of the
    extra dimension can be controlled with `axes`. For instance, for the inner-product
    example, `keepdims=True, axes=[-2, -2, -2]` would act on the inner-product example,
    `keepdims=True, axis=-2` would act on the one-but-last dimension of the input
    arguments, and leave a size 1 dimension in that place in the output.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，就像在缩减中一样，对于具有所有输入的广义ufunc，这些输入都具有相同数量的核心维度和没有核心维度的输出，可以传递`keepdims`以在输出中保留一个大小为1的维度，从而允许与原始输入进行正确广播。额外维度的位置可以通过`axes`来控制。例如，对于内积示例，`keepdims=True,
    axes=[-2, -2, -2]`将作用于内积示例，`keepdims=True, axis=-2`将作用于输入参数的倒数第二维，并在输出中保留一个大小为1的维度。
- en: float128 values now print correctly on ppc systems
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在在 ppc 系统上正确打印 float128 值
- en: Previously printing float128 values was buggy on ppc, since the special double-double
    floating-point-format on these systems was not accounted for. float128s now print
    with correct rounding and uniqueness.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 以前在 ppc 上打印 float128 值出现错误，因为这些系统上的特殊双倍浮点格式没有被考虑到。现在 float128 以正确的四舍五入和唯一性打印。
- en: 'Warning to ppc users: You should upgrade glibc if it is version <=2.23, especially
    if using float128\. On ppc, glibc’s malloc in these version often misaligns allocated
    memory which can crash numpy when using float128 values.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 警告给 ppc 用户：如果使用的是版本 <=2.23 的 glibc，尤其是在使用 float128 的情况下，应该升级 glibc。在这些版本的 ppc
    上，glibc 的 malloc 经常会对给定的内存做错误对齐，这可能会在使用 float128 值时导致 numpy 崩溃。
- en: New `np.take_along_axis` and `np.put_along_axis` functions
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 `np.take_along_axis` 和 `np.put_along_axis` 函数
- en: 'When used on multidimensional arrays, `argsort`, `argmin`, `argmax`, and `argpartition`
    return arrays that are difficult to use as indices. `take_along_axis` provides
    an easy way to use these indices to lookup values within an array, so that:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 当在多维数组上使用 `argsort`、`argmin`、`argmax` 和 `argpartition` 时，返回的数组很难用作索引。`take_along_axis`
    提供了一种简单的方法来使用这些索引来查找数组中的值，因此：
- en: '[PRE6]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'is the same as:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 和下面的等价：
- en: '[PRE7]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`np.put_along_axis` acts as the dual operation for writing to these indices
    within an array.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.put_along_axis` 充当在数组中写入这些索引的双向操作。'
- en: '`np.einsum` updates'
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum` 更新'
- en: 'Syncs einsum path optimization tech between [`numpy`](../reference/index.html#module-numpy
    "numpy") and *opt_einsum*. In particular, the *greedy* path has received many
    enhancements by @jcmgray. A full list of issues fixed are:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`numpy`](../reference/index.html#module-numpy "numpy") 和 *opt_einsum* 之间同步了
    einsum 路径优化技术。特别是，*greedy* 路径由 @jcmgray 进行了许多增强。修复的问题列表如下：
- en: Arbitrary memory can be passed into the *greedy* path. Fixes gh-11210.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以将任意内存传递给 *greedy* 路径。修复了 gh-11210。
- en: The greedy path has been updated to contain more dynamic programming ideas preventing
    a large number of duplicate (and expensive) calls that figure out the actual pair
    contraction that takes place. Now takes a few seconds on several hundred input
    tensors. Useful for matrix product state theories.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贪婪路径已更新，包含更多动态规划思想，避免了大量重复（和昂贵）的调用，以找出实际进行的对撞过程。现在在几百个输入张量上只需几秒钟。对于矩阵产品状态理论非常有用。
- en: Reworks the broadcasting dot error catching found in gh-11218 gh-10352 to be
    a bit earlier in the process.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新调整广播点错误捕捉，发现在 gh-11218 gh-10352 中稍早些阶段发生。
- en: Enhances the *can_dot* functionality that previous missed an edge case (part
    of gh-11308).
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强了 *can_dot* 功能，以前错过了一个边缘情况（部分属于 gh-11308）。
- en: '`np.ufunc.reduce` and related functions now accept an initial value'
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ufunc.reduce` 和相关函数现在接受初始值'
- en: '`np.ufunc.reduce`, `np.sum`, `np.prod`, `np.min` and `np.max` all now accept
    an `initial` keyword argument that specifies the value to start the reduction
    with.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ufunc.reduce`、`np.sum`、`np.prod`、`np.min` 和 `np.max` 现在都接受一个 `initial`
    关键字参数，指定开始缩减的值。'
- en: '`np.flip` can operate over multiple axes'
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.flip` 可以在多个轴上操作'
- en: '`np.flip` now accepts None, or tuples of int, in its `axis` argument. If axis
    is None, it will flip over all the axes.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.flip` 现在可以在其 `axis` 参数中接受 None，或者 int 元组。如果 axis 为 None，则会在所有轴上翻转。'
- en: '`histogram` and `histogramdd` functions have moved to `np.lib.histograms`'
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram` 和 `histogramdd` 函数已移至 `np.lib.histograms`'
- en: These were originally found in `np.lib.function_base`. They are still available
    under their un-scoped `np.histogram(dd)` names, and to maintain compatibility,
    aliased at `np.lib.function_base.histogram(dd)`.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这些最初在 `np.lib.function_base` 中找到。它们仍以其未作用域化的 `np.histogram(dd)` 名称可用，为了保持兼容性，在
    `np.lib.function_base.histogram(dd)` 处取别名。
- en: Code that does `from np.lib.function_base import *` will need to be updated
    with the new location, and should consider not using `import *` in future.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 需要对执行 `from np.lib.function_base import *` 的代码进行更新，应考虑将来不使用 `import *`。
- en: '`histogram` will accept NaN values when explicit bins are given'
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当明确给定了区间时，`histogram` 将接受 NaN 值。
- en: Previously it would fail when trying to compute a finite range for the data.
    Since the range is ignored anyway when the bins are given explicitly, this error
    was needless.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 以前在尝试为数据计算有限范围时会失败。由于在明确定义了区间时范围会被忽略，这种错误是多余的。
- en: Note that calling `histogram` on NaN values continues to raise the `RuntimeWarning`
    s typical of working with nan values, which can be silenced as usual with `errstate`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 NaN 值上调用 `histogram` 会继续引发与处理 nan 值相对应的 `RuntimeWarning`，像往常一样，可以用 `errstate`
    来消除这些警告。
- en: '`histogram` works on datetime types, when explicit bin edges are given'
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当给定明确的 bin 边时，`histogram` 可以处理日期时间类型
- en: Dates, times, and timedeltas can now be histogrammed. The bin edges must be
    passed explicitly, and are not yet computed automatically.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以对日期、时间和时间间隔进行直方图化。必须显式传递边缘，不会自动计算。
- en: '`histogram` “auto” estimator handles limited variance better'
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram` 的 “auto” 估算器能更好地处理有限的方差'
- en: No longer does an IQR of 0 result in `n_bins=1`, rather the number of bins chosen
    is related to the data size in this situation.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 不再出现 IQR 为 0 时`n_bins=1` 的结果，而是在这种情况下所选的箱数与数据大小有关。
- en: The edges returned by *histogram`* and `histogramdd` now match the data float
    type
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*histogram`* 和 `histogramdd` 返回的边现在与数据的浮点类型匹配'
- en: When passed `np.float16`, `np.float32`, or `np.longdouble` data, the returned
    edges are now of the same dtype. Previously, `histogram` would only return the
    same type if explicit bins were given, and `histogram` would produce `float64`
    bins no matter what the inputs.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递 `np.float16`，`np.float32` 或 `np.longdouble` 数据时，返回的边现在是相同的 dtype。以前，如果给定了显式的
    bins，`histogram` 才会返回相同的类型，并且 `histogram` 无论输入是什么都会产生 `float64` 的 bins。
- en: '`histogramdd` allows explicit ranges to be given in a subset of axes'
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogramdd` 允许在轴的子集中给定显式范围'
- en: The `range` argument of [`numpy.histogramdd`](../reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "numpy.histogramdd") can now contain `None` values to indicate that the range
    for the corresponding axis should be computed from the data. Previously, this
    could not be specified on a per-axis basis.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.histogramdd`](../reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "numpy.histogramdd") 的 `range` 参数现在可以包含 `None` 值，以指示应从数据中计算对应轴的范围。以前无法在每轴基础上指定此参数。'
- en: The normed arguments of `histogramdd` and `histogram2d` have been renamed
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogramdd` 和 `histogram2d` 的 normed 参数已被重命名'
- en: These arguments are now called `density`, which is consistent with `histogram`.
    The old argument continues to work, but the new name should be preferred.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数现在被称为 `density`，这与 `histogram` 一致。旧参数仍然有效，但应首选使用新名称。
- en: '`np.r_` works with 0d arrays, and `np.ma.mr_` works with `np.ma.masked`'
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.r_` 可以使用 0 维数组，而 `np.ma.mr_` 可以使用 `np.ma.masked`'
- en: 0d arrays passed to the *r_* and *mr_* concatenation helpers are now treated
    as though they are arrays of length 1\. Previously, passing these was an error.
    As a result, [`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_") now works correctly on the `masked` constant.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 0d 数组传递给 *r_* 和 *mr_* 连接帮助程序现在被视为长度为1的数组。以前，传递这些数组会导致错误。结果上，[`numpy.ma.mr_`](../reference/generated/numpy.ma.mr_.html#numpy.ma.mr_
    "numpy.ma.mr_") 现在在 `masked` 常量上可以正确工作。
- en: '`np.ptp` accepts a `keepdims` argument, and extended axis tuples'
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ptp` 接受 `keepdims` 参数和扩展的轴元组'
- en: '`np.ptp` (peak-to-peak) can now work over multiple axes, just like `np.max`
    and `np.min`.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ptp` (peak-to-peak) 现在可以在多个轴上工作，就像 `np.max` 和 `np.min` 一样。'
- en: '`MaskedArray.astype` now is identical to `ndarray.astype`'
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MaskedArray.astype` 现在与 `ndarray.astype` 相同。'
- en: This means it takes all the same arguments, making more code written for ndarray
    work for masked array too.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它接受与 ndarray 相同的所有参数，使得为 ndarray 编写的代码也适用于 masked array。
- en: Enable AVX2/AVX512 at compile time
  id: totrans-392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译时启用 AVX2/AVX512
- en: Change to simd.inc.src to allow use of AVX2 or AVX512 at compile time. Previously
    compilation for avx2 (or 512) with -march=native would still use the SSE code
    for the simd functions even when the rest of the code got AVX2.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 更改 simd.inc.src 以允许在编译时使用 AVX2 或 AVX512。以前，用 -march=native 编译的 avx2（或 512）仍会对
    simd 函数使用 SSE 代码，即使其余代码已经使用 AVX2。
- en: '`nan_to_num` always returns scalars when receiving scalar or 0d inputs'
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nan_to_num` 在收到标量或 0 维输入时始终返回标量'
- en: Previously an array was returned for integer scalar inputs, which is inconsistent
    with the behavior for float inputs, and that of ufuncs in general. For all types
    of scalar or 0d input, the result is now a scalar.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 以前对于整数标量输入会返回数组，这与浮点输入以及通用函数的行为是不一致的。现在对于所有类型的标量或 0 维输入，结果都是标量。
- en: '`np.flatnonzero` works on numpy-convertible types'
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.flatnonzero` 可用于可转换为 numpy 类型'
- en: '`np.flatnonzero` now uses `np.ravel(a)` instead of `a.ravel()`, so it works
    for lists, tuples, etc.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.flatnonzero` 现在使用 `np.ravel(a)` 而不是 `a.ravel()`，所以它适用于列表、元组等。'
- en: '`np.interp` returns numpy scalars rather than builtin scalars'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.interp` 返回 numpy 标量而非内置标量'
- en: Previously `np.interp(0.5, [0, 1], [10, 20])` would return a `float`, but now
    it returns a `np.float64` object, which more closely matches the behavior of other
    functions.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 以前 `np.interp(0.5, [0, 1], [10, 20])` 将返回一个 `float`，但现在它返回一个 `np.float64` 对象，这更符合其他函数的行为。
- en: Additionally, the special case of `np.interp(object_array_0d, ...)` is no longer
    supported, as `np.interp(object_array_nd)` was never supported anyway.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: As a result of this change, the `period` argument can now be used on 0d arrays.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Allow dtype field names to be unicode in Python 2
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously `np.dtype([(u'name', float)])` would raise a `TypeError` in Python
    2, as only bytestrings were allowed in field names. Now any unicode string field
    names will be encoded with the `ascii` codec, raising a `UnicodeEncodeError` upon
    failure.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: This change makes it easier to write Python 2/3 compatible code using `from
    __future__ import unicode_literals`, which previously would cause string literal
    field names to raise a TypeError in Python 2.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Comparison ufuncs accept `dtype=object`, overriding the default `bool`
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows object arrays of symbolic types, which override `==` and other operators
    to return expressions, to be compared elementwise with `np.equal(a, b, dtype=object)`.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`sort` functions accept `kind=''stable''`'
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Up until now, to perform a stable sort on the data, the user must do:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: because merge sort is the only stable sorting algorithm available in NumPy.
    However, having kind=’mergesort’ does not make it explicit that the user wants
    to perform a stable sort thus harming the readability.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: This change allows the user to specify kind=’stable’ thus clarifying the intent.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: Do not make temporary copies for in-place accumulation
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When ufuncs perform accumulation they no longer make temporary copies because
    of the overlap between input an output, that is, the next element accumulated
    is added before the accumulated result is stored in its place, hence the overlap
    is safe. Avoiding the copy results in faster execution.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`linalg.matrix_power` can now handle stacks of matrices'
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like other functions in `linalg`, `matrix_power` can now deal with arrays of
    dimension larger than 2, which are treated as stacks of matrices. As part of the
    change, to further improve consistency, the name of the first argument has been
    changed to `a` (from `M`), and the exceptions for non-square matrices have been
    changed to `LinAlgError` (from `ValueError`).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Increased performance in `random.permutation` for multidimensional arrays
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`permutation` uses the fast path in `random.shuffle` for all input array dimensions.
    Previously the fast path was only used for 1-d arrays.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Generalized ufuncs now accept `axes`, `axis` and `keepdims` arguments
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One can control over which axes a generalized ufunc operates by passing in an
    `axes` argument, a list of tuples with indices of particular axes. For instance,
    for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. If one wanted to use leading dimensions instead,
    one would pass in `[(0, 1), (0, 1), (0, 1)]`.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, for generalized ufuncs that operate on 1-dimensional arrays
    (vectors), a single integer is accepted instead of a single-element tuple, and
    for generalized ufuncs for which all outputs are scalars, the (empty) output tuples
    can be omitted. Hence, for a signature of `(i),(i)->()` appropriate for an inner
    product, one could pass in `axes=[0, 0]` to indicate that the vectors are stored
    in the first dimensions of the two inputs arguments.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: As a short-cut for generalized ufuncs that are similar to reductions, i.e.,
    that act on a single, shared core dimension such as the inner product example
    above, one can pass an `axis` argument. This is equivalent to passing in `axes`
    with identical entries for all arguments with that core dimension (e.g., for the
    example above, `axes=[(axis,), (axis,)]`).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, like for reductions, for generalized ufuncs that have inputs that
    all have the same number of core dimensions and outputs with no core dimension,
    one can pass in `keepdims` to leave a dimension with size 1 in the outputs, thus
    allowing proper broadcasting against the original inputs. The location of the
    extra dimension can be controlled with `axes`. For instance, for the inner-product
    example, `keepdims=True, axes=[-2, -2, -2]` would act on the inner-product example,
    `keepdims=True, axis=-2` would act on the one-but-last dimension of the input
    arguments, and leave a size 1 dimension in that place in the output.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: float128 values now print correctly on ppc systems
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously printing float128 values was buggy on ppc, since the special double-double
    floating-point-format on these systems was not accounted for. float128s now print
    with correct rounding and uniqueness.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning to ppc users: You should upgrade glibc if it is version <=2.23, especially
    if using float128\. On ppc, glibc’s malloc in these version often misaligns allocated
    memory which can crash numpy when using float128 values.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: New `np.take_along_axis` and `np.put_along_axis` functions
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When used on multidimensional arrays, `argsort`, `argmin`, `argmax`, and `argpartition`
    return arrays that are difficult to use as indices. `take_along_axis` provides
    an easy way to use these indices to lookup values within an array, so that:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'is the same as:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`np.put_along_axis` acts as the dual operation for writing to these indices
    within an array.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
