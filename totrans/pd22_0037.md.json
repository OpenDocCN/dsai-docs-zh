["```py\nIn [1]: arr = pd.array([1, 2, None], dtype=pd.Int64Dtype())\n\nIn [2]: arr\nOut[2]: \n<IntegerArray>\n[1, 2, <NA>]\nLength: 3, dtype: Int64 \n```", "```py\nIn [3]: pd.array([1, 2, np.nan], dtype=\"Int64\")\nOut[3]: \n<IntegerArray>\n[1, 2, <NA>]\nLength: 3, dtype: Int64 \n```", "```py\nIn [4]: pd.array([1, 2, np.nan, None, pd.NA], dtype=\"Int64\")\nOut[4]: \n<IntegerArray>\n[1, 2, <NA>, <NA>, <NA>]\nLength: 5, dtype: Int64 \n```", "```py\nIn [5]: pd.Series(arr)\nOut[5]: \n0       1\n1       2\n2    <NA>\ndtype: Int64 \n```", "```py\nIn [6]: pd.array([1, None])\nOut[6]: \n<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\n\nIn [7]: pd.array([1, 2])\nOut[7]: \n<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64 \n```", "```py\nIn [8]: pd.Series([1, None])\nOut[8]: \n0    1.0\n1    NaN\ndtype: float64\n\nIn [9]: pd.Series([1, 2])\nOut[9]: \n0    1\n1    2\ndtype: int64 \n```", "```py\nIn [10]: pd.array([1, None], dtype=\"Int64\")\nOut[10]: \n<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\n\nIn [11]: pd.Series([1, None], dtype=\"Int64\")\nOut[11]: \n0       1\n1    <NA>\ndtype: Int64 \n```", "```py\nIn [12]: s = pd.Series([1, 2, None], dtype=\"Int64\")\n\n# arithmetic\nIn [13]: s + 1\nOut[13]: \n0       2\n1       3\n2    <NA>\ndtype: Int64\n\n# comparison\nIn [14]: s == 1\nOut[14]: \n0     True\n1    False\n2     <NA>\ndtype: boolean\n\n# slicing operation\nIn [15]: s.iloc[1:3]\nOut[15]: \n1       2\n2    <NA>\ndtype: Int64\n\n# operate with other dtypes\nIn [16]: s + s.iloc[1:3].astype(\"Int8\")\nOut[16]: \n0    <NA>\n1       4\n2    <NA>\ndtype: Int64\n\n# coerce when needed\nIn [17]: s + 0.01\nOut[17]: \n0    1.01\n1    2.01\n2    <NA>\ndtype: Float64 \n```", "```py\nIn [18]: df = pd.DataFrame({\"A\": s, \"B\": [1, 1, 3], \"C\": list(\"aab\")})\n\nIn [19]: df\nOut[19]: \n A  B  C\n0     1  1  a\n1     2  1  a\n2  <NA>  3  b\n\nIn [20]: df.dtypes\nOut[20]: \nA     Int64\nB     int64\nC    object\ndtype: object \n```", "```py\nIn [21]: pd.concat([df[[\"A\"]], df[[\"B\", \"C\"]]], axis=1).dtypes\nOut[21]: \nA     Int64\nB     int64\nC    object\ndtype: object\n\nIn [22]: df[\"A\"].astype(float)\nOut[22]: \n0    1.0\n1    2.0\n2    NaN\nName: A, dtype: float64 \n```", "```py\nIn [23]: df.sum(numeric_only=True)\nOut[23]: \nA    3\nB    5\ndtype: Int64\n\nIn [24]: df.sum()\nOut[24]: \nA      3\nB      5\nC    aab\ndtype: object\n\nIn [25]: df.groupby(\"B\").A.sum()\nOut[25]: \nB\n1    3\n3    0\nName: A, dtype: Int64 \n```", "```py\nIn [26]: a = pd.array([1, None], dtype=\"Int64\")\n\nIn [27]: a[1]\nOut[27]: <NA> \n```", "```py\nIn [1]: arr = pd.array([1, 2, None], dtype=pd.Int64Dtype())\n\nIn [2]: arr\nOut[2]: \n<IntegerArray>\n[1, 2, <NA>]\nLength: 3, dtype: Int64 \n```", "```py\nIn [3]: pd.array([1, 2, np.nan], dtype=\"Int64\")\nOut[3]: \n<IntegerArray>\n[1, 2, <NA>]\nLength: 3, dtype: Int64 \n```", "```py\nIn [4]: pd.array([1, 2, np.nan, None, pd.NA], dtype=\"Int64\")\nOut[4]: \n<IntegerArray>\n[1, 2, <NA>, <NA>, <NA>]\nLength: 5, dtype: Int64 \n```", "```py\nIn [5]: pd.Series(arr)\nOut[5]: \n0       1\n1       2\n2    <NA>\ndtype: Int64 \n```", "```py\nIn [6]: pd.array([1, None])\nOut[6]: \n<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\n\nIn [7]: pd.array([1, 2])\nOut[7]: \n<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64 \n```", "```py\nIn [8]: pd.Series([1, None])\nOut[8]: \n0    1.0\n1    NaN\ndtype: float64\n\nIn [9]: pd.Series([1, 2])\nOut[9]: \n0    1\n1    2\ndtype: int64 \n```", "```py\nIn [10]: pd.array([1, None], dtype=\"Int64\")\nOut[10]: \n<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\n\nIn [11]: pd.Series([1, None], dtype=\"Int64\")\nOut[11]: \n0       1\n1    <NA>\ndtype: Int64 \n```", "```py\nIn [12]: s = pd.Series([1, 2, None], dtype=\"Int64\")\n\n# arithmetic\nIn [13]: s + 1\nOut[13]: \n0       2\n1       3\n2    <NA>\ndtype: Int64\n\n# comparison\nIn [14]: s == 1\nOut[14]: \n0     True\n1    False\n2     <NA>\ndtype: boolean\n\n# slicing operation\nIn [15]: s.iloc[1:3]\nOut[15]: \n1       2\n2    <NA>\ndtype: Int64\n\n# operate with other dtypes\nIn [16]: s + s.iloc[1:3].astype(\"Int8\")\nOut[16]: \n0    <NA>\n1       4\n2    <NA>\ndtype: Int64\n\n# coerce when needed\nIn [17]: s + 0.01\nOut[17]: \n0    1.01\n1    2.01\n2    <NA>\ndtype: Float64 \n```", "```py\nIn [18]: df = pd.DataFrame({\"A\": s, \"B\": [1, 1, 3], \"C\": list(\"aab\")})\n\nIn [19]: df\nOut[19]: \n A  B  C\n0     1  1  a\n1     2  1  a\n2  <NA>  3  b\n\nIn [20]: df.dtypes\nOut[20]: \nA     Int64\nB     int64\nC    object\ndtype: object \n```", "```py\nIn [21]: pd.concat([df[[\"A\"]], df[[\"B\", \"C\"]]], axis=1).dtypes\nOut[21]: \nA     Int64\nB     int64\nC    object\ndtype: object\n\nIn [22]: df[\"A\"].astype(float)\nOut[22]: \n0    1.0\n1    2.0\n2    NaN\nName: A, dtype: float64 \n```", "```py\nIn [23]: df.sum(numeric_only=True)\nOut[23]: \nA    3\nB    5\ndtype: Int64\n\nIn [24]: df.sum()\nOut[24]: \nA      3\nB      5\nC    aab\ndtype: object\n\nIn [25]: df.groupby(\"B\").A.sum()\nOut[25]: \nB\n1    3\n3    0\nName: A, dtype: Int64 \n```", "```py\nIn [26]: a = pd.array([1, None], dtype=\"Int64\")\n\nIn [27]: a[1]\nOut[27]: <NA> \n```"]