- en: scipy.stats.nchypergeom_wallenius
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.nchypergeom_wallenius.html#scipy.stats.nchypergeom_wallenius](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.nchypergeom_wallenius.html#scipy.stats.nchypergeom_wallenius)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Wallenius’ noncentral hypergeometric discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wallenius’ noncentral hypergeometric distribution models drawing objects of
    two types from a bin. *M* is the total number of objects, *n* is the number of
    Type I objects, and *odds* is the odds ratio: the odds of selecting a Type I object
    rather than a Type II object when there is only one object of each type. The random
    variate represents the number of Type I objects drawn if we draw a pre-determined
    *N* objects from a bin one by one.'
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`nchypergeom_wallenius`](#scipy.stats.nchypergeom_wallenius
    "scipy.stats.nchypergeom_wallenius") object inherits from it a collection of generic
    methods (see below for the full list), and completes them with details specific
    for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nchypergeom_fisher`](scipy.stats.nchypergeom_fisher.html#scipy.stats.nchypergeom_fisher
    "scipy.stats.nchypergeom_fisher"), [`hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom"), [`nhypergeom`](scipy.stats.nhypergeom.html#scipy.stats.nhypergeom
    "scipy.stats.nhypergeom")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Let mathematical symbols \(N\), \(n\), and \(M\) correspond with parameters
    *N*, *n*, and *M* (respectively) as defined above.
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[p(x; N, n, M) = \binom{n}{x} \binom{M - n}{N-x} \int_0^1 \left(1-t^{\omega/D}\right)^x\left(1-t^{1/D}\right)^{N-x}
    dt\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(x \in [x_l, x_u]\), \(M \in {\mathbb N}\), \(n \in [0, M]\), \(N \in [0,
    M]\), \(\omega > 0\), where \(x_l = \max(0, N - (M - n))\), \(x_u = \min(N, n)\),
  prefs: []
  type: TYPE_NORMAL
- en: \[D = \omega(n - x) + ((M - n)-(N-x)),\]
  prefs: []
  type: TYPE_NORMAL
- en: and the binomial coefficients are defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\binom{n}{k} \equiv \frac{n!}{k! (n - k)!}.\]
  prefs: []
  type: TYPE_NORMAL
- en: '[`nchypergeom_wallenius`](#scipy.stats.nchypergeom_wallenius "scipy.stats.nchypergeom_wallenius")
    uses the BiasedUrn package by Agner Fog with permission for it to be distributed
    under SciPy’s license.'
  prefs: []
  type: TYPE_NORMAL
- en: The symbols used to denote the shape parameters (*N*, *n*, and *M*) are not
    universally accepted; they are chosen for consistency with [`hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom").
  prefs: []
  type: TYPE_NORMAL
- en: Note that Wallenius’ noncentral hypergeometric distribution is distinct from
    Fisher’s noncentral hypergeometric distribution, which models take a handful of
    objects from the bin at once, finding out afterwards that *N* objects were taken.
    When the odds ratio is unity, however, both distributions reduce to the ordinary
    hypergeometric distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `nchypergeom_wallenius.pmf(k,
    M, n, N, odds, loc)` is identically equivalent to `nchypergeom_wallenius.pmf(k
    - loc, M, n, N, odds)`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Agner Fog, “Biased Urn Theory”. [https://cran.r-project.org/web/packages/BiasedUrn/vignettes/UrnTheory.pdf](https://cran.r-project.org/web/packages/BiasedUrn/vignettes/UrnTheory.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: “Wallenius’ noncentral hypergeometric distribution”, Wikipedia, [https://en.wikipedia.org/wiki/Wallenius’_noncentral_hypergeometric_distribution](https://en.wikipedia.org/wiki/Wallenius'_noncentral_hypergeometric_distribution)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-nchypergeom_wallenius-1_00_00.png](../Images/2c48c9d7380ff3a6ca625c1d17e48069.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(M, n, N, odds, loc=0, size=1, random_state=None)** | Random variates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, M, n, N, odds, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, M, n, N, odds, loc=0)** | Log of the probability mass function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, M, n, N, odds, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, M, n, N, odds, loc=0)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, M, n, N, odds, loc=0)** | Survival function (also defined as `1 -
    cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, M, n, N, odds, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, M, n, N, odds, loc=0)** | Percent point function (inverse of `cdf`
    — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, M, n, N, odds, loc=0)** | Inverse survival function (inverse of
    `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(M, n, N, odds, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(M, n, N, odds, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(M, n, N, odds), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(M, n, N, odds, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(M, n, N, odds, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(M, n, N, odds, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(M, n, N, odds, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, M, n, N, odds, loc=0)** | Confidence interval with
    equal areas around the median. |'
  prefs: []
  type: TYPE_TB
