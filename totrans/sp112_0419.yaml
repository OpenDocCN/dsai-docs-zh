- en: scipy.odr.Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.odr.Model.html#scipy.odr.Model](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.odr.Model.html#scipy.odr.Model)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Model class stores information about the function you wish to fit.
  prefs: []
  type: TYPE_NORMAL
- en: It stores the function itself, at the least, and optionally stores functions
    which compute the Jacobians used during fitting. Also, one can provide a function
    that will provide reasonable starting values for the fit parameters possibly given
    the set of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fcn**function'
  prefs: []
  type: TYPE_NORMAL
- en: fcn(beta, x) –> y
  prefs: []
  type: TYPE_NORMAL
- en: '**fjacb**function'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian of fcn wrt the fit parameters beta.
  prefs: []
  type: TYPE_NORMAL
- en: fjacb(beta, x) –> @f_i(x,B)/@B_j
  prefs: []
  type: TYPE_NORMAL
- en: '**fjacd**function'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian of fcn wrt the (possibly multidimensional) input variable.
  prefs: []
  type: TYPE_NORMAL
- en: fjacd(beta, x) –> @f_i(x,B)/@x_j
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If specified, *extra_args* should be a tuple of extra arguments to pass to *fcn*,
    *fjacb*, and *fjacd*. Each will be called by *apply(fcn, (beta, x) + extra_args)*
  prefs: []
  type: TYPE_NORMAL
- en: '**estimate**array_like of rank-1'
  prefs: []
  type: TYPE_NORMAL
- en: Provides estimates of the fit parameters from the data
  prefs: []
  type: TYPE_NORMAL
- en: estimate(data) –> estbeta
  prefs: []
  type: TYPE_NORMAL
- en: '**implicit**boolean'
  prefs: []
  type: TYPE_NORMAL
- en: If TRUE, specifies that the model is implicit; i.e *fcn(beta, x)* ~= 0 and there
    is no y data to fit against
  prefs: []
  type: TYPE_NORMAL
- en: '**meta**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: freeform dictionary of metadata for the model
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Note that the *fcn*, *fjacb*, and *fjacd* operate on NumPy arrays and return
    a NumPy array. The *estimate* object takes an instance of the Data class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the rules for the shapes of the argument and return arrays of the
    callback functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*x*'
  prefs: []
  type: TYPE_NORMAL
- en: if the input data is single-dimensional, then *x* is rank-1 array; i.e., `x
    = array([1, 2, 3, ...]); x.shape = (n,)` If the input data is multi-dimensional,
    then *x* is a rank-2 array; i.e., `x = array([[1, 2, ...], [2, 4, ...]]); x.shape
    = (m, n)`. In all cases, it has the same shape as the input data array passed
    to [`odr`](odr-function.html#scipy.odr.odr "scipy.odr.odr"). *m* is the dimensionality
    of the input data, *n* is the number of observations.
  prefs: []
  type: TYPE_NORMAL
- en: '*y*'
  prefs: []
  type: TYPE_NORMAL
- en: if the response variable is single-dimensional, then *y* is a rank-1 array,
    i.e., `y = array([2, 4, ...]); y.shape = (n,)`. If the response variable is multi-dimensional,
    then *y* is a rank-2 array, i.e., `y = array([[2, 4, ...], [3, 6, ...]]); y.shape
    = (q, n)` where *q* is the dimensionality of the response variable.
  prefs: []
  type: TYPE_NORMAL
- en: '*beta*'
  prefs: []
  type: TYPE_NORMAL
- en: rank-1 array of length *p* where *p* is the number of parameters; i.e. `beta
    = array([B_1, B_2, ..., B_p])`
  prefs: []
  type: TYPE_NORMAL
- en: '*fjacb*'
  prefs: []
  type: TYPE_NORMAL
- en: if the response variable is multi-dimensional, then the return array’s shape
    is *(q, p, n)* such that `fjacb(x,beta)[l,k,i] = d f_l(X,B)/d B_k` evaluated at
    the ith data point. If *q == 1*, then the return array is only rank-2 and with
    shape *(p, n)*.
  prefs: []
  type: TYPE_NORMAL
- en: '*fjacd*'
  prefs: []
  type: TYPE_NORMAL
- en: as with fjacb, only the return array’s shape is *(q, m, n)* such that `fjacd(x,beta)[l,j,i]
    = d f_l(X,B)/d X_j` at the ith data point. If *q == 1*, then the return array’s
    shape is *(m, n)*. If *m == 1*, the shape is (q, n). If *m == q == 1*, the shape
    is *(n,)*.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`set_meta`](scipy.odr.Model.set_meta.html#scipy.odr.Model.set_meta "scipy.odr.Model.set_meta")(**kwds)
    | Update the metadata dictionary with the keywords and data provided here. |'
  prefs: []
  type: TYPE_TB
