- en: numpy.ma.dstack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.dstack.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.dstack.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: dstack
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence depth wise (along third axis).
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to concatenation along the third axis after 2-D arrays of
    shape *(M,N)* have been reshaped to *(M,N,1)* and 1-D arrays of shape *(N,)* have
    been reshaped to *(1,N,1)*. Rebuilds arrays divided by [`dsplit`](numpy.dsplit.html#numpy.dsplit
    "numpy.dsplit").
  prefs: []
  type: TYPE_NORMAL
- en: This function makes most sense for arrays with up to 3 dimensions. For instance,
    for pixel-data with a height (first axis), width (second axis), and r/g/b channels
    (third axis). The functions [`concatenate`](numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`stack`](numpy.stack.html#numpy.stack "numpy.stack") and
    [`block`](numpy.block.html#numpy.block "numpy.block") provide more general stacking
    and concatenation operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tup**sequence of arrays'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays must have the same shape along all but the third axis. 1-D or 2-D
    arrays must have the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stacked**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The array formed by stacking the given arrays, will be at least 3-D.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
  prefs: []
  type: TYPE_NORMAL
- en: Join a sequence of arrays along an existing axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`stack`](numpy.stack.html#numpy.stack "numpy.stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Join a sequence of arrays along a new axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`block`](numpy.block.html#numpy.block "numpy.block")'
  prefs: []
  type: TYPE_NORMAL
- en: Assemble an nd-array from nested lists of blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '[`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence vertically (row wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`hstack`](numpy.hstack.html#numpy.hstack "numpy.hstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence horizontally (column wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`column_stack`](numpy.column_stack.html#numpy.column_stack "numpy.column_stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack 1-D arrays as columns into a 2-D array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dsplit`](numpy.dsplit.html#numpy.dsplit "numpy.dsplit")'
  prefs: []
  type: TYPE_NORMAL
- en: Split array along third axis.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The function is applied to both the _data and the _mask, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
