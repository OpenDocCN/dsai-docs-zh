- en: scipy.signal.chirp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.chirp.html#scipy.signal.chirp](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.chirp.html#scipy.signal.chirp)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Frequency-swept cosine generator.
  prefs: []
  type: TYPE_NORMAL
- en: In the following, ‘Hz’ should be interpreted as ‘cycles per unit’; there is
    no requirement here that the unit is one second. The important distinction is
    that the units of rotation are cycles, not radians. Likewise, *t* could be a measurement
    of space instead of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Times at which to evaluate the waveform.
  prefs: []
  type: TYPE_NORMAL
- en: '**f0**float'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency (e.g. Hz) at time t=0.
  prefs: []
  type: TYPE_NORMAL
- en: '**t1**float'
  prefs: []
  type: TYPE_NORMAL
- en: Time at which *f1* is specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**f1**float'
  prefs: []
  type: TYPE_NORMAL
- en: Frequency (e.g. Hz) of the waveform at time *t1*.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{‘linear’, ‘quadratic’, ‘logarithmic’, ‘hyperbolic’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Kind of frequency sweep. If not given, *linear* is assumed. See Notes below
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**phi**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Phase offset, in degrees. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**vertex_zero**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This parameter is only used when *method* is ‘quadratic’. It determines whether
    the vertex of the parabola that is the graph of the frequency is at t=0 or t=t1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A numpy array containing the signal evaluated at *t* with the requested time-varying
    frequency. More precisely, the function returns `cos(phase + (pi/180)*phi)` where
    *phase* is the integral (from 0 to *t*) of `2*pi*f(t)`. `f(t)` is defined below.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sweep_poly`](scipy.signal.sweep_poly.html#scipy.signal.sweep_poly "scipy.signal.sweep_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: There are four options for the *method*. The following formulas give the instantaneous
    frequency (in Hz) of the signal generated by *chirp()*. For convenience, the shorter
    names shown below may also be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'linear, lin, li:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = f0 + (f1 - f0) * t / t1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'quadratic, quad, q:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph of the frequency f(t) is a parabola through (0, f0) and (t1, f1).
    By default, the vertex of the parabola is at (0, f0). If *vertex_zero* is False,
    then the vertex is at (t1, f1). The formula is:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if vertex_zero is True:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`f(t) = f0 + (f1 - f0) * t**2 / t1**2`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`f(t) = f1 - (f1 - f0) * (t1 - t)**2 / t1**2`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To use a more general quadratic function, or an arbitrary polynomial, use the
    function [`scipy.signal.sweep_poly`](scipy.signal.sweep_poly.html#scipy.signal.sweep_poly
    "scipy.signal.sweep_poly").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'logarithmic, log, lo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = f0 * (f1/f0)**(t/t1)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: f0 and f1 must be nonzero and have the same sign.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This signal is also known as a geometric or exponential chirp.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'hyperbolic, hyp:'
  prefs: []
  type: TYPE_NORMAL
- en: '`f(t) = f0*f1*t1 / ((f0 - f1)*t + f1*t1)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: f0 and f1 must be nonzero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be used in the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For the first example, we’ll plot the waveform for a linear chirp from 6 Hz
    to 1 Hz over 10 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-chirp-1_00_00.png](../Images/c139cc79f7df081eb2a0fac88454515d.png)'
  prefs: []
  type: TYPE_IMG
- en: For the remaining examples, we’ll use higher frequency ranges, and demonstrate
    the result using [`scipy.signal.spectrogram`](scipy.signal.spectrogram.html#scipy.signal.spectrogram
    "scipy.signal.spectrogram"). We’ll use a 4 second interval sampled at 7200 Hz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use this function to plot the spectrogram in each example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Quadratic chirp from 1500 Hz to 250 Hz (vertex of the parabolic curve of the
    frequency is at t=0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-chirp-1_01_00.png](../Images/3e115ffe0149dc2b937f9b270211b84b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Quadratic chirp from 1500 Hz to 250 Hz (vertex of the parabolic curve of the
    frequency is at t=T):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-chirp-1_02_00.png](../Images/81b05bb75478a13a3f4ab1fca5e38fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Logarithmic chirp from 1500 Hz to 250 Hz:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-chirp-1_03_00.png](../Images/764e5db5af9982307c3079100d155765.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hyperbolic chirp from 1500 Hz to 250 Hz:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-chirp-1_04_00.png](../Images/1cdb1c2dfdc1f44401224194ee3527e1.png)'
  prefs: []
  type: TYPE_IMG
