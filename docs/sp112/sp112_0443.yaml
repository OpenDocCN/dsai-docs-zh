- en: scipy.optimize.brute
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.brute
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Minimize a function over a given range by brute force.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过蛮力法在给定范围内最小化一个函数。
- en: Uses the “brute force” method, i.e., computes the function’s value at each point
    of a multidimensional grid of points, to find the global minimum of the function.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“蛮力”方法，即在多维点网格的每个点计算函数的值，以找到函数的全局最小值。
- en: The function is evaluated everywhere in the range with the datatype of the first
    call to the function, as enforced by the `vectorize` NumPy function. The value
    and type of the function evaluation returned when `full_output=True` are affected
    in addition by the `finish` argument (see Notes).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 函数在调用时以第一个调用函数的数据类型在范围内进行评估，由 `vectorize` NumPy 函数强制执行。当 `full_output=True`
    时，函数评估的值和类型受 *finish* 参数的影响（详见 Notes）。
- en: The brute force approach is inefficient because the number of grid points increases
    exponentially - the number of grid points to evaluate is `Ns ** len(x)`. Consequently,
    even with coarse grid spacing, even moderately sized problems can take a long
    time to run, and/or run into memory limitations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 蛮力法是低效的，因为网格点的数量呈指数增长 - 要评估的网格点数量为 `Ns ** len(x)`。因此，即使是粗略的网格间距，中等规模的问题也可能需要很长时间运行，或者会遇到内存限制。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**func**callable'
- en: The objective function to be minimized. Must be in the form `f(x, *args)`, where
    `x` is the argument in the form of a 1-D array and `args` is a tuple of any additional
    fixed parameters needed to completely specify the function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要最小化的目标函数。必须是形式为 `f(x, *args)` 的函数，其中 `x` 是一个一维数组的参数，而 `args` 是一个元组，包含完全指定函数所需的任何额外固定参数。
- en: '**ranges**tuple'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**ranges**tuple'
- en: Each component of the *ranges* tuple must be either a “slice object” or a range
    tuple of the form `(low, high)`. The program uses these to create the grid of
    points on which the objective function will be computed. See *Note 2* for more
    detail.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*ranges* 元组的每个组件必须是“切片对象”或形如 `(low, high)` 的范围元组。程序使用这些来创建网格点，以便计算目标函数。详见 *Note
    2*。'
- en: '**args**tuple, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**tuple, optional'
- en: Any additional fixed parameters needed to completely specify the function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何额外固定参数，以完全指定函数。
- en: '**Ns**int, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ns**int, optional'
- en: Number of grid points along the axes, if not otherwise specified. See *Note2*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未另有说明，每个轴上的网格点数。详见 *Note2*。
- en: '**full_output**bool, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**full_output**bool, optional'
- en: If True, return the evaluation grid and the objective function’s values on it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则返回评估网格及其上的目标函数值。
- en: '**finish**callable, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**finish**callable, optional'
- en: An optimization function that is called with the result of brute force minimization
    as initial guess. *finish* should take *func* and the initial guess as positional
    arguments, and take *args* as keyword arguments. It may additionally take *full_output*
    and/or *disp* as keyword arguments. Use None if no “polishing” function is to
    be used. See Notes for more details.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优化函数，它以蛮力最小化的结果作为初始猜测进行调用。*finish* 应将 *func* 和初始猜测作为位置参数，并将 *args* 作为关键字参数。它还可以作为关键字参数接受
    *full_output* 和/或 *disp*。如果不使用“抛光”函数，则使用 None。详见 Notes 获取更多详情。
- en: '**disp**bool, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**bool, optional'
- en: Set to True to print convergence messages from the *finish* callable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 True 时，打印来自 *finish* 可调用的收敛消息。
- en: '**workers**int or map-like callable, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**workers**int or map-like callable, optional'
- en: If *workers* is an int the grid is subdivided into *workers* sections and evaluated
    in parallel (uses [`multiprocessing.Pool`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
    "(in Python v3.12)")). Supply *-1* to use all cores available to the Process.
    Alternatively supply a map-like callable, such as *multiprocessing.Pool.map* for
    evaluating the grid in parallel. This evaluation is carried out as `workers(func,
    iterable)`. Requires that *func* be pickleable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *workers* 是一个整数，则将网格细分为 *workers* 部分，并并行评估（使用 [`multiprocessing.Pool`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
    "(in Python v3.12)")）。提供 *-1* 使用所有可用的核心进程。或者提供一个类似映射的可调用对象，例如 *multiprocessing.Pool.map*
    用于并行评估网格。此评估是作为 `workers(func, iterable)` 进行的。要求 *func* 可被 pickle。
- en: New in version 1.3.0.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.3.0 起新增。
- en: 'Returns:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**x0**ndarray'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**ndarray'
- en: A 1-D array containing the coordinates of a point at which the objective function
    had its minimum value. (See *Note 1* for which point is returned.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 包含目标函数取得其最小值的点的坐标的一维数组。（参见*注1*，了解返回的是哪个点。）
- en: '**fval**float'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**fval**浮点数'
- en: Function value at the point *x0*. (Returned when *full_output* is True.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*x0*点处的函数值。（当*full_output*为True时返回。）'
- en: '**grid**tuple'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**grid**元组'
- en: Representation of the evaluation grid. It has the same length as *x0*. (Returned
    when *full_output* is True.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 评估网格的表示。它与*x0*的长度相同。（当*full_output*为True时返回。）
- en: '**Jout**ndarray'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jout**数组'
- en: Function values at each point of the evaluation grid, i.e., `Jout = func(*grid)`.
    (Returned when *full_output* is True.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估网格的每个点处的函数值，即`Jout = func(*grid)`。（当*full_output*为True时返回。）
- en: See also
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping"), [`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping")，[`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution")'
- en: Notes
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记
- en: '*Note 1*: The program finds the gridpoint at which the lowest value of the
    objective function occurs. If *finish* is None, that is the point returned. When
    the global minimum occurs within (or not very far outside) the grid’s boundaries,
    and the grid is fine enough, that point will be in the neighborhood of the global
    minimum.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*注1*：程序找到了目标函数取得最低值的网格点。如果*finish*为None，则返回该点。当全局最小值出现在网格边界内（或者非常接近）且网格足够精细时，该点将位于全局最小值的邻近区域。'
- en: However, users often employ some other optimization program to “polish” the
    gridpoint values, i.e., to seek a more precise (local) minimum near *brute’s*
    best gridpoint. The [`brute`](#scipy.optimize.brute "scipy.optimize.brute") function’s
    *finish* option provides a convenient way to do that. Any polishing program used
    must take *brute’s* output as its initial guess as a positional argument, and
    take *brute’s* input values for *args* as keyword arguments, otherwise an error
    will be raised. It may additionally take *full_output* and/or *disp* as keyword
    arguments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，用户通常使用其他优化程序来“磨光”网格点的值，即在*brute*的最佳网格点附近寻找更精确（局部）的最小值。[`brute`](#scipy.optimize.brute
    "scipy.optimize.brute")函数的*finish*选项提供了一种方便的方法来实现此目的。使用的任何磨光程序必须将*brute*的输出作为其位置参数的初始猜测，并将*brute*的输入值作为关键字参数的*args*。否则将会引发错误。它还可以作为关键字参数接受*full_output*和/或*disp*。
- en: '[`brute`](#scipy.optimize.brute "scipy.optimize.brute") assumes that the *finish*
    function returns either an [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") object or a tuple in the form: `(xmin, Jmin,
    ... , statuscode)`, where `xmin` is the minimizing value of the argument, `Jmin`
    is the minimum value of the objective function, “…” may be some other returned
    values (which are not used by [`brute`](#scipy.optimize.brute "scipy.optimize.brute")),
    and `statuscode` is the status code of the *finish* program.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`brute`](#scipy.optimize.brute "scipy.optimize.brute")假设*finish*函数返回`OptimizeResult`对象或形如`(xmin,
    Jmin, ... , statuscode)`的元组，其中`xmin`是参数的最小值，`Jmin`是目标函数的最小值，“…”可能是其他返回的值（[`brute`](#scipy.optimize.brute
    "scipy.optimize.brute")不使用），而`statuscode`是*finish*程序的状态码。'
- en: Note that when *finish* is not None, the values returned are those of the *finish*
    program, *not* the gridpoint ones. Consequently, while [`brute`](#scipy.optimize.brute
    "scipy.optimize.brute") confines its search to the input grid points, the *finish*
    program’s results usually will not coincide with any gridpoint, and may fall outside
    the grid’s boundary. Thus, if a minimum only needs to be found over the provided
    grid points, make sure to pass in *finish=None*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当*finish*不为None时，返回的值是*finish*程序的结果，而不是网格点的结果。因此，虽然[`brute`](#scipy.optimize.brute
    "scipy.optimize.brute")限制其搜索在输入网格点上，但*finish*程序的结果通常不会与任何网格点重合，并且可能落在网格的边界之外。因此，如果仅需要在提供的网格点上找到最小值，请确保传入*finish=None*。
- en: '*Note 2*: The grid of points is a [`numpy.mgrid`](https://numpy.org/devdocs/reference/generated/numpy.mgrid.html#numpy.mgrid
    "(in NumPy v2.0.dev0)") object. For [`brute`](#scipy.optimize.brute "scipy.optimize.brute")
    the *ranges* and *Ns* inputs have the following effect. Each component of the
    *ranges* tuple can be either a slice object or a two-tuple giving a range of values,
    such as (0, 5). If the component is a slice object, [`brute`](#scipy.optimize.brute
    "scipy.optimize.brute") uses it directly. If the component is a two-tuple range,
    [`brute`](#scipy.optimize.brute "scipy.optimize.brute") internally converts it
    to a slice object that interpolates *Ns* points from its low-value to its high-value,
    inclusive.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*注2*：点的网格是一个[`numpy.mgrid`](https://numpy.org/doc/stable/reference/generated/numpy.mgrid.html#numpy.mgrid
    "(在 NumPy v2.0.dev0 中)")对象。对于[`brute`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")，*ranges*和*Ns*的输入具有以下效果。*ranges*元组的每个组件可以是一个切片对象或一个给定值范围的两元组，比如(0,
    5)。如果组件是一个切片对象，[`brute`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")直接使用它。如果组件是一个两元组范围，[`brute`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")内部将其转换为一个切片对象，该对象从其低值到其高值插值出*Ns*个点，包括两端的值。'
- en: Examples
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: We illustrate the use of [`brute`](#scipy.optimize.brute "scipy.optimize.brute")
    to seek the global minimum of a function of two variables that is given as the
    sum of a positive-definite quadratic and two deep “Gaussian-shaped” craters. Specifically,
    define the objective function *f* as the sum of three other functions, `f = f1
    + f2 + f3`. We suppose each of these has a signature `(z, *params)`, where `z
    = (x, y)`, and `params` and the functions are as defined below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示了使用[`brute`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")来寻找一个由正定二次型和两个深“高斯形”坑的函数的全局最小值。具体地，定义目标函数*f*为另外三个函数的和，`f
    = f1 + f2 + f3`。我们假设每个函数都有一个签名`(z, *params)`，其中`z = (x, y)`，而`params`和函数如下所定义。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Thus, the objective function may have local minima near the minimum of each
    of the three functions of which it is composed. To use [`fmin`](scipy.optimize.fmin.html#scipy.optimize.fmin
    "scipy.optimize.fmin") to polish its gridpoint result, we may then continue as
    follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，目标函数可能在由其组成的三个函数的最小值附近有局部极小值。为了使用[`fmin`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin.html#scipy.optimize.fmin
    "scipy.optimize.fmin")来优化其格点结果，我们可以继续如下操作：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that if *finish* had been set to None, we would have gotten the gridpoint
    [-1.0 1.75] where the rounded function value is -2.892.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果*finish*被设置为None，我们将得到格点[-1.0 1.75]，其中四舍五入的函数值为-2.892。
