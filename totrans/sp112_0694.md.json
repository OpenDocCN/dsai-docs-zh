["```py\nscipy.sparse.random_array(shape, *, density=0.01, format='coo', dtype=None, random_state=None, data_sampler=None)\n```", "```py\n>>> import numpy as np\n>>> import scipy as sp\n>>> rng = np.random.default_rng() \n```", "```py\n>>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng) \n```", "```py\n>>> rvs = sp.stats.poisson(25, loc=10).rvs\n>>> S = sp.sparse.random_array((3, 4), density=0.25,\n...                            random_state=rng, data_sampler=rvs)\n>>> S.toarray()\narray([[ 36.,   0.,  33.,   0.],   # random\n [  0.,   0.,   0.,   0.],\n [  0.,   0.,  36.,   0.]]) \n```", "```py\n>>> def np_normal_squared(size=None, random_state=rng):\n...     return random_state.standard_normal(size) ** 2\n>>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng,\n...                      data_sampler=np_normal_squared) \n```", "```py\n>>> def sp_stats_normal_squared(size=None, random_state=rng):\n...     std_normal = sp.stats.distributions.norm_gen().rvs\n...     return std_normal(size=size, random_state=random_state) ** 2\n>>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng,\n...                      data_sampler=sp_stats_normal_squared) \n```", "```py\n>>> class NormalSquared(sp.stats.rv_continuous):\n...     def _rvs(self,  size=None, random_state=rng):\n...         return random_state.standard_normal(size) ** 2\n>>> X = NormalSquared()\n>>> Y = X().rvs\n>>> S = sp.sparse.random_array((3, 4), density=0.25,\n...                            random_state=rng, data_sampler=Y) \n```"]