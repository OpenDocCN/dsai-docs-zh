["```py\nclass sympy.functions.elementary.complexes.re(arg)\n```", "```py\n>>> from sympy import re, im, I, E, symbols\n>>> x, y = symbols('x y', real=True)\n>>> re(2*E)\n2*E\n>>> re(2*I + 17)\n17\n>>> re(2*I)\n0\n>>> re(im(x) + x*I + 2)\n2\n>>> re(5 + I + 2)\n7 \n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\nclass sympy.functions.elementary.complexes.im(arg)\n```", "```py\n>>> from sympy import re, im, E, I\n>>> from sympy.abc import x, y\n>>> im(2*E)\n0\n>>> im(2*I + 17)\n2\n>>> im(x*I)\nre(x)\n>>> im(re(x) + y)\nim(y)\n>>> im(2 + 3*I)\n3 \n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\nclass sympy.functions.elementary.complexes.sign(arg)\n```", "```py\n>>> from sympy import sign, I \n```", "```py\n>>> sign(-1)\n-1\n>>> sign(0)\n0\n>>> sign(-3*I)\n-I\n>>> sign(1 + I)\nsign(1 + I)\n>>> _.evalf()\n0.707106781186548 + 0.707106781186548*I \n```", "```py\nclass sympy.functions.elementary.complexes.Abs(arg)\n```", "```py\n>>> from sympy import Abs, Symbol, S, I\n>>> Abs(-1)\n1\n>>> x = Symbol('x', real=True)\n>>> Abs(-x)\nAbs(x)\n>>> Abs(x**2)\nx**2\n>>> abs(-x) # The Python built-in\nAbs(x)\n>>> Abs(3*x + 2*I)\nsqrt(9*x**2 + 4)\n>>> Abs(8*I)\n8 \n```", "```py\n>>> type(abs(-1))\n<... 'int'>\n>>> type(abs(S.NegativeOne))\n<class 'sympy.core.numbers.One'> \n```", "```py\nfdiff(argindex=1)\n```", "```py\nclass sympy.functions.elementary.complexes.arg(arg)\n```", "```py\n>>> from sympy import arg, I, sqrt, Dummy\n>>> from sympy.abc import x\n>>> arg(2.0)\n0\n>>> arg(I)\npi/2\n>>> arg(sqrt(2) + I*sqrt(2))\npi/4\n>>> arg(sqrt(3)/2 + I/2)\npi/6\n>>> arg(4 + 3*I)\natan(3/4)\n>>> arg(0.8 + 0.6*I)\n0.643501108793284\n>>> arg(arg(arg(arg(x))))\nnan\n>>> real = Dummy(real=True)\n>>> arg(arg(arg(real)))\nnan \n```", "```py\nclass sympy.functions.elementary.complexes.conjugate(arg)\n```", "```py\n>>> from sympy import conjugate, I\n>>> conjugate(2)\n2\n>>> conjugate(I)\n-I\n>>> conjugate(3 + 2*I)\n3 - 2*I\n>>> conjugate(5 - I)\n5 + I \n```", "```py\nclass sympy.functions.elementary.complexes.polar_lift(arg)\n```", "```py\n>>> from sympy import Symbol, polar_lift, I\n>>> p = Symbol('p', polar=True)\n>>> x = Symbol('x')\n>>> polar_lift(4)\n4*exp_polar(0)\n>>> polar_lift(-4)\n4*exp_polar(I*pi)\n>>> polar_lift(-I)\nexp_polar(-I*pi/2)\n>>> polar_lift(I + 2)\npolar_lift(2 + I) \n```", "```py\n>>> polar_lift(4*x)\n4*polar_lift(x)\n>>> polar_lift(4*p)\n4*p \n```", "```py\nclass sympy.functions.elementary.complexes.periodic_argument(ar, period)\n```", "```py\n>>> from sympy import exp_polar, periodic_argument\n>>> from sympy import I, pi\n>>> periodic_argument(exp_polar(10*I*pi), 2*pi)\n0\n>>> periodic_argument(exp_polar(5*I*pi), 4*pi)\npi\n>>> from sympy import exp_polar, periodic_argument\n>>> from sympy import I, pi\n>>> periodic_argument(exp_polar(5*I*pi), 2*pi)\npi\n>>> periodic_argument(exp_polar(5*I*pi), 3*pi)\n-pi\n>>> periodic_argument(exp_polar(5*I*pi), pi)\n0 \n```", "```py\nclass sympy.functions.elementary.complexes.principal_branch(x, period)\n```", "```py\n>>> from sympy import exp_polar, principal_branch, oo, I, pi\n>>> from sympy.abc import z\n>>> principal_branch(z, oo)\nz\n>>> principal_branch(exp_polar(2*pi*I)*3, 2*pi)\n3*exp_polar(0)\n>>> principal_branch(exp_polar(2*pi*I)*3*z, 2*pi)\n3*principal_branch(z, 2*pi) \n```", "```py\nclass sympy.functions.elementary.trigonometric.sin(arg)\n```", "```py\n>>> from sympy import sin, pi\n>>> from sympy.abc import x\n>>> sin(x**2).diff(x)\n2*x*cos(x**2)\n>>> sin(1).diff(x)\n0\n>>> sin(pi)\n0\n>>> sin(pi/2)\n1\n>>> sin(pi/6)\n1/2\n>>> sin(pi/12)\n-sqrt(2)/4 + sqrt(6)/4 \n```", "```py\nclass sympy.functions.elementary.trigonometric.cos(arg)\n```", "```py\n>>> from sympy import cos, pi\n>>> from sympy.abc import x\n>>> cos(x**2).diff(x)\n-2*x*sin(x**2)\n>>> cos(1).diff(x)\n0\n>>> cos(pi)\n-1\n>>> cos(pi/2)\n0\n>>> cos(2*pi/3)\n-1/2\n>>> cos(pi/12)\nsqrt(2)/4 + sqrt(6)/4 \n```", "```py\nclass sympy.functions.elementary.trigonometric.tan(arg)\n```", "```py\n>>> from sympy import tan, pi\n>>> from sympy.abc import x\n>>> tan(x**2).diff(x)\n2*x*(tan(x**2)**2 + 1)\n>>> tan(1).diff(x)\n0\n>>> tan(pi/8).expand()\n-1 + sqrt(2) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.cot(arg)\n```", "```py\n>>> from sympy import cot, pi\n>>> from sympy.abc import x\n>>> cot(x**2).diff(x)\n2*x*(-cot(x**2)**2 - 1)\n>>> cot(1).diff(x)\n0\n>>> cot(pi/12)\nsqrt(3) + 2 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.sec(arg)\n```", "```py\n>>> from sympy import sec\n>>> from sympy.abc import x\n>>> sec(x**2).diff(x)\n2*x*tan(x**2)*sec(x**2)\n>>> sec(1).diff(x)\n0 \n```", "```py\nclass sympy.functions.elementary.trigonometric.csc(arg)\n```", "```py\n>>> from sympy import csc\n>>> from sympy.abc import x\n>>> csc(x**2).diff(x)\n-2*x*cot(x**2)*csc(x**2)\n>>> csc(1).diff(x)\n0 \n```", "```py\nclass sympy.functions.elementary.trigonometric.sinc(arg)\n```", "```py\n>>> from sympy import sinc, oo, jn\n>>> from sympy.abc import x\n>>> sinc(x)\nsinc(x) \n```", "```py\n>>> sinc(0)\n1\n>>> sinc(oo)\n0 \n```", "```py\n>>> sinc(x).diff()\ncos(x)/x - sin(x)/x**2 \n```", "```py\n>>> sinc(x).series()\n1 - x**2/6 + x**4/120 + O(x**6) \n```", "```py\n>>> sinc(x).rewrite(jn)\njn(0, x) \n```", "```py\nclass sympy.functions.elementary.trigonometric.asin(arg)\n```", "```py\n>>> from sympy import asin, oo\n>>> asin(1)\npi/2\n>>> asin(-1)\n-pi/2\n>>> asin(-oo)\noo*I\n>>> asin(oo)\n-oo*I \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.acos(arg)\n```", "```py\n>>> from sympy import acos, oo\n>>> acos(1)\n0\n>>> acos(0)\npi/2\n>>> acos(oo)\noo*I \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.atan(arg)\n```", "```py\n>>> from sympy import atan, oo\n>>> atan(0)\n0\n>>> atan(1)\npi/4\n>>> atan(oo)\npi/2 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.acot(arg)\n```", "```py\n>>> from sympy import acot, sqrt\n>>> acot(0)\npi/2\n>>> acot(1)\npi/4\n>>> acot(sqrt(3) - 2)\n-5*pi/12 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.asec(arg)\n```", "```py\n>>> from sympy import asec, oo\n>>> asec(1)\n0\n>>> asec(-1)\npi\n>>> asec(0)\nzoo\n>>> asec(-oo)\npi/2 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.acsc(arg)\n```", "```py\n>>> from sympy import acsc, oo\n>>> acsc(1)\npi/2\n>>> acsc(-1)\n-pi/2\n>>> acsc(oo)\n0\n>>> acsc(-oo) == acsc(oo)\nTrue\n>>> acsc(0)\nzoo \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.trigonometric.atan2(y, x)\n```", "```py\n>>> from sympy import atan2\n>>> atan2(0, 1)\n0\n>>> atan2(1, 1)\npi/4\n>>> atan2(1, 0)\npi/2\n>>> atan2(1, -1)\n3*pi/4\n>>> atan2(0, -1)\npi\n>>> atan2(-1, -1)\n-3*pi/4\n>>> atan2(-1, 0)\n-pi/2\n>>> atan2(-1, 1)\n-pi/4 \n```", "```py\n>>> from sympy import atan, S\n>>> atan(S(1)/-1)\n-pi/4\n>>> atan2(1, -1)\n3*pi/4 \n```", "```py\n>>> from sympy import diff\n>>> from sympy.abc import x, y\n>>> diff(atan2(y, x), x)\n-y/(x**2 + y**2) \n```", "```py\n>>> diff(atan2(y, x), y)\nx/(x**2 + y**2) \n```", "```py\n>>> from sympy import log\n>>> atan2(y, x).rewrite(log)\n-I*log((x + I*y)/sqrt(x**2 + y**2)) \n```", "```py\n>>> from sympy import atan\n>>> atan2(y, x).rewrite(atan)\nPiecewise((2*atan(y/(x + sqrt(x**2 + y**2))), Ne(y, 0)), (pi, re(x) < 0), (0, Ne(x, 0)), (nan, True)) \n```", "```py\nclass sympy.functions.elementary.hyperbolic.HyperbolicFunction(*args)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.sinh(arg)\n```", "```py\n>>> from sympy import sinh\n>>> from sympy.abc import x\n>>> sinh(x)\nsinh(x) \n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nstatic taylor_term(n, x, *previous_terms)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.cosh(arg)\n```", "```py\n>>> from sympy import cosh\n>>> from sympy.abc import x\n>>> cosh(x)\ncosh(x) \n```", "```py\nclass sympy.functions.elementary.hyperbolic.tanh(arg)\n```", "```py\n>>> from sympy import tanh\n>>> from sympy.abc import x\n>>> tanh(x)\ntanh(x) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.coth(arg)\n```", "```py\n>>> from sympy import coth\n>>> from sympy.abc import x\n>>> coth(x)\ncoth(x) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.sech(arg)\n```", "```py\n>>> from sympy import sech\n>>> from sympy.abc import x\n>>> sech(x)\nsech(x) \n```", "```py\nclass sympy.functions.elementary.hyperbolic.csch(arg)\n```", "```py\n>>> from sympy import csch\n>>> from sympy.abc import x\n>>> csch(x)\ncsch(x) \n```", "```py\nfdiff(argindex=1)\n```", "```py\nstatic taylor_term(n, x, *previous_terms)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.asinh(arg)\n```", "```py\n>>> from sympy import asinh\n>>> from sympy.abc import x\n>>> asinh(x).diff(x)\n1/sqrt(x**2 + 1)\n>>> asinh(1)\nlog(1 + sqrt(2)) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.acosh(arg)\n```", "```py\n>>> from sympy import acosh\n>>> from sympy.abc import x\n>>> acosh(x).diff(x)\n1/(sqrt(x - 1)*sqrt(x + 1))\n>>> acosh(1)\n0 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.atanh(arg)\n```", "```py\n>>> from sympy import atanh\n>>> from sympy.abc import x\n>>> atanh(x).diff(x)\n1/(1 - x**2) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.acoth(arg)\n```", "```py\n>>> from sympy import acoth\n>>> from sympy.abc import x\n>>> acoth(x).diff(x)\n1/(1 - x**2) \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.asech(arg)\n```", "```py\n>>> from sympy import asech, sqrt, S\n>>> from sympy.abc import x\n>>> asech(x).diff(x)\n-1/(x*sqrt(1 - x**2))\n>>> asech(1).diff(x)\n0\n>>> asech(1)\n0\n>>> asech(S(2))\nI*pi/3\n>>> asech(-sqrt(2))\n3*I*pi/4\n>>> asech((sqrt(6) - sqrt(2)))\nI*pi/12 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.hyperbolic.acsch(arg)\n```", "```py\n>>> from sympy import acsch, sqrt, I\n>>> from sympy.abc import x\n>>> acsch(x).diff(x)\n-1/(x**2*sqrt(1 + x**(-2)))\n>>> acsch(1).diff(x)\n0\n>>> acsch(1)\nlog(1 + sqrt(2))\n>>> acsch(I)\n-I*pi/2\n>>> acsch(-2*I)\nI*pi/6\n>>> acsch(I*(sqrt(6) - sqrt(2)))\n-5*I*pi/12 \n```", "```py\ninverse(argindex=1)\n```", "```py\nclass sympy.functions.elementary.integers.ceiling(arg)\n```", "```py\n>>> from sympy import ceiling, E, I, S, Float, Rational\n>>> ceiling(17)\n17\n>>> ceiling(Rational(23, 10))\n3\n>>> ceiling(2*E)\n6\n>>> ceiling(-Float(0.567))\n0\n>>> ceiling(I/2)\nI\n>>> ceiling(S(5)/2 + 5*I/2)\n3 + 3*I \n```", "```py\nclass sympy.functions.elementary.integers.floor(arg)\n```", "```py\n>>> from sympy import floor, E, I, S, Float, Rational\n>>> floor(17)\n17\n>>> floor(Rational(23, 10))\n2\n>>> floor(2*E)\n5\n>>> floor(-Float(0.567))\n-1\n>>> floor(-I/2)\n-I\n>>> floor(S(5)/2 + 5*I/2)\n2 + 2*I \n```", "```py\nclass sympy.functions.elementary.integers.RoundFunction(arg)\n```", "```py\nclass sympy.functions.elementary.integers.frac(arg)\n```", "```py\n>>> from sympy import Symbol, frac, Rational, floor, I\n>>> frac(Rational(4, 3))\n1/3\n>>> frac(-Rational(4, 3))\n2/3 \n```", "```py\n>>> n = Symbol('n', integer=True)\n>>> frac(n)\n0 \n```", "```py\n>>> x = Symbol('x')\n>>> frac(x).rewrite(floor)\nx - floor(x) \n```", "```py\n>>> r = Symbol('r', real=True)\n>>> t = Symbol('t', real=True)\n>>> frac(t + I*r)\nI*frac(r) + frac(t) \n```", "```py\nclass sympy.functions.elementary.exponential.exp(arg)\n```", "```py\n>>> from sympy import exp, I, pi\n>>> from sympy.abc import x\n>>> exp(x)\nexp(x)\n>>> exp(x).diff(x)\nexp(x)\n>>> exp(I*pi)\n-1 \n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\n>>> from sympy import exp, I\n>>> from sympy.abc import x\n>>> exp(x).as_real_imag()\n(exp(re(x))*cos(im(x)), exp(re(x))*sin(im(x)))\n>>> exp(1).as_real_imag()\n(E, 0)\n>>> exp(I).as_real_imag()\n(cos(1), sin(1))\n>>> exp(1+I).as_real_imag()\n(E*cos(1), E*sin(1)) \n```", "```py\nproperty base\n```", "```py\nfdiff(argindex=1)\n```", "```py\nstatic taylor_term(n, x, *previous_terms)\n```", "```py\nclass sympy.functions.elementary.exponential.LambertW(x, k=None)\n```", "```py\n>>> from sympy import LambertW\n>>> LambertW(1.2)\n0.635564016364870\n>>> LambertW(1.2, -1).n()\n-1.34747534407696 - 4.41624341514535*I\n>>> LambertW(-1).is_real\nFalse \n```", "```py\nfdiff(argindex=1)\n```", "```py\nclass sympy.functions.elementary.exponential.log(arg, base=None)\n```", "```py\n>>> from sympy import log, sqrt, S, I\n>>> log(8, 2)\n3\n>>> log(S(8)/3, 2)\n-log(3)/log(2) + 3\n>>> log(-1 + I*sqrt(3))\nlog(2) + 2*I*pi/3 \n```", "```py\nas_base_exp()\n```", "```py\nas_real_imag(deep=True, **hints)\n```", "```py\n>>> from sympy import I, log\n>>> from sympy.abc import x\n>>> log(x).as_real_imag()\n(log(Abs(x)), arg(x))\n>>> log(I).as_real_imag()\n(0, pi/2)\n>>> log(1 + I).as_real_imag()\n(log(sqrt(2)), pi/4)\n>>> log(I*x).as_real_imag()\n(log(Abs(x)), arg(I*x)) \n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nstatic taylor_term(n, x, *previous_terms)\n```", "```py\nclass sympy.functions.elementary.exponential.exp_polar(*args)\n```", "```py\n>>> from sympy import exp_polar, pi, I, exp \n```", "```py\n>>> exp(2*pi*I)\n1\n>>> exp_polar(2*pi*I)\nexp_polar(2*I*pi) \n```", "```py\n>>> exp_polar(2)*exp_polar(3)\nexp_polar(5) \n```", "```py\nclass sympy.functions.elementary.piecewise.ExprCondPair(expr, cond)\n```", "```py\nproperty cond\n```", "```py\nproperty expr\n```", "```py\nclass sympy.functions.elementary.piecewise.Piecewise(*_args)\n```", "```py\n>>> from sympy import Piecewise, log, piecewise_fold\n>>> from sympy.abc import x, y\n>>> f = x**2\n>>> g = log(x)\n>>> p = Piecewise((0, x < -1), (f, x <= 1), (g, True))\n>>> p.subs(x,1)\n1\n>>> p.subs(x,5)\nlog(5) \n```", "```py\n>>> cond = (x < y).subs(x, Piecewise((2, x < 0), (3, True))); cond\nPiecewise((2, x < 0), (3, True)) < y \n```", "```py\n>>> folded_cond = piecewise_fold(cond); folded_cond\nPiecewise((2 < y, x < 0), (3 < y, True)) \n```", "```py\n>>> Piecewise((1, folded_cond))\nPiecewise((1, ITE(x < 0, y > 2, y > 3))) \n```", "```py\n>>> piecewise_fold(_)\nPiecewise((1, ((x >= 0) | (y > 2)) & ((y > 3) | (x < 0)))) \n```", "```py\n_eval_integral(x, _first=True, **kwargs)\n```", "```py\n>>> from sympy import Piecewise\n>>> from sympy.abc import x\n>>> p = Piecewise((0, x < 0), (1, x < 1), (2, True))\n>>> p.integrate(x)\nPiecewise((0, x < 0), (x, x < 1), (2*x - 1, True))\n>>> p.piecewise_integrate(x)\nPiecewise((0, x < 0), (x, x < 1), (2*x, True)) \n```", "```py\nas_expr_set_pairs(domain=None)\n```", "```py\n>>> from sympy import Piecewise, Interval\n>>> from sympy.abc import x\n>>> p = Piecewise(\n...     (1, x < 2),\n...     (2,(x > 0) & (x < 4)),\n...     (3, True))\n>>> p.as_expr_set_pairs()\n[(1, Interval.open(-oo, 2)),\n (2, Interval.Ropen(2, 4)),\n (3, Interval(4, oo))]\n>>> p.as_expr_set_pairs(Interval(0, 3))\n[(1, Interval.Ropen(0, 2)),\n (2, Interval(2, 3))] \n```", "```py\ndoit(**hints)\n```", "```py\nclassmethod eval(*_args)\n```", "```py\n>>> from sympy import Piecewise\n>>> from sympy.abc import x\n>>> cond = -x < -1\n>>> args = [(1, cond), (4, cond), (3, False), (2, True), (5, x < 1)]\n>>> Piecewise(*args, evaluate=False)\nPiecewise((1, -x < -1), (4, -x < -1), (2, True))\n>>> Piecewise(*args)\nPiecewise((1, x > 1), (2, True)) \n```", "```py\npiecewise_integrate(x, **kwargs)\n```", "```py\n>>> from sympy import Piecewise\n>>> from sympy.abc import x\n>>> p = Piecewise((0, x < 0), (1, x < 1), (2, True))\n>>> p.piecewise_integrate(x)\nPiecewise((0, x < 0), (x, x < 1), (2*x, True)) \n```", "```py\n>>> anti = _\n>>> anti.subs(x, 1)\n2 \n```", "```py\n>>> p.integrate(x)\nPiecewise((0, x < 0), (x, x < 1), (2*x - 1, True))\n>>> _.subs(x, 1)\n1 \n```", "```py\nsympy.functions.elementary.piecewise.piecewise_exclusive(expr, *, skip_nan=False, deep=True)\n```", "```py\n>>> from sympy import piecewise_exclusive, Symbol, Piecewise, S\n>>> x = Symbol('x', real=True)\n>>> p = Piecewise((0, x < 0), (S.Half, x <= 0), (1, True))\n>>> piecewise_exclusive(p)\nPiecewise((0, x < 0), (1/2, Eq(x, 0)), (1, x > 0))\n>>> piecewise_exclusive(Piecewise((2, x > 1)))\nPiecewise((2, x > 1), (nan, x <= 1))\n>>> piecewise_exclusive(Piecewise((2, x > 1)), skip_nan=True)\nPiecewise((2, x > 1)) \n```", "```py\nsympy.functions.elementary.piecewise.piecewise_fold(expr, evaluate=True)\n```", "```py\n>>> from sympy import Piecewise, piecewise_fold, S\n>>> from sympy.abc import x\n>>> p = Piecewise((x, x < 1), (1, S(1) <= x))\n>>> piecewise_fold(x*p)\nPiecewise((x**2, x < 1), (x, True)) \n```", "```py\nclass sympy.functions.elementary.miscellaneous.IdentityFunction\n```", "```py\n>>> from sympy import Id, Symbol\n>>> x = Symbol('x')\n>>> Id(x)\nx \n```", "```py\nclass sympy.functions.elementary.miscellaneous.Min(*args)\n```", "```py\n>>> from sympy import Min, Symbol, oo\n>>> from sympy.abc import x, y\n>>> p = Symbol('p', positive=True)\n>>> n = Symbol('n', negative=True) \n```", "```py\n>>> Min(x, -2)\nMin(-2, x)\n>>> Min(x, -2).subs(x, 3)\n-2\n>>> Min(p, -3)\n-3\n>>> Min(x, y)\nMin(x, y)\n>>> Min(n, 8, p, -7, p, oo)\nMin(-7, n) \n```", "```py\nclass sympy.functions.elementary.miscellaneous.Max(*args)\n```", "```py\n>>> from sympy import Max, Symbol, oo\n>>> from sympy.abc import x, y, z\n>>> p = Symbol('p', positive=True)\n>>> n = Symbol('n', negative=True) \n```", "```py\n>>> Max(x, -2)\nMax(-2, x)\n>>> Max(x, -2).subs(x, 3)\n3\n>>> Max(p, -2)\np\n>>> Max(x, y)\nMax(x, y)\n>>> Max(x, y) == Max(y, x)\nTrue\n>>> Max(x, Max(y, z))\nMax(x, y, z)\n>>> Max(n, 8, p, 7, -oo)\nMax(8, p)\n>>> Max (1, x, oo)\noo \n```", "```py\nsympy.functions.elementary.miscellaneous.root(arg, n, k=0, evaluate=None)\n```", "```py\n>>> from sympy import root, Rational\n>>> from sympy.abc import x, n \n```", "```py\n>>> root(x, 2)\nsqrt(x) \n```", "```py\n>>> root(x, 3)\nx**(1/3) \n```", "```py\n>>> root(x, n)\nx**(1/n) \n```", "```py\n>>> root(x, -Rational(2, 3))\nx**(-3/2) \n```", "```py\n>>> root(-2, 3, 2)\n-(-1)**(2/3)*2**(1/3) \n```", "```py\n>>> from sympy import rootof \n```", "```py\n>>> [rootof(x**2 - 1, i) for i in range(2)]\n[-1, 1] \n```", "```py\n>>> [rootof(x**3 - 1,i) for i in range(3)]\n[1, -1/2 - sqrt(3)*I/2, -1/2 + sqrt(3)*I/2] \n```", "```py\n>>> [rootof(x**4 - 1,i) for i in range(4)]\n[-1, 1, -I, I] \n```", "```py\n>>> root(-8, 3)\n2*(-1)**(1/3) \n```", "```py\n>>> from sympy import real_root\n>>> real_root(_)\n-2\n>>> real_root(-32, 5)\n-2 \n```", "```py\n>>> root(-32, 5, 5//2)\n-2 \n```", "```py\nsympy.functions.elementary.miscellaneous.sqrt(arg, evaluate=None)\n```", "```py\n>>> from sympy import sqrt, Symbol, S\n>>> x = Symbol('x') \n```", "```py\n>>> sqrt(x)\nsqrt(x) \n```", "```py\n>>> sqrt(x)**2\nx \n```", "```py\n>>> sqrt(x**2)\nsqrt(x**2) \n```", "```py\n>>> from sympy import Eq\n>>> Eq(sqrt(x**2), x).subs(x, -1)\nFalse \n```", "```py\n>>> y = Symbol('y', positive=True)\n>>> sqrt(y**2)\ny \n```", "```py\n>>> from sympy import powdenest\n>>> sqrt(x**2)\nsqrt(x**2)\n>>> powdenest(sqrt(x**2), force=True)\nx \n```", "```py\n>>> from sympy import rootof \n```", "```py\n>>> [rootof(x**2-3,i) for i in (0,1)]\n[-sqrt(3), sqrt(3)] \n```", "```py\n>>> from sympy.utilities.misc import func_name\n>>> func_name(sqrt(x))\n'Pow'\n>>> sqrt(x).has(sqrt)\nFalse \n```", "```py\n>>> (x + 1/sqrt(x)).find(lambda i: i.is_Pow and abs(i.exp) is S.Half)\n{1/sqrt(x)} \n```", "```py\nsympy.functions.elementary.miscellaneous.cbrt(arg, evaluate=None)\n```", "```py\n>>> from sympy import cbrt, Symbol\n>>> x = Symbol('x') \n```", "```py\n>>> cbrt(x)\nx**(1/3) \n```", "```py\n>>> cbrt(x)**3\nx \n```", "```py\n>>> cbrt(x**3)\n(x**3)**(1/3) \n```", "```py\n>>> from sympy import Eq\n>>> Eq(cbrt(x**3), x).subs(x, -1)\nFalse \n```", "```py\n>>> y = Symbol('y', positive=True)\n>>> cbrt(y**3)\ny \n```", "```py\nsympy.functions.elementary.miscellaneous.real_root(arg, n=None, evaluate=None)\n```", "```py\n>>> from sympy import root, real_root \n```", "```py\n>>> real_root(-8, 3)\n-2\n>>> root(-8, 3)\n2*(-1)**(1/3)\n>>> real_root(_)\n-2 \n```", "```py\n>>> root(-8, 3, 2)\n-2*(-1)**(2/3)\n>>> real_root(_)\n-2*(-1)**(2/3) \n```"]