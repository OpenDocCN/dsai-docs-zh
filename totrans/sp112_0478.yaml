- en: scipy.optimize.fmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin.html#scipy.optimize.fmin](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin.html#scipy.optimize.fmin)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Minimize a function using the downhill simplex algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm only uses function values, not derivatives or second derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable func(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: The objective function to be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to func, i.e., `f(x,*args)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute error in xopt between iterations that is acceptable for convergence.
  prefs: []
  type: TYPE_NORMAL
- en: '**ftol**number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute error in func(xopt) between iterations that is acceptable for convergence.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfun**number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of function evaluations to make.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set to True if fopt and warnflag outputs are desired.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set to True to print convergence messages.
  prefs: []
  type: TYPE_NORMAL
- en: '**retall**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set to True to return list of solutions at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Called after each iteration, as callback(xk), where xk is the current parameter
    vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial_simplex**array_like of shape (N + 1, N), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial simplex. If given, overrides *x0*. `initial_simplex[j,:]` should contain
    the coordinates of the jth vertex of the `N+1` vertices in the simplex, where
    `N` is the dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter that minimizes function.
  prefs: []
  type: TYPE_NORMAL
- en: '**fopt**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'Value of function at minimum: `fopt = func(xopt)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**iter**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterations performed.
  prefs: []
  type: TYPE_NORMAL
- en: '**funcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of function calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**warnflag**int'
  prefs: []
  type: TYPE_NORMAL
- en: '1 : Maximum number of function evaluations made. 2 : Maximum number of iterations
    reached.'
  prefs: []
  type: TYPE_NORMAL
- en: '**allvecs**list'
  prefs: []
  type: TYPE_NORMAL
- en: Solution at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for multivariate functions. See the ‘Nelder-Mead’
    *method* in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Uses a Nelder-Mead simplex algorithm to find the minimum of function of one
    or more variables.
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm has a long history of successful use in applications. But it
    will usually be slower than an algorithm that uses first or second derivative
    information. In practice, it can have poor performance in high-dimensional problems
    and is not robust to minimizing complicated functions. Additionally, there currently
    is no complete theory describing when the algorithm will successfully converge
    to the minimum, or how fast it will if it does. Both the ftol and xtol criteria
    must be met for convergence.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Nelder, J.A. and Mead, R. (1965), “A simplex method for function minimization”,
    The Computer Journal, 7, pp. 308-313
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wright, M.H. (1996), “Direct Search Methods: Once Scorned, Now Respectable”,
    in Numerical Analysis 1995, Proceedings of the 1995 Dundee Biennial Conference
    in Numerical Analysis, D.F. Griffiths and G.A. Watson (Eds.), Addison Wesley Longman,
    Harlow, UK, pp. 191-208.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
