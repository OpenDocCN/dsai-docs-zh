- en: pandas.core.resample.Resampler.interpolate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.resample.Resampler.interpolate.html](https://pandas.pydata.org/docs/reference/api/pandas.core.resample.Resampler.interpolate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Interpolate values between target timestamps according to different methods.
  prefs: []
  type: TYPE_NORMAL
- en: The original index is first reindexed to target timestamps (see `core.resample.Resampler.asfreq()`),
    then the interpolation of `NaN` values via `DataFrame.interpolate()` happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, default ‘linear’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interpolation technique to use. One of:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘linear’: Ignore the index and treat the values as equally spaced. This is
    the only method supported on MultiIndexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘time’: Works on daily and higher resolution data to interpolate given length
    of interval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘index’, ‘values’: use the actual numerical values of the index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘pad’: Fill in NaNs using existing values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘nearest’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’, ‘barycentric’, ‘polynomial’:
    Passed to scipy.interpolate.interp1d, whereas ‘spline’ is passed to scipy.interpolate.UnivariateSpline.
    These methods use the numerical values of the index. Both ‘polynomial’ and ‘spline’
    require that you also specify an order (int), e.g. `df.interpolate(method=''polynomial'',
    order=5)`. Note that, slinear method in Pandas refers to the Scipy first order
    spline instead of Pandas first order spline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘krogh’, ‘piecewise_polynomial’, ‘spline’, ‘pchip’, ‘akima’, ‘cubicspline’:
    Wrappers around the SciPy interpolation methods of similar names. See Notes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘from_derivatives’: Refers to scipy.interpolate.BPoly.from_derivatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**{{0 or ‘index’, 1 or ‘columns’, None}}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to interpolate along. For Series this parameter is unused and defaults
    to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of consecutive NaNs to fill. Must be greater than 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Update the data in place if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_direction**{{‘forward’, ‘backward’, ‘both’}}, Optional'
  prefs: []
  type: TYPE_NORMAL
- en: Consecutive NaNs will be filled in this direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'If limit is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘method’ is ‘pad’ or ‘ffill’, ‘limit_direction’ must be ‘forward’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If ‘method’ is ‘backfill’ or ‘bfill’, ‘limit_direction’ must be ‘backwards’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If ‘limit’ is not specified:'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘method’ is ‘backfill’ or ‘bfill’, the default is ‘backward’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: else the default is ‘forward’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raises ValueError if limit_direction is ‘forward’ or ‘both’ and
  prefs: []
  type: TYPE_NORMAL
- en: method is ‘backfill’ or ‘bfill’.
  prefs: []
  type: TYPE_NORMAL
- en: raises ValueError if limit_direction is ‘backward’ or ‘both’ and
  prefs: []
  type: TYPE_NORMAL
- en: method is ‘pad’ or ‘ffill’.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_area**{{None, ‘inside’, ‘outside’}}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If limit is specified, consecutive NaNs will be filled with this restriction.
  prefs: []
  type: TYPE_NORMAL
- en: '`None`: No fill restriction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘inside’: Only fill NaNs surrounded by valid values (interpolate).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘outside’: Only fill NaNs outside valid values (extrapolate).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**downcast**optional, ‘infer’ or None, defaults to None'
  prefs: []
  type: TYPE_NORMAL
- en: Downcast dtypes if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**``**kwargs``**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments to pass on to the interpolating function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame or Series
  prefs: []
  type: TYPE_NORMAL
- en: Interpolated values at the specified freq.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`core.resample.Resampler.asfreq`'
  prefs: []
  type: TYPE_NORMAL
- en: Return the values at the new freq, essentially a reindex.
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.interpolate`'
  prefs: []
  type: TYPE_NORMAL
- en: Fill NaN values using an interpolation method.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For high-frequent or non-equidistant time-series with timestamps the reindexing
    followed by interpolation may lead to information loss as shown in the last example.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Upsample the dataframe to 0.5Hz by providing the period time of 2s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Downsample the dataframe to 2Hz by providing the period time of 500ms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Internal reindexing with `asfreq()` prior to interpolation leads to an interpolated
    timeseries on the basis the reindexed timestamps (anchors). Since not all datapoints
    from original series become anchors, it can lead to misleading interpolation results
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that the series erroneously increases between two anchors `07:00:00` and
    `07:00:02`.
  prefs: []
  type: TYPE_NORMAL
