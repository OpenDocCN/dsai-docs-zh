- en: scipy.signal.CZT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.CZT.html#scipy.signal.CZT](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.CZT.html#scipy.signal.CZT)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a callable chirp z-transform function.
  prefs: []
  type: TYPE_NORMAL
- en: Transform to compute the frequency response around a spiral. Objects of this
    class are callables which can compute the chirp z-transform on their inputs. This
    object precalculates the constant chirps used in the given transform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the signal.
  prefs: []
  type: TYPE_NORMAL
- en: '**m**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of output points desired. Default is *n*.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**complex, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The ratio between points in each step. This must be precise or the accumulated
    error will degrade the tail of the output sequence. Defaults to equally spaced
    points around the entire unit circle.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**complex, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The starting point in the complex plane. Default is 1+0j.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**CZT'
  prefs: []
  type: TYPE_NORMAL
- en: Callable object `f(x, axis=-1)` for computing the chirp z-transform on *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`czt`](czt-function.html#scipy.signal.czt "scipy.signal.czt")'
  prefs: []
  type: TYPE_NORMAL
- en: Convenience function for quickly calculating CZT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ZoomFFT`](scipy.signal.ZoomFFT.html#scipy.signal.ZoomFFT "scipy.signal.ZoomFFT")'
  prefs: []
  type: TYPE_NORMAL
- en: Class that creates a callable partial FFT function.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The defaults are chosen such that `f(x)` is equivalent to `fft.fft(x)` and,
    if `m > len(x)`, that `f(x, m)` is equivalent to `fft.fft(x, m)`.
  prefs: []
  type: TYPE_NORMAL
- en: If *w* does not lie on the unit circle, then the transform will be around a
    spiral with exponentially-increasing radius. Regardless, angle will increase linearly.
  prefs: []
  type: TYPE_NORMAL
- en: For transforms that do lie on the unit circle, accuracy is better when using
    [`ZoomFFT`](scipy.signal.ZoomFFT.html#scipy.signal.ZoomFFT "scipy.signal.ZoomFFT"),
    since any numerical error in *w* is accumulated for long data lengths, drifting
    away from the unit circle.
  prefs: []
  type: TYPE_NORMAL
- en: The chirp z-transform can be faster than an equivalent FFT with zero padding.
    Try it with your own array sizes to see.
  prefs: []
  type: TYPE_NORMAL
- en: However, the chirp z-transform is considerably less precise than the equivalent
    zero-padded FFT.
  prefs: []
  type: TYPE_NORMAL
- en: As this CZT is implemented using the Bluestein algorithm, it can compute large
    prime-length Fourier transforms in O(N log N) time, rather than the O(N**2) time
    required by the direct DFT calculation. ([`scipy.fft`](../fft.html#module-scipy.fft
    "scipy.fft") also uses Bluestein’s algorithm’.)
  prefs: []
  type: TYPE_NORMAL
- en: (The name “chirp z-transform” comes from the use of a chirp in the Bluestein
    algorithm. It does not decompose signals into chirps, like other transforms with
    “chirp” in the name.)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Leo I. Bluestein, “A linear filtering approach to the computation of the discrete
    Fourier transform,” Northeast Electronics Research and Engineering Meeting Record
    10, 218-219 (1968).
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Rabiner, Schafer, and Rader, “The chirp z-transform algorithm and its application,”
    Bell Syst. Tech. J. 48, 1249-1292 (1969).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute multiple prime-length FFTs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the points at which the FFT is calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-CZT-1.png](../Images/e28671ed5533b26e575d29fe8bec6806.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.signal.CZT.__call__.html#scipy.signal.CZT.__call__ "scipy.signal.CZT.__call__")(x, *[, axis])
    | Calculate the chirp z-transform of a signal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`points`](scipy.signal.CZT.points.html#scipy.signal.CZT.points "scipy.signal.CZT.points")()
    | Return the points at which the chirp z-transform is computed. |'
  prefs: []
  type: TYPE_TB
