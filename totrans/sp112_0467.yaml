- en: scipy.optimize.quadratic_assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Approximates solution to the quadratic assignment problem and the graph matching
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quadratic assignment solves problems of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\min_P & \ {\ \text{trace}(A^T P B P^T)}\\ \mbox{s.t. } & {P
    \ \epsilon \ \mathcal{P}}\\\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\mathcal{P}\) is the set of all permutation matrices, and \(A\) and
    \(B\) are square matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Graph matching tries to *maximize* the same objective function. This algorithm
    can be thought of as finding the alignment of the nodes of two graphs that minimizes
    the number of induced edge disagreements, or, in the case of weighted graphs,
    the sum of squared edge weight differences.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the quadratic assignment problem is NP-hard. The results given here
    are approximations and are not guaranteed to be optimal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**2-D array, square'
  prefs: []
  type: TYPE_NORMAL
- en: The square matrix \(A\) in the objective function above.
  prefs: []
  type: TYPE_NORMAL
- en: '**B**2-D array, square'
  prefs: []
  type: TYPE_NORMAL
- en: The square matrix \(B\) in the objective function above.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str in {‘faq’, ‘2opt’} (default: ‘faq’)'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm used to solve the problem. [‘faq’](../optimize.qap-faq.html#optimize-qap-faq)
    (default) and [‘2opt’](../optimize.qap-2opt.html#optimize-qap-2opt) are available.
  prefs: []
  type: TYPE_NORMAL
- en: '**options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dictionary of solver options. All solvers support the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'maximizebool (default: False)'
  prefs: []
  type: TYPE_NORMAL
- en: Maximizes the objective function if `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'partial_match2-D array of integers, optional (default: None)'
  prefs: []
  type: TYPE_NORMAL
- en: Fixes part of the matching. Also known as a “seed” [[2]](#r62137ee13278-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each row of *partial_match* specifies a pair of matched nodes: node `partial_match[i,
    0]` of *A* is matched to node `partial_match[i, 1]` of *B*. The array has shape
    `(m, 2)`, where `m` is not greater than the number of nodes, \(n\).'
  prefs: []
  type: TYPE_NORMAL
- en: rng{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: For method-specific options, see [`show_options('quadratic_assignment')`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**OptimizeResult'
  prefs: []
  type: TYPE_NORMAL
- en: '[`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") containing the following fields.'
  prefs: []
  type: TYPE_NORMAL
- en: col_ind1-D array
  prefs: []
  type: TYPE_NORMAL
- en: Column indices corresponding to the best permutation found of the nodes of *B*.
  prefs: []
  type: TYPE_NORMAL
- en: funfloat
  prefs: []
  type: TYPE_NORMAL
- en: The objective value of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: nitint
  prefs: []
  type: TYPE_NORMAL
- en: The number of iterations performed during optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The default method [‘faq’](../optimize.qap-faq.html#optimize-qap-faq) uses the
    Fast Approximate QAP algorithm [[1]](#r62137ee13278-1); it typically offers the
    best combination of speed and accuracy. Method [‘2opt’](../optimize.qap-2opt.html#optimize-qap-2opt)
    can be computationally expensive, but may be a useful alternative, or it can be
    used to refine the solution returned by another method.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: J.T. Vogelstein, J.M. Conroy, V. Lyzinski, L.J. Podrazik, S.G. Kratzer, E.T.
    Harley, D.E. Fishkind, R.J. Vogelstein, and C.E. Priebe, “Fast approximate quadratic
    programming for graph matching,” PLOS one, vol. 10, no. 4, p. e0121002, 2015,
    [DOI:10.1371/journal.pone.0121002](https://doi.org/10.1371/journal.pone.0121002)
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'D. Fishkind, S. Adali, H. Patsolic, L. Meng, D. Singh, V. Lyzinski, C. Priebe,
    “Seeded graph matching”, Pattern Recognit. 87 (2019): 203-215, [DOI:10.1016/j.patcog.2018.09.014](https://doi.org/10.1016/j.patcog.2018.09.014)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: “2-opt,” Wikipedia. [https://en.wikipedia.org/wiki/2-opt](https://en.wikipedia.org/wiki/2-opt)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The see the relationship between the returned `col_ind` and `fun`, use `col_ind`
    to form the best permutation matrix found, then evaluate the objective function
    \(f(P) = trace(A^T P B P^T )\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, to avoid constructing the permutation matrix explicitly, directly
    permute the rows and columns of the distance matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Although not guaranteed in general, `quadratic_assignment` happens to have found
    the globally optimal solution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here is an example for which the default method, [‘faq’](../optimize.qap-faq.html#optimize-qap-faq),
    does not find the global optimum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If accuracy is important, consider using [‘2opt’](../optimize.qap-2opt.html#optimize-qap-2opt)
    to refine the solution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
