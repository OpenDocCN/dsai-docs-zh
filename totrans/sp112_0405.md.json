["```py\nscipy.ndimage.distance_transform_cdt(input, metric='chessboard', return_distances=True, return_indices=False, distances=None, indices=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.ndimage import distance_transform_cdt\n>>> import matplotlib.pyplot as plt\n>>> from mpl_toolkits.axes_grid1 import ImageGrid \n```", "```py\n>>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n...     # fill circular area with 1\n...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n...     circle_shape = np.sqrt(circle) < radius\n...     image[circle_shape] = fillvalue\n...     return image\n>>> image = np.zeros((100, 100), dtype=np.uint8)\n>>> image[35:65, 20:80] = 1\n>>> image = add_circle(28, 65, 10, image)\n>>> image = add_circle(37, 30, 10, image)\n>>> image = add_circle(70, 45, 20, image)\n>>> image = add_circle(45, 80, 10, image) \n```", "```py\n>>> fig = plt.figure(figsize=(5, 15))\n>>> grid = ImageGrid(fig, 111, nrows_ncols=(3, 1), axes_pad=(0.5, 0.3),\n...                  label_mode=\"1\", share_all=True,\n...                  cbar_location=\"right\", cbar_mode=\"each\",\n...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n>>> for ax in grid:\n...     ax.axis('off')\n>>> top, middle, bottom = grid\n>>> colorbar_ticks = [0, 10, 20] \n```", "```py\n>>> binary_image = top.imshow(image, cmap='gray')\n>>> cbar_binary_image = top.cax.colorbar(binary_image)\n>>> cbar_binary_image.set_ticks([0, 1])\n>>> top.set_title(\"Binary image: foreground in white\") \n```", "```py\n>>> distance_taxicab = distance_transform_cdt(image, metric=\"taxicab\")\n>>> taxicab_transform = middle.imshow(distance_taxicab, cmap='gray')\n>>> cbar_taxicab = middle.cax.colorbar(taxicab_transform)\n>>> cbar_taxicab.set_ticks(colorbar_ticks)\n>>> middle.set_title(\"Taxicab metric\") \n```", "```py\n>>> distance_chessboard = distance_transform_cdt(image,\n...                                              metric=\"chessboard\")\n>>> chessboard_transform = bottom.imshow(distance_chessboard, cmap='gray')\n>>> cbar_chessboard = bottom.cax.colorbar(chessboard_transform)\n>>> cbar_chessboard.set_ticks(colorbar_ticks)\n>>> bottom.set_title(\"Chessboard metric\")\n>>> plt.tight_layout()\n>>> plt.show() \n```"]