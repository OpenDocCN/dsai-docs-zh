- en: pandas maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/development/maintaining.html](https://pandas.pydata.org/docs/development/maintaining.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This guide is for pandas’ maintainers. It may also be interesting to contributors
    looking to understand the pandas development process and what steps are necessary
    to become a maintainer.
  prefs: []
  type: TYPE_NORMAL
- en: The main contributing guide is available at [Contributing to pandas](contributing.html#contributing).
  prefs: []
  type: TYPE_NORMAL
- en: Roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'pandas uses two levels of permissions: **triage** and **core** team members.'
  prefs: []
  type: TYPE_NORMAL
- en: Triage members can label and close issues and pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Core team members can label and close issues and pull request, and can merge
    pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub publishes the full [list of permissions](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization).
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas is largely a volunteer project, so these tasks shouldn’t be read as “expectations”
    of triage and maintainers. Rather, they’re general descriptions of what it means
    to be a maintainer.
  prefs: []
  type: TYPE_NORMAL
- en: Triage newly filed issues (see [Issue triage](#maintaining-triage))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review newly opened pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respond to updates on existing issues and pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drive discussion and decisions on stalled issues and pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide experience / wisdom on API design questions to ensure consistency and
    maintainability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project organization (run / attend developer meetings, represent pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://matthewrocklin.com/blog/2019/05/18/maintainer](https://matthewrocklin.com/blog/2019/05/18/maintainer)
    may be interesting background reading.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Issue triage'
  prefs: []
  type: TYPE_NORMAL
- en: Triage is an important first step in addressing issues reported by the community,
    and even partial contributions are a great way to help maintain pandas. Only remove
    the “Needs Triage” tag once all of the steps below have been completed.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a typical workflow for triaging a newly opened issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thank the reporter for opening an issue**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The issue tracker is many people’s first interaction with the pandas project
    itself, beyond just using the library. As such, we want it to be a welcoming,
    pleasant experience.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is the necessary information provided?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ideally reporters would fill out the issue template, but many don’t. If crucial
    information (like the version of pandas they used), is missing feel free to ask
    for that and label the issue with “Needs info”. The report should follow the guidelines
    in [Bug reports and enhancement requests](contributing.html#contributing-bug-reports).
    You may want to link to that if they didn’t follow the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that the title accurately reflects the issue. Edit it yourself if
    it’s not clear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a duplicate issue?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have many open issues. If a new issue is clearly a duplicate, label the new
    issue as “Duplicate” and close the issue with a link to the original issue. Make
    sure to still thank the reporter, and encourage them to chime in on the original
    issue, and perhaps try to fix it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the new issue provides relevant information, such as a better or slightly
    different example, add it to the original issue as a comment or an edit to the
    original post.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is the issue minimal and reproducible**?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For bug reports, we ask that the reporter provide a minimal reproducible example.
    See [https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports](https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports)
    for a good explanation. If the example is not reproducible, or if it’s *clearly*
    not minimal, feel free to ask the reporter if they can provide and example or
    simplify the provided one. Do acknowledge that writing minimal reproducible examples
    is hard work. If the reporter is struggling, you can try to write one yourself
    and we’ll edit the original post to include it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a reproducible example can’t be provided, add the “Needs info” label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a reproducible example is provided, but you see a simplification, edit the
    original post with your simpler reproducible example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure the issue exists on the main branch and that it has the “Needs Triage”
    tag until all steps have been completed. Add a comment to the issue once you have
    verified it exists on the main branch, so others know it has been confirmed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a clearly defined feature request?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally, pandas prefers to discuss and design new features in issues, before
    a pull request is made. Encourage the submitter to include a proposed API for
    the new feature. Having them write a full docstring is a good way to pin down
    specifics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tag new feature requests with “Needs Discussion”, as we’ll need a discussion
    from several pandas maintainers before deciding whether the proposal is in scope
    for pandas.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a usage question?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We prefer that usage questions are asked on StackOverflow with the pandas tag.
    [https://stackoverflow.com/questions/tagged/pandas](https://stackoverflow.com/questions/tagged/pandas)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If it’s easy to answer, feel free to link to the relevant documentation section,
    let them know that in the future this kind of question should be on StackOverflow,
    and close the issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**What labels and milestones should I add?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the relevant labels. This is a bit of an art, and comes with experience.
    Look at similar issues to get a feel for how things are labeled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the issue is clearly defined and the fix seems relatively straightforward,
    label the issue as “Good first issue”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have completed the above, make sure to remove the “needs triage” label.  ##
    Investigating regressions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Regressions are bugs that unintentionally break previously working code. The
    common way to investigate regressions is by using [git bisect](https://git-scm.com/docs/git-bisect),
    which finds the first commit that introduced the bug.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: a user reports that `pd.Series([1, 1]).sum()` returns `3` in pandas
    version `1.5.0` while in version `1.4.0` it returned `2`. To begin, create a file
    `t.py` in your pandas directory, which contains'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This finds the first commit that changed the behavior. The C extensions have
    to be rebuilt at every step, so the search can take a while.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit bisect and rebuild the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Report your findings under the corresponding issue and ping the commit author
    to get their input.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `bisect run` command above, commits are considered good if `t.py` exits
    with `0` and bad otherwise. When raising an exception is the desired behavior,
    wrap the code in an appropriate `try/except` statement. See [GH 35685](https://github.com/pandas-dev/pandas/issues/35685)
    for more examples.  ## Closing issues'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be delicate here: many people interpret closing an issue as us saying that
    the conversation is over. It’s typically best to give the reporter some time to
    respond or self-close their issue if it’s determined that the behavior is not
    a bug, or the feature is out of scope. Sometimes reporters just go away though,
    and we’ll close the issue after the conversation has died. If you think an issue
    should be closed but are not completely sure, please apply the “closing candidate”
    label and wait for other maintainers to take a look.  ## Reviewing pull requests'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anybody can review a pull request: regular contributors, triagers, or core-team
    members. But only core-team members can merge pull requests when they’re ready.'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some things to check when reviewing a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests should be in a sensible location: in the same file as closely related
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New public APIs should be included somewhere in `doc/source/reference/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New / changed API should use the `versionadded` or `versionchanged` directives
    in the docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-facing changes should have a whatsnew in the appropriate file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression tests should reference the original GitHub issue number like `# GH-1234`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pull request should be labeled and assigned the appropriate milestone (the
    next patch release for regression fixes and small bug fixes, the next minor milestone
    otherwise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes should comply with our [Version policy](policies.html#policies-version).  ##
    Backporting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pandas supports point releases (e.g. `1.4.3`) that aim to:'
  prefs: []
  type: TYPE_NORMAL
- en: Fix bugs in new features introduced in the first minor version release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g. If a new feature was added in `1.4` and contains a bug, a fix can be applied
    in `1.4.3`
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix bugs that used to work in a few minor releases prior. There should be agreement
    between core team members that a backport is appropriate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g. If a feature worked in `1.2` and stopped working since `1.3`, a fix can
    be applied in `1.4.3`.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Since pandas minor releases are based on GitHub branches (e.g. point release
    of `1.4` are based off the `1.4.x` branch), “backporting” means merging a pull
    request fix to the `main` branch and correct minor branch associated with the
    next point release.
  prefs: []
  type: TYPE_NORMAL
- en: By default, if a pull request is assigned to the next point release milestone
    within the GitHub interface, the backporting process should happen automatically
    by the `@meeseeksdev` bot once the pull request is merged. A new pull request
    will be made backporting the pull request to the correct version branch. Sometimes
    due to merge conflicts, a manual pull request will need to be made addressing
    the code conflict.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the bot does not automatically start the backporting process, you can also
    write a GitHub comment in the merged pull request to trigger the backport:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will trigger a workflow which will backport a given change to a branch
    (e.g. @meeseeksdev backport 1.4.x)
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up old issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every open issue in pandas has a cost. Open issues make finding duplicates harder,
    and can make it harder to know what needs to be done in pandas. That said, closing
    issues isn’t a goal on its own. Our goal is to make pandas the best it can be,
    and that’s best done by ensuring that the quality of our open issues is high.
  prefs: []
  type: TYPE_NORMAL
- en: Occasionally, bugs are fixed but the issue isn’t linked to in the Pull Request.
    In these cases, comment that “This has been fixed, but could use a test.” and
    label the issue as “Good First Issue” and “Needs Test”.
  prefs: []
  type: TYPE_NORMAL
- en: If an older issue doesn’t follow our issue template, edit the original post
    to include a minimal example, the actual output, and the expected output. Uniformity
    in issue reports is valuable.
  prefs: []
  type: TYPE_NORMAL
- en: If an older issue lacks a reproducible example, label it as “Needs Info” and
    ask them to provide one (or write one yourself if possible). If one isn’t provide
    reasonably soon, close it according to the policies in [Closing issues](#maintaining-closing).
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up old pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Occasionally, contributors are unable to finish off a pull request. If some
    time has passed (two weeks, say) since the last review requesting changes, gently
    ask if they’re still interested in working on this. If another two weeks or so
    passes with no response, thank them for their work and then either:'
  prefs: []
  type: TYPE_NORMAL
- en: close the pull request;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: push to the contributor’s branch to push their work over the finish line (if
    you’re part of `pandas-core`). This can be helpful for pushing an important PR
    across the line, or for fixing a small merge conflict.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If closing the pull request, then please comment on the original issue that
    “There’s a stalled PR at #1234 that may be helpful.”, and perhaps label the issue
    as “Good first issue” if the PR was relatively close to being accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a pandas maintainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The full process is outlined in our [governance documents](https://github.com/pandas-dev/pandas/blob/main/web/pandas/about/governance.md).
    In summary, we’re happy to give triage permissions to anyone who shows interest
    by being helpful on the issue tracker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The required steps for adding a maintainer are:'
  prefs: []
  type: TYPE_NORMAL
- en: Contact the contributor and ask their interest to join.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the contributor to the appropriate [GitHub Team](https://github.com/orgs/pandas-dev/teams)
    if accepted the invitation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pandas-core` is for core team members'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pandas-triage` is for pandas triage members'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If adding to `pandas-core`, there are two additional steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the contributor to the pandas Google group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a pull request to add the contributor’s GitHub handle to `pandas-dev/pandas/web/pandas/config.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The current list of core-team members is at [pandas-dev/pandas](https://github.com/pandas-dev/pandas/blob/main/web/pandas/config.yml)
  prefs: []
  type: TYPE_NORMAL
- en: '## Merging pull requests'
  prefs: []
  type: TYPE_NORMAL
- en: Only core team members can merge pull requests. We have a few guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: You should typically not self-merge your own pull requests without approval.
    Exceptions include things like small changes to fix CI (e.g. pinning a package
    version). Self-merging with approval from other core team members is fine if the
    change is something you’re very confident about.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should not merge pull requests that have an active discussion, or pull requests
    that has any `-1` votes from a core maintainer. pandas operates by consensus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For larger changes, it’s good to have a +1 from at least two core team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to the items listed in [Closing issues](#maintaining-closing), you
    should verify that the pull request is assigned the correct milestone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull requests merged with a patch-release milestone will typically be backported
    by our bot. Verify that the bot noticed the merge (it will leave a comment within
    a minute typically). If a manual backport is needed please do that, and remove
    the “Needs backport” label once you’ve done it manually. If you forget to assign
    a milestone before tagging, you can request the bot to backport it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]  ## Benchmark machine'
  prefs: []
  type: TYPE_NORMAL
- en: The team currently owns dedicated hardware for hosting a website for pandas’
    ASV performance benchmark. The results are published to [https://asv-runner.github.io/asv-collection/pandas/](https://asv-runner.github.io/asv-collection/pandas/)
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The machine can be configured with the [Ansible](http://docs.ansible.com/ansible/latest/index.html)
    playbook in [tomaugspurger/asv-runner](https://github.com/tomaugspurger/asv-runner).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results are published to another GitHub repository, [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection).
    Finally, we have a cron job on our docs server to pull from [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection),
    to serve them from `/speed`. Ask Tom or Joris for access to the webserver.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The benchmarks are scheduled by Airflow. It has a dashboard for viewing and
    debugging the results. You’ll need to setup an SSH tunnel to view them
  prefs: []
  type: TYPE_NORMAL
- en: 'ssh -L 8080:localhost:8080 pandas@panda.likescandy.com  ## Release process'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The release process makes a snapshot of pandas (a git commit) available to
    users with a particular version number. After the release the new pandas version
    will be available in the next places:'
  prefs: []
  type: TYPE_NORMAL
- en: Git repo with a [new tag](https://github.com/pandas-dev/pandas/tags)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source distribution in a [GitHub release](https://github.com/pandas-dev/pandas/releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pip packages in the [PyPI](https://pypi.org/project/pandas/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda/Mamba packages in [conda-forge](https://anaconda.org/conda-forge/pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process for releasing a new version of pandas is detailed next section.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions contain `<version>` which needs to be replaced with the version
    to be released (e.g. `1.5.2`). Also the branch to be released `<branch>`, which
    depends on whether the version being released is the release candidate of a new
    version, or any other version. Release candidates are released from `main`, while
    other versions are released from their branch (e.g. `1.5.x`).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to be able to release a new pandas version, the next permissions are
    needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Merge rights to the [pandas](https://github.com/pandas-dev/pandas/) and [pandas-feedstock](https://github.com/conda-forge/pandas-feedstock/)
    repositories. For the latter, open a PR adding your GitHub username to the conda-forge
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions to push to `main` in the pandas repository, to push the new tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write permissions to PyPI](https://github.com/conda-forge/pandas-feedstock/pulls).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to our website / documentation server. Share your public key with the
    infrastructure committee to be added to the `authorized_keys` file of the main
    server user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the social media accounts, to publish the announcements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Agree with the core team on the next topics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release date (major/minor releases happen usually every 6 months, and patch
    releases monthly until x.x.5, just before the next major/minor)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockers (issues and PRs that must be part of the release)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next version after the one being released
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update and clean release notes for the version to be released, including:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the final date of the release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove any unused bullet point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure there are no formatting issues, typos, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the CI is green for the last commit of the branch being released.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If not a release candidate, make sure all backporting pull requests to the branch
    being released are merged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new issue and milestone for the version after the one being released.
    If the release was a release candidate, we would usually want to create issues
    and milestones for both the next major/minor, and the next patch release. In the
    milestone of a patch release, we add the description `on-merge: backport to <branch>`,
    so tagged PRs are automatically backported to the release branch by our bot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the milestone of all issues and PRs in the milestone being released to
    the next milestone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create an empty commit and a tag in the last commit of the branch to be released:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The docs for the new version will be built and published automatically with
    the docs job in the CI, which will be triggered when the tag is pushed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only if the release is a release candidate, we want to create a new branch
    for it, immediately after creating the tag. For example, if we are releasing pandas
    1.4.0rc0, we would like to create the branch 1.4.x to backport commits to the
    1.4 versions. As well as create a tag to mark the start of the development of
    1.5.0 (assuming it is the next version):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the source distribution and wheels from the [wheel staging area](https://anaconda.org/scientific-python-nightly-wheels/pandas).
    Be careful to make sure that no wheels are missing (e.g. due to failed builds).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Running scripts/download_wheels.sh with the version that you want to download
    wheels/the sdist for should do the trick. This script will make a `dist` folder
    inside your clone of pandas and put the downloaded wheels and sdist there:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a [new GitHub release](https://github.com/pandas-dev/pandas/releases/new):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tag: `<version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Title: `Pandas <version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: Copy the description of the last release of the same kind (release
    candidate, major/minor or patch release)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Files: `pandas-<version>.tar.gz` source distribution just generated'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as a pre-release: Only check for a release candidate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as the latest release: Leave checked, unless releasing a patch release
    for an older version (e.g. releasing 1.4.5 after 1.5 has been released)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload wheels to PyPI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The GitHub release will after some hours trigger an [automated conda-forge PR](https://github.com/conda-forge/pandas-feedstock/pulls).
    (If you don’t want to wait, you can open an issue titled `@conda-forge-admin,
    please update version` to trigger the bot.) Merge it once the CI is green, and
    it will generate the conda-forge packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case a manual PR needs to be done, the version, sha256 and build fields are
    the ones that usually need to be changed. If anything else in the recipe has changed
    since the last release, those changes should be available in `ci/meta.yaml`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Post-Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update symlinks to stable documentation by logging in to our web server, and
    editing `/var/www/html/pandas-docs/stable` to point to `version/<latest-version>`
    for major and minor releases, or `version/<minor>` to `version/<patch>` for patch
    releases. The exact instructions are (replace the example version numbers by the
    appropriate ones for the version you are releasing):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the server and use the correct user.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: cd /var/www/html/pandas-docs/
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.1 stable (for a major or minor release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.0.3 version/2.0 (for a patch release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If releasing a major or minor release, open a PR in our source code to update
    `web/pandas/versions.json`, to have the desired versions in the documentation
    dropdown menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the milestone and the issue for the released version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue for the next release, with the estimated date of release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a PR with the placeholder for the release notes of the next version. See
    for example [the PR for 1.5.3](https://github.com/pandas-dev/pandas/pull/49843/files).
    Note that the template to use depends on whether it is a major, minor or patch
    release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Announce the new release in the official channels (use previous announcements
    for reference):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pandas-dev and pydata mailing lists
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Twitter, Mastodon, Telegram and LinkedIn
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Update this release instructions to fix anything incorrect and to update about
    any change since the last release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'pandas uses two levels of permissions: **triage** and **core** team members.'
  prefs: []
  type: TYPE_NORMAL
- en: Triage members can label and close issues and pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Core team members can label and close issues and pull request, and can merge
    pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub publishes the full [list of permissions](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization).
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas is largely a volunteer project, so these tasks shouldn’t be read as “expectations”
    of triage and maintainers. Rather, they’re general descriptions of what it means
    to be a maintainer.
  prefs: []
  type: TYPE_NORMAL
- en: Triage newly filed issues (see [Issue triage](#maintaining-triage))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review newly opened pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respond to updates on existing issues and pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drive discussion and decisions on stalled issues and pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide experience / wisdom on API design questions to ensure consistency and
    maintainability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project organization (run / attend developer meetings, represent pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://matthewrocklin.com/blog/2019/05/18/maintainer](https://matthewrocklin.com/blog/2019/05/18/maintainer)
    may be interesting background reading.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Issue triage'
  prefs: []
  type: TYPE_NORMAL
- en: Triage is an important first step in addressing issues reported by the community,
    and even partial contributions are a great way to help maintain pandas. Only remove
    the “Needs Triage” tag once all of the steps below have been completed.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a typical workflow for triaging a newly opened issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thank the reporter for opening an issue**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The issue tracker is many people’s first interaction with the pandas project
    itself, beyond just using the library. As such, we want it to be a welcoming,
    pleasant experience.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is the necessary information provided?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ideally reporters would fill out the issue template, but many don’t. If crucial
    information (like the version of pandas they used), is missing feel free to ask
    for that and label the issue with “Needs info”. The report should follow the guidelines
    in [Bug reports and enhancement requests](contributing.html#contributing-bug-reports).
    You may want to link to that if they didn’t follow the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure that the title accurately reflects the issue. Edit it yourself if
    it’s not clear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a duplicate issue?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have many open issues. If a new issue is clearly a duplicate, label the new
    issue as “Duplicate” and close the issue with a link to the original issue. Make
    sure to still thank the reporter, and encourage them to chime in on the original
    issue, and perhaps try to fix it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the new issue provides relevant information, such as a better or slightly
    different example, add it to the original issue as a comment or an edit to the
    original post.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is the issue minimal and reproducible**?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For bug reports, we ask that the reporter provide a minimal reproducible example.
    See [https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports](https://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports)
    for a good explanation. If the example is not reproducible, or if it’s *clearly*
    not minimal, feel free to ask the reporter if they can provide and example or
    simplify the provided one. Do acknowledge that writing minimal reproducible examples
    is hard work. If the reporter is struggling, you can try to write one yourself
    and we’ll edit the original post to include it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a reproducible example can’t be provided, add the “Needs info” label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If a reproducible example is provided, but you see a simplification, edit the
    original post with your simpler reproducible example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure the issue exists on the main branch and that it has the “Needs Triage”
    tag until all steps have been completed. Add a comment to the issue once you have
    verified it exists on the main branch, so others know it has been confirmed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a clearly defined feature request?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally, pandas prefers to discuss and design new features in issues, before
    a pull request is made. Encourage the submitter to include a proposed API for
    the new feature. Having them write a full docstring is a good way to pin down
    specifics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tag new feature requests with “Needs Discussion”, as we’ll need a discussion
    from several pandas maintainers before deciding whether the proposal is in scope
    for pandas.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is this a usage question?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We prefer that usage questions are asked on StackOverflow with the pandas tag.
    [https://stackoverflow.com/questions/tagged/pandas](https://stackoverflow.com/questions/tagged/pandas)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If it’s easy to answer, feel free to link to the relevant documentation section,
    let them know that in the future this kind of question should be on StackOverflow,
    and close the issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**What labels and milestones should I add?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the relevant labels. This is a bit of an art, and comes with experience.
    Look at similar issues to get a feel for how things are labeled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the issue is clearly defined and the fix seems relatively straightforward,
    label the issue as “Good first issue”.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have completed the above, make sure to remove the “needs triage” label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '## Investigating regressions'
  prefs: []
  type: TYPE_NORMAL
- en: Regressions are bugs that unintentionally break previously working code. The
    common way to investigate regressions is by using [git bisect](https://git-scm.com/docs/git-bisect),
    which finds the first commit that introduced the bug.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: a user reports that `pd.Series([1, 1]).sum()` returns `3` in pandas
    version `1.5.0` while in version `1.4.0` it returned `2`. To begin, create a file
    `t.py` in your pandas directory, which contains'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'and then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This finds the first commit that changed the behavior. The C extensions have
    to be rebuilt at every step, so the search can take a while.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit bisect and rebuild the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Report your findings under the corresponding issue and ping the commit author
    to get their input.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the `bisect run` command above, commits are considered good if `t.py` exits
    with `0` and bad otherwise. When raising an exception is the desired behavior,
    wrap the code in an appropriate `try/except` statement. See [GH 35685](https://github.com/pandas-dev/pandas/issues/35685)
    for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: '## Closing issues'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be delicate here: many people interpret closing an issue as us saying that
    the conversation is over. It’s typically best to give the reporter some time to
    respond or self-close their issue if it’s determined that the behavior is not
    a bug, or the feature is out of scope. Sometimes reporters just go away though,
    and we’ll close the issue after the conversation has died. If you think an issue
    should be closed but are not completely sure, please apply the “closing candidate”
    label and wait for other maintainers to take a look.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Reviewing pull requests'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anybody can review a pull request: regular contributors, triagers, or core-team
    members. But only core-team members can merge pull requests when they’re ready.'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some things to check when reviewing a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests should be in a sensible location: in the same file as closely related
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New public APIs should be included somewhere in `doc/source/reference/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New / changed API should use the `versionadded` or `versionchanged` directives
    in the docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-facing changes should have a whatsnew in the appropriate file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression tests should reference the original GitHub issue number like `# GH-1234`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pull request should be labeled and assigned the appropriate milestone (the
    next patch release for regression fixes and small bug fixes, the next minor milestone
    otherwise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes should comply with our [Version policy](policies.html#policies-version).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Backporting'
  prefs: []
  type: TYPE_NORMAL
- en: 'pandas supports point releases (e.g. `1.4.3`) that aim to:'
  prefs: []
  type: TYPE_NORMAL
- en: Fix bugs in new features introduced in the first minor version release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g. If a new feature was added in `1.4` and contains a bug, a fix can be applied
    in `1.4.3`
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix bugs that used to work in a few minor releases prior. There should be agreement
    between core team members that a backport is appropriate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e.g. If a feature worked in `1.2` and stopped working since `1.3`, a fix can
    be applied in `1.4.3`.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Since pandas minor releases are based on GitHub branches (e.g. point release
    of `1.4` are based off the `1.4.x` branch), “backporting” means merging a pull
    request fix to the `main` branch and correct minor branch associated with the
    next point release.
  prefs: []
  type: TYPE_NORMAL
- en: By default, if a pull request is assigned to the next point release milestone
    within the GitHub interface, the backporting process should happen automatically
    by the `@meeseeksdev` bot once the pull request is merged. A new pull request
    will be made backporting the pull request to the correct version branch. Sometimes
    due to merge conflicts, a manual pull request will need to be made addressing
    the code conflict.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the bot does not automatically start the backporting process, you can also
    write a GitHub comment in the merged pull request to trigger the backport:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will trigger a workflow which will backport a given change to a branch
    (e.g. @meeseeksdev backport 1.4.x)
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up old issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every open issue in pandas has a cost. Open issues make finding duplicates harder,
    and can make it harder to know what needs to be done in pandas. That said, closing
    issues isn’t a goal on its own. Our goal is to make pandas the best it can be,
    and that’s best done by ensuring that the quality of our open issues is high.
  prefs: []
  type: TYPE_NORMAL
- en: Occasionally, bugs are fixed but the issue isn’t linked to in the Pull Request.
    In these cases, comment that “This has been fixed, but could use a test.” and
    label the issue as “Good First Issue” and “Needs Test”.
  prefs: []
  type: TYPE_NORMAL
- en: If an older issue doesn’t follow our issue template, edit the original post
    to include a minimal example, the actual output, and the expected output. Uniformity
    in issue reports is valuable.
  prefs: []
  type: TYPE_NORMAL
- en: If an older issue lacks a reproducible example, label it as “Needs Info” and
    ask them to provide one (or write one yourself if possible). If one isn’t provide
    reasonably soon, close it according to the policies in [Closing issues](#maintaining-closing).
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up old pull requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Occasionally, contributors are unable to finish off a pull request. If some
    time has passed (two weeks, say) since the last review requesting changes, gently
    ask if they’re still interested in working on this. If another two weeks or so
    passes with no response, thank them for their work and then either:'
  prefs: []
  type: TYPE_NORMAL
- en: close the pull request;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: push to the contributor’s branch to push their work over the finish line (if
    you’re part of `pandas-core`). This can be helpful for pushing an important PR
    across the line, or for fixing a small merge conflict.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If closing the pull request, then please comment on the original issue that
    “There’s a stalled PR at #1234 that may be helpful.”, and perhaps label the issue
    as “Good first issue” if the PR was relatively close to being accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a pandas maintainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The full process is outlined in our [governance documents](https://github.com/pandas-dev/pandas/blob/main/web/pandas/about/governance.md).
    In summary, we’re happy to give triage permissions to anyone who shows interest
    by being helpful on the issue tracker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The required steps for adding a maintainer are:'
  prefs: []
  type: TYPE_NORMAL
- en: Contact the contributor and ask their interest to join.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the contributor to the appropriate [GitHub Team](https://github.com/orgs/pandas-dev/teams)
    if accepted the invitation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pandas-core` is for core team members'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pandas-triage` is for pandas triage members'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If adding to `pandas-core`, there are two additional steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the contributor to the pandas Google group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a pull request to add the contributor’s GitHub handle to `pandas-dev/pandas/web/pandas/config.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The current list of core-team members is at [pandas-dev/pandas](https://github.com/pandas-dev/pandas/blob/main/web/pandas/config.yml)
  prefs: []
  type: TYPE_NORMAL
- en: '## Merging pull requests'
  prefs: []
  type: TYPE_NORMAL
- en: Only core team members can merge pull requests. We have a few guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: You should typically not self-merge your own pull requests without approval.
    Exceptions include things like small changes to fix CI (e.g. pinning a package
    version). Self-merging with approval from other core team members is fine if the
    change is something you’re very confident about.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should not merge pull requests that have an active discussion, or pull requests
    that has any `-1` votes from a core maintainer. pandas operates by consensus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For larger changes, it’s good to have a +1 from at least two core team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to the items listed in [Closing issues](#maintaining-closing), you
    should verify that the pull request is assigned the correct milestone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull requests merged with a patch-release milestone will typically be backported
    by our bot. Verify that the bot noticed the merge (it will leave a comment within
    a minute typically). If a manual backport is needed please do that, and remove
    the “Needs backport” label once you’ve done it manually. If you forget to assign
    a milestone before tagging, you can request the bot to backport it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '## Benchmark machine'
  prefs: []
  type: TYPE_NORMAL
- en: The team currently owns dedicated hardware for hosting a website for pandas’
    ASV performance benchmark. The results are published to [https://asv-runner.github.io/asv-collection/pandas/](https://asv-runner.github.io/asv-collection/pandas/)
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The machine can be configured with the [Ansible](http://docs.ansible.com/ansible/latest/index.html)
    playbook in [tomaugspurger/asv-runner](https://github.com/tomaugspurger/asv-runner).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results are published to another GitHub repository, [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection).
    Finally, we have a cron job on our docs server to pull from [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection),
    to serve them from `/speed`. Ask Tom or Joris for access to the webserver.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The benchmarks are scheduled by Airflow. It has a dashboard for viewing and
    debugging the results. You’ll need to setup an SSH tunnel to view them
  prefs: []
  type: TYPE_NORMAL
- en: ssh -L 8080:localhost:8080 pandas@panda.likescandy.com
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The machine can be configured with the [Ansible](http://docs.ansible.com/ansible/latest/index.html)
    playbook in [tomaugspurger/asv-runner](https://github.com/tomaugspurger/asv-runner).
  prefs: []
  type: TYPE_NORMAL
- en: Publishing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results are published to another GitHub repository, [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection).
    Finally, we have a cron job on our docs server to pull from [tomaugspurger/asv-collection](https://github.com/tomaugspurger/asv-collection),
    to serve them from `/speed`. Ask Tom or Joris for access to the webserver.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The benchmarks are scheduled by Airflow. It has a dashboard for viewing and
    debugging the results. You’ll need to setup an SSH tunnel to view them
  prefs: []
  type: TYPE_NORMAL
- en: ssh -L 8080:localhost:8080 pandas@panda.likescandy.com
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Release process'
  prefs: []
  type: TYPE_NORMAL
- en: 'The release process makes a snapshot of pandas (a git commit) available to
    users with a particular version number. After the release the new pandas version
    will be available in the next places:'
  prefs: []
  type: TYPE_NORMAL
- en: Git repo with a [new tag](https://github.com/pandas-dev/pandas/tags)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source distribution in a [GitHub release](https://github.com/pandas-dev/pandas/releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pip packages in the [PyPI](https://pypi.org/project/pandas/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda/Mamba packages in [conda-forge](https://anaconda.org/conda-forge/pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process for releasing a new version of pandas is detailed next section.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions contain `<version>` which needs to be replaced with the version
    to be released (e.g. `1.5.2`). Also the branch to be released `<branch>`, which
    depends on whether the version being released is the release candidate of a new
    version, or any other version. Release candidates are released from `main`, while
    other versions are released from their branch (e.g. `1.5.x`).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to be able to release a new pandas version, the next permissions are
    needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Merge rights to the [pandas](https://github.com/pandas-dev/pandas/) and [pandas-feedstock](https://github.com/conda-forge/pandas-feedstock/)
    repositories. For the latter, open a PR adding your GitHub username to the conda-forge
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions to push to `main` in the pandas repository, to push the new tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write permissions to PyPI](https://github.com/conda-forge/pandas-feedstock/pulls).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to our website / documentation server. Share your public key with the
    infrastructure committee to be added to the `authorized_keys` file of the main
    server user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the social media accounts, to publish the announcements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Agree with the core team on the next topics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release date (major/minor releases happen usually every 6 months, and patch
    releases monthly until x.x.5, just before the next major/minor)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockers (issues and PRs that must be part of the release)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next version after the one being released
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update and clean release notes for the version to be released, including:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the final date of the release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove any unused bullet point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure there are no formatting issues, typos, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the CI is green for the last commit of the branch being released.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If not a release candidate, make sure all backporting pull requests to the branch
    being released are merged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new issue and milestone for the version after the one being released.
    If the release was a release candidate, we would usually want to create issues
    and milestones for both the next major/minor, and the next patch release. In the
    milestone of a patch release, we add the description `on-merge: backport to <branch>`,
    so tagged PRs are automatically backported to the release branch by our bot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the milestone of all issues and PRs in the milestone being released to
    the next milestone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create an empty commit and a tag in the last commit of the branch to be released:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The docs for the new version will be built and published automatically with
    the docs job in the CI, which will be triggered when the tag is pushed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only if the release is a release candidate, we want to create a new branch
    for it, immediately after creating the tag. For example, if we are releasing pandas
    1.4.0rc0, we would like to create the branch 1.4.x to backport commits to the
    1.4 versions. As well as create a tag to mark the start of the development of
    1.5.0 (assuming it is the next version):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the source distribution and wheels from the [wheel staging area](https://anaconda.org/scientific-python-nightly-wheels/pandas).
    Be careful to make sure that no wheels are missing (e.g. due to failed builds).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Running scripts/download_wheels.sh with the version that you want to download
    wheels/the sdist for should do the trick. This script will make a `dist` folder
    inside your clone of pandas and put the downloaded wheels and sdist there:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a [new GitHub release](https://github.com/pandas-dev/pandas/releases/new):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tag: `<version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Title: `Pandas <version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: Copy the description of the last release of the same kind (release
    candidate, major/minor or patch release)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Files: `pandas-<version>.tar.gz` source distribution just generated'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as a pre-release: Only check for a release candidate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as the latest release: Leave checked, unless releasing a patch release
    for an older version (e.g. releasing 1.4.5 after 1.5 has been released)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload wheels to PyPI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The GitHub release will after some hours trigger an [automated conda-forge PR](https://github.com/conda-forge/pandas-feedstock/pulls).
    (If you don’t want to wait, you can open an issue titled `@conda-forge-admin,
    please update version` to trigger the bot.) Merge it once the CI is green, and
    it will generate the conda-forge packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case a manual PR needs to be done, the version, sha256 and build fields are
    the ones that usually need to be changed. If anything else in the recipe has changed
    since the last release, those changes should be available in `ci/meta.yaml`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Post-Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update symlinks to stable documentation by logging in to our web server, and
    editing `/var/www/html/pandas-docs/stable` to point to `version/<latest-version>`
    for major and minor releases, or `version/<minor>` to `version/<patch>` for patch
    releases. The exact instructions are (replace the example version numbers by the
    appropriate ones for the version you are releasing):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the server and use the correct user.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: cd /var/www/html/pandas-docs/
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.1 stable (for a major or minor release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.0.3 version/2.0 (for a patch release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If releasing a major or minor release, open a PR in our source code to update
    `web/pandas/versions.json`, to have the desired versions in the documentation
    dropdown menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the milestone and the issue for the released version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue for the next release, with the estimated date of release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a PR with the placeholder for the release notes of the next version. See
    for example [the PR for 1.5.3](https://github.com/pandas-dev/pandas/pull/49843/files).
    Note that the template to use depends on whether it is a major, minor or patch
    release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Announce the new release in the official channels (use previous announcements
    for reference):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pandas-dev and pydata mailing lists
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Twitter, Mastodon, Telegram and LinkedIn
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Update this release instructions to fix anything incorrect and to update about
    any change since the last release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to be able to release a new pandas version, the next permissions are
    needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Merge rights to the [pandas](https://github.com/pandas-dev/pandas/) and [pandas-feedstock](https://github.com/conda-forge/pandas-feedstock/)
    repositories. For the latter, open a PR adding your GitHub username to the conda-forge
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions to push to `main` in the pandas repository, to push the new tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write permissions to PyPI](https://github.com/conda-forge/pandas-feedstock/pulls).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to our website / documentation server. Share your public key with the
    infrastructure committee to be added to the `authorized_keys` file of the main
    server user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the social media accounts, to publish the announcements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Agree with the core team on the next topics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release date (major/minor releases happen usually every 6 months, and patch
    releases monthly until x.x.5, just before the next major/minor)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockers (issues and PRs that must be part of the release)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next version after the one being released
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update and clean release notes for the version to be released, including:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the final date of the release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove any unused bullet point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure there are no formatting issues, typos, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the CI is green for the last commit of the branch being released.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If not a release candidate, make sure all backporting pull requests to the branch
    being released are merged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new issue and milestone for the version after the one being released.
    If the release was a release candidate, we would usually want to create issues
    and milestones for both the next major/minor, and the next patch release. In the
    milestone of a patch release, we add the description `on-merge: backport to <branch>`,
    so tagged PRs are automatically backported to the release branch by our bot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the milestone of all issues and PRs in the milestone being released to
    the next milestone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create an empty commit and a tag in the last commit of the branch to be released:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The docs for the new version will be built and published automatically with
    the docs job in the CI, which will be triggered when the tag is pushed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only if the release is a release candidate, we want to create a new branch
    for it, immediately after creating the tag. For example, if we are releasing pandas
    1.4.0rc0, we would like to create the branch 1.4.x to backport commits to the
    1.4 versions. As well as create a tag to mark the start of the development of
    1.5.0 (assuming it is the next version):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the source distribution and wheels from the [wheel staging area](https://anaconda.org/scientific-python-nightly-wheels/pandas).
    Be careful to make sure that no wheels are missing (e.g. due to failed builds).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Running scripts/download_wheels.sh with the version that you want to download
    wheels/the sdist for should do the trick. This script will make a `dist` folder
    inside your clone of pandas and put the downloaded wheels and sdist there:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a [new GitHub release](https://github.com/pandas-dev/pandas/releases/new):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tag: `<version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Title: `Pandas <version>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: Copy the description of the last release of the same kind (release
    candidate, major/minor or patch release)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Files: `pandas-<version>.tar.gz` source distribution just generated'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as a pre-release: Only check for a release candidate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set as the latest release: Leave checked, unless releasing a patch release
    for an older version (e.g. releasing 1.4.5 after 1.5 has been released)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload wheels to PyPI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The GitHub release will after some hours trigger an [automated conda-forge PR](https://github.com/conda-forge/pandas-feedstock/pulls).
    (If you don’t want to wait, you can open an issue titled `@conda-forge-admin,
    please update version` to trigger the bot.) Merge it once the CI is green, and
    it will generate the conda-forge packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case a manual PR needs to be done, the version, sha256 and build fields are
    the ones that usually need to be changed. If anything else in the recipe has changed
    since the last release, those changes should be available in `ci/meta.yaml`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Post-Release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update symlinks to stable documentation by logging in to our web server, and
    editing `/var/www/html/pandas-docs/stable` to point to `version/<latest-version>`
    for major and minor releases, or `version/<minor>` to `version/<patch>` for patch
    releases. The exact instructions are (replace the example version numbers by the
    appropriate ones for the version you are releasing):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the server and use the correct user.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: cd /var/www/html/pandas-docs/
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.1 stable (for a major or minor release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ln -sfn version/2.0.3 version/2.0 (for a patch release)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: If releasing a major or minor release, open a PR in our source code to update
    `web/pandas/versions.json`, to have the desired versions in the documentation
    dropdown menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the milestone and the issue for the released version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue for the next release, with the estimated date of release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a PR with the placeholder for the release notes of the next version. See
    for example [the PR for 1.5.3](https://github.com/pandas-dev/pandas/pull/49843/files).
    Note that the template to use depends on whether it is a major, minor or patch
    release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Announce the new release in the official channels (use previous announcements
    for reference):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pandas-dev and pydata mailing lists
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Twitter, Mastodon, Telegram and LinkedIn
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Update this release instructions to fix anything incorrect and to update about
    any change since the last release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
