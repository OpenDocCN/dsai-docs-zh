- en: scipy.ndimage.affine_transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.affine_transform.html#scipy.ndimage.affine_transform](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.affine_transform.html#scipy.ndimage.affine_transform)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply an affine transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Given an output image pixel index vector `o`, the pixel value is determined
    from the input image at position `np.dot(matrix, o) + offset`.
  prefs: []
  type: TYPE_NORMAL
- en: This does ‘pull’ (or ‘backward’) resampling, transforming the output space to
    the input to locate data. Affine transformations are often described in the ‘push’
    (or ‘forward’) direction, transforming input to output. If you have a matrix for
    the ‘push’ transformation, use its inverse ([`numpy.linalg.inv`](https://numpy.org/devdocs/reference/generated/numpy.linalg.inv.html#numpy.linalg.inv
    "(in NumPy v2.0.dev0)")) in this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: 'The inverse coordinate transformation matrix, mapping output coordinates to
    input coordinates. If `ndim` is the number of dimensions of `input`, the given
    matrix must have one of the following shapes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(ndim, ndim)`: the linear transformation matrix for each output coordinate.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`(ndim,)`: assume that the 2-D transformation matrix is diagonal, with the
    diagonal specified by the given value. A more efficient algorithm is then used
    that exploits the separability of the problem.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`(ndim + 1, ndim + 1)`: assume that the transformation is specified using homogeneous
    coordinates [[1]](#rd28fdca2bce5-1). In this case, any value passed to `offset`
    is ignored.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`(ndim, ndim + 1)`: as above, but the bottom row of a homogeneous transformation
    matrix is always `[0, 0, ..., 1]`, and may be omitted.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**offset**float or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The offset into the array where the transform is applied. If a float, *offset*
    is the same for each axis. If a sequence, *offset* should contain one value for
    each axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**output_shape**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the spline interpolation, default is 3. The order has to be in
    the range 0-5.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reflect’, ‘grid-mirror’, ‘constant’, ‘grid-constant’, ‘nearest’,
    ‘mirror’, ‘grid-wrap’, ‘wrap’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended beyond its
    boundaries. Default is ‘constant’. Behavior for each valid value is as follows
    (see additional plots and details on [boundary modes](../../tutorial/ndimage.html#ndimage-interpolation-modes)):'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter. No interpolation is performed beyond the
    edges of the input.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter. Interpolation occurs for samples outside
    the input’s extent as well.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*d b c d | a b c d | b c a b*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge, but in a way
    such that the last point and initial point exactly overlap. In this case it is
    not well defined which sample will be chosen at the point of overlap.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**prefilter**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Determines if the input array is prefiltered with [`spline_filter`](scipy.ndimage.spline_filter.html#scipy.ndimage.spline_filter
    "scipy.ndimage.spline_filter") before interpolation. The default is True, which
    will create a temporary *float64* array of filtered values if *order > 1*. If
    setting this to False, the output will be slightly blurred if *order > 1*, unless
    the input is prefiltered, i.e. it is the result of calling [`spline_filter`](scipy.ndimage.spline_filter.html#scipy.ndimage.spline_filter
    "scipy.ndimage.spline_filter") on the original input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**affine_transform**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The transformed input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The given matrix and offset are used to find for each point in the output the
    corresponding coordinates in the input by an affine transformation. The value
    of the input at those coordinates is determined by spline interpolation of the
    requested order. Points outside the boundaries of the input are filled according
    to the given mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 0.18.0: Previously, the exact interpretation of the affine
    transformation depended on whether the matrix was supplied as a 1-D or a 2-D array.
    If a 1-D array was supplied to the matrix parameter, the output pixel value at
    index `o` was determined from the input image at position `matrix * (o + offset)`.'
  prefs: []
  type: TYPE_NORMAL
- en: For complex-valued *input*, this function transforms the real and imaginary
    components independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.6.0: Complex-valued support added.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Homogeneous_coordinates](https://en.wikipedia.org/wiki/Homogeneous_coordinates)'
  prefs: []
  type: TYPE_NORMAL
