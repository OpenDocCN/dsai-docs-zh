["```py\nscipy.signal.upfirdn(h, x, up=1, down=1, axis=-1, mode='constant', cval=0)\n```", "```py\n>>> import numpy as np\n>>> from scipy.signal import upfirdn\n>>> upfirdn([1, 1, 1], [1, 1, 1])   # FIR filter\narray([ 1.,  2.,  3.,  2.,  1.])\n>>> upfirdn([1], [1, 2, 3], 3)  # upsampling with zeros insertion\narray([ 1.,  0.,  0.,  2.,  0.,  0.,  3.])\n>>> upfirdn([1, 1, 1], [1, 2, 3], 3)  # upsampling with sample-and-hold\narray([ 1.,  1.,  1.,  2.,  2.,  2.,  3.,  3.,  3.])\n>>> upfirdn([.5, 1, .5], [1, 1, 1], 2)  # linear interpolation\narray([ 0.5,  1\\. ,  1\\. ,  1\\. ,  1\\. ,  1\\. ,  0.5])\n>>> upfirdn([1], np.arange(10), 1, 3)  # decimation by 3\narray([ 0.,  3.,  6.,  9.])\n>>> upfirdn([.5, 1, .5], np.arange(10), 2, 3)  # linear interp, rate 2/3\narray([ 0\\. ,  1\\. ,  2.5,  4\\. ,  5.5,  7\\. ,  8.5]) \n```", "```py\n>>> x = np.reshape(np.arange(8), (4, 2))\n>>> x\narray([[0, 1],\n [2, 3],\n [4, 5],\n [6, 7]]) \n```", "```py\n>>> h = [1, 1]\n>>> upfirdn(h, x, 2)\narray([[ 0.,  0.,  1.,  1.],\n [ 2.,  2.,  3.,  3.],\n [ 4.,  4.,  5.,  5.],\n [ 6.,  6.,  7.,  7.]]) \n```", "```py\n>>> upfirdn(h, x, 2, axis=0)\narray([[ 0.,  1.],\n [ 0.,  1.],\n [ 2.,  3.],\n [ 2.,  3.],\n [ 4.,  5.],\n [ 4.,  5.],\n [ 6.,  7.],\n [ 6.,  7.]]) \n```"]