- en: scipy.signal.cascade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.cascade.html#scipy.signal.cascade](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.cascade.html#scipy.signal.cascade)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return (x, phi, psi) at dyadic points `K/2**J` from filter coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.12.0: scipy.signal.cascade is deprecated in SciPy
    1.12 and will be removed in SciPy 1.15\. We recommend using PyWavelets instead.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hk**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of low-pass filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**J**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Values will be computed at grid points `K/2**J`. Default is 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The dyadic points `K/2**J` for `K=0...N * (2**J)-1` where `len(hk) = len(gk)
    = N+1`.
  prefs: []
  type: TYPE_NORMAL
- en: '**phi**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: 'The scaling function `phi(x)` at *x*: `phi(x) = sum(hk * phi(2x-k))`, where
    k is from 0 to N.'
  prefs: []
  type: TYPE_NORMAL
- en: '**psi**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The wavelet function `psi(x)` at *x*: `phi(x) = sum(gk * phi(2x-k))`, where
    k is from 0 to N. *psi* is only returned if *gk* is not None.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm uses the vector cascade algorithm described by Strang and Nguyen
    in “Wavelets and Filter Banks”. It builds a dictionary of values and slices for
    quick reuse. Then inserts vectors into final vector at the end.
  prefs: []
  type: TYPE_NORMAL
