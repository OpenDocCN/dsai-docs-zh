- en: Sequences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/series/sequences.html](https://docs.sympy.org/latest/modules/series/sequences.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A sequence is a finite or infinite lazily evaluated list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns appropriate sequence object.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If `seq` is a SymPy sequence, returns [`SeqPer`](#sympy.series.sequences.SeqPer
    "sympy.series.sequences.SeqPer") object otherwise returns [`SeqFormula`](#sympy.series.sequences.SeqFormula
    "sympy.series.sequences.SeqFormula") object.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqPer`](#sympy.series.sequences.SeqPer "sympy.series.sequences.SeqPer"),
    [`sympy.series.sequences.SeqFormula`](#sympy.series.sequences.SeqFormula "sympy.series.sequences.SeqFormula")'
  prefs: []
  type: TYPE_NORMAL
- en: Sequences Base
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Base class for sequences
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returns the coefficient at point pt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Should be used when `other` is not a sequence. Should be defined to define custom
    behaviour.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: ‘*’ defines multiplication of sequences with sequences only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finds the shortest linear recurrence that satisfies the first n terms of sequence
    of order \(\leq\) `n/2` if possible. If `d` is specified, find shortest linear
    recurrence of order \(\leq\) min(d, n/2) if possible. Returns list of coefficients
    `[b(1), b(2), ...]` corresponding to the recurrence relation `x(n) = b(1)*x(n-1)
    + b(2)*x(n-2) + ...` Returns `[]` if no recurrence is found. If gfvar is specified,
    also returns ordinary generating function as a function of gfvar.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the symbols in the object, excluding those that take on
    a specific value (i.e. the dummy symbols).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns the generator for the sequence
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The interval on which the sequence is defined
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Length of the sequence
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The starting point of the sequence. This point is included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The ending point of the sequence. This point is included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Returns a tuple of variables that are bounded
  prefs: []
  type: TYPE_NORMAL
- en: Elementary Sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Represents sequence based on a formula.
  prefs: []
  type: TYPE_NORMAL
- en: Elements are generated using a formula.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For value at a particular point
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: supports slicing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: iterable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: sequence starts from negative infinity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqPer`](#sympy.series.sequences.SeqPer "sympy.series.sequences.SeqPer")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See docstring of SeqBase.coeff_mul
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Represents a periodic sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The elements are repeated after a given period.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: For value at a particular point
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: supports slicing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: iterable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: sequence starts from negative infinity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Periodic formulas
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqFormula`](#sympy.series.sequences.SeqFormula "sympy.series.sequences.SeqFormula")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See docstring of SeqBase.coeff_mul
  prefs: []
  type: TYPE_NORMAL
- en: Singleton Sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Represents an empty sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The empty sequence is also available as a singleton as `S.EmptySequence`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: See docstring of SeqBase.coeff_mul
  prefs: []
  type: TYPE_NORMAL
- en: Compound Sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Represents term-wise addition of sequences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules:'
  prefs: []
  type: TYPE_NORMAL
- en: The interval on which sequence is defined is the intersection of respective
    intervals of sequences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything + [`EmptySequence`](#sympy.series.sequences.EmptySequence "sympy.series.sequences.EmptySequence")
    remains unchanged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other rules are defined in `_add` methods of sequence classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqMul`](#sympy.series.sequences.SeqMul "sympy.series.sequences.SeqMul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Simplify [`SeqAdd`](#sympy.series.sequences.SeqAdd "sympy.series.sequences.SeqAdd")
    using known rules.
  prefs: []
  type: TYPE_NORMAL
- en: Iterates through all pairs and ask the constituent sequences if they can simplify
    themselves with any other constituent.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: adapted from `Union.reduce`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Represents term-wise multiplication of sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Handles multiplication of sequences only. For multiplication with other objects
    see [`SeqBase.coeff_mul()`](#sympy.series.sequences.SeqBase.coeff_mul "sympy.series.sequences.SeqBase.coeff_mul").
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules:'
  prefs: []
  type: TYPE_NORMAL
- en: The interval on which sequence is defined is the intersection of respective
    intervals of sequences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything * [`EmptySequence`](#sympy.series.sequences.EmptySequence "sympy.series.sequences.EmptySequence")
    returns [`EmptySequence`](#sympy.series.sequences.EmptySequence "sympy.series.sequences.EmptySequence").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other rules are defined in `_mul` methods of sequence classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqAdd`](#sympy.series.sequences.SeqAdd "sympy.series.sequences.SeqAdd")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Simplify a [`SeqMul`](#sympy.series.sequences.SeqMul "sympy.series.sequences.SeqMul")
    using known rules.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Iterates through all pairs and ask the constituent sequences if they can simplify
    themselves with any other constituent.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: adapted from `Union.reduce`
  prefs: []
  type: TYPE_NORMAL
- en: Recursive Sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: A finite degree recursive sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**recurrence** : SymPy expression defining recurrence'
  prefs: []
  type: TYPE_NORMAL
- en: This is *not* an equality, only the expression that the nth term is equal to.
    For example, if `a(n) = f(a(n - 1), ..., a(n - d))`, then the expression should
    be `f(a(n - 1), ..., a(n - d))`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**yn** : applied undefined function'
  prefs: []
  type: TYPE_NORMAL
- en: Represents the nth term of the sequence as e.g. `y(n)` where `y` is an undefined
    function and \(n\) is the sequence index.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : symbolic argument'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the variable that the recurrence is in, e.g., `n` if the recurrence
    function is `y(n)`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**initial** : iterable with length equal to the degree of the recurrence'
  prefs: []
  type: TYPE_NORMAL
- en: The initial values of the recurrence.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**start** : start value of sequence (inclusive)'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: That is, a sequence a(n) that depends on a fixed, finite number of its previous
    values. The general form is
  prefs: []
  type: TYPE_NORMAL
- en: a(n) = f(a(n - 1), a(n - 2), …, a(n - d))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: for some fixed, positive integer d, where f is some function defined by a SymPy
    expression.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.sequences.SeqFormula`](#sympy.series.sequences.SeqFormula "sympy.series.sequences.SeqFormula")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The initial values of the sequence
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Interval on which sequence is defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Sequence index symbol
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Equation defining recurrence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The starting point of the sequence. This point is included
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The ending point of the sequence. (oo)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Undefined function for the nth term of the sequence
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Applied function representing the nth term
  prefs: []
  type: TYPE_NORMAL
