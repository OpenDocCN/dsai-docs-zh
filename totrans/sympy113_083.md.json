["```py\nclass sympy.series.formal.FormalPowerSeries(*args)\n```", "```py\ncoeff_bell(n)\n```", "```py\ncompose(other, x=None, n=6)\n```", "```py\n>>> from sympy import fps, sin, exp\n>>> from sympy.abc import x\n>>> f1 = fps(exp(x))\n>>> f2 = fps(sin(x)) \n```", "```py\n>>> f1.compose(f2, x).truncate()\n1 + x + x**2/2 - x**4/8 - x**5/15 + O(x**6) \n```", "```py\n>>> f1.compose(f2, x).truncate(8)\n1 + x + x**2/2 - x**4/8 - x**5/15 - x**6/240 + x**7/90 + O(x**8) \n```", "```py\nproperty infinite\n```", "```py\nintegrate(x=None, **kwargs)\n```", "```py\n>>> from sympy import fps, sin, integrate\n>>> from sympy.abc import x\n>>> f = fps(sin(x))\n>>> f.integrate(x).truncate()\n-1 + x**2/2 - x**4/24 + O(x**6)\n>>> integrate(f, (x, 0, 1))\n1 - cos(1) \n```", "```py\ninverse(x=None, n=6)\n```", "```py\n>>> from sympy import fps, exp, cos\n>>> from sympy.abc import x\n>>> f1 = fps(exp(x))\n>>> f2 = fps(cos(x)) \n```", "```py\n>>> f1.inverse(x).truncate()\n1 - x + x**2/2 - x**3/6 + x**4/24 - x**5/120 + O(x**6) \n```", "```py\n>>> f2.inverse(x).truncate(8)\n1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + O(x**8) \n```", "```py\npolynomial(n=6)\n```", "```py\nproduct(other, x=None, n=6)\n```", "```py\n>>> from sympy import fps, sin, exp\n>>> from sympy.abc import x\n>>> f1 = fps(sin(x))\n>>> f2 = fps(exp(x)) \n```", "```py\n>>> f1.product(f2, x).truncate(4)\nx + x**2 + x**3/3 + O(x**4) \n```", "```py\ntruncate(n=6)\n```", "```py\nsympy.series.formal.fps(f, x=None, x0=0, dir=1, hyper=True, order=4, rational=True, full=False)\n```", "```py\n>>> from sympy import fps, ln, atan, sin\n>>> from sympy.abc import x, n \n```", "```py\n>>> fps(ln(1 + x)).truncate()\nx - x**2/2 + x**3/3 - x**4/4 + x**5/5 + O(x**6) \n```", "```py\n>>> fps(atan(x), full=True).truncate()\nx - x**3/3 + x**5/5 + O(x**6) \n```", "```py\n>>> fps(x**n*sin(x**2), x).truncate(8)\n-x**(n + 6)/6 + x**(n + 2) + O(x**(n + 8)) \n```", "```py\nsympy.series.formal.compute_fps(f, x, x0=0, dir=1, hyper=True, order=4, rational=True, full=False)\n```", "```py\nclass sympy.series.formal.FormalPowerSeriesCompose(*args)\n```", "```py\nproperty function\n```", "```py\nclass sympy.series.formal.FormalPowerSeriesInverse(*args)\n```", "```py\nproperty function\n```", "```py\nclass sympy.series.formal.FormalPowerSeriesProduct(*args)\n```", "```py\nproperty function\n```", "```py\nclass sympy.series.formal.FiniteFormalPowerSeries(*args)\n```", "```py\nsympy.series.formal.rational_independent(terms, x)\n```", "```py\n>>> from sympy import sin, cos\n>>> from sympy.series.formal import rational_independent\n>>> from sympy.abc import x \n```", "```py\n>>> rational_independent([cos(x), sin(x)], x)\n[cos(x), sin(x)]\n>>> rational_independent([x**2, sin(x), x*sin(x), x**3], x)\n[x**3 + x**2, x*sin(x) + sin(x)] \n```", "```py\nsympy.series.formal.rational_algorithm(f, x, k, order=4, full=False)\n```", "```py\n>>> from sympy import log, atan\n>>> from sympy.series.formal import rational_algorithm as ra\n>>> from sympy.abc import x, k \n```", "```py\n>>> ra(1 / (1 - x), x, k)\n(1, 0, 0)\n>>> ra(log(1 + x), x, k)\n(-1/((-1)**k*k), 0, 1) \n```", "```py\n>>> ra(atan(x), x, k, full=True)\n((-I/(2*(-I)**k) + I/(2*I**k))/k, 0, 1) \n```", "```py\nsympy.series.formal.simpleDE(f, x, g, order=4)\n```", "```py\nsympy.series.formal.exp_re(DE, r, k)\n```", "```py\n>>> from sympy import Function, Derivative\n>>> from sympy.series.formal import exp_re\n>>> from sympy.abc import x, k\n>>> f, r = Function('f'), Function('r') \n```", "```py\n>>> exp_re(-f(x) + Derivative(f(x)), r, k)\n-r(k) + r(k + 1)\n>>> exp_re(Derivative(f(x), x) + Derivative(f(x), (x, 2)), r, k)\nr(k) + r(k + 1) \n```", "```py\nsympy.series.formal.hyper_re(DE, r, k)\n```", "```py\n>>> from sympy import Function, Derivative\n>>> from sympy.series.formal import hyper_re\n>>> from sympy.abc import x, k\n>>> f, r = Function('f'), Function('r') \n```", "```py\n>>> hyper_re(-f(x) + Derivative(f(x)), r, k)\n(k + 1)*r(k + 1) - r(k)\n>>> hyper_re(-x*f(x) + Derivative(f(x), (x, 2)), r, k)\n(k + 2)*(k + 3)*r(k + 3) - r(k) \n```", "```py\nsympy.series.formal.rsolve_hypergeometric(f, x, P, Q, k, m)\n```", "```py\n>>> from sympy import exp, ln, S\n>>> from sympy.series.formal import rsolve_hypergeometric as rh\n>>> from sympy.abc import x, k \n```", "```py\n>>> rh(exp(x), x, -S.One, (k + 1), k, 1)\n(Piecewise((1/factorial(k), Eq(Mod(k, 1), 0)), (0, True)), 1, 1) \n```", "```py\n>>> rh(ln(1 + x), x, k**2, k*(k + 1), k, 1)\n(Piecewise(((-1)**(k - 1)*factorial(k - 1)/RisingFactorial(2, k - 1),\n Eq(Mod(k, 1), 0)), (0, True)), x, 2) \n```", "```py\nsympy.series.formal.solve_de(f, x, DE, order, g, k)\n```", "```py\n>>> from sympy import Derivative as D, Function\n>>> from sympy import exp, ln\n>>> from sympy.series.formal import solve_de\n>>> from sympy.abc import x, k\n>>> f = Function('f') \n```", "```py\n>>> solve_de(exp(x), x, D(f(x), x) - f(x), 1, f, k)\n(Piecewise((1/factorial(k), Eq(Mod(k, 1), 0)), (0, True)), 1, 1) \n```", "```py\n>>> solve_de(ln(1 + x), x, (x + 1)*D(f(x), x, 2) + D(f(x)), 2, f, k)\n(Piecewise(((-1)**(k - 1)*factorial(k - 1)/RisingFactorial(2, k - 1),\n Eq(Mod(k, 1), 0)), (0, True)), x, 2) \n```", "```py\nsympy.series.formal.hyper_algorithm(f, x, k, order=4)\n```", "```py\n>>> from sympy import exp, ln\n>>> from sympy.series.formal import hyper_algorithm \n```", "```py\n>>> from sympy.abc import x, k \n```", "```py\n>>> hyper_algorithm(exp(x), x, k)\n(Piecewise((1/factorial(k), Eq(Mod(k, 1), 0)), (0, True)), 1, 1) \n```", "```py\n>>> hyper_algorithm(ln(1 + x), x, k)\n(Piecewise(((-1)**(k - 1)*factorial(k - 1)/RisingFactorial(2, k - 1),\n Eq(Mod(k, 1), 0)), (0, True)), x, 2) \n```"]