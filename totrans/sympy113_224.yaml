- en: Shor’s Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/shor.html](https://docs.sympy.org/latest/modules/physics/quantum/shor.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Shor’s algorithm and helper functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Todo:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the CMod gate working again using the new Gate API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix everything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update docstrings and reformat.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A controlled mod gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is black box controlled Mod function for use by shor’s algorithm. TODO:
    implement a decompose property that returns how to do this in terms of elementary
    gates'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: N is the type of modular arithmetic we are doing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Base of the controlled mod function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Size of 1/2 input register. First 1/2 holds output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finds the period of a in modulo N arithmetic
  prefs: []
  type: TYPE_NORMAL
- en: 'This is quantum part of Shor’s algorithm. It takes two registers, puts first
    in superposition of states with Hadamards so: `|k>|0>` with k being all possible
    choices. It then does a controlled mod and a QFT to determine the order of a.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This function implements Shor’s factoring algorithm on the Integer N
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm starts by picking a random number (a) and seeing if it is coprime
    with N. If it is not, then the gcd of the two numbers is a factor and we are done.
    Otherwise, it begins the period_finding subroutine which finds the period of a
    in modulo N arithmetic. This period, if even, can be used to calculate factors
    by taking a**(r/2)-1 and a**(r/2)+1. These values are returned.
  prefs: []
  type: TYPE_NORMAL
