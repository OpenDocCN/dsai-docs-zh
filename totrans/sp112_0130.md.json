["```py\nscipy.integrate.nquad(func, ranges, args=None, opts=None, full_output=False)\n```", "```py\ndouble func(int n, double *xx)\ndouble func(int n, double *xx, void *user_data) \n```", "```py\n>>> import numpy as np\n>>> from scipy import integrate\n>>> func = lambda x0,x1,x2,x3 : x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n...                                 1 if (x0-.2*x3-.5-.25*x1>0) else 0)\n>>> def opts0(*args, **kwargs):\n...     return {'points':[0.2*args[2] + 0.5 + 0.25*args[0]]}\n>>> integrate.nquad(func, [[0,1], [-1,1], [.13,.8], [-.15,1]],\n...                 opts=[opts0,{},{},{}], full_output=True)\n(1.5267454070738633, 2.9437360001402324e-14, {'neval': 388962}) \n```", "```py\n>>> def func2(x0, x1, x2, t0, t1):\n...     return x0*x2**2 + np.sin(x1) + 1 + (1 if x0+t1*x1-t0>0 else 0)\n>>> def lim0(x1, x2, t0, t1):\n...     return [t0*x1 + t1*x2 - 1, t0*x1 + t1*x2 + 1]\n>>> def lim1(x2, t0, t1):\n...     return [x2 + t0**2*t1**3 - 1, x2 + t0**2*t1**3 + 1]\n>>> def lim2(t0, t1):\n...     return [t0 + t1 - 1, t0 + t1 + 1]\n>>> def opts0(x1, x2, t0, t1):\n...     return {'points' : [t0 - t1*x1]}\n>>> def opts1(x2, t0, t1):\n...     return {}\n>>> def opts2(t0, t1):\n...     return {}\n>>> integrate.nquad(func2, [lim0, lim1, lim2], args=(0,1),\n...                 opts=[opts0, opts1, opts2])\n(36.099919226771625, 1.8546948553373528e-07) \n```"]