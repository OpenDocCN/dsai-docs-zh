- en: scipy.signal.check_NOLA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.check_NOLA.html#scipy.signal.check_NOLA](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.check_NOLA.html#scipy.signal.check_NOLA)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Check whether the Nonzero Overlap Add (NOLA) constraint is met.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The allowed variance of a bin’s weighted sum from the median bin sum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**verdict**bool'
  prefs: []
  type: TYPE_NORMAL
- en: '*True* if chosen combination satisfies the NOLA constraint within *tol*, *False*
    otherwise'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`check_COLA`](scipy.signal.check_COLA.html#scipy.signal.check_COLA "scipy.signal.check_COLA")'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether the Constant OverLap Add (COLA) constraint is met
  prefs: []
  type: TYPE_NORMAL
- en: '[`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")'
  prefs: []
  type: TYPE_NORMAL
- en: Short Time Fourier Transform
  prefs: []
  type: TYPE_NORMAL
- en: '[`istft`](scipy.signal.istft.html#scipy.signal.istft "scipy.signal.istft")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Short Time Fourier Transform
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to enable inversion of an STFT via the inverse STFT in [`istft`](scipy.signal.istft.html#scipy.signal.istft
    "scipy.signal.istft"), the signal windowing must obey the constraint of “nonzero
    overlap add” (NOLA):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum_{t}w^{2}[n-tH] \ne 0\]
  prefs: []
  type: TYPE_NORMAL
- en: for all \(n\), where \(w\) is the window function, \(t\) is the frame index,
    and \(H\) is the hop size (\(H\) = *nperseg* - *noverlap*).
  prefs: []
  type: TYPE_NORMAL
- en: This ensures that the normalization factors in the denominator of the overlap-add
    inversion equation are not zero. Only very pathological windows will fail the
    NOLA constraint.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Julius O. Smith III, “Spectral Audio Signal Processing”, W3K Publishing, 2011,ISBN
    978-0-9745607-3-1.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: G. Heinzel, A. Ruediger and R. Schilling, “Spectrum and spectral density estimation
    by the Discrete Fourier transform (DFT), including a comprehensive list of window
    functions and some new at-top windows”, 2002, [http://hdl.handle.net/11858/00-001M-0000-0013-557A-5](http://hdl.handle.net/11858/00-001M-0000-0013-557A-5)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm NOLA condition for rectangular window of 75% (3/4) overlap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'NOLA is also true for 25% (1/4) overlap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '“Symmetrical” Hann window (for filter design) is also NOLA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As long as there is overlap, it takes quite a pathological window to fail NOLA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is not enough overlap, a window with zeros at the ends will not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
