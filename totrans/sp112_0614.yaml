- en: scipy.signal.dlti
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.dlti.html#scipy.signal.dlti](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.dlti.html#scipy.signal.dlti)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Discrete-time linear time invariant system base class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***system: arguments**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`dlti`](#scipy.signal.dlti "scipy.signal.dlti") class can be instantiated
    with either 2, 3 or 4 arguments. The following gives the number of arguments and
    the corresponding discrete-time subclass that is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '2: [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"): (numerator, denominator)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '3: [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"): (zeros, poles, gain)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '4: [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace "scipy.signal.StateSpace"):
    (A, B, C, D)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Each argument can be an array or a sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '**dt: float, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling time [s] of the discrete-time systems. Defaults to `True` (unspecified
    sampling time). Must be specified as a keyword argument, for example, `dt=0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"), [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"), [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`dlti`](#scipy.signal.dlti "scipy.signal.dlti") instances do not exist directly.
    Instead, [`dlti`](#scipy.signal.dlti "scipy.signal.dlti") creates an instance
    of one of its subclasses: [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") or [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain").'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of properties that are not directly part of the current system
    representation (such as the [`zeros`](scipy.signal.dlti.zeros.html#scipy.signal.dlti.zeros
    "scipy.signal.dlti.zeros") of a [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace") system) is very inefficient and may lead to numerical
    inaccuracies. It is better to convert to the specific system representation first.
    For example, call `sys = sys.to_zpk()` before accessing/changing the zeros, poles
    or gain.
  prefs: []
  type: TYPE_NORMAL
- en: If (numerator, denominator) is passed in for `*system`, coefficients for both
    the numerator and denominator should be specified in descending exponent order
    (e.g., `z^2 + 3z + 5` would be represented as `[1, 3, 5]`).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.18.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(z) = \frac{5(z - 1)(z - 2)}{(z - 3)(z -
    4)}\) with a sampling time of 0.1 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(z) = \frac{3z + 4}{1z + 2}\) with a sampling
    time of 0.1 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`dt`](scipy.signal.dlti.dt.html#scipy.signal.dlti.dt "scipy.signal.dlti.dt")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the sampling time of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`poles`](scipy.signal.dlti.poles.html#scipy.signal.dlti.poles "scipy.signal.dlti.poles")'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](scipy.signal.dlti.zeros.html#scipy.signal.dlti.zeros "scipy.signal.dlti.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`bode`](scipy.signal.dlti.bode.html#scipy.signal.dlti.bode "scipy.signal.dlti.bode")([w, n])
    | Calculate Bode magnitude and phase data of a discrete-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`freqresp`](scipy.signal.dlti.freqresp.html#scipy.signal.dlti.freqresp "scipy.signal.dlti.freqresp")([w, n, whole])
    | Calculate the frequency response of a discrete-time system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`impulse`](scipy.signal.dlti.impulse.html#scipy.signal.dlti.impulse "scipy.signal.dlti.impulse")([x0, t, n])
    | Return the impulse response of the discrete-time [`dlti`](#scipy.signal.dlti
    "scipy.signal.dlti") system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`output`](scipy.signal.dlti.output.html#scipy.signal.dlti.output "scipy.signal.dlti.output")(u, t[, x0])
    | Return the response of the discrete-time system to input *u*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`step`](scipy.signal.dlti.step.html#scipy.signal.dlti.step "scipy.signal.dlti.step")([x0, t, n])
    | Return the step response of the discrete-time [`dlti`](#scipy.signal.dlti "scipy.signal.dlti")
    system. |'
  prefs: []
  type: TYPE_TB
