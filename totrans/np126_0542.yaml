- en: numpy.set_printoptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.set_printoptions.html](https://numpy.org/doc/1.26/reference/generated/numpy.set_printoptions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Set printing options.
  prefs: []
  type: TYPE_NORMAL
- en: These options determine the way floating point numbers, arrays and other NumPy
    objects are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of digits of precision for floating point output (default 8). May be
    None if *floatmode* is not *fixed*, to print as many digits as necessary to uniquely
    specify the value.
  prefs: []
  type: TYPE_NORMAL
- en: '**threshold**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Total number of array elements which trigger summarization rather than full
    repr (default 1000). To always use the full repr without summarization, pass [`sys.maxsize`](https://docs.python.org/3/library/sys.html#sys.maxsize
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: '**edgeitems**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array items in summary at beginning and end of each dimension (default
    3).
  prefs: []
  type: TYPE_NORMAL
- en: '**linewidth**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of characters per line for the purpose of inserting line breaks (default
    75).
  prefs: []
  type: TYPE_NORMAL
- en: '**suppress**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, always print floating point numbers using fixed point notation, in
    which case numbers equal to zero in the current precision will print as zero.
    If False, then scientific notation is used when absolute value of the smallest
    number is < 1e-4 or the ratio of the maximum absolute value to the minimum is
    > 1e3\. The default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**nanstr**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String representation of floating point not-a-number (default nan).
  prefs: []
  type: TYPE_NORMAL
- en: '**infstr**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String representation of floating point infinity (default inf).
  prefs: []
  type: TYPE_NORMAL
- en: '**sign**string, either ‘-’, ‘+’, or ‘ ‘, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls printing of the sign of floating-point types. If ‘+’, always print
    the sign of positive values. If ‘ ‘, always prints a space (whitespace character)
    in the sign position of positive values. If ‘-’, omit the sign character of positive
    values. (default ‘-‘)
  prefs: []
  type: TYPE_NORMAL
- en: '**formatter**dict of callables, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'If not None, the keys should indicate the type(s) that the respective formatting
    function applies to. Callables should return a string. Types that are not specified
    (by their corresponding keys) are handled by the default formatters. Individual
    types for which a formatter can be set are:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘bool’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘int’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘timedelta’ : a [`numpy.timedelta64`](../arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘datetime’ : a [`numpy.datetime64`](../arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘float’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘longfloat’ : 128-bit floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘complexfloat’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘longcomplexfloat’ : composed of two 128-bit floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘numpystr’ : types [`numpy.bytes_`](../arrays.scalars.html#numpy.bytes_ "numpy.bytes_")
    and [`numpy.str_`](../arrays.scalars.html#numpy.str_ "numpy.str_")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘object’ : *np.object_* arrays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other keys that can be used to set a group of types at once are:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘all’ : sets all types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘int_kind’ : sets ‘int’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘float_kind’ : sets ‘float’ and ‘longfloat’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘complex_kind’ : sets ‘complexfloat’ and ‘longcomplexfloat’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘str_kind’ : sets ‘numpystr’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**floatmode**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Controls the interpretation of the *precision* option for floating-point types.
    Can take the following values (default maxprec_equal):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘fixed’: Always print exactly *precision* fractional digits,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: even if this would print more or fewer digits than necessary to specify the
    value uniquely.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘unique’: Print the minimum number of fractional digits necessary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to represent each value uniquely. Different elements may have a different number
    of digits. The value of the *precision* option is ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘maxprec’: Print at most *precision* fractional digits, but if'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an element can be uniquely represented with fewer digits only print it with
    that many.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘maxprec_equal’: Print at most *precision* fractional digits,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: but if every element in the array can be uniquely represented with an equal
    number of fewer digits, use that many digits for all elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**legacy**string or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If set to the string *‘1.13’* enables 1.13 legacy printing mode. This approximates
    numpy 1.13 print output by including a space in the sign position of floats and
    different behavior for 0d arrays. This also enables 1.21 legacy printing mode
    (described below).
  prefs: []
  type: TYPE_NORMAL
- en: If set to the string *‘1.21’* enables 1.21 legacy printing mode. This approximates
    numpy 1.21 print output of complex structured dtypes by not inserting spaces after
    commas that separate fields and after colons.
  prefs: []
  type: TYPE_NORMAL
- en: If set to *False*, disables legacy mode.
  prefs: []
  type: TYPE_NORMAL
- en: Unrecognized strings will be ignored with a warning for forward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_printoptions`](numpy.get_printoptions.html#numpy.get_printoptions "numpy.get_printoptions"),
    [`printoptions`](numpy.printoptions.html#numpy.printoptions "numpy.printoptions"),
    [`set_string_function`](numpy.set_string_function.html#numpy.set_string_function
    "numpy.set_string_function"), [`array2string`](numpy.array2string.html#numpy.array2string
    "numpy.array2string")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '*formatter* is always reset with a call to [`set_printoptions`](#numpy.set_printoptions
    "numpy.set_printoptions").'
  prefs: []
  type: TYPE_NORMAL
- en: Use [`printoptions`](numpy.printoptions.html#numpy.printoptions "numpy.printoptions")
    as a context manager to set the values temporarily.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Floating point precision can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Long arrays can be summarised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Small results can be suppressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A custom formatter can be used to display array elements as desired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To put back the default options, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Also to temporarily override options, use [`printoptions`](numpy.printoptions.html#numpy.printoptions
    "numpy.printoptions") as a context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
