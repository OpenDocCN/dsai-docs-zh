- en: numpy.shares_memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.shares_memory.html](https://numpy.org/doc/1.26/reference/generated/numpy.shares_memory.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Determine if two arrays share memory.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function can be exponentially slow for some inputs, unless *max_work* is
    set to a finite number or `MAY_SHARE_BOUNDS`. If in doubt, use [`numpy.may_share_memory`](numpy.may_share_memory.html#numpy.may_share_memory
    "numpy.may_share_memory") instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a, b**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Input arrays
  prefs: []
  type: TYPE_NORMAL
- en: '**max_work**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Effort to spend on solving the overlap problem (maximum number of candidate
    solutions to consider). The following special values are recognized:'
  prefs: []
  type: TYPE_NORMAL
- en: max_work=MAY_SHARE_EXACT (default)
  prefs: []
  type: TYPE_NORMAL
- en: The problem is solved exactly. In this case, the function returns True only
    if there is an element shared between the arrays. Finding the exact solution may
    take extremely long in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: max_work=MAY_SHARE_BOUNDS
  prefs: []
  type: TYPE_NORMAL
- en: Only the memory bounds of a and b are checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: numpy.exceptions.TooHardError
  prefs: []
  type: TYPE_NORMAL
- en: Exceeded max_work.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`may_share_memory`](numpy.may_share_memory.html#numpy.may_share_memory "numpy.may_share_memory")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking whether two arrays share memory is NP-complete, and runtime may increase
    exponentially in the number of dimensions. Hence, *max_work* should generally
    be set to a finite number, as it is possible to construct examples that take extremely
    long to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running `np.shares_memory(x1, x2)` without *max_work* set takes around 1 minute
    for this case. It is possible to find problems that take still significantly longer.
  prefs: []
  type: TYPE_NORMAL
