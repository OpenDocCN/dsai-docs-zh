["```py\nscipy.stats.truncweibull_min = <scipy.stats._continuous_distns.truncweibull_min_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import truncweibull_min\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> c, a, b = 2.5, 0.25, 1.75\n>>> mean, var, skew, kurt = truncweibull_min.stats(c, a, b, moments='mvsk') \n```", "```py\n>>> x = np.linspace(truncweibull_min.ppf(0.01, c, a, b),\n...                 truncweibull_min.ppf(0.99, c, a, b), 100)\n>>> ax.plot(x, truncweibull_min.pdf(x, c, a, b),\n...        'r-', lw=5, alpha=0.6, label='truncweibull_min pdf') \n```", "```py\n>>> rv = truncweibull_min(c, a, b)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf') \n```", "```py\n>>> vals = truncweibull_min.ppf([0.001, 0.5, 0.999], c, a, b)\n>>> np.allclose([0.001, 0.5, 0.999], truncweibull_min.cdf(vals, c, a, b))\nTrue \n```", "```py\n>>> r = truncweibull_min.rvs(c, a, b, size=1000) \n```", "```py\n>>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim([x[0], x[-1]])\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```"]