- en: scipy.interpolate.make_smoothing_spline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_smoothing_spline.html#scipy.interpolate.make_smoothing_spline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_smoothing_spline.html#scipy.interpolate.make_smoothing_spline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the (coefficients of) smoothing cubic spline function using `lam` to
    control the tradeoff between the amount of smoothness of the curve and its proximity
    to the data. In case `lam` is None, using the GCV criteria [1] to find it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A smoothing spline is found as a solution to the regularized weighted linear
    regression problem:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum\limits_{i=1}^n w_i\lvert y_i - f(x_i) \rvert^2 + \lambda\int\limits_{x_1}^{x_n}
    (f^{(2)}(u))^2 d u\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(f\) is a spline function, \(w\) is a vector of weights and \(\lambda\)
    is a regularization parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `lam` is None, we use the GCV criteria to find an optimal regularization
    parameter, otherwise we solve the regularized weighted linear regression problem
    with given parameter. The parameter controls the tradeoff in the following way:
    the larger the parameter becomes, the smoother the function gets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Abscissas. *n* must be at least 5.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Ordinates. *n* must be at least 5.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**array_like, shape (n,), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Vector of weights. Default is `np.ones_like(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**lam**float, (\(\lambda \geq 0\)), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Regularization parameter. If `lam` is None, then it is found from the GCV criteria.
    Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**a BSpline object.'
  prefs: []
  type: TYPE_NORMAL
- en: A callable representing a spline in the B-spline basis as a solution of the
    problem of smoothing splines using the GCV criteria [1] in case `lam` is None,
    otherwise using the given parameter `lam`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm is a clean room reimplementation of the algorithm introduced
    by Woltring in FORTRAN [2]. The original version cannot be used in SciPy source
    code because of the license issues. The details of the reimplementation are discussed
    here (available only in Russian) [4].
  prefs: []
  type: TYPE_NORMAL
- en: If the vector of weights `w` is None, we assume that all the points are equal
    in terms of weights, and vector of weights is vector of ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in weighted residual sum of squares, weights are not squared: \(\sum\limits_{i=1}^n
    w_i\lvert y_i - f(x_i) \rvert^2\) while in `splrep` the sum is built from the
    squared weights.'
  prefs: []
  type: TYPE_NORMAL
- en: In cases when the initial problem is ill-posed (for example, the product \(X^T
    W X\) where \(X\) is a design matrix is not a positive defined matrix) a ValueError
    is raised.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'G. Wahba, “Estimating the smoothing parameter” in Spline models for observational
    data, Philadelphia, Pennsylvania: Society for Industrial and Applied Mathematics,
    1990, pp. 45-65. [DOI:10.1137/1.9781611970128](https://doi.org/10.1137/1.9781611970128)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: H. J. Woltring, A Fortran package for generalized, cross-validatory spline smoothing
    and differentiation, Advances in Engineering Software, vol. 8, no. 2, pp. 104-113,
    1986. [DOI:10.1016/0141-1195(86)90098-7](https://doi.org/10.1016/0141-1195(86)90098-7)
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: 'T. Hastie, J. Friedman, and R. Tisbshirani, “Smoothing Splines” in The elements
    of Statistical Learning: Data Mining, Inference, and prediction, New York: Springer,
    2017, pp. 241-249. [DOI:10.1007/978-0-387-84858-7](https://doi.org/10.1007/978-0-387-84858-7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]'
  prefs: []
  type: TYPE_NORMAL
- en: E. Zemlyanoy, “Generalized cross-validation smoothing splines”, BSc thesis,
    2022. [https://www.hse.ru/ba/am/students/diplomas/620910604](https://www.hse.ru/ba/am/students/diplomas/620910604)
    (in Russian)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Generate some noisy data
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Make a smoothing spline function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Plot both
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-make_smoothing_spline-1.png](../Images/9b271b21e5ee3b0c41f2143e2239d788.png)'
  prefs: []
  type: TYPE_IMG
