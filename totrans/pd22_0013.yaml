- en: How to handle time series data with ease
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/09_timeseries.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/09_timeseries.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Using pandas datetime properties'
  prefs: []
  type: TYPE_NORMAL
- en: I want to work with the dates in the column `datetime` as datetime objects instead
    of plain text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initially, the values in `datetime` are character strings and do not provide
    any datetime operations (e.g. extract the year, day of the week,…). By applying
    the `to_datetime` function, pandas interprets the strings and convert these to
    datetime (i.e. `datetime64[ns, UTC]`) objects. In pandas we call these datetime
    objects similar to `datetime.datetime` from the standard library as [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'As many data sets do contain datetime information in one of the columns, pandas
    input function like [`pandas.read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") and [`pandas.read_json()`](../../reference/api/pandas.read_json.html#pandas.read_json
    "pandas.read_json") can do the transformation to dates when reading the data using
    the `parse_dates` parameter with a list of the columns to read as Timestamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Why are these [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects useful? Let’s illustrate the added value with some
    example cases.
  prefs: []
  type: TYPE_NORMAL
- en: What is the start and end date of the time series data set we are working with?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") for datetimes enables us to calculate with date information
    and make them comparable. Hence, we can use this to get the length of our time
    series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The result is a [`pandas.Timedelta`](../../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") object, similar to `datetime.timedelta` from the standard
    Python library and defining a time duration.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: The various time concepts supported by pandas are explained in the user guide
    section on [time related concepts](../../user_guide/timeseries.html#timeseries-overview).
  prefs: []
  type: TYPE_NORMAL
- en: I want to add a new column to the `DataFrame` containing only the month of the
    measurement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By using `Timestamp` objects for dates, a lot of time-related properties are
    provided by pandas. For example the `month`, but also `year`, `quarter`,… All
    of these properties are accessible by the `dt` accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the existing date properties is given in the [time and date components
    overview table](../../user_guide/timeseries.html#timeseries-components). More
    details about the `dt` accessor to return datetime like properties are explained
    in a dedicated section on the [dt accessor](../../user_guide/basics.html#basics-dt-accessors).
  prefs: []
  type: TYPE_NORMAL
- en: What is the average \(NO_2\) concentration for each day of the week for each
    of the measurement locations?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the split-apply-combine pattern provided by `groupby` from the [tutorial
    on statistics calculation](06_calculate_statistics.html#min-tut-06-stats)? Here,
    we want to calculate a given statistic (e.g. mean \(NO_2\)) **for each weekday**
    and **for each measurement location**. To group on weekdays, we use the datetime
    property `weekday` (with Monday=0 and Sunday=6) of pandas `Timestamp`, which is
    also accessible by the `dt` accessor. The grouping on both locations and weekdays
    can be done to split the calculation of the mean on each of these combinations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Danger
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we are working with a very short time series in these examples, the analysis
    does not provide a long-term representative result!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Plot the typical \(NO_2\) pattern during the day of our time series of all stations
    together. In other words, what is the average value for each hour of the day?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_bar_chart.png](../Images/c4149702b87fa6a1882c3f3019a7b6f1.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Similar to the previous case, we want to calculate a given statistic (e.g. mean
    \(NO_2\)) **for each hour of the day** and we can use the split-apply-combine
    approach again. For this case, we use the datetime property `hour` of pandas `Timestamp`,
    which is also accessible by the `dt` accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Datetime as index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the [tutorial on reshaping](07_reshape_table_layout.html#min-tut-07-reshape),
    [`pivot()`](../../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    was introduced to reshape the data table with each of the measurements locations
    as a separate column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By pivoting the data, the datetime information became the index of the table.
    In general, setting a column as an index can be achieved by the `set_index` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with a datetime index (i.e. `DatetimeIndex`) provides powerful functionalities.
    For example, we do not need the `dt` accessor to get the time series properties,
    but have these properties available on the index directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Some other advantages are the convenient subsetting of time period or the adapted
    time scale on plots. Let’s apply this on our data.
  prefs: []
  type: TYPE_NORMAL
- en: Create a plot of the \(NO_2\) values in the different stations from the 20th
    of May till the end of 21st of May
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_time_section.png](../Images/1fb2f45fbd7a151cfa181a8598355db2.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: By providing a **string that parses to a datetime**, a specific subset of the
    data can be selected on a `DatetimeIndex`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More information on the `DatetimeIndex` and the slicing by using strings is
    provided in the section on [time series indexing](../../user_guide/timeseries.html#timeseries-datetimeindex).
  prefs: []
  type: TYPE_NORMAL
- en: Resample a time series to another frequency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aggregate the current hourly time series values to the monthly maximum value
    in each of the stations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A very powerful method on time series data with a datetime index, is the ability
    to [`resample()`](../../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") time series to another frequency (e.g., converting secondly
    data into 5-minutely data).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`resample()`](../../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") method is similar to a groupby operation:'
  prefs: []
  type: TYPE_NORMAL
- en: it provides a time-based grouping, by using a string (e.g. `M`, `5H`,…) that
    defines the target frequency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it requires an aggregation function such as `mean`, `max`,…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the aliases used to define time series frequencies is given in
    the [offset aliases overview table](../../user_guide/timeseries.html#timeseries-offset-aliases).
  prefs: []
  type: TYPE_NORMAL
- en: 'When defined, the frequency of the time series is provided by the `freq` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Make a plot of the daily mean \(NO_2\) value in each of the stations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_resample_mean.png](../Images/941cd9f66ea140866256dc625cf019c6.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More details on the power of time series `resampling` is provided in the user
    guide section on [resampling](../../user_guide/timeseries.html#timeseries-resampling).
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Valid date strings can be converted to datetime objects using `to_datetime`
    function or as part of read functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetime objects in pandas support calculations, logical operations and convenient
    date-related properties using the `dt` accessor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `DatetimeIndex` contains these date-related properties and supports convenient
    slicing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resample` is a powerful method to change the frequency of a time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full overview on time series is given on the pages on [time series and date
    functionality](../../user_guide/timeseries.html#timeseries).
  prefs: []
  type: TYPE_NORMAL
- en: '## Using pandas datetime properties'
  prefs: []
  type: TYPE_NORMAL
- en: I want to work with the dates in the column `datetime` as datetime objects instead
    of plain text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initially, the values in `datetime` are character strings and do not provide
    any datetime operations (e.g. extract the year, day of the week,…). By applying
    the `to_datetime` function, pandas interprets the strings and convert these to
    datetime (i.e. `datetime64[ns, UTC]`) objects. In pandas we call these datetime
    objects similar to `datetime.datetime` from the standard library as [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'As many data sets do contain datetime information in one of the columns, pandas
    input function like [`pandas.read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") and [`pandas.read_json()`](../../reference/api/pandas.read_json.html#pandas.read_json
    "pandas.read_json") can do the transformation to dates when reading the data using
    the `parse_dates` parameter with a list of the columns to read as Timestamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Why are these [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects useful? Let’s illustrate the added value with some
    example cases.
  prefs: []
  type: TYPE_NORMAL
- en: What is the start and end date of the time series data set we are working with?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`pandas.Timestamp`](../../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") for datetimes enables us to calculate with date information
    and make them comparable. Hence, we can use this to get the length of our time
    series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The result is a [`pandas.Timedelta`](../../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") object, similar to `datetime.timedelta` from the standard
    Python library and defining a time duration.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: The various time concepts supported by pandas are explained in the user guide
    section on [time related concepts](../../user_guide/timeseries.html#timeseries-overview).
  prefs: []
  type: TYPE_NORMAL
- en: I want to add a new column to the `DataFrame` containing only the month of the
    measurement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By using `Timestamp` objects for dates, a lot of time-related properties are
    provided by pandas. For example the `month`, but also `year`, `quarter`,… All
    of these properties are accessible by the `dt` accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the existing date properties is given in the [time and date components
    overview table](../../user_guide/timeseries.html#timeseries-components). More
    details about the `dt` accessor to return datetime like properties are explained
    in a dedicated section on the [dt accessor](../../user_guide/basics.html#basics-dt-accessors).
  prefs: []
  type: TYPE_NORMAL
- en: What is the average \(NO_2\) concentration for each day of the week for each
    of the measurement locations?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the split-apply-combine pattern provided by `groupby` from the [tutorial
    on statistics calculation](06_calculate_statistics.html#min-tut-06-stats)? Here,
    we want to calculate a given statistic (e.g. mean \(NO_2\)) **for each weekday**
    and **for each measurement location**. To group on weekdays, we use the datetime
    property `weekday` (with Monday=0 and Sunday=6) of pandas `Timestamp`, which is
    also accessible by the `dt` accessor. The grouping on both locations and weekdays
    can be done to split the calculation of the mean on each of these combinations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Danger
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we are working with a very short time series in these examples, the analysis
    does not provide a long-term representative result!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Plot the typical \(NO_2\) pattern during the day of our time series of all stations
    together. In other words, what is the average value for each hour of the day?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_bar_chart.png](../Images/c4149702b87fa6a1882c3f3019a7b6f1.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Similar to the previous case, we want to calculate a given statistic (e.g. mean
    \(NO_2\)) **for each hour of the day** and we can use the split-apply-combine
    approach again. For this case, we use the datetime property `hour` of pandas `Timestamp`,
    which is also accessible by the `dt` accessor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Datetime as index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the [tutorial on reshaping](07_reshape_table_layout.html#min-tut-07-reshape),
    [`pivot()`](../../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    was introduced to reshape the data table with each of the measurements locations
    as a separate column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By pivoting the data, the datetime information became the index of the table.
    In general, setting a column as an index can be achieved by the `set_index` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with a datetime index (i.e. `DatetimeIndex`) provides powerful functionalities.
    For example, we do not need the `dt` accessor to get the time series properties,
    but have these properties available on the index directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Some other advantages are the convenient subsetting of time period or the adapted
    time scale on plots. Let’s apply this on our data.
  prefs: []
  type: TYPE_NORMAL
- en: Create a plot of the \(NO_2\) values in the different stations from the 20th
    of May till the end of 21st of May
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_time_section.png](../Images/1fb2f45fbd7a151cfa181a8598355db2.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: By providing a **string that parses to a datetime**, a specific subset of the
    data can be selected on a `DatetimeIndex`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More information on the `DatetimeIndex` and the slicing by using strings is
    provided in the section on [time series indexing](../../user_guide/timeseries.html#timeseries-datetimeindex).
  prefs: []
  type: TYPE_NORMAL
- en: Resample a time series to another frequency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aggregate the current hourly time series values to the monthly maximum value
    in each of the stations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A very powerful method on time series data with a datetime index, is the ability
    to [`resample()`](../../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") time series to another frequency (e.g., converting secondly
    data into 5-minutely data).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The [`resample()`](../../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") method is similar to a groupby operation:'
  prefs: []
  type: TYPE_NORMAL
- en: it provides a time-based grouping, by using a string (e.g. `M`, `5H`,…) that
    defines the target frequency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it requires an aggregation function such as `mean`, `max`,…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the aliases used to define time series frequencies is given in
    the [offset aliases overview table](../../user_guide/timeseries.html#timeseries-offset-aliases).
  prefs: []
  type: TYPE_NORMAL
- en: 'When defined, the frequency of the time series is provided by the `freq` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Make a plot of the daily mean \(NO_2\) value in each of the stations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![../../_images/09_resample_mean.png](../Images/941cd9f66ea140866256dc625cf019c6.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: More details on the power of time series `resampling` is provided in the user
    guide section on [resampling](../../user_guide/timeseries.html#timeseries-resampling).
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Valid date strings can be converted to datetime objects using `to_datetime`
    function or as part of read functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetime objects in pandas support calculations, logical operations and convenient
    date-related properties using the `dt` accessor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `DatetimeIndex` contains these date-related properties and supports convenient
    slicing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resample` is a powerful method to change the frequency of a time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full overview on time series is given on the pages on [time series and date
    functionality](../../user_guide/timeseries.html#timeseries).
  prefs: []
  type: TYPE_NORMAL
