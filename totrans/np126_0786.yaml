- en: numpy.ma.outerproduct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.outerproduct.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.outerproduct.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the outer product of two vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given two vectors *a* and *b* of length `M` and `N`, repsectively, the outer
    product [[1]](#rf0d57dd5badd-1) is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(M,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: First input vector. Input is flattened if not already 1-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '**b**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Second input vector. Input is flattened if not already 1-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**(M, N) ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location where the result is stored
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**(M, N) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '`out[i, j] = a[i] * b[j]`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`inner`](numpy.inner.html#numpy.inner "numpy.inner")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`einsum`](numpy.einsum.html#numpy.einsum "numpy.einsum")'
  prefs: []
  type: TYPE_NORMAL
- en: '`einsum(''i,j->ij'', a.ravel(), b.ravel())` is the equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ufunc.outer`](numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")'
  prefs: []
  type: TYPE_NORMAL
- en: A generalization to dimensions other than 1D and other operations. `np.multiply.outer(a.ravel(),
    b.ravel())` is the equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tensordot`](numpy.tensordot.html#numpy.tensordot "numpy.tensordot")'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.tensordot(a.ravel(), b.ravel(), axes=((), ()))` is the equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Masked values are replaced by 0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: G. H. Golub and C. F. Van Loan, *Matrix Computations*, 3rd ed., Baltimore, MD,
    Johns Hopkins University Press, 1996, pg. 8.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a (*very* coarse) grid for computing a Mandelbrot set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An example using a “vector” of letters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
