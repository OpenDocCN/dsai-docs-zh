["```py\npandas.api.extensions.register_dataframe_accessor(name)\n```", "```py\ndef __init__(self, pandas_object):  # noqa: E999\n    ... \n```", "```py\n>>> pd.Series(['a', 'b']).dt\nTraceback (most recent call last):\n...\nAttributeError: Can only use .dt accessor with datetimelike values \n```", "```py\nimport pandas as pd\n\n@pd.api.extensions.register_dataframe_accessor(\"geo\")\nclass GeoAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def center(self):\n        # return the geographic center point of this DataFrame\n        lat = self._obj.latitude\n        lon = self._obj.longitude\n        return (float(lon.mean()), float(lat.mean()))\n\n    def plot(self):\n        # plot this array's data on a map, e.g., using Cartopy\n        pass \n```", "```py\n> In [1]: ds = pd.DataFrame({\"longitude\": np.linspace(0, 10),\n>  ...:                   \"latitude\": np.linspace(0, 20)})\n> In [2]: ds.geo.center\n> Out[2]: (5.0, 10.0)\n> In [3]: ds.geo.plot()  # plots data on a map \n> ```"]