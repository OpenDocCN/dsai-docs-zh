- en: Understanding Meson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html](https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Building SciPy relies on the following tools, which can be considered part
    of the build system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`meson`: the Meson build system, installable as a pure Python package from
    PyPI or conda-forge'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ninja`: the build tool invoked by Meson to do the actual building (e.g. invoking
    compilers). Installable also from PyPI (on all common platforms) or conda-forge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pkg-config`: the tool used for discovering dependencies (in particular BLAS/LAPACK).
    Available on conda-forge (and Homebrew, Chocolatey, and Linux package managers),
    but not packaged on PyPI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meson-python`: the Python build backend (i.e., the thing that gets invoked
    via a hook in `pyproject.toml` by a build frontend like `pip` or `pypa/build`).
    This is a thin layer on top of Meson, with as main roles (a) interface with build
    frontends, and (b) produce sdists and wheels with valid file names and metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Building with Meson happens in stages:'
  prefs: []
  type: TYPE_NORMAL
- en: A configure stage (`meson setup`) to detect compilers, dependencies and build
    options, and create the build directory and `build.ninja` file,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A compile stage (`meson compile` or `ninja`), where the extension modules that
    are part of a built SciPy package get compiled,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An install stage (`meson install`) to install the installable files from the
    source and build directories to the target install directory,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meson has a good build dependency tracking system, so invoking a build for a
    second time will rebuild only targets for which any sources or dependencies have
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Meson
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meson has [very good documentation](https://mesonbuild.com/); it pays off to
    read it, and is often the best source of answers for “how to do X”. Furthermore,
    an extensive pdf book on Meson can be obtained for free at [https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html](https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html)
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the design principles Meson uses, the recent talks linked
    from [mesonbuild.com/Videos](https://mesonbuild.com/Videos.html) are also a good
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation of build stages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*This is for teaching purposes only; there should be no need to execute these
    stages separately. The dev.py scripts in the root of the repo also contains these
    steps and may be studied for insights.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume we’re starting from a clean repo and a fully set up conda environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To now run the configure stage of the build and instruct Meson to put the build
    artifacts in `build/` and a local install under `build-install/` relative to the
    root of the repo, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To then run the compile stage of the build, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the command above, `-C` is followed by the name of the build directory. You
    can have multiple build directories at the same time. Meson is fully out-of-place,
    so those builds will not interfere with each other. You can for example have a
    GCC build, a Clang build and a debug build in different directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To then install SciPy into the prefix (`build-install/` here, but note that
    that’s just an arbitrary name we picked here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It will then install to `build-install/lib/python3.11/site-packages/scipy`,
    which is not on your Python path, so to add it do (*again, this is for learning
    purposes, using ``PYTHONPATH`` explicitly is typically not the best idea*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we should be able to import `scipy` and run the tests. Remembering that
    we need to move out of the root of the repo to ensure we pick up the package and
    not the local `scipy/` source directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The above runs the tests for a single module, `constants`. Other ways of running
    the tests should also work, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The full test suite should pass, without any build warnings on Linux (with the
    GCC version for which `-Werror` is enforced in CI at least) and with at most a
    moderate amount of warnings on other platforms.
  prefs: []
  type: TYPE_NORMAL
