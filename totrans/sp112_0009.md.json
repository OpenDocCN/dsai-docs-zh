["```py\n>>> import numpy as np\n>>> A = np.asmatrix('[1 2;3 4]')\n>>> A\nmatrix([[1, 2],\n [3, 4]])\n>>> A.I\nmatrix([[-2\\. ,  1\\. ],\n [ 1.5, -0.5]])\n>>> b = np.asmatrix('[5 6]')\n>>> b\nmatrix([[5, 6]])\n>>> b.T\nmatrix([[5],\n [6]])\n>>> A*b.T\nmatrix([[17],\n [39]]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2],[3,4]])\n>>> A\narray([[1, 2],\n [3, 4]])\n>>> linalg.inv(A)\narray([[-2\\. ,  1\\. ],\n [ 1.5, -0.5]])\n>>> b = np.array([[5,6]]) #2D array\n>>> b\narray([[5, 6]])\n>>> b.T\narray([[5],\n [6]])\n>>> A*b #not matrix multiplication!\narray([[ 5, 12],\n [15, 24]])\n>>> A.dot(b.T) #matrix multiplication\narray([[17],\n [39]])\n>>> b = np.array([5,6]) #1D array\n>>> b\narray([5, 6])\n>>> b.T  #not matrix transpose!\narray([5, 6])\n>>> A.dot(b)  #does not matter for multiplication\narray([17, 39]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,3,5],[2,5,1],[2,3,8]])\n>>> A\narray([[1, 3, 5],\n [2, 5, 1],\n [2, 3, 8]])\n>>> linalg.inv(A)\narray([[-1.48,  0.36,  0.88],\n [ 0.56,  0.08, -0.36],\n [ 0.16, -0.12,  0.04]])\n>>> A.dot(linalg.inv(A)) #double check\narray([[  1.00000000e+00,  -1.11022302e-16,  -5.55111512e-17],\n [  3.05311332e-16,   1.00000000e+00,   1.87350135e-16],\n [  2.22044605e-16,  -1.11022302e-16,   1.00000000e+00]]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1, 2], [3, 4]])\n>>> A\narray([[1, 2],\n [3, 4]])\n>>> b = np.array([[5], [6]])\n>>> b\narray([[5],\n [6]])\n>>> linalg.inv(A).dot(b)  # slow\narray([[-4\\. ],\n [ 4.5]])\n>>> A.dot(linalg.inv(A).dot(b)) - b  # check\narray([[  8.88178420e-16],\n [  2.66453526e-15]])\n>>> np.linalg.solve(A, b)  # fast\narray([[-4\\. ],\n [ 4.5]])\n>>> A.dot(np.linalg.solve(A, b)) - b  # check\narray([[ 0.],\n [ 0.]]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2],[3,4]])\n>>> A\narray([[1, 2],\n [3, 4]])\n>>> linalg.det(A)\n-2.0 \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A=np.array([[1,2],[3,4]])\n>>> A\narray([[1, 2],\n [3, 4]])\n>>> linalg.norm(A)\n5.4772255750516612\n>>> linalg.norm(A,'fro') # frobenius norm is the default\n5.4772255750516612\n>>> linalg.norm(A,1) # L1 norm (max column sum)\n6\n>>> linalg.norm(A,-1)\n4\n>>> linalg.norm(A,np.inf) # L inf norm (max row sum)\n7 \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> c1, c2 = 5.0, 2.0\n>>> i = np.r_[1:11]\n>>> xi = 0.1*i\n>>> yi = c1*np.exp(-xi) + c2*xi\n>>> zi = yi + 0.05 * np.max(yi) * rng.standard_normal(len(yi)) \n```", "```py\n>>> A = np.c_[np.exp(-xi)[:, np.newaxis], xi[:, np.newaxis]]\n>>> c, resid, rank, sigma = linalg.lstsq(A, zi) \n```", "```py\n>>> xi2 = np.r_[0.1:1.0:100j]\n>>> yi2 = c[0]*np.exp(-xi2) + c[1]*xi2 \n```", "```py\n>>> plt.plot(xi,zi,'x',xi2,yi2)\n>>> plt.axis([0,1.1,3.0,5.5])\n>>> plt.xlabel('$x_i$')\n>>> plt.title('Data fitting with linalg.lstsq')\n>>> plt.show() \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1, 2], [3, 4]])\n>>> la, v = linalg.eig(A)\n>>> l1, l2 = la\n>>> print(l1, l2)   # eigenvalues\n(-0.3722813232690143+0j) (5.372281323269014+0j)\n>>> print(v[:, 0])   # first eigenvector\n[-0.82456484  0.56576746]\n>>> print(v[:, 1])   # second eigenvector\n[-0.41597356 -0.90937671]\n>>> print(np.sum(abs(v**2), axis=0))  # eigenvectors are unitary\n[1\\. 1.]\n>>> v1 = np.array(v[:, 0]).T\n>>> print(linalg.norm(A.dot(v1) - l1*v1))  # check the computation\n3.23682852457e-16 \n```", "```py\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2,3],[4,5,6]])\n>>> A\narray([[1, 2, 3],\n [4, 5, 6]])\n>>> M,N = A.shape\n>>> U,s,Vh = linalg.svd(A)\n>>> Sig = linalg.diagsvd(s,M,N)\n>>> U, Vh = U, Vh\n>>> U\narray([[-0.3863177 , -0.92236578],\n [-0.92236578,  0.3863177 ]])\n>>> Sig\narray([[ 9.508032  ,  0\\.        ,  0\\.        ],\n [ 0\\.        ,  0.77286964,  0\\.        ]])\n>>> Vh\narray([[-0.42866713, -0.56630692, -0.7039467 ],\n [ 0.80596391,  0.11238241, -0.58119908],\n [ 0.40824829, -0.81649658,  0.40824829]])\n>>> U.dot(Sig.dot(Vh)) #check computation\narray([[ 1.,  2.,  3.],\n [ 4.,  5.,  6.]]) \n```", "```py\n>>> from scipy import linalg\n>>> A = np.asmatrix('[1 3 2; 1 4 5; 2 3 6]')\n>>> T, Z = linalg.schur(A)\n>>> T1, Z1 = linalg.schur(A, 'complex')\n>>> T2, Z2 = linalg.rsf2csf(T, Z)\n>>> T\narray([[ 9.90012467,  1.78947961, -0.65498528],\n [ 0\\.        ,  0.54993766, -1.57754789],\n [ 0\\.        ,  0.51260928,  0.54993766]])\n>>> T2\narray([[ 9.90012467+0.00000000e+00j, -0.32436598+1.55463542e+00j,\n -0.88619748+5.69027615e-01j],\n [ 0\\.        +0.00000000e+00j,  0.54993766+8.99258408e-01j,\n 1.06493862+3.05311332e-16j],\n [ 0\\.        +0.00000000e+00j,  0\\.        +0.00000000e+00j,\n 0.54993766-8.99258408e-01j]])\n>>> abs(T1 - T2) # different\narray([[  1.06604538e-14,   2.06969555e+00,   1.69375747e+00],  # may vary\n [  0.00000000e+00,   1.33688556e-15,   4.74146496e-01],\n [  0.00000000e+00,   0.00000000e+00,   1.13220977e-15]])\n>>> abs(Z1 - Z2) # different\narray([[ 0.06833781,  0.88091091,  0.79568503],    # may vary\n [ 0.11857169,  0.44491892,  0.99594171],\n [ 0.12624999,  0.60264117,  0.77257633]])\n>>> T, Z, T1, Z1, T2, Z2 = map(np.asmatrix,(T,Z,T1,Z1,T2,Z2))\n>>> abs(A - Z*T*Z.H)  # same\nmatrix([[  5.55111512e-16,   1.77635684e-15,   2.22044605e-15],\n [  0.00000000e+00,   3.99680289e-15,   8.88178420e-16],\n [  1.11022302e-15,   4.44089210e-16,   3.55271368e-15]])\n>>> abs(A - Z1*T1*Z1.H)  # same\nmatrix([[  4.26993904e-15,   6.21793362e-15,   8.00007092e-15],\n [  5.77945386e-15,   6.21798014e-15,   1.06653681e-14],\n [  7.16681444e-15,   8.90271058e-15,   1.77635764e-14]])\n>>> abs(A - Z2*T2*Z2.H)  # same\nmatrix([[  6.02594127e-16,   1.77648931e-15,   2.22506907e-15],\n [  2.46275555e-16,   3.99684548e-15,   8.91642616e-16],\n [  8.88225111e-16,   8.88312432e-16,   4.44104848e-15]]) \n```", "```py\n>>> from scipy import special, linalg\n>>> rng = np.random.default_rng()\n>>> A = rng.random((3, 3))\n>>> B = linalg.funm(A, lambda x: special.jv(0, x))\n>>> A\narray([[0.06369197, 0.90647174, 0.98024544],\n [0.68752227, 0.5604377 , 0.49142032],\n [0.86754578, 0.9746787 , 0.37932682]])\n>>> B\narray([[ 0.6929219 , -0.29728805, -0.15930896],\n [-0.16226043,  0.71967826, -0.22709386],\n [-0.19945564, -0.33379957,  0.70259022]])\n>>> linalg.eigvals(A)\narray([ 1.94835336+0.j, -0.72219681+0.j, -0.22270006+0.j])\n>>> special.jv(0, linalg.eigvals(A))\narray([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j])\n>>> linalg.eigvals(B)\narray([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j]) \n```"]