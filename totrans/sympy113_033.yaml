- en: Solve a Matrix Equation Algebraically
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数求解一个矩阵方程
- en: 原文：[https://docs.sympy.org/latest/guides/solving/solve-matrix-equation.html](https://docs.sympy.org/latest/guides/solving/solve-matrix-equation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/guides/solving/solve-matrix-equation.html](https://docs.sympy.org/latest/guides/solving/solve-matrix-equation.html)
- en: Use SymPy to solve a matrix (linear) equation. For example, solving \( \left[\begin{array}{cc}
    c & d\\1 & -e\end{array}\right] \left[\begin{array}{cc} x\\y\end{array}\right]
    = \left[\begin{array}{cc} 2\\0\end{array}\right] \) yields \( \left[\begin{array}{cc}
    x\\y\end{array}\right] = \left[\begin{array}{cc} \frac{2e}{ce+d}\\\frac{2}{ce+d}\end{array}\right]\).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SymPy 解矩阵（线性）方程。例如，解 \( \left[\begin{array}{cc} c & d\\1 & -e\end{array}\right]
    \left[\begin{array}{cc} x\\y\end{array}\right] = \left[\begin{array}{cc} 2\\0\end{array}\right]
    \) 得到 \( \left[\begin{array}{cc} x\\y\end{array}\right] = \left[\begin{array}{cc}
    \frac{2e}{ce+d}\\\frac{2}{ce+d}\end{array}\right]\)。
- en: Alternatives to Consider
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可供考虑的替代方法
- en: 'If your matrix and constant vector contain only numbers, not symbols, for example
    \(\left[\begin{array}{cc} 1 & 2\\3 & 4\end{array}\right] \left[\begin{array}{cc}
    x\\y\end{array}\right] = \left[\begin{array}{cc} 2\\0\end{array}\right]\), you
    can use one of these other free and open-source packages instead of SymPy:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的矩阵和常数向量只包含数字，而不是符号，例如 \(\left[\begin{array}{cc} 1 & 2\\3 & 4\end{array}\right]
    \left[\begin{array}{cc} x\\y\end{array}\right] = \left[\begin{array}{cc} 2\\0\end{array}\right]\)，你可以使用
    SymPy 的其他免费开源软件包之一，而不是 SymPy：
- en: NumPy’s [`numpy.linalg.solve()`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve
    "(in NumPy v1.26)")
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 的 [`numpy.linalg.solve()`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve
    "(在 NumPy v1.26 中)")
- en: SciPy’s [`scipy.linalg.solve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(in SciPy v1.13.1)")
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy 的 [`scipy.linalg.solve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(在 SciPy v1.13.1 中)")
- en: mpmath’s [lu_solve()](https://mpmath.org/doc/current/matrices.html#linear-equations)
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mpmath 的 [lu_solve()](https://mpmath.org/doc/current/matrices.html#linear-equations)
- en: Solving a matrix equation is equivalent to solving a system of linear equations,
    so if you prefer you can [Solve a System of Equations Algebraically](solve-system-of-equations-algebraically.html)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解矩阵方程等同于解线性方程组，所以如果你愿意，你可以[代数求解一个线性方程组](solve-system-of-equations-algebraically.html)
- en: If you formulated your problem as a system of linear equations, and want to
    convert it to matrix form, you can use [`linear_eq_to_matrix()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.linear_eq_to_matrix
    "sympy.solvers.solveset.linear_eq_to_matrix") and then follow the procedures in
    this guide.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经将问题表述为一个线性方程组，并希望将其转换为矩阵形式，可以使用[`linear_eq_to_matrix()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.linear_eq_to_matrix
    "sympy.solvers.solveset.linear_eq_to_matrix")函数，然后按照本指南的步骤进行操作。
- en: Solve a Matrix Equation
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求解矩阵方程
- en: Here is an example of solving a matrix equation with SymPy’s [`sympy.matrices.matrixbase.MatrixBase.solve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.solve
    "sympy.matrices.matrixbase.MatrixBase.solve"). We use the standard matrix equation
    formulation \(Ax=b\) where
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用 SymPy 的 [`sympy.matrices.matrixbase.MatrixBase.solve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.solve
    "sympy.matrices.matrixbase.MatrixBase.solve") 求解矩阵方程的示例。我们使用标准的矩阵方程形式 \(Ax=b\)，其中
- en: \(A\) is the matrix representing the coefficients in the linear equations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(A\) 是表示线性方程中系数的矩阵
- en: \(x\) is the column vector of unknowns to be solved for
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(x\) 是要求解的未知数的列向量
- en: \(b\) is the column vector of constants, where each row is the value of an equation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(b\) 是常数的列向量，其中每行是一个方程的值
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Guidance
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指南
- en: Matrix Usually Must Be Square
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 矩阵通常必须是方阵
- en: 'The matrix \(A\) usually must be square to represent a system of linear equations
    with the same number of unknowns as equations. If not, SymPy will give the error
    ``ShapeError: `self` and `rhs` must have the same number of rows.``'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '矩阵 \(A\) 通常必须是方阵，以表示具有与方程数量相同的未知数的线性方程组。如果不是，SymPy 将会报错``ShapeError: `self`
    and `rhs` must have the same number of rows.``'
- en: The exception to the requirement that a matrix be square comes from SymPy’s
    use of the [`Moore-Penrose pseudoinverse`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.pinv
    "sympy.matrices.matrixbase.MatrixBase.pinv").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例外的是，SymPy 使用[`Moore-Penrose 伪逆`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.pinv
    "sympy.matrices.matrixbase.MatrixBase.pinv") 的要求，这不需要矩阵是方阵。
- en: Methods for Solving Matrix Equations
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解矩阵方程的方法
- en: SymPy’s matrix solving method, [`sympy.matrices.matrixbase.MatrixBase.solve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.solve
    "sympy.matrices.matrixbase.MatrixBase.solve"), can use several different methods,
    which are listed at that API reference link. Depending on the nature of the matrix,
    a given method may be more efficient. By default, [Gauss-Jordan elimination](https://en.wikipedia.org/wiki/Gaussian_elimination)
    will be used.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy的矩阵求解方法，[`sympy.matrices.matrixbase.MatrixBase.solve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.solve
    "sympy.matrices.matrixbase.MatrixBase.solve")，可以使用几种不同的方法，这些方法在API参考链接中列出。根据矩阵的性质，某种方法可能更有效。默认情况下，将使用[高斯-约当消元法](https://en.wikipedia.org/wiki/Gaussian_elimination)。
- en: Specifying a method in solve is equivalent to using a specialized solving function.
    For example, using `solve` with `method='LU'` calls [`LUsolve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在solve中指定一个方法相当于使用专门的求解函数。例如，使用`solve`和`method='LU'`调用[`LUsolve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve")。
- en: Solving Several Matrix Equations With the Same Matrix
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决多个相同矩阵方程
- en: If you need to repeatedly solve matrix equations with the same matrix \(A\)
    but different constant vectors \(b\), it is more efficient to use one of the following
    methods.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要重复解决具有相同矩阵\(A\)但不同常向量\(b\)的矩阵方程，则更有效的方法是使用以下方法之一。
- en: 'You can use [LU decomposition](https://en.wikipedia.org/wiki/LU_decomposition)
    via [`LUsolve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve"):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[`LUsolve()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve")使用[LU分解](https://en.wikipedia.org/wiki/LU_decomposition)：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another approach is to compute the inverse matrix, but this is almost always
    slower, and significantly slower for larger matrices. If efficient computation
    is not a priority, you can use [`inv()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.inv
    "sympy.matrices.matrixbase.MatrixBase.inv"):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '另一种方法是计算逆矩阵，但这几乎总是比较慢，对于更大的矩阵来说，速度慢得多。如果高效计算不是优先考虑的话，可以使用[`inv()`](../../modules/matrices/matrices.html#sympy.matrices.matrixbase.MatrixBase.inv
    "sympy.matrices.matrixbase.MatrixBase.inv"):'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Determining the inverse of a large symbolic matrix may not be computationally
    tractable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 确定大型符号矩阵的逆可能不可计算。
- en: Work With Symbolic Matrices
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用符号矩阵
- en: 'The computational complexity of manipulating symbolic matrices can increase
    rapidly with matrix size. For example, the number of terms in the determinant
    of a symbolic matrix increases with the factorial of the matrix dimension. As
    a result, the maximum dimensionality of matrices that can be solved is more limited
    than for numerical matrices. For example, the determinant of this 4x4 symbolic
    matrix has 24 terms with four elements in each term:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符号矩阵的计算复杂性随着矩阵大小的增加而迅速增加。例如，符号矩阵行列式中的项数随矩阵维数的阶乘增加。因此，可以解决的矩阵的最大维度比数值矩阵更有限。例如，这个4x4符号矩阵的行列式有24个项，每个项有四个元素：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: and solving a matrix equation of it takes about a minute, whereas the analogous
    3x3 matrix takes less than one second. The more unrelated, symbolic entries in
    a matrix, the more likely it is to be slow to manipulate. This example, finding
    a general solution to a matrix where all elements are independent symbols, is
    the extreme case and thus the slowest for a matrix of its size.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 并解决它大约需要一分钟，而类似的3x3矩阵则少于一秒。矩阵中不相关的符号条目越多，操作速度就越慢。这个例子是在所有元素都是独立符号的矩阵中找到一个通用解的极端情况，因此对于其大小而言是最慢的。
- en: Speed up Solving Matrix Equations
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速解决矩阵方程
- en: 'Here are some suggestions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些建议：
- en: If matrix elements are zero, ensure that they are recognized as zero. You can
    do this by either making them zero or by applying [assumptions](../../modules/assumptions/index.html#assumptions-module).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果矩阵元素为零，请确保它们被识别为零。您可以通过将它们设为零或应用[假设](../../modules/assumptions/index.html#assumptions-module)来实现这一点。
- en: Selecting a solve method suited to the properties of the matrix, for example
    hermitian, symmetric, or triangular. Refer to [Methods for Solving Matrix Equations](#methods-for-solving-matrix-equations).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择适合于矩阵性质的求解方法，例如埃尔米特、对称或三角形式。参见[解矩阵方程的方法](#methods-for-solving-matrix-equations)。
- en: Use the [`DomainMatrix`](../../modules/polys/domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") class, which can be faster to
    operate on because it limits the domain of matrix elements.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`DomainMatrix`](../../modules/polys/domainmatrix.html#sympy.polys.matrices.domainmatrix.DomainMatrix
    "sympy.polys.matrices.domainmatrix.DomainMatrix") 类，它可能更快，因为它限制了矩阵元素的定义域。
- en: Use the Solution Result
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用解的结果
- en: Use the Solution as a Vector
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将解作为向量使用
- en: 'You can use the solution result as a vector. For example, to prove that the
    solution \(x\) is correct, you can multiply it the matrix \(A\) and verify that
    it produces the constants vector \(b\):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将解结果用作向量。例如，为了证明解 \(x\) 是正确的，您可以将其与矩阵 \(A\) 相乘，并验证其是否生成常数向量 \(b\)：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we had to use [`simplify()`](../../modules/simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify") to make SymPy simplify the expression in a
    matrix element to make it immediately obvious that the solution is correct.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不得不使用 [`simplify()`](../../modules/simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify") 来使 SymPy 简化矩阵元素中的表达式，以便立即明确解是正确的。
- en: Extract Elements From the Solution
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从解中提取元素
- en: Because you can iterate through the elements in a column vector, you can extract
    its elements using standard Python techniques. For example, you can create a list
    of the elements using list comprehension
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您可以通过遍历列向量中的元素，可以使用标准的 Python 技术提取其元素。例如，您可以使用列表推导创建元素列表
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or you can extract individual elements by subscripting
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以通过下标提取单个元素
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Equations With No Solution
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方程无解
- en: 'If the determinant of a matrix is zero, matrix equations with it have no solution:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果矩阵的行列式为零，则与之相关的矩阵方程无解：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Report a Bug
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告错误
- en: If you find a bug with matrix-solving functions, please post the problem on
    the [SymPy mailing list](https://groups.google.com/g/sympy). Until the issue is
    resolved, you can use a different method listed in [Alternatives to Consider](#alternatives-to-consider).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在矩阵求解函数中发现错误，请在[SymPy邮件列表](https://groups.google.com/g/sympy)上发布问题。在问题解决之前，您可以考虑使用[考虑的替代方法](#alternatives-to-consider)中列出的其他方法。
