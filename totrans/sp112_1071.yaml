- en: scipy.special.binom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.binom.html#scipy.special.binom](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.binom.html#scipy.special.binom)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Binomial coefficient considered as a function of two real variables.
  prefs: []
  type: TYPE_NORMAL
- en: For real arguments, the binomial coefficient is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\binom{x}{y} = \frac{\Gamma(x + 1)}{\Gamma(y + 1)\Gamma(x - y + 1)} = \frac{1}{(x
    + 1)\mathrm{B}(x - y + 1, y + 1)}\]
  prefs: []
  type: TYPE_NORMAL
- en: Where \(\Gamma\) is the Gamma function ([`gamma`](scipy.special.gamma.html#scipy.special.gamma
    "scipy.special.gamma")) and \(\mathrm{B}\) is the Beta function ([`beta`](scipy.special.beta.html#scipy.special.beta
    "scipy.special.beta")) [[1]](#r2d6855f23738-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x, y: array_like**'
  prefs: []
  type: TYPE_NORMAL
- en: Real arguments to \(\binom{x}{y}\).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function values
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: scalar or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: Value of binomial coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`comb`](scipy.special.comb.html#scipy.special.comb "scipy.special.comb")'
  prefs: []
  type: TYPE_NORMAL
- en: The number of combinations of N things taken k at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The Gamma function has poles at non-positive integers and tends to either positive
    or negative infinity depending on the direction on the real line from which a
    pole is approached. When considered as a function of two real variables, \(\binom{x}{y}\)
    is thus undefined when *x* is a negative integer. [`binom`](#scipy.special.binom
    "scipy.special.binom") returns `nan` when `x` is a negative integer. This is the
    case even when `x` is a negative integer and `y` an integer, contrary to the usual
    convention for defining \(\binom{n}{k}\) when it is considered as a function of
    two integer variables.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Binomial_coefficient](https://en.wikipedia.org/wiki/Binomial_coefficient)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following examples illustrate the ways in which [`binom`](#scipy.special.binom
    "scipy.special.binom") differs from the function [`comb`](scipy.special.comb.html#scipy.special.comb
    "scipy.special.comb").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When `exact=False` and `x` and `y` are both positive, [`comb`](scipy.special.comb.html#scipy.special.comb
    "scipy.special.comb") calls [`binom`](#scipy.special.binom "scipy.special.binom")
    internally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For larger values, [`comb`](scipy.special.comb.html#scipy.special.comb "scipy.special.comb")
    with `exact=True` no longer agrees with [`binom`](#scipy.special.binom "scipy.special.binom").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[`binom`](#scipy.special.binom "scipy.special.binom") returns `nan` when `x`
    is a negative integer, but is otherwise defined for negative arguments. [`comb`](scipy.special.comb.html#scipy.special.comb
    "scipy.special.comb") returns 0 whenever one of `x` or `y` is negative or `x`
    is less than `y`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
