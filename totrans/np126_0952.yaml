- en: Legendre Series (numpy.polynomial.legendre)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.legendre.html](https://numpy.org/doc/1.26/reference/routines.polynomials.legendre.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module provides a number of objects (mostly functions) useful for dealing
    with Legendre series, including a [`Legendre`](generated/numpy.polynomial.legendre.Legendre.html#numpy.polynomial.legendre.Legendre
    "numpy.polynomial.legendre.Legendre") class that encapsulates the usual arithmetic
    operations. (General information on how this module represents and works with
    such polynomials is in the docstring for its “parent” sub-package, [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")).
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Legendre`](generated/numpy.polynomial.legendre.Legendre.html#numpy.polynomial.legendre.Legendre
    "numpy.polynomial.legendre.Legendre")(coef[, domain, window, symbol]) | A Legendre
    series class. |'
  prefs: []
  type: TYPE_TB
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legdomain`](generated/numpy.polynomial.legendre.legdomain.html#numpy.polynomial.legendre.legdomain
    "numpy.polynomial.legendre.legdomain") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legzero`](generated/numpy.polynomial.legendre.legzero.html#numpy.polynomial.legendre.legzero
    "numpy.polynomial.legendre.legzero") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legone`](generated/numpy.polynomial.legendre.legone.html#numpy.polynomial.legendre.legone
    "numpy.polynomial.legendre.legone") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legx`](generated/numpy.polynomial.legendre.legx.html#numpy.polynomial.legendre.legx
    "numpy.polynomial.legendre.legx") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legadd`](generated/numpy.polynomial.legendre.legadd.html#numpy.polynomial.legendre.legadd
    "numpy.polynomial.legendre.legadd")(c1, c2) | Add one Legendre series to another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legsub`](generated/numpy.polynomial.legendre.legsub.html#numpy.polynomial.legendre.legsub
    "numpy.polynomial.legendre.legsub")(c1, c2) | Subtract one Legendre series from
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legmulx`](generated/numpy.polynomial.legendre.legmulx.html#numpy.polynomial.legendre.legmulx
    "numpy.polynomial.legendre.legmulx")(c) | Multiply a Legendre series by x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legmul`](generated/numpy.polynomial.legendre.legmul.html#numpy.polynomial.legendre.legmul
    "numpy.polynomial.legendre.legmul")(c1, c2) | Multiply one Legendre series by
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legdiv`](generated/numpy.polynomial.legendre.legdiv.html#numpy.polynomial.legendre.legdiv
    "numpy.polynomial.legendre.legdiv")(c1, c2) | Divide one Legendre series by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legpow`](generated/numpy.polynomial.legendre.legpow.html#numpy.polynomial.legendre.legpow
    "numpy.polynomial.legendre.legpow")(c, pow[, maxpower]) | Raise a Legendre series
    to a power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval`](generated/numpy.polynomial.legendre.legval.html#numpy.polynomial.legendre.legval
    "numpy.polynomial.legendre.legval")(x, c[, tensor]) | Evaluate a Legendre series
    at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval2d`](generated/numpy.polynomial.legendre.legval2d.html#numpy.polynomial.legendre.legval2d
    "numpy.polynomial.legendre.legval2d")(x, y, c) | Evaluate a 2-D Legendre series
    at points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval3d`](generated/numpy.polynomial.legendre.legval3d.html#numpy.polynomial.legendre.legval3d
    "numpy.polynomial.legendre.legval3d")(x, y, z, c) | Evaluate a 3-D Legendre series
    at points (x, y, z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggrid2d`](generated/numpy.polynomial.legendre.leggrid2d.html#numpy.polynomial.legendre.leggrid2d
    "numpy.polynomial.legendre.leggrid2d")(x, y, c) | Evaluate a 2-D Legendre series
    on the Cartesian product of x and y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggrid3d`](generated/numpy.polynomial.legendre.leggrid3d.html#numpy.polynomial.legendre.leggrid3d
    "numpy.polynomial.legendre.leggrid3d")(x, y, z, c) | Evaluate a 3-D Legendre series
    on the Cartesian product of x, y, and z. |'
  prefs: []
  type: TYPE_TB
- en: Calculus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legder`](generated/numpy.polynomial.legendre.legder.html#numpy.polynomial.legendre.legder
    "numpy.polynomial.legendre.legder")(c[, m, scl, axis]) | Differentiate a Legendre
    series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legint`](generated/numpy.polynomial.legendre.legint.html#numpy.polynomial.legendre.legint
    "numpy.polynomial.legendre.legint")(c[, m, k, lbnd, scl, axis]) | Integrate a
    Legendre series. |'
  prefs: []
  type: TYPE_TB
- en: Misc Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legfromroots`](generated/numpy.polynomial.legendre.legfromroots.html#numpy.polynomial.legendre.legfromroots
    "numpy.polynomial.legendre.legfromroots")(roots) | Generate a Legendre series
    with given roots. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legroots`](generated/numpy.polynomial.legendre.legroots.html#numpy.polynomial.legendre.legroots
    "numpy.polynomial.legendre.legroots")(c) | Compute the roots of a Legendre series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander`](generated/numpy.polynomial.legendre.legvander.html#numpy.polynomial.legendre.legvander
    "numpy.polynomial.legendre.legvander")(x, deg) | Pseudo-Vandermonde matrix of
    given degree. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander2d`](generated/numpy.polynomial.legendre.legvander2d.html#numpy.polynomial.legendre.legvander2d
    "numpy.polynomial.legendre.legvander2d")(x, y, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander3d`](generated/numpy.polynomial.legendre.legvander3d.html#numpy.polynomial.legendre.legvander3d
    "numpy.polynomial.legendre.legvander3d")(x, y, z, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggauss`](generated/numpy.polynomial.legendre.leggauss.html#numpy.polynomial.legendre.leggauss
    "numpy.polynomial.legendre.leggauss")(deg) | Gauss-Legendre quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legweight`](generated/numpy.polynomial.legendre.legweight.html#numpy.polynomial.legendre.legweight
    "numpy.polynomial.legendre.legweight")(x) | Weight function of the Legendre polynomials.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legcompanion`](generated/numpy.polynomial.legendre.legcompanion.html#numpy.polynomial.legendre.legcompanion
    "numpy.polynomial.legendre.legcompanion")(c) | Return the scaled companion matrix
    of c. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legfit`](generated/numpy.polynomial.legendre.legfit.html#numpy.polynomial.legendre.legfit
    "numpy.polynomial.legendre.legfit")(x, y, deg[, rcond, full, w]) | Least squares
    fit of Legendre series to data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legtrim`](generated/numpy.polynomial.legendre.legtrim.html#numpy.polynomial.legendre.legtrim
    "numpy.polynomial.legendre.legtrim")(c[, tol]) | Remove "small" "trailing" coefficients
    from a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legline`](generated/numpy.polynomial.legendre.legline.html#numpy.polynomial.legendre.legline
    "numpy.polynomial.legendre.legline")(off, scl) | Legendre series whose graph is
    a straight line. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leg2poly`](generated/numpy.polynomial.legendre.leg2poly.html#numpy.polynomial.legendre.leg2poly
    "numpy.polynomial.legendre.leg2poly")(c) | Convert a Legendre series to a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`poly2leg`](generated/numpy.polynomial.legendre.poly2leg.html#numpy.polynomial.legendre.poly2leg
    "numpy.polynomial.legendre.poly2leg")(pol) | Convert a polynomial to a Legendre
    series. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy.polynomial
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Legendre`](generated/numpy.polynomial.legendre.Legendre.html#numpy.polynomial.legendre.Legendre
    "numpy.polynomial.legendre.Legendre")(coef[, domain, window, symbol]) | A Legendre
    series class. |'
  prefs: []
  type: TYPE_TB
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legdomain`](generated/numpy.polynomial.legendre.legdomain.html#numpy.polynomial.legendre.legdomain
    "numpy.polynomial.legendre.legdomain") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legzero`](generated/numpy.polynomial.legendre.legzero.html#numpy.polynomial.legendre.legzero
    "numpy.polynomial.legendre.legzero") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legone`](generated/numpy.polynomial.legendre.legone.html#numpy.polynomial.legendre.legone
    "numpy.polynomial.legendre.legone") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legx`](generated/numpy.polynomial.legendre.legx.html#numpy.polynomial.legendre.legx
    "numpy.polynomial.legendre.legx") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legadd`](generated/numpy.polynomial.legendre.legadd.html#numpy.polynomial.legendre.legadd
    "numpy.polynomial.legendre.legadd")(c1, c2) | Add one Legendre series to another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legsub`](generated/numpy.polynomial.legendre.legsub.html#numpy.polynomial.legendre.legsub
    "numpy.polynomial.legendre.legsub")(c1, c2) | Subtract one Legendre series from
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legmulx`](generated/numpy.polynomial.legendre.legmulx.html#numpy.polynomial.legendre.legmulx
    "numpy.polynomial.legendre.legmulx")(c) | Multiply a Legendre series by x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legmul`](generated/numpy.polynomial.legendre.legmul.html#numpy.polynomial.legendre.legmul
    "numpy.polynomial.legendre.legmul")(c1, c2) | Multiply one Legendre series by
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legdiv`](generated/numpy.polynomial.legendre.legdiv.html#numpy.polynomial.legendre.legdiv
    "numpy.polynomial.legendre.legdiv")(c1, c2) | Divide one Legendre series by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legpow`](generated/numpy.polynomial.legendre.legpow.html#numpy.polynomial.legendre.legpow
    "numpy.polynomial.legendre.legpow")(c, pow[, maxpower]) | Raise a Legendre series
    to a power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval`](generated/numpy.polynomial.legendre.legval.html#numpy.polynomial.legendre.legval
    "numpy.polynomial.legendre.legval")(x, c[, tensor]) | Evaluate a Legendre series
    at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval2d`](generated/numpy.polynomial.legendre.legval2d.html#numpy.polynomial.legendre.legval2d
    "numpy.polynomial.legendre.legval2d")(x, y, c) | Evaluate a 2-D Legendre series
    at points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`legval3d`](generated/numpy.polynomial.legendre.legval3d.html#numpy.polynomial.legendre.legval3d
    "numpy.polynomial.legendre.legval3d")(x, y, z, c) | Evaluate a 3-D Legendre series
    at points (x, y, z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggrid2d`](generated/numpy.polynomial.legendre.leggrid2d.html#numpy.polynomial.legendre.leggrid2d
    "numpy.polynomial.legendre.leggrid2d")(x, y, c) | Evaluate a 2-D Legendre series
    on the Cartesian product of x and y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggrid3d`](generated/numpy.polynomial.legendre.leggrid3d.html#numpy.polynomial.legendre.leggrid3d
    "numpy.polynomial.legendre.leggrid3d")(x, y, z, c) | Evaluate a 3-D Legendre series
    on the Cartesian product of x, y, and z. |'
  prefs: []
  type: TYPE_TB
- en: Calculus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legder`](generated/numpy.polynomial.legendre.legder.html#numpy.polynomial.legendre.legder
    "numpy.polynomial.legendre.legder")(c[, m, scl, axis]) | Differentiate a Legendre
    series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legint`](generated/numpy.polynomial.legendre.legint.html#numpy.polynomial.legendre.legint
    "numpy.polynomial.legendre.legint")(c[, m, k, lbnd, scl, axis]) | Integrate a
    Legendre series. |'
  prefs: []
  type: TYPE_TB
- en: Misc Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`legfromroots`](generated/numpy.polynomial.legendre.legfromroots.html#numpy.polynomial.legendre.legfromroots
    "numpy.polynomial.legendre.legfromroots")(roots) | Generate a Legendre series
    with given roots. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legroots`](generated/numpy.polynomial.legendre.legroots.html#numpy.polynomial.legendre.legroots
    "numpy.polynomial.legendre.legroots")(c) | Compute the roots of a Legendre series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander`](generated/numpy.polynomial.legendre.legvander.html#numpy.polynomial.legendre.legvander
    "numpy.polynomial.legendre.legvander")(x, deg) | Pseudo-Vandermonde matrix of
    given degree. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander2d`](generated/numpy.polynomial.legendre.legvander2d.html#numpy.polynomial.legendre.legvander2d
    "numpy.polynomial.legendre.legvander2d")(x, y, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legvander3d`](generated/numpy.polynomial.legendre.legvander3d.html#numpy.polynomial.legendre.legvander3d
    "numpy.polynomial.legendre.legvander3d")(x, y, z, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leggauss`](generated/numpy.polynomial.legendre.leggauss.html#numpy.polynomial.legendre.leggauss
    "numpy.polynomial.legendre.leggauss")(deg) | Gauss-Legendre quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legweight`](generated/numpy.polynomial.legendre.legweight.html#numpy.polynomial.legendre.legweight
    "numpy.polynomial.legendre.legweight")(x) | Weight function of the Legendre polynomials.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`legcompanion`](generated/numpy.polynomial.legendre.legcompanion.html#numpy.polynomial.legendre.legcompanion
    "numpy.polynomial.legendre.legcompanion")(c) | Return the scaled companion matrix
    of c. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legfit`](generated/numpy.polynomial.legendre.legfit.html#numpy.polynomial.legendre.legfit
    "numpy.polynomial.legendre.legfit")(x, y, deg[, rcond, full, w]) | Least squares
    fit of Legendre series to data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legtrim`](generated/numpy.polynomial.legendre.legtrim.html#numpy.polynomial.legendre.legtrim
    "numpy.polynomial.legendre.legtrim")(c[, tol]) | Remove "small" "trailing" coefficients
    from a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`legline`](generated/numpy.polynomial.legendre.legline.html#numpy.polynomial.legendre.legline
    "numpy.polynomial.legendre.legline")(off, scl) | Legendre series whose graph is
    a straight line. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leg2poly`](generated/numpy.polynomial.legendre.leg2poly.html#numpy.polynomial.legendre.leg2poly
    "numpy.polynomial.legendre.leg2poly")(c) | Convert a Legendre series to a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`poly2leg`](generated/numpy.polynomial.legendre.poly2leg.html#numpy.polynomial.legendre.poly2leg
    "numpy.polynomial.legendre.poly2leg")(pol) | Convert a polynomial to a Legendre
    series. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy.polynomial
  prefs: []
  type: TYPE_NORMAL
