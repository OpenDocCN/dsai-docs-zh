- en: scipy.special.stdtrit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.stdtrit.html#scipy.special.stdtrit](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.stdtrit.html#scipy.special.stdtrit)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The *p*-th quantile of the student t distribution.
  prefs: []
  type: TYPE_NORMAL
- en: This function is the inverse of the student t distribution cumulative distribution
    function (CDF), returning *t* such that *stdtr(df, t) = p*.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the argument *t* such that stdtr(df, t) is equal to *p*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**df**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Degrees of freedom
  prefs: []
  type: TYPE_NORMAL
- en: '**p**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Probability
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function results
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Value of *t* such that `stdtr(df, t) == p`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`stdtr`](scipy.special.stdtr.html#scipy.special.stdtr "scipy.special.stdtr")'
  prefs: []
  type: TYPE_NORMAL
- en: Student t CDF
  prefs: []
  type: TYPE_NORMAL
- en: '[`stdtridf`](scipy.special.stdtridf.html#scipy.special.stdtridf "scipy.special.stdtridf")'
  prefs: []
  type: TYPE_NORMAL
- en: inverse of stdtr with respect to *df*
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.t`](scipy.stats.t.html#scipy.stats.t "scipy.stats.t")'
  prefs: []
  type: TYPE_NORMAL
- en: Student t distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The student t distribution is also available as [`scipy.stats.t`](scipy.stats.t.html#scipy.stats.t
    "scipy.stats.t"). Calling [`stdtrit`](#scipy.special.stdtrit "scipy.special.stdtrit")
    directly can improve performance compared to the `ppf` method of [`scipy.stats.t`](scipy.stats.t.html#scipy.stats.t
    "scipy.stats.t") (see last example below).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[`stdtrit`](#scipy.special.stdtrit "scipy.special.stdtrit") represents the
    inverse of the student t distribution CDF which is available as [`stdtr`](scipy.special.stdtr.html#scipy.special.stdtr
    "scipy.special.stdtr"). Here, we calculate the CDF for `df` at `x=1`. [`stdtrit`](#scipy.special.stdtrit
    "scipy.special.stdtrit") then returns `1` up to floating point errors given the
    same value for *df* and the computed CDF value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Plot the function for three different degrees of freedom.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-stdtrit-1_00_00.png](../Images/fa2a9280fedbaa12e220b136dfa77d24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The function can be computed for several degrees of freedom at the same time
    by providing a NumPy array or list for *df*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to calculate the function at several points for several different
    degrees of freedom simultaneously by providing arrays for *df* and *p* with shapes
    compatible for broadcasting. Compute [`stdtrit`](#scipy.special.stdtrit "scipy.special.stdtrit")
    at 4 points for 3 degrees of freedom resulting in an array of shape 3x4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The t distribution is also available as [`scipy.stats.t`](scipy.stats.t.html#scipy.stats.t
    "scipy.stats.t"). Calling [`stdtrit`](#scipy.special.stdtrit "scipy.special.stdtrit")
    directly can be much faster than calling the `ppf` method of [`scipy.stats.t`](scipy.stats.t.html#scipy.stats.t
    "scipy.stats.t"). To get the same results, one must use the following parametrization:
    `scipy.stats.t(df).ppf(x) = stdtrit(df, x)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
