["```py\nimport warnings\nwarnings.filterwarnings('ignore') \n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import interp2d, RectBivariateSpline\n\nx = np.arange(-5.01, 5.01, 0.25)\ny = np.arange(-5.01, 7.51, 0.25)\nxx, yy = np.meshgrid(x, y)\nz = np.sin(xx**2 + 2.*yy**2)\nf = interp2d(x, y, z, kind='cubic') \n```", "```py\nz.size == len(x) * len(y) \n```", "```py\nTrue \n```", "```py\nx.size, y.size \n```", "```py\n(41, 51) \n```", "```py\ndef plot(f, xnew, ynew):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n    znew = f(xnew, ynew)\n\n    ax1.plot(x, z[0, :], 'ro-', xnew, znew[0, :], 'b-')\n\n    im = ax2.imshow(znew)\n    plt.colorbar(im, ax=ax2)\n\n    plt.show()\n    return znew \n```", "```py\nxnew = np.arange(-5.01, 5.01, 1e-2)\nynew = np.arange(-5.01, 7.51, 1e-2)\nznew_i = plot(f, xnew, ynew) \n```", "```py\nr = RectBivariateSpline(x, y, z.T)\n\nrt = lambda xnew, ynew: r(xnew, ynew).T\nznew_r = plot(rt, xnew, ynew) \n```", "```py\nfrom numpy.testing import assert_allclose\nassert_allclose(znew_i, znew_r, atol=1e-14) \n```", "```py\nxxr = xx.ravel()\nyyr = yy.ravel()\nzzr = z.ravel()\n\nf = interp2d(xxr, yyr, zzr, kind='cubic') \n```", "```py\nlen(xxr) == len(yyr) == len(zzr) \n```", "```py\nTrue \n```", "```py\nxnew = np.arange(-5.01, 5.01, 1e-2)\nynew = np.arange(-5.01, 7.51, 1e-2)\nznew_i = plot(f, xnew, ynew) \n```", "```py\nfrom scipy.interpolate import bisplrep, bisplev\ntck = bisplrep(xxr, yyr, zzr, kx=3, ky=3, s=0)\n# convenience: make up a callable from bisplev\nff = lambda xnew, ynew: bisplev(xnew, ynew, tck).T   # Note the transpose, to mimic what interp2d does\n\nznew_b = plot(ff, xnew, ynew) \n```", "```py\nassert_allclose(znew_i, znew_b, atol=1e-15) \n```", "```py\nfrom scipy.interpolate import RegularGridInterpolator as RGI\n\nr = RGI((x, y), z.T, method='linear', bounds_error=False) \n```", "```py\nxxnew, yynew = np.meshgrid(xnew, ynew, indexing='ij', sparse=True) \n```", "```py\nznew_reggrid = r((xxnew, yynew)) \n```", "```py\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\n# Again, note the transpose to undo the `interp2d` convention\nznew_reggrid_t = znew_reggrid.T\n\nax1.plot(x, z[0, :], 'ro-', xnew, znew_reggrid_t[0, :], 'b-')\n\nim = ax2.imshow(znew_reggrid_t)\nplt.colorbar(im, ax=ax2) \n```", "```py\n<matplotlib.colorbar.Colorbar at 0x7fa55ccd5f10> \n```", "```py\n# TestSmoothBivariateSpline::test_integral\nfrom scipy.interpolate import SmoothBivariateSpline, LinearNDInterpolator\n\nx = np.array([1,1,1,2,2,2,4,4,4])\ny = np.array([1,2,3,1,2,3,1,2,3])\nz = np.array([0,7,8,3,4,7,1,3,4]) \n```", "```py\nxy = np.c_[x, y]   # or just list(zip(x, y))\nlut2 = LinearNDInterpolator(xy, z)\n\nX = np.linspace(min(x), max(x))\nY = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(X, Y) \n```", "```py\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nax.plot_wireframe(X, Y, lut2(X, Y))\nax.scatter(x, y, z,  'o', color='k', s=48) \n```", "```py\n<mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fa55cbd8250> \n```", "```py\ntck = bisplrep(x, y, z, kx=1, ky=1, s=0)\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nxx = np.linspace(min(x), max(x))\nyy = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(xx, yy)\nZ = bisplev(xx, yy, tck)\nZ = Z.reshape(*X.shape).T\n\nax.plot_wireframe(X, Y, Z, rstride=2, cstride=2)\nax.scatter(x, y, z,  'o', color='k', s=48) \n```", "```py\n<mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fa55cc26310> \n```", "```py\nlut = SmoothBivariateSpline(x, y, z, kx=1, ky=1, s=0)\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nxx = np.linspace(min(x), max(x))\nyy = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(xx, yy)\n\nax.plot_wireframe(X, Y, lut(xx, yy).T, rstride=4, cstride=4)\nax.scatter(x, y, z,  'o', color='k', s=48) \n```", "```py\n<mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fa55cc6ebe0> \n```"]