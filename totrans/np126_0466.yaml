- en: numpy.finfo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.finfo.html](https://numpy.org/doc/1.26/reference/generated/numpy.finfo.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Machine limits for floating point types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**float, dtype, or instance'
  prefs: []
  type: TYPE_NORMAL
- en: Kind of floating point or complex floating point data-type about which to get
    information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iinfo`](numpy.iinfo.html#numpy.iinfo "numpy.iinfo")'
  prefs: []
  type: TYPE_NORMAL
- en: The equivalent for integer data types.
  prefs: []
  type: TYPE_NORMAL
- en: '[`spacing`](numpy.spacing.html#numpy.spacing "numpy.spacing")'
  prefs: []
  type: TYPE_NORMAL
- en: The distance between a value and the nearest adjacent number
  prefs: []
  type: TYPE_NORMAL
- en: '[`nextafter`](numpy.nextafter.html#numpy.nextafter "numpy.nextafter")'
  prefs: []
  type: TYPE_NORMAL
- en: The next floating point value after x1 towards x2
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'For developers of NumPy: do not instantiate this at the module level. The initial
    calculation of these parameters is expensive and negatively impacts import times.
    These objects are cached, so calling `finfo()` repeatedly inside your functions
    is not a problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that `smallest_normal` is not actually the smallest positive representable
    value in a NumPy floating point type. As in the IEEE-754 standard [[1]](#r2ee89c7f792a-1),
    NumPy floating point types make use of subnormal numbers to fill the gap between
    0 and `smallest_normal`. However, subnormal numbers may have significantly reduced
    precision [[2]](#r2ee89c7f792a-2).
  prefs: []
  type: TYPE_NORMAL
- en: This function can also be used for complex data types as well. If used, the
    output will be the same as the corresponding real float type (e.g. numpy.finfo(numpy.csingle)
    is the same as numpy.finfo(numpy.single)). However, the output is true for the
    real and imaginary components.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: IEEE Standard for Floating-Point Arithmetic, IEEE Std 754-2008, pp.1-70, 2008,
    [http://www.doi.org/10.1109/IEEESTD.2008.4610935](https://www.doi.org/10.1109/IEEESTD.2008.4610935)
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Denormal Numbers”, [https://en.wikipedia.org/wiki/Denormal_number](https://en.wikipedia.org/wiki/Denormal_number)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bits**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of bits occupied by the type.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the dtype for which [`finfo`](#numpy.finfo "numpy.finfo") returns information.
    For complex input, the returned dtype is the associated `float*` dtype for its
    real and complex components.
  prefs: []
  type: TYPE_NORMAL
- en: '**eps**float'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between 1.0 and the next smallest representable float larger
    than 1.0\. For example, for 64-bit binary floats in the IEEE-754 standard, `eps
    = 2**-52`, approximately 2.22e-16.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsneg**float'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between 1.0 and the next smallest representable float less than
    1.0\. For example, for 64-bit binary floats in the IEEE-754 standard, `epsneg
    = 2**-53`, approximately 1.11e-16.
  prefs: []
  type: TYPE_NORMAL
- en: '**iexp**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of bits in the exponent portion of the floating point representation.
  prefs: []
  type: TYPE_NORMAL
- en: '**machep**int'
  prefs: []
  type: TYPE_NORMAL
- en: The exponent that yields *eps*.
  prefs: []
  type: TYPE_NORMAL
- en: '**max**floating point number of the appropriate type'
  prefs: []
  type: TYPE_NORMAL
- en: The largest representable number.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxexp**int'
  prefs: []
  type: TYPE_NORMAL
- en: The smallest positive power of the base (2) that causes overflow.
  prefs: []
  type: TYPE_NORMAL
- en: '**min**floating point number of the appropriate type'
  prefs: []
  type: TYPE_NORMAL
- en: The smallest representable number, typically `-max`.
  prefs: []
  type: TYPE_NORMAL
- en: '**minexp**int'
  prefs: []
  type: TYPE_NORMAL
- en: The most negative power of the base (2) consistent with there being no leading
    0’s in the mantissa.
  prefs: []
  type: TYPE_NORMAL
- en: '**negep**int'
  prefs: []
  type: TYPE_NORMAL
- en: The exponent that yields *epsneg*.
  prefs: []
  type: TYPE_NORMAL
- en: '**nexp**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of bits in the exponent including its sign and bias.
  prefs: []
  type: TYPE_NORMAL
- en: '**nmant**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of bits in the mantissa.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int'
  prefs: []
  type: TYPE_NORMAL
- en: The approximate number of decimal digits to which this kind of float is precise.
  prefs: []
  type: TYPE_NORMAL
- en: '**resolution**floating point number of the appropriate type'
  prefs: []
  type: TYPE_NORMAL
- en: The approximate decimal resolution of this type, i.e., `10**-precision`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tiny`](numpy.finfo.tiny.html#numpy.finfo.tiny "numpy.finfo.tiny")float'
  prefs: []
  type: TYPE_NORMAL
- en: Return the value for tiny, alias of smallest_normal.
  prefs: []
  type: TYPE_NORMAL
- en: '[`smallest_normal`](numpy.finfo.smallest_normal.html#numpy.finfo.smallest_normal
    "numpy.finfo.smallest_normal")float'
  prefs: []
  type: TYPE_NORMAL
- en: Return the value for the smallest normal.
  prefs: []
  type: TYPE_NORMAL
- en: '**smallest_subnormal**float'
  prefs: []
  type: TYPE_NORMAL
- en: The smallest positive floating point number with 0 as leading bit in the mantissa
    following IEEE-754.
  prefs: []
  type: TYPE_NORMAL
