- en: Intro to data structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构简介
- en: 原文：[https://pandas.pydata.org/docs/user_guide/dsintro.html](https://pandas.pydata.org/docs/user_guide/dsintro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/dsintro.html](https://pandas.pydata.org/docs/user_guide/dsintro.html)
- en: 'We’ll start with a quick, non-comprehensive overview of the fundamental data
    structures in pandas to get you started. The fundamental behavior about data types,
    indexing, axis labeling, and alignment apply across all of the objects. To get
    started, import NumPy and load pandas into your namespace:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个快速、非全面的概述开始，介绍pandas中的基本数据结构，以帮助您入门。关于数据类型、索引、轴标签和对齐的基本行为适用于所有对象。要开始，请导入NumPy并将pandas加载到您的命名空间中：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fundamentally, **data alignment is intrinsic**. The link between labels and
    data will not be broken unless done so explicitly by you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上说，**数据对齐是固有的**。除非您明确这样做，否则标签和数据之间的链接不会被打破。
- en: We’ll give a brief intro to the data structures, then consider all of the broad
    categories of functionality and methods in separate sections.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍数据结构，然后考虑所有广泛功能和方法的各个类别在单独的部分中。
- en: '## Series'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '## Series'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is a one-dimensional labeled array capable of holding any data type (integers,
    strings, floating point numbers, Python objects, etc.). The axis labels are collectively
    referred to as the **index**. The basic method to create a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") is to call:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")是一个能够容纳任何数据类型（整数、字符串、浮点数、Python对象等）的一维带标签数组。轴标签总称为**索引**。创建[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的基本方法是调用：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, `data` can be many different things:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`data`可以是许多不同的东西：
- en: a Python dict
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Python字典
- en: an ndarray
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个ndarray
- en: a scalar value (like 5)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量值（比如5）
- en: 'The passed **index** is a list of axis labels. Thus, this separates into a
    few cases depending on what **data is**:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的**索引**是一个轴标签列表。因此，这根据**data是**的情况分为几种情况：
- en: '**From ndarray**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自ndarray**'
- en: If `data` is an ndarray, **index** must be the same length as **data**. If no
    index is passed, one will be created having values `[0, ..., len(data) - 1]`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`data`是一个ndarray，则**索引**必须与**data**的长度相同。如果没有传递索引，将创建一个具有值`[0, ..., len(data)
    - 1]`的索引。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: pandas supports non-unique index values. If an operation that does not support
    duplicate index values is attempted, an exception will be raised at that time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持非唯一索引值。如果尝试执行不支持重复索引值的操作，将在那时引发异常。
- en: '**From dict**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自字典**'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    can be instantiated from dicts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")可以从字典实例化：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If an index is passed, the values in data corresponding to the labels in the
    index will be pulled out.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了索引，则将从数据中与索引中的标签对应的值提取出来。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: NaN (not a number) is the standard missing data marker used in pandas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NaN（不是一个数字）是pandas中使用的标准缺失数据标记。
- en: '**From scalar value**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自标量值**'
- en: If `data` is a scalar value, an index must be provided. The value will be repeated
    to match the length of **index**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`data`是一个标量值，则必须提供一个索引。该值将被重复以匹配**索引**的长度。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Series is ndarray-like
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series类似于ndarray
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    acts very similarly to a `ndarray` and is a valid argument to most NumPy functions.
    However, operations such as slicing will also slice the index.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的行为与`ndarray`非常相似，并且是大多数NumPy函数的有效参数。但是，诸如切片之类的操作也会切片索引。'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will address array-based indexing like `s.iloc[[4, 3, 1]]` in [section on
    indexing](indexing.html#indexing).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[索引部分](indexing.html#indexing)中讨论类似于`s.iloc[[4, 3, 1]]`的基于数组的索引。
- en: Like a NumPy array, a pandas [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") has a single [`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 像NumPy数组一样，pandas的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")具有单一的[`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype")。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is often a NumPy dtype. However, pandas and 3rd-party libraries extend
    NumPy’s type system in a few places, in which case the dtype would be an [`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype"). Some examples within pandas are [Categorical
    data](categorical.html#categorical) and [Nullable integer data type](integer_na.html#integer-na).
    See [dtypes](basics.html#basics-dtypes) for more.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是一个NumPy dtype。然而，pandas和第三方库在一些地方扩展了NumPy的类型系统，此时dtype将是一个[`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype")。pandas内的一些示例是[分类数据](categorical.html#categorical)和[可空整数数据类型](integer_na.html#integer-na)。更多信息请参见[dtypes](basics.html#basics-dtypes)。
- en: If you need the actual array backing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array").
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要实际支持[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的数组，请使用[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Accessing the array can be useful when you need to do some operation without
    the index (to disable [automatic alignment](#dsintro-alignment), for example).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 访问数组在你需要执行一些操作而不需要索引（例如禁用[自动对齐](#dsintro-alignment)）时非常有用。
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will always be an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"). Briefly, an ExtensionArray is a thin
    wrapper around one or more *concrete* arrays like a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). pandas knows how to take an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") and store it in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or a column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). See [dtypes](basics.html#basics-dtypes) for more.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")将始终是一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")。简而言之，ExtensionArray是一个围绕一个或多个*具体*数组的薄包装器，比如一个[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在NumPy v1.26中)"). pandas知道如何获取一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")并将其存储在一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的列中。更多信息请参见[dtypes](basics.html#basics-dtypes)。'
- en: While [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is ndarray-like, if you need an *actual* ndarray, then use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")类似于ndarray，如果你需要一个*实际*的ndarray，那么请使用[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Even if the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is backed by a [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") will return a NumPy ndarray.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 即使[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")由[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")支持，[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")将返回一个NumPy ndarray。
- en: Series is dict-like
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series类似于字典
- en: 'A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is also like a fixed-size dict in that you can get and set values by index label:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")也类似于一个固定大小的字典，你可以通过索引标签获取和设置值：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If a label is not contained in the index, an exception is raised:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个标签不包含在索引中，将会引发异常：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using the [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") method, a missing label will return None or specified default:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get")方法，缺失的标签将返回None或指定的默认值：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These labels can also be accessed by [attribute](indexing.html#indexing-attribute-access).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签也可以通过[属性](indexing.html#indexing-attribute-access)访问。
- en: Vectorized operations and label alignment with Series
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 矢量化操作和与 Series 的标签对齐
- en: When working with raw NumPy arrays, looping through value-by-value is usually
    not necessary. The same is true when working with [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in pandas. [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") can also be passed into most NumPy methods expecting an ndarray.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用原始 NumPy 数组时，通常不需要逐个值循环。在 pandas 中使用 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 时也是如此。[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 也可以传递给大多数期望 ndarray 的 NumPy 方法。
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A key difference between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and ndarray is that operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") automatically align the data based on label. Thus, you can write
    computations without giving consideration to whether the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") involved have the same labels.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    与 ndarray 之间的一个关键区别是，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 之间的操作会根据标签自动对齐数据。因此，您可以编写计算而无需考虑所涉及的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 是否具有相同的标签。'
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result of an operation between unaligned [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will have the **union** of the indexes involved. If a label is
    not found in one [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or the other, the result will be marked as missing `NaN`. Being
    able to write code without doing any explicit data alignment grants immense freedom
    and flexibility in interactive data analysis and research. The integrated data
    alignment features of the pandas data structures set pandas apart from the majority
    of related tools for working with labeled data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 未对齐的 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    之间的操作结果将具有涉及的索引的**并集**。如果一个标签在其中一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 中找不到，结果将被标记为缺失的 `NaN`。能够编写代码而无需进行任何显式数据对齐，为交互式数据分析和研究提供了巨大的自由和灵活性。pandas
    数据结构的集成数据对齐功能使 pandas 在处理带标签数据的相关工具中脱颖而出。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, we chose to make the default result of operations between differently
    indexed objects yield the **union** of the indexes in order to avoid loss of information.
    Having an index label, though the data is missing, is typically important information
    as part of a computation. You of course have the option of dropping labels with
    missing data via the **dropna** function.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们选择使不同索引对象之间的操作的默认结果产生索引的**并集**，以避免信息丢失。即使数据缺失，具有索引标签通常也是计算的重要信息。当然，您可以通过
    **dropna** 函数选择删除缺失数据的标签。
- en: Name attribute
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称属性
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    also has a `name` attribute:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    还具有一个 `name` 属性：'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `name` can be assigned automatically in many cases, in particular, when selecting
    a single column from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the `name` will be assigned the column label.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `name` 在许多情况下可以自动分配，特别是当从 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 中选择单个列时，`name` 将被分配为列标签。'
- en: You can rename a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with the [`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") method.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 [`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") 方法重命名一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that `s` and `s2` refer to different objects.  ## DataFrame'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，`s` 和 `s2` 指代不同的对象。  ## DataFrame'
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is a 2-dimensional labeled data structure with columns of potentially different
    types. You can think of it like a spreadsheet or SQL table, or a dict of Series
    objects. It is generally the most commonly used pandas object. Like Series, DataFrame
    accepts many different kinds of input:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    是一个具有不同类型列的二维标记数据结构。你可以将它看作是一个电子表格或 SQL 表，或者是一组 Series 对象的字典。它通常是最常用的 pandas 对象。与
    Series 一样，DataFrame 接受许多不同类型的输入：'
- en: Dict of 1D ndarrays, lists, dicts, or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1D ndarrays、列表、字典或 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 的字典
- en: 2-D numpy.ndarray
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-D numpy.ndarray
- en: '[Structured or record](https://numpy.org/doc/stable/user/basics.rec.html) ndarray'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结构化或记录](https://numpy.org/doc/stable/user/basics.rec.html) ndarray'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
- en: Another [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
- en: Along with the data, you can optionally pass **index** (row labels) and **columns**
    (column labels) arguments. If you pass an index and / or columns, you are guaranteeing
    the index and / or columns of the resulting DataFrame. Thus, a dict of Series
    plus a specific index will discard all data not matching up to the passed index.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据，你还可以选择传递 **index**（行标签）和 **columns**（列标签）参数。如果传递了索引和/或列，你将保证结果 DataFrame
    的索引和/或列。因此，一个 Series 字典加上一个特定索引将丢弃所有与传递索引不匹配的数据。
- en: If axis labels are not passed, they will be constructed from the input data
    based on common sense rules.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递轴标签，它们将根据常识规则从输入数据中构建。
- en: From dict of Series or dicts
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Series 或字典的字典
- en: The resulting **index** will be the **union** of the indexes of the various
    Series. If there are any nested dicts, these will first be converted to Series.
    If no columns are passed, the columns will be the ordered list of dict keys.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的 **索引** 将是各个 Series 的索引的 **并集**。如果有任何嵌套字典，这些将首先转换为 Series。如果没有传递列，列将是字典键的有序列表。
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The row and column labels can be accessed respectively by accessing the **index**
    and **columns** attributes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 行和列标签可以分别通过访问 **index** 和 **columns** 属性来访问：
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When a particular set of columns is passed along with a dict of data, the passed
    columns override the keys in the dict.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递一组特定列以及数据字典时，传递的列将覆盖字典中的键。
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: From dict of ndarrays / lists
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 ndarrays / 列表的字典
- en: All ndarrays must share the same length. If an index is passed, it must also
    be the same length as the arrays. If no index is passed, the result will be `range(n)`,
    where `n` is the array length.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 ndarrays 必须具有相同的长度。如果传递了索引，它也必须与数组的长度相同。如果没有传递索引，结果将是 `range(n)`，其中 `n`
    是数组的长度。
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: From structured or record array
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从结构化或记录数组
- en: This case is handled identically to a dict of arrays.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况与数组字典处理方式相同。
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: DataFrame is not intended to work exactly like a 2-dimensional NumPy ndarray.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 不打算完全像一个二维 NumPy ndarray 一样工作。
- en: '### From a list of dicts'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '### 来自一个字典列表'
- en: '[PRE21]  ### From a dict of tuples'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]  ### 来自一个元组字典'
- en: You can automatically create a MultiIndexed frame by passing a tuples dictionary.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过传递一个元组字典自动创建一个 MultiIndexed frame。
- en: '[PRE22]  ### From a Series'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]  ### 来自一个系列'
- en: The result will be a DataFrame with the same index as the input Series, and
    with one column whose name is the original name of the Series (only if no other
    column name provided).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个具有与输入 Series 相同索引的 DataFrame，并且具有一个列，其名称是 Series 的原始名称（仅在没有提供其他列名时）。
- en: '[PRE23]  ### From a list of namedtuples'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]  ### 来自一个命名元组列表'
- en: The field names of the first `namedtuple` in the list determine the columns
    of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    The remaining namedtuples (or tuples) are simply unpacked and their values are
    fed into the rows of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). If any of those tuples is shorter than the first `namedtuple`
    then the later columns in the corresponding row are marked as missing values.
    If any are longer than the first `namedtuple`, a `ValueError` is raised.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中第一个 `namedtuple` 的字段名确定 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的列。 其余的命名元组（或元组）只是被解包，它们的值被提供给 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的行。 如果任何一个元组比第一个 `namedtuple` 短，则相应行中的后续列将被标记为缺失值。 如果有任何一个比第一个
    `namedtuple` 长，则会引发 `ValueError`。
- en: '[PRE24]  ### From a list of dataclasses'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]  ### 从数据类列表'
- en: Data Classes as introduced in [PEP557](https://www.python.org/dev/peps/pep-0557),
    can be passed into the DataFrame constructor. Passing a list of dataclasses is
    equivalent to passing a list of dictionaries.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP557](https://www.python.org/dev/peps/pep-0557) 中介绍的数据类可以传递给 DataFrame 构造函数。
    将数据类列表传递给它等同于传递字典列表。'
- en: Please be aware, that all values in the list should be dataclasses, mixing types
    in the list would result in a `TypeError`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列表中的所有值都应该是数据类，列表中混合类型的值会导致 `TypeError`。
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Missing data**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺失数据**'
- en: To construct a DataFrame with missing data, we use `np.nan` to represent missing
    values. Alternatively, you may pass a `numpy.MaskedArray` as the data argument
    to the DataFrame constructor, and its masked entries will be considered missing.
    See [Missing data](missing_data.html#missing-data) for more.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要构造一个带有缺失数据的 DataFrame，我们使用 `np.nan` 来表示缺失值。 或者，您可以将 `numpy.MaskedArray` 作为数据参数传递给
    DataFrame 构造函数，其掩码条目将被视为缺失值。 更多信息请参见[缺失数据](missing_data.html#missing-data)。
- en: Alternate constructors
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代构造函数
- en: '**DataFrame.from_dict**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_dict**'
- en: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict") takes a dict of dicts or a dict of array-like sequences
    and returns a DataFrame. It operates like the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor except for the `orient` parameter which is `''columns''`
    by default, but which can be set to `''index''` in order to use the dict keys
    as row labels.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict") 接受一个字典的字典或者一个数组序列的字典，并返回一个 DataFrame。 它的操作方式与 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 构造函数类似，除了默认情况下为 `''columns''` 的 `orient` 参数外，还可以设置为 `''index''`，以使用字典键作为行标签。'
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you pass `orient=''index''`, the keys will be the row labels. In this case,
    you can also pass the desired column names:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递 `orient='index'`，则键将成为行标签。 在这种情况下，您还可以传递所需的列名：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**DataFrame.from_records**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_records**'
- en: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") takes a list of tuples or an ndarray with structured
    dtype. It works analogously to the normal [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor, except that the resulting DataFrame index may
    be a specific field of the structured dtype.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") 接受一个元组列表或具有结构化 dtype 的 ndarray。 它的工作方式类似于普通的
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    构造函数，只是生成的 DataFrame 索引可以是结构化 dtype 的特定字段。'
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '### Column selection, addition, deletion'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '### 列选择、添加、删除'
- en: 'You can treat a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") semantically like a dict of like-indexed [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") objects. Getting, setting, and deleting columns works with the
    same syntax as the analogous dict operations:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")语义上看作是一个具有相同索引的
    [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    对象的字典。 获取、设置和删除列的操作与类似的字典操作具有相同的语法：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Columns can be deleted or popped like with a dict:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列可以像字典一样被删除或弹出：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When inserting a scalar value, it will naturally be propagated to fill the
    column:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入标量值时，它会自然地传播以填充列：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When inserting a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") that does not have the same index as the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), it will be conformed to the DataFrame’s index:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入一个与[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")具有不同索引的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")时，它将被调整为DataFrame的索引：
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can insert raw ndarrays but their length must match the length of the DataFrame’s
    index.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以插入原始ndarrays，但它们的长度必须与DataFrame的索引长度匹配。
- en: 'By default, columns get inserted at the end. [`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") inserts at a particular location in the columns:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列会被插入到末尾。[`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") 在列的特定位置插入：
- en: '[PRE33]  ### Assigning new columns in method chains'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE33]  ### 在方法链中分配新列'
- en: Inspired by [dplyr’s](https://dplyr.tidyverse.org/reference/mutate.html) `mutate`
    verb, DataFrame has an [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") method that allows you to easily create new columns
    that are potentially derived from existing columns.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 灵感源于[dplyr的](https://dplyr.tidyverse.org/reference/mutate.html) `mutate` 动词，DataFrame具有一个[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 方法，允许您轻松创建可能源自现有列的新列。
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the example above, we inserted a precomputed value. We can also pass in a
    function of one argument to be evaluated on the DataFrame being assigned to.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们插入了一个预先计算的值。我们还可以传递一个要在分配给的DataFrame上评估的一个参数的函数。
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **always** returns a copy of the data, leaving the
    original DataFrame untouched.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **总是**返回数据的副本，保持原始DataFrame不变。'
- en: 'Passing a callable, as opposed to an actual value to be inserted, is useful
    when you don’t have a reference to the DataFrame at hand. This is common when
    using [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") in a chain of operations. For example, we can limit
    the DataFrame to just those observations with a Sepal Length greater than 5, calculate
    the ratio, and plot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 传递可调用对象，而不是要插入的实际值，在没有对DataFrame的引用时非常有用。在操作链中使用[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")时，这是常见的。例如，我们可以将DataFrame限制为仅包含萼片长度大于5的观测值，计算比率，并绘制：
- en: '[PRE36]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
- en: Since a function is passed in, the function is computed on the DataFrame being
    assigned to. Importantly, this is the DataFrame that’s been filtered to those
    rows with sepal length greater than 5\. The filtering happens first, and then
    the ratio calculations. This is an example where we didn’t have a reference to
    the *filtered* DataFrame available.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传递了一个函数，因此该函数在分配给的DataFrame上计算。重要的是，这是已经被过滤为那些萼片长度大于5的行的DataFrame。首先进行过滤，然后进行比率计算。这是一个示例，我们没有对*过滤*的DataFrame可用的引用。
- en: The function signature for [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") is simply `**kwargs`. The keys are the column names
    for the new fields, and the values are either a value to be inserted (for example,
    a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or NumPy array), or a function of one argument to be called on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). A *copy* of the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is returned, with the new values inserted.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 的函数签名只是 `**kwargs`。键是新字段的列名，值可以是要插入的值（例如，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或NumPy数组），或者是要在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")上调用的一个参数的函数。返回原始[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的*副本*，并插入新值。'
- en: The order of `**kwargs` is preserved. This allows for *dependent* assignment,
    where an expression later in `**kwargs` can refer to a column created earlier
    in the same [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs`的顺序是保留的。这允许*依赖*赋值，其中`**kwargs`中后面的表达式可以引用同一[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")中先前创建的列。'
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the second expression, `x['C']` will refer to the newly created column, that’s
    equal to `dfa['A'] + dfa['B']`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个表达式中，`x['C']`将指向新创建的列，等于`dfa['A'] + dfa['B']`。
- en: Indexing / selection
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引/选择
- en: 'The basics of indexing are as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的基础知识如下：
- en: '| Operation | Syntax | Result |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 语法 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Select column | `df[col]` | Series |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 选择列 | `df[col]` | Series |'
- en: '| Select row by label | `df.loc[label]` | Series |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 通过标签选择行 | `df.loc[label]` | Series |'
- en: '| Select row by integer location | `df.iloc[loc]` | Series |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 通过整数位置选择行 | `df.iloc[loc]` | Series |'
- en: '| Slice rows | `df[5:10]` | DataFrame |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 切片行 | `df[5:10]` | DataFrame |'
- en: '| Select rows by boolean vector | `df[bool_vec]` | DataFrame |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 通过布尔向量选择行 | `df[bool_vec]` | DataFrame |'
- en: 'Row selection, for example, returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") whose index is the columns of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，行选择返回一个其索引为[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的列的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: For a more exhaustive treatment of sophisticated label-based indexing and slicing,
    see the [section on indexing](indexing.html#indexing). We will address the fundamentals
    of reindexing / conforming to new sets of labels in the [section on reindexing](basics.html#basics-reindexing).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更详尽的基于标签的索引和切片处理，请参阅[索引部分](indexing.html#indexing)。我们将在[重新索引部分](basics.html#basics-reindexing)中讨论重新索引/符合新标签集的基础知识。
- en: '### Data alignment and arithmetic'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据对齐和算术'
- en: Data alignment between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects automatically align on **both the columns and the
    index (row labels)**. Again, the resulting object will have the union of the column
    and row labels.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")对象之间的数据对齐会自动在**列和索引（行标签）**上对齐。同样，结果对象将具有列和行标签的并集。'
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When doing an operation between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), the default behavior is to align the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") **index** on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") **columns**, thus [broadcasting](https://numpy.org/doc/stable/user/basics.broadcasting.html)
    row-wise. For example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")和[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")之间进行操作时，默认行为是将[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的**索引**与[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的**列**对齐，从而以行方式进行[广播](https://numpy.org/doc/stable/user/basics.broadcasting.html)。例如：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: For explicit control over the matching and broadcasting behavior, see the section
    on [flexible binary operations](basics.html#basics-binop).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要对匹配和广播行为进行显式控制，请参阅[灵活的二进制操作部分](basics.html#basics-binop)。
- en: 'Arithmetic operations with scalars operate element-wise:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与标量进行算术运算是逐元素进行的：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Boolean operators operate element-wise as well:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔运算也是逐元素进行的：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Transposing
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转置
- en: 'To transpose, access the `T` attribute or [`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose"), similar to an ndarray:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行转置，访问`T`属性或[`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")，类似于一个ndarray：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '### DataFrame interoperability with NumPy functions'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '### DataFrame与NumPy函数的互操作性'
- en: Most NumPy functions can be called directly on [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数NumPy函数可以直接在[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")上调用。
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is not intended to be a drop-in replacement for ndarray as its indexing semantics
    and data model are quite different in places from an n-dimensional array.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")并不打算作为ndarray的直接替代品，因为它的索引语义和数据模型在某些地方与n维数组有很大不同。'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    implements `__array_ufunc__`, which allows it to work with NumPy’s [universal
    functions](https://numpy.org/doc/stable/reference/ufuncs.html).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")实现了`__array_ufunc__`，这使其能够与NumPy的[通用函数](https://numpy.org/doc/stable/reference/ufuncs.html)一起使用。'
- en: The ufunc is applied to the underlying array in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc被应用于[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")中的底层数组。
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When multiple [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    are passed to a ufunc, they are aligned before performing the operation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")传递给ufunc时，在执行操作之前它们会被对齐。
- en: Like other parts of the library, pandas will automatically align labeled inputs
    as part of a ufunc with multiple inputs. For example, using `numpy.remainder()`
    on two [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with differently ordered labels will align before the operation.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与库的其他部分一样，pandas将自动对齐带有多个输入的ufunc的标记输入。例如，在两个具有不同顺序标签的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")上使用`numpy.remainder()`将在操作之前对齐。
- en: '[PRE46]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As usual, the union of the two indices is taken, and non-overlapping values
    are filled with missing values.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，两个索引的并集被取出，并且非重叠的值被填充为缺失值。
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: When a binary ufunc is applied to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index"), the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") implementation takes precedence and a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") is returned.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当将二进制ufunc应用于[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index")时，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的实现优先，并返回一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE48]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: NumPy ufuncs are safe to apply to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by non-ndarray arrays, for example [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") (see [Sparse calculation](sparse.html#sparse-calculation)).
    If possible, the ufunc is applied without converting the underlying data to an
    ndarray.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy ufuncs可以安全地应用于由非ndarray数组支持的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，例如[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")（参见[稀疏计算](sparse.html#sparse-calculation)）。如果可能，ufunc将在不将底层数据转换为ndarray的情况下应用。
- en: Console display
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台显示
- en: 'A very large [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will be truncated to display them in the console. You can
    also get a summary using [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"). (The **baseball** dataset is from the **plyr** R package):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常大的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")将被截断以在控制台中显示。您也可以使用[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info")来获取摘要信息。（**baseball**数据集来自**plyr** R包）：
- en: '[PRE49]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'However, using [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") will return a string representation of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in tabular form, though it won’t always fit the console width:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")将以表格形式返回[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的字符串表示，尽管它不总是适合控制台宽度：
- en: '[PRE50]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Wide DataFrames will be printed across multiple rows by default:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，宽DataFrame将跨多行打印：
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can change how much to print on a single row by setting the `display.width`
    option:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`display.width`选项，您可以更改单行打印的数量：
- en: '[PRE52]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: You can adjust the max width of the individual columns by setting `display.max_colwidth`
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过设置`display.max_colwidth`来调整各列的最大宽度
- en: '[PRE53]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can also disable this feature via the `expand_frame_repr` option. This will
    print the table in one block.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过`expand_frame_repr`选项禁用此功能。这将在一个块中打印表格。
- en: DataFrame column attribute access and IPython completion
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataFrame列属性访问和IPython完成
- en: 'If a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column label is a valid Python variable name, the column can
    be accessed like an attribute:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")列标签是一个有效的Python变量名，则可以像属性一样访问该列：
- en: '[PRE54]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The columns are also connected to the [IPython](https://ipython.org) completion
    mechanism so they can be tab-completed:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 列也与[IPython](https://ipython.org)完成机制连接，因此可以进行制表完成：
- en: '[PRE55]  ## Series'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE55]  ## Series'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is a one-dimensional labeled array capable of holding any data type (integers,
    strings, floating point numbers, Python objects, etc.). The axis labels are collectively
    referred to as the **index**. The basic method to create a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") is to call:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")是一个能够容纳任何数据类型（整数、字符串、浮点数、Python对象等）的一维标记数组。轴标签总称为**index**。创建[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的基本方法是调用：'
- en: '[PRE56]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Here, `data` can be many different things:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`data`可以是许多不同的东西：
- en: a Python dict
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Python字典
- en: an ndarray
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个ndarray
- en: a scalar value (like 5)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个标量值（如5）
- en: 'The passed **index** is a list of axis labels. Thus, this separates into a
    few cases depending on what **data is**:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的**index**是一个轴标签列表。因此，这根据**data**的内容分为几种情况：
- en: '**From ndarray**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**从ndarray**'
- en: If `data` is an ndarray, **index** must be the same length as **data**. If no
    index is passed, one will be created having values `[0, ..., len(data) - 1]`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`data`是一个ndarray，**index**必须与**data**的长度相同。如果没有传递索引，将创建一个具有值`[0, ..., len(data)
    - 1]`的索引。
- en: '[PRE57]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: pandas supports non-unique index values. If an operation that does not support
    duplicate index values is attempted, an exception will be raised at that time.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持非唯一索引值。如果尝试执行不支持重复索引值的操作，那么将在那时引发异常。
- en: '**From dict**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**从字典**'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    can be instantiated from dicts:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")可以从字典实例化：'
- en: '[PRE58]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: If an index is passed, the values in data corresponding to the labels in the
    index will be pulled out.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了索引，则将从数据中与索引标签对应的值提取出来。
- en: '[PRE59]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: NaN (not a number) is the standard missing data marker used in pandas.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: NaN（不是一个数字）是pandas中使用的标准缺失数据标记。
- en: '**From scalar value**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**从标量值**'
- en: If `data` is a scalar value, an index must be provided. The value will be repeated
    to match the length of **index**.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`data`是一个标量值，则必须提供一个索引。该值将重复以匹配**index**的长度。
- en: '[PRE60]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Series is ndarray-like
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series类似于ndarray
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    acts very similarly to a `ndarray` and is a valid argument to most NumPy functions.
    However, operations such as slicing will also slice the index.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的行为与`ndarray`非常相似，并且是大多数NumPy函数的有效参数。然而，像切片这样的操作也会切片索引。'
- en: '[PRE61]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will address array-based indexing like `s.iloc[[4, 3, 1]]` in [section on
    indexing](indexing.html#indexing).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[索引部分](indexing.html#indexing)中讨论类似`s.iloc[[4, 3, 1]]`的基于数组的索引。
- en: Like a NumPy array, a pandas [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") has a single [`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype").
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 与NumPy数组类似，pandas的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")具有单一的[`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype")。
- en: '[PRE62]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This is often a NumPy dtype. However, pandas and 3rd-party libraries extend
    NumPy’s type system in a few places, in which case the dtype would be an [`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype"). Some examples within pandas are [Categorical
    data](categorical.html#categorical) and [Nullable integer data type](integer_na.html#integer-na).
    See [dtypes](basics.html#basics-dtypes) for more.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是一个NumPy dtype。然而，pandas和第三方库在一些地方扩展了NumPy的类型系统，此时dtype将是一个[`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype")。pandas中的一些示例包括[Categorical data](categorical.html#categorical)和[Nullable
    integer data type](integer_na.html#integer-na)。更多信息请参见[dtypes](basics.html#basics-dtypes)。
- en: If you need the actual array backing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array").
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要一个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的实际数组支持，请使用[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")。
- en: '[PRE63]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Accessing the array can be useful when you need to do some operation without
    the index (to disable [automatic alignment](#dsintro-alignment), for example).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 访问数组在需要执行一些操作而不需要索引时（例如禁用[自动对齐](#dsintro-alignment)）时非常有用。
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will always be an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"). Briefly, an ExtensionArray is a thin
    wrapper around one or more *concrete* arrays like a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). pandas knows how to take an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") and store it in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or a column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). See [dtypes](basics.html#basics-dtypes) for more.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")始终是一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")。简而言之，ExtensionArray是对一个或多个*具体*数组（如[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在NumPy v1.26)"))的薄包装。pandas知道如何将一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")存储在[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的列中。更多信息请参见[dtypes](basics.html#basics-dtypes)。'
- en: While [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is ndarray-like, if you need an *actual* ndarray, then use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy").
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")类似于ndarray，但如果需要一个*实际*的ndarray，则使用[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")。
- en: '[PRE64]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Even if the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is backed by a [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") will return a NumPy ndarray.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 即使[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")由一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")��持，[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")也会返回一个NumPy ndarray。
- en: Series is dict-like
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series类似于字典
- en: 'A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is also like a fixed-size dict in that you can get and set values by index label:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")也类似于一个固定大小的字典，可以通过索引标签获取和设置值：
- en: '[PRE65]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If a label is not contained in the index, an exception is raised:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标签不包含在索引中，则会引发异常：
- en: '[PRE66]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Using the [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") method, a missing label will return None or specified default:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get")方法，如果缺少标签，则返回None或指定的默认值：
- en: '[PRE67]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: These labels can also be accessed by [attribute](indexing.html#indexing-attribute-access).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签也可以通过[属性](indexing.html#indexing-attribute-access)访问。
- en: Vectorized operations and label alignment with Series
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与Series进行矢量化操作和标签对齐
- en: When working with raw NumPy arrays, looping through value-by-value is usually
    not necessary. The same is true when working with [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in pandas. [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") can also be passed into most NumPy methods expecting an ndarray.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用原始NumPy数组时，通常不需要逐个值循环。在pandas中使用[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")时也是如此。[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")也可以传递给大多数期望ndarray的NumPy方法。
- en: '[PRE68]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: A key difference between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and ndarray is that operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") automatically align the data based on label. Thus, you can write
    computations without giving consideration to whether the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") involved have the same labels.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和ndarray之间的一个关键区别是，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")之间的操作会根据标签自动对齐数据。因此，您可以编写计算而不必考虑所涉及的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")是否具有相同的标签。'
- en: '[PRE69]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The result of an operation between unaligned [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will have the **union** of the indexes involved. If a label is
    not found in one [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or the other, the result will be marked as missing `NaN`. Being
    able to write code without doing any explicit data alignment grants immense freedom
    and flexibility in interactive data analysis and research. The integrated data
    alignment features of the pandas data structures set pandas apart from the majority
    of related tools for working with labeled data.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 未对齐的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")之间的操作结果将具有涉及的索引的**并集**。如果一个标签在一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或另一个中找不到，则结果将被标记为缺失的`NaN`。能够编写不进行任何显式数据对齐的代码为交互式数据分析和研究提供了巨大的自由和灵活性。pandas数据结构的集成数据对齐功能使pandas在处理带标签数据的相关工具中脱颖而出。
- en: Note
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, we chose to make the default result of operations between differently
    indexed objects yield the **union** of the indexes in order to avoid loss of information.
    Having an index label, though the data is missing, is typically important information
    as part of a computation. You of course have the option of dropping labels with
    missing data via the **dropna** function.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们选择使不同索引对象之间的操作的默认结果产生索引的**并集**，以避免信息丢失。即使数据缺失，具有索引标签通常也是计算的重要信息。当然，您可以通过**dropna**函数选择删除缺失数据的标签。
- en: Name attribute
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称属性
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    also has a `name` attribute:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")还有一个`name`属性：'
- en: '[PRE70]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `name` can be assigned automatically in many cases, in particular, when selecting
    a single column from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the `name` will be assigned the column label.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的`name`可以自动分配，特别是当从[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中选择单列时，`name`将被分配为列标签。
- en: You can rename a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with the [`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") method.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename")方法重命名一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE71]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note that `s` and `s2` refer to different objects.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`s`和`s2`指向不同的对象。
- en: Series is ndarray-like
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series类似于ndarray
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    acts very similarly to a `ndarray` and is a valid argument to most NumPy functions.
    However, operations such as slicing will also slice the index.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的行为与`ndarray`非常相似，并且是大多数NumPy函数的有效参数。但是，诸如切片之类的操作也会切片索引。'
- en: '[PRE72]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will address array-based indexing like `s.iloc[[4, 3, 1]]` in [section on
    indexing](indexing.html#indexing).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[索引部分](indexing.html#indexing)中讨论类似于`s.iloc[[4, 3, 1]]`的基于数组的索引。
- en: Like a NumPy array, a pandas [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") has a single [`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype").
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 像NumPy数组一样，pandas的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")具有单一的[`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype")。
- en: '[PRE73]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This is often a NumPy dtype. However, pandas and 3rd-party libraries extend
    NumPy’s type system in a few places, in which case the dtype would be an [`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype"). Some examples within pandas are [Categorical
    data](categorical.html#categorical) and [Nullable integer data type](integer_na.html#integer-na).
    See [dtypes](basics.html#basics-dtypes) for more.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是一个 NumPy 的 dtype。然而，pandas 和第三方库在一些地方扩展了 NumPy 的类型系统，在这种情况下，dtype 将是一个 [`ExtensionDtype`](../reference/api/pandas.api.extensions.ExtensionDtype.html#pandas.api.extensions.ExtensionDtype
    "pandas.api.extensions.ExtensionDtype")。pandas 中的一些示例包括 [分类数据](categorical.html#categorical)
    和 [可空整数数据类型](integer_na.html#integer-na)。详情请参阅 [dtypes](basics.html#basics-dtypes)。
- en: If you need the actual array backing a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), use [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array").
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    的实际数组支持，请使用 [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")。
- en: '[PRE74]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Accessing the array can be useful when you need to do some operation without
    the index (to disable [automatic alignment](#dsintro-alignment), for example).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要执行一些操作而不使用索引时（例如禁用 [自动对齐](#dsintro-alignment)），访问数组可能很有用。
- en: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will always be an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"). Briefly, an ExtensionArray is a thin
    wrapper around one or more *concrete* arrays like a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). pandas knows how to take an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") and store it in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or a column of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). See [dtypes](basics.html#basics-dtypes) for more.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") 总是一个 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")。简而言之，ExtensionArray 是对一个或多个 *具体* 数组的轻量级包装，比如
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26 中)")。pandas 知道如何获取一个 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") 并将其存储在一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 或 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的列中。详情请参阅 [dtypes](basics.html#basics-dtypes)。'
- en: While [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is ndarray-like, if you need an *actual* ndarray, then use [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy").
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    类似于 ndarray，但如果你需要一个 *实际* 的 ndarray，请使用 [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")。
- en: '[PRE75]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Even if the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is backed by a [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") will return a NumPy ndarray.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    是由 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") 支持的，[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") 也会返回一个 NumPy ndarray。
- en: Series is dict-like
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Series 类似于字典
- en: 'A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is also like a fixed-size dict in that you can get and set values by index label:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    也像一个固定大小的字典，你可以通过索引标签来获取和设置值：
- en: '[PRE76]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'If a label is not contained in the index, an exception is raised:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标签不包含在索引中，则会引发异常：
- en: '[PRE77]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Using the [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") method, a missing label will return None or specified default:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Series.get()`](../reference/api/pandas.Series.get.html#pandas.Series.get
    "pandas.Series.get") 方法，如果缺少标签，则返回 None 或指定的默认值：
- en: '[PRE78]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: These labels can also be accessed by [attribute](indexing.html#indexing-attribute-access).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签也可以通过 [属性](indexing.html#indexing-attribute-access) 来访问。
- en: Vectorized operations and label alignment with Series
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 矢量化操作和Series的标签对齐
- en: When working with raw NumPy arrays, looping through value-by-value is usually
    not necessary. The same is true when working with [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in pandas. [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") can also be passed into most NumPy methods expecting an ndarray.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用原始的NumPy数组时，通常不需要逐值循环。在pandas中使用[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")时也是如此。[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")也可以传递给大多数期望ndarray的NumPy方法。
- en: '[PRE79]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: A key difference between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and ndarray is that operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") automatically align the data based on label. Thus, you can write
    computations without giving consideration to whether the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") involved have the same labels.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和ndarray之间的一个关键区别是，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")之间的操作会根据标签自动对齐数据。因此，你可以在不考虑涉及的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")是否具有相同标签的情况下编写计算。'
- en: '[PRE80]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The result of an operation between unaligned [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will have the **union** of the indexes involved. If a label is
    not found in one [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or the other, the result will be marked as missing `NaN`. Being
    able to write code without doing any explicit data alignment grants immense freedom
    and flexibility in interactive data analysis and research. The integrated data
    alignment features of the pandas data structures set pandas apart from the majority
    of related tools for working with labeled data.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 不对齐的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")之间的操作结果将具有涉及的索引的**并集**。如果一个标签在一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")中找不到或另一个中找不到，则结果将标记为缺失的`NaN`。能够编写不执行任何显式数据对齐的代码为交互式数据分析和研究提供了巨大的自由和灵活性。pandas数据结构的集成数据对齐功能使其在处理带有标签数据的相关工具中脱颖而出。
- en: Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, we chose to make the default result of operations between differently
    indexed objects yield the **union** of the indexes in order to avoid loss of information.
    Having an index label, though the data is missing, is typically important information
    as part of a computation. You of course have the option of dropping labels with
    missing data via the **dropna** function.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们选择让不同索引对象之间的操作的默认结果产生索引的**并集**，以避免信息丢失。即使数据缺失，拥有索引标签通常也是计算的重要信息。当然，你可以选择通过**dropna**函数丢弃带有缺失数据的标签。
- en: Name attribute
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称属性
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    also has a `name` attribute:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")还有一个`name`属性：'
- en: '[PRE81]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    `name` can be assigned automatically in many cases, in particular, when selecting
    a single column from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the `name` will be assigned the column label.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的`name`可以被自动赋值，特别是当从[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")中选择单列时，`name`将被分配为列标签。
- en: You can rename a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") with the [`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") method.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`pandas.Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename")方法重命名一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE82]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Note that `s` and `s2` refer to different objects.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`s`和`s2`指向不同的对象。
- en: '## DataFrame'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '## DataFrame'
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is a 2-dimensional labeled data structure with columns of potentially different
    types. You can think of it like a spreadsheet or SQL table, or a dict of Series
    objects. It is generally the most commonly used pandas object. Like Series, DataFrame
    accepts many different kinds of input:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")是一个带有可能不同类型列的二维标签数据结构。你可以将它视为电子表格或SQL表，或者是一系列Series对象的字典。它通常是最常用的pandas对象。与Series一样，DataFrame接受许多不同类型的输入：'
- en: Dict of 1D ndarrays, lists, dicts, or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1D ndarrays、列表、字典或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的字典
- en: 2-D numpy.ndarray
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-D numpy.ndarray
- en: '[Structured or record](https://numpy.org/doc/stable/user/basics.rec.html) ndarray'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结构化或记录](https://numpy.org/doc/stable/user/basics.rec.html) ndarray'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")'
- en: Another [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
- en: Along with the data, you can optionally pass **index** (row labels) and **columns**
    (column labels) arguments. If you pass an index and / or columns, you are guaranteeing
    the index and / or columns of the resulting DataFrame. Thus, a dict of Series
    plus a specific index will discard all data not matching up to the passed index.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据之外，您还可以选择传递**index**（行标签）和**columns**（列标签）参数。如果传递了索引和/或列，则保证了结果 DataFrame
    的索引和/或列。因此，字典的 Series 加上特定索引将丢弃所有与传递索引不匹配的数据。
- en: If axis labels are not passed, they will be constructed from the input data
    based on common sense rules.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未传递轴标签，它们将根据常识规则从输入数据构建。
- en: From dict of Series or dicts
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自 Series 字典或字典
- en: The resulting **index** will be the **union** of the indexes of the various
    Series. If there are any nested dicts, these will first be converted to Series.
    If no columns are passed, the columns will be the ordered list of dict keys.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的**索引**将是各个 Series 的**并集**。如果有任何嵌套的字典，它们将首先被转换为 Series。如果未传递任何列，则列将是字典键的有序列表。
- en: '[PRE83]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The row and column labels can be accessed respectively by accessing the **index**
    and **columns** attributes:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 行和列标签分别可以通过访问**index**和**columns**属性来访问：
- en: Note
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When a particular set of columns is passed along with a dict of data, the passed
    columns override the keys in the dict.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当与数据字典一起传递了特定列集时，传递的列将覆盖字典中的键。
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: From dict of ndarrays / lists
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自字典的 ndarrays / 列表
- en: All ndarrays must share the same length. If an index is passed, it must also
    be the same length as the arrays. If no index is passed, the result will be `range(n)`,
    where `n` is the array length.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 ndarrays 必须具有相同的长度。如果传递了索引，则它必须与数组的长度相同。如果未传递索引，则结果将是 `range(n)`，其中 `n` 是数组长度。
- en: '[PRE85]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: From structured or record array
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自结构化或记录数组
- en: This case is handled identically to a dict of arrays.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况与字典数组的处理方式相同。
- en: '[PRE86]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Note
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: DataFrame is not intended to work exactly like a 2-dimensional NumPy ndarray.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 不打算像 2 维 NumPy ndarray 一样工作。
- en: '### From a list of dicts'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '### 来自字典列表'
- en: '[PRE87]  ### From a dict of tuples'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE87]  ### 来自元组字典'
- en: You can automatically create a MultiIndexed frame by passing a tuples dictionary.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递元组字典，您可以自动创建一个多级索引的框架。
- en: '[PRE88]  ### From a Series'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE88]  ### 来自 Series'
- en: The result will be a DataFrame with the same index as the input Series, and
    with one column whose name is the original name of the Series (only if no other
    column name provided).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个具有与输入 Series 相同索引的 DataFrame，并且有一个列，其名称为 Series 的原始名称（仅当没有提供其他列名时）。
- en: '[PRE89]  ### From a list of namedtuples'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE89]  ### 来自命名元组列表'
- en: The field names of the first `namedtuple` in the list determine the columns
    of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    The remaining namedtuples (or tuples) are simply unpacked and their values are
    fed into the rows of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). If any of those tuples is shorter than the first `namedtuple`
    then the later columns in the corresponding row are marked as missing values.
    If any are longer than the first `namedtuple`, a `ValueError` is raised.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中第一个`namedtuple`的字段名确定[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的列。剩余的命名元组（或元组）只需展开，它们的值就会被输入到[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的行中。如果任何一个元组比第一个`namedtuple`短，那么相应行中的后续列将被标记为缺失值。如果有任何一个元组比第一个`namedtuple`长，就会引发`ValueError`。
- en: '[PRE90]  ### From a list of dataclasses'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE90]  ### 来自数据类列表'
- en: Data Classes as introduced in [PEP557](https://www.python.org/dev/peps/pep-0557),
    can be passed into the DataFrame constructor. Passing a list of dataclasses is
    equivalent to passing a list of dictionaries.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[PEP557](https://www.python.org/dev/peps/pep-0557)中介绍的数据类，可以传递给 DataFrame
    构造函数。传递数据类列表相当于传递字典列表。
- en: Please be aware, that all values in the list should be dataclasses, mixing types
    in the list would result in a `TypeError`.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列表中的所有值都应该是数据类，混合类型会导致`TypeError`。
- en: '[PRE91]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '**Missing data**'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺失数据**'
- en: To construct a DataFrame with missing data, we use `np.nan` to represent missing
    values. Alternatively, you may pass a `numpy.MaskedArray` as the data argument
    to the DataFrame constructor, and its masked entries will be considered missing.
    See [Missing data](missing_data.html#missing-data) for more.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建具有缺失数据的DataFrame，我们使用`np.nan`表示缺失值。或者，您可以将`numpy.MaskedArray`作为数据参数传递给DataFrame构造函数，其掩码条目将被视为缺失值。更多信息请参见[缺失数据](missing_data.html#missing-data)。
- en: Alternate constructors
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代构造函数
- en: '**DataFrame.from_dict**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_dict**'
- en: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict") takes a dict of dicts or a dict of array-like sequences
    and returns a DataFrame. It operates like the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor except for the `orient` parameter which is `''columns''`
    by default, but which can be set to `''index''` in order to use the dict keys
    as row labels.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict") 接受一个字典的字典或者一个数组样式序列的字典，并返回一个DataFrame。它的操作类似于[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 构造函数，除了`orient`参数默认为`''columns''`，但可以设置为`''index''`以使用字典键作为行标签。'
- en: '[PRE92]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'If you pass `orient=''index''`, the keys will be the row labels. In this case,
    you can also pass the desired column names:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递`orient='index'`，键将成为行标签。在这种情况下，您还可以传递所需的列名：
- en: '[PRE93]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '**DataFrame.from_records**'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_records**'
- en: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") takes a list of tuples or an ndarray with structured
    dtype. It works analogously to the normal [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor, except that the resulting DataFrame index may
    be a specific field of the structured dtype.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") 接受一个元组列表或者具有结构化dtype的ndarray。它的工作方式类似于普通的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 构造函数，不同之处在于生成的DataFrame索引可能是结构化dtype的特定字段。'
- en: '[PRE94]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '### Column selection, addition, deletion'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '### 列选择、添加、删除'
- en: 'You can treat a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") semantically like a dict of like-indexed [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") objects. Getting, setting, and deleting columns works with the
    same syntax as the analogous dict operations:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一个[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")在语义上视为具有相同索引的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")对象的字典。获取、设置和删除列的操作与类似的字典操作具有相同的语法：
- en: '[PRE95]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Columns can be deleted or popped like with a dict:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 列可以像字典一样被删除或弹出：
- en: '[PRE96]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'When inserting a scalar value, it will naturally be propagated to fill the
    column:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入标量值时，它将自然传播以填充列：
- en: '[PRE97]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'When inserting a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") that does not have the same index as the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), it will be conformed to the DataFrame’s index:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入一个与[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")索引不同的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")时，它将被调整为DataFrame的索引：
- en: '[PRE98]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: You can insert raw ndarrays but their length must match the length of the DataFrame’s
    index.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以插入原始的ndarrays，但它们的长度必须与DataFrame的索引长度匹配。
- en: 'By default, columns get inserted at the end. [`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") inserts at a particular location in the columns:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列会被插入到末尾。[`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") 在列的特定位置插入：
- en: '[PRE99]  ### Assigning new columns in method chains'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE99]  ### 在方法链中分配新列'
- en: Inspired by [dplyr’s](https://dplyr.tidyverse.org/reference/mutate.html) `mutate`
    verb, DataFrame has an [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") method that allows you to easily create new columns
    that are potentially derived from existing columns.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 受 [dplyr](https://dplyr.tidyverse.org/reference/mutate.html) 的 `mutate` 动词的启发，DataFrame
    具有一个 [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 方法，允许您轻松创建新列，这些新列可能来源于现有列。
- en: '[PRE100]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In the example above, we inserted a precomputed value. We can also pass in a
    function of one argument to be evaluated on the DataFrame being assigned to.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们插入了一个预先计算的值。我们还可以传递一个参数为 DataFrame 的函数，以在被赋值的 DataFrame 上进行评估。
- en: '[PRE101]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **always** returns a copy of the data, leaving the
    original DataFrame untouched.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **总是** 返回数据的副本，不会改变原始 DataFrame。'
- en: 'Passing a callable, as opposed to an actual value to be inserted, is useful
    when you don’t have a reference to the DataFrame at hand. This is common when
    using [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") in a chain of operations. For example, we can limit
    the DataFrame to just those observations with a Sepal Length greater than 5, calculate
    the ratio, and plot:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 当你手头没有 DataFrame 的引用时，将可调用对象传递给 `assign()`（在一系列操作中使用时很常见）比传递要插入的实际值更有用。例如，我们可以将
    DataFrame 限制为仅包含萼片长度大于5的观测值，计算比率并绘制：
- en: '[PRE102]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
- en: Since a function is passed in, the function is computed on the DataFrame being
    assigned to. Importantly, this is the DataFrame that’s been filtered to those
    rows with sepal length greater than 5\. The filtering happens first, and then
    the ratio calculations. This is an example where we didn’t have a reference to
    the *filtered* DataFrame available.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传递了一个函数，因此该函数在被赋值的 DataFrame 上被计算。重要的是，这是已经被过滤为萼片长度大于5的那些行的 DataFrame。首先进行过滤，然后进行比率计算。这是一个示例，在该示例中我们没有引用
    *被过滤* 的 DataFrame。
- en: The function signature for [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") is simply `**kwargs`. The keys are the column names
    for the new fields, and the values are either a value to be inserted (for example,
    a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or NumPy array), or a function of one argument to be called on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). A *copy* of the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is returned, with the new values inserted.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 的函数签名简单地是 `**kwargs`。键是新字段的列名，值可以是要插入的值（例如，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 或 NumPy 数组），也可以是要在 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 上调用的一个参数的函数。返回原始 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的 *副本*，并插入新值。'
- en: The order of `**kwargs` is preserved. This allows for *dependent* assignment,
    where an expression later in `**kwargs` can refer to a column created earlier
    in the same [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign").
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs` 的顺序被保留。这允许进行 *依赖* 赋值，其中 `**kwargs` 中稍后的表达式可以引用同一 [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 中稍早创建的列。'
- en: '[PRE103]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: In the second expression, `x['C']` will refer to the newly created column, that’s
    equal to `dfa['A'] + dfa['B']`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个表达式中，`x['C']` 将引用新创建的列，该列等于 `dfa['A'] + dfa['B']`。
- en: Indexing / selection
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引/选择
- en: 'The basics of indexing are as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的基础如下：
- en: '| Operation | Syntax | Result |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 语法 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Select column | `df[col]` | Series |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 选择列 | `df[col]` | Series |'
- en: '| Select row by label | `df.loc[label]` | Series |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 通过标签选择行 | `df.loc[label]` | Series |'
- en: '| Select row by integer location | `df.iloc[loc]` | Series |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| 通过整数位置选择行 | `df.iloc[loc]` | Series |'
- en: '| Slice rows | `df[5:10]` | DataFrame |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| 切片行 | `df[5:10]` | DataFrame |'
- en: '| Select rows by boolean vector | `df[bool_vec]` | DataFrame |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 通过布尔向量选择行 | `df[bool_vec]` | DataFrame |'
- en: 'Row selection, for example, returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") whose index is the columns of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，行选择返回一个索引为[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")列的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")：
- en: '[PRE104]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: For a more exhaustive treatment of sophisticated label-based indexing and slicing,
    see the [section on indexing](indexing.html#indexing). We will address the fundamentals
    of reindexing / conforming to new sets of labels in the [section on reindexing](basics.html#basics-reindexing).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解基于标签的索引和切片的复杂处理，请参阅[索引部分](indexing.html#indexing)。我们将在[重新索引部分](basics.html#basics-reindexing)中讨论重新索引
    / 符合新标签集的基础知识。
- en: '### Data alignment and arithmetic'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据对齐和算术'
- en: Data alignment between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects automatically align on **both the columns and the
    index (row labels)**. Again, the resulting object will have the union of the column
    and row labels.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    对象之间的数据对齐会自动在**列和索引（行标签）**上对齐。同样，结果对象将具有列和行标签的并集。'
- en: '[PRE105]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'When doing an operation between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), the default behavior is to align the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") **index** on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") **columns**, thus [broadcasting](https://numpy.org/doc/stable/user/basics.broadcasting.html)
    row-wise. For example:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")和[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")之间进行操作时，默认行为是将[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")的**索引**与[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的**列**进行对齐，因此以行方式进行[广播](https://numpy.org/doc/stable/user/basics.broadcasting.html)。例如：
- en: '[PRE106]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: For explicit control over the matching and broadcasting behavior, see the section
    on [flexible binary operations](basics.html#basics-binop).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 要显式控制匹配和广播行为，请参阅[灵活的二进制操作](basics.html#basics-binop)部分。
- en: 'Arithmetic operations with scalars operate element-wise:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 与标量进行算术运算是逐元素进行的：
- en: '[PRE107]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Boolean operators operate element-wise as well:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔运算也是逐元素进行的：
- en: '[PRE108]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Transposing
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转置
- en: 'To transpose, access the `T` attribute or [`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose"), similar to an ndarray:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行转置，请访问`T`属性或[`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")，类似于 ndarray：
- en: '[PRE109]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '### DataFrame interoperability with NumPy functions'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '### DataFrame 与 NumPy 函数的互操作性'
- en: Most NumPy functions can be called directly on [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 NumPy 函数可以直接在[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")上调用。
- en: '[PRE110]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is not intended to be a drop-in replacement for ndarray as its indexing semantics
    and data model are quite different in places from an n-dimensional array.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    并不打算成为 ndarray 的直接替代品，因为它的索引语义和数据模型在某些地方与 n 维数组有很大的不同。'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    implements `__array_ufunc__`, which allows it to work with NumPy’s [universal
    functions](https://numpy.org/doc/stable/reference/ufuncs.html).'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    实现了 `__array_ufunc__`，这使其能够与 NumPy 的[通用函数](https://numpy.org/doc/stable/reference/ufuncs.html)一起使用。'
- en: The ufunc is applied to the underlying array in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc 应用于[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")中的底层数组。
- en: '[PRE111]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: When multiple [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    are passed to a ufunc, they are aligned before performing the operation.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")传递给
    ufunc 时，它们在执行操作之前会进行对齐。
- en: Like other parts of the library, pandas will automatically align labeled inputs
    as part of a ufunc with multiple inputs. For example, using `numpy.remainder()`
    on two [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with differently ordered labels will align before the operation.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 与库的其他部分一样，pandas将自动对齐具有多个输入的ufunc的标记输入。例如，在两个具有不同顺序标签的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")上使用`numpy.remainder()`将在操作之前对齐。
- en: '[PRE112]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: As usual, the union of the two indices is taken, and non-overlapping values
    are filled with missing values.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，将取两个索引的并集，并用缺失值填充不重叠的值。
- en: '[PRE113]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: When a binary ufunc is applied to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index"), the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") implementation takes precedence and a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") is returned.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 当对[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index")应用二进制ufunc时，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")实现优先，并返回一个[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")。
- en: '[PRE114]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: NumPy ufuncs are safe to apply to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by non-ndarray arrays, for example [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") (see [Sparse calculation](sparse.html#sparse-calculation)).
    If possible, the ufunc is applied without converting the underlying data to an
    ndarray.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy ufuncs可以安全地应用于由非ndarray数组支持的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，例如[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")（参见[稀疏计算](sparse.html#sparse-calculation)）。如果可能，ufunc将在不将基础数据转换为ndarray的情况下应用。
- en: Console display
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台显示
- en: 'A very large [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will be truncated to display them in the console. You can
    also get a summary using [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"). (The **baseball** dataset is from the **plyr** R package):'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常大的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")将被截断以在控制台中显示。您还可以使用[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info")获取摘要信息。（**baseball**数据集来自**plyr** R包）：
- en: '[PRE115]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'However, using [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") will return a string representation of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in tabular form, though it won’t always fit the console width:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")将以表格形式返回[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的字符串表示，尽管它不总是适合控制台宽度：
- en: '[PRE116]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Wide DataFrames will be printed across multiple rows by default:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，宽DataFrame将跨多行打印：
- en: '[PRE117]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'You can change how much to print on a single row by setting the `display.width`
    option:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`display.width`选项，您可以更改单行打印的数量：
- en: '[PRE118]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: You can adjust the max width of the individual columns by setting `display.max_colwidth`
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`display.max_colwidth`，您可以调整各列的最大宽度
- en: '[PRE119]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: You can also disable this feature via the `expand_frame_repr` option. This will
    print the table in one block.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过`expand_frame_repr`选项禁用此功能。这将以一个块打印表格。
- en: DataFrame column attribute access and IPython completion
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataFrame列属性访问和IPython完成
- en: 'If a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column label is a valid Python variable name, the column can
    be accessed like an attribute:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")列标签是有效的Python变量名，则可以像属性一样访问该列：
- en: '[PRE120]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The columns are also connected to the [IPython](https://ipython.org) completion
    mechanism so they can be tab-completed:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 列也与[IPython](https://ipython.org)完成机制连接，因此可以进行制表符补全：
- en: '[PRE121]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: From dict of Series or dicts
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自Series或dicts的字典
- en: The resulting **index** will be the **union** of the indexes of the various
    Series. If there are any nested dicts, these will first be converted to Series.
    If no columns are passed, the columns will be the ordered list of dict keys.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的**索引**将是各个Series的索引的**并集**。如果有任何嵌套的字典，这些将首先转换为Series。如果未传递任何列，则列将是字典键的有序列表。
- en: '[PRE122]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The row and column labels can be accessed respectively by accessing the **index**
    and **columns** attributes:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 分别通过访问**index**和**columns**属性可以访问行和列标签：
- en: Note
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When a particular set of columns is passed along with a dict of data, the passed
    columns override the keys in the dict.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定的列集与数据字典一起传递时，传递的列会覆盖字典中的键。
- en: '[PRE123]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: From dict of ndarrays / lists
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 ndarray / 列表的字典
- en: All ndarrays must share the same length. If an index is passed, it must also
    be the same length as the arrays. If no index is passed, the result will be `range(n)`,
    where `n` is the array length.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 ndarray 必须具有相同的长度。如果传递了一个索引，它必须与数组的长度相同。如果没有传递索引，结果将是`range(n)`，其中`n`是数组的长度。
- en: '[PRE124]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: From structured or record array
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从结构化或记录数组
- en: This case is handled identically to a dict of arrays.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况与数组字典的处理方式相同。
- en: '[PRE125]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Note
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: DataFrame is not intended to work exactly like a 2-dimensional NumPy ndarray.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 的预期工作方式不是完全像 2 维 NumPy ndarray 一样。
- en: '### From a list of dicts'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从字典的列表'
- en: '[PRE126]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '### From a dict of tuples'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从元组的字典'
- en: You can automatically create a MultiIndexed frame by passing a tuples dictionary.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过传递一个元组字典来自动创建一个 MultiIndexed frame。
- en: '[PRE127]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '### From a Series'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从 Series'
- en: The result will be a DataFrame with the same index as the input Series, and
    with one column whose name is the original name of the Series (only if no other
    column name provided).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个具有与输入 Series 相同索引的 DataFrame，并且只有一个列，其名称是 Series 的原始名称（仅当未提供其他列名时）。
- en: '[PRE128]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '### From a list of namedtuples'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从命名元组的列表'
- en: The field names of the first `namedtuple` in the list determine the columns
    of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    The remaining namedtuples (or tuples) are simply unpacked and their values are
    fed into the rows of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). If any of those tuples is shorter than the first `namedtuple`
    then the later columns in the corresponding row are marked as missing values.
    If any are longer than the first `namedtuple`, a `ValueError` is raised.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中第一个`namedtuple`的字段名确定[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的列。剩余的命名元组（或元组）只是简单地解包，它们的值被输入到[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的行中。如果任何一个元组比第一个`namedtuple`短，那么相应行中后面的列将被标记为缺失值。如果任何一个比第一个`namedtuple`长，将引发`ValueError`。
- en: '[PRE129]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '### From a list of dataclasses'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从数据类的列表'
- en: Data Classes as introduced in [PEP557](https://www.python.org/dev/peps/pep-0557),
    can be passed into the DataFrame constructor. Passing a list of dataclasses is
    equivalent to passing a list of dictionaries.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [PEP557](https://www.python.org/dev/peps/pep-0557) 中介绍的数据类可以传递给 DataFrame
    构造函数。传递一个数据类列表等同于传递一个字典列表。
- en: Please be aware, that all values in the list should be dataclasses, mixing types
    in the list would result in a `TypeError`.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列表中的所有值都应该是数据类，混合类型的列表会导致`TypeError`。
- en: '[PRE130]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '**Missing data**'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺失数据**'
- en: To construct a DataFrame with missing data, we use `np.nan` to represent missing
    values. Alternatively, you may pass a `numpy.MaskedArray` as the data argument
    to the DataFrame constructor, and its masked entries will be considered missing.
    See [Missing data](missing_data.html#missing-data) for more.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 为构造带有缺失数据的 DataFrame，我们使用`np.nan`表示缺失值。或者，您可以将`numpy.MaskedArray`作为数据参数传递给 DataFrame
    构造函数，其掩码条目将被视为缺失值。有关更多信息，请参阅[缺失数据](missing_data.html#missing-data)。
- en: Alternate constructors
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代构造函数
- en: '**DataFrame.from_dict**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_dict**'
- en: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict") takes a dict of dicts or a dict of array-like sequences
    and returns a DataFrame. It operates like the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor except for the `orient` parameter which is `''columns''`
    by default, but which can be set to `''index''` in order to use the dict keys
    as row labels.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_dict()`](../reference/api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")接受一个字典的字典或一个数组样式序列的字典，并返回一个 DataFrame。它的操作类似于[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")构造函数，除了默认情况下是`''columns''`的`orient`参数，但可以设置为`''index''`以将字典键用作行标签。'
- en: '[PRE131]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'If you pass `orient=''index''`, the keys will be the row labels. In this case,
    you can also pass the desired column names:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递`orient='index'`，则键将是行标签。在这种情况下，你也可以传递所需的列名：
- en: '[PRE132]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '**DataFrame.from_records**'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '**DataFrame.from_records**'
- en: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") takes a list of tuples or an ndarray with structured
    dtype. It works analogously to the normal [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") constructor, except that the resulting DataFrame index may
    be a specific field of the structured dtype.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_records()`](../reference/api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") 接受一个元组列表或具有结构化 dtype 的 ndarray。它的工作方式类似于普通的 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 构造函数，只是结果 DataFrame 的索引可能是结构化 dtype 的特定字段。'
- en: '[PRE133]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '### Column selection, addition, deletion'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '### 列选择、添加、删除'
- en: 'You can treat a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") semantically like a dict of like-indexed [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") objects. Getting, setting, and deleting columns works with the
    same syntax as the analogous dict operations:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    在语义上视为具有相同索引的 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    对象的字典。获取、设置和删除列的操作与相应的字典操作具有相同的语法：
- en: '[PRE134]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Columns can be deleted or popped like with a dict:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 列可以像操作字典一样被删除或弹出：
- en: '[PRE135]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'When inserting a scalar value, it will naturally be propagated to fill the
    column:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入一个标量值时，它自然会被传播以填充列：
- en: '[PRE136]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'When inserting a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") that does not have the same index as the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), it will be conformed to the DataFrame’s index:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入一个不具有与 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 相同索引的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 时，它将被调整为 DataFrame 的索引：
- en: '[PRE137]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: You can insert raw ndarrays but their length must match the length of the DataFrame’s
    index.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以插入原始的 ndarray，但它们的长度必须与 DataFrame 的索引长度相匹配。
- en: 'By default, columns get inserted at the end. [`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") inserts at a particular location in the columns:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列会被插入到末尾。[`DataFrame.insert()`](../reference/api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert") 在列中的特定位置插入：
- en: '[PRE138]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '### Assigning new columns in method chains'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '### 在方法链中分配新列'
- en: Inspired by [dplyr’s](https://dplyr.tidyverse.org/reference/mutate.html) `mutate`
    verb, DataFrame has an [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") method that allows you to easily create new columns
    that are potentially derived from existing columns.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 受 [dplyr](https://dplyr.tidyverse.org/reference/mutate.html) `mutate` 动词的启发，DataFrame
    具有一个[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 方法，允许您轻松创建可能派生自现有列的新列。
- en: '[PRE139]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: In the example above, we inserted a precomputed value. We can also pass in a
    function of one argument to be evaluated on the DataFrame being assigned to.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们插入了一个预先计算的值。我们也可以传递一个带有一个参数的函数，该函数将在被分配给的 DataFrame 上评估。
- en: '[PRE140]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **always** returns a copy of the data, leaving the
    original DataFrame untouched.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") **总是** 返回数据的副本，不会改变原始的 DataFrame。'
- en: 'Passing a callable, as opposed to an actual value to be inserted, is useful
    when you don’t have a reference to the DataFrame at hand. This is common when
    using [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") in a chain of operations. For example, we can limit
    the DataFrame to just those observations with a Sepal Length greater than 5, calculate
    the ratio, and plot:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个可调用对象，而不是要插入的实际值，当你手头没有 DataFrame 的引用时会很有用。在一系列操作中使用[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")时，这是很常见的情况。例如，我们可以将 DataFrame 限制为仅包含萼片长度大于5的观测值，计算比率，并绘制：
- en: '[PRE141]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/basics_assign.png](../Images/67b8f4ee2abe121d27a77929ee9748b4.png)'
- en: Since a function is passed in, the function is computed on the DataFrame being
    assigned to. Importantly, this is the DataFrame that’s been filtered to those
    rows with sepal length greater than 5\. The filtering happens first, and then
    the ratio calculations. This is an example where we didn’t have a reference to
    the *filtered* DataFrame available.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传入了一个函数，该函数是在被分配的 DataFrame 上计算的。重要的是，这是被过滤为那些萼片长度大于 5 的行的 DataFrame。过滤首先发生，然后是比率计算。这是一个例子，我们没有
    *过滤* DataFrame 的引用可用。
- en: The function signature for [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") is simply `**kwargs`. The keys are the column names
    for the new fields, and the values are either a value to be inserted (for example,
    a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or NumPy array), or a function of one argument to be called on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). A *copy* of the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is returned, with the new values inserted.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 的函数签名只是 `**kwargs`。键是新字段的列名，值可以是要插入的值（例如，[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 或 NumPy 数组），或者是要在[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 上调用的一个参数的函数。返回原始[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的 *副本*，并插入新值。'
- en: The order of `**kwargs` is preserved. This allows for *dependent* assignment,
    where an expression later in `**kwargs` can refer to a column created earlier
    in the same [`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign").
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`**kwargs` 的顺序被保留。这允许进行*依赖*分配，其中在 `**kwargs` 中较晚的表达式可以引用同一[`assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") 中较早创建的列。'
- en: '[PRE142]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: In the second expression, `x['C']` will refer to the newly created column, that’s
    equal to `dfa['A'] + dfa['B']`.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个表达式中，`x['C']`将引用新创建的列，其等于`dfa['A'] + dfa['B']`。
- en: Indexing / selection
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引/选择
- en: 'The basics of indexing are as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的基础如下所示：
- en: '| Operation | Syntax | Result |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 语法 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Select column | `df[col]` | Series |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| 选择列 | `df[col]` | Series |'
- en: '| Select row by label | `df.loc[label]` | Series |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| 根据标签选择行 | `df.loc[label]` | Series |'
- en: '| Select row by integer location | `df.iloc[loc]` | Series |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| 根据整数位置选择行 | `df.iloc[loc]` | Series |'
- en: '| Slice rows | `df[5:10]` | DataFrame |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| 切片行 | `df[5:10]` | DataFrame |'
- en: '| Select rows by boolean vector | `df[bool_vec]` | DataFrame |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| 根据布尔向量选择行 | `df[bool_vec]` | DataFrame |'
- en: 'Row selection, for example, returns a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") whose index is the columns of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 行选择，例如，返回一个其索引为[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")列的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")：
- en: '[PRE143]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: For a more exhaustive treatment of sophisticated label-based indexing and slicing,
    see the [section on indexing](indexing.html#indexing). We will address the fundamentals
    of reindexing / conforming to new sets of labels in the [section on reindexing](basics.html#basics-reindexing).
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 要对复杂的基于标签的索引和切片进行更全面的处理，请参阅[索引部分](indexing.html#indexing)。我们将在[重新索引部分](basics.html#basics-reindexing)讨论重新索引/符合新标签集的基础知识。
- en: '### Data alignment and arithmetic'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据对齐和算术'
- en: Data alignment between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects automatically align on **both the columns and the
    index (row labels)**. Again, the resulting object will have the union of the column
    and row labels.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    对象之间的数据对齐会自动在**列和索引（行标签）上进行对齐**。同样，结果对象将具有列和行标签的并集。'
- en: '[PRE144]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'When doing an operation between [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), the default behavior is to align the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") **index** on the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") **columns**, thus [broadcasting](https://numpy.org/doc/stable/user/basics.broadcasting.html)
    row-wise. For example:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    和 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    之间进行操作时，默认行为是将 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    的 **索引** 与 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 的 **列** 对齐，从而进行按行广播。例如：
- en: '[PRE145]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: For explicit control over the matching and broadcasting behavior, see the section
    on [flexible binary operations](basics.html#basics-binop).
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 要对匹配和广播行为进行显式控制，请参阅 [灵活的二元操作](basics.html#basics-binop) 部分。
- en: 'Arithmetic operations with scalars operate element-wise:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 与标量的算术运算按元素进行：
- en: '[PRE146]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Boolean operators operate element-wise as well:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔运算也是按元素进行的：
- en: '[PRE147]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Transposing
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转置
- en: 'To transpose, access the `T` attribute or [`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose"), similar to an ndarray:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行转置，访问 `T` 属性或 [`DataFrame.transpose()`](../reference/api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")，类似于 ndarray：
- en: '[PRE148]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '### DataFrame interoperability with NumPy functions'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '### DataFrame 与 NumPy 函数的互操作性'
- en: Most NumPy functions can be called directly on [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 NumPy 函数可以直接在 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 和 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 上调用。
- en: '[PRE149]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is not intended to be a drop-in replacement for ndarray as its indexing semantics
    and data model are quite different in places from an n-dimensional array.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    不打算作为 ndarray 的直接替代品，因为其索引语义和数据模型在某些地方与 n 维数组有很大不同。'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    implements `__array_ufunc__`, which allows it to work with NumPy’s [universal
    functions](https://numpy.org/doc/stable/reference/ufuncs.html).'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    实现了 `__array_ufunc__`，这使其能够与 NumPy 的 [通用函数](https://numpy.org/doc/stable/reference/ufuncs.html)
    一起使用。'
- en: The ufunc is applied to the underlying array in a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    中，ufunc 应用于底层数组。
- en: '[PRE150]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: When multiple [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    are passed to a ufunc, they are aligned before performing the operation.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    传递给一个 ufunc 时，它们在执行操作之前被对齐。
- en: Like other parts of the library, pandas will automatically align labeled inputs
    as part of a ufunc with multiple inputs. For example, using `numpy.remainder()`
    on two [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with differently ordered labels will align before the operation.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 与库的其他部分一样，pandas 在多输入的 ufunc 中会自动对齐带标签的输入。例如，在两个具有不同顺序标签的 [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") 上使用 `numpy.remainder()` 将在操作之前对齐。
- en: '[PRE151]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: As usual, the union of the two indices is taken, and non-overlapping values
    are filled with missing values.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，两个索引的并集被取出，非重叠值填充为缺失值。
- en: '[PRE152]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: When a binary ufunc is applied to a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index"), the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") implementation takes precedence and a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") is returned.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 当对一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    和一个 [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    应用二元 ufunc 时，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    实现优先，并返回一个 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")。
- en: '[PRE153]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: NumPy ufuncs are safe to apply to [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") backed by non-ndarray arrays, for example [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") (see [Sparse calculation](sparse.html#sparse-calculation)).
    If possible, the ufunc is applied without converting the underlying data to an
    ndarray.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy ufuncs可以安全应用于由非ndarray数组支持的[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")，例如[`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray")（参见[稀疏计算](sparse.html#sparse-calculation)）。如果可能，ufunc将在不将基础数据转换为ndarray的情况下应用。
- en: Console display
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台显示
- en: 'A very large [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will be truncated to display them in the console. You can
    also get a summary using [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info"). (The **baseball** dataset is from the **plyr** R package):'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常大的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")将被截断以在控制台中显示。您还可以使用[`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info")获取摘要信息。（**baseball**数据集来自**plyr** R包）：
- en: '[PRE154]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'However, using [`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string") will return a string representation of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in tabular form, though it won’t always fit the console width:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用[`DataFrame.to_string()`](../reference/api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")将以表格形式返回[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的字符串表示，尽管它不总是适合控制台宽度：
- en: '[PRE155]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Wide DataFrames will be printed across multiple rows by default:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，宽数据框将跨多行打印：
- en: '[PRE156]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'You can change how much to print on a single row by setting the `display.width`
    option:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`display.width`选项，可以更改单行打印的数量：
- en: '[PRE157]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: You can adjust the max width of the individual columns by setting `display.max_colwidth`
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`display.max_colwidth`可以调整各列的最大宽度
- en: '[PRE158]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: You can also disable this feature via the `expand_frame_repr` option. This will
    print the table in one block.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过`expand_frame_repr`选项禁用此功能。这将以一个块打印表格。
- en: DataFrame column attribute access and IPython completion
  id: totrans-539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataFrame列属性访问和IPython补全
- en: 'If a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column label is a valid Python variable name, the column can
    be accessed like an attribute:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")列标签是有效的Python变量名，则可以像属性一样访问该列：
- en: '[PRE159]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'The columns are also connected to the [IPython](https://ipython.org) completion
    mechanism so they can be tab-completed:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 列也与[IPython](https://ipython.org)的补全机制相连，因此可以进行制表完成：
- en: '[PRE160]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
