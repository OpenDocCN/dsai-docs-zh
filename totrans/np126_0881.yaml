- en: numpy.fmod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fmod.html](https://numpy.org/doc/1.26/reference/generated/numpy.fmod.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns the element-wise remainder of division.
  prefs: []
  type: TYPE_NORMAL
- en: This is the NumPy implementation of the C library function fmod, the remainder
    has the same sign as the dividend *x1*. It is equivalent to the Matlab(TM) `rem`
    function and should not be confused with the Python modulus operator `x1 % x2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Dividend.
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Divisor. If `x1.shape != x2.shape`, they must be broadcastable to a common shape
    (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the division of *x1* by *x2*. This is a scalar if both *x1*
    and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`remainder`](numpy.remainder.html#numpy.remainder "numpy.remainder")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to the Python `%` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`divide`](numpy.divide.html#numpy.divide "numpy.divide")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The result of the modulo operation for negative dividend and divisors is bound
    by conventions. For [`fmod`](#numpy.fmod "numpy.fmod"), the sign of result is
    the sign of the dividend, while for [`remainder`](numpy.remainder.html#numpy.remainder
    "numpy.remainder") the sign of the result is the sign of the divisor. The [`fmod`](#numpy.fmod
    "numpy.fmod") function is equivalent to the Matlab(TM) `rem` function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
