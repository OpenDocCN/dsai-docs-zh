- en: Constants of the numpy.ma module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ma模块的常量
- en: 原文：[https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html](https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html](https://numpy.org/doc/1.26/reference/maskedarray.baseclass.html)
- en: In addition to the [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    class, the [`numpy.ma`](maskedarray.generic.html#module-numpy.ma "numpy.ma") module
    defines several constants.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")类之外，[`numpy.ma`](maskedarray.generic.html#module-numpy.ma
    "numpy.ma")模块还定义了几个常量。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The [`masked`](#numpy.ma.masked "numpy.ma.masked") constant is a special case
    of [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray"), with a float
    datatype and a null shape. It is used to test whether a specific entry of a masked
    array is masked, or to mask one or several entries of a masked array:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`masked`](#numpy.ma.masked "numpy.ma.masked")常量是[`MaskedArray`](#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray")的一个特例，具有浮点数据类型和空形状。它用于测试掩码数组的特定条目是否被掩码，或者掩盖掩码数组的一个或多个条目：'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Value indicating that a masked array has no invalid entry. [`nomask`](#numpy.ma.nomask
    "numpy.ma.nomask") is used internally to speed up computations when the mask is
    not needed. It is represented internally as `np.False_`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表示掩码数组没有无效条目的值。[`nomask`](#numpy.ma.nomask "numpy.ma.nomask")在不需要掩码时用于加速计算。在内部表示为`np.False_`。
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: String used in lieu of missing data when a masked array is printed. By default,
    this string is `'--'`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打印掩码数组时用作缺失数据的字符串。默认情况下，此字符串为`'--'`��
- en: 'Use `set_display()` to change the default string. Example usage: `numpy.ma.masked_print_option.set_display(''X'')`
    replaces missing data with `''X''`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`set_display()`来更改默认字符串。示例用法：`numpy.ma.masked_print_option.set_display('X')`用`'X'`替换缺失数据。
- en: '# The [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") class'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '# [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")类'
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A subclass of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    designed to manipulate numerical arrays with missing data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")的子类，设计用于处理带有缺失数据的数值数组。
- en: 'An instance of [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")
    can be thought as the combination of several elements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")的实例可以被看作是几个元素的组合：
- en: The [`data`](#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data"), as a regular
    [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    of any shape or datatype (the data).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`data`](#numpy.ma.MaskedArray.data "numpy.ma.MaskedArray.data")，作为任何形状或数据类型的常规[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")（数据）。'
- en: A boolean [`mask`](#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask") with
    the same shape as the data, where a `True` value indicates that the corresponding
    element of the data is invalid. The special value [`nomask`](#numpy.ma.nomask
    "numpy.ma.nomask") is also acceptable for arrays without named fields, and indicates
    that no data is invalid.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个与数据形状相同的布尔[`mask`](#numpy.ma.MaskedArray.mask "numpy.ma.MaskedArray.mask")，其中`True`值表示数据的相应元素无效。特殊值[`nomask`](#numpy.ma.nomask
    "numpy.ma.nomask")也适用于没有命名字段的数组，并指示没有数据无效。
- en: A [`fill_value`](#numpy.ma.MaskedArray.fill_value "numpy.ma.MaskedArray.fill_value"),
    a value that may be used to replace the invalid entries in order to return a standard
    [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`fill_value`](#numpy.ma.MaskedArray.fill_value "numpy.ma.MaskedArray.fill_value")，一个值，可以用来替换无效条目，以返回一个标准的[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")。
- en: '## Attributes and properties of masked arrays'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '## 掩码数组的属性和特性'
- en: See also
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Array Attributes](arrays.ndarray.html#arrays-ndarray-attributes)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组属性](arrays.ndarray.html#arrays-ndarray-attributes)'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Returns the underlying data, as a view of the masked array.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层数据，作为掩码数组的视图。
- en: If the underlying data is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it is returned as such.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层数据是[`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")的子类，则返回为此。
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The type of the data can be accessed through the [`baseclass`](#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的类型可以通过[`baseclass`](#numpy.ma.MaskedArray.baseclass "numpy.ma.MaskedArray.baseclass")属性访问。
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Current mask.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当前掩码。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Get or set the mask of the array if it has no named fields. For structured
    arrays, returns a ndarray of booleans where entries are `True` if **all** the
    fields are masked, `False` otherwise:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 获取或设置数组的掩码，如果没有命名字段。对于结构化数组，返回一个布尔值的ndarray，其中条目如果**所有**字段都被掩码，则为`True`，否则为`False`：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The filling value of the masked array is a scalar. When setting, None will set
    to a default based on the data type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组的填充值是一个标量。在设置时，如果为None，则会根据数据类型设置为默认值。
- en: Examples
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Reset to default:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重置为默认值：
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Class of the underlying data (read-only).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 底层数据的类（只读）。
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Share status of the mask (read-only).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码的共享状态（只读）。
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Specifies whether values can be unmasked through assignments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 指定是否可以通过赋值取消掩码。
- en: By default, assigning definite values to masked array entries will unmask them.
    When [`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")
    is `True`, the mask will not change through assignments.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，为掩码数组条目分配确定值将取消掩码。当[`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")为`True`时，掩码不会通过赋值而改变。
- en: See also
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
- en: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
- en: Examples
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since *m* has a soft mask, assigning an element value unmasks that element:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于*m*具有软掩码，分配元素值会取消该元素的掩码：
- en: '[PRE18]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After hardening, the mask is not affected by assignments:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 硬化后，掩码不会受到赋值的影响：
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") is a subclass
    of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), a
    masked array also inherits all the attributes and properties of a [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") instance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray")是[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类，因此掩码数组也继承了[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")实例的所有属性和特性。
- en: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | Base object if memory is from some other object.
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | 如果内存来自其他对象，则为基本对象。 |'
- en: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | An object to simplify the interaction of the
    array with the ctypes module. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | 用于简化数组与ctypes模块交互的对象。 |'
- en: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | Data-type of the array''s elements. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | 数组元素的数据类型。 |'
- en: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | Information about the memory layout of the array.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | 有关数组内存布局的信息。 |'
- en: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | Length of one array element in bytes. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | 一个数组元素的长度（以字节为单位）。 |'
- en: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | Total bytes consumed by the elements of the array.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | 数组元素消耗的总字节数。 |'
- en: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | Number of array dimensions. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | 数组维度的数量。 |'
- en: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | Tuple of array dimensions. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | 数组维度的元组。 |'
- en: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | Number of elements in the array. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | 数组中的元素数量。 |'
- en: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | Tuple of bytes to step in each dimension when
    traversing an array. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | 遍历数组时在每个维度中前进的字节数的元组。 |'
- en: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | The imaginary part of the masked array. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | 掩码数组的虚部。 |'
- en: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | The real part of the masked array. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | 掩码数组的实部。 |'
- en: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | Return a flat iterator, or set a flattened version
    of self to value. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | 返回一个扁平迭代器，或将自身的扁平版本设置为值。 |'
- en: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |  ## Attributes and properties
    of masked arrays'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |  ## 掩码数组的属性和属性'
- en: See also
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array Attributes](arrays.ndarray.html#arrays-ndarray-attributes)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组属性](arrays.ndarray.html#arrays-ndarray-attributes)'
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Returns the underlying data, as a view of the masked array.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回作为掩码数组视图的基础数据。
- en: If the underlying data is a subclass of [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), it is returned as such.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果基础数据是 [`numpy.ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    的子类，则将其作为这样返回。
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The type of the data can be accessed through the [`baseclass`](#numpy.ma.MaskedArray.baseclass
    "numpy.ma.MaskedArray.baseclass") attribute.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`baseclass`](#numpy.ma.MaskedArray.baseclass "numpy.ma.MaskedArray.baseclass")
    属性可以访问数据的类型。
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Current mask.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当前掩码。
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Get or set the mask of the array if it has no named fields. For structured
    arrays, returns a ndarray of booleans where entries are `True` if **all** the
    fields are masked, `False` otherwise:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 获取或设置数组的掩码，如果没有命名字段。对于结构化数组，返回一个布尔值的 ndarray，其中条目为 `True` 表示**所有**字段都被掩码���否则为
    `False`：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The filling value of the masked array is a scalar. When setting, None will set
    to a default based on the data type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码数组的填充值是一个标量。在设置时，如果为 None，则会根据数据类型设置为默认值。
- en: Examples
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Reset to default:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重置为默认值：
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Class of the underlying data (read-only).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基础数据的类（只读）。
- en: '[PRE30]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Share status of the mask (read-only).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 共享掩码的状态（只读）。
- en: '[PRE31]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Specifies whether values can be unmasked through assignments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 指定是否可以通过赋值取消掩码。
- en: By default, assigning definite values to masked array entries will unmask them.
    When [`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")
    is `True`, the mask will not change through assignments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，为掩码数组条目分配确定值将取消掩码。当 [`hardmask`](#numpy.ma.MaskedArray.hardmask "numpy.ma.MaskedArray.hardmask")
    为 `True` 时，掩码不会通过赋值而改变。
- en: See also
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")'
- en: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")'
- en: Examples
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Since *m* has a soft mask, assigning an element value unmasks that element:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 *m* 具有软掩码，分配元素值会取消该元素的掩码：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After hardening, the mask is not affected by assignments:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 硬化后，掩码不受赋值影响：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") is a subclass
    of [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), a
    masked array also inherits all the attributes and properties of a [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") instance.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 [`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") 是 [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 的子类，掩码数组也继承了 [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 实例的所有属性和属性。
- en: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | Base object if memory is from some other object.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.base`](generated/numpy.ma.MaskedArray.base.html#numpy.ma.MaskedArray.base
    "numpy.ma.MaskedArray.base") | 如果内存来自其他对象，则返回基础对象。 |'
- en: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | An object to simplify the interaction of the
    array with the ctypes module. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ctypes`](generated/numpy.ma.MaskedArray.ctypes.html#numpy.ma.MaskedArray.ctypes
    "numpy.ma.MaskedArray.ctypes") | 一个简化数组与 ctypes 模块交互的对象。 |'
- en: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | Data-type of the array''s elements. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dtype`](generated/numpy.ma.MaskedArray.dtype.html#numpy.ma.MaskedArray.dtype
    "numpy.ma.MaskedArray.dtype") | 数组元素的数据类型。 |'
- en: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | Information about the memory layout of the array.
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flags`](generated/numpy.ma.MaskedArray.flags.html#numpy.ma.MaskedArray.flags
    "numpy.ma.MaskedArray.flags") | 关于数组内存布局的信息。 |'
- en: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | Length of one array element in bytes. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.itemsize`](generated/numpy.ma.MaskedArray.itemsize.html#numpy.ma.MaskedArray.itemsize
    "numpy.ma.MaskedArray.itemsize") | 一个数组元素的字节长度。 |'
- en: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | Total bytes consumed by the elements of the array.
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.nbytes`](generated/numpy.ma.MaskedArray.nbytes.html#numpy.ma.MaskedArray.nbytes
    "numpy.ma.MaskedArray.nbytes") | 数组元素消耗的总字节数。 |'
- en: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | Number of array dimensions. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ndim`](generated/numpy.ma.MaskedArray.ndim.html#numpy.ma.MaskedArray.ndim
    "numpy.ma.MaskedArray.ndim") | 数组的维度数。 |'
- en: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | Tuple of array dimensions. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.shape`](generated/numpy.ma.MaskedArray.shape.html#numpy.ma.MaskedArray.shape
    "numpy.ma.MaskedArray.shape") | 数组维度的元组。 |'
- en: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | Number of elements in the array. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.size`](generated/numpy.ma.MaskedArray.size.html#numpy.ma.MaskedArray.size
    "numpy.ma.MaskedArray.size") | 数组中的元素数。 |'
- en: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | Tuple of bytes to step in each dimension when
    traversing an array. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.strides`](generated/numpy.ma.MaskedArray.strides.html#numpy.ma.MaskedArray.strides
    "numpy.ma.MaskedArray.strides") | 遍历数组时在每个维度上移动的字节数元组。 |'
- en: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | The imaginary part of the masked array. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.imag`](generated/numpy.ma.MaskedArray.imag.html#numpy.ma.MaskedArray.imag
    "numpy.ma.MaskedArray.imag") | 掩码数组的虚部。 |'
- en: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | The real part of the masked array. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.real`](generated/numpy.ma.MaskedArray.real.html#numpy.ma.MaskedArray.real
    "numpy.ma.MaskedArray.real") | 掩码数组的实部。 |'
- en: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | Return a flat iterator, or set a flattened version
    of self to value. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flat`](generated/numpy.ma.MaskedArray.flat.html#numpy.ma.MaskedArray.flat
    "numpy.ma.MaskedArray.flat") | 返回一个扁平迭代器，或将自身的扁平版本设置为值。 |'
- en: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__array_priority__`](generated/numpy.ma.MaskedArray.__array_priority__.html#numpy.ma.MaskedArray.__array_priority__
    "numpy.ma.MaskedArray.__array_priority__") |  |'
- en: '[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") methods'
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[`MaskedArray`](#numpy.ma.MaskedArray "numpy.ma.MaskedArray") 方法'
- en: See also
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array methods](arrays.ndarray.html#array-ndarray-methods)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组方法](arrays.ndarray.html#array-ndarray-methods)'
- en: Conversion
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | Convert to float. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | 转换为浮点数。 |'
- en: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | Convert to int. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | 转换为整数。 |'
- en: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | Return a view of the
    MaskedArray data. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | 返回 MaskedArray 数据的视图。
    |'
- en: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | Copy of the array,
    cast to a specified type. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | 数组的副本，转换为指定类型。
    |'
- en: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | Swap the bytes of the array elements
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | 交换数组元素的字节顺序 |'
- en: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | 将所有非掩码数据作为一维数组返回。 |'
- en: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | 返回一个副本，其中掩码值被给定值填充。 |'
- en: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | 以二进制格式将掩码数组保存到文件中。 |'
- en: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | 将掩码数组转换为灵活类型数组。 |'
- en: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | 将掩码数组的数据部分作为分层Python列表返回。 |'
- en: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | 将掩码数组转换为灵活类型数组。 |'
- en: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | A compatibility alias
    for *tobytes*, with exactly the same behavior. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | *tobytes*的兼容别名，具有完全相同的行为。
    |'
- en: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | 将数组数据作为包含数组中原始字节的字符串返回。
    |'
- en: Shape manipulation
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状操作
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于reshape、resize和transpose，单个元组参数可以替换为`n`个整数，这将被解释为n元组。
- en: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | 返回将数组折叠为一维的副本。 |'
- en: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | 返回自身的一维版本，作为视图。 |'
- en: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | 为数组赋予新形状，而不更改其数据。 |'
- en: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
- en: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | 返回*axis1*和*axis2*互换的数组视图。 |'
- en: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回轴转置的数组视图。 |'
- en: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | View of the transposed array. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | 转置数组的视图。 |'
- en: Item selection and manipulation
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目选择和操作
- en: For array methods that take an `axis` keyword, it defaults to None. If axis
    is None, then the array is treated as a 1-D array. Any other value for `axis`
    represents the dimension along which the operation should proceed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有`axis`关键字的数组方法，默认为 None。如果 axis 为 None，则将数组视为 1-D 数组。`axis`的任何其他值表示应该进行操作的维度。
- en: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | Returns array of
    indices of the maximum values along the given axis. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | 返回沿给定轴的最大值的索引数组。
    |'
- en: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | Return array of
    indices to the minimum values along the given axis. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | 返回沿给定轴的最小值的索引数组。
    |'
- en: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | 返回沿指定轴对数组进行排序的索引的
    ndarray。 |'
- en: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | 使用索引数组从一组选择中构建新数组。 |'
- en: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | Return *a* where condition
    is `True`. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | 当条件为`True`时返回*a*。 |'
- en: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | 返回指定的对角线。 |'
- en: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | Fill the array with a scalar value. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | 用标量值填充数组。 |'
- en: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | Copy an element of an array to a standard
    Python scalar and return it. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | 将数组的一个元素复制到标准的 Python 标量并返回。 |'
- en: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | 返回未屏蔽且非零元素的索引。 |'
- en: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | Set storage-indexed locations
    to corresponding values. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | 将存储索引位置设置为相应的值。 |'
- en: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | Repeat elements of an array.
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | 重复数组的元素。 |'
- en: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | 找到应将 v 的元素插入 a 中以保持顺序的索引。
    |'
- en: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | 对数组进行排序，就地排序。 |'
- en: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
- en: Pickling and copy
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pickling and copy
- en: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | 返回数组的副本。 |'
- en: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | Dump a pickle of the array to the specified
    file. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | 将数组的 pickle 格式数据存储到指定文件中。 |'
- en: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | Returns the pickle of the array as a string.
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | 返回数组的 pickle 格式字符串。 |'
- en: Calculations
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算
- en: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | 如果所有元素都为 True，则返回 True。 |'
- en: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | 计算沿指定轴的异常值（与算术平均值的偏差）。 |'
- en: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | 如果数组 *a* 中的任何元素为 True，则返回
    True。 |'
- en: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | 返回数值限制在`[min, max]`范围内的数组。 |'
- en: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | Complex-conjugate all elements. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | 对所有元素进行复共轭。 |'
- en: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | Return the complex conjugate, element-wise.
    |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | 返回复共轭，逐元素操作。 |'
- en: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | 沿指定轴返回数组元素的累积积。 |'
- en: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | 沿指定轴返回数组元素的累积和。 |'
- en: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | 返回沿给定轴的最大值。 |'
- en: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的平均值。
    |'
- en: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | 返回沿给定轴的最小值。 |'
- en: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的乘积。 |'
- en: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的乘积。
    |'
- en: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | 返回沿给定维度的最大值和最小值之差（即峰值到峰值）。
    |'
- en: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | 返回每个元素四舍五入到指定的小数位数。 |'
- en: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | 返回沿指定轴的数组元素的标准差。
    |'
- en: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | 返回沿指定轴的数组元素的和。 |'
- en: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | 返回数组对角线上的和。 |'
- en: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | 计算沿指定轴的方差。 |'
- en: Arithmetic and comparison operations
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术和比较运算
- en: '### Comparison operators:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '### 比较运算符:'
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | 返回 self<value。 |'
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | 返回 self<=value。 |'
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | 返回 self>value。 |'
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | 返回 self>=value。 |'
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | 逐元素检查其他是否等于自身。 |'
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | 逐元素检查其他是否不等于自身。 |'
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组的真值（[`bool()`](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")）：
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | 如果自身为真则为True，否则为False |'
- en: 'Arithmetic:'
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算：
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | 将自身加到其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | 将其他加到自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | 从自身减去其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | 从其他中减去自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | 将自身乘以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | 将其他乘以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | 将自身除以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | 将 other 除以 self，返回一个新的掩盖数组。 |'
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | 返回 self 除以 value 的余数。 |'
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | 返回 value 除以 self 的余数。 |'
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | 返回 self 除以 value 的商和余数。 |'
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | 返回 value 除以 self 的商和余数。 |'
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | 将 self 的 other 次方，同时掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | 将 other 的 self 次方，同时掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | 返回 self 向左移动 value 位的结果。 |'
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | 返回 value 向左移动 self 位的结果。 |'
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | 返回 self 向右移动 value 位的结果。 |'
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | 返回 value 向右移动 self 位的结果。 |'
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | 返回 self 和 value 的按位与运算结果。 |'
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | 返回 value 和 self 的按位与运算结果。 |'
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | 返回 self 和 value 的按位或运算结果。 |'
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | 返回 value 和 self 的按位或运算结果。 |'
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | 返回 self 和 value 的按位异或运算结果。 |'
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | 返回 value^self�� |'
- en: 'Arithmetic, in-place:'
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术，就地修改：
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | 将其他数加到自身，就地修改。 |'
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | 将其他数从自身减去，就地修改。 |'
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | 将自身与其他数相乘，就地修改。 |'
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | 将自身与其他数相除，就地修改。 |'
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | 将自身与其他数真除，就地修改。 |'
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | 将自身与其他数整除，就地修改。 |'
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | 返回 self%=value。 |'
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | 将自身的幂运算为其他数，就地修改。 |'
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | 返回 self<<=value。 |'
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | 返回 self>>=value。 |'
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | 返回 self&=value。 |'
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | 返回 self&#124;=value。 |'
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | 返回 self^=value。 |'
- en: Representation
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示形式
- en: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | Literal string representation. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | 字面字符串表示。 |'
- en: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | Return str(self). |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | 返回 str(self)。 |'
- en: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | Return the addresses of the data and mask areas.
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | 返回数据和掩码区域的地址。 |'
- en: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | Return a boolean indicating whether the
    data is contiguous. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | 返回一个布尔值，指示数据是否是连续的。 |'
- en: Special methods
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊方法
- en: 'For standard library functions:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标准库函数：
- en: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | 如果在数组上调用 [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(在 Python v3.11 中)")，则使用此方法。 |'
- en: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | 如果在数组上调用 [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(在 Python v3.11 中)")，则使用此方法。 |'
- en: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | Return the internal state of the masked
    array, for pickling purposes. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | 返回掩码数组的内部状态，用于pickle目的。 |'
- en: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | Return a 3-tuple for pickling a MaskedArray.
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | 返回用于pickle MaskedArray的3元组。 |'
- en: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | Restore the internal state of the
    masked array, for pickling purposes. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | 恢复掩码数组的内部状态，用于pickle目的。 |'
- en: 'Basic customization:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 基本定制：
- en: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | Create a new masked
    array from scratch. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | 从头开始创建一个新的掩码数组。 |'
- en: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | Returns either a new reference
    to self if dtype is not given or a new array of provided data type if dtype is
    different from the current dtype of the array. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | 如果未提供dtype，则返回对自身的新引用，如果dtype与数组的当前dtype不同，则返回提供的数据类型的新数组。
    |'
- en: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | Special hook for ufuncs.
    |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | 用于ufuncs的特殊钩子。 |'
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 容器定制：（参见 [索引](arrays.indexing.html#arrays-indexing)）
- en: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | Return len(self). |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | 返回 len(self)。 |'
- en: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y] |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y] |'
- en: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
- en: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | Delete self[key]. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | 删除self[key]。 |'
- en: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | Return key in self. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | 返回self中的key。 |'
- en: Specific methods
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定方法
- en: Handling the mask
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理掩码
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法可用于访问有关掩码的信息或操作掩码。
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | 设置掩码。 |'
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制掩码为硬掩码，防止通过赋值取消掩码。 |'
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制掩码为软掩码（默认），允许通过赋值取消掩码。 |'
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。 |'
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码减少到nomask。 |'
- en: Handling the *fill_value*
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理*fill_value*
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组的填充值是一个标量。 |'
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: Counting the missing elements
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计缺失元素
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | 计算数组沿给定轴的非掩码元素数。 |'
- en: Conversion
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | Convert to float. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__float__`](generated/numpy.ma.MaskedArray.__float__.html#numpy.ma.MaskedArray.__float__
    "numpy.ma.MaskedArray.__float__")() | 转换为浮点数。 |'
- en: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | Convert to int. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__int__`](generated/numpy.ma.MaskedArray.__int__.html#numpy.ma.MaskedArray.__int__
    "numpy.ma.MaskedArray.__int__")() | 转换为整数。 |'
- en: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | Return a view of the
    MaskedArray data. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.view`](generated/numpy.ma.MaskedArray.view.html#numpy.ma.MaskedArray.view
    "numpy.ma.MaskedArray.view")([dtype, type, fill_value]) | 返回MaskedArray数据的视图。
    |'
- en: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | Copy of the array,
    cast to a specified type. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.astype`](generated/numpy.ma.MaskedArray.astype.html#numpy.ma.MaskedArray.astype
    "numpy.ma.MaskedArray.astype")(dtype[, order, casting, ...]) | 数组的副本，转换为指定类型。
    |'
- en: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | Swap the bytes of the array elements
    |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.byteswap`](generated/numpy.ma.MaskedArray.byteswap.html#numpy.ma.MaskedArray.byteswap
    "numpy.ma.MaskedArray.byteswap")([inplace]) | 交换数组元素的字节 |'
- en: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | 将所有非掩盖数据作为1-D数组返回。 |'
- en: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | 返回一个副本，其中掩盖的值被填充为给定值。 |'
- en: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | 以二进制格式将掩盖数组保存到文件中。 |'
- en: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.toflex`](generated/numpy.ma.MaskedArray.toflex.html#numpy.ma.MaskedArray.toflex
    "numpy.ma.MaskedArray.toflex")() | 将掩盖数组转换为灵活类型数组。 |'
- en: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | 将掩盖数组的数据部分作为分层Python列表返回。 |'
- en: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | 将掩盖数组转换为灵活类型数组。 |'
- en: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | A compatibility alias
    for *tobytes*, with exactly the same behavior. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tostring`](generated/numpy.ma.MaskedArray.tostring.html#numpy.ma.MaskedArray.tostring
    "numpy.ma.MaskedArray.tostring")([fill_value, order]) | *tobytes*的兼容别名，具有完全相同的行为。
    |'
- en: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | 将数组数据作为包含数组中原始字节的字符串返回。
    |'
- en: Shape manipulation
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状操作
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 对于reshape、resize和transpose，单个元组参数可以用`n`个整数替换，这些整数将被解释为一个n元组。
- en: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | 返回将数组折叠为一维的副本。 |'
- en: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | 返回一个作为视图的self的1D版本。 |'
- en: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | 给数组一个新的形状，但不改变其数据。 |'
- en: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, order]) |  |'
- en: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | 从*a*中删除长度为一的轴。 |'
- en: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | 返回数组的 *axis1* 和 *axis2* 互换的视图。
    |'
- en: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | 返回数组的轴转置视图。 |'
- en: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | View of the transposed array. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.T`](generated/numpy.ma.MaskedArray.T.html#numpy.ma.MaskedArray.T
    "numpy.ma.MaskedArray.T") | 转置数组的视图。 |'
- en: Item selection and manipulation
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目选择和操作
- en: For array methods that take an `axis` keyword, it defaults to None. If axis
    is None, then the array is treated as a 1-D array. Any other value for `axis`
    represents the dimension along which the operation should proceed.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有 `axis` 关键字的数组方法，默认为 None。如果 axis 为 None，则将数组视为 1-D 数组。`axis` 的任何其他值表示应该进行操作的维度。
- en: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | Returns array of
    indices of the maximum values along the given axis. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, out, ...]) | 返回沿给定轴的最大值的索引数组。
    |'
- en: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | Return array of
    indices to the minimum values along the given axis. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, out, ...]) | 返回沿给定轴的最小值的索引数组。
    |'
- en: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | 返回沿指定轴对数组进行排序的索引数组。
    |'
- en: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.choose`](generated/numpy.ma.MaskedArray.choose.html#numpy.ma.MaskedArray.choose
    "numpy.ma.MaskedArray.choose")(choices[, out, mode]) | 使用索引数组从一组选择中构建新数组。 |'
- en: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | Return *a* where condition
    is `True`. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.compress`](generated/numpy.ma.MaskedArray.compress.html#numpy.ma.MaskedArray.compress
    "numpy.ma.MaskedArray.compress")(condition[, axis, out]) | 返回条件为 `True` 时的 *a*。
    |'
- en: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.diagonal`](generated/numpy.ma.MaskedArray.diagonal.html#numpy.ma.MaskedArray.diagonal
    "numpy.ma.MaskedArray.diagonal")([offset, axis1, axis2]) | 返回指定的对角线。 |'
- en: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | Fill the array with a scalar value. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.fill`](generated/numpy.ma.MaskedArray.fill.html#numpy.ma.MaskedArray.fill
    "numpy.ma.MaskedArray.fill")(value) | 用标量值填充数组。 |'
- en: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | Copy an element of an array to a standard
    Python scalar and return it. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.item`](generated/numpy.ma.MaskedArray.item.html#numpy.ma.MaskedArray.item
    "numpy.ma.MaskedArray.item")(*args) | 将数组的元素复制到标准的 Python 标量并返回。 |'
- en: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | 返回非零未屏蔽元素的索引。 |'
- en: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | Set storage-indexed locations
    to corresponding values. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.put`](generated/numpy.ma.MaskedArray.put.html#numpy.ma.MaskedArray.put
    "numpy.ma.MaskedArray.put")(indices, values[, mode]) | 将存储索引位置设置为相应的值。 |'
- en: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | Repeat elements of an array.
    |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.repeat`](generated/numpy.ma.MaskedArray.repeat.html#numpy.ma.MaskedArray.repeat
    "numpy.ma.MaskedArray.repeat")(repeats[, axis]) | 重复数组的元素。'
- en: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.searchsorted`](generated/numpy.ma.MaskedArray.searchsorted.html#numpy.ma.MaskedArray.searchsorted
    "numpy.ma.MaskedArray.searchsorted")(v[, side, sorter]) | 找到应将v的元素插入a中以保持顺序的索引。'
- en: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | 对数组进行排序，就地操作。'
- en: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.take`](generated/numpy.ma.MaskedArray.take.html#numpy.ma.MaskedArray.take
    "numpy.ma.MaskedArray.take")(indices[, axis, out, mode]) |  |'
- en: Pickling and copy
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pickling and copy
- en: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | 返回数组的副本。'
- en: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | Dump a pickle of the array to the specified
    file. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dump`](generated/numpy.ma.MaskedArray.dump.html#numpy.ma.MaskedArray.dump
    "numpy.ma.MaskedArray.dump")(file) | 将数组的pickle转储到指定文件。'
- en: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | Returns the pickle of the array as a string.
    |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.dumps`](generated/numpy.ma.MaskedArray.dumps.html#numpy.ma.MaskedArray.dumps
    "numpy.ma.MaskedArray.dumps")() | 返回数组的pickle作为字符串。'
- en: Calculations
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算
- en: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | 如果所有元素求值为True，则返回True。'
- en: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | 计算沿给定轴的异常值（与算术平均值的偏差）。'
- en: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | 如果*a*的任何元素求值为True，则返回True。'
- en: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | 返回其值限制在`[min, max]`的数组。'
- en: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | Complex-conjugate all elements. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.conj`](generated/numpy.ma.MaskedArray.conj.html#numpy.ma.MaskedArray.conj
    "numpy.ma.MaskedArray.conj")() | 对所有元素进行复共轭。'
- en: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | Return the complex conjugate, element-wise.
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.conjugate`](generated/numpy.ma.MaskedArray.conjugate.html#numpy.ma.MaskedArray.conjugate
    "numpy.ma.MaskedArray.conjugate")() | 返回逐元素的复共轭。'
- en: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | 返回给定轴上数组元素的紪积。'
- en: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | 返回给定轴上数组元素的累积和。'
- en: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | 返回沿指定轴的最大值。 |'
- en: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的平均值。
    |'
- en: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | 返回沿指定轴的最小值。 |'
- en: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的乘积。 |'
- en: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.product`](generated/numpy.ma.MaskedArray.product.html#numpy.ma.MaskedArray.product
    "numpy.ma.MaskedArray.product")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的乘积。
    |'
- en: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | 返回沿给定维度的（最大值 - 最小值）。
    |'
- en: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | 返回每个元素四舍五入到指定小数位数。 |'
- en: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | 返回沿给定轴的数组元素的标准差。
    |'
- en: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | 返回沿给定轴的数组元素的和。 |'
- en: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | 返回数组对角线上的和。 |'
- en: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | 计算沿指定轴的方差。 |'
- en: Arithmetic and comparison operations
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术和比较操作
- en: '### Comparison operators:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '### 比较运算符：'
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | 返回self<value。 |'
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | 返回self<=value。 |'
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | 返回self>value。 |'
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | 返回self>=value。 |'
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | 逐元素检查其他是否等于自身。 |'
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | 逐元素检查其他是否不等于自身。 |'
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组的真值（[`bool()`](https://docs.python.org/3/library/functions.html#bool "(在 Python
    v3.11 中)"))：
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | 如果自身为真则为True，否则为False。 |'
- en: 'Arithmetic:'
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算：
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | 将自身加上其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | 将其他加到自身上，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | 将其他从自身减去，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | 将自身从其他减去，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | 将自身乘以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | 将其他乘以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | 将自身除以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | 将 self 除以 other，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | 返回 self%value。 |'
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | 返回 value%self。 |'
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | 返回 divmod(self, value)。 |'
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | 返回 divmod(value, self)。 |'
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | 将 self 提升为 other 的幂，掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | 将 other 提升为 self 的幂，掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | 返回 self<<value。 |'
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | 返回 value<<self。 |'
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | 返回 self>>value。 |'
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | 返回 value>>self。 |'
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | 返回 self&value。 |'
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | 返回 value&self。 |'
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | 返回 self|value。 |'
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | 返回 value|self。 |'
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | 返回 self^value。 |'
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | 返回 value^self。 |'
- en: 'Arithmetic, in-place:'
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术，就地操作：
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | 将 other 添加到 self 中。 |'
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | 将 other 从 self 中减去。 |'
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | 就地将 self 乘以 other。 |'
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | 就地将 self 除以 other。 |'
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | 就地将 self 除以 other。 |'
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | 就地将 self 地板除以 other。 |'
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | 返回 self%=value。 |'
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | 就地将 self 的幂提升为 other。 |'
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | 返回 self<<=value。 |'
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | 返回 self>>=value。 |'
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | 返回 self&=value。 |'
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | 返回 self|=value。 |'
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | 返回 self^=value。 |'
- en: '### Comparison operators:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '### 比较运算符：'
- en: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | Return self<value. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lt__`](generated/numpy.ma.MaskedArray.__lt__.html#numpy.ma.MaskedArray.__lt__
    "numpy.ma.MaskedArray.__lt__")(other) | 返回 self<value。 |'
- en: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | Return self<=value. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__le__`](generated/numpy.ma.MaskedArray.__le__.html#numpy.ma.MaskedArray.__le__
    "numpy.ma.MaskedArray.__le__")(other) | 返回 self<=value。 |'
- en: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | Return self>value. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__gt__`](generated/numpy.ma.MaskedArray.__gt__.html#numpy.ma.MaskedArray.__gt__
    "numpy.ma.MaskedArray.__gt__")(other) | 返回 self>value。 |'
- en: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | Return self>=value. |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ge__`](generated/numpy.ma.MaskedArray.__ge__.html#numpy.ma.MaskedArray.__ge__
    "numpy.ma.MaskedArray.__ge__")(other) | 返回 self>=value。 |'
- en: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | Check whether other equals self elementwise.
    |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__eq__`](generated/numpy.ma.MaskedArray.__eq__.html#numpy.ma.MaskedArray.__eq__
    "numpy.ma.MaskedArray.__eq__")(other) | 逐元素检查其他是否等于自身。 |'
- en: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | Check whether other does not equal self
    elementwise. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ne__`](generated/numpy.ma.MaskedArray.__ne__.html#numpy.ma.MaskedArray.__ne__
    "numpy.ma.MaskedArray.__ne__")(other) | 逐元素检查其他是否不等于自身。 |'
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组的真值（[`bool()`](https://docs.python.org/3/library/functions.html#bool "(在 Python
    v3.11 中)"))：
- en: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | True if self else False |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__bool__`](generated/numpy.ma.MaskedArray.__bool__.html#numpy.ma.MaskedArray.__bool__
    "numpy.ma.MaskedArray.__bool__")(/) | 如果 self 为真则返回 True，否则返回 False。 |'
- en: 'Arithmetic:'
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算：
- en: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__abs__`](generated/numpy.ma.MaskedArray.__abs__.html#numpy.ma.MaskedArray.__abs__
    "numpy.ma.MaskedArray.__abs__")(self) |  |'
- en: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | Add self to other, and return a new masked
    array. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__add__`](generated/numpy.ma.MaskedArray.__add__.html#numpy.ma.MaskedArray.__add__
    "numpy.ma.MaskedArray.__add__")(other) | 将自身加到其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | Add other to self, and return a new
    masked array. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__radd__`](generated/numpy.ma.MaskedArray.__radd__.html#numpy.ma.MaskedArray.__radd__
    "numpy.ma.MaskedArray.__radd__")(other) | 将其他加到自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | Subtract other from self, and return
    a new masked array. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__sub__`](generated/numpy.ma.MaskedArray.__sub__.html#numpy.ma.MaskedArray.__sub__
    "numpy.ma.MaskedArray.__sub__")(other) | 将其他从自身减去，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | Subtract self from other, and return
    a new masked array. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rsub__`](generated/numpy.ma.MaskedArray.__rsub__.html#numpy.ma.MaskedArray.__rsub__
    "numpy.ma.MaskedArray.__rsub__")(other) | 将自身减去其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | Multiply self by other, and return a
    new masked array. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mul__`](generated/numpy.ma.MaskedArray.__mul__.html#numpy.ma.MaskedArray.__mul__
    "numpy.ma.MaskedArray.__mul__")(other) | 将自身乘以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | Multiply other by self, and return a
    new masked array. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmul__`](generated/numpy.ma.MaskedArray.__rmul__.html#numpy.ma.MaskedArray.__rmul__
    "numpy.ma.MaskedArray.__rmul__")(other) | 将其他乘以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | Divide other into self, and return a
    new masked array. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__div__`](generated/numpy.ma.MaskedArray.__div__.html#numpy.ma.MaskedArray.__div__
    "numpy.ma.MaskedArray.__div__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__truediv__`](generated/numpy.ma.MaskedArray.__truediv__.html#numpy.ma.MaskedArray.__truediv__
    "numpy.ma.MaskedArray.__truediv__")(other) | 将其他除以自身，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rtruediv__`](generated/numpy.ma.MaskedArray.__rtruediv__.html#numpy.ma.MaskedArray.__rtruediv__
    "numpy.ma.MaskedArray.__rtruediv__")(other) | 将自身除以其他，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | Divide other into self, and return
    a new masked array. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__floordiv__`](generated/numpy.ma.MaskedArray.__floordiv__.html#numpy.ma.MaskedArray.__floordiv__
    "numpy.ma.MaskedArray.__floordiv__")(other) | 将 other 除以 self，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | Divide self into other, and return
    a new masked array. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rfloordiv__`](generated/numpy.ma.MaskedArray.__rfloordiv__.html#numpy.ma.MaskedArray.__rfloordiv__
    "numpy.ma.MaskedArray.__rfloordiv__")(other) | 将 self 除以 other，并返回一个新的掩码数组。 |'
- en: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | Return self%value. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__mod__`](generated/numpy.ma.MaskedArray.__mod__.html#numpy.ma.MaskedArray.__mod__
    "numpy.ma.MaskedArray.__mod__")(value, /) | 返回 self%value。 |'
- en: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | Return value%self. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rmod__`](generated/numpy.ma.MaskedArray.__rmod__.html#numpy.ma.MaskedArray.__rmod__
    "numpy.ma.MaskedArray.__rmod__")(value, /) | 返回 value%self。 |'
- en: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | Return divmod(self, value). |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__divmod__`](generated/numpy.ma.MaskedArray.__divmod__.html#numpy.ma.MaskedArray.__divmod__
    "numpy.ma.MaskedArray.__divmod__")(value, /) | 返回 divmod(self, value)。 |'
- en: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | Return divmod(value, self). |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rdivmod__`](generated/numpy.ma.MaskedArray.__rdivmod__.html#numpy.ma.MaskedArray.__rdivmod__
    "numpy.ma.MaskedArray.__rdivmod__")(value, /) | 返回 divmod(value, self)。 |'
- en: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | Raise self to the power other, masking
    the potential NaNs/Infs |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__pow__`](generated/numpy.ma.MaskedArray.__pow__.html#numpy.ma.MaskedArray.__pow__
    "numpy.ma.MaskedArray.__pow__")(other) | 将 self 提升到 other 次方，掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | Raise other to the power self, masking
    the potential NaNs/Infs |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rpow__`](generated/numpy.ma.MaskedArray.__rpow__.html#numpy.ma.MaskedArray.__rpow__
    "numpy.ma.MaskedArray.__rpow__")(other) | 将 other 提升到 self 次方，掩盖潜在的 NaNs/Infs。
    |'
- en: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | Return self<<value. |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__lshift__`](generated/numpy.ma.MaskedArray.__lshift__.html#numpy.ma.MaskedArray.__lshift__
    "numpy.ma.MaskedArray.__lshift__")(value, /) | 返回 self<<value。 |'
- en: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | Return value<<self. |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rlshift__`](generated/numpy.ma.MaskedArray.__rlshift__.html#numpy.ma.MaskedArray.__rlshift__
    "numpy.ma.MaskedArray.__rlshift__")(value, /) | 返回 value<<self。 |'
- en: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | Return self>>value. |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rshift__`](generated/numpy.ma.MaskedArray.__rshift__.html#numpy.ma.MaskedArray.__rshift__
    "numpy.ma.MaskedArray.__rshift__")(value, /) | 返回 self>>value。 |'
- en: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | Return value>>self. |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rrshift__`](generated/numpy.ma.MaskedArray.__rrshift__.html#numpy.ma.MaskedArray.__rrshift__
    "numpy.ma.MaskedArray.__rrshift__")(value, /) | 返回 value>>self。 |'
- en: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | Return self&value. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__and__`](generated/numpy.ma.MaskedArray.__and__.html#numpy.ma.MaskedArray.__and__
    "numpy.ma.MaskedArray.__and__")(value, /) | 返回 self&value。 |'
- en: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | Return value&self. |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rand__`](generated/numpy.ma.MaskedArray.__rand__.html#numpy.ma.MaskedArray.__rand__
    "numpy.ma.MaskedArray.__rand__")(value, /) | 返回 value&self。 |'
- en: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | Return self&#124;value. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__or__`](generated/numpy.ma.MaskedArray.__or__.html#numpy.ma.MaskedArray.__or__
    "numpy.ma.MaskedArray.__or__")(value, /) | 返回 self&#124;value。 |'
- en: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | Return value&#124;self. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ror__`](generated/numpy.ma.MaskedArray.__ror__.html#numpy.ma.MaskedArray.__ror__
    "numpy.ma.MaskedArray.__ror__")(value, /) | 返回 value&#124;self。 |'
- en: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | Return self^value. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__xor__`](generated/numpy.ma.MaskedArray.__xor__.html#numpy.ma.MaskedArray.__xor__
    "numpy.ma.MaskedArray.__xor__")(value, /) | 返回 self^value。 |'
- en: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | Return value^self. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__rxor__`](generated/numpy.ma.MaskedArray.__rxor__.html#numpy.ma.MaskedArray.__rxor__
    "numpy.ma.MaskedArray.__rxor__")(value, /) | 返回 value^self。 |'
- en: 'Arithmetic, in-place:'
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术，就地操作：
- en: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | Add other to self in-place. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iadd__`](generated/numpy.ma.MaskedArray.__iadd__.html#numpy.ma.MaskedArray.__iadd__
    "numpy.ma.MaskedArray.__iadd__")(other) | 就地将 other 加到 self。 |'
- en: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | Subtract other from self in-place. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__isub__`](generated/numpy.ma.MaskedArray.__isub__.html#numpy.ma.MaskedArray.__isub__
    "numpy.ma.MaskedArray.__isub__")(other) | 就地从 self 减去 other。 |'
- en: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | Multiply self by other in-place. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imul__`](generated/numpy.ma.MaskedArray.__imul__.html#numpy.ma.MaskedArray.__imul__
    "numpy.ma.MaskedArray.__imul__")(other) | 就地将 self 乘以 other。 |'
- en: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | Divide self by other in-place. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__idiv__`](generated/numpy.ma.MaskedArray.__idiv__.html#numpy.ma.MaskedArray.__idiv__
    "numpy.ma.MaskedArray.__idiv__")(other) | 就地除 self 与 other。 |'
- en: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | True divide self by other in-place.
    |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__itruediv__`](generated/numpy.ma.MaskedArray.__itruediv__.html#numpy.ma.MaskedArray.__itruediv__
    "numpy.ma.MaskedArray.__itruediv__")(other) | 就地真除 self 与 other。 |'
- en: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | Floor divide self by other in-place.
    |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ifloordiv__`](generated/numpy.ma.MaskedArray.__ifloordiv__.html#numpy.ma.MaskedArray.__ifloordiv__
    "numpy.ma.MaskedArray.__ifloordiv__")(other) | 就地整除 self 与 other。 |'
- en: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | Return self%=value. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__imod__`](generated/numpy.ma.MaskedArray.__imod__.html#numpy.ma.MaskedArray.__imod__
    "numpy.ma.MaskedArray.__imod__")(value, /) | 返回 self%=value。 |'
- en: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | Raise self to the power other, in place.
    |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ipow__`](generated/numpy.ma.MaskedArray.__ipow__.html#numpy.ma.MaskedArray.__ipow__
    "numpy.ma.MaskedArray.__ipow__")(other) | 就地将 self 的幂运算为 other。 |'
- en: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | Return self<<=value. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ilshift__`](generated/numpy.ma.MaskedArray.__ilshift__.html#numpy.ma.MaskedArray.__ilshift__
    "numpy.ma.MaskedArray.__ilshift__")(value, /) | 返回 self<<=value。 |'
- en: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | Return self>>=value. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__irshift__`](generated/numpy.ma.MaskedArray.__irshift__.html#numpy.ma.MaskedArray.__irshift__
    "numpy.ma.MaskedArray.__irshift__")(value, /) | 返回 self>>=value。 |'
- en: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | Return self&=value. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__iand__`](generated/numpy.ma.MaskedArray.__iand__.html#numpy.ma.MaskedArray.__iand__
    "numpy.ma.MaskedArray.__iand__")(value, /) | 返回 self&=value。 |'
- en: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | Return self&#124;=value. |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ior__`](generated/numpy.ma.MaskedArray.__ior__.html#numpy.ma.MaskedArray.__ior__
    "numpy.ma.MaskedArray.__ior__")(value, /) | 返回 self&#124;=value。 |'
- en: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | Return self^=value. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__ixor__`](generated/numpy.ma.MaskedArray.__ixor__.html#numpy.ma.MaskedArray.__ixor__
    "numpy.ma.MaskedArray.__ixor__")(value, /) | 返回 self^=value。 |'
- en: Representation
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示
- en: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | Literal string representation. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__repr__`](generated/numpy.ma.MaskedArray.__repr__.html#numpy.ma.MaskedArray.__repr__
    "numpy.ma.MaskedArray.__repr__")() | 字符串表示。 |'
- en: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | Return str(self). |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__str__`](generated/numpy.ma.MaskedArray.__str__.html#numpy.ma.MaskedArray.__str__
    "numpy.ma.MaskedArray.__str__")() | 返回 str(self)。'
- en: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | Return the addresses of the data and mask areas.
    |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.ids`](generated/numpy.ma.MaskedArray.ids.html#numpy.ma.MaskedArray.ids
    "numpy.ma.MaskedArray.ids")() | 返回数据和掩码区域的地址。'
- en: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | Return a boolean indicating whether the
    data is contiguous. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.iscontiguous`](generated/numpy.ma.MaskedArray.iscontiguous.html#numpy.ma.MaskedArray.iscontiguous
    "numpy.ma.MaskedArray.iscontiguous")() | 返回一个布尔值，指示数据是否是连续的。'
- en: Special methods
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊方法
- en: 'For standard library functions:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标准库函数：
- en: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__copy__`](generated/numpy.ma.MaskedArray.__copy__.html#numpy.ma.MaskedArray.__copy__
    "numpy.ma.MaskedArray.__copy__")() | 如果在数组上调用[`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(在Python v3.11中)")，则使用。'
- en: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__deepcopy__`](generated/numpy.ma.MaskedArray.__deepcopy__.html#numpy.ma.MaskedArray.__deepcopy__
    "numpy.ma.MaskedArray.__deepcopy__")(memo, /) | 如果在数组上调用[`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(在Python v3.11中)")，则使用。'
- en: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | Return the internal state of the masked
    array, for pickling purposes. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__getstate__`](generated/numpy.ma.MaskedArray.__getstate__.html#numpy.ma.MaskedArray.__getstate__
    "numpy.ma.MaskedArray.__getstate__")() | 返回掩码数组的内部状态，用于pickle目的。'
- en: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | Return a 3-tuple for pickling a MaskedArray.
    |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__reduce__`](generated/numpy.ma.MaskedArray.__reduce__.html#numpy.ma.MaskedArray.__reduce__
    "numpy.ma.MaskedArray.__reduce__")() | 返回用于pickle掩码数组的3元组。'
- en: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | Restore the internal state of the
    masked array, for pickling purposes. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setstate__`](generated/numpy.ma.MaskedArray.__setstate__.html#numpy.ma.MaskedArray.__setstate__
    "numpy.ma.MaskedArray.__setstate__")(state) | 恢复掩码数组的内部状态，用于pickle目的。'
- en: 'Basic customization:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 基本定制：
- en: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | Create a new masked
    array from scratch. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__new__`](generated/numpy.ma.MaskedArray.__new__.html#numpy.ma.MaskedArray.__new__
    "numpy.ma.MaskedArray.__new__")(cls[, data, mask, ...]) | 从头开始创建一个新的掩码数组。'
- en: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | Returns either a new reference
    to self if dtype is not given or a new array of provided data type if dtype is
    different from the current dtype of the array. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__array__`](generated/numpy.ma.MaskedArray.__array__.html#numpy.ma.MaskedArray.__array__
    "numpy.ma.MaskedArray.__array__")([dtype], /) | 如果未给出dtype，则返回对self的新引用，如果dtype与数组的当前dtype不同，则返回所提供数据类型的新数组。'
- en: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | Special hook for ufuncs.
    |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__array_wrap__`](generated/numpy.ma.MaskedArray.__array_wrap__.html#numpy.ma.MaskedArray.__array_wrap__
    "numpy.ma.MaskedArray.__array_wrap__")(obj[, context]) | 用于ufuncs的特殊钩子。'
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 容器定制：（参见[Indexing](arrays.indexing.html#arrays-indexing)）
- en: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | Return len(self). |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__len__`](generated/numpy.ma.MaskedArray.__len__.html#numpy.ma.MaskedArray.__len__
    "numpy.ma.MaskedArray.__len__")(/) | 返回 len(self)。'
- en: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y] |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__getitem__`](generated/numpy.ma.MaskedArray.__getitem__.html#numpy.ma.MaskedArray.__getitem__
    "numpy.ma.MaskedArray.__getitem__")(indx) | x.__getitem__(y) <==> x[y]'
- en: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setitem__`](generated/numpy.ma.MaskedArray.__setitem__.html#numpy.ma.MaskedArray.__setitem__
    "numpy.ma.MaskedArray.__setitem__")(indx, value) | x.__setitem__(i, y) <==> x[i]=y
    |'
- en: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | Delete self[key]. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__delitem__`](generated/numpy.ma.MaskedArray.__delitem__.html#numpy.ma.MaskedArray.__delitem__
    "numpy.ma.MaskedArray.__delitem__")(key, /) | 删除self[key]。'
- en: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | Return key in self. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__contains__`](generated/numpy.ma.MaskedArray.__contains__.html#numpy.ma.MaskedArray.__contains__
    "numpy.ma.MaskedArray.__contains__")(key, /) | 返回self中的key。'
- en: Specific methods
  id: totrans-465
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定方法
- en: Handling the mask
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理掩码
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方法访问有关掩码的信息或操作掩码。
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | 设置掩码。'
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制将掩码硬化，防止通过赋值取消掩码。'
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制将掩码软化（默认），允许通过赋值取消掩码。'
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。'
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码缩小为nomask。'
- en: Handling the *fill_value*
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理*fill_value*
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组��填充值是一个标量。'
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: Counting the missing elements
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算缺失元素
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | 计算沿着给定轴的数组中非掩码元素的数量。'
- en: Handling the mask
  id: totrans-478
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理掩码
- en: The following methods can be used to access information about the mask or to
    manipulate the mask.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方法访问有关掩码的信息或操作掩码。
- en: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | Set the mask. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.__setmask__`](generated/numpy.ma.MaskedArray.__setmask__.html#numpy.ma.MaskedArray.__setmask__
    "numpy.ma.MaskedArray.__setmask__")(mask[, copy]) | 设置掩码。'
- en: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | 强制将掩码硬化，防止通过赋值取消掩码。'
- en: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | 强制将掩码软化（默认），允许通过赋值取消掩码。'
- en: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | 复制掩码并将*sharedmask*标志设置为`False`。'
- en: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | 在可能的情况下将掩码缩小到nomask。'
- en: Handling the *fill_value*
  id: totrans-485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理*fill_value*
- en: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | 掩码数组的填充值是一个标量。'
- en: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
- en: Counting the missing elements
  id: totrans-488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算缺失元素
- en: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| [`MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | 计算沿给定轴的数组中非掩码元素的数量。'
