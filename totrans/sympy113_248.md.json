["```py\n>>> from sympy.utilities.codegen import codegen \n```", "```py\nclass sympy.utilities.codegen.Argument(name, datatype=None, dimensions=None, precision=None)\n```", "```py\nclass sympy.utilities.codegen.CCodeGen(project='project', printer=None, preprocessor_statements=None, cse=False)\n```", "```py\ndump_c(routines, f, prefix, header=True, empty=True)\n```", "```py\ndump_h(routines, f, prefix, header=True, empty=True)\n```", "```py\nget_prototype(routine)\n```", "```py\nclass sympy.utilities.codegen.CodeGen(project='project', cse=False)\n```", "```py\ndump_code(routines, f, prefix, header=True, empty=True)\n```", "```py\nroutine(name, expr, argument_sequence=None, global_vars=None)\n```", "```py\nwrite(routines, prefix, to_files=False, header=True, empty=True)\n```", "```py\nclass sympy.utilities.codegen.DataType(cname, fname, pyname, jlname, octname, rsname)\n```", "```py\nclass sympy.utilities.codegen.FCodeGen(project='project', printer=None)\n```", "```py\ndump_f95(routines, f, prefix, header=True, empty=True)\n```", "```py\ndump_h(routines, f, prefix, header=True, empty=True)\n```", "```py\nget_interface(routine)\n```", "```py\nclass sympy.utilities.codegen.JuliaCodeGen(project='project', printer=None)\n```", "```py\ndump_jl(routines, f, prefix, header=True, empty=True)\n```", "```py\nroutine(name, expr, argument_sequence, global_vars)\n```", "```py\nclass sympy.utilities.codegen.OctaveCodeGen(project='project', printer=None)\n```", "```py\ndump_m(routines, f, prefix, header=True, empty=True, inline=True)\n```", "```py\nroutine(name, expr, argument_sequence, global_vars)\n```", "```py\nclass sympy.utilities.codegen.OutputArgument(name, result_var, expr, datatype=None, dimensions=None, precision=None)\n```", "```py\nclass sympy.utilities.codegen.Result(expr, name=None, result_var=None, datatype=None, dimensions=None, precision=None)\n```", "```py\nclass sympy.utilities.codegen.Routine(name, arguments, results, local_vars, global_vars)\n```", "```py\nproperty result_variables\n```", "```py\nproperty variables\n```", "```py\nclass sympy.utilities.codegen.RustCodeGen(project='project', printer=None)\n```", "```py\ndump_rs(routines, f, prefix, header=True, empty=True)\n```", "```py\nget_prototype(routine)\n```", "```py\nroutine(name, expr, argument_sequence, global_vars)\n```", "```py\nsympy.utilities.codegen.codegen(name_expr, language=None, prefix=None, project='project', to_files=False, header=True, empty=True, argument_sequence=None, global_vars=None, standard=None, code_gen=None, printer=None)\n```", "```py\n>>> from sympy.utilities.codegen import codegen\n>>> from sympy.abc import x, y, z\n>>> [(c_name, c_code), (h_name, c_header)] = codegen(\n...     (\"f\", x+y*z), \"C89\", \"test\", header=False, empty=False)\n>>> print(c_name)\ntest.c\n>>> print(c_code)\n#include \"test.h\"\n#include <math.h>\ndouble f(double x, double y, double z) {\n double f_result;\n f_result = x + y*z;\n return f_result;\n}\n\n>>> print(h_name)\ntest.h\n>>> print(c_header)\n#ifndef PROJECT__TEST__H\n#define PROJECT__TEST__H\ndouble f(double x, double y, double z);\n#endif \n```", "```py\n>>> from sympy.abc import f, g\n>>> from sympy import Eq\n>>> [(c_name, c_code), (h_name, c_header)] = codegen(\n...      [(\"myfcn\", x + y), (\"fcn2\", [Eq(f, 2*x), Eq(g, y)])],\n...      \"C99\", header=False, empty=False)\n>>> print(c_name)\nmyfcn.c\n>>> print(c_code)\n#include \"myfcn.h\"\n#include <math.h>\ndouble myfcn(double x, double y) {\n double myfcn_result;\n myfcn_result = x + y;\n return myfcn_result;\n}\nvoid fcn2(double x, double y, double *f, double *g) {\n (*f) = 2*x;\n (*g) = y;\n} \n```", "```py\n>>> from sympy.utilities.codegen import codegen\n>>> from sympy.abc import x, y, z\n>>> [(f_name, f_code), header] = codegen(\n...     (\"f\", x+y*z), \"F95\", header=False, empty=False,\n...     argument_sequence=(x, y), global_vars=(z,))\n>>> print(f_code)\nREAL*8 function f(x, y)\nimplicit none\nREAL*8, intent(in) :: x\nREAL*8, intent(in) :: y\nf = x + y*z\nend function \n```", "```py\nsympy.utilities.codegen.get_default_datatype(expr, complex_allowed=None)\n```", "```py\nsympy.utilities.codegen.make_routine(name, expr, argument_sequence=None, global_vars=None, language='F95')\n```", "```py\n>>> from sympy.utilities.codegen import make_routine\n>>> from sympy.abc import x, y, f, g\n>>> from sympy import Eq\n>>> r = make_routine('test', [Eq(f, 2*x), Eq(g, x + y)])\n>>> [arg.result_var for arg in r.results]\n[]\n>>> [arg.name for arg in r.arguments]\n[x, y, f, g]\n>>> [arg.name for arg in r.result_variables]\n[f, g]\n>>> r.local_vars\nset() \n```", "```py\n>>> from sympy import Matrix\n>>> r = make_routine('fcn', [x*y, Eq(f, 1), Eq(g, x + g), Matrix([[x, 2]])])\n>>> [arg.result_var for arg in r.results]  \n[result_5397460570204848505]\n>>> [arg.expr for arg in r.results]\n[x*y]\n>>> [arg.name for arg in r.arguments]  \n[x, y, f, g, out_8598435338387848786] \n```", "```py\n>>> from sympy.utilities.codegen import (InputArgument, OutputArgument,\n...                                      InOutArgument)\n>>> [a.name for a in r.arguments if isinstance(a, InputArgument)]\n[x, y] \n```", "```py\n>>> [a.name for a in r.arguments if isinstance(a, OutputArgument)]  \n[f, out_8598435338387848786]\n>>> [a.expr for a in r.arguments if isinstance(a, OutputArgument)]\n[1, Matrix([[x, 2]])] \n```", "```py\n>>> [a.name for a in r.arguments if isinstance(a, InOutArgument)]\n[g]\n>>> [a.expr for a in r.arguments if isinstance(a, InOutArgument)]\n[g + x] \n```"]