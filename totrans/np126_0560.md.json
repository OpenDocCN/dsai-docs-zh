["```py\nlinalg.matrix_power(a, n)\n```", "```py\n>>> from numpy.linalg import matrix_power\n>>> i = np.array([[0, 1], [-1, 0]]) # matrix equiv. of the imaginary unit\n>>> matrix_power(i, 3) # should = -i\narray([[ 0, -1],\n [ 1,  0]])\n>>> matrix_power(i, 0)\narray([[1, 0],\n [0, 1]])\n>>> matrix_power(i, -3) # should = 1/(-i) = i, but w/ f.p. elements\narray([[ 0.,  1.],\n [-1.,  0.]]) \n```", "```py\n>>> q = np.zeros((4, 4))\n>>> q[0:2, 0:2] = -i\n>>> q[2:4, 2:4] = i\n>>> q # one of the three quaternion units not equal to 1\narray([[ 0., -1.,  0.,  0.],\n [ 1.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  1.],\n [ 0.,  0., -1.,  0.]])\n>>> matrix_power(q, 2) # = -np.eye(4)\narray([[-1.,  0.,  0.,  0.],\n [ 0., -1.,  0.,  0.],\n [ 0.,  0., -1.,  0.],\n [ 0.,  0.,  0., -1.]]) \n```"]