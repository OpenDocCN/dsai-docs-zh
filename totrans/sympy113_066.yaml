- en: Utilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/util.html](https://docs.sympy.org/latest/modules/combinatorics/util.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Order \(\{0, 1, \dots, n-1\}\) so that base points come first and in order.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : the base'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**degree** : the degree of the associated permutation group'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: A list `base_ordering` such that `base_ordering[point]` is the
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: number of `point` in the ordering.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notes
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: This is used in backtrack searches, when we define a relation \(\ll\) on the
    underlying set for a permutation group of degree \(n\), \(\{0, 1, \dots, n-1\}\),
    so that if \((b_1, b_2, \dots, b_k)\) is a base we have \(b_i \ll b_j\) whenever
    \(i<j\) and \(b_i \ll a\) for all \(i\in\{1,2, \dots, k\}\) and \(a\) is not in
    the base. The idea is developed and applied to backtracking algorithms in [1],
    pp.108-132\. The points that are not in the base are taken in increasing order.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[[R95](#id1)]'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Checks for cycles of prime length p with n/2 < p < n-2.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Here \(n\) is the degree of the permutation. This is a helper function for the
    function is_alt_sym from sympy.combinatorics.perm_groups.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Distribute the group elements `gens` by membership in basic stabilizers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : a sequence of points in \(\{0, 1, \dots, n-1\}\)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**gens** : a list of elements of a permutation group of degree \(n\).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: list
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: List of length \(k\), where \(k\) is the length of *base*. The \(i\)-th entry
    contains those elements in *gens* which fix the first \(i\) elements of *base*
    (so that the \(0\)-th entry is equal to *gens* itself). If no element fixes the
    first \(i\) elements of *base*, the \(i\)-th element is set to a list containing
    the identity element.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Notice that for a base \((b_1, b_2, \dots, b_k)\), the basic stabilizers are
    defined as \(G^{(i)} = G_{b_1, \dots, b_{i-1}}\) for \(i \in\{1, 2, \dots, k\}\).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[`_strong_gens_from_distr`](#sympy.combinatorics.util._strong_gens_from_distr
    "sympy.combinatorics.util._strong_gens_from_distr"), [`_orbits_transversals_from_bsgs`](#sympy.combinatorics.util._orbits_transversals_from_bsgs
    "sympy.combinatorics.util._orbits_transversals_from_bsgs"), [`_handle_precomputed_bsgs`](#sympy.combinatorics.util._handle_precomputed_bsgs
    "sympy.combinatorics.util._handle_precomputed_bsgs")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Calculate BSGS-related structures from those present.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : the base'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens** : the strong generators'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**transversals** : basic transversals'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**basic_orbits** : basic orbits'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: (transversals, basic_orbits, strong_gens_distr)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: where *transversals* are the basic transversals, *basic_orbits* are the basic
    orbits, and *strong_gens_distr* are the strong generators distributed by membership
    in basic stabilizers.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其中*横截面*是基本横截面，*基本轨道*是基本轨道，*strong_gens_distr*是按基本稳定器成员分布的强生成器。
- en: Explanation
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: The base and strong generating set must be provided; if any of the transversals,
    basic orbits or distributed strong generators are not provided, they will be calculated
    from the base and strong generating set.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 必须提供基础和强生成集；如果未提供任何横截面、基本轨道或分布的强生成器，则会从基础和强生成集计算它们。
- en: Examples
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`_orbits_transversals_from_bsgs`](#sympy.combinatorics.util._orbits_transversals_from_bsgs
    "sympy.combinatorics.util._orbits_transversals_from_bsgs"), [`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_orbits_transversals_from_bsgs`](#sympy.combinatorics.util._orbits_transversals_from_bsgs
    "sympy.combinatorics.util._orbits_transversals_from_bsgs")，[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Compute basic orbits and transversals from a base and strong generating set.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础和强生成集计算基本轨道和横截面。
- en: 'Parameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**base** : The base.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础** : 基础。'
- en: '**strong_gens_distr** : Strong generators distributed by membership in basic
    stabilizers.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**strong_gens_distr** : 按基本稳定器成员分布的强生成器。'
- en: '**transversals_only** : bool, default: False'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**transversals_only** : 布尔值，默认值：False'
- en: A flag switching between returning only the transversals and both orbits and
    transversals.
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个标志，在仅返回横截面和返回轨道与横截面两者之间切换。
- en: '**slp** : bool, default: False'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**slp** : 布尔值，默认值：False'
- en: If `True`, return a list of dictionaries containing the generator presentations
    of the elements of the transversals, i.e. the list of indices of generators from
    `strong_gens_distr[i]` such that their product is the relevant transversal element.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`True`，返回包含生成器展示的元素的字典列表，即横截面元素的生成器索引列表，从`strong_gens_distr[i]`中获取这些生成器的乘积即为相关横截面元素。
- en: Explanation
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: The generators are provided as distributed across the basic stabilizers. If
    the optional argument `transversals_only` is set to True, only the transversals
    are returned.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器按基本稳定器的成员分布提供。如果将可选参数`transversals_only`设置为True，则仅返回横截面。
- en: Examples
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base"), [`_handle_precomputed_bsgs`](#sympy.combinatorics.util._handle_precomputed_bsgs
    "sympy.combinatorics.util._handle_precomputed_bsgs")'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")，[`_handle_precomputed_bsgs`](#sympy.combinatorics.util._handle_precomputed_bsgs
    "sympy.combinatorics.util._handle_precomputed_bsgs")'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remove redundant generators from a strong generating set.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从强生成集中删除冗余生成器。
- en: 'Parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**base** : a base'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**base** : 基础'
- en: '**strong_gens** : a strong generating set relative to *base*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**strong_gens** : 相对于*base*的强生成集'
- en: '**basic_orbits** : basic orbits'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**basic_orbits** : 基本轨道'
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**strong_gens_distr** : 按基本稳定器成员分布的强生成器'
- en: 'Returns:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A strong generating set with respect to `base` which is a subset of
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于基础`base`的强生成集，这是一个子集。
- en: '`strong_gens`.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`strong_gens`。'
- en: Examples
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notes
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This procedure is outlined in [1],p.95.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程详见[1]，p.95。
- en: References
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R96](#id2)]'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R96](#id2)]'
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Holt, D., Eick, B., O’Brien, E. “计算群论手册”
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Attempt to decompose a permutation using a (possibly partial) BSGS structure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用（可能是部分的）BSGS结构分解置换。
- en: 'Parameters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**g** : permutation to be decomposed'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**g** : 要分解的置换'
- en: '**base** : sequence of points'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**base** : 点序列'
- en: '**orbits** : list'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**orbits** : 列表'
- en: A list in which the `i`-th entry is an orbit of `base[i]` under some subgroup
    of the pointwise stabilizer of ` \(base[0], base[1], ..., base[i - 1]`\). The
    groups themselves are implicit in this function since the only information we
    need is encoded in the orbits and transversals
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列表中的第`i`个条目是在` \(base[0], base[1], ..., base[i - 1]`\)`的点稳定器的某个子群下`base[i]`的轨道。由于我们只需要轨道和横截面的信息，这些群本身在此函数中是隐含的。
- en: '**transversals** : list'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**横截面** : 列表'
- en: A list of orbit transversals associated with the orbits *orbits*.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 与轨道*orbits*相关的轨道横截面列表。
- en: Explanation
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: This is done by treating the sequence `base` as an actual base, and the orbits
    `orbits` and transversals `transversals` as basic orbits and transversals relative
    to it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过将序列 `base` 视为实际的基础，将轨道 `orbits` 和横穿 `transversals` 视为相对其的基本轨道和横穿来完成的。
- en: This process is called “sifting”. A sift is unsuccessful when a certain orbit
    element is not found or when after the sift the decomposition does not end with
    the identity element.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被称为“筛选”。当某个轨道元素未找到或者在筛选后分解结果不以单位元结束时，筛选失败。
- en: The argument `transversals` is a list of dictionaries that provides transversal
    elements for the orbits `orbits`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `transversals` 是一个字典列表，提供了轨道 `orbits` 的横穿元素。
- en: Examples
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notes
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The algorithm is described in [1],pp.89-90\. The reason for returning both the
    current state of the element being decomposed and the level at which the sifting
    ends is that they provide important information for the randomized version of
    the Schreier-Sims algorithm.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在 [1],pp.89-90 中描述。为什么返回正在分解的元素的当前状态以及筛选结束的级别是因为它们为随机版本的 Schreier-Sims 算法提供了重要信息。
- en: See also
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"), [`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random")'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"), [`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random")'
- en: References
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R97](#id3)]'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R97](#id3)]'
- en: Holt, D., Eick, B., O’Brien, E.”Handbook of computational group theory”
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Holt, D., Eick, B., O’Brien, E.《计算群论手册》
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Retrieve strong generating set from generators of basic stabilizers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从基本稳定子的生成器中检索强生成集。
- en: This is just the union of the generators of the first and second basic stabilizers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是第一个和第二基本稳定子生成器的并集。
- en: 'Parameters:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**strong_gens_distr**：按基本稳定子成员分布的强生成器'
- en: Examples
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
