- en: Chart visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表可视化
- en: 原文：[https://pandas.pydata.org/docs/user_guide/visualization.html](https://pandas.pydata.org/docs/user_guide/visualization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/visualization.html](https://pandas.pydata.org/docs/user_guide/visualization.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The examples below assume that you’re using [Jupyter](https://jupyter.org/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例假定您正在使用[Jupyter](https://jupyter.org/)。
- en: This section demonstrates visualization through charting. For information on
    visualization of tabular data please see the section on [Table Visualization](style.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示了通过图表进行可视化。 有关表格数据可视化的信息，请参阅[表格可视化](style.html)部分。
- en: 'We use the standard convention for referencing the matplotlib API:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标准约定引用 matplotlib API：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We provide the basics in pandas to easily create decent looking plots. See [the
    ecosystem page](https://pandas.pydata.org/community/ecosystem.html) for visualization
    libraries that go beyond the basics documented here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 pandas 中提供了基础知识，以轻松创建看起来不错的图形。 请参阅[生态系统页面](https://pandas.pydata.org/community/ecosystem.html)
    以了解超越此处基础文档的可视化库。
- en: Note
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All calls to `np.random` are seeded with 123456.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对 `np.random` 的调用都使用 123456 作为种子。
- en: '## Basic plotting: `plot`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 基本绘图：`plot`'
- en: We will demonstrate the basics, see the [cookbook](cookbook.html#cookbook-plotting)
    for some advanced strategies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示基础知识，有关一些高级策略，请参阅[食谱](cookbook.html#cookbook-plotting)。
- en: 'The `plot` method on Series and DataFrame is just a simple wrapper around [`plt.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 上的 `plot` 方法只是 [`plt.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(在Matplotlib v3.8.4中)") 的简单包装：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
- en: If the index consists of dates, it calls [`gcf().autofmt_xdate()`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
    "(in Matplotlib v3.8.4)") to try to format the x-axis nicely as per above.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索引由日期组成，则调用[`gcf().autofmt_xdate()`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
    "(在Matplotlib v3.8.4中)") 尝试根据上述格式化 x 轴。
- en: 'On DataFrame, [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") is a convenience to plot all of the columns with labels:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 上，[`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") 是一个方便的方法，用于绘制所有带有标签的列：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
- en: 'You can plot one column versus another using the `x` and `y` keywords in [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") 中的 `x` 和 `y` 关键字绘制一列与另一列的图形：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![../_images/df_plot_xy.png](../Images/607eb0b27413e94717633af2cb466995.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/df_plot_xy.png](../Images/607eb0b27413e94717633af2cb466995.png)'
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more formatting and styling options, see [formatting](#visualization-formatting)
    below.  ## Other plots'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '要了解更多格式和样式选项，请参阅下面的[格式化](#visualization-formatting)。  ## 其他绘图'
- en: 'Plotting methods allow for a handful of plot styles other than the default
    line plot. These methods can be provided as the `kind` keyword argument to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"), and include:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图方法允许使用除默认线图之外的几种绘图样式。 这些方法可以作为 [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") 的 `kind` 关键字参数提供，包括：
- en: '[‘bar’](#visualization-barplot) or [‘barh’](#visualization-barplot) for bar
    plots'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘bar’](#visualization-barplot) 或 [‘barh’](#visualization-barplot) 用于条形图'
- en: '[‘hist’](#visualization-hist) for histogram'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘hist’](#visualization-hist) 用于直方图'
- en: '[‘box’](#visualization-box) for boxplot'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘box’](#visualization-box) 用于箱线图'
- en: '[‘kde’](#visualization-kde) or [‘density’](#visualization-kde) for density
    plots'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘kde’](#visualization-kde) 或 [‘density’](#visualization-kde) 用于密度图'
- en: '[‘area’](#visualization-area-plot) for area plots'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘area’](#visualization-area-plot) 用于面积图'
- en: '[‘scatter’](#visualization-scatter) for scatter plots'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘scatter’](#visualization-scatter) 用于散点图'
- en: '[‘hexbin’](#visualization-hexbin) for hexagonal bin plots'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘hexbin’](#visualization-hexbin) 用于六边形箱图'
- en: '[‘pie’](#visualization-pie) for pie plots'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[‘pie’](#visualization-pie) 用于饼图'
- en: 'For example, a bar plot can be created the following way:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以通过以下方式创建条形图：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
- en: 'You can also create these other plots using the methods `DataFrame.plot.<kind>`
    instead of providing the `kind` keyword argument. This makes it easier to discover
    plot methods and the specific arguments they use:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用方法`DataFrame.plot.<kind>`创建其他图表，而不是提供`kind`关键字参数。这样更容易发现绘图方法及其使用的特定参数：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition to these `kind` s, there are the [DataFrame.hist()](#visualization-hist),
    and [DataFrame.boxplot()](#visualization-box) methods, which use a separate interface.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些`kind`，��有[DataFrame.hist()](#visualization-hist)和[DataFrame.boxplot()](#visualization-box)方法，它们使用单独的接口。
- en: 'Finally, there are several [plotting functions](#visualization-tools) in `pandas.plotting`
    that take a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    as an argument. These include:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`pandas.plotting`中有几个[绘图函数](#visualization-tools)，它们以[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")作为参数。这些包括：
- en: '[Scatter Matrix](#visualization-scatter-matrix)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[散点矩阵](#visualization-scatter-matrix)'
- en: '[Andrews Curves](#visualization-andrews-curves)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安德鲁斯曲线](#visualization-andrews-curves)'
- en: '[Parallel Coordinates](#visualization-parallel-coordinates)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[平行坐标](#visualization-parallel-coordinates)'
- en: '[Lag Plot](#visualization-lag)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[滞后图](#visualization-lag)'
- en: '[Autocorrelation Plot](#visualization-autocorrelation)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自相关图](#visualization-autocorrelation)'
- en: '[Bootstrap Plot](#visualization-bootstrap)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自举图](#visualization-bootstrap)'
- en: '[RadViz](#visualization-radviz)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RadViz](#visualization-radviz)'
- en: Plots may also be adorned with [errorbars](#visualization-errorbars) or [tables](#visualization-table).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图表也可以用[误差条](#visualization-errorbars)或[表格](#visualization-table)装饰。
- en: '### Bar plots'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '### 条形图'
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带标签的非时间序列数据，您可能希望生成条形图：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 调用DataFrame的[`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")方法会生成多条形图：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成堆叠条形图，请传递`stacked=True`：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
- en: 'To get horizontal bar plots, use the `barh` method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得水平条形图，请使用`barh`方法：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### 直方图'
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")和[`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist")方法绘制直方图。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`stacked=True`可以堆叠直方图。可以使用`bins`关键字更改箱子大小。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以传递matplotlib支持的其他关键字`hist`。例如，可以通过`orientation='horizontal'`和`cumulative=True`绘制水平和累积直方图。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`hist`](https://matplotlib.org/stable/api/_as-gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(在Matplotlib v3.8.4)")方法和[matplotlib hist文档](https://matplotlib.org/stable/api/_as-gen/matplotlib.pyplot.hist.html)以获取更多信息。
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以使用现有接口`DataFrame.hist`绘制直方图。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传递一部分列来绘制图表，以及按多列进行分组：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用[`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")创建分组，例如：
- en: Changed in version 1.4.0.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.0开始更改。
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`boxplot`中，返回类型可以通过`return_type`关键字控制。有效选择为`{"axes", "dict", "both", None}`。由`DataFrame.boxplot`创建的分面，使用`by`关键字，也会影响输出类型：
- en: '| `return_type` | Faceted | Output type |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `return_type` | 分面 | 输出类型 |'
- en: '| --- | --- | --- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `None` | No | axes |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `None` | 否 | 轴 |'
- en: '| `None` | Yes | 2-D ndarray of axes |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `None` | 是 | 2-D轴数组 |'
- en: '| `''axes''` | No | axes |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `''axes''` | 否 | 轴 |'
- en: '| `''axes''` | Yes | Series of axes |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `''axes''` | 是 | 轴系列 |'
- en: '| `''dict''` | No | dict of artists |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `''dict''` | 否 | 艺术家字典 |'
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `''dict''` | 是 | 艺术家字典系列 |'
- en: '| `''both''` | No | namedtuple |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `''both''` | 否 | 命名元组 |'
- en: '| `''both''` | Yes | Series of namedtuples |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `''both''` | 是 | 命名元组系列 |'
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Groupby.boxplot`始终返回`return_type`的`Series`。'
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的子图首先按数值列分割，然后按`g`列的值分割。下面的子图首先按`g`的值分割，然后按数值列分割。
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### 面积图'
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area")和[`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")创建面积图。面积图默认堆叠。要生成堆叠的面积图，每列必须是全部正值或全部负值。
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入数据包含`NaN`时，它将自动填充为0。如果要删除或用不同值填充，请在调用`plot`之前使用`dataframe.dropna()`或`dataframe.fillna()`。
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成未堆叠的图，请传递`stacked=False`。除非另有说明，否则alpha值设置为0.5：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### 散点图'
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图可以通过使用[`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")方法绘制。散点图需要x轴和y轴的数值列。这些可以通过`x`和`y`关键字指定。
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单个轴上绘制多个列组，请重复`plot`方法并指定目标`ax`。建议指定`color`和`label`关键字以区分每个组。
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: 'See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.  ### Hexagonal bin plot'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.  ### Pie plot'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")或[`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie")创建饼图。如果您的数据包含任何`NaN`，它们将自动填充为0。如果数据中有任何负值，将引发`ValueError`。
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于饼图，最好使用正方形图形，即图形纵横比为1。您可以创建宽度和高度相等的图形，或者在绘图后通过调用`ax.set_aspect('equal')`来强制纵横比相等。
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")创建饼图需要通过`y`参数指定目标列或`subplots=True`。当指定`y`时，将绘制所选列的饼图。如果指定了`subplots=True`，将为每列绘制饼图子图。默认情况下，每个饼图中都会绘制图例；指定`legend=False`以隐藏图例。
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`labels`和`colors`关键字来指定每个楔形的标签和颜色。
- en: Warning
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 pandas 绘图使用`label`和`color`参数（请注意这两个参数上没有“s”）。为了与[`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(在 Matplotlib v3.8.4 中)")保持一致，您必须使用`labels`和`colors`。
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要隐藏楔形标签，请指定`labels=None`。如果指定了`fontsize`，则该值将应用于楔形标签。此外，[`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as-gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(在 Matplotlib v3.8.4 中)")支持的其他关键字也可以使用。
- en: '[PRE37]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递的值总和小于1.0，则它们将被重新缩放，使其总和为1。
- en: '[PRE38]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
- en: 'See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.  ## Plotting with missing data'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '查看更多内容，请参阅[matplotlib 饼图文档](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)。  ##
    使用缺失数据绘图'
- en: pandas tries to be pragmatic about plotting `DataFrames` or `Series` that contain
    missing data. Missing values are dropped, left out, or filled depending on the
    plot type.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在绘制包含缺失数据的`DataFrame`或`Series`时会尝试实用。根据绘图类型，缺失值将被删除、省略或填充。
- en: '| Plot Type | NaN Handling |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 绘图类型 | NaN 处理|'
- en: '| --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Line | Leave gaps at NaNs |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 折线图 | 在 NaN 处留空|'
- en: '| Line (stacked) | Fill 0’s |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 折线图（堆叠） | 填充 0|'
- en: '| Bar | Fill 0’s |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 条形图 | 填充 0|'
- en: '| Scatter | Drop NaNs |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 散点图 | 删除 NaN|'
- en: '| Histogram | Drop NaNs (column-wise) |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 直方图 | 删除 NaN（列）|'
- en: '| Box | Drop NaNs (column-wise) |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 箱线图 | 删除 NaN（列）|'
- en: '| Area | Fill 0’s |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 面积图 | 填充 0|'
- en: '| KDE | Drop NaNs (column-wise) |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| KDE | 删除 NaN（列）|'
- en: '| Hexbin | Drop NaNs |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 六边形图 | 删除 NaN|'
- en: '| Pie | Fill 0’s |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 饼图 | 填充 0|'
- en: 'If any of these defaults are not what you want, or if you want to be explicit
    about how missing values are handled, consider using [`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") or [`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") before plotting.  ## Plotting tools'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认设置不符合您的要求，或者您想明确指定如何处理缺失值，请考虑在绘图之前使用[`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")或[`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")。## 绘图工具
- en: These functions can be imported from `pandas.plotting` and take a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as an argument.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数可以从`pandas.plotting`中导入，并将[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")作为参数。
- en: '### Scatter matrix plot'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '### 散点矩阵图'
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`pandas.plotting`中的`scatter_matrix`方法创建散点图矩阵：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### 密度图'
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde")和[`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")方法创建密度图。
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### 安德鲁斯曲线'
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安德鲁斯曲线允许我们将多变量数据绘制为大量曲线，这些曲线是使用样本属性作为傅立叶级数的系数创建的，详见[维基百科条目](https://en.wikipedia.org/wiki/Andrews_plot)。通过为每个类别的曲线着不同颜色，可以可视化数据聚类。属于同一类别样本的曲线通常会更接近并形成更大的结构。
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：可在[此处](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv)获取“Iris”数据集。'
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### 平行坐标'
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 平行坐标是一种用于绘制多变量数据的绘图技术，详见[维基百科条目](https://en.wikipedia.org/wiki/Parallel_coordinates)。平行坐标允许我们看到数据中的聚类，并通过视觉估计其他统计数据。使用平行坐标，点被表示为连接的线段。每条垂直线代表一个属性。一组连接的线段代表一个数据点。倾向于聚类的点会更接近。
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### 滞后图'
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 滞后图用于检查数据集或时间序列是否是随机的。随机数据不应在滞后图中显示任何结构。非随机结构意味着底层数据不是随机的。可以传递`lag`参数，当`lag=1`时，图形基本上是`data[:-1]`
    vs. `data[1:]`。
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### 自相关图'
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 自相关图通常用于检查时间序列中的随机性。这是通过计算不同时间滞后处的数据值的自相关来实现的。如果时间序列是随机的，这些自相关应该在任何时间滞后分离处接近零。如果时间序列是非随机的，那么一个或多个自相关将显着非零。图中显示的水平线对应于95%和99%的置信区间。虚线是99%的置信区间。有关自相关图的更多信息，请参阅[Wikipedia条目](https://en.wikipedia.org/wiki/Correlogram)。
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap图'
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap图用于直观评估统计量（如均值、中位数、中程等）的不确定性。从数据集中选择指定大小的随机子集，计算该子集的统计量，然后重复该过程指定次数。生成的图和直方图构成了Bootstrap图。
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: RadViz是一种可视化多变量数据的方法。它基于简单的弹簧张力最小化算法。基本上，您在平面上设置一堆点。在我们的情况下，它们在单位圆上等距分布。每个点代表一个单独的属性。然后，您假装数据集中的每个样本都通过弹簧连接到这些点，弹簧的刚度与该属性的数值成比例（它们被归一化为单位间隔）。我们的样本定居到的平面上的点（在我们的样本上作用的力处于平衡状态的地方）是我们的样本将被绘制的点。根据该样本属于哪个类别，它将以不同的颜色着色。有关更多信息，请参阅R包[Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)。
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**: “鸢尾花”数据集可在[此处](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv)获取。'
- en: '[PRE46]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ##
    Plot formatting'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ##
    绘图格式'
- en: Setting the plot style
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置绘图样式
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.5版本开始，matplotlib提供了一系列预配置的绘图样式。设置样式可用于轻松地给出所需的绘图外观。在创建绘图之前调用`matplotlib.style.use(my_plot_style)`即可设置样式。例如，您可以写`matplotlib.style.use('ggplot')`以获得ggplot风格的绘图。
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`matplotlib.style.available`中看到各种可用的样式名称，并且很容易尝试它们。
- en: General plot style arguments
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般绘图样式参数
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数绘图方法都有一组关键字参数，用于控制返回绘图的布局和格式：
- en: '[PRE47]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Scales
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.  ### Colormaps'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
- en: Plotting directly with Matplotlib
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations it may still be preferable or necessary to prepare plots
    directly with matplotlib, for instance when a certain type of plot or customization
    is not (yet) supported by pandas. `Series` and `DataFrame` objects behave like
    arrays and can therefore be passed directly to matplotlib functions without explicit
    casts.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: pandas also automatically registers formatters and locators that recognize date
    indices, thereby extending date and time support to practically all plot types
    available in matplotlib. Although this formatting does not provide the same level
    of refinement you would get when plotting via pandas, it can be faster when plotting
    a large number of points.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![../_images/bollinger.png](../Images/fcf533ed141454b711c76b9d47bb4697.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
- en: Plotting backends
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can be extended with third-party plotting backends. The main idea is
    letting users select a plotting backend different than the provided one based
    on Matplotlib.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by passing ‘backend.module’ as the argument `backend` in `plot`
    function. For example:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Alternatively, you can also set this option globally, do you don’t need to
    specify the keyword in each `plot` call. For example:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Or:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This would be more or less equivalent to:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The backend module can then use other visualization tools (Bokeh, Altair, hvplot,…)
    to generate the plots. Some libraries implementing a backend for pandas are listed
    on [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Developers guide can be found at [https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends](https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends)
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '## Basic plotting: `plot`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: We will demonstrate the basics, see the [cookbook](cookbook.html#cookbook-plotting)
    for some advanced strategies.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'The `plot` method on Series and DataFrame is just a simple wrapper around [`plt.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
- en: If the index consists of dates, it calls [`gcf().autofmt_xdate()`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
    "(in Matplotlib v3.8.4)") to try to format the x-axis nicely as per above.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'On DataFrame, [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") is a convenience to plot all of the columns with labels:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
- en: 'You can plot one column versus another using the `x` and `y` keywords in [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"):'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '![../_images/df_plot_xy.png](../Images/607eb0b27413e94717633af2cb466995.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: For more formatting and styling options, see [formatting](#visualization-formatting)
    below.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '## Other plots'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting methods allow for a handful of plot styles other than the default
    line plot. These methods can be provided as the `kind` keyword argument to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"), and include:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[‘bar’](#visualization-barplot) or [‘barh’](#visualization-barplot) for bar
    plots'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hist’](#visualization-hist) for histogram'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘box’](#visualization-box) for boxplot'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘kde’](#visualization-kde) or [‘density’](#visualization-kde) for density
    plots'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘area’](#visualization-area-plot) for area plots'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘scatter’](#visualization-scatter) for scatter plots'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hexbin’](#visualization-hexbin) for hexagonal bin plots'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘pie’](#visualization-pie) for pie plots'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, a bar plot can be created the following way:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
- en: 'You can also create these other plots using the methods `DataFrame.plot.<kind>`
    instead of providing the `kind` keyword argument. This makes it easier to discover
    plot methods and the specific arguments they use:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: In addition to these `kind` s, there are the [DataFrame.hist()](#visualization-hist),
    and [DataFrame.boxplot()](#visualization-box) methods, which use a separate interface.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there are several [plotting functions](#visualization-tools) in `pandas.plotting`
    that take a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    as an argument. These include:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[Scatter Matrix](#visualization-scatter-matrix)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Andrews Curves](#visualization-andrews-curves)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallel Coordinates](#visualization-parallel-coordinates)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lag Plot](#visualization-lag)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Autocorrelation Plot](#visualization-autocorrelation)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bootstrap Plot](#visualization-bootstrap)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RadViz](#visualization-radviz)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plots may also be adorned with [errorbars](#visualization-errorbars) or [tables](#visualization-table).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '### Bar plots'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
- en: 'To get horizontal bar plots, use the `barh` method:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  id: totrans-440
  prefs: []
  type: TYPE_IMG
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '| `return_type` | Faceted | Output type |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
- en: '| `None` | No | axes |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
- en: '| `None` | Yes | 2-D ndarray of axes |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | No | axes |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | Yes | Series of axes |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | No | dict of artists |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | No | namedtuple |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | Yes | Series of namedtuples |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  id: totrans-470
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
- en: 'See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.  ### Hexagonal bin plot'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  id: totrans-488
  prefs: []
  type: TYPE_IMG
- en: 'See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.  ### Pie plot'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  id: totrans-492
  prefs: []
  type: TYPE_IMG
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  id: totrans-496
  prefs: []
  type: TYPE_IMG
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  id: totrans-502
  prefs: []
  type: TYPE_IMG
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
- en: 'See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.  ### Bar plots'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  id: totrans-509
  prefs: []
  type: TYPE_IMG
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  id: totrans-512
  prefs: []
  type: TYPE_IMG
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  id: totrans-515
  prefs: []
  type: TYPE_IMG
- en: 'To get horizontal bar plots, use the `barh` method:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  id: totrans-521
  prefs: []
  type: TYPE_IMG
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  id: totrans-524
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  id: totrans-527
  prefs: []
  type: TYPE_IMG
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  id: totrans-534
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  id: totrans-537
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  id: totrans-550
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  id: totrans-553
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  id: totrans-557
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  id: totrans-563
  prefs: []
  type: TYPE_IMG
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  id: totrans-567
  prefs: []
  type: TYPE_IMG
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '| `return_type` | Faceted | Output type |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
- en: '| `None` | No | axes |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
- en: '| `None` | Yes | 2-D ndarray of axes |'
  id: totrans-572
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | No | axes |'
  id: totrans-573
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | Yes | Series of axes |'
  id: totrans-574
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | No | dict of artists |'
  id: totrans-575
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  id: totrans-576
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | No | namedtuple |'
  id: totrans-577
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | Yes | Series of namedtuples |'
  id: totrans-578
  prefs: []
  type: TYPE_TB
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  id: totrans-581
  prefs: []
  type: TYPE_IMG
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  id: totrans-588
  prefs: []
  type: TYPE_IMG
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  id: totrans-594
  prefs: []
  type: TYPE_IMG
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  id: totrans-600
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  id: totrans-604
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  id: totrans-607
  prefs: []
  type: TYPE_IMG
- en: See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: '### Hexagonal bin plot'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  id: totrans-612
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  id: totrans-616
  prefs: []
  type: TYPE_IMG
- en: See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: '### Pie plot'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  id: totrans-621
  prefs: []
  type: TYPE_IMG
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  id: totrans-625
  prefs: []
  type: TYPE_IMG
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  id: totrans-631
  prefs: []
  type: TYPE_IMG
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  id: totrans-634
  prefs: []
  type: TYPE_IMG
- en: See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '## Plotting with missing data'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: pandas tries to be pragmatic about plotting `DataFrames` or `Series` that contain
    missing data. Missing values are dropped, left out, or filled depending on the
    plot type.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '| Plot Type | NaN Handling |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-639
  prefs: []
  type: TYPE_TB
- en: '| Line | Leave gaps at NaNs |'
  id: totrans-640
  prefs: []
  type: TYPE_TB
- en: '| Line (stacked) | Fill 0’s |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
- en: '| Bar | Fill 0’s |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
- en: '| Scatter | Drop NaNs |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
- en: '| Histogram | Drop NaNs (column-wise) |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
- en: '| Box | Drop NaNs (column-wise) |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
- en: '| Area | Fill 0’s |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
- en: '| KDE | Drop NaNs (column-wise) |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
- en: '| Hexbin | Drop NaNs |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
- en: '| Pie | Fill 0’s |'
  id: totrans-649
  prefs: []
  type: TYPE_TB
- en: If any of these defaults are not what you want, or if you want to be explicit
    about how missing values are handled, consider using [`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") or [`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") before plotting.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: '## Plotting tools'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: These functions can be imported from `pandas.plotting` and take a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as an argument.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: '### Scatter matrix plot'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ###
    Scatter matrix plot'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ##
    Plot formatting'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: Setting the plot style
  id: totrans-706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: General plot style arguments
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  id: totrans-712
  prefs: []
  type: TYPE_IMG
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  id: totrans-714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  id: totrans-717
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  id: totrans-718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  id: totrans-721
  prefs: []
  type: TYPE_IMG
- en: Scales
  id: totrans-722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  id: totrans-725
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  id: totrans-727
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  id: totrans-730
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  id: totrans-733
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  id: totrans-738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  id: totrans-742
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  id: totrans-745
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  id: totrans-748
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  id: totrans-749
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  id: totrans-752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  id: totrans-755
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  id: totrans-756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  id: totrans-760
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  id: totrans-767
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  id: totrans-775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  id: totrans-779
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  id: totrans-786
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  id: totrans-789
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  id: totrans-792
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.  ### Colormaps'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  id: totrans-798
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  id: totrans-801
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  id: totrans-804
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  id: totrans-807
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  id: totrans-810
  prefs: []
  type: TYPE_IMG
- en: Setting the plot style
  id: totrans-811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: General plot style arguments
  id: totrans-814
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  id: totrans-817
  prefs: []
  type: TYPE_IMG
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  id: totrans-819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  id: totrans-822
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  id: totrans-823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  id: totrans-826
  prefs: []
  type: TYPE_IMG
- en: Scales
  id: totrans-827
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  id: totrans-830
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  id: totrans-832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  id: totrans-835
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  id: totrans-838
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  id: totrans-843
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  id: totrans-847
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  id: totrans-850
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  id: totrans-853
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  id: totrans-854
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  id: totrans-857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  id: totrans-860
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  id: totrans-861
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  id: totrans-865
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  id: totrans-872
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  id: totrans-884
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  id: totrans-891
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  id: totrans-894
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  id: totrans-897
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '### Colormaps'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  id: totrans-904
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  id: totrans-907
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  id: totrans-910
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  id: totrans-913
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  id: totrans-916
  prefs: []
  type: TYPE_IMG
- en: Plotting directly with Matplotlib
  id: totrans-917
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations it may still be preferable or necessary to prepare plots
    directly with matplotlib, for instance when a certain type of plot or customization
    is not (yet) supported by pandas. `Series` and `DataFrame` objects behave like
    arrays and can therefore be passed directly to matplotlib functions without explicit
    casts.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: pandas also automatically registers formatters and locators that recognize date
    indices, thereby extending date and time support to practically all plot types
    available in matplotlib. Although this formatting does not provide the same level
    of refinement you would get when plotting via pandas, it can be faster when plotting
    a large number of points.
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '![../_images/bollinger.png](../Images/fcf533ed141454b711c76b9d47bb4697.png)'
  id: totrans-921
  prefs: []
  type: TYPE_IMG
- en: Plotting backends
  id: totrans-922
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can be extended with third-party plotting backends. The main idea is
    letting users select a plotting backend different than the provided one based
    on Matplotlib.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by passing ‘backend.module’ as the argument `backend` in `plot`
    function. For example:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Alternatively, you can also set this option globally, do you don’t need to
    specify the keyword in each `plot` call. For example:'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Or:'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'This would be more or less equivalent to:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: The backend module can then use other visualization tools (Bokeh, Altair, hvplot,…)
    to generate the plots. Some libraries implementing a backend for pandas are listed
    on [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html).
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: Developers guide can be found at [https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends](https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends)
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
