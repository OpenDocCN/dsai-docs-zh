- en: scipy.optimize.fmin_cg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Minimize a function using a nonlinear conjugate gradient algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable, `f(x, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to be minimized. Here *x* must be a 1-D array of the variables
    that are to be changed in the search for a minimum, and *args* are the other (fixed)
    parameters of *f*.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A user-supplied initial estimate of *xopt*, the optimal value of *x*. It must
    be a 1-D array of values.
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime**callable, `fprime(x, *args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A function that returns the gradient of *f* at *x*. Here *x* and *args* are
    as described above for *f*. The returned value must be a 1-D array. Defaults to
    None, in which case the gradient is approximated numerically (see *epsilon*, below).
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter values passed to *f* and *fprime*. Must be supplied whenever additional
    fixed parameters are needed to completely specify the functions *f* and *fprime*.
  prefs: []
  type: TYPE_NORMAL
- en: '**gtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Stop when the norm of the gradient is less than *gtol*.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order to use for the norm of the gradient (`-np.inf` is min, `np.inf` is max).
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**float or ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Step size(s) to use when *fprime* is approximated numerically. Can be a scalar
    or a 1-D array. Defaults to `sqrt(eps)`, with eps the floating point machine precision.
    Usually `sqrt(eps)` is about 1.5e-8.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform. Default is `200 * len(x0)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return *fopt*, *func_calls*, *grad_calls*, and *warnflag* in addition
    to *xopt*. See the Returns section below for additional information on optional
    return values.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a convergence message, followed by *xopt*.
  prefs: []
  type: TYPE_NORMAL
- en: '**retall**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, add to the returned values the results of each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An optional user-supplied function, called after each iteration. Called as `callback(xk)`,
    where `xk` is the current value of *x0*.
  prefs: []
  type: TYPE_NORMAL
- en: '**c1**float, default: 1e-4'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for Armijo condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**c2**float, default: 0.4'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for curvature condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters which minimize f, i.e., `f(xopt) == fopt`.
  prefs: []
  type: TYPE_NORMAL
- en: '**fopt**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum value found, f(xopt). Only returned if *full_output* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**func_calls**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of function_calls made. Only returned if *full_output* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**grad_calls**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of gradient calls made. Only returned if *full_output* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**warnflag**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Integer value with warning status, only returned if *full_output* is True.
  prefs: []
  type: TYPE_NORMAL
- en: '0 : Success.'
  prefs: []
  type: TYPE_NORMAL
- en: '1 : The maximum number of iterations was exceeded.'
  prefs: []
  type: TYPE_NORMAL
- en: 2Gradient and/or function calls were not changing. May indicate
  prefs: []
  type: TYPE_NORMAL
- en: that precision was lost, i.e., the routine did not converge.
  prefs: []
  type: TYPE_NORMAL
- en: '3 : NaN result encountered.'
  prefs: []
  type: TYPE_NORMAL
- en: '**allvecs**list of ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: List of arrays, containing the results at each iteration. Only returned if *retall*
    is True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: common interface to all [`scipy.optimize`](../optimize.html#module-scipy.optimize
    "scipy.optimize") algorithms for unconstrained and constrained minimization of
    multivariate functions. It provides an alternative way to call `fmin_cg`, by specifying
    `method='CG'`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This conjugate gradient algorithm is based on that of Polak and Ribiere [[1]](#r675e71ddb23e-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Conjugate gradient methods tend to work better when:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f* has a unique global minimizing point, and no local minima or other stationary
    points,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*f* is, at least locally, reasonably well approximated by a quadratic function
    of the variables,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*f* is continuous and has a continuous gradient,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*fprime* is not too large, e.g., has a norm less than 1000,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The initial guess, *x0*, is reasonably close to *f* ‘s global minimizing point,
    *xopt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parameters *c1* and *c2* must satisfy `0 < c1 < c2 < 1`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wright & Nocedal, “Numerical Optimization”, 1999, pp. 120-122.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: seek the minimum value of the expression `a*u**2 + b*u*v + c*v**2
    + d*u + e*v + f` for given values of the parameters and an initial guess `(u,
    v) = (0, 0)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2: solve the same problem using the [`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") function. (This *myopts* dictionary shows all of the
    available options, although in practice only non-default values would be needed.
    The returned value will be a dictionary.)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
