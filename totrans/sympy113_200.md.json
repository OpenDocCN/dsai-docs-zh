["```py\nclass sympy.physics.biomechanics.musculotendon.MusculotendonBase(name, pathway, activation_dynamics, *, musculotendon_dynamics=MusculotendonFormulation.RIGID_TENDON, tendon_slack_length=None, peak_isometric_force=None, optimal_fiber_length=None, maximal_fiber_velocity=None, optimal_pennation_angle=None, fiber_damping_coefficient=None, with_defaults=False)\n```", "```py\nproperty F\n```", "```py\nproperty F_M_max\n```", "```py\nproperty M\n```", "```py\nproperty a\n```", "```py\nproperty activation\n```", "```py\nproperty activation_dynamics\n```", "```py\nproperty alpha_opt\n```", "```py\nproperty beta\n```", "```py\nproperty constants\n```", "```py\nabstract curves()\n```", "```py\nproperty e\n```", "```py\nproperty excitation\n```", "```py\nproperty fiber_damping_coefficient\n```", "```py\nproperty input_vars\n```", "```py\nproperty l_M_opt\n```", "```py\nproperty l_T_slack\n```", "```py\nproperty maximal_fiber_velocity\n```", "```py\nproperty musculotendon_dynamics\n```", "```py\nproperty optimal_fiber_length\n```", "```py\nproperty optimal_pennation_angle\n```", "```py\nproperty p\n```", "```py\nproperty peak_isometric_force\n```", "```py\nproperty r\n```", "```py\nrhs()\n```", "```py\nproperty state_vars\n```", "```py\nproperty tendon_slack_length\n```", "```py\nproperty v_M_max\n```", "```py\nclassmethod with_defaults(name, pathway, activation_dynamics, *, musculotendon_dynamics=MusculotendonFormulation.RIGID_TENDON, tendon_slack_length=None, peak_isometric_force=None, optimal_fiber_length=None, maximal_fiber_velocity=10.0000000000000, optimal_pennation_angle=0.0, fiber_damping_coefficient=0.100000000000000)\n```", "```py\nproperty x\n```", "```py\nclass sympy.physics.biomechanics.musculotendon.MusculotendonDeGroote2016(name, pathway, activation_dynamics, *, musculotendon_dynamics=MusculotendonFormulation.RIGID_TENDON, tendon_slack_length=None, peak_isometric_force=None, optimal_fiber_length=None, maximal_fiber_velocity=None, optimal_pennation_angle=None, fiber_damping_coefficient=None, with_defaults=False)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (LinearPathway, Point,\n...     ReferenceFrame, dynamicsymbols) \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> O, I = O, P = symbols('O, I', cls=Point)\n>>> q, u = dynamicsymbols('q, u', real=True)\n>>> I.set_pos(O, q*N.x)\n>>> O.set_vel(N, 0)\n>>> I.set_vel(N, u*N.x)\n>>> pathway = LinearPathway(O, I)\n>>> pathway.attachments\n(O, I)\n>>> pathway.length\nAbs(q(t))\n>>> pathway.extension_velocity\nsign(q(t))*Derivative(q(t), t) \n```", "```py\n>>> from sympy.physics.biomechanics import FirstOrderActivationDeGroote2016 \n```", "```py\n>>> activation = FirstOrderActivationDeGroote2016('muscle')\n>>> activation.x\nMatrix([[a_muscle(t)]])\n>>> activation.r\nMatrix([[e_muscle(t)]])\n>>> activation.p\nMatrix([\n[tau_a_muscle],\n[tau_d_muscle],\n[    b_muscle]])\n>>> activation.rhs()\nMatrix([[((1/2 - tanh(b_muscle*(-a_muscle(t) + e_muscle(t)))/2)*(3*...]]) \n```", "```pyalpha_opt, and fiber damping coefficient ``beta```", "```py\n>>> F_M_max = symbols('F_M_max', real=True)\n>>> l_M_opt = symbols('l_M_opt', real=True)\n>>> l_T_slack = symbols('l_T_slack', real=True)\n>>> v_M_max = symbols('v_M_max', real=True)\n>>> alpha_opt = symbols('alpha_opt', real=True)\n>>> beta = symbols('beta', real=True) \n```", "```py\n>>> from sympy.physics.biomechanics import MusculotendonDeGroote2016 \n```", "```py\n>>> rigid_tendon_muscle = MusculotendonDeGroote2016(\n...     'muscle',\n...     pathway,\n...     activation,\n...     tendon_slack_length=l_T_slack,\n...     peak_isometric_force=F_M_max,\n...     optimal_fiber_length=l_M_opt,\n...     maximal_fiber_velocity=v_M_max,\n...     optimal_pennation_angle=alpha_opt,\n...     fiber_damping_coefficient=beta,\n... ) \n```", "```py\n>>> rigid_tendon_muscle.force\n-F_M_max*(beta*(-l_T_slack + Abs(q(t)))*sign(q(t))*Derivative(q(t), t)... \n```", "```py\n>>> rigid_tendon_muscle.x\nMatrix([[a_muscle(t)]])\n>>> rigid_tendon_muscle.r\nMatrix([[e_muscle(t)]]) \n```", "```py\n>>> rigid_tendon_muscle.p\nMatrix([\n[           l_T_slack],\n[             F_M_max],\n[             l_M_opt],\n[             v_M_max],\n[           alpha_opt],\n[                beta],\n[        tau_a_muscle],\n[        tau_d_muscle],\n[            b_muscle],\n[     c_0_fl_T_muscle],\n[     c_1_fl_T_muscle],\n[     c_2_fl_T_muscle],\n[     c_3_fl_T_muscle],\n[ c_0_fl_M_pas_muscle],\n[ c_1_fl_M_pas_muscle],\n[ c_0_fl_M_act_muscle],\n[ c_1_fl_M_act_muscle],\n[ c_2_fl_M_act_muscle],\n[ c_3_fl_M_act_muscle],\n[ c_4_fl_M_act_muscle],\n[ c_5_fl_M_act_muscle],\n[ c_6_fl_M_act_muscle],\n[ c_7_fl_M_act_muscle],\n[ c_8_fl_M_act_muscle],\n[ c_9_fl_M_act_muscle],\n[c_10_fl_M_act_muscle],\n[c_11_fl_M_act_muscle],\n[     c_0_fv_M_muscle],\n[     c_1_fv_M_muscle],\n[     c_2_fv_M_muscle],\n[     c_3_fv_M_muscle]]) \n```", "```py\n>>> rigid_tendon_muscle.rhs()\nMatrix([[((1/2 - tanh(b_muscle*(-a_muscle(t) + e_muscle(t)))/2)*(3*...]]) \n```", "```py\n>>> from sympy.physics.biomechanics import MusculotendonFormulation \n```", "```py\n>>> elastic_tendon_muscle = MusculotendonDeGroote2016(\n...     'muscle',\n...     pathway,\n...     activation,\n...     musculotendon_dynamics=MusculotendonFormulation.FIBER_LENGTH_EXPLICIT,\n...     tendon_slack_length=l_T_slack,\n...     peak_isometric_force=F_M_max,\n...     optimal_fiber_length=l_M_opt,\n...     maximal_fiber_velocity=v_M_max,\n...     optimal_pennation_angle=alpha_opt,\n...     fiber_damping_coefficient=beta,\n... ) \n```", "```py\n>>> elastic_tendon_muscle.force\n-F_M_max*TendonForceLengthDeGroote2016((-sqrt(l_M_opt**2*...\n>>> elastic_tendon_muscle.x\nMatrix([\n[l_M_tilde_muscle(t)],\n[        a_muscle(t)]])\n>>> elastic_tendon_muscle.r\nMatrix([[e_muscle(t)]])\n>>> elastic_tendon_muscle.p\nMatrix([\n[           l_T_slack],\n[             F_M_max],\n[             l_M_opt],\n[             v_M_max],\n[           alpha_opt],\n[                beta],\n[        tau_a_muscle],\n[        tau_d_muscle],\n[            b_muscle],\n[     c_0_fl_T_muscle],\n[     c_1_fl_T_muscle],\n[     c_2_fl_T_muscle],\n[     c_3_fl_T_muscle],\n[ c_0_fl_M_pas_muscle],\n[ c_1_fl_M_pas_muscle],\n[ c_0_fl_M_act_muscle],\n[ c_1_fl_M_act_muscle],\n[ c_2_fl_M_act_muscle],\n[ c_3_fl_M_act_muscle],\n[ c_4_fl_M_act_muscle],\n[ c_5_fl_M_act_muscle],\n[ c_6_fl_M_act_muscle],\n[ c_7_fl_M_act_muscle],\n[ c_8_fl_M_act_muscle],\n[ c_9_fl_M_act_muscle],\n[c_10_fl_M_act_muscle],\n[c_11_fl_M_act_muscle],\n[     c_0_fv_M_muscle],\n[     c_1_fv_M_muscle],\n[     c_2_fv_M_muscle],\n[     c_3_fv_M_muscle]])\n>>> elastic_tendon_muscle.rhs()\nMatrix([\n[v_M_max*FiberForceVelocityInverseDeGroote2016((l_M_opt*...],\n[ ((1/2 - tanh(b_muscle*(-a_muscle(t) + e_muscle(t)))/2)*(3*...]]) \n```", "```py\n>>> elastic_tendon_muscle = MusculotendonDeGroote2016.with_defaults(\n...     'muscle',\n...     pathway,\n...     activation,\n...     musculotendon_dynamics=MusculotendonFormulation.FIBER_LENGTH_EXPLICIT,\n...     tendon_slack_length=l_T_slack,\n...     peak_isometric_force=F_M_max,\n...     optimal_fiber_length=l_M_opt,\n... ) \n```", "```py\n>>> elastic_tendon_muscle.x\nMatrix([\n[l_M_tilde_muscle(t)],\n[        a_muscle(t)]])\n>>> elastic_tendon_muscle.r\nMatrix([[e_muscle(t)]])\n>>> elastic_tendon_muscle.p\nMatrix([\n[   l_T_slack],\n[     F_M_max],\n[     l_M_opt],\n[tau_a_muscle],\n[tau_d_muscle],\n[    b_muscle]]) \n```", "```py\nclass sympy.physics.biomechanics.musculotendon.MusculotendonFormulation(value, names=<not given>, *values, module=None, qualname=None, type=None, start=1, boundary=None)\n```"]