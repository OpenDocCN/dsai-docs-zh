- en: pandas.DataFrame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.DataFrame
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Two-dimensional, size-mutable, potentially heterogeneous tabular data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 二维、大小可变、可能异构的表格数据。
- en: Data structure also contains labeled axes (rows and columns). Arithmetic operations
    align on both row and column labels. Can be thought of as a dict-like container
    for Series objects. The primary pandas data structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构还包含带标签的轴（行和列）。算术运算在行和列标签上对齐。可以将其视为 Series 对象的类似字典的容器。主要的 pandas 数据结构。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**data**ndarray (structured or homogeneous), Iterable, dict, or DataFrame'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**data**ndarray（结构化或同质）、可迭代对象、字典或 DataFrame'
- en: Dict can contain Series, arrays, constants, dataclass or list-like objects.
    If data is a dict, column order follows insertion-order. If a dict contains Series
    which have an index defined, it is aligned by its index. This alignment also occurs
    if data is a Series or a DataFrame itself. Alignment is done on Series/DataFrame
    inputs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 字典可以包含 Series、数组、常量、数据类或类似列表的对象。如果数据是字典，则列顺序遵循插入顺序。如果字典包含具有定义索引的 Series，则按其索引对齐。如果数据本身是
    Series 或 DataFrame，则也会发生对齐。对 Series/DataFrame 输入进行对齐。
- en: If data is a list of dicts, column order follows insertion-order.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据是字典列表，则列顺序遵循插入顺序。
- en: '**index**Index or array-like'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**index**索引或类似数组'
- en: Index to use for resulting frame. Will default to RangeIndex if no indexing
    information part of input data and no index provided.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用于结果框架的索引。如果输入数据中没有索引信息且未提供索引，则默认为 RangeIndex。
- en: '**columns**Index or array-like'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**columns**索引或类似数组'
- en: Column labels to use for resulting frame when data does not have them, defaulting
    to RangeIndex(0, 1, 2, …, n). If data contains column labels, will perform column
    selection instead.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据没有列标签时用于结果框架的列标签，默认为 RangeIndex(0, 1, 2, …, n)。如果数据包含列标签，将执行列选择。
- en: '**dtype**dtype, default None'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**数据类型，默认为 None'
- en: Data type to force. Only a single dtype is allowed. If None, infer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制使用的数据类型。只允许使用单一数据类型。如果为 None，则推断。
- en: '**copy**bool or None, default None'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy**bool 或 None，默认为 None'
- en: Copy data from inputs. For dict data, the default of None behaves like `copy=True`.
    For DataFrame or 2d ndarray input, the default of None behaves like `copy=False`.
    If data is a dict containing one or more Series (possibly of different dtypes),
    `copy=False` will ensure that these inputs are not copied.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 复制输入数据。对于字典数据，默认值 None 的行为类似于 `copy=True`。对于 DataFrame 或 2 维 ndarray 输入，默认值
    None 的行为类似于 `copy=False`。如果数据是包含一个或多个 Series 的字典（可能具有不同数据类型），`copy=False` 将确保不复制这些输入。
- en: Changed in version 1.3.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.3.0 中更改。
- en: See also
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`DataFrame.from_records`](pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_records`](pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")'
- en: Constructor from tuples, also record arrays.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从元组构造，也可以是记录数组。
- en: '[`DataFrame.from_dict`](pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.from_dict`](pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")'
- en: From dicts of Series, arrays, or dicts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Series、数组或字典的字典构建。
- en: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
- en: Read a comma-separated values (csv) file into DataFrame.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 读取逗号分隔值（csv）文件到 DataFrame。
- en: '[`read_table`](pandas.read_table.html#pandas.read_table "pandas.read_table")'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`read_table`](pandas.read_table.html#pandas.read_table "pandas.read_table")'
- en: Read general delimited file into DataFrame.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从通用分隔文件读取到 DataFrame。
- en: '[`read_clipboard`](pandas.read_clipboard.html#pandas.read_clipboard "pandas.read_clipboard")'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`read_clipboard`](pandas.read_clipboard.html#pandas.read_clipboard "pandas.read_clipboard")'
- en: Read text from clipboard into DataFrame.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从剪贴板中读取文本到 DataFrame。
- en: Notes
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Please reference the [User Guide](../../user_guide/dsintro.html#basics-dataframe)
    for more information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[用户指南](../../user_guide/dsintro.html#basics-dataframe)获取更多信息。
- en: Examples
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: Constructing DataFrame from a dictionary.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从字典构建 DataFrame。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that the inferred dtype is int64.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意推断的数据类型为 int64。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To enforce a single dtype:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强制使用单一数据类型：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Constructing DataFrame from a dictionary including Series:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从包含 Series 的字典构建 DataFrame：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Constructing DataFrame from numpy ndarray:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从 numpy ndarray 构建 DataFrame：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Constructing DataFrame from a numpy ndarray that has labeled columns:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从具有标记列的 numpy ndarray 构建 DataFrame：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Constructing DataFrame from dataclass:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据类构建 DataFrame：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Constructing DataFrame from Series/DataFrame:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Series/DataFrame 构建 DataFrame：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Attributes
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 属性
- en: '| [`T`](pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T") |
    The transpose of the DataFrame. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`T`](pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T") |
    DataFrame的转置。 |'
- en: '| [`at`](pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | Access a single value for a row/column label pair. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`at`](pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | 访问行/列标签对的单个值。 |'
- en: '| [`attrs`](pandas.DataFrame.attrs.html#pandas.DataFrame.attrs "pandas.DataFrame.attrs")
    | Dictionary of global attributes of this dataset. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`attrs`](pandas.DataFrame.attrs.html#pandas.DataFrame.attrs "pandas.DataFrame.attrs")
    | 此数据集的全局属性字典。 |'
- en: '| [`axes`](pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | Return a list representing the axes of the DataFrame. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`axes`](pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | 返回表示DataFrame轴的列表。 |'
- en: '| [`columns`](pandas.DataFrame.columns.html#pandas.DataFrame.columns "pandas.DataFrame.columns")
    | The column labels of the DataFrame. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`columns`](pandas.DataFrame.columns.html#pandas.DataFrame.columns "pandas.DataFrame.columns")
    | DataFrame的列标签。 |'
- en: '| [`dtypes`](pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes "pandas.DataFrame.dtypes")
    | Return the dtypes in the DataFrame. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`dtypes`](pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes "pandas.DataFrame.dtypes")
    | 返回DataFrame中的数据类型。 |'
- en: '| [`empty`](pandas.DataFrame.empty.html#pandas.DataFrame.empty "pandas.DataFrame.empty")
    | Indicator whether Series/DataFrame is empty. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`empty`](pandas.DataFrame.empty.html#pandas.DataFrame.empty "pandas.DataFrame.empty")
    | 指示 Series/DataFrame 是否为空。 |'
- en: '| `flags` | Get the properties associated with this pandas object. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `flags` | 获取与此 pandas 对象关联的属性。 |'
- en: '| [`iat`](pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | Access a single value for a row/column pair by integer position. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`iat`](pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | 通过整数位置访问行/列对的单个值。 |'
- en: '| [`iloc`](pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`iloc`](pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (已弃用) 纯整数位置索引，根据位置进行选择。 |'
- en: '| [`index`](pandas.DataFrame.index.html#pandas.DataFrame.index "pandas.DataFrame.index")
    | The index (row labels) of the DataFrame. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`index`](pandas.DataFrame.index.html#pandas.DataFrame.index "pandas.DataFrame.index")
    | DataFrame的索引（行标签）。 |'
- en: '| [`loc`](pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`loc`](pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | 通过标签或布尔数组访问一组行和列。 |'
- en: '| [`ndim`](pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | Return an int representing the number of axes / array dimensions. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`ndim`](pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | 返回表示轴/数组维度数量的整数。 |'
- en: '| [`shape`](pandas.DataFrame.shape.html#pandas.DataFrame.shape "pandas.DataFrame.shape")
    | Return a tuple representing the dimensionality of the DataFrame. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`shape`](pandas.DataFrame.shape.html#pandas.DataFrame.shape "pandas.DataFrame.shape")
    | 返回表示DataFrame维度的元组。 |'
- en: '| [`size`](pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | Return an int representing the number of elements in this object. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`size`](pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | 返回表示此对象中元素数量的整数。 |'
- en: '| [`style`](pandas.DataFrame.style.html#pandas.DataFrame.style "pandas.DataFrame.style")
    | Returns a Styler object. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`style`](pandas.DataFrame.style.html#pandas.DataFrame.style "pandas.DataFrame.style")
    | 返回一个 Styler 对象。 |'
- en: '| [`values`](pandas.DataFrame.values.html#pandas.DataFrame.values "pandas.DataFrame.values")
    | Return a Numpy representation of the DataFrame. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`values`](pandas.DataFrame.values.html#pandas.DataFrame.values "pandas.DataFrame.values")
    | 返回DataFrame的 Numpy 表示。 |'
- en: Methods
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`abs`](pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`abs`](pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | 返回每个元素的绝对数值的 Series/DataFrame。 |'
- en: '| [`add`](pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator add). |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | 获取DataFrame和其他对象的加法，逐元素进行操作（二元操作符 add）。 |'
- en: '| [`add_prefix`](pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`add_prefix`](pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | 使用字符串前缀为标签添加前缀。 |'
- en: '| [`add_suffix`](pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`add_suffix`](pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | 使用字符串后缀添加标签。 |'
- en: '| [`agg`](pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`agg`](pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | 使用一个或多个操作在指定的轴上进行聚合。 |'
- en: '| [`aggregate`](pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`aggregate`](pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | 使用一个或多个操作在指定的轴上进行聚合。 |'
- en: '| [`align`](pandas.DataFrame.align.html#pandas.DataFrame.align "pandas.DataFrame.align")(other[, join, axis, level, copy, ...])
    | Align two objects on their axes with the specified join method. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`align`](pandas.DataFrame.align.html#pandas.DataFrame.align "pandas.DataFrame.align")(other[, join, axis, level, copy, ...])
    | 使用指定的连接方法在它们的轴上对齐两个对象。 |'
- en: '| [`all`](pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`all`](pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | 返回是否所有元素都为 True，可能沿轴进行计算。 |'
- en: '| [`any`](pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`any`](pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | 返回是否有任何元素为 True，可能沿轴进行计算。 |'
- en: '| [`apply`](pandas.DataFrame.apply.html#pandas.DataFrame.apply "pandas.DataFrame.apply")(func[, axis, raw, result_type, args, ...])
    | Apply a function along an axis of the DataFrame. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`apply`](pandas.DataFrame.apply.html#pandas.DataFrame.apply "pandas.DataFrame.apply")(func[, axis, raw, result_type, args, ...])
    | 沿着 DataFrame 的轴应用函数。 |'
- en: '| [`applymap`](pandas.DataFrame.applymap.html#pandas.DataFrame.applymap "pandas.DataFrame.applymap")(func[, na_action])
    | (DEPRECATED) Apply a function to a Dataframe elementwise. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`applymap`](pandas.DataFrame.applymap.html#pandas.DataFrame.applymap "pandas.DataFrame.applymap")(func[, na_action])
    | （已弃用）对 DataFrame 逐元素应用函数。 |'
- en: '| [`asfreq`](pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq "pandas.DataFrame.asfreq")(freq[, method, how, normalize, ...])
    | Convert time series to specified frequency. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`asfreq`](pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq "pandas.DataFrame.asfreq")(freq[, method, how, normalize, ...])
    | 将时间序列转换为指定的频率。 |'
- en: '| [`asof`](pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`asof`](pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | 返回 where 之前最后一行（行），不包含任何 NaN。 |'
- en: '| [`assign`](pandas.DataFrame.assign.html#pandas.DataFrame.assign "pandas.DataFrame.assign")(**kwargs)
    | Assign new columns to a DataFrame. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`assign`](pandas.DataFrame.assign.html#pandas.DataFrame.assign "pandas.DataFrame.assign")(**kwargs)
    | 将新列分配给 DataFrame。 |'
- en: '| [`astype`](pandas.DataFrame.astype.html#pandas.DataFrame.astype "pandas.DataFrame.astype")(dtype[, copy, errors])
    | Cast a pandas object to a specified dtype `dtype`. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`astype`](pandas.DataFrame.astype.html#pandas.DataFrame.astype "pandas.DataFrame.astype")(dtype[, copy, errors])
    | 将 pandas 对象转换为指定的 dtype `dtype`。 |'
- en: '| [`at_time`](pandas.DataFrame.at_time.html#pandas.DataFrame.at_time "pandas.DataFrame.at_time")(time[, asof, axis])
    | Select values at particular time of day (e.g., 9:30AM). |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`at_time`](pandas.DataFrame.at_time.html#pandas.DataFrame.at_time "pandas.DataFrame.at_time")(time[, asof, axis])
    | 选择一天中特定时间的值（例如，上午 9:30）。 |'
- en: '| [`backfill`](pandas.DataFrame.backfill.html#pandas.DataFrame.backfill "pandas.DataFrame.backfill")(*[, axis, inplace, limit, downcast])
    | (DEPRECATED) Fill NA/NaN values by using the next valid observation to fill
    the gap. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`backfill`](pandas.DataFrame.backfill.html#pandas.DataFrame.backfill "pandas.DataFrame.backfill")(*[, axis, inplace, limit, downcast])
    | （已弃用）使用下一个有效观察值填充 NA/NaN 值以填补间隙。 |'
- en: '| [`between_time`](pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time[, ...]) | Select values
    between particular times of the day (e.g., 9:00-9:30 AM). |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`between_time`](pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time[, ...]) | 选择一天中特定时间之间的值（例如，上午
    9:00-9:30）。 |'
- en: '| [`bfill`](pandas.DataFrame.bfill.html#pandas.DataFrame.bfill "pandas.DataFrame.bfill")(*[, axis, inplace, limit, limit_area, ...])
    | Fill NA/NaN values by using the next valid observation to fill the gap. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`bfill`](pandas.DataFrame.bfill.html#pandas.DataFrame.bfill "pandas.DataFrame.bfill")(*[, axis, inplace, limit, limit_area, ...])
    | 使用下一个有效观察值填充 NA/NaN 值以填补间隙。 |'
- en: '| [`bool`](pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`bool`](pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")
    | （已弃用）返回单个元素Series或DataFrame的布尔值。 |'
- en: '| [`boxplot`](pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot "pandas.DataFrame.boxplot")([column, by, ax, fontsize, rot, ...])
    | Make a box plot from DataFrame columns. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`boxplot`](pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot "pandas.DataFrame.boxplot")
    | 从DataFrame列制作箱线图。 |'
- en: '| [`clip`](pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`clip`](pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")
    | 在输入阈值处修剪值。 |'
- en: '| [`combine`](pandas.DataFrame.combine.html#pandas.DataFrame.combine "pandas.DataFrame.combine")(other, func[, fill_value, overwrite])
    | Perform column-wise combine with another DataFrame. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`combine`](pandas.DataFrame.combine.html#pandas.DataFrame.combine "pandas.DataFrame.combine")
    | 与另一个DataFrame进行列级组合。 |'
- en: '| [`combine_first`](pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | Update null elements with value in
    the same location in other. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`combine_first`](pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") | 使用其他位置相同位置的值更新空元素。 |'
- en: '| [`compare`](pandas.DataFrame.compare.html#pandas.DataFrame.compare "pandas.DataFrame.compare")(other[, align_axis, keep_shape, ...])
    | Compare to another DataFrame and show the differences. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`compare`](pandas.DataFrame.compare.html#pandas.DataFrame.compare "pandas.DataFrame.compare")
    | 与另一个DataFrame进行比较并显示差异。 |'
- en: '| [`convert_dtypes`](pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | Convert columns to
    the best possible dtypes using dtypes supporting `pd.NA`. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`convert_dtypes`](pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes") | 使用支持`pd.NA`的数据类型将列转换为最佳可能的数据类型。 |'
- en: '| [`copy`](pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")
    | 复制此对象的索引和数据。 |'
- en: '| [`corr`](pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, numeric_only])
    | Compute pairwise correlation of columns, excluding NA/null values. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`corr`](pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")
    | 计算列的成对相关性，排除NA/null值。 |'
- en: '| [`corrwith`](pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith "pandas.DataFrame.corrwith")(other[, axis, drop, method, ...])
    | Compute pairwise correlation. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`corrwith`](pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith "pandas.DataFrame.corrwith")
    | 计算成对的相关性。 |'
- en: '| [`count`](pandas.DataFrame.count.html#pandas.DataFrame.count "pandas.DataFrame.count")([axis, numeric_only])
    | Count non-NA cells for each column or row. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`count`](pandas.DataFrame.count.html#pandas.DataFrame.count "pandas.DataFrame.count")
    | 计算每列或每行的非NA单元格。 |'
- en: '| [`cov`](pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | Compute pairwise covariance of columns, excluding NA/null values. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`cov`](pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")
    | 计算列的成对协方差，排除NA/null值。 |'
- en: '| [`cummax`](pandas.DataFrame.cummax.html#pandas.DataFrame.cummax "pandas.DataFrame.cummax")([axis, skipna])
    | Return cumulative maximum over a DataFrame or Series axis. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`cummax`](pandas.DataFrame.cummax.html#pandas.DataFrame.cummax "pandas.DataFrame.cummax")
    | 返回DataFrame或Series轴上的累积最大值。 |'
- en: '| [`cummin`](pandas.DataFrame.cummin.html#pandas.DataFrame.cummin "pandas.DataFrame.cummin")([axis, skipna])
    | Return cumulative minimum over a DataFrame or Series axis. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`cummin`](pandas.DataFrame.cummin.html#pandas.DataFrame.cummin "pandas.DataFrame.cummin")
    | 返回DataFrame或Series轴上的累积最小值。 |'
- en: '| [`cumprod`](pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod "pandas.DataFrame.cumprod")([axis, skipna])
    | Return cumulative product over a DataFrame or Series axis. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod`](pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod "pandas.DataFrame.cumprod")
    | 返回DataFrame或Series轴上的累积乘积。 |'
- en: '| [`cumsum`](pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum "pandas.DataFrame.cumsum")([axis, skipna])
    | Return cumulative sum over a DataFrame or Series axis. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum`](pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum "pandas.DataFrame.cumsum")
    | 返回DataFrame或Series轴上的累积和。 |'
- en: '| [`describe`](pandas.DataFrame.describe.html#pandas.DataFrame.describe "pandas.DataFrame.describe")([percentiles, include, exclude])
    | Generate descriptive statistics. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`describe`](pandas.DataFrame.describe.html#pandas.DataFrame.describe "pandas.DataFrame.describe")([percentiles, include, exclude])
    | 生成描述性统计信息。 |'
- en: '| [`diff`](pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | First discrete difference of element. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`diff`](pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | 元素的第一个离散差异。 |'
- en: '| [`div`](pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`div`](pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的浮点除法，元素级别（二进制运算符truediv）。 |'
- en: '| `divide`(other[, axis, level, fill_value]) | Get Floating division of dataframe
    and other, element-wise (binary operator truediv). |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `divide`(other[, axis, level, fill_value]) | 获取数据帧和其他数据的浮点除法，元素级别（二进制运算符truediv）。
    |'
- en: '| [`dot`](pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | Compute the matrix multiplication between the DataFrame and other. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`dot`](pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | 计算数据帧和其他数据之间的矩阵乘法。 |'
- en: '| [`drop`](pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, columns, level, ...])
    | Drop specified labels from rows or columns. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`drop`](pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, columns, level, ...])
    | 从行或列中删除指定标签。 |'
- en: '| [`drop_duplicates`](pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, inplace, ...]) | Return DataFrame
    with duplicate rows removed. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`drop_duplicates`](pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, inplace, ...]) | 返回删除重复行的数据帧。
    |'
- en: '| [`droplevel`](pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`droplevel`](pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | 返回请求的索引/列级别删除后的Series/DataFrame。
    |'
- en: '| [`dropna`](pandas.DataFrame.dropna.html#pandas.DataFrame.dropna "pandas.DataFrame.dropna")(*[, axis, how, thresh, subset, ...])
    | Remove missing values. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`dropna`](pandas.DataFrame.dropna.html#pandas.DataFrame.dropna "pandas.DataFrame.dropna")(*[, axis, how, thresh, subset, ...])
    | 移除缺失值。 |'
- en: '| [`duplicated`](pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | Return boolean Series denoting
    duplicate rows. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`duplicated`](pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | 返回表示重复行的布尔Series。 |'
- en: '| [`eq`](pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | Get Equal to of dataframe and other, element-wise (binary operator eq). |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`eq`](pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | 获取数据帧和其他数据相等的元素（二进制运算符eq）。 |'
- en: '| [`equals`](pandas.DataFrame.equals.html#pandas.DataFrame.equals "pandas.DataFrame.equals")(other)
    | Test whether two objects contain the same elements. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`equals`](pandas.DataFrame.equals.html#pandas.DataFrame.equals "pandas.DataFrame.equals")(other)
    | 测试两个对象是否包含相同的元素。 |'
- en: '| [`eval`](pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | Evaluate a string describing operations on DataFrame columns. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`eval`](pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | 对描述数据帧列操作的字符串进行求值。 |'
- en: '| [`ewm`](pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`ewm`](pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | 提供指数加权（EW）计算。 |'
- en: '| [`expanding`](pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | Provide expanding
    window calculations. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`expanding`](pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | 提供扩展窗口计算。 |'
- en: '| [`explode`](pandas.DataFrame.explode.html#pandas.DataFrame.explode "pandas.DataFrame.explode")(column[, ignore_index])
    | Transform each element of a list-like to a row, replicating index values. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`explode`](pandas.DataFrame.explode.html#pandas.DataFrame.explode "pandas.DataFrame.explode")(column[, ignore_index])
    | 将列表的每个元素转换为一行，复制索引值。 |'
- en: '| [`ffill`](pandas.DataFrame.ffill.html#pandas.DataFrame.ffill "pandas.DataFrame.ffill")(*[, axis, inplace, limit, limit_area, ...])
    | Fill NA/NaN values by propagating the last valid observation to next valid.
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`ffill`](pandas.DataFrame.ffill.html#pandas.DataFrame.ffill "pandas.DataFrame.ffill")(*[, axis, inplace, limit, limit_area, ...])
    | 通过将最后一个有效观察结果传播到下一个有效值来填充NA/NaN值。 |'
- en: '| [`fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")([value, method, axis, inplace, ...])
    | Fill NA/NaN values using the specified method. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")([value, method, axis, inplace, ...])
    | 使用指定方法填充NA/NaN值。 |'
- en: '| [`filter`](pandas.DataFrame.filter.html#pandas.DataFrame.filter "pandas.DataFrame.filter")([items, like, regex, axis])
    | Subset the dataframe rows or columns according to the specified index labels.
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`filter`](pandas.DataFrame.filter.html#pandas.DataFrame.filter "pandas.DataFrame.filter")([items, like, regex, axis])
    | 根据指定的索引标签对数据帧行或列进行子集筛选。 |'
- en: '| [`first`](pandas.DataFrame.first.html#pandas.DataFrame.first "pandas.DataFrame.first")(offset)
    | (DEPRECATED) Select initial periods of time series data based on a date offset.
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`first`](pandas.DataFrame.first.html#pandas.DataFrame.first "pandas.DataFrame.first")(offset)
    | （已弃用）根据日期偏移量选择时间序列数据的初始时间段。 |'
- en: '| [`first_valid_index`](pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | Return index for first non-NA value
    or None, if no non-NA value is found. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`first_valid_index`](pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | 返回第一个非NA值的索引，如果找不到非NA值，则返回None。 |'
- en: '| [`floordiv`](pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv "pandas.DataFrame.floordiv")(other[, axis, level, fill_value])
    | Get Integer division of dataframe and other, element-wise (binary operator floordiv).
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`floordiv`](pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv "pandas.DataFrame.floordiv")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的整数除法，逐元素进行（二进制运算符floordiv）。 |'
- en: '| [`from_dict`](pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, columns]) | Construct DataFrame
    from dict of array-like or dicts. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`from_dict`](pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, columns]) | 从数组样式或字典的字典构造数据帧。
    |'
- en: '| [`from_records`](pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, exclude, ...]) | Convert structured
    or record ndarray to DataFrame. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`from_records`](pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, exclude, ...]) | 将结构化或记录ndarray转换为DataFrame。
    |'
- en: '| [`ge`](pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | Get Greater than or equal to of dataframe and other, element-wise (binary operator
    ge). |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`ge`](pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | 获取数据帧和其他数据的大于或等于，逐元素进行（二进制运算符ge）。 |'
- en: '| [`get`](pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`get`](pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | 从对象中获取给定键（例如：DataFrame列）的项目。 |'
- en: '| [`groupby`](pandas.DataFrame.groupby.html#pandas.DataFrame.groupby "pandas.DataFrame.groupby")([by, axis, level, as_index, sort, ...])
    | Group DataFrame using a mapper or by a Series of columns. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`groupby`](pandas.DataFrame.groupby.html#pandas.DataFrame.groupby "pandas.DataFrame.groupby")([by, axis, level, as_index, sort, ...])
    | 使用映射器或列系列对数据帧进行分组。 |'
- en: '| [`gt`](pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | Get Greater than of dataframe and other, element-wise (binary operator gt).
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`gt`](pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | 获取数据帧和其他数据的大于，逐元素进行（二���制运算符gt）。 |'
- en: '| [`head`](pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`head`](pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | 返回前n行。 |'
- en: '| [`hist`](pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, xlabelsize, xrot, ...])
    | Make a histogram of the DataFrame''s columns. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`hist`](pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, xlabelsize, xrot, ...])
    | 绘制数据帧列的直方图。 |'
- en: '| [`idxmax`](pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax "pandas.DataFrame.idxmax")([axis, skipna, numeric_only])
    | Return index of first occurrence of maximum over requested axis. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmax`](pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax "pandas.DataFrame.idxmax")([axis, skipna, numeric_only])
    | 返回请求轴上最大值的第一次出现的索引。 |'
- en: '| [`idxmin`](pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin "pandas.DataFrame.idxmin")([axis, skipna, numeric_only])
    | Return index of first occurrence of minimum over requested axis. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmin`](pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin "pandas.DataFrame.idxmin")([axis, skipna, numeric_only])
    | 返回请求轴上最小值的第一次出现的索引。 |'
- en: '| [`infer_objects`](pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | Attempt to infer better dtypes for
    object columns. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`infer_objects`](pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | 尝试为对象列推断更好的数据类型。 |'
- en: '| [`info`](pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, memory_usage, ...])
    | Print a concise summary of a DataFrame. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`info`](pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, memory_usage, ...])
    | 打印DataFrame的简明摘要。'
- en: '| [`insert`](pandas.DataFrame.insert.html#pandas.DataFrame.insert "pandas.DataFrame.insert")(loc, column, value[, allow_duplicates])
    | Insert column into DataFrame at specified location. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`insert`](pandas.DataFrame.insert.html#pandas.DataFrame.insert "pandas.DataFrame.insert")(loc, column, value[, allow_duplicates])
    | 在指定位置将列插入DataFrame中。'
- en: '| [`interpolate`](pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, inplace, ...]) | Fill NaN
    values using an interpolation method. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`interpolate`](pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, inplace, ...]) | 使用插值方法填充
    NaN 值。'
- en: '| `isetitem`(loc, value) | Set the given value in the column with position
    loc. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `isetitem`(loc, value) | 在位置loc的列中设置给定值。'
- en: '| [`isin`](pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | Whether each element in the DataFrame is contained in values. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`isin`](pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | DataFrame中的每个元素是否包含在values中。'
- en: '| [`isna`](pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | Detect missing values. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`isna`](pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | 检测缺失值。'
- en: '| [`isnull`](pandas.DataFrame.isnull.html#pandas.DataFrame.isnull "pandas.DataFrame.isnull")()
    | DataFrame.isnull is an alias for DataFrame.isna. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`isnull`](pandas.DataFrame.isnull.html#pandas.DataFrame.isnull "pandas.DataFrame.isnull")()
    | DataFrame.isnull 是 DataFrame.isna 的别名。'
- en: '| [`items`](pandas.DataFrame.items.html#pandas.DataFrame.items "pandas.DataFrame.items")()
    | Iterate over (column name, Series) pairs. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`items`](pandas.DataFrame.items.html#pandas.DataFrame.items "pandas.DataFrame.items")()
    | 迭代(column name, Series)对。'
- en: '| [`iterrows`](pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows "pandas.DataFrame.iterrows")()
    | Iterate over DataFrame rows as (index, Series) pairs. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`iterrows`](pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows "pandas.DataFrame.iterrows")()
    | 以(index, Series)对的形式迭代DataFrame行。'
- en: '| [`itertuples`](pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | Iterate over DataFrame rows as
    namedtuples. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`itertuples`](pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | 以命名元组的形式迭代DataFrame行。'
- en: '| [`join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, rsuffix, ...])
    | Join columns of another DataFrame. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, rsuffix, ...])
    | 连接另一个DataFrame的列。'
- en: '| [`keys`](pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | Get the ''info axis'' (see Indexing for more). |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`keys`](pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | 获取“信息轴”（详见索引）。'
- en: '| [`kurt`](pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`kurt`](pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏峰度。'
- en: '| [`kurtosis`](pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`kurtosis`](pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏峰度。'
- en: '| [`last`](pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`last`](pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | （已弃用）根据日期偏移量选择时间序列数据的最后时间段。'
- en: '| [`last_valid_index`](pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | Return index for last non-NA value or
    None, if no non-NA value is found. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`last_valid_index`](pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | 返回最后一个非NA值的索引，如果找不到非NA值，则返回None。'
- en: '| [`le`](pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | Get Less than or equal to of dataframe and other, element-wise (binary operator
    le). |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`le`](pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | 获取DataFrame和other的小于或等于，逐个元素（二元操作符le）。'
- en: '| [`lt`](pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | Get Less than of dataframe and other, element-wise (binary operator lt). |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`lt`](pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | 获取DataFrame和other的小于，逐个元素（二元操作符lt）。'
- en: '| [`map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | Apply a function to a Dataframe elementwise. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | 对 Dataframe 逐元素应用函数。 |'
- en: '| [`mask`](pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, level])
    | Replace values where the condition is True. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`mask`](pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, level])
    | 替换条件为 True 的值。 |'
- en: '| [`max`](pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`max`](pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | 返回所请求轴上值的最大值。 |'
- en: '| [`mean`](pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`mean`](pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | 返回所请求轴上值的平均值。 |'
- en: '| [`median`](pandas.DataFrame.median.html#pandas.DataFrame.median "pandas.DataFrame.median")([axis, skipna, numeric_only])
    | Return the median of the values over the requested axis. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`median`](pandas.DataFrame.median.html#pandas.DataFrame.median "pandas.DataFrame.median")([axis, skipna, numeric_only])
    | 返回所请求轴上值的中位数。 |'
- en: '| [`melt`](pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, var_name, ...])
    | Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`melt`](pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, var_name, ...])
    | 将 DataFrame 从宽格式转换为长格式，可选择保留标识符。 |'
- en: '| [`memory_usage`](pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | Return the memory usage of each
    column in bytes. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`memory_usage`](pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | 返回每列的内存使用量（以字节为单位）。 |'
- en: '| [`merge`](pandas.DataFrame.merge.html#pandas.DataFrame.merge "pandas.DataFrame.merge")(right[, how, on, left_on, right_on, ...])
    | Merge DataFrame or named Series objects with a database-style join. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`merge`](pandas.DataFrame.merge.html#pandas.DataFrame.merge "pandas.DataFrame.merge")(right[, how, on, left_on, right_on, ...])
    | 用数据库风格的连接将 DataFrame 或命名 Series 对象合并。 |'
- en: '| [`min`](pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`min`](pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | 返回所请求轴上值的最小值。 |'
- en: '| [`mod`](pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator mod). |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他元素的模数，逐元素（二进制运算符 mod）。 |'
- en: '| [`mode`](pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | Get the mode(s) of each element along the selected axis. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`mode`](pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | 获取沿所选轴的每个元素的众数。 |'
- en: '| [`mul`](pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator mul).
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`mul`](pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他元素的乘积，逐元素（二进制运算符 mul）。 |'
- en: '| `multiply`(other[, axis, level, fill_value]) | Get Multiplication of dataframe
    and other, element-wise (binary operator mul). |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `multiply`(other[, axis, level, fill_value]) | 获取 dataframe 和其他元素的乘积，逐元素（二进制运算符
    mul）。 |'
- en: '| [`ne`](pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | Get Not equal to of dataframe and other, element-wise (binary operator ne).
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`ne`](pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | 获取 dataframe 和其他元素的不等于，逐元素（二进制运算符 ne）。 |'
- en: '| [`nlargest`](pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest "pandas.DataFrame.nlargest")(n, columns[, keep])
    | Return the first n rows ordered by columns in descending order. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`nlargest`](pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest "pandas.DataFrame.nlargest")(n, columns[, keep])
    | 按降序排列的列返回前 n 行。 |'
- en: '| [`notna`](pandas.DataFrame.notna.html#pandas.DataFrame.notna "pandas.DataFrame.notna")()
    | Detect existing (non-missing) values. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`notna`](pandas.DataFrame.notna.html#pandas.DataFrame.notna "pandas.DataFrame.notna")()
    | 检测存在（非缺失）的值。 |'
- en: '| [`notnull`](pandas.DataFrame.notnull.html#pandas.DataFrame.notnull "pandas.DataFrame.notnull")()
    | DataFrame.notnull is an alias for DataFrame.notna. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`notnull`](pandas.DataFrame.notnull.html#pandas.DataFrame.notnull "pandas.DataFrame.notnull")()
    | DataFrame.notnull 是 DataFrame.notna 的别名。 |'
- en: '| [`nsmallest`](pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in ascending order. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`nsmallest`](pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | 返回按升序排列的列中的前n行。'
- en: '| [`nunique`](pandas.DataFrame.nunique.html#pandas.DataFrame.nunique "pandas.DataFrame.nunique")([axis, dropna])
    | Count number of distinct elements in specified axis. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`nunique`](pandas.DataFrame.nunique.html#pandas.DataFrame.nunique "pandas.DataFrame.nunique")([axis, dropna])
    | 计算指定轴上的不同元素数量。'
- en: '| [`pad`](pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, downcast])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`pad`](pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, downcast])
    | （已弃用）通过将上一个有效观测值传播到下一个有效值来填充NA/NaN值。'
- en: '| [`pct_change`](pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, limit, freq]) | Fractional
    change between the current and a prior element. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`pct_change`](pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, limit, freq]) | 当前元素与先前元素之间的分数变化。'
- en: '| [`pipe`](pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`pipe`](pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | 应用期望Series或DataFrames的链式函数。'
- en: '| [`pivot`](pandas.DataFrame.pivot.html#pandas.DataFrame.pivot "pandas.DataFrame.pivot")(*, columns[, index, values])
    | Return reshaped DataFrame organized by given index / column values. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`pivot`](pandas.DataFrame.pivot.html#pandas.DataFrame.pivot "pandas.DataFrame.pivot")(*, columns[, index, values])
    | 返回按给定索引/列值组织的重塑数据帧。'
- en: '| [`pivot_table`](pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, columns, ...]) | Create a spreadsheet-style
    pivot table as a DataFrame. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`pivot_table`](pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, columns, ...]) | 创建一个类似电子表格的透视表，作为数据帧。'
- en: '| [`pop`](pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | Return item and drop from frame. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`pop`](pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | 返回项目并从数据帧中删除。'
- en: '| [`pow`](pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    pow). |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`pow`](pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | 获取数据帧和其他元素的指数幂，逐元素进行计算（二元运算符pow）。'
- en: '| [`prod`](pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, min_count])
    | Return the product of the values over the requested axis. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`prod`](pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, min_count])
    | 返回请求轴上值的乘积。'
- en: '| [`product`](pandas.DataFrame.product.html#pandas.DataFrame.product "pandas.DataFrame.product")([axis, skipna, numeric_only, min_count])
    | Return the product of the values over the requested axis. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`product`](pandas.DataFrame.product.html#pandas.DataFrame.product "pandas.DataFrame.product")([axis, skipna, numeric_only, min_count])
    | 返回请求轴上值的乘积。'
- en: '| [`quantile`](pandas.DataFrame.quantile.html#pandas.DataFrame.quantile "pandas.DataFrame.quantile")([q, axis, numeric_only, ...])
    | Return values at the given quantile over requested axis. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`quantile`](pandas.DataFrame.quantile.html#pandas.DataFrame.quantile "pandas.DataFrame.quantile")([q, axis, numeric_only, ...])
    | 返回请求轴上给定分位数处的值。'
- en: '| [`query`](pandas.DataFrame.query.html#pandas.DataFrame.query "pandas.DataFrame.query")(expr, *[, inplace])
    | Query the columns of a DataFrame with a boolean expression. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`query`](pandas.DataFrame.query.html#pandas.DataFrame.query "pandas.DataFrame.query")(expr, *[, inplace])
    | 使用布尔表达式查询数据帧的列。'
- en: '| [`radd`](pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator radd). |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`radd`](pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | 获取数据帧和其他元素的加法，逐元素进行计算（二元运算符radd）。'
- en: '| [`rank`](pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`rank`](pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | 沿轴计算数值数据排名（1到n）。'
- en: '| [`rdiv`](pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`rdiv`](pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的浮点除法，按元素计算（二元运算符 rtruediv）。 |'
- en: '| [`reindex`](pandas.DataFrame.reindex.html#pandas.DataFrame.reindex "pandas.DataFrame.reindex")([labels, index, columns, axis, ...])
    | Conform DataFrame to new index with optional filling logic. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`reindex`](pandas.DataFrame.reindex.html#pandas.DataFrame.reindex "pandas.DataFrame.reindex")([labels, index, columns, axis, ...])
    | 使用可选的填充逻辑将 DataFrame 调整到新索引。 |'
- en: '| [`reindex_like`](pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, copy, limit, ...]) | Return an
    object with matching indices as other object. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`reindex_like`](pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, copy, limit, ...]) | 返回与其他对象具有匹配索引的对象。
    |'
- en: '| [`rename`](pandas.DataFrame.rename.html#pandas.DataFrame.rename "pandas.DataFrame.rename")([mapper, index, columns, axis, copy, ...])
    | Rename columns or index labels. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`rename`](pandas.DataFrame.rename.html#pandas.DataFrame.rename "pandas.DataFrame.rename")([mapper, index, columns, axis, copy, ...])
    | 重命名列或索引标签。 |'
- en: '| [`rename_axis`](pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, columns, axis, ...]) | Set the
    name of the axis for the index or columns. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`rename_axis`](pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, columns, axis, ...]) | 设置索引或列的轴名称。
    |'
- en: '| [`reorder_levels`](pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | Rearrange index levels using
    input order. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`reorder_levels`](pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | 使用输入顺序重新排列索引级别。 |'
- en: '| [`replace`](pandas.DataFrame.replace.html#pandas.DataFrame.replace "pandas.DataFrame.replace")([to_replace, value, inplace, limit, ...])
    | Replace values given in to_replace with value. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`replace`](pandas.DataFrame.replace.html#pandas.DataFrame.replace "pandas.DataFrame.replace")([to_replace, value, inplace, limit, ...])
    | 用给定值替换 to_replace 中的值。 |'
- en: '| [`resample`](pandas.DataFrame.resample.html#pandas.DataFrame.resample "pandas.DataFrame.resample")(rule[, axis, closed, label, ...])
    | Resample time-series data. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`resample`](pandas.DataFrame.resample.html#pandas.DataFrame.resample "pandas.DataFrame.resample")(rule[, axis, closed, label, ...])
    | 重新采样时间序列数据。 |'
- en: '| [`reset_index`](pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, inplace, ...]) | Reset the index,
    or a level of it. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`reset_index`](pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, inplace, ...]) | 重置索引，或其级别。 |'
- en: '| [`rfloordiv`](pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, fill_value]) | Get Integer
    division of dataframe and other, element-wise (binary operator rfloordiv). |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`rfloordiv`](pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, fill_value]) | 获取数据框和其他数据的整数除法，按元素计算（二元运算符
    rfloordiv）。 |'
- en: '| [`rmod`](pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator rmod). |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`rmod`](pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的模除法，按元素计算（二元运算符 rmod）。 |'
- en: '| [`rmul`](pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator rmul).
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`rmul`](pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的乘法，按元素计算（二元运算符 rmul）。 |'
- en: '| [`rolling`](pandas.DataFrame.rolling.html#pandas.DataFrame.rolling "pandas.DataFrame.rolling")(window[, min_periods, center, ...])
    | Provide rolling window calculations. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`rolling`](pandas.DataFrame.rolling.html#pandas.DataFrame.rolling "pandas.DataFrame.rolling")(window[, min_periods, center, ...])
    | 提供滚动窗口计算。 |'
- en: '| [`round`](pandas.DataFrame.round.html#pandas.DataFrame.round "pandas.DataFrame.round")([decimals])
    | Round a DataFrame to a variable number of decimal places. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`round`](pandas.DataFrame.round.html#pandas.DataFrame.round "pandas.DataFrame.round")([decimals])
    | 将 DataFrame 四舍五入到可变数量的小数位数。 |'
- en: '| [`rpow`](pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    rpow). |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`rpow`](pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的指数幂，按元素计算（二元运算符 rpow）。 |'
- en: '| [`rsub`](pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator rsub).
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`rsub`](pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的减法，逐元素进行（二进制运算符 rsub）。'
- en: '| [`rtruediv`](pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv "pandas.DataFrame.rtruediv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`rtruediv`](pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv "pandas.DataFrame.rtruediv")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的浮点除法，逐元素进行（二进制运算符 rtruediv）。'
- en: '| [`sample`](pandas.DataFrame.sample.html#pandas.DataFrame.sample "pandas.DataFrame.sample")([n, frac, replace, weights, ...])
    | Return a random sample of items from an axis of object. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`sample`](pandas.DataFrame.sample.html#pandas.DataFrame.sample "pandas.DataFrame.sample")([n, frac, replace, weights, ...])
    | 从对象的轴中返回随机样本。'
- en: '| [`select_dtypes`](pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | Return a subset of the
    DataFrame''s columns based on the column dtypes. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`select_dtypes`](pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | 根据列数据类型返回数据帧列的子集。'
- en: '| [`sem`](pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`sem`](pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的无偏均值标准误差。'
- en: '| [`set_axis`](pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis "pandas.DataFrame.set_axis")(labels, *[, axis, copy])
    | Assign desired index to given axis. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`set_axis`](pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis "pandas.DataFrame.set_axis")(labels, *[, axis, copy])
    | 将所需索引分配给给定轴。'
- en: '| [`set_flags`](pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, allows_duplicate_labels]) | Return a new
    object with updated flags. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`set_flags`](pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, allows_duplicate_labels]) | 返回具有更新标志的新对象。'
- en: '| [`set_index`](pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, inplace, ...]) | Set the
    DataFrame index using existing columns. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`set_index`](pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, inplace, ...]) | 使用现有列设置数据帧索引。'
- en: '| [`shift`](pandas.DataFrame.shift.html#pandas.DataFrame.shift "pandas.DataFrame.shift")([periods, freq, axis, fill_value, suffix])
    | Shift index by desired number of periods with an optional time freq. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`shift`](pandas.DataFrame.shift.html#pandas.DataFrame.shift "pandas.DataFrame.shift")([periods, freq, axis, fill_value, suffix])
    | 将索引按所需周期数移动，可选时间频率。'
- en: '| [`skew`](pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`skew`](pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏偏斜度。'
- en: '| [`sort_index`](pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ascending, ...]) | Sort object
    by labels (along an axis). |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`sort_index`](pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ascending, ...]) | 按标签（沿轴）对对象进行排序。'
- en: '| [`sort_values`](pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ascending, ...]) | Sort by the values
    along either axis. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`sort_values`](pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ascending, ...]) | 沿着任一轴的值排序。'
- en: '| [`squeeze`](pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze "pandas.DataFrame.squeeze")([axis])
    | Squeeze 1 dimensional axis objects into scalars. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`squeeze`](pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze "pandas.DataFrame.squeeze")([axis])
    | 将一维轴对象压缩为标量。'
- en: '| [`stack`](pandas.DataFrame.stack.html#pandas.DataFrame.stack "pandas.DataFrame.stack")([level, dropna, sort, future_stack])
    | Stack the prescribed level(s) from columns to index. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`stack`](pandas.DataFrame.stack.html#pandas.DataFrame.stack "pandas.DataFrame.stack")([level, dropna, sort, future_stack])
    | 将列中的指定级别堆叠到索引中。'
- en: '| [`std`](pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`std`](pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的样本标准偏差。'
- en: '| [`sub`](pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator sub).
    |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`sub`](pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | 获取 DataFrame 和其他对象的减法，逐元素操作（二元减法运算符）。 |'
- en: '| `subtract`(other[, axis, level, fill_value]) | Get Subtraction of dataframe
    and other, element-wise (binary operator sub). |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `subtract`(other[, axis, level, fill_value]) | 获取 DataFrame 和其他对象的减法，逐元素操作（二元减法运算符）。
    |'
- en: '| [`sum`](pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, min_count])
    | Return the sum of the values over the requested axis. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`sum`](pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, min_count])
    | 沿请求的轴返回值的总和。 |'
- en: '| [`swapaxes`](pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes "pandas.DataFrame.swapaxes")(axis1, axis2[, copy])
    | (DEPRECATED) Interchange axes and swap values axes appropriately. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes "pandas.DataFrame.swapaxes")(axis1, axis2[, copy])
    | （已弃用）交换轴并适当地交换值轴。 |'
- en: '| [`swaplevel`](pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | Swap levels i and j in a [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`swaplevel`](pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | 在 [`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") 中交换级别 i 和 j。 |'
- en: '| [`tail`](pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`tail`](pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | 返回最后 n 行。 |'
- en: '| [`take`](pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`take`](pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | 返回沿轴的给定 *位置* 索引的元素。 |'
- en: '| [`to_clipboard`](pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`to_clipboard`](pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | 将对象复制到系统剪贴板。 |'
- en: '| [`to_csv`](pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...])
    | Write object to a comma-separated values (csv) file. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`to_csv`](pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...])
    | 将对象写入逗号分隔值（csv）文件。 |'
- en: '| [`to_dict`](pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict "pandas.DataFrame.to_dict")([orient, into, index])
    | Convert the DataFrame to a dictionary. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`to_dict`](pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict "pandas.DataFrame.to_dict")([orient, into, index])
    | 将 DataFrame 转换为字典。 |'
- en: '| [`to_excel`](pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel "pandas.DataFrame.to_excel")(excel_writer, *[, sheet_name, ...])
    | Write object to an Excel sheet. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`to_excel`](pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel "pandas.DataFrame.to_excel")(excel_writer, *[, sheet_name, ...])
    | 将对象写入 Excel 表格。 |'
- en: '| [`to_feather`](pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`to_feather`](pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | 将 DataFrame 写入二进制 Feather 格式。
    |'
- en: '| [`to_gbq`](pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq "pandas.DataFrame.to_gbq")(destination_table, *[, project_id, ...])
    | (DEPRECATED) Write a DataFrame to a Google BigQuery table. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`to_gbq`](pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq "pandas.DataFrame.to_gbq")(destination_table, *[, project_id, ...])
    | （已弃用）将 DataFrame 写入 Google BigQuery 表。 |'
- en: '| [`to_hdf`](pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, mode, ...])
    | Write the contained data to an HDF5 file using HDFStore. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`to_hdf`](pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, mode, ...])
    | 使用 HDFStore 将包含的数据写入 HDF5 文件。 |'
- en: '| [`to_html`](pandas.DataFrame.to_html.html#pandas.DataFrame.to_html "pandas.DataFrame.to_html")([buf, columns, col_space, header, ...])
    | Render a DataFrame as an HTML table. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`to_html`](pandas.DataFrame.to_html.html#pandas.DataFrame.to_html "pandas.DataFrame.to_html")([buf, columns, col_space, header, ...])
    | 将 DataFrame 渲染为 HTML 表格。 |'
- en: '| [`to_json`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json "pandas.DataFrame.to_json")([path_or_buf, orient, date_format, ...])
    | Convert the object to a JSON string. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`to_json`](pandas.DataFrame.to_json.html#pandas.DataFrame.to_json "pandas.DataFrame.to_json")([path_or_buf, orient, date_format, ...])
    | 将对象转换为 JSON 字符串。 |'
- en: '| [`to_latex`](pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex "pandas.DataFrame.to_latex")([buf, columns, header, index, ...])
    | Render object to a LaTeX tabular, longtable, or nested table. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`to_latex`](pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex "pandas.DataFrame.to_latex")([buf, columns, header, index, ...])
    | 将对象呈现为LaTeX表格、长表格或嵌套表格。 |'
- en: '| [`to_markdown`](pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, storage_options]) | Print DataFrame
    in Markdown-friendly format. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`to_markdown`](pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, storage_options]) | 以Markdown友好的格式打印DataFrame。
    |'
- en: '| [`to_numpy`](pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy "pandas.DataFrame.to_numpy")([dtype, copy, na_value])
    | Convert the DataFrame to a NumPy array. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`to_numpy`](pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy "pandas.DataFrame.to_numpy")([dtype, copy, na_value])
    | 将DataFrame转换为NumPy数组。 |'
- en: '| [`to_orc`](pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc "pandas.DataFrame.to_orc")([path, engine, index, engine_kwargs])
    | Write a DataFrame to the ORC format. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`to_orc`](pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc "pandas.DataFrame.to_orc")([path, engine, index, engine_kwargs])
    | 将DataFrame写入ORC格式。 |'
- en: '| [`to_parquet`](pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, compression, ...]) | Write a DataFrame
    to the binary parquet format. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`to_parquet`](pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, compression, ...]) | 将DataFrame写入二进制parquet格式。
    |'
- en: '| [`to_period`](pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | Convert DataFrame from DatetimeIndex
    to PeriodIndex. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`to_period`](pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | 将DataFrame从DatetimeIndex转换为PeriodIndex。
    |'
- en: '| [`to_pickle`](pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, protocol, ...]) | Pickle
    (serialize) object to file. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`to_pickle`](pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, protocol, ...]) | 将对象序列化（pickle）到文件。
    |'
- en: '| [`to_records`](pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, index_dtypes]) | Convert
    DataFrame to a NumPy record array. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [`to_records`](pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, index_dtypes]) | 将DataFrame转换为NumPy记录数组。
    |'
- en: '| [`to_sql`](pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql "pandas.DataFrame.to_sql")(name, con, *[, schema, if_exists, ...])
    | Write records stored in a DataFrame to a SQL database. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`to_sql`](pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql "pandas.DataFrame.to_sql")(name, con, *[, schema, if_exists, ...])
    | 将存储在DataFrame中的记录写入SQL数据库。 |'
- en: '| [`to_stata`](pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...])
    | Export DataFrame object to Stata dta format. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`to_stata`](pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...])
    | 将DataFrame对象导出为Stata dta格式。 |'
- en: '| [`to_string`](pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, col_space, header, ...]) | Render
    a DataFrame to a console-friendly tabular output. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`to_string`](pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, col_space, header, ...]) | 将DataFrame呈现为友好的控制台表格输出。
    |'
- en: '| [`to_timestamp`](pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | Cast to DatetimeIndex
    of timestamps, at *beginning* of period. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`to_timestamp`](pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | 转换为时间戳的DatetimeIndex，位于*周期的开始*。
    |'
- en: '| [`to_xarray`](pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | Return an xarray object from the pandas object.
    |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`to_xarray`](pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | 从pandas对象返回一个xarray对象。 |'
- en: '| [`to_xml`](pandas.DataFrame.to_xml.html#pandas.DataFrame.to_xml "pandas.DataFrame.to_xml")([path_or_buffer, index, root_name, ...])
    | Render a DataFrame to an XML document. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`to_xml`](pandas.DataFrame.to_xml.html#pandas.DataFrame.to_xml "pandas.DataFrame.to_xml")([path_or_buffer, index, root_name, ...])
    | 将DataFrame呈现为XML文档。 |'
- en: '| [`transform`](pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | Call `func` on self producing a
    DataFrame with the same axis shape as self. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`transform`](pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | 在自身上调用`func`，生成一个与自身轴形状相同的DataFrame。
    |'
- en: '| [`transpose`](pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | Transpose index and columns. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | 转置索引和列。 |'
- en: '| [`truediv`](pandas.DataFrame.truediv.html#pandas.DataFrame.truediv "pandas.DataFrame.truediv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '[`truediv`](pandas.DataFrame.truediv.html#pandas.DataFrame.truediv "pandas.DataFrame.truediv")(other[, axis, level, fill_value])
    | 获取数据帧和其他的浮点除法，按元素进行操作（二元运算符 truediv）。'
- en: '| [`truncate`](pandas.DataFrame.truncate.html#pandas.DataFrame.truncate "pandas.DataFrame.truncate")([before, after, axis, copy])
    | Truncate a Series or DataFrame before and after some index value. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '[`truncate`](pandas.DataFrame.truncate.html#pandas.DataFrame.truncate "pandas.DataFrame.truncate")([before, after, axis, copy])
    | 截断 Series 或 DataFrame 在某个索引值之前和之后。'
- en: '| [`tz_convert`](pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis
    to target time zone. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '[`tz_convert`](pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | 将 tz-感知轴转换为目标时区。'
- en: '| [`tz_localize`](pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, copy, ...]) | Localize tz-naive
    index of a Series or DataFrame to target time zone. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '[`tz_localize`](pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, copy, ...]) | 将 Series 或 DataFrame
    的 tz-未知索引本地化到目标时区。'
- en: '| [`unstack`](pandas.DataFrame.unstack.html#pandas.DataFrame.unstack "pandas.DataFrame.unstack")([level, fill_value, sort])
    | Pivot a level of the (necessarily hierarchical) index labels. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '[`unstack`](pandas.DataFrame.unstack.html#pandas.DataFrame.unstack "pandas.DataFrame.unstack")([level, fill_value, sort])
    | 透视（必须是分层的）索引标签的一级。'
- en: '| [`update`](pandas.DataFrame.update.html#pandas.DataFrame.update "pandas.DataFrame.update")(other[, join, overwrite, ...])
    | Modify in place using non-NA values from another DataFrame. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '[`update`](pandas.DataFrame.update.html#pandas.DataFrame.update "pandas.DataFrame.update")(other[, join, overwrite, ...])
    | 使用另一个 DataFrame 的非 NA 值在原地进行修改。'
- en: '| [`value_counts`](pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, sort, ...]) | Return a Series
    containing the frequency of each distinct row in the Dataframe. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '[`value_counts`](pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, sort, ...]) | 返回一个包含 DataFrame
    中每个不同行的频率的 Series。'
- en: '| [`var`](pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '[`var`](pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | 沿请求的轴返回无偏差方差。'
- en: '| [`where`](pandas.DataFrame.where.html#pandas.DataFrame.where "pandas.DataFrame.where")(cond[, other, inplace, axis, level])
    | Replace values where the condition is False. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '[`where`](pandas.DataFrame.where.html#pandas.DataFrame.where "pandas.DataFrame.where")(cond[, other, inplace, axis, level])
    | 在条件为 False 时替换值。'
- en: '| [`xs`](pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '[`xs`](pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | 从 Series/DataFrame 返回横截面。'
