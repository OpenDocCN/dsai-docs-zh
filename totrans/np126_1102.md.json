["```py\n    a = np.array([3.14])\n    float(a)  # better: a[0] to get the numpy.float or a.item()\n\n    b = np.array([[3.14]])\n    c = numpy.random.rand(10)\n    c[0] = b  # better: c[0] = b[0, 0] \n    ```", "```py\n'long_t' is not a type identifier\n'ulong_t' is not a type identifier \n```", "```py\n#define NPY_TARGET_VERSION NPY_1_22_API_VERSION \n```", "```py\n>>> import numpy as np\n\n>>> a = np.arange(6).reshape(3, 2)\n>>> print(a)\n[[0 1]\n [2 3]\n [4 5]]\n\n>>> b = np.ones((2, 2), dtype=int)\n>>> a @= b\n>>> print(a)\n[[1 1]\n [5 5]\n [9 9]] \n```", "```py\nnp.result_type(\"M8[s]\", np.complex128) \n```", "```py\nseed = 0x2e09b90939db40c400f8f22dae617151\nrng = np.random.default_rng(seed)\nchild_rng1, child_rng2 = rng.spawn(2)\n\n# safely use rng, child_rng1, and child_rng2 \n```", "```py\n>>> npzfile = np.load('arr.npz')\n>>> npzfile\nNpzFile 'arr.npz' with keys arr_0, arr_1, arr_2, arr_3, arr_4... \n```", "```py\n>>> np.r_[np.arange(5, dtype=np.uint8), -1].dtype\nint16  # rather than the default integer (int64 or int32)\n>>> np.r_[np.arange(5, dtype=np.int8), 255]\narray([  0,   1,   2,   3,   4, 255], dtype=int16) \n```", "```py\narray([ 0,  1,  2,  3,  4, -1], dtype=int8) \n```", "```py\n    a = np.array([3.14])\n    float(a)  # better: a[0] to get the numpy.float or a.item()\n\n    b = np.array([[3.14]])\n    c = numpy.random.rand(10)\n    c[0] = b  # better: c[0] = b[0, 0] \n    ```", "```py\n'long_t' is not a type identifier\n'ulong_t' is not a type identifier \n```", "```py\n#define NPY_TARGET_VERSION NPY_1_22_API_VERSION \n```", "```py\n'long_t' is not a type identifier\n'ulong_t' is not a type identifier \n```", "```py\n#define NPY_TARGET_VERSION NPY_1_22_API_VERSION \n```", "```py\n>>> import numpy as np\n\n>>> a = np.arange(6).reshape(3, 2)\n>>> print(a)\n[[0 1]\n [2 3]\n [4 5]]\n\n>>> b = np.ones((2, 2), dtype=int)\n>>> a @= b\n>>> print(a)\n[[1 1]\n [5 5]\n [9 9]] \n```", "```py\n>>> import numpy as np\n\n>>> a = np.arange(6).reshape(3, 2)\n>>> print(a)\n[[0 1]\n [2 3]\n [4 5]]\n\n>>> b = np.ones((2, 2), dtype=int)\n>>> a @= b\n>>> print(a)\n[[1 1]\n [5 5]\n [9 9]] \n```", "```py\nnp.result_type(\"M8[s]\", np.complex128) \n```", "```py\nseed = 0x2e09b90939db40c400f8f22dae617151\nrng = np.random.default_rng(seed)\nchild_rng1, child_rng2 = rng.spawn(2)\n\n# safely use rng, child_rng1, and child_rng2 \n```", "```py\n>>> npzfile = np.load('arr.npz')\n>>> npzfile\nNpzFile 'arr.npz' with keys arr_0, arr_1, arr_2, arr_3, arr_4... \n```", "```py\nnp.result_type(\"M8[s]\", np.complex128) \n```", "```py\nseed = 0x2e09b90939db40c400f8f22dae617151\nrng = np.random.default_rng(seed)\nchild_rng1, child_rng2 = rng.spawn(2)\n\n# safely use rng, child_rng1, and child_rng2 \n```", "```py\n>>> npzfile = np.load('arr.npz')\n>>> npzfile\nNpzFile 'arr.npz' with keys arr_0, arr_1, arr_2, arr_3, arr_4... \n```", "```py\n>>> np.r_[np.arange(5, dtype=np.uint8), -1].dtype\nint16  # rather than the default integer (int64 or int32)\n>>> np.r_[np.arange(5, dtype=np.int8), 255]\narray([  0,   1,   2,   3,   4, 255], dtype=int16) \n```", "```py\narray([ 0,  1,  2,  3,  4, -1], dtype=int8) \n```", "```py\n>>> np.r_[np.arange(5, dtype=np.uint8), -1].dtype\nint16  # rather than the default integer (int64 or int32)\n>>> np.r_[np.arange(5, dtype=np.int8), 255]\narray([  0,   1,   2,   3,   4, 255], dtype=int16) \n```", "```py\narray([ 0,  1,  2,  3,  4, -1], dtype=int8) \n```"]