- en: numpy.fft.ihfft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.ihfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.ihfft.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the inverse FFT of a signal that has Hermitian symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the inverse FFT, the number of points along transformation axis in
    the input to use. If *n* is smaller than the length of the input, the input is
    cropped. If it is larger, the input is padded with zeros. If *n* is not given,
    the length of the input along the axis specified by *axis* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the inverse FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is `n//2 + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hfft`](numpy.fft.hfft.html#numpy.fft.hfft "numpy.fft.hfft"), [`irfft`](numpy.fft.irfft.html#numpy.fft.irfft
    "numpy.fft.irfft")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`hfft`](numpy.fft.hfft.html#numpy.fft.hfft "numpy.fft.hfft")/[`ihfft`](#numpy.fft.ihfft
    "numpy.fft.ihfft") are a pair analogous to [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft
    "numpy.fft.rfft")/[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft"),
    but for the opposite case: here the signal has Hermitian symmetry in the time
    domain and is real in the frequency domain. So here it’s [`hfft`](numpy.fft.hfft.html#numpy.fft.hfft
    "numpy.fft.hfft") for which you must supply the length of the result if it is
    to be odd:'
  prefs: []
  type: TYPE_NORMAL
- en: 'even: `ihfft(hfft(a, 2*len(a) - 2)) == a`, within roundoff error,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'odd: `ihfft(hfft(a, 2*len(a) - 1)) == a`, within roundoff error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
