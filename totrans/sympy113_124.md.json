["```py\nclass sympy.tensor.tensor.TensorIndexType(name, dummy_name=None, dim=None, eps_dim=None, metric_symmetry=1, metric_name='metric', **kwargs)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> Lorentz.metric\nmetric(Lorentz,Lorentz) \n```", "```py\nclass sympy.tensor.tensor.TensorIndex(name, tensor_index_type, is_up=True)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, TensorIndex, TensorHead, tensor_indices\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> mu = TensorIndex('mu', Lorentz, is_up=False)\n>>> nu, rho = tensor_indices('nu, rho', Lorentz)\n>>> A = TensorHead('A', [Lorentz, Lorentz])\n>>> A(mu, nu)\nA(-mu, nu)\n>>> A(-mu, -rho)\nA(mu, -rho)\n>>> A(mu, -mu)\nA(-L_0, L_0) \n```", "```py\nclass sympy.tensor.tensor.TensorHead(name, index_types, symmetry=None, comm=0)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, TensorHead, TensorSymmetry\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> asym2 = TensorSymmetry.fully_symmetric(-2)\n>>> A = TensorHead('A', [Lorentz, Lorentz], asym2) \n```", "```py\n>>> from sympy.tensor.tensor import tensor_indices\n>>> from sympy import diag\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> i0, i1 = tensor_indices('i0:2', Lorentz) \n```", "```py\n>>> repl = {Lorentz: diag(1, -1, -1, -1)} \n```", "```py\n>>> from sympy import symbols\n>>> Ex, Ey, Ez, Bx, By, Bz = symbols('E_x E_y E_z B_x B_y B_z')\n>>> c = symbols('c', positive=True) \n```", "```py\n>>> F = TensorHead('F', [Lorentz, Lorentz], asym2) \n```", "```py\n>>> repl.update({F(-i0, -i1): [\n... [0, Ex/c, Ey/c, Ez/c],\n... [-Ex/c, 0, -Bz, By],\n... [-Ey/c, Bz, 0, -Bx],\n... [-Ez/c, -By, Bx, 0]]}) \n```", "```py\n>>> F(i0, i1).replace_with_arrays(repl, [i0, i1])\n[[0, -E_x/c, -E_y/c, -E_z/c], [E_x/c, 0, -B_z, B_y], [E_y/c, B_z, 0, -B_x], [E_z/c, -B_y, B_x, 0]] \n```", "```py\n>>> F(i0, -i1).replace_with_arrays(repl, [i0, -i1])\n[[0, E_x/c, E_y/c, E_z/c], [E_x/c, 0, B_z, -B_y], [E_y/c, -B_z, 0, B_x], [E_z/c, B_y, -B_x, 0]] \n```", "```py\n>>> from sympy import symbols\n>>> P = TensorHead('P', [Lorentz], TensorSymmetry.no_symmetry(1))\n>>> E, px, py, pz = symbols('E p_x p_y p_z', positive=True)\n>>> repl.update({P(i0): [E, px, py, pz]}) \n```", "```py\n>>> P(i0).replace_with_arrays(repl, [i0])\n[E, p_x, p_y, p_z]\n>>> P(-i0).replace_with_arrays(repl, [-i0])\n[E, -p_x, -p_y, -p_z] \n```", "```py\n>>> expr = P(i0)*P(-i0)\n>>> expr.replace_with_arrays(repl, [])\nE**2 - p_x**2 - p_y**2 - p_z**2 \n```", "```py\ncommutes_with(other)\n```", "```py\nsympy.tensor.tensor.tensor_heads(s, index_types, symmetry=None, comm=0)\n```", "```py\nclass sympy.tensor.tensor.TensExpr(*args)\n```", "```py\nget_matrix()\n```", "```py\nreplace_with_arrays(replacement_dict, indices=None)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices\n>>> from sympy.tensor.tensor import TensorHead\n>>> from sympy import symbols, diag \n```", "```py\n>>> L = TensorIndexType(\"L\")\n>>> i, j = tensor_indices(\"i j\", L)\n>>> A = TensorHead(\"A\", [L])\n>>> A(i).replace_with_arrays({A(i): [1, 2]}, [i])\n[1, 2] \n```", "```py\n>>> A(i).replace_with_arrays({A(i): [1, 2]})\n[1, 2] \n```", "```py\n>>> expr = A(i)*A(j)\n>>> expr.replace_with_arrays({A(i): [1, 2]})\n[[1, 2], [2, 4]] \n```", "```py\n>>> expr = A(i)*A(-i)\n>>> expr.replace_with_arrays({A(i): [1, 2], L: diag(1, -1)})\n-3 \n```", "```py\n>>> H = TensorHead(\"H\", [L, L])\n>>> a, b, c, d = symbols(\"a b c d\")\n>>> expr = H(i, j)/2 + H(j, i)/2\n>>> expr.replace_with_arrays({H(i, j): [[a, b], [c, d]]})\n[[a, b/2 + c/2], [b/2 + c/2, d]] \n```", "```py\n>>> expr = H(i, j)/2 - H(j, i)/2\n>>> repl = {H(i, j): [[a, b], [c, d]]}\n>>> expr.replace_with_arrays(repl)\n[[0, b/2 - c/2], [-b/2 + c/2, 0]] \n```", "```py\n>>> expr.replace_with_arrays(repl, [j, i])\n[[0, -b/2 + c/2], [b/2 - c/2, 0]] \n```", "```py\nclass sympy.tensor.tensor.TensAdd(*args, **kw_args)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_heads, tensor_indices\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> a, b = tensor_indices('a,b', Lorentz)\n>>> p, q = tensor_heads('p,q', [Lorentz])\n>>> t = p(a) + q(a); t\np(a) + q(a) \n```", "```py\n>>> from sympy import symbols, diag\n>>> x, y, z, t = symbols(\"x y z t\")\n>>> repl = {}\n>>> repl[Lorentz] = diag(1, -1, -1, -1)\n>>> repl[p(a)] = [1, 2, 3, 4]\n>>> repl[q(a)] = [x, y, z, t] \n```", "```py\n>>> expr = p(a) + q(a)\n>>> expr.replace_with_arrays(repl, [a])\n[x + 1, y + 2, z + 3, t + 4] \n```", "```py\ncanon_bp()\n```", "```py\ncontract_metric(g)\n```", "```py\nclass sympy.tensor.tensor.TensMul(*args, **kw_args)\n```", "```py\ncanon_bp()\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, TensorHead, TensorSymmetry\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> m0, m1, m2 = tensor_indices('m0,m1,m2', Lorentz)\n>>> A = TensorHead('A', [Lorentz]*2, TensorSymmetry.fully_symmetric(-2))\n>>> t = A(m0,-m1)*A(m1,-m0)\n>>> t.canon_bp()\n-A(L_0, L_1)*A(-L_0, -L_1)\n>>> t = A(m0,-m1)*A(m1,-m2)*A(m2,-m0)\n>>> t.canon_bp()\n0 \n```", "```py\ncontract_metric(g)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, tensor_heads\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> m0, m1, m2 = tensor_indices('m0,m1,m2', Lorentz)\n>>> g = Lorentz.metric\n>>> p, q = tensor_heads('p,q', [Lorentz])\n>>> t = p(m0)*q(m1)*g(-m0, -m1)\n>>> t.canon_bp()\nmetric(L_0, L_1)*p(-L_0)*q(-L_1)\n>>> t.contract_metric(g).canon_bp()\np(L_0)*q(-L_0) \n```", "```py\nget_free_indices() â†’ list[TensorIndex]\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, tensor_heads\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> m0, m1, m2 = tensor_indices('m0,m1,m2', Lorentz)\n>>> g = Lorentz.metric\n>>> p, q = tensor_heads('p,q', [Lorentz])\n>>> t = p(m1)*g(m0,m2)\n>>> t.get_free_indices()\n[m1, m0, m2]\n>>> t2 = p(m1)*g(-m1, m2)\n>>> t2.get_free_indices()\n[m2] \n```", "```py\nget_indices()\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, tensor_heads\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> m0, m1, m2 = tensor_indices('m0,m1,m2', Lorentz)\n>>> g = Lorentz.metric\n>>> p, q = tensor_heads('p,q', [Lorentz])\n>>> t = p(m1)*g(m0,m2)\n>>> t.get_indices()\n[m1, m0, m2]\n>>> t2 = p(m1)*g(-m1, m2)\n>>> t2.get_indices()\n[L_0, -L_0, m2] \n```", "```py\nperm2tensor(g, is_canon_bp=False)\n```", "```py\nsorted_components()\n```", "```py\nsplit()\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, tensor_heads, TensorSymmetry\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> a, b, c, d = tensor_indices('a,b,c,d', Lorentz)\n>>> A, B = tensor_heads('A,B', [Lorentz]*2, TensorSymmetry.fully_symmetric(2))\n>>> t = A(a,b)*B(-b,c)\n>>> t\nA(a, L_0)*B(-L_0, c)\n>>> t.split()\n[A(a, L_0), B(-L_0, c)] \n```", "```py\nsympy.tensor.tensor.canon_bp(p)\n```", "```py\nsympy.tensor.tensor.riemann_cyclic_replace(t_r)\n```", "```py\nsympy.tensor.tensor.riemann_cyclic(t2)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, TensorHead, riemann_cyclic, TensorSymmetry\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> i, j, k, l = tensor_indices('i,j,k,l', Lorentz)\n>>> R = TensorHead('R', [Lorentz]*4, TensorSymmetry.riemann())\n>>> t = R(i,j,k,l)*(R(-i,-j,-k,-l) - 2*R(-i,-k,-j,-l))\n>>> riemann_cyclic(t)\n0 \n```", "```py\nclass sympy.tensor.tensor.TensorSymmetry(*args, **kw_args)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, TensorSymmetry, get_symmetric_group_sgs, TensorHead\n>>> Lorentz = TensorIndexType('Lorentz', dummy_name='L')\n>>> sym = TensorSymmetry(get_symmetric_group_sgs(2))\n>>> T = TensorHead('T', [Lorentz]*2, sym) \n```", "```py\n>>> sym2 = TensorSymmetry.fully_symmetric(2)\n>>> sym == sym2\nTrue \n```", "```py\nclassmethod direct_product(*args)\n```", "```py\nclassmethod fully_symmetric(rank)\n```", "```pyrank``<0) TensorSymmetry object for ``abs(rank)```", "```py\nclassmethod no_symmetry(rank)\n```", "```py\nclassmethod riemann()\n```", "```py\nsympy.tensor.tensor.tensorsymmetry(*args)\n```", "```py\nclass sympy.tensor.tensor.TensorType(*args, **kwargs)\n```", "```py\nclass sympy.tensor.tensor._TensorManager\n```", "```py\nclear()\n```", "```py\ncomm_i2symbol(i)\n```", "```py\ncomm_symbols2i(i)\n```", "```py\nget_comm(i, j)\n```", "```py\nset_comm(i, j, c)\n```", "```py\n>>> from sympy.tensor.tensor import TensorIndexType, tensor_indices, TensorHead, TensorManager, TensorSymmetry\n>>> Lorentz = TensorIndexType('Lorentz')\n>>> i0,i1,i2,i3,i4 = tensor_indices('i0:5', Lorentz)\n>>> A = TensorHead('A', [Lorentz])\n>>> G = TensorHead('G', [Lorentz], TensorSymmetry.no_symmetry(1), 'Gcomm')\n>>> GH = TensorHead('GH', [Lorentz], TensorSymmetry.no_symmetry(1), 'GHcomm')\n>>> TensorManager.set_comm('Gcomm', 'GHcomm', 0)\n>>> (GH(i1)*G(i0)).canon_bp()\nG(i0)*GH(i1)\n>>> (G(i1)*G(i0)).canon_bp()\nG(i1)*G(i0)\n>>> (G(i1)*A(i0)).canon_bp()\nA(i0)*G(i1) \n```", "```py\nset_comms(*args)\n```"]