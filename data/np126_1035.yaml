- en: numpy.testing.assert_array_almost_equal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_almost_equal`'
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Raises an AssertionError if two objects are not equal up to desired precision.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个对象不相等到所需的精度，则引发断言错误。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended to use one of [`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of this function for more consistent
    floating point comparisons.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")之一，而不是使用此函数进行更一致的浮点比较[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")或[`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")。
- en: The test verifies identical shapes and that the elements of `actual` and `desired`
    satisfy.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 测试验证`actual`和`desired`的元素满足相同的形状和。
- en: '`abs(desired-actual) < 1.5 * 10**(-decimal)`'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`abs(desired-actual) < 1.5 * 10**(-decimal)`'
- en: That is a looser test than originally documented, but agrees with what the actual
    implementation did up to rounding vagaries. An exception is raised at shape mismatch
    or conflicting values. In contrast to the standard usage in numpy, NaNs are compared
    like numbers, no assertion is raised if both objects have NaNs in the same positions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个比最初记录的测试宽松的测试，但与实际实现的结果到四舍五入的差异一致。在形状不匹配或存在冲突值时引发异常。与numpy中的标准用法相反，NaN与数字进行比较，如果两个对象在相同位置具有NaN，则不会引发断言。
- en: 'Parameters:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Parameters:'
- en: '**x**array_like'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**array_like'
- en: The actual object to check.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查的实际对象。
- en: '**y**array_like'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**array_like'
- en: The desired, expected object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的，期望的对象。
- en: '**decimal**int, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**decimal**int, optional'
- en: Desired precision, default is 6.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的精度，默认为6。
- en: '**err_msg**str, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**err_msg**str, optional'
- en: The error message to be printed in case of failure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 失败时要打印的错误消息。
- en: '**verbose**bool, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**bool, optional'
- en: If True, the conflicting values are appended to the error message.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则冲突的值将追加到错误消息中。
- en: 'Raises:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'Raises:'
- en: AssertionError
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 断言错误
- en: If actual and desired are not equal up to specified precision.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实际和期望的不等直至指定精度。
- en: See also
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
- en: Compare two array_like objects for equality with desired relative and/or absolute
    precision.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用所需的相对和/或绝对精度比较两个`array_like`对象的相等性。
- en: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp"), [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp"), [`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp"), [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp"), [`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: the first assert does not raise an exception
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个assert不会引发异常
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
