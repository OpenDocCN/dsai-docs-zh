- en: scipy.sparse.hstack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.hstack.html#scipy.sparse.hstack](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.hstack.html#scipy.sparse.hstack)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Stack sparse matrices horizontally (column wise)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**blocks**'
  prefs: []
  type: TYPE_NORMAL
- en: sequence of sparse matrices with compatible shapes
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str'
  prefs: []
  type: TYPE_NORMAL
- en: sparse format of the result (e.g., “csr”) by default an appropriate sparse matrix
    format is returned. This choice is subject to change.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The data-type of the output matrix. If not given, the dtype is determined from
    that of *blocks*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**new_array**sparse matrix or array'
  prefs: []
  type: TYPE_NORMAL
- en: If any block in blocks is a sparse array, return a sparse array. Otherwise return
    a sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a sparse array built from blocks that are not sparse arrays, use
    *block(hstack(blocks))* or convert one block e.g. *blocks[0] = csr_array(blocks[0])*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vstack`](scipy.sparse.vstack.html#scipy.sparse.vstack "scipy.sparse.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: stack sparse matrices vertically (row wise)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
