["```py\nsympy.solvers.ode.dsolve(eq, func=None, hint='default', simplify=True, ics=None, xi=None, eta=None, x0=0, n=6, **kwargs)\n```", "```py\n>     >>> from sympy import Function, Derivative\n> \n>     >>> from sympy.abc import x # x is the independent variable\n> \n>     >>> f = Function(\"f\")(x) # f is a function of x\n> \n>     >>> # f_ will be the derivative of f with respect to x\n> \n>     >>> f_ = Derivative(f, x) \n>     ```", "```py\n>>> from sympy import Function, dsolve, Eq, Derivative, sin, cos, symbols\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(Derivative(f(x), x, x) + 9*f(x), f(x))\nEq(f(x), C1*sin(3*x) + C2*cos(3*x)) \n```", "```py\n>>> eq = sin(x)*cos(f(x)) + cos(x)*sin(f(x))*f(x).diff(x)\n>>> dsolve(eq, hint='1st_exact')\n[Eq(f(x), -acos(C1/cos(x)) + 2*pi), Eq(f(x), acos(C1/cos(x)))]\n>>> dsolve(eq, hint='almost_linear')\n[Eq(f(x), -acos(C1/cos(x)) + 2*pi), Eq(f(x), acos(C1/cos(x)))]\n>>> t = symbols('t')\n>>> x, y = symbols('x, y', cls=Function)\n>>> eq = (Eq(Derivative(x(t),t), 12*t*x(t) + 8*y(t)), Eq(Derivative(y(t),t), 21*x(t) + 7*t*y(t)))\n>>> dsolve(eq)\n[Eq(x(t), C1*x0(t) + C2*x0(t)*Integral(8*exp(Integral(7*t, t))*exp(Integral(12*t, t))/x0(t)**2, t)),\nEq(y(t), C1*y0(t) + C2*(y0(t)*Integral(8*exp(Integral(7*t, t))*exp(Integral(12*t, t))/x0(t)**2, t) +\nexp(Integral(7*t, t))*exp(Integral(12*t, t))/x0(t)))]\n>>> eq = (Eq(Derivative(x(t),t),x(t)*y(t)*sin(t)), Eq(Derivative(y(t),t),y(t)**2*sin(t)))\n>>> dsolve(eq)\n{Eq(x(t), -exp(C1)/(C2*exp(C1) - cos(t))), Eq(y(t), -1/(C1 - cos(t)))} \n```", "```py\nsympy.solvers.ode.systems.dsolve_system(eqs, funcs=None, t=None, ics=None, doit=False, simplify=True)\n```", "```py\n>>> from sympy import symbols, Eq, Function\n>>> from sympy.solvers.ode.systems import dsolve_system\n>>> f, g = symbols(\"f g\", cls=Function)\n>>> x = symbols(\"x\") \n```", "```py\n>>> eqs = [Eq(f(x).diff(x), g(x)), Eq(g(x).diff(x), f(x))]\n>>> dsolve_system(eqs)\n[[Eq(f(x), -C1*exp(-x) + C2*exp(x)), Eq(g(x), C1*exp(-x) + C2*exp(x))]] \n```", "```py\n>>> dsolve_system(eqs, ics={f(0): 1, g(0): 0})\n[[Eq(f(x), exp(x)/2 + exp(-x)/2), Eq(g(x), exp(x)/2 - exp(-x)/2)]] \n```", "```py\n>>> funcs = [f(x), g(x)]\n>>> dsolve_system(eqs, funcs=funcs, t=x)\n[[Eq(f(x), -C1*exp(-x) + C2*exp(x)), Eq(g(x), C1*exp(-x) + C2*exp(x))]] \n```", "```py\n>>> eqs = [Eq(f(x).diff(x)**2, g(x)**2), Eq(g(x).diff(x), g(x))]\n>>> dsolve_system(eqs)\n[[Eq(f(x), C1 - C2*exp(x)), Eq(g(x), C2*exp(x))], [Eq(f(x), C1 + C2*exp(x)), Eq(g(x), C2*exp(x))]] \n```", "```py\nsympy.solvers.ode.classify_ode(eq, func=None, dict=False, ics=None, *, prep=True, xi=None, eta=None, n=None, **kwargs)\n```", "```py\n>>> from sympy import Function, classify_ode, Eq\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> classify_ode(Eq(f(x).diff(x), 0), f(x))\n('nth_algebraic',\n'separable',\n'1st_exact',\n'1st_linear',\n'Bernoulli',\n'1st_homogeneous_coeff_best',\n'1st_homogeneous_coeff_subs_indep_div_dep',\n'1st_homogeneous_coeff_subs_dep_div_indep',\n'1st_power_series', 'lie_group', 'nth_linear_constant_coeff_homogeneous',\n'nth_linear_euler_eq_homogeneous',\n'nth_algebraic_Integral', 'separable_Integral', '1st_exact_Integral',\n'1st_linear_Integral', 'Bernoulli_Integral',\n'1st_homogeneous_coeff_subs_indep_div_dep_Integral',\n'1st_homogeneous_coeff_subs_dep_div_indep_Integral')\n>>> classify_ode(f(x).diff(x, 2) + 3*f(x).diff(x) + 2*f(x) - 4)\n('factorable', 'nth_linear_constant_coeff_undetermined_coefficients',\n'nth_linear_constant_coeff_variation_of_parameters',\n'nth_linear_constant_coeff_variation_of_parameters_Integral') \n```", "```py\nsympy.solvers.ode.checkodesol(ode, sol, func=None, order='auto', solve_for_func=True)\n```", "```py\n>>> from sympy import (Eq, Function, checkodesol, symbols,\n...     Derivative, exp)\n>>> x, C1, C2 = symbols('x,C1,C2')\n>>> f, g = symbols('f g', cls=Function)\n>>> checkodesol(f(x).diff(x), Eq(f(x), C1))\n(True, 0)\n>>> assert checkodesol(f(x).diff(x), C1)[0]\n>>> assert not checkodesol(f(x).diff(x), x)[0]\n>>> checkodesol(f(x).diff(x, 2), x**2)\n(False, 2) \n```", "```py\n>>> eqs = [Eq(Derivative(f(x), x), f(x)), Eq(Derivative(g(x), x), g(x))]\n>>> sol = [Eq(f(x), C1*exp(x)), Eq(g(x), C2*exp(x))]\n>>> checkodesol(eqs, sol)\n(True, [0, 0]) \n```", "```py\nsympy.solvers.ode.homogeneous_order(eq, *symbols)\n```", "```py\n>>> from sympy import Function, homogeneous_order, sqrt\n>>> from sympy.abc import x, y\n>>> f = Function('f')\n>>> homogeneous_order(f(x), f(x)) is None\nTrue\n>>> homogeneous_order(f(x,y), f(y, x), x, y) is None\nTrue\n>>> homogeneous_order(f(x), f(x), x)\n1\n>>> homogeneous_order(x**2*f(x)/sqrt(x**2+f(x)**2), x, f(x))\n2\n>>> homogeneous_order(x**2+f(x), x, f(x)) is None\nTrue \n```", "```py\nsympy.solvers.ode.infinitesimals(eq, func=None, order=None, hint='default', match=None)\n```", "```py\n>>> from sympy import Function, Eq, pprint\n>>> from sympy.abc import x, y\n>>> xi, eta, h = map(Function, ['xi', 'eta', 'h'])\n>>> h = h(x, y)  # dy/dx = h\n>>> eta = eta(x, y)\n>>> xi = xi(x, y)\n>>> genform = Eq(eta.diff(x) + (eta.diff(y) - xi.diff(x))*h\n... - (xi.diff(y))*h**2 - xi*(h.diff(x)) - eta*(h.diff(y)), 0)\n>>> pprint(genform)\n/d               d           \\                     d              2       d                       d             d\n|--(eta(x, y)) - --(xi(x, y))|*h(x, y) - eta(x, y)*--(h(x, y)) - h (x, y)*--(xi(x, y)) - xi(x, y)*--(h(x, y)) + --(eta(x, y)) = 0\n\\dy              dx          /                     dy                     dy                      dx            dx \n```", "```py\n>>> from sympy import Function\n>>> from sympy.solvers.ode.lie_group import infinitesimals\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = f(x).diff(x) - x**2*f(x)\n>>> infinitesimals(eq)\n[{eta(x, f(x)): exp(x**3/3), xi(x, f(x)): 0}] \n```", "```py\nsympy.solvers.ode.checkinfsol(eq, infinitesimals, func=None, order=None)\n```", "```py\nsympy.solvers.ode.constantsimp(expr, constants)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.solvers.ode.ode import constantsimp\n>>> C1, C2, C3, x, y = symbols('C1, C2, C3, x, y')\n>>> constantsimp(2*C1*x, {C1, C2, C3})\nC1*x\n>>> constantsimp(C1 + 2 + x, {C1, C2, C3})\nC1 + x\n>>> constantsimp(C1*C2 + 2 + C2 + C3*x, {C1, C2, C3})\nC1 + C3*x \n```", "```py\nsympy.solvers.ode.allhints = ('factorable', 'nth_algebraic', 'separable', '1st_exact', '1st_linear', 'Bernoulli', '1st_rational_riccati', 'Riccati_special_minus2', '1st_homogeneous_coeff_best', '1st_homogeneous_coeff_subs_indep_div_dep', '1st_homogeneous_coeff_subs_dep_div_indep', 'almost_linear', 'linear_coefficients', 'separable_reduced', '1st_power_series', 'lie_group', 'nth_linear_constant_coeff_homogeneous', 'nth_linear_euler_eq_homogeneous', 'nth_linear_constant_coeff_undetermined_coefficients', 'nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients', 'nth_linear_constant_coeff_variation_of_parameters', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters', 'Liouville', '2nd_linear_airy', '2nd_linear_bessel', '2nd_hypergeometric', '2nd_hypergeometric_Integral', 'nth_order_reducible', '2nd_power_series_ordinary', '2nd_power_series_regular', 'nth_algebraic_Integral', 'separable_Integral', '1st_exact_Integral', '1st_linear_Integral', 'Bernoulli_Integral', '1st_homogeneous_coeff_subs_indep_div_dep_Integral', '1st_homogeneous_coeff_subs_dep_div_indep_Integral', 'almost_linear_Integral', 'linear_coefficients_Integral', 'separable_reduced_Integral', 'nth_linear_constant_coeff_variation_of_parameters_Integral', 'nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_Integral', 'Liouville_Integral', '2nd_nonlinear_autonomous_conserved', '2nd_nonlinear_autonomous_conserved_Integral')\n```", "```py\nsympy.solvers.ode.ode.odesimp(ode, eq, func, hint)\n```", "```py\n>>> from sympy import sin, symbols, dsolve, pprint, Function\n>>> from sympy.solvers.ode.ode import odesimp\n>>> x, u2, C1= symbols('x,u2,C1')\n>>> f = Function('f') \n```", "```py\n>>> eq = dsolve(x*f(x).diff(x) - f(x) - x*sin(f(x)/x), f(x),\n... hint='1st_homogeneous_coeff_subs_indep_div_dep_Integral',\n... simplify=False)\n>>> pprint(eq, wrap_line=False)\n x\n ----\n f(x)\n /\n |\n |   /        1   \\\n |  -|u1 + -------|\n |   |        /1 \\|\n |   |     sin|--||\n |   \\        \\u1//\nlog(f(x)) = log(C1) +   |  ---------------- d(u1)\n |          2\n |        u1\n |\n / \n```", "```py\n>>> pprint(odesimp(eq, f(x), 1, {C1},\n... hint='1st_homogeneous_coeff_subs_indep_div_dep'\n... )) \n x\n--------- = C1\n /f(x)\\\ntan|----|\n \\2*x / \n```", "```py\nsympy.solvers.ode.ode.constant_renumber(expr, variables=None, newconstants=None)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.solvers.ode.ode import constant_renumber\n>>> x, C1, C2, C3 = symbols('x,C1:4')\n>>> expr = C3 + C2*x + C1*x**2\n>>> expr\nC1*x**2  + C2*x + C3\n>>> constant_renumber(expr)\nC1 + C2*x + C3*x**2 \n```", "```py\n>>> constant_renumber(expr, [C1, x])\nC1*x**2  + C2 + C3*x \n```", "```py\n>>> constant_renumber(expr, [x], newconstants=symbols('E1:4'))\nE1 + E2*x + E3*x**2 \n```", "```py\nsympy.solvers.ode.ode.ode_sol_simplicity(sol, func, trysolving=True)\n```", "```py\n>>> from sympy import symbols, Function, Eq, tan, Integral\n>>> from sympy.solvers.ode.ode import ode_sol_simplicity\n>>> x, C1, C2 = symbols('x, C1, C2')\n>>> f = Function('f') \n```", "```py\n>>> ode_sol_simplicity(Eq(f(x), C1*x**2), f(x))\n-2\n>>> ode_sol_simplicity(Eq(x**2 + f(x), C1), f(x))\n-1\n>>> ode_sol_simplicity(Eq(f(x), C1*Integral(2*x, x)), f(x))\noo\n>>> eq1 = Eq(f(x)/tan(f(x)/(2*x)), C1)\n>>> eq2 = Eq(f(x)/tan(f(x)/(2*x) + f(x)), C2)\n>>> [ode_sol_simplicity(eq, f(x)) for eq in [eq1, eq2]]\n[28, 35]\n>>> min([eq1, eq2], key=lambda i: ode_sol_simplicity(i, f(x)))\nEq(f(x)/tan(f(x)/(2*x)), C1) \n```", "```py\nclass sympy.solvers.ode.single.Factorable(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = (f(x)**2-4)*(f(x).diff(x)+f(x))\n>>> pprint(dsolve(eq, f(x)))\n -x\n[f(x) = 2, f(x) = -2, f(x) = C1*e  ] \n```", "```py\nclass sympy.solvers.ode.single.FirstExact(ode_problem)\n```", "```py\n>>> from sympy import Function, Eq, Integral, symbols, pprint\n>>> x, y, t, x0, y0, C1= symbols('x,y,t,x0,y0,C1')\n>>> P, Q, F= map(Function, ['P', 'Q', 'F'])\n>>> pprint(Eq(Eq(F(x, y), Integral(P(t, y), (t, x0, x)) +\n... Integral(Q(x0, t), (t, y0, y))), C1))\n x                y\n /                /\n |                |\nF(x, y) =  |  P(t, y) dt +  |  Q(x0, t) dt = C1\n |                |\n /                /\n x0               y0 \n```", "```py\n>>> from sympy import Function, dsolve, cos, sin\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x),\n... f(x), hint='1st_exact')\nEq(x*cos(f(x)) + f(x)**3/3, C1) \n```", "```py\nclass sympy.solvers.ode.single.HomogeneousCoeffBest(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(2*x*f(x) + (x**2 + f(x)**2)*f(x).diff(x), f(x),\n... hint='1st_homogeneous_coeff_best', simplify=False))\n /   2     \\\n |3*x      |\n log|----- + 1|\n | 2       |\n \\f (x)    /\nlog(f(x)) = log(C1) - --------------\n 3 \n```", "```py\nclass sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f, g, h = map(Function, ['f', 'g', 'h'])\n>>> genform = g(f(x)/x) + h(f(x)/x)*f(x).diff(x)\n>>> pprint(genform)\n /f(x)\\    /f(x)\\ d\ng|----| + h|----|*--(f(x))\n \\ x  /    \\ x  / dx\n>>> pprint(dsolve(genform, f(x),\n... hint='1st_homogeneous_coeff_subs_dep_div_indep_Integral'))\n f(x)\n ----\n x\n /\n |\n |       -h(u1)\nlog(x) = C1 +   |  ---------------- d(u1)\n |  u1*h(u1) + g(u1)\n |\n / \n```", "```py\n>>> from sympy import Function, dsolve\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(2*x*f(x) + (x**2 + f(x)**2)*f(x).diff(x), f(x),\n... hint='1st_homogeneous_coeff_subs_dep_div_indep', simplify=False))\n /          3   \\\n |3*f(x)   f (x)|\n log|------ + -----|\n |  x         3 |\n \\           x  /\nlog(x) = log(C1) - -------------------\n 3 \n```", "```py\nclass sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f, g, h = map(Function, ['f', 'g', 'h'])\n>>> genform = g(x/f(x)) + h(x/f(x))*f(x).diff(x)\n>>> pprint(genform)\n / x  \\    / x  \\ d\ng|----| + h|----|*--(f(x))\n \\f(x)/    \\f(x)/ dx\n>>> pprint(dsolve(genform, f(x),\n... hint='1st_homogeneous_coeff_subs_indep_div_dep_Integral'))\n x\n ----\n f(x)\n /\n |\n |       -g(u1)\n |  ---------------- d(u1)\n |  u1*g(u1) + h(u1)\n |\n /\n\nf(x) = C1*e \n```", "```py\n>>> from sympy import Function, pprint, dsolve\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(2*x*f(x) + (x**2 + f(x)**2)*f(x).diff(x), f(x),\n... hint='1st_homogeneous_coeff_subs_indep_div_dep',\n... simplify=False))\n /   2     \\\n |3*x      |\n log|----- + 1|\n | 2       |\n \\f (x)    /\nlog(f(x)) = log(C1) - --------------\n 3 \n```", "```py\nclass sympy.solvers.ode.single.FirstLinear(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint, diff, sin\n>>> from sympy.abc import x\n>>> f, P, Q = map(Function, ['f', 'P', 'Q'])\n>>> genform = Eq(f(x).diff(x) + P(x)*f(x), Q(x))\n>>> pprint(genform)\n d\nP(x)*f(x) + --(f(x)) = Q(x)\n dx\n>>> pprint(dsolve(genform, f(x), hint='1st_linear_Integral'))\n /       /                   \\\n |      |                    |\n |      |         /          |     /\n |      |        |           |    |\n |      |        | P(x) dx   |  - | P(x) dx\n |      |        |           |    |\n |      |       /            |   /\nf(x) = |C1 +  | Q(x)*e           dx|*e\n |      |                    |\n \\     /                     / \n```", "```py\n>>> f = Function('f')\n>>> pprint(dsolve(Eq(x*diff(f(x), x) - f(x), x**2*sin(x)),\n... f(x), '1st_linear'))\nf(x) = x*(C1 - cos(x)) \n```", "```py\nclass sympy.solvers.ode.single.RationalRiccati(ode_problem)\n```", "```py\n>>> from sympy import Symbol, Function, dsolve, checkodesol\n>>> f = Function('f')\n>>> x = Symbol('x') \n```", "```py\n>>> eq = -x**4*f(x)**2 + x**3*f(x).diff(x) + x**2*f(x) + 20\n>>> sol = dsolve(eq, hint=\"1st_rational_riccati\")\n>>> sol\nEq(f(x), (4*C1 - 5*x**9 - 4)/(x**2*(C1 + x**9 - 1)))\n>>> checkodesol(eq, sol)\n(True, 0) \n```", "```py\nclass sympy.solvers.ode.single.SecondLinearAiry(ode_problem)\n```", "```py\n>>> from sympy import dsolve, Function\n>>> from sympy.abc import x\n>>> f = Function(\"f\")\n>>> eq = f(x).diff(x, 2) - x*f(x)\n>>> dsolve(eq)\nEq(f(x), C1*airyai(x) + C2*airybi(x)) \n```", "```py\nclass sympy.solvers.ode.single.SecondLinearBessel(ode_problem)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import Symbol\n>>> v = Symbol('v', positive=True)\n>>> from sympy import dsolve, Function\n>>> f = Function('f')\n>>> y = f(x)\n>>> genform = x**2*y.diff(x, 2) + x*y.diff(x) + (x**2 - v**2)*y\n>>> dsolve(genform)\nEq(f(x), C1*besselj(v, x) + C2*bessely(v, x)) \n```", "```py\nclass sympy.solvers.ode.single.Bernoulli(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint\n>>> from sympy.abc import x, n\n>>> f, P, Q = map(Function, ['f', 'P', 'Q'])\n>>> genform = Eq(f(x).diff(x) + P(x)*f(x), Q(x)*f(x)**n)\n>>> pprint(genform)\n d                n\nP(x)*f(x) + --(f(x)) = Q(x)*f (x)\n dx\n>>> pprint(dsolve(genform, f(x), hint='Bernoulli_Integral'), num_columns=110)\n -1\n -----\n n - 1\n //         /                                 /                            \\                    \\\n ||        |                                 |                             |                    |\n ||        |                  /              |                  /          |            /       |\n ||        |                 |               |                 |           |           |        |\n ||        |       -(n - 1)* | P(x) dx       |       -(n - 1)* | P(x) dx   |  (n - 1)* | P(x) dx|\n ||        |                 |               |                 |           |           |        |\n ||        |                /                |                /            |          /         |\nf(x) = ||C1 - n* | Q(x)*e                    dx +  | Q(x)*e                    dx|*e                  |\n ||        |                                 |                             |                    |\n \\\\       /                                 /                              /                    / \n```", "```py\n>>> pprint(dsolve(Eq(f(x).diff(x) + P(x)*f(x), Q(x)*f(x)), f(x),\n... hint='separable_Integral'))\nf(x)\n /\n|                /\n|  1            |\n|  - dy = C1 +  | (-P(x) + Q(x)) dx\n|  y            |\n|              /\n/ \n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint, log\n>>> from sympy.abc import x\n>>> f = Function('f') \n```", "```py\n>>> pprint(dsolve(Eq(x*f(x).diff(x) + f(x), log(x)*f(x)**2),\n... f(x), hint='Bernoulli'))\n 1\nf(x) =  -----------------\n C1*x + log(x) + 1 \n```", "```py\nclass sympy.solvers.ode.single.Liouville(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint, diff\n>>> from sympy.abc import x\n>>> f, g, h = map(Function, ['f', 'g', 'h'])\n>>> genform = Eq(diff(f(x),x,x) + g(f(x))*diff(f(x),x)**2 +\n... h(x)*diff(f(x),x), 0)\n>>> pprint(genform)\n 2                    2\n /d       \\         d          d\ng(f(x))*|--(f(x))|  + h(x)*--(f(x)) + ---(f(x)) = 0\n \\dx      /         dx           2\n dx\n>>> pprint(dsolve(genform, f(x), hint='Liouville_Integral'))\n f(x)\n /                     /\n |                     |\n |     /               |     /\n |    |                |    |\n |  - | h(x) dx        |    | g(y) dy\n |    |                |    |\n |   /                 |   /\nC1 + C2* | e            dx +   |  e           dy = 0\n |                     |\n /                     / \n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(diff(f(x), x, x) + diff(f(x), x)**2/f(x) +\n... diff(f(x), x)/x, f(x), hint='Liouville'))\n ________________           ________________\n[f(x) = -\\/ C1 + C2*log(x) , f(x) = \\/ C1 + C2*log(x) ] \n```", "```py\nclass sympy.solvers.ode.single.RiccatiSpecial(ode_problem)\n```", "```py\n>>> from sympy.abc import x, a, b, c, d\n>>> from sympy import dsolve, checkodesol, pprint, Function\n>>> f = Function('f')\n>>> y = f(x)\n>>> genform = a*y.diff(x) - (b*y**2 + c*y/x + d/x**2)\n>>> sol = dsolve(genform, y, hint=\"Riccati_special_minus2\")\n>>> pprint(sol, wrap_line=False)\n /                                 /        __________________       \\\\\n |           __________________    |       /                2        ||\n |          /                2     |     \\/  4*b*d - (a + c)  *log(x)||\n -|a + c - \\/  4*b*d - (a + c)  *tan|C1 + ----------------------------||\n \\                                 \\                 2*a             //\nf(x) = ------------------------------------------------------------------------\n 2*b*x \n```", "```py\n>>> checkodesol(genform, sol, order=1)[0]\nTrue \n```", "```py\nclass sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(f(x).diff(x, 5) + 10*f(x).diff(x) - 2*f(x), f(x),\n... hint='nth_linear_constant_coeff_homogeneous')\n... \nEq(f(x), C5*exp(x*CRootOf(_x**5 + 10*_x - 2, 0))\n+ (C1*sin(x*im(CRootOf(_x**5 + 10*_x - 2, 1)))\n+ C2*cos(x*im(CRootOf(_x**5 + 10*_x - 2, 1))))*exp(x*re(CRootOf(_x**5 + 10*_x - 2, 1)))\n+ (C3*sin(x*im(CRootOf(_x**5 + 10*_x - 2, 3)))\n+ C4*cos(x*im(CRootOf(_x**5 + 10*_x - 2, 3))))*exp(x*re(CRootOf(_x**5 + 10*_x - 2, 3)))) \n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(f(x).diff(x, 4) + 2*f(x).diff(x, 3) -\n... 2*f(x).diff(x, 2) - 6*f(x).diff(x) + 5*f(x), f(x),\n... hint='nth_linear_constant_coeff_homogeneous'))\n x                            -2*x\nf(x) = (C1 + C2*x)*e  + (C3*sin(x) + C4*cos(x))*e \n```", "```py\nclass sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint, exp, cos\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(f(x).diff(x, 2) + 2*f(x).diff(x) + f(x) -\n... 4*exp(-x)*x**2 + cos(2*x), f(x),\n... hint='nth_linear_constant_coeff_undetermined_coefficients'))\n /       /      3\\\\\n |       |     x ||  -x   4*sin(2*x)   3*cos(2*x)\nf(x) = |C1 + x*|C2 + --||*e   - ---------- + ----------\n \\       \\     3 //           25           25 \n```", "```py\nclass sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint, exp, log\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(f(x).diff(x, 3) - 3*f(x).diff(x, 2) +\n... 3*f(x).diff(x) - f(x) - exp(x)*log(x), f(x),\n... hint='nth_linear_constant_coeff_variation_of_parameters'))\n /       /       /     x*log(x)   11*x\\\\\\  x\nf(x) = |C1 + x*|C2 + x*|C3 + -------- - ----|||*e\n \\       \\       \\        6        36 /// \n```", "```py\nclass sympy.solvers.ode.single.NthLinearEulerEqHomogeneous(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> dsolve(4*x**2*f(x).diff(x, 2) + f(x), f(x),\n... hint='nth_linear_euler_eq_homogeneous')\n... \nEq(f(x), sqrt(x)*(C1 + C2*log(x))) \n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = f(x).diff(x, 2)*x**2 - 4*f(x).diff(x)*x + 6*f(x)\n>>> pprint(dsolve(eq, f(x),\n... hint='nth_linear_euler_eq_homogeneous'))\n 2\nf(x) = x *(C1 + C2*x) \n```", "```py\nclass sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Derivative\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = x**2*Derivative(f(x), x, x) - 2*x*Derivative(f(x), x) + 2*f(x) - x**4\n>>> dsolve(eq, f(x),\n... hint='nth_linear_euler_eq_nonhomogeneous_variation_of_parameters').expand()\nEq(f(x), C1*x + C2*x**2 + x**4/6) \n```", "```py\nclass sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients(ode_problem)\n```", "```py\n>>> from sympy import dsolve, Function, Derivative, log\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = x**2*Derivative(f(x), x, x) - 2*x*Derivative(f(x), x) + 2*f(x) - log(x)\n>>> dsolve(eq, f(x),\n... hint='nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients').expand()\nEq(f(x), C1*x + C2*x**2 + log(x)/2 + 3/4) \n```", "```py\nclass sympy.solvers.ode.single.NthAlgebraic(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = Eq(f(x) * (f(x).diff(x)**2 - 1), 0)\n>>> dsolve(eq, f(x), hint='nth_algebraic')\n[Eq(f(x), 0), Eq(f(x), C1 - x), Eq(f(x), C1 + x)] \n```", "```py\nclass sympy.solvers.ode.single.NthOrderReducible(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = Eq(x*f(x).diff(x)**2 + f(x).diff(x, 2), 0)\n>>> dsolve(eq, f(x), hint='nth_order_reducible')\n... \nEq(f(x), C1 - sqrt(-1/C2)*log(-C2*sqrt(-1/C2) + x) + sqrt(-1/C2)*log(C2*sqrt(-1/C2) + x)) \n```", "```py\nclass sympy.solvers.ode.single.Separable(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, Eq, pprint\n>>> from sympy.abc import x\n>>> a, b, c, d, f = map(Function, ['a', 'b', 'c', 'd', 'f'])\n>>> genform = Eq(a(x)*b(f(x))*f(x).diff(x), c(x)*d(f(x)))\n>>> pprint(genform)\n d\na(x)*b(f(x))*--(f(x)) = c(x)*d(f(x))\n dx\n>>> pprint(dsolve(genform, f(x), hint='separable_Integral'))\n f(x)\n /                  /\n |                  |\n |  b(y)            | c(x)\n |  ---- dy = C1 +  | ---- dx\n |  d(y)            | a(x)\n |                  |\n /                  / \n```", "```py\n>>> from sympy import Function, dsolve, Eq\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(Eq(f(x)*f(x).diff(x) + x, 3*x*f(x)**2), f(x),\n... hint='separable', simplify=False))\n /   2       \\         2\nlog\\3*f (x) - 1/        x\n---------------- = C1 + --\n 6                2 \n```", "```py\nclass sympy.solvers.ode.single.AlmostLinear(ode_problem)\n```", "```py\n>>> from sympy import dsolve, Function, pprint, sin, cos\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> d = f(x).diff(x)\n>>> eq = x*d + x*f(x) + 1\n>>> dsolve(eq, f(x), hint='almost_linear')\nEq(f(x), (C1 - Ei(x))*exp(-x))\n>>> pprint(dsolve(eq, f(x), hint='almost_linear'))\n -x\nf(x) = (C1 - Ei(x))*e\n>>> example = cos(f(x))*f(x).diff(x) + sin(f(x)) + 1\n>>> pprint(example)\n d\nsin(f(x)) + cos(f(x))*--(f(x)) + 1\n dx\n>>> pprint(dsolve(example, f(x), hint='almost_linear'))\n /    -x    \\             /    -x    \\\n[f(x) = pi - asin\\C1*e   - 1/, f(x) = asin\\C1*e   - 1/] \n```", "```py\nclass sympy.solvers.ode.single.LinearCoefficients(ode_problem)\n```", "```py\n>>> from sympy import dsolve, Function, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> df = f(x).diff(x)\n>>> eq = (x + f(x) + 1)*df + (f(x) - 6*x + 1)\n>>> dsolve(eq, hint='linear_coefficients')\n[Eq(f(x), -x - sqrt(C1 + 7*x**2) - 1), Eq(f(x), -x + sqrt(C1 + 7*x**2) - 1)]\n>>> pprint(dsolve(eq, hint='linear_coefficients'))\n ___________                     ___________\n /         2                     /         2\n[f(x) = -x - \\/  C1 + 7*x   - 1, f(x) = -x + \\/  C1 + 7*x   - 1] \n```", "```py\nclass sympy.solvers.ode.single.SeparableReduced(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x, n\n>>> f, g = map(Function, ['f', 'g'])\n>>> genform = f(x).diff(x) + (f(x)/x)*g(x**n*f(x))\n>>> pprint(genform)\n / n     \\\nd          f(x)*g\\x *f(x)/\n--(f(x)) + ---------------\ndx                x\n>>> pprint(dsolve(genform, hint='separable_reduced'))\n n\nx *f(x)\n /\n |\n |         1\n |    ------------ dy = C1 + log(x)\n |    y*(n - g(y))\n |\n / \n```", "```py\n>>> from sympy import dsolve, Function, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> d = f(x).diff(x)\n>>> eq = (x - x**2*f(x))*d - f(x)\n>>> dsolve(eq, hint='separable_reduced')\n[Eq(f(x), (1 - sqrt(C1*x**2 + 1))/x), Eq(f(x), (sqrt(C1*x**2 + 1) + 1)/x)]\n>>> pprint(dsolve(eq, hint='separable_reduced'))\n ___________            ___________\n /     2                /     2\n 1 - \\/  C1*x  + 1          \\/  C1*x  + 1  + 1\n[f(x) = ------------------, f(x) = ------------------]\n x                          x \n```", "```py\nclass sympy.solvers.ode.single.LieGroup(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, exp, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> pprint(dsolve(f(x).diff(x) + 2*x*f(x) - x*exp(-x**2), f(x),\n... hint='lie_group'))\n /      2\\    2\n |     x |  -x\nf(x) = |C1 + --|*e\n \\     2 / \n```", "```py\nclass sympy.solvers.ode.single.SecondHypergeometric(ode_problem)\n```", "```py\n>>> from sympy import Function, dsolve, pprint\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = (x*x - x)*f(x).diff(x,2) + (5*x - 1)*f(x).diff(x) + 4*f(x)\n>>> pprint(dsolve(eq, f(x), '2nd_hypergeometric'))\n _\n /        /           4  \\\\  |_  /-1, -1 |  \\\n |C1 + C2*|log(x) + -----||* |   |       | x|\n \\        \\         x + 1// 2  1 \\  1    |  /\nf(x) = --------------------------------------------\n 3\n (x - 1) \n```", "```py\nsympy.solvers.ode.ode.ode_1st_power_series(eq, func, order, match)\n```", "```py\n>>> from sympy import Function, pprint, exp, dsolve\n>>> from sympy.abc import x\n>>> f = Function('f')\n>>> eq = exp(x)*(f(x).diff(x)) - f(x)\n>>> pprint(dsolve(eq, hint='1st_power_series'))\n 3       4       5\n C1*x    C1*x    C1*x     / 6\\\nf(x) = C1 + C1*x - ----- + ----- + ----- + O\\x /\n 6       24      60 \n```", "```py\nsympy.solvers.ode.ode.ode_2nd_power_series_ordinary(eq, func, order, match)\n```", "```py\n>>> from sympy import dsolve, Function, pprint\n>>> from sympy.abc import x\n>>> f = Function(\"f\")\n>>> eq = f(x).diff(x, 2) + f(x)\n>>> pprint(dsolve(eq, hint='2nd_power_series_ordinary'))\n / 4    2    \\        /     2\\\n |x    x     |        |    x |    / 6\\\nf(x) = C2*|-- - -- + 1| + C1*x*|1 - --| + O\\x /\n \\24   2     /        \\    6 / \n```", "```py\nsympy.solvers.ode.ode.ode_2nd_power_series_regular(eq, func, order, match)\n```", "```py\n>>> from sympy import dsolve, Function, pprint\n>>> from sympy.abc import x\n>>> f = Function(\"f\")\n>>> eq = x*(f(x).diff(x, 2)) + 2*(f(x).diff(x)) + x*f(x)\n>>> pprint(dsolve(eq, hint='2nd_power_series_regular'))\n /   6     4    2    \\\n |  x     x    x     |\n / 4     2    \\   C1*|- --- + -- - -- + 1|\n |x     x     |      \\  720   24   2     /    / 6\\\nf(x) = C2*|--- - -- + 1| + ------------------------ + O\\x /\n \\120   6     /              x \n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_abaco1_product(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_bivariate(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_chi(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_function_sum(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general(match, comp=False)\n```", "```py\nsympy.solvers.ode.lie_group.lie_heuristic_linear(match, comp=False)\n```", "```py\nsympy.solvers.ode.riccati.riccati_normal(w, x, b1, b2)\n```", "```py\nsympy.solvers.ode.riccati.riccati_inverse_normal(y, x, b1, b2, bp=None)\n```", "```py\nsympy.solvers.ode.riccati.riccati_reduced(eq, f, x)\n```", "```py\nsympy.solvers.ode.riccati.construct_c(num, den, x, poles, muls)\n```", "```py\nsympy.solvers.ode.riccati.construct_d(num, den, x, val_inf)\n```", "```py\nsympy.solvers.ode.riccati.rational_laurent_series(num, den, x, r, m, n)\n```", "```py\nsympy.solvers.ode.riccati.compute_m_ybar(x, poles, choice, N)\n```", "```py\nsympy.solvers.ode.riccati.solve_aux_eq(numa, dena, numy, deny, x, m)\n```", "```py\nsympy.solvers.ode.riccati.remove_redundant_sols(sol1, sol2, x)\n```", "```py\nsympy.solvers.ode.riccati.get_gen_sol_from_part_sol(part_sols, a, x)\n```", "```py\nsympy.solvers.ode.riccati.solve_riccati(fx, x, b0, b1, b2, gensol=False)\n```", "```py\nsympy.solvers.ode.ode._linear_2eq_order1_type6(x, y, t, r, eq)\n```", "```py\nsympy.solvers.ode.ode._linear_2eq_order1_type7(x, y, t, r, eq)\n```", "```py\nsympy.solvers.ode.systems.linear_ode_to_matrix(eqs, funcs, t, order)\n```", "```py\n>>> from sympy import Function, Symbol, Matrix, Eq\n>>> from sympy.solvers.ode.systems import linear_ode_to_matrix\n>>> t = Symbol('t')\n>>> x = Function('x')\n>>> y = Function('y') \n```", "```py\n>>> eqs = [\n...     Eq(x(t).diff(t), x(t) + y(t) + 1),\n...     Eq(y(t).diff(t), x(t) - y(t)),\n... ]\n>>> funcs = [x(t), y(t)]\n>>> order = 1 # 1st order system \n```", "```py\n>>> (A1, A0), b = linear_ode_to_matrix(eqs, funcs, t, order)\n>>> A1\nMatrix([\n[1, 0],\n[0, 1]])\n>>> A0\nMatrix([\n[1, 1],\n[1,  -1]])\n>>> b\nMatrix([\n[1],\n[0]]) \n```", "```py\n>>> eqs_mat = Matrix([eq.lhs - eq.rhs for eq in eqs])\n>>> X = Matrix(funcs)\n>>> A1 * X.diff(t) - A0 * X - b == eqs_mat\nTrue \n```", "```py\n>>> eqs = [Eq(x(t).diff(t, 2), x(t).diff(t) + x(t)), Eq(y(t).diff(t), y(t) + x(t))]\n>>> linear_ode_to_matrix(eqs, funcs, t, 1)\nTraceback (most recent call last):\n...\nODEOrderError: Cannot represent system in 1-order form \n```", "```py\n>>> eqs = [Eq(x(t).diff(t), x(t) + y(t)), Eq(y(t).diff(t), y(t)**2 + x(t))]\n>>> linear_ode_to_matrix(eqs, funcs, t, 1)\nTraceback (most recent call last):\n...\nODENonlinearError: The system of ODEs is nonlinear. \n```", "```py\nsympy.solvers.ode.systems.canonical_odes(eqs, funcs, t)\n```", "```py\n>>> from sympy import symbols, Function, Eq, Derivative\n>>> from sympy.solvers.ode.systems import canonical_odes\n>>> f, g = symbols(\"f g\", cls=Function)\n>>> x, y = symbols(\"x y\")\n>>> funcs = [f(x), g(x)]\n>>> eqs = [Eq(f(x).diff(x) - 7*f(x), 12*g(x)), Eq(g(x).diff(x) + g(x), 20*f(x))] \n```", "```py\n>>> canonical_eqs = canonical_odes(eqs, funcs, x)\n>>> canonical_eqs\n[[Eq(Derivative(f(x), x), 7*f(x) + 12*g(x)), Eq(Derivative(g(x), x), 20*f(x) - g(x))]] \n```", "```py\n>>> system = [Eq(Derivative(f(x), x)**2 - 2*Derivative(f(x), x) + 1, 4), Eq(-y*f(x) + Derivative(g(x), x), 0)] \n```", "```py\n>>> canonical_system = canonical_odes(system, funcs, x)\n>>> canonical_system\n[[Eq(Derivative(f(x), x), -1), Eq(Derivative(g(x), x), y*f(x))], [Eq(Derivative(f(x), x), 3), Eq(Derivative(g(x), x), y*f(x))]] \n```", "```py\nsympy.solvers.ode.systems.linodesolve_type(A, t, b=None)\n```", "```py\n>>> from sympy import symbols, Matrix\n>>> from sympy.solvers.ode.systems import linodesolve_type\n>>> t = symbols(\"t\")\n>>> A = Matrix([[1, 1], [2, 3]])\n>>> b = Matrix([t, 1]) \n```", "```py\n>>> linodesolve_type(A, t)\n{'antiderivative': None, 'type_of_equation': 'type1'} \n```", "```py\n>>> linodesolve_type(A, t, b=b)\n{'antiderivative': None, 'type_of_equation': 'type2'} \n```", "```py\n>>> A_t = Matrix([[1, t], [-t, 1]]) \n```", "```py\n>>> linodesolve_type(A_t, t)\n{'antiderivative': Matrix([\n[      t, t**2/2],\n[-t**2/2,      t]]), 'type_of_equation': 'type3'} \n```", "```py\n>>> linodesolve_type(A_t, t, b=b)\n{'antiderivative': Matrix([\n[      t, t**2/2],\n[-t**2/2,      t]]), 'type_of_equation': 'type4'} \n```", "```py\n>>> A_non_commutative = Matrix([[1, t], [t, -1]])\n>>> linodesolve_type(A_non_commutative, t)\nTraceback (most recent call last):\n...\nNotImplementedError:\nThe system does not have a commutative antiderivative, it cannot be\nsolved by linodesolve. \n```", "```py\nsympy.solvers.ode.systems.matrix_exp_jordan_form(A, t)\n```", "```py\n>>> from sympy import Matrix, Symbol\n>>> from sympy.solvers.ode.systems import matrix_exp, matrix_exp_jordan_form\n>>> t = Symbol('t') \n```", "```py\n>>> A = Matrix([[1, 1], [0, 1]]) \n```", "```py\n>>> P, expJ = matrix_exp_jordan_form(A, t) \n```", "```py\n>>> P * expJ * P.inv() == matrix_exp(A, t)\nTrue \n```", "```py\nsympy.solvers.ode.systems.matrix_exp(A, t)\n```", "```py\n>>> from sympy import Symbol, Matrix, pprint\n>>> from sympy.solvers.ode.systems import matrix_exp\n>>> t = Symbol('t') \n```", "```py\n>>> A = Matrix([[2, -5], [2, -4]])\n>>> pprint(A)\n[2  -5]\n[     ]\n[2  -4] \n```", "```py\n>>> pprint(matrix_exp(A, t))\n[   -t           -t                    -t              ]\n[3*e  *sin(t) + e  *cos(t)         -5*e  *sin(t)       ]\n[                                                      ]\n[         -t                     -t           -t       ]\n[      2*e  *sin(t)         - 3*e  *sin(t) + e  *cos(t)] \n```", "```py\nsympy.solvers.ode.systems.linodesolve(A, t, b=None, B=None, type='auto', doit=False, tau=None)\n```", "```py\n>>> from sympy import symbols, Function, Eq\n>>> from sympy.solvers.ode.systems import canonical_odes, linear_ode_to_matrix, linodesolve, linodesolve_type\n>>> from sympy.solvers.ode.subscheck import checkodesol\n>>> f, g = symbols(\"f, g\", cls=Function)\n>>> x, a = symbols(\"x, a\")\n>>> funcs = [f(x), g(x)]\n>>> eqs = [Eq(f(x).diff(x) - f(x), a*g(x) + 1), Eq(g(x).diff(x) + g(x), a*f(x))] \n```", "```py\n>>> eqs = canonical_odes(eqs, funcs, x)\n>>> eqs\n[[Eq(Derivative(f(x), x), a*g(x) + f(x) + 1), Eq(Derivative(g(x), x), a*f(x) - g(x))]] \n```", "```py\n>>> eqs = eqs[0]\n>>> (A1, A0), b = linear_ode_to_matrix(eqs, funcs, x, 1)\n>>> A = A0 \n```", "```py\n>>> system_info = linodesolve_type(A, x, b=b)\n>>> sol_vector = linodesolve(A, x, b=b, B=system_info['antiderivative'], type=system_info['type_of_equation']) \n```", "```py\n>>> sol = [Eq(f, s) for f, s in zip(funcs, sol_vector)]\n>>> checkodesol(eqs, sol)\n(True, [0, 0]) \n```", "```py\n>>> sol_vector_evaluated = linodesolve(A, x, b=b, type=\"type2\", doit=True) \n```", "```py\n>>> eqs = [Eq(f(x).diff(x), f(x) + x*g(x)), Eq(g(x).diff(x), -x*f(x) + g(x))] \n```", "```py\n>>> (A1, A0), b = linear_ode_to_matrix(eqs, funcs, x, 1)\n>>> A = A0 \n```", "```py\n>>> system_info = linodesolve_type(A, x, b=b) \n```", "```py\n>>> sol_vector = linodesolve(A, x, b=b) \n```", "```py\n>>> sol = [Eq(f, s) for f, s in zip(funcs, sol_vector)]\n>>> checkodesol(eqs, sol)\n(True, [0, 0]) \n```", "```py\nsympy.solvers.ode.ode._nonlinear_2eq_order1_type1(x, y, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_2eq_order1_type2(x, y, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_2eq_order1_type3(x, y, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_2eq_order1_type4(x, y, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_2eq_order1_type5(func, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_3eq_order1_type1(x, y, z, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_3eq_order1_type2(x, y, z, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_3eq_order1_type3(x, y, z, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_3eq_order1_type4(x, y, z, t, eq)\n```", "```py\nsympy.solvers.ode.ode._nonlinear_3eq_order1_type5(x, y, z, t, eq)\n```", "```pyode_<hint>(eq, func, order, match)`.  If you need to send more information, put it in the ``match```", "```py\nsympy.solvers.ode.ode._handle_Integral(expr, func, hint)\n```"]