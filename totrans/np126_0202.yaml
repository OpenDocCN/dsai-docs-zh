- en: Indexing routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.indexing.html](https://numpy.org/doc/1.26/reference/arrays.indexing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Indexing on ndarrays](../user/basics.indexing.html#basics-indexing)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating index arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`c_`](generated/numpy.c_.html#numpy.c_ "numpy.c_") | Translates slice objects
    to concatenation along the second axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`r_`](generated/numpy.r_.html#numpy.r_ "numpy.r_") | Translates slice objects
    to concatenation along the first axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`s_`](generated/numpy.s_.html#numpy.s_ "numpy.s_") | A nicer way to build
    up index tuples for arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero")(a)
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`where`](generated/numpy.where.html#numpy.where "numpy.where")(condition, [x, y], /)
    | Return elements chosen from *x* or *y* depending on *condition*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`indices`](generated/numpy.indices.html#numpy.indices "numpy.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ix_`](generated/numpy.ix_.html#numpy.ix_ "numpy.ix_")(*args) | Construct
    an open mesh from multiple sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel_multi_index`](generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index
    "numpy.ravel_multi_index")(multi_index, dims[, mode, ...]) | Converts a tuple
    of index arrays into an array of flat indices, applying boundary modes to the
    multi-index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unravel_index`](generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index")(indices, shape[, order]) | Converts a flat index or array
    of flat indices into a tuple of coordinate arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag_indices`](generated/numpy.diag_indices.html#numpy.diag_indices "numpy.diag_indices")(n[, ndim])
    | Return the indices to access the main diagonal of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag_indices_from`](generated/numpy.diag_indices_from.html#numpy.diag_indices_from
    "numpy.diag_indices_from")(arr) | Return the indices to access the main diagonal
    of an n-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mask_indices`](generated/numpy.mask_indices.html#numpy.mask_indices "numpy.mask_indices")(n, mask_func[, k])
    | Return the indices to access (n, n) arrays, given a masking function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril_indices`](generated/numpy.tril_indices.html#numpy.tril_indices "numpy.tril_indices")(n[, k, m])
    | Return the indices for the lower-triangle of an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril_indices_from`](generated/numpy.tril_indices_from.html#numpy.tril_indices_from
    "numpy.tril_indices_from")(arr[, k]) | Return the indices for the lower-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu_indices`](generated/numpy.triu_indices.html#numpy.triu_indices "numpy.triu_indices")(n[, k, m])
    | Return the indices for the upper-triangle of an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu_indices_from`](generated/numpy.triu_indices_from.html#numpy.triu_indices_from
    "numpy.triu_indices_from")(arr[, k]) | Return the indices for the upper-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: Indexing-like operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`take`](generated/numpy.take.html#numpy.take "numpy.take")(a, indices[, axis, out, mode])
    | Take elements from an array along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take_along_axis`](generated/numpy.take_along_axis.html#numpy.take_along_axis
    "numpy.take_along_axis")(arr, indices, axis) | Take values from the input array
    by matching 1d index and data slices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose")(a, choices[, out, mode])
    | Construct an array from an index array and a list of arrays to choose from.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`compress`](generated/numpy.compress.html#numpy.compress "numpy.compress")(condition, a[, axis, out])
    | Return selected slices of an array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal")(a[, offset, axis1, axis2])
    | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`select`](generated/numpy.select.html#numpy.select "numpy.select")(condlist, choicelist[, default])
    | Return an array drawn from elements in choicelist, depending on conditions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.stride_tricks.sliding_window_view`](generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view")(x, ...) | Create a sliding window
    view into the array with the given window shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.stride_tricks.as_strided`](generated/numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided
    "numpy.lib.stride_tricks.as_strided")(x[, shape, ...]) | Create a view into the
    array with the given shape and strides. |'
  prefs: []
  type: TYPE_TB
- en: Inserting data into arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`place`](generated/numpy.place.html#numpy.place "numpy.place")(arr, mask, vals)
    | Change elements of an array based on conditional and input values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put`](generated/numpy.put.html#numpy.put "numpy.put")(a, ind, v[, mode])
    | Replaces specified elements of an array with given values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put_along_axis`](generated/numpy.put_along_axis.html#numpy.put_along_axis
    "numpy.put_along_axis")(arr, indices, values, axis) | Put values into the destination
    array by matching 1d index and data slices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`putmask`](generated/numpy.putmask.html#numpy.putmask "numpy.putmask")(a, mask, values)
    | Changes elements of an array based on conditional and input values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill_diagonal`](generated/numpy.fill_diagonal.html#numpy.fill_diagonal
    "numpy.fill_diagonal")(a, val[, wrap]) | Fill the main diagonal of the given array
    of any dimensionality. |'
  prefs: []
  type: TYPE_TB
- en: Iterating over arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`nditer`](generated/numpy.nditer.html#numpy.nditer "numpy.nditer")(op[, flags, op_flags, op_dtypes, ...])
    | Efficient multi-dimensional iterator object to iterate over arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndenumerate`](generated/numpy.ndenumerate.html#numpy.ndenumerate "numpy.ndenumerate")(arr)
    | Multidimensional index iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndindex`](generated/numpy.ndindex.html#numpy.ndindex "numpy.ndindex")(*shape)
    | An N-dimensional iterator object to index arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nested_iters`](generated/numpy.nested_iters.html#numpy.nested_iters "numpy.nested_iters")(op, axes[, flags, op_flags, ...])
    | Create nditers for use in nested loops |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatiter`](generated/numpy.flatiter.html#numpy.flatiter "numpy.flatiter")()
    | Flat iterator object to iterate over arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.Arrayterator`](generated/numpy.lib.Arrayterator.html#numpy.lib.Arrayterator
    "numpy.lib.Arrayterator")(var[, buf_size]) | Buffered iterator for big arrays.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`iterable`](generated/numpy.iterable.html#numpy.iterable "numpy.iterable")(y)
    | Check whether or not an object can be iterated over. |'
  prefs: []
  type: TYPE_TB
- en: Generating index arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`c_`](generated/numpy.c_.html#numpy.c_ "numpy.c_") | Translates slice objects
    to concatenation along the second axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`r_`](generated/numpy.r_.html#numpy.r_ "numpy.r_") | Translates slice objects
    to concatenation along the first axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`s_`](generated/numpy.s_.html#numpy.s_ "numpy.s_") | A nicer way to build
    up index tuples for arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero")(a)
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`where`](generated/numpy.where.html#numpy.where "numpy.where")(condition, [x, y], /)
    | Return elements chosen from *x* or *y* depending on *condition*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`indices`](generated/numpy.indices.html#numpy.indices "numpy.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ix_`](generated/numpy.ix_.html#numpy.ix_ "numpy.ix_")(*args) | Construct
    an open mesh from multiple sequences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel_multi_index`](generated/numpy.ravel_multi_index.html#numpy.ravel_multi_index
    "numpy.ravel_multi_index")(multi_index, dims[, mode, ...]) | Converts a tuple
    of index arrays into an array of flat indices, applying boundary modes to the
    multi-index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unravel_index`](generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index")(indices, shape[, order]) | Converts a flat index or array
    of flat indices into a tuple of coordinate arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag_indices`](generated/numpy.diag_indices.html#numpy.diag_indices "numpy.diag_indices")(n[, ndim])
    | Return the indices to access the main diagonal of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag_indices_from`](generated/numpy.diag_indices_from.html#numpy.diag_indices_from
    "numpy.diag_indices_from")(arr) | Return the indices to access the main diagonal
    of an n-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mask_indices`](generated/numpy.mask_indices.html#numpy.mask_indices "numpy.mask_indices")(n, mask_func[, k])
    | Return the indices to access (n, n) arrays, given a masking function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril_indices`](generated/numpy.tril_indices.html#numpy.tril_indices "numpy.tril_indices")(n[, k, m])
    | Return the indices for the lower-triangle of an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril_indices_from`](generated/numpy.tril_indices_from.html#numpy.tril_indices_from
    "numpy.tril_indices_from")(arr[, k]) | Return the indices for the lower-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu_indices`](generated/numpy.triu_indices.html#numpy.triu_indices "numpy.triu_indices")(n[, k, m])
    | Return the indices for the upper-triangle of an (n, m) array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu_indices_from`](generated/numpy.triu_indices_from.html#numpy.triu_indices_from
    "numpy.triu_indices_from")(arr[, k]) | Return the indices for the upper-triangle
    of arr. |'
  prefs: []
  type: TYPE_TB
- en: Indexing-like operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`take`](generated/numpy.take.html#numpy.take "numpy.take")(a, indices[, axis, out, mode])
    | Take elements from an array along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take_along_axis`](generated/numpy.take_along_axis.html#numpy.take_along_axis
    "numpy.take_along_axis")(arr, indices, axis) | Take values from the input array
    by matching 1d index and data slices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose")(a, choices[, out, mode])
    | Construct an array from an index array and a list of arrays to choose from.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`compress`](generated/numpy.compress.html#numpy.compress "numpy.compress")(condition, a[, axis, out])
    | Return selected slices of an array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal")(a[, offset, axis1, axis2])
    | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`select`](generated/numpy.select.html#numpy.select "numpy.select")(condlist, choicelist[, default])
    | Return an array drawn from elements in choicelist, depending on conditions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.stride_tricks.sliding_window_view`](generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view")(x, ...) | Create a sliding window
    view into the array with the given window shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.stride_tricks.as_strided`](generated/numpy.lib.stride_tricks.as_strided.html#numpy.lib.stride_tricks.as_strided
    "numpy.lib.stride_tricks.as_strided")(x[, shape, ...]) | Create a view into the
    array with the given shape and strides. |'
  prefs: []
  type: TYPE_TB
- en: Inserting data into arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`place`](generated/numpy.place.html#numpy.place "numpy.place")(arr, mask, vals)
    | Change elements of an array based on conditional and input values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put`](generated/numpy.put.html#numpy.put "numpy.put")(a, ind, v[, mode])
    | Replaces specified elements of an array with given values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put_along_axis`](generated/numpy.put_along_axis.html#numpy.put_along_axis
    "numpy.put_along_axis")(arr, indices, values, axis) | Put values into the destination
    array by matching 1d index and data slices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`putmask`](generated/numpy.putmask.html#numpy.putmask "numpy.putmask")(a, mask, values)
    | Changes elements of an array based on conditional and input values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill_diagonal`](generated/numpy.fill_diagonal.html#numpy.fill_diagonal
    "numpy.fill_diagonal")(a, val[, wrap]) | Fill the main diagonal of the given array
    of any dimensionality. |'
  prefs: []
  type: TYPE_TB
- en: Iterating over arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`nditer`](generated/numpy.nditer.html#numpy.nditer "numpy.nditer")(op[, flags, op_flags, op_dtypes, ...])
    | Efficient multi-dimensional iterator object to iterate over arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndenumerate`](generated/numpy.ndenumerate.html#numpy.ndenumerate "numpy.ndenumerate")(arr)
    | Multidimensional index iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndindex`](generated/numpy.ndindex.html#numpy.ndindex "numpy.ndindex")(*shape)
    | An N-dimensional iterator object to index arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nested_iters`](generated/numpy.nested_iters.html#numpy.nested_iters "numpy.nested_iters")(op, axes[, flags, op_flags, ...])
    | Create nditers for use in nested loops |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatiter`](generated/numpy.flatiter.html#numpy.flatiter "numpy.flatiter")()
    | Flat iterator object to iterate over arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lib.Arrayterator`](generated/numpy.lib.Arrayterator.html#numpy.lib.Arrayterator
    "numpy.lib.Arrayterator")(var[, buf_size]) | Buffered iterator for big arrays.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`iterable`](generated/numpy.iterable.html#numpy.iterable "numpy.iterable")(y)
    | Check whether or not an object can be iterated over. |'
  prefs: []
  type: TYPE_TB
