- en: scipy.fftpack.fft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.fft.html#scipy.fftpack.fft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return discrete Fourier transform of real or complex sequence.
  prefs: []
  type: TYPE_NORMAL
- en: The returned complex array contains `y(0), y(1),..., y(n-1)`, where
  prefs: []
  type: TYPE_NORMAL
- en: '`y(j) = (x * exp(-2*pi*sqrt(-1)*j*np.arange(n)/n)).sum()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to Fourier transform.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the Fourier transform. If `n < x.shape[axis]`, *x* is truncated. If
    `n > x.shape[axis]`, *x* is zero-padded. The default results in `n = x.shape[axis]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the fft’s are computed; the default is over the last axis (i.e.,
    `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**z**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: 'with the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft`](scipy.fftpack.ifft.html#scipy.fftpack.ifft "scipy.fftpack.ifft")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse FFT
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfft`](scipy.fftpack.rfft.html#scipy.fftpack.rfft "scipy.fftpack.rfft")'
  prefs: []
  type: TYPE_NORMAL
- en: FFT of a real sequence
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The packing of the result is “standard”: If `A = fft(a, n)`, then `A[0]` contains
    the zero-frequency term, `A[1:n/2]` contains the positive-frequency terms, and
    `A[n/2:]` contains the negative-frequency terms, in order of decreasingly negative
    frequency. So ,for an 8-point transform, the frequencies of the result are [0,
    1, 2, 3, -4, -3, -2, -1]. To rearrange the fft output so that the zero-frequency
    component is centered, like [-4, -3, -2, -1, 0, 1, 2, 3], use [`fftshift`](scipy.fftpack.fftshift.html#scipy.fftpack.fftshift
    "scipy.fftpack.fftshift").'
  prefs: []
  type: TYPE_NORMAL
- en: Both single and double precision routines are implemented. Half precision inputs
    will be converted to single precision. Non-floating-point inputs will be converted
    to double precision. Long-double precision inputs are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: This function is most efficient when *n* is a power of two, and least efficient
    when *n* is prime.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if `x` is real-valued, then `A[j] == A[n-j].conjugate()`. If `x` is
    real-valued and `n` is even, then `A[n/2]` is real.
  prefs: []
  type: TYPE_NORMAL
- en: If the data type of *x* is real, a “real FFT” algorithm is automatically used,
    which roughly halves the computation time. To increase efficiency a little further,
    use [`rfft`](scipy.fftpack.rfft.html#scipy.fftpack.rfft "scipy.fftpack.rfft"),
    which does the same calculation, but only outputs half of the symmetrical spectrum.
    If the data is both real and symmetrical, the [`dct`](scipy.fftpack.dct.html#scipy.fftpack.dct
    "scipy.fftpack.dct") can again double the efficiency by generating half of the
    spectrum from half of the signal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
