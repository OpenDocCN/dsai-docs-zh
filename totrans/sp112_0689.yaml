- en: scipy.sparse.dok_matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.dok_matrix.html#scipy.sparse.dok_matrix](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.dok_matrix.html#scipy.sparse.dok_matrix)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary Of Keys based sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: This is an efficient structure for constructing sparse matrices incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be instantiated in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: dok_matrix(D)
  prefs: []
  type: TYPE_NORMAL
- en: where D is a 2-D ndarray
  prefs: []
  type: TYPE_NORMAL
- en: dok_matrix(S)
  prefs: []
  type: TYPE_NORMAL
- en: with another sparse array or matrix S (equivalent to S.todok())
  prefs: []
  type: TYPE_NORMAL
- en: dok_matrix((M,N), [dtype])
  prefs: []
  type: TYPE_NORMAL
- en: create the matrix with initial shape (M,N) dtype is optional, defaulting to
    dtype=’d’
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Sparse matrices can be used in arithmetic operations: they support addition,
    subtraction, multiplication, division, and matrix power.'
  prefs: []
  type: TYPE_NORMAL
- en: Allows for efficient O(1) access of individual elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicates are not allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be efficiently converted to a coo_matrix once constructed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](scipy.sparse.dok_matrix.shape.html#scipy.sparse.dok_matrix.shape
    "scipy.sparse.dok_matrix.shape")2-tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Get shape of a sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions (this is always 2)
  prefs: []
  type: TYPE_NORMAL
- en: '[`nnz`](scipy.sparse.dok_matrix.nnz.html#scipy.sparse.dok_matrix.nnz "scipy.sparse.dok_matrix.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values, including explicit zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](scipy.sparse.dok_matrix.size.html#scipy.sparse.dok_matrix.size "scipy.sparse.dok_matrix.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](scipy.sparse.dok_matrix.T.html#scipy.sparse.dok_matrix.T "scipy.sparse.dok_matrix.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Transpose.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__mul__`](scipy.sparse.dok_matrix.__mul__.html#scipy.sparse.dok_matrix.__mul__
    "scipy.sparse.dok_matrix.__mul__")(other) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`asformat`](scipy.sparse.dok_matrix.asformat.html#scipy.sparse.dok_matrix.asformat
    "scipy.sparse.dok_matrix.asformat")(format[, copy]) | Return this array/matrix
    in the passed format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfptype`](scipy.sparse.dok_matrix.asfptype.html#scipy.sparse.dok_matrix.asfptype
    "scipy.sparse.dok_matrix.asfptype")() | Upcast matrix to a floating point format
    (if necessary) |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](scipy.sparse.dok_matrix.astype.html#scipy.sparse.dok_matrix.astype
    "scipy.sparse.dok_matrix.astype")(dtype[, casting, copy]) | Cast the array/matrix
    elements to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](scipy.sparse.dok_matrix.conj.html#scipy.sparse.dok_matrix.conj "scipy.sparse.dok_matrix.conj")([copy])
    | Element-wise complex conjugation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjtransp`](scipy.sparse.dok_matrix.conjtransp.html#scipy.sparse.dok_matrix.conjtransp
    "scipy.sparse.dok_matrix.conjtransp")() | Return the conjugate transpose. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](scipy.sparse.dok_matrix.conjugate.html#scipy.sparse.dok_matrix.conjugate
    "scipy.sparse.dok_matrix.conjugate")([copy]) | Element-wise complex conjugation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](scipy.sparse.dok_matrix.copy.html#scipy.sparse.dok_matrix.copy "scipy.sparse.dok_matrix.copy")()
    | Returns a copy of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`count_nonzero`](scipy.sparse.dok_matrix.count_nonzero.html#scipy.sparse.dok_matrix.count_nonzero
    "scipy.sparse.dok_matrix.count_nonzero")() | Number of non-zero entries, equivalent
    to |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](scipy.sparse.dok_matrix.diagonal.html#scipy.sparse.dok_matrix.diagonal
    "scipy.sparse.dok_matrix.diagonal")([k]) | Returns the kth diagonal of the array/matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dot`](scipy.sparse.dok_matrix.dot.html#scipy.sparse.dok_matrix.dot "scipy.sparse.dok_matrix.dot")(other)
    | Ordinary dot product |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromkeys`](scipy.sparse.dok_matrix.fromkeys.html#scipy.sparse.dok_matrix.fromkeys
    "scipy.sparse.dok_matrix.fromkeys")(iterable[, value]) | Create a new dictionary
    with keys from iterable and values set to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get`](scipy.sparse.dok_matrix.get.html#scipy.sparse.dok_matrix.get "scipy.sparse.dok_matrix.get")(key[, default])
    | This overrides the dict.get method, providing type checking but otherwise equivalent
    functionality. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getH`](scipy.sparse.dok_matrix.getH.html#scipy.sparse.dok_matrix.getH "scipy.sparse.dok_matrix.getH")()
    | Return the Hermitian transpose of this matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_shape`](scipy.sparse.dok_matrix.get_shape.html#scipy.sparse.dok_matrix.get_shape
    "scipy.sparse.dok_matrix.get_shape")() | Get shape of a sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getcol`](scipy.sparse.dok_matrix.getcol.html#scipy.sparse.dok_matrix.getcol
    "scipy.sparse.dok_matrix.getcol")(j) | Returns a copy of column j of the matrix,
    as an (m x 1) sparse matrix (column vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`getformat`](scipy.sparse.dok_matrix.getformat.html#scipy.sparse.dok_matrix.getformat
    "scipy.sparse.dok_matrix.getformat")() | Matrix storage format |'
  prefs: []
  type: TYPE_TB
- en: '| [`getmaxprint`](scipy.sparse.dok_matrix.getmaxprint.html#scipy.sparse.dok_matrix.getmaxprint
    "scipy.sparse.dok_matrix.getmaxprint")() | Maximum number of elements to display
    when printed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getnnz`](scipy.sparse.dok_matrix.getnnz.html#scipy.sparse.dok_matrix.getnnz
    "scipy.sparse.dok_matrix.getnnz")([axis]) | Number of stored values, including
    explicit zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getrow`](scipy.sparse.dok_matrix.getrow.html#scipy.sparse.dok_matrix.getrow
    "scipy.sparse.dok_matrix.getrow")(i) | Returns a copy of row i of the matrix,
    as a (1 x n) sparse matrix (row vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](scipy.sparse.dok_matrix.maximum.html#scipy.sparse.dok_matrix.maximum
    "scipy.sparse.dok_matrix.maximum")(other) | Element-wise maximum between this
    and another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.sparse.dok_matrix.mean.html#scipy.sparse.dok_matrix.mean "scipy.sparse.dok_matrix.mean")([axis, dtype, out])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](scipy.sparse.dok_matrix.minimum.html#scipy.sparse.dok_matrix.minimum
    "scipy.sparse.dok_matrix.minimum")(other) | Element-wise minimum between this
    and another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](scipy.sparse.dok_matrix.multiply.html#scipy.sparse.dok_matrix.multiply
    "scipy.sparse.dok_matrix.multiply")(other) | Point-wise multiplication by another
    array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](scipy.sparse.dok_matrix.nonzero.html#scipy.sparse.dok_matrix.nonzero
    "scipy.sparse.dok_matrix.nonzero")() | Nonzero indices of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pop`](scipy.sparse.dok_matrix.pop.html#scipy.sparse.dok_matrix.pop "scipy.sparse.dok_matrix.pop")(key[, default])
    | If key is not found, default is returned if given, otherwise KeyError is raised
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](scipy.sparse.dok_matrix.power.html#scipy.sparse.dok_matrix.power
    "scipy.sparse.dok_matrix.power")(n[, dtype]) | Element-wise power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](scipy.sparse.dok_matrix.reshape.html#scipy.sparse.dok_matrix.reshape
    "scipy.sparse.dok_matrix.reshape")(self, shape[, order, copy]) | Gives a new shape
    to a sparse array/matrix without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](scipy.sparse.dok_matrix.resize.html#scipy.sparse.dok_matrix.resize
    "scipy.sparse.dok_matrix.resize")(*shape) | Resize the array/matrix in-place to
    dimensions given by `shape` |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_shape`](scipy.sparse.dok_matrix.set_shape.html#scipy.sparse.dok_matrix.set_shape
    "scipy.sparse.dok_matrix.set_shape")(shape) | Set the shape of the matrix in-place
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiag`](scipy.sparse.dok_matrix.setdiag.html#scipy.sparse.dok_matrix.setdiag
    "scipy.sparse.dok_matrix.setdiag")(values[, k]) | Set diagonal or off-diagonal
    elements of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](scipy.sparse.dok_matrix.sum.html#scipy.sparse.dok_matrix.sum "scipy.sparse.dok_matrix.sum")([axis, dtype, out])
    | Sum the array/matrix elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`toarray`](scipy.sparse.dok_matrix.toarray.html#scipy.sparse.dok_matrix.toarray
    "scipy.sparse.dok_matrix.toarray")([order, out]) | Return a dense ndarray representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobsr`](scipy.sparse.dok_matrix.tobsr.html#scipy.sparse.dok_matrix.tobsr
    "scipy.sparse.dok_matrix.tobsr")([blocksize, copy]) | Convert this array/matrix
    to Block Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocoo`](scipy.sparse.dok_matrix.tocoo.html#scipy.sparse.dok_matrix.tocoo
    "scipy.sparse.dok_matrix.tocoo")([copy]) | Convert this array/matrix to COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsc`](scipy.sparse.dok_matrix.tocsc.html#scipy.sparse.dok_matrix.tocsc
    "scipy.sparse.dok_matrix.tocsc")([copy]) | Convert this array/matrix to Compressed
    Sparse Column format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsr`](scipy.sparse.dok_matrix.tocsr.html#scipy.sparse.dok_matrix.tocsr
    "scipy.sparse.dok_matrix.tocsr")([copy]) | Convert this array/matrix to Compressed
    Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todense`](scipy.sparse.dok_matrix.todense.html#scipy.sparse.dok_matrix.todense
    "scipy.sparse.dok_matrix.todense")([order, out]) | Return a dense representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todia`](scipy.sparse.dok_matrix.todia.html#scipy.sparse.dok_matrix.todia
    "scipy.sparse.dok_matrix.todia")([copy]) | Convert this array/matrix to sparse
    DIAgonal format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todok`](scipy.sparse.dok_matrix.todok.html#scipy.sparse.dok_matrix.todok
    "scipy.sparse.dok_matrix.todok")([copy]) | Convert this array/matrix to Dictionary
    Of Keys format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolil`](scipy.sparse.dok_matrix.tolil.html#scipy.sparse.dok_matrix.tolil
    "scipy.sparse.dok_matrix.tolil")([copy]) | Convert this array/matrix to List of
    Lists format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](scipy.sparse.dok_matrix.trace.html#scipy.sparse.dok_matrix.trace
    "scipy.sparse.dok_matrix.trace")([offset]) | Returns the sum along diagonals of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](scipy.sparse.dok_matrix.transpose.html#scipy.sparse.dok_matrix.transpose
    "scipy.sparse.dok_matrix.transpose")([axes, copy]) | Reverses the dimensions of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| **__getitem__** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **__len__** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **clear** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **items** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **keys** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **popitem** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **setdefault** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **update** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **values** |  |'
  prefs: []
  type: TYPE_TB
