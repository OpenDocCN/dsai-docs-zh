- en: numpy.ndarray.tolist
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ndarray.tolist
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tolist.html)
- en: method
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return the array as an `a.ndim`-levels deep nested list of Python scalars.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组作为深度为`a.ndim`的嵌套Python标量列表返回。
- en: Return a copy of the array data as a (nested) Python list. Data items are converted
    to the nearest compatible builtin Python type, via the [`item`](numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item") function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将数组数据作为（嵌套的）Python列表的副本返回。数据项将通过[`item`](numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item")函数转换为最接近的兼容的内置 Python 类型。
- en: If `a.ndim` is 0, then since the depth of the nested list is 0, it will not
    be a list at all, but a simple Python scalar.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`a.ndim`为0，那么由于嵌套列表的深度为0，它根本不会是一个列表，而是一个简单的Python标量。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**none**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**无**'
- en: 'Returns:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**y**object, or list of object, or list of list of object, or …'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**对象，或对象列表，或对象列表的列表，或 …'
- en: The possibly nested list of array elements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数组元素可能嵌套的列表。
- en: Notes
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The array may be recreated via `a = np.array(a.tolist())`, although this may
    sometimes lose precision.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`a = np.array(a.tolist())`重新创建数组，尽管这有时会丢失精度。
- en: Examples
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'For a 1D array, `a.tolist()` is almost the same as `list(a)`, except that `tolist`
    changes numpy scalars to Python scalars:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维数组，`a.tolist()`几乎与`list(a)` 相同，只不过`tolist`会将numpy标量改变为Python标量：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Additionally, for a 2D array, `tolist` applies recursively:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，对于二维数组，`tolist`会递归应用：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The base case for this recursion is a 0D array:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种递归的基本情形是0维数组：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
