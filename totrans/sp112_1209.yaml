- en: scipy.stats.vonmises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.vonmises.html#scipy.stats.vonmises](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.vonmises.html#scipy.stats.vonmises)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Von Mises continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`vonmises`](#scipy.stats.vonmises "scipy.stats.vonmises")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.vonmises_fisher`](scipy.stats.vonmises_fisher.html#scipy.stats.vonmises_fisher
    "scipy.stats.vonmises_fisher")'
  prefs: []
  type: TYPE_NORMAL
- en: Von-Mises Fisher distribution on a hypersphere
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`vonmises`](#scipy.stats.vonmises "scipy.stats.vonmises")
    and [`vonmises_line`](scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x, \kappa) = \frac{ \exp(\kappa \cos(x)) }{ 2 \pi I_0(\kappa) }\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(-\pi \le x \le \pi\), \(\kappa > 0\). \(I_0\) is the modified Bessel function
    of order zero ([`scipy.special.i0`](scipy.special.i0.html#scipy.special.i0 "scipy.special.i0")).
  prefs: []
  type: TYPE_NORMAL
- en: '[`vonmises`](#scipy.stats.vonmises "scipy.stats.vonmises") is a circular distribution
    which does not restrict the distribution to a fixed interval. Currently, there
    is no circular distribution framework in SciPy. The `cdf` is implemented such
    that `cdf(x + 2*np.pi) == cdf(x) + 1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`vonmises_line`](scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") is the same distribution, defined on \([-\pi, \pi]\)
    on the real line. This is a regular (i.e. non-circular) distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note about distribution parameters: [`vonmises`](#scipy.stats.vonmises "scipy.stats.vonmises")
    and [`vonmises_line`](scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") take `kappa` as a shape parameter (concentration)
    and `loc` as the location (circular mean). A `scale` parameter is accepted but
    does not have any effect.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Import the necessary modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Define distribution parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute the probability density at `x=0` via the `pdf` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Verify that the percentile function `ppf` inverts the cumulative distribution
    function `cdf` up to floating point accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Draw 1000 random variates by calling the `rvs` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plot the von Mises density on a Cartesian and polar grid to emphasize that is
    is a circular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The left image contains the Cartesian plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The right image contains the polar plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-vonmises-1.png](../Images/c8a14c418b2048482129cf07a70adf7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(kappa, loc=0, scale=1, size=1, random_state=None)** | Random variates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, kappa, loc=0, scale=1)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, kappa, loc=0, scale=1)** | Log of the probability density function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, kappa, loc=0, scale=1)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, kappa, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, kappa, loc=0, scale=1)** | Survival function (also defined as `1
    - cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, kappa, loc=0, scale=1)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, kappa, loc=0, scale=1)** | Percent point function (inverse of `cdf`
    — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, kappa, loc=0, scale=1)** | Inverse survival function (inverse of
    `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, kappa, loc=0, scale=1)** | Non-central moment of the specified
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(kappa, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(kappa, loc=0, scale=1)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(kappa,), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(kappa, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(kappa, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(kappa, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(kappa, loc=0, scale=1)** | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, kappa, loc=0, scale=1)** | Confidence interval with
    equal areas around the median. |'
  prefs: []
  type: TYPE_TB
