- en: numpy.ndarray.ctypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.ctypes.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.ctypes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: attribute
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An object to simplify the interaction of the array with the ctypes module.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute creates an object that makes it easier to use arrays when calling
    shared libraries with the ctypes module. The returned object has, among others,
    data, shape, and strides attributes (see Notes below) which themselves return
    ctypes objects that can be used as arguments to a shared library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**None**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**Python object'
  prefs: []
  type: TYPE_NORMAL
- en: Possessing attributes data, shape, strides, etc.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ctypeslib`](../routines.ctypeslib.html#module-numpy.ctypeslib "numpy.ctypeslib")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Below are the public attributes of this object which were documented in “Guide
    to NumPy” (we have omitted undocumented public attributes, as well as documented
    private attributes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A pointer to the memory area of the array as a Python integer. This memory area
    may contain data that is not aligned, or not in correct byte-order. The memory
    area may not even be writeable. The array flags and data-type of this array should
    be respected when passing this attribute to arbitrary C-code to avoid trouble
    that can include Python crashing. User Beware! The value of this attribute is
    exactly the same as `self._array_interface_['data'][0]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that unlike `data_as`, a reference will not be kept to the array: code
    like `ctypes.c_void_p((a + b).ctypes.data)` will result in a pointer to a deallocated
    array, and should be spelt `(a + b).ctypes.data_as(ctypes.c_void_p)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '(c_intp*self.ndim): A ctypes array of length self.ndim where the basetype is
    the C-integer corresponding to `dtype(''p'')` on this platform (see [`c_intp`](../routines.ctypeslib.html#numpy.ctypeslib.c_intp
    "numpy.ctypeslib.c_intp")). This base-type could be [`ctypes.c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)"), [`ctypes.c_long`](https://docs.python.org/3/library/ctypes.html#ctypes.c_long
    "(in Python v3.11)"), or [`ctypes.c_longlong`](https://docs.python.org/3/library/ctypes.html#ctypes.c_longlong
    "(in Python v3.11)") depending on the platform. The ctypes array contains the
    shape of the underlying array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '(c_intp*self.ndim): A ctypes array of length self.ndim where the basetype is
    the same as for the shape attribute. This ctypes array contains the strides information
    from the underlying array. This strides information is important for showing how
    many bytes must be jumped to get to the next element in the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the data pointer cast to a particular c-types object. For example, calling
    `self._as_parameter_` is equivalent to `self.data_as(ctypes.c_void_p)`. Perhaps
    you want to use the data as a pointer to a ctypes array of floating-point data:
    `self.data_as(ctypes.POINTER(ctypes.c_double))`.'
  prefs: []
  type: TYPE_NORMAL
- en: The returned pointer will keep a reference to the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the shape tuple as an array of some other c-types type. For example:
    `self.shape_as(ctypes.c_short)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the strides tuple as an array of some other c-types type. For example:
    `self.strides_as(ctypes.c_longlong)`.'
  prefs: []
  type: TYPE_NORMAL
- en: If the ctypes module is not available, then the ctypes attribute of array objects
    still returns something useful, but ctypes objects are not returned and errors
    may be raised instead. In particular, the object will still have the `as_parameter`
    attribute which will return an integer equal to the data attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
