["```py\nexception sympy.integrals.meijerint._CoeffExpValueError\n```", "```py\nsympy.integrals.meijerint._check_antecedents(g1, g2, x)\n```", "```py\nsympy.integrals.meijerint._check_antecedents_1(g, x, helper=False)\n```", "```py\nsympy.integrals.meijerint._check_antecedents_inversion(g, x)\n```", "```py\nsympy.integrals.meijerint._condsimp(cond, first=True)\n```", "```py\n>>> from sympy.integrals.meijerint import _condsimp as simp\n>>> from sympy import Or, Eq\n>>> from sympy.abc import x, y\n>>> simp(Or(x < y, Eq(x, y)))\nx <= y \n```", "```py\nsympy.integrals.meijerint._create_lookup_table(table)\n```", "```py\nsympy.integrals.meijerint._dummy(name, token, expr, **kwargs)\n```", "```py\nsympy.integrals.meijerint._dummy_(name, token, **kwargs)\n```", "```py\nsympy.integrals.meijerint._eval_cond(cond)\n```", "```py\nsympy.integrals.meijerint._exponents(expr, x)\n```", "```py\n>>> from sympy.integrals.meijerint import _exponents\n>>> from sympy.abc import x, y\n>>> from sympy import sin\n>>> _exponents(x, x)\n{1}\n>>> _exponents(x**2, x)\n{2}\n>>> _exponents(x**2 + x, x)\n{1, 2}\n>>> _exponents(x**3*sin(x + x**y) + 1/x, x)\n{-1, 1, 3, y} \n```", "```py\nsympy.integrals.meijerint._find_splitting_points(expr, x)\n```", "```py\n>>> from sympy.integrals.meijerint import _find_splitting_points as fsp\n>>> from sympy import sin\n>>> from sympy.abc import x\n>>> fsp(x, x)\n{0}\n>>> fsp((x-1)**3, x)\n{1}\n>>> fsp(sin(x+3)*x, x)\n{-3, 0} \n```", "```py\nsympy.integrals.meijerint._flip_g(g)\n```", "```py\nsympy.integrals.meijerint._functions(expr, x)\n```", "```py\nsympy.integrals.meijerint._get_coeff_exp(expr, x)\n```", "```py\n>>> from sympy.abc import x, a, b\n>>> from sympy.integrals.meijerint import _get_coeff_exp\n>>> _get_coeff_exp(a*x**b, x)\n(a, b)\n>>> _get_coeff_exp(x, x)\n(1, 1)\n>>> _get_coeff_exp(2*x, x)\n(2, 1)\n>>> _get_coeff_exp(x**3, x)\n(1, 3) \n```", "```py\nsympy.integrals.meijerint._guess_expansion(f, x)\n```", "```py\nsympy.integrals.meijerint._inflate_fox_h(g, a)\n```", "```py\nsympy.integrals.meijerint._inflate_g(g, n)\n```", "```py\nsympy.integrals.meijerint._int0oo(g1, g2, x)\n```", "```py\n>>> from sympy.integrals.meijerint import _int0oo\n>>> from sympy.abc import s, t, m\n>>> from sympy import meijerg, S\n>>> g1 = meijerg([], [], [-S(1)/2, 0], [], s**2*t/4)\n>>> g2 = meijerg([], [], [m/2], [-m/2], t/4)\n>>> _int0oo(g1, g2, t)\n4*meijerg(((0, 1/2), ()), ((m/2,), (-m/2,)), s**(-2))/s**2 \n```", "```py\nsympy.integrals.meijerint._int0oo_1(g, x)\n```", "```py\n>>> from sympy.abc import a, b, c, d, x, y\n>>> from sympy import meijerg\n>>> from sympy.integrals.meijerint import _int0oo_1\n>>> _int0oo_1(meijerg([a], [b], [c], [d], x*y), x)\ngamma(-a)*gamma(c + 1)/(y*gamma(-d)*gamma(b + 1)) \n```", "```py\nsympy.integrals.meijerint._int_inversion(g, x, t)\n```", "```py\nsympy.integrals.meijerint._is_analytic(f, x)\n```", "```py\nsympy.integrals.meijerint._meijerint_definite_2(f, x)\n```", "```py\nsympy.integrals.meijerint._meijerint_definite_3(f, x)\n```", "```py\nsympy.integrals.meijerint._meijerint_definite_4(f, x, only_double=False)\n```", "```py\nsympy.integrals.meijerint._meijerint_indefinite_1(f, x)\n```", "```py\nsympy.integrals.meijerint._mul_args(f)\n```", "```py\nsympy.integrals.meijerint._mul_as_two_parts(f)\n```", "```py\n>>> from sympy.integrals.meijerint import _mul_as_two_parts\n>>> from sympy import sin, exp, ordered\n>>> from sympy.abc import x\n>>> list(ordered(_mul_as_two_parts(x*sin(x)*exp(x))))\n[(x, exp(x)*sin(x)), (x*exp(x), sin(x)), (x*sin(x), exp(x))] \n```", "```py\nsympy.integrals.meijerint._my_principal_branch(expr, period, full_pb=False)\n```", "```py\nsympy.integrals.meijerint._mytype(f: Basic, x: Symbol) â†’ tuple[type[Basic], ...]\n```", "```py\nsympy.integrals.meijerint._rewrite1(f, x, recursive=True)\n```", "```py\nsympy.integrals.meijerint._rewrite2(f, x)\n```", "```py\nsympy.integrals.meijerint._rewrite_inversion(fac, po, g, x)\n```", "```py\nsympy.integrals.meijerint._rewrite_saxena(fac, po, g1, g2, x, full_pb=False)\n```", "```py\n>>> from sympy.integrals.meijerint import _rewrite_saxena\n>>> from sympy.abc import s, t, m\n>>> from sympy import meijerg\n>>> g1 = meijerg([], [], [0], [], s*t)\n>>> g2 = meijerg([], [], [m/2], [-m/2], t**2/4)\n>>> r = _rewrite_saxena(1, t**0, g1, g2, t)\n>>> r[0]\ns/(4*sqrt(pi))\n>>> r[1]\nmeijerg(((), ()), ((-1/2, 0), ()), s**2*t/4)\n>>> r[2]\nmeijerg(((), ()), ((m/2,), (-m/2,)), t/4) \n```", "```py\nsympy.integrals.meijerint._rewrite_saxena_1(fac, po, g, x)\n```", "```py\nsympy.integrals.meijerint._rewrite_single(f, x, recursive=True)\n```", "```py\nsympy.integrals.meijerint._split_mul(f, x)\n```", "```py\n>>> from sympy.integrals.meijerint import _split_mul\n>>> from sympy import sin\n>>> from sympy.abc import s, x\n>>> _split_mul((3*x)**s*sin(x**2)*x, x)\n(3**s, x*x**s, sin(x**2)) \n```", "```py\nsympy.integrals.meijerint.meijerint_definite(f, x, a, b)\n```", "```py\n>>> from sympy.integrals.meijerint import meijerint_definite\n>>> from sympy import exp, oo\n>>> from sympy.abc import x\n>>> meijerint_definite(exp(-x**2), x, -oo, oo)\n(sqrt(pi), True) \n```", "```py\nsympy.integrals.meijerint.meijerint_indefinite(f, x)\n```", "```py\n>>> from sympy.integrals.meijerint import meijerint_indefinite\n>>> from sympy import sin\n>>> from sympy.abc import x\n>>> meijerint_indefinite(sin(x), x)\n-cos(x) \n```", "```py\nsympy.integrals.meijerint.meijerint_inversion(f, x, t)\n```", "```py\n>>> from sympy.abc import x, t\n>>> from sympy.integrals.meijerint import meijerint_inversion\n>>> meijerint_inversion(1/x, x, t)\nHeaviside(t) \n```"]