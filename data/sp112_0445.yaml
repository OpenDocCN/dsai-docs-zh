- en: scipy.optimize.shgo
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.shgo
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.shgo.html#scipy.optimize.shgo](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.shgo.html#scipy.optimize.shgo)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.shgo.html#scipy.optimize.shgo](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.shgo.html#scipy.optimize.shgo)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Finds the global minimum of a function using SHG optimization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SHG优化找到函数的全局最小值。
- en: SHGO stands for “simplicial homology global optimization”.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SHGO代表“单纯同调全局优化”。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**func**可调用'
- en: The objective function to be minimized. Must be in the form `f(x, *args)`, where
    `x` is the argument in the form of a 1-D array and `args` is a tuple of any additional
    fixed parameters needed to completely specify the function.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要最小化的目标函数。必须以`f(x, *args)`形式，其中`x`是一个1-D数组的参数，而`args`是完全指定函数所需的额外固定参数的元组。
- en: '**bounds**sequence or [`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds
    "scipy.optimize.Bounds")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**bounds**序列或[`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")'
- en: 'Bounds for variables. There are two ways to specify the bounds:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的边界。有两种指定边界的方法：
- en: Instance of [`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")
    class.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Bounds`](scipy.optimize.Bounds.html#scipy.optimize.Bounds "scipy.optimize.Bounds")类的实例。'
- en: Sequence of `(min, max)` pairs for each element in *x*.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*x*的每个元素的`(min, max)`对的序列。'
- en: '**args**tuple, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**元组，可选'
- en: Any additional fixed parameters needed to completely specify the objective function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何完全指定目标函数所需的额外固定参数。
- en: '**constraints**{Constraint, dict} or List of {Constraint, dict}, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**constraints**{约束，字典}或约束列表，可选'
- en: Constraints definition. Only for COBYLA, SLSQP and trust-constr. See the tutorial
    [[5]](#rb2e152d227b3-5) for further details on specifying constraints.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 约束定义。仅适用于COBYLA、SLSQP和trust-constr。参见教程[[5]](#rb2e152d227b3-5)以了解有关指定约束的详细信息。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Only COBYLA, SLSQP, and trust-constr local minimize methods currently support
    constraint arguments. If the `constraints` sequence used in the local optimization
    problem is not defined in `minimizer_kwargs` and a constrained method is used
    then the global `constraints` will be used. (Defining a `constraints` sequence
    in `minimizer_kwargs` means that `constraints` will not be added so if equality
    constraints and so forth need to be added then the inequality functions in `constraints`
    need to be added to `minimizer_kwargs` too). COBYLA only supports inequality constraints.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前仅COBYLA、SLSQP和trust-constr局部最小化方法支持约束参数。如果在本地优化问题中使用的`constraints`序列未在`minimizer_kwargs`中定义，并且使用了约束方法，则将使用全局的`constraints`（在`minimizer_kwargs`中定义了`constraints`序列意味着不会添加`constraints`，因此如果需要添加等式约束等等，则需要将约束函数添加到`minimizer_kwargs`中的不等式函数中）。COBYLA仅支持不等式约束。
- en: 'Changed in version 1.11.0: `constraints` accepts [`NonlinearConstraint`](scipy.optimize.NonlinearConstraint.html#scipy.optimize.NonlinearConstraint
    "scipy.optimize.NonlinearConstraint"), [`LinearConstraint`](scipy.optimize.LinearConstraint.html#scipy.optimize.LinearConstraint
    "scipy.optimize.LinearConstraint").'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.11.0起：`constraints`接受[`NonlinearConstraint`](scipy.optimize.NonlinearConstraint.html#scipy.optimize.NonlinearConstraint
    "scipy.optimize.NonlinearConstraint")，[`LinearConstraint`](scipy.optimize.LinearConstraint.html#scipy.optimize.LinearConstraint
    "scipy.optimize.LinearConstraint")。
- en: '**n**int, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**整数，可选'
- en: Number of sampling points used in the construction of the simplicial complex.
    For the default `simplicial` sampling method 2**dim + 1 sampling points are generated
    instead of the default *n=100*. For all other specified values *n* sampling points
    are generated. For `sobol`, `halton` and other arbitrary *sampling_methods* *n=100*
    or another specified number of sampling points are generated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建单纯复合物时使用的采样点数。对于默认的`simplicial`采样方法，生成2**dim + 1个采样点，而不是默认的*n=100*。对于所有其他指定的值，生成*n*个采样点。对于`sobol`、`halton`和其他任意的*sampling_methods*，生成*n=100*或另一个指定的采样点数。
- en: '**iters**int, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**iters**整数，可选'
- en: Number of iterations used in the construction of the simplicial complex. Default
    is 1.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建单纯复合物的迭代次数。默认为1。
- en: '**callback**callable, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**callback**可调用，可选'
- en: Called after each iteration, as `callback(xk)`, where `xk` is the current parameter
    vector.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代后调用，形式为`callback(xk)`，其中`xk`是当前参数向量。
- en: '**minimizer_kwargs**dict, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**minimizer_kwargs**字典，可选'
- en: 'Extra keyword arguments to be passed to the minimizer `scipy.optimize.minimize`
    Some important options could be:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递给最小化器`scipy.optimize.minimize`的额外关键字参数。一些重要的选项可能是：
- en: methodstr
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: methodstr
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The minimization method. If not given, chosen to be one of BFGS, L-BFGS-B, SLSQP,
    depending on whether or not the problem has constraints or bounds.
  id: totrans-33
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最小化方法。如果未指定，则根据问题是否有约束或边界选择为 BFGS、L-BFGS-B、SLSQP 之一。
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: argstuple
  id: totrans-38
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: argstuple
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-40
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Extra arguments passed to the objective function (`func`) and its derivatives
    (Jacobian, Hessian).
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给目标函数 (`func`) 及其导数（Jacobian、Hessian）的额外参数。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: optionsdict, optional
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项字典，可选
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that by default the tolerance is specified as `{ftol: 1e-12}`'
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: '注意，默认情况下容差被指定为 `{ftol: 1e-12}`'
- en: '**options**dict, optional'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**字典，可选'
- en: A dictionary of solver options. Many of the options specified for the global
    routine are also passed to the scipy.optimize.minimize routine. The options that
    are also passed to the local routine are marked with “(L)”.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 解算器选项字典。许多指定给全局例程的选项也传递给 scipy.optimize.minimize 例程。传递给局部例程的选项标有“(L)”。
- en: 'Stopping criteria, the algorithm will terminate if any of the specified criteria
    are met. However, the default algorithm does not require any to be specified:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 停止标准，如果满足任何指定的准则则算法将终止。但是，默认算法不需要指定任何准则：
- en: maxfevint (L)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maxfevint (L)
- en: Maximum number of function evaluations in the feasible domain. (Note only methods
    that support this option will terminate the routine at precisely exact specified
    value. Otherwise the criterion will only terminate during a global iteration)
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可行域内的最大函数评估次数。（注意，只有支持此选项的方法才会精确地在指定值处终止例程。否则，准则只会在全局迭代期间终止）
- en: f_min
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: f_min
- en: Specify the minimum objective function value, if it is known.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果已知，指定最小目标函数值。
- en: f_tolfloat
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: f_tolfloat
- en: Precision goal for the value of f in the stopping criterion. Note that the global
    routine will also terminate if a sampling point in the global routine is within
    this tolerance.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值 f 的停止准则的精度目标。请注意，如果全局例程中的采样点在此容差内，则全局例程也将终止。
- en: maxiterint
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maxiterint
- en: Maximum number of iterations to perform.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行的最大迭代次数。
- en: maxevint
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maxevint
- en: Maximum number of sampling evaluations to perform (includes searching in infeasible
    points).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大采样评估次数（包括在不可行点中的搜索）。
- en: maxtimefloat
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maxtimefloat
- en: Maximum processing runtime allowed
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许的最大处理运行时
- en: minhgrdint
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minhgrdint
- en: Minimum homology group rank differential. The homology group of the objective
    function is calculated (approximately) during every iteration. The rank of this
    group has a one-to-one correspondence with the number of locally convex subdomains
    in the objective function (after adequate sampling points each of these subdomains
    contain a unique global minimum). If the difference in the hgr is 0 between iterations
    for `maxhgrd` specified iterations the algorithm will terminate.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最小同调群秩差分。在每次迭代期间（大约）计算目标函数的同调群。该群的秩与目标函数中局部凸子域的数量具有一一对应关系（在足够的采样点后，这些子域包含唯一的全局最小值）。如果指定迭代的
    `maxhgrd` 中 hgr 的差异为 0，则算法将终止。
- en: 'Objective function knowledge:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数知识：
- en: symmetrylist or bool
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对称性列表或布尔值
- en: Specify if the objective function contains symmetric variables. The search space
    (and therefore performance) is decreased by up to O(n!) times in the fully symmetric
    case. If *True* is specified then all variables will be set symmetric to the first
    variable. Default is set to False.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定目标函数是否包含对称变量。在完全对称的情况下，搜索空间（因此性能）最多减少 O(n!) 倍。如果指定为 *True*，则所有变量将被设置为相对于第一个变量对称。默认设置为
    False。
- en: E.g. f(x) = (x_1 + x_2 + x_3) + (x_4)**2 + (x_5)**2 + (x_6)**2
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，f(x) = (x_1 + x_2 + x_3) + (x_4)**2 + (x_5)**2 + (x_6)**2
- en: 'In this equation x_2 and x_3 are symmetric to x_1, while x_5 and x_6 are symmetric
    to x_4, this can be specified to the solver as:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此方程中，x_2 和 x_3 对 x_1 对称，而 x_5 和 x_6 对 x_4 对称，可以指定给解算器如下：
- en: 'symmetry = [0, # Variable 1'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对称性 = [0, # 变量 1'
- en: '0, # symmetric to variable 1 0, # symmetric to variable 1 3, # Variable 4 3,
    # symmetric to variable 4 3, # symmetric to variable 4 ]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '0, # 对变量 1 对称 0, # 对变量 1 3, # 变量 4 3, # 对变量 4 3, # 对变量 4 ]'
- en: jacbool or callable, optional
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jacbool 或可调用，可选
- en: Jacobian (gradient) of objective function. Only for CG, BFGS, Newton-CG, L-BFGS-B,
    TNC, SLSQP, dogleg, trust-ncg. If `jac` is a boolean and is True, `fun` is assumed
    to return the gradient along with the objective function. If False, the gradient
    will be estimated numerically. `jac` can also be a callable returning the gradient
    of the objective. In this case, it must accept the same arguments as `fun`. (Passed
    to [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") automatically)
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标函数的Jacobian（梯度）。仅适用于CG、BFGS、Newton-CG、L-BFGS-B、TNC、SLSQP、dogleg和trust-ncg。如果`jac`为布尔值且为True，则假定`fun`返回目标函数的梯度。如果为False，则梯度将以数值方式估计。`jac`也可以是一个返回目标函数梯度的可调用对象。在这种情况下，它必须接受与`fun`相同的参数。（将自动传递给[`scipy.optimize.minimize`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")）
- en: hess, hesspcallable, optional
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: hess，hesspcallable，可选
- en: Hessian (matrix of second-order derivatives) of objective function or Hessian
    of objective function times an arbitrary vector p. Only for Newton-CG, dogleg,
    trust-ncg. Only one of `hessp` or `hess` needs to be given. If `hess` is provided,
    then `hessp` will be ignored. If neither `hess` nor `hessp` is provided, then
    the Hessian product will be approximated using finite differences on `jac`. `hessp`
    must compute the Hessian times an arbitrary vector. (Passed to [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") automatically)
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Hessian（二阶导数矩阵）的目标函数或者目标函数的Hessian乘以任意向量p。仅适用于Newton-CG、dogleg和trust-ncg。`hessp`或`hess`中只需提供一个。如果提供了`hess`，则将忽略`hessp`。如果`hess`和`hessp`都未提供，则将在`jac`上使用有限差分近似Hessian乘积。`hessp`必须计算Hessian乘以任意向量。（将自动传递给[`scipy.optimize.minimize`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")）
- en: 'Algorithm settings:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 算法设置：
- en: minimize_every_iterbool
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minimize_every_iterbool
- en: If True then promising global sampling points will be passed to a local minimization
    routine every iteration. If True then only the final minimizer pool will be run.
    Defaults to True.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则有前景的全局采样点将传递给每次迭代的本地最小化程序。如果为False，则仅运行最终的最小化池。默认为True。
- en: local_iterint
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: local_iterint
- en: Only evaluate a few of the best minimizer pool candidates every iteration. If
    False all potential points are passed to the local minimization routine.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次迭代仅评估少数最佳最小化候选点。如果为False，则所有潜在点都将传递给本地最小化程序。
- en: infty_constraintsbool
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: infty_constraintsbool
- en: If True then any sampling points generated which are outside will the feasible
    domain will be saved and given an objective function value of `inf`. If False
    then these points will be discarded. Using this functionality could lead to higher
    performance with respect to function evaluations before the global minimum is
    found, specifying False will use less memory at the cost of a slight decrease
    in performance. Defaults to True.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则生成的任何采样点超出可行域将被保存，并给予目标函数值`inf`。如果为False，则这些点将被丢弃。使用此功能可以在找到全局最小值之前提高函数评估的性能。指定为False将以稍微降低性能的代价节省内存。默认为True。
- en: 'Feedback:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈：
- en: dispbool (L)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dispbool（L）
- en: Set to True to print convergence messages.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置为True以打印收敛消息。
- en: '**sampling_method**str or function, optional'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**sampling_method**str或函数，可选'
- en: Current built in sampling method options are `halton`, `sobol` and `simplicial`.
    The default `simplicial` provides the theoretical guarantee of convergence to
    the global minimum in finite time. `halton` and `sobol` method are faster in terms
    of sampling point generation at the cost of the loss of guaranteed convergence.
    It is more appropriate for most “easier” problems where the convergence is relatively
    fast. User defined sampling functions must accept two arguments of `n` sampling
    points of dimension `dim` per call and output an array of sampling points with
    shape *n x dim*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当前内置的采样方法选项为`halton`、`sobol`和`simplicial`。默认的`simplicial`提供了有限时间内收敛到全局最小值的理论保证。`halton`和`sobol`方法在采样点生成方面更快，但失去了保证收敛性。对于大多数“较简单”的问题，这更为适用。用户定义的采样函数必须每次调用接受`n`个维度为`dim`的采样点，并输出形状为*n
    x dim*的采样点数组。
- en: '**workers**int or map-like callable, optional'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**workers**int或类似映射的可调用对象，可选'
- en: Sample and run the local serial minimizations in parallel. Supply -1 to use
    all available CPU cores, or an int to use that many Processes (uses [`multiprocessing.Pool`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
    "(in Python v3.12)")).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并行地对样本进行本地串行最小化。提供-1以使用所有可用的CPU核心，或提供一个整数以使用这么多进程（使用[`multiprocessing.Pool`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
    "(in Python v3.12)")）。
- en: Alternatively supply a map-like callable, such as *multiprocessing.Pool.map*
    for parallel evaluation. This evaluation is carried out as `workers(func, iterable)`.
    Requires that *func* be pickleable.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者提供一个类似映射的可调用对象，例如*multiprocessing.Pool.map*以进行并行评估。此评估以`workers(func, iterable)`形式进行。要求*func*可被pickle。
- en: New in version 1.11.0.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.11.0开始新增。
- en: 'Returns:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**res**OptimizeResult'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**res**OptimizeResult'
- en: 'The optimization result represented as a [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") object. Important attributes are: `x` the solution
    array corresponding to the global minimum, `fun` the function output at the global
    solution, `xl` an ordered list of local minima solutions, `funl` the function
    output at the corresponding local solutions, `success` a Boolean flag indicating
    if the optimizer exited successfully, `message` which describes the cause of the
    termination, `nfev` the total number of objective function evaluations including
    the sampling calls, `nlfev` the total number of objective function evaluations
    culminating from all local search optimizations, `nit` number of iterations performed
    by the global routine.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 优化结果表示为[`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult")对象。重要属性包括：`x`是对应全局最小值的解数组，`fun`是全局解处的函数输出，`xl`是局部最小解的排序列表，`funl`是相应局部解的函数输出，`success`是一个布尔标志，指示优化器是否成功退出，`message`描述终止原因，`nfev`是包括采样调用在内的总目标函数评估次数，`nlfev`是所有局部搜索优化导致的总目标函数评估次数，`nit`是全局例程执行的迭代次数。
- en: Notes
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: Global optimization using simplicial homology global optimization [[1]](#rb2e152d227b3-1).
    Appropriate for solving general purpose NLP and blackbox optimization problems
    to global optimality (low-dimensional problems).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单纯同调全局优化进行全局优化 [[1]](#rb2e152d227b3-1)。适用于解决通用NLP和黑盒优化问题以达到全局最优（低维问题）。
- en: 'In general, the optimization problems are of the form:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，优化问题的形式为：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where x is a vector of one or more variables. `f(x)` is the objective function
    `R^n -> R`, `g_i(x)` are the inequality constraints, and `h_j(x)` are the equality
    constraints.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里x是一个或多个变量的向量。`f(x)`是目标函数`R^n -> R`，`g_i(x)`是不等式约束，`h_j(x)`是等式约束。
- en: Optionally, the lower and upper bounds for each element in x can also be specified
    using the *bounds* argument.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，还可以使用*bounds*参数指定x中每个元素的下限和上限。
- en: While most of the theoretical advantages of SHGO are only proven for when `f(x)`
    is a Lipschitz smooth function, the algorithm is also proven to converge to the
    global optimum for the more general case where `f(x)` is non-continuous, non-convex
    and non-smooth, if the default sampling method is used [[1]](#rb2e152d227b3-1).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SHGO的大部分理论优势仅对`f(x)`为Lipschitz光滑函数时得到证明，但是当`f(x)`是非连续、非凸且非光滑时，如果使用默认的采样方法，该算法也被证明能够收敛到全局最优解
    [[1]](#rb2e152d227b3-1)。
- en: The local search method may be specified using the `minimizer_kwargs` parameter
    which is passed on to `scipy.optimize.minimize`. By default, the `SLSQP` method
    is used. In general, it is recommended to use the `SLSQP` or `COBYLA` local minimization
    if inequality constraints are defined for the problem since the other methods
    do not use constraints.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`minimizer_kwargs`参数指定本地搜索方法，该参数传递给`scipy.optimize.minimize`。默认情况下使用`SLSQP`方法。一般建议如果问题定义了不等式约束，则使用`SLSQP`或`COBYLA`本地最小化方法，因为其他方法不使用约束。
- en: The `halton` and `sobol` method points are generated using [`scipy.stats.qmc`](../stats.qmc.html#module-scipy.stats.qmc
    "scipy.stats.qmc"). Any other QMC method could be used.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`scipy.stats.qmc`](../stats.qmc.html#module-scipy.stats.qmc "scipy.stats.qmc")生成`halton`和`sobol`方法点。还可以使用任何其他QMC方法。
- en: References
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] ([1](#id2),[2](#id3))'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] ([1](#id2),[2](#id3))'
- en: Endres, SC, Sandrock, C, Focke, WW (2018) “A simplicial homology algorithm for
    lipschitz optimisation”, Journal of Global Optimization.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Endres, SC, Sandrock, C, Focke, WW (2018) “一种用于Lipschitz优化的单纯同调算法”，全球优化期刊。
- en: '[2]'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[2]'
- en: Joe, SW and Kuo, FY (2008) “Constructing Sobol’ sequences with better two-dimensional
    projections”, SIAM J. Sci. Comput. 30, 2635-2654.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Joe, SW和Kuo, FY（2008）“用更好的二维投影构建Sobol序列”，SIAM J. Sci. Comput. 30, 2635-2654。
- en: '[3] ([1](#id10),[2](#id11))'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] ([1](#id10),[2](#id11))'
- en: Hock, W and Schittkowski, K (1981) “Test examples for nonlinear programming
    codes”, Lecture Notes in Economics and Mathematical Systems, 187\. Springer-Verlag,
    New York. [http://www.ai7.uni-bayreuth.de/test_problem_coll.pdf](http://www.ai7.uni-bayreuth.de/test_problem_coll.pdf)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Hock, W和Schittkowski, K（1981）“非线性规划代码的测试示例”，经济与数学系统讲义，187\. Springer-Verlag，纽约。[http://www.ai7.uni-bayreuth.de/test_problem_coll.pdf](http://www.ai7.uni-bayreuth.de/test_problem_coll.pdf)
- en: '[[4](#id9)]'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[[4](#id9)]'
- en: 'Wales, DJ (2015) “Perspective: Insight into reaction coordinates and dynamics
    from the potential energy landscape”, Journal of Chemical Physics, 142(13), 2015.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Wales, DJ（2015）“观点：从势能景观中获取反应坐标和动态的洞察”，化学物理学杂志，142(13), 2015。
- en: '[[5](#id1)]'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[[5](#id1)]'
- en: '[https://docs.scipy.org/doc/scipy/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize](https://docs.scipy.org/doc/scipy/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.scipy.org/doc/scipy/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize](https://docs.scipy.org/doc/scipy/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize)'
- en: Examples
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'First consider the problem of minimizing the Rosenbrock function, [`rosen`](scipy.optimize.rosen.html#scipy.optimize.rosen
    "scipy.optimize.rosen"):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先考虑最小化Rosenbrock函数的问题，[`rosen`](scipy.optimize.rosen.html#scipy.optimize.rosen
    "scipy.optimize.rosen")：
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that bounds determine the dimensionality of the objective function and
    is therefore a required input, however you can specify empty bounds using `None`
    or objects like `np.inf` which will be converted to large float numbers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，边界确定目标函数的维度，因此是必需的输入，但是您可以使用`None`或类似`np.inf`的对象指定空边界，这些将被转换为大的浮点数。
- en: '[PRE3]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we consider the Eggholder function, a problem with several local minima
    and one global minimum. We will demonstrate the use of arguments and the capabilities
    of [`shgo`](#scipy.optimize.shgo "scipy.optimize.shgo"). ([https://en.wikipedia.org/wiki/Test_functions_for_optimization](https://en.wikipedia.org/wiki/Test_functions_for_optimization))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们考虑Eggholder函数，这是一个具有多个局部极小值和一个全局极小值的问题。我们将演示[`shgo`](#scipy.optimize.shgo
    "scipy.optimize.shgo")的参数使用和能力。
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`shgo`](#scipy.optimize.shgo "scipy.optimize.shgo") has built-in low discrepancy
    sampling sequences. First, we will input 64 initial sampling points of the *Sobol’*
    sequence:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shgo`](#scipy.optimize.shgo "scipy.optimize.shgo")具有内置的低差异采样序列。首先，我们将输入*Sobol''*序列的64个初始采样点：'
- en: '[PRE5]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`shgo`](#scipy.optimize.shgo "scipy.optimize.shgo") also has a return for
    any other local minima that was found, these can be called using:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shgo`](#scipy.optimize.shgo "scipy.optimize.shgo")还返回了找到的任何其他局部极小值，可以使用以下方式调用：'
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These results are useful in applications where there are many global minima
    and the values of other global minima are desired or where the local minima can
    provide insight into the system (for example morphologies in physical chemistry
    [[4]](#rb2e152d227b3-4)).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果在应用中非常有用，特别是在需要许多全局极小值和其他全局极小值值的情况下，或者在局部极小值可以为系统提供洞察力的情况下（例如物理化学中的形态学[[4]](#rb2e152d227b3-4)）。
- en: If we want to find a larger number of local minima, we can increase the number
    of sampling points or the number of iterations. We’ll increase the number of sampling
    points to 64 and the number of iterations from the default of 1 to 3\. Using `simplicial`
    this would have given us 64 x 3 = 192 initial sampling points.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要找到更多的局部极小值，我们可以增加采样点或迭代次数的数量。我们将增加采样点数到64，并将迭代次数从默认值1增加到3。使用`simplicial`，这将为我们提供64
    x 3 = 192个初始采样点。
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note the difference between, e.g., `n=192, iters=1` and `n=64, iters=3`. In
    the first case the promising points contained in the minimiser pool are processed
    only once. In the latter case it is processed every 64 sampling points for a total
    of 3 times.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，例如`n=192, iters=1`和`n=64, iters=3`之间的差异。在第一种情况下，仅一次处理最小化池中的有前途点。在后一种情况下，它每64个采样点处理一次，总共3次。
- en: 'To demonstrate solving problems with non-linear constraints consider the following
    example from Hock and Schittkowski problem 73 (cattle-feed) [[3]](#rb2e152d227b3-3):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要演示解决具有非线性约束的问题，请考虑Hock和Schittkowski问题73（牛饲料）的以下示例[[3]](#rb2e152d227b3-3)：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The approximate answer given in [[3]](#rb2e152d227b3-3) is:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在[[3]](#rb2e152d227b3-3)中给出的近似答案是：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
