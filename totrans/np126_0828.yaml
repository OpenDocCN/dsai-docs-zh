- en: numpy.arcsinh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.arcsinh.html](https://numpy.org/doc/1.26/reference/generated/numpy.arcsinh.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Inverse hyperbolic sine element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Array of the same shape as *x*. This is a scalar if *x* is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`arcsinh`](#numpy.arcsinh "numpy.arcsinh") is a multivalued function: for
    each *x* there are infinitely many numbers *z* such that *sinh(z) = x*. The convention
    is to return the *z* whose imaginary part lies in *[-pi/2, pi/2]*.'
  prefs: []
  type: TYPE_NORMAL
- en: For real-valued input data types, [`arcsinh`](#numpy.arcsinh "numpy.arcsinh")
    always returns real output. For each value that cannot be expressed as a real
    number or infinity, it returns `nan` and sets the *invalid* floating point error
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: For complex-valued input, [`arccos`](numpy.arccos.html#numpy.arccos "numpy.arccos")
    is a complex analytical function that has branch cuts *[1j, infj]* and *[-1j,
    -infj]* and is continuous from the right on the former and from the left on the
    latter.
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic sine is also known as *asinh* or `sinh^-1`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: M. Abramowitz and I.A. Stegun, “Handbook of Mathematical Functions”, 10th printing,
    1964, pp. 86. [https://personal.math.ubc.ca/~cbm/aands/page_86.htm](https://personal.math.ubc.ca/~cbm/aands/page_86.htm)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Inverse hyperbolic function”, [https://en.wikipedia.org/wiki/Arcsinh](https://en.wikipedia.org/wiki/Arcsinh)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
