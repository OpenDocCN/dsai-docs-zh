["```py\nclass sympy.physics.quantum.gate.CGate(*args, **kwargs)\n```", "```py\nproperty controls\n```", "```py\ndecompose(**options)\n```", "```py\neval_controls(qubit)\n```", "```py\nproperty gate\n```", "```py\nproperty min_qubits\n```", "```py\nproperty nqubits\n```", "```py\nplot_gate(circ_plot, gate_idx)\n```", "```py\nproperty targets\n```", "```py\nclass sympy.physics.quantum.gate.CGateS(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.CNOT\n```", "```py\nclass sympy.physics.quantum.gate.CNotGate(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum.gate import CNOT\n>>> from sympy.physics.quantum.qapply import qapply\n>>> from sympy.physics.quantum.qubit import Qubit\n>>> c = CNOT(1,0)\n>>> qapply(c*Qubit('10')) # note that qubits are indexed from right to left\n|11> \n```", "```py\nproperty controls\n```", "```py\nproperty gate\n```", "```py\nproperty min_qubits\n```", "```py\nproperty targets\n```", "```py\nclass sympy.physics.quantum.gate.Gate(*args, **kwargs)\n```", "```py\nget_target_matrix(format='sympy')\n```", "```py\nproperty min_qubits\n```", "```py\nproperty nqubits\n```", "```py\nproperty targets\n```", "```py\nsympy.physics.quantum.gate.H\n```", "```py\nclass sympy.physics.quantum.gate.HadamardGate(*args, **kwargs)\n```", "```py\n>>> from sympy import sqrt\n>>> from sympy.physics.quantum.qubit import Qubit\n>>> from sympy.physics.quantum.gate import HadamardGate\n>>> from sympy.physics.quantum.qapply import qapply\n>>> qapply(HadamardGate(0)*Qubit('1'))\nsqrt(2)*|0>/2 - sqrt(2)*|1>/2\n>>> # Hadamard on bell state, applied on 2 qubits.\n>>> psi = 1/sqrt(2)*(Qubit('00')+Qubit('11'))\n>>> qapply(HadamardGate(0)*HadamardGate(1)*psi)\nsqrt(2)*|00>/2 + sqrt(2)*|11>/2 \n```", "```py\nclass sympy.physics.quantum.gate.IdentityGate(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.gate.OneQubitGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.Phase\n```", "```py\nclass sympy.physics.quantum.gate.PhaseGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.S\n```", "```py\nsympy.physics.quantum.gate.SWAP\n```", "```py\nclass sympy.physics.quantum.gate.SwapGate(*args, **kwargs)\n```", "```py\ndecompose(**options)\n```", "```py\nsympy.physics.quantum.gate.T\n```", "```py\nclass sympy.physics.quantum.gate.TGate(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.gate.TwoQubitGate(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.gate.UGate(*args, **kwargs)\n```", "```py\nget_target_matrix(format='sympy')\n```", "```py\nproperty targets\n```", "```py\nsympy.physics.quantum.gate.X\n```", "```py\nclass sympy.physics.quantum.gate.XGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.Y\n```", "```py\nclass sympy.physics.quantum.gate.YGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.Z\n```", "```py\nclass sympy.physics.quantum.gate.ZGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.gate.gate_simp(circuit)\n```", "```py\nsympy.physics.quantum.gate.gate_sort(circuit)\n```", "```py\nsympy.physics.quantum.gate.normalized(normalize)\n```", "```py\nsympy.physics.quantum.gate.random_circuit(ngates, nqubits, gate_space=(<class 'sympy.physics.quantum.gate.XGate'>, <class 'sympy.physics.quantum.gate.YGate'>, <class 'sympy.physics.quantum.gate.ZGate'>, <class 'sympy.physics.quantum.gate.PhaseGate'>, <class 'sympy.physics.quantum.gate.TGate'>, <class 'sympy.physics.quantum.gate.HadamardGate'>, <class 'sympy.physics.quantum.gate.CNotGate'>, <class 'sympy.physics.quantum.gate.SwapGate'>))\n```"]