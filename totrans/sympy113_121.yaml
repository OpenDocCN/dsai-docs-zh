- en: N-dim array expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/tensor/array_expressions.html](https://docs.sympy.org/latest/modules/tensor/array_expressions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Array expressions are expressions representing N-dimensional arrays, without
    evaluating them. These expressions represent in a certain way abstract syntax
    trees of operations on N-dimensional arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Every N-dimensional array operator has a corresponding array expression object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table of correspondences:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Array operator | Array expression operator |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| tensorproduct | ArrayTensorProduct |'
  prefs: []
  type: TYPE_TB
- en: '| tensorcontraction | ArrayContraction |'
  prefs: []
  type: TYPE_TB
- en: '| tensordiagonal | ArrayDiagonal |'
  prefs: []
  type: TYPE_TB
- en: '| permutedims | PermuteDims |'
  prefs: []
  type: TYPE_TB
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ArraySymbol` objects are the N-dimensional equivalent of `MatrixSymbol` objects
    in the matrix module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Component-explicit arrays can be added inside array expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Constructing array expressions from index-explicit forms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Array expressions are index-implicit. This means they do not use any indices
    to represent array operations. The function `convert_indexed_to_array( ... )`
    may be used to convert index-explicit expressions to array expressions. It takes
    as input two parameters: the index-explicit expression and the order of the indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The diagonal of a matrix in the array expression form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The trace of a matrix in the array expression form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Compatibility with matrices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Array expressions can be mixed with objects from the matrix module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Express the matrix product in the array expression form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The expression can be converted back to matrix form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a second contraction on the remaining axes in order to get the trace of
    \(M \cdot N\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Flatten the expression by calling `.doit()` and remove the nested array contraction
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the explicit form of the array expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Express the trace of a matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Express the transposition of a matrix (will be expressed as a permutation of
    the axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Compute the derivative array expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the derivative corresponds to the form computed with explicit matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Class to represent the tensor product of array-like objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This class is meant to represent contractions of arrays in a form easily processable
    by the code printers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Class to represent the diagonal operator.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'In a 2-dimensional array it returns the diagonal, this looks like the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(A_{ij} \rightarrow A_{ii}\)
  prefs: []
  type: TYPE_NORMAL
- en: The diagonal over axes 1 and 2 (the second and third) of the tensor product
    of two 2-dimensional arrays \(A \otimes B\) is
  prefs: []
  type: TYPE_NORMAL
- en: \(\Big[ A_{ab} B_{cd} \Big]_{abcd} \rightarrow \Big[ A_{ai} B_{id} \Big]_{adi}\)
  prefs: []
  type: TYPE_NORMAL
- en: In this last example the array expression has been reduced from 4-dimensional
    to 3-dimensional. Notice that no contraction has occurred, rather there is a new
    index \(i\) for the diagonal, contraction would have reduced the array to 2 dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the diagonalized out dimensions are added as new dimensions at the
    end of the indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Class to represent permutation of axes of arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The object `cg` represents the transposition of `M`, as the permutation `[1,
    0]` will act on its indices by switching them:'
  prefs: []
  type: TYPE_NORMAL
- en: \(M_{ij} \Rightarrow M_{ji}\)
  prefs: []
  type: TYPE_NORMAL
- en: 'This is evident when transforming back to matrix form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There are optional parameters that can be used as alternative to the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Permutations of tensor products are simplified in order to achieve a standard
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The args `(M, N)` have been sorted and the permutation has been simplified,
    the expression is equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The permutation in its array form has been simplified from `[2, 3, 1, 0]` to
    `[0, 1, 3, 2]`, as the arguments of the tensor product \(M\) and \(N\) have been
    switched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can nest a second permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
