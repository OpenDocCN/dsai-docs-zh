- en: Random sampling (numpy.random)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机抽样（numpy.random）
- en: 原文：[https://numpy.org/doc/1.26/reference/random/index.html](https://numpy.org/doc/1.26/reference/random/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/index.html](https://numpy.org/doc/1.26/reference/random/index.html)
- en: '## Quick Start'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 快速开始'
- en: The [`numpy.random`](#module-numpy.random "numpy.random") module implements
    pseudo-random number generators (PRNGs or RNGs, for short) with the ability to
    draw samples from a variety of probability distributions. In general, users will
    create a [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    instance with [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    and call the various methods on it to obtain samples from different distributions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random`](#module-numpy.random "numpy.random") 模块实现了伪随机数生成器（PRNGs或RNGs）的能力，可以从各种概率分布中抽取样本。一般来说，用户会使用
    [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    创建一个 [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    实例，并调用其中的各种方法来从不同的分布中获取样本。'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our RNGs are deterministic sequences and can be reproduced by specifying a seed
    integer to derive its initial state. By default, with no seed provided, [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") will create seed the RNG from nondeterministic data
    from the operating system and therefore generate different numbers each time.
    The pseudo-random sequences will be independent for all practical purposes, at
    least those purposes for which our pseudo-randomness was good for in the first
    place.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 RNGs 是确定性序列，可以通过指定一个种子整数来重现其初始状态。默认情况下，如果没有提供种子，[`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") 将从操作系统的非确定性数据中创建种子 RNG，因此每次生成不同的数字。伪随机序列在所有实际目的上都是独立的，至少对于我们一开始就很好的伪随机性来说。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Warning
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The pseudo-random number generators implemented in this module are designed
    for statistical modeling and simulation. They are not suitable for security or
    cryptographic purposes. See the [`secrets`](https://docs.python.org/3/library/secrets.html#module-secrets
    "(in Python v3.11)") module from the standard library for such use cases.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块实现的伪随机数生成器设计用于统计建模和模拟。不适用于安全或加密目的。有关此类用例，请参阅标准库中的 [`secrets`](https://docs.python.org/3/library/secrets.html#module-secrets
    "(在 Python v3.11)") 模块。
- en: Seeds should be large positive integers. [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") can take positive integers of any size. We recommend
    using very large, unique numbers to ensure that your seed is different from anyone
    else’s. This is good practice to ensure that your results are statistically independent
    from theirs unless you are intentionally *trying* to reproduce their result. A
    convenient way to get such a seed number is to use [`secrets.randbits`](https://docs.python.org/3/library/secrets.html#secrets.randbits
    "(in Python v3.11)") to get an arbitrary 128-bit integer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 种子应为大的正整数。[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    可以接受任意大小的正整数。我们建议使用非常大且唯一的数字，以确保您的种子与其他人的不同。这是一个良好的实践，以确保您的结果在统计上独立于他们的结果，除非您有意*尝试*复制他们的结果。获取这样一个种子数字的便捷方法是使用
    [`secrets.randbits`](https://docs.python.org/3/library/secrets.html#secrets.randbits
    "(在 Python v3.11)") 来获取一个任意的 128 位整数。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See the documentation on [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") and [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") for more advanced options for controlling the seed
    in specialized scenarios.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在专门情况下控制种子的更高级选项，请参阅 [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") 和 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 的文档。
- en: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    and its associated infrastructure was introduced in NumPy version 1.17.0\. There
    is still a lot of code that uses the older [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") and the functions in [`numpy.random`](#module-numpy.random
    "numpy.random"). While there are no plans to remove them at this time, we do recommend
    transitioning to [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    as you can. The algorithms are faster, more flexible, and will receive more improvements
    in the future. For the most part, [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") can be used as a replacement for [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). See [Legacy Random Generation](legacy.html#legacy)
    for information on the legacy infrastructure, [What’s New or Different](new-or-different.html#new-or-different)
    for information on transitioning, and [NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19
    "(in NumPy Enhancement Proposals)") for some of the reasoning for the transition.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")及其相关基础设施是在NumPy版本1.17.0中引入的。仍然有很多代码使用旧的[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")和[`numpy.random`](#module-numpy.random "numpy.random")中的函数。虽然目前没有计划删除它们，但我们建议尽快过渡到[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")。这些算法更快，更灵活，并且将在未来得到更多改进。在很大程度上，[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")可以用作[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")的替代品。查看[Legacy Random Generation](legacy.html#legacy)以获取有关旧基础设施的信息，[What’s
    New or Different](new-or-different.html#new-or-different)以获取有关过渡的信息，以及[NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19
    "(in NumPy Enhancement Proposals)")以获取过渡的一些原因。'
- en: Design
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计
- en: Users primarily interact with [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") instances. Each [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") instance owns a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") instance that implements the core RNG algorithm.
    The [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") has a limited set of responsibilities. It manages
    state and provides functions to produce random doubles and random unsigned 32-
    and 64-bit values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主要与[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")实例进行交互。每个[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")实例拥有一个实现核心随机数生成算法的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")实例。[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")具有有限的职责范围。它管理状态并提供函数来生成随机双精度数和随机无符号32位和64位值。
- en: The [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    takes the bit generator-provided stream and transforms them into more useful distributions,
    e.g., simulated normal random values. This structure allows alternative bit generators
    to be used with little code duplication.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")接收由比特生成器提供的流，并将它们转换为更有用的分布，例如模拟正态随机值。这种结构允许使用替代比特生成器而几乎没有代码重复。'
- en: NumPy implements several different [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") classes implementing different RNG algorithms. [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") currently uses [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64") as the default [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"). It has better statistical properties and performance
    than the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    algorithm used in the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). See [Bit Generators](bit_generators/index.html#random-bit-generators)
    for more details on the supported BitGenerators.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 实现了几种不同的 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 类，实现了不同的 RNG 算法。[`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") 目前使用 [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64") 作为默认的 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")。它具有比传统的 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 中使用的 [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") 算法更好的统计特性和性能。有关支持的 BitGenerators 的更多详细信息，请参见[Bit Generators](bit_generators/index.html#random-bit-generators)。
- en: '[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    and BitGenerators delegate the conversion of seeds into RNG states to [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") internally. [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") implements a sophisticated algorithm that intermediates
    between the user’s input and the internal implementation details of each [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") algorithm, each of which can require different amounts
    of bits for its state. Importantly, it lets you use arbitrary-sized integers and
    arbitrary sequences of such integers to mix together into the RNG state. This
    is a useful primitive for constructing a [flexible pattern for parallel RNG streams](parallel.html#seedsequence-spawn).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    和 BitGenerators 将种子转换为 RNG 状态的工作委托给内部的 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")。[`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 实现了一个复杂的算法，介于用户输入和每个 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 算法的内部实现细节之间，每个算法可能需要不同数量的位来表示其状态。重要的是，它允许您使用任意大小的整数和这些整数的任意序列混合在一起形成
    RNG 状态。这是构建[灵活的并行 RNG 流模式](parallel.html#seedsequence-spawn)的有用基元。'
- en: For backward compatibility, we still maintain the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") class. It continues to use the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") algorithm by default, and old seeds continue to reproduce
    the same results. The convenience [Functions in numpy.random](legacy.html#functions-in-numpy-random)
    are still aliases to the methods on a single global [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") instance. See [Legacy Random Generation](legacy.html#legacy)
    for the complete details. See [What’s New or Different](new-or-different.html#new-or-different)
    for a detailed comparison between [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") and [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们仍然维护传统的 [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    类。它继续默认使用 [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    算法，并且旧的种子仍然可以产生相同的结果。方便的[numpy.random 中的函数](legacy.html#functions-in-numpy-random)仍然是单个全局
    [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    实例上方法的别名。有关完整详细信息，请参见[传统随机生成](legacy.html#legacy)。有关 [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") 和 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 之间的详细比较，请参见[新功能或不同之处](new-or-different.html#new-or-different)。
- en: Parallel Generation
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行生成
- en: 'The included generators can be used in parallel, distributed applications in
    a number of ways:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的生成器可以在多种方式的并行分布式应用中使用：
- en: '[SeedSequence spawning](parallel.html#seedsequence-spawn)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[种子序列生成](parallel.html#seedsequence-spawn)'
- en: '[Sequence of Integer Seeds](parallel.html#sequence-of-seeds)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整数种子序列](parallel.html#sequence-of-seeds)'
- en: '[Independent Streams](parallel.html#independent-streams)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立流](parallel.html#independent-streams)'
- en: '[Jumping the BitGenerator state](parallel.html#parallel-jumped)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳跃比特生成器状态](parallel.html#parallel-jumped)'
- en: Users with a very large amount of parallelism will want to consult [Upgrading
    PCG64 with PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 具有大量并行性的用户将希望查阅 [升级 PCG64 为 PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)。
- en: Concepts
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念
- en: '[Random Generator](generator.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机生成器](generator.html)'
- en: '[Legacy Generator (RandomState)](legacy.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[旧的生成器（RandomState）](legacy.html)'
- en: '[Bit Generators](bit_generators/index.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比特生成器](bit_generators/index.html)'
- en: '[Seeding and Entropy](bit_generators/index.html#seeding-and-entropy)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[种子和熵](bit_generators/index.html#seeding-and-entropy)'
- en: '[Upgrading PCG64 with PCG64DXSM](upgrading-pcg64.html)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[升级 PCG64 为 PCG64DXSM](upgrading-pcg64.html)'
- en: '[Compatibility Policy](compatibility.html)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[兼容性策略](compatibility.html)'
- en: Features
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性
- en: '[Parallel Applications](parallel.html)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并行应用程序](parallel.html)'
- en: '[`SeedSequence` spawning](parallel.html#seedsequence-spawning)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SeedSequence` 的衍生](parallel.html#seedsequence-spawning)'
- en: '[Sequence of Integer Seeds](parallel.html#sequence-of-integer-seeds)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整数种子序列](parallel.html#sequence-of-integer-seeds)'
- en: '[Independent Streams](parallel.html#independent-streams)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立流](parallel.html#independent-streams)'
- en: '[Jumping the BitGenerator state](parallel.html#jumping-the-bitgenerator-state)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳跃比特生成器状态](parallel.html#jumping-the-bitgenerator-state)'
- en: '[Multithreaded Generation](multithreading.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多线程生成](multithreading.html)'
- en: '[What’s New or Different](new-or-different.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新功能或不同之处](new-or-different.html)'
- en: '[Comparing Performance](performance.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[性能比较](performance.html)'
- en: '[Recommendation](performance.html#recommendation)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建议](performance.html#recommendation)'
- en: '[Timings](performance.html#timings)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[时间](performance.html#timings)'
- en: '[Performance on different Operating Systems](performance.html#performance-on-different-operating-systems)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在不同操作系统上的性能](performance.html#performance-on-different-operating-systems)'
- en: '[C API for random](c-api.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于随机数的 C API](c-api.html)'
- en: '[Examples of using Numba, Cython, CFFI](extending.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Numba、Cython、CFFI 的示例](extending.html)'
- en: '[Numba](extending.html#numba)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Numba](extending.html#numba)'
- en: '[Cython](extending.html#cython)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cython](extending.html#cython)'
- en: '[CFFI](extending.html#cffi)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CFFI](extending.html#cffi)'
- en: '[New Bit Generators](extending.html#new-bit-generators)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的比特生成器](extending.html#new-bit-generators)'
- en: '[Examples](extending.html#examples)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](extending.html#examples)'
- en: Original Source of the Generator and BitGenerators
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器和比特生成器的原始来源
- en: This package was developed independently of NumPy and was integrated in version
    1.17.0\. The original repo is at [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包是独立于 NumPy 开发的，并在版本 1.17.0 中集成。原始存储库位于 [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen)。
- en: '## Quick Start'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '## 快速入门'
- en: The [`numpy.random`](#module-numpy.random "numpy.random") module implements
    pseudo-random number generators (PRNGs or RNGs, for short) with the ability to
    draw samples from a variety of probability distributions. In general, users will
    create a [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    instance with [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    and call the various methods on it to obtain samples from different distributions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random`](#module-numpy.random "numpy.random") 模块实现了伪随机数生成器（PRNGs 或
    RNGs，简称）的能力，可以从各种概率分布中提取样本。一般来说，用户将使用 [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") 创建一个 [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") 实例，并调用其中的各种方法来从不同的分布中获取样本。'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our RNGs are deterministic sequences and can be reproduced by specifying a seed
    integer to derive its initial state. By default, with no seed provided, [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") will create seed the RNG from nondeterministic data
    from the operating system and therefore generate different numbers each time.
    The pseudo-random sequences will be independent for all practical purposes, at
    least those purposes for which our pseudo-randomness was good for in the first
    place.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的随机数生成器是确定性序列，可以通过指定一个种子整数来生成其初始状态。默认情况下，如果没有提供种子，[`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") 将使用操作系统中的非确定性数据来生成随机数，因此每次生成的数字都会不同。为了所有实际目的，伪随机序列将是独立的，至少对于我们一开始目的良好的伪随机性来说。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Warning
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The pseudo-random number generators implemented in this module are designed
    for statistical modeling and simulation. They are not suitable for security or
    cryptographic purposes. See the [`secrets`](https://docs.python.org/3/library/secrets.html#module-secrets
    "(in Python v3.11)") module from the standard library for such use cases.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块实现的伪随机数生成器设计用于统计建模和模拟。它们不适用于安全或加密目的。请参见标准库中的 [`secrets`](https://docs.python.org/3/library/secrets.html#module-secrets
    "(in Python v3.11)") 模块，了解此类用例。
- en: Seeds should be large positive integers. [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") can take positive integers of any size. We recommend
    using very large, unique numbers to ensure that your seed is different from anyone
    else’s. This is good practice to ensure that your results are statistically independent
    from theirs unless you are intentionally *trying* to reproduce their result. A
    convenient way to get such a seed number is to use [`secrets.randbits`](https://docs.python.org/3/library/secrets.html#secrets.randbits
    "(in Python v3.11)") to get an arbitrary 128-bit integer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随机种子应是大的正整数。[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    可以接受任意大小的正整数。我们建议使用非常大、唯一的数字，以确保您的种子与其他人的不同。这是一种好的做法，可以确保您的结果在统计上与他们的结果独立，除非您有意*尝试*复制他们的结果。获取这样的种子数字的便捷方法是使用
    [`secrets.randbits`](https://docs.python.org/3/library/secrets.html#secrets.randbits
    "(in Python v3.11)") 获取一个任意的 128 位整数。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See the documentation on [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") and [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") for more advanced options for controlling the seed
    in specialized scenarios.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 查看有关 [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    和 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 的文档，了解在专业场景下控制种子的更高级选项。
- en: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    and its associated infrastructure was introduced in NumPy version 1.17.0\. There
    is still a lot of code that uses the older [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") and the functions in [`numpy.random`](#module-numpy.random
    "numpy.random"). While there are no plans to remove them at this time, we do recommend
    transitioning to [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    as you can. The algorithms are faster, more flexible, and will receive more improvements
    in the future. For the most part, [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") can be used as a replacement for [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). See [Legacy Random Generation](legacy.html#legacy)
    for information on the legacy infrastructure, [What’s New or Different](new-or-different.html#new-or-different)
    for information on transitioning, and [NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19
    "(in NumPy Enhancement Proposals)") for some of the reasoning for the transition.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`生成器`](generator.html#numpy.random.Generator "numpy.random.Generator") 及其相关基础设施是在
    NumPy 版本 1.17.0 中引入的。目前仍有许多代码使用旧的 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 和 [`numpy.random`](#module-numpy.random "numpy.random")
    中的函数。虽然目前没有计划删除它们，但我们建议尽快过渡到 [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")。这些算法更快、更灵活，并将在未来得到更多的改进。大部分情况下，[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") 可以用作 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 的替代品。参见 [Legacy Random Generation](legacy.html#legacy)
    了解旧基础设施的信息，[What’s New or Different](new-or-different.html#new-or-different) 了解过渡信息，以及
    [NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19 "(in NumPy Enhancement
    Proposals)") 了解过渡理由。'
- en: Design
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计
- en: Users primarily interact with [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") instances. Each [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") instance owns a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") instance that implements the core RNG algorithm.
    The [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") has a limited set of responsibilities. It manages
    state and provides functions to produce random doubles and random unsigned 32-
    and 64-bit values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主要与[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")实例进行交互。每个[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")实例拥有一个实现核心随机数生成算法的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")实例。[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")具有有限的责任范围。它管理状态并提供函数来生成随机双精度数和随机无符号32位和64位值。
- en: The [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    takes the bit generator-provided stream and transforms them into more useful distributions,
    e.g., simulated normal random values. This structure allows alternative bit generators
    to be used with little code duplication.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")获取由比特生成器提供的流，并将其转换为更有用的分布，例如模拟正态随机值。这种结构允许使用替代比特生成器而几乎不产生重复代码。'
- en: NumPy implements several different [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") classes implementing different RNG algorithms. [`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng") currently uses [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64") as the default [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"). It has better statistical properties and performance
    than the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    algorithm used in the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). See [Bit Generators](bit_generators/index.html#random-bit-generators)
    for more details on the supported BitGenerators.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy实现了几种不同的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")类，实现了不同的随机数生成算法。[`default_rng`](generator.html#numpy.random.default_rng
    "numpy.random.default_rng")目前使用[`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64")作为默认的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator")。它比传统的[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")中使用的[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937")算法具有更好的统计特性和性能。有关支持的比特生成器的更多详细信息，请参见[比特生成器](bit_generators/index.html#random-bit-generators)。
- en: '[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    and BitGenerators delegate the conversion of seeds into RNG states to [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") internally. [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") implements a sophisticated algorithm that intermediates
    between the user’s input and the internal implementation details of each [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") algorithm, each of which can require different amounts
    of bits for its state. Importantly, it lets you use arbitrary-sized integers and
    arbitrary sequences of such integers to mix together into the RNG state. This
    is a useful primitive for constructing a [flexible pattern for parallel RNG streams](parallel.html#seedsequence-spawn).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")和比特生成器将种子转换为随机数生成器状态的过程委托给内部的[`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")。[`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")实现了一个复杂的算法，它在用户输入和每个[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")算法的内部实现细节之间进行中介，每个算法可能需要不同数量的位来表示其状态。重要的是，它允许您使用任意大小的整数和这些整数的任意序列来混合到随机数生成器状态中。这是构建[灵活的并行随机数生成流模式](parallel.html#seedsequence-spawn)的有用基元。'
- en: For backward compatibility, we still maintain the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") class. It continues to use the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") algorithm by default, and old seeds continue to reproduce
    the same results. The convenience [Functions in numpy.random](legacy.html#functions-in-numpy-random)
    are still aliases to the methods on a single global [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") instance. See [Legacy Random Generation](legacy.html#legacy)
    for the complete details. See [What’s New or Different](new-or-different.html#new-or-different)
    for a detailed comparison between [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") and [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们仍然维护传统的[`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")类。它仍然默认使用[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937")算法，并且旧种子仍将产生相同的结果。方便的[numpy.random中的函数](legacy.html#functions-in-numpy-random)仍然是一个全局[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")实例上方法的别名。详见[传统随机生成](legacy.html#legacy)以获取完整的细节。请查看[新功能或不同之处](new-or-different.html#new-or-different)以详细比较[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")和[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")之间的区别。
- en: Parallel Generation
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行生成
- en: 'The included generators can be used in parallel, distributed applications in
    a number of ways:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的生成器可以以多种方式用于并行、分布式应用程序：
- en: '[SeedSequence spawning](parallel.html#seedsequence-spawn)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[种子序列生成](parallel.html#seedsequence-spawn)'
- en: '[Sequence of Integer Seeds](parallel.html#sequence-of-seeds)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整数种子序列](parallel.html#sequence-of-seeds)'
- en: '[Independent Streams](parallel.html#independent-streams)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立流](parallel.html#independent-streams)'
- en: '[Jumping the BitGenerator state](parallel.html#parallel-jumped)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳过位生成器状态](parallel.html#parallel-jumped)'
- en: Users with a very large amount of parallelism will want to consult [Upgrading
    PCG64 with PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有大量并行性的用户将想要参考[将PCG64升级为PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)。
- en: Parallel Generation
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行生成
- en: 'The included generators can be used in parallel, distributed applications in
    a number of ways:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的生成器可以以多种方式用于并行、分布式应用程序：
- en: '[SeedSequence spawning](parallel.html#seedsequence-spawn)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[种子序列生成](parallel.html#seedsequence-spawn)'
- en: '[Sequence of Integer Seeds](parallel.html#sequence-of-seeds)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整数种子序列](parallel.html#sequence-of-seeds)'
- en: '[Independent Streams](parallel.html#independent-streams)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立流](parallel.html#independent-streams)'
- en: '[Jumping the BitGenerator state](parallel.html#parallel-jumped)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳过位生成器状态](parallel.html#parallel-jumped)'
- en: Users with a very large amount of parallelism will want to consult [Upgrading
    PCG64 with PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有大量并行性的用户将要咨询[将PCG64升级为PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)。
- en: Concepts
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念
- en: '[Random Generator](generator.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机生成器](generator.html)'
- en: '[Legacy Generator (RandomState)](legacy.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[传统生成器（RandomState）](legacy.html)'
- en: '[Bit Generators](bit_generators/index.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[位生成器](bit_generators/index.html)'
- en: '[Seeding and Entropy](bit_generators/index.html#seeding-and-entropy)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[种子和熵](bit_generators/index.html#seeding-and-entropy)'
- en: '[Upgrading PCG64 with PCG64DXSM](upgrading-pcg64.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将PCG64升级为PCG64DXSM](upgrading-pcg64.html)'
- en: '[Compatibility Policy](compatibility.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[兼容性政策](compatibility.html)'
- en: Features
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性
- en: '[Parallel Applications](parallel.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并行应用](parallel.html)'
- en: '[`SeedSequence` spawning](parallel.html#seedsequence-spawning)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SeedSequence`生成](parallel.html#seedsequence-spawning)'
- en: '[Sequence of Integer Seeds](parallel.html#sequence-of-integer-seeds)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[整数种子序列](parallel.html#sequence-of-integer-seeds)'
- en: '[Independent Streams](parallel.html#independent-streams)'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[独立流](parallel.html#independent-streams)'
- en: '[Jumping the BitGenerator state](parallel.html#jumping-the-bitgenerator-state)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳过位生成器状态](parallel.html#jumping-the-bitgenerator-state)'
- en: '[Multithreaded Generation](multithreading.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多线程生成](multithreading.html)'
- en: '[What’s New or Different](new-or-different.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新功能或不同之处](new-or-different.html)'
- en: '[Comparing Performance](performance.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[性能比较](performance.html)'
- en: '[Recommendation](performance.html#recommendation)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[推荐](performance.html#recommendation)'
- en: '[Timings](performance.html#timings)'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定时](performance.html#timings)'
- en: '[Performance on different Operating Systems](performance.html#performance-on-different-operating-systems)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[不同操作系统上的性能](performance.html#performance-on-different-operating-systems)'
- en: '[C API for random](c-api.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机数C API](c-api.html)'
- en: '[Examples of using Numba, Cython, CFFI](extending.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Numba、Cython、CFFI的示例](extending.html)'
- en: '[Numba](extending.html#numba)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Numba](extending.html#numba)'
- en: '[Cython](extending.html#cython)'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cython](extending.html#cython)'
- en: '[CFFI](extending.html#cffi)'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CFFI](extending.html#cffi)'
- en: '[New Bit Generators](extending.html#new-bit-generators)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的 Bit Generators](extending.html#new-bit-generators)'
- en: '[Examples](extending.html#examples)'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](extending.html#examples)'
- en: Original Source of the Generator and BitGenerators
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器和 BitGenerators 的原始来源
- en: This package was developed independently of NumPy and was integrated in version
    1.17.0\. The original repo is at [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包是独立于 NumPy 开发的，在版本 1.17.0 中被集成。原始仓库位于 [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen)。
- en: Original Source of the Generator and BitGenerators
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器和 BitGenerators 的原始来源
- en: This package was developed independently of NumPy and was integrated in version
    1.17.0\. The original repo is at [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包是独立于 NumPy 开发的，在版本 1.17.0 中被集成。原始仓库位于 [https://github.com/bashtage/randomgen](https://github.com/bashtage/randomgen)。
