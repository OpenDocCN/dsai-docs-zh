["```py\n> >>> from sympy import symbols\n> \n> >>> from sympy.physics.units.systems import SI\n> \n> >>> from sympy.physics.units import length, mass, acceleration, force\n> \n> >>> from sympy.physics.units import gravitational_constant as G\n> \n> >>> from sympy.physics.units.systems.si import dimsys_SI\n> \n> >>> F = mass*acceleration\n> \n> >>> F\n> \n> Dimension(acceleration*mass)\n> \n> >>> dimsys_SI.get_dimensional_dependencies(F)\n> \n> {Dimension(length): 1, Dimension(mass, M): 1, Dimension(time): -2}\n> \n> >>> dimsys_SI.get_dimensional_dependencies(force)\n> \n> {Dimension(length): 1, Dimension(mass): 1, Dimension(time): -2} \n> ```", "```py\n> >>> F == force\n> \n> False \n> ```", "```py\n> >>> dimsys_SI.equivalent_dims(F, force)\n> \n> True \n> ```", "```py\n> >>> m1, m2, r = symbols(\"m1 m2 r\")\n> \n> >>> grav_eq = G * m1 * m2 / r**2\n> \n> >>> F2 = grav_eq.subs({m1: mass, m2: mass, r: length, G: G.dimension})\n> \n> >>> F2  \n> \n> Dimension(mass*length*time**-2)\n> \n> >>> F2.get_dimensional_dependencies()  \n> \n> {'length': 1, 'mass': 1, 'time': -2} \n> ```", "```py\n> >>> from sympy import solve, symbols, pi, Eq\n> \n> >>> from sympy.physics.units import Quantity, length, mass\n> \n> >>> from sympy.physics.units import day, gravitational_constant as G\n> \n> >>> from sympy.physics.units import meter, kilogram\n> \n> >>> T = symbols(\"T\")\n> \n> >>> a = Quantity(\"venus_a\") \n> ```", "```py\n> >>> SI.set_quantity_dimension(a, length)\n> \n> >>> SI.set_quantity_scale_factor(a, 108208000e3*meter) \n> ```", "```py\n> >>> M = Quantity(\"solar_mass\")\n> \n> >>> SI.set_quantity_dimension(M, mass)\n> \n> >>> SI.set_quantity_scale_factor(M, 1.9891e30*kilogram) \n> ```", "```py\n> >>> eq = Eq(T**2 / a**3, 4*pi**2 / G / M)\n> \n> >>> eq\n> \n> Eq(T**2/venus_a**3, 4*pi**2/(gravitational_constant*solar_mass))\n> \n> >>> q = solve(eq, T)[1]\n> \n> >>> q\n> \n> 2*pi*venus_a**(3/2)/(sqrt(gravitational_constant)*sqrt(solar_mass)) \n> ```", "```py\n>>> from sympy.physics.units import convert_to\n>>> convert_to(q, day)\n71.5112118495813*pi*day\n>>> convert_to(q, day).n()\n224.659097795948*day \n```"]