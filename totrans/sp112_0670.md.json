["```py\nscipy.signal.czt(x, m=None, w=None, a=1 + 0j, *, axis=-1)\n```", "```py\n>>> import numpy as np\n>>> f1, f2, fs = 8, 10, 200  # Hz\n>>> t = np.linspace(0, 1, fs, endpoint=False)\n>>> x = np.sin(2*np.pi*t*f2)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(t, x)\n>>> plt.axis([0, 1, -1.1, 1.1])\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import rfft, rfftfreq\n>>> from scipy.signal import czt, czt_points\n>>> plt.plot(rfftfreq(fs, 1/fs), abs(rfft(x)))\n>>> plt.margins(0, 0.1)\n>>> plt.show() \n```", "```py\n>>> x = np.exp(-t*f1) * np.sin(2*np.pi*t*f2)\n>>> plt.plot(t, x)\n>>> plt.axis([0, 1, -1.1, 1.1])\n>>> plt.show() \n```", "```py\n>>> plt.plot(rfftfreq(fs, 1/fs), abs(rfft(x)))\n>>> plt.margins(0, 0.1)\n>>> plt.show() \n```", "```py\n>>> M = fs // 2  # Just positive frequencies, like rfft\n>>> a = np.exp(-f1/fs)  # Starting point of the circle, radius < 1\n>>> w = np.exp(-1j*np.pi/M)  # \"Step size\" of circle\n>>> points = czt_points(M + 1, w, a)  # M + 1 to include Nyquist\n>>> plt.plot(points.real, points.imag, '.')\n>>> plt.gca().add_patch(plt.Circle((0,0), radius=1, fill=False, alpha=.3))\n>>> plt.axis('equal'); plt.axis([-1.05, 1.05, -0.05, 1.05])\n>>> plt.show() \n```", "```py\n>>> z_vals = czt(x, M + 1, w, a)  # Include Nyquist for comparison to rfft\n>>> freqs = np.angle(points)*fs/(2*np.pi)  # angle = omega, radius = sigma\n>>> plt.plot(freqs, abs(z_vals))\n>>> plt.margins(0, 0.1)\n>>> plt.show() \n```"]