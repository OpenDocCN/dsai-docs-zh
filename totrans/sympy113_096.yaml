- en: abc
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: abc
- en: Original text：[https://docs.sympy.org/latest/modules/abc.html](https://docs.sympy.org/latest/modules/abc.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/abc.html](https://docs.sympy.org/latest/modules/abc.html)
- en: This module exports all latin and greek letters as Symbols, so you can conveniently
    do
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将所有拉丁字母和希腊字母作为符号导出，因此您可以方便地进行以下操作
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: instead of the slightly more clunky-looking
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是看起来稍微笨拙的
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Caveats
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意事项
- en: 1\. As of the time of writing this, the names `O`, `S`, `I`, `N`, `E`, and `Q`
    are colliding with names defined in SymPy. If you import them from both `sympy.abc`
    and `sympy`, the second import will “win”. This is an issue only for * imports,
    which should only be used for short-lived code such as interactive sessions and
    throwaway scripts that do not survive until the next SymPy upgrade, where `sympy`
    may contain a different set of names.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 在撰写本文时，名称 `O`、`S`、`I`、`N`、`E` 和 `Q` 与 SymPy 中定义的名称发生冲突。如果您同时从 `sympy.abc`
    和 `sympy` 导入它们，第二个导入将“获胜”。这仅适用于 * 导入，应仅用于短暂的代码，例如交互会话和不会存活到下一个 SymPy 升级的临时脚本，其中
    `sympy` 可能包含不同的名称。
- en: 2\. This module does not define symbol names on demand, i.e. `from sympy.abc
    import foo` will be reported as an error because `sympy.abc` does not contain
    the name `foo`. To get a symbol named `foo`, you still need to use `Symbol('foo')`
    or `symbols('foo')`. You can freely mix usage of `sympy.abc` and `Symbol`/`symbols`,
    though sticking with one and only one way to get the symbols does tend to make
    the code more readable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 此模块不会按需定义符号名称，即 `from sympy.abc import foo` 将报告错误，因为 `sympy.abc` 中不包含名称
    `foo`。要获取名为 `foo` 的符号，仍然需要使用 `Symbol('foo')` 或 `symbols('foo')`。您可以自由混合使用 `sympy.abc`
    和 `Symbol`/`symbols`，尽管仅使用一种方法获取符号往往会使代码更易读。
- en: The module also defines some special names to help detect which names clash
    with the default SymPy namespace.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块还定义了一些特殊名称，以帮助检测哪些名称与默认的 SymPy 命名空间冲突。
- en: '`_clash1` defines all the single letter variables that clash with SymPy objects;
    `_clash2` defines the multi-letter clashing symbols; and `_clash` is the union
    of both. These can be passed for `locals` during sympification if one desires
    Symbols rather than the non-Symbol objects for those names.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`_clash1` 定义所有与 SymPy 对象冲突的单字母变量；`_clash2` 定义冲突的多字母符号；`_clash` 是两者的并集。如果希望在
    sympification 期间传递 `locals` 而不是这些名称的非符号对象，则可以使用它们。'
- en: Examples
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
