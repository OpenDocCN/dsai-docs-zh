- en: Assumptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/assumptions/index.html](https://docs.sympy.org/latest/modules/assumptions/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A module to implement logical predicates and assumption system.
  prefs: []
  type: TYPE_NORMAL
- en: Predicate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Base class for mathematical predicates. It also serves as a constructor for
    undefined predicate objects.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Predicate is a function that returns a boolean value [1].
  prefs: []
  type: TYPE_NORMAL
- en: Predicate function is object, and it is instance of predicate class. When a
    predicate is applied to arguments, `AppliedPredicate` instance is returned. This
    merely wraps the argument and remain unevaluated. To obtain the truth value of
    applied predicate, use the function `ask`.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of predicate is done by multiple dispatching. You can register new
    handler to the predicate to support new types.
  prefs: []
  type: TYPE_NORMAL
- en: Every predicate in SymPy can be accessed via the property of `Q`. For example,
    `Q.even` returns the predicate which checks if the argument is even number.
  prefs: []
  type: TYPE_NORMAL
- en: To define a predicate which can be evaluated, you must subclass this class,
    make an instance of it, and register it to `Q`. After then, dispatch the handler
    by argument types.
  prefs: []
  type: TYPE_NORMAL
- en: If you directly construct predicate using this class, you will get `UndefinedPredicate`
    which cannot be dispatched. This is useful when you are building boolean expressions
    which do not need to be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying and evaluating to boolean value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can define a new predicate by subclassing and dispatching. Here, we define
    a predicate for sexy primes [2] as an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Direct constructing returns `UndefinedPredicate`, which can be applied but cannot
    be dispatched.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R7](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29](https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R8](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Sexy_prime](https://en.wikipedia.org/wiki/Sexy_prime)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate `self(*args)` under the given assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: This uses only direct resolution methods, not logical inference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Register the signature to the handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Register multiple signatures to same handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The class of expressions resulting from applying `Predicate` to the arguments.
    `AppliedPredicate` merely wraps its argument and remain unevaluated. To evaluate
    it, use the `ask()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `function` attribute returns the predicate, and the `arguments` attribute
    returns the tuple of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Applied predicates can be evaluated to a boolean value with `ask`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return the expression used by this assumption.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Return the arguments which are applied to the predicate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Return the predicate.
  prefs: []
  type: TYPE_NORMAL
- en: Querying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Queries are used to ask information about expressions. Main method for this
    is `ask()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Function to evaluate the proposition with assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**proposition** : Boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Proposition which will be evaluated to boolean value. If this is not `AppliedPredicate`,
    it will be wrapped by `Q.is_true`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**assumptions** : Boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Local assumptions to evaluate the *proposition*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**context** : AssumptionsContext, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default assumptions to evaluate the *proposition*. By default, this is `sympy.assumptions.global_assumptions`
    variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True`, `False`, or `None`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError** : *proposition* or *assumptions* is not valid logical expression.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError** : assumptions are inconsistent.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function evaluates the proposition to `True` or `False` if the truth value
    can be determined. If not, it returns `None`.
  prefs: []
  type: TYPE_NORMAL
- en: It should be discerned from [`refine()`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine") which, when applied to a proposition, simplifies
    the argument to symbolic `Boolean` instead of Python built-in `True`, `False`
    or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: ask(proposition)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* in global assumption context.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ask(proposition, assumptions)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* with respect to *assumptions* in global assumption
    context.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If the truth value cannot be determined, `None` will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`ValueError` is raised if assumptions are inconsistent.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Relations in assumptions are not implemented (yet), so the following will not
    give a meaningful result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It is however a work in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.assumptions.refine.refine`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine")'
  prefs: []
  type: TYPE_NORMAL
- en: Simplification using assumptions. Proposition is not reduced to `None` if the
    truth value cannot be determined.
  prefs: []
  type: TYPE_NORMAL
- en: '`ask`’s optional second argument should be a boolean expression involving assumptions
    about objects in *expr*. Valid values include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Q.integer(x)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Q.positive(x)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Q.integer(x) & Q.positive(x)`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: etc.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Q` is an object holding known predicates.'
  prefs: []
  type: TYPE_NORMAL
- en: See documentation for the logic module for a complete list of valid boolean
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: You can also define a context so you don’t have to pass that argument each time
    to function `ask()`. This is done by using the assuming context manager from module
    sympy.assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Ask](ask.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Assume](assume.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Refine](refine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Predicates](predicates.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On queries that involve symbolic coefficients, logical inference is used. Work
    on improving satisfiable function (sympy.logic.inference.satisfiable) should result
    in notable speed improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Logic inference used in one ask could be used to speed up further queries, and
    current system does not take advantage of this. For example, a truth maintenance
    system ([https://en.wikipedia.org/wiki/Truth_maintenance_system](https://en.wikipedia.org/wiki/Truth_maintenance_system))
    could be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Misc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more examples in the form of tests in the directory `sympy/assumptions/tests/`
  prefs: []
  type: TYPE_NORMAL
