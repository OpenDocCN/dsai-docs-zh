- en: NumPy 1.10.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.10.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.10.0-notes.html](https://numpy.org/doc/1.26/release/1.10.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.10.0-notes.html](https://numpy.org/doc/1.26/release/1.10.0-notes.html)
- en: This release supports Python 2.6 - 2.7 and 3.2 - 3.5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该版本支持 Python 2.6 - 2.7 和 3.2 - 3.5。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: numpy.distutils now supports parallel compilation via the –parallel/-j argument
    passed to setup.py build
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils 现在支持通过传递给 setup.py build 的 –parallel/-j 参数进行并行编译
- en: numpy.distutils now supports additional customization via site.cfg to control
    compilation parameters, i.e. runtime libraries, extra linking/compilation flags.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils 现在通过 site.cfg 支持额外的定制，以控制编译参数，即运行时库、额外的链接/编译标志。
- en: 'Addition of *np.linalg.multi_dot*: compute the dot product of two or more arrays
    in a single function call, while automatically selecting the fastest evaluation
    order.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加*np.linalg.multi_dot*：在单个函数调用中计算两个或多个数组的点积，同时自动选择最快的评估顺序。
- en: The new function *np.stack* provides a general interface for joining a sequence
    of arrays along a new axis, complementing *np.concatenate* for joining along an
    existing axis.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新函数*np.stack*提供了一个通用接口，用于沿着新轴连接一系列数组，为沿着现有轴连接提供了*np.concatenate*的补充。
- en: Addition of *nanprod* to the set of nanfunctions.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将*nanprod*添加到 nanfunctions 集合中。
- en: Support for the ‘@’ operator in Python 3.5.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 3.5 中支持‘@’运算符。
- en: Dropped Support
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再支持
- en: The _dotblas module has been removed. CBLAS Support is now in Multiarray.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _dotblas 模块已被移除。CBLAS 支持现在在 Multiarray 中。
- en: The testcalcs.py file has been removed.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: testcalcs.py 文件已被移除。
- en: The polytemplate.py file has been removed.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: polytemplate.py 文件已被移除。
- en: npy_PyFile_Dup and npy_PyFile_DupClose have been removed from npy_3kcompat.h.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_3kcompat.h 中的 npy_PyFile_Dup 和 npy_PyFile_DupClose 已被移除。
- en: splitcmdline has been removed from numpy/distutils/exec_command.py.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 numpy/distutils/exec_command.py 中移除了 splitcmdline。
- en: try_run and get_output have been removed from numpy/distutils/command/config.py
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 numpy/distutils/command/config.py 中移除了 try_run 和 get_output。
- en: The a._format attribute is no longer supported for array printing.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持 a._format 属性用于数组打印。
- en: Keywords `skiprows` and `missing` removed from np.genfromtxt.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 np.genfromtxt 中移除了关键字`skiprows`和`missing`。
- en: Keyword `old_behavior` removed from np.correlate.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 np.correlate 中移除了关键字`old_behavior`。
- en: Future Changes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变更
- en: In array comparisons like `arr1 == arr2`, many corner cases involving strings
    or structured dtypes that used to return scalars now issue `FutureWarning` or
    `DeprecationWarning`, and in the future will be change to either perform elementwise
    comparisons or raise an error.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类似`arr1 == arr2`的数组比较中，许多涉及字符串或结构化数据类型的边界情况，以前返回标量，现在会发出`FutureWarning`或`DeprecationWarning`，并且将来会更改为执行逐元素比较或引发错误。
- en: In `np.lib.split` an empty array in the result always had dimension `(0,)` no
    matter the dimensions of the array being split. In Numpy 1.11 that behavior will
    be changed so that the dimensions will be preserved. A `FutureWarning` for this
    change has been in place since Numpy 1.9 but, due to a bug, sometimes no warning
    was raised and the dimensions were already preserved.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`np.lib.split`中，结果中的空数组始终具有维度`(0,)`，无论被拆分的数组的维度如何。在 Numpy 1.11 中，这种行为将被更改，以便保留维度。自
    Numpy 1.9 起已经存在对此更改的`FutureWarning`，但由于 bug 的存在，有时不会发出警告，并且维度已经被保留。
- en: The SafeEval class will be removed in Numpy 1.11.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SafeEval 类将在 Numpy 1.11 中被移除。
- en: The alterdot and restoredot functions will be removed in Numpy 1.11.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: alterdot 和 restoredot 函数将在 Numpy 1.11 中被移除。
- en: See below for more details on these changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些更改的更多详细信息，请参见下文。
- en: Compatibility notes
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Default casting rule change
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认转换规则更改
- en: Default casting for inplace operations has changed to `'same_kind'`. For instance,
    if n is an array of integers, and f is an array of floats, then `n += f` will
    result in a `TypeError`, whereas in previous Numpy versions the floats would be
    silently cast to ints. In the unlikely case that the example code is not an actual
    bug, it can be updated in a backward compatible way by rewriting it as `np.add(n,
    f, out=n, casting='unsafe')`. The old `'unsafe'` default has been deprecated since
    Numpy 1.7.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就地操作的默认转换方式已更改为`'same_kind'`。例如，如果 n 是一个整数数组，f 是一个浮点数数组，那么`n += f`将导致`TypeError`，而在以前的
    Numpy 版本中，浮点数会被悄悄地转换为整数。在例子代码不是实际 bug 的情况下，可以通过将其重写为`np.add(n, f, out=n, casting='unsafe')`以向后兼容的方式进行更新。自
    Numpy 1.7 起，旧的`'unsafe'`默认已被弃用。
- en: numpy version string
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy 版本字符串
- en: The numpy version string for development builds has been changed from `x.y.z.dev-githash`
    to `x.y.z.dev0+githash` (note the +) in order to comply with PEP 440.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 开发版本的 numpy 版本字符串已从 `x.y.z.dev-githash` 更改为 `x.y.z.dev0+githash`（注意 +），以符合 PEP
    440。
- en: relaxed stride checking
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放松的步幅检查
- en: NPY_RELAXED_STRIDE_CHECKING is now true by default.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: NPY_RELAXED_STRIDE_CHECKING 现在默认为 true。
- en: 'UPDATE: In 1.10.2 the default value of NPY_RELAXED_STRIDE_CHECKING was changed
    to false for back compatibility reasons. More time is needed before it can be
    made the default. As part of the roadmap a deprecation of dimension changing views
    of f_contiguous not c_contiguous arrays was also added.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更新：在 1.10.2 中，NPY_RELAXED_STRIDE_CHECKING 的默认值已更改为 false，以保持向后兼容性。在可以将其设置为默认值之前需要更多时间。作为路线图的一部分，还添加了对
    f_contiguous 而不是 c_contiguous 数组的维度更改视图的弃用。
- en: Concatenation of 1d arrays along any but `axis=0` raises `IndexError`
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 沿任何轴除了 `axis=0` 外的 1d 数组的连接引发 `IndexError`
- en: Using axis != 0 has raised a DeprecationWarning since NumPy 1.7, it now raises
    an error.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 自 NumPy 1.7 起，使用 axis != 0 已引发 DeprecationWarning，现在引发错误。
- en: '*np.ravel*, *np.diagonal* and *np.diag* now preserve subtypes'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.ravel*、*np.diagonal* 和 *np.diag* 现在保留子类型'
- en: There was inconsistent behavior between *x.ravel()* and *np.ravel(x)*, as well
    as between *x.diagonal()* and *np.diagonal(x)*, with the methods preserving subtypes
    while the functions did not. This has been fixed and the functions now behave
    like the methods, preserving subtypes except in the case of matrices. Matrices
    are special cased for backward compatibility and still return 1-D arrays as before.
    If you need to preserve the matrix subtype, use the methods instead of the functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*x.ravel()* 和 *np.ravel(x)* 之间存在不一致的行为，以及 *x.diagonal()* 和 *np.diagonal(x)*
    之间也是如此，方法保留子类型，而函数不保留。这已经修复，函数现在的行为类似于方法，保留子类型，除了矩阵的情况。矩阵是为了向后兼容而特殊处理的，仍然像以前一样���回
    1-D 数组。如果需要保留矩阵子类型，请使用方法而不是函数。'
- en: '*rollaxis* and *swapaxes* always return a view'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*rollaxis* 和 *swapaxes* 总是返回一个视图'
- en: Previously, a view was returned except when no change was made in the order
    of the axes, in which case the input array was returned. A view is now returned
    in all cases.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，除非轴的顺序没有发生变化，否则返回一个视图，此时返回输入数组。现在在所有情况下都返回一个视图。
- en: '*nonzero* now returns base ndarrays'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*nonzero* 现在返回基本的 ndarrays'
- en: Previously, an inconsistency existed between 1-D inputs (returning a base ndarray)
    and higher dimensional ones (which preserved subclasses). Behavior has been unified,
    and the return will now be a base ndarray. Subclasses can still override this
    behavior by providing their own *nonzero* method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在 1-D 输入（返回一个基本的 ndarray）和更高维度的输入之间存在不一致性（保留子类）。行为已统一，现在返回将是一个基本的 ndarray。子类仍然可以通过提供自己的
    *nonzero* 方法来覆盖此行为。
- en: C API
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: The changes to *swapaxes* also apply to the *PyArray_SwapAxes* C function, which
    now returns a view in all cases.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *swapaxes* 的更改也适用于 *PyArray_SwapAxes* C 函数，现在在所有情况下都返回一个视图。
- en: The changes to *nonzero* also apply to the *PyArray_Nonzero* C function, which
    now returns a base ndarray in all cases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *nonzero* 的更改也适用于 *PyArray_Nonzero* C 函数，现在在所有情况下都返回一个基本的 ndarray。
- en: The dtype structure (PyArray_Descr) has a new member at the end to cache its
    hash value. This shouldn’t affect any well-written applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: dtype 结构（PyArray_Descr）在末尾有一个新成员来缓存其哈希值。这不应影响任何良好编写的应用程序。
- en: The change to the concatenation function DeprecationWarning also affects PyArray_ConcatenateArrays,
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对连接函数 DeprecationWarning 的更改也影响 PyArray_ConcatenateArrays，
- en: recarray field return types
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: recarray 字段返回类型
- en: Previously the returned types for recarray fields accessed by attribute and
    by index were inconsistent, and fields of string type were returned as chararrays.
    Now, fields accessed by either attribute or indexing will return an ndarray for
    fields of non-structured type, and a recarray for fields of structured type. Notably,
    this affect recarrays containing strings with whitespace, as trailing whitespace
    is trimmed from chararrays but kept in ndarrays of string type. Also, the dtype.type
    of nested structured fields is now inherited.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，通过属性和索引访问的 recarray 字段的返回类型不一致，并且字符串类型的字段被返回为 chararrays。现在，通过属性或索引访问的字段将为非结构化类型的字段返回一个
    ndarray，并为结构化类型的字段返回一个 recarray。值得注意的是，这会影响包含带有空格的字符串的 recarrays，因为 chararrays
    会删除尾随空格，而字符串类型的 ndarrays 会保留尾随空格。此外，嵌套结构字段的 dtype.type 现在是继承的。
- en: recarray views
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: recarray 视图
- en: Viewing an ndarray as a recarray now automatically converts the dtype to np.record.
    See new record array documentation. Additionally, viewing a recarray with a non-structured
    dtype no longer converts the result’s type to ndarray - the result will remain
    a recarray.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将ndarray视为recarray现在会自动将dtype转换为np.record。请参阅新的记录数组文档。此外，查看具有非结构化dtype的recarray不再将结果的类型转换为ndarray
    - 结果将保持为recarray。
- en: ‘out’ keyword argument of ufuncs now accepts tuples of arrays
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufuncs的‘out’关键字参数现在接受数组元组
- en: When using the ‘out’ keyword argument of a ufunc, a tuple of arrays, one per
    ufunc output, can be provided. For ufuncs with a single output a single array
    is also a valid ‘out’ keyword argument. Previously a single array could be provided
    in the ‘out’ keyword argument, and it would be used as the first output for ufuncs
    with multiple outputs, is deprecated, and will result in a *DeprecationWarning*
    now and an error in the future.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ufunc的‘out’关键字参数时，可以提供一个数组元组，每个ufunc输出一个数组。对于具有单个输出的ufunc，单个数组也是有效的‘out’关键字参数。以前可以在‘out’关键字参数中提供单个数组，并且它将用作具有多个输出的ufunc的第一个输出，现在已被弃用，并且现在会导致*DeprecationWarning*，并且将来会导致错误。
- en: byte-array indices now raises an IndexError
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用字节数组索引现在会引发IndexError
- en: Indexing an ndarray using a byte-string in Python 3 now raises an IndexError
    instead of a ValueError.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中使用字节字符串对ndarray进行索引现在会引发IndexError而不是ValueError。
- en: Masked arrays containing objects with arrays
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含具有数组的对象的掩码数组
- en: For such (rare) masked arrays, getting a single masked item no longer returns
    a corrupted masked array, but a fully masked version of the item.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种（罕见的）掩码数组，获取单个掩码项不再返回损坏的掩码数组，而是完全掩码的项。
- en: Median warns and returns nan when invalid values are encountered
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当遇到无效值时，中位数会发出警告并返回nan
- en: Similar to mean, median and percentile now emits a Runtime warning and returns
    *NaN* in slices where a *NaN* is present. To compute the median or percentile
    while ignoring invalid values use the new *nanmedian* or *nanpercentile* functions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与mean、median和percentile类似，现在在存在*NaN*的切片中发出运行时警告并返回*NaN*。要计算中位数或百分位数而忽略无效值，请使用新的*nanmedian*或*nanpercentile*函数。
- en: Functions available from numpy.ma.testutils have changed
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy.ma.testutils中可用的函数已更改
- en: All functions from numpy.testing were once available from numpy.ma.testutils
    but not all of them were redefined to work with masked arrays. Most of those functions
    have now been removed from numpy.ma.testutils with a small subset retained in
    order to preserve backward compatibility. In the long run this should help avoid
    mistaken use of the wrong functions, but it may cause import problems for some.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有来自numpy.testing的函数曾经都可以从numpy.ma.testutils中获得，但并非所有这些函数都重新定义为与掩码数组一起使用。现在已从numpy.ma.testutils中删除了大多数这些函数，仅保留了一小部分以保持向后兼容性。从长远来看，这应该有助于避免错误使用错误的函数，但这可能会导致某些导入问题。
- en: New Features
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Reading extra flags from site.cfg
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从site.cfg读取额外的标志
- en: 'Previously customization of compilation of dependency libraries and numpy itself
    was only accomblishable via code changes in the distutils package. Now numpy.distutils
    reads in the following extra flags from each group of the *site.cfg*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，对依赖库和numpy本身的编译的自定义仅通过在distutils包中进行代码更改才能实现。现在，numpy.distutils从每个*site.cfg*组中读取以下额外的标志：
- en: '`runtime_library_dirs/rpath`, sets runtime library directories to override'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime_library_dirs/rpath`，设置运行时库目录以覆盖'
- en: '`LD_LIBRARY_PATH`'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LD_LIBRARY_PATH`'
- en: '`extra_compile_args`, add extra flags to the compilation of sources'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_compile_args`，为源代码编译添加额外的标志'
- en: '`extra_link_args`, add extra flags when linking libraries'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_link_args`，在链接库时添加额外的标志'
- en: This should, at least partially, complete user customization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该至少部分完成用户自定义。
- en: '*np.cbrt* to compute cube root for real floats'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.cbrt*用于计算实浮点数的立方根'
- en: '*np.cbrt* wraps the C99 cube root function *cbrt*. Compared to *np.power(x,
    1./3.)* it is well defined for negative real floats and a bit faster.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.cbrt*包装了C99立方根函数*cbrt*。与*np.power(x, 1./3.)*相比，它对负实浮点数有明确定义，并且速度稍��。'
- en: numpy.distutils now allows parallel compilation
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy.distutils现在允许并行编译
- en: By passing *–parallel=n* or *-j n* to *setup.py build* the compilation of extensions
    is now performed in *n* parallel processes. The parallelization is limited to
    files within one extension so projects using Cython will not profit because it
    builds extensions from single files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将*–parallel=n*或*-j n*传递给*setup.py build*，现在可以在*n*个并行进程中执行扩展的编译。并行化仅限于一个扩展内的文件，因此使用Cython的项目不会受益，因为它从单个文件构建扩展。
- en: '*genfromtxt* has a new `max_rows` argument'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*genfromtxt*具有新的`max_rows`参数'
- en: A `max_rows` argument has been added to *genfromtxt* to limit the number of
    rows read in a single call. Using this functionality, it is possible to read in
    multiple arrays stored in a single file by making repeated calls to the function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*genfromtxt*添加了`max_rows`参数，以限制单次调用中读取的行数。使用此功能，可以通过多次调用该函数来读取存储在单个文件中的多个数组。'
- en: New function *np.broadcast_to* for invoking array broadcasting
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于调用数组广播的新函数*np.broadcast_to*
- en: '*np.broadcast_to* manually broadcasts an array to a given shape according to
    numpy’s broadcasting rules. The functionality is similar to broadcast_arrays,
    which in fact has been rewritten to use broadcast_to internally, but only a single
    array is necessary.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.broadcast_to*手动将数组广播到给定形状，符合numpy的广播规则。该功能类似于broadcast_arrays，实际上已经重写为在内部使用broadcast_to，但只需要一个数组。'
- en: New context manager *clear_and_catch_warnings* for testing warnings
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于测试警告的新上下文管理器*clear_and_catch_warnings*
- en: When Python emits a warning, it records that this warning has been emitted in
    the module that caused the warning, in a module attribute `__warningregistry__`.
    Once this has happened, it is not possible to emit the warning again, unless you
    clear the relevant entry in `__warningregistry__`. This makes is hard and fragile
    to test warnings, because if your test comes after another that has already caused
    the warning, you will not be able to emit the warning or test it. The context
    manager `clear_and_catch_warnings` clears warnings from the module registry on
    entry and resets them on exit, meaning that warnings can be re-raised.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python发出警告时，它会记录该警告已在引发警告的模块中发出，记录在模块属性`__warningregistry__`中。一旦发生这种情况，除非清除`__warningregistry__`中的相关条目，否则不可能再次发出警告。这使得测试警告变得困难且脆弱，因为如果您的测试在已经引发警告的另一个测试之后进行，您将无法发出警告或测试它。上下文管理器`clear_and_catch_warnings`在进入时清除模块注册表中的警告，并在退出时重置它们，这意味着警告可以被重新引发。
- en: '*cov* has new `fweights` and `aweights` arguments'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*cov*具有新的`fweights`和`aweights`参数'
- en: The `fweights` and `aweights` arguments add new functionality to covariance
    calculations by applying two types of weighting to observation vectors. An array
    of `fweights` indicates the number of repeats of each observation vector, and
    an array of `aweights` provides their relative importance or probability.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`fweights`和`aweights`参数通过对观测向量应用两种类型的加权来为协方差计算添加新功能。`fweights`数组指示每个观测向量的重复次数，而`aweights`数组提供它们的相对重要性或概率。'
- en: Support for the ‘@’ operator in Python 3.5+
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 3.5+中对‘@’运算符的支持
- en: Python 3.5 adds support for a matrix multiplication operator ‘@’ proposed in
    PEP465\. Preliminary support for that has been implemented, and an equivalent
    function `matmul` has also been added for testing purposes and use in earlier
    Python versions. The function is preliminary and the order and number of its optional
    arguments can be expected to change.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.5添加了对在PEP465中提出的矩阵乘法运算符‘@’的支持。已经实现了初步支持，并且还添加了一个等效函数`matmul`用于测试目的和在较早的Python版本中使用。该函数是初步的，其可选参数的顺序和数量可能会发生变化。
- en: New argument `norm` to fft functions
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fft函数的新参数`norm`
- en: The default normalization has the direct transforms unscaled and the inverse
    transforms are scaled by \(1/n\). It is possible to obtain unitary transforms
    by setting the keyword argument `norm` to `"ortho"` (default is *None*) so that
    both direct and inverse transforms will be scaled by \(1/\\sqrt{n}\).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认归一化使直接变换不缩放，而逆变换按\(1/n\)缩放。通过将关键字参数`norm`设置为`"ortho"`（默认为*None*），可以获得单位变换，这样直接和逆变换都将按\(1/\\sqrt{n}\)缩放。
- en: Improvements
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '*np.digitize* using binary search'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.digitize*使用二分查找'
- en: '*np.digitize* is now implemented in terms of *np.searchsorted*. This means
    that a binary search is used to bin the values, which scales much better for larger
    number of bins than the previous linear search. It also removes the requirement
    for the input array to be 1-dimensional.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.digitize*现在是基于*np.searchsorted*实现的。这意味着使用二分搜索对值进行分箱，对于较大数量的箱，比以前的线性搜索更好。它还消除了输入数组必须是1维的要求。'
- en: '*np.poly* now casts integer inputs to float'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.poly*现在将整数输入转换为浮点数'
- en: '*np.poly* will now cast 1-dimensional input arrays of integer type to double
    precision floating point, to prevent integer overflow when computing the monic
    polynomial. It is still possible to obtain higher precision results by passing
    in an array of object type, filled e.g. with Python ints.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.poly* 现在会将整数类型的一维输入数组转换为双精度浮点数，以防止计算单项式时整数溢出。通过传入一个填充了 Python 整数的对象类型数组，仍然可以获得更高精度的结果。'
- en: '*np.interp* can now be used with periodic functions'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.interp* 现在可以与周期函数一起使用'
- en: '*np.interp* now has a new parameter *period* that supplies the period of the
    input data *xp*. In such case, the input data is properly normalized to the given
    period and one end point is added to each extremity of *xp* in order to close
    the previous and the next period cycles, resulting in the correct interpolation
    behavior.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.interp* 现在有一个新参数 *period*，用于提供输入数据 *xp* 的周期。在这种情况下，输入数据将被正确归一化到给定的周期，并且在
    *xp* 的每个极端处添加一个端点，以关闭前一个和下一个周期循环，从而实现正确的插值行为。'
- en: '*np.pad* supports more input types for `pad_width` and `constant_values`'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.pad* 支持更多输入类型的 `pad_width` 和 `constant_values`。'
- en: '`constant_values` parameters now accepts NumPy arrays and float values. NumPy
    arrays are supported as input for `pad_width`, and an exception is raised if its
    values are not of integral type.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`constant_values` 参数现在接受 NumPy 数组和浮点值。NumPy 数组被支持作为 `pad_width` 的输入，并且如果其值不是整数类型，则会引发异常。'
- en: '*np.argmax* and *np.argmin* now support an `out` argument'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.argmax* 和 *np.argmin* 现在支持 `out` 参数。'
- en: The `out` parameter was added to *np.argmax* and *np.argmin* for consistency
    with *ndarray.argmax* and *ndarray.argmin*. The new parameter behaves exactly
    as it does in those methods.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 *ndarray.argmax* 和 *ndarray.argmin* 保持一致，*np.argmax* 和 *np.argmin* 添加了 `out`
    参数。新参数的行为与这些方法中的行为完全相同。
- en: More system C99 complex functions detected and used
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测并使用更多系统 C99 复数函数
- en: All of the functions `in complex.h` are now detected. There are new fallback
    implementations of the following functions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 `in complex.h` 中的函数现在都被检测到。以下函数有新的回退实现。
- en: npy_ctan,
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_ctan，
- en: npy_cacos, npy_casin, npy_catan
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cacos、npy_casin、npy_catan
- en: npy_ccosh, npy_csinh, npy_ctanh,
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_ccosh、npy_csinh、npy_ctanh，
- en: npy_cacosh, npy_casinh, npy_catanh
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_cacosh、npy_casinh、npy_catanh
- en: As a result of these improvements, there will be some small changes in returned
    values, especially for corner cases.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些改进，返回值将会有一些小的变化，特别是对于边界情况。
- en: '*np.loadtxt* support for the strings produced by the `float.hex` method'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.loadtxt* 支持由 `float.hex` 方法生成的字符串'
- en: The strings produced by `float.hex` look like `0x1.921fb54442d18p+1`, so this
    is not the hex used to represent unsigned integer types.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `float.hex` 生成的字符串看起来��� `0x1.921fb54442d18p+1`，因此这不是用于表示无符号整数类型的十六进制。
- en: '*np.isclose* properly handles minimal values of integer dtypes'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.isclose* 现在正确处理整数 dtypes 的最小值。'
- en: In order to properly handle minimal values of integer types, *np.isclose* will
    now cast to the float dtype during comparisons. This aligns its behavior with
    what was provided by *np.allclose*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确处理整数类型的最小值，*np.isclose* 现在在比较时会转换为浮点数 dtype。这使其行为与 *np.allclose* 提供的行为一致。
- en: '*np.allclose* uses *np.isclose* internally.'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.allclose* 在内部使用 *np.isclose*。'
- en: '*np.allclose* now uses *np.isclose* internally and inherits the ability to
    compare NaNs as equal by setting `equal_nan=True`. Subclasses, such as *np.ma.MaskedArray*,
    are also preserved now.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.allclose* 现在在内部使用 *np.isclose*，并通过设置 `equal_nan=True` 继承了比较 NaNs 相等的能力。子类，如
    *np.ma.MaskedArray*，现在也被保留。'
- en: '*np.genfromtxt* now handles large integers correctly'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.genfromtxt* 现在可以正确处理大整数。'
- en: '*np.genfromtxt* now correctly handles integers larger than `2**31-1` on 32-bit
    systems and larger than `2**63-1` on 64-bit systems (it previously crashed with
    an `OverflowError` in these cases). Integers larger than `2**63-1` are converted
    to floating-point values.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.genfromtxt* 现在可以在 32 位系统上正确处理大于 `2**31-1` 的整数，在 64 位系统上可以处理大于 `2**63-1`
    的整数（在这些情况下，它以前会崩溃并显示 `OverflowError`）。大于 `2**63-1` 的整数将被转换为浮点值。'
- en: '*np.load*, *np.save* have pickle backward compatibility flags'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.load*、*np.save* 现在具有 pickle 向后兼容标志。'
- en: The functions *np.load* and *np.save* have additional keyword arguments for
    controlling backward compatibility of pickled Python objects. This enables Numpy
    on Python 3 to load npy files containing object arrays that were generated on
    Python 2.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 *np.load* 和 *np.save* 现在具有用于控制 pickled Python 对象向后兼容性的额外关键字参数。这使得 Python
    3 上的 Numpy 能够加载包含在 Python 2 上生成的对象数组的 npy 文件。
- en: MaskedArray support for more complicated base classes
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MaskedArray 支持更复杂的基类
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, setting and getting elements and ranges will respect baseclass
    overrides of `__setitem__` and `__getitem__`, and arithmetic will respect overrides
    of `__add__`, `__sub__`, etc.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 内置假设基类的行为类似于普通数组正在被移除。特别是，设置和获取元素和范围将尊重`__setitem__`和`__getitem__`的基类覆盖，算术将尊重`__add__`，`__sub__`等的覆盖。
- en: Changes
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: dotblas functionality moved to multiarray
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: dotblas功能移至multiarray
- en: The cblas versions of dot, inner, and vdot have been integrated into the multiarray
    module. In particular, vdot is now a multiarray function, which it was not before.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: dot、inner和vdot的cblas版本已集成到multiarray模块中。特别是，vdot现在是一个multiarray函数，以前不是。
- en: stricter check of gufunc signature compliance
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更严格检查gufunc签名的一致性
- en: 'Inputs to generalized universal functions are now more strictly checked against
    the function’s signature: all core dimensions are now required to be present in
    input arrays; core dimensions with the same label must have the exact same size;
    and output core dimension’s must be specified, either by a same label input core
    dimension or by a passed-in output array.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 广义通用函数的输入现在更严格地根据函数的签名进行检查：所有核心维度现在必须存在于输入数组中；具有相同标签的核心维度必须具有完全相同的大小；并且输出核心维度必须被指定，可以通过相同标签的输入核心维度或通过传入的输出数组来指定。
- en: views returned from *np.einsum* are writeable
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.einsum*返回的视图是可写的'
- en: Views returned by *np.einsum* will now be writeable whenever the input array
    is writeable.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.einsum*返回的视图现在只要输入数组可写，就是可写的。'
- en: '*np.argmin* skips NaT values'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.argmin*跳过NaT值'
- en: '*np.argmin* now skips NaT values in datetime64 and timedelta64 arrays, making
    it consistent with *np.min*, *np.argmax* and *np.max*.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.argmin*现在跳过datetime64和timedelta64数组中的NaT值，使其与*np.min*，*np.argmax*和*np.max*一致。'
- en: Deprecations
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Array comparisons involving strings or structured dtypes
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 涉及字符串或结构化dtype的数组比较
- en: 'Normally, comparison operations on arrays perform elementwise comparisons and
    return arrays of booleans. But in some corner cases, especially involving strings
    are structured dtypes, NumPy has historically returned a scalar instead. For example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数组上的比较操作执行逐元素比较并返回布尔数组。但在一些边缘情况下，特别是涉及字符串或结构化dtype时，NumPy历史上返回标量而不是数组。例如：
- en: '[PRE0]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Continuing work started in 1.9, in 1.10 these comparisons will now raise `FutureWarning`
    or `DeprecationWarning`, and in the future they will be modified to behave more
    consistently with other comparison operations, e.g.:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.9版本开始的工作继续进行，在1.10版本中，这些比较现在将引发`FutureWarning`或`DeprecationWarning`，并且将来它们将被修改以更一致地与其他比较操作行为，例如：
- en: '[PRE1]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: SafeEval
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SafeEval
- en: The SafeEval class in numpy/lib/utils.py is deprecated and will be removed in
    the next release.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/lib/utils.py中的SafeEval类已被弃用，并将在下一个版本中删除。
- en: alterdot, restoredot
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: alterdot，restoredot
- en: The alterdot and restoredot functions no longer do anything, and are deprecated.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`alterdot`和`restoredot`函数不再起作用，并已被弃用。'
- en: pkgload, PackageLoader
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pkgload，PackageLoader
- en: These ways of loading packages are now deprecated.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些加载包的方式现在已被弃用。
- en: bias, ddof arguments to corrcoef
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bias`，`ddof`参数对`corrcoef`的影响'
- en: The values for the `bias` and `ddof` arguments to the `corrcoef` function canceled
    in the division implied by the correlation coefficient and so had no effect on
    the returned values.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`corrcoef`函数的`bias`和`ddof`参数的值在相关系数所暗示的除法中被取消，因此对返回值没有影响。'
- en: We now deprecate these arguments to `corrcoef` and the masked array version
    `ma.corrcoef`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不再支持`corrcoef`函数和掩码数组版本`ma.corrcoef`中的这些参数。
- en: Because we are deprecating the `bias` argument to `ma.corrcoef`, we also deprecate
    the use of the `allow_masked` argument as a positional argument, as its position
    will change with the removal of `bias`. `allow_masked` will in due course become
    a keyword-only argument.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在弃用`ma.corrcoef`中的`bias`参数，所以我们也弃用`allow_masked`参数作为位置参数的使用，因为其位置将随着`bias`的移除而改变。`allow_masked`将在适当的时候成为仅限关键字参数。
- en: dtype string representation changes
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: dtype字符串表示更改
- en: Since 1.6, creating a dtype object from its string representation, e.g. `'f4'`,
    would issue a deprecation warning if the size did not correspond to an existing
    type, and default to creating a dtype of the default size for the type. Starting
    with this release, this will now raise a `TypeError`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.6版本开始，从字符串表示中创建dtype对象，例如`'f4'`，如果大小与现有类型不对应，则会发出弃用警告，并默认创建与该类型的默认大小相对应的dtype。从此版本开始，这将引发`TypeError`。
- en: The only exception is object dtypes, where both `'O4'` and `'O8'` will still
    issue a deprecation warning. This platform-dependent representation will raise
    an error in the next release.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的例外是对象数据类型，其中`'O4'`和`'O8'`仍会发出弃用警告。这种平台相关的表示将在下一个版本中引发错误。
- en: In preparation for this upcoming change, the string representation of an object
    dtype, i.e. `np.dtype(object).str`, no longer includes the item size, i.e. will
    return `'|O'` instead of `'|O4'` or `'|O8'` as before.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对即将到来的变化，对象数据类型的字符串表示，即`np.dtype(object).str`，不再包括项目大小，即将返回`'|O'`而不是以前的`'|O4'`或`'|O8'`。
- en: Highlights
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: numpy.distutils now supports parallel compilation via the –parallel/-j argument
    passed to setup.py build
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils现在支持通过传递给setup.py build的--parallel/-j参数进行并行编译。
- en: numpy.distutils now supports additional customization via site.cfg to control
    compilation parameters, i.e. runtime libraries, extra linking/compilation flags.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils现在通过site.cfg支持额外的定制，以控制编译参数，即运行时库，额外的链接/编译标志。
- en: 'Addition of *np.linalg.multi_dot*: compute the dot product of two or more arrays
    in a single function call, while automatically selecting the fastest evaluation
    order.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加*np.linalg.multi_dot*：在单个函数调用中计算两个或多个数组的点积，同时自动选择最快的计算顺序。
- en: The new function *np.stack* provides a general interface for joining a sequence
    of arrays along a new axis, complementing *np.concatenate* for joining along an
    existing axis.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新函数*np.stack*提供了一个通用接口，用于沿着新轴连接一系列数组，为沿着现有轴连接的*np.concatenate*提供补充。
- en: Addition of *nanprod* to the set of nanfunctions.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nanprod*已添加到nanfunctions集合中。'
- en: Support for the ‘@’ operator in Python 3.5.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持Python 3.5中的‘@’运算符。
- en: Dropped Support
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再支持
- en: The _dotblas module has been removed. CBLAS Support is now in Multiarray.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _dotblas模块已被移除。CBLAS支持现在在Multiarray中。
- en: The testcalcs.py file has been removed.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: testcalcs.py文件已被移除。
- en: The polytemplate.py file has been removed.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: polytemplate.py文件已被移除。
- en: npy_PyFile_Dup and npy_PyFile_DupClose have been removed from npy_3kcompat.h.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npy_PyFile_Dup和npy_PyFile_DupClose已从npy_3kcompat.h中移除。
- en: splitcmdline has been removed from numpy/distutils/exec_command.py.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从numpy/distutils/exec_command.py中移除了splitcmdline。
- en: try_run and get_output have been removed from numpy/distutils/command/config.py
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/distutils/command/config.py中的try_run和get_output已被移除。
- en: The a._format attribute is no longer supported for array printing.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持a._format属性用于数组打印。
- en: Keywords `skiprows` and `missing` removed from np.genfromtxt.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从np.genfromtxt中移除了关键字`skiprows`和`missing`。
- en: Keyword `old_behavior` removed from np.correlate.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从np.correlate中移除了关键字`old_behavior`。
- en: Future Changes
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的更改
- en: In array comparisons like `arr1 == arr2`, many corner cases involving strings
    or structured dtypes that used to return scalars now issue `FutureWarning` or
    `DeprecationWarning`, and in the future will be change to either perform elementwise
    comparisons or raise an error.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类似`arr1 == arr2`的数组比较中，许多涉及字符串或结构化数据类型的边缘情况，以前返回标量，现在会发出`FutureWarning`或`DeprecationWarning`，并且将来会更改为执行逐元素比较或引发错误。
- en: In `np.lib.split` an empty array in the result always had dimension `(0,)` no
    matter the dimensions of the array being split. In Numpy 1.11 that behavior will
    be changed so that the dimensions will be preserved. A `FutureWarning` for this
    change has been in place since Numpy 1.9 but, due to a bug, sometimes no warning
    was raised and the dimensions were already preserved.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`np.lib.split`中，结果中的空数组始终具有维度`(0,)`，无论被拆分的数组的维度如何。在Numpy 1.11中，此行为将更改为保留维度。自Numpy
    1.9以来，已经对此更改进行了`FutureWarning`，但由于错误，有时不会发出警告，并且维度已经被保留。
- en: The SafeEval class will be removed in Numpy 1.11.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SafeEval类将在Numpy 1.11中被移除。
- en: The alterdot and restoredot functions will be removed in Numpy 1.11.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: alterdot和restoredot函数将在Numpy 1.11中被移除。
- en: See below for more details on these changes.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些更改的更多详细信息，请参见下文。
- en: Compatibility notes
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Default casting rule change
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认转换规则更改
- en: Default casting for inplace operations has changed to `'same_kind'`. For instance,
    if n is an array of integers, and f is an array of floats, then `n += f` will
    result in a `TypeError`, whereas in previous Numpy versions the floats would be
    silently cast to ints. In the unlikely case that the example code is not an actual
    bug, it can be updated in a backward compatible way by rewriting it as `np.add(n,
    f, out=n, casting='unsafe')`. The old `'unsafe'` default has been deprecated since
    Numpy 1.7.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 就地操作的默认转换已更改为 `'same_kind'`。例如，如果 n 是整数数组，f 是浮点数数组，则 `n += f` 将导致 `TypeError`，而在以前的
    Numpy 版本中，浮点数会被悄悄地转换为整数。在不太可能的情况下，如果示例代码不是实际错误，则可以通过将其重写为 `np.add(n, f, out=n,
    casting='unsafe')` 以向后兼容的方式进行更新。自 Numpy 1.7 以来，旧的 `'unsafe'` 默认已被弃用。
- en: numpy version string
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy 版本字符串
- en: The numpy version string for development builds has been changed from `x.y.z.dev-githash`
    to `x.y.z.dev0+githash` (note the +) in order to comply with PEP 440.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合 PEP 440，开发版本的 numpy 版本字符串已从 `x.y.z.dev-githash` 更改为 `x.y.z.dev0+githash`（注意加号）。
- en: relaxed stride checking
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放松的步幅检查
- en: NPY_RELAXED_STRIDE_CHECKING is now true by default.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: NPY_RELAXED_STRIDE_CHECKING 现在默认为 true。
- en: 'UPDATE: In 1.10.2 the default value of NPY_RELAXED_STRIDE_CHECKING was changed
    to false for back compatibility reasons. More time is needed before it can be
    made the default. As part of the roadmap a deprecation of dimension changing views
    of f_contiguous not c_contiguous arrays was also added.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 更新：在 1.10.2 中，NPY_RELAXED_STRIDE_CHECKING 的默认值已更改为 false，出于向后兼容性的原因。在可以将其设置为默认值之前需要更多时间。作为路线图的一部分，还添加了对
    f_contiguous 而不是 c_contiguous 数组的维度更改视图的弃用。
- en: Concatenation of 1d arrays along any but `axis=0` raises `IndexError`
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 沿任何轴向连接 1d 数组，除了 `axis=0` 会引发 `IndexError`
- en: Using axis != 0 has raised a DeprecationWarning since NumPy 1.7, it now raises
    an error.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 自 NumPy 1.7 以来，使用 axis != 0 已引发 DeprecationWarning，现在引发错误。
- en: '*np.ravel*, *np.diagonal* and *np.diag* now preserve subtypes'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.ravel*、*np.diagonal* 和 *np.diag* 现在保留子类型'
- en: There was inconsistent behavior between *x.ravel()* and *np.ravel(x)*, as well
    as between *x.diagonal()* and *np.diagonal(x)*, with the methods preserving subtypes
    while the functions did not. This has been fixed and the functions now behave
    like the methods, preserving subtypes except in the case of matrices. Matrices
    are special cased for backward compatibility and still return 1-D arrays as before.
    If you need to preserve the matrix subtype, use the methods instead of the functions.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*x.ravel()* 和 *np.ravel(x)* 之间以及 *x.diagonal()* 和 *np.diagonal(x)* 之间存在不一致的行为，方法保留子类型，而函数则不保留。这已经修复，函数现在的行为类似于方法，保留子类型，除了矩阵的情况。矩阵是为了向后兼容而特殊处理的，仍然像以前一样返回
    1-D 数组。如果需要保留矩阵子类型，请使用方法而不是函数。'
- en: '*rollaxis* and *swapaxes* always return a view'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*rollaxis* 和 *swapaxes* 总是返回视图'
- en: Previously, a view was returned except when no change was made in the order
    of the axes, in which case the input array was returned. A view is now returned
    in all cases.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，除非轴的顺序没有发生变化，否则返回视图，此时将返回输入数组。现在在所有情况下都返回视图。
- en: '*nonzero* now returns base ndarrays'
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*nonzero* 现在返回基本的 ndarrays'
- en: Previously, an inconsistency existed between 1-D inputs (returning a base ndarray)
    and higher dimensional ones (which preserved subclasses). Behavior has been unified,
    and the return will now be a base ndarray. Subclasses can still override this
    behavior by providing their own *nonzero* method.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在 1-D 输入（返回基本 ndarray）和更高维度输入之间存在不一致性（保留子类）。行为已统一，现在返回将是基本 ndarray。子类仍然可以通过提供自己的
    *nonzero* 方法来覆盖此行为。
- en: C API
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: The changes to *swapaxes* also apply to the *PyArray_SwapAxes* C function, which
    now returns a view in all cases.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *swapaxes* 的更改也适用于 *PyArray_SwapAxes* C 函数，现在在所有情况下返回视图。
- en: The changes to *nonzero* also apply to the *PyArray_Nonzero* C function, which
    now returns a base ndarray in all cases.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对 *nonzero* 的更改也适用于 *PyArray_Nonzero* C 函数，现在在所有情况下返回基本 ndarray。
- en: The dtype structure (PyArray_Descr) has a new member at the end to cache its
    hash value. This shouldn’t affect any well-written applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: dtype 结构（PyArray_Descr）在末尾有一个新成员来缓存其哈希值。这不应影响任何良好编写的应用程序。
- en: The change to the concatenation function DeprecationWarning also affects PyArray_ConcatenateArrays,
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拼接函数的更改 DeprecationWarning 也影响了 PyArray_ConcatenateArrays，
- en: recarray field return types
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: recarray 字段返回类型
- en: Previously the returned types for recarray fields accessed by attribute and
    by index were inconsistent, and fields of string type were returned as chararrays.
    Now, fields accessed by either attribute or indexing will return an ndarray for
    fields of non-structured type, and a recarray for fields of structured type. Notably,
    this affect recarrays containing strings with whitespace, as trailing whitespace
    is trimmed from chararrays but kept in ndarrays of string type. Also, the dtype.type
    of nested structured fields is now inherited.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: recarray views
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Viewing an ndarray as a recarray now automatically converts the dtype to np.record.
    See new record array documentation. Additionally, viewing a recarray with a non-structured
    dtype no longer converts the result’s type to ndarray - the result will remain
    a recarray.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: ‘out’ keyword argument of ufuncs now accepts tuples of arrays
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the ‘out’ keyword argument of a ufunc, a tuple of arrays, one per
    ufunc output, can be provided. For ufuncs with a single output a single array
    is also a valid ‘out’ keyword argument. Previously a single array could be provided
    in the ‘out’ keyword argument, and it would be used as the first output for ufuncs
    with multiple outputs, is deprecated, and will result in a *DeprecationWarning*
    now and an error in the future.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: byte-array indices now raises an IndexError
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indexing an ndarray using a byte-string in Python 3 now raises an IndexError
    instead of a ValueError.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Masked arrays containing objects with arrays
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For such (rare) masked arrays, getting a single masked item no longer returns
    a corrupted masked array, but a fully masked version of the item.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Median warns and returns nan when invalid values are encountered
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to mean, median and percentile now emits a Runtime warning and returns
    *NaN* in slices where a *NaN* is present. To compute the median or percentile
    while ignoring invalid values use the new *nanmedian* or *nanpercentile* functions.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Functions available from numpy.ma.testutils have changed
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All functions from numpy.testing were once available from numpy.ma.testutils
    but not all of them were redefined to work with masked arrays. Most of those functions
    have now been removed from numpy.ma.testutils with a small subset retained in
    order to preserve backward compatibility. In the long run this should help avoid
    mistaken use of the wrong functions, but it may cause import problems for some.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Default casting rule change
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Default casting for inplace operations has changed to `'same_kind'`. For instance,
    if n is an array of integers, and f is an array of floats, then `n += f` will
    result in a `TypeError`, whereas in previous Numpy versions the floats would be
    silently cast to ints. In the unlikely case that the example code is not an actual
    bug, it can be updated in a backward compatible way by rewriting it as `np.add(n,
    f, out=n, casting='unsafe')`. The old `'unsafe'` default has been deprecated since
    Numpy 1.7.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: numpy version string
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The numpy version string for development builds has been changed from `x.y.z.dev-githash`
    to `x.y.z.dev0+githash` (note the +) in order to comply with PEP 440.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: relaxed stride checking
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NPY_RELAXED_STRIDE_CHECKING is now true by default.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'UPDATE: In 1.10.2 the default value of NPY_RELAXED_STRIDE_CHECKING was changed
    to false for back compatibility reasons. More time is needed before it can be
    made the default. As part of the roadmap a deprecation of dimension changing views
    of f_contiguous not c_contiguous arrays was also added.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation of 1d arrays along any but `axis=0` raises `IndexError`
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using axis != 0 has raised a DeprecationWarning since NumPy 1.7, it now raises
    an error.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '*np.ravel*, *np.diagonal* and *np.diag* now preserve subtypes'
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There was inconsistent behavior between *x.ravel()* and *np.ravel(x)*, as well
    as between *x.diagonal()* and *np.diagonal(x)*, with the methods preserving subtypes
    while the functions did not. This has been fixed and the functions now behave
    like the methods, preserving subtypes except in the case of matrices. Matrices
    are special cased for backward compatibility and still return 1-D arrays as before.
    If you need to preserve the matrix subtype, use the methods instead of the functions.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '*rollaxis* and *swapaxes* always return a view'
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, a view was returned except when no change was made in the order
    of the axes, in which case the input array was returned. A view is now returned
    in all cases.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '*nonzero* now returns base ndarrays'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, an inconsistency existed between 1-D inputs (returning a base ndarray)
    and higher dimensional ones (which preserved subclasses). Behavior has been unified,
    and the return will now be a base ndarray. Subclasses can still override this
    behavior by providing their own *nonzero* method.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: C API
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The changes to *swapaxes* also apply to the *PyArray_SwapAxes* C function, which
    now returns a view in all cases.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The changes to *nonzero* also apply to the *PyArray_Nonzero* C function, which
    now returns a base ndarray in all cases.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The dtype structure (PyArray_Descr) has a new member at the end to cache its
    hash value. This shouldn’t affect any well-written applications.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: The change to the concatenation function DeprecationWarning also affects PyArray_ConcatenateArrays,
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: recarray field return types
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously the returned types for recarray fields accessed by attribute and
    by index were inconsistent, and fields of string type were returned as chararrays.
    Now, fields accessed by either attribute or indexing will return an ndarray for
    fields of non-structured type, and a recarray for fields of structured type. Notably,
    this affect recarrays containing strings with whitespace, as trailing whitespace
    is trimmed from chararrays but kept in ndarrays of string type. Also, the dtype.type
    of nested structured fields is now inherited.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: recarray views
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Viewing an ndarray as a recarray now automatically converts the dtype to np.record.
    See new record array documentation. Additionally, viewing a recarray with a non-structured
    dtype no longer converts the result’s type to ndarray - the result will remain
    a recarray.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: ‘out’ keyword argument of ufuncs now accepts tuples of arrays
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the ‘out’ keyword argument of a ufunc, a tuple of arrays, one per
    ufunc output, can be provided. For ufuncs with a single output a single array
    is also a valid ‘out’ keyword argument. Previously a single array could be provided
    in the ‘out’ keyword argument, and it would be used as the first output for ufuncs
    with multiple outputs, is deprecated, and will result in a *DeprecationWarning*
    now and an error in the future.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: byte-array indices now raises an IndexError
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indexing an ndarray using a byte-string in Python 3 now raises an IndexError
    instead of a ValueError.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Masked arrays containing objects with arrays
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For such (rare) masked arrays, getting a single masked item no longer returns
    a corrupted masked array, but a fully masked version of the item.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Median warns and returns nan when invalid values are encountered
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to mean, median and percentile now emits a Runtime warning and returns
    *NaN* in slices where a *NaN* is present. To compute the median or percentile
    while ignoring invalid values use the new *nanmedian* or *nanpercentile* functions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Functions available from numpy.ma.testutils have changed
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All functions from numpy.testing were once available from numpy.ma.testutils
    but not all of them were redefined to work with masked arrays. Most of those functions
    have now been removed from numpy.ma.testutils with a small subset retained in
    order to preserve backward compatibility. In the long run this should help avoid
    mistaken use of the wrong functions, but it may cause import problems for some.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reading extra flags from site.cfg
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously customization of compilation of dependency libraries and numpy itself
    was only accomblishable via code changes in the distutils package. Now numpy.distutils
    reads in the following extra flags from each group of the *site.cfg*:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`runtime_library_dirs/rpath`, sets runtime library directories to override'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LD_LIBRARY_PATH`'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extra_compile_args`, add extra flags to the compilation of sources'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra_link_args`, add extra flags when linking libraries'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should, at least partially, complete user customization.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '*np.cbrt* to compute cube root for real floats'
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.cbrt* wraps the C99 cube root function *cbrt*. Compared to *np.power(x,
    1./3.)* it is well defined for negative real floats and a bit faster.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: numpy.distutils now allows parallel compilation
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By passing *–parallel=n* or *-j n* to *setup.py build* the compilation of extensions
    is now performed in *n* parallel processes. The parallelization is limited to
    files within one extension so projects using Cython will not profit because it
    builds extensions from single files.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '*genfromtxt* has a new `max_rows` argument'
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `max_rows` argument has been added to *genfromtxt* to limit the number of
    rows read in a single call. Using this functionality, it is possible to read in
    multiple arrays stored in a single file by making repeated calls to the function.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: New function *np.broadcast_to* for invoking array broadcasting
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.broadcast_to* manually broadcasts an array to a given shape according to
    numpy’s broadcasting rules. The functionality is similar to broadcast_arrays,
    which in fact has been rewritten to use broadcast_to internally, but only a single
    array is necessary.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: New context manager *clear_and_catch_warnings* for testing warnings
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Python emits a warning, it records that this warning has been emitted in
    the module that caused the warning, in a module attribute `__warningregistry__`.
    Once this has happened, it is not possible to emit the warning again, unless you
    clear the relevant entry in `__warningregistry__`. This makes is hard and fragile
    to test warnings, because if your test comes after another that has already caused
    the warning, you will not be able to emit the warning or test it. The context
    manager `clear_and_catch_warnings` clears warnings from the module registry on
    entry and resets them on exit, meaning that warnings can be re-raised.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '*cov* has new `fweights` and `aweights` arguments'
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fweights` and `aweights` arguments add new functionality to covariance
    calculations by applying two types of weighting to observation vectors. An array
    of `fweights` indicates the number of repeats of each observation vector, and
    an array of `aweights` provides their relative importance or probability.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Support for the ‘@’ operator in Python 3.5+
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python 3.5 adds support for a matrix multiplication operator ‘@’ proposed in
    PEP465\. Preliminary support for that has been implemented, and an equivalent
    function `matmul` has also been added for testing purposes and use in earlier
    Python versions. The function is preliminary and the order and number of its optional
    arguments can be expected to change.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: New argument `norm` to fft functions
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default normalization has the direct transforms unscaled and the inverse
    transforms are scaled by \(1/n\). It is possible to obtain unitary transforms
    by setting the keyword argument `norm` to `"ortho"` (default is *None*) so that
    both direct and inverse transforms will be scaled by \(1/\\sqrt{n}\).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Reading extra flags from site.cfg
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously customization of compilation of dependency libraries and numpy itself
    was only accomblishable via code changes in the distutils package. Now numpy.distutils
    reads in the following extra flags from each group of the *site.cfg*:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`runtime_library_dirs/rpath`, sets runtime library directories to override'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LD_LIBRARY_PATH`'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`extra_compile_args`, add extra flags to the compilation of sources'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra_link_args`, add extra flags when linking libraries'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should, at least partially, complete user customization.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '*np.cbrt* to compute cube root for real floats'
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.cbrt* wraps the C99 cube root function *cbrt*. Compared to *np.power(x,
    1./3.)* it is well defined for negative real floats and a bit faster.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: numpy.distutils now allows parallel compilation
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By passing *–parallel=n* or *-j n* to *setup.py build* the compilation of extensions
    is now performed in *n* parallel processes. The parallelization is limited to
    files within one extension so projects using Cython will not profit because it
    builds extensions from single files.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '*genfromtxt* has a new `max_rows` argument'
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `max_rows` argument has been added to *genfromtxt* to limit the number of
    rows read in a single call. Using this functionality, it is possible to read in
    multiple arrays stored in a single file by making repeated calls to the function.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: New function *np.broadcast_to* for invoking array broadcasting
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.broadcast_to* manually broadcasts an array to a given shape according to
    numpy’s broadcasting rules. The functionality is similar to broadcast_arrays,
    which in fact has been rewritten to use broadcast_to internally, but only a single
    array is necessary.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: New context manager *clear_and_catch_warnings* for testing warnings
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Python emits a warning, it records that this warning has been emitted in
    the module that caused the warning, in a module attribute `__warningregistry__`.
    Once this has happened, it is not possible to emit the warning again, unless you
    clear the relevant entry in `__warningregistry__`. This makes is hard and fragile
    to test warnings, because if your test comes after another that has already caused
    the warning, you will not be able to emit the warning or test it. The context
    manager `clear_and_catch_warnings` clears warnings from the module registry on
    entry and resets them on exit, meaning that warnings can be re-raised.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '*cov* has new `fweights` and `aweights` arguments'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fweights` and `aweights` arguments add new functionality to covariance
    calculations by applying two types of weighting to observation vectors. An array
    of `fweights` indicates the number of repeats of each observation vector, and
    an array of `aweights` provides their relative importance or probability.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Support for the ‘@’ operator in Python 3.5+
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python 3.5 adds support for a matrix multiplication operator ‘@’ proposed in
    PEP465\. Preliminary support for that has been implemented, and an equivalent
    function `matmul` has also been added for testing purposes and use in earlier
    Python versions. The function is preliminary and the order and number of its optional
    arguments can be expected to change.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: New argument `norm` to fft functions
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default normalization has the direct transforms unscaled and the inverse
    transforms are scaled by \(1/n\). It is possible to obtain unitary transforms
    by setting the keyword argument `norm` to `"ortho"` (default is *None*) so that
    both direct and inverse transforms will be scaled by \(1/\\sqrt{n}\).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*np.digitize* using binary search'
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.digitize* is now implemented in terms of *np.searchsorted*. This means
    that a binary search is used to bin the values, which scales much better for larger
    number of bins than the previous linear search. It also removes the requirement
    for the input array to be 1-dimensional.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '*np.poly* now casts integer inputs to float'
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.poly* will now cast 1-dimensional input arrays of integer type to double
    precision floating point, to prevent integer overflow when computing the monic
    polynomial. It is still possible to obtain higher precision results by passing
    in an array of object type, filled e.g. with Python ints.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '*np.interp* can now be used with periodic functions'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.interp* now has a new parameter *period* that supplies the period of the
    input data *xp*. In such case, the input data is properly normalized to the given
    period and one end point is added to each extremity of *xp* in order to close
    the previous and the next period cycles, resulting in the correct interpolation
    behavior.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '*np.pad* supports more input types for `pad_width` and `constant_values`'
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`constant_values` parameters now accepts NumPy arrays and float values. NumPy
    arrays are supported as input for `pad_width`, and an exception is raised if its
    values are not of integral type.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '*np.argmax* and *np.argmin* now support an `out` argument'
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `out` parameter was added to *np.argmax* and *np.argmin* for consistency
    with *ndarray.argmax* and *ndarray.argmin*. The new parameter behaves exactly
    as it does in those methods.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: More system C99 complex functions detected and used
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the functions `in complex.h` are now detected. There are new fallback
    implementations of the following functions.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: npy_ctan,
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_cacos, npy_casin, npy_catan
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_ccosh, npy_csinh, npy_ctanh,
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_cacosh, npy_casinh, npy_catanh
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result of these improvements, there will be some small changes in returned
    values, especially for corner cases.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '*np.loadtxt* support for the strings produced by the `float.hex` method'
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The strings produced by `float.hex` look like `0x1.921fb54442d18p+1`, so this
    is not the hex used to represent unsigned integer types.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '*np.isclose* properly handles minimal values of integer dtypes'
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to properly handle minimal values of integer types, *np.isclose* will
    now cast to the float dtype during comparisons. This aligns its behavior with
    what was provided by *np.allclose*.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '*np.allclose* uses *np.isclose* internally.'
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.allclose* now uses *np.isclose* internally and inherits the ability to
    compare NaNs as equal by setting `equal_nan=True`. Subclasses, such as *np.ma.MaskedArray*,
    are also preserved now.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '*np.genfromtxt* now handles large integers correctly'
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.genfromtxt* now correctly handles integers larger than `2**31-1` on 32-bit
    systems and larger than `2**63-1` on 64-bit systems (it previously crashed with
    an `OverflowError` in these cases). Integers larger than `2**63-1` are converted
    to floating-point values.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '*np.load*, *np.save* have pickle backward compatibility flags'
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The functions *np.load* and *np.save* have additional keyword arguments for
    controlling backward compatibility of pickled Python objects. This enables Numpy
    on Python 3 to load npy files containing object arrays that were generated on
    Python 2.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: MaskedArray support for more complicated base classes
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, setting and getting elements and ranges will respect baseclass
    overrides of `__setitem__` and `__getitem__`, and arithmetic will respect overrides
    of `__add__`, `__sub__`, etc.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '*np.digitize* using binary search'
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.digitize* is now implemented in terms of *np.searchsorted*. This means
    that a binary search is used to bin the values, which scales much better for larger
    number of bins than the previous linear search. It also removes the requirement
    for the input array to be 1-dimensional.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '*np.poly* now casts integer inputs to float'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.poly* will now cast 1-dimensional input arrays of integer type to double
    precision floating point, to prevent integer overflow when computing the monic
    polynomial. It is still possible to obtain higher precision results by passing
    in an array of object type, filled e.g. with Python ints.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '*np.interp* can now be used with periodic functions'
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.interp* now has a new parameter *period* that supplies the period of the
    input data *xp*. In such case, the input data is properly normalized to the given
    period and one end point is added to each extremity of *xp* in order to close
    the previous and the next period cycles, resulting in the correct interpolation
    behavior.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '*np.pad* supports more input types for `pad_width` and `constant_values`'
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`constant_values` parameters now accepts NumPy arrays and float values. NumPy
    arrays are supported as input for `pad_width`, and an exception is raised if its
    values are not of integral type.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '*np.argmax* and *np.argmin* now support an `out` argument'
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `out` parameter was added to *np.argmax* and *np.argmin* for consistency
    with *ndarray.argmax* and *ndarray.argmin*. The new parameter behaves exactly
    as it does in those methods.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: More system C99 complex functions detected and used
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the functions `in complex.h` are now detected. There are new fallback
    implementations of the following functions.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: npy_ctan,
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_cacos, npy_casin, npy_catan
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_ccosh, npy_csinh, npy_ctanh,
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npy_cacosh, npy_casinh, npy_catanh
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result of these improvements, there will be some small changes in returned
    values, especially for corner cases.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '*np.loadtxt* support for the strings produced by the `float.hex` method'
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The strings produced by `float.hex` look like `0x1.921fb54442d18p+1`, so this
    is not the hex used to represent unsigned integer types.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '*np.isclose* properly handles minimal values of integer dtypes'
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to properly handle minimal values of integer types, *np.isclose* will
    now cast to the float dtype during comparisons. This aligns its behavior with
    what was provided by *np.allclose*.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '*np.allclose* uses *np.isclose* internally.'
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.allclose* now uses *np.isclose* internally and inherits the ability to
    compare NaNs as equal by setting `equal_nan=True`. Subclasses, such as *np.ma.MaskedArray*,
    are also preserved now.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '*np.genfromtxt* now handles large integers correctly'
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.genfromtxt* now correctly handles integers larger than `2**31-1` on 32-bit
    systems and larger than `2**63-1` on 64-bit systems (it previously crashed with
    an `OverflowError` in these cases). Integers larger than `2**63-1` are converted
    to floating-point values.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '*np.load*, *np.save* have pickle backward compatibility flags'
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The functions *np.load* and *np.save* have additional keyword arguments for
    controlling backward compatibility of pickled Python objects. This enables Numpy
    on Python 3 to load npy files containing object arrays that were generated on
    Python 2.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: MaskedArray support for more complicated base classes
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, setting and getting elements and ranges will respect baseclass
    overrides of `__setitem__` and `__getitem__`, and arithmetic will respect overrides
    of `__add__`, `__sub__`, etc.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: dotblas functionality moved to multiarray
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cblas versions of dot, inner, and vdot have been integrated into the multiarray
    module. In particular, vdot is now a multiarray function, which it was not before.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: stricter check of gufunc signature compliance
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inputs to generalized universal functions are now more strictly checked against
    the function’s signature: all core dimensions are now required to be present in
    input arrays; core dimensions with the same label must have the exact same size;
    and output core dimension’s must be specified, either by a same label input core
    dimension or by a passed-in output array.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: views returned from *np.einsum* are writeable
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Views returned by *np.einsum* will now be writeable whenever the input array
    is writeable.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '*np.argmin* skips NaT values'
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.argmin* now skips NaT values in datetime64 and timedelta64 arrays, making
    it consistent with *np.min*, *np.argmax* and *np.max*.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: dotblas functionality moved to multiarray
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cblas versions of dot, inner, and vdot have been integrated into the multiarray
    module. In particular, vdot is now a multiarray function, which it was not before.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: stricter check of gufunc signature compliance
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inputs to generalized universal functions are now more strictly checked against
    the function’s signature: all core dimensions are now required to be present in
    input arrays; core dimensions with the same label must have the exact same size;
    and output core dimension’s must be specified, either by a same label input core
    dimension or by a passed-in output array.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: views returned from *np.einsum* are writeable
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Views returned by *np.einsum* will now be writeable whenever the input array
    is writeable.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '*np.argmin* skips NaT values'
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*np.argmin* now skips NaT values in datetime64 and timedelta64 arrays, making
    it consistent with *np.min*, *np.argmax* and *np.max*.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Array comparisons involving strings or structured dtypes
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Normally, comparison operations on arrays perform elementwise comparisons and
    return arrays of booleans. But in some corner cases, especially involving strings
    are structured dtypes, NumPy has historically returned a scalar instead. For example:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Continuing work started in 1.9, in 1.10 these comparisons will now raise `FutureWarning`
    or `DeprecationWarning`, and in the future they will be modified to behave more
    consistently with other comparison operations, e.g.:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: SafeEval
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SafeEval class in numpy/lib/utils.py is deprecated and will be removed in
    the next release.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: alterdot, restoredot
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The alterdot and restoredot functions no longer do anything, and are deprecated.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: pkgload, PackageLoader
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These ways of loading packages are now deprecated.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: bias, ddof arguments to corrcoef
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The values for the `bias` and `ddof` arguments to the `corrcoef` function canceled
    in the division implied by the correlation coefficient and so had no effect on
    the returned values.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: We now deprecate these arguments to `corrcoef` and the masked array version
    `ma.corrcoef`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Because we are deprecating the `bias` argument to `ma.corrcoef`, we also deprecate
    the use of the `allow_masked` argument as a positional argument, as its position
    will change with the removal of `bias`. `allow_masked` will in due course become
    a keyword-only argument.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: dtype string representation changes
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since 1.6, creating a dtype object from its string representation, e.g. `'f4'`,
    would issue a deprecation warning if the size did not correspond to an existing
    type, and default to creating a dtype of the default size for the type. Starting
    with this release, this will now raise a `TypeError`.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: The only exception is object dtypes, where both `'O4'` and `'O8'` will still
    issue a deprecation warning. This platform-dependent representation will raise
    an error in the next release.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: In preparation for this upcoming change, the string representation of an object
    dtype, i.e. `np.dtype(object).str`, no longer includes the item size, i.e. will
    return `'|O'` instead of `'|O4'` or `'|O8'` as before.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Array comparisons involving strings or structured dtypes
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Normally, comparison operations on arrays perform elementwise comparisons and
    return arrays of booleans. But in some corner cases, especially involving strings
    are structured dtypes, NumPy has historically returned a scalar instead. For example:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Continuing work started in 1.9, in 1.10 these comparisons will now raise `FutureWarning`
    or `DeprecationWarning`, and in the future they will be modified to behave more
    consistently with other comparison operations, e.g.:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SafeEval
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SafeEval class in numpy/lib/utils.py is deprecated and will be removed in
    the next release.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: alterdot, restoredot
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The alterdot and restoredot functions no longer do anything, and are deprecated.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: pkgload, PackageLoader
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These ways of loading packages are now deprecated.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: bias, ddof arguments to corrcoef
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The values for the `bias` and `ddof` arguments to the `corrcoef` function canceled
    in the division implied by the correlation coefficient and so had no effect on
    the returned values.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: We now deprecate these arguments to `corrcoef` and the masked array version
    `ma.corrcoef`.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: Because we are deprecating the `bias` argument to `ma.corrcoef`, we also deprecate
    the use of the `allow_masked` argument as a positional argument, as its position
    will change with the removal of `bias`. `allow_masked` will in due course become
    a keyword-only argument.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: dtype string representation changes
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since 1.6, creating a dtype object from its string representation, e.g. `'f4'`,
    would issue a deprecation warning if the size did not correspond to an existing
    type, and default to creating a dtype of the default size for the type. Starting
    with this release, this will now raise a `TypeError`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: The only exception is object dtypes, where both `'O4'` and `'O8'` will still
    issue a deprecation warning. This platform-dependent representation will raise
    an error in the next release.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: In preparation for this upcoming change, the string representation of an object
    dtype, i.e. `np.dtype(object).str`, no longer includes the item size, i.e. will
    return `'|O'` instead of `'|O4'` or `'|O8'` as before.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
