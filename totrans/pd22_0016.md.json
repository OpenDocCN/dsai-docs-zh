["```py\ndf  <-  data.frame(a=rnorm(5),  b=rnorm(5),  c=rnorm(5),  d=rnorm(5),  e=rnorm(5))\ndf[,  c(\"a\",  \"c\",  \"e\")] \n```", "```py\ndf  <-  data.frame(matrix(rnorm(1000),  ncol=100))\ndf[,  c(1:10,  25:30,  40,  50:100)] \n```", "```py\nIn [1]: df = pd.DataFrame(np.random.randn(10, 3), columns=list(\"abc\"))\n\nIn [2]: df[[\"a\", \"c\"]]\nOut[2]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892\n\nIn [3]: df.loc[:, [\"a\", \"c\"]]\nOut[3]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892 \n```", "```py\nIn [4]: named = list(\"abcdefg\")\n\nIn [5]: n = 30\n\nIn [6]: columns = named + np.arange(len(named), n).tolist()\n\nIn [7]: df = pd.DataFrame(np.random.randn(n, n), columns=columns)\n\nIn [8]: df.iloc[:, np.r_[:10, 24:30]]\nOut[8]: \n a         b         c  ...        27        28        29\n0  -1.344312  0.844885  1.075770  ...  0.813850  0.132003 -0.827317\n1  -0.076467 -1.187678  1.130127  ...  0.149748 -0.732339  0.687738\n2   0.176444  0.403310 -0.154951  ... -0.493662  0.600178  0.274230\n3   0.132885 -0.023688  2.410179  ...  0.109121  1.126203 -0.977349\n4   1.474071 -0.064034 -1.282782  ... -0.858447  0.306996 -0.028665\n..       ...       ...       ...  ...       ...       ...       ...\n25  1.492125 -0.068190  0.681456  ...  0.428572  0.880609  0.487645\n26  0.725238  0.624607 -0.141185  ...  1.008500  1.424017  0.717110\n27  1.262419  1.950057  0.301038  ...  1.007824  2.826008  1.458383\n28 -1.585746 -0.899734  0.921494  ...  0.577223 -1.088417  0.326687\n29 -0.986248  0.169729 -1.158091  ... -2.013086 -1.602549  0.333109\n\n[30 rows x 16 columns] \n```", "```py\ndf  <-  data.frame(\n  v1  =  c(1,3,5,7,8,3,5,NA,4,5,7,9),\n  v2  =  c(11,33,55,77,88,33,55,NA,44,55,77,99),\n  by1  =  c(\"red\",  \"blue\",  1,  2,  NA,  \"big\",  1,  2,  \"red\",  1,  NA,  12),\n  by2  =  c(\"wet\",  \"dry\",  99,  95,  NA,  \"damp\",  95,  99,  \"red\",  99,  NA,  NA))\naggregate(x=df[,  c(\"v1\",  \"v2\")],  by=list(mydf2$by1,  mydf2$by2),  FUN  =  mean) \n```", "```py\nIn [9]: df = pd.DataFrame(\n ...:    {\n ...:        \"v1\": [1, 3, 5, 7, 8, 3, 5, np.nan, 4, 5, 7, 9],\n ...:        \"v2\": [11, 33, 55, 77, 88, 33, 55, np.nan, 44, 55, 77, 99],\n ...:        \"by1\": [\"red\", \"blue\", 1, 2, np.nan, \"big\", 1, 2, \"red\", 1, np.nan, 12],\n ...:        \"by2\": [\n ...:            \"wet\",\n ...:            \"dry\",\n ...:            99,\n ...:            95,\n ...:            np.nan,\n ...:            \"damp\",\n ...:            95,\n ...:            99,\n ...:            \"red\",\n ...:            99,\n ...:            np.nan,\n ...:            np.nan,\n ...:        ],\n ...:    }\n ...: )\n ...: \n\nIn [10]: g = df.groupby([\"by1\", \"by2\"])\n\nIn [11]: g[[\"v1\", \"v2\"]].mean()\nOut[11]: \n v1    v2\nby1  by2 \n1    95    5.0  55.0\n 99    5.0  55.0\n2    95    7.0  77.0\n 99    NaN   NaN\nbig  damp  3.0  33.0\nblue dry   3.0  33.0\nred  red   4.0  44.0\n wet   1.0  11.0 \n```", "```py\ns  <-  0:4\ns  %in%  c(2,4) \n```", "```py\nIn [12]: s = pd.Series(np.arange(5), dtype=np.float32)\n\nIn [13]: s.isin([2, 4])\nOut[13]: \n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool \n```", "```py\ns  <-  0:4\nmatch(s,  c(2,4)) \n```", "```py\nbaseball  <-\n  data.frame(team  =  gl(5,  5,\n  labels  =  paste(\"Team\",  LETTERS[1:5])),\n  player  =  sample(letters,  25),\n  batting.average  =  runif(25,  .200,  .400))\n\ntapply(baseball$batting.average,  baseball.example$team,\n  max) \n```", "```py\nIn [14]: import random\n\nIn [15]: import string\n\nIn [16]: baseball = pd.DataFrame(\n ....:    {\n ....:        \"team\": [\"team %d\" % (x + 1) for x in range(5)] * 5,\n ....:        \"player\": random.sample(list(string.ascii_lowercase), 25),\n ....:        \"batting avg\": np.random.uniform(0.200, 0.400, 25),\n ....:    }\n ....: )\n ....: \n\nIn [17]: baseball.pivot_table(values=\"batting avg\", columns=\"team\", aggfunc=\"max\")\nOut[17]: \nteam           team 1    team 2    team 3    team 4    team 5\nbatting avg  0.352134  0.295327  0.397191  0.394457  0.396194 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nsubset(df,  a  <=  b)\ndf[df$a  <=  df$b,]  # note the comma \n```", "```py\nIn [18]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [19]: df.query(\"a <= b\")\nOut[19]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [20]: df[df[\"a\"] <= df[\"b\"]]\nOut[20]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [21]: df.loc[df[\"a\"] <= df[\"b\"]]\nOut[21]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nwith(df,  a  +  b)\ndf$a  +  df$b  # same as the previous expression \n```", "```py\nIn [22]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [23]: df.eval(\"a + b\")\nOut[23]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64\n\nIn [24]: df[\"a\"] + df[\"b\"]  # same as the previous expression\nOut[24]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64 \n```", "```py\nrequire(plyr)\ndf  <-  data.frame(\n  x  =  runif(120,  1,  168),\n  y  =  runif(120,  7,  334),\n  z  =  runif(120,  1.7,  20.7),\n  month  =  rep(c(5,6,7,8),30),\n  week  =  sample(1:4,  120,  TRUE)\n)\n\nddply(df,  .(month,  week),  summarize,\n  mean  =  round(mean(x),  2),\n  sd  =  round(sd(x),  2)) \n```", "```py\nIn [25]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 120),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 120),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 120),\n ....:        \"month\": [5, 6, 7, 8] * 30,\n ....:        \"week\": np.random.randint(1, 4, 120),\n ....:    }\n ....: )\n ....: \n\nIn [26]: grouped = df.groupby([\"month\", \"week\"])\n\nIn [27]: grouped[\"x\"].agg([\"mean\", \"std\"])\nOut[27]: \n mean        std\nmonth week \n5     1      63.653367  40.601965\n 2      78.126605  53.342400\n 3      92.091886  57.630110\n6     1      81.747070  54.339218\n 2      70.971205  54.687287\n 3     100.968344  54.010081\n7     1      61.576332  38.844274\n 2      61.733510  48.209013\n 3      71.688795  37.595638\n8     1      62.741922  34.618153\n 2      91.774627  49.790202\n 3      73.936856  60.773900 \n```", "```py\na  <-  array(c(1:23,  NA),  c(2,3,4))\ndata.frame(melt(a)) \n```", "```py\nIn [28]: a = np.array(list(range(1, 24)) + [np.NAN]).reshape(2, 3, 4)\n\nIn [29]: pd.DataFrame([tuple(list(x) + [val]) for x, val in np.ndenumerate(a)])\nOut[29]: \n 0  1  2     3\n0   0  0  0   1.0\n1   0  0  1   2.0\n2   0  0  2   3.0\n3   0  0  3   4.0\n4   0  1  0   5.0\n.. .. .. ..   ...\n19  1  1  3  20.0\n20  1  2  0  21.0\n21  1  2  1  22.0\n22  1  2  2  23.0\n23  1  2  3   NaN\n\n[24 rows x 4 columns] \n```", "```py\na  <-  as.list(c(1:4,  NA))\ndata.frame(melt(a)) \n```", "```py\nIn [30]: a = list(enumerate(list(range(1, 5)) + [np.NAN]))\n\nIn [31]: pd.DataFrame(a)\nOut[31]: \n 0    1\n0  0  1.0\n1  1  2.0\n2  2  3.0\n3  3  4.0\n4  4  NaN \n```", "```py\ncheese  <-  data.frame(\n  first  =  c('John',  'Mary'),\n  last  =  c('Doe',  'Bo'),\n  height  =  c(5.5,  6.0),\n  weight  =  c(130,  150)\n)\nmelt(cheese,  id=c(\"first\",  \"last\")) \n```", "```py\nIn [32]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    }\n ....: )\n ....: \n\nIn [33]: pd.melt(cheese, id_vars=[\"first\", \"last\"])\nOut[33]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [34]: cheese.set_index([\"first\", \"last\"]).stack(future_stack=True)  # alternative way\nOut[34]: \nfirst  last \nJohn   Doe   height      5.5\n weight    130.0\nMary   Bo    height      6.0\n weight    150.0\ndtype: float64 \n```", "```py\ndf  <-  data.frame(\n  x  =  runif(12,  1,  168),\n  y  =  runif(12,  7,  334),\n  z  =  runif(12,  1.7,  20.7),\n  month  =  rep(c(5,6,7),4),\n  week  =  rep(c(1,2),  6)\n)\n\nmdf  <-  melt(df,  id=c(\"month\",  \"week\"))\nacast(mdf,  week  ~  month  ~  variable,  mean) \n```", "```py\nIn [35]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 12),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 12),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 12),\n ....:        \"month\": [5, 6, 7] * 4,\n ....:        \"week\": [1, 2] * 6,\n ....:    }\n ....: )\n ....: \n\nIn [36]: mdf = pd.melt(df, id_vars=[\"month\", \"week\"])\n\nIn [37]: pd.pivot_table(\n ....:    mdf,\n ....:    values=\"value\",\n ....:    index=[\"variable\", \"week\"],\n ....:    columns=[\"month\"],\n ....:    aggfunc=\"mean\",\n ....: )\n ....: \nOut[37]: \nmonth                  5           6           7\nvariable week \nx        1     93.888747   98.762034   55.219673\n 2     94.391427   38.112932   83.942781\ny        1     94.306912  279.454811  227.840449\n 2     87.392662  193.028166  173.899260\nz        1     11.016009   10.079307   16.170549\n 2      8.476111   17.638509   19.003494 \n```", "```py\ndf  <-  data.frame(\n  Animal  =  c('Animal1',  'Animal2',  'Animal3',  'Animal2',  'Animal1',\n  'Animal2',  'Animal3'),\n  FeedType  =  c('A',  'B',  'A',  'A',  'B',  'B',  'A'),\n  Amount  =  c(10,  7,  4,  2,  5,  6,  2)\n)\n\ndcast(df,  Animal  ~  FeedType,  sum,  fill=NaN)\n# Alternative method using base R\nwith(df,  tapply(Amount,  list(Animal,  FeedType),  sum)) \n```", "```py\nIn [38]: df = pd.DataFrame(\n ....:    {\n ....:        \"Animal\": [\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:            \"Animal2\",\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:        ],\n ....:        \"FeedType\": [\"A\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\"],\n ....:        \"Amount\": [10, 7, 4, 2, 5, 6, 2],\n ....:    }\n ....: )\n ....: \n\nIn [39]: df.pivot_table(values=\"Amount\", index=\"Animal\", columns=\"FeedType\", aggfunc=\"sum\")\nOut[39]: \nFeedType     A     B\nAnimal \nAnimal1   10.0   5.0\nAnimal2    2.0  13.0\nAnimal3    6.0   NaN \n```", "```py\nIn [40]: df.groupby([\"Animal\", \"FeedType\"])[\"Amount\"].sum()\nOut[40]: \nAnimal   FeedType\nAnimal1  A           10\n B            5\nAnimal2  A            2\n B           13\nAnimal3  A            6\nName: Amount, dtype: int64 \n```", "```py\ncut(c(1,2,3,4,5,6),  3)\nfactor(c(1,2,3,2,2,3)) \n```", "```py\nIn [41]: pd.cut(pd.Series([1, 2, 3, 4, 5, 6]), 3)\nOut[41]: \n0    (0.995, 2.667]\n1    (0.995, 2.667]\n2    (2.667, 4.333]\n3    (2.667, 4.333]\n4      (4.333, 6.0]\n5      (4.333, 6.0]\ndtype: category\nCategories (3, interval[float64, right]): [(0.995, 2.667] < (2.667, 4.333] < (4.333, 6.0]]\n\nIn [42]: pd.Series([1, 2, 3, 2, 2, 3]).astype(\"category\")\nOut[42]: \n0    1\n1    2\n2    3\n3    2\n4    2\n5    3\ndtype: category\nCategories (3, int64): [1, 2, 3] \n```", "```py\ndf  <-  data.frame(a=rnorm(5),  b=rnorm(5),  c=rnorm(5),  d=rnorm(5),  e=rnorm(5))\ndf[,  c(\"a\",  \"c\",  \"e\")] \n```", "```py\ndf  <-  data.frame(matrix(rnorm(1000),  ncol=100))\ndf[,  c(1:10,  25:30,  40,  50:100)] \n```", "```py\nIn [1]: df = pd.DataFrame(np.random.randn(10, 3), columns=list(\"abc\"))\n\nIn [2]: df[[\"a\", \"c\"]]\nOut[2]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892\n\nIn [3]: df.loc[:, [\"a\", \"c\"]]\nOut[3]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892 \n```", "```py\nIn [4]: named = list(\"abcdefg\")\n\nIn [5]: n = 30\n\nIn [6]: columns = named + np.arange(len(named), n).tolist()\n\nIn [7]: df = pd.DataFrame(np.random.randn(n, n), columns=columns)\n\nIn [8]: df.iloc[:, np.r_[:10, 24:30]]\nOut[8]: \n a         b         c  ...        27        28        29\n0  -1.344312  0.844885  1.075770  ...  0.813850  0.132003 -0.827317\n1  -0.076467 -1.187678  1.130127  ...  0.149748 -0.732339  0.687738\n2   0.176444  0.403310 -0.154951  ... -0.493662  0.600178  0.274230\n3   0.132885 -0.023688  2.410179  ...  0.109121  1.126203 -0.977349\n4   1.474071 -0.064034 -1.282782  ... -0.858447  0.306996 -0.028665\n..       ...       ...       ...  ...       ...       ...       ...\n25  1.492125 -0.068190  0.681456  ...  0.428572  0.880609  0.487645\n26  0.725238  0.624607 -0.141185  ...  1.008500  1.424017  0.717110\n27  1.262419  1.950057  0.301038  ...  1.007824  2.826008  1.458383\n28 -1.585746 -0.899734  0.921494  ...  0.577223 -1.088417  0.326687\n29 -0.986248  0.169729 -1.158091  ... -2.013086 -1.602549  0.333109\n\n[30 rows x 16 columns] \n```", "```py\ndf  <-  data.frame(\n  v1  =  c(1,3,5,7,8,3,5,NA,4,5,7,9),\n  v2  =  c(11,33,55,77,88,33,55,NA,44,55,77,99),\n  by1  =  c(\"red\",  \"blue\",  1,  2,  NA,  \"big\",  1,  2,  \"red\",  1,  NA,  12),\n  by2  =  c(\"wet\",  \"dry\",  99,  95,  NA,  \"damp\",  95,  99,  \"red\",  99,  NA,  NA))\naggregate(x=df[,  c(\"v1\",  \"v2\")],  by=list(mydf2$by1,  mydf2$by2),  FUN  =  mean) \n```", "```py\nIn [9]: df = pd.DataFrame(\n ...:    {\n ...:        \"v1\": [1, 3, 5, 7, 8, 3, 5, np.nan, 4, 5, 7, 9],\n ...:        \"v2\": [11, 33, 55, 77, 88, 33, 55, np.nan, 44, 55, 77, 99],\n ...:        \"by1\": [\"red\", \"blue\", 1, 2, np.nan, \"big\", 1, 2, \"red\", 1, np.nan, 12],\n ...:        \"by2\": [\n ...:            \"wet\",\n ...:            \"dry\",\n ...:            99,\n ...:            95,\n ...:            np.nan,\n ...:            \"damp\",\n ...:            95,\n ...:            99,\n ...:            \"red\",\n ...:            99,\n ...:            np.nan,\n ...:            np.nan,\n ...:        ],\n ...:    }\n ...: )\n ...: \n\nIn [10]: g = df.groupby([\"by1\", \"by2\"])\n\nIn [11]: g[[\"v1\", \"v2\"]].mean()\nOut[11]: \n v1    v2\nby1  by2 \n1    95    5.0  55.0\n 99    5.0  55.0\n2    95    7.0  77.0\n 99    NaN   NaN\nbig  damp  3.0  33.0\nblue dry   3.0  33.0\nred  red   4.0  44.0\n wet   1.0  11.0 \n```", "```py\ns  <-  0:4\ns  %in%  c(2,4) \n```", "```py\nIn [12]: s = pd.Series(np.arange(5), dtype=np.float32)\n\nIn [13]: s.isin([2, 4])\nOut[13]: \n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool \n```", "```py\ns  <-  0:4\nmatch(s,  c(2,4)) \n```", "```py\nbaseball  <-\n  data.frame(team  =  gl(5,  5,\n  labels  =  paste(\"Team\",  LETTERS[1:5])),\n  player  =  sample(letters,  25),\n  batting.average  =  runif(25,  .200,  .400))\n\ntapply(baseball$batting.average,  baseball.example$team,\n  max) \n```", "```py\nIn [14]: import random\n\nIn [15]: import string\n\nIn [16]: baseball = pd.DataFrame(\n ....:    {\n ....:        \"team\": [\"team %d\" % (x + 1) for x in range(5)] * 5,\n ....:        \"player\": random.sample(list(string.ascii_lowercase), 25),\n ....:        \"batting avg\": np.random.uniform(0.200, 0.400, 25),\n ....:    }\n ....: )\n ....: \n\nIn [17]: baseball.pivot_table(values=\"batting avg\", columns=\"team\", aggfunc=\"max\")\nOut[17]: \nteam           team 1    team 2    team 3    team 4    team 5\nbatting avg  0.352134  0.295327  0.397191  0.394457  0.396194 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nsubset(df,  a  <=  b)\ndf[df$a  <=  df$b,]  # note the comma \n```", "```py\nIn [18]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [19]: df.query(\"a <= b\")\nOut[19]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [20]: df[df[\"a\"] <= df[\"b\"]]\nOut[20]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [21]: df.loc[df[\"a\"] <= df[\"b\"]]\nOut[21]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nwith(df,  a  +  b)\ndf$a  +  df$b  # same as the previous expression \n```", "```py\nIn [22]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [23]: df.eval(\"a + b\")\nOut[23]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64\n\nIn [24]: df[\"a\"] + df[\"b\"]  # same as the previous expression\nOut[24]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64 \n```", "```py\ndf  <-  data.frame(a=rnorm(5),  b=rnorm(5),  c=rnorm(5),  d=rnorm(5),  e=rnorm(5))\ndf[,  c(\"a\",  \"c\",  \"e\")] \n```", "```py\ndf  <-  data.frame(matrix(rnorm(1000),  ncol=100))\ndf[,  c(1:10,  25:30,  40,  50:100)] \n```", "```py\nIn [1]: df = pd.DataFrame(np.random.randn(10, 3), columns=list(\"abc\"))\n\nIn [2]: df[[\"a\", \"c\"]]\nOut[2]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892\n\nIn [3]: df.loc[:, [\"a\", \"c\"]]\nOut[3]: \n a         c\n0  0.469112 -1.509059\n1 -1.135632 -0.173215\n2  0.119209 -0.861849\n3 -2.104569  1.071804\n4  0.721555 -1.039575\n5  0.271860  0.567020\n6  0.276232 -0.673690\n7  0.113648  0.524988\n8  0.404705 -1.715002\n9 -1.039268 -1.157892 \n```", "```py\nIn [4]: named = list(\"abcdefg\")\n\nIn [5]: n = 30\n\nIn [6]: columns = named + np.arange(len(named), n).tolist()\n\nIn [7]: df = pd.DataFrame(np.random.randn(n, n), columns=columns)\n\nIn [8]: df.iloc[:, np.r_[:10, 24:30]]\nOut[8]: \n a         b         c  ...        27        28        29\n0  -1.344312  0.844885  1.075770  ...  0.813850  0.132003 -0.827317\n1  -0.076467 -1.187678  1.130127  ...  0.149748 -0.732339  0.687738\n2   0.176444  0.403310 -0.154951  ... -0.493662  0.600178  0.274230\n3   0.132885 -0.023688  2.410179  ...  0.109121  1.126203 -0.977349\n4   1.474071 -0.064034 -1.282782  ... -0.858447  0.306996 -0.028665\n..       ...       ...       ...  ...       ...       ...       ...\n25  1.492125 -0.068190  0.681456  ...  0.428572  0.880609  0.487645\n26  0.725238  0.624607 -0.141185  ...  1.008500  1.424017  0.717110\n27  1.262419  1.950057  0.301038  ...  1.007824  2.826008  1.458383\n28 -1.585746 -0.899734  0.921494  ...  0.577223 -1.088417  0.326687\n29 -0.986248  0.169729 -1.158091  ... -2.013086 -1.602549  0.333109\n\n[30 rows x 16 columns] \n```", "```py\ndf  <-  data.frame(\n  v1  =  c(1,3,5,7,8,3,5,NA,4,5,7,9),\n  v2  =  c(11,33,55,77,88,33,55,NA,44,55,77,99),\n  by1  =  c(\"red\",  \"blue\",  1,  2,  NA,  \"big\",  1,  2,  \"red\",  1,  NA,  12),\n  by2  =  c(\"wet\",  \"dry\",  99,  95,  NA,  \"damp\",  95,  99,  \"red\",  99,  NA,  NA))\naggregate(x=df[,  c(\"v1\",  \"v2\")],  by=list(mydf2$by1,  mydf2$by2),  FUN  =  mean) \n```", "```py\nIn [9]: df = pd.DataFrame(\n ...:    {\n ...:        \"v1\": [1, 3, 5, 7, 8, 3, 5, np.nan, 4, 5, 7, 9],\n ...:        \"v2\": [11, 33, 55, 77, 88, 33, 55, np.nan, 44, 55, 77, 99],\n ...:        \"by1\": [\"red\", \"blue\", 1, 2, np.nan, \"big\", 1, 2, \"red\", 1, np.nan, 12],\n ...:        \"by2\": [\n ...:            \"wet\",\n ...:            \"dry\",\n ...:            99,\n ...:            95,\n ...:            np.nan,\n ...:            \"damp\",\n ...:            95,\n ...:            99,\n ...:            \"red\",\n ...:            99,\n ...:            np.nan,\n ...:            np.nan,\n ...:        ],\n ...:    }\n ...: )\n ...: \n\nIn [10]: g = df.groupby([\"by1\", \"by2\"])\n\nIn [11]: g[[\"v1\", \"v2\"]].mean()\nOut[11]: \n v1    v2\nby1  by2 \n1    95    5.0  55.0\n 99    5.0  55.0\n2    95    7.0  77.0\n 99    NaN   NaN\nbig  damp  3.0  33.0\nblue dry   3.0  33.0\nred  red   4.0  44.0\n wet   1.0  11.0 \n```", "```py\ns  <-  0:4\ns  %in%  c(2,4) \n```", "```py\nIn [12]: s = pd.Series(np.arange(5), dtype=np.float32)\n\nIn [13]: s.isin([2, 4])\nOut[13]: \n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool \n```", "```py\ns  <-  0:4\nmatch(s,  c(2,4)) \n```", "```py\nbaseball  <-\n  data.frame(team  =  gl(5,  5,\n  labels  =  paste(\"Team\",  LETTERS[1:5])),\n  player  =  sample(letters,  25),\n  batting.average  =  runif(25,  .200,  .400))\n\ntapply(baseball$batting.average,  baseball.example$team,\n  max) \n```", "```py\nIn [14]: import random\n\nIn [15]: import string\n\nIn [16]: baseball = pd.DataFrame(\n ....:    {\n ....:        \"team\": [\"team %d\" % (x + 1) for x in range(5)] * 5,\n ....:        \"player\": random.sample(list(string.ascii_lowercase), 25),\n ....:        \"batting avg\": np.random.uniform(0.200, 0.400, 25),\n ....:    }\n ....: )\n ....: \n\nIn [17]: baseball.pivot_table(values=\"batting avg\", columns=\"team\", aggfunc=\"max\")\nOut[17]: \nteam           team 1    team 2    team 3    team 4    team 5\nbatting avg  0.352134  0.295327  0.397191  0.394457  0.396194 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nsubset(df,  a  <=  b)\ndf[df$a  <=  df$b,]  # note the comma \n```", "```py\nIn [18]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [19]: df.query(\"a <= b\")\nOut[19]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [20]: df[df[\"a\"] <= df[\"b\"]]\nOut[20]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550\n\nIn [21]: df.loc[df[\"a\"] <= df[\"b\"]]\nOut[21]: \n a         b\n1  0.174950  0.552887\n2 -0.023167  0.148084\n3 -0.495291 -0.300218\n4 -0.860736  0.197378\n5 -1.134146  1.720780\n7 -0.290098  0.083515\n8  0.238636  0.946550 \n```", "```py\ndf  <-  data.frame(a=rnorm(10),  b=rnorm(10))\nwith(df,  a  +  b)\ndf$a  +  df$b  # same as the previous expression \n```", "```py\nIn [22]: df = pd.DataFrame({\"a\": np.random.randn(10), \"b\": np.random.randn(10)})\n\nIn [23]: df.eval(\"a + b\")\nOut[23]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64\n\nIn [24]: df[\"a\"] + df[\"b\"]  # same as the previous expression\nOut[24]: \n0   -0.091430\n1   -2.483890\n2   -0.252728\n3   -0.626444\n4   -0.261740\n5    2.149503\n6   -0.332214\n7    0.799331\n8   -2.377245\n9    2.104677\ndtype: float64 \n```", "```py\nrequire(plyr)\ndf  <-  data.frame(\n  x  =  runif(120,  1,  168),\n  y  =  runif(120,  7,  334),\n  z  =  runif(120,  1.7,  20.7),\n  month  =  rep(c(5,6,7,8),30),\n  week  =  sample(1:4,  120,  TRUE)\n)\n\nddply(df,  .(month,  week),  summarize,\n  mean  =  round(mean(x),  2),\n  sd  =  round(sd(x),  2)) \n```", "```py\nIn [25]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 120),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 120),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 120),\n ....:        \"month\": [5, 6, 7, 8] * 30,\n ....:        \"week\": np.random.randint(1, 4, 120),\n ....:    }\n ....: )\n ....: \n\nIn [26]: grouped = df.groupby([\"month\", \"week\"])\n\nIn [27]: grouped[\"x\"].agg([\"mean\", \"std\"])\nOut[27]: \n mean        std\nmonth week \n5     1      63.653367  40.601965\n 2      78.126605  53.342400\n 3      92.091886  57.630110\n6     1      81.747070  54.339218\n 2      70.971205  54.687287\n 3     100.968344  54.010081\n7     1      61.576332  38.844274\n 2      61.733510  48.209013\n 3      71.688795  37.595638\n8     1      62.741922  34.618153\n 2      91.774627  49.790202\n 3      73.936856  60.773900 \n```", "```py\nrequire(plyr)\ndf  <-  data.frame(\n  x  =  runif(120,  1,  168),\n  y  =  runif(120,  7,  334),\n  z  =  runif(120,  1.7,  20.7),\n  month  =  rep(c(5,6,7,8),30),\n  week  =  sample(1:4,  120,  TRUE)\n)\n\nddply(df,  .(month,  week),  summarize,\n  mean  =  round(mean(x),  2),\n  sd  =  round(sd(x),  2)) \n```", "```py\nIn [25]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 120),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 120),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 120),\n ....:        \"month\": [5, 6, 7, 8] * 30,\n ....:        \"week\": np.random.randint(1, 4, 120),\n ....:    }\n ....: )\n ....: \n\nIn [26]: grouped = df.groupby([\"month\", \"week\"])\n\nIn [27]: grouped[\"x\"].agg([\"mean\", \"std\"])\nOut[27]: \n mean        std\nmonth week \n5     1      63.653367  40.601965\n 2      78.126605  53.342400\n 3      92.091886  57.630110\n6     1      81.747070  54.339218\n 2      70.971205  54.687287\n 3     100.968344  54.010081\n7     1      61.576332  38.844274\n 2      61.733510  48.209013\n 3      71.688795  37.595638\n8     1      62.741922  34.618153\n 2      91.774627  49.790202\n 3      73.936856  60.773900 \n```", "```py\na  <-  array(c(1:23,  NA),  c(2,3,4))\ndata.frame(melt(a)) \n```", "```py\nIn [28]: a = np.array(list(range(1, 24)) + [np.NAN]).reshape(2, 3, 4)\n\nIn [29]: pd.DataFrame([tuple(list(x) + [val]) for x, val in np.ndenumerate(a)])\nOut[29]: \n 0  1  2     3\n0   0  0  0   1.0\n1   0  0  1   2.0\n2   0  0  2   3.0\n3   0  0  3   4.0\n4   0  1  0   5.0\n.. .. .. ..   ...\n19  1  1  3  20.0\n20  1  2  0  21.0\n21  1  2  1  22.0\n22  1  2  2  23.0\n23  1  2  3   NaN\n\n[24 rows x 4 columns] \n```", "```py\na  <-  as.list(c(1:4,  NA))\ndata.frame(melt(a)) \n```", "```py\nIn [30]: a = list(enumerate(list(range(1, 5)) + [np.NAN]))\n\nIn [31]: pd.DataFrame(a)\nOut[31]: \n 0    1\n0  0  1.0\n1  1  2.0\n2  2  3.0\n3  3  4.0\n4  4  NaN \n```", "```py\ncheese  <-  data.frame(\n  first  =  c('John',  'Mary'),\n  last  =  c('Doe',  'Bo'),\n  height  =  c(5.5,  6.0),\n  weight  =  c(130,  150)\n)\nmelt(cheese,  id=c(\"first\",  \"last\")) \n```", "```py\nIn [32]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    }\n ....: )\n ....: \n\nIn [33]: pd.melt(cheese, id_vars=[\"first\", \"last\"])\nOut[33]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [34]: cheese.set_index([\"first\", \"last\"]).stack(future_stack=True)  # alternative way\nOut[34]: \nfirst  last \nJohn   Doe   height      5.5\n weight    130.0\nMary   Bo    height      6.0\n weight    150.0\ndtype: float64 \n```", "```py\ndf  <-  data.frame(\n  x  =  runif(12,  1,  168),\n  y  =  runif(12,  7,  334),\n  z  =  runif(12,  1.7,  20.7),\n  month  =  rep(c(5,6,7),4),\n  week  =  rep(c(1,2),  6)\n)\n\nmdf  <-  melt(df,  id=c(\"month\",  \"week\"))\nacast(mdf,  week  ~  month  ~  variable,  mean) \n```", "```py\nIn [35]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 12),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 12),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 12),\n ....:        \"month\": [5, 6, 7] * 4,\n ....:        \"week\": [1, 2] * 6,\n ....:    }\n ....: )\n ....: \n\nIn [36]: mdf = pd.melt(df, id_vars=[\"month\", \"week\"])\n\nIn [37]: pd.pivot_table(\n ....:    mdf,\n ....:    values=\"value\",\n ....:    index=[\"variable\", \"week\"],\n ....:    columns=[\"month\"],\n ....:    aggfunc=\"mean\",\n ....: )\n ....: \nOut[37]: \nmonth                  5           6           7\nvariable week \nx        1     93.888747   98.762034   55.219673\n 2     94.391427   38.112932   83.942781\ny        1     94.306912  279.454811  227.840449\n 2     87.392662  193.028166  173.899260\nz        1     11.016009   10.079307   16.170549\n 2      8.476111   17.638509   19.003494 \n```", "```py\ndf  <-  data.frame(\n  Animal  =  c('Animal1',  'Animal2',  'Animal3',  'Animal2',  'Animal1',\n  'Animal2',  'Animal3'),\n  FeedType  =  c('A',  'B',  'A',  'A',  'B',  'B',  'A'),\n  Amount  =  c(10,  7,  4,  2,  5,  6,  2)\n)\n\ndcast(df,  Animal  ~  FeedType,  sum,  fill=NaN)\n# Alternative method using base R\nwith(df,  tapply(Amount,  list(Animal,  FeedType),  sum)) \n```", "```py\nIn [38]: df = pd.DataFrame(\n ....:    {\n ....:        \"Animal\": [\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:            \"Animal2\",\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:        ],\n ....:        \"FeedType\": [\"A\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\"],\n ....:        \"Amount\": [10, 7, 4, 2, 5, 6, 2],\n ....:    }\n ....: )\n ....: \n\nIn [39]: df.pivot_table(values=\"Amount\", index=\"Animal\", columns=\"FeedType\", aggfunc=\"sum\")\nOut[39]: \nFeedType     A     B\nAnimal \nAnimal1   10.0   5.0\nAnimal2    2.0  13.0\nAnimal3    6.0   NaN \n```", "```py\nIn [40]: df.groupby([\"Animal\", \"FeedType\"])[\"Amount\"].sum()\nOut[40]: \nAnimal   FeedType\nAnimal1  A           10\n B            5\nAnimal2  A            2\n B           13\nAnimal3  A            6\nName: Amount, dtype: int64 \n```", "```py\ncut(c(1,2,3,4,5,6),  3)\nfactor(c(1,2,3,2,2,3)) \n```", "```py\nIn [41]: pd.cut(pd.Series([1, 2, 3, 4, 5, 6]), 3)\nOut[41]: \n0    (0.995, 2.667]\n1    (0.995, 2.667]\n2    (2.667, 4.333]\n3    (2.667, 4.333]\n4      (4.333, 6.0]\n5      (4.333, 6.0]\ndtype: category\nCategories (3, interval[float64, right]): [(0.995, 2.667] < (2.667, 4.333] < (4.333, 6.0]]\n\nIn [42]: pd.Series([1, 2, 3, 2, 2, 3]).astype(\"category\")\nOut[42]: \n0    1\n1    2\n2    3\n3    2\n4    2\n5    3\ndtype: category\nCategories (3, int64): [1, 2, 3] \n```", "```py\na  <-  array(c(1:23,  NA),  c(2,3,4))\ndata.frame(melt(a)) \n```", "```py\nIn [28]: a = np.array(list(range(1, 24)) + [np.NAN]).reshape(2, 3, 4)\n\nIn [29]: pd.DataFrame([tuple(list(x) + [val]) for x, val in np.ndenumerate(a)])\nOut[29]: \n 0  1  2     3\n0   0  0  0   1.0\n1   0  0  1   2.0\n2   0  0  2   3.0\n3   0  0  3   4.0\n4   0  1  0   5.0\n.. .. .. ..   ...\n19  1  1  3  20.0\n20  1  2  0  21.0\n21  1  2  1  22.0\n22  1  2  2  23.0\n23  1  2  3   NaN\n\n[24 rows x 4 columns] \n```", "```py\na  <-  as.list(c(1:4,  NA))\ndata.frame(melt(a)) \n```", "```py\nIn [30]: a = list(enumerate(list(range(1, 5)) + [np.NAN]))\n\nIn [31]: pd.DataFrame(a)\nOut[31]: \n 0    1\n0  0  1.0\n1  1  2.0\n2  2  3.0\n3  3  4.0\n4  4  NaN \n```", "```py\ncheese  <-  data.frame(\n  first  =  c('John',  'Mary'),\n  last  =  c('Doe',  'Bo'),\n  height  =  c(5.5,  6.0),\n  weight  =  c(130,  150)\n)\nmelt(cheese,  id=c(\"first\",  \"last\")) \n```", "```py\nIn [32]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    }\n ....: )\n ....: \n\nIn [33]: pd.melt(cheese, id_vars=[\"first\", \"last\"])\nOut[33]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [34]: cheese.set_index([\"first\", \"last\"]).stack(future_stack=True)  # alternative way\nOut[34]: \nfirst  last \nJohn   Doe   height      5.5\n weight    130.0\nMary   Bo    height      6.0\n weight    150.0\ndtype: float64 \n```", "```py\ndf  <-  data.frame(\n  x  =  runif(12,  1,  168),\n  y  =  runif(12,  7,  334),\n  z  =  runif(12,  1.7,  20.7),\n  month  =  rep(c(5,6,7),4),\n  week  =  rep(c(1,2),  6)\n)\n\nmdf  <-  melt(df,  id=c(\"month\",  \"week\"))\nacast(mdf,  week  ~  month  ~  variable,  mean) \n```", "```py\nIn [35]: df = pd.DataFrame(\n ....:    {\n ....:        \"x\": np.random.uniform(1.0, 168.0, 12),\n ....:        \"y\": np.random.uniform(7.0, 334.0, 12),\n ....:        \"z\": np.random.uniform(1.7, 20.7, 12),\n ....:        \"month\": [5, 6, 7] * 4,\n ....:        \"week\": [1, 2] * 6,\n ....:    }\n ....: )\n ....: \n\nIn [36]: mdf = pd.melt(df, id_vars=[\"month\", \"week\"])\n\nIn [37]: pd.pivot_table(\n ....:    mdf,\n ....:    values=\"value\",\n ....:    index=[\"variable\", \"week\"],\n ....:    columns=[\"month\"],\n ....:    aggfunc=\"mean\",\n ....: )\n ....: \nOut[37]: \nmonth                  5           6           7\nvariable week \nx        1     93.888747   98.762034   55.219673\n 2     94.391427   38.112932   83.942781\ny        1     94.306912  279.454811  227.840449\n 2     87.392662  193.028166  173.899260\nz        1     11.016009   10.079307   16.170549\n 2      8.476111   17.638509   19.003494 \n```", "```py\ndf  <-  data.frame(\n  Animal  =  c('Animal1',  'Animal2',  'Animal3',  'Animal2',  'Animal1',\n  'Animal2',  'Animal3'),\n  FeedType  =  c('A',  'B',  'A',  'A',  'B',  'B',  'A'),\n  Amount  =  c(10,  7,  4,  2,  5,  6,  2)\n)\n\ndcast(df,  Animal  ~  FeedType,  sum,  fill=NaN)\n# Alternative method using base R\nwith(df,  tapply(Amount,  list(Animal,  FeedType),  sum)) \n```", "```py\nIn [38]: df = pd.DataFrame(\n ....:    {\n ....:        \"Animal\": [\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:            \"Animal2\",\n ....:            \"Animal1\",\n ....:            \"Animal2\",\n ....:            \"Animal3\",\n ....:        ],\n ....:        \"FeedType\": [\"A\", \"B\", \"A\", \"A\", \"B\", \"B\", \"A\"],\n ....:        \"Amount\": [10, 7, 4, 2, 5, 6, 2],\n ....:    }\n ....: )\n ....: \n\nIn [39]: df.pivot_table(values=\"Amount\", index=\"Animal\", columns=\"FeedType\", aggfunc=\"sum\")\nOut[39]: \nFeedType     A     B\nAnimal \nAnimal1   10.0   5.0\nAnimal2    2.0  13.0\nAnimal3    6.0   NaN \n```", "```py\nIn [40]: df.groupby([\"Animal\", \"FeedType\"])[\"Amount\"].sum()\nOut[40]: \nAnimal   FeedType\nAnimal1  A           10\n B            5\nAnimal2  A            2\n B           13\nAnimal3  A            6\nName: Amount, dtype: int64 \n```", "```py\ncut(c(1,2,3,4,5,6),  3)\nfactor(c(1,2,3,2,2,3)) \n```", "```py\nIn [41]: pd.cut(pd.Series([1, 2, 3, 4, 5, 6]), 3)\nOut[41]: \n0    (0.995, 2.667]\n1    (0.995, 2.667]\n2    (2.667, 4.333]\n3    (2.667, 4.333]\n4      (4.333, 6.0]\n5      (4.333, 6.0]\ndtype: category\nCategories (3, interval[float64, right]): [(0.995, 2.667] < (2.667, 4.333] < (4.333, 6.0]]\n\nIn [42]: pd.Series([1, 2, 3, 2, 2, 3]).astype(\"category\")\nOut[42]: \n0    1\n1    2\n2    3\n3    2\n4    2\n5    3\ndtype: category\nCategories (3, int64): [1, 2, 3] \n```"]