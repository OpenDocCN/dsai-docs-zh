["```py\nsympy.assumptions.refine.refine(expr, assumptions=True)\n```", "```py\n>>> from sympy import refine, sqrt, Q\n>>> from sympy.abc import x\n>>> refine(sqrt(x**2), Q.real(x))\nAbs(x)\n>>> refine(sqrt(x**2), Q.positive(x))\nx \n```", "```py\n>>> refine(Q.real(x), Q.positive(x))\nTrue\n>>> refine(Q.positive(x), Q.real(x))\nQ.positive(x) \n```", "```py\nsympy.assumptions.refine.refine_Pow(expr, assumptions)\n```", "```py\n>>> from sympy import Q\n>>> from sympy.assumptions.refine import refine_Pow\n>>> from sympy.abc import x,y,z\n>>> refine_Pow((-1)**x, Q.real(x))\n>>> refine_Pow((-1)**x, Q.even(x))\n1\n>>> refine_Pow((-1)**x, Q.odd(x))\n-1 \n```", "```py\n>>> refine_Pow((-1)**(x+y), Q.even(x))\n(-1)**y\n>>> refine_Pow((-1)**(x+y+z), Q.odd(x) & Q.odd(z))\n(-1)**y\n>>> refine_Pow((-1)**(x+y+2), Q.odd(x))\n(-1)**(y + 1)\n>>> refine_Pow((-1)**(x+3), True)\n(-1)**(x + 1) \n```", "```py\nsympy.assumptions.refine.refine_abs(expr, assumptions)\n```", "```py\n>>> from sympy import Q, Abs\n>>> from sympy.assumptions.refine import refine_abs\n>>> from sympy.abc import x\n>>> refine_abs(Abs(x), Q.real(x))\n>>> refine_abs(Abs(x), Q.positive(x))\nx\n>>> refine_abs(Abs(x), Q.negative(x))\n-x \n```", "```py\nsympy.assumptions.refine.refine_arg(expr, assumptions)\n```", "```py\n>>> from sympy.assumptions.refine import refine_arg\n>>> from sympy import Q, arg\n>>> from sympy.abc import x\n>>> refine_arg(arg(x), Q.positive(x))\n0\n>>> refine_arg(arg(x), Q.negative(x))\npi \n```", "```py\nsympy.assumptions.refine.refine_atan2(expr, assumptions)\n```", "```py\n>>> from sympy import Q, atan2\n>>> from sympy.assumptions.refine import refine_atan2\n>>> from sympy.abc import x, y\n>>> refine_atan2(atan2(y,x), Q.real(y) & Q.positive(x))\natan(y/x)\n>>> refine_atan2(atan2(y,x), Q.negative(y) & Q.negative(x))\natan(y/x) - pi\n>>> refine_atan2(atan2(y,x), Q.positive(y) & Q.negative(x))\natan(y/x) + pi\n>>> refine_atan2(atan2(y,x), Q.zero(y) & Q.negative(x))\npi\n>>> refine_atan2(atan2(y,x), Q.positive(y) & Q.zero(x))\npi/2\n>>> refine_atan2(atan2(y,x), Q.negative(y) & Q.zero(x))\n-pi/2\n>>> refine_atan2(atan2(y,x), Q.zero(y) & Q.zero(x))\nnan \n```", "```py\nsympy.assumptions.refine.refine_im(expr, assumptions)\n```", "```py\n>>> from sympy.assumptions.refine import refine_im\n>>> from sympy import Q, im\n>>> from sympy.abc import x\n>>> refine_im(im(x), Q.real(x))\n0\n>>> refine_im(im(x), Q.imaginary(x))\n-I*x \n```", "```py\nsympy.assumptions.refine.refine_matrixelement(expr, assumptions)\n```", "```py\n>>> from sympy.assumptions.refine import refine_matrixelement\n>>> from sympy import MatrixSymbol, Q\n>>> X = MatrixSymbol('X', 3, 3)\n>>> refine_matrixelement(X[0, 1], Q.symmetric(X))\nX[0, 1]\n>>> refine_matrixelement(X[1, 0], Q.symmetric(X))\nX[0, 1] \n```", "```py\nsympy.assumptions.refine.refine_re(expr, assumptions)\n```", "```py\n>>> from sympy.assumptions.refine import refine_re\n>>> from sympy import Q, re\n>>> from sympy.abc import x\n>>> refine_re(re(x), Q.real(x))\nx\n>>> refine_re(re(x), Q.imaginary(x))\n0 \n```", "```py\nsympy.assumptions.refine.refine_sign(expr, assumptions)\n```", "```py\n>>> from sympy.assumptions.refine import refine_sign\n>>> from sympy import Symbol, Q, sign, im\n>>> x = Symbol('x', real = True)\n>>> expr = sign(x)\n>>> refine_sign(expr, Q.positive(x) & Q.nonzero(x))\n1\n>>> refine_sign(expr, Q.negative(x) & Q.nonzero(x))\n-1\n>>> refine_sign(expr, Q.zero(x))\n0\n>>> y = Symbol('y', imaginary = True)\n>>> expr = sign(y)\n>>> refine_sign(expr, Q.positive(im(y)))\nI\n>>> refine_sign(expr, Q.negative(im(y)))\n-I \n```"]