- en: Quickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/quickstart/`](https://docs.ultralytics.com/quickstart/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Install Ultralytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultralytics provides various installation methods including pip, conda, and
    Docker. Install YOLOv8 via the `ultralytics` pip package for the latest stable
    release or by cloning the [Ultralytics GitHub repository](https://github.com/ultralytics/ultralytics)
    for the most up-to-date version. Docker can be used to execute the package in
    an isolated container, avoiding local installation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/_a7cVL9hqnk`](https://www.youtube.com/embed/_a7cVL9hqnk)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Ultralytics YOLO Quick Start Guide'
  prefs: []
  type: TYPE_NORMAL
- en: Install
  prefs: []
  type: TYPE_NORMAL
- en: '![PyPI - Python Version](img/c1c96b5d0d3404f036367589f6993a54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the `ultralytics` package using pip, or update an existing installation
    by running `pip install -U ultralytics`. Visit the Python Package Index (PyPI)
    for more details on the `ultralytics` package: [`pypi.org/project/ultralytics/`](https://pypi.org/project/ultralytics/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![PyPI - Version](https://pypi.org/project/ultralytics/) ![Downloads](https://pepy.tech/project/ultralytics)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also install the `ultralytics` package directly from the GitHub [repository](https://github.com/ultralytics/ultralytics).
    This might be useful if you want the latest development version. Make sure to
    have the Git command-line tool installed on your system. The `@main` command installs
    the `main` branch and may be modified to another branch, i.e. `@my-branch`, or
    removed entirely to default to `main` branch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Conda is an alternative package manager to pip which may also be used for installation.
    Visit Anaconda for more details at [`anaconda.org/conda-forge/ultralytics`](https://anaconda.org/conda-forge/ultralytics).
    Ultralytics feedstock repository for updating the conda package is at [`github.com/conda-forge/ultralytics-feedstock/`](https://github.com/conda-forge/ultralytics-feedstock/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Conda Version](https://anaconda.org/conda-forge/ultralytics) ![Conda Downloads](https://anaconda.org/conda-forge/ultralytics)
    ![Conda Recipe](https://anaconda.org/conda-forge/ultralytics) ![Conda Platforms](https://anaconda.org/conda-forge/ultralytics)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are installing in a CUDA environment best practice is to install `ultralytics`,
    `pytorch` and `pytorch-cuda` in the same command to allow the conda package manager
    to resolve any conflicts, or else to install `pytorch-cuda` last to allow it override
    the CPU-specific `pytorch` package if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Conda Docker Image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics Conda Docker images are also available from [DockerHub](https://hub.docker.com/r/ultralytics/ultralytics).
    These images are based on [Miniconda3](https://docs.conda.io/projects/miniconda/en/latest/)
    and are an simple way to start using `ultralytics` in a Conda environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Clone the `ultralytics` repository if you are interested in contributing to
    the development or wish to experiment with the latest source code. After cloning,
    navigate into the directory and install the package in editable mode `-e` using
    pip.
  prefs: []
  type: TYPE_NORMAL
- en: '![GitHub last commit](https://github.com/ultralytics/ultralytics) ![GitHub
    commit activity](https://github.com/ultralytics/ultralytics)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Utilize Docker to effortlessly execute the `ultralytics` package in an isolated
    container, ensuring consistent and smooth performance across various environments.
    By choosing one of the official `ultralytics` images from [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics),
    you not only avoid the complexity of local installation but also benefit from
    access to a verified working environment. Ultralytics offers 5 main supported
    Docker images, each designed to provide high compatibility and efficiency for
    different platforms and use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Image Version](https://hub.docker.com/r/ultralytics/ultralytics) ![Docker
    Pulls](https://hub.docker.com/r/ultralytics/ultralytics)'
  prefs: []
  type: TYPE_IMG
- en: '**Dockerfile:** GPU image recommended for training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-arm64:** Optimized for ARM64 architecture, allowing deployment
    on devices like Raspberry Pi and other ARM64-based platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-cpu:** Ubuntu-based CPU-only version suitable for inference and
    environments without GPUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-jetson:** Tailored for NVIDIA Jetson devices, integrating GPU
    support optimized for these platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-python:** Minimal image with just Python and necessary dependencies,
    ideal for lightweight applications and development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dockerfile-conda:** Based on Miniconda3 with conda installation of ultralytics
    package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below are the commands to get the latest image and execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The above command initializes a Docker container with the latest `ultralytics`
    image. The `-it` flag assigns a pseudo-TTY and maintains stdin open, enabling
    you to interact with the container. The `--ipc=host` flag sets the IPC (Inter-Process
    Communication) namespace to the host, which is essential for sharing memory between
    processes. The `--gpus all` flag enables access to all available GPUs inside the
    container, which is crucial for tasks that require GPU computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: To work with files on your local machine within the container, use Docker
    volumes for mounting a local directory into the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Alter `/path/on/host` with the directory path on your local machine, and `/path/in/container`
    with the desired path inside the Docker container for accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: For advanced Docker usage, feel free to explore the Ultralytics Docker Guide.
  prefs: []
  type: TYPE_NORMAL
- en: See the `ultralytics` [pyproject.toml](https://github.com/ultralytics/ultralytics/blob/main/pyproject.toml)
    file for a list of dependencies. Note that all examples above install all required
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch requirements vary by operating system and CUDA requirements, so it's
    recommended to install PyTorch first following instructions at [`pytorch.org/get-started/locally`](https://pytorch.org/get-started/locally).
  prefs: []
  type: TYPE_NORMAL
- en: '![PyTorch Installation Instructions](https://pytorch.org/get-started/locally/)'
  prefs: []
  type: TYPE_IMG
- en: Use Ultralytics with CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ultralytics command line interface (CLI) allows for simple single-line commands
    without the need for a Python environment. CLI requires no customization or Python
    code. You can simply run all tasks from the terminal with the `yolo` command.
    Check out the CLI Guide to learn more about using YOLOv8 from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultralytics `yolo` commands use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`TASK` (optional) is one of (detect, segment, classify, pose, obb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MODE` (required) is one of (train, val, predict, export, track, benchmark)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARGS` (optional) are `arg=value` pairs like `imgsz=640` that override defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See all `ARGS` in the full Configuration Guide or with the `yolo cfg` CLI command.
  prefs: []
  type: TYPE_NORMAL
- en: Train a detection model for 10 epochs with an initial learning_rate of 0.01
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Predict a YouTube video using a pretrained segmentation model at image size
    320:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Val a pretrained detection model at batch-size 1 and image size 640:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Export a YOLOv8n classification model to ONNX format at image size 224 by 128
    (no TASK required)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run special commands to see version, view settings, run checks and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Arguments must be passed as `arg=val` pairs, split by an equals `=` sign and
    delimited by spaces between pairs. Do not use `--` argument prefixes or commas
    `,` between arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '`yolo predict model=yolov8n.pt imgsz=640 conf=0.25` ✅'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yolo predict model yolov8n.pt imgsz 640 conf 0.25` ❌ (missing `=`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yolo predict model=yolov8n.pt, imgsz=640, conf=0.25` ❌ (do not use `,`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yolo predict --model yolov8n.pt --imgsz 640 --conf 0.25` ❌ (do not use `--`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI Guide
  prefs: []
  type: TYPE_NORMAL
- en: Use Ultralytics with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YOLOv8's Python interface allows for seamless integration into your Python projects,
    making it easy to load, run, and process the model's output. Designed with simplicity
    and ease of use in mind, the Python interface enables users to quickly implement
    object detection, segmentation, and classification in their projects. This makes
    YOLOv8's Python interface an invaluable tool for anyone looking to incorporate
    these functionalities into their Python projects.
  prefs: []
  type: TYPE_NORMAL
- en: For example, users can load a model, train it, evaluate its performance on a
    validation set, and even export it to ONNX format with just a few lines of code.
    Check out the Python Guide to learn more about using YOLOv8 within your Python
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Python Guide
  prefs: []
  type: TYPE_NORMAL
- en: Ultralytics Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ultralytics library provides a powerful settings management system to enable
    fine-grained control over your experiments. By making use of the `SettingsManager`
    housed within the `ultralytics.utils` module, users can readily access and alter
    their settings. These are stored in a YAML file and can be viewed or modified
    either directly within the Python environment or via the Command-Line Interface
    (CLI).
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting Settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To gain insight into the current configuration of your settings, you can view
    them directly:'
  prefs: []
  type: TYPE_NORMAL
- en: View settings
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use Python to view your settings. Start by importing the `settings`
    object from the `ultralytics` module. Print and return settings using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the command-line interface allows you to check your settings
    with a simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Modifying Settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ultralytics allows users to easily modify their settings. Changes can be performed
    in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Update settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Python environment, call the `update` method on the `settings` object
    to change your settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer using the command-line interface, the following commands will
    allow you to modify your settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Understanding Settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The table below provides an overview of the settings available for adjustment
    within Ultralytics. Each setting is outlined along with an example value, the
    data type, and a brief description.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Example Value | Data Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `settings_version` | `''0.0.4''` | `str` | Ultralytics *settings* version
    (different from Ultralytics [pip](https://pypi.org/project/ultralytics/) version)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `datasets_dir` | `''/path/to/datasets''` | `str` | The directory where the
    datasets are stored |'
  prefs: []
  type: TYPE_TB
- en: '| `weights_dir` | `''/path/to/weights''` | `str` | The directory where the
    model weights are stored |'
  prefs: []
  type: TYPE_TB
- en: '| `runs_dir` | `''/path/to/runs''` | `str` | The directory where the experiment
    runs are stored |'
  prefs: []
  type: TYPE_TB
- en: '| `uuid` | `''a1b2c3d4''` | `str` | The unique identifier for the current settings
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sync` | `True` | `bool` | Whether to sync analytics and crashes to HUB |'
  prefs: []
  type: TYPE_TB
- en: '| `api_key` | `''''` | `str` | Ultralytics HUB [API Key](https://hub.ultralytics.com/settings?tab=api+keys)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `clearml` | `True` | `bool` | Whether to use ClearML logging |'
  prefs: []
  type: TYPE_TB
- en: '| `comet` | `True` | `bool` | Whether to use [Comet ML](https://bit.ly/yolov8-readme-comet)
    for experiment tracking and visualization |'
  prefs: []
  type: TYPE_TB
- en: '| `dvc` | `True` | `bool` | Whether to use [DVC for experiment tracking](https://dvc.org/doc/dvclive/ml-frameworks/yolo)
    and version control |'
  prefs: []
  type: TYPE_TB
- en: '| `hub` | `True` | `bool` | Whether to use [Ultralytics HUB](https://hub.ultralytics.com)
    integration |'
  prefs: []
  type: TYPE_TB
- en: '| `mlflow` | `True` | `bool` | Whether to use MLFlow for experiment tracking
    |'
  prefs: []
  type: TYPE_TB
- en: '| `neptune` | `True` | `bool` | Whether to use Neptune for experiment tracking
    |'
  prefs: []
  type: TYPE_TB
- en: '| `raytune` | `True` | `bool` | Whether to use Ray Tune for hyperparameter
    tuning |'
  prefs: []
  type: TYPE_TB
- en: '| `tensorboard` | `True` | `bool` | Whether to use TensorBoard for visualization
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wandb` | `True` | `bool` | Whether to use Weights & Biases logging |'
  prefs: []
  type: TYPE_TB
- en: As you navigate through your projects or experiments, be sure to revisit these
    settings to ensure that they are optimally configured for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I install Ultralytics YOLOv8 using pip?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install Ultralytics YOLOv8 with pip, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: For the latest stable release, this will install the `ultralytics` package directly
    from the Python Package Index (PyPI). For more details, visit the [ultralytics
    package on PyPI](https://pypi.org/project/ultralytics/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can install the latest development version directly from
    GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to have the Git command-line tool installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Can I install Ultralytics YOLOv8 using conda?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yes, you can install Ultralytics YOLOv8 using conda by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is an excellent alternative to pip and ensures compatibility with
    other packages in your environment. For CUDA environments, it''s best to install
    `ultralytics`, `pytorch`, and `pytorch-cuda` simultaneously to resolve any conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: For more instructions, visit the Conda quickstart guide.
  prefs: []
  type: TYPE_NORMAL
- en: What are the advantages of using Docker to run Ultralytics YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using Docker to run Ultralytics YOLOv8 provides an isolated and consistent
    environment, ensuring smooth performance across different systems. It also eliminates
    the complexity of local installation. Official Docker images from Ultralytics
    are available on [Docker Hub](https://hub.docker.com/r/ultralytics/ultralytics),
    with different variants tailored for GPU, CPU, ARM64, NVIDIA Jetson, and Conda
    environments. Below are the commands to pull and run the latest image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For more detailed Docker instructions, check out the Docker quickstart guide.
  prefs: []
  type: TYPE_NORMAL
- en: How do I clone the Ultralytics repository for development?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To clone the Ultralytics repository and set up a development environment, use
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This approach allows you to contribute to the project or experiment with the
    latest source code. For more details, visit the [Ultralytics GitHub repository](https://github.com/ultralytics/ultralytics).
  prefs: []
  type: TYPE_NORMAL
- en: Why should I use Ultralytics YOLOv8 CLI?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ultralytics YOLOv8 command line interface (CLI) simplifies running object
    detection tasks without requiring Python code. You can execute single-line commands
    for tasks like training, validation, and prediction straight from your terminal.
    The basic syntax for `yolo` commands is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to train a detection model with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Check out the full CLI Guide to explore more commands and usage examples.
  prefs: []
  type: TYPE_NORMAL
