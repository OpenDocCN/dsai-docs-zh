["```py\nclass sympy.geometry.entity.GeometryEntity(*args, **kwargs)\n```", "```py\nproperty ambient_dimension\n```", "```py\nproperty bounds\n```", "```py\nencloses(o)\n```", "```py\n>>> from sympy import RegularPolygon, Point, Polygon\n>>> t  = Polygon(*RegularPolygon(Point(0, 0), 1, 3).vertices)\n>>> t2 = Polygon(*RegularPolygon(Point(0, 0), 2, 3).vertices)\n>>> t2.encloses(t)\nTrue\n>>> t.encloses(t2)\nFalse \n```", "```py\nintersection(o)\n```", "```py\nis_similar(other)\n```", "```py\nparameter_value(other, t)\n```", "```py\n>>> from sympy import Line, Point\n>>> from sympy.abc import t\n>>> a = Point(0, 0)\n>>> b = Point(2, 2)\n>>> Line(a, b).parameter_value((1, 1), t)\n{t: 1/2}\n>>> Line(a, b).arbitrary_point(t).subs(_)\nPoint2D(1, 1) \n```", "```py\nreflect(line)\n```", "```py\n>>> from sympy import pi, sqrt, Line, RegularPolygon\n>>> l = Line((0, pi), slope=sqrt(2))\n>>> pent = RegularPolygon((1, 2), 1, 5)\n>>> rpent = pent.reflect(l)\n>>> rpent\nRegularPolygon(Point2D(-2*sqrt(2)*pi/3 - 1/3 + 4*sqrt(2)/3, 2/3 + 2*sqrt(2)/3 + 2*pi/3), -1, 5, -atan(2*sqrt(2)) + 3*pi/5) \n```", "```py\n>>> from sympy import pi, Line, Circle, Point\n>>> l = Line((0, pi), slope=1)\n>>> circ = Circle(Point(0, 0), 5)\n>>> rcirc = circ.reflect(l)\n>>> rcirc\nCircle(Point2D(-pi, pi), -5) \n```", "```py\nrotate(angle, pt=None)\n```", "```py\n>>> from sympy import Point, RegularPolygon, Polygon, pi\n>>> t = Polygon(*RegularPolygon(Point(0, 0), 1, 3).vertices)\n>>> t # vertex on x axis\nTriangle(Point2D(1, 0), Point2D(-1/2, sqrt(3)/2), Point2D(-1/2, -sqrt(3)/2))\n>>> t.rotate(pi/2) # vertex on y axis now\nTriangle(Point2D(0, 1), Point2D(-sqrt(3)/2, -1/2), Point2D(sqrt(3)/2, -1/2)) \n```", "```py\nscale(x=1, y=1, pt=None)\n```", "```py\n>>> from sympy import RegularPolygon, Point, Polygon\n>>> t = Polygon(*RegularPolygon(Point(0, 0), 1, 3).vertices)\n>>> t\nTriangle(Point2D(1, 0), Point2D(-1/2, sqrt(3)/2), Point2D(-1/2, -sqrt(3)/2))\n>>> t.scale(2)\nTriangle(Point2D(2, 0), Point2D(-1, sqrt(3)/2), Point2D(-1, -sqrt(3)/2))\n>>> t.scale(2, 2)\nTriangle(Point2D(2, 0), Point2D(-1, sqrt(3)), Point2D(-1, -sqrt(3))) \n```", "```py\ntranslate(x=0, y=0)\n```", "```py\n>>> from sympy import RegularPolygon, Point, Polygon\n>>> t = Polygon(*RegularPolygon(Point(0, 0), 1, 3).vertices)\n>>> t\nTriangle(Point2D(1, 0), Point2D(-1/2, sqrt(3)/2), Point2D(-1/2, -sqrt(3)/2))\n>>> t.translate(2)\nTriangle(Point2D(3, 0), Point2D(3/2, sqrt(3)/2), Point2D(3/2, -sqrt(3)/2))\n>>> t.translate(2, 2)\nTriangle(Point2D(3, 2), Point2D(3/2, sqrt(3)/2 + 2), Point2D(3/2, 2 - sqrt(3)/2)) \n```"]