- en: scipy.optimize.leastsq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.leastsq.html#scipy.optimize.leastsq](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.leastsq.html#scipy.optimize.leastsq)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Minimize the sum of squares of a set of equations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Should take at least one (possibly length `N` vector) argument and returns `M`
    floating point numbers. It must not return NaNs or fitting might fail. `M` must
    be greater than or equal to `N`.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The starting estimate for the minimization.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any extra arguments to func are placed in this tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dfun**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A function or method to compute the Jacobian of func with derivatives across
    the rows. If this is None, the Jacobian will be estimated.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, return all optional outputs (not just *x* and *ier*).
  prefs: []
  type: TYPE_NORMAL
- en: '**col_deriv**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, specify that the Jacobian function computes derivatives down the
    columns (faster, because there is no transpose operation).
  prefs: []
  type: TYPE_NORMAL
- en: '**ftol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative error desired in the sum of squares.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative error desired in the approximate solution.
  prefs: []
  type: TYPE_NORMAL
- en: '**gtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Orthogonality desired between the function vector and the columns of the Jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfev**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of calls to the function. If *Dfun* is provided, then the
    default *maxfev* is 100*(N+1) where N is the number of elements in x0, otherwise
    the default *maxfev* is 200*(N+1).
  prefs: []
  type: TYPE_NORMAL
- en: '**epsfcn**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A variable used in determining a suitable step length for the forward- difference
    approximation of the Jacobian (for Dfun=None). Normally the actual step length
    will be sqrt(epsfcn)*x If epsfcn is less than the machine precision, it is assumed
    that the relative errors are of the order of the machine precision.
  prefs: []
  type: TYPE_NORMAL
- en: '**factor**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A parameter determining the initial step bound (`factor * || diag * x||`). Should
    be in interval `(0.1, 100)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**diag**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: N positive entries that serve as a scale factors for the variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The solution (or the result of the last iteration for an unsuccessful call).
  prefs: []
  type: TYPE_NORMAL
- en: '**cov_x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the Hessian. *fjac* and *ipvt* are used to construct an estimate
    of the Hessian. A value of None indicates a singular matrix, which means the curvature
    in parameters *x* is numerically flat. To obtain the covariance matrix of the
    parameters *x*, *cov_x* must be multiplied by the variance of the residuals –
    see curve_fit. Only returned if *full_output* is `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**infodict**dict'
  prefs: []
  type: TYPE_NORMAL
- en: 'a dictionary of optional outputs with the keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nfev`'
  prefs: []
  type: TYPE_NORMAL
- en: The number of function calls
  prefs: []
  type: TYPE_NORMAL
- en: '`fvec`'
  prefs: []
  type: TYPE_NORMAL
- en: The function evaluated at the output
  prefs: []
  type: TYPE_NORMAL
- en: '`fjac`'
  prefs: []
  type: TYPE_NORMAL
- en: A permutation of the R matrix of a QR factorization of the final approximate
    Jacobian matrix, stored column wise. Together with ipvt, the covariance of the
    estimate can be approximated.
  prefs: []
  type: TYPE_NORMAL
- en: '`ipvt`'
  prefs: []
  type: TYPE_NORMAL
- en: An integer array of length N which defines a permutation matrix, p, such that
    fjac*p = q*r, where r is upper triangular with diagonal elements of nonincreasing
    magnitude. Column j of p is column ipvt(j) of the identity matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '`qtf`'
  prefs: []
  type: TYPE_NORMAL
- en: The vector (transpose(q) * fvec).
  prefs: []
  type: TYPE_NORMAL
- en: Only returned if *full_output* is `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**mesg**str'
  prefs: []
  type: TYPE_NORMAL
- en: A string message giving information about the cause of failure. Only returned
    if *full_output* is `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**ier**int'
  prefs: []
  type: TYPE_NORMAL
- en: An integer flag. If it is equal to 1, 2, 3 or 4, the solution was found. Otherwise,
    the solution was not found. In either case, the optional output variable ‘mesg’
    gives more information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`least_squares`](scipy.optimize.least_squares.html#scipy.optimize.least_squares
    "scipy.optimize.least_squares")'
  prefs: []
  type: TYPE_NORMAL
- en: Newer interface to solve nonlinear least-squares problems with bounds on the
    variables. See `method='lm'` in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: “leastsq” is a wrapper around MINPACK’s lmdif and lmder algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: cov_x is a Jacobian approximation to the Hessian of the least squares objective
    function. This approximation assumes that the objective function is based on the
    difference between some observed target data (ydata) and a (non-linear) function
    of the parameters *f(xdata, params)*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: so that the objective function is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The solution, *x*, is always a 1-D array, regardless of the shape of *x0*, or
    whether *x0* is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
