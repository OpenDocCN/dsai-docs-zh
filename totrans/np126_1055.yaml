- en: Global state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/global_state.html](https://numpy.org/doc/1.26/reference/global_state.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NumPy has a few import-time, compile-time, or runtime options which change the
    global behaviour. Most of these are related to performance or for debugging purposes
    and will not be interesting to the vast majority of users.
  prefs: []
  type: TYPE_NORMAL
- en: Performance-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Number of threads used for Linear Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  prefs: []
  type: TYPE_NORMAL
- en: Madvise Hugepage on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  prefs: []
  type: TYPE_NORMAL
- en: SIMD feature selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  prefs: []
  type: TYPE_NORMAL
- en: Debugging-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Relaxed strides checking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *compile-time* environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Warn if no memory allocation policy when deallocating data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing planned future behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy has some code paths which are planned to be activated in the future but
    are not yet the default behavior. You can try testing some of these which may
    be shipped with a new “major” release (NumPy 2.0) by setting an environment before
    importing NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: NPY_NUMPY_2_BEHAVIOR=1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By default this will also activate the [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)") related setting `NPY_PROMOTION_STATE` (please
    see the NEP for details on this).
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.25.2: This variable is only checked on the first import.'
  prefs: []
  type: TYPE_NORMAL
- en: Performance-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Number of threads used for Linear Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  prefs: []
  type: TYPE_NORMAL
- en: Madvise Hugepage on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  prefs: []
  type: TYPE_NORMAL
- en: SIMD feature selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  prefs: []
  type: TYPE_NORMAL
- en: Number of threads used for Linear Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  prefs: []
  type: TYPE_NORMAL
- en: Madvise Hugepage on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  prefs: []
  type: TYPE_NORMAL
- en: SIMD feature selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  prefs: []
  type: TYPE_NORMAL
- en: Debugging-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Relaxed strides checking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *compile-time* environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Warn if no memory allocation policy when deallocating data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  prefs: []
  type: TYPE_NORMAL
- en: Relaxed strides checking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *compile-time* environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Warn if no memory allocation policy when deallocating data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing planned future behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy has some code paths which are planned to be activated in the future but
    are not yet the default behavior. You can try testing some of these which may
    be shipped with a new “major” release (NumPy 2.0) by setting an environment before
    importing NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: NPY_NUMPY_2_BEHAVIOR=1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By default this will also activate the [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)") related setting `NPY_PROMOTION_STATE` (please
    see the NEP for details on this).
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.25.2: This variable is only checked on the first import.'
  prefs: []
  type: TYPE_NORMAL
