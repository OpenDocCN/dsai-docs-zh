- en: pandas.core.groupby.SeriesGroupBy.fillna
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.fillna.html](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.fillna.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Fill NA/NaN values using the specified method within groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.2.0: This method is deprecated and will be removed
    in a future version. Use the [`SeriesGroupBy.ffill()`](pandas.core.groupby.SeriesGroupBy.ffill.html#pandas.core.groupby.SeriesGroupBy.ffill
    "pandas.core.groupby.SeriesGroupBy.ffill") or [`SeriesGroupBy.bfill()`](pandas.core.groupby.SeriesGroupBy.bfill.html#pandas.core.groupby.SeriesGroupBy.bfill
    "pandas.core.groupby.SeriesGroupBy.bfill") for forward or backward filling instead.
    If you want to fill with a single value, use `Series.fillna()` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value**scalar, dict, Series, or DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Value to use to fill holes (e.g. 0), alternately a dict/Series/DataFrame of
    values specifying which value to use for each index (for a Series) or column (for
    a DataFrame). Values not in the dict/Series/DataFrame will not be filled. This
    value cannot be a list. Users wanting to use the `value` argument and not `method`
    should prefer [`Series.fillna()`](pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") as this will produce the same result and be more performant.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{{‘bfill’, ‘ffill’, None}}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Method to use for filling holes. `'ffill'` will propagate the last valid observation
    forward within a group. `'bfill'` will use next valid observation to fill the
    gap.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}'
  prefs: []
  type: TYPE_NORMAL
- en: Unused, only for compatibility with [`DataFrameGroupBy.fillna()`](pandas.core.groupby.DataFrameGroupBy.fillna.html#pandas.core.groupby.DataFrameGroupBy.fillna
    "pandas.core.groupby.DataFrameGroupBy.fillna").
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Broken. Do not set to True.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If method is specified, this is the maximum number of consecutive NaN values
    to forward/backward fill within a group. In other words, if there is a gap with
    more than this number of consecutive NaNs, it will only be partially filled. If
    method is not specified, this is the maximum number of entries along the entire
    axis where NaNs will be filled. Must be greater than 0 if not None.
  prefs: []
  type: TYPE_NORMAL
- en: '**downcast**dict, default is None'
  prefs: []
  type: TYPE_NORMAL
- en: A dict of item->dtype of what to downcast if possible, or the string ‘infer’
    which will try to downcast to an appropriate equal type (e.g. float64 to int64
    if possible).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series
  prefs: []
  type: TYPE_NORMAL
- en: Object with missing values filled within groups.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ffill`](pandas.core.groupby.SeriesGroupBy.ffill.html#pandas.core.groupby.SeriesGroupBy.ffill
    "pandas.core.groupby.SeriesGroupBy.ffill")'
  prefs: []
  type: TYPE_NORMAL
- en: Forward fill values within a group.
  prefs: []
  type: TYPE_NORMAL
- en: '[`bfill`](pandas.core.groupby.SeriesGroupBy.bfill.html#pandas.core.groupby.SeriesGroupBy.bfill
    "pandas.core.groupby.SeriesGroupBy.bfill")'
  prefs: []
  type: TYPE_NORMAL
- en: Backward fill values within a group.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For SeriesGroupBy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
