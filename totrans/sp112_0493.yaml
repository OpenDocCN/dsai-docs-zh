- en: scipy.optimize.broyden2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.broyden2.html#scipy.optimize.broyden2](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.broyden2.html#scipy.optimize.broyden2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find a root of a function, using Broyden’s second Jacobian approximation.
  prefs: []
  type: TYPE_NORMAL
- en: This method is also known as “Broyden’s bad method”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**F**function(x) -> f'
  prefs: []
  type: TYPE_NORMAL
- en: Function whose root to find; should take and return an array-like object.
  prefs: []
  type: TYPE_NORMAL
- en: '**xin**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess for the solution
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess for the Jacobian is `(-1/alpha)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**reduction_method**str or tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Method used in ensuring that the rank of the Broyden matrix stays low. Can either
    be a string giving the name of the method, or a tuple of the form `(method, param1,
    param2, ...)` that gives the name of the method and values for additional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`restart`: drop all matrix columns. Has no extra parameters.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`simple`: drop oldest matrix column. Has no extra parameters.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`svd`: keep only the most significant SVD components. Takes an extra parameter,
    `to_retain`, which determines the number of SVD components to retain when rank
    reduction is done. Default is `max_rank - 2`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_rank**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum rank for the Broyden matrix. Default is infinity (i.e., no rank reduction).
  prefs: []
  type: TYPE_NORMAL
- en: '**iter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterations to make. If omitted (default), make as many as required
    to meet tolerances.
  prefs: []
  type: TYPE_NORMAL
- en: '**verbose**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Print status to stdout on every iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to make. If more are needed to meet convergence,
    *NoConvergence* is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**f_tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6.
  prefs: []
  type: TYPE_NORMAL
- en: '**f_rtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative tolerance for the residual. If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**x_tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute minimum step size, as determined from the Jacobian approximation. If
    the step size is smaller than this, optimization is terminated as successful.
    If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**x_rtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative minimum step size. If omitted, not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol_norm**function(vector) -> scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Norm to use in convergence check. Default is the maximum norm.
  prefs: []
  type: TYPE_NORMAL
- en: '**line_search**{None, ‘armijo’ (default), ‘wolfe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Which type of a line search to use to determine the step size in the direction
    given by the Jacobian approximation. Defaults to ‘armijo’.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**function, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional callback function. It is called on every iteration as `callback(x,
    f)` where *x* is the current solution and *f* the corresponding residual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sol**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array (of similar array type as *x0*) containing the final solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: NoConvergence
  prefs: []
  type: TYPE_NORMAL
- en: When a solution was not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to root finding algorithms for multivariate functions. See `method='broyden2'`
    in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm implements the inverse Jacobian Quasi-Newton update
  prefs: []
  type: TYPE_NORMAL
- en: \[H_+ = H + (dx - H df) df^\dagger / ( df^\dagger df)\]
  prefs: []
  type: TYPE_NORMAL
- en: corresponding to Broyden’s second method.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: B.A. van der Rotten, PhD thesis, “A limited memory Broyden method to solve high-dimensional
    systems of nonlinear equations”. Mathematisch Instituut, Universiteit Leiden,
    The Netherlands (2003).
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf](https://web.archive.org/web/20161022015821/http://www.math.leidenuniv.nl/scripties/Rotten.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The following functions define a system of nonlinear equations
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A solution can be obtained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
