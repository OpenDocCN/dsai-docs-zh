- en: NumPy benchmarks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 基准测试
- en: 原文：[https://numpy.org/doc/1.26/benchmarking.html](https://numpy.org/doc/1.26/benchmarking.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/1.26/benchmarking.html](https://numpy.org/doc/1.26/benchmarking.html)'
- en: Benchmarking NumPy with Airspeed Velocity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Airspeed Velocity 对 NumPy 进行基准测试。
- en: Usage
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: Airspeed Velocity manages building and Python virtualenvs by itself, unless
    told otherwise. To run the benchmarks, you do not need to install a development
    version of NumPy to your current Python environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Airspeed Velocity可以自行构建和管理 Python 虚拟环境，除非另行指定。要运行基准测试，不需要将 NumPy 的开发版本安装到当前的
    Python 环境中。
- en: 'Before beginning, ensure that *airspeed velocity* is installed. By default,
    *asv* ships with support for anaconda and virtualenv:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保已安装 *airspeed velocity*。默认情况下，*asv* 预先支持 anaconda 和 virtualenv：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After contributing new benchmarks, you should test them locally before submitting
    a pull request.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在贡献新的基准后，你应该先在本地测试，然后再提交拉取请求。
- en: 'To run all benchmarks, navigate to the root NumPy directory at the command
    line and execute:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行所有基准测试，只需转到命令行中的 NumPy 根目录并执行：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This builds NumPy and runs all available benchmarks defined in `benchmarks/`.
    (Note: this could take a while. Each benchmark is run multiple times to measure
    the distribution in execution times.)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建NumPy，并运行在 `benchmarks/` 中定义的所有可用基准测试。（注意：这可能需要一些时间。为了测量执行时间的分布，每个基准测试会运行多次。）
- en: 'For **testing** benchmarks locally, it may be better to run these without replications:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本地测试基准，最好不带复制地运行这些：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Where the regular expression used to match benchmarks is stored in `$REGEXP`,
    and *–quick* is used to avoid repetitions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式用于匹配基准的存储在 `$REGEXP` 中，而 *–quick* 用于避免重复。
- en: 'To run benchmarks from a particular benchmark module, such as `bench_core.py`,
    simply append the filename without the extension:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要从特定的基准模块，比如 `bench_core.py`，运行基准测试，只需在文件名后面添加无扩展名的文件名即可：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To run a benchmark defined in a class, such as `MeshGrid` from `bench_creation.py`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行在类中定义的基准，比如 `bench_creation.py` 中的 `MeshGrid`：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compare changes in benchmark results to another version/commit/branch, use
    the `--compare` option (or the equivalent `-c`):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要将基准测试结果的变化与另一个版本/提交/分支进行比较，使用 `--compare` 选项（或等价的 `-c`）：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All of the commands above display the results in plain text in the console,
    and the results are not saved for comparison with future commits. For greater
    control, a graphical view, and to have results saved for future comparison you
    can run ASV commands (record results and generate HTML):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有命令都会在控制台中以纯文本形式显示结果，并且结果不会被保存以便与将来的提交进行比较。为了更好地控制，实现图形化视图，并且将结果保存以便将来比较，可以运行
    ASV 命令（记录结果并生成 HTML）：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: More on how to use `asv` can be found in [ASV documentation](https://asv.readthedocs.io/)
    Command-line help is available as usual via `asv --help` and `asv run --help`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于如何使用 `asv` 的信息可以在[ASV文档](https://asv.readthedocs.io/)中找到。像往常一样，可以通过 `asv
    --help` 和 `asv run --help` 获取命令行帮助。
- en: Benchmarking versions
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本基准测试
- en: 'To benchmark or visualize only releases on different machines locally, the
    tags with their commits can be generated, before being run with `asv`, that is:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不同的本地机器上仅对发布进行基准测试或进行可视化，可以先生成带有其提交的标签，然后使用 `asv` 运行，即：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For details on contributing these, see the [benchmark results repository](https://github.com/HaoZeke/asv-numpy).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关贡献这些的详细信息，请参阅[基准测试结果存储库](https://github.com/HaoZeke/asv-numpy)。
- en: Writing benchmarks
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基准测试
- en: See [ASV documentation](https://asv.readthedocs.io/) for basics on how to write
    benchmarks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ASV文档](https://asv.readthedocs.io/)，了解如何编写基准的基本知识。
- en: 'Some things to consider:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一些需要考虑的事项：
- en: The benchmark suite should be importable with any NumPy version.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准套件应该可以与任何 NumPy 版本一起使用。
- en: The benchmark parameters etc. should not depend on which NumPy version is installed.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准参数等不应取决于安装了哪个 NumPy 版本。
- en: Try to keep the runtime of the benchmark reasonable.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量保持基准的运行时间合理。
- en: Prefer ASV’s `time_` methods for benchmarking times rather than cooking up time
    measurements via `time.clock`, even if it requires some juggling when writing
    the benchmark.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好使用 ASV 的 `time_` 方法来进行基准测试时间，而不是通过 `time.clock` 自己测量时间，即使在编写基准时需要做一些调整。
- en: Preparing arrays etc. should generally be put in the `setup` method rather than
    the `time_` methods, to avoid counting preparation time together with the time
    of the benchmarked operation.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，应该将数组等准备工作放在`setup`方法中而不是`时间_`方法中，以避免预备时间和基准操作的时间被计算在一起。
- en: Be mindful that large arrays created with `np.empty` or `np.zeros` might not
    be allocated in physical memory until the memory is accessed. If this is desired
    behaviour, make sure to comment it in your setup function. If you are benchmarking
    an algorithm, it is unlikely that a user will be executing said algorithm on a
    newly created empty/zero array. One can force pagefaults to occur in the setup
    phase either by calling `np.ones` or `arr.fill(value)` after creating the array,
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，使用 `np.empty` 或 `np.zeros` 创建的大型数组可能不会被分配到物理内存中，直到内存被访问。如果希望实现这种行为，请确保在设置函数中将其注释。如果正在进行算法基准测试，用户不太可能在新创建的空/零数组上执行该算法。可以通过在创建数组后调用
    `np.ones` 或 `arr.fill(value)` 来强制发生页错误。
- en: Usage
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: Airspeed Velocity manages building and Python virtualenvs by itself, unless
    told otherwise. To run the benchmarks, you do not need to install a development
    version of NumPy to your current Python environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则 Airspeed Velocity 会自行管理构建和 Python 虚拟环境。要运行基准测试，您无需将 NumPy 的开发版安装到当前的
    Python 环境中。
- en: 'Before beginning, ensure that *airspeed velocity* is installed. By default,
    *asv* ships with support for anaconda and virtualenv:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保已安装 *airspeed velocity*。默认情况下，*asv* 支持 anaconda 和 virtualenv：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After contributing new benchmarks, you should test them locally before submitting
    a pull request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在贡献新的基准测试之前，应在本地测试它们，然后再提交拉取请求。
- en: 'To run all benchmarks, navigate to the root NumPy directory at the command
    line and execute:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行所有基准测试，转到命令行处的根 NumPy 目录并执行：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This builds NumPy and runs all available benchmarks defined in `benchmarks/`.
    (Note: this could take a while. Each benchmark is run multiple times to measure
    the distribution in execution times.)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建 NumPy 并运行 `benchmarks/` 中定义的所有可用的基准测试。（注意：这可能需要一段时间。每个基准测试运行多次以测量执行时间的分布。）
- en: 'For **testing** benchmarks locally, it may be better to run these without replications:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**测试**基准测试，最好在没有重复情况下运行这些基准测试：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Where the regular expression used to match benchmarks is stored in `$REGEXP`,
    and *–quick* is used to avoid repetitions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式用于匹配基准测试的 `$REGEXP` 存储，并使用 *–quick* 避免重复。
- en: 'To run benchmarks from a particular benchmark module, such as `bench_core.py`,
    simply append the filename without the extension:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要从特定的基准测试模块（如 `bench_core.py`）运行基准测试，只需附加不带扩展名的文件名：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To run a benchmark defined in a class, such as `MeshGrid` from `bench_creation.py`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行在类中定义的基准测试（如 `bench_creation.py` 中的 `MeshGrid`）：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Compare changes in benchmark results to another version/commit/branch, use
    the `--compare` option (or the equivalent `-c`):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要将基准测试结果与另一个版本/提交/分支进行比较，请使用 `--compare` 选项（或等效的 `-c`）：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'All of the commands above display the results in plain text in the console,
    and the results are not saved for comparison with future commits. For greater
    control, a graphical view, and to have results saved for future comparison you
    can run ASV commands (record results and generate HTML):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有命令在控制台以纯文本形式显示结果，并且结果不会保存以便与将来的提交进行比较。为了更好地控制和进行图形化查看，并且为将来的比较而保存结果，您可以运行
    ASV 命令（记录结果并生成 HTML）：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: More on how to use `asv` can be found in [ASV documentation](https://asv.readthedocs.io/)
    Command-line help is available as usual via `asv --help` and `asv run --help`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用 `asv` 的更多信息，请参阅 [ASV 文档](https://asv.readthedocs.io/)。还可以通过 `asv --help`
    和 `asv run --help` 来获取命令行帮助。
- en: Benchmarking versions
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基准测试版本
- en: 'To benchmark or visualize only releases on different machines locally, the
    tags with their commits can be generated, before being run with `asv`, that is:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在本地仅对不同计算机上的发布进行基准测试或可视化，可以先生成带有它们的提交的标签，然后再用 `asv` 运行：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For details on contributing these, see the [benchmark results repository](https://github.com/HaoZeke/asv-numpy).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关如何进行贡献的详细信息，请参阅 [benchmark results repository](https://github.com/HaoZeke/asv-numpy)。
- en: Writing benchmarks
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基准测试
- en: See [ASV documentation](https://asv.readthedocs.io/) for basics on how to write
    benchmarks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何编写基准测试的基础知识，请参阅 [ASV 文档](https://asv.readthedocs.io/)。
- en: 'Some things to consider:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的一些事项：
- en: The benchmark suite should be importable with any NumPy version.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试套件应该可以与任何 NumPy 版本一起导入。
- en: The benchmark parameters etc. should not depend on which NumPy version is installed.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准测试的参数等不应依赖于安装的 NumPy 版本。
- en: Try to keep the runtime of the benchmark reasonable.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量保持基准测试运行时间合理。
- en: Prefer ASV’s `time_` methods for benchmarking times rather than cooking up time
    measurements via `time.clock`, even if it requires some juggling when writing
    the benchmark.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行基准测试时，首选 ASV 的 `time_` 方法来测量时间，而不是通过 `time.clock` 进行测量，即使在编写基准测试时需要进行一些调整。
- en: Preparing arrays etc. should generally be put in the `setup` method rather than
    the `time_` methods, to avoid counting preparation time together with the time
    of the benchmarked operation.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备数组等操作通常应该放在 `setup` 方法中，而不是放在 `time_` 方法中，以避免将准备时间与基准测试操作的时间计算在一起。
- en: Be mindful that large arrays created with `np.empty` or `np.zeros` might not
    be allocated in physical memory until the memory is accessed. If this is desired
    behaviour, make sure to comment it in your setup function. If you are benchmarking
    an algorithm, it is unlikely that a user will be executing said algorithm on a
    newly created empty/zero array. One can force pagefaults to occur in the setup
    phase either by calling `np.ones` or `arr.fill(value)` after creating the array,
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，使用 `np.empty` 或 `np.zeros` 创建的大型数组可能不会在物理内存中分配，直到内存被访问。如果希望出现这种行为，请确保在设置函数中进行注释。如果正在对算法进行基准测试，那么不太可能有用户在新创建的空/零数组上执行该算法。可以在设置阶段通过在创建数组后调用
    `np.ones` 或 `arr.fill(value)` 来强制引发页面错误。
