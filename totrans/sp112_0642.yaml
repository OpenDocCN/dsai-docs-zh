- en: scipy.signal.get_window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.get_window.html#scipy.signal.get_window](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.get_window.html#scipy.signal.get_window)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a window of a given length and type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**window**string, float, or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The type of window to create. See below for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nx**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of samples in the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**fftbins**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True (default), create a “periodic” window, ready to use with *ifftshift*
    and be multiplied by the result of an FFT (see also [`fftfreq`](scipy.fft.fftfreq.html#scipy.fft.fftfreq
    "scipy.fft.fftfreq")). If False, create a “symmetric” window, for use in filter
    design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**get_window**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a window of length *Nx* and type *window*
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Window types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`boxcar`](scipy.signal.windows.boxcar.html#scipy.signal.windows.boxcar "scipy.signal.windows.boxcar")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`triang`](scipy.signal.windows.triang.html#scipy.signal.windows.triang "scipy.signal.windows.triang")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`blackman`](scipy.signal.windows.blackman.html#scipy.signal.windows.blackman
    "scipy.signal.windows.blackman")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hamming`](scipy.signal.windows.hamming.html#scipy.signal.windows.hamming
    "scipy.signal.windows.hamming")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`hann`](scipy.signal.windows.hann.html#scipy.signal.windows.hann "scipy.signal.windows.hann")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bartlett`](scipy.signal.windows.bartlett.html#scipy.signal.windows.bartlett
    "scipy.signal.windows.bartlett")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`flattop`](scipy.signal.windows.flattop.html#scipy.signal.windows.flattop
    "scipy.signal.windows.flattop")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`parzen`](scipy.signal.windows.parzen.html#scipy.signal.windows.parzen "scipy.signal.windows.parzen")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`bohman`](scipy.signal.windows.bohman.html#scipy.signal.windows.bohman "scipy.signal.windows.bohman")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`blackmanharris`](scipy.signal.windows.blackmanharris.html#scipy.signal.windows.blackmanharris
    "scipy.signal.windows.blackmanharris")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`nuttall`](scipy.signal.windows.nuttall.html#scipy.signal.windows.nuttall
    "scipy.signal.windows.nuttall")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`barthann`](scipy.signal.windows.barthann.html#scipy.signal.windows.barthann
    "scipy.signal.windows.barthann")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cosine`](scipy.signal.windows.cosine.html#scipy.signal.windows.cosine "scipy.signal.windows.cosine")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`exponential`](scipy.signal.windows.exponential.html#scipy.signal.windows.exponential
    "scipy.signal.windows.exponential")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tukey`](scipy.signal.windows.tukey.html#scipy.signal.windows.tukey "scipy.signal.windows.tukey")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`taylor`](scipy.signal.windows.taylor.html#scipy.signal.windows.taylor "scipy.signal.windows.taylor")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`lanczos`](scipy.signal.windows.lanczos.html#scipy.signal.windows.lanczos
    "scipy.signal.windows.lanczos")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kaiser`](scipy.signal.windows.kaiser.html#scipy.signal.windows.kaiser "scipy.signal.windows.kaiser")
    (needs beta)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`kaiser_bessel_derived`](scipy.signal.windows.kaiser_bessel_derived.html#scipy.signal.windows.kaiser_bessel_derived
    "scipy.signal.windows.kaiser_bessel_derived") (needs beta)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`gaussian`](scipy.signal.windows.gaussian.html#scipy.signal.windows.gaussian
    "scipy.signal.windows.gaussian") (needs standard deviation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`general_cosine`](scipy.signal.windows.general_cosine.html#scipy.signal.windows.general_cosine
    "scipy.signal.windows.general_cosine") (needs weighting coefficients)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`general_gaussian`](scipy.signal.windows.general_gaussian.html#scipy.signal.windows.general_gaussian
    "scipy.signal.windows.general_gaussian") (needs power, width)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`general_hamming`](scipy.signal.windows.general_hamming.html#scipy.signal.windows.general_hamming
    "scipy.signal.windows.general_hamming") (needs window coefficient)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`dpss`](scipy.signal.windows.dpss.html#scipy.signal.windows.dpss "scipy.signal.windows.dpss")
    (needs normalized half-bandwidth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`chebwin`](scipy.signal.windows.chebwin.html#scipy.signal.windows.chebwin
    "scipy.signal.windows.chebwin") (needs attenuation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the window requires no parameters, then *window* can be a string.
  prefs: []
  type: TYPE_NORMAL
- en: If the window requires parameters, then *window* must be a tuple with the first
    argument the string name of the window, and the next arguments the needed parameters.
  prefs: []
  type: TYPE_NORMAL
- en: If *window* is a floating point number, it is interpreted as the beta parameter
    of the [`kaiser`](scipy.signal.windows.kaiser.html#scipy.signal.windows.kaiser
    "scipy.signal.windows.kaiser") window.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the window types listed above is also the name of a function that can
    be called directly to create a window of that type.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
