- en: Solvers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/solvers.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/solvers.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For a beginner-friendly guide focused on solving common types of equations,
    refer to [Solve Equations](../../guides/solving/index.html#solving-guide).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Note about Equations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recall from the [gotchas](gotchas.html#tutorial-gotchas-equals) section of this
    tutorial that symbolic equations in SymPy are not represented by `=` or `==`,
    but by `Eq`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: However, there is an even easier way. In SymPy, any expression not in an `Eq`
    is automatically assumed to equal 0 by the solving functions. Since \(a = b\)
    if and only if \(a - b = 0\), this means that instead of using `x == y`, you can
    just use `x - y`. For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is particularly useful if the equation you wish to solve is already equal
    to 0\. Instead of typing `solveset(Eq(expr, 0), x)`, you can just use `solveset(expr,
    x)`.
  prefs: []
  type: TYPE_NORMAL
- en: Solving Equations Algebraically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main function for solving algebraic equations is `solveset`. The syntax
    for `solveset` is `solveset(equation, variable=None, domain=S.Complexes)` Where
    `equations` may be in the form of `Eq` instances or expressions that are assumed
    to be equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that there is another function called `solve` which can also be
    used to solve equations. The syntax is `solve(equations, variables)` However,
    it is recommended to use `solveset` instead.
  prefs: []
  type: TYPE_NORMAL
- en: When solving a single equation, the output of `solveset` is a `FiniteSet` or
    an `Interval` or `ImageSet` of the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If there are no solutions, an `EmptySet` is returned and if it is not able to
    find solutions then a `ConditionSet` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `solveset` module, the linear system of equations is solved using `linsolve`.
    In future we would be able to use linsolve directly from `solveset`. Following
    is an example of the syntax of `linsolve`.
  prefs: []
  type: TYPE_NORMAL
- en: 'List of Equations Form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Augmented Matrix Form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A*x = b Form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The order of solution corresponds the order of given symbols.
  prefs: []
  type: TYPE_NORMAL
- en: In the `solveset` module, the non linear system of equations is solved using
    `nonlinsolve`. Following are examples of `nonlinsolve`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When only real solution is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When only complex solution is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When both real and complex solution are present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the system is positive-dimensional system (has infinitely many solutions):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The order of solution corresponds the order of given symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2\. Currently `nonlinsolve` doesn’t return solution in form of `LambertW` (if
    there is solution present in the form of `LambertW`).
  prefs: []
  type: TYPE_NORMAL
- en: '`solve` can be used for such cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Currently `nonlinsolve` is not properly capable of solving the system of
    equations having trigonometric functions.
  prefs: []
  type: TYPE_NORMAL
- en: '`solve` can be used for such cases (but does not give all solution):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`solveset` reports each solution only once. To get the solutions of a polynomial
    including multiplicity use `roots`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output `{0: 1, 3: 2}` of `roots` means that `0` is a root of multiplicity
    1 and `3` is a root of multiplicity 2.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently `solveset` is not capable of solving the following types of equations:'
  prefs: []
  type: TYPE_NORMAL
- en: Equations solvable by LambertW (Transcendental equation solver).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`solve` can be used for such cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '## Solving Differential Equations'
  prefs: []
  type: TYPE_NORMAL
- en: To solve differential equations, use `dsolve`. First, create an undefined function
    by passing `cls=Function` to the `symbols` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`f` and `g` are now undefined functions. We can call `f(x)`, and it will represent
    an unknown function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Derivatives of `f(x)` are unevaluated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: (see the [Derivatives](calculus.html#tutorial-derivatives) section for more
    on derivatives).
  prefs: []
  type: TYPE_NORMAL
- en: To represent the differential equation \(f''(x) - 2f'(x) + f(x) = \sin(x)\),
    we would thus use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To solve the ODE, pass it and the function to solve for to `dsolve`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`dsolve` returns an instance of `Eq`. This is because, in general, solutions
    to differential equations cannot be solved explicitly for the function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The arbitrary constants in the solutions from dsolve are symbols of the form
    `C1`, `C2`, `C3`, and so on.
  prefs: []
  type: TYPE_NORMAL
