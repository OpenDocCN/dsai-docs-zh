- en: Random Generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/random/generator.html](https://numpy.org/doc/1.26/reference/random/generator.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`Generator`](#numpy.random.Generator "numpy.random.Generator") provides
    access to a wide range of distributions, and served as a replacement for [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"). The main difference between the two is that `Generator`
    relies on an additional BitGenerator to manage state and generate the random bits,
    which are then transformed into random values from useful distributions. The default
    BitGenerator used by `Generator` is [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64"). The BitGenerator can be changed by passing an instantized
    BitGenerator to `Generator`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new Generator with the default BitGenerator (PCG64).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, array_like[ints], SeedSequence, BitGenerator, Generator},
    optional'
  prefs: []
  type: TYPE_NORMAL
- en: A seed to initialize the [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"). If None, then fresh, unpredictable entropy will
    be pulled from the OS. If an `int` or `array_like[ints]` is passed, then it will
    be passed to [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") to derive the initial [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") state. One may also pass in a [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") instance. Additionally, when passed a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"), it will be wrapped by [`Generator`](#numpy.random.Generator
    "numpy.random.Generator"). If passed a [`Generator`](#numpy.random.Generator "numpy.random.Generator"),
    it will be returned unaltered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Generator
  prefs: []
  type: TYPE_NORMAL
- en: The initialized generator object.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If `seed` is not a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") or a [`Generator`](#numpy.random.Generator "numpy.random.Generator"),
    a new [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") is instantiated. This function does not manage a
    default global instance.
  prefs: []
  type: TYPE_NORMAL
- en: See [Seeding and Entropy](bit_generators/index.html#seeding-and-entropy) for
    more information about seeding.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '`default_rng` is the recommended constructor for the random number class `Generator`.
    Here are several ways we can construct a random number generator using `default_rng`
    and the `Generator` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we use `default_rng` to generate a random float:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we use `default_rng` to generate 3 random integers between 0 (inclusive)
    and 10 (exclusive):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we specify a seed so that we have reproducible results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we exit and restart our Python interpreter, we’ll see that we generate the
    same random numbers again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Container for the BitGenerators.
  prefs: []
  type: TYPE_NORMAL
- en: '`Generator` exposes a number of methods for generating random numbers drawn
    from a variety of probability distributions. In addition to the distribution-specific
    arguments, each method takes a keyword argument *size* that defaults to `None`.
    If *size* is `None`, then a single value is generated and returned. If *size*
    is an integer, then a 1-D array filled with generated values is returned. If *size*
    is a tuple, then an array with that shape is filled and returned.'
  prefs: []
  type: TYPE_NORMAL
- en: The function [`numpy.random.default_rng`](#numpy.random.default_rng "numpy.random.default_rng")
    will instantiate a [`Generator`](#numpy.random.Generator "numpy.random.Generator")
    with numpy’s default [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator").
  prefs: []
  type: TYPE_NORMAL
- en: '**No Compatibility Guarantee**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Generator` does not provide a version compatibility guarantee. In particular,
    as better algorithms evolve the bit stream may change.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bit_generator**BitGenerator'
  prefs: []
  type: TYPE_NORMAL
- en: BitGenerator to use as the core generator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`default_rng`](#numpy.random.default_rng "numpy.random.default_rng")'
  prefs: []
  type: TYPE_NORMAL
- en: Recommended constructor for [`Generator`](#numpy.random.Generator "numpy.random.Generator").
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The Python stdlib module [`random`](generated/numpy.random.random.html#numpy.random.random
    "numpy.random.random") contains pseudo-random number generator with a number of
    methods that are similar to the ones available in `Generator`. It uses Mersenne
    Twister, and this bit generator can be accessed using `MT19937`. `Generator`,
    besides being NumPy-aware, has the advantage that it provides a much larger number
    of probability distributions to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the BitGenerator and Spawning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | Gets the bit generator instance used
    by the generator |'
  prefs: []
  type: TYPE_TB
- en: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | Create new independent child generators.
    |'
  prefs: []
  type: TYPE_TB
- en: Simple random data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | Return
    random integers from *low* (inclusive) to *high* (exclusive), or if endpoint=True,
    *low* (inclusive) to *high* (inclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | Return random floats in
    the half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | Generates
    a random sample from a given array |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: Permutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods for randomly permuting a sequence are
  prefs: []
  type: TYPE_NORMAL
- en: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | Modify an array or sequence in-place
    by shuffling its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | Randomly permute a sequence,
    or return a permuted range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | Randomly permute *x* along
    axis *axis*. |'
  prefs: []
  type: TYPE_TB
- en: The following table summarizes the behaviors of the methods.
  prefs: []
  type: TYPE_NORMAL
- en: '| method | copy/in-place | axis handling |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| shuffle | in-place | as if 1d |'
  prefs: []
  type: TYPE_TB
- en: '| permutation | copy | as if 1d |'
  prefs: []
  type: TYPE_TB
- en: '| permuted | either (use ‘out’ for in-place) | axis independent |'
  prefs: []
  type: TYPE_TB
- en: The following subsections provide more details about the differences.
  prefs: []
  type: TYPE_NORMAL
- en: In-place vs. copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  prefs: []
  type: TYPE_NORMAL
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when `out` is given, the return value is `out`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '### Handling the `axis` parameter'
  prefs: []
  type: TYPE_NORMAL
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling non-NumPy sequences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | Draw samples from a Gamma
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | Draw samples from a logistic
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | Draw samples from a
    log-normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | Draw samples from a
    multinomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | Generate
    variates from a multivariate hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | Draw random
    samples from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | Draw samples from a Pareto II or
    Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | Draw samples from a Poisson distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | Draws samples in [0, 1] from a power
    distribution with positive exponent a - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | Draw
    samples from the standard exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | Draw samples
    from a standard Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | Draw samples from
    a standard Normal distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | Draw samples from a von
    Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: Accessing the BitGenerator and Spawning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`bit_generator`](generated/numpy.random.Generator.bit_generator.html#numpy.random.Generator.bit_generator
    "numpy.random.Generator.bit_generator") | Gets the bit generator instance used
    by the generator |'
  prefs: []
  type: TYPE_TB
- en: '| [`spawn`](generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")(n_children) | Create new independent child generators.
    |'
  prefs: []
  type: TYPE_TB
- en: Simple random data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")(low[, high, size, dtype, endpoint]) | Return
    random integers from *low* (inclusive) to *high* (exclusive), or if endpoint=True,
    *low* (inclusive) to *high* (inclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")([size, dtype, out]) | Return random floats in
    the half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")(a[, size, replace, p, axis, shuffle]) | Generates
    a random sample from a given array |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.Generator.bytes.html#numpy.random.Generator.bytes
    "numpy.random.Generator.bytes")(length) | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: Permutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods for randomly permuting a sequence are
  prefs: []
  type: TYPE_NORMAL
- en: '| [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")(x[, axis]) | Modify an array or sequence in-place
    by shuffling its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")(x[, axis]) | Randomly permute a sequence,
    or return a permuted range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted")(x[, axis, out]) | Randomly permute *x* along
    axis *axis*. |'
  prefs: []
  type: TYPE_TB
- en: The following table summarizes the behaviors of the methods.
  prefs: []
  type: TYPE_NORMAL
- en: '| method | copy/in-place | axis handling |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| shuffle | in-place | as if 1d |'
  prefs: []
  type: TYPE_TB
- en: '| permutation | copy | as if 1d |'
  prefs: []
  type: TYPE_TB
- en: '| permuted | either (use ‘out’ for in-place) | axis independent |'
  prefs: []
  type: TYPE_TB
- en: The following subsections provide more details about the differences.
  prefs: []
  type: TYPE_NORMAL
- en: In-place vs. copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  prefs: []
  type: TYPE_NORMAL
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when `out` is given, the return value is `out`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '### Handling the `axis` parameter'
  prefs: []
  type: TYPE_NORMAL
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling non-NumPy sequences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In-place vs. copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") is that [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") operates in-place, while [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") returns a copy.
  prefs: []
  type: TYPE_NORMAL
- en: By default, [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") returns a copy. To operate in-place with [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted"), pass the same array as the first argument
    *and* as the value of the `out` parameter. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that when `out` is given, the return value is `out`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '### Handling the `axis` parameter'
  prefs: []
  type: TYPE_NORMAL
- en: An important distinction for these methods is how they handle the `axis` parameter.
    Both [`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") and [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") treat the input as a one-dimensional sequence,
    and the `axis` parameter determines which dimension of the input array to use
    as the sequence. In the case of a two-dimensional array, `axis=0` will, in effect,
    rearrange the rows of the array, and `axis=1` will rearrange the columns. For
    example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the columns have been rearranged “in bulk”: the values within each
    column have not changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") treats the `axis` parameter similar to how
    [`numpy.sort`](../generated/numpy.sort.html#numpy.sort "numpy.sort") treats it.
    Each slice along the given axis is shuffled independently of the others. Compare
    the following example of the use of [`Generator.permuted`](generated/numpy.random.Generator.permuted.html#numpy.random.Generator.permuted
    "numpy.random.Generator.permuted") to the above example of [`Generator.permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the values within each row (i.e. the values along `axis=1`)
    have been shuffled independently. This is not a “bulk” shuffle of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling non-NumPy sequences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Generator.shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") works on non-NumPy sequences. That is, if it
    is given a sequence that is not a NumPy array, it shuffles that sequence in-place.
    For example,'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.Generator.beta.html#numpy.random.Generator.beta
    "numpy.random.Generator.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.Generator.binomial.html#numpy.random.Generator.binomial
    "numpy.random.Generator.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.Generator.chisquare.html#numpy.random.Generator.chisquare
    "numpy.random.Generator.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.Generator.dirichlet.html#numpy.random.Generator.dirichlet
    "numpy.random.Generator.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.Generator.exponential.html#numpy.random.Generator.exponential
    "numpy.random.Generator.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.Generator.f.html#numpy.random.Generator.f "numpy.random.Generator.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.Generator.gamma.html#numpy.random.Generator.gamma
    "numpy.random.Generator.gamma")(shape[, scale, size]) | Draw samples from a Gamma
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.Generator.geometric.html#numpy.random.Generator.geometric
    "numpy.random.Generator.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.Generator.gumbel.html#numpy.random.Generator.gumbel
    "numpy.random.Generator.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.Generator.hypergeometric.html#numpy.random.Generator.hypergeometric
    "numpy.random.Generator.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.Generator.laplace.html#numpy.random.Generator.laplace
    "numpy.random.Generator.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.Generator.logistic.html#numpy.random.Generator.logistic
    "numpy.random.Generator.logistic")([loc, scale, size]) | Draw samples from a logistic
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.Generator.lognormal.html#numpy.random.Generator.lognormal
    "numpy.random.Generator.lognormal")([mean, sigma, size]) | Draw samples from a
    log-normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.Generator.logseries.html#numpy.random.Generator.logseries
    "numpy.random.Generator.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.Generator.multinomial.html#numpy.random.Generator.multinomial
    "numpy.random.Generator.multinomial")(n, pvals[, size]) | Draw samples from a
    multinomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_hypergeometric`](generated/numpy.random.Generator.multivariate_hypergeometric.html#numpy.random.Generator.multivariate_hypergeometric
    "numpy.random.Generator.multivariate_hypergeometric")(colors, nsample) | Generate
    variates from a multivariate hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal")(mean, cov[, size, ...]) | Draw random
    samples from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.Generator.negative_binomial.html#numpy.random.Generator.negative_binomial
    "numpy.random.Generator.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.Generator.noncentral_chisquare.html#numpy.random.Generator.noncentral_chisquare
    "numpy.random.Generator.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.Generator.noncentral_f.html#numpy.random.Generator.noncentral_f
    "numpy.random.Generator.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.Generator.normal.html#numpy.random.Generator.normal
    "numpy.random.Generator.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.Generator.pareto.html#numpy.random.Generator.pareto
    "numpy.random.Generator.pareto")(a[, size]) | Draw samples from a Pareto II or
    Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.Generator.poisson.html#numpy.random.Generator.poisson
    "numpy.random.Generator.poisson")([lam, size]) | Draw samples from a Poisson distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.Generator.power.html#numpy.random.Generator.power
    "numpy.random.Generator.power")(a[, size]) | Draws samples in [0, 1] from a power
    distribution with positive exponent a - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.Generator.rayleigh.html#numpy.random.Generator.rayleigh
    "numpy.random.Generator.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.Generator.standard_cauchy.html#numpy.random.Generator.standard_cauchy
    "numpy.random.Generator.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")([size, dtype, method, out]) | Draw
    samples from the standard exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")(shape[, size, dtype, out]) | Draw samples
    from a standard Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")([size, dtype, out]) | Draw samples from
    a standard Normal distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.Generator.standard_t.html#numpy.random.Generator.standard_t
    "numpy.random.Generator.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.Generator.triangular.html#numpy.random.Generator.triangular
    "numpy.random.Generator.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.Generator.uniform.html#numpy.random.Generator.uniform
    "numpy.random.Generator.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.Generator.vonmises.html#numpy.random.Generator.vonmises
    "numpy.random.Generator.vonmises")(mu, kappa[, size]) | Draw samples from a von
    Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.Generator.wald.html#numpy.random.Generator.wald
    "numpy.random.Generator.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.Generator.weibull.html#numpy.random.Generator.weibull
    "numpy.random.Generator.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.Generator.zipf.html#numpy.random.Generator.zipf
    "numpy.random.Generator.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  prefs: []
  type: TYPE_TB
