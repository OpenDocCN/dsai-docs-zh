- en: Linear algebra (numpy.linalg)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性代数（numpy.linalg）
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.linalg.html](https://numpy.org/doc/1.26/reference/routines.linalg.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.linalg.html](https://numpy.org/doc/1.26/reference/routines.linalg.html)
- en: The NumPy linear algebra functions rely on BLAS and LAPACK to provide efficient
    low level implementations of standard linear algebra algorithms. Those libraries
    may be provided by NumPy itself using C versions of a subset of their reference
    implementations but, when possible, highly optimized libraries that take advantage
    of specialized processor functionality are preferred. Examples of such libraries
    are [OpenBLAS](https://www.openblas.net/), MKL (TM), and ATLAS. Because those
    libraries are multithreaded and processor dependent, environmental variables and
    external packages such as [threadpoolctl](https://github.com/joblib/threadpoolctl)
    may be needed to control the number of threads or specify the processor architecture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy线性代数函数依赖于BLAS和LAPACK，提供了标准线性代数算法的高效低级实现。这些库可能由NumPy自身提供，使用了它们的参考实现的C版本，但是在可能的情况下，更倾向于利用专门处理器功能的高度优化库。这些库的示例包括[OpenBLAS](https://www.openblas.net/)，MKL
    (TM)和ATLAS。由于这些库是多线程且处理器相关的，可能需要环境变量和外部包，如[threadpoolctl](https://github.com/joblib/threadpoolctl)，来控制线程数或指定处理器架构。
- en: The SciPy library also contains a [`linalg`](https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg
    "(in SciPy v1.11.2)") submodule, and there is overlap in the functionality provided
    by the SciPy and NumPy submodules. SciPy contains functions not found in [`numpy.linalg`](#module-numpy.linalg
    "numpy.linalg"), such as functions related to LU decomposition and the Schur decomposition,
    multiple ways of calculating the pseudoinverse, and matrix transcendentals such
    as the matrix logarithm. Some functions that exist in both have augmented functionality
    in [`scipy.linalg`](https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg
    "(in SciPy v1.11.2)"). For example, [`scipy.linalg.eig`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html#scipy.linalg.eig
    "(in SciPy v1.11.2)") can take a second matrix argument for solving generalized
    eigenvalue problems. Some functions in NumPy, however, have more flexible broadcasting
    options. For example, [`numpy.linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve
    "numpy.linalg.solve") can handle “stacked” arrays, while [`scipy.linalg.solve`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(in SciPy v1.11.2)") accepts only a single square array as its first argument.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy库还包含一个[`linalg`](https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg
    "(在SciPy v1.11.2中)")子模块，SciPy和NumPy子模块提供的功能有重叠。SciPy包含了在[`numpy.linalg`](#module-numpy.linalg
    "numpy.linalg")中找不到的函数，如与LU分解和Schur分解相关的函数，多种计算伪逆的方法，以及矩阵的函数，如矩阵对数。一些在两者中都存在的函数在[`scipy.linalg`](https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg
    "(在SciPy v1.11.2中)")中具有增强功能。例如，[`scipy.linalg.eig`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html#scipy.linalg.eig
    "(在SciPy v1.11.2中)")可以接受第二个矩阵参数来解决广义特征值问题。然而，NumPy中的一些函数具有更灵活的广播选项。例如，[`numpy.linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve
    "numpy.linalg.solve")可以处理“堆叠”数组，而[`scipy.linalg.solve`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve
    "(在SciPy v1.11.2中)")只接受单个方阵作为其第一个参数。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The term *matrix* as it is used on this page indicates a 2d [`numpy.array`](generated/numpy.array.html#numpy.array
    "numpy.array") object, and *not* a [`numpy.matrix`](generated/numpy.matrix.html#numpy.matrix
    "numpy.matrix") object. The latter is no longer recommended, even for linear algebra.
    See [the matrix object documentation](arrays.classes.html#matrix-objects) for
    more information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本页中使用的术语*矩阵*指的是一个2d [`numpy.array`](generated/numpy.array.html#numpy.array
    "numpy.array")对象，而不是一个[`numpy.matrix`](generated/numpy.matrix.html#numpy.matrix
    "numpy.matrix")对象。后者已不再推荐，即使是用于线性代数。有关更多信息，请参阅[矩阵对象文档](arrays.classes.html#matrix-objects)。
- en: The `@` operator
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`@`运算符'
- en: Introduced in NumPy 1.10.0, the `@` operator is preferable to other methods
    when computing the matrix product between 2d arrays. The [`numpy.matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") function implements the `@` operator.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍自NumPy 1.10.0起，`@`运算符在计算2d数组之间的矩阵乘积时比其他方法更可取。[`numpy.matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul")函数实现了`@`运算符。
- en: Matrix and vector products
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵和向量乘积
- en: '| [`dot`](generated/numpy.dot.html#numpy.dot "numpy.dot")(a, b[, out]) | Dot
    product of two arrays. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`dot`](generated/numpy.dot.html#numpy.dot "numpy.dot")(a, b[, out]) | 两个数组的点积。
    |'
- en: '| [`linalg.multi_dot`](generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")(arrays, *[, out]) | Compute the dot product of two or
    more arrays in a single function call, while automatically selecting the fastest
    evaluation order. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.multi_dot`](generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")(arrays, *[, out]) | 在单个函数调用中计算两个或多个数组的点积，同时自动选择最快的计算顺序。
    |'
- en: '| [`vdot`](generated/numpy.vdot.html#numpy.vdot "numpy.vdot")(a, b, /) | Return
    the dot product of two vectors. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`vdot`](generated/numpy.vdot.html#numpy.vdot "numpy.vdot")(a, b, /) | 返回两个向量的点积。
    |'
- en: '| [`inner`](generated/numpy.inner.html#numpy.inner "numpy.inner")(a, b, /)
    | Inner product of two arrays. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`inner`](generated/numpy.inner.html#numpy.inner "numpy.inner")(a, b, /)
    | 两个数组的内积。 |'
- en: '| [`outer`](generated/numpy.outer.html#numpy.outer "numpy.outer")(a, b[, out])
    | Compute the outer product of two vectors. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`outer`](generated/numpy.outer.html#numpy.outer "numpy.outer")(a, b[, out])
    | 计算两个向量的外积。 |'
- en: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | Matrix product of two arrays. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | 两个数组的矩阵乘积。 |'
- en: '| [`tensordot`](generated/numpy.tensordot.html#numpy.tensordot "numpy.tensordot")(a, b[, axes])
    | Compute tensor dot product along specified axes. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`tensordot`](generated/numpy.tensordot.html#numpy.tensordot "numpy.tensordot")(a, b[, axes])
    | 计算沿指定轴的张量点积。 |'
- en: '| [`einsum`](generated/numpy.einsum.html#numpy.einsum "numpy.einsum")(subscripts, *operands[, out, dtype, ...])
    | Evaluates the Einstein summation convention on the operands. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`einsum`](generated/numpy.einsum.html#numpy.einsum "numpy.einsum")(subscripts, *operands[, out, dtype, ...])
    | 对操作数执行Einstein求和约定。 |'
- en: '| [`einsum_path`](generated/numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")(subscripts, *operands[, optimize])
    | Evaluates the lowest cost contraction order for an einsum expression by considering
    the creation of intermediate arrays. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`einsum_path`](generated/numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")(subscripts, *operands[, optimize])
    | 通过考虑中间数组的创建，评估einsum表达式的最低成本收缩顺序。 |'
- en: '| [`linalg.matrix_power`](generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power
    "numpy.linalg.matrix_power")(a, n) | Raise a square matrix to the (integer) power
    *n*. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.matrix_power`](generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power
    "numpy.linalg.matrix_power")(a, n) | 将方阵提升到（整数）幂*n*。 |'
- en: '| [`kron`](generated/numpy.kron.html#numpy.kron "numpy.kron")(a, b) | Kronecker
    product of two arrays. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`kron`](generated/numpy.kron.html#numpy.kron "numpy.kron")(a, b) | 两个数组的Kronecker积。
    |'
- en: Decompositions
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解
- en: '| [`linalg.cholesky`](generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky
    "numpy.linalg.cholesky")(a) | Cholesky decomposition. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.cholesky`](generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky
    "numpy.linalg.cholesky")(a) | Cholesky分解。 |'
- en: '| [`linalg.qr`](generated/numpy.linalg.qr.html#numpy.linalg.qr "numpy.linalg.qr")(a[, mode])
    | Compute the qr factorization of a matrix. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.qr`](generated/numpy.linalg.qr.html#numpy.linalg.qr "numpy.linalg.qr")(a[, mode])
    | 计算矩阵的qr分解。 |'
- en: '| [`linalg.svd`](generated/numpy.linalg.svd.html#numpy.linalg.svd "numpy.linalg.svd")(a[, full_matrices, compute_uv, ...])
    | Singular Value Decomposition. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.svd`](generated/numpy.linalg.svd.html#numpy.linalg.svd "numpy.linalg.svd")(a[, full_matrices, compute_uv, ...])
    | 奇异值分解。 |'
- en: Matrix eigenvalues
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵特征值
- en: '| [`linalg.eig`](generated/numpy.linalg.eig.html#numpy.linalg.eig "numpy.linalg.eig")(a)
    | Compute the eigenvalues and right eigenvectors of a square array. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eig`](generated/numpy.linalg.eig.html#numpy.linalg.eig "numpy.linalg.eig")(a)
    | 计算方阵的特征值和右特征向量。 |'
- en: '| [`linalg.eigh`](generated/numpy.linalg.eigh.html#numpy.linalg.eigh "numpy.linalg.eigh")(a[, UPLO])
    | Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric)
    or a real symmetric matrix. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigh`](generated/numpy.linalg.eigh.html#numpy.linalg.eigh "numpy.linalg.eigh")(a[, UPLO])
    | 返回复厄米（共轭对称）或实对称矩阵的特征值和特征向量。 |'
- en: '| [`linalg.eigvals`](generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals
    "numpy.linalg.eigvals")(a) | Compute the eigenvalues of a general matrix. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigvals`](generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals
    "numpy.linalg.eigvals")(a) | 计算一般矩阵的特征值。 |'
- en: '| [`linalg.eigvalsh`](generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh
    "numpy.linalg.eigvalsh")(a[, UPLO]) | Compute the eigenvalues of a complex Hermitian
    or real symmetric matrix. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigvalsh`](generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh
    "numpy.linalg.eigvalsh")(a[, UPLO]) | 计算复厄米或实对称矩阵的特征值。 |'
- en: Norms and other numbers
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范数和其他数字
- en: '| [`linalg.norm`](generated/numpy.linalg.norm.html#numpy.linalg.norm "numpy.linalg.norm")(x[, ord, axis, keepdims])
    | Matrix or vector norm. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.norm`](generated/numpy.linalg.norm.html#numpy.linalg.norm "numpy.linalg.norm")(x[, ord, axis, keepdims])
    | 矩阵或向量范数。 |'
- en: '| [`linalg.cond`](generated/numpy.linalg.cond.html#numpy.linalg.cond "numpy.linalg.cond")(x[, p])
    | Compute the condition number of a matrix. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.cond`](generated/numpy.linalg.cond.html#numpy.linalg.cond "numpy.linalg.cond")(x[, p])
    | 计算矩阵的条件数。 |'
- en: '| [`linalg.det`](generated/numpy.linalg.det.html#numpy.linalg.det "numpy.linalg.det")(a)
    | Compute the determinant of an array. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.det`](generated/numpy.linalg.det.html#numpy.linalg.det "numpy.linalg.det")(a)
    | 计算数组的行列式。 |'
- en: '| [`linalg.matrix_rank`](generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank
    "numpy.linalg.matrix_rank")(A[, tol, hermitian]) | Return matrix rank of array
    using SVD method |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.matrix_rank`](generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank
    "numpy.linalg.matrix_rank")(A[, tol, hermitian]) | 使用 SVD 方法返回数组的矩阵秩 |'
- en: '| [`linalg.slogdet`](generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet
    "numpy.linalg.slogdet")(a) | Compute the sign and (natural) logarithm of the determinant
    of an array. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.slogdet`](generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet
    "numpy.linalg.slogdet")(a) | 计算数组行列式的符号和（自然）对数。 |'
- en: '| [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace")(a[, offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace")(a[, offset, axis1, axis2, dtype, out])
    | 返回数组对角线上的和。 |'
- en: Solving equations and inverting matrices
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解方程和矩阵求逆
- en: '| [`linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve "numpy.linalg.solve")(a, b)
    | Solve a linear matrix equation, or system of linear scalar equations. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve "numpy.linalg.solve")(a, b)
    | 解线性矩阵方程或线性标量方程组。 |'
- en: '| [`linalg.tensorsolve`](generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve
    "numpy.linalg.tensorsolve")(a, b[, axes]) | Solve the tensor equation `a x = b`
    for x. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.tensorsolve`](generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve
    "numpy.linalg.tensorsolve")(a, b[, axes]) | 解张量方程 `a x = b` 以求解 x。 |'
- en: '| [`linalg.lstsq`](generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq "numpy.linalg.lstsq")(a, b[, rcond])
    | Return the least-squares solution to a linear matrix equation. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.lstsq`](generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq "numpy.linalg.lstsq")(a, b[, rcond])
    | 返回线性矩阵方程的最小二乘解。 |'
- en: '| [`linalg.inv`](generated/numpy.linalg.inv.html#numpy.linalg.inv "numpy.linalg.inv")(a)
    | Compute the (multiplicative) inverse of a matrix. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.inv`](generated/numpy.linalg.inv.html#numpy.linalg.inv "numpy.linalg.inv")(a)
    | 计算矩阵的（乘法）逆。 |'
- en: '| [`linalg.pinv`](generated/numpy.linalg.pinv.html#numpy.linalg.pinv "numpy.linalg.pinv")(a[, rcond, hermitian])
    | Compute the (Moore-Penrose) pseudo-inverse of a matrix. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.pinv`](generated/numpy.linalg.pinv.html#numpy.linalg.pinv "numpy.linalg.pinv")(a[, rcond, hermitian])
    | 计算矩阵的（Moore-Penrose）伪逆。 |'
- en: '| [`linalg.tensorinv`](generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv
    "numpy.linalg.tensorinv")(a[, ind]) | Compute the ''inverse'' of an N-dimensional
    array. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.tensorinv`](generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv
    "numpy.linalg.tensorinv")(a[, ind]) | 计算 N 维数组的“逆”。 |'
- en: Exceptions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常
- en: '| [`linalg.LinAlgError`](generated/numpy.linalg.LinAlgError.html#numpy.linalg.LinAlgError
    "numpy.linalg.LinAlgError") | Generic Python-exception-derived object raised by
    linalg functions. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.LinAlgError`](generated/numpy.linalg.LinAlgError.html#numpy.linalg.LinAlgError
    "numpy.linalg.LinAlgError") | 由 linalg 函数引发的通用 Python 异常派生对象。 |'
- en: '## Linear algebra on several matrices at once'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '## 一次对多个矩阵进行线性代数运算'
- en: New in version 1.8.0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为 1.8.0。
- en: Several of the linear algebra routines listed above are able to compute results
    for several matrices at once, if they are stacked into the same array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列出的几个线性代数例程能够同时为多个矩阵计算结果，只要它们堆叠到同一个数组中。
- en: 'This is indicated in the documentation via input parameter specifications such
    as `a : (..., M, M) array_like`. This means that if for instance given an input
    array `a.shape == (N, M, M)`, it is interpreted as a “stack” of N matrices, each
    of size M-by-M. Similar specification applies to return values, for instance the
    determinant has `det : (...)` and will in this case return an array of shape `det(a).shape
    == (N,)`. This generalizes to linear algebra operations on higher-dimensional
    arrays: the last 1 or 2 dimensions of a multidimensional array are interpreted
    as vectors or matrices, as appropriate for each operation.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '在文档中通过输入参数规范来指示，例如 `a : (..., M, M) array_like`。这意味着，例如给定输入数组 `a.shape == (N,
    M, M)`，它被解释为 N 个大小为 M×M 的矩阵的“堆叠”。类似的规范适用于返回值，例如行列式具有 `det : (...)`，在这种情况下将返回形状为
    `det(a).shape == (N,)` 的数组。这推广到对更高维数组的线性代数操作：多维数组的最后 1 或 2 维被解释为向量或矩阵，适用于每个操作。'
- en: The `@` operator
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`@` 运算符'
- en: Introduced in NumPy 1.10.0, the `@` operator is preferable to other methods
    when computing the matrix product between 2d arrays. The [`numpy.matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") function implements the `@` operator.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.10.0 中引入，`@` 运算符在计算二维数组之间的矩阵乘积时优于其他方法。[`numpy.matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") 函数实现了 `@` 运算符。
- en: Matrix and vector products
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵和向量乘积
- en: '| [`dot`](generated/numpy.dot.html#numpy.dot "numpy.dot")(a, b[, out]) | Dot
    product of two arrays. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`dot`](generated/numpy.dot.html#numpy.dot "numpy.dot")(a, b[, out]) | 两个数组的点积。
    |'
- en: '| [`linalg.multi_dot`](generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")(arrays, *[, out]) | Compute the dot product of two or
    more arrays in a single function call, while automatically selecting the fastest
    evaluation order. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.multi_dot`](generated/numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")(arrays, *[, out]) | 在单个函数调用中计算两个或多个数组的点积，同时自动选择最快的计算顺序。
    |'
- en: '| [`vdot`](generated/numpy.vdot.html#numpy.vdot "numpy.vdot")(a, b, /) | Return
    the dot product of two vectors. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`vdot`](generated/numpy.vdot.html#numpy.vdot "numpy.vdot")(a, b, /) | 返回两个向量的点积。
    |'
- en: '| [`inner`](generated/numpy.inner.html#numpy.inner "numpy.inner")(a, b, /)
    | Inner product of two arrays. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`inner`](generated/numpy.inner.html#numpy.inner "numpy.inner")(a, b, /)
    | 两个数组的内积。 |'
- en: '| [`outer`](generated/numpy.outer.html#numpy.outer "numpy.outer")(a, b[, out])
    | Compute the outer product of two vectors. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`outer`](generated/numpy.outer.html#numpy.outer "numpy.outer")(a, b[, out])
    | 计算两个向量的外积。 |'
- en: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | Matrix product of two arrays. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | 两个数组的矩阵乘积。 |'
- en: '| [`tensordot`](generated/numpy.tensordot.html#numpy.tensordot "numpy.tensordot")(a, b[, axes])
    | Compute tensor dot product along specified axes. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`tensordot`](generated/numpy.tensordot.html#numpy.tensordot "numpy.tensordot")(a, b[, axes])
    | 计算沿指定轴的张量点积。 |'
- en: '| [`einsum`](generated/numpy.einsum.html#numpy.einsum "numpy.einsum")(subscripts, *operands[, out, dtype, ...])
    | Evaluates the Einstein summation convention on the operands. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`einsum`](generated/numpy.einsum.html#numpy.einsum "numpy.einsum")(subscripts, *operands[, out, dtype, ...])
    | 对操作数执行爱因斯坦求和约定。 |'
- en: '| [`einsum_path`](generated/numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")(subscripts, *operands[, optimize])
    | Evaluates the lowest cost contraction order for an einsum expression by considering
    the creation of intermediate arrays. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`einsum_path`](generated/numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")(subscripts, *operands[, optimize])
    | 通过考虑创建中间数组来评估 einsum 表达式的最低成本收缩顺序。 |'
- en: '| [`linalg.matrix_power`](generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power
    "numpy.linalg.matrix_power")(a, n) | Raise a square matrix to the (integer) power
    *n*. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.matrix_power`](generated/numpy.linalg.matrix_power.html#numpy.linalg.matrix_power
    "numpy.linalg.matrix_power")(a, n) | 将方阵提升到（整数）幂 *n*。 |'
- en: '| [`kron`](generated/numpy.kron.html#numpy.kron "numpy.kron")(a, b) | Kronecker
    product of two arrays. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`kron`](generated/numpy.kron.html#numpy.kron "numpy.kron")(a, b) | 两个数组的
    Kronecker 乘积。 |'
- en: Decompositions
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解
- en: '| [`linalg.cholesky`](generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky
    "numpy.linalg.cholesky")(a) | Cholesky decomposition. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.cholesky`](generated/numpy.linalg.cholesky.html#numpy.linalg.cholesky
    "numpy.linalg.cholesky")(a) | Cholesky 分解。 |'
- en: '| [`linalg.qr`](generated/numpy.linalg.qr.html#numpy.linalg.qr "numpy.linalg.qr")(a[, mode])
    | Compute the qr factorization of a matrix. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.qr`](generated/numpy.linalg.qr.html#numpy.linalg.qr "numpy.linalg.qr")(a[, mode])
    | 计算矩阵的 QR 分解。 |'
- en: '| [`linalg.svd`](generated/numpy.linalg.svd.html#numpy.linalg.svd "numpy.linalg.svd")(a[, full_matrices, compute_uv, ...])
    | Singular Value Decomposition. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.svd`](generated/numpy.linalg.svd.html#numpy.linalg.svd "numpy.linalg.svd")(a[, full_matrices, compute_uv, ...])
    | 奇异值分解。 |'
- en: Matrix eigenvalues
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵特征值
- en: '| [`linalg.eig`](generated/numpy.linalg.eig.html#numpy.linalg.eig "numpy.linalg.eig")(a)
    | Compute the eigenvalues and right eigenvectors of a square array. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eig`](generated/numpy.linalg.eig.html#numpy.linalg.eig "numpy.linalg.eig")(a)
    | 计算方阵的特征值和右特征向量。 |'
- en: '| [`linalg.eigh`](generated/numpy.linalg.eigh.html#numpy.linalg.eigh "numpy.linalg.eigh")(a[, UPLO])
    | Return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric)
    or a real symmetric matrix. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigh`](generated/numpy.linalg.eigh.html#numpy.linalg.eigh "numpy.linalg.eigh")(a[, UPLO])
    | 返回复共轭厄米特（共轭对称）或实对称矩阵的特征值和特征向量。 |'
- en: '| [`linalg.eigvals`](generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals
    "numpy.linalg.eigvals")(a) | Compute the eigenvalues of a general matrix. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigvals`](generated/numpy.linalg.eigvals.html#numpy.linalg.eigvals
    "numpy.linalg.eigvals")(a) | 计算一般矩阵的特征值。 |'
- en: '| [`linalg.eigvalsh`](generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh
    "numpy.linalg.eigvalsh")(a[, UPLO]) | Compute the eigenvalues of a complex Hermitian
    or real symmetric matrix. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.eigvalsh`](generated/numpy.linalg.eigvalsh.html#numpy.linalg.eigvalsh
    "numpy.linalg.eigvalsh")(a[, UPLO]) | 计算复共轭厄米特或实对称矩阵的特征值。 |'
- en: Norms and other numbers
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范数和其他数字
- en: '| [`linalg.norm`](generated/numpy.linalg.norm.html#numpy.linalg.norm "numpy.linalg.norm")(x[, ord, axis, keepdims])
    | Matrix or vector norm. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.norm`](generated/numpy.linalg.norm.html#numpy.linalg.norm "numpy.linalg.norm")(x[, ord, axis, keepdims])
    | 矩阵或向量范数。 |'
- en: '| [`linalg.cond`](generated/numpy.linalg.cond.html#numpy.linalg.cond "numpy.linalg.cond")(x[, p])
    | Compute the condition number of a matrix. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.cond`](generated/numpy.linalg.cond.html#numpy.linalg.cond "numpy.linalg.cond")(x[, p])
    | 计算矩阵的条件数。 |'
- en: '| [`linalg.det`](generated/numpy.linalg.det.html#numpy.linalg.det "numpy.linalg.det")(a)
    | Compute the determinant of an array. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.det`](generated/numpy.linalg.det.html#numpy.linalg.det "numpy.linalg.det")(a)
    | 计算数组的行列式。 |'
- en: '| [`linalg.matrix_rank`](generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank
    "numpy.linalg.matrix_rank")(A[, tol, hermitian]) | Return matrix rank of array
    using SVD method |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.matrix_rank`](generated/numpy.linalg.matrix_rank.html#numpy.linalg.matrix_rank
    "numpy.linalg.matrix_rank")(A[, tol, hermitian]) | 使用SVD方法返回数组的矩阵秩 |'
- en: '| [`linalg.slogdet`](generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet
    "numpy.linalg.slogdet")(a) | Compute the sign and (natural) logarithm of the determinant
    of an array. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.slogdet`](generated/numpy.linalg.slogdet.html#numpy.linalg.slogdet
    "numpy.linalg.slogdet")(a) | 计算数组行列式的符号和（自然）对数。 |'
- en: '| [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace")(a[, offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace")(a[, offset, axis1, axis2, dtype, out])
    | 返回数组对角线上��和。 |'
- en: Solving equations and inverting matrices
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解方程和矩阵求逆
- en: '| [`linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve "numpy.linalg.solve")(a, b)
    | Solve a linear matrix equation, or system of linear scalar equations. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.solve`](generated/numpy.linalg.solve.html#numpy.linalg.solve "numpy.linalg.solve")(a, b)
    | 解线性矩阵方程或线性标量方程组。 |'
- en: '| [`linalg.tensorsolve`](generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve
    "numpy.linalg.tensorsolve")(a, b[, axes]) | Solve the tensor equation `a x = b`
    for x. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.tensorsolve`](generated/numpy.linalg.tensorsolve.html#numpy.linalg.tensorsolve
    "numpy.linalg.tensorsolve")(a, b[, axes]) | 解张量方程 `a x = b` 得到 x。 |'
- en: '| [`linalg.lstsq`](generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq "numpy.linalg.lstsq")(a, b[, rcond])
    | Return the least-squares solution to a linear matrix equation. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.lstsq`](generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq "numpy.linalg.lstsq")(a, b[, rcond])
    | 返回线性矩阵方程的最小二乘解。 |'
- en: '| [`linalg.inv`](generated/numpy.linalg.inv.html#numpy.linalg.inv "numpy.linalg.inv")(a)
    | Compute the (multiplicative) inverse of a matrix. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.inv`](generated/numpy.linalg.inv.html#numpy.linalg.inv "numpy.linalg.inv")(a)
    | 计算矩阵的（乘法）逆。 |'
- en: '| [`linalg.pinv`](generated/numpy.linalg.pinv.html#numpy.linalg.pinv "numpy.linalg.pinv")(a[, rcond, hermitian])
    | Compute the (Moore-Penrose) pseudo-inverse of a matrix. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.pinv`](generated/numpy.linalg.pinv.html#numpy.linalg.pinv "numpy.linalg.pinv")(a[, rcond, hermitian])
    | 计算矩阵的（Moore-Penrose）伪逆。 |'
- en: '| [`linalg.tensorinv`](generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv
    "numpy.linalg.tensorinv")(a[, ind]) | Compute the ''inverse'' of an N-dimensional
    array. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.tensorinv`](generated/numpy.linalg.tensorinv.html#numpy.linalg.tensorinv
    "numpy.linalg.tensorinv")(a[, ind]) | 计算N维数组的“逆”。 |'
- en: Exceptions
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常
- en: '| [`linalg.LinAlgError`](generated/numpy.linalg.LinAlgError.html#numpy.linalg.LinAlgError
    "numpy.linalg.LinAlgError") | Generic Python-exception-derived object raised by
    linalg functions. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`linalg.LinAlgError`](generated/numpy.linalg.LinAlgError.html#numpy.linalg.LinAlgError
    "numpy.linalg.LinAlgError") | 由linalg函数引发的通用Python异常派生对象。|'
- en: '## Linear algebra on several matrices at once'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '## 一次对多个矩阵进行线性代数运算'
- en: New in version 1.8.0.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为1.8.0。
- en: Several of the linear algebra routines listed above are able to compute results
    for several matrices at once, if they are stacked into the same array.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述几个线性代数例程能够同时计算多个矩阵的结果，如果它们堆叠到同一个数组中。
- en: 'This is indicated in the documentation via input parameter specifications such
    as `a : (..., M, M) array_like`. This means that if for instance given an input
    array `a.shape == (N, M, M)`, it is interpreted as a “stack” of N matrices, each
    of size M-by-M. Similar specification applies to return values, for instance the
    determinant has `det : (...)` and will in this case return an array of shape `det(a).shape
    == (N,)`. This generalizes to linear algebra operations on higher-dimensional
    arrays: the last 1 or 2 dimensions of a multidimensional array are interpreted
    as vectors or matrices, as appropriate for each operation.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '这在文档中通过输入参数规范来指示，例如 `a : (..., M, M) array_like`。这意味着，例如给定输入数组 `a.shape ==
    (N, M, M)`，它被解释为“N个大小为M乘M的矩阵”堆叠在一起。类似的规范也适用于返回值，例如行列式具有 `det : (...)`，在这种情况下将返回形状为
    `det(a).shape == (N,)` 的数组。这推广到对高维数组进行线性代数运算：多维数组的最后1或2维被解释为向量或矩阵，适用于每个操作。'
