- en: Comparison with spreadsheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_spreadsheets.html](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_spreadsheets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since many potential pandas users have some familiarity with spreadsheet programs
    like [Excel](https://support.microsoft.com/en-us/excel), this page is meant to
    provide some examples of how various spreadsheet operations would be performed
    using pandas. This page will use terminology and link to documentation for Excel,
    but much will be the same/similar in [Google Sheets](https://support.google.com/a/users/answer/9282959),
    [LibreOffice Calc](https://help.libreoffice.org/latest/en-US/text/scalc/main0000.html?DbPAR=CALC),
    [Apple Numbers](https://www.apple.com/numbers/compatibility/), and other Excel-compatible
    spreadsheet software.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re new to pandas, you might want to first read through [10 Minutes to
    pandas](../../user_guide/10min.html#min) to familiarize yourself with the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'As is customary, we import pandas and NumPy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | Excel |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | worksheet |'
  prefs: []
  type: TYPE_TB
- en: '| `Series` | column |'
  prefs: []
  type: TYPE_TB
- en: '| `Index` | row headings |'
  prefs: []
  type: TYPE_TB
- en: '| row | row |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | empty cell |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to an Excel worksheet. While an Excel workbook
    can contain multiple worksheets, pandas `DataFrame`s exist independently.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    Working with a `Series` is analogous to referencing a column of a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index`, which are labels on the *rows*
    of the data. In pandas, if no index is specified, a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") is used by default (first row = 0, second row = 1, and so
    on), analogous to row headings/numbers in spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, indexes can be set to one (or multiple) unique values, which is like
    having a column that is used as the row identifier in a worksheet. Unlike most
    spreadsheets, these `Index` values can actually be used to reference the rows.
    (Note that [this can be done in Excel with structured references](https://support.microsoft.com/en-us/office/using-structured-references-with-excel-tables-f5ed2452-2337-4f71-bed3-c8ae6d2b276e).)
    For example, in spreadsheets, you would reference the first row as `A1:Z1`, while
    in pandas you could use `populations.loc['Chicago']`.
  prefs: []
  type: TYPE_NORMAL
- en: Index values are also persistent, so if you re-order the rows in a `DataFrame`,
    the label for a particular row don’t change.
  prefs: []
  type: TYPE_NORMAL
- en: See the [indexing documentation](../../user_guide/indexing.html#indexing) for
    much more on how to use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: Data input / output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a spreadsheet, [values can be typed directly into cells](https://support.microsoft.com/en-us/office/enter-data-manually-in-worksheet-cells-c798181d-d75a-41b1-92ad-6c0800f80038).
  prefs: []
  type: TYPE_NORMAL
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both [Excel](https://support.microsoft.com/en-us/office/import-data-from-data-sources-power-query-be4330b3-5356-486c-a168-b68e9e616f5a)
    and [pandas](../intro_tutorials/02_read_write.html#min-tut-02-read-write) can
    import data from various sources in various formats.
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s load and display the [tips](https://github.com/pandas-dev/pandas/blob/main/pandas/tests/io/data/csv/tips.csv)
    dataset from the pandas tests, which is a CSV file. In Excel, you would download
    and then [open the CSV](https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba).
    In pandas, you pass the URL or local path of the CSV file to [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Like [Excel’s Text Import Wizard](https://support.microsoft.com/en-us/office/text-import-wizard-c5b02af6-fda1-4440-899f-f78bafe41857),
    `read_csv` can take a number of parameters to specify how the data should be parsed.
    For example, if the data was instead tab delimited, and did not have column names,
    the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Excel opens [various Excel file formats](https://support.microsoft.com/en-us/office/file-formats-that-are-supported-in-excel-0943ff2c-6014-4e8d-aaea-b83d51d46247)
    by double-clicking them, or using [the Open menu](https://support.microsoft.com/en-us/office/open-files-from-the-file-menu-97f087d8-3136-4485-8e86-c5b12a8c4176).
    In pandas, you use [special methods for reading and writing from/to Excel files](../../user_guide/io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first [create a new Excel file](../../user_guide/io.html#io-excel-writer)
    based on the `tips` dataframe in the above example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Should you wish to subsequently access the data in the `tips.xlsx` file, you
    can read it into your module using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You have just read in an Excel file using pandas!
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheet programs will only show one screenful of data at a time and then
    allow you to scroll, so there isn’t really a need to limit output. In pandas,
    you’ll need to put a little more thought into controlling how your `DataFrame`s
    are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, desktop spreadsheet software will save to its respective file format
    (`.xlsx`, `.ods`, etc). You can, however, [save to other file formats](https://support.microsoft.com/en-us/office/save-a-workbook-in-another-file-format-6a16c862-4a36-48f9-a300-c2ca0065286e).
  prefs: []
  type: TYPE_NORMAL
- en: '[pandas can create Excel files](../../user_guide/io.html#io-excel-writer),
    [CSV](../../user_guide/io.html#io-store-in-csv), or [a number of other formats](../../user_guide/io.html#io).'
  prefs: []
  type: TYPE_NORMAL
- en: Data operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, [formulas](https://support.microsoft.com/en-us/office/overview-of-formulas-in-excel-ecfdc708-9162-49e8-b993-c311f47ca173)
    are often created in individual cells and then [dragged](https://support.microsoft.com/en-us/office/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218)
    into other cells to compute them for other columns. In pandas, you’re able to
    do operations on whole columns directly.
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we aren’t having to tell it to do that subtraction cell-by-cell —
    pandas handles that for us. See [how to create new columns derived from existing
    columns](../intro_tutorials/05_add_columns.html#min-tut-05-columns).
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[In Excel, filtering is done through a graphical menu.](https://support.microsoft.com/en-us/office/filter-data-in-a-range-or-table-01832226-31b5-4568-8806-38c37dcc180e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing filtering of the total_bill column to values greater than
    10](../Images/504670cee47d6136c9bd2d70afce698f.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say we want to make a `bucket` column with values of `low` and `high`,
    based on whether the `total_bill` is less or more than $10.
  prefs: []
  type: TYPE_NORMAL
- en: In spreadsheets, logical comparison can be done with [conditional formulas](https://support.microsoft.com/en-us/office/create-conditional-formulas-ca916c57-abd8-4b44-997c-c309b7307831).
    We’d use a formula of `=IF(A2 < 10, "low", "high")`, dragged to all cells in a
    new `bucket` column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing the formula from above in a bucket column of the tips
    spreadsheet](../Images/763d17cbbee2c4ab3188d987c2b121df.png)'
  prefs: []
  type: TYPE_IMG
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*This section will refer to “dates”, but timestamps are handled similarly.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of date functionality in two parts: parsing, and output. In spreadsheets,
    date values are generally parsed automatically, though there is a [DATEVALUE](https://support.microsoft.com/en-us/office/datevalue-function-df8b07d4-7761-4a93-bc33-b7471bbff252)
    function if you need it. In pandas, you need to explicitly convert plain text
    to datetime objects, either [while reading from a CSV](../../user_guide/io.html#io-read-csv-table-datetime)
    or [once in a DataFrame](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties).'
  prefs: []
  type: TYPE_NORMAL
- en: Once parsed, spreadsheets display the dates in a default format, though [the
    format can be changed](https://support.microsoft.com/en-us/office/format-a-date-the-way-you-want-8e10019e-d5d8-47a1-ba95-db95123d273e).
    In pandas, you’ll generally want to keep dates as `datetime` objects while you’re
    doing calculations with them. Outputting *parts* of dates (such as the year) is
    done through [date functions](https://support.microsoft.com/en-us/office/date-and-time-functions-reference-fd1b5961-c1ae-4677-be58-074152f97b81)
    in spreadsheets, and [datetime properties](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties)
    in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given `date1` and `date2` in columns `A` and `B` of a spreadsheet, you might
    have these formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '| column | formula |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_year` | `=YEAR(A2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date2_month` | `=MONTH(B2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_next` | `=DATE(YEAR(A2),MONTH(A2)+1,1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `months_between` | `=DATEDIF(A2,B2,"M")` |'
  prefs: []
  type: TYPE_TB
- en: The equivalent pandas operations are shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See [Time series / date functionality](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In spreadsheets, you can select columns you want by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hiding columns](https://support.microsoft.com/en-us/office/hide-or-show-rows-or-columns-659c2cad-802e-44ee-a614-dde8443579f8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deleting columns](https://support.microsoft.com/en-us/office/insert-or-delete-rows-and-columns-6f40e6e4-85af-45e0-b39d-65dd504a3246)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Referencing a range](https://support.microsoft.com/en-us/office/create-or-change-a-cell-reference-c7b8b95d-c594-4488-947e-c835903cebaa)
    from one worksheet into another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since spreadsheet columns are typically [named in a header row](https://support.microsoft.com/en-us/office/turn-excel-table-headers-on-or-off-c91d1742-312c-4480-820f-cf4b534c8b3b),
    renaming a column is simply a matter of changing the text in that first cell.
  prefs: []
  type: TYPE_NORMAL
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in spreadsheets is accomplished via [the sort dialog](https://support.microsoft.com/en-us/office/sort-data-in-a-range-or-table-62d0b95d-2a90-4610-a6ae-2e545c4a4654).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of dialog from Excel showing sorting by the sex then total_bill
    columns](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: String processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, the number of characters in text can be found with the [LEN](https://support.microsoft.com/en-us/office/len-lenb-functions-29236f94-cedc-429d-affd-b5e33d2c67cb)
    function. This can be used with the [TRIM](https://support.microsoft.com/en-us/office/trim-function-410388fa-c5df-49c6-b16c-9e5630b479f9)
    function to remove extra whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note this will still include multiple spaces within the string, so isn’t 100%
    equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [FIND](https://support.microsoft.com/en-us/office/find-findb-functions-c7912941-af2a-4bdf-a553-d0d89b0a0628)
    spreadsheet function returns the position of a substring, with the first character
    being `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of FIND formula being used in Excel](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spreadsheets have a [MID](https://support.microsoft.com/en-us/office/mid-midb-functions-d5f9e25c-d7d6-472e-b568-4ecb12433028)
    formula for extracting a substring from a given position. To get the first character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Excel, you might use the [Text to Columns Wizard](https://support.microsoft.com/en-us/office/split-text-into-different-columns-with-the-convert-text-to-columns-wizard-30b14928-5550-41f5-97ca-7a3e9c363ed7)
    for splitting text and retrieving a specific column. (Note [it’s possible to do
    so through a formula as well](https://exceljet.net/formula/extract-nth-word-from-text-string).)
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheets provide [UPPER, LOWER, and PROPER functions](https://support.microsoft.com/en-us/office/change-the-case-of-text-01481046-0fa7-4f3b-a693-496795a7a44d)
    for converting text to upper, lower, and title case, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tables will be used in the merge examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In Excel, there are [merging of tables can be done through a VLOOKUP](https://support.microsoft.com/en-us/office/how-can-i-merge-two-or-more-tables-c80a9fce-c1ab-4425-bb96-497dd906d656).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing a VLOOKUP formula between two tables in Excel, with some
    values being filled in and others with "#N/A"](../Images/45b212b0b5aad19471118c664f8faa1d.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas DataFrames have a [`merge()`](../../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") method, which provides similar functionality. The data
    does not have to be sorted ahead of time, and different join types are accomplished
    via the `how` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`merge` has a number of advantages over `VLOOKUP`:'
  prefs: []
  type: TYPE_NORMAL
- en: The lookup value doesn’t need to be the first column of the lookup table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple rows are matched, there will be one row for each match, instead
    of just the first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will include all columns from the lookup table, instead of just a single
    specified column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports [more complex join operations](../../user_guide/merging.html#merging-join)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fill Handle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a series of numbers following a set pattern in a certain set of cells.
    In a spreadsheet, this would be done by shift+drag after entering the first number
    or by entering the first two or three values and then dragging.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved by creating a series and assigning it to the desired cells.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Drop Duplicates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Excel has built-in functionality for [removing duplicate values](https://support.microsoft.com/en-us/office/find-and-remove-duplicates-00e35bea-b46a-4d5d-b28e-66a552dc138d).
    This is supported in pandas via [`drop_duplicates()`](../../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Pivot Tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PivotTables](https://support.microsoft.com/en-us/office/create-a-pivottable-to-analyze-worksheet-data-a9a84538-bfe9-40a9-a8e9-f99134456576)
    from spreadsheets can be replicated in pandas through [Reshaping and pivot tables](../../user_guide/reshaping.html#reshaping).
    Using the `tips` dataset again, let’s find the average gratuity by size of the
    party and sex of the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Excel, we use the following configuration for the PivotTable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing a PivotTable in Excel, using sex as the column, size as
    the rows, then average tip as the values](../Images/a75631a6c79429bb08cae93014856707.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The equivalent in pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Adding a row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming we are using a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") (numbered `0`, `1`, etc.), we can use [`concat()`](../../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") to add a row to the bottom of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Find and Replace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Excel’s Find dialog](https://support.microsoft.com/en-us/office/find-or-replace-text-and-numbers-on-a-worksheet-0e304ca5-ecef-4808-b90f-fdb42f892e90)
    takes you to cells that match, one by one. In pandas, this operation is generally
    done for an entire column or `DataFrame` at once through [conditional expressions](../intro_tutorials/03_subset_data.html#min-tut-03-subset-rows-and-columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: pandas’ [`replace()`](../../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") is comparable to Excel’s `Replace All`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | Excel |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | worksheet |'
  prefs: []
  type: TYPE_TB
- en: '| `Series` | column |'
  prefs: []
  type: TYPE_TB
- en: '| `Index` | row headings |'
  prefs: []
  type: TYPE_TB
- en: '| row | row |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | empty cell |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to an Excel worksheet. While an Excel workbook
    can contain multiple worksheets, pandas `DataFrame`s exist independently.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    Working with a `Series` is analogous to referencing a column of a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index`, which are labels on the *rows*
    of the data. In pandas, if no index is specified, a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") is used by default (first row = 0, second row = 1, and so
    on), analogous to row headings/numbers in spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, indexes can be set to one (or multiple) unique values, which is like
    having a column that is used as the row identifier in a worksheet. Unlike most
    spreadsheets, these `Index` values can actually be used to reference the rows.
    (Note that [this can be done in Excel with structured references](https://support.microsoft.com/en-us/office/using-structured-references-with-excel-tables-f5ed2452-2337-4f71-bed3-c8ae6d2b276e).)
    For example, in spreadsheets, you would reference the first row as `A1:Z1`, while
    in pandas you could use `populations.loc['Chicago']`.
  prefs: []
  type: TYPE_NORMAL
- en: Index values are also persistent, so if you re-order the rows in a `DataFrame`,
    the label for a particular row don’t change.
  prefs: []
  type: TYPE_NORMAL
- en: See the [indexing documentation](../../user_guide/indexing.html#indexing) for
    much more on how to use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: General terminology translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| pandas | Excel |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataFrame` | worksheet |'
  prefs: []
  type: TYPE_TB
- en: '| `Series` | column |'
  prefs: []
  type: TYPE_TB
- en: '| `Index` | row headings |'
  prefs: []
  type: TYPE_TB
- en: '| row | row |'
  prefs: []
  type: TYPE_TB
- en: '| `NaN` | empty cell |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrame`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DataFrame` in pandas is analogous to an Excel worksheet. While an Excel workbook
    can contain multiple worksheets, pandas `DataFrame`s exist independently.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Series` is the data structure that represents one column of a `DataFrame`.
    Working with a `Series` is analogous to referencing a column of a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every `DataFrame` and `Series` has an `Index`, which are labels on the *rows*
    of the data. In pandas, if no index is specified, a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") is used by default (first row = 0, second row = 1, and so
    on), analogous to row headings/numbers in spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: In pandas, indexes can be set to one (or multiple) unique values, which is like
    having a column that is used as the row identifier in a worksheet. Unlike most
    spreadsheets, these `Index` values can actually be used to reference the rows.
    (Note that [this can be done in Excel with structured references](https://support.microsoft.com/en-us/office/using-structured-references-with-excel-tables-f5ed2452-2337-4f71-bed3-c8ae6d2b276e).)
    For example, in spreadsheets, you would reference the first row as `A1:Z1`, while
    in pandas you could use `populations.loc['Chicago']`.
  prefs: []
  type: TYPE_NORMAL
- en: Index values are also persistent, so if you re-order the rows in a `DataFrame`,
    the label for a particular row don’t change.
  prefs: []
  type: TYPE_NORMAL
- en: See the [indexing documentation](../../user_guide/indexing.html#indexing) for
    much more on how to use an `Index` effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Copies vs. in place operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most pandas operations return copies of the `Series`/`DataFrame`. To make the
    changes “stick”, you’ll need to either assign to a new variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'or overwrite the original one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an `inplace=True` or `copy=False` keyword argument available for
    some methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: There is an active discussion about deprecating and removing `inplace` and `copy`
    for most methods (e.g. `dropna`) except for a very small subset of methods (including
    `replace`). Both keywords won’t be necessary anymore in the context of Copy-on-Write.
    The proposal can be found [here](https://github.com/pandas-dev/pandas/pull/51466).
  prefs: []
  type: TYPE_NORMAL
- en: Data input / output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a spreadsheet, [values can be typed directly into cells](https://support.microsoft.com/en-us/office/enter-data-manually-in-worksheet-cells-c798181d-d75a-41b1-92ad-6c0800f80038).
  prefs: []
  type: TYPE_NORMAL
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both [Excel](https://support.microsoft.com/en-us/office/import-data-from-data-sources-power-query-be4330b3-5356-486c-a168-b68e9e616f5a)
    and [pandas](../intro_tutorials/02_read_write.html#min-tut-02-read-write) can
    import data from various sources in various formats.
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s load and display the [tips](https://github.com/pandas-dev/pandas/blob/main/pandas/tests/io/data/csv/tips.csv)
    dataset from the pandas tests, which is a CSV file. In Excel, you would download
    and then [open the CSV](https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba).
    In pandas, you pass the URL or local path of the CSV file to [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Like [Excel’s Text Import Wizard](https://support.microsoft.com/en-us/office/text-import-wizard-c5b02af6-fda1-4440-899f-f78bafe41857),
    `read_csv` can take a number of parameters to specify how the data should be parsed.
    For example, if the data was instead tab delimited, and did not have column names,
    the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Excel opens [various Excel file formats](https://support.microsoft.com/en-us/office/file-formats-that-are-supported-in-excel-0943ff2c-6014-4e8d-aaea-b83d51d46247)
    by double-clicking them, or using [the Open menu](https://support.microsoft.com/en-us/office/open-files-from-the-file-menu-97f087d8-3136-4485-8e86-c5b12a8c4176).
    In pandas, you use [special methods for reading and writing from/to Excel files](../../user_guide/io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first [create a new Excel file](../../user_guide/io.html#io-excel-writer)
    based on the `tips` dataframe in the above example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Should you wish to subsequently access the data in the `tips.xlsx` file, you
    can read it into your module using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You have just read in an Excel file using pandas!
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheet programs will only show one screenful of data at a time and then
    allow you to scroll, so there isn’t really a need to limit output. In pandas,
    you’ll need to put a little more thought into controlling how your `DataFrame`s
    are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, desktop spreadsheet software will save to its respective file format
    (`.xlsx`, `.ods`, etc). You can, however, [save to other file formats](https://support.microsoft.com/en-us/office/save-a-workbook-in-another-file-format-6a16c862-4a36-48f9-a300-c2ca0065286e).
  prefs: []
  type: TYPE_NORMAL
- en: '[pandas can create Excel files](../../user_guide/io.html#io-excel-writer),
    [CSV](../../user_guide/io.html#io-store-in-csv), or [a number of other formats](../../user_guide/io.html#io).'
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a DataFrame from values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a spreadsheet, [values can be typed directly into cells](https://support.microsoft.com/en-us/office/enter-data-manually-in-worksheet-cells-c798181d-d75a-41b1-92ad-6c0800f80038).
  prefs: []
  type: TYPE_NORMAL
- en: A pandas `DataFrame` can be constructed in many different ways, but for a small
    number of values, it is often convenient to specify it as a Python dictionary,
    where the keys are the column names and the values are the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Reading external data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both [Excel](https://support.microsoft.com/en-us/office/import-data-from-data-sources-power-query-be4330b3-5356-486c-a168-b68e9e616f5a)
    and [pandas](../intro_tutorials/02_read_write.html#min-tut-02-read-write) can
    import data from various sources in various formats.
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s load and display the [tips](https://github.com/pandas-dev/pandas/blob/main/pandas/tests/io/data/csv/tips.csv)
    dataset from the pandas tests, which is a CSV file. In Excel, you would download
    and then [open the CSV](https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba).
    In pandas, you pass the URL or local path of the CSV file to [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Like [Excel’s Text Import Wizard](https://support.microsoft.com/en-us/office/text-import-wizard-c5b02af6-fda1-4440-899f-f78bafe41857),
    `read_csv` can take a number of parameters to specify how the data should be parsed.
    For example, if the data was instead tab delimited, and did not have column names,
    the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Excel opens [various Excel file formats](https://support.microsoft.com/en-us/office/file-formats-that-are-supported-in-excel-0943ff2c-6014-4e8d-aaea-b83d51d46247)
    by double-clicking them, or using [the Open menu](https://support.microsoft.com/en-us/office/open-files-from-the-file-menu-97f087d8-3136-4485-8e86-c5b12a8c4176).
    In pandas, you use [special methods for reading and writing from/to Excel files](../../user_guide/io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first [create a new Excel file](../../user_guide/io.html#io-excel-writer)
    based on the `tips` dataframe in the above example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Should you wish to subsequently access the data in the `tips.xlsx` file, you
    can read it into your module using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You have just read in an Excel file using pandas!
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s load and display the [tips](https://github.com/pandas-dev/pandas/blob/main/pandas/tests/io/data/csv/tips.csv)
    dataset from the pandas tests, which is a CSV file. In Excel, you would download
    and then [open the CSV](https://support.microsoft.com/en-us/office/import-or-export-text-txt-or-csv-files-5250ac4c-663c-47ce-937b-339e391393ba).
    In pandas, you pass the URL or local path of the CSV file to [`read_csv()`](../../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Like [Excel’s Text Import Wizard](https://support.microsoft.com/en-us/office/text-import-wizard-c5b02af6-fda1-4440-899f-f78bafe41857),
    `read_csv` can take a number of parameters to specify how the data should be parsed.
    For example, if the data was instead tab delimited, and did not have column names,
    the pandas command would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Excel opens [various Excel file formats](https://support.microsoft.com/en-us/office/file-formats-that-are-supported-in-excel-0943ff2c-6014-4e8d-aaea-b83d51d46247)
    by double-clicking them, or using [the Open menu](https://support.microsoft.com/en-us/office/open-files-from-the-file-menu-97f087d8-3136-4485-8e86-c5b12a8c4176).
    In pandas, you use [special methods for reading and writing from/to Excel files](../../user_guide/io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first [create a new Excel file](../../user_guide/io.html#io-excel-writer)
    based on the `tips` dataframe in the above example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Should you wish to subsequently access the data in the `tips.xlsx` file, you
    can read it into your module using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You have just read in an Excel file using pandas!
  prefs: []
  type: TYPE_NORMAL
- en: Limiting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheet programs will only show one screenful of data at a time and then
    allow you to scroll, so there isn’t really a need to limit output. In pandas,
    you’ll need to put a little more thought into controlling how your `DataFrame`s
    are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: By default, pandas will truncate output of large `DataFrame`s to show the first
    and last rows. This can be overridden by [changing the pandas options](../../user_guide/options.html#options),
    or using [`DataFrame.head()`](../../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") or [`DataFrame.tail()`](../../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Exporting data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, desktop spreadsheet software will save to its respective file format
    (`.xlsx`, `.ods`, etc). You can, however, [save to other file formats](https://support.microsoft.com/en-us/office/save-a-workbook-in-another-file-format-6a16c862-4a36-48f9-a300-c2ca0065286e).
  prefs: []
  type: TYPE_NORMAL
- en: '[pandas can create Excel files](../../user_guide/io.html#io-excel-writer),
    [CSV](../../user_guide/io.html#io-store-in-csv), or [a number of other formats](../../user_guide/io.html#io).'
  prefs: []
  type: TYPE_NORMAL
- en: Data operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, [formulas](https://support.microsoft.com/en-us/office/overview-of-formulas-in-excel-ecfdc708-9162-49e8-b993-c311f47ca173)
    are often created in individual cells and then [dragged](https://support.microsoft.com/en-us/office/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218)
    into other cells to compute them for other columns. In pandas, you’re able to
    do operations on whole columns directly.
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Note that we aren’t having to tell it to do that subtraction cell-by-cell —
    pandas handles that for us. See [how to create new columns derived from existing
    columns](../intro_tutorials/05_add_columns.html#min-tut-05-columns).
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[In Excel, filtering is done through a graphical menu.](https://support.microsoft.com/en-us/office/filter-data-in-a-range-or-table-01832226-31b5-4568-8806-38c37dcc180e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing filtering of the total_bill column to values greater than
    10](../Images/504670cee47d6136c9bd2d70afce698f.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say we want to make a `bucket` column with values of `low` and `high`,
    based on whether the `total_bill` is less or more than $10.
  prefs: []
  type: TYPE_NORMAL
- en: In spreadsheets, logical comparison can be done with [conditional formulas](https://support.microsoft.com/en-us/office/create-conditional-formulas-ca916c57-abd8-4b44-997c-c309b7307831).
    We’d use a formula of `=IF(A2 < 10, "low", "high")`, dragged to all cells in a
    new `bucket` column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing the formula from above in a bucket column of the tips
    spreadsheet](../Images/763d17cbbee2c4ab3188d987c2b121df.png)'
  prefs: []
  type: TYPE_IMG
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*This section will refer to “dates”, but timestamps are handled similarly.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of date functionality in two parts: parsing, and output. In spreadsheets,
    date values are generally parsed automatically, though there is a [DATEVALUE](https://support.microsoft.com/en-us/office/datevalue-function-df8b07d4-7761-4a93-bc33-b7471bbff252)
    function if you need it. In pandas, you need to explicitly convert plain text
    to datetime objects, either [while reading from a CSV](../../user_guide/io.html#io-read-csv-table-datetime)
    or [once in a DataFrame](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties).'
  prefs: []
  type: TYPE_NORMAL
- en: Once parsed, spreadsheets display the dates in a default format, though [the
    format can be changed](https://support.microsoft.com/en-us/office/format-a-date-the-way-you-want-8e10019e-d5d8-47a1-ba95-db95123d273e).
    In pandas, you’ll generally want to keep dates as `datetime` objects while you’re
    doing calculations with them. Outputting *parts* of dates (such as the year) is
    done through [date functions](https://support.microsoft.com/en-us/office/date-and-time-functions-reference-fd1b5961-c1ae-4677-be58-074152f97b81)
    in spreadsheets, and [datetime properties](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties)
    in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given `date1` and `date2` in columns `A` and `B` of a spreadsheet, you might
    have these formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '| column | formula |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_year` | `=YEAR(A2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date2_month` | `=MONTH(B2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_next` | `=DATE(YEAR(A2),MONTH(A2)+1,1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `months_between` | `=DATEDIF(A2,B2,"M")` |'
  prefs: []
  type: TYPE_TB
- en: The equivalent pandas operations are shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See [Time series / date functionality](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In spreadsheets, you can select columns you want by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hiding columns](https://support.microsoft.com/en-us/office/hide-or-show-rows-or-columns-659c2cad-802e-44ee-a614-dde8443579f8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deleting columns](https://support.microsoft.com/en-us/office/insert-or-delete-rows-and-columns-6f40e6e4-85af-45e0-b39d-65dd504a3246)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Referencing a range](https://support.microsoft.com/en-us/office/create-or-change-a-cell-reference-c7b8b95d-c594-4488-947e-c835903cebaa)
    from one worksheet into another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since spreadsheet columns are typically [named in a header row](https://support.microsoft.com/en-us/office/turn-excel-table-headers-on-or-off-c91d1742-312c-4480-820f-cf4b534c8b3b),
    renaming a column is simply a matter of changing the text in that first cell.
  prefs: []
  type: TYPE_NORMAL
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in spreadsheets is accomplished via [the sort dialog](https://support.microsoft.com/en-us/office/sort-data-in-a-range-or-table-62d0b95d-2a90-4610-a6ae-2e545c4a4654).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of dialog from Excel showing sorting by the sex then total_bill
    columns](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Operations on columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, [formulas](https://support.microsoft.com/en-us/office/overview-of-formulas-in-excel-ecfdc708-9162-49e8-b993-c311f47ca173)
    are often created in individual cells and then [dragged](https://support.microsoft.com/en-us/office/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218)
    into other cells to compute them for other columns. In pandas, you’re able to
    do operations on whole columns directly.
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides vectorized operations by specifying the individual `Series`
    in the `DataFrame`. New columns can be assigned in the same way. The [`DataFrame.drop()`](../../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method drops a column from the `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note that we aren’t having to tell it to do that subtraction cell-by-cell —
    pandas handles that for us. See [how to create new columns derived from existing
    columns](../intro_tutorials/05_add_columns.html#min-tut-05-columns).
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[In Excel, filtering is done through a graphical menu.](https://support.microsoft.com/en-us/office/filter-data-in-a-range-or-table-01832226-31b5-4568-8806-38c37dcc180e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing filtering of the total_bill column to values greater than
    10](../Images/504670cee47d6136c9bd2d70afce698f.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrames can be filtered in multiple ways; the most intuitive of which is
    using [boolean indexing](../../user_guide/indexing.html#indexing-boolean).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The above statement is simply passing a `Series` of `True`/`False` objects to
    the DataFrame, returning all rows with `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If/then logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s say we want to make a `bucket` column with values of `low` and `high`,
    based on whether the `total_bill` is less or more than $10.
  prefs: []
  type: TYPE_NORMAL
- en: In spreadsheets, logical comparison can be done with [conditional formulas](https://support.microsoft.com/en-us/office/create-conditional-formulas-ca916c57-abd8-4b44-997c-c309b7307831).
    We’d use a formula of `=IF(A2 < 10, "low", "high")`, dragged to all cells in a
    new `bucket` column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing the formula from above in a bucket column of the tips
    spreadsheet](../Images/763d17cbbee2c4ab3188d987c2b121df.png)'
  prefs: []
  type: TYPE_IMG
- en: The same operation in pandas can be accomplished using the `where` method from
    `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Date functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*This section will refer to “dates”, but timestamps are handled similarly.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can think of date functionality in two parts: parsing, and output. In spreadsheets,
    date values are generally parsed automatically, though there is a [DATEVALUE](https://support.microsoft.com/en-us/office/datevalue-function-df8b07d4-7761-4a93-bc33-b7471bbff252)
    function if you need it. In pandas, you need to explicitly convert plain text
    to datetime objects, either [while reading from a CSV](../../user_guide/io.html#io-read-csv-table-datetime)
    or [once in a DataFrame](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties).'
  prefs: []
  type: TYPE_NORMAL
- en: Once parsed, spreadsheets display the dates in a default format, though [the
    format can be changed](https://support.microsoft.com/en-us/office/format-a-date-the-way-you-want-8e10019e-d5d8-47a1-ba95-db95123d273e).
    In pandas, you’ll generally want to keep dates as `datetime` objects while you’re
    doing calculations with them. Outputting *parts* of dates (such as the year) is
    done through [date functions](https://support.microsoft.com/en-us/office/date-and-time-functions-reference-fd1b5961-c1ae-4677-be58-074152f97b81)
    in spreadsheets, and [datetime properties](../intro_tutorials/09_timeseries.html#min-tut-09-timeseries-properties)
    in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given `date1` and `date2` in columns `A` and `B` of a spreadsheet, you might
    have these formulas:'
  prefs: []
  type: TYPE_NORMAL
- en: '| column | formula |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_year` | `=YEAR(A2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date2_month` | `=MONTH(B2)` |'
  prefs: []
  type: TYPE_TB
- en: '| `date1_next` | `=DATE(YEAR(A2),MONTH(A2)+1,1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `months_between` | `=DATEDIF(A2,B2,"M")` |'
  prefs: []
  type: TYPE_TB
- en: The equivalent pandas operations are shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: See [Time series / date functionality](../../user_guide/timeseries.html#timeseries)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Selection of columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In spreadsheets, you can select columns you want by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hiding columns](https://support.microsoft.com/en-us/office/hide-or-show-rows-or-columns-659c2cad-802e-44ee-a614-dde8443579f8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deleting columns](https://support.microsoft.com/en-us/office/insert-or-delete-rows-and-columns-6f40e6e4-85af-45e0-b39d-65dd504a3246)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Referencing a range](https://support.microsoft.com/en-us/office/create-or-change-a-cell-reference-c7b8b95d-c594-4488-947e-c835903cebaa)
    from one worksheet into another'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since spreadsheet columns are typically [named in a header row](https://support.microsoft.com/en-us/office/turn-excel-table-headers-on-or-off-c91d1742-312c-4480-820f-cf4b534c8b3b),
    renaming a column is simply a matter of changing the text in that first cell.
  prefs: []
  type: TYPE_NORMAL
- en: The same operations are expressed in pandas below.
  prefs: []
  type: TYPE_NORMAL
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Keep certain columns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Drop a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Sorting by values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting in spreadsheets is accomplished via [the sort dialog](https://support.microsoft.com/en-us/office/sort-data-in-a-range-or-table-62d0b95d-2a90-4610-a6ae-2e545c4a4654).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of dialog from Excel showing sorting by the sex then total_bill
    columns](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas has a [`DataFrame.sort_values()`](../../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method, which takes a list of columns to sort
    by.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: String processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, the number of characters in text can be found with the [LEN](https://support.microsoft.com/en-us/office/len-lenb-functions-29236f94-cedc-429d-affd-b5e33d2c67cb)
    function. This can be used with the [TRIM](https://support.microsoft.com/en-us/office/trim-function-410388fa-c5df-49c6-b16c-9e5630b479f9)
    function to remove extra whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Note this will still include multiple spaces within the string, so isn’t 100%
    equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [FIND](https://support.microsoft.com/en-us/office/find-findb-functions-c7912941-af2a-4bdf-a553-d0d89b0a0628)
    spreadsheet function returns the position of a substring, with the first character
    being `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of FIND formula being used in Excel](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spreadsheets have a [MID](https://support.microsoft.com/en-us/office/mid-midb-functions-d5f9e25c-d7d6-472e-b568-4ecb12433028)
    formula for extracting a substring from a given position. To get the first character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Excel, you might use the [Text to Columns Wizard](https://support.microsoft.com/en-us/office/split-text-into-different-columns-with-the-convert-text-to-columns-wizard-30b14928-5550-41f5-97ca-7a3e9c363ed7)
    for splitting text and retrieving a specific column. (Note [it’s possible to do
    so through a formula as well](https://exceljet.net/formula/extract-nth-word-from-text-string).)
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheets provide [UPPER, LOWER, and PROPER functions](https://support.microsoft.com/en-us/office/change-the-case-of-text-01481046-0fa7-4f3b-a693-496795a7a44d)
    for converting text to upper, lower, and title case, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Finding length of string
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In spreadsheets, the number of characters in text can be found with the [LEN](https://support.microsoft.com/en-us/office/len-lenb-functions-29236f94-cedc-429d-affd-b5e33d2c67cb)
    function. This can be used with the [TRIM](https://support.microsoft.com/en-us/office/trim-function-410388fa-c5df-49c6-b16c-9e5630b479f9)
    function to remove extra whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: You can find the length of a character string with [`Series.str.len()`](../../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len"). In Python 3, all strings are Unicode strings. `len`
    includes trailing blanks. Use `len` and `rstrip` to exclude trailing blanks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Note this will still include multiple spaces within the string, so isn’t 100%
    equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Finding position of substring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [FIND](https://support.microsoft.com/en-us/office/find-findb-functions-c7912941-af2a-4bdf-a553-d0d89b0a0628)
    spreadsheet function returns the position of a substring, with the first character
    being `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of FIND formula being used in Excel](../Images/b689a4959a66e481ffeaf85cd8d0d137.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find the position of a character in a column of strings with the [`Series.str.find()`](../../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") method. `find` searches for the first position of the
    substring. If the substring is found, the method returns its position. If not
    found, it returns `-1`. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Extracting substring by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spreadsheets have a [MID](https://support.microsoft.com/en-us/office/mid-midb-functions-d5f9e25c-d7d6-472e-b568-4ecb12433028)
    formula for extracting a substring from a given position. To get the first character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: With pandas you can use `[]` notation to extract a substring from a string by
    position locations. Keep in mind that Python indexes are zero-based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Extracting nth word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Excel, you might use the [Text to Columns Wizard](https://support.microsoft.com/en-us/office/split-text-into-different-columns-with-the-convert-text-to-columns-wizard-30b14928-5550-41f5-97ca-7a3e9c363ed7)
    for splitting text and retrieving a specific column. (Note [it’s possible to do
    so through a formula as well](https://exceljet.net/formula/extract-nth-word-from-text-string).)
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to extract words in pandas is to split the strings by spaces,
    then reference the word by index. Note there are more powerful approaches should
    you need them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Changing case
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spreadsheets provide [UPPER, LOWER, and PROPER functions](https://support.microsoft.com/en-us/office/change-the-case-of-text-01481046-0fa7-4f3b-a693-496795a7a44d)
    for converting text to upper, lower, and title case, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The equivalent pandas methods are [`Series.str.upper()`](../../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper"), [`Series.str.lower()`](../../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower"), and [`Series.str.title()`](../../reference/api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tables will be used in the merge examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: In Excel, there are [merging of tables can be done through a VLOOKUP](https://support.microsoft.com/en-us/office/how-can-i-merge-two-or-more-tables-c80a9fce-c1ab-4425-bb96-497dd906d656).
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing a VLOOKUP formula between two tables in Excel, with some
    values being filled in and others with "#N/A"](../Images/45b212b0b5aad19471118c664f8faa1d.png)'
  prefs: []
  type: TYPE_IMG
- en: pandas DataFrames have a [`merge()`](../../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") method, which provides similar functionality. The data
    does not have to be sorted ahead of time, and different join types are accomplished
    via the `how` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '`merge` has a number of advantages over `VLOOKUP`:'
  prefs: []
  type: TYPE_NORMAL
- en: The lookup value doesn’t need to be the first column of the lookup table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If multiple rows are matched, there will be one row for each match, instead
    of just the first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will include all columns from the lookup table, instead of just a single
    specified column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports [more complex join operations](../../user_guide/merging.html#merging-join)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fill Handle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a series of numbers following a set pattern in a certain set of cells.
    In a spreadsheet, this would be done by shift+drag after entering the first number
    or by entering the first two or three values and then dragging.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved by creating a series and assigning it to the desired cells.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Drop Duplicates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Excel has built-in functionality for [removing duplicate values](https://support.microsoft.com/en-us/office/find-and-remove-duplicates-00e35bea-b46a-4d5d-b28e-66a552dc138d).
    This is supported in pandas via [`drop_duplicates()`](../../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Pivot Tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PivotTables](https://support.microsoft.com/en-us/office/create-a-pivottable-to-analyze-worksheet-data-a9a84538-bfe9-40a9-a8e9-f99134456576)
    from spreadsheets can be replicated in pandas through [Reshaping and pivot tables](../../user_guide/reshaping.html#reshaping).
    Using the `tips` dataset again, let’s find the average gratuity by size of the
    party and sex of the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Excel, we use the following configuration for the PivotTable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing a PivotTable in Excel, using sex as the column, size as
    the rows, then average tip as the values](../Images/a75631a6c79429bb08cae93014856707.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The equivalent in pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Adding a row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming we are using a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") (numbered `0`, `1`, etc.), we can use [`concat()`](../../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") to add a row to the bottom of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Find and Replace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Excel’s Find dialog](https://support.microsoft.com/en-us/office/find-or-replace-text-and-numbers-on-a-worksheet-0e304ca5-ecef-4808-b90f-fdb42f892e90)
    takes you to cells that match, one by one. In pandas, this operation is generally
    done for an entire column or `DataFrame` at once through [conditional expressions](../intro_tutorials/03_subset_data.html#min-tut-03-subset-rows-and-columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: pandas’ [`replace()`](../../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") is comparable to Excel’s `Replace All`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Fill Handle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a series of numbers following a set pattern in a certain set of cells.
    In a spreadsheet, this would be done by shift+drag after entering the first number
    or by entering the first two or three values and then dragging.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved by creating a series and assigning it to the desired cells.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Drop Duplicates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Excel has built-in functionality for [removing duplicate values](https://support.microsoft.com/en-us/office/find-and-remove-duplicates-00e35bea-b46a-4d5d-b28e-66a552dc138d).
    This is supported in pandas via [`drop_duplicates()`](../../reference/api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Pivot Tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PivotTables](https://support.microsoft.com/en-us/office/create-a-pivottable-to-analyze-worksheet-data-a9a84538-bfe9-40a9-a8e9-f99134456576)
    from spreadsheets can be replicated in pandas through [Reshaping and pivot tables](../../user_guide/reshaping.html#reshaping).
    Using the `tips` dataset again, let’s find the average gratuity by size of the
    party and sex of the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Excel, we use the following configuration for the PivotTable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot showing a PivotTable in Excel, using sex as the column, size as
    the rows, then average tip as the values](../Images/a75631a6c79429bb08cae93014856707.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The equivalent in pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Adding a row
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming we are using a [`RangeIndex`](../../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") (numbered `0`, `1`, etc.), we can use [`concat()`](../../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") to add a row to the bottom of a `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Find and Replace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Excel’s Find dialog](https://support.microsoft.com/en-us/office/find-or-replace-text-and-numbers-on-a-worksheet-0e304ca5-ecef-4808-b90f-fdb42f892e90)
    takes you to cells that match, one by one. In pandas, this operation is generally
    done for an entire column or `DataFrame` at once through [conditional expressions](../intro_tutorials/03_subset_data.html#min-tut-03-subset-rows-and-columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: pandas’ [`replace()`](../../reference/api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace") is comparable to Excel’s `Replace All`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
