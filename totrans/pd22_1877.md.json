["```py\n# for Debian/Ubuntu:\ndpkg --list | grep compiler\n# for Red Hat/RHEL/CentOS/Fedora:\nyum list installed | grep -i --color compiler \n```", "```py\nmamba env create --file environment.yml\nmamba activate pandas-dev \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/virtualenvs/pandas-dev\n# Any parent directories should already exist\npython3  -m  venv  ~/virtualenvs/pandas-dev\n\n# Activate the virtualenv\n.  ~/virtualenvs/pandas-dev/bin/activate\n\n# Install the build dependencies\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/Users/<yourname>/.pyenv/versions/pandas-dev\npyenv  virtualenv  <version>  <name-to-give-it>\n\n# For instance:\npyenv  virtualenv  3.9.10  pandas-dev\n\n# Activate the virtualenv\npyenv  activate  pandas-dev\n\n# Now install the build dependencies in the cloned pandas repo\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\npython -m venv $env:USERPROFILE\\virtualenvs\\pandas-dev\n\n# Activate the virtualenv. Use activate.bat for cmd.exe\n~\\virtualenvs\\pandas-dev\\Scripts\\Activate.ps1\n\n# Install the build dependencies\npython -m pip install -r requirements-dev.txt \n```", "```py\n# Build the image\ndocker build -t pandas-dev . \n```", "```py\n# Run a container and bind your local repo to the container\n# This command assumes you are running from your local repo\n# but if not alter ${PWD} to match your local repo path\ndocker run -it --rm -v ${PWD}:/home/pandas pandas-dev \n```", "```py\n# Build and install pandas\n# By default, this will print verbose output\n# showing the \"rebuild\" taking place on import (see section below for explanation)\n# If you do not want to see this, omit everything after --no-build-isolation\npython -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true \n```", "```py\n# set the upstream repository, if not done already, and fetch the latest tags\ngit remote add upstream https://github.com/pandas-dev/pandas.git\ngit fetch upstream --tags \n```", "```py\npython setup.py develop \n```", "```py\npython -m pip uninstall pandas \n```", "```py\n$ python\n>>> import pandas\n>>> print(pandas.__version__)  # note: the exact output may differ\n2.0.0.dev0+880.g2b9e661fbb.dirty \n```", "```py\n# On Linux/macOS\nMESONPY_EDITABLE_VERBOSE=1 python\n\n# Windows\nset MESONPY_EDITABLE_VERBOSE=1 # Only need to set this once per session\npython \n```", "```py\npython -m pip install -ve . --config-settings editable-verbose=true \n```", "```py\n# for Debian/Ubuntu:\ndpkg --list | grep compiler\n# for Red Hat/RHEL/CentOS/Fedora:\nyum list installed | grep -i --color compiler \n```", "```py\nmamba env create --file environment.yml\nmamba activate pandas-dev \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/virtualenvs/pandas-dev\n# Any parent directories should already exist\npython3  -m  venv  ~/virtualenvs/pandas-dev\n\n# Activate the virtualenv\n.  ~/virtualenvs/pandas-dev/bin/activate\n\n# Install the build dependencies\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/Users/<yourname>/.pyenv/versions/pandas-dev\npyenv  virtualenv  <version>  <name-to-give-it>\n\n# For instance:\npyenv  virtualenv  3.9.10  pandas-dev\n\n# Activate the virtualenv\npyenv  activate  pandas-dev\n\n# Now install the build dependencies in the cloned pandas repo\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\npython -m venv $env:USERPROFILE\\virtualenvs\\pandas-dev\n\n# Activate the virtualenv. Use activate.bat for cmd.exe\n~\\virtualenvs\\pandas-dev\\Scripts\\Activate.ps1\n\n# Install the build dependencies\npython -m pip install -r requirements-dev.txt \n```", "```py\n# Build the image\ndocker build -t pandas-dev . \n```", "```py\n# Run a container and bind your local repo to the container\n# This command assumes you are running from your local repo\n# but if not alter ${PWD} to match your local repo path\ndocker run -it --rm -v ${PWD}:/home/pandas pandas-dev \n```", "```py\nmamba env create --file environment.yml\nmamba activate pandas-dev \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/virtualenvs/pandas-dev\n# Any parent directories should already exist\npython3  -m  venv  ~/virtualenvs/pandas-dev\n\n# Activate the virtualenv\n.  ~/virtualenvs/pandas-dev/bin/activate\n\n# Install the build dependencies\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\n# Use an ENV_DIR of your choice. We'll use ~/Users/<yourname>/.pyenv/versions/pandas-dev\npyenv  virtualenv  <version>  <name-to-give-it>\n\n# For instance:\npyenv  virtualenv  3.9.10  pandas-dev\n\n# Activate the virtualenv\npyenv  activate  pandas-dev\n\n# Now install the build dependencies in the cloned pandas repo\npython  -m  pip  install  -r  requirements-dev.txt \n```", "```py\n# Create a virtual environment\npython -m venv $env:USERPROFILE\\virtualenvs\\pandas-dev\n\n# Activate the virtualenv. Use activate.bat for cmd.exe\n~\\virtualenvs\\pandas-dev\\Scripts\\Activate.ps1\n\n# Install the build dependencies\npython -m pip install -r requirements-dev.txt \n```", "```py\n# Build the image\ndocker build -t pandas-dev . \n```", "```py\n# Run a container and bind your local repo to the container\n# This command assumes you are running from your local repo\n# but if not alter ${PWD} to match your local repo path\ndocker run -it --rm -v ${PWD}:/home/pandas pandas-dev \n```", "```py\n# Build and install pandas\n# By default, this will print verbose output\n# showing the \"rebuild\" taking place on import (see section below for explanation)\n# If you do not want to see this, omit everything after --no-build-isolation\npython -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true \n```", "```py\n# set the upstream repository, if not done already, and fetch the latest tags\ngit remote add upstream https://github.com/pandas-dev/pandas.git\ngit fetch upstream --tags \n```", "```py\npython setup.py develop \n```", "```py\npython -m pip uninstall pandas \n```", "```py\n$ python\n>>> import pandas\n>>> print(pandas.__version__)  # note: the exact output may differ\n2.0.0.dev0+880.g2b9e661fbb.dirty \n```", "```py\n# On Linux/macOS\nMESONPY_EDITABLE_VERBOSE=1 python\n\n# Windows\nset MESONPY_EDITABLE_VERBOSE=1 # Only need to set this once per session\npython \n```", "```py\npython -m pip install -ve . --config-settings editable-verbose=true \n```"]