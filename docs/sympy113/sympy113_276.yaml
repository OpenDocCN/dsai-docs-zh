- en: Uses and Current limitations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用途和当前的限制
- en: Original text：[https://docs.sympy.org/latest/modules/holonomic/uses.html](https://docs.sympy.org/latest/modules/holonomic/uses.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/holonomic/uses.html](https://docs.sympy.org/latest/modules/holonomic/uses.html)
- en: Integration
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 积分
- en: 'One can perform integrations using holonomic functions by following these steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照以下步骤使用全局函数执行积分：
- en: Convert the integrand to a holonomic function.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将被积函数转换为全局函数。
- en: Now integrate the holonomic representation of the function.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在整合函数的全局表达式。
- en: Convert the integral back to expressions.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将积分再转换为表达式。
- en: Examples
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the first example we converted the function to holonomic,
    integrated the result and then converted back to symbolic expression.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在第一个示例中看到的，我们将函数转换为全局函数，对结果进行积分，然后再转换回符号表达式。
- en: Limitations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局限性
- en: 1\. Converting to expressions is not always possible. The holonomic function
    should have a hypergeometric series at `x0`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 并非总是可以转换为表达式。全局函数应该在 `x0` 处具有超几何级数。
- en: 2\. Implementation of converting to holonomic sequence currently doesn’t support
    `Frobenius method` when the solutions need to have \(\log\) terms. This happens
    when at least one pair of the roots of the indicial equation differ by an integer
    and frobenius method yields linearly dependent series solutions. Since we use
    this while converting to expressions, sometimes [`to_expr()`](operations.html#sympy.holonomic.holonomic.HolonomicFunction.to_expr
    "sympy.holonomic.holonomic.HolonomicFunction.to_expr") fails.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 当解需要具有 \(\log\) 项时，当前转换为全局序列的实现不支持 `Frobenius method`。当指标方程的至少一个根对之间差一个整数时，以及
    Frobenius 方法产生线性相关的级数解时，这种情况就会发生。由于我们在转换为表达式时使用这个方法，有时 [`to_expr()`](operations.html#sympy.holonomic.holonomic.HolonomicFunction.to_expr
    "sympy.holonomic.holonomic.HolonomicFunction.to_expr") 会失败。
- en: '3\. There doesn’t seem to be a way for computing indefinite integrals, so [`integrate()`](operations.html#sympy.holonomic.holonomic.HolonomicFunction.integrate
    "sympy.holonomic.holonomic.HolonomicFunction.integrate") basically computes \(\int_{x_0}^{x}
    f(x)dx\) if no limits are given, where \(x_0\) is the point at which initial conditions
    for the integrand are stored. Sometimes this gives an additional constant in the
    result. For instance:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 似乎没有计算不定积分的方法，所以 [`integrate()`](operations.html#sympy.holonomic.holonomic.HolonomicFunction.integrate
    "sympy.holonomic.holonomic.HolonomicFunction.integrate") 基本上计算的是 \(\int_{x_0}^{x}
    f(x)dx\)，如果没有给出限制条件，则 \(x_0\) 是存储被积函数初始条件的点。有时结果会多出一个常数。例如：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The indefinite integral of \(\sin(x)\) is \(-\cos(x)\). But the output is \(-\cos(x)
    + 1\) which is \(\int_{0}^{x} sin(x)dx\). Although both are considered correct
    but \(-\cos(x)\) is simpler.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: \(\sin(x)\) 的不定积分是 \(-\cos(x)\)。但输出为 \(-\cos(x) + 1\)，即 \(\int_{0}^{x} sin(x)dx\)。虽然两者都被认为是正确的，但
    \(-\cos(x)\) 更简单。
