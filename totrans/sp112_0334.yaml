- en: scipy.linalg.get_lapack_funcs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.get_lapack_funcs.html#scipy.linalg.get_lapack_funcs](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.get_lapack_funcs.html#scipy.linalg.get_lapack_funcs)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return available LAPACK function objects from names.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays are used to determine the optimal prefix of LAPACK routines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**names**str or sequence of str'
  prefs: []
  type: TYPE_NORMAL
- en: Name(s) of LAPACK functions without type prefix.
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays**sequence of ndarrays, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can be given to determine optimal prefix of LAPACK routines. If not given,
    double-precision routines will be used, otherwise the most generic type in arrays
    will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type specifier. Not used if *arrays* is non-empty.
  prefs: []
  type: TYPE_NORMAL
- en: '**ilp64**{True, False, ‘preferred’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether to return ILP64 routine variant. Choosing ‘preferred’ returns ILP64
    routine if available, and otherwise the 32-bit routine. Default: False'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**funcs**list'
  prefs: []
  type: TYPE_NORMAL
- en: List containing the found function(s).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This routine automatically chooses between Fortran/C interfaces. Fortran code
    is used whenever possible for arrays with column major order. In all other cases,
    C code is preferred.
  prefs: []
  type: TYPE_NORMAL
- en: In LAPACK, the naming convention is that all functions start with a type prefix,
    which depends on the type of the principal matrix. These can be one of {‘s’, ‘d’,
    ‘c’, ‘z’} for the NumPy types {float32, float64, complex64, complex128} respectively,
    and are stored in attribute `typecode` of the returned functions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we would like to use ‘?lange’ routine which computes the selected norm
    of an array. We pass our array in order to get the correct ‘lange’ flavor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Several LAPACK routines work best when its internal WORK array has the optimal
    size (big enough for fast computation and small enough to avoid waste of memory).
    This size is determined also by a dedicated query to the function which is often
    wrapped as a standalone function and commonly denoted as `###_lwork`. Below is
    an example for `?sysv`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
