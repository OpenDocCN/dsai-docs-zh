- en: scipy.signal.istft
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.signal.istft
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.istft.html#scipy.signal.istft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.istft.html#scipy.signal.istft)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.istft.html#scipy.signal.istft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.istft.html#scipy.signal.istft)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Perform the inverse Short Time Fourier transform (iSTFT).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 执行反短时傅立叶变换（iSTFT）。
- en: Legacy
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 传统
- en: This function is considered legacy and will no longer receive updates. This
    could also mean it will be removed in future SciPy versions. [`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT") is a newer STFT / ISTFT implementation with more
    features. A [comparison](../../tutorial/signal.html#tutorial-stft-legacy-stft)
    between the implementations can be found in the [Short-Time Fourier Transform](../../tutorial/signal.html#tutorial-stft)
    section of the [SciPy User Guide](../../tutorial/index.html#user-guide).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数被视为遗留版本，将不再接收更新。这也可能意味着它将在未来的SciPy版本中删除。[`ShortTimeFFT`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT")是一个新的STFT / ISTFT实现，具有更多功能。可以在[SciPy用户指南](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/signal.html#tutorial-stft-legacy-stft)的[短时傅立叶变换](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/signal.html#tutorial-stft)部分找到这些实现的比较。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**Zxx**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zxx**array_like'
- en: STFT of the signal to be reconstructed. If a purely real array is passed, it
    will be cast to a complex data type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要重构的信号的STFT。如果传递的是纯实数组，则将其转换为复杂数据类型。
- en: '**fs**float, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**fs**float，可选'
- en: Sampling frequency of the time series. Defaults to 1.0.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列的采样频率。默认为1.0。
- en: '**window**str or tuple or array_like, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**window**str或tuple或array_like，可选'
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
    Defaults to a Hann window. Must match the window used to generate the STFT for
    faithful inversion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所需使用的窗口。如果*window*是字符串或元组，则将其传递给[`get_window`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window")以生成窗口值，默认为DFT-even。详见[`get_window`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window")获取窗口列表和所需参数。如果*window*是array_like，则直接用作窗口，其长度必须为nperseg。默认为Hann窗口。必须与用于生成STFT的窗口匹配，以确保忠实反演。
- en: '**nperseg**int, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**nperseg**int，可选'
- en: Number of data points corresponding to each STFT segment. This parameter must
    be specified if the number of data points per segment is odd, or if the STFT was
    padded via `nfft > nperseg`. If *None*, the value depends on the shape of *Zxx*
    and *input_onesided*. If *input_onesided* is *True*, `nperseg=2*(Zxx.shape[freq_axis]
    - 1)`. Otherwise, `nperseg=Zxx.shape[freq_axis]`. Defaults to *None*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点数对应于每个STFT段。如果每段数据点数为奇数，或者STFT通过`nfft > nperseg`进行填充，则必须指定此参数。如果为*None*，则其值取决于*Zxx*和*input_onesided*的形状。如果*input_onesided*为True，则`nperseg=2*(Zxx.shape[freq_axis]
    - 1)`。否则，`nperseg=Zxx.shape[freq_axis]`。默认为*None*。
- en: '**noverlap**int, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**noverlap**int，可选'
- en: Number of points to overlap between segments. If *None*, half of the segment
    length. Defaults to *None*. When specified, the COLA constraint must be met (see
    Notes below), and should match the parameter used to generate the STFT. Defaults
    to *None*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点之间重叠的点数。如果为*None*，则为段长度的一半。默认为*None*。在指定时，必须满足COLA约束（参见下面的注释），并且应与用于生成STFT的参数匹配。默认为*None*。
- en: '**nfft**int, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**nfft**int，可选'
- en: 'Number of FFT points corresponding to each STFT segment. This parameter must
    be specified if the STFT was padded via `nfft > nperseg`. If *None*, the default
    values are the same as for *nperseg*, detailed above, with one exception: if *input_onesided*
    is True and `nperseg==2*Zxx.shape[freq_axis] - 1`, *nfft* also takes on that value.
    This case allows the proper inversion of an odd-length unpadded STFT using `nfft=None`.
    Defaults to *None*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: FFT点数对应于每个STFT段。如果STFT通过`nfft > nperseg`进行填充，则必须指定此参数。如果为*None*，则默认值与*nperseg*相同，详见上文，但有一例外：如果*input_onesided*为True且`nperseg==2*Zxx.shape[freq_axis]
    - 1`，则*nfft*也取该值。这种情况允许使用`nfft=None`正确反演奇数长度未填充的STFT。默认为*None*。
- en: '**input_onesided**bool, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**input_onesided**bool，可选'
- en: If *True*, interpret the input array as one-sided FFTs, such as is returned
    by [`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft") with
    `return_onesided=True` and [`numpy.fft.rfft`](https://numpy.org/devdocs/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft
    "(in NumPy v2.0.dev0)"). If *False*, interpret the input as a a two-sided FFT.
    Defaults to *True*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为*True*，将输入数组解释为单边FFT，例如由[`stft`](scipy.signal.stft.html#scipy.signal.stft
    "scipy.signal.stft")返回的`return_onesided=True`和[`numpy.fft.rfft`](https://numpy.org/devdocs/reference/generated/numpy.fft.rfft.html#numpy.fft.rfft
    "(in NumPy v2.0.dev0)")。如果为*False*，将输入解释为双边FFT。默认为*True*。
- en: '**boundary**bool, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**boundary**bool, 可选'
- en: Specifies whether the input signal was extended at its boundaries by supplying
    a non-*None* `boundary` argument to [`stft`](scipy.signal.stft.html#scipy.signal.stft
    "scipy.signal.stft"). Defaults to *True*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 指定输入信号是否通过向 [`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")
    提供非*None* `boundary` 参数来在其边界上扩展。默认为*True*。
- en: '**time_axis**int, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**time_axis**int, 可选'
- en: Where the time segments of the STFT is located; the default is the last axis
    (i.e. `axis=-1`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: STFT的时间段所在位置；默认为最后一轴（即`axis=-1`）。
- en: '**freq_axis**int, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**freq_axis**int, 可选'
- en: Where the frequency axis of the STFT is located; the default is the penultimate
    axis (i.e. `axis=-2`).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: STFT的频率轴所在位置；默认为倒数第二轴（即`axis=-2`）。
- en: '**scaling: {‘spectrum’, ‘psd’}**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**scaling: {‘spectrum’, ‘psd’}**'
- en: The default ‘spectrum’ scaling allows each frequency line of *Zxx* to be interpreted
    as a magnitude spectrum. The ‘psd’ option scales each line to a power spectral
    density - it allows to calculate the signal’s energy by numerically integrating
    over `abs(Zxx)**2`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的'spectrum'缩放允许解释*Zxx*的每个频率线为幅度谱。'psd'选项将每行缩放到功率谱密度 - 允许通过数值积分计算信号的能量 `abs(Zxx)**2`。
- en: 'Returns:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: '**t**ndarray'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**t**ndarray'
- en: Array of output data times.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出数据数组的时间。
- en: '**x**ndarray'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**ndarray'
- en: iSTFT of *Zxx*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*Zxx*的逆短时傅立叶变换。'
- en: See also
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")'
- en: Short Time Fourier Transform
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 短时傅立叶变换
- en: '[`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT "scipy.signal.ShortTimeFFT")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT "scipy.signal.ShortTimeFFT")'
- en: Newer STFT/ISTFT implementation providing more features.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 更多功能的新STFT/ISTFT实现。
- en: '[`check_COLA`](scipy.signal.check_COLA.html#scipy.signal.check_COLA "scipy.signal.check_COLA")'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[`check_COLA`](scipy.signal.check_COLA.html#scipy.signal.check_COLA "scipy.signal.check_COLA")'
- en: Check whether the Constant OverLap Add (COLA) constraint is met
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否满足Constant OverLap Add (COLA)约束
- en: '[`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA")'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA")'
- en: Check whether the Nonzero Overlap Add (NOLA) constraint is met
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否满足Nonzero Overlap Add (NOLA)约束
- en: Notes
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'In order to enable inversion of an STFT via the inverse STFT with [`istft`](#scipy.signal.istft
    "scipy.signal.istft"), the signal windowing must obey the constraint of “nonzero
    overlap add” (NOLA):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过[`istft`](#scipy.signal.istft "scipy.signal.istft")反转STFT以进行反STFT，信号窗必须遵守“非零重叠添加”（NOLA）约束：
- en: \[\sum_{t}w^{2}[n-tH] \ne 0\]
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sum_{t}w^{2}[n-tH] \ne 0\]
- en: This ensures that the normalization factors that appear in the denominator of
    the overlap-add reconstruction equation
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了出现在重叠添加重建方程分母中的归一化因子
- en: \[x[n]=\frac{\sum_{t}x_{t}[n]w[n-tH]}{\sum_{t}w^{2}[n-tH]}\]
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: \[x[n]=\frac{\sum_{t}x_{t}[n]w[n-tH]}{\sum_{t}w^{2}[n-tH]}\]
- en: are not zero. The NOLA constraint can be checked with the [`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA
    "scipy.signal.check_NOLA") function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不为零。使用[`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA")函数可以检查NOLA约束。
- en: An STFT which has been modified (via masking or otherwise) is not guaranteed
    to correspond to a exactly realizible signal. This function implements the iSTFT
    via the least-squares estimation algorithm detailed in [[2]](#r9884493677cb-2),
    which produces a signal that minimizes the mean squared error between the STFT
    of the returned signal and the modified STFT.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 已修改的STFT（通过掩蔽或其他方式）不能保证与确切可实现信号对应。该函数通过最小二乘估计算法实现了iSTFT，该算法详细说明见[[2]](#r9884493677cb-2)，其生成的信号最小化了返回信号的STFT和修改后STFT之间的均方误差。
- en: New in version 0.19.0.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 版本0.19.0中的新功能。
- en: References
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1]'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]'
- en: Oppenheim, Alan V., Ronald W. Schafer, John R. Buck “Discrete-Time Signal Processing”,
    Prentice Hall, 1999.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Oppenheim, Alan V., Ronald W. Schafer, John R. Buck “离散时间信号处理”，Prentice Hall，1999年。
- en: '[[2](#id1)]'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id1)]'
- en: Daniel W. Griffin, Jae S. Lim “Signal Estimation from Modified Short-Time Fourier
    Transform”, IEEE 1984, 10.1109/TASSP.1984.1164317
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Daniel W. Griffin, Jae S. Lim “从修改后的短时傅里叶变换估计信号”, IEEE 1984, 10.1109/TASSP.1984.1164317
- en: Examples
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generate a test signal, a 2 Vrms sine wave at 50Hz corrupted by 0.001 V**2/Hz
    of white noise sampled at 1024 Hz.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个测试信号，一个2 Vrms的50Hz正弦波，受1024 Hz采样的0.001 V**2/Hz白噪声的影响。
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Compute the STFT, and plot its magnitude
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 计算STFT，并绘制其幅度
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![../../_images/scipy-signal-istft-1_00_00.png](../Images/b5004a747ecfc2233dc72eeab37e2bdc.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-signal-istft-1_00_00.png](../Images/b5004a747ecfc2233dc72eeab37e2bdc.png)'
- en: Zero the components that are 10% or less of the carrier magnitude, then convert
    back to a time series via inverse STFT
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将幅度为载波幅度的10%或更少的分量置零，然后通过逆STFT转换回时间序列
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Compare the cleaned signal with the original and true carrier signals.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将清理后的信号与原始和真实的载波信号进行比较。
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![../../_images/scipy-signal-istft-1_01_00.png](../Images/13bac3031e2f7077ae84ed15aad87c12.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-signal-istft-1_01_00.png](../Images/13bac3031e2f7077ae84ed15aad87c12.png)'
- en: 'Note that the cleaned signal does not start as abruptly as the original, since
    some of the coefficients of the transient were also removed:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，清理后的信号并不像原始信号那样突然开始，因为某些瞬态的系数也被移除了：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![../../_images/scipy-signal-istft-1_02_00.png](../Images/d7f9032568b1d5274cb0b56cb3f1c48c.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-signal-istft-1_02_00.png](../Images/d7f9032568b1d5274cb0b56cb3f1c48c.png)'
