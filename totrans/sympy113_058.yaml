- en: Permutation Groups
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/perm_groups.html](https://docs.sympy.org/latest/modules/combinatorics/perm_groups.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The class defining a Permutation group.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '`PermutationGroup([p1, p2, ..., pn])` returns the permutation group generated
    by the list of permutations. This group can be supplied to Polyhedron if one desires
    to decorate the elements to which the indices of the permutation refer.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The permutations corresponding to motion of the front, right and bottom face
    of a \(2 \times 2\) Rubik’s cube are defined:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are passed as permutations to PermutationGroup:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The group can be supplied to a Polyhedron in order to track the objects being
    moved. An example involving the \(2 \times 2\) Rubik’s cube is given there, but
    here is a simple demonstration:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or one can make a permutation as a product of selected permutations and apply
    them to an iterable directly:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.combinatorics.polyhedron.Polyhedron`](polyhedron.html#sympy.combinatorics.polyhedron.Polyhedron
    "sympy.combinatorics.polyhedron.Polyhedron"), [`sympy.combinatorics.permutations.Permutation`](permutations.html#sympy.combinatorics.permutations.Permutation
    "sympy.combinatorics.permutations.Permutation")'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[[R62](#id6)]'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of Computational Group Theory”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[[R63](#id7)]'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Seress, A. “Permutation Group Algorithms”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[[R64](#id8)]'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Schreier_vector](https://en.wikipedia.org/wiki/Schreier_vector)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[[R65](#id9)]'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Nielsen_transformation#Product_replacement_algorithm](https://en.wikipedia.org/wiki/Nielsen_transformation#Product_replacement_algorithm)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[[R66](#id10)]'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Frank Celler, Charles R.Leedham-Green, Scott H.Murray, Alice C.Niemeyer, and
    E.A.O’Brien. “Generating Random Elements of a Finite Group”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[[R67](#id11)]'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Block_%28permutation_group_theory%29](https://en.wikipedia.org/wiki/Block_%28permutation_group_theory%29)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[[R68](#id12)]'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[https://algorithmist.com/wiki/Union_find](https://algorithmist.com/wiki/Union_find)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[[R69](#id13)]'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Multiply_transitive_group#Multiply_transitive_groups](https://en.wikipedia.org/wiki/Multiply_transitive_group#Multiply_transitive_groups)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[[R70](#id14)]'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Center_%28group_theory%29](https://en.wikipedia.org/wiki/Center_%28group_theory%29)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Return `True` if *i* is contained in PermutationGroup.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return the direct product of two permutation groups as a permutation group.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'This implementation realizes the direct product by shifting the index set for
    the generators of the second group: so if we have `G` acting on `n1` points and
    `H` acting on `n2` points, `G*H` acts on `n1 + n2` points.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The default constructor. Accepts Cycle and Permutation forms. Removes duplicates
    unless `dups` keyword is `False`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: list of weak references to the object
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return the representative of Hg from the transversal that would be computed
    by `self.coset_transversal(H)`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由`self.coset_transversal(H)`计算的Hg的代表。
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Subroutine to test if there is only one cyclic group for the order.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 子例程用于测试是否只有一个循环群的顺序。
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A test using monte-carlo algorithm.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蒙特卡罗算法进行测试。
- en: 'Parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**eps** : float, optional'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**eps**：浮点数，可选'
- en: The criterion for the incorrect `False` return.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 错误的判定标准是`False`返回。
- en: '**perms** : list[Permutation], optional'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**perms**：列表[置换]，可选'
- en: If explicitly given, it tests over the given candidates for testing.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果明确给出，它会对给定的测试候选进行测试。
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If `None`, it randomly computes `N_eps` and chooses `N_eps` sample of the permutation
    from the group.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`None`，则随机计算`N_eps`并从群的样本中选择`N_eps`个置换。
- en: See also
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另见。
- en: '[`_check_cycles_alt_sym`](util.html#sympy.combinatorics.util._check_cycles_alt_sym
    "sympy.combinatorics.util._check_cycles_alt_sym")'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_check_cycles_alt_sym`](util.html#sympy.combinatorics.util._check_cycles_alt_sym
    "sympy.combinatorics.util._check_cycles_alt_sym")'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A naive test using the group order.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用群的顺序的朴素测试。
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For an abelian p-group, return the subgroup consisting of all elements of order
    p (and the identity)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于阿贝尔p-群，返回由所有p阶元素（和单位元素）组成的子群。
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Initialize random generators for the product replacement algorithm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化产品替换算法的随机生成器。
- en: Explanation
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: The implementation uses a modification of the original product replacement algorithm
    due to Leedham-Green, as described in [1], pp. 69-71; also, see [2], pp. 27-29
    for a detailed theoretical analysis of the original product replacement algorithm,
    and [4].
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该实现使用了Leedham-Green修改过的原始产品替换算法，详见[1]第69-71页；另请参阅[2]第27-29页对原始产品替换算法的详细理论分析，以及[4]。
- en: The product replacement algorithm is used for producing random, uniformly distributed
    elements of a group \(G\) with a set of generators \(S\). For the initialization
    `_random_pr_init`, a list `R` of \(\max\{r, |S|\}\) group generators is created
    as the attribute `G._random_gens`, repeating elements of \(S\) if necessary, and
    the identity element of \(G\) is appended to `R` - we shall refer to this last
    element as the accumulator. Then the function `random_pr()` is called `n` times,
    randomizing the list `R` while preserving the generation of \(G\) by `R`. The
    function `random_pr()` itself takes two random elements `g, h` among all elements
    of `R` but the accumulator and replaces `g` with a randomly chosen element from
    \(\{gh, g(~h), hg, (~h)g\}\). Then the accumulator is multiplied by whatever `g`
    was replaced by. The new value of the accumulator is then returned by `random_pr()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 产品替换算法用于生成群\( G \)的随机、均匀分布的元素。对于初始化`_random_pr_init`，创建一个包含\(\max\{r, |S|\}\)个群生成器的列表`R`作为属性`G._random_gens`，如有必要重复\(
    S \)的元素，并将\( G \)的单位元素附加到`R` - 我们将最后一个元素称为累加器。然后调用函数`random_pr()` `n`次，随机化列表`R`，同时保持由`R`生成\(
    G \)。`random_pr()`函数本身从`R`的所有元素中选取两个随机元素`g, h`（除了累加器），并用\(\{gh, g(~h), hg, (~h)g\}\)中随机选择的元素替换`g`。然后累加器乘以被替换的`g`。`random_pr()`然后返回累加器的新值。
- en: The elements returned will eventually (for `n` large enough) become uniformly
    distributed across \(G\) ([5]). For practical purposes however, the values `n
    = 50, r = 11` are suggested in [1].
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的元素最终（对于足够大的`n`）将在\( G \)中均匀分布（[5]）。然而，对于实际目的，建议在[1]中使用`n = 50, r = 11`。
- en: Notes
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'THIS FUNCTION HAS SIDE EFFECTS: it changes the attribute self._random_gens'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数具有副作用：它改变了属性`self._random_gens`。
- en: See also
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另见。
- en: '[`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr "sympy.combinatorics.perm_groups.PermutationGroup.random_pr")'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr "sympy.combinatorics.perm_groups.PermutationGroup.random_pr")'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Return a p-Sylow subgroup of a symmetric or an alternating group.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对称或交替群的p-希罗亚子群。
- en: Explanation
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 说明
- en: The algorithm for this is hinted at in [1], Chapter 4, Exercise 4.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在[1]章节4练习4中有提示。
- en: 'For Sym(n) with n = p^i, the idea is as follows. Partition the interval [0..n-1]
    into p equal parts, each of length p^(i-1): [0..p^(i-1)-1], [p^(i-1)..2*p^(i-1)-1]…[(p-1)*p^(i-1)..p^i-1].
    Find a p-Sylow subgroup of Sym(p^(i-1)) (treated as a subgroup of `self`) acting
    on each of the parts. Call the subgroups P_1, P_2…P_p. The generators for the
    subgroups P_2…P_p can be obtained from those of P_1 by applying a “shifting” permutation
    to them, that is, a permutation mapping [0..p^(i-1)-1] to the second part (the
    other parts are obtained by using the shift multiple times). The union of this
    permutation and the generators of P_1 is a p-Sylow subgroup of `self`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: For n not equal to a power of p, partition [0..n-1] in accordance with how n
    would be written in base p. E.g. for p=2 and n=11, 11 = 2^3 + 2^2 + 1 so the partition
    is [[0..7], [8..9], {10}]. To generate a p-Sylow subgroup, take the union of the
    generators for each of the parts. For the above example, {(0 1), (0 2)(1 3), (0
    4), (1 5)(2 7)} from the first part, {(8 9)} from the second part and nothing
    from the third. This gives 4 generators in total, and the subgroup they generate
    is p-Sylow.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Alternating groups are treated the same except when p=2\. In this case, (0 1)(s
    s+1) should be added for an appropriate s (the start of a part) for each part
    in the partitions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[`sylow_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"), [`is_alt_sym`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Merges two classes in a union-find data structure.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Used in the implementation of Atkinson’s algorithm as suggested in [1], pp.
    83-87\. The class merging process uses union by rank as an optimization. ([7])
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'THIS FUNCTION HAS SIDE EFFECTS: the list of class representatives, `parents`,
    the list of class sizes, `ranks`, and the list of elements that are not representatives,
    `not_rep`, are changed due to class merging.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`_union_find_rep`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep")'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[[R71](#id20)]'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[[R77](#id21)]'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[https://algorithmist.com/wiki/Union_find](https://algorithmist.com/wiki/Union_find)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Find representative of a class in a union-find data structure.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Used in the implementation of Atkinson’s algorithm as suggested in [1], pp.
    83-87\. After the representative of the class to which `num` belongs is found,
    path compression is performed as an optimization ([7]).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'THIS FUNCTION HAS SIDE EFFECTS: the list of class representatives, `parents`,
    is altered due to path compression.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge")'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge")'
- en: References
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R73](#id22)]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R73](#id22)]'
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Holt, D., Eick, B., O’Brien, E. “计算群论手册”
- en: '[[R79](#id23)]'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R79](#id23)]'
- en: '[https://algorithmist.com/wiki/Union_find](https://algorithmist.com/wiki/Union_find)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://algorithmist.com/wiki/Union_find](https://algorithmist.com/wiki/Union_find)'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Return a list of relators `rels` in generators [PRE22] by `phi` so that given
    a finite presentation <gens_k | rels_k> of `K` on a subset of `gens_h` <gens_h
    | rels_k + rels> is a finite presentation of `H`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在生成器 [PRE22] 下由 `phi` 给出的关系列表 `rels`，以便给定 `K` 在 `gens_h` 的子集上的有限表示 `<gens_h
    | rels_k + rels>` 是 `H` 的有限表示。
- en: Explanation
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`H` should be generated by the union of `K.generators` and `z` (a single generator),
    and `H.stabilizer(alpha) == K`; `phi` is a canonical injection from a free group
    into a permutation group containing `H`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`H` 应由 `K.generators` 和 `z`（一个单一的生成器）的并集生成，并且 `H.stabilizer(alpha) == K`；`phi`
    是从自由群到包含 `H` 的置换群的规范注入。'
- en: The algorithm is described in [1], Chapter 6.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 算法见 [1]，第 6 章。
- en: Examples
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`strong_presentation`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"), [`presentation`](#sympy.combinatorics.perm_groups.PermutationGroup.presentation
    "sympy.combinatorics.perm_groups.PermutationGroup.presentation"), [`stabilizer`](#sympy.combinatorics.perm_groups.PermutationGroup.stabilizer
    "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer")'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strong_presentation`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"), [`presentation`](#sympy.combinatorics.perm_groups.PermutationGroup.presentation
    "sympy.combinatorics.perm_groups.PermutationGroup.presentation"), [`stabilizer`](#sympy.combinatorics.perm_groups.PermutationGroup.stabilizer
    "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer")'
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Returns the abelian invariants for the given group. Let `G` be a nontrivial
    finite abelian group. Then G is isomorphic to the direct product of finitely many
    nontrivial cyclic groups of prime-power order.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定群的阿贝尔不变量。设 `G` 是一个非平凡有限阿贝尔群。那么 `G` 同构于有限多个非平凡循环群的素数幂次序的直积。
- en: Explanation
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The prime-powers that occur as the orders of the factors are uniquely determined
    by G. More precisely, the primes that occur in the orders of the factors in any
    such decomposition of `G` are exactly the primes that divide `|G|` and for any
    such prime `p`, if the orders of the factors that are p-groups in one such decomposition
    of `G` are `p^{t_1} >= p^{t_2} >= ... p^{t_r}`, then the orders of the factors
    that are p-groups in any such decomposition of `G` are `p^{t_1} >= p^{t_2} >=
    ... p^{t_r}`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 出现为因子次序的素数幂次唯一确定了 `G`。更确切地说，出现在 `G` 的任何此类分解的因子次序中的素数，正好是整除 `|G|` 的素数，并且对于任何这样的素数
    `p`，如果在 `G` 的一种这样的分解中是 `p^{t_1} >= p^{t_2} >= ... p^{t_r}` 的因子次序，那么在 `G` 的任何这样的分解中是
    `p^{t_1} >= p^{t_2} >= ... p^{t_r}`。
- en: The uniquely determined integers `p^{t_1} >= p^{t_2} >= ... p^{t_r}`, taken
    for all primes that divide `|G|` are called the invariants of the nontrivial group
    `G` as suggested in ([14], p. 542).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非平凡群 `G`，对所有整除 `|G|` 的素数取唯一确定的整数 `p^{t_1} >= p^{t_2} >= ... p^{t_r}`，如 ([14],
    p. 542) 所建议的，称为其不变量。
- en: Notes
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: We adopt the convention that the invariants of a trivial group are [].
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们采用的惯例是一个平凡群的不变量为 []。
- en: Examples
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Return a base from the Schreier-Sims algorithm.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Schreier-Sims 算法的基础。
- en: Explanation
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: For a permutation group \(G\), a base is a sequence of points \(B = (b_1, b_2,
    \dots, b_k)\) such that no element of \(G\) apart from the identity fixes all
    the points in \(B\). The concepts of a base and strong generating set and their
    applications are discussed in depth in [1], pp. 87-89 and [2], pp. 55-57.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于置换群 \(G\)，一个基是一组点的序列 \(B = (b_1, b_2, \dots, b_k)\)，使得除单位元素外，`G` 中没有元素能够固定所有
    `B` 中的点。基和强生成集的概念及其应用在 [1]，第 87-89 页和 [2]，第 55-57 页中有详细讨论。
- en: An alternative way to think of \(B\) is that it gives the indices of the stabilizer
    cosets that contain more than the identity permutation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考 `B` 的方法是，它提供了包含非单位置换的稳定子余类的指标。
- en: Examples
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"), [`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"), [`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"), [`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strong_gens`](https://sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"), [`basic_transversals`](https://sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"), [`basic_orbits`](https://sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"), [`basic_stabilizers`](https://sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Swap two consecutive base points in base and strong generating set.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 交换基和强生成集中的两个连续基点。
- en: 'Parameters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**base, strong_gens**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础，强生成集**'
- en: The base and strong generating set.
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基础和强生成集。
- en: '**pos**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**pos**'
- en: The position at which swapping is performed.
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 执行交换的位置。
- en: '**randomized**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机化**'
- en: A switch between randomized and deterministic version.
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随机化版本与确定性版本之间的切换。
- en: '**transversals**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**横断面**'
- en: The transversals for the basic orbits, if known.
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知基轨道的横断面。
- en: '**basic_orbits**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本轨道**'
- en: The basic orbits, if known.
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果已知的基本轨道。
- en: '**strong_gens_distr**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**强生成集分布**'
- en: The strong generators distributed by basic stabilizers, if known.
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 已知的强生成器由基本稳定子分布。
- en: 'Returns:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: (base, strong_gens)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: (base, strong_gens)
- en: '`base` is the new base, and `strong_gens` is a generating set relative to it.'
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`base` 是新基，`strong_gens` 是相对于它的生成集。'
- en: Explanation
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If a base for a group \(G\) is given by \((b_1, b_2, \dots, b_k)\), this function
    returns a base \((b_1, b_2, \dots, b_{i+1}, b_i, \dots, b_k)\), where \(i\) is
    given by `pos`, and a strong generating set relative to that base. The original
    base and strong generating set are not modified.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群 \(G\) 的一个基由 \((b_1, b_2, \dots, b_k)\) 给出，则此函数返回一个基 \((b_1, b_2, \dots,
    b_{i+1}, b_i, \dots, b_k)\)，其中 \(i\) 由 `pos` 给出，并且相对于该基的一个强生成集。原始基和强生成集不会被修改。
- en: The randomized version (default) is of Las Vegas type.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 随机化版本（默认）为拉斯维加斯类型。
- en: Examples
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: check that base, gens is a BSGS
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 检查该基和生成集是否为 BSGS。
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Notes
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'The deterministic version of the algorithm is discussed in [1], pp. 102-103;
    the randomized version is discussed in [1], p.103, and [2], p.98\. It is of Las
    Vegas type. Notice that [1] contains a mistake in the pseudocode and discussion
    of BASESWAP: on line 3 of the pseudocode, \(|\beta_{i+1}^{\left\langle T\right\rangle}|\)
    should be replaced by \(|\beta_{i}^{\left\langle T\right\rangle}|\), and the same
    for the discussion of the algorithm.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的确定性版本在 [1] 第102-103页讨论；随机化版本在 [1] 第103页和 [2] 第98页讨论。这是拉斯维加斯类型。注意在 [1] 的伪代码和
    BASESWAP 的讨论中有一个错误：伪代码的第3行中，\(|\beta_{i+1}^{\left\langle T\right\rangle}|\) 应替换为
    \(|\beta_{i}^{\left\langle T\right\rangle}|\)，算法的讨论中也是如此。
- en: See also
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`schreier_sims`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims")'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`schreier_sims`](https://sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims")'
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Return the basic orbits relative to a base and strong generating set.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 返回相对于基和强生成集的基本轨道。
- en: Explanation
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If \((b_1, b_2, \dots, b_k)\) is a base for a group \(G\), and \(G^{(i)} = G_{b_1,
    b_2, \dots, b_{i-1}}\) is the `i`-th basic stabilizer (so that \(G^{(1)} = G\)),
    the `i`-th basic orbit relative to this base is the orbit of \(b_i\) under \(G^{(i)}\).
    See [1], pp. 87-89 for more information.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 \((b_1, b_2, \dots, b_k)\) 是群 \(G\) 的一个基，并且 \(G^{(i)} = G_{b_1, b_2, \dots,
    b_{i-1}}\) 是第 `i` 个基本稳定子（使得 \(G^{(1)} = G\)），则相对于此基的第 `i` 个基本轨道是 \(b_i\) 在 \(G^{(i)}\)
    下的轨道。详见 [1] 第87-89页了解更多信息。
- en: Examples
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base "sympy.combinatorics.perm_groups.PermutationGroup.base"),
    [`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"), [`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"), [`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base "sympy.combinatorics.perm_groups.PermutationGroup.base")，[`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens")，[`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals")，[`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return a chain of stabilizers relative to a base and strong generating set.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于基和强生成集的稳定子链。
- en: Explanation
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The `i`-th basic stabilizer \(G^{(i)}\) relative to a base \((b_1, b_2, \dots,
    b_k)\) is \(G_{b_1, b_2, \dots, b_{i-1}}\). For more information, see [1], pp.
    87-89.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于基 \((b_1, b_2, \dots, b_k)\)，第 `i` 个基本稳定子 \(G^{(i)}\) 是 \(G_{b_1, b_2, \dots,
    b_{i-1}}\)。更多信息见 [1]，第 87-89 页。
- en: Examples
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE35]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: See also
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base "sympy.combinatorics.perm_groups.PermutationGroup.base"),
    [`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"), [`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"), [`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals")'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base "sympy.combinatorics.perm_groups.PermutationGroup.base")，[`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens")，[`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits")，[`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals")'
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return basic transversals relative to a base and strong generating set.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于基和强生成集的基本横截面。
- en: Explanation
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The basic transversals are transversals of the basic orbits. They are provided
    as a list of dictionaries, each dictionary having keys - the elements of one of
    the basic orbits, and values - the corresponding transversal elements. See [1],
    pp. 87-89 for more information.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 基本横截面是基本轨道的横截面。它们被提供为字典列表，每个字典具有键 - 一个基本轨道的元素，和值 - 相应的横截面元素。更多信息见 [1]，第 87-89
    页。
- en: Examples
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: See also
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"), [`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base
    "sympy.combinatorics.perm_groups.PermutationGroup.base"), [`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"), [`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[`strong_gens`](#sympy.combinatorics.perm_groups.PermutationGroup.strong_gens
    "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens")，[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base
    "sympy.combinatorics.perm_groups.PermutationGroup.base")，[`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits")，[`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Return the center of a permutation group.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 返回置换群的中心。
- en: Explanation
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The center for a group \(G\) is defined as \(Z(G) = \{z\in G | \forall g\in
    G, zg = gz \}\), the set of elements of \(G\) that commute with all elements of
    \(G\). It is equal to the centralizer of \(G\) inside \(G\), and is naturally
    a subgroup of \(G\) ([9]).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于群 \(G\) 的中心定义为 \(Z(G) = \{z\in G | \forall g\in G, zg = gz \}\)，即与 \(G\) 中所有元素都可交换的
    \(G\) 的元素的集合。它等于 \(G\) 在 \(G\) 中的中心化子，并且自然地是 \(G\) 的一个子群（[9]）。
- en: Examples
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Notes
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: This is a naive implementation that is a straightforward application of `.centralizer()`
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的应用 `.centralizer()` 的简单实现。
- en: See also
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`centralizer`](#sympy.combinatorics.perm_groups.PermutationGroup.centralizer
    "sympy.combinatorics.perm_groups.PermutationGroup.centralizer")'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[`centralizer`](#sympy.combinatorics.perm_groups.PermutationGroup.centralizer
    "sympy.combinatorics.perm_groups.PermutationGroup.centralizer")'
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Return the centralizer of a group/set/element.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群/集合/元素的中心化子。
- en: 'Parameters:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**other**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: a permutation group/list of permutations/single permutation
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'The centralizer of a set of permutations `S` inside a group `G` is the set
    of elements of `G` that commute with all elements of `S`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Usually, `S` is a subset of `G`, but if `G` is a proper subgroup of the full
    symmetric group, we allow for `S` to have elements outside `G`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: It is naturally a subgroup of `G`; the centralizer of a permutation group is
    equal to the centralizer of any set of generators for that group, since any element
    commuting with the generators commutes with any product of the generators.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Notes
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The implementation is an application of `.subgroup_search()` with tests using
    a specific base for the group `G`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[`subgroup_search`](#sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search
    "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search")'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return the commutator of two subgroups.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: For a permutation group `K` and subgroups `G`, `H`, the commutator of `G` and
    `H` is defined as the group generated by all the commutators \([g, h] = hgh^{-1}g^{-1}\)
    for `g` in `G` and `h` in `H`. It is naturally a subgroup of `K` ([1], p.27).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Notes
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: The commutator of two subgroups \(H, G\) is equal to the normal closure of the
    commutators of all the generators, i.e. \(hgh^{-1}g^{-1}\) for \(h\) a generator
    of \(H\) and \(g\) a generator of \(G\) ([1], p.28)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[`derived_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup")'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Return the composition series for a group as a list of permutation groups.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The composition series for a group \(G\) is defined as a subnormal series \(G
    = H_0 > H_1 > H_2 \ldots\) A composition series is a subnormal series such that
    each factor group \(H(i+1) / H(i)\) is simple. A subnormal series is a composition
    series only if it is of maximum length.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'The algorithm works as follows: Starting with the derived series the idea is
    to fill the gap between \(G = der[i]\) and \(H = der[i+1]\) for each \(i\) independently.
    Since, all subgroups of the abelian group \(G/H\) are normal so, first step is
    to take the generators \(g\) of \(G\) and add them to generators of \(H\) one
    by one.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The factor groups formed are not simple in general. Each group is obtained from
    the previous one by adding one generator \(g\), if the previous group is denoted
    by \(H\) then the next group \(K\) is generated by \(g\) and \(H\). The factor
    group \(K/H\) is cyclic and it’s order is \(K.order()//G.order()\). The series
    is then extended between \(K\) and \(H\) by groups generated by powers of \(g\)
    and \(H\). The series formed is then prepended to the already existing series.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Return the conjugacy class of an element in the group.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: The conjugacy class of an element `g` in a group `G` is the set of elements
    `x` in `G` that are conjugate with `g`, i.e. for which
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`g = xax^{-1}`'
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: for some `a` in `G`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`G`中的某些`a`。
- en: Note that conjugacy is an equivalence relation, and therefore that conjugacy
    classes are partitions of `G`. For a list of all the conjugacy classes of the
    group, use the conjugacy_classes() method.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意共轭是一种等价关系，因此共轭类是`G`的分区。要获得群的所有共轭类的列表，请使用conjugacy_classes()方法。
- en: 'In a permutation group, each conjugacy class corresponds to a particular \(cycle
    structure'': for example, in ``S_3`\), the conjugacy classes are:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在置换群中，每个共轭类对应于特定的`cycle structure`：例如，在`S_3`中，共轭类是：
- en: the identity class, `{()}`
  id: totrans-248
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单位类，`{()}`
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-250
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: all transpositions, `{(1 2), (1 3), (2 3)}`
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有换位对，`{(1 2), (1 3), (2 3)}`
- en: ''
  id: totrans-252
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: all 3-cycles, `{(1 2 3), (1 3 2)}`
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有3-循环，`{(1 2 3), (1 3 2)}`
- en: Examples
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE48]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Notes
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This procedure computes the conjugacy class directly by finding the orbit of
    the element under conjugation in G. This algorithm is only feasible for permutation
    groups of relatively small order, but is like the orbit() function itself in that
    respect.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程通过找到元素在`G`下共轭的轨道直接计算共轭类。这种算法仅适用于相对较小阶的置换群，但在这方面类似于orbit()函数本身。
- en: '[PRE49]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return the conjugacy classes of the group.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的共轭类。
- en: Explanation
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: As described in the documentation for the .conjugacy_class() function, conjugacy
    is an equivalence relation on a group G which partitions the set of elements.
    This method returns a list of all these conjugacy classes of G.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如在.conjugacy_class()函数的文档中描述的那样，共轭是群`G`上的等价关系，它将元素集合划分为共轭类。此方法返回群`G`的所有这些共轭类的列表。
- en: Examples
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE50]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Test if permutation `g` belong to self, `G`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 测试排列`g`是否属于自身`G`。
- en: Explanation
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `g` is an element of `G` it can be written as a product of factors drawn
    from the cosets of `G`’s stabilizers. To see if `g` is one of the actual generators
    defining the group use `G.has(g)`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`g`是`G`的元素，则它可以写成从`G`的稳定子群的陪集中抽取因子的乘积。要查看`g`是否是定义群的实际生成元之一，请使用`G.has(g)`。
- en: If `strict` is not `True`, `g` will be resized, if necessary, to match the size
    of permutations in `self`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`strict`不为`True`，则如果需要，将调整`g`的大小以匹配`self`中的置换大小。
- en: Examples
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE52]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If strict is False, a permutation will be resized, if necessary:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果strict为False，则将调整置换，如果需要：
- en: '[PRE54]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To test if a given permutation is present in the group:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 测试给定置换是否存在于群中：
- en: '[PRE55]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`coset_factor`](#sympy.combinatorics.perm_groups.PermutationGroup.coset_factor
    "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"), [`sympy.core.basic.Basic.has`](../core.html#sympy.core.basic.Basic.has
    "sympy.core.basic.Basic.has"), [`__contains__`](#sympy.combinatorics.perm_groups.PermutationGroup.__contains__
    "sympy.combinatorics.perm_groups.PermutationGroup.__contains__")'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`coset_factor`](#sympy.combinatorics.perm_groups.PermutationGroup.coset_factor
    "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"), [`sympy.core.basic.Basic.has`](../core.html#sympy.core.basic.Basic.has
    "sympy.core.basic.Basic.has"), [`__contains__`](#sympy.combinatorics.perm_groups.PermutationGroup.__contains__
    "sympy.combinatorics.perm_groups.PermutationGroup.__contains__")'
- en: '[PRE56]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Return `G`’s (self’s) coset factorization of `g`
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`G`的（自身的）`g`的陪集因子分解。
- en: Explanation
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `g` is an element of `G` then it can be written as the product of permutations
    drawn from the Schreier-Sims coset decomposition,
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`g`是`G`的元素，则它可以写成从Schreier-Sims陪集分解中抽取的置换的乘积，
- en: 'The permutations returned in `f` are those for which the product gives `g`:
    `g = f[n]*...f[1]*f[0]` where `n = len(B)` and `B = G.base`. f[i] is one of the
    permutations in `self._basic_orbits[i]`.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`f`中的排列是那些其乘积给出`g`的排列：`g = f[n]*...f[1]*f[0]`，其中`n = len(B)`且`B = G.base`。`f[i]`是`self._basic_orbits[i]`中的置换之一。
- en: If factor_index==True, returns a tuple `[b[0],..,b[n]]`, where `b[i]` belongs
    to `self._basic_orbits[i]`
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`factor_index==True`，返回元组`[b[0],..,b[n]]`，其中`b[i]`属于`self._basic_orbits[i]`
- en: Examples
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE57]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Define g:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`g`：
- en: '[PRE58]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Confirm that it is an element of G:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 确认它是`G`的一个元素：
- en: '[PRE59]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Thus, it can be written as a product of factors (up to 3) drawn from u. See
    below that a factor from u1 and u2 and the Identity permutation have been used:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它可以写成从`u`中抽取的因子（最多3个）的乘积。请参见下面，使用了来自`u1`和`u2`以及单位置换的因子：
- en: '[PRE60]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If g is not an element of G then [] is returned:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`g`不是`G`的元素，则返回`[]`：
- en: '[PRE61]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: See also
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.combinatorics.util._strip`](util.html#sympy.combinatorics.util._strip
    "sympy.combinatorics.util._strip")'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.combinatorics.util._strip`](util.html#sympy.combinatorics.util._strip
    "sympy.combinatorics.util._strip")'
- en: '[PRE62]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: rank using Schreier-Sims representation.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Schreier-Sims表示排名。
- en: Explanation
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The coset rank of `g` is the ordering number in which it appears in the lexicographic
    listing according to the coset decomposition
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`g`的陪集秩是它在按字典顺序列出的陪集分解中出现的顺序号。'
- en: The ordering is the same as in G.generate(method=’coset’). If `g` does not belong
    to the group it returns None.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 排序与`G.generate(method=’coset’)`中的相同。如果`g`不属于该组，则返回None。
- en: Examples
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE63]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: See also
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`coset_factor`](#sympy.combinatorics.perm_groups.PermutationGroup.coset_factor
    "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor")'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[`coset_factor`](#sympy.combinatorics.perm_groups.PermutationGroup.coset_factor
    "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor")'
- en: '[PRE64]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Return the standardised (right) coset table of self in H as a list of lists.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 以列表形式返回自身在H中的标准化（右）陪集表。
- en: '[PRE65]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Return a transversal of the right cosets of self by its subgroup H using the
    second method described in [1], Subsection 4.6.7
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[1]中描述的第二种方法，返回群`self`在其子群`H`的右陪集的横截面。
- en: '[PRE66]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: unrank using Schreier-Sims representation
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Schreier-Sims表示法进行`unrank`操作
- en: coset_unrank is the inverse operation of coset_rank if 0 <= rank < order; otherwise
    it returns None.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 0 <= rank < order，则`coset_unrank`是`coset_rank`的反向操作；否则返回None。
- en: '[PRE67]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Returns the size of the permutations in the group.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群中置换的大小。
- en: Explanation
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The number of permutations comprising the group is given by `len(group)`; the
    number of permutations that can be generated by the group is given by `group.order()`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 组合中的置换数量由`len(group)`给出；可以由该组生成的置换数量由`group.order()`给出。
- en: Examples
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE68]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: See also
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`order`](#sympy.combinatorics.perm_groups.PermutationGroup.order "sympy.combinatorics.perm_groups.PermutationGroup.order")'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`order`](#sympy.combinatorics.perm_groups.PermutationGroup.order "sympy.combinatorics.perm_groups.PermutationGroup.order")'
- en: '[PRE69]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Return the derived series for the group.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的衍生系列。
- en: 'Returns:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A list of permutation groups containing the members of the derived
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 包含衍生成员的置换群列表
- en: series in the order \(G = G_0, G_1, G_2, \ldots\).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 按照\(G = G_0, G_1, G_2, \ldots\)的顺序。
- en: Explanation
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The derived series for a group \(G\) is defined as \(G = G_0 > G_1 > G_2 > \ldots\)
    where \(G_i = [G_{i-1}, G_{i-1}]\), i.e. \(G_i\) is the derived subgroup of \(G_{i-1}\),
    for \(i\in\mathbb{N}\). When we have \(G_k = G_{k-1}\) for some \(k\in\mathbb{N}\),
    the series terminates.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 对于群\(G\)的衍生系列定义为\(G = G_0 > G_1 > G_2 > \ldots\)，其中\(G_i = [G_{i-1}, G_{i-1}]\)，即\(G_i\)是\(G_{i-1}\)的衍生子群，对于\(i\in\mathbb{N}\)。当存在某个\(k\in\mathbb{N}\)，使得\(G_k
    = G_{k-1}\)时，系列终止。
- en: Examples
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE70]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: See also
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`derived_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup")'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`derived_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup")'
- en: '[PRE71]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Compute the derived subgroup.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 计算衍生子群。
- en: Explanation
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The derived subgroup, or commutator subgroup is the subgroup generated by all
    commutators \([g, h] = hgh^{-1}g^{-1}\) for \(g, h\in G\) ; it is equal to the
    normal closure of the set of commutators of the generators ([1], p.28, [11]).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 衍生子群或交换子群是由所有交换子\([g, h] = hgh^{-1}g^{-1}\)生成的群；它等于生成器的交换子集的正规闭包（[1]，p.28，[11]）。
- en: Examples
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE72]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: See also
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '[`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
- en: '[PRE73]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Returns all the elements of the permutation group as a list
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 以列表形式返回置换群的所有元素
- en: Examples
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE74]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return `True` if PermutationGroup generated by elements in the group are same
    i.e they represent the same PermutationGroup.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由群中元素生成的置换群相同，则返回`True`，即它们表示同一个置换群。
- en: Examples
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE76]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Return iterator to generate the elements of the group.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 返回迭代器以生成群的元素。
- en: Explanation
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Iteration is done with one of these methods:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法之一进行迭代：
- en: '[PRE78]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: If `af = True` it yields the array form of the permutations
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`af = True`，则产生置换的数组形式
- en: Examples
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE79]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The permutation group given in the tetrahedron object is also true groups:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在四面体对象中给出的置换群也是真实的群：
- en: '[PRE80]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Also the group generated by the permutations in the tetrahedron pgroup – even
    the first two – is a proper group:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至四面体 pgroup 中生成的置换群（甚至前两个）也是一个适当的群：
- en: '[PRE81]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Yield group elements using Dimino’s algorithm.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Dimino算法生成群元素。
- en: If `af == True` it yields the array form of the permutations.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`af == True`，则产生置换的数组形式。
- en: Examples
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE83]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: References
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R75](#id24)]'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R75](#id24)]'
- en: 'The Implementation of Various Algorithms for Permutation Groups in the Computer
    Algebra System: AXIOM, N.J. Doye, M.Sc. Thesis'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代数系统中排列群的各种算法的实现：AXIOM，N.J. Doye，M.Sc. Thesis
- en: '[PRE84]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Yield group elements using the Schreier-Sims representation in coset_rank order
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Schreier-Sims表示法按照`coset_rank`顺序生成群元素
- en: If `af = True` it yields the array form of the permutations
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `af = True`，则返回置换的数组形式。
- en: Examples
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE85]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Return a list of strong generators \([s1, \dots, sn]\) s.t \(g = sn \times \dots
    \times s1\). If `original=True`, make the list contain only the original group
    generators
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 返回强生成器列表 \([s1, \dots, sn]\)，使得 \(g = sn \times \dots \times s1\)。如果 `original=True`，则只包含原始群生成器的列表。
- en: '[PRE87]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Returns the generators of the group.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的生成元。
- en: Examples
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE88]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Return the identity element of the permutation group.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 返回置换群的单位元素。
- en: '[PRE90]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Returns the index of a permutation group.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 返回置换群的索引。
- en: Examples
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE91]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Test if the group is Abelian.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 测试群是否是阿贝尔的。
- en: Examples
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE93]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Monte Carlo test for the symmetric/alternating group for degrees >= 8.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 对于度数大于等于 8 的对称/交替群进行蒙特卡罗测试。
- en: Explanation
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: More specifically, it is one-sided Monte Carlo with the answer True (i.e., G
    is symmetric/alternating) guaranteed to be correct, and the answer False being
    incorrect with probability eps.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，这是一个单侧蒙特卡罗测试，如果答案为 True（即，G 是对称/交替群），则保证是正确的，而答案为 False 则以 eps 的概率是错误的。
- en: For degree < 8, the order of the group is checked so the test is deterministic.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 对于度数小于 8 的情况，检查群的顺序以确保测试是确定性的。
- en: Notes
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The algorithm itself uses some nontrivial results from group theory and number
    theory: 1) If a transitive group `G` of degree `n` contains an element with a
    cycle of length `n/2 < p < n-2` for `p` a prime, `G` is the symmetric or alternating
    group ([1], pp. 81-82) 2) The proportion of elements in the symmetric/alternating
    group having the property described in 1) is approximately \(\log(2)/\log(n)\)
    ([1], p.82; [2], pp. 226-227). The helper function `_check_cycles_alt_sym` is
    used to go over the cycles in a permutation and look for ones satisfying 1).'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 算法本身使用了一些群论和数论中的非平凡结果：1）如果度数为 `n` 的传递群 `G` 包含一个长度为 `n/2 < p < n-2` 的循环元素，其中
    `p` 是一个素数，则 `G` 是对称群或交替群（[1]，第81-82页）2）对称/交替群中具有1）描述的属性的元素比例约为 \(\log(2)/\log(n)\)（[1]，第82页；[2]，第226-227页）。辅助函数
    `_check_cycles_alt_sym` 用于检查排列中满足1）的循环。
- en: Examples
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE95]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: See also
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`_check_cycles_alt_sym`](util.html#sympy.combinatorics.util._check_cycles_alt_sym
    "sympy.combinatorics.util._check_cycles_alt_sym")'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_check_cycles_alt_sym`](util.html#sympy.combinatorics.util._check_cycles_alt_sym
    "sympy.combinatorics.util._check_cycles_alt_sym")'
- en: '[PRE96]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Return `True` if the group is alternating.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是交替的，则返回`True`。
- en: Examples
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE97]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Notes
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This uses a naive test involving the computation of the full group order. If
    you need more quicker taxonomy for large groups, you can use [`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"). However, [`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym") may not be accurate
    and is not able to distinguish between an alternating group and a symmetric group.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了一个简单的测试，涉及到计算完整的群序。如果需要更快速的大群分类，可以使用[`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")。然而，[`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym") 可能不够准确，并且无法区分交替群和对称群。
- en: See also
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`is_alt_sym`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_alt_sym`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
- en: '[PRE99]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Return `True` if the group is Cyclic.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是循环的，则返回`True`。
- en: Examples
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE100]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Notes
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the order of a group \(n\) can be factored into the distinct primes \(p_1,
    p_2, \dots , p_s\) and if
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群的顺序 \(n\) 可以分解为不同的素数 \(p_1, p_2, \dots , p_s\)，并且如果
- en: '\[\forall i, j \in \{1, 2, \dots, s \}: p_i \not \equiv 1 \pmod {p_j}\]'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '\[\forall i, j \in \{1, 2, \dots, s \}: p_i \not \equiv 1 \pmod {p_j}\]'
- en: holds true, there is only one group of the order \(n\) which is a cyclic group
    [[R76]](#r76). This is a generalization of the lemma that the group of order \(15,
    35, \dots\) are cyclic.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成立，那么顺序为 \(n\) 的群只有一个循环群 [[R76]](#r76)。这是群的顺序为 \(15, 35, \dots\) 的引理的一般化。
- en: And also, these additional lemmas can be used to test if a group is cyclic if
    the order of the group is already found.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，这些额外的引理还可以用来测试群是否循环，如果已知群的顺序。
- en: If the group is abelian and the order of the group is square-free, the group
    is cyclic.
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果群是阿贝尔群并且群的顺序是无平方的，则群是循环的。
- en: If the order of the group is less than \(6\) and is not \(4\), the group is
    cyclic.
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果群的顺序小于 \(6\) 并且不是 \(4\)，则该群是循环的。
- en: If the order of the group is prime, the group is cyclic.
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果群的阶是素数，则群是循环的。
- en: References
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[R76] ([1](#id25),[2](#id26))'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[R76] ([1](#id25),[2](#id26))'
- en: '1978: John S. Rose: A Course on Group Theory, Introduction to Finite Group
    Theory: 1.4'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '1978: John S. Rose: A Course on Group Theory, Introduction to Finite Group
    Theory: 1.4'
- en: '[PRE101]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Return `True` if the group is dihedral.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是二面角的，则返回 `True`。
- en: Examples
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE102]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: References
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[Di1](#id27)]'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Di1](#id27)]'
- en: '[https://math.stackexchange.com/questions/827230/given-a-cayley-table-is-there-an-algorithm-to-determine-if-it-is-a-dihedral-gro/827273#827273](https://math.stackexchange.com/questions/827230/given-a-cayley-table-is-there-an-algorithm-to-determine-if-it-is-a-dihedral-gro/827273#827273)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://math.stackexchange.com/questions/827230/given-a-cayley-table-is-there-an-algorithm-to-determine-if-it-is-a-dihedral-gro/827273#827273](https://math.stackexchange.com/questions/827230/given-a-cayley-table-is-there-an-algorithm-to-determine-if-it-is-a-dihedral-gro/827273#827273)'
- en: '[[Di2](#id28)]'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Di2](#id28)]'
- en: '[https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral.pdf](https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral.pdf)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral.pdf](https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral.pdf)'
- en: '[[Di3](#id29)]'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Di3](#id29)]'
- en: '[https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral2.pdf](https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral2.pdf)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral2.pdf](https://kconrad.math.uconn.edu/blurbs/grouptheory/dihedral2.pdf)'
- en: '[[Di4](#id30)]'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Di4](#id30)]'
- en: '[https://en.wikipedia.org/wiki/Dihedral_group](https://en.wikipedia.org/wiki/Dihedral_group)'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Dihedral_group](https://en.wikipedia.org/wiki/Dihedral_group)'
- en: '[PRE103]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Return `True` if the group is elementary abelian. An elementary abelian group
    is a finite abelian group, where every nontrivial element has order \(p\), where
    \(p\) is a prime.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是基本阿贝尔的，则返回 `True`。一个基本阿贝尔群是一个有限阿贝尔群，其中每个非平凡元素的阶为 \(p\)，其中 \(p\) 是一个素数。
- en: Examples
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE104]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Test if the group is nilpotent.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 测试群是否幂零。
- en: Explanation
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A group \(G\) is nilpotent if it has a central series of finite length. Alternatively,
    \(G\) is nilpotent if its lower central series terminates with the trivial group.
    Every nilpotent group is also solvable ([1], p.29, [12]).
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个群 \(G\) 具有有限长度的中心级数，则它是幂零的。或者，如果 \(G\) 的下中心级数以平凡群终止，则 \(G\) 是幂零的。每个幂零群也是可解的（[1],
    p.29, [12]）。
- en: Examples
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE106]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: See also
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`lower_central_series`](#sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series
    "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"), [`is_solvable`](#sympy.combinatorics.perm_groups.PermutationGroup.is_solvable
    "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable")'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lower_central_series`](#sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series
    "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"), [`is_solvable`](#sympy.combinatorics.perm_groups.PermutationGroup.is_solvable
    "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable")'
- en: '[PRE107]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Test if `G=self` is a normal subgroup of `gr`.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 测试 `G=self` 是否是 `gr` 的正规子群。
- en: Explanation
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: G is normal in gr if for each g2 in G, g1 in gr, `g = g1*g2*g1**-1` belongs
    to G It is sufficient to check this for each g1 in gr.generators and g2 in G.generators.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于每个 `g2` 属于 `G` 和 `g1` 属于 `gr`，`g = g1*g2*g1**-1` 属于 `G`，则 `G` 在 `gr` 中是正规的。对于
    `gr.generators` 中的每个 `g1` 和 `G.generators` 中的每个 `g2` 检查这一点就足够了。
- en: Examples
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE108]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Return `True` if the group is perfect. A group is perfect if it equals to its
    derived subgroup.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是完全的，则返回 `True`。如果一个群等于它的导出子群，则它是完全的。
- en: Examples
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE110]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Return `True` if a group is polycyclic. A group is polycyclic if it has a subnormal
    series with cyclic factors. For finite groups, this is the same as if the group
    is solvable.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个群是多项循环的，则返回 `True`。如果一个群具有循环因子的子正规级数，则该群是多项循环的。对于有限群，这与群是否可解是相同的。
- en: Examples
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE112]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Test if a group is primitive.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个群是否是原始的。
- en: Explanation
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A permutation group `G` acting on a set `S` is called primitive if `S` contains
    no nontrivial block under the action of `G` (a block is nontrivial if its cardinality
    is more than `1`).
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个置换群 `G` 作用在集合 `S` 上，且 `S` 不含 `G` 的非平凡块（块的基数大于 `1`），则称 `G` 为原始的。
- en: Notes
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The algorithm is described in [1], p.83, and uses the function minimal_block
    to search for blocks of the form \(\{0, k\}\) for `k` ranging over representatives
    for the orbits of \(G_0\), the stabilizer of `0`. This algorithm has complexity
    \(O(n^2)\) where `n` is the degree of the group, and will perform badly if \(G_0\)
    is small.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在 [1], p.83 中描述，并使用函数 minimal_block 来搜索形式为 \(\{0, k\}\) 的块，其中 `k` 是 \(G_0\)
    的轨道代表的范围。该算法的复杂度为 \(O(n^2)\)，其中 `n` 是群的阶数，在 \(G_0\) 较小时性能较差。
- en: 'There are two implementations offered: one finds \(G_0\) deterministically
    using the function `stabilizer`, and the other (default) produces random elements
    of \(G_0\) using `random_stab`, hoping that they generate a subgroup of \(G_0\)
    with not too many more orbits than \(G_0\) (this is suggested in [1], p.83). Behavior
    is changed by the `randomized` flag.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 提供两种实现：一种使用函数`stabilizer`确定性地找到 \(G_0\)，另一种（默认）使用`random_stab`产生 \(G_0\) 的随机元素，希望它们生成的子群具有不多于
    \(G_0\) 的轨道（这在[1], p.83中建议）。行为由`randomized`标志改变。
- en: Examples
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE114]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: See also
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`random_stab`](#sympy.combinatorics.perm_groups.PermutationGroup.random_stab
    "sympy.combinatorics.perm_groups.PermutationGroup.random_stab")'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`random_stab`](#sympy.combinatorics.perm_groups.PermutationGroup.random_stab
    "sympy.combinatorics.perm_groups.PermutationGroup.random_stab")'
- en: '[PRE115]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Test if the group is solvable.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 测试群是否可解。
- en: '`G` is solvable if its derived series terminates with the trivial group ([1],
    p.29).'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其导出级数以平凡群结束，则`G`是可解的（[1], p.29）。
- en: Examples
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE116]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: See also
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_nilpotent`](#sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent
    "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"), [`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_nilpotent`](#sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent
    "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"), [`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
- en: '[PRE117]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Return `True` if all elements of `self` belong to `G`.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`self`的所有元素都属于`G`，则返回`True`。
- en: If `strict` is `False` then if `self`’s degree is smaller than `G`’s, the elements
    will be resized to have the same degree.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`strict`为`False`，则如果`self`的次数小于`G`的次数，则将调整元素大小以使它们具有相同的次数。
- en: Examples
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE118]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Testing is strict by default: the degree of each group must be the same:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下测试是严格的：每个群的次数必须相同：
- en: '[PRE119]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'To ignore the size, set `strict` to `False`:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 若要忽略大小，请将`strict`设置为`False`：
- en: '[PRE120]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return `True` if the group is symmetric.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群是对称的，则返回`True`。
- en: Examples
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE122]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Notes
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This uses a naive test involving the computation of the full group order. If
    you need more quicker taxonomy for large groups, you can use [`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"). However, [`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym") may not be accurate
    and is not able to distinguish between an alternating group and a symmetric group.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用一个涉及计算完整群序的朴素测试。如果您需要更快速地为大群分类，您可以使用[`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")。然而，[`PermutationGroup.is_alt_sym()`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")可能不够精确，并且不能区分交替群和对称群。
- en: See also
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_alt_sym`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_alt_sym`](#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
- en: '[PRE124]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Test if the group is transitive.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 测试群是否是传递的。
- en: Explanation
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A group is transitive if it has a single orbit.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个群只有一个轨道，则该群是传递的。
- en: If `strict` is `False` the group is transitive if it has a single orbit of length
    different from 1.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`strict`为`False`，则如果群只有一个长度不为1的轨道，则该群是传递的。
- en: Examples
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE125]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Test if the group is the trivial group.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 测试群是否是平凡群。
- en: This is true if the group contains only the identity permutation.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群仅包含单位置换，则为真。
- en: Examples
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE127]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Return the lower central series for the group.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的下中心级数。
- en: The lower central series for a group \(G\) is the series \(G = G_0 > G_1 > G_2
    > \ldots\) where \(G_k = [G, G_{k-1}]\), i.e. every term after the first is equal
    to the commutator of \(G\) and the previous term in \(G1\) ([1], p.29).
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 一个群 \(G\) 的下中心级数是级数 \(G = G_0 > G_1 > G_2 > \ldots\)，其中 \(G_k = [G, G_{k-1}]\)，即第一个术语之后的每个术语都等于\(G\)与\(G1\)中的上一个术语的交换（[1],
    p.29）。
- en: 'Returns:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A list of permutation groups in the order \(G = G_0, G_1, G_2, \ldots\)
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序列出排列群的列表 \(G = G_0, G_1, G_2, \ldots\)
- en: Examples
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE129]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: See also
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`commutator`](#sympy.combinatorics.perm_groups.PermutationGroup.commutator
    "sympy.combinatorics.perm_groups.PermutationGroup.commutator"), [`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[`commutator`](#sympy.combinatorics.perm_groups.PermutationGroup.commutator
    "sympy.combinatorics.perm_groups.PermutationGroup.commutator"), [`derived_series`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_series
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_series")'
- en: '[PRE130]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Multiply `n` randomly selected permutations from pgroup together, starting
    with the identity permutation. If `n` is a list of integers, those integers will
    be used to select the permutations and they will be applied in L to R order: make_perm((A,
    B, C)) will give CBA(I) where I is the identity permutation.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 将 pgroup 中随机选择的 `n` 个排列相乘，从单位排列开始。如果 `n` 是整数列表，则这些整数将用于选择排列，并且它们将按照从左到右的顺序应用：make_perm((A,
    B, C)) 将给出 CBA(I)，其中 I 是单位排列。
- en: '`seed` is used to set the seed for the random selection of permutations from
    pgroup. If this is a list of integers, the corresponding permutations from pgroup
    will be selected in the order give. This is mainly used for testing purposes.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`seed` 用于设置从 pgroup 中随机选择排列的种子。如果这是一个整数列表，则将按照给定的顺序选择 pgroup 中对应的排列。这主要用于测试目的。'
- en: Examples
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE131]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: See also
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`random`](#sympy.combinatorics.perm_groups.PermutationGroup.random "sympy.combinatorics.perm_groups.PermutationGroup.random")'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[`random`](#sympy.combinatorics.perm_groups.PermutationGroup.random "sympy.combinatorics.perm_groups.PermutationGroup.random")'
- en: '[PRE132]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Maximum proper divisor of the degree of a permutation group.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 排列群的最大真约数。
- en: Explanation
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Obviously, this is the degree divided by its minimal proper divisor (larger
    than `1`, if one exists). As it is guaranteed to be prime, the `sieve` from `sympy.ntheory`
    is used. This function is also used as an optimization tool for the functions
    `minimal_block` and `_union_find_merge`.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这是度数除以其最小真约数（大于 `1`，如果存在的话）。由于它保证是素数，所以使用 `sympy.ntheory` 中的 `sieve`。此函数也用作函数
    `minimal_block` 和 `_union_find_merge` 的优化工具。
- en: Examples
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE133]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: See also
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge")'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge")'
- en: '[PRE134]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: For a transitive group, finds the block system generated by `points`.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传递群，找到由 `points` 生成的块系统。
- en: Explanation
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If a group `G` acts on a set `S`, a nonempty subset `B` of `S` is called a block
    under the action of `G` if for all `g` in `G` we have `gB = B` (`g` fixes `B`)
    or `gB` and `B` have no common points (`g` moves `B` entirely). ([1], p.23; [6]).
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 如果群 `G` 作用于集合 `S`，则 `S` 的非空子集 `B` 在 `G` 的作用下称为一个块，如果对于所有 `g` 属于 `G`，我们有 `gB
    = B`（`g` 使 `B` 固定）或者 `gB` 和 `B` 没有共同的点（`g` 将 `B` 移动整个）。([1]，第23页; [6])。
- en: The distinct translates `gB` of a block `B` for `g` in `G` partition the set
    `S` and this set of translates is known as a block system. Moreover, we obviously
    have that all blocks in the partition have the same size, hence the block size
    divides `|S|` ([1], p.23). A `G`-congruence is an equivalence relation `~` on
    the set `S` such that `a ~ b` implies `g(a) ~ g(b)` for all `g` in `G`. For a
    transitive group, the equivalence classes of a `G`-congruence and the blocks of
    a block system are the same thing ([1], p.23).
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 对于群 `G` 中的 `g` 的块 `B` 的不同平移 `gB`，将集合 `S` 划分，并且这组平移被称为一个块系统。此外，显然地，分区中的所有块具有相同的大小，因此块大小整除
    `|S|`（[1]，第23页）。`G`-同余是集合 `S` 上的等价关系 `~`，使得 `a ~ b` 意味着对于所有 `g` 属于 `G`，有 `g(a)
    ~ g(b)`。对于一个传递群，`G`-同余的等价类与块系统中的块是同一回事（[1]，第23页）。
- en: The algorithm below checks the group for transitivity, and then finds the `G`-congruence
    generated by the pairs `(p_0, p_1), (p_0, p_2), ..., (p_0,p_{k-1})` which is the
    same as finding the maximal block system (i.e., the one with minimum block size)
    such that `p_0, ..., p_{k-1}` are in the same block ([1], p.83).
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的算法检查群是否传递，然后找到由对 `(p_0, p_1), (p_0, p_2), ..., (p_0,p_{k-1})` 生成的 `G`-同余，这与找到具有最小块大小的最大块系统相同，使得
    `p_0, ..., p_{k-1}` 在同一个块中（[1]，第83页）。
- en: It is an implementation of Atkinson’s algorithm, as suggested in [1], and manipulates
    an equivalence relation on the set `S` using a union-find data structure. The
    running time is just above \(O(|points||S|)\). ([1], pp. 83-87; [7]).
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 它是Atkinson算法的实现，如[1]建议的，使用并查集数据结构操作集合 `S` 上的等价关系。运行时间略高于 \(O(|points||S|)\)。([1],
    pp. 83-87; [7])。
- en: Examples
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE135]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: See also
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`_union_find_rep`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"), [`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"), [`is_primitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_primitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive")'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_union_find_rep`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"), [`_union_find_merge`](#sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge
    "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"), [`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"), [`is_primitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_primitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive")'
- en: '[PRE136]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: For a transitive group, return the list of all minimal block systems. If a group
    is intransitive, return \(False\).
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个传递群，返回所有最小块系统的列表。如果一个群是不可传递的，则返回 \(False\)。
- en: Examples
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE137]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: See also
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"), [`is_primitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_primitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive")'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimal_block`](#sympy.combinatorics.perm_groups.PermutationGroup.minimal_block
    "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"), [`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"), [`is_primitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_primitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive")'
- en: '[PRE138]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Return the normal closure of a subgroup/set of permutations.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子群/排列集合的正规闭包。
- en: 'Parameters:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other**'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**other**'
- en: a subgroup/list of permutations/single permutation
  id: totrans-556
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 排列的子群/列表/单个排列
- en: '**k**'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '**k**'
- en: an implementation-specific parameter that determines the number of conjugates
    that are adjoined to `other` at once
  id: totrans-558
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个特定于实现的参数，确定一次将多少共轭附加到 `other` 上
- en: Explanation
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `S` is a subset of a group `G`, the normal closure of `A` in `G` is defined
    as the intersection of all normal subgroups of `G` that contain `A` ([1], p.14).
    Alternatively, it is the group generated by the conjugates `x^{-1}yx` for `x`
    a generator of `G` and `y` a generator of the subgroup `\left\langle S\right\rangle`
    generated by `S` (for some chosen generating set for `\left\langle S\right\rangle`)
    ([1], p.73).
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 若 `S` 是群 `G` 的子集，则 `A` 在 `G` 中的正规闭包定义为包含 `A` 的所有 `G` 的正规子群的交集 ([1], p.14)。或者，它是由共轭元
    `x^{-1}yx` 生成的群，其中 `x` 是 `G` 的生成元，`y` 是子群 `\left\langle S\right\rangle`（对于 `\left\langle
    S\right\rangle` 的某个选择的生成集）的生成元 ([1], p.73)。
- en: Examples
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE139]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Notes
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The algorithm is described in [1], pp. 73-74; it makes use of the generation
    of random elements for permutation groups by the product replacement algorithm.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在[1]第73-74页中描述；它利用产品替换算法生成排列群的随机元素。
- en: See also
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`commutator`](#sympy.combinatorics.perm_groups.PermutationGroup.commutator
    "sympy.combinatorics.perm_groups.PermutationGroup.commutator"), [`derived_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"), [`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr
    "sympy.combinatorics.perm_groups.PermutationGroup.random_pr")'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[`commutator`](#sympy.combinatorics.perm_groups.PermutationGroup.commutator
    "sympy.combinatorics.perm_groups.PermutationGroup.commutator"), [`derived_subgroup`](#sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup
    "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"), [`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr
    "sympy.combinatorics.perm_groups.PermutationGroup.random_pr")'
- en: '[PRE140]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Compute the orbit of alpha \(\{g(\alpha) | g \in G\}\) as a set.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 alpha 的轨道 \(\{g(\alpha) | g \in G\}\) 作为一个集合。
- en: Explanation
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The time complexity of the algorithm used here is \(O(|Orb|*r)\) where \(|Orb|\)
    is the size of the orbit and `r` is the number of generators of the group. For
    a more detailed analysis, see [1], p.78, [2], pp. 19-21. Here alpha can be a single
    point, or a list of points.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的算法的时间复杂度为\(O(|Orb|*r)\)，其中\( |Orb| \)是轨道的大小，`r`是群的生成器数目。有关更详细的分析，请参见[1]，第78页，[2]，第19-21页。这里的alpha可以是单个点，也可以是点列表。
- en: 'If alpha is a single point, the ordinary orbit is computed. if alpha is a list
    of points, there are three available options:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果alpha是单个点，则计算普通轨道。如果alpha是点列表，则有三个可用选项：
- en: ‘union’ - computes the union of the orbits of the points in the list ‘tuples’
    - computes the orbit of the list interpreted as an ordered tuple under the group
    action ( i.e., g((1,2,3)) = (g(1), g(2), g(3)) ) ‘sets’ - computes the orbit of
    the list interpreted as a sets
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '''union'' - 计算列表中点的轨道的并集 ''tuples'' - 在群作用下计算列表的轨道（即，g((1,2,3)) = (g(1), g(2),
    g(3))） ''sets'' - 计算列表的轨道，解释为集合'
- en: Examples
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE141]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: See also
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`orbit_transversal`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal
    "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal")'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`orbit_transversal`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal
    "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal")'
- en: '[PRE142]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Return a group element which sends `alpha` to `beta`.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将`alpha`发送到`beta`的群元素。
- en: Explanation
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `beta` is not in the orbit of `alpha`, the function returns `False`. This
    implementation makes use of the schreier vector. For a proof of correctness, see
    [1], p.80
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`beta`不在`alpha`的轨道上，则函数返回`False`。此实现使用了Schreier向量。关于正确性的证明，请参见[1]，第80页。
- en: Examples
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE143]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`schreier_vector`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector")'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[`schreier_vector`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector")'
- en: '[PRE144]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Computes a transversal for the orbit of `alpha` as a set.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`alpha`轨道的横断面。
- en: Explanation
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: For a permutation group \(G\), a transversal for the orbit \(Orb = \{g(\alpha)
    | g \in G\}\) is a set \(\{g_\beta | g_\beta(\alpha) = \beta\}\) for \(\beta \in
    Orb\). Note that there may be more than one possible transversal. If `pairs` is
    set to `True`, it returns the list of pairs \((\beta, g_\beta)\). For a proof
    of correctness, see [1], p.79
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 对于置换群\( G \)，轨道\( Orb = \{g(\alpha) | g \in G\} \)的一个横断面是集合\( \{g_\beta | g_\beta(\alpha)
    = \beta\} \)，其中\( \beta \in Orb \)。请注意可能存在多个可能的横断面。如果`pairs`设为`True`，则返回配对列表\((\beta,
    g_\beta)\)。关于正确性的证明，请参见[1]，第79页。
- en: Examples
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE145]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: See also
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
- en: '[PRE146]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Return the orbits of `self`, ordered according to lowest element in each orbit.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`self`的轨道，根据每个轨道中的最小元素排序。
- en: Examples
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE147]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Return the order of the group: the number of permutations that can be generated
    from elements of the group.'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的阶数：可以从群的元素生成的排列数。
- en: The number of permutations comprising the group is given by `len(group)`; the
    length of each permutation in the group is given by `group.size`.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 群的排列数由`len(group)`给出；群中每个排列的长度由`group.size`给出。
- en: Examples
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE149]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: See also
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`degree`](#sympy.combinatorics.perm_groups.PermutationGroup.degree "sympy.combinatorics.perm_groups.PermutationGroup.degree")'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '[`degree`](#sympy.combinatorics.perm_groups.PermutationGroup.degree "sympy.combinatorics.perm_groups.PermutationGroup.degree")'
- en: '[PRE152]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Return the pointwise stabilizer for a set of points.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 返回点集的点对稳定子。
- en: Explanation
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: For a permutation group \(G\) and a set of points \(\{p_1, p_2,\ldots, p_k\}\),
    the pointwise stabilizer of \(p_1, p_2, \ldots, p_k\) is defined as \(G_{p_1,\ldots,
    p_k} = \{g\in G | g(p_i) = p_i \forall i\in\{1, 2,\ldots,k\}\}\) ([1],p20). It
    is a subgroup of \(G\).
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 对于置换群\( G \)和点集\(\{p_1, p_2,\ldots, p_k\}\)，\(p_1, p_2, \ldots, p_k\)的点对稳定子定义为\(G_{p_1,\ldots,
    p_k} = \{g\in G | g(p_i) = p_i \forall i\in\{1, 2,\ldots,k\}\}\)（[1]，第20页）。它是\(G\)的子群。
- en: Examples
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE153]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Notes
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When incremental == True, rather than the obvious implementation using successive
    calls to `.stabilizer()`, this uses the incremental Schreier-Sims algorithm to
    obtain a base with starting segment - the given points.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 当`incremental == True`时，与使用连续调用`.stabilizer()`的明显实现不同，这里使用增量Schreier-Sims算法来获得具有起始段的基。
- en: See also
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`stabilizer`](#sympy.combinatorics.perm_groups.PermutationGroup.stabilizer
    "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"), [`schreier_sims_incremental`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental")'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '[`stabilizer`](#sympy.combinatorics.perm_groups.PermutationGroup.stabilizer
    "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"), [`schreier_sims_incremental`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental")'
- en: '[PRE154]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Return the PolycyclicGroup instance with below parameters:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有以下参数的PolycyclicGroup实例：
- en: Explanation
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'pc_sequence : Polycyclic sequence is formed by collecting all the missing generators
    between the adjacent groups in the derived series of given permutation group.'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pc_sequence：多项式序列是通过在给定置换群的导出序列中的相邻群之间收集所有缺失的生成器而形成的。
- en: 'pc_series : Polycyclic series is formed by adding all the missing generators
    of `der[i+1]` in `der[i]`, where `der` represents the derived series.'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pc_series：多项式系列是通过在`der[i]`中添加`der[i+1]`中的所有缺失生成器而形成的，其中`der`表示导出系列。
- en: 'relative_order : A list, computed by the ratio of adjacent groups in pc_series.'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对阶：由pc_series中相邻群的比率计算的列表。
- en: '[PRE155]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Return an \(FpGroup\) presentation of the group.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的\(FpGroup\)演示。
- en: The algorithm is described in [1], Chapter 6.1.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在[1]，第6.1章中描述。
- en: '[PRE156]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Return a random group element
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个随机群元素
- en: '[PRE157]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Return a random group element using product replacement.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 使用乘积替换返回一个随机群元素。
- en: Explanation
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: For the details of the product replacement algorithm, see `_random_pr_init`
    In `random_pr` the actual ‘product replacement’ is performed. Notice that if the
    attribute `_random_gens` is empty, it needs to be initialized by `_random_pr_init`.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 有关乘积替换算法的详细信息，请参见`_random_pr_init`在`random_pr`中执行实际的‘乘积替换’。请注意，如果属性`_random_gens`为空，则需要通过`_random_pr_init`进行初始化。
- en: See also
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`_random_pr_init`](#sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init
    "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init")'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_random_pr_init`](#sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init
    "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init")'
- en: '[PRE158]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Random element from the stabilizer of `alpha`.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '`alpha`的稳定器的随机元素。'
- en: The schreier vector for `alpha` is an optional argument used for speeding up
    repeated calls. The algorithm is described in [1], p.81
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '`alpha`的Schreier向量是用于加速重复调用的可选参数。该算法在[1]，第81页中描述。'
- en: See also
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"),
    [`orbit_rep`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep")'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '[`random_pr`](#sympy.combinatorics.perm_groups.PermutationGroup.random_pr "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"),
    [`orbit_rep`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep")'
- en: '[PRE159]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Schreier-Sims algorithm.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: Schreier-Sims算法。
- en: Explanation
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: It computes the generators of the chain of stabilizers \(G > G_{b_1} > .. >
    G_{b1,..,b_r} > 1\) in which \(G_{b_1,..,b_i}\) stabilizes \(b_1,..,b_i\), and
    the corresponding `s` cosets. An element of the group can be written as the product
    \(h_1*..*h_s\).
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 它计算稳定器链\(G > G_{b_1} > .. > G_{b1,..,b_r} > 1\)的生成器，其中\(G_{b_1,..,b_i}\)稳定\(b_1,..,b_i\)，以及相应的`s`余类。群的一个元素可以写成乘积\(h_1*..*h_s\)。
- en: We use the incremental Schreier-Sims algorithm.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用增量Schreier-Sims算法。
- en: Examples
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE160]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Extend a sequence of points and generating set to a base and strong generating
    set.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 将一系列点和生成集扩展为基础和强生成集。
- en: 'Parameters:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**base**'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '**base**'
- en: The sequence of points to be extended to a base. Optional parameter with default
    value `[]`.
  id: totrans-649
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要扩展为基础的点序列。可选参数，默认值为`[]`。
- en: '**gens**'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '**gens**'
- en: The generating set to be extended to a strong generating set relative to the
    base obtained. Optional parameter with default value `self.generators`.
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要扩展的生成集相对于获得的基础的强生成集。可选参数，默认值为`self.generators`。
- en: '**slp_dict**'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '**slp_dict**'
- en: 'If \(True\), return a dictionary \({g: gens}\) for each strong generator \(g\)
    where \(gens\) is a list of strong generators coming before \(g\) in \(strong_gens\),
    such that the product of the elements of \(gens\) is equal to \(g\).'
  id: totrans-653
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '如果为\(True\)，则为每个强生成器\(g\)返回一个字典\({g: gens}\)，其中\(gens\)是在\(strong_gens\)中的\(g\)之前出现的强生成器的列表，使得\(gens\)的元素的乘积等于\(g\)。'
- en: 'Returns:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: (base, strong_gens)
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: (base, strong_gens)
- en: '`base` is the base obtained, and `strong_gens` is the strong generating set
    relative to it. The original parameters `base`, `gens` remain unchanged.'
  id: totrans-656
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`base`是获得的基础，`strong_gens`是相对于它的强生成集。原始参数`base`，`gens`保持不变。'
- en: Examples
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE162]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Notes
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This version of the Schreier-Sims algorithm runs in polynomial time. There are
    certain assumptions in the implementation - if the trivial group is provided,
    `base` and `gens` are returned immediately, as any sequence of points is a base
    for the trivial group. If the identity is present in the generators `gens`, it
    is removed as it is a redundant generator. The implementation is described in
    [1], pp. 90-93.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: '[`schreier_sims`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"), [`schreier_sims_random`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random")'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Randomized Schreier-Sims algorithm.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '**base**'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: The sequence to be extended to a base.
  id: totrans-667
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gens**'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: The generating set to be extended to a strong generating set.
  id: totrans-669
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**consec_succ**'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: The parameter defining the probability of a wrong answer.
  id: totrans-671
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**_random_prec**'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: An internal parameter used for testing purposes.
  id: totrans-673
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: (base, strong_gens)
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '`base` is the base and `strong_gens` is the strong generating set relative
    to it.'
  id: totrans-676
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: The randomized Schreier-Sims algorithm takes the sequence `base` and the generating
    set `gens`, and extends `base` to a base, and `gens` to a strong generating set
    relative to that base with probability of a wrong answer at most \(2^{-consec\_succ}\),
    provided the random generators are sufficiently random.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Notes
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm is described in detail in [1], pp. 97-98\. It extends the orbits
    `orbs` and the permutation groups `stabs` to basic orbits and basic stabilizers
    for the base and strong generating set produced in the end. The idea of the extension
    process is to “sift” random group elements through the stabilizer chain and amend
    the stabilizers/orbits along the way when a sift is not successful. The helper
    function `_strip` is used to attempt to decompose a random group element according
    to the current state of the stabilizer chain and report whether the element was
    fully decomposed (successful sift) or not (unsuccessful sift). In the latter case,
    the level at which the sift failed is reported and used to amend `stabs`, `base`,
    `gens` and `orbs` accordingly. The halting condition is for `consec_succ` consecutive
    successful sifts to pass. This makes sure that the current `base` and `gens` form
    a BSGS with probability at least \(1 - 1/\text{consec\_succ}\).
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '[`schreier_sims`](#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims")'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Computes the schreier vector for `alpha`.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: The Schreier vector efficiently stores information about the orbit of `alpha`.
    It can later be used to quickly obtain elements of the group that send `alpha`
    to a particular element in the orbit. Notice that the Schreier vector depends
    on the order in which the group generators are listed. For a definition, see [3].
    Since list indices start from zero, we adopt the convention to use “None” instead
    of 0 to signify that an element does not belong to the orbit. For the algorithm
    and its correctness, see [2], pp.78-80.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: See also
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '[`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Return the stabilizer subgroup of `alpha`.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: The stabilizer of \(\alpha\) is the group \(G_\alpha = \{g \in G | g(\alpha)
    = \alpha\}\). For a proof of correctness, see [1], p.79.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: See also
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '[`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Return a strong generating set from the Schreier-Sims algorithm.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: A generating set \(S = \{g_1, g_2, \dots, g_t\}\) for a permutation group \(G\)
    is a strong generating set relative to the sequence of points (referred to as
    a “base”) \((b_1, b_2, \dots, b_k)\) if, for \(1 \leq i \leq k\) we have that
    the intersection of the pointwise stabilizer \(G^{(i+1)} := G_{b_1, b_2, \dots,
    b_i}\) with \(S\) generates the pointwise stabilizer \(G^{(i+1)}\). The concepts
    of a base and strong generating set and their applications are discussed in depth
    in [1], pp. 87-89 and [2], pp. 55-57.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: See also
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '[`base`](#sympy.combinatorics.perm_groups.PermutationGroup.base "sympy.combinatorics.perm_groups.PermutationGroup.base"),
    [`basic_transversals`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"), [`basic_orbits`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"), [`basic_stabilizers`](#sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers
    "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers")'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Return a strong finite presentation of group. The generators of the returned
    group are in the same order as the strong generators of group.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm is based on Sims’ Verify algorithm described in [1], Chapter 6.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: See also
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '[`presentation`](#sympy.combinatorics.perm_groups.PermutationGroup.presentation
    "sympy.combinatorics.perm_groups.PermutationGroup.presentation"), [`_verify`](#sympy.combinatorics.perm_groups.PermutationGroup._verify
    "sympy.combinatorics.perm_groups.PermutationGroup._verify")'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Return the subgroup generated by \(gens\) which is a list of elements of the
    group
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Find the subgroup of all elements satisfying the property `prop`.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: '**prop**'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: The property to be used. Has to be callable on group elements and always return
    `True` or `False`. It is assumed that all group elements satisfying `prop` indeed
    form a subgroup.
  id: totrans-722
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于被使用的属性。必须在群元素上可调用，并始终返回`True`或`False`。假设所有满足`prop`的群元素确实形成一个子群。
- en: '**base**'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '**base**'
- en: A base for the supergroup.
  id: totrans-724
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 超群的一个基。
- en: '**strong_gens**'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**strong_gens**'
- en: A strong generating set for the supergroup.
  id: totrans-726
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 超群的一个强生成集。
- en: '**tests**'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '**tests**'
- en: A list of callables of length equal to the length of `base`. These are used
    to rule out group elements by partial base images, so that `tests[l](g)` returns
    False if the element `g` is known not to satisfy prop base on where g sends the
    first `l + 1` base points.
  id: totrans-728
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个长度等于`base`长度的可调用对象列表。这些用于通过部分基映像排除群元素，因此如果元素`g`已知不满足`prop`，则`tests[l](g)`返回False。
- en: '**init_subgroup**'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '**init_subgroup**'
- en: if a subgroup of the sought group is known in advance, it can be passed to the
    function as this parameter.
  id: totrans-730
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果预先知道所寻找群的一个子群，则可以将其作为此参数传递给函数。
- en: 'Returns:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: res
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: res
- en: The subgroup of all elements satisfying `prop`. The generating set for this
    group is guaranteed to be a strong generating set relative to the base `base`.
  id: totrans-733
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 满足`prop`的所有元素的子群。保证该群的生成集相对于基`base`是一个强生成集。
- en: Explanation
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This is done by a depth-first search with respect to base images that uses several
    tests to prune the search tree.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种深度优先搜索，考虑基映像，并使用多个测试来修剪搜索树。
- en: Examples
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE175]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Notes
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: This function is extremely lengthy and complicated and will require some careful
    attention. The implementation is described in [1], pp. 114-117, and the comments
    for the code here follow the lines of the pseudocode in the book for clarity.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数非常长且复杂，需要仔细注意。该实现在[1]，第114-117页中描述，此处的代码注释遵循书中伪代码以确保清晰。
- en: The complexity is exponential in general, since the search process by itself
    visits all members of the supergroup. However, there are a lot of tests which
    are used to prune the search tree, and users can define their own tests via the
    `tests` parameter, so in practice, and for some computations, it’s not terrible.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 一般情况下，复杂度是指数级的，因为搜索过程本身访问超群的所有成员。然而，有许多测试用于修剪搜索树，用户可以通过`tests`参数定义自己的测试，因此在实践中，对于某些计算而言，情况并不糟糕。
- en: A crucial part in the procedure is the frequent base change performed (this
    is line 11 in the pseudocode) in order to obtain a new basic stabilizer. The book
    mentiones that this can be done by using `.baseswap(...)`, however the current
    implementation uses a more straightforward way to find the next basic stabilizer
    - calling the function `.stabilizer(...)` on the previous basic stabilizer.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中关键的一部分是执行频繁的基变换（这是伪代码中的第11行），以获得一个新的基本稳定器。书中提到可以通过使用`.baseswap(...)`来实现，但当前的实现使用更直接的方法来找到下一个基本稳定器
    - 在前一个基本稳定器上调用函数`.stabilizer(...)`。
- en: '[PRE176]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Return a p-Sylow subgroup of the group.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 返回群的一个p-Sylow子群。
- en: The algorithm is described in [1], Chapter 4, Section 7
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在[1]，第4章，第7节中描述。
- en: Examples
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE177]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Compute the degree of transitivity of the group.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 计算群的传递度。
- en: Explanation
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A permutation group \(G\) acting on \(\Omega = \{0, 1, \dots, n-1\}\) is `k`-fold
    transitive, if, for any \(k\) points \((a_1, a_2, \dots, a_k) \in \Omega\) and
    any \(k\) points \((b_1, b_2, \dots, b_k) \in \Omega\) there exists \(g \in G\)
    such that \(g(a_1) = b_1, g(a_2) = b_2, \dots, g(a_k) = b_k\) The degree of transitivity
    of \(G\) is the maximum `k` such that \(G\) is `k`-fold transitive. ([8])
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 作用于集合\(\Omega = \{0, 1, \dots, n-1\}\)的置换群\(G\)是`k`-重传递的，如果对于任意\(k\)个点\((a_1,
    a_2, \dots, a_k) \in \Omega\)和任意\(k\)个点\((b_1, b_2, \dots, b_k) \in \Omega\)，存在\(g
    \in G\)使得\(g(a_1) = b_1, g(a_2) = b_2, \dots, g(a_k) = b_k\)。群\(G\)的传递度是最大的`k`，使得\(G\)是`k`-重传递的。([8])
- en: Examples
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE184]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: See also
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"), [`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit
    "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_transitive`](#sympy.combinatorics.perm_groups.PermutationGroup.is_transitive
    "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive")，[`orbit`](#sympy.combinatorics.perm_groups.PermutationGroup.orbit
    "sympy.combinatorics.perm_groups.PermutationGroup.orbit")'
