["```py\nscipy.stats.matrix_normal = <scipy.stats._multivariate.matrix_normal_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import matrix_normal \n```", "```py\n>>> M = np.arange(6).reshape(3,2); M\narray([[0, 1],\n [2, 3],\n [4, 5]])\n>>> U = np.diag([1,2,3]); U\narray([[1, 0, 0],\n [0, 2, 0],\n [0, 0, 3]])\n>>> V = 0.3*np.identity(2); V\narray([[ 0.3,  0\\. ],\n [ 0\\. ,  0.3]])\n>>> X = M + 0.1; X\narray([[ 0.1,  1.1],\n [ 2.1,  3.1],\n [ 4.1,  5.1]])\n>>> matrix_normal.pdf(X, mean=M, rowcov=U, colcov=V)\n0.023410202050005054 \n```", "```py\n>>> # Equivalent multivariate normal\n>>> from scipy.stats import multivariate_normal\n>>> vectorised_X = X.T.flatten()\n>>> equiv_mean = M.T.flatten()\n>>> equiv_cov = np.kron(V,U)\n>>> multivariate_normal.pdf(vectorised_X, mean=equiv_mean, cov=equiv_cov)\n0.023410202050005054 \n```", "```py\n>>> rv = matrix_normal(mean=None, rowcov=1, colcov=1)\n>>> # Frozen object with the same methods but holding the given\n>>> # mean and covariance fixed. \n```"]