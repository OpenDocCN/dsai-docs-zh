- en: scipy.special.yve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.yve.html#scipy.special.yve](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.yve.html#scipy.special.yve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially scaled Bessel function of the second kind of real order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns the exponentially scaled Bessel function of the second kind of real
    order *v* at complex *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Order (float).
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Argument (float or complex).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function results
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Y**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Value of the exponentially scaled Bessel function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`yv`](scipy.special.yv.html#scipy.special.yv "scipy.special.yv")'
  prefs: []
  type: TYPE_NORMAL
- en: Unscaled Bessel function of the second kind of real order.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For positive *v* values, the computation is carried out using the AMOS [[1]](#rba64767b4bf9-1)
    *zbesy* routine, which exploits the connection to the Hankel Bessel functions
    \(H_v^{(1)}\) and \(H_v^{(2)}\),
  prefs: []
  type: TYPE_NORMAL
- en: \[Y_v(z) = \frac{1}{2\imath} (H_v^{(1)} - H_v^{(2)}).\]
  prefs: []
  type: TYPE_NORMAL
- en: For negative *v* values the formula,
  prefs: []
  type: TYPE_NORMAL
- en: \[Y_{-v}(z) = Y_v(z) \cos(\pi v) + J_v(z) \sin(\pi v)\]
  prefs: []
  type: TYPE_NORMAL
- en: is used, where \(J_v(z)\) is the Bessel function of the first kind, computed
    using the AMOS routine *zbesj*. Note that the second term is exactly zero for
    integer *v*; to improve accuracy the second term is explicitly omitted for *v*
    values such that *v = floor(v)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exponentially scaled Bessel functions are useful for large *z*: for these,
    the unscaled Bessel functions can easily under-or overflow.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Donald E. Amos, “AMOS, A Portable Package for Bessel Functions of a Complex
    Argument and Nonnegative Order”, [http://netlib.org/amos/](http://netlib.org/amos/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the output of [`yv`](scipy.special.yv.html#scipy.special.yv "scipy.special.yv")
    and [`yve`](#scipy.special.yve "scipy.special.yve") for large complex arguments
    for *z* by computing their values for order `v=1` at `z=1000j`. We see that [`yv`](scipy.special.yv.html#scipy.special.yv
    "scipy.special.yv") returns nan but [`yve`](#scipy.special.yve "scipy.special.yve")
    returns a finite number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For real arguments for *z*, [`yve`](#scipy.special.yve "scipy.special.yve")
    returns the same as [`yv`](scipy.special.yv.html#scipy.special.yv "scipy.special.yv")
    up to floating point errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The function can be evaluated for several orders at the same time by providing
    a list or NumPy array for *v*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, the function can be evaluated at several points in one call
    by providing a list or NumPy array for *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to evaluate several orders at several points at the same
    time by providing arrays for *v* and *z* with broadcasting compatible shapes.
    Compute [`yve`](#scipy.special.yve "scipy.special.yve") for two different orders
    *v* and three points *z* resulting in a 2x3 array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
