- en: Category Theory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/categories.html](https://docs.sympy.org/latest/modules/categories.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The category theory module for SymPy will allow manipulating diagrams within
    a single category, including drawing them in TikZ and deciding whether they are
    commutative or not.
  prefs: []
  type: TYPE_NORMAL
- en: The general reference work this module tries to follow is
  prefs: []
  type: TYPE_NORMAL
- en: '[JoyOfCats]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adamek, H. Herrlich. G. E. Strecker: Abstract and Concrete Categories. The
    Joy of Cats.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The latest version of this book should be available for free download from
  prefs: []
  type: TYPE_NORMAL
- en: '[katmat.math.uni-bremen.de/acc/acc.pdf](https://web.archive.org/web/20220811222404/http://katmat.math.uni-bremen.de/acc/acc.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: The module is still in its pre-embryonic stage.
  prefs: []
  type: TYPE_NORMAL
- en: '## Base Class Reference'
  prefs: []
  type: TYPE_NORMAL
- en: 'This section lists the classes which implement some of the basic notions in
    category theory: objects, morphisms, categories, and diagrams.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The base class for any kind of object in an abstract category.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: While technically any instance of [`Basic`](core.html#sympy.core.basic.Basic
    "sympy.core.basic.Basic") will do, this class is the recommended way to create
    abstract objects in abstract categories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The base class for any morphism in an abstract category.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: In abstract categories, a morphism is an arrow between two category objects.
    The object where the arrow starts is called the domain, while the object where
    the arrow ends is called the codomain.
  prefs: []
  type: TYPE_NORMAL
- en: Two morphisms between the same pair of objects are considered to be the same
    morphisms. To distinguish between morphisms between the same objects use [`NamedMorphism`](#sympy.categories.NamedMorphism
    "sympy.categories.NamedMorphism").
  prefs: []
  type: TYPE_NORMAL
- en: It is prohibited to instantiate this class. Use one of the derived classes instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`IdentityMorphism`](#sympy.categories.IdentityMorphism "sympy.categories.IdentityMorphism"),
    [`NamedMorphism`](#sympy.categories.NamedMorphism "sympy.categories.NamedMorphism"),
    [`CompositeMorphism`](#sympy.categories.CompositeMorphism "sympy.categories.CompositeMorphism")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the codomain of the morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Composes self with the supplied morphism.
  prefs: []
  type: TYPE_NORMAL
- en: The order of elements in the composition is the usual order, i.e., to construct
    \(g\circ f\) use `g.compose(f)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the domain of the morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Represents a morphism which has a name.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Names are used to distinguish between morphisms which have the same domain
    and codomain: two named morphisms are equal if they have the same domains, codomains,
    and names.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Morphism`](#sympy.categories.Morphism "sympy.categories.Morphism")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns the name of the morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Represents a morphism which is a composition of other morphisms.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Two composite morphisms are equal if the morphisms they were obtained from (components)
    are the same and were listed in the same order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The arguments to the constructor for this class should be listed in diagram
    order: to obtain the composition \(g\circ f\) from the instances of [`Morphism`](#sympy.categories.Morphism
    "sympy.categories.Morphism") `g` and `f` use `CompositeMorphism(f, g)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the codomain of this composite morphism.
  prefs: []
  type: TYPE_NORMAL
- en: The codomain of the composite morphism is the codomain of its last component.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the components of this composite morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Returns the domain of this composite morphism.
  prefs: []
  type: TYPE_NORMAL
- en: The domain of the composite morphism is the domain of its first component.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Forgets the composite structure of this morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If `new_name` is not empty, returns a [`NamedMorphism`](#sympy.categories.NamedMorphism
    "sympy.categories.NamedMorphism") with the supplied name, otherwise returns a
    [`Morphism`](#sympy.categories.Morphism "sympy.categories.Morphism"). In both
    cases the domain of the new morphism is the domain of this composite morphism
    and the codomain of the new morphism is the codomain of this composite morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Represents an identity morphism.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: An identity morphism is a morphism with equal domain and codomain, which acts
    as an identity with respect to composition.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Morphism`](#sympy.categories.Morphism "sympy.categories.Morphism")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: An (abstract) category.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A category [JoyOfCats] is a quadruple \(\mbox{K} = (O, \hom, id, \circ)\) consisting
    of
  prefs: []
  type: TYPE_NORMAL
- en: a (set-theoretical) class \(O\), whose members are called \(K\)-objects,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for each pair \((A, B)\) of \(K\)-objects, a set \(\hom(A, B)\) whose members
    are called \(K\)-morphisms from \(A\) to \(B\),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a each \(K\)-object \(A\), a morphism \(id:A\rightarrow A\), called the
    \(K\)-identity of \(A\),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a composition law \(\circ\) associating with every \(K\)-morphisms \(f:A\rightarrow
    B\) and \(g:B\rightarrow C\) a \(K\)-morphism \(g\circ f:A\rightarrow C\), called
    the composite of \(f\) and \(g\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composition is associative, \(K\)-identities are identities with respect to
    composition, and the sets \(\hom(A, B)\) are pairwise disjoint.
  prefs: []
  type: TYPE_NORMAL
- en: This class knows nothing about its objects and morphisms. Concrete cases of
    (abstract) categories should be implemented as classes derived from this one.
  prefs: []
  type: TYPE_NORMAL
- en: Certain instances of [`Diagram`](#sympy.categories.Diagram "sympy.categories.Diagram")
    can be asserted to be commutative in a [`Category`](#sympy.categories.Category
    "sympy.categories.Category") by supplying the argument `commutative_diagrams`
    in the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Diagram`](#sympy.categories.Diagram "sympy.categories.Diagram")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Returns the [`FiniteSet`](sets.html#sympy.sets.sets.FiniteSet "sympy.sets.sets.FiniteSet")
    of diagrams which are known to be commutative in this category.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Returns the name of this category.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Returns the class of objects of this category.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Represents a diagram in a certain category.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Informally, a diagram is a collection of objects of a category and certain morphisms
    between them. A diagram is still a monoid with respect to morphism composition;
    i.e., identity morphisms, as well as all composites of morphisms included in the
    diagram belong to the diagram. For a more formal approach to this notion see [Pare1970].
  prefs: []
  type: TYPE_NORMAL
- en: The components of composite morphisms are also added to the diagram. No properties
    are assigned to such morphisms by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'A commutative diagram is often accompanied by a statement of the following
    kind: “if such morphisms with such properties exist, then such morphisms which
    such properties exist and the diagram is commutative”. To represent this, an instance
    of [`Diagram`](#sympy.categories.Diagram "sympy.categories.Diagram") includes
    a collection of morphisms which are the premises and another collection of conclusions.
    `premises` and `conclusions` associate morphisms belonging to the corresponding
    categories with the [`FiniteSet`](sets.html#sympy.sets.sets.FiniteSet "sympy.sets.sets.FiniteSet")’s
    of their properties.'
  prefs: []
  type: TYPE_NORMAL
- en: The set of properties of a composite morphism is the intersection of the sets
    of properties of its components. The domain and codomain of a conclusion morphism
    should be among the domains and codomains of the morphisms listed as the premises
    of a diagram.
  prefs: []
  type: TYPE_NORMAL
- en: No checks are carried out of whether the supplied object and morphisms do belong
    to one and the same category.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[Pare1970] B. Pareigis: Categories and functors. Academic Press, 1970.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns the conclusions of this diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns a 2-tuple of sets of morphisms between objects `A` and `B`: one set
    of morphisms listed as premises, and the other set of morphisms listed as conclusions.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Object`](#sympy.categories.Object "sympy.categories.Object"), [`Morphism`](#sympy.categories.Morphism
    "sympy.categories.Morphism")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether `diagram` is a subdiagram of `self`. Diagram \(D'\) is a subdiagram
    of \(D\) if all premises (conclusions) of \(D'\) are contained in the premises
    (conclusions) of \(D\). The morphisms contained both in \(D'\) and \(D\) should
    have the same properties for \(D'\) to be a subdiagram of \(D\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the [`FiniteSet`](sets.html#sympy.sets.sets.FiniteSet "sympy.sets.sets.FiniteSet")
    of objects that appear in this diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Returns the premises of this diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If `objects` is a subset of the objects of `self`, returns a diagram which has
    as premises all those premises of `self` which have a domains and codomains in
    `objects`, likewise for conclusions. Properties are preserved.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]  ## Diagram Drawing'
  prefs: []
  type: TYPE_NORMAL
- en: This section lists the classes which allow automatic drawing of diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Constructs and holds the fitting of the diagram into a grid.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The mission of this class is to analyse the structure of the supplied diagram
    and to place its objects on a grid such that, when the objects and the morphisms
    are actually drawn, the diagram would be “readable”, in the sense that there will
    not be many intersections of moprhisms. This class does not perform any actual
    drawing. It does strive nevertheless to offer sufficient metadata to draw a diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following simple diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to have a diagram laid out is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes one sees the diagram as consisting of logical groups. One can advise
    `DiagramGrid` as to such groups by employing the `groups` keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Lay it out with generic layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can group the objects \(A\) and \(D\) to have them near one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note how the positioning of the other objects changes.
  prefs: []
  type: TYPE_NORMAL
- en: Further indications can be supplied to the constructor of [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid") using keyword arguments. The currently
    supported hints are explained in the following paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid "sympy.categories.diagram_drawing.DiagramGrid")
    does not automatically guess which layout would suit the supplied diagram better.
    Consider, for example, the following linear diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'When laid out with the generic layout, it does not get to look linear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'To get it laid out in a line, use `layout="sequential"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'One may sometimes need to transpose the resulting layout. While this can always
    be done by hand, [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid") provides a hint for that purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Separate hints can also be provided for each group. For an example, refer to
    `tests/test_drawing.py`, and see the different ways in which the five lemma [FiveLemma]
    can be laid out.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Diagram`](#sympy.categories.Diagram "sympy.categories.Diagram")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[FiveLemma](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Five_lemma](https://en.wikipedia.org/wiki/Five_lemma)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of rows in this diagram layout.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Returns those morphisms (and their properties) which are sufficiently meaningful
    to be drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of columns in this diagram layout.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Stores the information necessary for producing an Xy-pic description of an arrow.
  prefs: []
  type: TYPE_NORMAL
- en: The principal goal of this class is to abstract away the string representation
    of an arrow and to also provide the functionality to produce the actual Xy-pic
    string.
  prefs: []
  type: TYPE_NORMAL
- en: '`unit` sets the unit which will be used to specify the amount of curving and
    other distances. `horizontal_direction` should be a string of `"r"` or `"l"` specifying
    the horizontal offset of the target cell of the arrow relatively to the current
    one. `vertical_direction` should specify the vertical offset using a series of
    either `"d"` or `"u"`. `label_position` should be either `"^"`, `"_"`, or `"|"`
    to specify that the label should be positioned above the arrow, below the arrow
    or just over the arrow, in a break. Note that the notions “above” and “below”
    are relative to arrow direction. `label` stores the morphism label.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This works as follows (disregard the yet unexplained arguments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '`curving` should be one of `"^"`, `"_"` to specify in which direction the arrow
    is going to curve. `curving_amount` is a number describing how many `unit`’s the
    morphism is going to curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '`looping_start` and `looping_end` are currently only used for loop morphisms,
    those which have the same domain and codomain. These two attributes should store
    a valid Xy-pic direction and specify, correspondingly, the direction the arrow
    gets out into and the direction the arrow gets back from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '`label_displacement` controls how far the arrow label is from the ends of the
    arrow. For example, to position the arrow label near the arrow head, use “>”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `arrow_style` is used to specify the arrow style. To get a dashed
    arrow, for example, use “{–>}” as arrow style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of [`ArrowStringDescription`](#sympy.categories.diagram_drawing.ArrowStringDescription
    "sympy.categories.diagram_drawing.ArrowStringDescription") will be constructed
    by [`XypicDiagramDrawer`](#sympy.categories.diagram_drawing.XypicDiagramDrawer
    "sympy.categories.diagram_drawing.XypicDiagramDrawer") and provided for further
    use in formatters. The user is not expected to construct instances of [`ArrowStringDescription`](#sympy.categories.diagram_drawing.ArrowStringDescription
    "sympy.categories.diagram_drawing.ArrowStringDescription") themselves.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to properly utilise this class, the reader is encouraged to checkout
    the Xy-pic user guide, available at [Xypic].
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`XypicDiagramDrawer`](#sympy.categories.diagram_drawing.XypicDiagramDrawer
    "sympy.categories.diagram_drawing.XypicDiagramDrawer")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[Xypic](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://xy-pic.sourceforge.net/](https://xy-pic.sourceforge.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Given a [`Diagram`](#sympy.categories.Diagram "sympy.categories.Diagram") and
    the corresponding [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid"), produces the Xy-pic representation
    of the diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important method in this class is `draw`. Consider the following triangle
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'To draw this diagram, its objects need to be laid out with a [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the drawing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: For further details see the docstring of this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To control the appearance of the arrows, formatters are used. The dictionary
    `arrow_formatters` maps morphisms to formatter functions. A formatter is accepts
    an [`ArrowStringDescription`](#sympy.categories.diagram_drawing.ArrowStringDescription
    "sympy.categories.diagram_drawing.ArrowStringDescription") and is allowed to modify
    any of the arrow properties exposed thereby. For example, to have all morphisms
    with the property `unique` appear as dashed arrows, and to have their names prepended
    with \(\exists !\), the following should be done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'To modify the appearance of all arrows in the diagram, set `default_arrow_formatter`.
    For example, to place all morphism labels a little bit farther from the arrow
    head so that they look more centred, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'In some diagrams some morphisms are drawn as curved arrows. Consider the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'To control how far the morphisms are curved by default, one can use the `unit`
    and `default_curving_amount` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'In some diagrams, there are multiple curved morphisms between the same two
    objects. To control by how much the curving changes between two such successive
    morphisms, use `default_curving_step`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The default value of `default_curving_step` is 4 units.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`draw`](#sympy.categories.diagram_drawing.XypicDiagramDrawer.draw "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"),
    [`ArrowStringDescription`](#sympy.categories.diagram_drawing.ArrowStringDescription
    "sympy.categories.diagram_drawing.ArrowStringDescription")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Xy-pic representation of `diagram` laid out in `grid`.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following simple triangle diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To draw this diagram, its objects need to be laid out with a [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the drawing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The argument `masked` can be used to skip morphisms in the presentation of
    the diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `diagram_format` argument can be used to specify the format string
    of the diagram. For example, to increase the spacing by 1 cm, proceeding as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Provides a shortcut combining [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid") and [`XypicDiagramDrawer`](#sympy.categories.diagram_drawing.XypicDiagramDrawer
    "sympy.categories.diagram_drawing.XypicDiagramDrawer"). Returns an Xy-pic presentation
    of `diagram`. The argument `masked` is a list of morphisms which will be not be
    drawn. The argument `diagram_format` is the format string inserted after “xymatrix”.
    `groups` should be a set of logical groups. The `hints` will be passed directly
    to the constructor of [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid").
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the arguments, see the docstrings of [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid") and `XypicDiagramDrawer.draw`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`XypicDiagramDrawer`](#sympy.categories.diagram_drawing.XypicDiagramDrawer
    "sympy.categories.diagram_drawing.XypicDiagramDrawer"), [`DiagramGrid`](#sympy.categories.diagram_drawing.DiagramGrid
    "sympy.categories.diagram_drawing.DiagramGrid")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Combines the functionality of `xypic_draw_diagram` and `sympy.printing.preview`.
    The arguments `masked`, `diagram_format`, `groups`, and `hints` are passed to
    `xypic_draw_diagram`, while `output`, [PRE86] are passed to `preview`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`XypicDiagramDrawer`](#sympy.categories.diagram_drawing.XypicDiagramDrawer
    "sympy.categories.diagram_drawing.XypicDiagramDrawer")'
  prefs: []
  type: TYPE_NORMAL
