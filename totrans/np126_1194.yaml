- en: NumPy 1.4.0 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.4.0-notes.html](https://numpy.org/doc/1.26/release/1.4.0-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This minor includes numerous bug fixes, as well as a few new features. It is
    backward compatible with 1.3.0 release.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New datetime dtype support to deal with dates in arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster import time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended array wrapping mechanism for ufuncs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Neighborhood iterator (C-level only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C99-like complex functions in npymath
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extended array wrapping mechanism for ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic detection of forward incompatibilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  prefs: []
  type: TYPE_NORMAL
- en: New iterators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  prefs: []
  type: TYPE_NORMAL
- en: New polynomial support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  prefs: []
  type: TYPE_NORMAL
- en: New C API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C functions have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following ufuncs have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_HPPA: PARISC'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Reusing npymath
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: Improved set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy import is noticeably faster (from 20 to 30 % depending on the platform
    and computer)
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The sort functions now sort nans to the end.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Real sort order is [R, nan]
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex sort order is [R + Rj, R + nanj, nan + Rj, nan + nanj]
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex numbers with the same nan placements are sorted according to the non-nan
    part if it exists.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The type comparison functions have been made consistent with the new sort order
    of nans. Searchsorted now works with sorted arrays containing nan values.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex division has been made more resistant to overflow.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex floor division has been made more resistant to overflow.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following functions are deprecated:'
  prefs: []
  type: TYPE_NORMAL
- en: 'correlate: it takes a new keyword argument old_behavior. When True (the default),
    it returns the same result as before. When False, compute the conventional correlation,
    and take the conjugate for complex arrays. The old behavior will be removed in
    NumPy 1.5, and raises a DeprecationWarning in 1.4.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'unique1d: use unique instead. unique1d raises a deprecation warning in 1.4,
    and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'intersect1d_nu: use intersect1d instead. intersect1d_nu raises a deprecation
    warning in 1.4, and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'setmember1d: use in1d instead. setmember1d raises a deprecation warning in
    1.4, and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following raise errors:'
  prefs: []
  type: TYPE_NORMAL
- en: When operating on 0-d arrays, `numpy.max` and other functions accept only `axis=0`,
    `axis=-1` and `axis=None`. Using an out-of-bounds axes is an indication of a bug,
    so Numpy raises an error for these cases now.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specifying `axis > MAX_DIMS` is no longer allowed; Numpy raises now an error
    instead of behaving similarly as for `axis=None`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use C99 complex functions when available
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  prefs: []
  type: TYPE_NORMAL
- en: split multiarray and umath source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  prefs: []
  type: TYPE_NORMAL
- en: Separate compilation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New functions which have been added:'
  prefs: []
  type: TYPE_NORMAL
- en: npy_copysign
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New datetime dtype support to deal with dates in arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster import time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended array wrapping mechanism for ufuncs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Neighborhood iterator (C-level only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C99-like complex functions in npymath
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extended array wrapping mechanism for ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic detection of forward incompatibilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  prefs: []
  type: TYPE_NORMAL
- en: New iterators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  prefs: []
  type: TYPE_NORMAL
- en: New polynomial support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  prefs: []
  type: TYPE_NORMAL
- en: New C API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C functions have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following ufuncs have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_HPPA: PARISC'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Reusing npymath
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: Improved set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  prefs: []
  type: TYPE_NORMAL
- en: Extended array wrapping mechanism for ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An __array_prepare__ method has been added to ndarray to provide subclasses
    greater flexibility to interact with ufuncs and ufunc-like functions. ndarray
    already provided __array_wrap__, which allowed subclasses to set the array type
    for the result and populate metadata on the way out of the ufunc (as seen in the
    implementation of MaskedArray). For some applications it is necessary to provide
    checks and populate metadata *on the way in*. __array_prepare__ is therefore called
    just after the ufunc has initialized the output array but before computing the
    results and populating it. This way, checks can be made and errors raised before
    operations which may modify data in place.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic detection of forward incompatibilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, if an extension was built against a version N of NumPy, and used
    on a system with NumPy M < N, the import_array was successful, which could cause
    crashes because the version M does not have a function in N. Starting from NumPy
    1.4.0, this will cause a failure in import_array, so the error will be caught
    early on.
  prefs: []
  type: TYPE_NORMAL
- en: New iterators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new neighborhood iterator has been added to the C API. It can be used to iterate
    over the items in a neighborhood of an array, and can handle boundaries conditions
    automatically. Zero and one padding are available, as well as arbitrary constant
    value, mirror and circular padding.
  prefs: []
  type: TYPE_NORMAL
- en: New polynomial support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New modules chebyshev and polynomial have been added. The new polynomial module
    is not compatible with the current polynomial support in numpy, but is much like
    the new chebyshev module. The most noticeable difference to most will be that
    coefficients are specified from low to high power, that the low level functions
    do *not* work with the Chebyshev and Polynomial classes as arguments, and that
    the Chebyshev and Polynomial classes include a domain. Mapping between domains
    is a linear substitution and the two classes can be converted one to the other,
    allowing, for instance, a Chebyshev series in one domain to be expanded as a polynomial
    in another domain. The new classes should generally be used instead of the low
    level functions, the latter are provided for those who wish to build their own
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: The new modules are not automatically imported into the numpy namespace, they
    must be explicitly brought in with an “import numpy.polynomial” statement.
  prefs: []
  type: TYPE_NORMAL
- en: New C API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C functions have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetNDArrayCFeatureVersion: return the *API* version of the loaded numpy.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_Correlate2 - like PyArray_Correlate, but implements the usual definition
    of correlation. Inputs are not swapped, and conjugate is taken for complex arrays.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood
    of a point, with automatic boundaries handling. It is documented in the iterators
    section of the C-API reference, and you can find some examples in the multiarray_test.c.src
    file in numpy.core.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following ufuncs have been added to the C API:'
  prefs: []
  type: TYPE_NORMAL
- en: copysign - return the value of the first argument with the sign copied from
    the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: nextafter - return the next representable floating point value of the first
    argument toward the second argument.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The alpha processor is now defined and available in numpy/npy_cpu.h. The failed
    detection of the PARISC processor has been fixed. The defines are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_HPPA: PARISC'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_ALPHA: Alpha'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'deprecated decorator: this decorator may be used to avoid cluttering testing
    output while testing DeprecationWarning is effectively raised by the decorated
    test.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_almost_equal_nulp: new method to compare two arrays of floating
    point values. With this function, two values are considered close if there are
    not many representable floating point values in between, thus being more robust
    than assert_array_almost_equal when the values fluctuate a lot.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_array_max_ulp: raise an assertion if there are more than N representable
    numbers between two floating point values.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'assert_warns: raise an AssertionError if a callable does not generate a warning
    of the appropriate class, without altering the warning state.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Reusing npymath
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In 1.3.0, we started putting portable C math routines in npymath library, so
    that people can use those to write portable extensions. Unfortunately, it was
    not possible to easily link against this library: in 1.4.0, support has been added
    to numpy.distutils so that 3rd party can reuse this library. See coremath documentation
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: Improved set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In previous versions of NumPy some set functions (intersect1d, setxor1d, setdiff1d
    and setmember1d) could return incorrect results if the input arrays contained
    duplicate items. These now work correctly for input arrays with duplicates. setmember1d
    has been renamed to in1d, as with the change to accept arrays with duplicates
    it is no longer a set operation, and is conceptually similar to an elementwise
    version of the Python operator ‘in’. All of these functions now accept the boolean
    keyword assume_unique. This is False by default, but can be set True if the input
    arrays are known not to contain duplicates, which can increase the functions’
    execution speed.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy import is noticeably faster (from 20 to 30 % depending on the platform
    and computer)
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The sort functions now sort nans to the end.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Real sort order is [R, nan]
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex sort order is [R + Rj, R + nanj, nan + Rj, nan + nanj]
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex numbers with the same nan placements are sorted according to the non-nan
    part if it exists.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The type comparison functions have been made consistent with the new sort order
    of nans. Searchsorted now works with sorted arrays containing nan values.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex division has been made more resistant to overflow.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Complex floor division has been made more resistant to overflow.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following functions are deprecated:'
  prefs: []
  type: TYPE_NORMAL
- en: 'correlate: it takes a new keyword argument old_behavior. When True (the default),
    it returns the same result as before. When False, compute the conventional correlation,
    and take the conjugate for complex arrays. The old behavior will be removed in
    NumPy 1.5, and raises a DeprecationWarning in 1.4.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'unique1d: use unique instead. unique1d raises a deprecation warning in 1.4,
    and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'intersect1d_nu: use intersect1d instead. intersect1d_nu raises a deprecation
    warning in 1.4, and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'setmember1d: use in1d instead. setmember1d raises a deprecation warning in
    1.4, and will be removed in 1.5.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following raise errors:'
  prefs: []
  type: TYPE_NORMAL
- en: When operating on 0-d arrays, `numpy.max` and other functions accept only `axis=0`,
    `axis=-1` and `axis=None`. Using an out-of-bounds axes is an indication of a bug,
    so Numpy raises an error for these cases now.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specifying `axis > MAX_DIMS` is no longer allowed; Numpy raises now an error
    instead of behaving similarly as for `axis=None`.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use C99 complex functions when available
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  prefs: []
  type: TYPE_NORMAL
- en: split multiarray and umath source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  prefs: []
  type: TYPE_NORMAL
- en: Separate compilation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New functions which have been added:'
  prefs: []
  type: TYPE_NORMAL
- en: npy_copysign
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Use C99 complex functions when available
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The numpy complex types are now guaranteed to be ABI compatible with C99 complex
    type, if available on the platform. Moreover, the complex ufunc now use the platform
    C99 functions instead of our own.
  prefs: []
  type: TYPE_NORMAL
- en: split multiarray and umath source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code of multiarray and umath has been split into separate logic compilation
    units. This should make the source code more amenable for newcomers.
  prefs: []
  type: TYPE_NORMAL
- en: Separate compilation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, every file of multiarray (and umath) is merged into one for compilation
    as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to
    a non-negative value, experimental individual compilation of each file is enabled.
    This makes the compile/debug cycle much faster when working on core numpy.
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New functions which have been added:'
  prefs: []
  type: TYPE_NORMAL
- en: npy_copysign
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_nextafter
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpack
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_creal
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cimag
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cabs
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cexp
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_clog
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_cpow
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csqr
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_ccos
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: npy_csin
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
