- en: numpy.frompyfunc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.frompyfunc.html](https://numpy.org/doc/1.26/reference/generated/numpy.frompyfunc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Takes an arbitrary Python function and returns a NumPy ufunc.
  prefs: []
  type: TYPE_NORMAL
- en: Can be used, for example, to add broadcasting to a built-in Python function
    (see Examples section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**Python function object'
  prefs: []
  type: TYPE_NORMAL
- en: An arbitrary Python function.
  prefs: []
  type: TYPE_NORMAL
- en: '**nin**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of input arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**nout**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of objects returned by *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**identity**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value to use for the [`identity`](numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") attribute of the resulting object. If specified, this
    is equivalent to setting the underlying C `identity` field to `PyUFunc_IdentityValue`.
    If omitted, the identity is set to `PyUFunc_None`. Note that this is _not_ equivalent
    to setting the identity to `None`, which implies the operation is reorderable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ufunc'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a NumPy universal function (`ufunc`) object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vectorize`](numpy.vectorize.html#numpy.vectorize "numpy.vectorize")'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluates pyfunc over input arrays using broadcasting rules of numpy.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The returned ufunc always returns PyObject arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Use frompyfunc to add broadcasting to the Python function `oct`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
