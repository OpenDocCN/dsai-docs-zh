["```py\nfrom numpy.random import default_rng, SeedSequence\nimport multiprocessing\nimport concurrent.futures\nimport numpy as np\n\nclass MultithreadedRNG:\n    def __init__(self, n, seed=None, threads=None):\n        if threads is None:\n            threads = multiprocessing.cpu_count()\n        self.threads = threads\n\n        seq = SeedSequence(seed)\n        self._random_generators = [default_rng(s)\n                                   for s in seq.spawn(threads)]\n\n        self.n = n\n        self.executor = concurrent.futures.ThreadPoolExecutor(threads)\n        self.values = np.empty(n)\n        self.step = np.ceil(n / threads).astype(np.int_)\n\n    def fill(self):\n        def _fill(random_state, out, first, last):\n            random_state.standard_normal(out=out[first:last])\n\n        futures = {}\n        for i in range(self.threads):\n            args = (_fill,\n                    self._random_generators[i],\n                    self.values,\n                    i * self.step,\n                    (i + 1) * self.step)\n            futures[self.executor.submit(*args)] = i\n        concurrent.futures.wait(futures)\n\n    def __del__(self):\n        self.executor.shutdown(False) \n```", "```py\nIn [2]: mrng = MultithreadedRNG(10000000, seed=12345)\n ...: print(mrng.values[-1])\nOut[2]: 0.0\n\nIn [3]: mrng.fill()\n ...: print(mrng.values[-1])\nOut[3]: 2.4545724517479104 \n```", "```py\nIn [4]: print(mrng.threads)\n ...: %timeit mrng.fill()\n\nOut[4]: 4\n ...: 32.8 ms \u00b1 2.71 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each) \n```", "```py\nIn [5]: values = np.empty(10000000)\n ...: rg = default_rng()\n ...: %timeit rg.standard_normal(out=values)\n\nOut[5]: 99.6 ms \u00b1 222 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each) \n```", "```py\nIn [6]: rg = default_rng()\n ...: %timeit rg.standard_normal(10000000)\n\nOut[6]: 125 ms \u00b1 309 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each) \n```", "```py\nIn [7]: # simulate the behavior for `threads=None`, if the machine had only one thread\n ...: mrng = MultithreadedRNG(10000000, seed=12345, threads=1)\n ...: print(mrng.values[-1])\nOut[7]: 1.1800150052158556 \n```"]