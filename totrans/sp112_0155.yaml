- en: scipy.integrate.complex_ode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.complex_ode.html#scipy.integrate.complex_ode](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.complex_ode.html#scipy.integrate.complex_ode)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A wrapper of ode for complex systems.
  prefs: []
  type: TYPE_NORMAL
- en: This functions similarly as [`ode`](scipy.integrate.ode.html#scipy.integrate.ode
    "scipy.integrate.ode"), but re-maps a complex-valued equation system to a real-valued
    one before using the integrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable `f(t, y, *f_args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Rhs of the equation. t is a scalar, `y.shape == (n,)`. `f_args` is set by calling
    `set_f_params(*args)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**jac**callable `jac(t, y, *jac_args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian of the rhs, `jac[i,j] = d f[i] / d y[j]`. `jac_args` is set by calling
    `set_f_params(*args)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: For usage examples, see [`ode`](scipy.integrate.ode.html#scipy.integrate.ode
    "scipy.integrate.ode").
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**float'
  prefs: []
  type: TYPE_NORMAL
- en: Current time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current variable values.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`get_return_code`](scipy.integrate.complex_ode.get_return_code.html#scipy.integrate.complex_ode.get_return_code
    "scipy.integrate.complex_ode.get_return_code")() | Extracts the return code for
    the integration to enable better control if the integration fails. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.integrate.complex_ode.integrate.html#scipy.integrate.complex_ode.integrate
    "scipy.integrate.complex_ode.integrate")(t[, step, relax]) | Find y=y(t), set
    y as an initial condition, and return y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_f_params`](scipy.integrate.complex_ode.set_f_params.html#scipy.integrate.complex_ode.set_f_params
    "scipy.integrate.complex_ode.set_f_params")(*args) | Set extra parameters for
    user-supplied function f. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_initial_value`](scipy.integrate.complex_ode.set_initial_value.html#scipy.integrate.complex_ode.set_initial_value
    "scipy.integrate.complex_ode.set_initial_value")(y[, t]) | Set initial conditions
    y(t) = y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_integrator`](scipy.integrate.complex_ode.set_integrator.html#scipy.integrate.complex_ode.set_integrator
    "scipy.integrate.complex_ode.set_integrator")(name, **integrator_params) | Set
    integrator by name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_jac_params`](scipy.integrate.complex_ode.set_jac_params.html#scipy.integrate.complex_ode.set_jac_params
    "scipy.integrate.complex_ode.set_jac_params")(*args) | Set extra parameters for
    user-supplied function jac. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_solout`](scipy.integrate.complex_ode.set_solout.html#scipy.integrate.complex_ode.set_solout
    "scipy.integrate.complex_ode.set_solout")(solout) | Set callable to be called
    at every successful integration step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`successful`](scipy.integrate.complex_ode.successful.html#scipy.integrate.complex_ode.successful
    "scipy.integrate.complex_ode.successful")() | Check if integration was successful.
    |'
  prefs: []
  type: TYPE_TB
