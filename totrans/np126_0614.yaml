- en: numpy.ma.array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.array.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.array.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An array class with possibly masked values.
  prefs: []
  type: TYPE_NORMAL
- en: Masked values of True exclude the corresponding element from any computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Construction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input data.
  prefs: []
  type: TYPE_NORMAL
- en: '**mask**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Mask. Must be convertible to an array of booleans with the same shape as *data*.
    True indicates a masked (i.e. invalid) data.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the output. If [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")
    is None, the type of the data argument (`data.dtype`) is used. If [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") is not None and different from `data.dtype`, a copy is performed.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to copy the input data (True), or to use a reference instead. Default
    is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**subok**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to return a subclass of [`MaskedArray`](../maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray") if possible (True) or a plain [`MaskedArray`](../maskedarray.baseclass.html#numpy.ma.MaskedArray
    "numpy.ma.MaskedArray"). Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndmin**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum number of dimensions. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value used to fill in the masked values when necessary. If None, a default based
    on the data-type is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**keep_mask**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to combine *mask* with the mask of the input data, if any (True), or
    to use only *mask* for the output (False). Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**hard_mask**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use a hard mask or not. With a hard mask, masked values cannot be
    unmasked. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**shrink**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to force compression of an empty mask. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’, ‘A’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the order of the array. If order is ‘C’, then the array will be in C-contiguous
    order (last-index varies the fastest). If order is ‘F’, then the returned array
    will be in Fortran-contiguous order (first-index varies the fastest). If order
    is ‘A’ (default), then the returned array may be in any order (either C-, Fortran-contiguous,
    or even discontiguous), unless a copy is required, in which case it will be C-contiguous.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The `mask` can be initialized with an array of boolean values with the same
    shape as `data`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the `mask` can be initialized to homogeneous boolean array with
    the same shape as `data` by passing in a scalar boolean value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The recommended practice for initializing `mask` with a scalar boolean value
    is to use `True`/`False` rather than `np.True_`/`np.False_`. The reason is [`nomask`](../maskedarray.baseclass.html#numpy.ma.nomask
    "numpy.ma.nomask") is represented internally as `np.False_`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
