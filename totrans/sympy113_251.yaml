- en: Exceptions and Warnings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/utilities/exceptions.html](https://docs.sympy.org/latest/modules/utilities/exceptions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: General SymPy exceptions and warnings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A warning for deprecated features of SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Deprecation Policy](../../contributing/deprecations.html#deprecation-policy)
    document for details on when and how things should be deprecated in SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: Note that simply constructing this class will not cause a warning to be issued.
    To do that, you must call the :func`sympy_deprecation_warning` function. For this
    reason, it is not recommended to ever construct this class directly.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The `SymPyDeprecationWarning` class is a subclass of `DeprecationWarning` that
    is used for all deprecations in SymPy. A special subclass is used so that we can
    automatically augment the warning message with additional metadata about the version
    the deprecation was introduced in and a link to the documentation. This also allows
    users to explicitly filter deprecation warnings from SymPy using `warnings` filters
    (see [Silencing SymPy Deprecation Warnings](../../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, `SymPyDeprecationWarning` is enabled to be shown by default, unlike
    normal `DeprecationWarning`s, which are only shown by default in interactive sessions.
    This ensures that deprecation warnings in SymPy will actually be seen by users.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation of [`sympy_deprecation_warning()`](#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") for a description of the
    parameters to this function.
  prefs: []
  type: TYPE_NORMAL
- en: To mark a function as deprecated, you can use the [`@deprecated`](decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated") decorator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.exceptions.sympy_deprecation_warning`](#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.exceptions.ignore_warnings`](#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings"), [`sympy.utilities.decorator.deprecated`](decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated"), [`sympy.testing.pytest.warns_deprecated_sympy`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Context manager to suppress warnings during tests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do not use this with SymPyDeprecationWarning in the tests. warns_deprecated_sympy()
    should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: This function is useful for suppressing warnings during tests. The warns function
    should be used to assert that a warning is raised. The ignore_warnings function
    is useful in situation when the warning is not guaranteed to be raised (e.g. on
    importing a module) or if the warning comes from third-party code.
  prefs: []
  type: TYPE_NORMAL
- en: This function is also useful to prevent the same or similar warnings from being
    issue twice due to recursive calls.
  prefs: []
  type: TYPE_NORMAL
- en: When the warning is coming (reliably) from SymPy the warns function should be
    preferred to ignore_warnings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s suppress it with ignore_warnings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: (No warning emitted)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.sympy_deprecation_warning`](#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.decorator.deprecated`](decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated"), [`sympy.testing.pytest.warns_deprecated_sympy`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Warn that a feature is deprecated in SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Deprecation Policy](../../contributing/deprecations.html#deprecation-policy)
    document for details on when and how things should be deprecated in SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: To mark an entire function or class as deprecated, you can use the [`@deprecated`](decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated") decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**message** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The deprecation message. This may span multiple lines and contain code examples.
    Messages should be wrapped to 80 characters. The message is automatically dedented
    and leading and trailing whitespace stripped. Messages may include dynamic content
    based on the user input, but avoid using `str(expression)` if an expression can
    be arbitrary, as it might be huge and make the warning message unreadable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**deprecated_since_version** : str'
  prefs: []
  type: TYPE_NORMAL
- en: 'The version of SymPy the feature has been deprecated since. For new deprecations,
    this should be the version in [sympy/release.py](https://github.com/sympy/sympy/blob/master/sympy/release.py)
    without the `.dev`. If the next SymPy version ends up being different from this,
    the release manager will need to update any `SymPyDeprecationWarning`s using the
    incorrect version. This argument is required and must be passed as a keyword argument.
    (example: `deprecated_since_version="1.10"`).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**active_deprecations_target** : str'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sphinx target corresponding to the section for the deprecation in the [List
    of active deprecations](../../explanation/active-deprecations.html#active-deprecations)
    document (see `doc/src/explanation/active-deprecations.md`). This is used to automatically
    generate a URL to the page in the warning message. This argument is required and
    must be passed as a keyword argument. (example: `active_deprecations_target="deprecated-feature-abc"`)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**stacklevel** : int, default: 3'
  prefs: []
  type: TYPE_NORMAL
- en: The `stacklevel` parameter that is passed to `warnings.warn`. If you create
    a wrapper that calls this function, this should be increased so that the warning
    message shows the user line of code that produced the warning. Note that in some
    cases there will be multiple possible different user code paths that could result
    in the warning. In that case, just choose the smallest common stacklevel.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.ignore_warnings`](#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings"), [`sympy.utilities.decorator.deprecated`](decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated"), [`sympy.testing.pytest.warns_deprecated_sympy`](../testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")'
  prefs: []
  type: TYPE_NORMAL
