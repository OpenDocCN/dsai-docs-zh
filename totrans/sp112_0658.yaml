- en: scipy.signal.periodogram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.periodogram.html#scipy.signal.periodogram](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.periodogram.html#scipy.signal.periodogram)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Estimate power spectral density using a periodogram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of the *x* time series. Defaults to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be equal
    to the length of the axis over which the periodogram is computed. Defaults to
    ‘boxcar’.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfft**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used. If *None* the length of *x* will be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**detrend**str or function or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies how to detrend each segment. If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend
    "scipy.signal.detrend") is a string, it is passed as the *type* argument to the
    [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    function. If it is a function, it takes a segment and returns a detrended segment.
    If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    is *False*, no detrending is done. Defaults to ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_onesided**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, return a one-sided spectrum for real data. If *False* return a two-sided
    spectrum. Defaults to *True*, but for complex data, a two-sided spectrum is always
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**scaling**{ ‘density’, ‘spectrum’ }, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Selects between computing the power spectral density (‘density’) where *Pxx*
    has units of V**2/Hz and computing the power spectrum (‘spectrum’) where *Pxx*
    has units of V**2, if *x* is measured in V and *fs* is measured in Hz. Defaults
    to ‘density’
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the periodogram is computed; the default is over the last axis
    (i.e. `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of sample frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pxx**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Power spectral density or power spectrum of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`welch`](scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")'
  prefs: []
  type: TYPE_NORMAL
- en: Estimate power spectral density using Welch’s method
  prefs: []
  type: TYPE_NORMAL
- en: '[`lombscargle`](scipy.signal.lombscargle.html#scipy.signal.lombscargle "scipy.signal.lombscargle")'
  prefs: []
  type: TYPE_NORMAL
- en: Lomb-Scargle periodogram for unevenly sampled data
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate a test signal, a 2 Vrms sine wave at 1234 Hz, corrupted by 0.001 V**2/Hz
    of white noise sampled at 10 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute and plot the power spectral density.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-periodogram-1_00_00.png](../Images/18c226db5361ec4d376df004adc3b1ee.png)'
  prefs: []
  type: TYPE_IMG
- en: If we average the last half of the spectral density, to exclude the peak, we
    can recover the noise power on the signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now compute and plot the power spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-periodogram-1_01_00.png](../Images/bb2e972659eb235fa4fa343612942776.png)'
  prefs: []
  type: TYPE_IMG
- en: The peak height in the power spectrum is an estimate of the RMS amplitude.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
