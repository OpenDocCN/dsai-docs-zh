["```py\n>>> from sympy import *\n>>> x, y, z = symbols('x,y,z')\n>>> ((x + y)*(x - y)).expand(basic=True)\nx**2 - y**2\n>>> ((x + y + z)**2).expand(basic=True)\nx**2 + 2*x*y + 2*x*z + y**2 + 2*y*z + z**2 \n```", "```py\n>>> (x + I*y).expand(complex=True)\nre(x) + I*re(y) + I*im(x) - im(y) \n```", "```py\n>>> sin(x + I*y).expand(complex=True)\nsin(re(x) - im(y))*cosh(re(y) + im(x)) + I*cos(re(x) - im(y))*sinh(re(y) + im(x)) \n```", "```py\n>>> (x + I*y).as_real_imag()\n(re(x) - im(y), re(y) + im(x)) \n```", "```py\n>>> collect((x + I*y).expand(complex=True), I, evaluate=False)\n{1: re(x) - im(y), I: re(y) + im(x)} \n```", "```py\n>>> GoldenRatio.expand(func=True)\n1/2 + sqrt(5)/2 \n```", "```py\n>>> from sympy import cse, sqrt, sin, pprint\n>>> from sympy.abc import x\n\n>>> pprint(cse(sqrt(sin(x))), use_unicode=True)\n⎛    ⎡  ________⎤⎞\n⎝[], ⎣╲╱ sin(x) ⎦⎠\n\n>>> pprint(cse(sqrt(sin(x)+5)*sqrt(sin(x)+4)), use_unicode=True)\n⎛                ⎡  ________   ________⎤⎞\n⎝[(x₀, sin(x))], ⎣╲╱ x₀ + 4 ⋅╲╱ x₀ + 5 ⎦⎠\n\n>>> pprint(cse(sqrt(sin(x+1) + 5 + cos(y))*sqrt(sin(x+1) + 4 + cos(y))),\n...     use_unicode=True)\n⎛                             ⎡  ________   ________⎤⎞\n⎝[(x₀, sin(x + 1) + cos(y))], ⎣╲╱ x₀ + 4 ⋅╲╱ x₀ + 5 ⎦⎠\n\n>>> pprint(cse((x-y)*(z-y) + sqrt((x-y)*(z-y))), use_unicode=True)\n⎛                          ⎡  ____     ⎤⎞\n⎝[(x₀, (x - y)⋅(-y + z))], ⎣╲╱ x₀  + x₀⎦⎠ \n```", "```py\n>>> pprint(cse((x-y)*(z-y) + sqrt((x-y)*(z-y)), optimizations='basic'),\n...     use_unicode=True)\n⎛                          ⎡  ____     ⎤⎞\n⎝[(x₀, -(x - y)⋅(y - z))], ⎣╲╱ x₀  + x₀⎦⎠ \n```", "```py\nsympy.simplify.cse_main.cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canonical', ignore=(), list=True)\n```", "```py\n>>> from sympy import cse, SparseMatrix\n>>> from sympy.abc import x, y, z, w\n>>> cse(((w + x + y + z)*(w + y + z))/(w + x)**3)\n([(x0, y + z), (x1, w + x)], [(w + x0)*(x0 + x1)/x1**3]) \n```", "```py\n>>> m = SparseMatrix([x + y, x + y + z])\n>>> cse([(x+y)**2, x + y + z, y + z, x + z + y, m])\n([(x0, x + y), (x1, x0 + z)], [x0**2, x1, y + z, x1, Matrix([\n[x0],\n[x1]])]) \n```", "```py\n>>> isinstance(_[1][-1], SparseMatrix)\nTrue \n```", "```py\n>>> cse([y**2*(x + 1), 3*y**2*(x + 1)], ignore=(y,))\n([(x0, x + 1)], [x0*y**2, 3*x0*y**2]) \n```", "```py\n>>> cse(x)\n([], [x])\n>>> cse(x, list=False)\n([], x) \n```"]