- en: Enumerative
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举
- en: Original text：[https://docs.sympy.org/latest/modules/utilities/enumerative.html](https://docs.sympy.org/latest/modules/utilities/enumerative.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.sympy.org/latest/modules/utilities/enumerative.html](https://docs.sympy.org/latest/modules/utilities/enumerative.html)
- en: This module includes functions and classes for enumerating and counting multiset
    partitions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块包括用于枚举和计数多重集分区的函数和类。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Enumerates partitions of a multiset.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举多重集的分区。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**multiplicities**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**多重性**'
- en: list of integer multiplicities of the components of the multiset.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 组件的整数多重性列表。
- en: 'Yields:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: state
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: state
- en: Internal data structure which encodes a particular partition. This output is
    then usually processed by a visitor function which combines the information from
    this data structure with the components themselves to produce an actual partition.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 内部数据结构，用于编码特定的分区。然后，通常通过访问函数处理此输出数据结构，将其与组件本身结合起来生成实际的分区。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unless they wish to create their own visitor function, users will have little
    need to look inside this data structure. But, for reference, it is a 3-element
    list with components:'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除非他们希望创建自己的访问函数，否则用户几乎没有必要查看此数据结构的内部。但是，供参考，它是一个具有三个元素的列表，其组件为：
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: f
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: f
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is a frame array, which is used to divide pstack into parts.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是一个帧数组，用于将pstack分成部分。
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: lpart
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: lpart
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: points to the base of the topmost part.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指向最顶部部分的基础。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pstack
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: pstack
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: is an array of PartComponent objects.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是一个PartComponent对象数组。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `state` output offers a peek into the internal data structures of the enumeration
    function. The client should treat this as read-only; any modification of the data
    structure will cause unpredictable (and almost certainly incorrect) results. Also,
    the components of `state` are modified in place at each iteration. Hence, the
    visitor must be called at each loop iteration. Accumulating the `state` instances
    and processing them later will not work.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 输出的`state`提供了对枚举函数内部数据结构的一瞥。客户端应将其视为只读；对数据结构的任何修改将导致不可预测（几乎肯定不正确）的结果。此外，`state`的组件在每次迭代中都是就地修改的。因此，必须在每次循环迭代时调用访问者。累积`state`实例并稍后处理它们将不起作用。
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
- en: Takes a multiset as input and directly yields multiset partitions. It dispatches
    to a number of functions, including this one, for implementation. Most users will
    find it more convenient to use than multiset_partitions_taocp.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接受多重集作为输入并直接生成多重集分区。它调度到许多函数，包括此函数，进行实现。大多数用户将发现它比`multiset_partitions_taocp`更方便使用。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use with multiset_partitions_taocp to enumerate the ways a number can be expressed
    as a product of factors. For this usage, the exponents of the prime factors of
    a number are arguments to the partition enumerator, while the corresponding prime
    factors are input here.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与`multiset_partitions_taocp`一起使用，以枚举将一个数表示为因子乘积的方式。对于此用法，一个数的质因数的指数是分区枚举器的参数，而相应的质因数是此处的输入。
- en: Examples
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: To enumerate the factorings of a number we can think of the elements of the
    partition as being the prime factors and the multiplicities as being their exponents.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要枚举一个数的因子化，我们可以将分区的元素视为其质因数，而多重性视为其指数。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Return a list of lists to represent the partition.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个列表的列表来表示分区。
- en: Examples
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The approach of the function `multiset_partitions_taocp` is extended and generalized
    by the class `MultisetPartitionTraverser`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`multiset_partitions_taocp`的方法被类`MultisetPartitionTraverser`扩展和泛化的方法。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Has methods to `enumerate` and `count` the partitions of a multiset.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 具有枚举和计数多重集分区的方法。
- en: This implements a refactored and extended version of Knuth’s algorithm 7.1.2.5M
    [[AOCP]](#aocp).”
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这实现了Knuth算法7.1.2.5M的重构和扩展版本[[AOCP]](#aocp)。
- en: The enumeration methods of this class are generators and return data structures
    which can be interpreted by the same visitor functions used for the output of
    `multiset_partitions_taocp`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此类的枚举方法是生成器，并返回可以由用于`multiset_partitions_taocp`输出的相同访问函数解释的数据结构。
- en: Examples
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp"), [`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp")，[`sympy.utilities.iterables.multiset_partitions`](iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
- en: References
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[AOCP] ([1](#id1),[2](#id2),[3](#id5),[4](#id6))'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[AOCP] ([1](#id1),[2](#id2),[3](#id5),[4](#id6))'
- en: Algorithm 7.1.2.5M in Volume 4A, Combinatoral Algorithms, Part 1, of The Art
    of Computer Programming, by Donald Knuth.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第4A卷，组合算法的第一部分中的算法7.1.2.5M，《计算机编程艺术》作者Donald Knuth。
- en: '[[Factorisatio](#id3)]'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Factorisatio](#id3)]'
- en: On a Problem of Oppenheim concerning “Factorisatio Numerorum” E. R. Canfield,
    Paul Erdos, Carl Pomerance, JOURNAL OF NUMBER THEORY, Vol. 17, No. 1\. August
    1983\. See section 7 for a description of an algorithm similar to Knuth’s.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Oppenheim问题的一个问题：“Factorisatio Numerorum”，E. R. Canfield，Paul Erdos，Carl Pomerance，NUMBER
    THEORY杂志，第17卷，第1号。1983年8月。请参见第7节，了解与Knuth相似的算法的描述。
- en: '[[Yorgey](#id4)]'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[[Yorgey](#id4)]'
- en: Generating Multiset Partitions, Brent Yorgey, The Monad.Reader, Issue 8, September
    2007.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生成多重集合分区，Brent Yorgey，Monad.Reader，第8期，2007年9月。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Returns the number of partitions of a multiset whose components have the multiplicities
    given in `multiplicities`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有给定`multiplicities`中的组件的多重集合的分区数。
- en: For larger counts, this method is much faster than calling one of the enumerators
    and counting the result. Uses dynamic programming to cut down on the number of
    nodes actually explored. The dictionary used in order to accelerate the counting
    process is stored in the `MultisetPartitionTraverser` object and persists across
    calls. If the user does not expect to call `count_partitions` for any additional
    multisets, the object should be cleared to save memory. On the other hand, the
    cache built up from one count run can significantly speed up subsequent calls
    to `count_partitions`, so it may be advantageous not to clear the object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的计数，这种方法比调用一个枚举器并计数结果要快得多。使用动态规划来减少实际探索的节点数。用于加速计数过程的字典存储在`MultisetPartitionTraverser`对象中，并且跨调用保持不变。如果用户不希望为任何额外的多重集调用`count_partitions`，则应清除对象以节省内存。另一方面，从一个计数运行中建立起来的缓存可以显著加快后续调用`count_partitions`的速度，因此不清除对象可能是有利的。
- en: Examples
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notes
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If one looks at the workings of Knuth’s algorithm M [[AOCP]](#aocp), it can
    be viewed as a traversal of a binary tree of parts. A part has (up to) two children,
    the left child resulting from the spread operation, and the right child from the
    decrement operation. The ordinary enumeration of multiset partitions is an in-order
    traversal of this tree, and with the partitions corresponding to paths from the
    root to the leaves. The mapping from paths to partitions is a little complicated,
    since the partition would contain only those parts which are leaves or the parents
    of a spread link, not those which are parents of a decrement link.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察Knuth的算法M [[AOCP]](#aocp)的运行方式，可以将其视为部分二叉树的遍历。一个部分最多有两个子节点，左子节点是由扩展操作产生的，右子节点是由减少操作产生的。普通的多重集合分区枚举是这棵树的中序遍历，其中分区对应于从根到叶子的路径。从路径到分区的映射有些复杂，因为分区只包含那些是叶子或扩展链接的父节点，而不包含那些是减少链接的父节点。
- en: For counting purposes, it is sufficient to count leaves, and this can be done
    with a recursive in-order traversal. The number of leaves of a subtree rooted
    at a particular part is a function only of that part itself, so memoizing has
    the potential to speed up the counting dramatically.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计数目的，只需计算叶子即可，这可以通过递归的中序遍历来完成。在特定部分为根的子树的叶子数仅是该部分本身的函数，因此记忆化具有显著加速计数的潜力。
- en: 'This method follows a computational approach which is similar to the hypothetical
    memoized recursive function, but with two differences:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法采用了类似于假设化的记忆递归函数的计算方法，但有两个不同之处：
- en: This method is iterative, borrowing its structure from the other enumerations
    and maintaining an explicit stack of parts which are in the process of being counted.
    (There may be multisets which can be counted reasonably quickly by this implementation,
    but which would overflow the default Python recursion limit with a recursive implementation.)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该方法是迭代的，借鉴其他枚举的结构，并维护正在计数的部分的显式堆栈。（此实现可能会快速地计算一些多重集，但在使用递归实现时可能会超出默认的Python递归限制。）
- en: Instead of using the part data structure directly, a more compact key is constructed.
    This saves space, but more importantly coalesces some parts which would remain
    separate with physical keys.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 而不是直接使用部件数据结构，会构造更紧凑的键。这样做可以节省空间，但更重要的是，可以将某些本来会保持分离的物理键合并在一起。
- en: Unlike the enumeration functions, there is currently no _range version of count_partitions.
    If someone wants to stretch their brain, it should be possible to construct one
    by memoizing with a histogram of counts rather than a single count, and combining
    the histograms.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与枚举函数不同，目前没有 _range 版本的 count_partitions。如果有人想要挑战自己，可以通过使用计数直方图而不是单个计数进行记忆化，并结合这些直方图来构造一个。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Enumerate the partitions of a multiset.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举多重集的分区。
- en: Examples
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`multiset_partitions_taocp`](#sympy.utilities.enumerative.multiset_partitions_taocp
    "sympy.utilities.enumerative.multiset_partitions_taocp")'
- en: which provides the same result as this method, but is about twice as fast. Hence,
    enum_all is primarily useful for testing. Also see the function for a discussion
    of states and visitors.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了与此方法相同的结果，但大约快了一倍。因此，enum_all 主要用于测试。还请参见该函数有关状态和访问者的讨论。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Enumerate the partitions of a multiset with lb < num(parts)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举多重集的分区，其中 lb < num(parts)
- en: Equivalent to enum_range(multiplicities, lb, sum(multiplicities))
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 enum_range(multiplicities, lb, sum(multiplicities))
- en: 'Parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**multiplicities**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**分量的重复次数**'
- en: list of multiplicities of the components of the multiset.
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 多重集分量的重复列表。
- en: '**lb**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**lb**'
- en: Number of parts in the partition must be greater than this lower bound.
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 分区中的部分数必须大于此下限。
- en: Examples
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_small`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_small`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Enumerate the partitions of a multiset with `lb < num(parts) <= ub`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举多重集的分区，其中`lb < num(parts) <= ub`。
- en: In particular, if partitions with exactly `k` parts are desired, call with `(multiplicities,
    k - 1, k)`. This method generalizes enum_all, enum_small, and enum_large.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，如果要求确切有 `k` 个部分的分区，则调用 `(multiplicities, k - 1, k)`。该方法泛化了 enum_all、enum_small
    和 enum_large。
- en: Examples
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Enumerate multiset partitions with no more than `ub` parts.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举多重集分区，部件数不超过 `ub`。
- en: Equivalent to enum_range(multiplicities, 0, ub)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于 enum_range(multiplicities, 0, ub)
- en: 'Parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**multiplicities**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**分量的重复次数**'
- en: list of multiplicities of the components of the multiset.
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 多重集分量的重复列表。
- en: '**ub**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**ub**'
- en: Maximum number of parts
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最大部分数
- en: Examples
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The implementation is based, in part, on the answer given to exercise 69, in
    Knuth [[AOCP]](#aocp).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 实现部分基于Knuth在《TAOCP》中练习69的答案。
- en: See also
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_large`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`enum_all`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"), [`enum_large`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"), [`enum_range`](#sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range
    "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range")'
