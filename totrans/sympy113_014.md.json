["```py\n>>> from sympy import *\n>>> x, y, z = symbols('x y z') \n```", "```py\n>>> expr = x**2 + x*y\n>>> srepr(expr)\n\"Add(Pow(Symbol('x'), Integer(2)), Mul(Symbol('x'), Symbol('y')))\" \n```", "```py\n>>> x = symbols('x') \n```", "```py\n>>> x = Symbol('x') \n```", "```py\n>>> srepr(x**2)\n\"Pow(Symbol('x'), Integer(2))\" \n```", "```py\n>>> Pow(x, 2)\nx**2 \n```", "```py\n>>> type(2)\n<... 'int'>\n>>> type(sympify(2))\n<class 'sympy.core.numbers.Integer'> \n```", "```py\n>>> srepr(x*y)\n\"Mul(Symbol('x'), Symbol('y'))\" \n```", "```py\n>>> Mul(x, y)\nx*y \n```", "```py\n>>> Add(Pow(x, 2), Mul(x, y))\nx**2 + x*y \n```", "```py\n>>> expr = sin(x*y)/2 - x**2 + 1/y\n>>> srepr(expr)\n\"Add(Mul(Integer(-1), Pow(Symbol('x'), Integer(2))), Mul(Rational(1, 2),\nsin(Mul(Symbol('x'), Symbol('y')))), Pow(Symbol('y'), Integer(-1)))\" \n```", "```py\n>>> srepr(x - y)\n\"Add(Symbol('x'), Mul(Integer(-1), Symbol('y')))\" \n```", "```py\n>>> expr = x/y\n>>> srepr(expr)\n\"Mul(Symbol('x'), Pow(Symbol('y'), Integer(-1)))\" \n```", "```py\n>>> 1 + x\nx + 1 \n```", "```py\n>>> expr = Add(x, x)\n>>> expr.func\n<class 'sympy.core.mul.Mul'> \n```", "```py\n>>> expr\n2*x \n```", "```py\n>>> Integer(2).func\n<class 'sympy.core.numbers.Integer'>\n>>> Integer(0).func\n<class 'sympy.core.numbers.Zero'>\n>>> Integer(-1).func\n<class 'sympy.core.numbers.NegativeOne'> \n```", "```py\n>>> expr = 3*y**2*x\n>>> expr.func\n<class 'sympy.core.mul.Mul'>\n>>> expr.args\n(3, x, y**2) \n```", "```py\n>>> expr.func(*expr.args)\n3*x*y**2\n>>> expr == expr.func(*expr.args)\nTrue \n```", "```py\n>>> expr = y**2*3*x\n>>> expr.args\n(3, x, y**2) \n```", "```py\n>>> expr.args[2]\ny**2 \n```", "```py\n>>> expr.args[2].args\n(y, 2) \n```", "```py\n>>> y.args\n()\n>>> Integer(2).args\n() \n```", "```py\n>>> def pre(expr):\n...     print(expr)\n...     for arg in expr.args:\n...         pre(arg) \n```", "```py\n>>> expr = x*y + 1\n>>> pre(expr)\nx*y + 1\n1\nx*y\nx\ny \n```", "```py\n>>> for arg in preorder_traversal(expr):\n...     print(arg)\nx*y + 1\n1\nx*y\nx\ny \n```", "```py\n>>> from sympy import Add\n>>> from sympy.abc import x, y, z\n>>> x + x\n2*x\n>>> Add(x, x)\n2*x\n>>> Add(x, x, evaluate=False)\nx + x \n```", "```py\n>>> from sympy import sympify\n>>> sympify(\"x + x\", evaluate=False)\nx + x \n```", "```py\n>>> expr = Add(x, x, evaluate=False)\n>>> expr\nx + x\n>>> expr + x\n3*x \n```", "```py\n>>> from sympy import UnevaluatedExpr\n>>> expr = x + UnevaluatedExpr(x)\n>>> expr\nx + x\n>>> x + expr\n2*x + x \n```", "```py\n>>> (x + expr).doit()\n3*x \n```", "```py\n>>> from sympy import *\n>>> from sympy.abc import x, y, z\n>>> uexpr = UnevaluatedExpr(S.One*5/7)*UnevaluatedExpr(S.One*3/4)\n>>> uexpr\n(5/7)*(3/4)\n>>> x*UnevaluatedExpr(1/x)\nx*1/x \n```", "```py\n>>> expr1 = UnevaluatedExpr(x + x)\n>>> expr1\n2*x\n>>> expr2 = sympify('x + x', evaluate=False)\n>>> expr2\nx + x \n```", "```py\n>>> UnevaluatedExpr(sympify(\"x + x\", evaluate=False)) + y\ny + (x + x) \n```", "```py\n>>> from sympy import latex\n>>> uexpr = UnevaluatedExpr(S.One*5/7)*UnevaluatedExpr(S.One*3/4)\n>>> print(latex(uexpr))\n\\frac{5}{7} \\cdot \\frac{3}{4} \n```", "```py\n>>> print(latex(uexpr.doit()))\n\\frac{15}{28} \n```"]