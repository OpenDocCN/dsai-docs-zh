["```py\nscipy.special.voigt_profile(x, sigma, gamma, out=None) = <ufunc 'voigt_profile'>\n```", "```py\n>>> from scipy.special import voigt_profile\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> voigt_profile(2, 1., 1.)\n0.09071519942627544 \n```", "```py\n>>> values = np.array([-2., 0., 5])\n>>> voigt_profile(values, 1., 1.)\narray([0.0907152 , 0.20870928, 0.01388492]) \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 8))\n>>> x = np.linspace(-10, 10, 500)\n>>> parameters_list = [(1.5, 0., \"solid\"), (1.3, 0.5, \"dashed\"),\n...                    (0., 1.8, \"dotted\"), (1., 1., \"dashdot\")]\n>>> for params in parameters_list:\n...     sigma, gamma, linestyle = params\n...     voigt = voigt_profile(x, sigma, gamma)\n...     ax.plot(x, voigt, label=rf\"$\\sigma={sigma},\\, \\gamma={gamma}$\",\n...             ls=linestyle)\n>>> ax.legend()\n>>> plt.show() \n```", "```py\n>>> from scipy.signal import convolve\n>>> x, dx = np.linspace(-10, 10, 500, retstep=True)\n>>> def gaussian(x, sigma):\n...     return np.exp(-0.5 * x**2/sigma**2)/(sigma * np.sqrt(2*np.pi))\n>>> def cauchy(x, gamma):\n...     return gamma/(np.pi * (np.square(x)+gamma**2))\n>>> sigma = 2\n>>> gamma = 1\n>>> gauss_profile = gaussian(x, sigma)\n>>> cauchy_profile = cauchy(x, gamma)\n>>> convolved = dx * convolve(cauchy_profile, gauss_profile, mode=\"same\")\n>>> voigt = voigt_profile(x, sigma, gamma)\n>>> fig, ax = plt.subplots(figsize=(8, 8))\n>>> ax.plot(x, gauss_profile, label=\"Gauss: $G$\", c='b')\n>>> ax.plot(x, cauchy_profile, label=\"Cauchy: $C$\", c='y', ls=\"dashed\")\n>>> xx = 0.5*(x[1:] + x[:-1])  # midpoints\n>>> ax.plot(xx, convolved[1:], label=\"Convolution: $G * C$\", ls='dashdot',\n...         c='k')\n>>> ax.plot(x, voigt, label=\"Voigt\", ls='dotted', c='r')\n>>> ax.legend()\n>>> plt.show() \n```"]