["```py\n>>> np.broadcast_shapes((1, 2), (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes(2, (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7) \n```", "```py\nnp.float(123) \n```", "```py\narr1 = np.zeros((5, 0))\narr1[[20]]\narr2 = np.zeros((5, 5))\narr2[[20], :0] \n```", "```py\nimport numpy as np\narr = np.array([[3, 6, 6], [4, 5, 1]])\n# mode: inexact match\nnp.ravel_multi_index(arr, (7, 6), mode=\"clap\")  # should be \"clip\"\n# searchside: inexact match\nnp.searchsorted(arr[0], 4, side='random')  # should be \"right\" \n```", "```py\nnp.array([np.array(array_like)]) \n```", "```py\narr = np.empty(3, dtype=object)\narr[:] = [array_like1, array_like2, array_like3] \n```", "```py\nres = np.array(arr, dtype)\n\nres.dtype is not dtype\nres.dtype is dtype.base\nres.shape == arr.shape + dtype.shape \n```", "```py\nres = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\nres[...] = arr \n```", "```py\nres = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"] \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.int64) \n```", "```py\narr[0] = np.float64(np.nan) \n```", "```py\nnp.array(np.float64(np.nan), dtype=np.int64) \n```", "```py\nnp.array([float(\"NaN\")], dtype=np.int64) \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.uint64) \n```", "```py\nnp.array([\"string\", np.float64(3.)], dtype=\"S\") \n```", "```py\nnp.array([np.float64(3.)], dtype=\"S\")  # gives \"S32\"\nnp.array([3.0], dtype=\"S\")  # gives \"S3\" \n```", "```py\nnp.array([array_like1]) \n```", "```py\nnp.array([np.array(array_like1)]) \n```", "```py\n>>> data = StringIO(\"21 58.0\\n35 72.0\")\n>>> np.genfromtxt(data, dtype=None, unpack=True)\narray([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')]) \n```", "```py\n>>> np.genfromtxt(data, dtype=None, unpack=True)\n[array([21, 35]), array([58., 72.])] \n```", "```py\nnp.empty((2, 2))[np.array([[True, False, False, False]])] \n```", "```py\nnp.empty((2, 2))[np.array([[False, False, False, False]])] \n```", "```py\nnp.array([b\"1\", b\"12\"], dtype=\"V\") \n```", "```py\n#define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\nPyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\n#define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields)) \n```", "```py\nfrom numpy.typing import ArrayLike\nx: ArrayLike = [1, 2, 3, 4] \n```", "```py\nNPY_BLAS_ORDER='^blas'  NPY_LAPACK_ORDER='^lapack'  python  setup.py  build \n```", "```py\n>>> np.array([np.eye(2), np.eye(3)], dtype=object)\narray([array([[1., 0.],\n [0., 1.]]),\n array([[1., 0., 0.],\n [0., 1., 0.],\n [0., 0., 1.]])], dtype=object) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -3, -2, -2, -1, -1,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8).astype(int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```", "```py\n>>> np.broadcast_shapes((1, 2), (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes(2, (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7) \n```", "```py\n>>> np.broadcast_shapes((1, 2), (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes(2, (3, 1))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7) \n```", "```py\nnp.float(123) \n```", "```py\narr1 = np.zeros((5, 0))\narr1[[20]]\narr2 = np.zeros((5, 5))\narr2[[20], :0] \n```", "```py\nimport numpy as np\narr = np.array([[3, 6, 6], [4, 5, 1]])\n# mode: inexact match\nnp.ravel_multi_index(arr, (7, 6), mode=\"clap\")  # should be \"clip\"\n# searchside: inexact match\nnp.searchsorted(arr[0], 4, side='random')  # should be \"right\" \n```", "```py\nnp.array([np.array(array_like)]) \n```", "```py\narr = np.empty(3, dtype=object)\narr[:] = [array_like1, array_like2, array_like3] \n```", "```py\nnp.float(123) \n```", "```py\narr1 = np.zeros((5, 0))\narr1[[20]]\narr2 = np.zeros((5, 5))\narr2[[20], :0] \n```", "```py\nimport numpy as np\narr = np.array([[3, 6, 6], [4, 5, 1]])\n# mode: inexact match\nnp.ravel_multi_index(arr, (7, 6), mode=\"clap\")  # should be \"clip\"\n# searchside: inexact match\nnp.searchsorted(arr[0], 4, side='random')  # should be \"right\" \n```", "```py\nnp.array([np.array(array_like)]) \n```", "```py\narr = np.empty(3, dtype=object)\narr[:] = [array_like1, array_like2, array_like3] \n```", "```py\nres = np.array(arr, dtype)\n\nres.dtype is not dtype\nres.dtype is dtype.base\nres.shape == arr.shape + dtype.shape \n```", "```py\nres = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\nres[...] = arr \n```", "```py\nres = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"] \n```", "```py\nres = np.array(arr, dtype)\n\nres.dtype is not dtype\nres.dtype is dtype.base\nres.shape == arr.shape + dtype.shape \n```", "```py\nres = np.empty(arr.shape + dtype.shape, dtype=dtype.base)\nres[...] = arr \n```", "```py\nres = np.array(arr, dtype=np.dtype([\"f\", dtype]))[\"f\"] \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.int64) \n```", "```py\narr[0] = np.float64(np.nan) \n```", "```py\nnp.array(np.float64(np.nan), dtype=np.int64) \n```", "```py\nnp.array([float(\"NaN\")], dtype=np.int64) \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.uint64) \n```", "```py\nnp.array([\"string\", np.float64(3.)], dtype=\"S\") \n```", "```py\nnp.array([np.float64(3.)], dtype=\"S\")  # gives \"S32\"\nnp.array([3.0], dtype=\"S\")  # gives \"S3\" \n```", "```py\nnp.array([array_like1]) \n```", "```py\nnp.array([np.array(array_like1)]) \n```", "```py\n>>> data = StringIO(\"21 58.0\\n35 72.0\")\n>>> np.genfromtxt(data, dtype=None, unpack=True)\narray([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')]) \n```", "```py\n>>> np.genfromtxt(data, dtype=None, unpack=True)\n[array([21, 35]), array([58., 72.])] \n```", "```py\nnp.empty((2, 2))[np.array([[True, False, False, False]])] \n```", "```py\nnp.empty((2, 2))[np.array([[False, False, False, False]])] \n```", "```py\nnp.array([b\"1\", b\"12\"], dtype=\"V\") \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.int64) \n```", "```py\narr[0] = np.float64(np.nan) \n```", "```py\nnp.array(np.float64(np.nan), dtype=np.int64) \n```", "```py\nnp.array([float(\"NaN\")], dtype=np.int64) \n```", "```py\nnp.array([np.float64(np.nan)], dtype=np.uint64) \n```", "```py\nnp.array([\"string\", np.float64(3.)], dtype=\"S\") \n```", "```py\nnp.array([np.float64(3.)], dtype=\"S\")  # gives \"S32\"\nnp.array([3.0], dtype=\"S\")  # gives \"S3\" \n```", "```py\nnp.array([array_like1]) \n```", "```py\nnp.array([np.array(array_like1)]) \n```", "```py\n>>> data = StringIO(\"21 58.0\\n35 72.0\")\n>>> np.genfromtxt(data, dtype=None, unpack=True)\narray([(21, 58.), (35, 72.)], dtype=[('f0', '<i8'), ('f1', '<f8')]) \n```", "```py\n>>> np.genfromtxt(data, dtype=None, unpack=True)\n[array([21, 35]), array([58., 72.])] \n```", "```py\nnp.empty((2, 2))[np.array([[True, False, False, False]])] \n```", "```py\nnp.empty((2, 2))[np.array([[False, False, False, False]])] \n```", "```py\nnp.array([b\"1\", b\"12\"], dtype=\"V\") \n```", "```py\n#define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\nPyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\n#define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields)) \n```", "```py\n#define PyArray_DescrCheck(op) PyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\nPyObject_TypeCheck(op, &PyArrayDescr_Type) \n```", "```py\n#define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields)) \n```", "```py\nfrom numpy.typing import ArrayLike\nx: ArrayLike = [1, 2, 3, 4] \n```", "```py\nNPY_BLAS_ORDER='^blas'  NPY_LAPACK_ORDER='^lapack'  python  setup.py  build \n```", "```py\nfrom numpy.typing import ArrayLike\nx: ArrayLike = [1, 2, 3, 4] \n```", "```py\nNPY_BLAS_ORDER='^blas'  NPY_LAPACK_ORDER='^lapack'  python  setup.py  build \n```", "```py\n>>> np.array([np.eye(2), np.eye(3)], dtype=object)\narray([array([[1., 0.],\n [0., 1.]]),\n array([[1., 0., 0.],\n [0., 1., 0.],\n [0., 0., 1.]])], dtype=object) \n```", "```py\n>>> np.array([np.eye(2), np.eye(3)], dtype=object)\narray([array([[1., 0.],\n [0., 1.]]),\n array([[1., 0., 0.],\n [0., 1., 0.],\n [0., 0., 1.]])], dtype=object) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -3, -2, -2, -1, -1,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8).astype(int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8, dtype=int)\narray([-3, -3, -2, -2, -1, -1,  0,  1]) \n```", "```py\n>>> np.linspace(-3, 1, 8).astype(int)\narray([-3, -2, -1, -1,  0,  0,  0,  1]) \n```"]