- en: scipy.fftpack.next_fast_len
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.next_fast_len.html#scipy.fftpack.next_fast_len](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.next_fast_len.html#scipy.fftpack.next_fast_len)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the next fast size of input data to [`fft`](scipy.fftpack.fft.html#scipy.fftpack.fft
    "scipy.fftpack.fft"), for zero-padding, etc.
  prefs: []
  type: TYPE_NORMAL
- en: SciPy’s FFTPACK has efficient functions for radix {2, 3, 4, 5}, so this returns
    the next composite of the prime factors 2, 3, and 5 which is greater than or equal
    to *target*. (These are also known as 5-smooth numbers, regular numbers, or Hamming
    numbers.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target**int'
  prefs: []
  type: TYPE_NORMAL
- en: Length to start searching from. Must be a positive integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**int'
  prefs: []
  type: TYPE_NORMAL
- en: The first 5-smooth number greater than or equal to *target*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.18.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'On a particular machine, an FFT of prime length takes 133 ms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Zero-padding to the next 5-smooth length reduces computation time to 211 us,
    a speedup of 630 times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Rounding up to the next power of 2 is not optimal, taking 367 us to compute,
    1.7 times as long as the 5-smooth size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
