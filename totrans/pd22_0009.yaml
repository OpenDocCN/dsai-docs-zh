- en: How to create new columns derived from existing columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/05_add_columns.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/05_add_columns.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![../../_images/05_newcolumn_1.svg](../Images/9dd9bf1717a4207b32a70fec825a2af3.png)'
  prefs: []
  type: TYPE_IMG
- en: I want to express the \(NO_2\) concentration of the station in London in mg/m\(^3\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*If we assume temperature of 25 degrees Celsius and pressure of 1013 hPa, the
    conversion factor is 1.882*)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To create a new column, use the `[]` brackets with the new column name at the
    left side of the assignment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The calculation of the values is done **element-wise**. This means all values
    in the given column are multiplied by the value 1.882 at once. You do not need
    to use a loop to iterate each of the rows!
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/05_newcolumn_2.svg](../Images/30754e79f7a005c475907c212338790c.png)'
  prefs: []
  type: TYPE_IMG
- en: I want to check the ratio of the values in Paris versus Antwerp and save the
    result in a new column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The calculation is again element-wise, so the `/` is applied *for the values
    in each row*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also other mathematical operators (`+`, `-`, `*`, `/`,…) or logical operators
    (`<`, `>`, `==`,…) work element-wise. The latter was already used in the [subset
    data tutorial](03_subset_data.html#min-tut-03-subset) to filter rows of a table
    using a conditional expression.
  prefs: []
  type: TYPE_NORMAL
- en: If you need more advanced logic, you can use arbitrary Python code via [`apply()`](../../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply").
  prefs: []
  type: TYPE_NORMAL
- en: I want to rename the data columns to the corresponding station identifiers used
    by [OpenAQ](https://openaq.org/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`rename()`](../../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") function can be used for both row labels and column
    labels. Provide a dictionary with the keys the current names and the values the
    new names to update the corresponding names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The mapping should not be restricted to fixed names only, but can be a mapping
    function as well. For example, converting the column names to lowercase letters
    can be done using a function as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: Details about column or row label renaming is provided in the user guide section
    on [renaming labels](../../user_guide/basics.html#basics-rename).
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a new column by assigning the output to the DataFrame with a new column
    name in between the `[]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations are element-wise, no need to loop over rows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `rename` with a dictionary or function to rename row labels or column names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: The user guide contains a separate section on [column addition and deletion](../../user_guide/dsintro.html#basics-dataframe-sel-add-del).
  prefs: []
  type: TYPE_NORMAL
