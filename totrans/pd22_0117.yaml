- en: pandas.merge_asof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.merge_asof.html](https://pandas.pydata.org/docs/reference/api/pandas.merge_asof.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Perform a merge by key distance.
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to a left-join except that we match on nearest key rather than
    equal keys. Both DataFrames must be sorted by the key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each row in the left DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: A “backward” search selects the last row in the right DataFrame whose ‘on’ key
    is less than or equal to the left’s key.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A “forward” search selects the first row in the right DataFrame whose ‘on’ key
    is greater than or equal to the left’s key.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A “nearest” search selects the row in the right DataFrame whose ‘on’ key is
    closest in absolute distance to the left’s key.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally match on equivalent keys with ‘by’ before searching with ‘on’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**left**DataFrame or named Series'
  prefs: []
  type: TYPE_NORMAL
- en: '**right**DataFrame or named Series'
  prefs: []
  type: TYPE_NORMAL
- en: '**on**label'
  prefs: []
  type: TYPE_NORMAL
- en: Field name to join on. Must be found in both DataFrames. The data MUST be ordered.
    Furthermore this must be a numeric column, such as datetimelike, integer, or float.
    On or left_on/right_on must be given.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_on**label'
  prefs: []
  type: TYPE_NORMAL
- en: Field name to join on in left DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_on**label'
  prefs: []
  type: TYPE_NORMAL
- en: Field name to join on in right DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_index**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Use the index of the left DataFrame as the join key.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_index**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Use the index of the right DataFrame as the join key.
  prefs: []
  type: TYPE_NORMAL
- en: '**by**column name or list of column names'
  prefs: []
  type: TYPE_NORMAL
- en: Match on these columns before performing merge operation.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_by**column name'
  prefs: []
  type: TYPE_NORMAL
- en: Field names to match on in the left DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_by**column name'
  prefs: []
  type: TYPE_NORMAL
- en: Field names to match on in the right DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**suffixes**2-length sequence (tuple, list, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Suffix to apply to overlapping column names in the left and right side, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**tolerance**int or Timedelta, optional, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Select asof tolerance within this range; must be compatible with the merge index.
  prefs: []
  type: TYPE_NORMAL
- en: '**allow_exact_matches**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If True, allow matching with the same ‘on’ value (i.e. less-than-or-equal-to
    / greater-than-or-equal-to)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If False, don’t match the same ‘on’ value (i.e., strictly less-than / strictly
    greater-than).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**direction**‘backward’ (default), ‘forward’, or ‘nearest’'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to search for prior, subsequent, or closest matches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge`](pandas.merge.html#pandas.merge "pandas.merge")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge with a database-style join.
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_ordered`](pandas.merge_ordered.html#pandas.merge_ordered "pandas.merge_ordered")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge with optional filling/interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can use indexed DataFrames as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here is a real-world times-series example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: By default we are taking the asof of the quotes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We only asof within 2ms between the quote time and the trade time
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We only asof within 10ms between the quote time and the trade time and we exclude
    exact matches on time. However *prior* data will propagate forward
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
