- en: Essential basic functionality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本功能
- en: 原文：[https://pandas.pydata.org/docs/user_guide/basics.html](https://pandas.pydata.org/docs/user_guide/basics.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/basics.html](https://pandas.pydata.org/docs/user_guide/basics.html)
- en: 'Here we discuss a lot of the essential functionality common to the pandas data
    structures. To begin, let’s create some example objects like we did in the [10
    minutes to pandas](10min.html#min) section:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们讨论了与 pandas 数据结构共同的许多基本功能。首先，让我们创建一些示例对象，就像我们在 [10 分钟入门 pandas](10min.html#min)
    部分中所做的那样：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '## Head and tail'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## 头部和尾部'
- en: To view a small sample of a Series or DataFrame object, use the [`head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") and [`tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail") methods. The default number of elements to display is
    five, but you may pass a custom number.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Series 或 DataFrame 对象的小样本，请使用 [`head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") 和 [`tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail") 方法。默认显示的元素数量为五个，但您可以传递自定义数量。
- en: '[PRE1]  ## Attributes and underlying data'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ## 属性和基础数据'
- en: pandas objects have a number of attributes enabling you to access the metadata
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象具有许多属性，使您能够访问元数据
- en: '**shape**: gives the axis dimensions of the object, consistent with ndarray'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shape**: 给出对象的轴维度，与 ndarray 一致'
- en: Axis labels
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴标签
- en: '**Series**: *index* (only axis)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**: *索引*（唯一轴）'
- en: '**DataFrame**: *index* (rows) and *columns*'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**: *索引*（行）和 *列*'
- en: Note, **these attributes can be safely assigned to**!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意��**这些属性可以安全地分配给**！
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: pandas objects ([`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"),
    [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"),
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"))
    can be thought of as containers for arrays, which hold the actual data and do
    the actual computation. For many types, the underlying array is a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). However, pandas and 3rd party libraries may *extend* NumPy’s
    type system to add support for custom arrays (see [dtypes](#basics-dtypes)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象（[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")、[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")、[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")）可以被视为数组的容器，其中包含实际数据并执行实际计算。对于许多类型，底层数组是一个 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26 中)")。然而，pandas 和第三方库可能会*扩展* NumPy 的类型系统以支持自定义数组（请参阅 [dtypes](#basics-dtypes)）。
- en: To get the actual data inside a [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), use the `.array` property
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    或 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    中的实际数据，请使用 `.array` 属性
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`array`](../reference/api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")
    will always be an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"). The exact details of what an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") is and why pandas uses them are a bit
    beyond the scope of this introduction. See [dtypes](#basics-dtypes) for more.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](../reference/api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")
    将始终是一个 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")。关于 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") 的确切细节以及 pandas 为什么使用它们略微超出了本介绍的范围。更多信息请参见
    [dtypes](#basics-dtypes)。'
- en: If you know you need a NumPy array, use [`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") or `numpy.asarray()`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道需要 NumPy 数组，请使用 [`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") 或 `numpy.asarray()`。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the Series or Index is backed by an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), [`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") may involve copying data and coercing values. See [dtypes](#basics-dtypes)
    for more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Series 或 Index 由 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") 支持时，[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") 可能涉及复制数据和强制值。更多信息请参见 [dtypes](#basics-dtypes)。
- en: '[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") gives some control over the `dtype` of the resulting
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). For example, consider datetimes with timezones. NumPy doesn’t
    have a dtype to represent timezone-aware datetimes, so there are two possibly
    useful representations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") 可以控制生成的 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26 中)") 的 `dtype`。例如，考虑带有时区的日期时间。NumPy 没有一种 dtype 来表示带时区的日期时间，因此有两种可能有用的表示方式：'
- en: An object-dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects, each with the correct `tz`
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个带有 [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    对象的对象-dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26 中)")，每个对象都具有正确的 `tz`
- en: A `datetime64[ns]` -dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"), where the values have been converted to UTC and the timezone
    discarded
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `datetime64[ns]` -dtype 的 [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26 中)")，其中值已转换为 UTC 并且时区被丢弃
- en: Timezones may be preserved with `dtype=object`
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 时区可能会被保留为 `dtype=object`
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Or thrown away with `dtype='datetime64[ns]'`
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `dtype='datetime64[ns]'` 丢弃
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Getting the “raw data” inside a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is possibly a bit more complex. When your `DataFrame` only
    has a single data type for all the columns, [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will return the underlying data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    中的“原始数据”可能会更加复杂。当您的 `DataFrame` 的所有列只有一个数据类型时，[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") 将返回底层数据：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If a DataFrame contains homogeneously-typed data, the ndarray can actually be
    modified in-place, and the changes will be reflected in the data structure. For
    heterogeneous data (e.g. some of the DataFrame’s columns are not all the same
    dtype), this will not be the case. The values attribute itself, unlike the axis
    labels, cannot be assigned to.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 DataFrame 包含同质类型数据，那么 ndarray 实际上可以就地修改，并且更改将反映在数据结构中。对于异构数据（例如 DataFrame
    的某些列不全是相同的 dtype），情况则不同。与轴标签不同，值属性本身不能被赋值。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When working with heterogeneous data, the dtype of the resulting ndarray will
    be chosen to accommodate all of the data involved. For example, if strings are
    involved, the result will be of object dtype. If there are only floats and integers,
    the resulting array will be of float dtype.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理异构数据时，生成的 ndarray 的 dtype 将被选择以容纳所有涉及的数据。例如，如果涉及字符串，则结果将是对象 dtype。如果只有浮点数和整数，则生成的数组将是浮点数
    dtype。
- en: 'In the past, pandas recommended [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") or [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") for extracting the data from a Series or DataFrame.
    You’ll still find references to these in old code bases and online. Going forward,
    we recommend avoiding `.values` and using `.array` or `.to_numpy()`. `.values`
    has the following drawbacks:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，pandas 推荐使用 [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") 或 [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") 从 Series 或 DataFrame 中提取数据。您仍然会在旧代码库和在线上找到这些引用。未来，我们建议避免使用
    `.values`，而是使用 `.array` 或 `.to_numpy()`。`.values` 有以下缺点：
- en: When your Series contains an [extension type](../development/extending.html#extending-extension-types),
    it’s unclear whether [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") returns a NumPy array or the extension array. [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will always return an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), and will never copy data. [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") will always return a NumPy array, potentially at the
    cost of copying / coercing values.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的 Series 包含一个[扩展类型](../development/extending.html#extending-extension-types)时，不清楚
    [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") 返回一个 NumPy 数组还是扩展数组。[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") 总是返回一个 [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")，并且永远不会复制数据。[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") 总是返回一个 NumPy 数组，可能会造成复制/强制转换值的代价。
- en: 'When your DataFrame contains a mixture of data types, [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") may involve copying data and coercing values to a common
    dtype, a relatively expensive operation. [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy"), being a method, makes it clearer that the returned
    NumPy array may not be a view on the same data in the DataFrame.  ## Accelerated
    operations'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '当你的 DataFrame 包含不同数据类型时，[`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") 可能涉及复制数据并将值强制转换为一个公共的数据类型，这是一个相对昂贵的操作。[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") 作为一个方法，更清楚地表明返回的 NumPy 数组可能不是 DataFrame 中相同数据的视图。  ##
    加速操作'
- en: pandas has support for accelerating certain types of binary numerical and boolean
    operations using the `numexpr` library and the `bottleneck` libraries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持使用 `numexpr` 库和 `bottleneck` 库加速某些类型的二进制数值和布尔操作。
- en: These libraries are especially useful when dealing with large data sets, and
    provide large speedups. `numexpr` uses smart chunking, caching, and multiple cores.
    `bottleneck` is a set of specialized cython routines that are especially fast
    when dealing with arrays that have `nans`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大型数据集时，这些库特别有用，并提供了大幅加速。`numexpr` 使用智能分块、缓存和多核。`bottleneck` 是一组专门的 cython
    程序，当处理具有 `nans` 的数组时特别快。
- en: 'Here is a sample (using 100 column x 100,000 row `DataFrames`):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例（使用 100 列 x 100,000 行的 `DataFrames`）：
- en: '| Operation | 0.11.0 (ms) | Prior Version (ms) | Ratio to Prior |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 0.11.0 (毫秒) | 之前版本 (毫秒) | 与之前版本的比率 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `df1 > df2` | 13.32 | 125.35 | 0.1063 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `df1 > df2` | 13.32 | 125.35 | 0.1063 |'
- en: '| `df1 * df2` | 21.71 | 36.63 | 0.5928 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `df1 * df2` | 21.71 | 36.63 | 0.5928 |'
- en: '| `df1 + df2` | 22.04 | 36.50 | 0.6039 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `df1 + df2` | 22.04 | 36.50 | 0.6039 |'
- en: You are highly encouraged to install both libraries. See the section [Recommended
    Dependencies](../getting_started/install.html#install-recommended-dependencies)
    for more installation info.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议安装这两个库。查看 [推荐依赖项](../getting_started/install.html#install-recommended-dependencies)
    部分获取更多安装信息。
- en: 'These are both enabled to be used by default, you can control this by setting
    the options:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者默认启用，你可以通过设置选项来控制这一点：
- en: '[PRE8]  ## Flexible binary operations'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]  ## 灵活的二进制操作'
- en: 'With binary operations between pandas data structures, there are two key points
    of interest:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 数据结构之间进行二进制操作时，有两个关键点值得注意：
- en: Broadcasting behavior between higher- (e.g. DataFrame) and lower-dimensional
    (e.g. Series) objects.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高维（例如 DataFrame）和低维（例如 Series）对象之间的广播行为。
- en: Missing data in computations.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算中的缺失数据。
- en: We will demonstrate how to manage these issues independently, though they can
    be handled simultaneously.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示如何独立处理这些问题，尽管它们可以同时处理。
- en: Matching / broadcasting behavior
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匹配/广播行为
- en: 'DataFrame has the methods [`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add"), [`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub"), [`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul"), [`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div") and related functions [`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd"), [`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub"), … for carrying out binary operations. For broadcasting
    behavior, Series input is of primary interest. Using these functions, you can
    use to either match on the *index* or *columns* via the **axis** keyword:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 具有方法 [`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add")、[`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub")、[`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul")、[`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div") 和相关函数 [`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd")、[`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub")，… 用于执行二进制操作。对于广播行为，Series 输入是主要关注点。使用这些函数，您可以通过 **axis**
    关键字匹配 *index* 或 *columns*：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Furthermore you can align a level of a MultiIndexed DataFrame with a Series.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将 MultiIndexed DataFrame 的一个级别与 Series 对齐。
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Series and Index also support the [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)") builtin. This function takes the floor division and modulo
    operation at the same time returning a two-tuple of the same type as the left
    hand side. For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 Index 还支持内置的 [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)")。此函数同时执行地板除法和取模运算��返回与左侧相同类型的两元组。例如：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can also do elementwise [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)"):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进行逐元素的 [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)") 操作：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Missing data / operations with fill values
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺失数据 / 使用填充值的操作
- en: In Series and DataFrame, the arithmetic functions have the option of inputting
    a *fill_value*, namely a value to substitute when at most one of the values at
    a location are missing. For example, when adding two DataFrame objects, you may
    wish to treat NaN as 0 unless both DataFrames are missing that value, in which
    case the result will be NaN (you can later replace NaN with some other value using
    `fillna` if you wish).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Series 和 DataFrame 中，算术函数有一个 *fill_value* 选项，即在某个位置的值缺失时要替换的值。例如，当添加两个 DataFrame
    对象时，您可能希望将 NaN 视为 0，除非两个 DataFrame 都缺少该值，此时结果将为 NaN（如果需要，您可以稍后使用 `fillna` 将 NaN
    替换为其他值）。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '### Flexible comparisons'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '### 灵活的比较'
- en: 'Series and DataFrame have the binary comparison methods `eq`, `ne`, `lt`, `gt`,
    `le`, and `ge` whose behavior is analogous to the binary arithmetic operations
    described above:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 具有二进制比较方法 `eq`、`ne`、`lt`、`gt`、`le` 和 `ge`，其行为类似于上述二进制算术操作：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These operations produce a pandas object of the same type as the left-hand-side
    input that is of dtype `bool`. These `boolean` objects can be used in indexing
    operations, see the section on [Boolean indexing](indexing.html#indexing-boolean).  ###
    Boolean reductions'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作产生与左侧输入相同类型的 pandas 对象，其 dtype 为 `bool`。这些 `boolean` 对象可用于索引操作，请参阅 [布尔索引](indexing.html#indexing-boolean)
    部分。### 布尔缩减
- en: 'You can apply the reductions: [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty"), [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any"), [`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all"), and [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool") to provide a way to summarize a boolean result.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以应用以下缩减操作：[`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty")、[`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any")、[`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") 和 [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool")，以提供一种总结布尔结果的方式。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can reduce to a final boolean value.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将结果缩减为最终布尔值。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can test if a pandas object is empty, via the [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") property.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以测试 pandas 对象是否为空，通过 [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") 属性。
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Warning
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Asserting the truthiness of a pandas object will raise an error, as the testing
    of the emptiness or values is ambiguous.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 pandas 对象的真实性会引发错误，因为空值或值的测试是模棱两可的。
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'See [gotchas](gotchas.html#gotchas-truth) for a more detailed discussion.  ###
    Comparing if objects are equivalent'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '有关更详细讨论，请参阅[陷阱](gotchas.html#gotchas-truth)。  ### 比较对象是否等价'
- en: 'Often you may find that there is more than one way to compute the same result.
    As a simple example, consider `df + df` and `df * 2`. To test that these two computations
    produce the same result, given the tools shown above, you might imagine using
    `(df + df == df * 2).all()`. But in fact, this expression is False:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您可能会发现有多种计算相同结果的方法。 举个简单的例子，考虑 `df + df` 和 `df * 2`。 为了测试这两个计算是否产生相同的结果，考虑使用
    `(df + df == df * 2).all()`。 但事实上，这个表达式是 False：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Notice that the boolean DataFrame `df + df == df * 2` contains some False values!
    This is because NaNs do not compare as equals:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，布尔 DataFrame `df + df == df * 2` 包含一些 False 值！ 这是因为 NaN 不会被视为相等：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So, NDFrames (such as Series and DataFrames) have an [`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals") method for testing equality, with NaNs in corresponding
    locations treated as equal.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，NDFrames（如 Series 和 DataFrames）具有一个用于测试相等性的[`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")方法，其中对应位置的 NaN 被视为相等。
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that the Series or DataFrame index needs to be in the same order for equality
    to be True:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了使相等性为 True，Series 或 DataFrame 索引需要按相同顺序排列：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Comparing array-like objects
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较类似数组的对象
- en: 'You can conveniently perform element-wise comparisons when comparing a pandas
    data structure with a scalar value:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 pandas 数据结构与标量值进行比较时，您可以方便地执行逐元素比较：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'pandas also handles element-wise comparisons between different array-like objects
    of the same length:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 还处理相同长度的不同类似数组对象之间的逐元素比较：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Trying to compare `Index` or `Series` objects of different lengths will raise
    a ValueError:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试比较不同长度的`Index`或`Series`对象会引发一个 ValueError：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Combining overlapping data sets
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并重叠数据集
- en: 'A problem occasionally arising is the combination of two similar data sets
    where values in one are preferred over the other. An example would be two data
    series representing a particular economic indicator where one is considered to
    be of “higher quality”. However, the lower quality series might extend further
    back in history or have more complete data coverage. As such, we would like to
    combine two DataFrame objects where missing values in one DataFrame are conditionally
    filled with like-labeled values from the other DataFrame. The function implementing
    this operation is [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first"), which we illustrate:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔会出现一个问题，即合并两个类似的数据集，其中一个数据集中的值优先于另一个。 一个例子是两个表示特定经济指标的数据系列，其中一个被认为是“更高质量”的。
    但是，较低质量的系列可能在历史上延伸得更久，或者数据覆盖更完整。 因此，我们希望将两个 DataFrame 对象组合在一起，其中一个 DataFrame 中的缺失值会有条件地用另一个
    DataFrame 中的相同标记值填充。 实现此操作的函数是[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")，我们进行演示：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: General DataFrame combine
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般的 DataFrame 组合
- en: The [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") method above calls the more general [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine"). This method takes another DataFrame and a combiner
    function, aligns the input DataFrame and then passes the combiner function pairs
    of Series (i.e., columns whose names are the same).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")方法调用了更一般的[`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")。 此方法接受另一个 DataFrame 和一个组合器函数，对齐输入 DataFrame，然后将组合器函数传递给一对
    Series（即，列名称相同的列）。
- en: 'So, for instance, to reproduce [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") as above:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要重现[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")如上所示：
- en: '[PRE28]  ## Descriptive statistics'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE28]  ## 描述性统计'
- en: 'There exists a large number of methods for computing descriptive statistics
    and other related operations on [Series](../reference/series.html#api-series-stats),
    [DataFrame](../reference/frame.html#api-dataframe-stats). Most of these are aggregations
    (hence producing a lower-dimensional result) like [`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum"), [`mean()`](../reference/api/pandas.DataFrame.mean.html#pandas.DataFrame.mean
    "pandas.DataFrame.mean"), and [`quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile"), but some of them, like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod"), produce an object of the same size. Generally speaking,
    these methods take an **axis** argument, just like *ndarray.{sum, std, …}*, but
    the axis can be specified by name or integer:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量用于计算描述性统计和其他相关操作的方法，适用于[Series](../reference/series.html#api-series-stats)、[DataFrame](../reference/frame.html#api-dataframe-stats)。其中大多数是聚合（因此产生较低维度的结果），如[`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum")、[`mean()`](../reference/api/pandas.DataFrame.mean.html#pandas.DataFrame.mean
    "pandas.DataFrame.mean")和[`quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")等，但有些方法，如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")，会产生相同大小的对象。一般来说，这些方法接受一个**axis**参数，就像*ndarray.{sum,
    std, …}*一样，但是轴可以通过名称或整数指定：
- en: '**Series**: no axis argument needed'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：不需要轴参数'
- en: '**DataFrame**: “index” (axis=0, default), “columns” (axis=1)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**： “index”（���=0，默认）， “columns”（轴=1）'
- en: 'For example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'All such methods have a `skipna` option signaling whether to exclude missing
    data (`True` by default):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都有一个`skipna`选项，表示是否排除缺失数据（默认为`True`）：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Combined with the broadcasting / arithmetic behavior, one can describe various
    statistical procedures, like standardization (rendering data zero mean and standard
    deviation of 1), very concisely:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 结合广播/算术行为，可以非常简洁地描述各种统计程序，比如标准化（使数据均值为零，标准差为1）：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") preserve the location of `NaN` values. This is somewhat
    different from [`expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") and [`rolling()`](../reference/api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling") since `NaN` behavior is furthermore dictated by a
    `min_periods` parameter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，像[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")这样的方法会保留`NaN`值的位置。这与[`expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")和[`rolling()`](../reference/api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")有些不同，因为`NaN`的行为还受`min_periods`参数的影响。
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here is a quick reference summary table of common functions. Each also takes
    an optional `level` parameter which applies only if the object has a [hierarchical
    index](advanced.html#advanced-hierarchical).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是常见函数的快速参考摘要表。每个函数还可以接受一个可选的`level`参数，仅在对象具有[分层索引](advanced.html#advanced-hierarchical)时适用。
- en: '| Function | Description |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `count` | Number of non-NA observations |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `count` | 非NA观测数量 |'
- en: '| `sum` | Sum of values |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `sum` | 值的总和 |'
- en: '| `mean` | Mean of values |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `mean` | 值的均值 |'
- en: '| `median` | Arithmetic median of values |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `median` | 值的算术中位数 |'
- en: '| `min` | Minimum |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 最小值 |'
- en: '| `max` | Maximum |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 最大值 |'
- en: '| `mode` | Mode |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | 众数 |'
- en: '| `abs` | Absolute Value |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 绝对值 |'
- en: '| `prod` | Product of values |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `prod` | 值的乘积 |'
- en: '| `std` | Bessel-corrected sample standard deviation |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `std` | 修正的样本标准差 |'
- en: '| `var` | Unbiased variance |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `var` | 无偏方差 |'
- en: '| `sem` | Standard error of the mean |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `sem` | 均值的标准误差 |'
- en: '| `skew` | Sample skewness (3rd moment) |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `skew` | 样本偏度（3阶矩） |'
- en: '| `kurt` | Sample kurtosis (4th moment) |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `kurt` | 样本峰度（4阶矩） |'
- en: '| `quantile` | Sample quantile (value at %) |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `quantile` | 样本分位数（%处的值） |'
- en: '| `cumsum` | Cumulative sum |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `cumsum` | 累积和 |'
- en: '| `cumprod` | Cumulative product |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `cumprod` | 累积乘积 |'
- en: '| `cummax` | Cumulative maximum |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `cummax` | 累积最大值 |'
- en: '| `cummin` | Cumulative minimum |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `cummin` | 累积最小值 |'
- en: 'Note that by chance some NumPy methods, like `mean`, `std`, and `sum`, will
    exclude NAs on Series input by default:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，偶然情况下，一些 NumPy 方法，如 `mean`、`std` 和 `sum`，默认情况下会在 Series 输入中排除 NA：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[`Series.nunique()`](../reference/api/pandas.Series.nunique.html#pandas.Series.nunique
    "pandas.Series.nunique") will return the number of unique non-NA values in a Series:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.nunique()`](../reference/api/pandas.Series.nunique.html#pandas.Series.nunique
    "pandas.Series.nunique") 将返回 Series 中唯一非 NA 值的数量：'
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '### Summarizing data: describe'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据总结：describe'
- en: 'There is a convenient [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") function which computes a variety of summary statistics
    about a Series or the columns of a DataFrame (excluding NAs of course):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的 [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") 函数，它计算关于 Series 或 DataFrame 的列的各种摘要统计信息（当然不包括 NA）：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can select specific percentiles to include in the output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择要包含在输出中的特定百��位数：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: By default, the median is always included.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，中位数始终包括在内。
- en: 'For a non-numerical Series object, [`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") will give a simple summary of the number of unique values
    and most frequently occurring values:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非数字 Series 对象，[`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") 将提供关于唯一值数量和最频繁出现值的简单摘要：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Note that on a mixed-type DataFrame object, [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") will restrict the summary to include only numerical
    columns or, if none are, only categorical columns:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在混合类型的 DataFrame 对象上，[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") 将限制摘要仅包括数值列或（如果没有）仅包括分类列：
- en: '[PRE38]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This behavior can be controlled by providing a list of types as `include`/`exclude`
    arguments. The special value `all` can also be used:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过提供类型列表作为 `include`/`exclude` 参数来控制此行为。也可以使用特殊值 `all`：
- en: '[PRE39]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'That feature relies on [select_dtypes](#basics-selectdtypes). Refer to there
    for details about accepted inputs.  ### Index of min/max values'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '该功能依赖于 [select_dtypes](#basics-selectdtypes)。有关接受的输入的详细信息，请参考那里。  ### 最小/最大值的索引'
- en: 'The [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") functions on Series and DataFrame compute the index
    labels with the minimum and maximum corresponding values:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") 和 [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") 函数在 Series 和 DataFrame 上计算具有最小和最大对应值的索引标签：'
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'When there are multiple rows (or columns) matching the minimum or maximum value,
    [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") return the first matching index:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当有多行（或列）匹配最小或最大值时，[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") 和 [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") 返回第一个匹配的索引：
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`idxmin` and `idxmax` are called `argmin` and `argmax` in NumPy.  ### Value
    counts (histogramming) / mode'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`idxmin` 和 `idxmax` 在 NumPy 中称为 `argmin` 和 `argmax`。  ### 值计数（直方图）/ 众数'
- en: 'The [`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series method computes a histogram of a 1D array
    of values. It can also be used as a function on regular arrays:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series 方法计算值的 1D 数组的直方图。它也可以用作常规数组的函数：'
- en: '[PRE42]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The [`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts") method can be used to count combinations across
    multiple columns. By default all columns are used but a subset can be selected
    using the `subset` argument.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts") 方法可用于计算跨多列的组合。默认情况下使用所有列，但可以使用 `subset` 参数选择子集。'
- en: '[PRE43]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Similarly, you can get the most frequently occurring value(s), i.e. the mode,
    of the values in a Series or DataFrame:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以获取 Series 或 DataFrame 中值的最频繁出现的值（即众数）：
- en: '[PRE44]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Discretization and quantiling
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离散化和分位数
- en: 'Continuous values can be discretized using the [`cut()`](../reference/api/pandas.cut.html#pandas.cut
    "pandas.cut") (bins based on values) and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") (bins based on sample quantiles) functions:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 连续值可以使用 [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut")（基于值的区间）和
    [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut")（基于样本分位数的区间）函数进行离散化：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut") computes
    sample quantiles. For example, we could slice up some normally distributed data
    into equal-size quartiles like so:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut") 计算样本分位数。例如，我们可以将一些正态分布数据切分成相等大小的四分位数：'
- en: '[PRE46]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can also pass infinite values to define the bins:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以传入无限值来定义区间：
- en: '[PRE47]  ## Function application'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE47]  ## 函数应用'
- en: To apply your own or another library’s functions to pandas objects, you should
    be aware of the three methods below. The appropriate method to use depends on
    whether your function expects to operate on an entire `DataFrame` or `Series`,
    row- or column-wise, or elementwise.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您自己或其他库的函数应用于 pandas 对象，您应该了解以下三种方法。使用的适当方法取决于您的函数是希望在整个 `DataFrame` 或 `Series`
    上操作，是按行还是按列，还是逐元素操作。
- en: '[Tablewise Function Application](#tablewise-function-application): [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe")'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[表格函数应用](#tablewise-function-application): [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe")'
- en: '[Row or Column-wise Function Application](#row-or-column-wise-function-application):
    [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[按行或列应用函数](#row-or-column-wise-function-application): [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")'
- en: '[Aggregation API](#aggregation-api): [`agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") and [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[聚合 API](#aggregation-api): [`agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") 和 [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")'
- en: '[Applying Elementwise Functions](#applying-elementwise-functions): [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map")'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[逐元素应用函数](#applying-elementwise-functions): [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map")'
- en: '### Tablewise function application'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '### 表格函数应用'
- en: '`DataFrames` and `Series` can be passed into functions. However, if the function
    needs to be called in a chain, consider using the [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") method.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrames` 和 `Series` 可以传入函数。但是，如果函数需要在链中调用，请考虑使用 [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") 方法。'
- en: 'First some setup:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 首先进行一些设置：
- en: '[PRE48]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`extract_city_name` and `add_country_name` are functions taking and returning
    `DataFrames`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_city_name` 和 `add_country_name` 是接受并返回 `DataFrames` 的函数。'
- en: 'Now compare the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在比较以下内容：
- en: '[PRE49]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Is equivalent to:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE50]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: pandas encourages the second style, which is known as method chaining. `pipe`
    makes it easy to use your own or another library’s functions in method chains,
    alongside pandas’ methods.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 鼓励第二种风格，即称为方法链。`pipe` 使得在方法链中使用您自己或其他库的函数与 pandas 方法一起变得容易。
- en: In the example above, the functions `extract_city_name` and `add_country_name`
    each expected a `DataFrame` as the first positional argument. What if the function
    you wish to apply takes its data as, say, the second argument? In this case, provide
    `pipe` with a tuple of `(callable, data_keyword)`. `.pipe` will route the `DataFrame`
    to the argument specified in the tuple.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，函数 `extract_city_name` 和 `add_country_name` 每个都期望一个 `DataFrame` 作为第一个位置参数。如果您希望应用的函数将其数据作为第二个参数呢？在这种情况下，使用一个元组
    `(callable, data_keyword)` 提供给 `pipe`。`.pipe` 将 `DataFrame` 路由到元组中指定的参数。
- en: 'For example, we can fit a regression using statsmodels. Their API expects a
    formula first and a `DataFrame` as the second argument, `data`. We pass in the
    function, keyword pair `(sm.ols, ''data'')` to `pipe`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 statsmodels 拟合回归。他们的 API 首先期望一个公式，然后是第二个参数 `data` 的 `DataFrame`。我们将函数、关键字对
    `(sm.ols, 'data')` 传递给 `pipe`：
- en: '[PRE51]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The pipe method is inspired by unix pipes and more recently [dplyr](https://github.com/tidyverse/dplyr)
    and [magrittr](https://github.com/tidyverse/magrittr), which have introduced the
    popular `(%>%)` (read pipe) operator for [R](https://www.r-project.org). The implementation
    of `pipe` here is quite clean and feels right at home in Python. We encourage
    you to view the source code of [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe").
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 管道方法受到unix管道以及更近期的[dplyr](https://github.com/tidyverse/dplyr)和[magrittr](https://github.com/tidyverse/magrittr)的启发，它们为[R](https://www.r-project.org)引入了流行的`(%>%)`（读作pipe）运算符。这里的`pipe`实现非常干净，感觉就像在Python中很合适。我们鼓励您查看[`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe")的源代码。
- en: Row or column-wise function application
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按行或列应用函数
- en: 'Arbitrary functions can be applied along the axes of a DataFrame using the
    [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method, which, like the descriptive statistics methods,
    takes an optional `axis` argument:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")方法沿着DataFrame的轴应用任意函数，类似描述性统计方法，该方法接受一个可选的`axis`参数：
- en: '[PRE52]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method will also dispatch on a string method name.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")方法还可以根据字符串方法名进行分派。'
- en: '[PRE53]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The return type of the function passed to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") affects the type of the final output from `DataFrame.apply`
    for the default behaviour:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")的函数的返回类型会影响默认行为下`DataFrame.apply`的最终输出类型：
- en: If the applied function returns a `Series`, the final output is a `DataFrame`.
    The columns match the index of the `Series` returned by the applied function.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回一个`Series`，最终输出是一个`DataFrame`。列与应用函数返回的`Series`的索引匹配。
- en: If the applied function returns any other type, the final output is a `Series`.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回任何其他类型，最终输出是一个`Series`。
- en: 'This default behaviour can be overridden using the `result_type`, which accepts
    three options: `reduce`, `broadcast`, and `expand`. These will determine how list-likes
    return values expand (or not) to a `DataFrame`.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`result_type`来覆盖默认行为，它接受三个选项：`reduce`、`broadcast`和`expand`。这些选项将决定类似列表的返回值如何扩展（或不扩展）到`DataFrame`。
- en: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") combined with some cleverness can be used to answer
    many questions about a data set. For example, suppose we wanted to extract the
    date where the maximum value for each column occurred:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")结合一些巧妙的技巧可以用来回答关于数据集的许多问题。例如，假设我们想要提取每列中最大值出现的日期：'
- en: '[PRE54]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You may also pass additional arguments and keyword arguments to the [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")方法传递额外的参数和关键字参数。
- en: '[PRE55]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Another useful feature is the ability to pass Series methods to carry out some
    Series operation on each column or row:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是能够传递序列方法来对每一列或行执行一些序列操作：
- en: '[PRE56]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Finally, [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") takes an argument `raw` which is False by default, which
    converts each row or column into a Series before applying the function. When set
    to True, the passed function will instead receive an ndarray object, which has
    positive performance implications if you do not need the indexing functionality.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")接受一个默认为False的参数`raw`，在应用函数之前将每行或列转换为Series。当设置为True时，传递的函数将接收一个ndarray对象，如果您不需要索引功能，则具有积极的性能影响。
- en: '### Aggregation API'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '### 聚合API'
- en: The aggregation API allows one to express possibly multiple aggregation operations
    in a single concise way. This API is similar across pandas objects, see [groupby
    API](groupby.html#groupby-aggregate), the [window API](window.html#window-overview),
    and the [resample API](timeseries.html#timeseries-aggregate). The entry point
    for aggregation is [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate"), or the alias [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg").
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合 API 允许以一种简洁的方式表达可能的多个聚合操作。此 API 在 pandas 对象中是相似的，请参阅[groupby API](groupby.html#groupby-aggregate)、[window
    API](window.html#window-overview)和[resample API](timeseries.html#timeseries-aggregate)。聚合的入口是[`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")，或别名[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg")。
- en: 'We will use a similar starting frame from above:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用类似上面的起始框架：
- en: '[PRE57]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Using a single function is equivalent to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"). You can also pass named methods as strings. These will
    return a `Series` of the aggregated output:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个函数等同于[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")。您还可以将命名方法作为字符串传递。这些将返回聚合输出的`Series`：
- en: '[PRE58]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Single aggregations on a `Series` this will return a scalar value:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Series`进行单个聚合将返回一个标量值：
- en: '[PRE59]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Aggregating with multiple functions
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行聚合
- en: You can pass multiple aggregation arguments as a list. The results of each of
    the passed functions will be a row in the resulting `DataFrame`. These are naturally
    named from the aggregation function.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多个聚合参数作为列表传递。每个传递函数的结果将成为结果`DataFrame`中的一行。这些自然地从聚合函数命名。
- en: '[PRE60]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Multiple functions yield multiple rows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 多个函数产生多个行：
- en: '[PRE61]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'On a `Series`, multiple functions return a `Series`, indexed by the function
    names:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`上，多个函数返回一个`Series`，由函数名称索引：
- en: '[PRE62]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Passing a `lambda` function will yield a `<lambda>` named row:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个`lambda`函数将产生一个`<lambda>`命名的行：
- en: '[PRE63]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Passing a named function will yield that name for the row:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 传递命名函数将为该行产生该名称：
- en: '[PRE64]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Aggregating with a dict
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行聚合
- en: Passing a dictionary of column names to a scalar or a list of scalars, to `DataFrame.agg`
    allows you to customize which functions are applied to which columns. Note that
    the results are not in any particular order, you can use an `OrderedDict` instead
    to guarantee ordering.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将列名的字典传递给标量或标量列表，以便在`DataFrame.agg`中自定义应用哪些函数于哪些列。请注意，结果不按任何特定顺序排列，您可以使用`OrderedDict`来保证顺序。
- en: '[PRE65]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Passing a list-like will generate a `DataFrame` output. You will get a matrix-like
    output of all of the aggregators. The output will consist of all unique functions.
    Those that are not noted for a particular column will be `NaN`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 传递类似列表的内容将生成一个`DataFrame`输出。您将获得所有聚合器的类似矩阵的输出。输出将包含所有唯一的函数。那些没有针对特定列注明的函数将为`NaN`：
- en: '[PRE66]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '#### Custom describe'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义描述'
- en: With `.agg()` it is possible to easily create a custom describe function, similar
    to the built in [describe function](#basics-describe).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.agg()`可以轻松创建一个类似于内置[describe函数](#basics-describe)的自定义描述函数。
- en: '[PRE67]  ### Transform API'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE67]  ### 转换 API'
- en: The [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") method returns an object that is indexed the same
    (same size) as the original. This API allows you to provide *multiple* operations
    at the same time rather than one-by-one. Its API is quite similar to the `.agg`
    API.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")方法返回一个与原始相同（相同大小）的对象。此 API 允许您一次提供*多个*操作，而不是逐个操作。其
    API 与`.agg` API非常相似。'
- en: We create a frame similar to the one used in the above sections.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个类似于上述部分使用的框架。
- en: '[PRE68]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Transform the entire frame. `.transform()` allows input functions as: a NumPy
    function, a string function name or a user defined function.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 转换整个框架。`.transform()`允许输入函数为：NumPy函数、字符串函数名称或用户定义的函数。
- en: '[PRE69]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Here [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") received a single function; this is equivalent to
    a [ufunc](https://numpy.org/doc/stable/reference/ufuncs.html) application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这里[`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")接收一个单个函数；这等同于[ufunc](https://numpy.org/doc/stable/reference/ufuncs.html)应用。
- en: '[PRE70]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Passing a single function to `.transform()` with a `Series` will yield a single
    `Series` in return.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将单个函数传递给`.transform()`与`Series`，将返回一个单个`Series`。
- en: '[PRE71]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Transform with multiple functions
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行转换
- en: Passing multiple functions will yield a column MultiIndexed DataFrame. The first
    level will be the original frame column names; the second level will be the names
    of the transforming functions.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 传递多个函数将产生一个列多级索引的 DataFrame。第一级将是原始框架列名称；第二级将是转换函数的名称。
- en: '[PRE72]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Passing multiple functions to a Series will yield a DataFrame. The resulting
    column names will be the transforming functions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个函数传递给 Series 将产生一个 DataFrame。生成的列名将是转换函数。
- en: '[PRE73]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Transforming with a dict
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行转换
- en: Passing a dict of functions will allow selective transforming per column.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递函数字典将允许每列进行选择性转换。
- en: '[PRE74]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Passing a dict of lists will generate a MultiIndexed DataFrame with these selective
    transforms.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递列表字典将生成具有这些选择性转换的多级索引 DataFrame。
- en: '[PRE75]  ### Applying elementwise functions'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE75]  ### 应用逐元素函数'
- en: 'Since not all functions can be vectorized (accept NumPy arrays and return another
    array or value), the methods [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") on DataFrame and analogously [`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") on Series accept any Python function taking a single value
    and returning a single value. For example:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并非所有函数都可以矢量化（接受 NumPy 数组并返回另一个数组或值），因此 DataFrame 上的方法[`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") 和类似地 Series 上的[`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 接受任何接受单个值并返回单个值的 Python 函数。例如：
- en: '[PRE76]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") has an additional feature; it can be used to easily “link”
    or “map” values defined by a secondary series. This is closely related to [merging/joining
    functionality](merging.html#merging):'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 还具有一个额外的功能；它可以用于轻松“链接”或“映射”由辅助系列定义的值。这与[合并/连接功能](merging.html#merging)密切相关：'
- en: '[PRE77]  ## Reindexing and altering labels'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE77]  ## 重新索引和更改标签'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") is the fundamental data alignment method in pandas. It
    is used to implement nearly all other features relying on label-alignment functionality.
    To *reindex* means to conform the data to match a given set of labels along a
    particular axis. This accomplishes several things:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 是 pandas 中的基本数据对齐方法。它用于实现几乎所有依赖于标签对齐功能的其他功能。重新索引意味着使数据符合匹配特定轴上给定标签集的数据。这实现了几件事情：'
- en: Reorders the existing data to match a new set of labels
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序现有数据以匹配新的标签集
- en: Inserts missing value (NA) markers in label locations where no data for that
    label existed
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标签位置插入缺失值（NA），在该标签处没有数据时
- en: If specified, **fill** data for missing labels using logic (highly relevant
    to working with time series data)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定，使用逻辑填充缺失标签的数据（与处理时间序列数据密切相关）
- en: 'Here is a simple example:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的例子：
- en: '[PRE78]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Here, the `f` label was not contained in the Series and hence appears as `NaN`
    in the result.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`f` 标签未包含在 Series 中，因此在结果中显示为`NaN`。
- en: 'With a DataFrame, you can simultaneously reindex the index and columns:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DataFrame，您可以同时重新索引索引和列：
- en: '[PRE79]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Note that the `Index` objects containing the actual axis labels can be **shared**
    between objects. So if we have a Series and a DataFrame, the following can be
    done:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，包含实际轴标签的`Index`对象可以在对象之间**共享**。因此，如果我们有一个 Series 和一个 DataFrame，则可以执行以下操作：
- en: '[PRE80]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This means that the reindexed Series’s index is the same Python object as the
    DataFrame’s index.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着重新索引的 Series 的索引与 DataFrame 的索引是相同的 Python 对象。
- en: '[`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") also supports an “axis-style” calling convention,
    where you specify a single `labels` argument and the `axis` it applies to.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") 还支持“轴样式”调用约定，其中您指定单个`labels`参数和它适用的`axis`。'
- en: '[PRE81]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: See also
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MultiIndex / Advanced Indexing](advanced.html#advanced) is an even more concise
    way of doing reindexing.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[MultiIndex / 高级索引](advanced.html#advanced) 是进行重新索引的更简洁方式。'
- en: Note
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'When writing performance-sensitive code, there is a good reason to spend some
    time becoming a reindexing ninja: **many operations are faster on pre-aligned
    data**. Adding two unaligned DataFrames internally triggers a reindexing step.
    For exploratory analysis you will hardly notice the difference (because `reindex`
    has been heavily optimized), but when CPU cycles matter sprinkling a few explicit
    `reindex` calls here and there can have an impact.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写对性能敏感的代码时，有充分理由花一些时间成为重新索引的高手：**许多操作在预对齐数据上更快**。添加两个未对齐的DataFrame内部触发重新索引步骤。对于探索性分析，你几乎不会注意到差异（因为`reindex`已经经过了大量优化），但是当CPU周期很重要时，偶尔在某些地方添加一些显式的`reindex`调用可能会产生影响。
- en: '### Reindexing to align with another object'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重新索引以与另一个对象对齐'
- en: 'You may wish to take an object and reindex its axes to be labeled the same
    as another object. While the syntax for this is straightforward albeit verbose,
    it is a common enough operation that the [`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like") method is available to make this simpler:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望取一个对象并重新索引其轴，使其标签与另一个对象相同。虽然这个语法很简单但冗长，但这是一个常见的操作，因此提供了[`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")方法来简化这个操作：
- en: '[PRE82]  ### Aligning objects with each other with `align`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE82]  ### 用`align`将对象与其他对象对齐'
- en: 'The [`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align
    "pandas.Series.align") method is the fastest way to simultaneously align two objects.
    It supports a `join` argument (related to [joining and merging](merging.html#merging)):'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align "pandas.Series.align")方法是同时对齐两个对象的最快方法。它支持一个`join`参数（与[连接和合并](merging.html#merging)相关）：'
- en: '`join=''outer''`: take the union of the indexes (default)'
  id: totrans-276
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''outer''`：取索引的并集（默认）'
- en: ''
  id: totrans-277
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-278
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''left''`: use the calling object’s index'
  id: totrans-279
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''left''`：使用调用对象的索引'
- en: ''
  id: totrans-280
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-281
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''right''`: use the passed object’s index'
  id: totrans-282
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''right''`：使用传递对象的索引'
- en: ''
  id: totrans-283
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-284
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''inner''`: intersect the indexes'
  id: totrans-285
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''inner''`：交集索引'
- en: 'It returns a tuple with both of the reindexed Series:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个包含两个重新索引Series的元组：
- en: '[PRE83]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'For DataFrames, the join method will be applied to both the index and the columns
    by default:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DataFrame，默认情况下，join方法将应用于索引和列：
- en: '[PRE84]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You can also pass an `axis` option to only align on the specified axis:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以传递一个`axis`选项，只在指定的轴上对齐：
- en: '[PRE85]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'If you pass a Series to [`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align"), you can choose to align both objects either on the
    DataFrame’s index or columns using the `axis` argument:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个Series传递给[`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")，你可以选择使用`axis`参数在DataFrame的索引或列上同时对齐两个对象：
- en: '[PRE86]  ### Filling while reindexing'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE86]  ### 重新索引时填充'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") takes an optional parameter `method` which is a filling
    method chosen from the following table:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex")接受一个可选参数`method`，这是从以下表中选择的填充方法：'
- en: '| Method | Action |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 动作 |'
- en: '| --- | --- |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pad / ffill | Fill values forward |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| pad / ffill | 向前填充值 |'
- en: '| bfill / backfill | Fill values backward |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| bfill / backfill | 向后填充值 |'
- en: '| nearest | Fill from the nearest index value |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| nearest | 从最近的索引值填充 |'
- en: 'We illustrate these fill methods on a simple Series:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个简单的Series上演示这些填充方法：
- en: '[PRE87]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: These methods require that the indexes are **ordered** increasing or decreasing.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法要求索引是**有序**递增或递减的。
- en: 'Note that the same result could have been achieved using [ffill](missing_data.html#missing-data-fillna)
    (except for `method=''nearest''`) or [interpolate](missing_data.html#missing-data-interpolate):'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可以使用[ffill](missing_data.html#missing-data-fillna)（除了`method='nearest'`）或[interpolate](missing_data.html#missing-data-interpolate)来实现相同的结果：
- en: '[PRE88]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") will raise a ValueError if the index is not monotonically
    increasing or decreasing. [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") will not perform any checks on the order of the index.  ###
    Limits on filling while reindexing'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex")如果索引不是单调递增或递减，将引发ValueError。[`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna")和[`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate")不会对索引的顺序执行任何检查。### 重新索引时填充的限制'
- en: 'The `limit` and `tolerance` arguments provide additional control over filling
    while reindexing. Limit specifies the maximum count of consecutive matches:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit`和`tolerance`参数在重新索引时提供额外的填充控制。Limit指定连续匹配的最大计数：'
- en: '[PRE89]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In contrast, tolerance specifies the maximum distance between the index and
    indexer values:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，容差指定索引和索引器值之间的最大距离：
- en: '[PRE90]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Notice that when used on a `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`,
    `tolerance` will coerced into a `Timedelta` if possible. This allows you to specify
    tolerance with appropriate strings.  ### Dropping labels from an axis'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当在`DatetimeIndex`、`TimedeltaIndex`或`PeriodIndex`上使用时，如果可能，`tolerance`将被强制转换为`Timedelta`。这允许您使用适当的字符串指定容差。###
    从轴中删除标签
- en: 'A method closely related to `reindex` is the [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") function. It removes a set of labels from an axis:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 与`reindex`密切相关的方法是[`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop")函数。它从轴中删除一组标签：
- en: '[PRE91]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Note that the following also works, but is a bit less obvious / clean:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下方法也有效，但不太明显/干净：
- en: '[PRE92]  ### Renaming / mapping labels'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE92]### 重命名/映射标签'
- en: The [`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") method allows you to relabel an axis based on some
    mapping (a dict or Series) or an arbitrary function.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")方法允许您根据某些映射（字典或Series）或任意函数重新标记轴。'
- en: '[PRE93]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'If you pass a function, it must return a value when called with any of the
    labels (and must produce a set of unique values). A dict or Series can also be
    used:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递一个函数，当使用任何标签调用时，它必须返回一个值（并且必须生成一组唯一值）。也可以使用字典或Series：
- en: '[PRE94]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: If the mapping doesn’t include a column/index label, it isn’t renamed. Note
    that extra labels in the mapping don’t throw an error.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果映射不包括列/索引标签，则不会重命名。请注意，映射中的额外标签不会引发错误。
- en: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") also supports an “axis-style” calling convention, where
    you specify a single `mapper` and the `axis` to apply that mapping to.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")还支持“轴样式”调用约定，您可以指定单个`mapper`和要将该映射应用于的`axis`。'
- en: '[PRE95]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Finally, [`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") also accepts a scalar or list-like for altering the `Series.name`
    attribute.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename")还接受标量或类似列表的值来修改`Series.name`属性。
- en: '[PRE96]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The methods [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") and [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") allow specific names of a `MultiIndex` to be changed
    (as opposed to the labels).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")和[`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis")允许更改`MultiIndex`的特定名称（而不是标签）。
- en: '[PRE97]  ## Iteration'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE97]## 迭代'
- en: The behavior of basic iteration over pandas objects depends on the type. When
    iterating over a Series, it is regarded as array-like, and basic iteration produces
    the values. DataFrames follow the dict-like convention of iterating over the “keys”
    of the objects.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: pandas对象的基本迭代行为取决于类型。在Series上进行迭代时，它被视为类似数组，基本迭代产生值。DataFrame遵循字典样式的约定，迭代对象的“键”。
- en: 'In short, basic iteration (`for i in object`) produces:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，基本迭代（`for i in object`）产生：
- en: '**Series**: values'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**: 值'
- en: '**DataFrame**: column labels'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**: 列标签'
- en: 'Thus, for example, iterating over a DataFrame gives you the column names:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，迭代DataFrame会给出列名：
- en: '[PRE98]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: pandas objects also have the dict-like [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") method to iterate over the (key, value) pairs.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: pandas对象还具有类似字典的[`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")方法，用于迭代(key, value)对。
- en: 'To iterate over the rows of a DataFrame, you can use the following methods:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 要迭代DataFrame的行，您可以使用以下方法：
- en: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows"): Iterate over the rows of a DataFrame as (index,
    Series) pairs. This converts the rows to Series objects, which can change the
    dtypes and has some performance implications.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")：以(index, Series)对的形式迭代DataFrame的行。这将行转换为Series对象，可以更改数据类型并具有一些性能影响。'
- en: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples"): Iterate over the rows of a DataFrame as namedtuples
    of the values. This is a lot faster than [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows"), and is in most cases preferable to use to iterate
    over the values of a DataFrame.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")：以值的namedtuples形式迭代DataFrame的行。这比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")快得多，并且在大多数情况下更适合用于迭代DataFrame的值。'
- en: Warning
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'Iterating through pandas objects is generally **slow**. In many cases, iterating
    manually over the rows is not needed and can be avoided with one of the following
    approaches:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 通过pandas对象进行迭代通常**较慢**。在许多情况下，手动迭代行是不必要的，并且可以通过以下方法之一避免：
- en: 'Look for a *vectorized* solution: many operations can be performed using built-in
    methods or NumPy functions, (boolean) indexing, …'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找*矢量化*解决方案：许多操作可以使用内置方法或NumPy函数（布尔）索引等进行，…
- en: When you have a function that cannot work on the full DataFrame/Series at once,
    it is better to use [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") instead of iterating over the values. See the docs on
    [function application](#basics-apply).
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您有一个无法一次处理完整DataFrame/Series的函数时，最好使用[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")而不是迭代值。请参阅[函数应用](#basics-apply)部分的文档。
- en: If you need to do iterative manipulations on the values but performance is important,
    consider writing the inner loop with cython or numba. See the [enhancing performance](enhancingperf.html#enhancingperf)
    section for some examples of this approach.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要对值进行迭代操作但性能很重要，请考虑使用cython或numba编写内部循环。请参阅[提高性能](enhancingperf.html#enhancingperf)部分，了解一些此方法的示例。
- en: Warning
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: You should **never modify** something you are iterating over. This is not guaranteed
    to work in all cases. Depending on the data types, the iterator returns a copy
    and not a view, and writing to it will have no effect!
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您绝对**不应该修改**正在迭代的内容。这并不保证在所有情况下都有效。根据数据类型，迭代器返回的是副本而不是视图，对其进行写入将不起作用！
- en: 'For example, in the following case setting the value has no effect:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下情况中设置值没有效果：
- en: '[PRE99]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: items
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: items
- en: 'Consistent with the dict-like interface, [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") iterates through key-value pairs:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 与类似字典的接口一致，[`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")迭代键值对：
- en: '**Series**: (index, scalar value) pairs'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：(索引, 标量值)对'
- en: '**DataFrame**: (column, Series) pairs'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：(列, Series)对'
- en: 'For example:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE100]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '### iterrows'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '### iterrows'
- en: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") allows you to iterate through the rows of a DataFrame
    as Series objects. It returns an iterator yielding each index value along with
    a Series containing the data in each row:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")允许您以Series对象的形式迭代DataFrame的行。它返回一个迭代器，产生每个索引值以及包含每行数据的Series：'
- en: '[PRE101]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") returns a Series for each row, it does **not** preserve
    dtypes across the rows (dtypes are preserved across columns for DataFrames). For
    example,
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 因为[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")为每行返回一个 Series，它**不会**在行之间保留数据类型（对于数据框的列，数据类型是保留的）。例如，
- en: '[PRE102]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'All values in `row`, returned as a Series, are now upcasted to floats, also
    the original integer value in column `x`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`row`中的所有值，作为一个 Series 返回，现在都被转换为浮点数，包括列`x`中的原始整数值：'
- en: '[PRE103]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: To preserve dtypes while iterating over the rows, it is better to use [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") which returns namedtuples of the values and which
    is generally much faster than [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代行时保留数据类型，最好使用[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")，它返回值的命名元组，通常比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")快得多。
- en: 'For instance, a contrived way to transpose the DataFrame would be:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，转置数据框的一种构造性方法可能是：
- en: '[PRE104]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: itertuples
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: itertuples
- en: The [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") method will return an iterator yielding a namedtuple
    for each row in the DataFrame. The first element of the tuple will be the row’s
    corresponding index value, while the remaining values are the row values.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 方法将返回一个迭代器，为数据框中的每一行产生一个命名元组。元组的第一个元素将是行对应的索引值，而其余值是行的数值。'
- en: 'For instance:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE105]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: This method does not convert the row to a Series object; it merely returns the
    values inside a namedtuple. Therefore, [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") preserves the data type of the values and is generally
    faster as [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不会将行转换为 Series 对象；它只是返回命名元组中的值。因此，[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 保留值的数据类型，并且通常比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")更快。
- en: Note
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The column names will be renamed to positional names if they are invalid Python
    identifiers, repeated, or start with an underscore. With a large number of columns
    (>255), regular tuples are returned.  ## .dt accessor'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列名无效的 Python 标识符、重复或以下划线开头，则列名将重命名为位置名称。如果列数较多（>255），则返回常规元组。## .dt 访问器
- en: '`Series` has an accessor to succinctly return datetime like properties for
    the *values* of the Series, if it is a datetime/period like Series. This will
    return a Series, indexed like the existing Series.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`有一个访问器，可以简洁地返回类似日期时间的属性，如果它是一个日期时间/周期类似的 Series。这将返回一个 Series，索引类似于现有的
    Series。'
- en: '[PRE106]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'This enables nice expressions like this:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得可以使用如下的表达式：
- en: '[PRE107]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'You can easily produces tz aware transformations:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地生成带有时区信息的转换：
- en: '[PRE108]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'You can also chain these types of operations:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以链接这些类型的操作：
- en: '[PRE109]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: You can also format datetime values as strings with [`Series.dt.strftime()`](../reference/api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime") which supports the same format as the standard [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime
    "(in Python v3.12)").
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用[`Series.dt.strftime()`](../reference/api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime")将日期时间值格式化为字符串，支持与标准[`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime
    "(in Python v3.12)")相同的格式。
- en: '[PRE110]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `.dt` accessor works for period and timedelta dtypes.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dt` 访问器适用于周期和时间增量数据类型。'
- en: '[PRE112]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Note
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`Series.dt` will raise a `TypeError` if you access with a non-datetime-like
    values.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用非日期时间类似的值访问，`Series.dt`将引发`TypeError`。
- en: Vectorized string methods
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量化字符串方法
- en: 'Series is equipped with a set of string processing methods that make it easy
    to operate on each element of the array. Perhaps most importantly, these methods
    exclude missing/NA values automatically. These are accessed via the Series’s `str`
    attribute and generally have names matching the equivalent (scalar) built-in string
    methods. For example:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: Series配备了一组字符串处理方法，使得在数组的每个元素上操作变得容易。最重要的是，这些方法会自动排除缺失/NA值。这些方法通过Series的`str`属性访问，通常与等效的（标量）内置字符串方法名称匹配。例如：
- en: '[PRE114]'
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Powerful pattern-matching methods are provided as well, but note that pattern-matching
    generally uses [regular expressions](https://docs.python.org/3/library/re.html)
    by default (and in some cases always uses them).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 还提供了强大的模式匹配方法，但请注意，模式匹配通常默认使用[正则表达式](https://docs.python.org/3/library/re.html)（在某些情况下总是使用）。
- en: Note
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to pandas 1.0, string methods were only available on `object` -dtype `Series`.
    pandas 1.0 added the [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") which is dedicated to strings. See [Text data types](text.html#text-types)
    for more.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas 1.0之前，字符串方法仅适用于`object`类型的`Series`。pandas 1.0添加了[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")，专门用于字符串。更多信息请参见[文本数据类型](text.html#text-types)。
- en: Please see [Vectorized String Methods](text.html#text-string-methods) for a
    complete description.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[矢量化字符串方法](text.html#text-string-methods)获取完整描述。
- en: '## Sorting'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '## 排序'
- en: 'pandas supports three kinds of sorting: sorting by index labels, sorting by
    column values, and sorting by a combination of both.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持三种排序方式：按索引标签排序、按列值排序以及按两者的组合排序。
- en: '### By index'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '### 按索引排序'
- en: The [`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index") and [`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") methods are used to sort a pandas object by its
    index levels.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index")和[`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")方法用于按其索引级别对pandas对象进行排序。'
- en: '[PRE115]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Sorting by index also supports a `key` parameter that takes a callable function
    to apply to the index being sorted. For `MultiIndex` objects, the key is applied
    per-level to the levels specified by `level`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 按索引排序还支持一个`key`参数，该参数接受一个可调用函数，用于对要排序的索引应用。对于`MultiIndex`对象，该键会按照指定的`level`逐级应用到各级别。
- en: '[PRE116]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'For information on key sorting by value, see [value sorting](#basics-sort-value-key).  ###
    By values'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 有关按值排序的键排序信息，请参见[值排序](#basics-sort-value-key)。### 按值排序
- en: The [`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values") method is used to sort a `Series` by its values.
    The [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method is used to sort a `DataFrame` by its column
    or row values. The optional `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may used to specify one or more columns to use
    to determine the sorted order.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values")方法用于按值对`Series`进行排序。[`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")方法用于按其列或行值对`DataFrame`进行排序。可选的`by`参数可用于指定一个或多个列以确定排序顺序。'
- en: '[PRE118]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The `by` parameter can take a list of column names, e.g.:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`by`参数可以接受一个列名列表，例如：'
- en: '[PRE119]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'These methods have special treatment of NA values via the `na_position` argument:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法通过`na_position`参数对NA值进行特殊处理：
- en: '[PRE120]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Sorting also supports a `key` parameter that takes a callable function to apply
    to the values being sorted.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 排序还支持一个`key`参数，该参数接受一个可调用函数，用于对要排序的值应用。
- en: '[PRE121]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '`key` will be given the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") of values and should return a `Series` or array of the same shape
    with the transformed values. For `DataFrame` objects, the key is applied per column,
    so the key should still expect a Series and return a Series, e.g.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`将获得值的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")，并应返回具有相同形状的转换值的`Series`或数组。对于`DataFrame`对象，键会按列应用，因此键仍应期望一个Series并返回一个Series，例如：'
- en: '[PRE123]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The name or type of each column can be used to apply different functions to
    different columns.  ### By indexes and values'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '每列的名称或类型可用于对不同列应用不同的函数。  ### 通过索引和值'
- en: Strings passed as the `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may refer to either columns or index level names.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")的`by`参数可能是列名或索引级别名称。
- en: '[PRE125]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Sort by ‘second’ (index) and ‘A’ (column)
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 按‘second’（索引）和‘A’（列）排序
- en: '[PRE126]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Note
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If a string matches both a column name and an index level name then a warning
    is issued and the column takes precedence. This will result in an ambiguity error
    in a future version.  ### searchsorted'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '如果一个字符串既匹配列名又匹配索引级别名称，则会发出警告，并且列优先。这将导致在将来版本中出现歧义错误。  ### searchsorted'
- en: Series has the [`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") method, which works similarly to [`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(in NumPy v1.26)").
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: Series具有[`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted")方法，其工作方式类似于[`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(在NumPy v1.26中)")。
- en: '[PRE127]  ### smallest / largest values'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE127]  ### 最小/最大值'
- en: '`Series` has the [`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest") and [`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest") methods which return the smallest or largest \(n\) values.
    For a large `Series` this can be much faster than sorting the entire Series and
    calling `head(n)` on the result.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`具有[`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest")和[`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest")方法，它们返回最小或最大的\(n\)值。对于大型`Series`，这比对整个Series进行排序并在结果上调用`head(n)`要快得多。'
- en: '[PRE128]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '`DataFrame` also has the `nlargest` and `nsmallest` methods.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`还具有`nlargest`和`nsmallest`方法。'
- en: '[PRE129]  ### Sorting by a MultiIndex column'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE129]  ### 按MultiIndex列排序'
- en: You must be explicit about sorting when the column is a MultiIndex, and fully
    specify all levels to `by`.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 当列是MultiIndex时，必须明确排序，并完全指定所有级别为`by`。
- en: '[PRE130]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Copying
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制
- en: 'The [`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy") method on pandas objects copies the underlying data (though
    not the axis indexes, since they are immutable) and returns a new object. Note
    that **it is seldom necessary to copy objects**. For example, there are only a
    handful of ways to alter a DataFrame *in-place*:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: pandas对象上的[`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy")方法会复制底层数据（尽管不会复制轴索引，因为它们是不可变的）并返回一个新对象。请注意**几乎不需要复制对象**。例如，只有少数几种方法可以*原地*更改DataFrame：
- en: Inserting, deleting, or modifying a column.
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入、删除或修改列。
- en: Assigning to the `index` or `columns` attributes.
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给`index`或`columns`属性。
- en: For homogeneous data, directly modifying the values via the `values` attribute
    or advanced indexing.
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于同质数据，可以通过`values`属性或高级索引直接修改值。
- en: To be clear, no pandas method has the side effect of modifying your data; almost
    every method returns a new object, leaving the original object untouched. If the
    data is modified, it is because you did so explicitly.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 明确指出，没有pandas方法会具有修改数据的副作用；几乎每个方法都会返回一个新对象，保持原始对象不变。如果数据被修改，那是因为您明确这样做了。
- en: '## dtypes'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '## dtypes'
- en: For the most part, pandas uses NumPy arrays and dtypes for Series or individual
    columns of a DataFrame. NumPy provides support for `float`, `int`, `bool`, `timedelta64[ns]`
    and `datetime64[ns]` (note that NumPy does not support timezone-aware datetimes).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，pandas使用NumPy数组和dtype来处理Series或DataFrame的单个列。NumPy支持`float`、`int`、`bool`、`timedelta64[ns]`和`datetime64[ns]`（请注意，NumPy不支持时区感知的日期时间）。
- en: pandas and third-party libraries *extend* NumPy’s type system in a few places.
    This section describes the extensions pandas has made internally. See [Extension
    types](../development/extending.html#extending-extension-types) for how to write
    your own extension that works with pandas. See [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html)
    for a list of third-party libraries that have implemented an extension.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 和第三方库在一些地方*扩展*了 NumPy 的类型系统。本节描述了 pandas 内部所做的扩展。查看 [扩展类型](../development/extending.html#extending-extension-types)
    了解如何编写适用于 pandas 的自定义扩展。查看 [生态系统页面](https://pandas.pydata.org/community/ecosystem.html)
    查看已实现扩展的第三方库列表。
- en: The following table lists all of pandas extension types. For methods requiring
    `dtype` arguments, strings can be specified as indicated. See the respective documentation
    sections for more on each type.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了所有 pandas 的扩展类型。对于需要 `dtype` 参数的方法，可以按照指示指定字符串。查看各自的文档部分了解更多关于每种类型的信息。
- en: '| Kind of Data | Data Type | Scalar | Array | String Aliases |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 数据类型 | 标量 | 数组 | 字符串别名 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| [tz-aware datetime](timeseries.html#timeseries-timezone) | [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") | `''datetime64[ns, <tz>]''` |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [时区感知日期时间](timeseries.html#timeseries-timezone) | [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") | `''datetime64[ns, <tz>]''` |'
- en: '| [Categorical](categorical.html#categorical) | [`CategoricalDtype`](../reference/api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) | [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") | `''category''` |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| [分类](categorical.html#categorical) | [`CategoricalDtype`](../reference/api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (无) | [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") | `''category''` |'
- en: '| [period (time spans)](timeseries.html#timeseries-periods) | [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype") | [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") | [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") `''Period[<freq>]''` | `''period[<freq>]''`, |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| [周期（时间跨度）](timeseries.html#timeseries-periods) | [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype") | [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") | [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") `''Period[<freq>]''` | `''period[<freq>]''`, |'
- en: '| [sparse](sparse.html#sparse) | [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype") | (none) | [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") | `''Sparse''`, `''Sparse[int]''`, `''Sparse[float]''`
    |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| [稀疏](sparse.html#sparse) | [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype") | (无) | [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") | `''Sparse''`, `''Sparse[int]''`, `''Sparse[float]''`
    |'
- en: '| [intervals](advanced.html#advanced-intervalindex) | [`IntervalDtype`](../reference/api/pandas.IntervalDtype.html#pandas.IntervalDtype
    "pandas.IntervalDtype") | [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") | [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") | `''interval''`, `''Interval''`, `''Interval[<numpy_dtype>]''`,
    `''Interval[datetime64[ns, <tz>]]''`, `''Interval[timedelta64[<freq>]]''` |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| [区间](advanced.html#advanced-intervalindex) | [`IntervalDtype`](../reference/api/pandas.IntervalDtype.html#pandas.IntervalDtype
    "pandas.IntervalDtype") | [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") | [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") | `''interval''`, `''Interval''`, `''Interval[<numpy_dtype>]''`,
    `''Interval[datetime64[ns, <tz>]]''`, `''Interval[timedelta64[<freq>]]''` |'
- en: '| [nullable integer](integer_na.html#integer-na) | [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype"), … | (none) | [`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") | `''Int8''`, `''Int16''`, `''Int32''`, `''Int64''`,
    `''UInt8''`, `''UInt16''`, `''UInt32''`, `''UInt64''` |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| [可空整数](integer_na.html#integer-na) | [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype"), … | (无) | [`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") | `''Int8''`, `''Int16''`, `''Int32''`, `''Int64''`,
    `''UInt8''`, `''UInt16''`, `''UInt32''`, `''UInt64''` |'
- en: '| [nullable float](../reference/arrays.html#api-arrays-float-na) | [`Float64Dtype`](../reference/api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype"), … | (none) | [`arrays.FloatingArray`](../reference/api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray") | `''Float32''`, `''Float64''` |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| [可空浮点数](../reference/arrays.html#api-arrays-float-na) | [`Float64Dtype`](../reference/api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype"), … | (无) | [`arrays.FloatingArray`](../reference/api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray") | `''Float32''`, `''Float64''` |'
- en: '| [Strings](text.html#text) | [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") | [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") | `''string''` |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| [字符串](text.html#text) | [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12)") | [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") | `''string''` |'
- en: '| [Boolean (with NA)](../reference/arrays.html#api-arrays-bool) | [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") | [`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") | `''boolean''` |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| [布尔值（带 NA）](../reference/arrays.html#api-arrays-bool) | [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.12)") | [`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") | `''boolean''` |'
- en: pandas has two ways to store strings.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 有两种存储字符串的方式。
- en: '`object` dtype, which can hold any Python object, including strings.'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object` 数据类型，可以保存任何 Python 对象，包括字符串。'
- en: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), which is dedicated to strings.'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")，专门用于字符串。'
- en: Generally, we recommend using [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"). See [Text data types](text.html#text-types) for more.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们建议使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")。更多信息请参见[文本数据类型](text.html#text-types)。
- en: Finally, arbitrary objects may be stored using the `object` dtype, but should
    be avoided to the extent possible (for performance and interoperability with other
    libraries and methods. See [object conversion](#basics-object-conversion)).
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，任意对象可以使用`object`数据类型存储，但应尽可能避免（出于性能和与其他库和方法的互操作性考虑。请参见[对象转换](#basics-object-conversion)）。
- en: A convenient [`dtypes`](../reference/api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") attribute for DataFrame returns a Series with the data
    type of each column.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的[`dtypes`](../reference/api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes")属性用于返回 DataFrame 的每列的数据类型的 Series。
- en: '[PRE131]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: On a `Series` object, use the [`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype") attribute.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`对象上，使用[`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype")属性。
- en: '[PRE132]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: If a pandas object contains data with multiple dtypes *in a single column*,
    the dtype of the column will be chosen to accommodate all of the data types (`object`
    is the most general).
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 pandas 对象包含具有多种数据类型*在单个列中*的数据，则列的数据类型将被选择以容纳所有数据类型（`object`是最通用的）。
- en: '[PRE133]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The number of columns of each type in a `DataFrame` can be found by calling
    `DataFrame.dtypes.value_counts()`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型的`DataFrame`的列数可以通过调用`DataFrame.dtypes.value_counts()`来找到。
- en: '[PRE134]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Numeric dtypes will propagate and can coexist in DataFrames. If a dtype is passed
    (either directly via the `dtype` keyword, a passed `ndarray`, or a passed `Series`),
    then it will be preserved in DataFrame operations. Furthermore, different numeric
    dtypes will **NOT** be combined. The following example will give you a taste.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 数值数据类型将传播并可以共存于数据框中。如果传递了数据类型（可以直接通过`dtype`关键字、传递的`ndarray`或传递的`Series`），那么它将在数据框操作中保留。此外，不同的数值数据类型将**不会**被合并。以下示例将让你一窥其中。
- en: '[PRE135]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: defaults
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认值
- en: By default integer types are `int64` and float types are `float64`, *regardless*
    of platform (32-bit or 64-bit). The following will all result in `int64` dtypes.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整数类型为`int64`，浮点类型为`float64`，*不受*平台（32位或64位）影响。以下都将导致`int64`数据类型。
- en: '[PRE136]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Note that Numpy will choose *platform-dependent* types when creating arrays.
    The following **WILL** result in `int32` on 32-bit platform.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当创建数组时，Numpy将选择*依赖于平台*的类型。在32位平台上，以下**将**导致`int32`。
- en: '[PRE137]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: upcasting
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向上转换
- en: Types can potentially be *upcasted* when combined with other types, meaning
    they are promoted from the current type (e.g. `int` to `float`).
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 当与其他类型组合时，类型可能会被*向上转换*，这意味着它们从当前类型（例如`int`到`float`）提升。
- en: '[PRE138]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will return the *lower-common-denominator* of the
    dtypes, meaning the dtype that can accommodate **ALL** of the types in the resulting
    homogeneous dtyped NumPy array. This can force some *upcasting*.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")将返回数据类型的*最低公共分母*，即可以容纳结果同类数据类型的NumPy数组。这可能会强制进行一些*向上转换*。'
- en: '[PRE139]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: astype
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype
- en: You can use the [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") method to explicitly convert dtypes from one to another.
    These will by default return a copy, even if the dtype was unchanged (pass `copy=False`
    to change this behavior). In addition, they will raise an exception if the astype
    operation is invalid.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")方法将数据类型明确转换为另一种。默认情况下，即使数据类型未更改（通过传递`copy=False`来更改此行为），它们也将返回一个副本。此外，如果astype操作无效，它们将引发异常。
- en: Upcasting is always according to the **NumPy** rules. If two different dtypes
    are involved in an operation, then the more *general* one will be used as the
    result of the operation.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 向上转换始终遵循**NumPy**规则。如果操作涉及两种不同的数据类型，则将使用更*通用*的数据类型作为操作的结果。
- en: '[PRE140]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")将列的子集转换为指定类型。
- en: '[PRE141]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Convert certain columns to a specific dtype by passing a dict to [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")将某些列转换为特定数据类型。
- en: '[PRE142]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Note
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When trying to convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") and [`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc"), upcasting occurs.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")和[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc")将列的子集转换为指定类型时，将发生向上转换。
- en: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    tries to fit in what we are assigning to the current dtypes, while `[]` will overwrite
    them taking the dtype from the right hand side. Therefore the following piece
    of code produces the unintended result.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")尝试适应我们分配给当前数据类型的内容，而`[]`将覆盖它们，从右侧获取数据类型。因此，以下代码片段会产生意外结果。'
- en: '[PRE143]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '### object conversion'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '### 对象转换'
- en: pandas offers various functions to try to force conversion of types from the
    `object` dtype to other types. In cases where the data is already of the correct
    type, but stored in an `object` array, the [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods can be used to soft convert to the correct
    type.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供了各种函数来尝试将`object`数据类型转换为其他类型。在数据已经是正确类型但存储在`object`数组中的情况下，可以使用[`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")和[`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects")方法进行软转换为正确类型。
- en: '[PRE144]'
  id: totrans-488
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Because the data was transposed the original inference stored all columns as
    object, which `infer_objects` will correct.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据被转置，原始推断将所有列存储为对象，`infer_objects`将进行更正。
- en: '[PRE145]'
  id: totrans-490
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'The following functions are available for one dimensional object arrays or
    scalars to perform hard conversion of objects to a specified type:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数适用于一维对象数组或标量，以执行将对象硬转换为指定类型的操作：
- en: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") (conversion to numeric dtypes)'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")（转换为数值数据类型）'
- en: '[PRE146]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") (conversion to datetime objects)'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")（转换为日期时间对象）'
- en: '[PRE147]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") (conversion to timedelta objects)'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")（转换为时间间隔对象）'
- en: '[PRE148]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'To force a conversion, we can pass in an `errors` argument, which specifies
    how pandas should deal with elements that cannot be converted to desired dtype
    or object. By default, `errors=''raise''`, meaning that any errors encountered
    will be raised during the conversion process. However, if `errors=''coerce''`,
    these errors will be ignored and pandas will convert problematic elements to `pd.NaT`
    (for datetime and timedelta) or `np.nan` (for numeric). This might be useful if
    you are reading in data which is mostly of the desired dtype (e.g. numeric, datetime),
    but occasionally has non-conforming elements intermixed that you want to represent
    as missing:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制转换，我们可以传入一个`errors`参数，指定pandas如何处理无法转换为所需数据类型或对象的元素。默认情况下，`errors='raise'`，意味着在转换过程中遇到任何错误都将被引发。但是，如果`errors='coerce'`，这些错误将被忽略，pandas将把有问题的元素转换为`pd.NaT`（对于日期时间和时间间隔）或`np.nan`（对于数值）。如果您正在读取大部分是所需数据类型（例如数值、日期时间）的数据，但偶尔混有不符合规范的元素，您希望将其表示为缺失值，则这可能很有用：
- en: '[PRE149]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'In addition to object conversion, [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") provides another argument `downcast`, which gives the option
    of downcasting the newly (or already) numeric data to a smaller dtype, which can
    conserve memory:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对象转换，[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")还提供另一个参数`downcast`，该参数可以将新（或已有）的数值数据向下转换为较小的数据类型，以节省内存：
- en: '[PRE150]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'As these methods apply only to one-dimensional arrays, lists or scalars; they
    cannot be used directly on multi-dimensional objects such as DataFrames. However,
    with [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"), we can “apply” the function over each column efficiently:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些方法仅适用于一维数组、列表或标量；不能直接用于多维对象，如DataFrames。但是，通过[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")，我们可以高效地对每列应用函数：
- en: '[PRE151]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: gotchas
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Performing selection operations on `integer` type data can easily upcast the
    data to `floating`. The dtype of the input data will be preserved in cases where
    `nans` are not introduced. See also [Support for integer NA](gotchas.html#gotchas-intna).
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在`integer`类型数据上执行选择操作很容易将数据向上转换为`floating`。在不引入`nans`的情况下，输入数据的数据类型将被保留。另请参阅[对整数NA的支持](gotchas.html#gotchas-intna)。
- en: '[PRE152]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: While float dtypes are unchanged.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数数据类型保持不变。
- en: '[PRE153]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Selecting columns based on `dtype`
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于`dtype`选择列
- en: The [`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") method implements subsetting of columns based
    on their `dtype`.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")方法实现基于`dtype`的列子集选择。'
- en: 'First, let’s create a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a slew of different dtypes:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个具有各种不同数据类型的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")：
- en: '[PRE154]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'And the dtypes:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 以及数据类型：
- en: '[PRE155]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") has two parameters `include` and `exclude` that
    allow you to say “give me the columns *with* these dtypes” (`include`) and/or
    “give the columns *without* these dtypes” (`exclude`).'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")有两个参数`include`和`exclude`，允许您说“给我这些数据类型的列”（`include`）和/或“给我没有这些数据类型的列”（`exclude`）。'
- en: 'For example, to select `bool` columns:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要选择`bool`列：
- en: '[PRE156]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'You can also pass the name of a dtype in the [NumPy dtype hierarchy](https://numpy.org/doc/stable/reference/arrays.scalars.html):'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[NumPy 数据类型层次结构](https://numpy.org/doc/stable/reference/arrays.scalars.html)中传递数据类型的名称：
- en: '[PRE157]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") also works with generic dtypes as well.'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")也适用于通用数据类型。'
- en: 'For example, to select all numeric and boolean columns while excluding unsigned
    integers:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要选择所有数值和布尔列，同时排除无符号整数：
- en: '[PRE158]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'To select string columns you must use the `object` dtype:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择字符串列，必须使用`object`数据类型：
- en: '[PRE159]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'To see all the child dtypes of a generic `dtype` like `numpy.number` you can
    define a function that returns a tree of child dtypes:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看类似`numpy.number`这样的通用`dtype`的所有子数据类型，您可以定义一个返回子数据类型树的函数：
- en: '[PRE160]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'All NumPy dtypes are subclasses of `numpy.generic`:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 NumPy 数据类型都是`numpy.generic`的子类：
- en: '[PRE161]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Note
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: pandas also defines the types `category`, and `datetime64[ns, tz]`, which are
    not integrated into the normal NumPy hierarchy and won’t show up with the above
    function.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 还定义了类型`category`和`datetime64[ns, tz]`，它们没有集成到正常的 NumPy 层次结构中，不会显示在上述函数中。
- en: '## Head and tail'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '## Head 和 tail'
- en: To view a small sample of a Series or DataFrame object, use the [`head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") and [`tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail") methods. The default number of elements to display is
    five, but you may pass a custom number.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Series 或 DataFrame 对象的小样本，请使用[`head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head")和[`tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail")方法。默认显示的元素数量为五个，但您可以传递自定义数量。
- en: '[PRE162]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '## Attributes and underlying data'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '## 属性和底层数据'
- en: pandas objects have a number of attributes enabling you to access the metadata
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象具有许多属性，使您能够访问元数据
- en: '**shape**: gives the axis dimensions of the object, consistent with ndarray'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shape**：给出对象的轴维度，与 ndarray 一致'
- en: Axis labels
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴标签
- en: '**Series**: *index* (only axis)'
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：*索引*（仅轴）'
- en: '**DataFrame**: *index* (rows) and *columns*'
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：*索引*（行）和*列*'
- en: Note, **these attributes can be safely assigned to**!
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**这些属性可以安全地分配给**！
- en: '[PRE163]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: pandas objects ([`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index"),
    [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"),
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"))
    can be thought of as containers for arrays, which hold the actual data and do
    the actual computation. For many types, the underlying array is a [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). However, pandas and 3rd party libraries may *extend* NumPy’s
    type system to add support for custom arrays (see [dtypes](#basics-dtypes)).
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象（[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")、[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")、[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")）可以被视为数组的容器，其中保存实际数据并执行实际计算。对于许多类型，底层数组是一个[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray)。但是，pandas
    和第三方库可能会*扩展* NumPy 的类型系统以支持自定义数组（请参阅[dtypes](#basics-dtypes)）。
- en: To get the actual data inside a [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), use the `.array` property
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")或[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")内的实际数据，请使用`.array`属性
- en: '[PRE164]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[`array`](../reference/api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")
    will always be an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"). The exact details of what an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray") is and why pandas uses them are a bit
    beyond the scope of this introduction. See [dtypes](#basics-dtypes) for more.'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array`](../reference/api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")将始终是一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")。关于[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")的确切细节以及pandas为什么使用它们略微超出了本介绍的范围。更多信息请参见[dtypes](#basics-dtypes)。'
- en: If you know you need a NumPy array, use [`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") or `numpy.asarray()`.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道您需要一个NumPy数组，请使用[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")或`numpy.asarray()`。
- en: '[PRE165]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: When the Series or Index is backed by an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), [`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") may involve copying data and coercing values. See [dtypes](#basics-dtypes)
    for more.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 当Series或Index由[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")支持时，[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")可能涉及复制数据和强制值。更多信息请参见[dtypes](#basics-dtypes)。
- en: '[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") gives some control over the `dtype` of the resulting
    [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"). For example, consider datetimes with timezones. NumPy doesn’t
    have a dtype to represent timezone-aware datetimes, so there are two possibly
    useful representations:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")可以对生成的[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26)")的`dtype`进行一些控制。例如，考虑带有时区的日期时间。NumPy没有一种dtype来表示带时区的日期时间，因此有两种可能有用的表示方式：'
- en: An object-dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)") with [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects, each with the correct `tz`
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个带有[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")对象的对象数据类型[`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26)")，每个对象都具有正确的`tz`
- en: A `datetime64[ns]` -dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v1.26)"), where the values have been converted to UTC and the timezone
    discarded
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个`datetime64[ns]` -dtype [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(在 NumPy v1.26)")，其中值已转换为UTC并且时区已丢弃
- en: Timezones may be preserved with `dtype=object`
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 时区可能会被保留为`dtype=object`
- en: '[PRE166]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Or thrown away with `dtype='datetime64[ns]'`
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`dtype='datetime64[ns]'`丢弃
- en: '[PRE167]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Getting the “raw data” inside a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is possibly a bit more complex. When your `DataFrame` only
    has a single data type for all the columns, [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will return the underlying data:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 获取[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")内的“原始数据”可能会更加复杂。当您的`DataFrame`所有列只有一个数据类型时，[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")将返回底层数据：
- en: '[PRE168]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: If a DataFrame contains homogeneously-typed data, the ndarray can actually be
    modified in-place, and the changes will be reflected in the data structure. For
    heterogeneous data (e.g. some of the DataFrame’s columns are not all the same
    dtype), this will not be the case. The values attribute itself, unlike the axis
    labels, cannot be assigned to.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果DataFrame包含同质类型数据，ndarray实际上可以就地修改，并且更改将反映在数据结构中。对于异构数据（例如DataFrame的某些列不全是相同dtype），情况并非如此。与轴标签不同，值属性本身不能被赋值。
- en: Note
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When working with heterogeneous data, the dtype of the resulting ndarray will
    be chosen to accommodate all of the data involved. For example, if strings are
    involved, the result will be of object dtype. If there are only floats and integers,
    the resulting array will be of float dtype.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理异构数据时，生成的ndarray的dtype将被选择以容纳所有涉及的数据。例如，如果涉及字符串，则结果将是对象dtype。如果只有浮点数和整数，则生成的数组将是浮点dtype。
- en: 'In the past, pandas recommended [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") or [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") for extracting the data from a Series or DataFrame.
    You’ll still find references to these in old code bases and online. Going forward,
    we recommend avoiding `.values` and using `.array` or `.to_numpy()`. `.values`
    has the following drawbacks:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，pandas推荐使用[`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values")或[`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values")来从Series或DataFrame中提取数据。您仍然会在旧代码库和在线上找到对这些的引用。未来，我们建议避免使用`.values`，而是使用`.array`或`.to_numpy()`。`.values`具有以下缺点：
- en: When your Series contains an [extension type](../development/extending.html#extending-extension-types),
    it’s unclear whether [`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values") returns a NumPy array or the extension array. [`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array") will always return an [`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray"), and will never copy data. [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") will always return a NumPy array, potentially at the
    cost of copying / coercing values.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的Series包含[扩展类型](../development/extending.html#extending-extension-types)时，不清楚[`Series.values`](../reference/api/pandas.Series.values.html#pandas.Series.values
    "pandas.Series.values")是返回NumPy数组还是扩展数组。[`Series.array`](../reference/api/pandas.Series.array.html#pandas.Series.array
    "pandas.Series.array")将始终返回一个[`ExtensionArray`](../reference/api/pandas.api.extensions.ExtensionArray.html#pandas.api.extensions.ExtensionArray
    "pandas.api.extensions.ExtensionArray")，并且永远不会复制数据。[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")将始终返回一个NumPy数组，可能会以复制/强制转换值为代价。
- en: When your DataFrame contains a mixture of data types, [`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") may involve copying data and coercing values to a common
    dtype, a relatively expensive operation. [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy"), being a method, makes it clearer that the returned
    NumPy array may not be a view on the same data in the DataFrame.
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的DataFrame包含不同数据类型时，[`DataFrame.values`](../reference/api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values")可能涉及复制数据并将值强制转换为公共dtype，这是一个相对昂贵的操作。作为一个方法，[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")更清晰地表明返回的NumPy数组可能不是DataFrame中相同数据的视图。
- en: '## Accelerated operations'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '## 加速操作'
- en: pandas has support for accelerating certain types of binary numerical and boolean
    operations using the `numexpr` library and the `bottleneck` libraries.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持使用`numexpr`库和`bottleneck`库加速某些类型的二进制数值和布尔运算。
- en: These libraries are especially useful when dealing with large data sets, and
    provide large speedups. `numexpr` uses smart chunking, caching, and multiple cores.
    `bottleneck` is a set of specialized cython routines that are especially fast
    when dealing with arrays that have `nans`.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大型数据集时，这些库特别有用，并提供大幅加速。`numexpr`使用智能分块、缓存和多核。`bottleneck`是一组专门的cython例程，当处理具有`nans`的数组时特别快。
- en: 'Here is a sample (using 100 column x 100,000 row `DataFrames`):'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例（使用100列 x 100,000行的`DataFrames`）：
- en: '| Operation | 0.11.0 (ms) | Prior Version (ms) | Ratio to Prior |'
  id: totrans-568
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 0.11.0（毫秒） | 之前版本（毫秒） | 相对于之前的比率 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `df1 > df2` | 13.32 | 125.35 | 0.1063 |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| `df1 > df2` | 13.32 | 125.35 | 0.1063 |'
- en: '| `df1 * df2` | 21.71 | 36.63 | 0.5928 |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| `df1 * df2` | 21.71 | 36.63 | 0.5928 |'
- en: '| `df1 + df2` | 22.04 | 36.50 | 0.6039 |'
  id: totrans-572
  prefs: []
  type: TYPE_TB
  zh: '| `df1 + df2` | 22.04 | 36.50 | 0.6039 |'
- en: You are highly encouraged to install both libraries. See the section [Recommended
    Dependencies](../getting_started/install.html#install-recommended-dependencies)
    for more installation info.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 你强烈建议安装这两个库。查看[推荐依赖项](../getting_started/install.html#install-recommended-dependencies)部分获取更多安装信息。
- en: 'These are both enabled to be used by default, you can control this by setting
    the options:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者默认启用，您可以通过设置选项来控制：
- en: '[PRE169]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '## Flexible binary operations'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '## 灵活的二进制操作'
- en: 'With binary operations between pandas data structures, there are two key points
    of interest:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 数据结构之间进行二进制操作时，有两个关键点值得关注：
- en: Broadcasting behavior between higher- (e.g. DataFrame) and lower-dimensional
    (e.g. Series) objects.
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高维（例如 DataFrame）和低维（例如 Series）对象之间的广播行为。
- en: Missing data in computations.
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算中的缺失数据。
- en: We will demonstrate how to manage these issues independently, though they can
    be handled simultaneously.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示如何独立处理这些问题，尽管它们可以同时处理。
- en: Matching / broadcasting behavior
  id: totrans-581
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匹配/广播行为
- en: 'DataFrame has the methods [`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add"), [`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub"), [`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul"), [`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div") and related functions [`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd"), [`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub"), … for carrying out binary operations. For broadcasting
    behavior, Series input is of primary interest. Using these functions, you can
    use to either match on the *index* or *columns* via the **axis** keyword:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 具有方法[`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add")、[`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub")、[`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul")、[`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div")和相关函数[`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd")、[`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub")等用于执行二进制操作。对于广播行为，Series 输入是主要关注点。使用这些函数，您可以通过 **axis**
    关键字来匹配 *索引* 或 *列*：
- en: '[PRE170]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Furthermore you can align a level of a MultiIndexed DataFrame with a Series.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将 MultiIndexed DataFrame 的一个级别与 Series 对齐。
- en: '[PRE171]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Series and Index also support the [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)") builtin. This function takes the floor division and modulo
    operation at the same time returning a two-tuple of the same type as the left
    hand side. For example:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 Index 也支持[`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)")内置函数。该函数同时进行地板除法和取模运算，返回与左侧相同类型的两元组。例如：
- en: '[PRE172]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'We can also do elementwise [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)"):'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以逐元素进行[`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)")操作：
- en: '[PRE173]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Missing data / operations with fill values
  id: totrans-590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺失数据/使用填充值的操作
- en: In Series and DataFrame, the arithmetic functions have the option of inputting
    a *fill_value*, namely a value to substitute when at most one of the values at
    a location are missing. For example, when adding two DataFrame objects, you may
    wish to treat NaN as 0 unless both DataFrames are missing that value, in which
    case the result will be NaN (you can later replace NaN with some other value using
    `fillna` if you wish).
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Series 和 DataFrame 中，算术函数有一个 *fill_value* 选项，即在某个位置的值中至多有一个缺失时要替换的值。例如，当添加两个
    DataFrame 对象时，您可能希望将 NaN 视为 0，除非两个 DataFrame 都缺少该值，此时结果将为 NaN（如果需要，您可以稍后使用 `fillna`
    将 NaN 替换为其他值）。
- en: '[PRE174]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '### Flexible comparisons'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '### 灵活的比较'
- en: 'Series and DataFrame have the binary comparison methods `eq`, `ne`, `lt`, `gt`,
    `le`, and `ge` whose behavior is analogous to the binary arithmetic operations
    described above:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 具有二进制比较方法 `eq`、`ne`、`lt`、`gt`、`le` 和 `ge`，其行为类似于上述二进制算术操作：
- en: '[PRE175]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'These operations produce a pandas object of the same type as the left-hand-side
    input that is of dtype `bool`. These `boolean` objects can be used in indexing
    operations, see the section on [Boolean indexing](indexing.html#indexing-boolean).  ###
    Boolean reductions'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作产生与左侧输入相同类型的 dtype 为 `bool` 的 pandas 对象。这些 `boolean` 对象可以用于索引操作，请参阅 [布尔索引](indexing.html#indexing-boolean)
    部分。### 布尔规约
- en: 'You can apply the reductions: [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty"), [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any"), [`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all"), and [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool") to provide a way to summarize a boolean result.'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以应用以下规约：[`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty")，[`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any")，[`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") 和 [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool") 来提供一种总结布尔结果的方式。
- en: '[PRE176]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: You can reduce to a final boolean value.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将其减少为最终布尔值。
- en: '[PRE177]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: You can test if a pandas object is empty, via the [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") property.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") 属性来测试 pandas 对象是否为空。
- en: '[PRE178]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Warning
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Asserting the truthiness of a pandas object will raise an error, as the testing
    of the emptiness or values is ambiguous.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 pandas 对象的真实性将引发错误，因为对空值或值的测试是模棱两可的。
- en: '[PRE179]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'See [gotchas](gotchas.html#gotchas-truth) for a more detailed discussion.  ###
    Comparing if objects are equivalent'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细讨论，请参阅 [陷阱](gotchas.html#gotchas-truth)。### 比较对象是否等价
- en: 'Often you may find that there is more than one way to compute the same result.
    As a simple example, consider `df + df` and `df * 2`. To test that these two computations
    produce the same result, given the tools shown above, you might imagine using
    `(df + df == df * 2).all()`. But in fact, this expression is False:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您可能会发现有多种方法可以计算相同的结果。举个简单的例子，考虑 `df + df` 和 `df * 2`。为了测试这两个计算是否产生相同的结果，根据上面展示的工具，您可以想象使用
    `(df + df == df * 2).all()`。但事实上，这个表达式是 False：
- en: '[PRE181]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Notice that the boolean DataFrame `df + df == df * 2` contains some False values!
    This is because NaNs do not compare as equals:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到布尔型 DataFrame `df + df == df * 2` 包含一些 False 值！这是因为 NaN 不会被视为相等：
- en: '[PRE182]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: So, NDFrames (such as Series and DataFrames) have an [`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals") method for testing equality, with NaNs in corresponding
    locations treated as equal.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，NDFrames（如 Series 和 DataFrames）具有一个用于测试相等性的 [`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals") 方法，其中对应位置的 NaN 被视为相等。
- en: '[PRE183]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Note that the Series or DataFrame index needs to be in the same order for equality
    to be True:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了使相等性为 True，Series 或 DataFrame 索引需要按相同顺序排列：
- en: '[PRE184]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Comparing array-like objects
  id: totrans-616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较类似数组的对象
- en: 'You can conveniently perform element-wise comparisons when comparing a pandas
    data structure with a scalar value:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 pandas 数据结构与标量值进行比较时，您可以方便地执行逐元素比较：
- en: '[PRE185]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'pandas also handles element-wise comparisons between different array-like objects
    of the same length:'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 还处理了长度相同的不同类似数组对象之间的逐元素比较：
- en: '[PRE186]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Trying to compare `Index` or `Series` objects of different lengths will raise
    a ValueError:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试比较不同长度的 `Index` 或 `Series` 对象将引发 ValueError：
- en: '[PRE187]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Combining overlapping data sets
  id: totrans-623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并重叠的数据集
- en: 'A problem occasionally arising is the combination of two similar data sets
    where values in one are preferred over the other. An example would be two data
    series representing a particular economic indicator where one is considered to
    be of “higher quality”. However, the lower quality series might extend further
    back in history or have more complete data coverage. As such, we would like to
    combine two DataFrame objects where missing values in one DataFrame are conditionally
    filled with like-labeled values from the other DataFrame. The function implementing
    this operation is [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first"), which we illustrate:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 一个偶尔出现的问题是合并两个相似的数据集，其中一个数据集中的值优先于另一个。一个例子是代表特定经济指标的两个数据系列，其中一个被认为是“更高质量”的。然而，较低质量的系列可能在历史上延伸得更长，或者数据覆盖更完整。因此，我们希望将两个
    DataFrame 对象合并，其中一个 DataFrame 中的缺失值有条件地用另一个 DataFrame 中的相同标签值填充。实现此操作的函数是[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")，我们进行如下说明：
- en: '[PRE188]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: General DataFrame combine
  id: totrans-626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用 DataFrame 合并
- en: The [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") method above calls the more general [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine"). This method takes another DataFrame and a combiner
    function, aligns the input DataFrame and then passes the combiner function pairs
    of Series (i.e., columns whose names are the same).
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") 方法调用更一般的 [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")。此方法接受另一个 DataFrame 和一个组合函数，对齐输入 DataFrame，然后传递组合函数的
    Series 对（即，列名相同的列）。
- en: 'So, for instance, to reproduce [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") as above:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要重现上述 [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")：
- en: '[PRE189]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Matching / broadcasting behavior
  id: totrans-630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匹配 / 广播行为
- en: 'DataFrame has the methods [`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add"), [`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub"), [`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul"), [`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div") and related functions [`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd"), [`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub"), … for carrying out binary operations. For broadcasting
    behavior, Series input is of primary interest. Using these functions, you can
    use to either match on the *index* or *columns* via the **axis** keyword:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 有方法 [`add()`](../reference/api/pandas.DataFrame.add.html#pandas.DataFrame.add
    "pandas.DataFrame.add")、[`sub()`](../reference/api/pandas.DataFrame.sub.html#pandas.DataFrame.sub
    "pandas.DataFrame.sub")、[`mul()`](../reference/api/pandas.DataFrame.mul.html#pandas.DataFrame.mul
    "pandas.DataFrame.mul")、[`div()`](../reference/api/pandas.DataFrame.div.html#pandas.DataFrame.div
    "pandas.DataFrame.div") 和相关函数 [`radd()`](../reference/api/pandas.DataFrame.radd.html#pandas.DataFrame.radd
    "pandas.DataFrame.radd")、[`rsub()`](../reference/api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub
    "pandas.DataFrame.rsub")，… 用于执行二进制操作。对广播行为，Series 输入是主要关注的。使用这些函数，您可以通过 **axis**
    关键字匹配 *index* 或 *columns*：
- en: '[PRE190]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Furthermore you can align a level of a MultiIndexed DataFrame with a Series.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将 MultiIndexed DataFrame 的一个级别与 Series 对齐。
- en: '[PRE191]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Series and Index also support the [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)") builtin. This function takes the floor division and modulo
    operation at the same time returning a two-tuple of the same type as the left
    hand side. For example:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 Index 也支持内置的 [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)")。此函数同时进行地板除法和模运算，返回与左侧相同类型的两个元组。例如：
- en: '[PRE192]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'We can also do elementwise [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(in Python v3.12)"):'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进行逐元素的 [`divmod()`](https://docs.python.org/3/library/functions.html#divmod
    "(在 Python v3.12 中)")：
- en: '[PRE193]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Missing data / operations with fill values
  id: totrans-639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺失数据 / 使用填充值的操作
- en: In Series and DataFrame, the arithmetic functions have the option of inputting
    a *fill_value*, namely a value to substitute when at most one of the values at
    a location are missing. For example, when adding two DataFrame objects, you may
    wish to treat NaN as 0 unless both DataFrames are missing that value, in which
    case the result will be NaN (you can later replace NaN with some other value using
    `fillna` if you wish).
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Series 和 DataFrame 中，算术函数有一个 *fill_value* 选项，即在一个位置的值中至多有一个缺失时要替换的值。例如，当添加两个
    DataFrame 对象时，你可能希望将 NaN 视为 0，除非两个 DataFrame 都缺少该值，此时结果将是 NaN（如果你愿意，你可以稍后使用 `fillna`
    将 NaN 替换为其他值）。
- en: '[PRE194]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '### Flexible comparisons'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '### 灵活的比较'
- en: 'Series and DataFrame have the binary comparison methods `eq`, `ne`, `lt`, `gt`,
    `le`, and `ge` whose behavior is analogous to the binary arithmetic operations
    described above:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 有二进制比较方法 `eq`、`ne`、`lt`、`gt`、`le` 和 `ge`，其行为类似于上面描述的二进制算术操作：
- en: '[PRE195]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: These operations produce a pandas object of the same type as the left-hand-side
    input that is of dtype `bool`. These `boolean` objects can be used in indexing
    operations, see the section on [Boolean indexing](indexing.html#indexing-boolean).
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作会产生与左侧输入相同类型的 dtype 为 `bool` 的 pandas 对象。这些 `boolean` 对象可以在索引操作中使用，请参阅[布尔索引](indexing.html#indexing-boolean)一节。
- en: '### Boolean reductions'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '### 布尔归约'
- en: 'You can apply the reductions: [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty"), [`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any"), [`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all"), and [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool") to provide a way to summarize a boolean result.'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以应用归约：[`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty")、[`any()`](../reference/api/pandas.DataFrame.any.html#pandas.DataFrame.any
    "pandas.DataFrame.any")、[`all()`](../reference/api/pandas.DataFrame.all.html#pandas.DataFrame.all
    "pandas.DataFrame.all") 和 [`bool()`](../reference/api/pandas.DataFrame.bool.html#pandas.DataFrame.bool
    "pandas.DataFrame.bool") 来提供一种总结布尔结果的方法。
- en: '[PRE196]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: You can reduce to a final boolean value.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以归约到最终的布尔值。
- en: '[PRE197]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: You can test if a pandas object is empty, via the [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") property.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 [`empty`](../reference/api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") 属性测试 pandas 对象是否为空。
- en: '[PRE198]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Warning
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Asserting the truthiness of a pandas object will raise an error, as the testing
    of the emptiness or values is ambiguous.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 断言 pandas 对象的真实性会引发错误，因为空值或值的测试是模糊的。
- en: '[PRE199]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: See [gotchas](gotchas.html#gotchas-truth) for a more detailed discussion.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 详细讨论请参阅[陷阱](gotchas.html#gotchas-truth)。
- en: '### Comparing if objects are equivalent'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '### 比较对象是否等价'
- en: 'Often you may find that there is more than one way to compute the same result.
    As a simple example, consider `df + df` and `df * 2`. To test that these two computations
    produce the same result, given the tools shown above, you might imagine using
    `(df + df == df * 2).all()`. But in fact, this expression is False:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 常常你会发现有多种方法可以计算相同的结果。举个简单的例子，考虑`df + df`和`df * 2`。为了测试这两个计算是否产生相同的结果，根据上面展示的工具，你可能会想象使用`(df
    + df == df * 2).all()`。但实际上，这个表达式是错误的：
- en: '[PRE201]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Notice that the boolean DataFrame `df + df == df * 2` contains some False values!
    This is because NaNs do not compare as equals:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，布尔 DataFrame `df + df == df * 2` 包含一些 False 值！这是因为 NaN 不会比较相等：
- en: '[PRE202]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: So, NDFrames (such as Series and DataFrames) have an [`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals") method for testing equality, with NaNs in corresponding
    locations treated as equal.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，NDFrames（如 Series 和 DataFrames）具有一个 [`equals()`](../reference/api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals") 方法，用于测试相等性，其中相应位置的 NaN 被视为相等。
- en: '[PRE203]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Note that the Series or DataFrame index needs to be in the same order for equality
    to be True:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要使相等为真，Series 或 DataFrame 索引需要按相同顺序排列：
- en: '[PRE204]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Comparing array-like objects
  id: totrans-667
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较类数组对象
- en: 'You can conveniently perform element-wise comparisons when comparing a pandas
    data structure with a scalar value:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 当比较一个 pandas 数据结构与一个标量值时，你可以方便地执行逐元素比较：
- en: '[PRE205]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'pandas also handles element-wise comparisons between different array-like objects
    of the same length:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 还处理同长度的不同类数组对象之间的逐元素比较：
- en: '[PRE206]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Trying to compare `Index` or `Series` objects of different lengths will raise
    a ValueError:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试比较不同长度的 `Index` 或 `Series` 对象会引发 ValueError：
- en: '[PRE207]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Combining overlapping data sets
  id: totrans-674
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并重叠数据集
- en: 'A problem occasionally arising is the combination of two similar data sets
    where values in one are preferred over the other. An example would be two data
    series representing a particular economic indicator where one is considered to
    be of “higher quality”. However, the lower quality series might extend further
    back in history or have more complete data coverage. As such, we would like to
    combine two DataFrame objects where missing values in one DataFrame are conditionally
    filled with like-labeled values from the other DataFrame. The function implementing
    this operation is [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first"), which we illustrate:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会出现一个问题，即合并两个相似的数据集，其中一个数据集中的值优先于另一个。一个例子是代表特定经济指标的两个数据系列，其中一个被认为是“更高质量”的。然而，较低质量的系列可能在历史上延伸得更远，或者具有更完整的数据覆盖。因此，我们希望将两个
    DataFrame 对象合并，其中一个 DataFrame 中的缺失值有条件地用另一个 DataFrame 中的类似标记值填充。实现此操作的函数是[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")，我们进行演示：
- en: '[PRE208]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: General DataFrame combine
  id: totrans-677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用 DataFrame 合并
- en: The [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") method above calls the more general [`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine"). This method takes another DataFrame and a combiner
    function, aligns the input DataFrame and then passes the combiner function pairs
    of Series (i.e., columns whose names are the same).
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")方法调用了更一般的[`DataFrame.combine()`](../reference/api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")。此方法接受另一个 DataFrame 和一个合并函数，对齐输入 DataFrame，然后将组合器函数传递给一对
    Series（即，列名称相同的列）。
- en: 'So, for instance, to reproduce [`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") as above:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，要重现[`combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")如上所示：
- en: '[PRE209]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '## Descriptive statistics'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '## 描述性统计'
- en: 'There exists a large number of methods for computing descriptive statistics
    and other related operations on [Series](../reference/series.html#api-series-stats),
    [DataFrame](../reference/frame.html#api-dataframe-stats). Most of these are aggregations
    (hence producing a lower-dimensional result) like [`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum"), [`mean()`](../reference/api/pandas.DataFrame.mean.html#pandas.DataFrame.mean
    "pandas.DataFrame.mean"), and [`quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile"), but some of them, like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod"), produce an object of the same size. Generally speaking,
    these methods take an **axis** argument, just like *ndarray.{sum, std, …}*, but
    the axis can be specified by name or integer:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 存在大量计算描述性统计和其他相关操作的方法，适用于[Series](../reference/series.html#api-series-stats)，[DataFrame](../reference/frame.html#api-dataframe-stats)。其中大多数是聚合（因此生成较低维度的结果），如[`sum()`](../reference/api/pandas.DataFrame.sum.html#pandas.DataFrame.sum
    "pandas.DataFrame.sum")、[`mean()`](../reference/api/pandas.DataFrame.mean.html#pandas.DataFrame.mean
    "pandas.DataFrame.mean")和[`quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")，但其中一些，如[`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")和[`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")，生成相同大小的对象。一般来说，这些方法接受一个**axis**参数，就像*ndarray.{sum,
    std, …}*一样，但是轴可以通过名称或整数指定：
- en: '**Series**: no axis argument needed'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：不需要轴参数'
- en: '**DataFrame**: “index” (axis=0, default), “columns” (axis=1)'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：“索引”（axis=0，默认），“列”（axis=1）'
- en: 'For example:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE210]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'All such methods have a `skipna` option signaling whether to exclude missing
    data (`True` by default):'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都有一个`skipna`选项，指示是否排除缺失数据（默认为`True`）：
- en: '[PRE211]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Combined with the broadcasting / arithmetic behavior, one can describe various
    statistical procedures, like standardization (rendering data zero mean and standard
    deviation of 1), very concisely:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 结合广播/算术行为，可以非常简洁地描述各种统计程序，比如标准化（使数据均值为零，标准差为1）：
- en: '[PRE212]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Note that methods like [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") and [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") preserve the location of `NaN` values. This is somewhat
    different from [`expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") and [`rolling()`](../reference/api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling") since `NaN` behavior is furthermore dictated by a
    `min_periods` parameter.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，像 [`cumsum()`](../reference/api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum") 和 [`cumprod()`](../reference/api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod") 这样的方法会保留 `NaN` 值的位置。这与 [`expanding()`](../reference/api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding") 和 [`rolling()`](../reference/api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling") 有些不同，因为 `NaN` 的行为还受 `min_periods` 参数的影响。
- en: '[PRE213]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Here is a quick reference summary table of common functions. Each also takes
    an optional `level` parameter which applies only if the object has a [hierarchical
    index](advanced.html#advanced-hierarchical).
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 这是常见函数的快速参考摘要表。每个函数还接受一个可选的 `level` 参数，该参数仅在对象具有[分层索引](advanced.html#advanced-hierarchical)时适用。
- en: '| Function | Description |'
  id: totrans-694
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-695
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `count` | Number of non-NA observations |'
  id: totrans-696
  prefs: []
  type: TYPE_TB
  zh: '| `count` | 非 NA 观测数量 |'
- en: '| `sum` | Sum of values |'
  id: totrans-697
  prefs: []
  type: TYPE_TB
  zh: '| `sum` | 值的总和 |'
- en: '| `mean` | Mean of values |'
  id: totrans-698
  prefs: []
  type: TYPE_TB
  zh: '| `mean` | 值的均值 |'
- en: '| `median` | Arithmetic median of values |'
  id: totrans-699
  prefs: []
  type: TYPE_TB
  zh: '| `median` | 值的算术中位数 |'
- en: '| `min` | Minimum |'
  id: totrans-700
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 最小值 |'
- en: '| `max` | Maximum |'
  id: totrans-701
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 最大值 |'
- en: '| `mode` | Mode |'
  id: totrans-702
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | 众数 |'
- en: '| `abs` | Absolute Value |'
  id: totrans-703
  prefs: []
  type: TYPE_TB
  zh: '| `abs` | 绝对值 |'
- en: '| `prod` | Product of values |'
  id: totrans-704
  prefs: []
  type: TYPE_TB
  zh: '| `prod` | 值的乘积 |'
- en: '| `std` | Bessel-corrected sample standard deviation |'
  id: totrans-705
  prefs: []
  type: TYPE_TB
  zh: '| `std` | Bessel校正的样本标准差 |'
- en: '| `var` | Unbiased variance |'
  id: totrans-706
  prefs: []
  type: TYPE_TB
  zh: '| `var` | 无偏方差 |'
- en: '| `sem` | Standard error of the mean |'
  id: totrans-707
  prefs: []
  type: TYPE_TB
  zh: '| `sem` | 均值的标准误差 |'
- en: '| `skew` | Sample skewness (3rd moment) |'
  id: totrans-708
  prefs: []
  type: TYPE_TB
  zh: '| `skew` | 样本偏度（3阶矩） |'
- en: '| `kurt` | Sample kurtosis (4th moment) |'
  id: totrans-709
  prefs: []
  type: TYPE_TB
  zh: '| `kurt` | 样本峰度（4阶矩） |'
- en: '| `quantile` | Sample quantile (value at %) |'
  id: totrans-710
  prefs: []
  type: TYPE_TB
  zh: '| `quantile` | 样本分位数（%处的值） |'
- en: '| `cumsum` | Cumulative sum |'
  id: totrans-711
  prefs: []
  type: TYPE_TB
  zh: '| `cumsum` | 累积和 |'
- en: '| `cumprod` | Cumulative product |'
  id: totrans-712
  prefs: []
  type: TYPE_TB
  zh: '| `cumprod` | 累积乘积 |'
- en: '| `cummax` | Cumulative maximum |'
  id: totrans-713
  prefs: []
  type: TYPE_TB
  zh: '| `cummax` | 累积最大值 |'
- en: '| `cummin` | Cumulative minimum |'
  id: totrans-714
  prefs: []
  type: TYPE_TB
  zh: '| `cummin` | 累积最小值 |'
- en: 'Note that by chance some NumPy methods, like `mean`, `std`, and `sum`, will
    exclude NAs on Series input by default:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些 NumPy 方法，如 `mean`、`std` 和 `sum`，默认情况下会在 Series 输入中排除 NA 值：
- en: '[PRE214]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[`Series.nunique()`](../reference/api/pandas.Series.nunique.html#pandas.Series.nunique
    "pandas.Series.nunique") will return the number of unique non-NA values in a Series:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.nunique()`](../reference/api/pandas.Series.nunique.html#pandas.Series.nunique
    "pandas.Series.nunique") 将返回 Series 中唯一非 NA 值的数量：'
- en: '[PRE215]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '### Summarizing data: describe'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据汇总：describe'
- en: 'There is a convenient [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") function which computes a variety of summary statistics
    about a Series or the columns of a DataFrame (excluding NAs of course):'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的 [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") 函数，可以计算关于 Series 或 DataFrame 列的各种摘要统计信息（当然不包括 NA
    值）：
- en: '[PRE216]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'You can select specific percentiles to include in the output:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选���在输出中包含特定的百分位数：
- en: '[PRE217]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: By default, the median is always included.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，中位数始终包括在内。
- en: 'For a non-numerical Series object, [`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") will give a simple summary of the number of unique values
    and most frequently occurring values:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非数值 Series 对象，[`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") 将提供关于唯一值数量和最常出现值的简单摘要：
- en: '[PRE218]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Note that on a mixed-type DataFrame object, [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") will restrict the summary to include only numerical
    columns or, if none are, only categorical columns:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在混合类型的 DataFrame 对象上，[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") 将限制摘要仅包括数值列或者如果没有数值列，则仅包括分类列：
- en: '[PRE219]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'This behavior can be controlled by providing a list of types as `include`/`exclude`
    arguments. The special value `all` can also be used:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过提供一个类型列表作为 `include`/`exclude` 参数来控制此行为。还可以使用特殊值 `all`：
- en: '[PRE220]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'That feature relies on [select_dtypes](#basics-selectdtypes). Refer to there
    for details about accepted inputs.  ### Index of min/max values'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能依赖于 [select_dtypes](#basics-selectdtypes)。有关接受的输入的详细信息，请参考那里。### 最小/最大值的索引
- en: 'The [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") functions on Series and DataFrame compute the index
    labels with the minimum and maximum corresponding values:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 上的[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")和[`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")函数计算具有最小和最大对应值的索引标签：
- en: '[PRE221]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'When there are multiple rows (or columns) matching the minimum or maximum value,
    [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") return the first matching index:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 当有多行（或列）匹配最小值或最大值时，[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")和[`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")返回第一个匹配的索引：
- en: '[PRE222]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Note
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`idxmin` and `idxmax` are called `argmin` and `argmax` in NumPy.  ### Value
    counts (histogramming) / mode'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '`idxmin` 和 `idxmax` 在 NumPy 中被称为 `argmin` 和 `argmax`。### 值计数（直方图）/ 众数'
- en: 'The [`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series method computes a histogram of a 1D array
    of values. It can also be used as a function on regular arrays:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series 方法计算值的 1D 数组的直方图。它也可以用作常规数组的函数：'
- en: '[PRE223]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: The [`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts") method can be used to count combinations across
    multiple columns. By default all columns are used but a subset can be selected
    using the `subset` argument.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")方法可用于计算跨多列的组合。默认情况下使用所有列，但可以使用 `subset` 参数选择子集。'
- en: '[PRE224]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'Similarly, you can get the most frequently occurring value(s), i.e. the mode,
    of the values in a Series or DataFrame:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以获取 Series 或 DataFrame 中值的出现频率最高的值，即众数：
- en: '[PRE225]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Discretization and quantiling
  id: totrans-744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离散化和分位数
- en: 'Continuous values can be discretized using the [`cut()`](../reference/api/pandas.cut.html#pandas.cut
    "pandas.cut") (bins based on values) and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") (bins based on sample quantiles) functions:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 连续值可以使用[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut")（基于值的箱）和[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut")（基于样本分位数的箱）函数进行离散化：
- en: '[PRE226]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut") computes
    sample quantiles. For example, we could slice up some normally distributed data
    into equal-size quartiles like so:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut")计算样本分位数。例如，我们可以将一些正态分布数据切片成相等大小的四分位数：'
- en: '[PRE227]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'We can also pass infinite values to define the bins:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以传入无限值来定义箱子：
- en: '[PRE228]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '### Summarizing data: describe'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数据汇总：描述'
- en: 'There is a convenient [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") function which computes a variety of summary statistics
    about a Series or the columns of a DataFrame (excluding NAs of course):'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个方便的[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")函数，它计算关于 Series 或 DataFrame 的列的各种摘要统计信息（当然不包括 NAs）：
- en: '[PRE229]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'You can select specific percentiles to include in the output:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择特定的百分位数包含在输出中：
- en: '[PRE230]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: By default, the median is always included.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，中位数始终包含在内。
- en: 'For a non-numerical Series object, [`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe") will give a simple summary of the number of unique values
    and most frequently occurring values:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非数值 Series 对象，[`describe()`](../reference/api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe")将给出关于唯一值数量和最常出现值的简单摘要：
- en: '[PRE231]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Note that on a mixed-type DataFrame object, [`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") will restrict the summary to include only numerical
    columns or, if none are, only categorical columns:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在混合类型的 DataFrame 对象上，[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")将限制摘要仅包括数值列或者如果没有数值列，则仅包括分类列：
- en: '[PRE232]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'This behavior can be controlled by providing a list of types as `include`/`exclude`
    arguments. The special value `all` can also be used:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过提供类型列表作为`include`/`exclude`参数来控制此行为。还可以使用特殊值`all`：
- en: '[PRE233]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: That feature relies on [select_dtypes](#basics-selectdtypes). Refer to there
    for details about accepted inputs.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能依赖于[select_dtypes](#basics-selectdtypes)。有关接受的输入的详细信息，请参阅那里。
- en: '### Index of min/max values'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '### 最小/最大值的索引'
- en: 'The [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") functions on Series and DataFrame compute the index
    labels with the minimum and maximum corresponding values:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: Series 和 DataFrame 上的[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")和[`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")函数计算具有最小和最大对应值的索引标签：
- en: '[PRE234]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'When there are multiple rows (or columns) matching the minimum or maximum value,
    [`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin") and [`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax") return the first matching index:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 当有多行（或列）匹配最小值或最大值时，[`idxmin()`](../reference/api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")和[`idxmax()`](../reference/api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")返回第一个匹配的索引：
- en: '[PRE235]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Note
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`idxmin` and `idxmax` are called `argmin` and `argmax` in NumPy.'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中，`idxmin`和`idxmax`被称为`argmin`和`argmax`。
- en: '### Value counts (histogramming) / mode'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '### 值计数（直方图）/ 众数'
- en: 'The [`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series method computes a histogram of a 1D array
    of values. It can also be used as a function on regular arrays:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") Series 方法计算值数组的直方图。它也可以用作常规数组的函数：'
- en: '[PRE236]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: The [`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts") method can be used to count combinations across
    multiple columns. By default all columns are used but a subset can be selected
    using the `subset` argument.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '[`value_counts()`](../reference/api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts") 方法可用于计算多列之间的组合。默认情况下会使用所有列，但可以使用`subset`参数选择子集。'
- en: '[PRE237]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Similarly, you can get the most frequently occurring value(s), i.e. the mode,
    of the values in a Series or DataFrame:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以获取 Series 或 DataFrame 中值的出现频率最高的值（即众数）：
- en: '[PRE238]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Discretization and quantiling
  id: totrans-778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离散化和分位数
- en: 'Continuous values can be discretized using the [`cut()`](../reference/api/pandas.cut.html#pandas.cut
    "pandas.cut") (bins based on values) and [`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut") (bins based on sample quantiles) functions:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 连续值可以使用[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut")（基于值的区间）和[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut
    "pandas.qcut")（基于样本分位数的区间）函数进行离散化：
- en: '[PRE239]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut") computes
    sample quantiles. For example, we could slice up some normally distributed data
    into equal-size quartiles like so:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[`qcut()`](../reference/api/pandas.qcut.html#pandas.qcut "pandas.qcut") 计算样本分位数。例如，我们可以将一些正态分布数据切分成相等大小的四分位数：'
- en: '[PRE240]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'We can also pass infinite values to define the bins:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传入无限值来定义区间：
- en: '[PRE241]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '## Function application'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '## 函数应用'
- en: To apply your own or another library’s functions to pandas objects, you should
    be aware of the three methods below. The appropriate method to use depends on
    whether your function expects to operate on an entire `DataFrame` or `Series`,
    row- or column-wise, or elementwise.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您自己或其他库的函数应用于 pandas 对象，您应该了解下面的三种方法。要使用的适当方法取决于您的函数是否希望在整个`DataFrame`或`Series`、按行或按列，或按元素进行操作。
- en: '[Tablewise Function Application](#tablewise-function-application): [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe")'
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[按表应用函数](#tablewise-function-application): [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe")'
- en: '[Row or Column-wise Function Application](#row-or-column-wise-function-application):
    [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")'
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[按行或列应用函数](#row-or-column-wise-function-application): [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")'
- en: '[Aggregation API](#aggregation-api): [`agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") and [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")'
  id: totrans-789
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[聚合 API](#aggregation-api)：[`agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") 和 [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")'
- en: '[Applying Elementwise Functions](#applying-elementwise-functions): [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map")'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[应用逐元素函数](#applying-elementwise-functions)：[`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map")'
- en: '### Tablewise function application'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '### 表格级函数应用'
- en: '`DataFrames` and `Series` can be passed into functions. However, if the function
    needs to be called in a chain, consider using the [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") method.'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrames` 和 `Series` 可以被传递给函数。但是，如果函数需要在链式调用中调用，请考虑使用 [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") 方法。'
- en: 'First some setup:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 首先进行一些设置：
- en: '[PRE242]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '`extract_city_name` and `add_country_name` are functions taking and returning
    `DataFrames`.'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_city_name` 和 `add_country_name` 是接受并返回 `DataFrames` 的函数。'
- en: 'Now compare the following:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 现在比较以下内容：
- en: '[PRE243]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Is equivalent to:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE244]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: pandas encourages the second style, which is known as method chaining. `pipe`
    makes it easy to use your own or another library’s functions in method chains,
    alongside pandas’ methods.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 鼓励第二种风格，即称为方法链。`pipe` 可以轻松地在方法链中使用您自己或另一个库的函数，与 pandas 的方法并列使用。
- en: In the example above, the functions `extract_city_name` and `add_country_name`
    each expected a `DataFrame` as the first positional argument. What if the function
    you wish to apply takes its data as, say, the second argument? In this case, provide
    `pipe` with a tuple of `(callable, data_keyword)`. `.pipe` will route the `DataFrame`
    to the argument specified in the tuple.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，函数 `extract_city_name` 和 `add_country_name` 分别预期将 `DataFrame` 作为第一个位置参数。如果您希望应用的函数将其数据作为，例如，第二个参数呢？在这种情况下，提供一个
    `(callable, data_keyword)` 元组给 `pipe`。`.pipe` 将路由 `DataFrame` 到元组中指定的参数。
- en: 'For example, we can fit a regression using statsmodels. Their API expects a
    formula first and a `DataFrame` as the second argument, `data`. We pass in the
    function, keyword pair `(sm.ols, ''data'')` to `pipe`:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 statsmodels 拟合回归。他们的 API 首先期望公式，然后是第二个参数 `DataFrame`，即 `data`。我们将函数、关键字对
    `(sm.ols, 'data')` 传递给 `pipe`：
- en: '[PRE245]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: The pipe method is inspired by unix pipes and more recently [dplyr](https://github.com/tidyverse/dplyr)
    and [magrittr](https://github.com/tidyverse/magrittr), which have introduced the
    popular `(%>%)` (read pipe) operator for [R](https://www.r-project.org). The implementation
    of `pipe` here is quite clean and feels right at home in Python. We encourage
    you to view the source code of [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe").
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipe` 方法受 Unix 管道的启发，最近也受到了 [dplyr](https://github.com/tidyverse/dplyr) 和
    [magrittr](https://github.com/tidyverse/magrittr) 的影响，它们引入了流行的 `(%>%)`（读作 pipe）运算符用于
    [R](https://www.r-project.org)。这里的 `pipe` 实现非常简洁，并且在 Python 中感觉很合适。我们鼓励您查看 [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") 的源代码。'
- en: Row or column-wise function application
  id: totrans-805
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按行或按列应用函数
- en: 'Arbitrary functions can be applied along the axes of a DataFrame using the
    [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method, which, like the descriptive statistics methods,
    takes an optional `axis` argument:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 方法沿着 DataFrame 的轴应用任意函数，与描述性统计方法一样，它接受一个可选的 `axis` 参数：
- en: '[PRE246]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: The [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method will also dispatch on a string method name.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 方法也会根据字符串方法名称进行调度。'
- en: '[PRE247]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'The return type of the function passed to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") affects the type of the final output from `DataFrame.apply`
    for the default behaviour:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 的函数的返回类型会影响 `DataFrame.apply` 的最终输出类型，默认行为如下：
- en: If the applied function returns a `Series`, the final output is a `DataFrame`.
    The columns match the index of the `Series` returned by the applied function.
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回一个 `Series`，最终输出是一个 `DataFrame`。列与应用函数返回的 `Series` 的索引匹配。
- en: If the applied function returns any other type, the final output is a `Series`.
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回任何其他类型，最终输出是一个`Series`。
- en: 'This default behaviour can be overridden using the `result_type`, which accepts
    three options: `reduce`, `broadcast`, and `expand`. These will determine how list-likes
    return values expand (or not) to a `DataFrame`.'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`result_type`覆盖此默认行为，它接受三个选项：`reduce`、`broadcast`和`expand`。这将决定类似列表的返回值如何扩展（或不扩展）为一个`DataFrame`。
- en: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") combined with some cleverness can be used to answer
    many questions about a data set. For example, suppose we wanted to extract the
    date where the maximum value for each column occurred:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")结合一些巧妙的技巧可以用来回答关于数据集的许多问题。例如，假设我们想要提取每列的最大值发生的日期：'
- en: '[PRE248]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: You may also pass additional arguments and keyword arguments to the [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")方法传递其他参数和关键字参数。
- en: '[PRE249]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'Another useful feature is the ability to pass Series methods to carry out some
    Series operation on each column or row:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是能够传递Series方法来对每列或每行执行一些Series操作：
- en: '[PRE250]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Finally, [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") takes an argument `raw` which is False by default, which
    converts each row or column into a Series before applying the function. When set
    to True, the passed function will instead receive an ndarray object, which has
    positive performance implications if you do not need the indexing functionality.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")接受一个默认为False的参数`raw`，在应用函数之前将每行或每列转换为一个Series。当设置为True时，传递的函数将接收一个ndarray对象，如果您不需要索引功能，则具有积极的性能影响。
- en: '### Aggregation API'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '### 聚合API'
- en: The aggregation API allows one to express possibly multiple aggregation operations
    in a single concise way. This API is similar across pandas objects, see [groupby
    API](groupby.html#groupby-aggregate), the [window API](window.html#window-overview),
    and the [resample API](timeseries.html#timeseries-aggregate). The entry point
    for aggregation is [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate"), or the alias [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg").
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合API允许以一种简洁的方式表达可能的多个聚合操作。这个API在pandas对象中是相似的，参见[groupby API](groupby.html#groupby-aggregate)、[window
    API](window.html#window-overview)和[resample API](timeseries.html#timeseries-aggregate)。聚合的入口点是[`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")，或别名[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg")。
- en: 'We will use a similar starting frame from above:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与上面类似的起始框架：
- en: '[PRE251]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Using a single function is equivalent to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"). You can also pass named methods as strings. These will
    return a `Series` of the aggregated output:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个函数等同于[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")。您还可以将命名方法作为字符串传递。这些将返回聚合输出的`Series`：
- en: '[PRE252]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Single aggregations on a `Series` this will return a scalar value:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Series`进行单个聚合将返回一个标量值：
- en: '[PRE253]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Aggregating with multiple functions
  id: totrans-829
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行聚合
- en: You can pass multiple aggregation arguments as a list. The results of each of
    the passed functions will be a row in the resulting `DataFrame`. These are naturally
    named from the aggregation function.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多个聚合参数作为列表传递。每个传递函数的结果将成为结果`DataFrame`中的一行。这些自然地从聚合函数命名。
- en: '[PRE254]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'Multiple functions yield multiple rows:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 多个函数产生多行：
- en: '[PRE255]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'On a `Series`, multiple functions return a `Series`, indexed by the function
    names:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`上，多个函数返回一个由函数名称索引的`Series`：
- en: '[PRE256]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Passing a `lambda` function will yield a `<lambda>` named row:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个`lambda`函数将产生一个名为`<lambda>`的行：
- en: '[PRE257]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Passing a named function will yield that name for the row:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个命名函数将为该行产生该名称：
- en: '[PRE258]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: Aggregating with a dict
  id: totrans-840
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行聚合
- en: Passing a dictionary of column names to a scalar or a list of scalars, to `DataFrame.agg`
    allows you to customize which functions are applied to which columns. Note that
    the results are not in any particular order, you can use an `OrderedDict` instead
    to guarantee ordering.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 将列名的字典传递给标量或标量列表，以便将它们传递给 `DataFrame.agg`，允许您自定义将哪些函数应用于哪些列。请注意，结果不以任何特定顺序排列，您可以使用
    `OrderedDict` 来保证顺序。
- en: '[PRE259]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'Passing a list-like will generate a `DataFrame` output. You will get a matrix-like
    output of all of the aggregators. The output will consist of all unique functions.
    Those that are not noted for a particular column will be `NaN`:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 传递类似列表的将生成一个 `DataFrame` 输出。您将获得所有聚合器的矩阵式输出。输出将由所有唯一的函数组成。那些未在特定列中注意到的将为 `NaN`：
- en: '[PRE260]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '#### Custom describe'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义描述'
- en: With `.agg()` it is possible to easily create a custom describe function, similar
    to the built in [describe function](#basics-describe).
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.agg()` 可以轻松创建自定义描述函数，类似于内置的[描述函数](#basics-describe)。
- en: '[PRE261]  ### Transform API'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE261]  ### Transform API'
- en: The [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") method returns an object that is indexed the same
    (same size) as the original. This API allows you to provide *multiple* operations
    at the same time rather than one-by-one. Its API is quite similar to the `.agg`
    API.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '[`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 方法返回一个与原始索引相同（大小相同）的对象。此 API 允许您一次提供*多个*操作，而不是一个接一个地提供。它的
    API 与 `.agg` API 非常相似。'
- en: We create a frame similar to the one used in the above sections.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个类似于上述部分中使用的框架。
- en: '[PRE262]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Transform the entire frame. `.transform()` allows input functions as: a NumPy
    function, a string function name or a user defined function.'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 对整个框架进行转换。`.transform()` 允许输入函数为：NumPy 函数、字符串函数名称或用户定义的函数。
- en: '[PRE263]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Here [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") received a single function; this is equivalent to
    a [ufunc](https://numpy.org/doc/stable/reference/ufuncs.html) application.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 接收了一个函数；这相当于应用 [ufunc](https://numpy.org/doc/stable/reference/ufuncs.html)。
- en: '[PRE264]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Passing a single function to `.transform()` with a `Series` will yield a single
    `Series` in return.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个函数传递给 `.transform()` 与 `Series` 将产生一个返回的单个 `Series`。
- en: '[PRE265]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Transform with multiple functions
  id: totrans-857
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行转换
- en: Passing multiple functions will yield a column MultiIndexed DataFrame. The first
    level will be the original frame column names; the second level will be the names
    of the transforming functions.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 传递多个函数将生成一个列 MultiIndexed DataFrame。第一级将是原始框架的列名；第二级将是转换函数的名称。
- en: '[PRE266]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Passing multiple functions to a Series will yield a DataFrame. The resulting
    column names will be the transforming functions.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个函数传递给 Series 将产生一个 DataFrame。结果的列名将是转换函数。
- en: '[PRE267]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Transforming with a dict
  id: totrans-862
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行转换
- en: Passing a dict of functions will allow selective transforming per column.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个函数字典将允许按列进行选择性转换。
- en: '[PRE268]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Passing a dict of lists will generate a MultiIndexed DataFrame with these selective
    transforms.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 传递函数列表的字典将生成一个具有这些选择性转换的 MultiIndexed DataFrame。
- en: '[PRE269]  ### Applying elementwise functions'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE269]  ### 逐元素应用函数'
- en: 'Since not all functions can be vectorized (accept NumPy arrays and return another
    array or value), the methods [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") on DataFrame and analogously [`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") on Series accept any Python function taking a single value
    and returning a single value. For example:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并非所有函数都可以进行矢量化（接受 NumPy 数组并返回另一个数组或值），因此 DataFrame 上的方法 [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") 和类似地 Series 上的方法 [`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 接受任何 Python 函数，该函数接受一个值并返回一个值。例如：
- en: '[PRE270]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") has an additional feature; it can be used to easily “link”
    or “map” values defined by a secondary series. This is closely related to [merging/joining
    functionality](merging.html#merging):'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 还有一个附加功能；它可以用于轻松“链接”或“映射”由辅助序列定义的值。这与[合并/连接功能](merging.html#merging)密切相关：'
- en: '[PRE271]  ### Tablewise function application'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE271]  ### 表格级别的函数应用'
- en: '`DataFrames` and `Series` can be passed into functions. However, if the function
    needs to be called in a chain, consider using the [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") method.'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `DataFrames` 和 `Series` 传递给函数。但是，如果函数需要在链中调用，请考虑使用 [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") 方法。
- en: 'First some setup:'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 首先进行一些设置：
- en: '[PRE272]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '`extract_city_name` and `add_country_name` are functions taking and returning
    `DataFrames`.'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_city_name` 和 `add_country_name` 是接受并返回 `DataFrames` 的函数。'
- en: 'Now compare the following:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 现在比较以下内容：
- en: '[PRE273]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Is equivalent to:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE274]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: pandas encourages the second style, which is known as method chaining. `pipe`
    makes it easy to use your own or another library’s functions in method chains,
    alongside pandas’ methods.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 鼓励第二种风格，即方法链。`pipe` 让您可以在方法链中轻松使用自己或另一个库的函数，与 pandas 的方法一起使用。
- en: In the example above, the functions `extract_city_name` and `add_country_name`
    each expected a `DataFrame` as the first positional argument. What if the function
    you wish to apply takes its data as, say, the second argument? In this case, provide
    `pipe` with a tuple of `(callable, data_keyword)`. `.pipe` will route the `DataFrame`
    to the argument specified in the tuple.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，函数 `extract_city_name` 和 `add_country_name` 分别期望 `DataFrame` 作为第一个位置参数。如果您希望应用的函数将其数据作为，比如说，第二个参数呢？在这种情况下，提供一个元组
    `(callable, data_keyword)` 给 `pipe`。`.pipe` 将把 `DataFrame` 路由到元组中指定的参数。
- en: 'For example, we can fit a regression using statsmodels. Their API expects a
    formula first and a `DataFrame` as the second argument, `data`. We pass in the
    function, keyword pair `(sm.ols, ''data'')` to `pipe`:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 statsmodels 进行回归拟合。他们的 API 首先期望一个公式，然后是第二个参数 `data` 的 `DataFrame`。我们将函数、关键字对
    `(sm.ols, 'data')` 传递给 `pipe`：
- en: '[PRE275]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: The pipe method is inspired by unix pipes and more recently [dplyr](https://github.com/tidyverse/dplyr)
    and [magrittr](https://github.com/tidyverse/magrittr), which have introduced the
    popular `(%>%)` (read pipe) operator for [R](https://www.r-project.org). The implementation
    of `pipe` here is quite clean and feels right at home in Python. We encourage
    you to view the source code of [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe").
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 管道方法受到 Unix 管道以及最近的 [dplyr](https://github.com/tidyverse/dplyr) 和 [magrittr](https://github.com/tidyverse/magrittr)
    的启发，它们引入了流行的 `(%>%)`（读取管道）操作符用于 [R](https://www.r-project.org)。这里的 `pipe` 实现非常干净，感觉就像在
    Python 中本来就应该有的。我们鼓励您查看 [`pipe()`](../reference/api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe
    "pandas.DataFrame.pipe") 的源代码。
- en: Row or column-wise function application
  id: totrans-884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行或列的函数应用
- en: 'Arbitrary functions can be applied along the axes of a DataFrame using the
    [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method, which, like the descriptive statistics methods,
    takes an optional `axis` argument:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 方法沿着 DataFrame 的轴应用任意函数，该方法与描述性统计方法类似，都接受一个可选的 `axis`
    参数：
- en: '[PRE276]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: The [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method will also dispatch on a string method name.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 方法还可以根据字符串方法名进行分派。'
- en: '[PRE277]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'The return type of the function passed to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") affects the type of the final output from `DataFrame.apply`
    for the default behaviour:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") 的函数的返回类型会影响默认行为下 `DataFrame.apply` 的最终输出类型：
- en: If the applied function returns a `Series`, the final output is a `DataFrame`.
    The columns match the index of the `Series` returned by the applied function.
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回一个 `Series`，最终输出是一个 `DataFrame`。列匹配应用函数返回的 `Series` 的索引。
- en: If the applied function returns any other type, the final output is a `Series`.
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用的函数返回其他任何类型，则最终输出是一个 `Series`。
- en: 'This default behaviour can be overridden using the `result_type`, which accepts
    three options: `reduce`, `broadcast`, and `expand`. These will determine how list-likes
    return values expand (or not) to a `DataFrame`.'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `result_type` 覆盖此默认行为，它接受三个选项：`reduce`、`broadcast` 和 `expand`。这些选项将决定类似列表的返回值如何扩展（或不扩展）为
    `DataFrame`。
- en: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") combined with some cleverness can be used to answer
    many questions about a data set. For example, suppose we wanted to extract the
    date where the maximum value for each column occurred:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")结合一些巧妙的方法可以回答关于数据集的许多问题。例如，假设我们想要提取每列中最大值出现的日期：'
- en: '[PRE278]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: You may also pass additional arguments and keyword arguments to the [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") method.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将额外的参数和关键字参数传递给[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")方法。
- en: '[PRE279]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'Another useful feature is the ability to pass Series methods to carry out some
    Series operation on each column or row:'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是能够传递Series方法来对每列或每行执行一些Series操作：
- en: '[PRE280]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Finally, [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") takes an argument `raw` which is False by default, which
    converts each row or column into a Series before applying the function. When set
    to True, the passed function will instead receive an ndarray object, which has
    positive performance implications if you do not need the indexing functionality.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")接受一个默认为False的参数`raw`，在应用函数之前将每行或每列转换为一个Series。当设置为True时，传递的函数将收到一个ndarray对象，如果您不需要索引功能，则具有积极的性能影响。
- en: '### Aggregation API'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '### 聚合 API'
- en: The aggregation API allows one to express possibly multiple aggregation operations
    in a single concise way. This API is similar across pandas objects, see [groupby
    API](groupby.html#groupby-aggregate), the [window API](window.html#window-overview),
    and the [resample API](timeseries.html#timeseries-aggregate). The entry point
    for aggregation is [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate"), or the alias [`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg").
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合 API 允许以一种简洁的方式表达可能的多个聚合操作。这个 API 在 pandas 对象中是相似的，参见 [groupby API](groupby.html#groupby-aggregate)，[window
    API](window.html#window-overview)，以及[resample API](timeseries.html#timeseries-aggregate)。聚合的入口点是[`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")，或别名[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg")。
- en: 'We will use a similar starting frame from above:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与上面类似的起始框架：
- en: '[PRE281]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'Using a single function is equivalent to [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"). You can also pass named methods as strings. These will
    return a `Series` of the aggregated output:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个函数等同于[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")。您还可以将命名方法作为字符串传递。这些将返回聚合输出的`Series`：
- en: '[PRE282]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'Single aggregations on a `Series` this will return a scalar value:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Series`进行单个聚合将返回一个标量值：
- en: '[PRE283]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Aggregating with multiple functions
  id: totrans-908
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行聚合
- en: You can pass multiple aggregation arguments as a list. The results of each of
    the passed functions will be a row in the resulting `DataFrame`. These are naturally
    named from the aggregation function.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多个聚合参数作为列表传递。每个传递函数的结果将成为结果`DataFrame`中的一行。这些自然地从聚合函数命名。
- en: '[PRE284]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Multiple functions yield multiple rows:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 多个函数产生多个行：
- en: '[PRE285]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'On a `Series`, multiple functions return a `Series`, indexed by the function
    names:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`上，多个函数返回一个`Series`，由函数名称索引：
- en: '[PRE286]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'Passing a `lambda` function will yield a `<lambda>` named row:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个`lambda`函数将产生一个`<lambda>`命名行：
- en: '[PRE287]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'Passing a named function will yield that name for the row:'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个命名函数将为该行产生该名称：
- en: '[PRE288]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Aggregating with a dict
  id: totrans-919
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行聚合
- en: Passing a dictionary of column names to a scalar or a list of scalars, to `DataFrame.agg`
    allows you to customize which functions are applied to which columns. Note that
    the results are not in any particular order, you can use an `OrderedDict` instead
    to guarantee ordering.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 将列名的字典传递给标量或标量列表，以便`DataFrame.agg`允许您自定义应用于哪些列的函数。请注意，结果不按任何特定顺序排列，您可以使用`OrderedDict`来保证顺序。
- en: '[PRE289]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Passing a list-like will generate a `DataFrame` output. You will get a matrix-like
    output of all of the aggregators. The output will consist of all unique functions.
    Those that are not noted for a particular column will be `NaN`:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 传递类似列表将生成一个`DataFrame`输出。您将获得所有聚合器的类似矩阵的输出。输出将包含所有唯一的函数。那些没有针对特定列指定的函数将是`NaN`：
- en: '[PRE290]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '#### Custom describe'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义描述'
- en: With `.agg()` it is possible to easily create a custom describe function, similar
    to the built in [describe function](#basics-describe).
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.agg()` 可以轻松创建自定义描述函数，类似于内置的[描述函数](#基础描述)。
- en: '[PRE291]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Aggregating with multiple functions
  id: totrans-927
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行聚合
- en: You can pass multiple aggregation arguments as a list. The results of each of
    the passed functions will be a row in the resulting `DataFrame`. These are naturally
    named from the aggregation function.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多个聚合参数作为列表传递。每个传递函数的结果将成为生成的 `DataFrame` 中的一行。这些自然地从聚合函数命名。
- en: '[PRE292]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'Multiple functions yield multiple rows:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 多个函数产生多行：
- en: '[PRE293]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'On a `Series`, multiple functions return a `Series`, indexed by the function
    names:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Series`，多个函数返回一个由函数名称索引的 `Series`：
- en: '[PRE294]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: 'Passing a `lambda` function will yield a `<lambda>` named row:'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 `lambda` 函数将产生一个命名为 `<lambda>` 的行：
- en: '[PRE295]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'Passing a named function will yield that name for the row:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 传递命名函数将产生该行的名称：
- en: '[PRE296]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Aggregating with a dict
  id: totrans-938
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行聚合
- en: Passing a dictionary of column names to a scalar or a list of scalars, to `DataFrame.agg`
    allows you to customize which functions are applied to which columns. Note that
    the results are not in any particular order, you can use an `OrderedDict` instead
    to guarantee ordering.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 将列名称的字典传递给标量或标量列表，以便 `DataFrame.agg` 允许您自定义应用于哪些列的函数。请注意，结果没有任何特定顺序，您可以改用 `OrderedDict`
    以保证顺序。
- en: '[PRE297]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'Passing a list-like will generate a `DataFrame` output. You will get a matrix-like
    output of all of the aggregators. The output will consist of all unique functions.
    Those that are not noted for a particular column will be `NaN`:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 传递类似列表将生成一个 `DataFrame` 输出。您将获得所有聚合器的矩阵样式输出。输出将由所有唯一函数组成。那些未特定于特定列的函数将是 `NaN`：
- en: '[PRE298]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '#### Custom describe'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义描述'
- en: With `.agg()` it is possible to easily create a custom describe function, similar
    to the built in [describe function](#basics-describe).
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.agg()` 可以轻松创建自定义描述函数，类似于内置的[描述函数](#基础描述)。
- en: '[PRE299]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '### Transform API'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '### 转换 API'
- en: The [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") method returns an object that is indexed the same
    (same size) as the original. This API allows you to provide *multiple* operations
    at the same time rather than one-by-one. Its API is quite similar to the `.agg`
    API.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '[`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 方法返回一个与原始对象（大小相同）索引相同的对象。该 API 允许您一次性提供*多个*操作，而不是一个接一个的操作。其
    API 与 `.agg` API 非常相似。'
- en: We create a frame similar to the one used in the above sections.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个类似于上述部分中使用的框架。
- en: '[PRE300]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Transform the entire frame. `.transform()` allows input functions as: a NumPy
    function, a string function name or a user defined function.'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 转换整个框架。`.transform()` 允许输入函数为：NumPy 函数、字符串函数名称或用户定义的函数。
- en: '[PRE301]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Here [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") received a single function; this is equivalent to
    a [ufunc](https://numpy.org/doc/stable/reference/ufuncs.html) application.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 [`transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") 接收到一个单个函数；这相当于应用 [ufunc](https://numpy.org/doc/stable/reference/ufuncs.html)。
- en: '[PRE302]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Passing a single function to `.transform()` with a `Series` will yield a single
    `Series` in return.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个函数传递给 `.transform()` 与 `Series` 将返回单个 `Series`。
- en: '[PRE303]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Transform with multiple functions
  id: totrans-956
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行转换
- en: Passing multiple functions will yield a column MultiIndexed DataFrame. The first
    level will be the original frame column names; the second level will be the names
    of the transforming functions.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 传递多个函数将产生一个列 MultiIndexed DataFrame。第一级将是原始框架列名称；第二级将是转换函数的名称。
- en: '[PRE304]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: Passing multiple functions to a Series will yield a DataFrame. The resulting
    column names will be the transforming functions.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Series 传递多个函数将产生一个 DataFrame。生成的列名称将是转换函数。
- en: '[PRE305]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: Transforming with a dict
  id: totrans-961
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行转换
- en: Passing a dict of functions will allow selective transforming per column.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 传递函数字典将允许按列选择性转换。
- en: '[PRE306]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: Passing a dict of lists will generate a MultiIndexed DataFrame with these selective
    transforms.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 传递列表的字典将生成一个具有这些选择性转换的 MultiIndexed DataFrame。
- en: '[PRE307]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Transform with multiple functions
  id: totrans-966
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用多个函数进行转换
- en: Passing multiple functions will yield a column MultiIndexed DataFrame. The first
    level will be the original frame column names; the second level will be the names
    of the transforming functions.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 传递多个函数将生成一个列 MultiIndexed DataFrame。第一级将是原始帧列名；第二级将是变换函数的名称。
- en: '[PRE308]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Passing multiple functions to a Series will yield a DataFrame. The resulting
    column names will be the transforming functions.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 传递多个函数给一个 Series 将产生一个 DataFrame。结果列名将是变换函数。
- en: '[PRE309]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: Transforming with a dict
  id: totrans-971
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用字典进行转换
- en: Passing a dict of functions will allow selective transforming per column.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个函数的字典将允许按列进行选择性变换。
- en: '[PRE310]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: Passing a dict of lists will generate a MultiIndexed DataFrame with these selective
    transforms.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个列表的字典将生成一个具有这些选择性转换的 MultiIndexed DataFrame。
- en: '[PRE311]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '### Applying elementwise functions'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '### 应用逐元素函数'
- en: 'Since not all functions can be vectorized (accept NumPy arrays and return another
    array or value), the methods [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") on DataFrame and analogously [`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") on Series accept any Python function taking a single value
    and returning a single value. For example:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并非所有函数都可以矢量化（接受 NumPy 数组并返回另一个数组或值），因此 DataFrame 上的方法 [`map()`](../reference/api/pandas.DataFrame.map.html#pandas.DataFrame.map
    "pandas.DataFrame.map") 和类似地 Series 上的 [`map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 接受任何接受单个值并返回单个值的 Python 函数。例如：
- en: '[PRE312]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") has an additional feature; it can be used to easily “link”
    or “map” values defined by a secondary series. This is closely related to [merging/joining
    functionality](merging.html#merging):'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.map()`](../reference/api/pandas.Series.map.html#pandas.Series.map
    "pandas.Series.map") 还具有额外的功能；它可以用于轻松“链接”或“映射”由次级系列定义的值。这与[合并/连接功能](merging.html#merging)密切相关：'
- en: '[PRE313]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '## Reindexing and altering labels'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '## 重新索引和更改标签'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") is the fundamental data alignment method in pandas. It
    is used to implement nearly all other features relying on label-alignment functionality.
    To *reindex* means to conform the data to match a given set of labels along a
    particular axis. This accomplishes several things:'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 是 pandas 中的基本数据对齐方法。它用于实现几乎所有依赖标签对齐功能的其他功能。*重新索引*意味着使数据符合与特定轴上的给定标签集匹配的数据。这可以实现几个目标：'
- en: Reorders the existing data to match a new set of labels
  id: totrans-983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排列现有数据以匹配新的标签集
- en: Inserts missing value (NA) markers in label locations where no data for that
    label existed
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不存在该标签的标签位置插入缺失值（NA）标记
- en: If specified, **fill** data for missing labels using logic (highly relevant
    to working with time series data)
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定了，可以使用逻辑**填充**缺失标签的数据（与处理时间序列数据高度相关）
- en: 'Here is a simple example:'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的例子：
- en: '[PRE314]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Here, the `f` label was not contained in the Series and hence appears as `NaN`
    in the result.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`f` 标签未包含在 Series 中，因此在结果中显示为 `NaN`。
- en: 'With a DataFrame, you can simultaneously reindex the index and columns:'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DataFrame，您可以同时重新索引索引和列：
- en: '[PRE315]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'Note that the `Index` objects containing the actual axis labels can be **shared**
    between objects. So if we have a Series and a DataFrame, the following can be
    done:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，包含实际轴标签的 `Index` 对象可以在对象之间**共享**。因此，如果我们有一个 Series 和一个 DataFrame，则可以执行以下操作：
- en: '[PRE316]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: This means that the reindexed Series’s index is the same Python object as the
    DataFrame’s index.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着重新索引的 Series 的索引与 DataFrame 的索引是相同的 Python 对象。
- en: '[`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") also supports an “axis-style” calling convention,
    where you specify a single `labels` argument and the `axis` it applies to.'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") 还支持一种“轴样式”调用约定，其中您指定单个 `labels` 参数以及它适用的 `axis`。'
- en: '[PRE317]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: See also
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[MultiIndex / Advanced Indexing](advanced.html#advanced) is an even more concise
    way of doing reindexing.'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '[多索引 / 高级索引](advanced.html#advanced) 是进行重新索引的更简洁方式。'
- en: Note
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'When writing performance-sensitive code, there is a good reason to spend some
    time becoming a reindexing ninja: **many operations are faster on pre-aligned
    data**. Adding two unaligned DataFrames internally triggers a reindexing step.
    For exploratory analysis you will hardly notice the difference (because `reindex`
    has been heavily optimized), but when CPU cycles matter sprinkling a few explicit
    `reindex` calls here and there can have an impact.'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写对性能敏感的代码时，有充分的理由花一些时间成为一个重新索引的忍者：**许多操作在预对齐数据上更快**。添加两个不对齐的 DataFrame 内部会触发重新索引步骤。对于探索性分析，你几乎不会注意到差异（因为`reindex`已经经过了大量优化），但是当
    CPU 周期很重要时，偶尔在某些地方添加一些显式的`reindex`调用可能会产生影响。
- en: '### Reindexing to align with another object'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重新索引以与另一个对象对齐'
- en: 'You may wish to take an object and reindex its axes to be labeled the same
    as another object. While the syntax for this is straightforward albeit verbose,
    it is a common enough operation that the [`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like") method is available to make this simpler:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望取一个对象并重新索引其轴，使其标签与另一个对象相同。虽然这个操作的语法虽然冗长但简单，但它是一个常见的操作，因此[`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like") 方法可用于简化此操作：
- en: '[PRE318]  ### Aligning objects with each other with `align`'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE318]  ### 使用`align`将对象与其他对象对齐'
- en: 'The [`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align
    "pandas.Series.align") method is the fastest way to simultaneously align two objects.
    It supports a `join` argument (related to [joining and merging](merging.html#merging)):'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '[`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align "pandas.Series.align")
    方法是同时对齐两个对象的最快方法。它支持一个`join`参数（与[连接和合并](merging.html#merging)相关）：'
- en: '`join=''outer''`: take the union of the indexes (default)'
  id: totrans-1004
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''outer''`：取索引的并集（默认）'
- en: ''
  id: totrans-1005
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1006
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''left''`: use the calling object’s index'
  id: totrans-1007
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''left''`：使用调用对象的索引'
- en: ''
  id: totrans-1008
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1009
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''right''`: use the passed object’s index'
  id: totrans-1010
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''right''`：使用传入对象的索引'
- en: ''
  id: totrans-1011
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1012
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''inner''`: intersect the indexes'
  id: totrans-1013
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''inner''`：交集索引'
- en: 'It returns a tuple with both of the reindexed Series:'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含重新索引的两个 Series 的元组：
- en: '[PRE319]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'For DataFrames, the join method will be applied to both the index and the columns
    by default:'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DataFrames，默认情况下，连接方法将应用于索引和列：
- en: '[PRE320]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'You can also pass an `axis` option to only align on the specified axis:'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以传递一个`axis`选项，只在指定的轴上对齐：
- en: '[PRE321]'
  id: totrans-1019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'If you pass a Series to [`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align"), you can choose to align both objects either on the
    DataFrame’s index or columns using the `axis` argument:'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个 Series 传递给[`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")，你可以选择使用`axis`参数在 DataFrame 的索引或列上同时对齐两个对象：
- en: '[PRE322]  ### Filling while reindexing'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE322]  ### 重新索引时填充'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") takes an optional parameter `method` which is a filling
    method chosen from the following table:'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 接受一个可选参数`method`，该参数是从以下表中选择的填充方法：'
- en: '| Method | Action |'
  id: totrans-1023
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 动作 |'
- en: '| --- | --- |'
  id: totrans-1024
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pad / ffill | Fill values forward |'
  id: totrans-1025
  prefs: []
  type: TYPE_TB
  zh: '| pad / ffill | 向前填充值 |'
- en: '| bfill / backfill | Fill values backward |'
  id: totrans-1026
  prefs: []
  type: TYPE_TB
  zh: '| bfill / backfill | 向后填充值 |'
- en: '| nearest | Fill from the nearest index value |'
  id: totrans-1027
  prefs: []
  type: TYPE_TB
  zh: '| nearest | 从最近的索引值填充 |'
- en: 'We illustrate these fill methods on a simple Series:'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个简单的 Series 上演示这些填充方法：
- en: '[PRE323]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: These methods require that the indexes are **ordered** increasing or decreasing.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法要求索引是**有序**递增或递减的。
- en: 'Note that the same result could have been achieved using [ffill](missing_data.html#missing-data-fillna)
    (except for `method=''nearest''`) or [interpolate](missing_data.html#missing-data-interpolate):'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用[ffill](missing_data.html#missing-data-fillna)（除了`method='nearest'`）或[interpolate](missing_data.html#missing-data-interpolate)也可以达到相同的结果：
- en: '[PRE324]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") will raise a ValueError if the index is not monotonically
    increasing or decreasing. [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") will not perform any checks on the order of the index.  ###
    Limits on filling while reindexing'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 当索引不是单调递增或递减时，[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 会引发 ValueError。[`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") 和 [`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") 不会对索引的顺序执行任何检查。### 重新索引时的填充限制
- en: 'The `limit` and `tolerance` arguments provide additional control over filling
    while reindexing. Limit specifies the maximum count of consecutive matches:'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit` 和 `tolerance` 参数提供了在重新索引时填充的额外控制。Limit 指定连续匹配的最大计数：'
- en: '[PRE325]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'In contrast, tolerance specifies the maximum distance between the index and
    indexer values:'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，容差指定索引和索引器值之间的最大距离：
- en: '[PRE326]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'Notice that when used on a `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`,
    `tolerance` will coerced into a `Timedelta` if possible. This allows you to specify
    tolerance with appropriate strings.  ### Dropping labels from an axis'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当在 `DatetimeIndex`、`TimedeltaIndex` 或 `PeriodIndex` 上使用时，如果可能，`tolerance`
    将被强制转换为 `Timedelta`。这允许您使用适当的字符串指定容差。### 从轴中删除标签
- en: 'A method closely related to `reindex` is the [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") function. It removes a set of labels from an axis:'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `reindex` 密切相关的方法是 [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") 函数。它从轴中删除一组标签：
- en: '[PRE327]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'Note that the following also works, but is a bit less obvious / clean:'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下方法也有效，但不够明显/干净：
- en: '[PRE328]  ### Renaming / mapping labels'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE328]  ### 重命名 / 映射标签'
- en: The [`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") method allows you to relabel an axis based on some
    mapping (a dict or Series) or an arbitrary function.
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") 方法允许您根据某些映射（字典或 Series）或任意函数重新标记轴。'
- en: '[PRE329]'
  id: totrans-1044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: 'If you pass a function, it must return a value when called with any of the
    labels (and must produce a set of unique values). A dict or Series can also be
    used:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递一个函数，当使用任何标签调用时，它必须返回一个值（并且必须生成一组唯一值）。也可以使用字典或 Series：
- en: '[PRE330]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: If the mapping doesn’t include a column/index label, it isn’t renamed. Note
    that extra labels in the mapping don’t throw an error.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 如果映射不包括列/索引标签，则不会重命名。请注意，映射中的额外标签不会引发错误。
- en: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") also supports an “axis-style” calling convention, where
    you specify a single `mapper` and the `axis` to apply that mapping to.'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") 还支持“轴样式”调用约定，您可以指定单个 `mapper` 和要应用该映射的 `axis`。'
- en: '[PRE331]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: Finally, [`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") also accepts a scalar or list-like for altering the `Series.name`
    attribute.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") 还接受标量或类似列表以修改 `Series.name` 属性。
- en: '[PRE332]'
  id: totrans-1051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: The methods [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") and [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") allow specific names of a `MultiIndex` to be changed
    (as opposed to the labels).
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") 和 [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") 方法允许更改 `MultiIndex` 的特定名称（而不是标签）。'
- en: '[PRE333]  ### Reindexing to align with another object'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE333]  ### 重新索引以与另一个对象对齐'
- en: 'You may wish to take an object and reindex its axes to be labeled the same
    as another object. While the syntax for this is straightforward albeit verbose,
    it is a common enough operation that the [`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like") method is available to make this simpler:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望取一个对象，并将其轴重新索引为与另一个对象相同的标签。虽然这个语法是简单明了的，但它是一个常见的操作，[`reindex_like()`](../reference/api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like") 方法可用于简化这个操作：
- en: '[PRE334]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '### Aligning objects with each other with `align`'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 `align` 将对象与其他对象对齐'
- en: 'The [`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align
    "pandas.Series.align") method is the fastest way to simultaneously align two objects.
    It supports a `join` argument (related to [joining and merging](merging.html#merging)):'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '[`align()`](../reference/api/pandas.Series.align.html#pandas.Series.align "pandas.Series.align")
    方法是同时对齐两个对象的最快方法。它支持一个 `join` 参数（与 [joining and merging](merging.html#merging)
    相关）：'
- en: '`join=''outer''`: take the union of the indexes (default)'
  id: totrans-1058
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''outer''`：取索引的并集（默认）'
- en: ''
  id: totrans-1059
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1060
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''left''`: use the calling object’s index'
  id: totrans-1061
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''left''`：使用调用对象的索引'
- en: ''
  id: totrans-1062
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1063
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''right''`: use the passed object’s index'
  id: totrans-1064
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''right''`：使用传递对象的索引'
- en: ''
  id: totrans-1065
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1066
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`join=''inner''`: intersect the indexes'
  id: totrans-1067
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join=''inner''`：交集索引'
- en: 'It returns a tuple with both of the reindexed Series:'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个包含重新索引的两个 Series 的元组：
- en: '[PRE335]'
  id: totrans-1069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'For DataFrames, the join method will be applied to both the index and the columns
    by default:'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DataFrame，默认情况下 join 方法将应用于索引和列：
- en: '[PRE336]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'You can also pass an `axis` option to only align on the specified axis:'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传递一个 `axis` 选项，只在指定的轴上对齐：
- en: '[PRE337]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'If you pass a Series to [`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align"), you can choose to align both objects either on the
    DataFrame’s index or columns using the `axis` argument:'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个 Series 传递给[`DataFrame.align()`](../reference/api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")，你可以选择使用 `axis` 参数来对齐 DataFrame 的索引或列：
- en: '[PRE338]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '### Filling while reindexing'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重新索引时进行填充'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") takes an optional parameter `method` which is a filling
    method chosen from the following table:'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 接受一个可选参数 `method`，这是从以下表中选择的填充方法：'
- en: '| Method | Action |'
  id: totrans-1078
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 动作 |'
- en: '| --- | --- |'
  id: totrans-1079
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pad / ffill | Fill values forward |'
  id: totrans-1080
  prefs: []
  type: TYPE_TB
  zh: '| pad / ffill | 向前填充值 |'
- en: '| bfill / backfill | Fill values backward |'
  id: totrans-1081
  prefs: []
  type: TYPE_TB
  zh: '| bfill / backfill | 向后填充值 |'
- en: '| nearest | Fill from the nearest index value |'
  id: totrans-1082
  prefs: []
  type: TYPE_TB
  zh: '| nearest | 从最近的索引值填充 |'
- en: 'We illustrate these fill methods on a simple Series:'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个简单的 Series 上说明这些填充方法：
- en: '[PRE339]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: These methods require that the indexes are **ordered** increasing or decreasing.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法要求索引是**有序**的，递增或递减的。
- en: 'Note that the same result could have been achieved using [ffill](missing_data.html#missing-data-fillna)
    (except for `method=''nearest''`) or [interpolate](missing_data.html#missing-data-interpolate):'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，可以使用 [ffill](missing_data.html#missing-data-fillna)（除了 `method='nearest'`）或
    [interpolate](missing_data.html#missing-data-interpolate) 来实现相同的结果：
- en: '[PRE340]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") will raise a ValueError if the index is not monotonically
    increasing or decreasing. [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") and [`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") will not perform any checks on the order of the index.'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 当索引不是单调递增或递减时，[`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") 会引发 ValueError。[`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") 和 [`interpolate()`](../reference/api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate") 不会对索引的顺序进行任何检查。
- en: '### Limits on filling while reindexing'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重新索引时填充的限制'
- en: 'The `limit` and `tolerance` arguments provide additional control over filling
    while reindexing. Limit specifies the maximum count of consecutive matches:'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit` 和 `tolerance` 参数提供了在重新索引时填充的额外控制。Limit 指定连续匹配的最大计数：'
- en: '[PRE341]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'In contrast, tolerance specifies the maximum distance between the index and
    indexer values:'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，容差指定索引和索引器值之间的最大距离：
- en: '[PRE342]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: Notice that when used on a `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`,
    `tolerance` will coerced into a `Timedelta` if possible. This allows you to specify
    tolerance with appropriate strings.
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当用于 `DatetimeIndex`、`TimedeltaIndex` 或 `PeriodIndex` 时，如果可能的话，`tolerance`
    会被转换为 `Timedelta`。这允许您使用适当的字符串指定容差。
- en: '### Dropping labels from an axis'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从轴中删除标签'
- en: 'A method closely related to `reindex` is the [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") function. It removes a set of labels from an axis:'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `reindex` 密切相关的方法是 [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") 函数。它从轴中删除一组标签：
- en: '[PRE343]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: 'Note that the following also works, but is a bit less obvious / clean:'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，以下方法也有效，但不够明显/清晰：
- en: '[PRE344]'
  id: totrans-1099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '### Renaming / mapping labels'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '### 重命名/映射标签'
- en: The [`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") method allows you to relabel an axis based on some
    mapping (a dict or Series) or an arbitrary function.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") 方法允许您基于一些映射（dict 或 Series）或任意函数重新标记轴。'
- en: '[PRE345]'
  id: totrans-1102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: 'If you pass a function, it must return a value when called with any of the
    labels (and must produce a set of unique values). A dict or Series can also be
    used:'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递一个函数，调用任何标签时必须返回一个值（并且必须产生一组唯一值）。也可以使用 dict 或 Series：
- en: '[PRE346]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: If the mapping doesn’t include a column/index label, it isn’t renamed. Note
    that extra labels in the mapping don’t throw an error.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果映射不包括列/索引标签，则不会重命名。请注意，映射中的额外标签不会引发错误。
- en: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") also supports an “axis-style” calling convention, where
    you specify a single `mapper` and the `axis` to apply that mapping to.'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") 还支持“轴样式”调用约定，您可以指定单个 `mapper` 和要应用该映射的 `axis`。'
- en: '[PRE347]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: Finally, [`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") also accepts a scalar or list-like for altering the `Series.name`
    attribute.
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[`rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") 也接受标量或类似列表以更改 `Series.name` 属性。
- en: '[PRE348]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: The methods [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") and [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") allow specific names of a `MultiIndex` to be changed
    (as opposed to the labels).
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") 和 [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") 允许更改 `MultiIndex` 的特定名称（而不是标签）。
- en: '[PRE349]'
  id: totrans-1111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '## Iteration'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '## 迭代'
- en: The behavior of basic iteration over pandas objects depends on the type. When
    iterating over a Series, it is regarded as array-like, and basic iteration produces
    the values. DataFrames follow the dict-like convention of iterating over the “keys”
    of the objects.
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 pandas 对象的基本迭代行为取决于类型。当迭代 Series 时，它被视为类似数组，基本迭代会产生数值。DataFrame 遵循字典的惯例，迭代对象的“键”。
- en: 'In short, basic iteration (`for i in object`) produces:'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，基本迭代（`for i in object`）会产生：
- en: '**Series**: values'
  id: totrans-1115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：数值'
- en: '**DataFrame**: column labels'
  id: totrans-1116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：列标签'
- en: 'Thus, for example, iterating over a DataFrame gives you the column names:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，迭代 DataFrame 将为您提供列名：
- en: '[PRE350]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: pandas objects also have the dict-like [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") method to iterate over the (key, value) pairs.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象还具有类似字典的 [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") 方法，用于迭代（键，值）对。
- en: 'To iterate over the rows of a DataFrame, you can use the following methods:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 要迭代 DataFrame 的行，可以使用以下方法：
- en: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows"): Iterate over the rows of a DataFrame as (index,
    Series) pairs. This converts the rows to Series objects, which can change the
    dtypes and has some performance implications.'
  id: totrans-1121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")：将 DataFrame 的行作为（索引，Series）对进行迭代。这会将行转换为 Series 对象，这可能会改变
    dtypes 并具有一些性能影响。'
- en: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples"): Iterate over the rows of a DataFrame as namedtuples
    of the values. This is a lot faster than [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows"), and is in most cases preferable to use to iterate
    over the values of a DataFrame.'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")：将 DataFrame 的行作为命名元组的值进行迭代。这比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")快得多，并且在大多数情况下，最好使用它来迭代 DataFrame 的值。'
- en: Warning
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'Iterating through pandas objects is generally **slow**. In many cases, iterating
    manually over the rows is not needed and can be avoided with one of the following
    approaches:'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 pandas 对象进行迭代通常**较慢**。在许多情况下，不需要手动遍历行，并且可以通过以下方法之一避免：
- en: 'Look for a *vectorized* solution: many operations can be performed using built-in
    methods or NumPy functions, (boolean) indexing, …'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找*矢量化*解决方案：许多操作可以使用内置方法或NumPy函数（布尔）索引等来执行，…
- en: When you have a function that cannot work on the full DataFrame/Series at once,
    it is better to use [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply") instead of iterating over the values. See the docs on
    [function application](#basics-apply).
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您有一个无法一次处理完整 DataFrame/Series 的函数时，最好使用[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")而不是迭代值。请参阅[函数应用](#basics-apply)部分的文档。
- en: If you need to do iterative manipulations on the values but performance is important,
    consider writing the inner loop with cython or numba. See the [enhancing performance](enhancingperf.html#enhancingperf)
    section for some examples of this approach.
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要对值进行迭代操作但性能很重要，请考虑使用cython或numba编写内部循环。请参阅[提高性能](enhancingperf.html#enhancingperf)部分，了解一些此方法的示例。
- en: Warning
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: You should **never modify** something you are iterating over. This is not guaranteed
    to work in all cases. Depending on the data types, the iterator returns a copy
    and not a view, and writing to it will have no effect!
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 您**永远不应该修改**您正在迭代的内容。这并不保证在所有情况下都有效。根据数据类型，迭代器返回一个副本而不是视图，对其进行写入将不会产生任何效果！
- en: 'For example, in the following case setting the value has no effect:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下情况中设置值没有效果：
- en: '[PRE351]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: items
  id: totrans-1132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: items
- en: 'Consistent with the dict-like interface, [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") iterates through key-value pairs:'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 与类似字典的接口一致，[`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")遍历键值对：
- en: '**Series**: (index, scalar value) pairs'
  id: totrans-1134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：(索引，标量值)对'
- en: '**DataFrame**: (column, Series) pairs'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：(列，Series)对'
- en: 'For example:'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE352]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '### iterrows'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '### iterrows'
- en: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") allows you to iterate through the rows of a DataFrame
    as Series objects. It returns an iterator yielding each index value along with
    a Series containing the data in each row:'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")允许您将 DataFrame 的行作为 Series 对象进行迭代。它返回一个迭代器，产生每个索引值以及包含每行数据的
    Series：'
- en: '[PRE353]'
  id: totrans-1140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: Note
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") returns a Series for each row, it does **not** preserve
    dtypes across the rows (dtypes are preserved across columns for DataFrames). For
    example,
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 因为[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")为每行返回一个 Series，它**不会**在行之间保留数据类型（数据类型在 DataFrame 的列之间保留）。例如，
- en: '[PRE354]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: 'All values in `row`, returned as a Series, are now upcasted to floats, also
    the original integer value in column `x`:'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '`row`中的所有值，作为一个 Series 返回，现在都被转换为浮点数，包括列`x`中的原始整数值：'
- en: '[PRE355]'
  id: totrans-1145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: To preserve dtypes while iterating over the rows, it is better to use [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") which returns namedtuples of the values and which
    is generally much faster than [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在迭代行时保留数据类型，最好使用[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")，它返回值的命名元组，通常比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")快得多。
- en: 'For instance, a contrived way to transpose the DataFrame would be:'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，转置DataFrame的一种构造方法是：
- en: '[PRE356]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: itertuples
  id: totrans-1149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: itertuples
- en: The [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") method will return an iterator yielding a namedtuple
    for each row in the DataFrame. The first element of the tuple will be the row’s
    corresponding index value, while the remaining values are the row values.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 方法将返回一个迭代器，为DataFrame中的每一行生成一个命名元组。元组的第一个元素将是行的相应索引值，而其余值是行值。'
- en: 'For instance:'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE357]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: This method does not convert the row to a Series object; it merely returns the
    values inside a namedtuple. Therefore, [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") preserves the data type of the values and is generally
    faster as [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不会将行转换为Series对象；它仅返回命名元组中的值。因此，[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 保留值的数据类型，并且通常比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") 快得多。
- en: Note
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The column names will be renamed to positional names if they are invalid Python
    identifiers, repeated, or start with an underscore. With a large number of columns
    (>255), regular tuples are returned.
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列名是无效的Python标识符、重复的或以下划线开头，则列名将重命名为位置名称。如果列数较多（>255），则返回常规元组。
- en: items
  id: totrans-1156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目
- en: 'Consistent with the dict-like interface, [`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") iterates through key-value pairs:'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 与类似字典的接口一致，[`items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") 迭代遍历键值对：
- en: '**Series**: (index, scalar value) pairs'
  id: totrans-1158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Series**：(索引，标量值) 对'
- en: '**DataFrame**: (column, Series) pairs'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataFrame**：(列，Series) 对'
- en: 'For example:'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE358]'
  id: totrans-1161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '### iterrows'
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: '### 遍历行'
- en: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") allows you to iterate through the rows of a DataFrame
    as Series objects. It returns an iterator yielding each index value along with
    a Series containing the data in each row:'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") 允许您遍历DataFrame的行作为Series对象。它返回一个迭代器，每个索引值以及包含每行数据的Series：'
- en: '[PRE359]'
  id: totrans-1164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Note
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") returns a Series for each row, it does **not** preserve
    dtypes across the rows (dtypes are preserved across columns for DataFrames). For
    example,
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 因为[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") 为每行返回一个Series，它**不会**在行之间保留dtype（对于DataFrame，dtype在列之间保留）。例如，
- en: '[PRE360]'
  id: totrans-1167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'All values in `row`, returned as a Series, are now upcasted to floats, also
    the original integer value in column `x`:'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 返回为Series的`row`中的所有值现在都被转换为浮点数，包括列`x`中的原始整数值：
- en: '[PRE361]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: To preserve dtypes while iterating over the rows, it is better to use [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") which returns namedtuples of the values and which
    is generally much faster than [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 在遍历行时保留dtypes，最好使用[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")，它返回值的命名元组，通常比[`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")快得多。
- en: 'For instance, a contrived way to transpose the DataFrame would be:'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，转置DataFrame的一种构造方法是：
- en: '[PRE362]'
  id: totrans-1172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: itertuples
  id: totrans-1173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: itertuples
- en: The [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") method will return an iterator yielding a namedtuple
    for each row in the DataFrame. The first element of the tuple will be the row’s
    corresponding index value, while the remaining values are the row values.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 方法将返回一个迭代器，为DataFrame中的每一行生成一个命名元组。元组的第一个元素将是行的相应索引值，而其余值是行值。'
- en: 'For instance:'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE363]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: This method does not convert the row to a Series object; it merely returns the
    values inside a namedtuple. Therefore, [`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") preserves the data type of the values and is generally
    faster as [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows").
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不会将行转换为 `Series` 对象；它只是返回命名元组内的值。因此，[`itertuples()`](../reference/api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples") 保留了值的数据类型，并且通常比 [`iterrows()`](../reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows") 更快。
- en: Note
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The column names will be renamed to positional names if they are invalid Python
    identifiers, repeated, or start with an underscore. With a large number of columns
    (>255), regular tuples are returned.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列名无效的 Python 标识符、重复或以下划线开头，则列名将重命名为位置名称。当列数较多（>255）时，将返回常规元组。
- en: '## .dt accessor'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '## .dt 访问器'
- en: '`Series` has an accessor to succinctly return datetime like properties for
    the *values* of the Series, if it is a datetime/period like Series. This will
    return a Series, indexed like the existing Series.'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Series` 是日期时间/周期类别的 `Series`，则 `Series` 具有一种访问器，以简洁地返回 `Series` 的*值*的日期时间类属性。这将返回一个
    `Series`，其索引类似于现有的 `Series`。
- en: '[PRE364]'
  id: totrans-1182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'This enables nice expressions like this:'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得可以像这样进行美观的表达：
- en: '[PRE365]'
  id: totrans-1184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'You can easily produces tz aware transformations:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地生成带时区的转换：
- en: '[PRE366]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'You can also chain these types of operations:'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以链接这些类型的操作：
- en: '[PRE367]'
  id: totrans-1188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: You can also format datetime values as strings with [`Series.dt.strftime()`](../reference/api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime") which supports the same format as the standard [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime
    "(in Python v3.12)").
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 [`Series.dt.strftime()`](../reference/api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime") 将日期时间值格式化为字符串，其支持与标准 [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime
    "(在 Python v3.12 中)") 相同的格式。
- en: '[PRE368]'
  id: totrans-1190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: The `.dt` accessor works for period and timedelta dtypes.
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dt` 访问器适用于周期和时间增量数据类型。'
- en: '[PRE370]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-1194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: Note
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`Series.dt` will raise a `TypeError` if you access with a non-datetime-like
    values.'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用非日期时间类似值访问 `Series.dt`，将引发 `TypeError`。
- en: Vectorized string methods
  id: totrans-1197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量化字符串方法
- en: 'Series is equipped with a set of string processing methods that make it easy
    to operate on each element of the array. Perhaps most importantly, these methods
    exclude missing/NA values automatically. These are accessed via the Series’s `str`
    attribute and generally have names matching the equivalent (scalar) built-in string
    methods. For example:'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series` 配备了一组字符串处理方法，使得操作数组的每个元素变得容易。最重要的是，这些方法会自动排除丢失/NA值。通过 `Series` 的 `str`
    属性访问这些方法，通常名称与等效的（标量）内置字符串方法匹配。例如：'
- en: '[PRE372]'
  id: totrans-1199
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE372]'
- en: Powerful pattern-matching methods are provided as well, but note that pattern-matching
    generally uses [regular expressions](https://docs.python.org/3/library/re.html)
    by default (and in some cases always uses them).
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 还提供了强大的模式匹配方法，但请注意，模式匹配通常默认使用[正则表达式](https://docs.python.org/3/library/re.html)（有些情况下总是使用）。
- en: Note
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to pandas 1.0, string methods were only available on `object` -dtype `Series`.
    pandas 1.0 added the [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") which is dedicated to strings. See [Text data types](text.html#text-types)
    for more.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 1.0 之前，字符串方法仅适用于 `object` -dtype `Series`。pandas 1.0 添加了 [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")，专门用于字符串。有关更多信息，请参阅[文本数据类型](text.html#text-types)。
- en: Please see [Vectorized String Methods](text.html#text-string-methods) for a
    complete description.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[向量化字符串方法](text.html#text-string-methods)以获取完整的描述。
- en: '## Sorting'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '## 排序'
- en: 'pandas supports three kinds of sorting: sorting by index labels, sorting by
    column values, and sorting by a combination of both.'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持三种排序方式：按索引标签排序、按列值排序以及按两者组合排序。
- en: '### By index'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '### 按索引'
- en: The [`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index") and [`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") methods are used to sort a pandas object by its
    index levels.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index") 和 [`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") 方法用于按索引级别对 pandas 对象进行排序。'
- en: '[PRE373]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: Sorting by index also supports a `key` parameter that takes a callable function
    to apply to the index being sorted. For `MultiIndex` objects, the key is applied
    per-level to the levels specified by `level`.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 按索引排序还支持一个 `key` 参数，该参数接受一个可调用函数，应用于正在排序的索引。对于 `MultiIndex` 对象，key 会按级别应用到由
    `level` 指定的级别。
- en: '[PRE374]'
  id: totrans-1210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-1211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'For information on key sorting by value, see [value sorting](#basics-sort-value-key).  ###
    By values'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: '有关按值排序的关键信息，请参见 [value sorting](#basics-sort-value-key)。  ### 按值排序'
- en: The [`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values") method is used to sort a `Series` by its values.
    The [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method is used to sort a `DataFrame` by its column
    or row values. The optional `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may used to specify one or more columns to use
    to determine the sorted order.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values") 方法用于按其值对 `Series` 进行排序。[`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") 方法用于按其列或行值对 `DataFrame` 进行排序。可选的 `by` 参数可用于指定一个或多个列以确定排序顺序。'
- en: '[PRE376]'
  id: totrans-1214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'The `by` parameter can take a list of column names, e.g.:'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '`by` 参数可以接受列名的列表，例如：'
- en: '[PRE377]'
  id: totrans-1216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'These methods have special treatment of NA values via the `na_position` argument:'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法通过 `na_position` 参数对 NA 值进行特殊处理：
- en: '[PRE378]'
  id: totrans-1218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Sorting also supports a `key` parameter that takes a callable function to apply
    to the values being sorted.
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 排序还支持一个 `key` 参数，该参数接受一个可调用函数，应用于正在排序的值。
- en: '[PRE379]'
  id: totrans-1220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-1221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '`key` will be given the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") of values and should return a `Series` or array of the same shape
    with the transformed values. For `DataFrame` objects, the key is applied per column,
    so the key should still expect a Series and return a Series, e.g.'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '`key` 将获得值的 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    并应返回具有相同形状的转换值的 `Series` 或数组。对于 `DataFrame` 对象，key 会按列应用，因此 key 仍应期望一个 Series
    并返回一个 Series，例如'
- en: '[PRE381]'
  id: totrans-1223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-1224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'The name or type of each column can be used to apply different functions to
    different columns.  ### By indexes and values'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '每列的名称或类型可用于对不同列应用不同函数。  ### 按索引和值排序'
- en: Strings passed as the `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may refer to either columns or index level names.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `by` 参数传递给 [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") 的字符串可以指代列或索引级别名称。
- en: '[PRE383]'
  id: totrans-1227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Sort by ‘second’ (index) and ‘A’ (column)
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 按‘second’（索引）和‘A’（列）排序
- en: '[PRE384]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Note
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If a string matches both a column name and an index level name then a warning
    is issued and the column takes precedence. This will result in an ambiguity error
    in a future version.  ### searchsorted'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '如果一个字符串既匹配列名又匹配索引级别名称，则会发出警告并且列优先。这将导致在将来版本中出现歧义错误。  ### searchsorted'
- en: Series has the [`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") method, which works similarly to [`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(in NumPy v1.26)").
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: Series 有 [`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") 方法，其工作方式类似于 [`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(在 NumPy v1.26 中)")。
- en: '[PRE385]  ### smallest / largest values'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE385]  ### 最小/最大值'
- en: '`Series` has the [`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest") and [`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest") methods which return the smallest or largest \(n\) values.
    For a large `Series` this can be much faster than sorting the entire Series and
    calling `head(n)` on the result.'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series` 有 [`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest") 和 [`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest") 方法，返回最小或最大的 \(n\) 值。对于大型 `Series`，这比对整个 Series 进行排序并在结果上调用
    `head(n)` 要快得多。'
- en: '[PRE386]'
  id: totrans-1235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '`DataFrame` also has the `nlargest` and `nsmallest` methods.'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame` 也有 `nlargest` 和 `nsmallest` 方法。'
- en: '[PRE387]  ### Sorting by a MultiIndex column'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE387]  ### 按 MultiIndex 列排序'
- en: You must be explicit about sorting when the column is a MultiIndex, and fully
    specify all levels to `by`.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 当列是 MultiIndex 时，必须明确指定排序，并完全指定所有级别到 `by`。
- en: '[PRE388]  ### By index'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE388]  ### 按索引'
- en: The [`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index") and [`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") methods are used to sort a pandas object by its
    index levels.
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.sort_index()`](../reference/api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index") 和 [`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") 方法用于按其索引级别对 pandas 对象进行排序。'
- en: '[PRE389]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: Sorting by index also supports a `key` parameter that takes a callable function
    to apply to the index being sorted. For `MultiIndex` objects, the key is applied
    per-level to the levels specified by `level`.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 按索引排序还支持一个 `key` 参数，该参数接受一个可调用函数，应用于要排序的索引。对于 `MultiIndex` 对象，key 会按指定的 `level`
    对每个级别应用。
- en: '[PRE390]'
  id: totrans-1243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-1244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: For information on key sorting by value, see [value sorting](#basics-sort-value-key).
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 有关按值排序的键排序信息，请参阅 [值排序](#basics-sort-value-key)。
- en: '### By values'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '### 按数值排序'
- en: The [`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values") method is used to sort a `Series` by its values.
    The [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") method is used to sort a `DataFrame` by its column
    or row values. The optional `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may used to specify one or more columns to use
    to determine the sorted order.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Series.sort_values()`](../reference/api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values") 方法可以按其数值对 `Series` 进行排序。使用 [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") 方法可以按其列或行数值对 `DataFrame` 进行排序。可选的 `by` 参数用于指定一个或多个列以确定排序顺序。
- en: '[PRE392]'
  id: totrans-1248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'The `by` parameter can take a list of column names, e.g.:'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: '`by` 参数可以接受列名的列表，例如：'
- en: '[PRE393]'
  id: totrans-1250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: 'These methods have special treatment of NA values via the `na_position` argument:'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法对 NA 值有特殊处理，通过 `na_position` 参数：
- en: '[PRE394]'
  id: totrans-1252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: Sorting also supports a `key` parameter that takes a callable function to apply
    to the values being sorted.
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 排序还支持一个 `key` 参数，该参数接受一个可调用函数，应用于要排序的值。
- en: '[PRE395]'
  id: totrans-1254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-1255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '`key` will be given the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") of values and should return a `Series` or array of the same shape
    with the transformed values. For `DataFrame` objects, the key is applied per column,
    so the key should still expect a Series and return a Series, e.g.'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '`key` 将给出 [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    的值，并应返回一个形状相同的 `Series` 或数组，带有转换后的值。对于 `DataFrame` 对象，key 会按列应用，因此 key 仍应期望一个
    Series，并返回一个 Series，例如：'
- en: '[PRE397]'
  id: totrans-1257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-1258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: The name or type of each column can be used to apply different functions to
    different columns.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 每列的名称或类型可用于对不同列应用不同的函数。
- en: '### By indexes and values'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '### 通过索引和数值'
- en: Strings passed as the `by` parameter to [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") may refer to either columns or index level names.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 [`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") 的 `by` 参数传递的字符串可以是列名，也可以是索引级别名称。
- en: '[PRE399]'
  id: totrans-1262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: Sort by ‘second’ (index) and ‘A’ (column)
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 按‘second’（索引）和‘A’（列）排序
- en: '[PRE400]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Note
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If a string matches both a column name and an index level name then a warning
    is issued and the column takes precedence. This will result in an ambiguity error
    in a future version.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个字符串既匹配列名又匹配索引级别名称，那么会发出警告，并且列优先。这将导致将来版本中的歧义错误。
- en: '### searchsorted'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '### searchsorted'
- en: Series has the [`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") method, which works similarly to [`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(in NumPy v1.26)").
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: Series 有 [`searchsorted()`](../reference/api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted") 方法，工作方式类似于 [`numpy.ndarray.searchsorted()`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "(in NumPy v1.26)")。
- en: '[PRE401]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '### smallest / largest values'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: '### 最小值 / 最大值'
- en: '`Series` has the [`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest") and [`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest") methods which return the smallest or largest \(n\) values.
    For a large `Series` this can be much faster than sorting the entire Series and
    calling `head(n)` on the result.'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`具有[`nsmallest()`](../reference/api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest")和[`nlargest()`](../reference/api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest")方法，返回最小或最大的\(n\)个值。对于大型`Series`，这比对整个Series进行排序并在结果上调用`head(n)`要快得多。'
- en: '[PRE402]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '`DataFrame` also has the `nlargest` and `nsmallest` methods.'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`也有`nlargest`和`nsmallest`方法。'
- en: '[PRE403]'
  id: totrans-1274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '### Sorting by a MultiIndex column'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: '### 按多级索引列排序'
- en: You must be explicit about sorting when the column is a MultiIndex, and fully
    specify all levels to `by`.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 当列是多级索引时，必须明确排序，并完全指定所有级别到`by`。
- en: '[PRE404]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Copying
  id: totrans-1278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制
- en: 'The [`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy") method on pandas objects copies the underlying data (though
    not the axis indexes, since they are immutable) and returns a new object. Note
    that **it is seldom necessary to copy objects**. For example, there are only a
    handful of ways to alter a DataFrame *in-place*:'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: pandas对象上的[`copy()`](../reference/api/pandas.DataFrame.copy.html#pandas.DataFrame.copy
    "pandas.DataFrame.copy")方法会复制基础数据（尽管不会复制轴索引，因为它们是不可变的），并返回一个新对象。请注意**很少需要复制对象**。例如，只有少数几种方法可以*原地*修改DataFrame：
- en: Inserting, deleting, or modifying a column.
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入、删除或修改列。
- en: Assigning to the `index` or `columns` attributes.
  id: totrans-1281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给`index`或`columns`属性。
- en: For homogeneous data, directly modifying the values via the `values` attribute
    or advanced indexing.
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于同质数据，可以通过`values`属性或高级索引直接修改值。
- en: To be clear, no pandas method has the side effect of modifying your data; almost
    every method returns a new object, leaving the original object untouched. If the
    data is modified, it is because you did so explicitly.
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 明确一点，没有任何pandas方法会具有修改数据的副作用；几乎每个方法都会返回一个新对象，保持原始对象不变。如果数据被修改，那是因为你明确这样做了。
- en: '## dtypes'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数据类型'
- en: For the most part, pandas uses NumPy arrays and dtypes for Series or individual
    columns of a DataFrame. NumPy provides support for `float`, `int`, `bool`, `timedelta64[ns]`
    and `datetime64[ns]` (note that NumPy does not support timezone-aware datetimes).
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，pandas使用NumPy数组和数据类型来处理Series或DataFrame的单个列。NumPy支持`float`、`int`、`bool`、`timedelta64[ns]`和`datetime64[ns]`（请注意，NumPy不支持时区感知的日期时间）。
- en: pandas and third-party libraries *extend* NumPy’s type system in a few places.
    This section describes the extensions pandas has made internally. See [Extension
    types](../development/extending.html#extending-extension-types) for how to write
    your own extension that works with pandas. See [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html)
    for a list of third-party libraries that have implemented an extension.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: pandas和第三方库*扩展*了NumPy的类型系统的几个地方。本节描述了pandas在内部所做的扩展。请参阅[扩展类型](../development/extending.html#extending-extension-types)了解如何编写自己的扩展以与pandas一起使用。请参阅[生态系统页面](https://pandas.pydata.org/community/ecosystem.html)查看已实现扩展的第三方库列表。
- en: The following table lists all of pandas extension types. For methods requiring
    `dtype` arguments, strings can be specified as indicated. See the respective documentation
    sections for more on each type.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表列出了所有pandas扩展类型。对于需要`dtype`参数的方法，可以按照指示指定字符串。有关每种类型的更多信息，请参阅相应的文档部分。
- en: '| Kind of Data | Data Type | Scalar | Array | String Aliases |'
  id: totrans-1288
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 数据类型 | 标量 | 数组 | 字符串别名 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-1289
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| [tz-aware datetime](timeseries.html#timeseries-timezone) | [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") | `''datetime64[ns, <tz>]''` |'
  id: totrans-1290
  prefs: []
  type: TYPE_TB
  zh: '| [时区感知日期时间](timeseries.html#timeseries-timezone) | [`DatetimeTZDtype`](../reference/api/pandas.DatetimeTZDtype.html#pandas.DatetimeTZDtype
    "pandas.DatetimeTZDtype") | [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") | [`arrays.DatetimeArray`](../reference/api/pandas.arrays.DatetimeArray.html#pandas.arrays.DatetimeArray
    "pandas.arrays.DatetimeArray") | `''datetime64[ns, <tz>]''` |'
- en: '| [Categorical](categorical.html#categorical) | [`CategoricalDtype`](../reference/api/pandas.CategoricalDtype.html#pandas.CategoricalDtype
    "pandas.CategoricalDtype") | (none) | [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") | `''category''` |'
  id: totrans-1291
  prefs: []
  type: TYPE_TB
- en: '| [period (time spans)](timeseries.html#timeseries-periods) | [`PeriodDtype`](../reference/api/pandas.PeriodDtype.html#pandas.PeriodDtype
    "pandas.PeriodDtype") | [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") | [`arrays.PeriodArray`](../reference/api/pandas.arrays.PeriodArray.html#pandas.arrays.PeriodArray
    "pandas.arrays.PeriodArray") `''Period[<freq>]''` | `''period[<freq>]''`, |'
  id: totrans-1292
  prefs: []
  type: TYPE_TB
- en: '| [sparse](sparse.html#sparse) | [`SparseDtype`](../reference/api/pandas.SparseDtype.html#pandas.SparseDtype
    "pandas.SparseDtype") | (none) | [`arrays.SparseArray`](../reference/api/pandas.arrays.SparseArray.html#pandas.arrays.SparseArray
    "pandas.arrays.SparseArray") | `''Sparse''`, `''Sparse[int]''`, `''Sparse[float]''`
    |'
  id: totrans-1293
  prefs: []
  type: TYPE_TB
- en: '| [intervals](advanced.html#advanced-intervalindex) | [`IntervalDtype`](../reference/api/pandas.IntervalDtype.html#pandas.IntervalDtype
    "pandas.IntervalDtype") | [`Interval`](../reference/api/pandas.Interval.html#pandas.Interval
    "pandas.Interval") | [`arrays.IntervalArray`](../reference/api/pandas.arrays.IntervalArray.html#pandas.arrays.IntervalArray
    "pandas.arrays.IntervalArray") | `''interval''`, `''Interval''`, `''Interval[<numpy_dtype>]''`,
    `''Interval[datetime64[ns, <tz>]]''`, `''Interval[timedelta64[<freq>]]''` |'
  id: totrans-1294
  prefs: []
  type: TYPE_TB
- en: '| [nullable integer](integer_na.html#integer-na) | [`Int64Dtype`](../reference/api/pandas.Int64Dtype.html#pandas.Int64Dtype
    "pandas.Int64Dtype"), … | (none) | [`arrays.IntegerArray`](../reference/api/pandas.arrays.IntegerArray.html#pandas.arrays.IntegerArray
    "pandas.arrays.IntegerArray") | `''Int8''`, `''Int16''`, `''Int32''`, `''Int64''`,
    `''UInt8''`, `''UInt16''`, `''UInt32''`, `''UInt64''` |'
  id: totrans-1295
  prefs: []
  type: TYPE_TB
- en: '| [nullable float](../reference/arrays.html#api-arrays-float-na) | [`Float64Dtype`](../reference/api/pandas.Float64Dtype.html#pandas.Float64Dtype
    "pandas.Float64Dtype"), … | (none) | [`arrays.FloatingArray`](../reference/api/pandas.arrays.FloatingArray.html#pandas.arrays.FloatingArray
    "pandas.arrays.FloatingArray") | `''Float32''`, `''Float64''` |'
  id: totrans-1296
  prefs: []
  type: TYPE_TB
- en: '| [Strings](text.html#text) | [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") | [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") | `''string''` |'
  id: totrans-1297
  prefs: []
  type: TYPE_TB
- en: '| [Boolean (with NA)](../reference/arrays.html#api-arrays-bool) | [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)") | [`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") | `''boolean''` |'
  id: totrans-1298
  prefs: []
  type: TYPE_TB
  zh: '| [布尔（带 NA）](../reference/arrays.html#api-arrays-bool) | [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.12)") | [`arrays.BooleanArray`](../reference/api/pandas.arrays.BooleanArray.html#pandas.arrays.BooleanArray
    "pandas.arrays.BooleanArray") | `''boolean''` |'
- en: pandas has two ways to store strings.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 有两种存储字符串的方式。
- en: '`object` dtype, which can hold any Python object, including strings.'
  id: totrans-1300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object`数据类型，可以保存任何 Python 对象，包括字符串。'
- en: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), which is dedicated to strings.'
  id: totrans-1301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")，专门用于字符串。'
- en: Generally, we recommend using [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"). See [Text data types](text.html#text-types) for more.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们建议使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")。更多信息请参阅[文本数据类型](text.html#text-types)。
- en: Finally, arbitrary objects may be stored using the `object` dtype, but should
    be avoided to the extent possible (for performance and interoperability with other
    libraries and methods. See [object conversion](#basics-object-conversion)).
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用`object`数据类型存储任意对象，但应尽可能避免（出于性能和与其他库和方法的互操作性考虑。请参阅[对象转换](#basics-object-conversion)）。
- en: A convenient [`dtypes`](../reference/api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") attribute for DataFrame returns a Series with the data
    type of each column.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的[`dtypes`](../reference/api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes")属性用于 DataFrame 返回一个 Series，其中包含每列的数据类型。
- en: '[PRE405]'
  id: totrans-1305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: On a `Series` object, use the [`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype") attribute.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`对象上，使用[`dtype`](../reference/api/pandas.Series.dtype.html#pandas.Series.dtype
    "pandas.Series.dtype")属性。
- en: '[PRE406]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: If a pandas object contains data with multiple dtypes *in a single column*,
    the dtype of the column will be chosen to accommodate all of the data types (`object`
    is the most general).
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 pandas 对象包含具有多种数据类型*在单个列中*的数据，则将选择列的数据类型以容纳所有数据类型（`object`是最通用的）。
- en: '[PRE407]'
  id: totrans-1309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: The number of columns of each type in a `DataFrame` can be found by calling
    `DataFrame.dtypes.value_counts()`.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过调用`DataFrame.dtypes.value_counts()`来查找`DataFrame`中每种类型的列数。
- en: '[PRE408]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: Numeric dtypes will propagate and can coexist in DataFrames. If a dtype is passed
    (either directly via the `dtype` keyword, a passed `ndarray`, or a passed `Series`),
    then it will be preserved in DataFrame operations. Furthermore, different numeric
    dtypes will **NOT** be combined. The following example will give you a taste.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 数值数据类型将传播并可以共存于数据框中。如果传递了数据类型（可以直接通过`dtype`关键字、传递的`ndarray`或传递的`Series`），那么它将在数据框操作中保留。此外，不同的数值数据类型**不会**被合并。以下示例将让你有所了解。
- en: '[PRE409]'
  id: totrans-1313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: defaults
  id: totrans-1314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认值
- en: By default integer types are `int64` and float types are `float64`, *regardless*
    of platform (32-bit or 64-bit). The following will all result in `int64` dtypes.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整数类型为`int64`，浮点类型为`float64`，*不受*平台（32位或64位）的影响。以下都将导致`int64`数据类型。
- en: '[PRE410]'
  id: totrans-1316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: Note that Numpy will choose *platform-dependent* types when creating arrays.
    The following **WILL** result in `int32` on 32-bit platform.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当创建数组时，Numpy 将选择*依赖于平台*的类型。以下将在32位平台上导致`int32`。
- en: '[PRE411]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: upcasting
  id: totrans-1319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向上转换
- en: Types can potentially be *upcasted* when combined with other types, meaning
    they are promoted from the current type (e.g. `int` to `float`).
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 当与其他类型组合时，类型可能会*向上转换*，这意味着它们从当前类型（例如`int`到`float`）提升。
- en: '[PRE412]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will return the *lower-common-denominator* of the
    dtypes, meaning the dtype that can accommodate **ALL** of the types in the resulting
    homogeneous dtyped NumPy array. This can force some *upcasting*.'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")将返回*较低的公共分母*，意味着可以容纳结果同质化的 NumPy 数组中的**所有**类型的数据类型。这可能会导致一些*向上转换*。'
- en: '[PRE413]'
  id: totrans-1323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: astype
  id: totrans-1324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype
- en: You can use the [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") method to explicitly convert dtypes from one to another.
    These will by default return a copy, even if the dtype was unchanged (pass `copy=False`
    to change this behavior). In addition, they will raise an exception if the astype
    operation is invalid.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")方法显式地将dtype从一种转换为另一种。即使dtype未更改，它们默认也会返回一个副本（传递`copy=False`以更改此行为）。此外，如果astype操作无效，它们将引发异常。
- en: Upcasting is always according to the **NumPy** rules. If two different dtypes
    are involved in an operation, then the more *general* one will be used as the
    result of the operation.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 向上转型始终遵循**NumPy**规则。如果操作涉及两种不同的dtype，则将使用更*通用*的dtype作为操作的结果。
- en: '[PRE414]'
  id: totrans-1327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: Convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")将一部分列转换为指定类型。
- en: '[PRE415]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Convert certain columns to a specific dtype by passing a dict to [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")，将某些列转换为特定的dtype。
- en: '[PRE416]'
  id: totrans-1331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: Note
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When trying to convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") and [`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc"), upcasting occurs.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")和[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc")将一部分列转换为指定类型时，会发生向上转型。
- en: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    tries to fit in what we are assigning to the current dtypes, while `[]` will overwrite
    them taking the dtype from the right hand side. Therefore the following piece
    of code produces the unintended result.'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")尝试适应我们分配给当前dtype的内容，而`[]`将覆盖它们，从右侧获取dtype。因此，以下代码片段会产生意外结果。'
- en: '[PRE417]'
  id: totrans-1335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '### object conversion'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: '### 对象转换'
- en: pandas offers various functions to try to force conversion of types from the
    `object` dtype to other types. In cases where the data is already of the correct
    type, but stored in an `object` array, the [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods can be used to soft convert to the correct
    type.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供各种函数，尝试强制将类型从`object` dtype转换为其他类型。在数据已经是正确类型但存储在`object`数组中的情况下，可以使用[`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")和[`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects")方法进行软转换为正确类型。
- en: '[PRE418]'
  id: totrans-1338
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE418]'
- en: Because the data was transposed the original inference stored all columns as
    object, which `infer_objects` will correct.
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据被转置，原始推断将所有列存储为对象，`infer_objects`将进行更正。
- en: '[PRE419]'
  id: totrans-1340
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'The following functions are available for one dimensional object arrays or
    scalars to perform hard conversion of objects to a specified type:'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 下列函数可用于一维对象数组或标量，执行将对象硬转换为指定类型：
- en: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") (conversion to numeric dtypes)'
  id: totrans-1342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")（转换为数值dtype）'
- en: '[PRE420]'
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") (conversion to datetime objects)'
  id: totrans-1344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")（转换为日期时间对象）'
- en: '[PRE421]'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") (conversion to timedelta objects)'
  id: totrans-1346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")（转换为时间增量对象）'
- en: '[PRE422]'
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: 'To force a conversion, we can pass in an `errors` argument, which specifies
    how pandas should deal with elements that cannot be converted to desired dtype
    or object. By default, `errors=''raise''`, meaning that any errors encountered
    will be raised during the conversion process. However, if `errors=''coerce''`,
    these errors will be ignored and pandas will convert problematic elements to `pd.NaT`
    (for datetime and timedelta) or `np.nan` (for numeric). This might be useful if
    you are reading in data which is mostly of the desired dtype (e.g. numeric, datetime),
    but occasionally has non-conforming elements intermixed that you want to represent
    as missing:'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制转换，我们可以传入一个`errors`参数，该参数指定 pandas 如何处理无法转换为所需数据类型或对象的元素。默认情况下，`errors='raise'`，意味着在转换过程中遇到的任何错误都将被引发。但是，如果`errors='coerce'`，这些错误将被忽略，pandas
    将把有问题的元素转换为`pd.NaT`（对于日期时间和时间增量）或`np.nan`（对于数值）。如果您正在读取大部分为所需数据类型（例如数值、日期时间）的数据，但偶尔混有不符合规范的元素，您希望将其表示为缺失值，则这可能很有用：
- en: '[PRE423]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'In addition to object conversion, [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") provides another argument `downcast`, which gives the option
    of downcasting the newly (or already) numeric data to a smaller dtype, which can
    conserve memory:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对象转换，[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")还提供另一个参数`downcast`，该参数可以将新（或已有）数值数据向下转换为较小的数据类型，从而节省内存：
- en: '[PRE424]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: 'As these methods apply only to one-dimensional arrays, lists or scalars; they
    cannot be used directly on multi-dimensional objects such as DataFrames. However,
    with [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"), we can “apply” the function over each column efficiently:'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些方法仅适用于一维数组、列表或标量；它们不能直接用于多维对象，如 DataFrames。但是，通过[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")，我们可以高效地对每列“应用”函数：
- en: '[PRE425]'
  id: totrans-1353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: gotchas
  id: totrans-1354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Performing selection operations on `integer` type data can easily upcast the
    data to `floating`. The dtype of the input data will be preserved in cases where
    `nans` are not introduced. See also [Support for integer NA](gotchas.html#gotchas-intna).
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 对`整数`类型数据执行选择操作可能会轻松将数据向上转型为`浮点数`。在不引入`nans`的情况下，输入数据的数据类型将被保留。另请参阅[对整数 NA 的支持](gotchas.html#gotchas-intna)。
- en: '[PRE426]'
  id: totrans-1356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: While float dtypes are unchanged.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数数据类型不会改变。
- en: '[PRE427]'
  id: totrans-1358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: defaults
  id: totrans-1359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认值
- en: By default integer types are `int64` and float types are `float64`, *regardless*
    of platform (32-bit or 64-bit). The following will all result in `int64` dtypes.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，整数类型为`int64`，浮点数类型为`float64`，*不受*平台（32 位或 64 位）影响。以下操作将全部导致`int64`数据类型。
- en: '[PRE428]'
  id: totrans-1361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: Note that Numpy will choose *platform-dependent* types when creating arrays.
    The following **WILL** result in `int32` on 32-bit platform.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当创建数组时，Numpy 将选择*平台相关*类型。以下操作在 32 位平台上将导致`int32`。
- en: '[PRE429]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: upcasting
  id: totrans-1364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向上转型
- en: Types can potentially be *upcasted* when combined with other types, meaning
    they are promoted from the current type (e.g. `int` to `float`).
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 当与其他类型组合时，类型可能会*向上转型*，这意味着它们从当前类型（例如`int`）提升为`float`。
- en: '[PRE430]'
  id: totrans-1366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will return the *lower-common-denominator* of the
    dtypes, meaning the dtype that can accommodate **ALL** of the types in the resulting
    homogeneous dtyped NumPy array. This can force some *upcasting*.'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")将返回数据类型的*最低公共分母*，即可以容纳结果中所有类型的同类数据类型 NumPy 数组。这可能会强制进行一些*向上转型*。'
- en: '[PRE431]'
  id: totrans-1368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: astype
  id: totrans-1369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype
- en: You can use the [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") method to explicitly convert dtypes from one to another.
    These will by default return a copy, even if the dtype was unchanged (pass `copy=False`
    to change this behavior). In addition, they will raise an exception if the astype
    operation is invalid.
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")方法将数据类型明确转换为另一种数据类型。即使数据类型未更改，这些方法默认也会返回一个副本（如果要更改此行为，请传递`copy=False`）。此外，如果
    astype 操作无效，它们将引发异常。
- en: Upcasting is always according to the **NumPy** rules. If two different dtypes
    are involved in an operation, then the more *general* one will be used as the
    result of the operation.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 向上转型始终遵循**NumPy**规则。如果操作涉及两种不同的数据类型，则将使用更*通用*的数据类型作为操作的结果。
- en: '[PRE432]'
  id: totrans-1372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")将一部分列转换为指定类型。
- en: '[PRE433]'
  id: totrans-1374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: Convert certain columns to a specific dtype by passing a dict to [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype").
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")将某些列转换为特定数据类型。
- en: '[PRE434]'
  id: totrans-1376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: Note
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When trying to convert a subset of columns to a specified type using [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") and [`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc"), upcasting occurs.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用[`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")和[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc")将一部分列转换为指定类型时，会发生向上转换。
- en: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    tries to fit in what we are assigning to the current dtypes, while `[]` will overwrite
    them taking the dtype from the right hand side. Therefore the following piece
    of code produces the unintended result.'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: '[`loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    尝试适应我们正在分配的当前数据类型，而`[]`将覆盖它们，从右侧获取数据类型。因此，以下代码片段会产生意外结果。'
- en: '[PRE435]'
  id: totrans-1380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '### object conversion'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: '### 对象转换'
- en: pandas offers various functions to try to force conversion of types from the
    `object` dtype to other types. In cases where the data is already of the correct
    type, but stored in an `object` array, the [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods can be used to soft convert to the correct
    type.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 提供各种函数来尝试强制将`object`数据类型转换为其他类型。在数据已经是正确类型但存储在`object`数组中的情况下，可以使用[`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")和[`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects")方法进行软转换为正确类型。
- en: '[PRE436]'
  id: totrans-1383
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE436]'
- en: Because the data was transposed the original inference stored all columns as
    object, which `infer_objects` will correct.
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据被转置，原始推断将所有列存储为对象，`infer_objects`���进行更正。
- en: '[PRE437]'
  id: totrans-1385
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE437]'
- en: 'The following functions are available for one dimensional object arrays or
    scalars to perform hard conversion of objects to a specified type:'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数可用于一维对象数组或标量，以执行将对象硬转换为指定类型：
- en: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") (conversion to numeric dtypes)'
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")（转换为数值数据类型）'
- en: '[PRE438]'
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") (conversion to datetime objects)'
  id: totrans-1389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")（转换为日期时间对象）'
- en: '[PRE439]'
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta") (conversion to timedelta objects)'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")（转换为时间间隔对象）'
- en: '[PRE440]'
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: 'To force a conversion, we can pass in an `errors` argument, which specifies
    how pandas should deal with elements that cannot be converted to desired dtype
    or object. By default, `errors=''raise''`, meaning that any errors encountered
    will be raised during the conversion process. However, if `errors=''coerce''`,
    these errors will be ignored and pandas will convert problematic elements to `pd.NaT`
    (for datetime and timedelta) or `np.nan` (for numeric). This might be useful if
    you are reading in data which is mostly of the desired dtype (e.g. numeric, datetime),
    but occasionally has non-conforming elements intermixed that you want to represent
    as missing:'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制转换，我们可以传入一个`errors`参数，指定 pandas 如何处理无法转换为所需数据类型或对象的元素。默认情况下，`errors='raise'`，意味着在转换过程中遇到任何错误都将被引发。但是，如果`errors='coerce'`，这些错误将被忽略，pandas
    将把有问题的元素转换为`pd.NaT`（对于日期时间和时间间隔）或`np.nan`（对于数值）。如果您正在读取大部分为所需数据类型（例如数值、日期时间）的数据，但偶尔混合有不符合规范的元素，您希望将其表示为缺失值，则这可能很有用：
- en: '[PRE441]'
  id: totrans-1394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'In addition to object conversion, [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") provides another argument `downcast`, which gives the option
    of downcasting the newly (or already) numeric data to a smaller dtype, which can
    conserve memory:'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对象转换外，[`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric")还提供另一个参数`downcast`，该参数可以选择将新的（或已有的）数值数据向下转换为较小的数据类型，从而节省内存：
- en: '[PRE442]'
  id: totrans-1396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: 'As these methods apply only to one-dimensional arrays, lists or scalars; they
    cannot be used directly on multi-dimensional objects such as DataFrames. However,
    with [`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply"), we can “apply” the function over each column efficiently:'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些方法仅适用于一维数组、列表或标量；不能直接用于诸如数据框之类的多维对象。但是，通过[`apply()`](../reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")，我们可以高效地“应用”函数到每一列：
- en: '[PRE443]'
  id: totrans-1398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: gotchas
  id: totrans-1399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Performing selection operations on `integer` type data can easily upcast the
    data to `floating`. The dtype of the input data will be preserved in cases where
    `nans` are not introduced. See also [Support for integer NA](gotchas.html#gotchas-intna).
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 对`integer`类型数据执行选择操作可以轻松地将数据向上转换为`floating`。在不引入`nans`的情况下，输入数据的数据类型将被保留。另请参阅[对整数NA的支持](gotchas.html#gotchas-intna)。
- en: '[PRE444]'
  id: totrans-1401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: While float dtypes are unchanged.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数数据类型保持不变。
- en: '[PRE445]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: Selecting columns based on `dtype`
  id: totrans-1404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于`dtype`选择列
- en: The [`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") method implements subsetting of columns based
    on their `dtype`.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")方法实现了基于`dtype`的列子集。'
- en: 'First, let’s create a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a slew of different dtypes:'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个具有各种不同数据类型的[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")：
- en: '[PRE446]'
  id: totrans-1407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'And the dtypes:'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 并且数据类型：
- en: '[PRE447]'
  id: totrans-1409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") has two parameters `include` and `exclude` that
    allow you to say “give me the columns *with* these dtypes” (`include`) and/or
    “give the columns *without* these dtypes” (`exclude`).'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")有两个参数`include`和`exclude`，允许你说“给我这些数据类型的列”（`include`）和/或“给我不包含这些数据类型的列”（`exclude`）。'
- en: 'For example, to select `bool` columns:'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要选择`bool`列：
- en: '[PRE448]'
  id: totrans-1412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: 'You can also pass the name of a dtype in the [NumPy dtype hierarchy](https://numpy.org/doc/stable/reference/arrays.scalars.html):'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在[NumPy数据类型层次结构](https://numpy.org/doc/stable/reference/arrays.scalars.html)中传递数据类型的名称：
- en: '[PRE449]'
  id: totrans-1414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") also works with generic dtypes as well.'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")也适用于通用数据类型。'
- en: 'For example, to select all numeric and boolean columns while excluding unsigned
    integers:'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要选择所有数值和布尔列，同时排除无符号整数：
- en: '[PRE450]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: 'To select string columns you must use the `object` dtype:'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择字符串列，必须使用`object`数据类型：
- en: '[PRE451]'
  id: totrans-1419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'To see all the child dtypes of a generic `dtype` like `numpy.number` you can
    define a function that returns a tree of child dtypes:'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`numpy.number`等通用`dtype`的所有子数据类型，可以定义一个返回子数据类型树的函数：
- en: '[PRE452]'
  id: totrans-1421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: 'All NumPy dtypes are subclasses of `numpy.generic`:'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 所有NumPy数据类型都是`numpy.generic`的子类：
- en: '[PRE453]'
  id: totrans-1423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: Note
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: pandas also defines the types `category`, and `datetime64[ns, tz]`, which are
    not integrated into the normal NumPy hierarchy and won’t show up with the above
    function.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: pandas还定义了`category`和`datetime64[ns, tz]`类型，它们没有集成到正常的NumPy层次结构中，并且不会显示在上述函数中。
