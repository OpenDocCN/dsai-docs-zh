["```py\nscipy.special.stdtr(df, t, out=None) = <ufunc 'stdtr'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import stdtr\n>>> import matplotlib.pyplot as plt\n>>> stdtr(3, 1)\n0.8044988905221148 \n```", "```py\n>>> x = np.linspace(-10, 10, 1000)\n>>> fig, ax = plt.subplots()\n>>> parameters = [(1, \"solid\"), (3, \"dashed\"), (10, \"dotted\")]\n>>> for (df, linestyle) in parameters:\n...     ax.plot(x, stdtr(df, x), ls=linestyle, label=f\"$df={df}$\")\n>>> ax.legend()\n>>> ax.set_title(\"Student t distribution cumulative distribution function\")\n>>> plt.show() \n```", "```py\n>>> stdtr([1, 2, 3], 1)\narray([0.75      , 0.78867513, 0.80449889]) \n```", "```py\n>>> dfs = np.array([[1], [2], [3]])\n>>> t = np.array([2, 4, 6, 8])\n>>> dfs.shape, t.shape\n((3, 1), (4,)) \n```", "```py\n>>> stdtr(dfs, t)\narray([[0.85241638, 0.92202087, 0.94743154, 0.96041658],\n [0.90824829, 0.97140452, 0.98666426, 0.99236596],\n [0.93033702, 0.98599577, 0.99536364, 0.99796171]]) \n```", "```py\n>>> from scipy.stats import t\n>>> df, x = 3, 1\n>>> stdtr_result = stdtr(df, x)  # this can be faster than below\n>>> stats_result = t(df).cdf(x)\n>>> stats_result == stdtr_result  # test that results are equal\nTrue \n```"]