- en: scipy.optimize.check_grad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.check_grad.html#scipy.optimize.check_grad](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.check_grad.html#scipy.optimize.check_grad)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Check the correctness of a gradient function by comparing it against a (forward)
    finite-difference approximation of the gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable `func(x0, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Function whose derivative is to be checked.
  prefs: []
  type: TYPE_NORMAL
- en: '**grad**callable `grad(x0, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian of *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Points to check *grad* against forward difference approximation of grad using
    *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**args***args, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to *func* and *grad*.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Step size used for the finite difference approximation. It defaults to `sqrt(np.finfo(float).eps)`,
    which is approximately 1.49e-08.
  prefs: []
  type: TYPE_NORMAL
- en: '**direction**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If set to `'random'`, then gradients along a random vector are used to check
    *grad* against forward difference approximation using *func*. By default it is
    `'all'`, in which case, all the one hot direction vectors are considered to check
    *grad*. If *func* is a vector valued function then only `'all'` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used. Specify *seed* for reproducing the return
    value from this function. The random numbers generated with this seed affect the
    random vector along which gradients are computed to check `grad`. Note that *seed*
    is only used when *direction* argument is set to *‘random’*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**err**float'
  prefs: []
  type: TYPE_NORMAL
- en: The square root of the sum of squares (i.e., the 2-norm) of the difference between
    `grad(x0, *args)` and the finite difference approximation of *grad* using func
    at the points *x0*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`approx_fprime`](scipy.optimize.approx_fprime.html#scipy.optimize.approx_fprime
    "scipy.optimize.approx_fprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
