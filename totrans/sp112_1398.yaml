- en: Ways to Contribute
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献方式
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/dev/hacking.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/hacking.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/dev/hacking.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/hacking.html)
- en: This document aims to give an overview of the ways to contribute to SciPy. It
    tries to answer commonly asked questions and provide some insight into how the
    community process works in practice. Readers who are familiar with the SciPy community
    and are experienced Python coders may want to jump straight to the [SciPy contributor
    guide](contributor/contributor_toc.html#contributor-toc).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在概述向SciPy贡献的方式。它试图回答常见问题并提供一些关于社区实际工作流程的见解。熟悉SciPy社区并且是有经验的Python编码者的读者可能希望直接跳转到[SciPy贡献者指南](contributor/contributor_toc.html#contributor-toc)。
- en: 'There are a lot of ways you can contribute:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方式可以贡献：
- en: Contributing new code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献新代码
- en: Fixing bugs, improving documentation, and other maintenance work
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复错误，改进文档，以及其他维护工作
- en: Reviewing open pull requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查开放的拉取请求
- en: Triaging issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题分类
- en: Working on the [scipy.org](https://scipy.org/) website
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [scipy.org](https://scipy.org/) 网站上工作
- en: Answering questions and participating on the scipy-dev and scipy-user [mailing
    lists](https://scipy.org/community/#scipy-mailing-list).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回答问题并参与 scipy-dev 和 scipy-user 的[邮件列表](https://scipy.org/community/#scipy-mailing-list)。
- en: Contributing new code
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贡献新代码
- en: 'If you have been working with the scientific Python toolstack for a while,
    you probably have some code lying around of which you think “this could be useful
    for others too”. Perhaps it’s a good idea then to contribute it to SciPy or another
    open source project. The first question to ask is then, where does this code belong?
    That question is hard to answer here, so we start with a more specific one: *what
    code is suitable for putting into SciPy?* Almost all of the new code added to
    SciPy has in common that it’s potentially useful in multiple scientific domains
    and it fits in the scope of existing SciPy subpackages (see [Deciding on new features](core-dev/index.html#deciding-on-new-features)).
    In principle, new subpackages can be added too, but this is far less common. For
    code that is specific to a single application, there may be an existing project
    that can use the code. Some SciKits ([scikit-learn](http://scikit-learn.org),
    [scikit-image](http://scikit-image.org/), [statsmodels](https://www.statsmodels.org/),
    etc.) are good examples here; they have a narrower focus and because of that more
    domain-specific code than SciPy.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用科学Python工具栈一段时间，可能会有一些代码堆积，你会觉得“这对其他人也可能有用”。也许将其贡献给SciPy或其他开源项目是个不错的主意。首先要问的问题是，这些代码应该放在哪里？这个问题在这里很难回答，所以我们从更具体的问题开始：*哪些代码适合放入SciPy？*
    添加到SciPy的几乎所有新代码都具有一个共同点，那就是它在多个科学领域中有潜在的用途，并且它适合于现有SciPy子包的范围内（参见[决定新功能](core-dev/index.html#deciding-on-new-features)）。原则上，也可以添加新的子包，但这种情况较少见。对于特定于单一应用程序的代码，可能已经存在可以使用该代码的现有项目。一些SciKits（例如[scikit-learn](http://scikit-learn.org)、[scikit-image](http://scikit-image.org/)、[statsmodels](https://www.statsmodels.org/)等）在这里是很好的例子；它们的焦点更窄，因此比SciPy具有更多领域特定的代码。
- en: Now if you have code that you would like to see included in SciPy, how do you
    go about it? After checking that your code can be distributed in SciPy under a
    compatible license (see [License Considerations](#license-considerations)), the
    first step is to discuss it on the scipy-dev mailing list. All new features, as
    well as changes to existing code, are discussed and decided on there. You can,
    and probably should already start this discussion before your code is finished.
    Remember that in order to be added to SciPy your code will need to be reviewed
    by someone else, so try to find someone willing to review your work while you’re
    at it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你有想要包含在SciPy中的代码，你应该怎么做呢？在确认你的代码可以在兼容的许可下分发给SciPy之前（参见[许可考虑](#license-considerations)），第一步是在scipy-dev邮件列表上讨论。所有新功能以及对现有代码的更改都在那里讨论和决定。你可以在你的代码完成之前开始这个讨论。请记住，为了添加到SciPy中，你的代码需要被其他人审查，因此尽量找到愿意审查你工作的人。
- en: Assuming the outcome of the discussion on the mailing list is positive and you
    have a function or piece of code that does what you need it to do, what next?
    Before code is added to SciPy, it at least has to have good documentation, unit
    tests, benchmarks, and correct code style.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设邮件列表上的讨论结果是积极的，并且你有一个能做你需要的事情的函数或代码片段，接下来呢？在代码添加到SciPy之前，它至少需要有良好的文档、单元测试、基准测试以及正确的代码风格。
- en: Unit tests
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单元测试
- en: In principle, you should aim to create unit tests that exercise all the code
    that you are adding. This gives some degree of confidence that your code runs
    correctly, also on Python versions and hardware or OSes that you don’t have available
    yourself. An extensive description of how to write unit tests is given in [Testing
    guidelines](https://numpy.org/devdocs/reference/testing.html "(in NumPy v2.0.dev0)"),
    and [Running SciPy Tests Locally](contributor/devpy_test.html#devpy-test) documents
    how to run them.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原则上，你应该创建能够测试你添加的所有代码的单元测试。这样可以在一定程度上确保你的代码在不同Python版本和你自己无法获得的硬件或操作系统上也能正确运行。如何撰写单元测试的详细描述可以在[测试指南](https://numpy.org/devdocs/reference/testing.html
    "(in NumPy v2.0.dev0)")中找到，而[本地运行SciPy测试](contributor/devpy_test.html#devpy-test)则说明了如何运行这些测试。
- en: Benchmarks
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基准测试
- en: 'Unit tests check for correct functionality; benchmarks measure code performance.
    Not all existing SciPy code has benchmarks, but it should: as SciPy grows it is
    increasingly important to monitor execution times in order to catch unexpected
    regressions. More information about writing and running benchmarks is available
    in [Benchmarking SciPy with airspeed velocity](contributor/benchmarking.html#benchmarking-with-asv).'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试检查正确功能；基准测试衡量代码性能。并非所有现有的SciPy代码都有基准测试，但应该有：随着SciPy的发展，监控执行时间以捕获意外的性能回归变得越来越重要。有关如何撰写和运行基准测试的更多信息可以在[Benchmarking
    SciPy with airspeed velocity](contributor/benchmarking.html#benchmarking-with-asv)中找到。
- en: Documentation
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档
- en: Clear and complete documentation is essential in order for users to be able
    to find and understand the code. Documentation for individual functions and classes
    – which includes at least a basic description, type and meaning of all parameters
    and returns values, and usage examples in [doctest](https://pymotw.com/3/doctest/)
    format – is put in docstrings. Those docstrings can be read within the interpreter,
    and are compiled into a reference guide in HTML and pdf format. Higher-level documentation
    for key (areas of) functionality is provided in tutorial format and/or in module
    docstrings. A guide on how to write documentation is given in [Documentation style](https://numpy.org/devdocs/dev/howto-docs.html#howto-document
    "(in NumPy v2.0.dev0)"), and [Rendering documentation locally with Sphinx](contributor/rendering_documentation.html#rendering-documentation)
    explains how to preview the documentation as it will appear online.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清晰完整的文档对于用户能够查找和理解代码至关重要。单个函数和类的文档，包括至少基本描述、所有参数和返回值的类型和含义，以及[doctest](https://pymotw.com/3/doctest/)格式的使用示例，都放在文档字符串中。这些文档字符串可以在解释器中阅读，并编译成HTML和pdf格式的参考指南。关于如何撰写文档的指南可以在[文档风格](https://numpy.org/devdocs/dev/howto-docs.html#howto-document
    "(in NumPy v2.0.dev0)")中找到，而[使用Sphinx本地渲染文档](contributor/rendering_documentation.html#rendering-documentation)则解释了如何预览文档，看起来就像在线一样。
- en: Code style
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码风格
- en: Uniform code style makes it easier for others to read your code. SciPy follows
    the standard Python style guideline, [PEP8](https://www.python.org/dev/peps/pep-0008/),
    with the exception that the recommended maximum line length is 88 characters,
    rather than PEP8’s 79 characters.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 统一的代码风格可以让其他人更容易阅读你的代码。SciPy遵循标准的Python风格指南，[PEP8](https://www.python.org/dev/peps/pep-0008/)，唯一的例外是推荐的最大行长度为88个字符，而不是PEP8的79个字符。
- en: 'We provide a git pre-commit hook that can check each of your commits for proper
    style. Install it (once) by running the following from the root of the SciPy repository:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们提供一个git预提交钩子，可以检查每个提交的风格是否正确。通过以下命令在SciPy存储库的根目录安装它（一次性）：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you may run the linter manually:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您也可以手动运行代码检查工具：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Most IDEs and text editors also have settings that can help you follow PEP8,
    for example by translating tabs by four spaces. More information is available
    in [PEP8 and SciPy](contributor/pep8.html#pep8-scipy).
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数集成开发环境（IDE）和文本编辑器都有设置，可以帮助你遵循PEP8，例如将制表符转换为四个空格。更多信息可以在[PEP8和SciPy](contributor/pep8.html#pep8-scipy)中找到。
- en: A [checklist](contributor/development_workflow.html#pr-checklist), including
    these and other requirements, is available at the end of the example [Development
    workflow](contributor/development_workflow.html#development-workflow).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[检查清单](contributor/development_workflow.html#pr-checklist)，包括这些和其他要求，可以在示例的末尾[开发工作流程](contributor/development_workflow.html#development-workflow)中找到。
- en: 'Another question you may have is: *where exactly do I put my code*? To answer
    this, it is useful to understand how the SciPy public API (application programming
    interface) is defined. For most modules, the API is two levels deep, which means
    your new function should appear as `scipy.subpackage.my_new_func`. `my_new_func`
    can be put in an existing or new file under `/scipy/<subpackage>/`, its name is
    added to the `__all__` list in that file (which lists all public functions in
    the file), and those public functions are then imported in `/scipy/<subpackage>/__init__.py`.
    Any private functions/classes should have a leading underscore (`_`) in their
    name. A more detailed description of what the public API of SciPy is, is given
    in [SciPy API](../reference/index.html#scipy-api).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还有另一个问题：*我应该把我的代码放在哪里*？要回答这个问题，了解 SciPy 的公共 API（应用程序编程接口）的定义是很有用的。对于大多数模块来说，API
    是两层深度的，这意味着您的新函数应该出现为 `scipy.subpackage.my_new_func`。`my_new_func` 可以放在 `/scipy/<subpackage>/`
    下的现有或新文件中，其名称应添加到该文件中的 `__all__` 列表中（该列表列出文件中的所有公共函数），然后在 `/scipy/<subpackage>/__init__.py`
    中导入这些公共函数。任何私有函数/类的名称应该以下划线（`_`）开头。SciPy 的公共 API 的更详细描述在 [SciPy API](../reference/index.html#scipy-api)
    中给出。
- en: Once you think your code is ready for inclusion in SciPy, you can send a pull
    request (PR) on Github. We won’t go into the details of how to work with git here,
    this is described well in [Git for development](gitwash/gitwash.html#git-development)
    and on the [Github help pages](https://help.github.com/articles/set-up-git/).
    When you send the PR for a new feature, be sure to also mention this on the scipy-dev
    mailing list. This can prompt interested people to help review your PR. Assuming
    that you already got positive feedback before on the general idea of your code/feature,
    the purpose of the code review is to ensure that the code is correct, efficient
    and meets the requirements outlined above. In many cases, the code review happens
    relatively quickly, but it’s possible that it stalls. If you have addressed all
    feedback already given, it’s perfectly fine to ask on the mailing list again for
    review (after a reasonable amount of time, say a couple of weeks, has passed).
    Once the review is completed, the PR is merged into the “main” branch of SciPy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您认为您的代码准备好包含在 SciPy 中，您可以在 Github 上发送一个拉取请求（PR）。我们不会在这里详细讨论如何使用 git，这在 [Git
    for development](gitwash/gitwash.html#git-development) 和 [Github 帮助页面](https://help.github.com/articles/set-up-git/)
    中有很好的描述。当您为一个新功能发送 PR 时，请确保在 scipy-dev 邮件列表上也提及此事。这可以促使感兴趣的人帮助审查您的 PR。假设您之前已经得到了关于您的代码/功能的总体想法的积极反馈，那么代码审查的目的是确保代码正确、高效并符合上述要求。在许多情况下，代码审查会相对快速完成，但也可能会停滞。如果您已经处理了所有已给反馈，那么在一定合理的时间（比如几周）之后，再次在邮件列表上请求审查是完全可以的。一旦审查完成，PR
    就会合并到 SciPy 的“main”分支中。
- en: 'The above describes the requirements and process for adding code to SciPy.
    It doesn’t yet answer the question though how decisions are made exactly. The
    basic answer is: decisions are made by consensus, by everyone who chooses to participate
    in the discussion on the mailing list. This includes developers, other users and
    yourself. Aiming for consensus in the discussion is important – SciPy is a project
    by and for the scientific Python community. In those rare cases that agreement
    cannot be reached, the maintainers of the module in question can decide the issue.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述了向 SciPy 添加代码的要求和过程。但它并没有准确回答决策是如何做出的问题。基本答案是：决策是通过共识达成的，由所有选择参与邮件列表讨论的人员决定。这包括开发人员、其他用户和你自己。在讨论中追求共识非常重要——SciPy
    是科学 Python 社区的一个项目。在那些罕见的情况下，无法达成一致意见时，相关模块的维护者可以决定问题的解决方式。
- en: '### License Considerations'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '### 许可证考虑'
- en: '*I based my code on existing Matlab/R/… code I found online, is this OK?*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*我基于我在网上找到的现有 Matlab/R/... 代码编写了我的代码，这样可以吗？*'
- en: It depends. SciPy is distributed under a BSD license, so if the code that you
    based your code on is also BSD licensed or has a BSD-compatible license (e.g.
    MIT, PSF) then it’s OK. Code which is GPL or Apache licensed, has no clear license,
    requires citation or is free for academic use only can’t be included in SciPy.
    Therefore if you copied existing code with such a license or made a direct translation
    to Python of it, your code can’t be included. If you’re unsure, please ask on
    the scipy-dev [mailing list](mailinglists).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于情况。SciPy 使用 BSD 许可证分发，因此如果您的代码基于的代码也是 BSD 许可证或具有 BSD 兼容许可证（例如 MIT、PSF），那么可以接受。如果代码是
    GPL 或 Apache 许可证，没有明确的许可证，需要引用或仅适用于学术使用，则无法包含在 SciPy 中。因此，如果您复制了具有此类许可证的现有代码或直接将其翻译为
    Python，则您的代码无法包含在内。如果您不确定，请在 scipy-dev 的[邮件列表](mailinglists)上咨询。
- en: '*Why is SciPy under the BSD license and not, say, the GPL?*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*SciPy 为何采用 BSD 许可证而不是 GPL？*'
- en: Like Python, SciPy uses a “permissive” open source license, which allows proprietary
    reuse. While this allows companies to use and modify the software without giving
    anything back, it is felt that the larger user base results in more contributions
    overall, and companies often publish their modifications anyway, without being
    required to. See John Hunter’s [BSD pitch](https://web.archive.org/web/20130922065958/https://nipy.sourceforge.net/software/license/johns_bsd_pitch.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 一样，SciPy 使用“宽松”的开源许可证，允许专有重用。尽管如此，这使得公司可以在不返回任何东西的情况下使用和修改软件，但人们认为更大的用户基础会带来更多的贡献，公司通常也会发布它们的修改，而无需强制要求。请参阅约翰·亨特的[BSD
    提案](https://web.archive.org/web/20130922065958/https://nipy.sourceforge.net/software/license/johns_bsd_pitch.html)。
- en: For more information about SciPy’s license, see [Licensing](core-dev/index.html#scipy-licensing).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 SciPy 许可证的更多信息，请参阅[Licensing](core-dev/index.html#scipy-licensing)。
- en: Maintaining existing code
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维护现有代码
- en: The previous section talked specifically about adding new functionality to SciPy.
    A large part of that discussion also applies to the maintenance of existing code.
    Maintenance means fixing bugs, improving code quality, documenting existing functionality
    better, adding missing unit tests, adding performance benchmarks, keeping build
    scripts up-to-date, etc. The SciPy [issue list](https://github.com/scipy/scipy/issues)
    contains all reported bugs, build/documentation issues, etc. Fixing issues helps
    improve the overall quality of SciPy, and is also a good way of getting familiar
    with the project. You may also want to fix a bug because you ran into it and need
    the function in question to work correctly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分特别讨论了向 SciPy 添加新功能。讨论的很大一部分也适用于现有代码的维护。维护意味着修复错误，提高代码质量，更好地记录现有功能，添加缺失的单元测试，添加性能基准，保持构建脚本的更新等等。SciPy
    的[问题列表](https://github.com/scipy/scipy/issues)包含了所有报告的错误，构建/文档问题等。修复问题有助于提高 SciPy
    的整体质量，并且也是熟悉项目的好方法。您可能还想修复一个错误，因为您遇到了这个问题，并且需要相关函数正常工作。
- en: The discussion on code style and unit testing above applies equally to bug fixes.
    It is usually best to start by writing a unit test that shows the problem, i.e.
    it should pass but doesn’t. Once you have that, you can fix the code so that the
    test does pass. That should be enough to send a PR for this issue. Unlike when
    adding new code, discussing this on the mailing list may not be necessary - if
    the old behavior of the code is clearly incorrect, no one will object to having
    it fixed. It may be necessary to add some warning or deprecation message for the
    changed behavior. This should be part of the review process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述关于代码风格和单元测试的讨论同样适用于 bug 修复。通常最好先编写一个显示问题的单元测试，即该测试应该通过但实际未通过。一旦完成，您可以修复代码以使该测试通过。这应该足以为此问题发送一个
    PR。与添加新代码时不同，可能不需要在邮件列表上讨论此问题 - 如果代码的旧行为显然是不正确的，那么没有人会反对将其修复。可能需要为更改后的行为添加一些警告或弃用消息。这应该是审查过程的一部分。
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Pull requests that *only* change code style, e.g. fixing some PEP8 issues in
    a file, are discouraged. Such PRs are often not worth cluttering the git annotate
    history, and take reviewer time that may be better spent in other ways. Code style
    cleanups of code that is touched as part of a functional change are fine however.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不鼓励仅更改代码风格的拉取请求，例如修复文件中的一些 PEP8 问题。这些 PR 通常不值得在 git annotate 历史中堆砌，而且会占用审阅者的时间，这些时间可能更好地用在其他方面。但是，如果作为功能更改的一部分触及的代码进行了代码风格清理，则是可以接受的。
- en: Reviewing pull requests
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查拉取请求
- en: Reviewing open pull requests (PRs) is very welcome, and a valuable way to help
    increase the speed at which the project moves forward. If you have specific knowledge/experience
    in a particular area (say “optimization algorithms” or “special functions”) then
    reviewing PRs in that area is especially valuable - sometimes PRs with technical
    code have to wait for a long time to get merged due to a shortage of appropriate
    reviewers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 审查开放的拉取请求（PR）非常受欢迎，也是帮助项目前进速度的宝贵方式。如果您在特定领域具有特定的知识/经验（例如“优化算法”或“特殊函数”），那么审查该领域的
    PR 尤为重要 - 有时具有技术代码的 PR 由于缺乏适当的审阅者而需要等待很长时间才能合并。
- en: 'We encourage everyone to get involved in the review process; it’s also a great
    way to get familiar with the code base. Reviewers should ask themselves some or
    all of the following questions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励每个人参与审查过程；这也是熟悉代码库的好方法。审稿人应自问以下问题中的一些或全部：
- en: Was this change adequately discussed (relevant for new features and changes
    in existing behavior)?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此更改是否充分讨论（适用于新功能和更改现有行为）？
- en: Is the feature scientifically sound? Algorithms may be known to work based on
    literature; otherwise, closer look at correctness is valuable.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能在科学上是否合理？算法可能基于文献已知工作；否则，对正确性的更近一步检查是宝贵的。
- en: Is the intended behavior clear under all conditions (e.g. unexpected inputs
    like empty arrays or nan/inf values)?
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有情况下，预期行为是否清晰（例如，如空数组或 nan/inf 值等意外输入）？
- en: Does the code meet the quality, test and documentation expectations outlined
    under [Contributing new code](#contributing-new-code)?
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否符合[贡献新代码](#contributing-new-code)部分概述的质量、测试和文档期望？
- en: If we do not know you yet, consider introducing yourself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还不认识您，请考虑介绍自己。
- en: Other ways to contribute
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他贡献方式
- en: There are many ways to contribute other than writing code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除编写代码外，还有许多贡献方式。
- en: Triaging issues (investigating bug reports for validity and possible actions
    to take) is also a useful activity. SciPy has many hundreds of open issues; closing
    invalid ones and correctly labelling valid ones (ideally with some first thoughts
    in a comment) allows prioritizing maintenance work and finding related issues
    easily when working on an existing function or subpackage. To read more about
    issue triage, see [Triaging and curating issues](triage.html#triaging).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除问题（验证错误报告的有效性和可能的行动）也是一种有用的活动。SciPy 有数百个开放问题；关闭无效问题并正确标记有效问题（最好在评论中提出一些初步想法）允许优先处理维护工作，并在处理现有功能或子包时轻松找到相关问题。有关问题排查的更多信息，请阅读[故障排查和问题管理](triage.html#triaging)。
- en: Participating in discussions on the scipy-user and scipy-dev [mailing lists](https://scipy.org/community/#scipy-mailing-list)
    is a contribution in itself. Everyone who writes to those lists with a problem
    or an idea would like to get responses, and writing such responses makes the project
    and community function better and appear more welcoming.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 参与 scipy-user 和 scipy-dev [邮件列表](https://scipy.org/community/#scipy-mailing-list)的讨论本身就是一种贡献。每个写信的人都希望得到回应，编写这些回应使项目和社区运行得更好，也更具欢迎性。
- en: 'The [scipy.org](https://scipy.org/) website contains a lot of information on
    both SciPy the project and SciPy the community, and it can always use a new pair
    of hands. The sources for the website live in their own separate repo: [https://github.com/scipy/scipy.org](https://github.com/scipy/scipy.org)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[scipy.org](https://scipy.org/) 网站包含关于 SciPy 项目和 SciPy 社区的大量信息，而且它总是需要新的帮手。网站的源代码存放在自己的单独存储库中：[https://github.com/scipy/scipy.org](https://github.com/scipy/scipy.org)'
- en: Getting started
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: Thanks for your interest in contributing to SciPy! If you’re interested in contributing
    code, we hope you’ll continue on to the [SciPy contributor guide](contributor/contributor_toc.html#contributor-toc)
    for details on how to set up your development environment, implement your improvements,
    and submit your first PR!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您对贡献 SciPy 的兴趣！如果您有兴趣贡献代码，希望您继续阅读[SciPy 贡献者指南](contributor/contributor_toc.html#contributor-toc)，了解如何设置开发环境、实现改进并提交首个
    PR 的详细信息！
