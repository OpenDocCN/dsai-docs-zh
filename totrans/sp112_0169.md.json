["```py\nclass scipy.interpolate.CubicSpline(x, y, axis=0, bc_type='not-a-knot', extrapolate=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.interpolate import CubicSpline\n>>> import matplotlib.pyplot as plt\n>>> x = np.arange(10)\n>>> y = np.sin(x)\n>>> cs = CubicSpline(x, y)\n>>> xs = np.arange(-0.5, 9.6, 0.1)\n>>> fig, ax = plt.subplots(figsize=(6.5, 4))\n>>> ax.plot(x, y, 'o', label='data')\n>>> ax.plot(xs, np.sin(xs), label='true')\n>>> ax.plot(xs, cs(xs), label=\"S\")\n>>> ax.plot(xs, cs(xs, 1), label=\"S'\")\n>>> ax.plot(xs, cs(xs, 2), label=\"S''\")\n>>> ax.plot(xs, cs(xs, 3), label=\"S'''\")\n>>> ax.set_xlim(-0.5, 9.5)\n>>> ax.legend(loc='lower left', ncol=2)\n>>> plt.show() \n```", "```py\n>>> theta = 2 * np.pi * np.linspace(0, 1, 5)\n>>> y = np.c_[np.cos(theta), np.sin(theta)]\n>>> cs = CubicSpline(theta, y, bc_type='periodic')\n>>> print(\"ds/dx={:.1f} ds/dy={:.1f}\".format(cs(0, 1)[0], cs(0, 1)[1]))\nds/dx=0.0 ds/dy=1.0\n>>> xs = 2 * np.pi * np.linspace(0, 1, 100)\n>>> fig, ax = plt.subplots(figsize=(6.5, 4))\n>>> ax.plot(y[:, 0], y[:, 1], 'o', label='data')\n>>> ax.plot(np.cos(xs), np.sin(xs), label='true')\n>>> ax.plot(cs(xs)[:, 0], cs(xs)[:, 1], label='spline')\n>>> ax.axes.set_aspect('equal')\n>>> ax.legend(loc='center')\n>>> plt.show() \n```", "```py\n>>> cs = CubicSpline([0, 1], [0, 1], bc_type=((1, 0), (1, 3)))\n>>> x = np.linspace(0, 1)\n>>> np.allclose(x**3, cs(x))\nTrue \n```"]