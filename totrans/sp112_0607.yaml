- en: scipy.integrate.odeint
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.odeint
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.odeint.html#scipy.integrate.odeint)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Integrate a system of ordinary differential equations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 积分一个常微分方程组。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For new code, use [`scipy.integrate.solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp") to solve a differential equation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新代码，请使用 [`scipy.integrate.solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp") 来解决微分方程。
- en: Solve a system of ordinary differential equations using lsoda from the FORTRAN
    library odepack.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用来自 FORTRAN 库 odepack 的 lsoda 解决常微分方程组的问题。
- en: 'Solves the initial value problem for stiff or non-stiff systems of first order
    ode-s:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解决刚性或非刚性的一阶常微分方程系统的初值问题：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where y can be a vector.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 y 可以是一个向量。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: By default, the required order of the first two arguments of *func* are in the
    opposite order of the arguments in the system definition function used by the
    [`scipy.integrate.ode`](scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")
    class and the function [`scipy.integrate.solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp"). To use a function with the signature `func(t, y,
    ...)`, the argument *tfirst* must be set to `True`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，*func* 的前两个参数的顺序与 [`scipy.integrate.ode`](scipy.integrate.ode.html#scipy.integrate.ode
    "scipy.integrate.ode") 类和函数 [`scipy.integrate.solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp
    "scipy.integrate.solve_ivp") 中系统定义函数中参数的顺序相反。要使用签名 `func(t, y, ...)` 的函数，必须将参数
    *tfirst* 设置为 `True`。
- en: 'Parameters:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable(y, t, …) or callable(t, y, …)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**func** 可调用函数(y, t, …) 或 可调用函数(t, y, …)'
- en: Computes the derivative of y at t. If the signature is `callable(t, y, ...)`,
    then the argument *tfirst* must be set `True`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 y 在 t 处的导数。如果签名是 `callable(t, y, ...)`，则必须设置参数 *tfirst* 为 `True`。
- en: '**y0**array'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**y0** 数组'
- en: Initial condition on y (can be a vector).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: y 的初始条件（可以是一个向量）。
- en: '**t**array'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**t** 数组'
- en: A sequence of time points for which to solve for y. The initial value point
    should be the first element of this sequence. This sequence must be monotonically
    increasing or monotonically decreasing; repeated values are allowed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解 y 的时间点序列。初始值点应为此序列的第一个元素。此序列必须单调递增或单调递减；允许重复值。
- en: '**args**tuple, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**args** 元组，可选'
- en: Extra arguments to pass to function.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给函数的额外参数。
- en: '**Dfun**callable(y, t, …) or callable(t, y, …)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dfun** 可调用函数(y, t, …) 或 可调用函数(t, y, …)'
- en: Gradient (Jacobian) of *func*. If the signature is `callable(t, y, ...)`, then
    the argument *tfirst* must be set `True`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*func* 的梯度（雅可比矩阵）。如果签名是 `callable(t, y, ...)`，则必须设置参数 *tfirst* 为 `True`。'
- en: '**col_deriv**bool, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**col_deriv** 布尔值，可选'
- en: True if *Dfun* defines derivatives down columns (faster), otherwise *Dfun* should
    define derivatives across rows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *Dfun* 定义列导数（更快），否则 *Dfun* 应定义行导数。
- en: '**full_output**bool, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**full_output** 布尔值，可选'
- en: True if to return a dictionary of optional outputs as the second output
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作为第二个输出返回一个可选输出的字典，则返回 True
- en: '**printmessg**bool, optional'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**printmessg** 布尔值，可选'
- en: Whether to print the convergence message
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 是否打印收敛消息
- en: '**tfirst**bool, optional'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**tfirst** 布尔值，可选'
- en: If True, the first two arguments of *func* (and *Dfun*, if given) must `t, y`
    instead of the default `y, t`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则 *func* 的前两个参数（和 *Dfun*，如果给定）必须是 `t, y`，而不是默认的 `y, t`。
- en: New in version 1.1.0.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本特性 1.1.0。
- en: 'Returns:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**y**array, shape (len(t), len(y0))'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**y** 数组，形状为 (len(t), len(y0))'
- en: Array containing the value of y for each desired time in t, with the initial
    value *y0* in the first row.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数组，包含在 t 中每个期望的时间点上 y 的值，初始值 *y0* 在第一行。
- en: '**infodict**dict, only returned if full_output == True'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**infodict** 字典，仅当 full_output == True 时返回'
- en: Dictionary containing additional output information
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 包含额外输出信息的字典
- en: '| key | meaning |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| key | meaning |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ‘hu’ | vector of step sizes successfully used for each time step |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| ‘hu’ | 向量，成功用于每个时间步长的步长大小 |'
- en: '| ‘tcur’ | vector with the value of t reached for each time step (will always
    be at least as large as the input times) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ‘tcur’ | 向量，包含每个时间步长达到的 t 值（至少与输入时间一样大） |'
- en: '| ‘tolsf’ | vector of tolerance scale factors, greater than 1.0, computed when
    a request for too much accuracy was detected |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| ‘tolsf’ | 向量，大于 1.0 的容差比例因子，在检测到对精度要求过高的请求时计算 |'
- en: '| ‘tsw’ | value of t at the time of the last method switch (given for each
    time step) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| ‘tsw’ | 上一次方法切换时的 t 值（给出每个时间步长） |'
- en: '| ‘nst’ | cumulative number of time steps |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| ‘nst’ | 时间步长的累积数 |'
- en: '| ‘nfe’ | cumulative number of function evaluations for each time step |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| ‘nfe’ | 每个时间步骤的函数评估的累积数 |'
- en: '| ‘nje’ | cumulative number of jacobian evaluations for each time step |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| ‘nje’ | 每个时间步长的雅可比矩阵评估的累积数 |'
- en: '| ‘nqu’ | a vector of method orders for each successful step |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| ‘nqu’ | 每个成功步长的方法顺序的向量 |'
- en: '| ‘imxer’ | index of the component of largest magnitude in the weighted local
    error vector (e / ewt) on an error return, -1 otherwise |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| ‘imxer’ | 在错误返回时加权局部误差向量（e / ewt）中具有最大幅度的分量的索引，否则为 -1 |'
- en: '| ‘lenrw’ | the length of the double work array required |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| ‘lenrw’ | 所需双精度工作数组的长度 |'
- en: '| ‘leniw’ | the length of integer work array required |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| ‘leniw’ | 所需整数工作数组的长度 |'
- en: '| ‘mused’ | a vector of method indicators for each successful time step: 1:
    adams (nonstiff), 2: bdf (stiff) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| ‘mused’ | 每个成功时间步长的方法指示符向量：1: adams（非刚性），2: bdf（刚性） |'
- en: 'Other Parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '其他参数:'
- en: '**ml, mu**int, optional'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**ml, mu**int，可选'
- en: If either of these are not None or non-negative, then the Jacobian is assumed
    to be banded. These give the number of lower and upper non-zero diagonals in this
    banded matrix. For the banded case, *Dfun* should return a matrix whose rows contain
    the non-zero bands (starting with the lowest diagonal). Thus, the return matrix
    *jac* from *Dfun* should have shape `(ml + mu + 1, len(y0))` when `ml >=0` or
    `mu >=0`. The data in *jac* must be stored such that `jac[i - j + mu, j]` holds
    the derivative of the `i`th equation with respect to the `j`th state variable.
    If *col_deriv* is True, the transpose of this *jac* must be returned.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中任何一个不是 None 或非负，则假定雅可比矩阵为带状矩阵。这些参数给出了带状矩阵中下限和上限非零对角线的数量。对于带状情况，*Dfun* 应返回一个矩阵，其行包含非零带（从最低对角线开始）。因此，*Dfun*
    返回的矩阵 *jac* 应具有形状 `(ml + mu + 1, len(y0))`，当 `ml >=0` 或 `mu >=0` 时。*jac* 中的数据必须存储为
    `jac[i - j + mu, j]`，表示第 `i` 个方程相对于第 `j` 个状态变量的导数。如果 *col_deriv* 为 True，则必须返回此
    *jac* 的转置。
- en: '**rtol, atol**float, optional'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol, atol**float，可选'
- en: The input parameters *rtol* and *atol* determine the error control performed
    by the solver. The solver will control the vector, e, of estimated local errors
    in y, according to an inequality of the form `max-norm of (e / ewt) <= 1`, where
    ewt is a vector of positive error weights computed as `ewt = rtol * abs(y) + atol`.
    rtol and atol can be either vectors the same length as y or scalars. Defaults
    to 1.49012e-8.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数 *rtol* 和 *atol* 决定求解器执行的误差控制。求解器将根据形如 `max-norm of (e / ewt) <= 1` 的不等式控制估计的局部误差向量
    e，其中 ewt 是计算为 `ewt = rtol * abs(y) + atol` 的正误差权重向量。rtol 和 atol 可以是与 y 同样长度的向量或标量。默认为
    1.49012e-8。
- en: '**tcrit**ndarray, optional'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**tcrit**ndarray，可选'
- en: Vector of critical points (e.g., singularities) where integration care should
    be taken.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 向量临界点（例如奇点），需要特别注意积分。
- en: '**h0**float, (0: solver-determined), optional'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**h0**float，（0：求解器确定），可选'
- en: The step size to be attempted on the first step.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在第一步上尝试的步长大小。
- en: '**hmax**float, (0: solver-determined), optional'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**hmax**float，（0：求解器确定），可选'
- en: The maximum absolute step size allowed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最大绝对步长大小。
- en: '**hmin**float, (0: solver-determined), optional'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**hmin**float，（0：求解器确定），可选'
- en: The minimum absolute step size allowed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最小绝对步长大小。
- en: '**ixpr**bool, optional'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**ixpr**bool，可选'
- en: Whether to generate extra printing at method switches.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在方法切换时生成额外打印。
- en: '**mxstep**int, (0: solver-determined), optional'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**mxstep**int，（0：求解器确定），可选'
- en: Maximum number of (internally defined) steps allowed for each integration point
    in t.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个积分点在 t 上允许的最大步数（内部定义）。
- en: '**mxhnil**int, (0: solver-determined), optional'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**mxhnil**int，（0：求解器确定），可选'
- en: Maximum number of messages printed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的最大消息数。
- en: '**mxordn**int, (0: solver-determined), optional'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**mxordn**int，（0：求解器确定），可选'
- en: Maximum order to be allowed for the non-stiff (Adams) method.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的非刚性（Adams）方法的最大阶数。
- en: '**mxords**int, (0: solver-determined), optional'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**mxords**int，（0：求解器确定），可选'
- en: Maximum order to be allowed for the stiff (BDF) method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: BDF 方法允许的最大阶数。
- en: See also
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp "scipy.integrate.solve_ivp")'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`solve_ivp`](scipy.integrate.solve_ivp.html#scipy.integrate.solve_ivp "scipy.integrate.solve_ivp")'
- en: solve an initial value problem for a system of ODEs
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 求解常微分方程组的初值问题
- en: '[`ode`](scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ode`](scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")'
- en: a more object-oriented integrator based on VODE
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 VODE 的更面向对象的积分器
- en: '[`quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")'
- en: for finding the area under a curve
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用于找出曲线下面积的方法
- en: Examples
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The second order differential equation for the angle *theta* of a pendulum
    acted on by gravity with friction can be written:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 受重力和摩擦力影响的摆的角度 *theta* 的二阶微分方程可以写成：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'where *b* and *c* are positive constants, and a prime (’) denotes a derivative.
    To solve this equation with [`odeint`](#scipy.integrate.odeint "scipy.integrate.odeint"),
    we must first convert it to a system of first order equations. By defining the
    angular velocity `omega(t) = theta''(t)`, we obtain the system:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *b* 和 *c* 是正常数，而撇号（’）表示导数。要使用 [`odeint`](#scipy.integrate.odeint "scipy.integrate.odeint")
    解决这个方程，我们必须首先将它转化为一阶方程组。通过定义角速度 `omega(t) = theta'(t)`，我们得到以下系统：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let *y* be the vector [*theta*, *omega*]. We implement this system in Python
    as:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让 *y* 是向量 [*theta*, *omega*]。我们在 Python 中实现这个系统如下：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We assume the constants are *b* = 0.25 and *c* = 5.0:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设常数为 *b* = 0.25 和 *c* = 5.0：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For initial conditions, we assume the pendulum is nearly vertical with *theta(0)*
    = *pi* - 0.1, and is initially at rest, so *omega(0)* = 0\. Then the vector of
    initial conditions is
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初始条件，我们假设摆是几乎垂直的，*theta(0)* = *pi* - 0.1，并且初始静止，因此 *omega(0)* = 0。然后初始条件向量是
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will generate a solution at 101 evenly spaced samples in the interval 0
    <= *t* <= 10\. So our array of times is:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在区间 0 <= *t* <= 10 中生成 101 个均匀间隔的样本的解决方案。因此，我们的时间数组是：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Call [`odeint`](#scipy.integrate.odeint "scipy.integrate.odeint") to generate
    the solution. To pass the parameters *b* and *c* to *pend*, we give them to [`odeint`](#scipy.integrate.odeint
    "scipy.integrate.odeint") using the *args* argument.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`odeint`](#scipy.integrate.odeint "scipy.integrate.odeint") 生成解决方案。要将参数
    *b* 和 *c* 传递给 *pend*，我们将它们通过 *args* 参数传递给 [`odeint`](#scipy.integrate.odeint "scipy.integrate.odeint")。
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The solution is an array with shape (101, 2). The first column is *theta(t)*,
    and the second is *omega(t)*. The following code plots both components.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 解是一个形状为 (101, 2) 的数组。第一列是 *theta(t)*，第二列是 *omega(t)*。下面的代码绘制了两个分量。
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![../../_images/scipy-integrate-odeint-1.png](../Images/edb06c2ae7ec4c56b9fae3ee1ee06c49.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-integrate-odeint-1.png](../Images/edb06c2ae7ec4c56b9fae3ee1ee06c49.png)'
