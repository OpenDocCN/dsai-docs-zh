- en: pandas.MultiIndex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html](https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A multi-level, or hierarchical, index object for pandas objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**levels**sequence of arrays'
  prefs: []
  type: TYPE_NORMAL
- en: The unique labels for each level.
  prefs: []
  type: TYPE_NORMAL
- en: '**codes**sequence of arrays'
  prefs: []
  type: TYPE_NORMAL
- en: Integers for each level designating which label at each location.
  prefs: []
  type: TYPE_NORMAL
- en: '**sortorder**optional int'
  prefs: []
  type: TYPE_NORMAL
- en: Level of sortedness (must be lexicographically sorted by that level).
  prefs: []
  type: TYPE_NORMAL
- en: '**names**optional sequence of objects'
  prefs: []
  type: TYPE_NORMAL
- en: Names for each of the index levels. (name is accepted for compat).
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the meta-data.
  prefs: []
  type: TYPE_NORMAL
- en: '**verify_integrity**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Check that the levels/codes are consistent and valid.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultiIndex.from_arrays`](pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert list of arrays to MultiIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultiIndex.from_product`](pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product")'
  prefs: []
  type: TYPE_NORMAL
- en: Create a MultiIndex from the cartesian product of iterables.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultiIndex.from_tuples`](pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert list of tuples to a MultiIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultiIndex.from_frame`](pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame")'
  prefs: []
  type: TYPE_NORMAL
- en: Make a MultiIndex from a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Index`](pandas.Index.html#pandas.Index "pandas.Index")'
  prefs: []
  type: TYPE_NORMAL
- en: The base pandas Index type.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See the [user guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A new `MultiIndex` is typically constructed using one of the helper methods
    [`MultiIndex.from_arrays()`](pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays"), [`MultiIndex.from_product()`](pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product") and [`MultiIndex.from_tuples()`](pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples"). For example (using `.from_arrays`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See further examples for how to construct a MultiIndex in the doc strings of
    the mentioned helper methods.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`names`](pandas.MultiIndex.names.html#pandas.MultiIndex.names "pandas.MultiIndex.names")
    | Names of levels in MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`levels`](pandas.MultiIndex.levels.html#pandas.MultiIndex.levels "pandas.MultiIndex.levels")
    | Levels of the MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nlevels`](pandas.MultiIndex.nlevels.html#pandas.MultiIndex.nlevels "pandas.MultiIndex.nlevels")
    | Integer number of levels in this MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`levshape`](pandas.MultiIndex.levshape.html#pandas.MultiIndex.levshape "pandas.MultiIndex.levshape")
    | A tuple with the length of each level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtypes`](pandas.MultiIndex.dtypes.html#pandas.MultiIndex.dtypes "pandas.MultiIndex.dtypes")
    | Return the dtypes as a Series for the underlying MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| **codes** |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`from_arrays`](pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays")(arrays[, sortorder, names]) | Convert arrays
    to MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_tuples`](pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples")(tuples[, sortorder, names]) | Convert list of
    tuples to MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_product`](pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product")(iterables[, sortorder, names]) | Make a MultiIndex
    from the cartesian product of multiple iterables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_frame`](pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame")(df[, sortorder, names]) | Make a MultiIndex from
    a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_levels`](pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels")(levels, *[, level, verify_integrity]) | Set new
    levels on MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_codes`](pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes")(codes, *[, level, verify_integrity]) | Set new
    codes on MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_frame`](pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame "pandas.MultiIndex.to_frame")([index, name, allow_duplicates])
    | Create a DataFrame with the levels of the MultiIndex as columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_flat_index`](pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index")() | Convert a MultiIndex to an Index of Tuples
    containing the level values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sortlevel`](pandas.MultiIndex.sortlevel.html#pandas.MultiIndex.sortlevel
    "pandas.MultiIndex.sortlevel")([level, ascending, ...]) | Sort MultiIndex at the
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`droplevel`](pandas.MultiIndex.droplevel.html#pandas.MultiIndex.droplevel
    "pandas.MultiIndex.droplevel")([level]) | Return index with requested level(s)
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swaplevel`](pandas.MultiIndex.swaplevel.html#pandas.MultiIndex.swaplevel
    "pandas.MultiIndex.swaplevel")([i, j]) | Swap level i with level j. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reorder_levels`](pandas.MultiIndex.reorder_levels.html#pandas.MultiIndex.reorder_levels
    "pandas.MultiIndex.reorder_levels")(order) | Rearrange levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`remove_unused_levels`](pandas.MultiIndex.remove_unused_levels.html#pandas.MultiIndex.remove_unused_levels
    "pandas.MultiIndex.remove_unused_levels")() | Create new MultiIndex from current
    that removes unused levels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_level_values`](pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")(level) | Return vector of label values for
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_indexer`](pandas.MultiIndex.get_indexer.html#pandas.MultiIndex.get_indexer
    "pandas.MultiIndex.get_indexer")(target[, method, limit, tolerance]) | Compute
    indexer and mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_loc`](pandas.MultiIndex.get_loc.html#pandas.MultiIndex.get_loc "pandas.MultiIndex.get_loc")(key)
    | Get location for a label or a tuple of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_locs`](pandas.MultiIndex.get_locs.html#pandas.MultiIndex.get_locs "pandas.MultiIndex.get_locs")(seq)
    | Get location for a sequence of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_loc_level`](pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level")(key[, level, drop_level]) | Get location and
    sliced index for requested label(s)/level(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`drop`](pandas.MultiIndex.drop.html#pandas.MultiIndex.drop "pandas.MultiIndex.drop")(codes[, level, errors])
    | Make a new [`pandas.MultiIndex`](#pandas.MultiIndex "pandas.MultiIndex") with
    the passed list of codes deleted. |'
  prefs: []
  type: TYPE_TB
