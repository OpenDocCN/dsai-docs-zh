- en: scipy.stats.binned_statistic_dd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a multidimensional binned statistic for a set of data.
  prefs: []
  type: TYPE_NORMAL
- en: This is a generalization of a histogramdd function. A histogram divides the
    space into bins, and returns the count of the number of points in each bin. This
    function allows the computation of the sum, mean, median, or other statistic of
    the values within each bin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sample**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Data to histogram passed as a sequence of N arrays of length D, or as an (N,D)
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**(N,) array_like or list of (N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The data on which the statistic will be computed. This must be the same shape
    as *sample*, or a list of sequences - each with the same shape as *sample*. If
    *values* is such a list, the statistic will be computed on each independently.
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**string or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The statistic to compute (default is ‘mean’). The following statistics are
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘mean’ : compute the mean of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘median’ : compute the median of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘count’ : compute the count of points within each bin. This is identical to
    an unweighted histogram. *values* array is not referenced.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘sum’ : compute the sum of values for points within each bin. This is identical
    to a weighted histogram.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘std’ : compute the standard deviation within each bin. This is implicitly
    calculated with ddof=0\. If the number of values within a given bin is 0 or 1,
    the computed standard deviation value will be 0 for the bin.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘min’ : compute the minimum of values for points within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘max’ : compute the maximum of values for point within each bin. Empty bins
    will be represented by NaN.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'function : a user-defined function which takes a 1D array of values, and outputs
    a single numerical statistic. This function will be called on the values in each
    bin. Empty bins will be represented by function([]), or NaN if this returns an
    error.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bins**sequence or positive int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bin specification must be in one of the following forms:'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of arrays describing the bin edges along each dimension.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The number of bins for each dimension (nx, ny, … = bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The number of bins for all dimensions (nx = ny = … = bins).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**range**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of lower and upper bin edges to be used if the edges are not given
    explicitly in *bins*. Defaults to the minimum and maximum values along each dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**expand_binnumbers**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '‘False’ (default): the returned *binnumber* is a shape (N,) array of linearized
    bin indices. ‘True’: the returned *binnumber* is ‘unraveled’ into a shape (D,N)
    ndarray, where each row gives the bin numbers in the corresponding dimension.
    See the *binnumber* returned value, and the *Examples* section of [`binned_statistic_2d`](scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d
    "scipy.stats.binned_statistic_2d").'
  prefs: []
  type: TYPE_NORMAL
- en: '**binned_statistic_result**binnedStatisticddResult'
  prefs: []
  type: TYPE_NORMAL
- en: Result of a previous call to the function in order to reuse bin edges and bin
    numbers with new values and/or a different statistic. To reuse bin numbers, *expand_binnumbers*
    must have been set to False (the default)
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.17.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**ndarray, shape(nx1, nx2, nx3,…)'
  prefs: []
  type: TYPE_NORMAL
- en: The values of the selected statistic in each two-dimensional bin.
  prefs: []
  type: TYPE_NORMAL
- en: '**bin_edges**list of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: A list of D arrays describing the (nxi + 1) bin edges for each dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '**binnumber**(N,) array of ints or (D,N) ndarray of ints'
  prefs: []
  type: TYPE_NORMAL
- en: This assigns to each element of *sample* an integer that represents the bin
    in which this observation falls. The representation depends on the *expand_binnumbers*
    argument. See *Notes* for details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.digitize`](https://numpy.org/devdocs/reference/generated/numpy.digitize.html#numpy.digitize
    "(in NumPy v2.0.dev0)"), [`numpy.histogramdd`](https://numpy.org/devdocs/reference/generated/numpy.histogramdd.html#numpy.histogramdd
    "(in NumPy v2.0.dev0)"), [`binned_statistic`](scipy.stats.binned_statistic.html#scipy.stats.binned_statistic
    "scipy.stats.binned_statistic"), [`binned_statistic_2d`](scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d
    "scipy.stats.binned_statistic_2d")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Binedges: All but the last (righthand-most) bin is half-open in each dimension.
    In other words, if *bins* is `[1, 2, 3, 4]`, then the first bin is `[1, 2)` (including
    1, but excluding 2) and the second `[2, 3)`. The last bin, however, is `[3, 4]`,
    which *includes* 4.'
  prefs: []
  type: TYPE_NORMAL
- en: '*binnumber*: This returned argument assigns to each element of *sample* an
    integer that represents the bin in which it belongs. The representation depends
    on the *expand_binnumbers* argument. If ‘False’ (default): The returned *binnumber*
    is a shape (N,) array of linearized indices mapping each element of *sample* to
    its corresponding bin (using row-major ordering). If ‘True’: The returned *binnumber*
    is a shape (D,N) ndarray where each row indicates bin placements for each dimension
    respectively. In each dimension, a binnumber of *i* means the corresponding value
    is between (bin_edges[D][i-1], bin_edges[D][i]), for each dimension ‘D’.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Take an array of 600 (x, y) coordinates as an example. [`binned_statistic_dd`](#scipy.stats.binned_statistic_dd
    "scipy.stats.binned_statistic_dd") can handle arrays of higher dimension *D*.
    But a plot of dimension *D+1* is required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create bins and count how many arrays fall in each bin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the volume and the location of bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Reuse bin numbers and bin edges with new values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-binned_statistic_dd-1.png](../Images/f38feb2e57a02253f61dbcdfe509746b.png)'
  prefs: []
  type: TYPE_IMG
