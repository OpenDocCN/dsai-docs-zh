- en: Reviewer guidelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/reviewer_guidelines.html](https://numpy.org/doc/1.26/dev/reviewer_guidelines.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reviewing open pull requests (PRs) helps move the project forward. We encourage
    people outside the project to get involved as well; it’s a great way to get familiar
    with the codebase.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Who can be a reviewer?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Communication Guidelines
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewer Checklist
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are unusual *dtypes* tested if a function supports those?
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should variable names be improved for clarity or consistency?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For maintainers
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Workflow
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '## Standard replies for reviewing'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage question**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**You’re welcome to update the docs**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Self-contained example for bug**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Software versions**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: python -c 'import numpy; print(numpy.version.version)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Code blocks**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Linking to code**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Better description and title**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Regression test needed**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Don’t change unrelated**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Who can be a reviewer?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Communication Guidelines
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewer Checklist
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are unusual *dtypes* tested if a function supports those?
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should variable names be improved for clarity or consistency?
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For maintainers
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于添加新功能或在某种程度上复杂的PR，请至少等待一到两天再合并。这样，其他人在代码合并之前有机会发表评论。考虑将其添加到发布说明中。
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并贡献时，提交者负责确保这些符合NumPy的[开发过程准则](index.html#guidelines)的要求。此外，请检查在[numpy-discussion邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)上讨论了新功能和向后兼容性的突破。
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并您认为太混乱的PR的提交或整理提交消息都可以。在执行此操作时，请确保保留原始作者的姓名。确保提交消息遵循[NumPy的规则](development_workflow.html#writing-the-commit-message)。
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要拒绝一个PR时：如果情况非常明显，您可以关闭它并解释原因。如果不是，那么首先解释为什么您认为PR不适合包含在NumPy中，然后让第二个提交者评论或关闭，这是一个很好的主意。
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果PR提交者在6个月内不回应您的评论，请将相关PR移至不活跃类别，并附上“不活跃”标签。此时，维护者可以关闭PR。如果有任何兴趣完成正在考虑的PR，则可以随时通过评论指示，无需等待6个月。
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励维护者在合并之前只需要进行小的更改（例如修复代码风格或语法错误）时完成PR。如果一个PR变得不活跃，维护者可以进行较大的更改。请记住，PR是贡献者与审阅者之间的合作，有时直接推动是完成它的最佳方式。
- en: API Changes
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API更改
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，大多数公共API更改应提前进行讨论，并通常应与更广泛的受众（在邮件列表中，甚至通过NEP）进行讨论。
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对公共C-API的更改，请注意NumPy C-API是向后兼容的，因此任何添加必须与先前版本ABI兼容。如果不是这种情况，您必须添加一个保护。
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如`PyUnicodeScalarObject`结构包含以下内容：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`buffer_fmt`字段在NumPy 1.20中添加到其末尾（所有先前字段保持ABI兼容）。同样，必须在`numpy/core/code_generators/numpy_api.py`中的API表中添加函数时使用`MinVersion`注释。例如：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通常只有头部功能（例如新宏）不需要受到保护。
- en: GitHub Workflow
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub工作流
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，请根据需要在GitHub上使用工作流跟踪功能：
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完成审查后，如果您希望要求提交者进行更改，请将您的审查状态更改为“请求更改”。这可以在GitHub的PR页面上的“文件更改”选项卡上完成，审查更改（右上角的按钮）。
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: For maintainers
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Workflow
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '## Standard replies for reviewing'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage question**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**You’re welcome to update the docs**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Self-contained example for bug**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Software versions**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: python -c 'import numpy; print(numpy.version.version)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Code blocks**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Linking to code**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Better description and title**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Regression test needed**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Don’t change unrelated**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
