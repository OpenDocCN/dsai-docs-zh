["```py\nclass sympy.physics.mechanics.kane.KanesMethod(frame, q_ind, u_ind, kd_eqs=None, q_dependent=None, configuration_constraints=None, u_dependent=None, velocity_constraints=None, acceleration_constraints=None, u_auxiliary=None, bodies=None, forcelist=None, explicit_kinematics=True, kd_eqs_solver='LU', constraint_solver='LU')\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import dynamicsymbols, ReferenceFrame\n>>> from sympy.physics.mechanics import Point, Particle, KanesMethod\n>>> q, u = dynamicsymbols('q u')\n>>> qd, ud = dynamicsymbols('q u', 1)\n>>> m, c, k = symbols('m c k')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, u * N.x) \n```", "```py\n>>> kd = [qd - u]\n>>> FL = [(P, (-k * q - c * u) * N.x)]\n>>> pa = Particle('pa', P, m)\n>>> BL = [pa] \n```", "```py\n>>> KM = KanesMethod(N, q_ind=[q], u_ind=[u], kd_eqs=kd)\n>>> (fr, frstar) = KM.kanes_equations(BL, FL)\n>>> MM = KM.mass_matrix\n>>> forcing = KM.forcing\n>>> rhs = MM.inv() * forcing\n>>> rhs\nMatrix([[(-c*u(t) - k*q(t))/m]])\n>>> KM.linearize(A_and_B=True)[0]\nMatrix([\n[   0,    1],\n[-k/m, -c/m]]) \n```", "```py\nproperty auxiliary_eqs\n```", "```py\nproperty forcing\n```", "```py\nproperty forcing_full\n```", "```py\nproperty forcing_kin\n```", "```py\nkanes_equations(bodies=None, loads=None)\n```", "```py\nkindiffdict()\n```", "```py\nlinearize(*, new_method=None, linear_solver='LU', **kwargs)\n```", "```py\nproperty mass_matrix\n```", "```py\nproperty mass_matrix_full\n```", "```py\nproperty mass_matrix_kin\n```", "```py\nrhs(inv_method=None)\n```", "```py\nx' = |q'| =: f(q, u, r, p, t)\n     |u'| \n```", "```py\nto_linearizer(linear_solver='LU')\n```", "```py\nclass sympy.physics.mechanics.lagrange.LagrangesMethod(Lagrangian, qs, forcelist=None, bodies=None, frame=None, hol_coneqs=None, nonhol_coneqs=None)\n```", "```py\n>>> from sympy.physics.mechanics import LagrangesMethod, Lagrangian\n>>> from sympy.physics.mechanics import ReferenceFrame, Particle, Point\n>>> from sympy.physics.mechanics import dynamicsymbols\n>>> from sympy import symbols\n>>> q = dynamicsymbols('q')\n>>> qd = dynamicsymbols('q', 1)\n>>> m, k, b = symbols('m k b')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, qd * N.x) \n```", "```py\n>>> Pa = Particle('Pa', P, m)\n>>> Pa.potential_energy = k * q**2 / 2.0\n>>> L = Lagrangian(N, Pa)\n>>> fl = [(P, -b * qd * N.x)] \n```", "```py\n>>> l = LagrangesMethod(L, [q], forcelist = fl, frame = N)\n>>> print(l.form_lagranges_equations())\nMatrix([[b*Derivative(q(t), t) + 1.0*k*q(t) + m*Derivative(q(t), (t, 2))]]) \n```", "```py\n>>> print(l.rhs())\nMatrix([[Derivative(q(t), t)], [(-b*Derivative(q(t), t) - 1.0*k*q(t))/m]]) \n```", "```py\nproperty forcing\n```", "```py\nproperty forcing_full\n```", "```py\nform_lagranges_equations()\n```", "```py\nlinearize(q_ind=None, qd_ind=None, q_dep=None, qd_dep=None, linear_solver='LU', **kwargs)\n```", "```py\nproperty mass_matrix\n```", "```py\nproperty mass_matrix_full\n```", "```py\nrhs(inv_method=None, **kwargs)\n```", "```py\nsolve_multipliers(op_point=None, sol_type='dict')\n```", "```py\nto_linearizer(q_ind=None, qd_ind=None, q_dep=None, qd_dep=None, linear_solver='LU')\n```"]