- en: scipy.signal.StateSpace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.StateSpace.html#scipy.signal.StateSpace)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Linear Time Invariant system in state-space form.
  prefs: []
  type: TYPE_NORMAL
- en: Represents the system as the continuous-time, first order differential equation
    \(\dot{x} = A x + B u\) or the discrete-time difference equation \(x[k+1] = A
    x[k] + B u[k]\). [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace")
    systems inherit additional functionality from the [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti"), respectively the [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti") classes, depending on which system representation is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***system: arguments**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace") class
    can be instantiated with 1 or 4 arguments. The following gives the number of input
    arguments and their interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti") or [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti") system: ([`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace"),
    [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") or [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"))'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '4: array_like: (A, B, C, D)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt: float, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling time [s] of the discrete-time systems. Defaults to *None* (continuous-time).
    Must be specified as a keyword argument, for example, `dt=0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"), [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"), [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti"), [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ss2zpk`](scipy.signal.ss2zpk.html#scipy.signal.ss2zpk "scipy.signal.ss2zpk"),
    [`ss2tf`](scipy.signal.ss2tf.html#scipy.signal.ss2tf "scipy.signal.ss2tf"), [`zpk2sos`](scipy.signal.zpk2sos.html#scipy.signal.zpk2sos
    "scipy.signal.zpk2sos")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of properties that are not part of the [`StateSpace`](#scipy.signal.StateSpace
    "scipy.signal.StateSpace") system representation (such as [`zeros`](scipy.signal.StateSpace.zeros.html#scipy.signal.StateSpace.zeros
    "scipy.signal.StateSpace.zeros") or [`poles`](scipy.signal.StateSpace.poles.html#scipy.signal.StateSpace.poles
    "scipy.signal.StateSpace.poles")) is very inefficient and may lead to numerical
    inaccuracies. It is better to convert to the specific system representation first.
    For example, call `sys = sys.to_zpk()` before accessing/changing the zeros, poles
    or gain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`A`](scipy.signal.StateSpace.A.html#scipy.signal.StateSpace.A "scipy.signal.StateSpace.A")'
  prefs: []
  type: TYPE_NORMAL
- en: State matrix of the [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`B`](scipy.signal.StateSpace.B.html#scipy.signal.StateSpace.B "scipy.signal.StateSpace.B")'
  prefs: []
  type: TYPE_NORMAL
- en: Input matrix of the [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`C`](scipy.signal.StateSpace.C.html#scipy.signal.StateSpace.C "scipy.signal.StateSpace.C")'
  prefs: []
  type: TYPE_NORMAL
- en: Output matrix of the [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`D`](scipy.signal.StateSpace.D.html#scipy.signal.StateSpace.D "scipy.signal.StateSpace.D")'
  prefs: []
  type: TYPE_NORMAL
- en: Feedthrough matrix of the [`StateSpace`](#scipy.signal.StateSpace "scipy.signal.StateSpace")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dt`](scipy.signal.StateSpace.dt.html#scipy.signal.StateSpace.dt "scipy.signal.StateSpace.dt")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the sampling time of the system, *None* for [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti") systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[`poles`](scipy.signal.StateSpace.poles.html#scipy.signal.StateSpace.poles
    "scipy.signal.StateSpace.poles")'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](scipy.signal.StateSpace.zeros.html#scipy.signal.StateSpace.zeros
    "scipy.signal.StateSpace.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__mul__`](scipy.signal.StateSpace.__mul__.html#scipy.signal.StateSpace.__mul__
    "scipy.signal.StateSpace.__mul__")(other) | Post-multiply another system or a
    scalar |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_ss`](scipy.signal.StateSpace.to_ss.html#scipy.signal.StateSpace.to_ss
    "scipy.signal.StateSpace.to_ss")() | Return a copy of the current [`StateSpace`](#scipy.signal.StateSpace
    "scipy.signal.StateSpace") system. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_tf`](scipy.signal.StateSpace.to_tf.html#scipy.signal.StateSpace.to_tf
    "scipy.signal.StateSpace.to_tf")(**kwargs) | Convert system representation to
    [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_zpk`](scipy.signal.StateSpace.to_zpk.html#scipy.signal.StateSpace.to_zpk
    "scipy.signal.StateSpace.to_zpk")(**kwargs) | Convert system representation to
    [`ZerosPolesGain`](scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"). |'
  prefs: []
  type: TYPE_TB
