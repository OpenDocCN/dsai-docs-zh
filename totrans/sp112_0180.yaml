- en: scipy.interpolate.RegularGridInterpolator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Interpolator on a regular or rectilinear grid in arbitrary dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The data must be defined on a rectilinear grid; that is, a rectangular grid
    with even or uneven spacing. Linear, nearest-neighbor, spline interpolations are
    supported. After setting up the interpolator object, the interpolation method
    may be chosen at each evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**tuple of ndarray of float, with shapes (m1, ), …, (mn, )'
  prefs: []
  type: TYPE_NORMAL
- en: The points defining the regular grid in n dimensions. The points in each dimension
    (i.e. every elements of the points tuple) must be strictly ascending or descending.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**array_like, shape (m1, …, mn, …)'
  prefs: []
  type: TYPE_NORMAL
- en: The data on the regular grid in n dimensions. Complex data can be acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The method of interpolation to perform. Supported are “linear”, “nearest”, “slinear”,
    “cubic”, “quintic” and “pchip”. This parameter will become the default for the
    object’s `__call__` method. Default is “linear”.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds_error**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, when interpolated values are requested outside of the domain of the
    input data, a ValueError is raised. If False, then *fill_value* is used. Default
    is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value to use for points outside of the interpolation domain. If None, values
    outside the domain are extrapolated. Default is `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`NearestNDInterpolator`](scipy.interpolate.NearestNDInterpolator.html#scipy.interpolate.NearestNDInterpolator
    "scipy.interpolate.NearestNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Nearest neighbor interpolator on *unstructured* data in N dimensions
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise linear interpolator on *unstructured* data in N dimensions
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn "scipy.interpolate.interpn")'
  prefs: []
  type: TYPE_NORMAL
- en: a convenience function which wraps [`RegularGridInterpolator`](#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator")
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.ndimage.map_coordinates`](scipy.ndimage.map_coordinates.html#scipy.ndimage.map_coordinates
    "scipy.ndimage.map_coordinates")'
  prefs: []
  type: TYPE_NORMAL
- en: interpolation on grids with equal spacing (suitable for e.g., N-D image resampling)
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Contrary to [`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator") and [`NearestNDInterpolator`](scipy.interpolate.NearestNDInterpolator.html#scipy.interpolate.NearestNDInterpolator
    "scipy.interpolate.NearestNDInterpolator"), this class avoids expensive triangulation
    of the input data by taking advantage of the regular grid structure.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, this class assumes that the data is defined on a *rectilinear*
    grid.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.14.
  prefs: []
  type: TYPE_NORMAL
- en: The ‘slinear’(k=1), ‘cubic’(k=3), and ‘quintic’(k=5) methods are tensor-product
    spline interpolators, where *k* is the spline degree, If any dimension has fewer
    points than *k* + 1, an error will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.
  prefs: []
  type: TYPE_NORMAL
- en: If the input data is such that dimensions have incommensurate units and differ
    by many orders of magnitude, the interpolant may have numerical artifacts. Consider
    rescaling the data before interpolating.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Python package *regulargrid* by Johannes Buchner, see [https://pypi.python.org/pypi/regulargrid/](https://pypi.python.org/pypi/regulargrid/)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Trilinear interpolation”, [https://en.wikipedia.org/wiki/Trilinear_interpolation](https://en.wikipedia.org/wiki/Trilinear_interpolation)
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Weiser, Alan, and Sergio E. Zarantonello. “A note on piecewise linear and multilinear
    table interpolation in many dimensions.” MATH. COMPUT. 50.181 (1988): 189-196.
    [https://www.ams.org/journals/mcom/1988-50-181/S0025-5718-1988-0917826-0/S0025-5718-1988-0917826-0.pdf](https://www.ams.org/journals/mcom/1988-50-181/S0025-5718-1988-0917826-0/S0025-5718-1988-0917826-0.pdf)
    [DOI:10.1090/S0025-5718-1988-0917826-0](https://doi.org/10.1090/S0025-5718-1988-0917826-0)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Evaluate a function on the points of a 3-D grid**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first example, we evaluate a simple example function on the points of
    a 3-D grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`data` is now a 3-D array with `data[i, j, k] = f(x[i], y[j], z[k])`. Next,
    define an interpolating function from this data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluate the interpolating function at the two points `(x,y,z) = (2.1, 6.2,
    8.3)` and `(3.3, 5.2, 7.1)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: which is indeed a close approximation to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Interpolate and extrapolate a 2D dataset**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a second example, we interpolate and extrapolate a 2D data set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate and plot the interpolator on a finer grid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-RegularGridInterpolator-1_00_00.png](../Images/d56fe196e9738fb3299fc0271c73705a.png)'
  prefs: []
  type: TYPE_IMG
- en: Other examples are given [in the tutorial](../../tutorial/interpolate/ND_regular_grid.html#tutorial-interpolate-regular-grid-interpolator).
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**grid**tuple of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: The points defining the regular grid in n dimensions. This tuple defines the
    full grid via `np.meshgrid(*grid, indexing='ij')`
  prefs: []
  type: TYPE_NORMAL
- en: '**values**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Data values at the grid.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation method.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**float or `None`'
  prefs: []
  type: TYPE_NORMAL
- en: Use this value for out-of-bounds arguments to [`__call__`](scipy.interpolate.RegularGridInterpolator.__call__.html#scipy.interpolate.RegularGridInterpolator.__call__
    "scipy.interpolate.RegularGridInterpolator.__call__").
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds_error**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, out-of-bounds argument raise a `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.RegularGridInterpolator.__call__.html#scipy.interpolate.RegularGridInterpolator.__call__
    "scipy.interpolate.RegularGridInterpolator.__call__")(xi[, method]) | Interpolation
    at coordinates. |'
  prefs: []
  type: TYPE_TB
