- en: Miscellaneous routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.other.html](https://numpy.org/doc/1.26/reference/routines.other.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Performance tuning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`setbufsize`](generated/numpy.setbufsize.html#numpy.setbufsize "numpy.setbufsize")(size)
    | Set the size of the buffer used in ufuncs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getbufsize`](generated/numpy.getbufsize.html#numpy.getbufsize "numpy.getbufsize")()
    | Return the size of the buffer used in ufuncs. |'
  prefs: []
  type: TYPE_TB
- en: Memory ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`shares_memory`](generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory")(a, b, /[, max_work]) | Determine if two arrays share memory.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`may_share_memory`](generated/numpy.may_share_memory.html#numpy.may_share_memory
    "numpy.may_share_memory")(a, b, /[, max_work]) | Determine if two arrays might
    share memory |'
  prefs: []
  type: TYPE_TB
- en: '| [`byte_bounds`](generated/numpy.byte_bounds.html#numpy.byte_bounds "numpy.byte_bounds")(a)
    | Returns pointers to the end-points of an array. |'
  prefs: []
  type: TYPE_TB
- en: Array mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.mixins.NDArrayOperatorsMixin`](generated/numpy.lib.mixins.NDArrayOperatorsMixin.html#numpy.lib.mixins.NDArrayOperatorsMixin
    "numpy.lib.mixins.NDArrayOperatorsMixin")() | Mixin defining all operator special
    methods using __array_ufunc__. |'
  prefs: []
  type: TYPE_TB
- en: NumPy version comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.NumpyVersion`](generated/numpy.lib.NumpyVersion.html#numpy.lib.NumpyVersion
    "numpy.lib.NumpyVersion")(vstring) | Parse and compare numpy version strings.
    |'
  prefs: []
  type: TYPE_TB
- en: Utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`get_include`](generated/numpy.get_include.html#numpy.get_include "numpy.get_include")()
    | Return the directory that contains the NumPy *.h header files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`show_config`](generated/numpy.show_config.html#numpy.show_config "numpy.show_config")([mode])
    | Show libraries and system information on which NumPy was built and is being
    used |'
  prefs: []
  type: TYPE_TB
- en: '| [`show_runtime`](generated/numpy.show_runtime.html#numpy.show_runtime "numpy.show_runtime")()
    | Print information about various resources in the system including available
    intrinsic support and BLAS/LAPACK library in use |'
  prefs: []
  type: TYPE_TB
- en: '| [`deprecate`](generated/numpy.deprecate.html#numpy.deprecate "numpy.deprecate")(*args, **kwargs)
    | Issues a DeprecationWarning, adds warning to *old_name*''s docstring, rebinds
    `old_name.__name__` and returns the new function object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`deprecate_with_doc`](generated/numpy.deprecate_with_doc.html#numpy.deprecate_with_doc
    "numpy.deprecate_with_doc")(msg) | Deprecates a function and includes the deprecation
    in its docstring. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_shapes`](generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")(*args) | Broadcast the input shapes into a single shape.
    |'
  prefs: []
  type: TYPE_TB
- en: Matlab-like Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`who`](generated/numpy.who.html#numpy.who "numpy.who")([vardict]) | Print
    the NumPy arrays in the given dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`disp`](generated/numpy.disp.html#numpy.disp "numpy.disp")(mesg[, device, linefeed])
    | Display a message on a device. |'
  prefs: []
  type: TYPE_TB
- en: '### Exceptions and Warnings ([`numpy.exceptions`](#module-numpy.exceptions
    "numpy.exceptions"))'
  prefs: []
  type: TYPE_NORMAL
- en: General exceptions used by NumPy. Note that some exceptions may be module specific,
    such as linear algebra errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The exceptions module is new in NumPy 1.25\. Older exceptions remain available
    through the main NumPy namespace for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`ComplexWarning`](generated/numpy.exceptions.ComplexWarning.html#numpy.exceptions.ComplexWarning
    "numpy.exceptions.ComplexWarning") | The warning raised when casting a complex
    dtype to a real dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`VisibleDeprecationWarning`](generated/numpy.exceptions.VisibleDeprecationWarning.html#numpy.exceptions.VisibleDeprecationWarning
    "numpy.exceptions.VisibleDeprecationWarning") | Visible deprecation warning. |'
  prefs: []
  type: TYPE_TB
- en: Exceptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`AxisError`](generated/numpy.exceptions.AxisError.html#numpy.exceptions.AxisError
    "numpy.exceptions.AxisError")(axis[, ndim, msg_prefix]) | Axis supplied was invalid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DTypePromotionError`](generated/numpy.exceptions.DTypePromotionError.html#numpy.exceptions.DTypePromotionError
    "numpy.exceptions.DTypePromotionError") | Multiple DTypes could not be converted
    to a common one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TooHardError`](generated/numpy.exceptions.TooHardError.html#numpy.exceptions.TooHardError
    "numpy.exceptions.TooHardError") | max_work was exceeded. |'
  prefs: []
  type: TYPE_TB
- en: '### DType classes and utility ([`numpy.dtypes`](#module-numpy.dtypes "numpy.dtypes"))'
  prefs: []
  type: TYPE_NORMAL
- en: This module is home to specific dtypes related functionality and their classes.
    For more general information about dtypes, also see [`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") and [Data type objects (dtype)](arrays.dtypes.html#arrays-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the builtin `types` module, this submodule defines types (classes)
    that are not widely used directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The dtypes module is new in NumPy 1.25\. Previously DType classes were only
    accessible indirectly.
  prefs: []
  type: TYPE_NORMAL
- en: DType classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following are the classes of the corresponding NumPy dtype instances and
    NumPy scalar types. The classes can be used in `isinstance` checks and can also
    be instantiated or used directly. Direct use of these classes is not typical,
    since their scalar counterparts (e.g. `np.float64`) or strings like `"float64"`
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '| Group | DType class |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | `BoolDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Bit-sized integers | `Int8DType`, `UInt8DType`, `Int16DType`, `UInt16DType`,
    `Int32DType`, `UInt32DType`, `Int64DType`, `UInt64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| C-named integers (may be aliases) | `ByteDType`, `UByteDType`, `ShortDType`,
    `UShortDType`, `IntDType`, `UIntDType`, `LongDType`, `ULongDType`, `LongLongDType`,
    `ULongLongDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Floating point | `Float16DType`, `Float32DType`, `Float64DType`, `LongDoubleDType`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Complex | `Complex64DType`, `Complex128DType`, `CLongDoubleDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | `BytesDType`, `BytesDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Times | `DateTime64DType`, `TimeDelta64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| Others | `ObjectDType`, `VoidDType` |'
  prefs: []
  type: TYPE_TB
- en: Performance tuning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`setbufsize`](generated/numpy.setbufsize.html#numpy.setbufsize "numpy.setbufsize")(size)
    | Set the size of the buffer used in ufuncs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getbufsize`](generated/numpy.getbufsize.html#numpy.getbufsize "numpy.getbufsize")()
    | Return the size of the buffer used in ufuncs. |'
  prefs: []
  type: TYPE_TB
- en: Memory ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`shares_memory`](generated/numpy.shares_memory.html#numpy.shares_memory
    "numpy.shares_memory")(a, b, /[, max_work]) | Determine if two arrays share memory.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`may_share_memory`](generated/numpy.may_share_memory.html#numpy.may_share_memory
    "numpy.may_share_memory")(a, b, /[, max_work]) | Determine if two arrays might
    share memory |'
  prefs: []
  type: TYPE_TB
- en: '| [`byte_bounds`](generated/numpy.byte_bounds.html#numpy.byte_bounds "numpy.byte_bounds")(a)
    | Returns pointers to the end-points of an array. |'
  prefs: []
  type: TYPE_TB
- en: Array mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.mixins.NDArrayOperatorsMixin`](generated/numpy.lib.mixins.NDArrayOperatorsMixin.html#numpy.lib.mixins.NDArrayOperatorsMixin
    "numpy.lib.mixins.NDArrayOperatorsMixin")() | Mixin defining all operator special
    methods using __array_ufunc__. |'
  prefs: []
  type: TYPE_TB
- en: NumPy version comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lib.NumpyVersion`](generated/numpy.lib.NumpyVersion.html#numpy.lib.NumpyVersion
    "numpy.lib.NumpyVersion")(vstring) | Parse and compare numpy version strings.
    |'
  prefs: []
  type: TYPE_TB
- en: Utility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`get_include`](generated/numpy.get_include.html#numpy.get_include "numpy.get_include")()
    | Return the directory that contains the NumPy *.h header files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`show_config`](generated/numpy.show_config.html#numpy.show_config "numpy.show_config")([mode])
    | Show libraries and system information on which NumPy was built and is being
    used |'
  prefs: []
  type: TYPE_TB
- en: '| [`show_runtime`](generated/numpy.show_runtime.html#numpy.show_runtime "numpy.show_runtime")()
    | Print information about various resources in the system including available
    intrinsic support and BLAS/LAPACK library in use |'
  prefs: []
  type: TYPE_TB
- en: '| [`deprecate`](generated/numpy.deprecate.html#numpy.deprecate "numpy.deprecate")(*args, **kwargs)
    | Issues a DeprecationWarning, adds warning to *old_name*''s docstring, rebinds
    `old_name.__name__` and returns the new function object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`deprecate_with_doc`](generated/numpy.deprecate_with_doc.html#numpy.deprecate_with_doc
    "numpy.deprecate_with_doc")(msg) | Deprecates a function and includes the deprecation
    in its docstring. |'
  prefs: []
  type: TYPE_TB
- en: '| [`broadcast_shapes`](generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")(*args) | Broadcast the input shapes into a single shape.
    |'
  prefs: []
  type: TYPE_TB
- en: Matlab-like Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`who`](generated/numpy.who.html#numpy.who "numpy.who")([vardict]) | Print
    the NumPy arrays in the given dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`disp`](generated/numpy.disp.html#numpy.disp "numpy.disp")(mesg[, device, linefeed])
    | Display a message on a device. |'
  prefs: []
  type: TYPE_TB
- en: '### Exceptions and Warnings ([`numpy.exceptions`](#module-numpy.exceptions
    "numpy.exceptions"))'
  prefs: []
  type: TYPE_NORMAL
- en: General exceptions used by NumPy. Note that some exceptions may be module specific,
    such as linear algebra errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The exceptions module is new in NumPy 1.25\. Older exceptions remain available
    through the main NumPy namespace for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`ComplexWarning`](generated/numpy.exceptions.ComplexWarning.html#numpy.exceptions.ComplexWarning
    "numpy.exceptions.ComplexWarning") | The warning raised when casting a complex
    dtype to a real dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`VisibleDeprecationWarning`](generated/numpy.exceptions.VisibleDeprecationWarning.html#numpy.exceptions.VisibleDeprecationWarning
    "numpy.exceptions.VisibleDeprecationWarning") | Visible deprecation warning. |'
  prefs: []
  type: TYPE_TB
- en: Exceptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`AxisError`](generated/numpy.exceptions.AxisError.html#numpy.exceptions.AxisError
    "numpy.exceptions.AxisError")(axis[, ndim, msg_prefix]) | Axis supplied was invalid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DTypePromotionError`](generated/numpy.exceptions.DTypePromotionError.html#numpy.exceptions.DTypePromotionError
    "numpy.exceptions.DTypePromotionError") | Multiple DTypes could not be converted
    to a common one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TooHardError`](generated/numpy.exceptions.TooHardError.html#numpy.exceptions.TooHardError
    "numpy.exceptions.TooHardError") | max_work was exceeded. |'
  prefs: []
  type: TYPE_TB
- en: '### DType classes and utility ([`numpy.dtypes`](#module-numpy.dtypes "numpy.dtypes"))'
  prefs: []
  type: TYPE_NORMAL
- en: This module is home to specific dtypes related functionality and their classes.
    For more general information about dtypes, also see [`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") and [Data type objects (dtype)](arrays.dtypes.html#arrays-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the builtin `types` module, this submodule defines types (classes)
    that are not widely used directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The dtypes module is new in NumPy 1.25\. Previously DType classes were only
    accessible indirectly.
  prefs: []
  type: TYPE_NORMAL
- en: DType classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following are the classes of the corresponding NumPy dtype instances and
    NumPy scalar types. The classes can be used in `isinstance` checks and can also
    be instantiated or used directly. Direct use of these classes is not typical,
    since their scalar counterparts (e.g. `np.float64`) or strings like `"float64"`
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '| Group | DType class |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | `BoolDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Bit-sized integers | `Int8DType`, `UInt8DType`, `Int16DType`, `UInt16DType`,
    `Int32DType`, `UInt32DType`, `Int64DType`, `UInt64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| C-named integers (may be aliases) | `ByteDType`, `UByteDType`, `ShortDType`,
    `UShortDType`, `IntDType`, `UIntDType`, `LongDType`, `ULongDType`, `LongLongDType`,
    `ULongLongDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Floating point | `Float16DType`, `Float32DType`, `Float64DType`, `LongDoubleDType`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Complex | `Complex64DType`, `Complex128DType`, `CLongDoubleDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | `BytesDType`, `BytesDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Times | `DateTime64DType`, `TimeDelta64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| Others | `ObjectDType`, `VoidDType` |'
  prefs: []
  type: TYPE_TB
- en: Exceptions and Warnings ([`numpy.exceptions`](#module-numpy.exceptions "numpy.exceptions"))
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: General exceptions used by NumPy. Note that some exceptions may be module specific,
    such as linear algebra errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The exceptions module is new in NumPy 1.25\. Older exceptions remain available
    through the main NumPy namespace for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`ComplexWarning`](generated/numpy.exceptions.ComplexWarning.html#numpy.exceptions.ComplexWarning
    "numpy.exceptions.ComplexWarning") | The warning raised when casting a complex
    dtype to a real dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`VisibleDeprecationWarning`](generated/numpy.exceptions.VisibleDeprecationWarning.html#numpy.exceptions.VisibleDeprecationWarning
    "numpy.exceptions.VisibleDeprecationWarning") | Visible deprecation warning. |'
  prefs: []
  type: TYPE_TB
- en: Exceptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`AxisError`](generated/numpy.exceptions.AxisError.html#numpy.exceptions.AxisError
    "numpy.exceptions.AxisError")(axis[, ndim, msg_prefix]) | Axis supplied was invalid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DTypePromotionError`](generated/numpy.exceptions.DTypePromotionError.html#numpy.exceptions.DTypePromotionError
    "numpy.exceptions.DTypePromotionError") | Multiple DTypes could not be converted
    to a common one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TooHardError`](generated/numpy.exceptions.TooHardError.html#numpy.exceptions.TooHardError
    "numpy.exceptions.TooHardError") | max_work was exceeded. |'
  prefs: []
  type: TYPE_TB
- en: Warnings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`ComplexWarning`](generated/numpy.exceptions.ComplexWarning.html#numpy.exceptions.ComplexWarning
    "numpy.exceptions.ComplexWarning") | The warning raised when casting a complex
    dtype to a real dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`VisibleDeprecationWarning`](generated/numpy.exceptions.VisibleDeprecationWarning.html#numpy.exceptions.VisibleDeprecationWarning
    "numpy.exceptions.VisibleDeprecationWarning") | Visible deprecation warning. |'
  prefs: []
  type: TYPE_TB
- en: Exceptions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`AxisError`](generated/numpy.exceptions.AxisError.html#numpy.exceptions.AxisError
    "numpy.exceptions.AxisError")(axis[, ndim, msg_prefix]) | Axis supplied was invalid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DTypePromotionError`](generated/numpy.exceptions.DTypePromotionError.html#numpy.exceptions.DTypePromotionError
    "numpy.exceptions.DTypePromotionError") | Multiple DTypes could not be converted
    to a common one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TooHardError`](generated/numpy.exceptions.TooHardError.html#numpy.exceptions.TooHardError
    "numpy.exceptions.TooHardError") | max_work was exceeded. |'
  prefs: []
  type: TYPE_TB
- en: DType classes and utility ([`numpy.dtypes`](#module-numpy.dtypes "numpy.dtypes"))
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This module is home to specific dtypes related functionality and their classes.
    For more general information about dtypes, also see [`numpy.dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") and [Data type objects (dtype)](arrays.dtypes.html#arrays-dtypes).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the builtin `types` module, this submodule defines types (classes)
    that are not widely used directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: The dtypes module is new in NumPy 1.25\. Previously DType classes were only
    accessible indirectly.
  prefs: []
  type: TYPE_NORMAL
- en: DType classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following are the classes of the corresponding NumPy dtype instances and
    NumPy scalar types. The classes can be used in `isinstance` checks and can also
    be instantiated or used directly. Direct use of these classes is not typical,
    since their scalar counterparts (e.g. `np.float64`) or strings like `"float64"`
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '| Group | DType class |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | `BoolDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Bit-sized integers | `Int8DType`, `UInt8DType`, `Int16DType`, `UInt16DType`,
    `Int32DType`, `UInt32DType`, `Int64DType`, `UInt64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| C-named integers (may be aliases) | `ByteDType`, `UByteDType`, `ShortDType`,
    `UShortDType`, `IntDType`, `UIntDType`, `LongDType`, `ULongDType`, `LongLongDType`,
    `ULongLongDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Floating point | `Float16DType`, `Float32DType`, `Float64DType`, `LongDoubleDType`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Complex | `Complex64DType`, `Complex128DType`, `CLongDoubleDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | `BytesDType`, `BytesDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Times | `DateTime64DType`, `TimeDelta64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| Others | `ObjectDType`, `VoidDType` |'
  prefs: []
  type: TYPE_TB
- en: DType classes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following are the classes of the corresponding NumPy dtype instances and
    NumPy scalar types. The classes can be used in `isinstance` checks and can also
    be instantiated or used directly. Direct use of these classes is not typical,
    since their scalar counterparts (e.g. `np.float64`) or strings like `"float64"`
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '| Group | DType class |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | `BoolDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Bit-sized integers | `Int8DType`, `UInt8DType`, `Int16DType`, `UInt16DType`,
    `Int32DType`, `UInt32DType`, `Int64DType`, `UInt64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| C-named integers (may be aliases) | `ByteDType`, `UByteDType`, `ShortDType`,
    `UShortDType`, `IntDType`, `UIntDType`, `LongDType`, `ULongDType`, `LongLongDType`,
    `ULongLongDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Floating point | `Float16DType`, `Float32DType`, `Float64DType`, `LongDoubleDType`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Complex | `Complex64DType`, `Complex128DType`, `CLongDoubleDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | `BytesDType`, `BytesDType` |'
  prefs: []
  type: TYPE_TB
- en: '| Times | `DateTime64DType`, `TimeDelta64DType` |'
  prefs: []
  type: TYPE_TB
- en: '| Others | `ObjectDType`, `VoidDType` |'
  prefs: []
  type: TYPE_TB
