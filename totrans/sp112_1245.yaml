- en: scipy.stats.nhypergeom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.nhypergeom.html#scipy.stats.nhypergeom](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.nhypergeom.html#scipy.stats.nhypergeom)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A negative hypergeometric discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a box containing \(M\) balls:, \(n\) red and \(M-n\) blue. We randomly
    sample balls from the box, one at a time and *without* replacement, until we have
    picked \(r\) blue balls. [`nhypergeom`](#scipy.stats.nhypergeom "scipy.stats.nhypergeom")
    is the distribution of the number of red balls \(k\) we have picked.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`nhypergeom`](#scipy.stats.nhypergeom "scipy.stats.nhypergeom")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom "scipy.stats.hypergeom"),
    [`binom`](scipy.stats.binom.html#scipy.stats.binom "scipy.stats.binom"), [`nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The symbols used to denote the shape parameters (*M*, *n*, and *r*) are not
    universally accepted. See the Examples for a clarification of the definitions
    used here.
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function is defined as,
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k; M, n, r) = \frac{{{k+r-1}\choose{k}}{{M-r-k}\choose{n-k}}} {{M \choose
    n}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'for \(k \in [0, n]\), \(n \in [0, M]\), \(r \in [0, M-n]\), and the binomial
    coefficient is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\binom{n}{k} \equiv \frac{n!}{k! (n - k)!}.\]
  prefs: []
  type: TYPE_NORMAL
- en: 'It is equivalent to observing \(k\) successes in \(k+r-1\) samples with \(k+r\)’th
    sample being a failure. The former can be modelled as a hypergeometric distribution.
    The probability of the latter is simply the number of failures remaining \(M-n-(r-1)\)
    divided by the size of the remaining population \(M-(k+r-1)\). This relationship
    can be shown as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[NHG(k;M,n,r) = HG(k;M,n,k+r-1)\frac{(M-n-(r-1))}{(M-(k+r-1))}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(NHG\) is probability mass function (PMF) of the negative hypergeometric
    distribution and \(HG\) is the PMF of the hypergeometric distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `nhypergeom.pmf(k, M,
    n, r, loc)` is identically equivalent to `nhypergeom.pmf(k - loc, M, n, r)`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Negative Hypergeometric Distribution on Wikipedia [https://en.wikipedia.org/wiki/Negative_hypergeometric_distribution](https://en.wikipedia.org/wiki/Negative_hypergeometric_distribution)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Negative Hypergeometric Distribution from [http://www.math.wm.edu/~leemis/chart/UDR/PDFs/Negativehypergeometric.pdf](http://www.math.wm.edu/~leemis/chart/UDR/PDFs/Negativehypergeometric.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we have a collection of 20 animals, of which 7 are dogs. Then if we
    want to know the probability of finding a given number of dogs (successes) in
    a sample with exactly 12 animals that aren’t dogs (failures), we can initialize
    a frozen distribution and plot the probability mass function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-nhypergeom-1_00_00.png](../Images/55145c745c8f74ab1bdb9e199f07006d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of using a frozen distribution we can also use [`nhypergeom`](#scipy.stats.nhypergeom
    "scipy.stats.nhypergeom") methods directly. To for example obtain the probability
    mass function, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And to generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the relationship between [`hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom") and [`nhypergeom`](#scipy.stats.nhypergeom "scipy.stats.nhypergeom"),
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(M, n, r, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, M, n, r, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, M, n, r, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, M, n, r, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, M, n, r, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, M, n, r, loc=0)** | Survival function (also defined as `1 - cdf`,
    but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, M, n, r, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, M, n, r, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, M, n, r, loc=0)** | Inverse survival function (inverse of `sf`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(M, n, r, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(M, n, r, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(M, n, r), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(M, n, r, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(M, n, r, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(M, n, r, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(M, n, r, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, M, n, r, loc=0)** | Confidence interval with equal
    areas around the median. |'
  prefs: []
  type: TYPE_TB
