- en: scipy.LowLevelCallable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.LowLevelCallable.html#scipy.LowLevelCallable](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.LowLevelCallable.html#scipy.LowLevelCallable)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Low-level callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Some functions in SciPy take as arguments callback functions, which can either
    be python callables or low-level compiled functions. Using compiled callback functions
    can improve performance somewhat by avoiding wrapping data in Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: Such low-level functions in SciPy are wrapped in [`LowLevelCallable`](#scipy.LowLevelCallable
    "scipy.LowLevelCallable") objects, which can be constructed from function pointers
    obtained from ctypes, cffi, Cython, or contained in Python *PyCapsule* objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'Functions accepting low-level callables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.integrate.quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad"),
    [`scipy.ndimage.generic_filter`](scipy.ndimage.generic_filter.html#scipy.ndimage.generic_filter
    "scipy.ndimage.generic_filter"), [`scipy.ndimage.generic_filter1d`](scipy.ndimage.generic_filter1d.html#scipy.ndimage.generic_filter1d
    "scipy.ndimage.generic_filter1d"), [`scipy.ndimage.geometric_transform`](scipy.ndimage.geometric_transform.html#scipy.ndimage.geometric_transform
    "scipy.ndimage.geometric_transform")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Extending scipy.ndimage in C](../../tutorial/ndimage.html#ndimage-ccallbacks),
    [Faster integration using low-level callback functions](../../tutorial/integrate.html#quad-callbacks)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function**{PyCapsule, ctypes function pointer, cffi function pointer}'
  prefs: []
  type: TYPE_NORMAL
- en: Low-level callback function.
  prefs: []
  type: TYPE_NORMAL
- en: '**user_data**{PyCapsule, ctypes void pointer, cffi void pointer}'
  prefs: []
  type: TYPE_NORMAL
- en: User data to pass on to the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: '**signature**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Signature of the function. If omitted, determined from *function*, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument `function` can be one of:'
  prefs: []
  type: TYPE_NORMAL
- en: PyCapsule, whose name contains the C function signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ctypes function pointer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cffi function pointer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signature of the low-level callback must match one of those expected by
    the routine it is passed to.
  prefs: []
  type: TYPE_NORMAL
- en: 'If constructing low-level functions from a PyCapsule, the name of the capsule
    must be the corresponding signature, in the format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The context of a PyCapsule passed in as `function` is used as `user_data`, if
    an explicit value for `user_data` was not given.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function**'
  prefs: []
  type: TYPE_NORMAL
- en: Callback function given.
  prefs: []
  type: TYPE_NORMAL
- en: '**user_data**'
  prefs: []
  type: TYPE_NORMAL
- en: User data given.
  prefs: []
  type: TYPE_NORMAL
- en: '**signature**'
  prefs: []
  type: TYPE_NORMAL
- en: Signature of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`from_cython`](scipy.LowLevelCallable.from_cython.html#scipy.LowLevelCallable.from_cython
    "scipy.LowLevelCallable.from_cython")(module, name[, user_data, signature]) |
    Create a low-level callback function from an exported Cython function. |'
  prefs: []
  type: TYPE_TB
