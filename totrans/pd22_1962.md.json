["```py\nIn [1]: df = pd.DataFrame({'A': np.arange(6),\n ...:                   'B': pd.Series(list('aabbca'))\n ...:                          .astype('category', categories=list('cab'))\n ...:                   })\n ...:\n\nIn [2]: df\nOut[2]:\n A  B\n0  0  a\n1  1  a\n2  2  b\n3  3  b\n4  4  c\n5  5  a\n\nIn [3]: df.dtypes\nOut[3]:\nA       int64\nB    category\ndtype: object\n\nIn [4]: df.B.cat.categories\nOut[4]: Index(['c', 'a', 'b'], dtype='object') \n```", "```py\nIn [5]: df2 = df.set_index('B')\n\nIn [6]: df2.index\nOut[6]: CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [7]: df2.loc['a']\nOut[7]:\n A\nB\na  0\na  1\na  5 \n```", "```py\nIn [8]: df2.loc['a'].index\nOut[8]: CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [9]: df2.sort_index()\nOut[9]:\n A\nB\nc  4\na  0\na  1\na  5\nb  2\nb  3 \n```", "```py\nIn [10]: df2.groupby(level=0).sum()\nOut[10]:\n A\nB\nc  4\na  6\nb  5\n\nIn [11]: df2.groupby(level=0).sum().index\nOut[11]: CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [12]: df2.reindex(['a', 'e'])\nOut[12]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [13]: df2.reindex(['a', 'e']).index\nOut[13]: pd.Index(['a', 'a', 'a', 'e'], dtype='object', name='B')\n\nIn [14]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde')))\nOut[14]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [15]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde'))).index\nOut[15]: pd.CategoricalIndex(['a', 'a', 'a', 'e'],\n categories=['a', 'b', 'c', 'd', 'e'],\n ordered=False, name='B',\n dtype='category') \n```", "```py\nIn [1]: example_series = pd.Series([0, 1, 2, 3, 4, 5])\n\n# When no arguments are passed, returns 1\nIn [2]: example_series.sample()\nOut[2]: \n3    3\nLength: 1, dtype: int64\n\n# One may specify either a number of rows:\nIn [3]: example_series.sample(n=3)\nOut[3]: \n2    2\n1    1\n0    0\nLength: 3, dtype: int64\n\n# Or a fraction of the rows:\nIn [4]: example_series.sample(frac=0.5)\nOut[4]: \n1    1\n5    5\n3    3\nLength: 3, dtype: int64\n\n# weights are accepted.\nIn [5]: example_weights = [0, 0, 0.2, 0.2, 0.2, 0.4]\n\nIn [6]: example_series.sample(n=3, weights=example_weights)\nOut[6]: \n2    2\n4    4\n3    3\nLength: 3, dtype: int64\n\n# weights will also be normalized if they do not sum to one,\n# and missing values will be treated as zeros.\nIn [7]: example_weights2 = [0.5, 0, 0, 0, None, np.nan]\n\nIn [8]: example_series.sample(n=1, weights=example_weights2)\nOut[8]: \n0    0\nLength: 1, dtype: int64 \n```", "```py\nIn [9]: df = pd.DataFrame({\"col1\": [9, 8, 7, 6], \"weight_column\": [0.5, 0.4, 0.1, 0]})\n\nIn [10]: df.sample(n=3, weights=\"weight_column\")\nOut[10]: \n col1  weight_column\n0     9            0.5\n1     8            0.4\n2     7            0.1\n\n[3 rows x 2 columns] \n```", "```py\n    In [11]: idx = pd.Index([\" jack\", \"jill \", \" jesse \", \"frank\"])\n\n    In [12]: idx.str.strip()\n    Out[12]: Index(['jack', 'jill', 'jesse', 'frank'], dtype='object') \n    ```", "```py\n    In [13]: idx = pd.Index([\"a1\", \"a2\", \"b1\", \"b2\"])\n\n    In [14]: s = pd.Series(range(4), index=idx)\n\n    In [15]: s\n    Out[15]: \n    a1    0\n    a2    1\n    b1    2\n    b2    3\n    Length: 4, dtype: int64\n\n    In [16]: idx.str.startswith(\"a\")\n    Out[16]: array([ True,  True, False, False])\n\n    In [17]: s[s.index.str.startswith(\"a\")]\n    Out[17]: \n    a1    0\n    a2    1\n    Length: 2, dtype: int64 \n    ```", "```py\n    In [18]: s = pd.Series([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Series\n    In [19]: s.str.split(\",\")\n    Out[19]: \n    0    [a, b]\n    1    [a, c]\n    2    [b, c]\n    Length: 3, dtype: object\n\n    # return DataFrame\n    In [20]: s.str.split(\",\", expand=True)\n    Out[20]: \n     0  1\n    0  a  b\n    1  a  c\n    2  b  c\n\n    [3 rows x 2 columns]\n\n    In [21]: idx = pd.Index([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Index\n    In [22]: idx.str.split(\",\")\n    Out[22]: Index([['a', 'b'], ['a', 'c'], ['b', 'c']], dtype='object')\n\n    # return MultiIndex\n    In [23]: idx.str.split(\",\", expand=True)\n    Out[23]: \n    MultiIndex([('a', 'b'),\n     ('a', 'c'),\n     ('b', 'c')],\n     ) \n    ```", "```py\n    In [24]: pd.Timestamp(\"2014-08-01 09:00\") + pd.tseries.offsets.BusinessHour()\n    Out[24]: Timestamp('2014-08-01 10:00:00')\n\n    In [25]: pd.Timestamp(\"2014-08-01 07:00\") + pd.tseries.offsets.BusinessHour()\n    Out[25]: Timestamp('2014-08-01 10:00:00')\n\n    In [26]: pd.Timestamp(\"2014-08-01 16:30\") + pd.tseries.offsets.BusinessHour()\n    Out[26]: Timestamp('2014-08-04 09:30:00') \n    ```", "```py\n    In [27]: df = pd.DataFrame(np.random.randn(3, 3), columns=[\"A\", \"B\", \"C\"])\n\n    In [28]: df.drop([\"A\", \"X\"], axis=1, errors=\"ignore\")\n    Out[28]: \n     B         C\n    0 -0.706771 -1.039575\n    1 -0.424972  0.567020\n    2 -1.087401 -0.673690\n\n    [3 rows x 2 columns] \n    ```", "```py\nIn [2]: pd.Index(range(4), name='foo')\nOut[2]: Int64Index([0, 1, 2, 3], dtype='int64')\n\nIn [3]: pd.Index(range(104), name='foo')\nOut[3]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...], dtype='int64')\n\nIn [4]: pd.date_range('20130101', periods=4, name='foo', tz='US/Eastern')\nOut[4]:\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00-05:00, ..., 2013-01-04 00:00:00-05:00]\nLength: 4, Freq: D, Timezone: US/Eastern\n\nIn [5]: pd.date_range('20130101', periods=104, name='foo', tz='US/Eastern')\nOut[5]:\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00-05:00, ..., 2013-04-14 00:00:00-04:00]\nLength: 104, Freq: D, Timezone: US/Eastern \n```", "```py\nIn [29]: pd.set_option(\"display.width\", 80)\n\nIn [30]: pd.Index(range(4), name=\"foo\")\nOut[30]: RangeIndex(start=0, stop=4, step=1, name='foo')\n\nIn [31]: pd.Index(range(30), name=\"foo\")\nOut[31]: RangeIndex(start=0, stop=30, step=1, name='foo')\n\nIn [32]: pd.Index(range(104), name=\"foo\")\nOut[32]: RangeIndex(start=0, stop=104, step=1, name='foo')\n\nIn [33]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"], ordered=True, name=\"foobar\")\nOut[33]: CategoricalIndex(['a', 'bb', 'ccc', 'dddd'], categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar')\n\nIn [34]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"] * 10, ordered=True, name=\"foobar\")\nOut[34]: \nCategoricalIndex(['a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a',\n 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb',\n 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc',\n 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd',\n 'a', 'bb', 'ccc', 'dddd'],\n categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar')\n\nIn [35]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"] * 100, ordered=True, name=\"foobar\")\nOut[35]: \nCategoricalIndex(['a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a',\n 'bb',\n ...\n 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc',\n 'dddd'],\n categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar', length=400)\n\nIn [36]: pd.date_range(\"20130101\", periods=4, name=\"foo\", tz=\"US/Eastern\")\nOut[36]: \nDatetimeIndex(['2013-01-01 00:00:00-05:00', '2013-01-02 00:00:00-05:00',\n '2013-01-03 00:00:00-05:00', '2013-01-04 00:00:00-05:00'],\n dtype='datetime64[ns, US/Eastern]', name='foo', freq='D')\n\nIn [37]: pd.date_range(\"20130101\", periods=25, freq=\"D\")\nOut[37]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08',\n '2013-01-09', '2013-01-10', '2013-01-11', '2013-01-12',\n '2013-01-13', '2013-01-14', '2013-01-15', '2013-01-16',\n '2013-01-17', '2013-01-18', '2013-01-19', '2013-01-20',\n '2013-01-21', '2013-01-22', '2013-01-23', '2013-01-24',\n '2013-01-25'],\n dtype='datetime64[ns]', freq='D')\n\nIn [38]: pd.date_range(\"20130101\", periods=104, name=\"foo\", tz=\"US/Eastern\")\nOut[38]: \nDatetimeIndex(['2013-01-01 00:00:00-05:00', '2013-01-02 00:00:00-05:00',\n '2013-01-03 00:00:00-05:00', '2013-01-04 00:00:00-05:00',\n '2013-01-05 00:00:00-05:00', '2013-01-06 00:00:00-05:00',\n '2013-01-07 00:00:00-05:00', '2013-01-08 00:00:00-05:00',\n '2013-01-09 00:00:00-05:00', '2013-01-10 00:00:00-05:00',\n ...\n '2013-04-05 00:00:00-04:00', '2013-04-06 00:00:00-04:00',\n '2013-04-07 00:00:00-04:00', '2013-04-08 00:00:00-04:00',\n '2013-04-09 00:00:00-04:00', '2013-04-10 00:00:00-04:00',\n '2013-04-11 00:00:00-04:00', '2013-04-12 00:00:00-04:00',\n '2013-04-13 00:00:00-04:00', '2013-04-14 00:00:00-04:00'],\n dtype='datetime64[ns, US/Eastern]', name='foo', length=104, freq='D') \n```", "```py\nIn [1]: df = pd.DataFrame({'A': np.arange(6),\n ...:                   'B': pd.Series(list('aabbca'))\n ...:                          .astype('category', categories=list('cab'))\n ...:                   })\n ...:\n\nIn [2]: df\nOut[2]:\n A  B\n0  0  a\n1  1  a\n2  2  b\n3  3  b\n4  4  c\n5  5  a\n\nIn [3]: df.dtypes\nOut[3]:\nA       int64\nB    category\ndtype: object\n\nIn [4]: df.B.cat.categories\nOut[4]: Index(['c', 'a', 'b'], dtype='object') \n```", "```py\nIn [5]: df2 = df.set_index('B')\n\nIn [6]: df2.index\nOut[6]: CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [7]: df2.loc['a']\nOut[7]:\n A\nB\na  0\na  1\na  5 \n```", "```py\nIn [8]: df2.loc['a'].index\nOut[8]: CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [9]: df2.sort_index()\nOut[9]:\n A\nB\nc  4\na  0\na  1\na  5\nb  2\nb  3 \n```", "```py\nIn [10]: df2.groupby(level=0).sum()\nOut[10]:\n A\nB\nc  4\na  6\nb  5\n\nIn [11]: df2.groupby(level=0).sum().index\nOut[11]: CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [12]: df2.reindex(['a', 'e'])\nOut[12]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [13]: df2.reindex(['a', 'e']).index\nOut[13]: pd.Index(['a', 'a', 'a', 'e'], dtype='object', name='B')\n\nIn [14]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde')))\nOut[14]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [15]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde'))).index\nOut[15]: pd.CategoricalIndex(['a', 'a', 'a', 'e'],\n categories=['a', 'b', 'c', 'd', 'e'],\n ordered=False, name='B',\n dtype='category') \n```", "```py\nIn [1]: example_series = pd.Series([0, 1, 2, 3, 4, 5])\n\n# When no arguments are passed, returns 1\nIn [2]: example_series.sample()\nOut[2]: \n3    3\nLength: 1, dtype: int64\n\n# One may specify either a number of rows:\nIn [3]: example_series.sample(n=3)\nOut[3]: \n2    2\n1    1\n0    0\nLength: 3, dtype: int64\n\n# Or a fraction of the rows:\nIn [4]: example_series.sample(frac=0.5)\nOut[4]: \n1    1\n5    5\n3    3\nLength: 3, dtype: int64\n\n# weights are accepted.\nIn [5]: example_weights = [0, 0, 0.2, 0.2, 0.2, 0.4]\n\nIn [6]: example_series.sample(n=3, weights=example_weights)\nOut[6]: \n2    2\n4    4\n3    3\nLength: 3, dtype: int64\n\n# weights will also be normalized if they do not sum to one,\n# and missing values will be treated as zeros.\nIn [7]: example_weights2 = [0.5, 0, 0, 0, None, np.nan]\n\nIn [8]: example_series.sample(n=1, weights=example_weights2)\nOut[8]: \n0    0\nLength: 1, dtype: int64 \n```", "```py\nIn [9]: df = pd.DataFrame({\"col1\": [9, 8, 7, 6], \"weight_column\": [0.5, 0.4, 0.1, 0]})\n\nIn [10]: df.sample(n=3, weights=\"weight_column\")\nOut[10]: \n col1  weight_column\n0     9            0.5\n1     8            0.4\n2     7            0.1\n\n[3 rows x 2 columns] \n```", "```py\n    In [11]: idx = pd.Index([\" jack\", \"jill \", \" jesse \", \"frank\"])\n\n    In [12]: idx.str.strip()\n    Out[12]: Index(['jack', 'jill', 'jesse', 'frank'], dtype='object') \n    ```", "```py\n    In [13]: idx = pd.Index([\"a1\", \"a2\", \"b1\", \"b2\"])\n\n    In [14]: s = pd.Series(range(4), index=idx)\n\n    In [15]: s\n    Out[15]: \n    a1    0\n    a2    1\n    b1    2\n    b2    3\n    Length: 4, dtype: int64\n\n    In [16]: idx.str.startswith(\"a\")\n    Out[16]: array([ True,  True, False, False])\n\n    In [17]: s[s.index.str.startswith(\"a\")]\n    Out[17]: \n    a1    0\n    a2    1\n    Length: 2, dtype: int64 \n    ```", "```py\n    In [18]: s = pd.Series([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Series\n    In [19]: s.str.split(\",\")\n    Out[19]: \n    0    [a, b]\n    1    [a, c]\n    2    [b, c]\n    Length: 3, dtype: object\n\n    # return DataFrame\n    In [20]: s.str.split(\",\", expand=True)\n    Out[20]: \n     0  1\n    0  a  b\n    1  a  c\n    2  b  c\n\n    [3 rows x 2 columns]\n\n    In [21]: idx = pd.Index([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Index\n    In [22]: idx.str.split(\",\")\n    Out[22]: Index([['a', 'b'], ['a', 'c'], ['b', 'c']], dtype='object')\n\n    # return MultiIndex\n    In [23]: idx.str.split(\",\", expand=True)\n    Out[23]: \n    MultiIndex([('a', 'b'),\n     ('a', 'c'),\n     ('b', 'c')],\n     ) \n    ```", "```py\n    In [24]: pd.Timestamp(\"2014-08-01 09:00\") + pd.tseries.offsets.BusinessHour()\n    Out[24]: Timestamp('2014-08-01 10:00:00')\n\n    In [25]: pd.Timestamp(\"2014-08-01 07:00\") + pd.tseries.offsets.BusinessHour()\n    Out[25]: Timestamp('2014-08-01 10:00:00')\n\n    In [26]: pd.Timestamp(\"2014-08-01 16:30\") + pd.tseries.offsets.BusinessHour()\n    Out[26]: Timestamp('2014-08-04 09:30:00') \n    ```", "```py\n    In [27]: df = pd.DataFrame(np.random.randn(3, 3), columns=[\"A\", \"B\", \"C\"])\n\n    In [28]: df.drop([\"A\", \"X\"], axis=1, errors=\"ignore\")\n    Out[28]: \n     B         C\n    0 -0.706771 -1.039575\n    1 -0.424972  0.567020\n    2 -1.087401 -0.673690\n\n    [3 rows x 2 columns] \n    ```", "```py\nIn [1]: df = pd.DataFrame({'A': np.arange(6),\n ...:                   'B': pd.Series(list('aabbca'))\n ...:                          .astype('category', categories=list('cab'))\n ...:                   })\n ...:\n\nIn [2]: df\nOut[2]:\n A  B\n0  0  a\n1  1  a\n2  2  b\n3  3  b\n4  4  c\n5  5  a\n\nIn [3]: df.dtypes\nOut[3]:\nA       int64\nB    category\ndtype: object\n\nIn [4]: df.B.cat.categories\nOut[4]: Index(['c', 'a', 'b'], dtype='object') \n```", "```py\nIn [5]: df2 = df.set_index('B')\n\nIn [6]: df2.index\nOut[6]: CategoricalIndex(['a', 'a', 'b', 'b', 'c', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [7]: df2.loc['a']\nOut[7]:\n A\nB\na  0\na  1\na  5 \n```", "```py\nIn [8]: df2.loc['a'].index\nOut[8]: CategoricalIndex(['a', 'a', 'a'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [9]: df2.sort_index()\nOut[9]:\n A\nB\nc  4\na  0\na  1\na  5\nb  2\nb  3 \n```", "```py\nIn [10]: df2.groupby(level=0).sum()\nOut[10]:\n A\nB\nc  4\na  6\nb  5\n\nIn [11]: df2.groupby(level=0).sum().index\nOut[11]: CategoricalIndex(['c', 'a', 'b'], categories=['c', 'a', 'b'], ordered=False, name='B', dtype='category') \n```", "```py\nIn [12]: df2.reindex(['a', 'e'])\nOut[12]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [13]: df2.reindex(['a', 'e']).index\nOut[13]: pd.Index(['a', 'a', 'a', 'e'], dtype='object', name='B')\n\nIn [14]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde')))\nOut[14]:\n A\nB\na  0.0\na  1.0\na  5.0\ne  NaN\n\nIn [15]: df2.reindex(pd.Categorical(['a', 'e'], categories=list('abcde'))).index\nOut[15]: pd.CategoricalIndex(['a', 'a', 'a', 'e'],\n categories=['a', 'b', 'c', 'd', 'e'],\n ordered=False, name='B',\n dtype='category') \n```", "```py\nIn [1]: example_series = pd.Series([0, 1, 2, 3, 4, 5])\n\n# When no arguments are passed, returns 1\nIn [2]: example_series.sample()\nOut[2]: \n3    3\nLength: 1, dtype: int64\n\n# One may specify either a number of rows:\nIn [3]: example_series.sample(n=3)\nOut[3]: \n2    2\n1    1\n0    0\nLength: 3, dtype: int64\n\n# Or a fraction of the rows:\nIn [4]: example_series.sample(frac=0.5)\nOut[4]: \n1    1\n5    5\n3    3\nLength: 3, dtype: int64\n\n# weights are accepted.\nIn [5]: example_weights = [0, 0, 0.2, 0.2, 0.2, 0.4]\n\nIn [6]: example_series.sample(n=3, weights=example_weights)\nOut[6]: \n2    2\n4    4\n3    3\nLength: 3, dtype: int64\n\n# weights will also be normalized if they do not sum to one,\n# and missing values will be treated as zeros.\nIn [7]: example_weights2 = [0.5, 0, 0, 0, None, np.nan]\n\nIn [8]: example_series.sample(n=1, weights=example_weights2)\nOut[8]: \n0    0\nLength: 1, dtype: int64 \n```", "```py\nIn [9]: df = pd.DataFrame({\"col1\": [9, 8, 7, 6], \"weight_column\": [0.5, 0.4, 0.1, 0]})\n\nIn [10]: df.sample(n=3, weights=\"weight_column\")\nOut[10]: \n col1  weight_column\n0     9            0.5\n1     8            0.4\n2     7            0.1\n\n[3 rows x 2 columns] \n```", "```py\n    In [11]: idx = pd.Index([\" jack\", \"jill \", \" jesse \", \"frank\"])\n\n    In [12]: idx.str.strip()\n    Out[12]: Index(['jack', 'jill', 'jesse', 'frank'], dtype='object') \n    ```", "```py\n    In [13]: idx = pd.Index([\"a1\", \"a2\", \"b1\", \"b2\"])\n\n    In [14]: s = pd.Series(range(4), index=idx)\n\n    In [15]: s\n    Out[15]: \n    a1    0\n    a2    1\n    b1    2\n    b2    3\n    Length: 4, dtype: int64\n\n    In [16]: idx.str.startswith(\"a\")\n    Out[16]: array([ True,  True, False, False])\n\n    In [17]: s[s.index.str.startswith(\"a\")]\n    Out[17]: \n    a1    0\n    a2    1\n    Length: 2, dtype: int64 \n    ```", "```py\n    In [18]: s = pd.Series([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Series\n    In [19]: s.str.split(\",\")\n    Out[19]: \n    0    [a, b]\n    1    [a, c]\n    2    [b, c]\n    Length: 3, dtype: object\n\n    # return DataFrame\n    In [20]: s.str.split(\",\", expand=True)\n    Out[20]: \n     0  1\n    0  a  b\n    1  a  c\n    2  b  c\n\n    [3 rows x 2 columns]\n\n    In [21]: idx = pd.Index([\"a,b\", \"a,c\", \"b,c\"])\n\n    # return Index\n    In [22]: idx.str.split(\",\")\n    Out[22]: Index([['a', 'b'], ['a', 'c'], ['b', 'c']], dtype='object')\n\n    # return MultiIndex\n    In [23]: idx.str.split(\",\", expand=True)\n    Out[23]: \n    MultiIndex([('a', 'b'),\n     ('a', 'c'),\n     ('b', 'c')],\n     ) \n    ```", "```py\n    In [24]: pd.Timestamp(\"2014-08-01 09:00\") + pd.tseries.offsets.BusinessHour()\n    Out[24]: Timestamp('2014-08-01 10:00:00')\n\n    In [25]: pd.Timestamp(\"2014-08-01 07:00\") + pd.tseries.offsets.BusinessHour()\n    Out[25]: Timestamp('2014-08-01 10:00:00')\n\n    In [26]: pd.Timestamp(\"2014-08-01 16:30\") + pd.tseries.offsets.BusinessHour()\n    Out[26]: Timestamp('2014-08-04 09:30:00') \n    ```", "```py\n    In [27]: df = pd.DataFrame(np.random.randn(3, 3), columns=[\"A\", \"B\", \"C\"])\n\n    In [28]: df.drop([\"A\", \"X\"], axis=1, errors=\"ignore\")\n    Out[28]: \n     B         C\n    0 -0.706771 -1.039575\n    1 -0.424972  0.567020\n    2 -1.087401 -0.673690\n\n    [3 rows x 2 columns] \n    ```", "```py\nIn [2]: pd.Index(range(4), name='foo')\nOut[2]: Int64Index([0, 1, 2, 3], dtype='int64')\n\nIn [3]: pd.Index(range(104), name='foo')\nOut[3]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...], dtype='int64')\n\nIn [4]: pd.date_range('20130101', periods=4, name='foo', tz='US/Eastern')\nOut[4]:\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00-05:00, ..., 2013-01-04 00:00:00-05:00]\nLength: 4, Freq: D, Timezone: US/Eastern\n\nIn [5]: pd.date_range('20130101', periods=104, name='foo', tz='US/Eastern')\nOut[5]:\n<class 'pandas.tseries.index.DatetimeIndex'>\n[2013-01-01 00:00:00-05:00, ..., 2013-04-14 00:00:00-04:00]\nLength: 104, Freq: D, Timezone: US/Eastern \n```", "```py\nIn [29]: pd.set_option(\"display.width\", 80)\n\nIn [30]: pd.Index(range(4), name=\"foo\")\nOut[30]: RangeIndex(start=0, stop=4, step=1, name='foo')\n\nIn [31]: pd.Index(range(30), name=\"foo\")\nOut[31]: RangeIndex(start=0, stop=30, step=1, name='foo')\n\nIn [32]: pd.Index(range(104), name=\"foo\")\nOut[32]: RangeIndex(start=0, stop=104, step=1, name='foo')\n\nIn [33]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"], ordered=True, name=\"foobar\")\nOut[33]: CategoricalIndex(['a', 'bb', 'ccc', 'dddd'], categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar')\n\nIn [34]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"] * 10, ordered=True, name=\"foobar\")\nOut[34]: \nCategoricalIndex(['a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a',\n 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb',\n 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc',\n 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd',\n 'a', 'bb', 'ccc', 'dddd'],\n categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar')\n\nIn [35]: pd.CategoricalIndex([\"a\", \"bb\", \"ccc\", \"dddd\"] * 100, ordered=True, name=\"foobar\")\nOut[35]: \nCategoricalIndex(['a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a',\n 'bb',\n ...\n 'ccc', 'dddd', 'a', 'bb', 'ccc', 'dddd', 'a', 'bb', 'ccc',\n 'dddd'],\n categories=['a', 'bb', 'ccc', 'dddd'], ordered=True, dtype='category', name='foobar', length=400)\n\nIn [36]: pd.date_range(\"20130101\", periods=4, name=\"foo\", tz=\"US/Eastern\")\nOut[36]: \nDatetimeIndex(['2013-01-01 00:00:00-05:00', '2013-01-02 00:00:00-05:00',\n '2013-01-03 00:00:00-05:00', '2013-01-04 00:00:00-05:00'],\n dtype='datetime64[ns, US/Eastern]', name='foo', freq='D')\n\nIn [37]: pd.date_range(\"20130101\", periods=25, freq=\"D\")\nOut[37]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06', '2013-01-07', '2013-01-08',\n '2013-01-09', '2013-01-10', '2013-01-11', '2013-01-12',\n '2013-01-13', '2013-01-14', '2013-01-15', '2013-01-16',\n '2013-01-17', '2013-01-18', '2013-01-19', '2013-01-20',\n '2013-01-21', '2013-01-22', '2013-01-23', '2013-01-24',\n '2013-01-25'],\n dtype='datetime64[ns]', freq='D')\n\nIn [38]: pd.date_range(\"20130101\", periods=104, name=\"foo\", tz=\"US/Eastern\")\nOut[38]: \nDatetimeIndex(['2013-01-01 00:00:00-05:00', '2013-01-02 00:00:00-05:00',\n '2013-01-03 00:00:00-05:00', '2013-01-04 00:00:00-05:00',\n '2013-01-05 00:00:00-05:00', '2013-01-06 00:00:00-05:00',\n '2013-01-07 00:00:00-05:00', '2013-01-08 00:00:00-05:00',\n '2013-01-09 00:00:00-05:00', '2013-01-10 00:00:00-05:00',\n ...\n '2013-04-05 00:00:00-04:00', '2013-04-06 00:00:00-04:00',\n '2013-04-07 00:00:00-04:00', '2013-04-08 00:00:00-04:00',\n '2013-04-09 00:00:00-04:00', '2013-04-10 00:00:00-04:00',\n '2013-04-11 00:00:00-04:00', '2013-04-12 00:00:00-04:00',\n '2013-04-13 00:00:00-04:00', '2013-04-14 00:00:00-04:00'],\n dtype='datetime64[ns, US/Eastern]', name='foo', length=104, freq='D') \n```"]