- en: Ultralytics Explorer API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/datasets/explorer/api/`](https://docs.ultralytics.com/datasets/explorer/api/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Open In Colab](https://colab.research.google.com/github/ultralytics/ultralytics/blob/main/docs/en/datasets/explorer/explorer.ipynb)
    The Explorer API is a Python API for exploring your datasets. It supports filtering
    and searching your dataset using SQL queries, vector similarity search and semantic
    search.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/3VryynorQeo?start=279`](https://www.youtube.com/embed/3VryynorQeo?start=279)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Ultralytics Explorer API Overview'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Explorer depends on external libraries for some of its functionality. These
    are automatically installed on usage. To manually install these dependencies,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Embeddings table for a given dataset and model pair is only created once and
    reused. These use [LanceDB](https://lancedb.github.io/lancedb/) under the hood,
    which scales on-disk, so you can create and reuse embeddings for large datasets
    like COCO without running out of memory.
  prefs: []
  type: TYPE_NORMAL
- en: In case you want to force update the embeddings table, you can pass `force=True`
    to `create_embeddings_table` method.
  prefs: []
  type: TYPE_NORMAL
- en: You can directly access the LanceDB table object to perform advanced analysis.
    Learn more about it in the Working with Embeddings Table section
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Similarity Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarity search is a technique for finding similar images to a given image.
    It is based on the idea that similar images will have similar embeddings. Once
    the embeddings table is built, you can get run semantic search in any of the following
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a given index or list of indices in the dataset: `exp.get_similar(idx=[1,10],
    limit=10)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On any image or list of images not in the dataset: `exp.get_similar(img=["path/to/img1",
    "path/to/img2"], limit=10)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of multiple inputs, the aggregate of their embeddings is used.
  prefs: []
  type: TYPE_NORMAL
- en: You get a pandas dataframe with the `limit` number of most similar data points
    to the input, along with their distance in the embedding space. You can use this
    dataset to perform further filtering
  prefs: []
  type: TYPE_NORMAL
- en: Semantic Search
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Plotting Similar Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also plot the similar images using the `plot_similar` method. This method
    takes the same arguments as `get_similar` and plots the similar images in a grid.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting Similar Images
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Ask AI (Natural Language Querying)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This allows you to write how you want to filter your dataset using natural
    language. You don''t have to be proficient in writing SQL queries. Our AI powered
    query generator will automatically do that under the hood. For example - you can
    say - "show me 100 images with exactly one person and 2 dogs. There can be other
    objects too" and it''ll internally generate the query and show you those results.
    Note: This works using LLMs under the hood so the results are probabilistic and
    might get things wrong sometimes'
  prefs: []
  type: TYPE_NORMAL
- en: Ask AI
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3\. SQL Querying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run SQL queries on your dataset using the `sql_query` method. This method
    takes a SQL query as input and returns a pandas dataframe with the results.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Query
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Plotting SQL Query Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also plot the results of a SQL query using the `plot_sql_query` method.
    This method takes the same arguments as `sql_query` and plots the results in a
    grid.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting SQL Query Results
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Working with Embeddings Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also work with the embeddings table directly. Once the embeddings table
    is created, you can access it using the `Explorer.table`
  prefs: []
  type: TYPE_NORMAL
- en: Explorer works on [LanceDB](https://lancedb.github.io/lancedb/) tables internally.
    You can access this table directly, using `Explorer.table` object and run raw
    queries, push down pre- and post-filters, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some examples of what you can do with the table:'
  prefs: []
  type: TYPE_NORMAL
- en: Get raw Embeddings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Advanced Querying with pre- and post-filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Create Vector Index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using large datasets, you can also create a dedicated vector index for
    faster querying. This is done using the `create_index` method on LanceDB table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Find more details on the type vector indices available and parameters [here](https://lancedb.github.io/lancedb/ann_indexes/#types-of-index)
    In the future, we will add support for creating vector indices directly from Explorer
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Embeddings Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the embeddings table to perform a variety of exploratory analysis.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Similarity Index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Explorer comes with a `similarity_index` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: It tries to estimate how similar each data point is with the rest of the dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does that by counting how many image embeddings lie closer than `max_dist`
    to the current image in the generated embedding space, considering `top_k` similar
    images at a time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It returns a pandas dataframe with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`idx`: Index of the image in the dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`im_file`: Path to the image file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count`: Number of images in the dataset that are closer than `max_dist` to
    the current image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sim_im_files`: List of paths to the `count` similar images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For a given dataset, model, `max_dist` & `top_k` the similarity index once generated
    will be reused. In case, your dataset has changed, or you simply need to regenerate
    the similarity index, you can pass `force=True`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarity Index
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use similarity index to build custom conditions to filter out the dataset.
    For example, you can filter out images that are not similar to any other image
    in the dataset using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Visualize Embedding Space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also visualize the embedding space using the plotting tool of your
    choice. For example here is a simple example using matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Start creating your own CV dataset exploration reports using the Explorer API.
    For inspiration, check out the
  prefs: []
  type: TYPE_NORMAL
- en: Apps Built Using Ultralytics Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try our GUI Demo based on Explorer API
  prefs: []
  type: TYPE_NORMAL
- en: Coming Soon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[ ] Merge specific labels from datasets. Example - Import all `person` labels
    from COCO and `car` labels from Cityscapes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] Remove images that have a higher similarity index than the given threshold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] Automatically persist new datasets after merging/removing entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ ] Advanced Dataset Visualizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the Ultralytics Explorer API used for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Ultralytics Explorer API is designed for comprehensive dataset exploration.
    It allows users to filter and search datasets using SQL queries, vector similarity
    search, and semantic search. This powerful Python API can handle large datasets,
    making it ideal for various computer vision tasks using Ultralytics models.
  prefs: []
  type: TYPE_NORMAL
- en: How do I install the Ultralytics Explorer API?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install the Ultralytics Explorer API along with its dependencies, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will automatically install all necessary external libraries for the Explorer
    API functionality. For additional setup details, refer to the installation section
    of our documentation.
  prefs: []
  type: TYPE_NORMAL
- en: How can I use the Ultralytics Explorer API for similarity search?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the Ultralytics Explorer API to perform similarity searches by
    creating an embeddings table and querying it for similar images. Here''s a basic
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more details, please visit the Similarity Search section.
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of using LanceDB with Ultralytics Explorer?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LanceDB, used under the hood by Ultralytics Explorer, provides scalable, on-disk
    embeddings tables. This ensures that you can create and reuse embeddings for large
    datasets like COCO without running out of memory. These tables are only created
    once and can be reused, enhancing efficiency in data handling.
  prefs: []
  type: TYPE_NORMAL
- en: How does the Ask AI feature work in the Ultralytics Explorer API?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ask AI feature allows users to filter datasets using natural language queries.
    This feature leverages LLMs to convert these queries into SQL queries behind the
    scenes. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For more examples, check out the Ask AI section.
  prefs: []
  type: TYPE_NORMAL
