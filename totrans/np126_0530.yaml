- en: numpy.genfromtxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.genfromtxt.html](https://numpy.org/doc/1.26/reference/generated/numpy.genfromtxt.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Load data from a text file, with missing values handled as specified.
  prefs: []
  type: TYPE_NORMAL
- en: Each line past the first *skip_header* lines is split at the *delimiter* character,
    and characters following the *comments* character are discarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fname**file, str, pathlib.Path, list of str, generator'
  prefs: []
  type: TYPE_NORMAL
- en: File, filename, list, or generator to read. If the filename extension is `.gz`
    or `.bz2`, the file is first decompressed. Note that generators must return bytes
    or strings. The strings in a list or produced by a generator are treated as lines.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the resulting array. If None, the dtypes will be determined by
    the contents of each column, individually.
  prefs: []
  type: TYPE_NORMAL
- en: '**comments**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The character used to indicate the start of a comment. All the characters occurring
    on a line after a comment are discarded.
  prefs: []
  type: TYPE_NORMAL
- en: '**delimiter**str, int, or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The string used to separate values. By default, any consecutive whitespaces
    act as delimiter. An integer or sequence of integers can also be provided as width(s)
    of each field.
  prefs: []
  type: TYPE_NORMAL
- en: '**skiprows**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '*skiprows* was removed in numpy 1.10\. Please use *skip_header* instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**skip_header**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of lines to skip at the beginning of the file.
  prefs: []
  type: TYPE_NORMAL
- en: '**skip_footer**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of lines to skip at the end of the file.
  prefs: []
  type: TYPE_NORMAL
- en: '**converters**variable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The set of functions that convert the data of a column to a value. The converters
    can also be used to provide a default value for missing data: `converters = {3:
    lambda s: float(s or 0)}`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**missing**variable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '*missing* was removed in numpy 1.10\. Please use *missing_values* instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**missing_values**variable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The set of strings corresponding to missing data.
  prefs: []
  type: TYPE_NORMAL
- en: '**filling_values**variable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The set of values to be used as default when the data are missing.
  prefs: []
  type: TYPE_NORMAL
- en: '**usecols**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Which columns to read, with 0 being the first. For example, `usecols = (1, 4,
    5)` will extract the 2nd, 5th and 6th columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**names**{None, True, str, sequence}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *names* is True, the field names are read from the first line after the first
    *skip_header* lines. This line can optionally be preceded by a comment delimiter.
    If *names* is a sequence or a single-string of comma-separated names, the names
    will be used to define the field names in a structured dtype. If *names* is None,
    the names of the dtype fields will be used, if any.
  prefs: []
  type: TYPE_NORMAL
- en: '**excludelist**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of names to exclude. This list is appended to the default list [‘return’,’file’,’print’].
    Excluded names are appended with an underscore: for example, *file* would become
    *file_*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**deletechars**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A string combining invalid characters that must be deleted from the names.
  prefs: []
  type: TYPE_NORMAL
- en: '**defaultfmt**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A format used to define default field names, such as “f%i” or “f_%02i”.
  prefs: []
  type: TYPE_NORMAL
- en: '**autostrip**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to automatically strip white spaces from the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**replace_space**char, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Character(s) used in replacement of white spaces in the variable names. By default,
    use a ‘_’.
  prefs: []
  type: TYPE_NORMAL
- en: '**case_sensitive**{True, False, ‘upper’, ‘lower’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, field names are case sensitive. If False or ‘upper’, field names are
    converted to upper case. If ‘lower’, field names are converted to lower case.
  prefs: []
  type: TYPE_NORMAL
- en: '**unpack**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the returned array is transposed, so that arguments may be unpacked
    using `x, y, z = genfromtxt(...)`. When used with a structured data-type, arrays
    are returned for each field. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**usemask**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a masked array. If False, return a regular array.
  prefs: []
  type: TYPE_NORMAL
- en: '**loose**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, do not raise errors for invalid values.
  prefs: []
  type: TYPE_NORMAL
- en: '**invalid_raise**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, an exception is raised if an inconsistency is detected in the number
    of columns. If False, a warning is emitted and the offending lines are skipped.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_rows**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of rows to read. Must not be used with skip_footer at the
    same time. If given, the value must be at least 1\. Default is to read the entire
    file.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding used to decode the inputfile. Does not apply when *fname* is a file
    object. The special value ‘bytes’ enables backward compatibility workarounds that
    ensure that you receive byte arrays when possible and passes latin1 encoded strings
    to converters. Override this value to receive unicode arrays and pass strings
    as input to converters. If set to None the system default is used. The default
    value is ‘bytes’.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndmin**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Same parameter as [`loadtxt`](numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.23.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Data read from the text file. If *usemask* is True, this is a masked array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.loadtxt`](numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")'
  prefs: []
  type: TYPE_NORMAL
- en: equivalent function when no data is missing.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When spaces are used as delimiters, or when no delimiter has been given as input,
    there should not be any missing data between two fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the variables are named (either by a flexible dtype or with *names*), there
    must not be any header in the file (else a ValueError exception is raised).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual values are not stripped of spaces by default. When using a custom
    converter, make sure the function does remove spaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy User Guide, section [I/O with NumPy](https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Comma delimited file with mixed dtype
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using dtype = None
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Specifying dtype and names
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An example with fixed-width columns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: An example to show comments
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
