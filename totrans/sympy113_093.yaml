- en: PDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/solvers/pde.html](https://docs.sympy.org/latest/modules/solvers/pde.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## User Functions'
  prefs: []
  type: TYPE_NORMAL
- en: These are functions that are imported into the global namespace with `from sympy
    import *`. They are intended for user use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Separate variables in partial differential equation either by additive or multiplicative
    separation approach. It tries to rewrite an equation so that one of the specified
    variables occurs on a different side of the equation than the others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**eq** – Partial differential equation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fun** – Original function F(x, y, z)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sep** – List of separated functions [X(x), u(y, z)]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strategy** – Separation strategy. You can choose between additive separation
    (‘add’) and multiplicative separation (‘mul’) which is default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pde_separate_add`](#sympy.solvers.pde.pde_separate_add "sympy.solvers.pde.pde_separate_add"),
    [`pde_separate_mul`](#sympy.solvers.pde.pde_separate_mul "sympy.solvers.pde.pde_separate_mul")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Helper function for searching additive separable solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider an equation of two independent variables x, y and a dependent variable
    w, we look for the product of two functions depending on different arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: \(w(x, y, z) = X(x) + y(y, z)\)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Helper function for searching multiplicative separable solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider an equation of two independent variables x, y and a dependent variable
    w, we look for the product of two functions depending on different arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: \(w(x, y, z) = X(x)*u(y, z)\)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Solves any (supported) kind of partial differential equation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: pdsolve(eq, f(x,y), hint) -> Solve partial differential equation eq for function
    f(x,y), using method hint.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Details**'
  prefs: []
  type: TYPE_NORMAL
- en: '`eq` can be any supported partial differential equation (see'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the pde docstring for supported methods). This can either be an Equality, or
    an expression, which is assumed to be equal to 0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`f(x,y)` is a function of two variables whose derivatives in that'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: variable make up the partial differential equation. In many cases it is not
    necessary to provide this; it will be autodetected (and an error raised if it
    could not be detected).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`hint` is the solving method that you want pdsolve to use. Use'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: classify_pde(eq, f(x,y)) to get all of the possible hints for a PDE. The default
    hint, ‘default’, will use whatever hint is returned first by classify_pde(). See
    Hints below for more options that you can use for hint.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`solvefun` is the convention used for arbitrary functions returned'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: by the PDE solver. If not set by the user, it is set by default to be F.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Hints**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from the various solving methods, there are also some meta-hints that
    you can pass to pdsolve():'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '“default”:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This uses whatever hint is returned first by classify_pde(). This is the default
    argument to pdsolve().
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '“all”:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To make pdsolve apply all relevant classification hints, use pdsolve(PDE, func,
    hint=”all”). This will return a dictionary of hint:solution terms. If a hint causes
    pdsolve to raise the NotImplementedError, value of that hint’s key will be the
    exception object raised. The dictionary will also include some special keys:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'order: The order of the PDE. See also ode_order() in deutils.py'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default: The solution that would be returned by default. This is the one produced
    by the hint that appears first in the tuple returned by classify_pde().'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '“all_Integral”:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the same as “all”, except if a hint also has a corresponding “_Integral”
    hint, it only returns the “_Integral” hint. This is useful if “all” causes pdsolve()
    to hang because of a difficult or impossible integral. This meta-hint will also
    be much faster than “all”, because integrate() is an expensive routine.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also the classify_pde() docstring for more info on hints, and the pde docstring
    for a list of all supported hints.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Tips**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can declare the derivative of an unknown function this way:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See test_pde.py for many tests, which serves also as a set of examples for how
    to use pdsolve().
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pdsolve always returns an Equality class (except for the case when the hint
    is “all” or “all_Integral”). Note that it is not possible to get an explicit solution
    for f(x, y) as in the case of ODE’s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do help(pde.pde_hintname) to get help more information on a specific hint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Returns a tuple of possible pdsolve() classifications for a PDE.
  prefs: []
  type: TYPE_NORMAL
- en: The tuple is ordered so that first item is the classification that pdsolve()
    uses to solve the PDE by default. In general, classifications near the beginning
    of the list will produce better solutions faster than those near the end, though
    there are always exceptions. To make pdsolve use a different classification, use
    pdsolve(PDE, func, hint=<classification>). See also the pdsolve() docstring for
    different meta-hints you can use.
  prefs: []
  type: TYPE_NORMAL
- en: If `dict` is true, classify_pde() will return a dictionary of hint:match expression
    terms. This is intended for internal use by pdsolve(). Note that because dictionaries
    are ordered arbitrarily, this will most likely not be in the same order as the
    tuple.
  prefs: []
  type: TYPE_NORMAL
- en: You can get help on different hints by doing help(pde.pde_hintname), where hintname
    is the name of the hint without “_Integral”.
  prefs: []
  type: TYPE_NORMAL
- en: See sympy.pde.allhints or the sympy.pde docstring for a list of all supported
    hints that can be returned from classify_pde.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Checks if the given solution satisfies the partial differential equation.
  prefs: []
  type: TYPE_NORMAL
- en: pde is the partial differential equation which can be given in the form of an
    equation or an expression. sol is the solution for which the pde is to be checked.
    This can also be given in an equation or an expression form. If the function is
    not provided, the helper function _preprocess from deutils is used to identify
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: If a sequence of solutions is passed, the same sort of container will be used
    to return the result for each solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are currently being implemented to check if the solution
    satisfies the PDE:'
  prefs: []
  type: TYPE_NORMAL
- en: Directly substitute the solution in the PDE and check. If the solution has not
    been solved for f, then it will solve for f provided solve_for_func has not been
    set to False.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: If the solution satisfies the PDE, then a tuple (True, 0) is returned. Otherwise
    a tuple (False, expr) where expr is the value obtained after substituting the
    solution in the PDE. However if a known solution returns False, it may be due
    to the inability of doit() to simplify it to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Hint Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These functions are meant for internal use. However they contain useful information
    on the various solving methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Solves a first order linear homogeneous partial differential equation with constant
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of this partial differential equation is
  prefs: []
  type: TYPE_NORMAL
- en: \[a \frac{\partial f(x,y)}{\partial x} + b \frac{\partial f(x,y)}{\partial y}
    + c f(x,y) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(a\), \(b\) and \(c\) are constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general solution is of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x, y) = F(- a y + b x ) e^{- \frac{c (a x + b y)}{a^2 + b^2}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'and can be found in SymPy with `pdsolve`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Viktor Grigoryan, “Partial Differential Equations” Math 124A - Fall 2010, pp.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Solves a first order linear partial differential equation with constant coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of this partial differential equation is
  prefs: []
  type: TYPE_NORMAL
- en: \[a \frac{\partial f(x,y)}{\partial x} + b \frac{\partial f(x,y)}{\partial y}
    + c f(x,y) = G(x,y)\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(a\), \(b\) and \(c\) are constants and \(G(x, y)\) can be an arbitrary
    function in \(x\) and \(y\).
  prefs: []
  type: TYPE_NORMAL
- en: 'The general solution of the PDE is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}f(x, y) = \left. \left[F(\eta) + \frac{1}{a^2 + b^2} \int\limits^{a
    x + b y} G\left(\frac{a \xi + b \eta}{a^2 + b^2}, \frac{- a \eta + b \xi}{a^2
    + b^2} \right) e^{\frac{c \xi}{a^2 + b^2}}\, d\xi\right] e^{- \frac{c \xi}{a^2
    + b^2}} \right|_{\substack{\eta=- a y + b x\\ \xi=a x + b y }}\, ,\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where \(F(\eta)\) is an arbitrary single-valued function. The solution can
    be found in SymPy with `pdsolve`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Viktor Grigoryan, “Partial Differential Equations” Math 124A - Fall 2010, pp.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Solves a first order linear partial differential equation with variable coefficients.
    The general form of this partial differential equation is
  prefs: []
  type: TYPE_NORMAL
- en: \[a(x, y) \frac{\partial f(x, y)}{\partial x} + b(x, y) \frac{\partial f(x,
    y)}{\partial y} + c(x, y) f(x, y) = G(x, y)\]
  prefs: []
  type: TYPE_NORMAL
- en: 'where \(a(x, y)\), \(b(x, y)\), \(c(x, y)\) and \(G(x, y)\) are arbitrary functions
    in \(x\) and \(y\). This PDE is converted into an ODE by making the following
    transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(\xi\) as \(x\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\eta\) as the constant in the solution to the differential equation \(\frac{dy}{dx}
    = -\frac{b}{a}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the previous substitutions reduces it to the linear ODE
  prefs: []
  type: TYPE_NORMAL
- en: \[a(\xi, \eta)\frac{du}{d\xi} + c(\xi, \eta)u - G(\xi, \eta) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: which can be solved using `dsolve`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Viktor Grigoryan, “Partial Differential Equations” Math 124A - Fall 2010, pp.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Information on the pde module'
  prefs: []
  type: TYPE_NORMAL
- en: This module contains pdsolve() and different helper functions that it uses.
    It is heavily inspired by the ode module and hence the basic infrastructure remains
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions in this module**'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the user functions in this module:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pdsolve() - Solves PDE’s
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: classify_pde() - Classifies PDEs into possible hints for dsolve().
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pde_separate() - Separate variables in partial differential equation either
    by
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: additive or multiplicative separation approach.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'These are the helper functions in this module:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pde_separate_add() - Helper function for searching additive separable solutions.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pde_separate_mul() - Helper function for searching multiplicative
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: separable solutions.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Currently implemented solver methods**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are implemented for solving partial differential equations.
    See the docstrings of the various pde_hint() functions for more information on
    each (run help(pde)):'
  prefs: []
  type: TYPE_NORMAL
- en: 1st order linear homogeneous partial differential equations with constant coefficients.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 1st order linear general partial differential equations with constant coefficients.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 1st order linear partial differential equations with variable coefficients.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
