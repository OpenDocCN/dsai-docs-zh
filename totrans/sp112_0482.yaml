- en: scipy.optimize.fmin_ncg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Unconstrained minimization of a function using the Newton-CG method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable `f(x, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Initial guess.
  prefs: []
  type: TYPE_NORMAL
- en: '**fprime**callable `f''(x, *args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient of f.
  prefs: []
  type: TYPE_NORMAL
- en: '**fhess_p**callable `fhess_p(x, p, *args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Function which computes the Hessian of f times an arbitrary vector, p.
  prefs: []
  type: TYPE_NORMAL
- en: '**fhess**callable `fhess(x, *args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Function to compute the Hessian matrix of f.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to f, fprime, fhess_p, and fhess (the same set of extra
    arguments is supplied to all of these functions).
  prefs: []
  type: TYPE_NORMAL
- en: '**epsilon**float or ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If fhess is approximated, use this value for the step size.
  prefs: []
  type: TYPE_NORMAL
- en: '**callback**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An optional user-supplied function which is called after each iteration. Called
    as callback(xk), where xk is the current parameter vector.
  prefs: []
  type: TYPE_NORMAL
- en: '**avextol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Convergence is assumed when the average relative error in the minimizer falls
    below this amount.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return the optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, print convergence message.
  prefs: []
  type: TYPE_NORMAL
- en: '**retall**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return a list of results at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '**c1**float, default: 1e-4'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for Armijo condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**c2**float, default: 0.9'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for curvature condition rule
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters which minimize f, i.e., `f(xopt) == fopt`.
  prefs: []
  type: TYPE_NORMAL
- en: '**fopt**float'
  prefs: []
  type: TYPE_NORMAL
- en: Value of the function at xopt, i.e., `fopt = f(xopt)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**fcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of function calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**gcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of gradient calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**hcalls**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of Hessian calls made.
  prefs: []
  type: TYPE_NORMAL
- en: '**warnflag**int'
  prefs: []
  type: TYPE_NORMAL
- en: 'Warnings generated by the algorithm. 1 : Maximum number of iterations exceeded.
    2 : Line search failure (precision loss). 3 : NaN result encountered.'
  prefs: []
  type: TYPE_NORMAL
- en: '**allvecs**list'
  prefs: []
  type: TYPE_NORMAL
- en: The result at each iteration, if retall is True (see below).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for multivariate functions. See the ‘Newton-CG’
    *method* in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Only one of *fhess_p* or *fhess* need to be given. If *fhess* is provided, then
    *fhess_p* will be ignored. If neither *fhess* nor *fhess_p* is provided, then
    the hessian product will be approximated using finite differences on *fprime*.
    *fhess_p* must compute the hessian times an arbitrary vector. If it is not given,
    finite-differences on *fprime* are used to compute it.
  prefs: []
  type: TYPE_NORMAL
- en: Newton-CG methods are also called truncated Newton methods. This function differs
    from scipy.optimize.fmin_tnc because
  prefs: []
  type: TYPE_NORMAL
- en: scipy.optimize.fmin_ncg is written purely in Python using NumPy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and scipy while scipy.optimize.fmin_tnc calls a C function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: scipy.optimize.fmin_ncg is only for unconstrained minimization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: while scipy.optimize.fmin_tnc is for unconstrained minimization or box constrained
    minimization. (Box constraints give lower and upper bounds for each variable separately.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Parameters *c1* and *c2* must satisfy `0 < c1 < c2 < 1`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Wright & Nocedal, ‘Numerical Optimization’, 1999, p. 140.
  prefs: []
  type: TYPE_NORMAL
