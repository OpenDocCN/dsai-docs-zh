- en: Model Training with Ultralytics YOLO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ultralytics YOLO进行模型训练
- en: 原文：[`docs.ultralytics.com/modes/train/`](https://docs.ultralytics.com/modes/train/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/modes/train/`](https://docs.ultralytics.com/modes/train/)
- en: '![Ultralytics YOLO ecosystem and integrations](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Ultralytics YOLO生态系统和集成](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Training a deep learning model involves feeding it data and adjusting its parameters
    so that it can make accurate predictions. Train mode in Ultralytics YOLOv8 is
    engineered for effective and efficient training of object detection models, fully
    utilizing modern hardware capabilities. This guide aims to cover all the details
    you need to get started with training your own models using YOLOv8's robust set
    of features.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 训练深度学习模型涉及提供数据并调整其参数，以便它能进行准确预测。Ultralytics YOLOv8的训练模式专为有效和高效地训练目标检测模型而设计，充分利用现代硬件能力。本指南旨在涵盖使用YOLOv8丰富功能集训练自己的模型所需的所有详细信息。
- en: '[`www.youtube.com/embed/LNwODJXcvt4?si=7n1UvGRLSd9p5wKs`](https://www.youtube.com/embed/LNwODJXcvt4?si=7n1UvGRLSd9p5wKs)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/LNwODJXcvt4?si=7n1UvGRLSd9p5wKs`](https://www.youtube.com/embed/LNwODJXcvt4?si=7n1UvGRLSd9p5wKs)'
- en: '**Watch:** How to Train a YOLOv8 model on Your Custom Dataset in Google Colab.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** 如何在Google Colab上训练自定义数据集的YOLOv8模型。'
- en: Why Choose Ultralytics YOLO for Training?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择Ultralytics YOLO进行训练？
- en: 'Here are some compelling reasons to opt for YOLOv8''s Train mode:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是选择YOLOv8训练模式的一些引人注目的理由：
- en: '**Efficiency:** Make the most out of your hardware, whether you''re on a single-GPU
    setup or scaling across multiple GPUs.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率：** 充分利用您的硬件资源，无论您使用单GPU设置还是跨多GPU扩展。'
- en: '**Versatility:** Train on custom datasets in addition to readily available
    ones like COCO, VOC, and ImageNet.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多功能性：** 除了像COCO、VOC和ImageNet这样的现成数据集外，还可以训练自定义数据集。'
- en: '**User-Friendly:** Simple yet powerful CLI and Python interfaces for a straightforward
    training experience.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户友好：** 简单而强大的CLI和Python接口，提供直观的训练体验。'
- en: '**Hyperparameter Flexibility:** A broad range of customizable hyperparameters
    to fine-tune model performance.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数灵活性：** 广泛的可定制超参数范围，以微调模型性能。'
- en: Key Features of Train Mode
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练模式的关键特点
- en: 'The following are some notable features of YOLOv8''s Train mode:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是YOLOv8训练模式的一些显著特点：
- en: '**Automatic Dataset Download:** Standard datasets like COCO, VOC, and ImageNet
    are downloaded automatically on first use.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动数据集下载：** 类似COCO、VOC和ImageNet的标准数据集在首次使用时会自动下载。'
- en: '**Multi-GPU Support:** Scale your training efforts seamlessly across multiple
    GPUs to expedite the process.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多GPU支持：** 跨多个GPU无缝扩展训练效果，加快进程。'
- en: '**Hyperparameter Configuration:** The option to modify hyperparameters through
    YAML configuration files or CLI arguments.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数配置：** 可通过YAML配置文件或CLI参数修改超参数的选项。'
- en: '**Visualization and Monitoring:** Real-time tracking of training metrics and
    visualization of the learning process for better insights.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化与监控：** 实时跟踪训练指标，并可视化学习过程，以获取更好的见解。'
- en: Tip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: YOLOv8 datasets like COCO, VOC, ImageNet and many others automatically download
    on first use, i.e. `yolo train data=coco.yaml`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YOLOv8数据集如COCO、VOC、ImageNet等，在第一次使用时会自动下载，例如 `yolo train data=coco.yaml`
- en: Usage Examples
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用示例
- en: Train YOLOv8n on the COCO8 dataset for 100 epochs at image size 640\. The training
    device can be specified using the `device` argument. If no argument is passed
    GPU `device=0` will be used if available, otherwise `device='cpu'` will be used.
    See Arguments section below for a full list of training arguments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像大小为640的COCO8数据集上对YOLOv8n进行100个epoch的训练。可以使用`device`参数指定训练设备。如果未传递参数，则如果可用，则将使用GPU
    `device=0`，否则将使用`device='cpu'`。有关所有训练参数的完整列表，请参见下面的参数部分。
- en: Single-GPU and CPU Training Example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 单GPU和CPU训练示例
- en: Device is determined automatically. If a GPU is available then it will be used,
    otherwise training will start on CPU.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 设备会自动确定。如果GPU可用，则会使用GPU，否则将在CPU上开始训练。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Multi-GPU Training
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多GPU训练
- en: Multi-GPU training allows for more efficient utilization of available hardware
    resources by distributing the training load across multiple GPUs. This feature
    is available through both the Python API and the command-line interface. To enable
    multi-GPU training, specify the GPU device IDs you wish to use.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 多GPU训练通过在多个GPU上分发训练负载，有效利用可用硬件资源。此功能可通过Python API和命令行界面使用。要启用多GPU训练，请指定要使用的GPU设备ID。
- en: Multi-GPU Training Example
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 多GPU训练示例
- en: To train with 2 GPUs, CUDA devices 0 and 1 use the following commands. Expand
    to additional GPUs as required.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用2个GPU进行训练，CUDA设备0和1，请使用以下命令。根据需要扩展到更多GPU。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Apple M1 and M2 MPS Training
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apple M1和M2 MPS训练
- en: With the support for Apple M1 and M2 chips integrated in the Ultralytics YOLO
    models, it's now possible to train your models on devices utilizing the powerful
    Metal Performance Shaders (MPS) framework. The MPS offers a high-performance way
    of executing computation and image processing tasks on Apple's custom silicon.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 支持Apple M1和M2芯片集成在Ultralytics YOLO模型中，现在可以在使用强大的Metal Performance Shaders（MPS）框架的设备上训练模型。MPS提供了在Apple定制硅上执行计算和图像处理任务的高性能方式。
- en: 'To enable training on Apple M1 and M2 chips, you should specify ''mps'' as
    your device when initiating the training process. Below is an example of how you
    could do this in Python and via the command line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Apple M1和M2芯片上进行训练，你应该在启动训练过程时将'device'指定为'mps'。以下是在Python中和通过命令行如何实现的示例：
- en: MPS Training Example
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MPS训练示例
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: While leveraging the computational power of the M1/M2 chips, this enables more
    efficient processing of the training tasks. For more detailed guidance and advanced
    configuration options, please refer to the [PyTorch MPS documentation](https://pytorch.org/docs/stable/notes/mps.html).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在利用M1/M2芯片的计算能力的同时，这使得训练任务的处理更加高效。有关更详细的指导和高级配置选项，请参阅[PyTorch MPS文档](https://pytorch.org/docs/stable/notes/mps.html)。
- en: Resuming Interrupted Trainings
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恢复中断的训练
- en: Resuming training from a previously saved state is a crucial feature when working
    with deep learning models. This can come in handy in various scenarios, like when
    the training process has been unexpectedly interrupted, or when you wish to continue
    training a model with new data or for more epochs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用深度学习模型时，从先前保存的状态恢复训练是一个关键特性。这在各种情况下都很有用，例如当训练过程意外中断或希望使用新数据或更多epochs继续训练模型时。
- en: When training is resumed, Ultralytics YOLO loads the weights from the last saved
    model and also restores the optimizer state, learning rate scheduler, and the
    epoch number. This allows you to continue the training process seamlessly from
    where it was left off.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当恢复训练时，Ultralytics YOLO会从最后保存的模型加载权重，并恢复优化器状态、学习率调度器和轮数。这样可以无缝地从中断的地方继续训练过程。
- en: You can easily resume training in Ultralytics YOLO by setting the `resume` argument
    to `True` when calling the `train` method, and specifying the path to the `.pt`
    file containing the partially trained model weights.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ultralytics YOLO中通过将`resume`参数设置为`True`并指定包含部分训练模型权重的`.pt`文件的路径，可以轻松恢复训练。
- en: 'Below is an example of how to resume an interrupted training using Python and
    via the command line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用Python和命令行恢复中断训练的示例：
- en: Resume Training Example
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复训练示例
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By setting `resume=True`, the `train` function will continue training from where
    it left off, using the state stored in the 'path/to/last.pt' file. If the `resume`
    argument is omitted or set to `False`, the `train` function will start a new training
    session.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`resume=True`，`train`函数将从存储在'path/to/last.pt'文件中的状态继续训练。如果省略`resume`参数或将其设置为`False`，`train`函数将启动新的训练会话。
- en: Remember that checkpoints are saved at the end of every epoch by default, or
    at fixed interval using the `save_period` argument, so you must complete at least
    1 epoch to resume a training run.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，默认情况下，每个epoch结束时或使用`save_period`参数以固定间隔保存检查点，所以您必须完成至少1个epoch才能恢复训练运行。
- en: Train Settings
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练设置
- en: The training settings for YOLO models encompass various hyperparameters and
    configurations used during the training process. These settings influence the
    model's performance, speed, and accuracy. Key training settings include batch
    size, learning rate, momentum, and weight decay. Additionally, the choice of optimizer,
    loss function, and training dataset composition can impact the training process.
    Careful tuning and experimentation with these settings are crucial for optimizing
    performance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: YOLO模型的训练设置涵盖了训练过程中使用的各种超参数和配置。这些设置影响模型的性能、速度和准确性。关键的训练设置包括批量大小、学习率、动量和权重衰减。此外，优化器的选择、损失函数和训练数据集的组成也会影响训练过程。精心调整和对这些设置进行实验对于优化性能至关重要。
- en: '| Argument | Default | Description |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `model` | `None` | Specifies the model file for training. Accepts a path
    to either a `.pt` pretrained model or a `.yaml` configuration file. Essential
    for defining the model structure or initializing weights. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `model` | `None` | 指定用于训练的模型文件。接受`.pt`预训练模型或`.yaml`配置文件的路径。定义模型结构或初始化权重至关重要。
    |'
- en: '| `data` | `None` | Path to the dataset configuration file (e.g., `coco8.yaml`).
    This file contains dataset-specific parameters, including paths to training and
    validation data, class names, and number of classes. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `None` | 数据集配置文件的路径（例如`coco8.yaml`）。该文件包含数据集特定的参数，包括训练和验证数据的路径、类名和类的数量。
    |'
- en: '| `epochs` | `100` | Total number of training epochs. Each epoch represents
    a full pass over the entire dataset. Adjusting this value can affect training
    duration and model performance. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `epochs` | `100` | 总训练轮数。每个epoch表示对整个数据集的完整遍历。调整此值会影响训练持续时间和模型性能。 |'
- en: '| `time` | `None` | Maximum training time in hours. If set, this overrides
    the `epochs` argument, allowing training to automatically stop after the specified
    duration. Useful for time-constrained training scenarios. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `time` | `None` | 最大训练时间（小时）。如果设置了此参数，则会覆盖`epochs`参数，允许在指定的持续时间后自动停止训练。适用于时间受限的训练场景。
    |'
- en: '| `patience` | `100` | Number of epochs to wait without improvement in validation
    metrics before early stopping the training. Helps prevent overfitting by stopping
    training when performance plateaus. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `patience` | `100` | 在验证指标没有改善的情况下等待的轮数（epochs），用于提前停止训练以防止过拟合。 |'
- en: '| `batch` | `16` | Batch size, with three modes: set as an integer (e.g., `batch=16`),
    auto mode for 60% GPU memory utilization (`batch=-1`), or auto mode with specified
    utilization fraction (`batch=0.70`). |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `batch` | `16` | 批量大小，有三种模式：设置为整数（例如`batch=16`）、自动模式以利用60%的GPU内存（`batch=-1`）或带有指定利用率分数的自动模式（`batch=0.70`）。
    |'
- en: '| `imgsz` | `640` | Target image size for training. All images are resized
    to this dimension before being fed into the model. Affects model accuracy and
    computational complexity. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `imgsz` | `640` | 训练的目标图像尺寸。所有图像在输入模型之前都会被调整到这个尺寸。影响模型的准确性和计算复杂度。 |'
- en: '| `save` | `True` | Enables saving of training checkpoints and final model
    weights. Useful for resuming training or model deployment. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `save` | `True` | 启用训练检查点和最终模型权重的保存。有助于恢复训练或模型部署。 |'
- en: '| `save_period` | `-1` | Frequency of saving model checkpoints, specified in
    epochs. A value of -1 disables this feature. Useful for saving interim models
    during long training sessions. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `save_period` | `-1` | 模型检查点保存频率，以epochs为单位。设置为-1时禁用此功能。在长时间训练会话中保存中间模型非常有用。
    |'
- en: '| `cache` | `False` | Enables caching of dataset images in memory (`True`/`ram`),
    on disk (`disk`), or disables it (`False`). Improves training speed by reducing
    disk I/O at the cost of increased memory usage. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `cache` | `False` | 启用数据集图像的缓存，可选`True`/`ram`（内存中）、`disk`（磁盘中）或禁用`False`。减少磁盘I/O以提高训练速度，但会增加内存使用。
    |'
- en: '| `device` | `None` | Specifies the computational device(s) for training: a
    single GPU (`device=0`), multiple GPUs (`device=0,1`), CPU (`device=cpu`), or
    MPS for Apple silicon (`device=mps`). |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `device` | `None` | 指定用于训练的计算设备：单个GPU（`device=0`）、多个GPU（`device=0,1`）、CPU（`device=cpu`）或Apple
    Silicon的MPS（`device=mps`）。 |'
- en: '| `workers` | `8` | Number of worker threads for data loading (per `RANK` if
    Multi-GPU training). Influences the speed of data preprocessing and feeding into
    the model, especially useful in multi-GPU setups. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `workers` | `8` | 数据加载的工作线程数（每个`RANK`如果是多GPU训练）。影响数据预处理和输入模型的速度，特别适用于多GPU设置。
    |'
- en: '| `project` | `None` | Name of the project directory where training outputs
    are saved. Allows for organized storage of different experiments. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `project` | `None` | 训练输出保存的项目目录名称。允许组织不同实验的存储。 |'
- en: '| `name` | `None` | Name of the training run. Used for creating a subdirectory
    within the project folder, where training logs and outputs are stored. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `name` | `None` | 训练运行的名称。用于在项目文件夹内创建子目录，存储训练日志和输出。 |'
- en: '| `exist_ok` | `False` | If True, allows overwriting of an existing project/name
    directory. Useful for iterative experimentation without needing to manually clear
    previous outputs. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `exist_ok` | `False` | 如果为True，允许覆盖现有项目/名称目录。有助于在不需手动清除先前输出的情况下进行迭代实验。 |'
- en: '| `pretrained` | `True` | Determines whether to start training from a pretrained
    model. Can be a boolean value or a string path to a specific model from which
    to load weights. Enhances training efficiency and model performance. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `pretrained` | `True` | 确定是否从预训练模型开始训练。可以是布尔值或指定模型路径的字符串，以加载权重。提升训练效率和模型性能。
    |'
- en: '| `optimizer` | `''auto''` | Choice of optimizer for training. Options include
    `SGD`, `Adam`, `AdamW`, `NAdam`, `RAdam`, `RMSProp` etc., or `auto` for automatic
    selection based on model configuration. Affects convergence speed and stability.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `optimizer` | `''auto''` | 训练的优化器选择。选项包括 `SGD`、`Adam`、`AdamW`、`NAdam`、`RAdam`、`RMSProp`
    等，或者 `auto` 根据模型配置自动选择。影响收敛速度和稳定性。 |'
- en: '| `verbose` | `False` | Enables verbose output during training, providing detailed
    logs and progress updates. Useful for debugging and closely monitoring the training
    process. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `verbose` | `False` | 在训练过程中启用详细输出，提供详细日志和进度更新。用于调试和紧密监控训练过程。 |'
- en: '| `seed` | `0` | Sets the random seed for training, ensuring reproducibility
    of results across runs with the same configurations. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `seed` | `0` | 设置训练的随机种子，确保在相同配置下运行时结果的可重现性。 |'
- en: '| `deterministic` | `True` | Forces deterministic algorithm use, ensuring reproducibility
    but may affect performance and speed due to the restriction on non-deterministic
    algorithms. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `deterministic` | `True` | 强制使用确定性算法，确保结果的可重现性，但可能会影响性能和速度，因为对非确定性算法施加了限制。
    |'
- en: '| `single_cls` | `False` | Treats all classes in multi-class datasets as a
    single class during training. Useful for binary classification tasks or when focusing
    on object presence rather than classification. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `single_cls` | `False` | 在训练期间将多类数据集中的所有类别视为单一类别。适用于二元分类任务或关注对象存在而非分类。 |'
- en: '| `rect` | `False` | Enables rectangular training, optimizing batch composition
    for minimal padding. Can improve efficiency and speed but may affect model accuracy.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `rect` | `False` | 启用矩形训练，优化批次构成以减少填充。可以提高效率和速度，但可能影响模型精度。 |'
- en: '| `cos_lr` | `False` | Utilizes a cosine learning rate scheduler, adjusting
    the learning rate following a cosine curve over epochs. Helps in managing learning
    rate for better convergence. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `cos_lr` | `False` | 使用余弦学习率调度器，在 epochs 上按余弦曲线调整学习率。有助于管理学习率以实现更好的收敛。 |'
- en: '| `close_mosaic` | `10` | Disables mosaic data augmentation in the last N epochs
    to stabilize training before completion. Setting to 0 disables this feature. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `close_mosaic` | `10` | 在完成训练之前的最后 N 个 epochs 禁用马赛克数据增强，以稳定训练。设置为 0 会禁用此功能。
    |'
- en: '| `resume` | `False` | Resumes training from the last saved checkpoint. Automatically
    loads model weights, optimizer state, and epoch count, continuing training seamlessly.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `resume` | `False` | 从最后保存的检查点恢复训练。自动加载模型权重、优化器状态和 epoch 计数，无缝继续训练。 |'
- en: '| `amp` | `True` | Enables Automatic Mixed Precision (AMP) training, reducing
    memory usage and possibly speeding up training with minimal impact on accuracy.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `amp` | `True` | 启用自动混合精度（AMP）训练，减少内存使用并可能加快训练速度，对精度影响较小。 |'
- en: '| `fraction` | `1.0` | Specifies the fraction of the dataset to use for training.
    Allows for training on a subset of the full dataset, useful for experiments or
    when resources are limited. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `fraction` | `1.0` | 指定用于训练的数据集分数。允许在完整数据集的子集上进行训练，适用于实验或资源有限的情况。 |'
- en: '| `profile` | `False` | Enables profiling of ONNX and TensorRT speeds during
    training, useful for optimizing model deployment. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `profile` | `False` | 在训练期间启用 ONNX 和 TensorRT 速度的分析，有助于优化模型部署。 |'
- en: '| `freeze` | `None` | Freezes the first N layers of the model or specified
    layers by index, reducing the number of trainable parameters. Useful for fine-tuning
    or transfer learning. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `freeze` | `None` | 冻结模型的前 N 层或指定索引的层，减少可训练参数的数量。用于微调或迁移学习。 |'
- en: '| `lr0` | `0.01` | Initial learning rate (i.e. `SGD=1E-2`, `Adam=1E-3`) . Adjusting
    this value is crucial for the optimization process, influencing how rapidly model
    weights are updated. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `lr0` | `0.01` | 初始学习率（例如 `SGD=1E-2`，`Adam=1E-3`）。调整此值对优化过程至关重要，影响模型权重更新的速度。
    |'
- en: '| `lrf` | `0.01` | Final learning rate as a fraction of the initial rate =
    (`lr0 * lrf`), used in conjunction with schedulers to adjust the learning rate
    over time. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `lrf` | `0.01` | 最终学习率作为初始学习率的一部分 = (`lr0 * lrf`)，与调度器配合使用以随时间调整学习率。 |'
- en: '| `momentum` | `0.937` | Momentum factor for SGD or beta1 for Adam optimizers,
    influencing the incorporation of past gradients in the current update. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `momentum` | `0.937` | SGD的动量因子或Adam优化器的beta1，影响当前更新中过去梯度的纳入。 |'
- en: '| `weight_decay` | `0.0005` | L2 regularization term, penalizing large weights
    to prevent overfitting. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `weight_decay` | `0.0005` | L2正则化项，惩罚大权重以防止过拟合。 |'
- en: '| `warmup_epochs` | `3.0` | Number of epochs for learning rate warmup, gradually
    increasing the learning rate from a low value to the initial learning rate to
    stabilize training early on. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `warmup_epochs` | `3.0` | 学习率预热的轮数，逐渐将学习率从低值增加到初始学习率，以稳定早期训练。 |'
- en: '| `warmup_momentum` | `0.8` | Initial momentum for warmup phase, gradually
    adjusting to the set momentum over the warmup period. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `warmup_momentum` | `0.8` | 预热阶段的初始动量，逐渐调整到预热期间设定的动量。 |'
- en: '| `warmup_bias_lr` | `0.1` | Learning rate for bias parameters during the warmup
    phase, helping stabilize model training in the initial epochs. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `warmup_bias_lr` | `0.1` | 预热阶段偏置参数的学习率，帮助稳定模型在初始轮次的训练。 |'
- en: '| `box` | `7.5` | Weight of the box loss component in the loss function, influencing
    how much emphasis is placed on accurately predicting bounding box coordinates.
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `box` | `7.5` | 损失函数中框损失组件的权重，影响对准确预测边界框坐标的重视程度。 |'
- en: '| `cls` | `0.5` | Weight of the classification loss in the total loss function,
    affecting the importance of correct class prediction relative to other components.
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `cls` | `0.5` | 分类损失在总损失函数中的权重，影响正确类别预测相对于其他组件的重要性。 |'
- en: '| `dfl` | `1.5` | Weight of the distribution focal loss, used in certain YOLO
    versions for fine-grained classification. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `dfl` | `1.5` | 分布焦点损失的权重，在某些YOLO版本中用于细粒度分类。 |'
- en: '| `pose` | `12.0` | Weight of the pose loss in models trained for pose estimation,
    influencing the emphasis on accurately predicting pose keypoints. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `pose` | `12.0` | 在为姿态估计训练的模型中，姿态损失的权重，影响对准确预测姿态关键点的重视程度。 |'
- en: '| `kobj` | `2.0` | Weight of the keypoint objectness loss in pose estimation
    models, balancing detection confidence with pose accuracy. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `kobj` | `2.0` | 关键点物体性损失在姿态估计模型中的权重，平衡检测置信度与姿态准确性。 |'
- en: '| `label_smoothing` | `0.0` | Applies label smoothing, softening hard labels
    to a mix of the target label and a uniform distribution over labels, can improve
    generalization. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `label_smoothing` | `0.0` | 应用标签平滑，将硬标签软化为目标标签和标签均匀分布的混合，有助于提高泛化能力。 |'
- en: '| `nbs` | `64` | Nominal batch size for normalization of loss. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `nbs` | `64` | 用于损失归一化的名义批量大小。 |'
- en: '| `overlap_mask` | `True` | Determines whether segmentation masks should overlap
    during training, applicable in instance segmentation tasks. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `overlap_mask` | `True` | 确定在训练期间分割掩码是否应重叠，适用于实例分割任务。 |'
- en: '| `mask_ratio` | `4` | Downsample ratio for segmentation masks, affecting the
    resolution of masks used during training. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `mask_ratio` | `4` | 分割掩码的下采样比例，影响训练期间使用的掩码分辨率。 |'
- en: '| `dropout` | `0.0` | Dropout rate for regularization in classification tasks,
    preventing overfitting by randomly omitting units during training. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `dropout` | `0.0` | 分类任务中的正则化丢弃率，通过在训练期间随机省略单元来防止过拟合。 |'
- en: '| `val` | `True` | Enables validation during training, allowing for periodic
    evaluation of model performance on a separate dataset. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `val` | `True` | 在训练期间启用验证，允许定期评估模型在单独数据集上的性能。 |'
- en: '| `plots` | `False` | Generates and saves plots of training and validation
    metrics, as well as prediction examples, providing visual insights into model
    performance and learning progression. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `plots` | `False` | 生成并保存训练和验证指标的图表，以及预测示例，提供对模型性能和学习进展的可视化洞察。 |'
- en: Note on Batch-size Settings
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 批量大小设置说明 |
- en: 'The `batch` argument can be configured in three ways:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`batch`参数可以通过三种方式进行配置： |'
- en: '**Fixed Batch Size**: Set an integer value (e.g., `batch=16`), specifying the
    number of images per batch directly.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定批量大小**：设置一个整数值（例如，`batch=16`），直接指定每个批次的图像数量。 |'
- en: '**Auto Mode (60% GPU Memory)**: Use `batch=-1` to automatically adjust batch
    size for approximately 60% CUDA memory utilization.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动模式（60% GPU内存）**：使用`batch=-1`自动调整批量大小，以实现大约60%的CUDA内存利用率。 |'
- en: '**Auto Mode with Utilization Fraction**: Set a fraction value (e.g., `batch=0.70`)
    to adjust batch size based on the specified fraction of GPU memory usage.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动模式与利用率分数**：设置一个分数值（例如，`batch=0.70`），根据指定的GPU内存使用分数调整批量大小。 |'
- en: Augmentation Settings and Hyperparameters
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强设置和超参数 |
- en: 'Augmentation techniques are essential for improving the robustness and performance
    of YOLO models by introducing variability into the training data, helping the
    model generalize better to unseen data. The following table outlines the purpose
    and effect of each augmentation argument:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据增强技术对改善YOLO模型的鲁棒性和性能至关重要，通过向训练数据引入变异性，帮助模型更好地泛化到未见数据。以下表格详细描述了每种增强参数的目的和效果：
- en: '| Argument | Type | Default | Range | Description |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认 | 范围 | 描述 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `hsv_h` | `float` | `0.015` | `0.0 - 1.0` | Adjusts the hue of the image
    by a fraction of the color wheel, introducing color variability. Helps the model
    generalize across different lighting conditions. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `hsv_h` | `float` | `0.015` | `0.0 - 1.0` | 通过颜色轮的一部分调整图像的色调，引入颜色变化。有助于模型在不同光照条件下泛化。
    |'
- en: '| `hsv_s` | `float` | `0.7` | `0.0 - 1.0` | Alters the saturation of the image
    by a fraction, affecting the intensity of colors. Useful for simulating different
    environmental conditions. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `hsv_s` | `float` | `0.7` | `0.0 - 1.0` | 改变图像的饱和度，影响颜色的强度。模拟不同环境条件很有用。 |'
- en: '| `hsv_v` | `float` | `0.4` | `0.0 - 1.0` | Modifies the value (brightness)
    of the image by a fraction, helping the model to perform well under various lighting
    conditions. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `hsv_v` | `float` | `0.4` | `0.0 - 1.0` | 通过一部分修改图像的值（亮度），帮助模型在各种光照条件下表现良好。
    |'
- en: '| `degrees` | `float` | `0.0` | `-180 - +180` | Rotates the image randomly
    within the specified degree range, improving the model''s ability to recognize
    objects at various orientations. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `degrees` | `float` | `0.0` | `-180 - +180` | 在指定角度范围内随机旋转图像，提高模型识别各种方向物体的能力。
    |'
- en: '| `translate` | `float` | `0.1` | `0.0 - 1.0` | Translates the image horizontally
    and vertically by a fraction of the image size, aiding in learning to detect partially
    visible objects. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `translate` | `float` | `0.1` | `0.0 - 1.0` | 通过图像尺寸的一部分水平和垂直平移图像，有助于学习检测部分可见对象。
    |'
- en: '| `scale` | `float` | `0.5` | `>=0.0` | Scales the image by a gain factor,
    simulating objects at different distances from the camera. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `scale` | `float` | `0.5` | `>=0.0` | 通过增益因子缩放图像，模拟相机距离不同的物体。 |'
- en: '| `shear` | `float` | `0.0` | `-180 - +180` | Shears the image by a specified
    degree, mimicking the effect of objects being viewed from different angles. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `shear` | `float` | `0.0` | `-180 - +180` | 按指定角度剪切图像，模拟从不同角度观察物体的效果。 |'
- en: '| `perspective` | `float` | `0.0` | `0.0 - 0.001` | Applies a random perspective
    transformation to the image, enhancing the model''s ability to understand objects
    in 3D space. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `perspective` | `float` | `0.0` | `0.0 - 0.001` | 对图像应用随机透视变换，增强模型理解三维空间中的物体能力。
    |'
- en: '| `flipud` | `float` | `0.0` | `0.0 - 1.0` | Flips the image upside down with
    the specified probability, increasing the data variability without affecting the
    object''s characteristics. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `flipud` | `float` | `0.0` | `0.0 - 1.0` | 将图像上下翻转，指定的概率下，增加数据的变异性，而不影响物体的特征。
    |'
- en: '| `fliplr` | `float` | `0.5` | `0.0 - 1.0` | Flips the image left to right
    with the specified probability, useful for learning symmetrical objects and increasing
    dataset diversity. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `fliplr` | `float` | `0.5` | `0.0 - 1.0` | 将图像左右翻转，指定的概率下，有助于学习对称物体并增加数据集的多样性。
    |'
- en: '| `bgr` | `float` | `0.0` | `0.0 - 1.0` | Flips the image channels from RGB
    to BGR with the specified probability, useful for increasing robustness to incorrect
    channel ordering. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `bgr` | `float` | `0.0` | `0.0 - 1.0` | 将图像通道从RGB翻转为BGR，指定的概率为，有助于增强对不正确通道排序的鲁棒性。
    |'
- en: '| `mosaic` | `float` | `1.0` | `0.0 - 1.0` | Combines four training images
    into one, simulating different scene compositions and object interactions. Highly
    effective for complex scene understanding. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `mosaic` | `float` | `1.0` | `0.0 - 1.0` | 将四个训练图像合并成一个，模拟不同的场景组合和物体交互。对于复杂场景理解非常有效。
    |'
- en: '| `mixup` | `float` | `0.0` | `0.0 - 1.0` | Blends two images and their labels,
    creating a composite image. Enhances the model''s ability to generalize by introducing
    label noise and visual variability. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `mixup` | `float` | `0.0` | `0.0 - 1.0` | 混合两幅图像及其标签，创建混合图像。通过引入标签噪声和视觉变化，增强模型的泛化能力。
    |'
- en: '| `copy_paste` | `float` | `0.0` | `0.0 - 1.0` | Copies objects from one image
    and pastes them onto another, useful for increasing object instances and learning
    object occlusion. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `copy_paste` | `float` | `0.0` | `0.0 - 1.0` | 从一幅图像复制对象并粘贴到另一幅图像中，有助于增加对象实例并学习对象遮挡。
    |'
- en: '| `auto_augment` | `str` | `randaugment` | - | Automatically applies a predefined
    augmentation policy (`randaugment`, `autoaugment`, `augmix`), optimizing for classification
    tasks by diversifying the visual features. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `auto_augment` | `str` | `randaugment` | - | 自动应用预定义的增强策略（`randaugment`、`autoaugment`、`augmix`），通过增加视觉特征的多样性来优化分类任务。'
- en: '| `erasing` | `float` | `0.4` | `0.0 - 0.9` | Randomly erases a portion of
    the image during classification training, encouraging the model to focus on less
    obvious features for recognition. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `erasing` | `float` | `0.4` | `0.0 - 0.9` | 在分类训练期间随机擦除图像的一部分，鼓励模型专注于识别不太明显的特征。'
- en: '| `crop_fraction` | `float` | `1.0` | `0.1 - 1.0` | Crops the classification
    image to a fraction of its size to emphasize central features and adapt to object
    scales, reducing background distractions. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `crop_fraction` | `float` | `1.0` | `0.1 - 1.0` | 将分类图像裁剪为其大小的一部分，以突出中央特征并适应对象的比例，减少背景干扰。'
- en: These settings can be adjusted to meet the specific requirements of the dataset
    and task at hand. Experimenting with different values can help find the optimal
    augmentation strategy that leads to the best model performance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以调整这些设置以满足数据集和当前任务的具体要求。尝试不同的值可以帮助找到最佳的增强策略，从而获得最佳的模型性能。
- en: Info
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: For more information about training augmentation operations, see the reference
    section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 获取有关训练增强操作的更多信息，请参阅参考部分。
- en: Logging
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录
- en: In training a YOLOv8 model, you might find it valuable to keep track of the
    model's performance over time. This is where logging comes into play. Ultralytics'
    YOLO provides support for three types of loggers - Comet, ClearML, and TensorBoard.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练YOLOv8模型时，您可能会发现跟踪模型随时间性能变化很有价值。这就是记录的作用。Ultralytics的YOLO支持三种类型的记录器 - Comet、ClearML和TensorBoard。
- en: To use a logger, select it from the dropdown menu in the code snippet above
    and run it. The chosen logger will be installed and initialized.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用记录器，请从上面的代码片段的下拉菜单中选择并运行它。所选记录器将被安装和初始化。
- en: Comet
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Comet
- en: Comet is a platform that allows data scientists and developers to track, compare,
    explain and optimize experiments and models. It provides functionalities such
    as real-time metrics, code diffs, and hyperparameters tracking.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Comet是一个平台，允许数据科学家和开发人员跟踪、比较、解释和优化实验和模型。它提供实时指标、代码差异和超参数跟踪等功能。
- en: 'To use Comet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Comet：
- en: Example
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember to sign in to your Comet account on their website and get your API
    key. You will need to add this to your environment variables or your script to
    log your experiments.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在Comet的网站上登录您的账户并获取您的API密钥。您需要将其添加到环境变量或脚本中以记录您的实验。
- en: ClearML
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ClearML
- en: '[ClearML](https://www.clear.ml/) is an open-source platform that automates
    tracking of experiments and helps with efficient sharing of resources. It is designed
    to help teams manage, execute, and reproduce their ML work more efficiently.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[ClearML](https://www.clear.ml/)是一个开源平台，自动化实验跟踪，并帮助高效共享资源。它旨在帮助团队更有效地管理、执行和复现他们的机器学习工作。'
- en: 'To use ClearML:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ClearML：
- en: Example
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After running this script, you will need to sign in to your ClearML account
    on the browser and authenticate your session.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本后，您需要在浏览器上登录您的[CearML](https://www.clear.ml/)账户并验证您的会话。
- en: TensorBoard
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TensorBoard
- en: '[TensorBoard](https://www.tensorflow.org/tensorboard) is a visualization toolkit
    for TensorFlow. It allows you to visualize your TensorFlow graph, plot quantitative
    metrics about the execution of your graph, and show additional data like images
    that pass through it.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[TensorBoard](https://www.tensorflow.org/tensorboard)是TensorFlow的可视化工具包。它允许您可视化TensorFlow图，绘制关于图执行的定量指标，并显示通过图像传递的其他数据。'
- en: 'To use TensorBoard in [Google Colab](https://colab.research.google.com/github/ultralytics/ultralytics/blob/main/examples/tutorial.ipynb):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要在[Google Colab](https://colab.research.google.com/github/ultralytics/ultralytics/blob/main/examples/tutorial.ipynb)中使用TensorBoard：
- en: Example
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To use TensorBoard locally run the below command and view results at http://localhost:6006/.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地使用TensorBoard，请运行下面的命令，并在 http://localhost:6006/ 查看结果。
- en: Example
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will load TensorBoard and direct it to the directory where your training
    logs are saved.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载TensorBoard并将其定向到保存训练日志的目录。
- en: After setting up your logger, you can then proceed with your model training.
    All training metrics will be automatically logged in your chosen platform, and
    you can access these logs to monitor your model's performance over time, compare
    different models, and identify areas for improvement.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好记录器后，您可以开始模型训练。所有训练指标将自动记录在您选择的平台上，您可以访问这些日志以随时监控模型的性能，比较不同模型，并确定改进的方向。
- en: FAQ
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: How do I train an object detection model using Ultralytics YOLOv8?
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用Ultralytics YOLOv8训练目标检测模型？
- en: 'To train an object detection model using Ultralytics YOLOv8, you can either
    use the Python API or the CLI. Below is an example for both:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ultralytics YOLOv8训练目标检测模型，您可以使用Python API或CLI。以下是两者的示例：
- en: Single-GPU and CPU Training Example
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 单GPU和CPU训练示例
- en: '[PRE12]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For more details, refer to the Train Settings section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多详情，请参阅训练设置部分。
- en: What are the key features of Ultralytics YOLOv8's Train mode?
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8的训练模式的关键特性是什么？
- en: 'The key features of Ultralytics YOLOv8''s Train mode include:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8的训练模式的关键特性包括：
- en: '**Automatic Dataset Download:** Automatically downloads standard datasets like
    COCO, VOC, and ImageNet.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动数据集下载：** 自动下载标准数据集，如COCO、VOC和ImageNet。'
- en: '**Multi-GPU Support:** Scale training across multiple GPUs for faster processing.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多GPU支持：** 可以跨多个GPU进行训练，加速处理速度。'
- en: '**Hyperparameter Configuration:** Customize hyperparameters through YAML files
    or CLI arguments.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数配置：** 通过YAML文件或CLI参数自定义超参数。'
- en: '**Visualization and Monitoring:** Real-time tracking of training metrics for
    better insights.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化和监控：** 实时跟踪训练指标，以获得更好的洞察力。'
- en: These features make training efficient and customizable to your needs. For more
    details, see the Key Features of Train Mode section.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能使得训练高效且可根据您的需求定制。有关详细信息，请参阅训练模式的关键特性部分。
- en: How do I resume training from an interrupted session in Ultralytics YOLOv8?
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何从中断的会话中恢复Ultralytics YOLOv8的训练？
- en: To resume training from an interrupted session, set the `resume` argument to
    `True` and specify the path to the last saved checkpoint.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要从中断的会话恢复训练，请将`resume`参数设置为`True`并指定最后保存的检查点路径。
- en: Resume Training Example
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复训练示例
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Check the section on Resuming Interrupted Trainings for more information.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 查看中断训练部分以获取更多信息。
- en: Can I train YOLOv8 models on Apple M1 and M2 chips?
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我能在Apple M1和M2芯片上训练YLOv8模型吗？
- en: Yes, Ultralytics YOLOv8 supports training on Apple M1 and M2 chips utilizing
    the Metal Performance Shaders (MPS) framework. Specify 'mps' as your training
    device.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Ultralytics YOLOv8支持在Apple M1和M2芯片上使用Metal Performance Shaders（MPS）框架进行训练。请将训练设备设置为
    'mps'。
- en: MPS Training Example
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: MPS训练示例
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For more details, refer to the Apple M1 and M2 MPS Training section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多详情，请参阅Apple M1和M2 MPS训练部分。
- en: What are the common training settings, and how do I configure them?
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见的训练设置是什么，如何配置它们？
- en: 'Ultralytics YOLOv8 allows you to configure a variety of training settings such
    as batch size, learning rate, epochs, and more through arguments. Here''s a brief
    overview:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8允许通过参数配置各种训练设置，如批量大小、学习率、时代等。以下是简要概述：
- en: '| Argument | Default | Description |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| Argument | Default | Description |'
- en: '| --- | --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `model` | `None` | Path to the model file for training. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `model` | `None` | 用于训练的模型文件路径。 |'
- en: '| `data` | `None` | Path to the dataset configuration file (e.g., `coco8.yaml`).
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `None` | 数据集配置文件的路径（例如 `coco8.yaml`）。 |'
- en: '| `epochs` | `100` | Total number of training epochs. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `epochs` | `100` | 总训练时期数。 |'
- en: '| `batch` | `16` | Batch size, adjustable as integer or auto mode. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `batch` | `16` | 批量大小，可以设置为整数或自动模式。 |'
- en: '| `imgsz` | `640` | Target image size for training. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `imgsz` | `640` | 训练的目标图像尺寸。 |'
- en: '| `device` | `None` | Computational device(s) for training like `cpu`, `0`,
    `0,1`, or `mps`. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `device` | `None` | 用于训练的计算设备，例如 `cpu`、`0`、`0,1`或`mps`。 |'
- en: '| `save` | `True` | Enables saving of training checkpoints and final model
    weights. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `save` | `True` | 启用保存训练检查点和最终模型权重。 |'
- en: For an in-depth guide on training settings, check the Train Settings section.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解训练设置的详细指南，请参阅训练设置部分。
