- en: Simplification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To make this document easier to read, we are going to enable pretty printing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`simplify`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s jump in and do some interesting mathematics. One of the most useful
    features of a symbolic manipulation system is the ability to simplify mathematical
    expressions. SymPy has dozens of functions to perform various kinds of simplification.
    There is also one general function called `simplify()` that attempts to apply
    all of these functions in an intelligent way to arrive at the simplest form of
    an expression. Here are some examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `gamma(x)` is \(\Gamma(x)\), the [gamma function](https://en.wikipedia.org/wiki/Gamma_function).
    We see that `simplify()` is capable of handling a large class of expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'But `simplify()` has a pitfall. It just applies all the major simplification
    operations in SymPy, and uses heuristics to determine the simplest result. But
    “simplest” is not a well-defined term. For example, say we wanted to “simplify”
    \(x^2 + 2x + 1\) into \((x + 1)^2\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We did not get what we want. There is a function to perform this simplification,
    called `factor()`, which will be discussed below.
  prefs: []
  type: TYPE_NORMAL
- en: Another pitfall to `simplify()` is that it can be unnecessarily slow, since
    it tries many kinds of simplifications before picking the best one. If you already
    know exactly what kind of simplification you are after, it is better to apply
    the specific simplification function(s) that apply those simplifications.
  prefs: []
  type: TYPE_NORMAL
- en: Applying specific simplification functions instead of `simplify()` also has
    the advantage that specific functions have certain guarantees about the form of
    their output. These will be discussed with each function below. For example, `factor()`,
    when called on a polynomial with rational coefficients, is guaranteed to factor
    the polynomial into irreducible factors. `simplify()` has no guarantees. It is
    entirely heuristical, and, as we saw above, it may even miss a possible type of
    simplification that SymPy is capable of doing.
  prefs: []
  type: TYPE_NORMAL
- en: '`simplify()` is best when used interactively, when you just want to whittle
    down an expression to a simpler form. You may then choose to apply specific functions
    once you see what `simplify()` returns, to get a more precise result. It is also
    useful when you have no idea what form an expression will take, and you need a
    catchall function to simplify it.'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial/Rational Function Simplification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: expand
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`expand()` is one of the most common simplification functions in SymPy. Although
    it has a lot of scopes, for now, we will consider its function in expanding polynomial
    expressions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Given a polynomial, `expand()` will put it into a canonical form of a sum of
    monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '`expand()` may not sound like a simplification function. After all, by its
    very name, it makes expressions bigger, not smaller. Usually this is the case,
    but often an expression will become smaller upon calling `expand()` on it due
    to cancellation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: factor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`factor()` takes a polynomial and factors it into irreducible factors over
    the rational numbers. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For polynomials, `factor()` is the opposite of `expand()`. `factor()` uses a
    complete multivariate factorization algorithm over the rational numbers, which
    means that each of the factors returned by `factor()` is guaranteed to be irreducible.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in the factors themselves, `factor_list` returns a more
    structured output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the input to `factor` and `expand` need not be polynomials in the
    strict sense. They will intelligently factor or expand any kind of expression
    (though note that the factors may not be irreducible if the input is no longer
    a polynomial over the rationals).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: collect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`collect()` collects common powers of a term in an expression. For example'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`collect()` is particularly useful in conjunction with the `.coeff()` method.
    `expr.coeff(x, n)` gives the coefficient of `x**n` in `expr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: cancel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`cancel()` will take any rational function and put it into the standard canonical
    form, \(\frac{p}{q}\), where \(p\) and \(q\) are expanded polynomials with no
    common factors, and the leading coefficients of \(p\) and \(q\) do not have denominators
    (i.e., are integers).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that since `factor()` will completely factorize both the numerator and
    the denominator of an expression, it can also be used to do the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: However, if you are only interested in making sure that the expression is in
    canceled form, `cancel()` is more efficient than `factor()`.
  prefs: []
  type: TYPE_NORMAL
- en: apart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`apart()` performs a [partial fraction decomposition](https://en.wikipedia.org/wiki/Partial_fraction_decomposition)
    on a rational function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Trigonometric Simplification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SymPy follows Python’s naming conventions for inverse trigonometric functions,
    which is to append an `a` to the front of the function’s name. For example, the
    inverse cosine, or arc cosine, is called `acos()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: trigsimp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To simplify expressions using trigonometric identities, use `trigsimp()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`trigsimp()` also works with hyperbolic trig functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Much like `simplify()`, `trigsimp()` applies various trigonometric identities
    to the input expression, and then uses a heuristic to return the “best” one.
  prefs: []
  type: TYPE_NORMAL
- en: expand_trig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To expand trigonometric functions, that is, apply the sum or double angle identities,
    use `expand_trig()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Because `expand_trig()` tends to make trigonometric expressions larger, and
    `trigsimp()` tends to make them smaller, these identities can be applied in reverse
    using `trigsimp()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Powers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we introduce the power simplification functions, a mathematical discussion
    on the identities held by powers is in order. There are three kinds of identities
    satisfied by exponents
  prefs: []
  type: TYPE_NORMAL
- en: \(x^ax^b = x^{a + b}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(x^ay^a = (xy)^a\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \((x^a)^b = x^{ab}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identity 1 is always true.
  prefs: []
  type: TYPE_NORMAL
- en: Identity 2 is not always true. For example, if \(x = y = -1\) and \(a = \frac{1}{2}\),
    then \(x^ay^a = \sqrt{-1}\sqrt{-1} = i\cdot i = -1\), whereas \((xy)^a = \sqrt{-1\cdot-1}
    = \sqrt{1} = 1\). However, identity 2 is true at least if \(x\) and \(y\) are
    nonnegative and \(a\) is real (it may also be true under other conditions as well).
    A common consequence of the failure of identity 2 is that \(\sqrt{x}\sqrt{y} \neq
    \sqrt{xy}\).
  prefs: []
  type: TYPE_NORMAL
- en: Identity 3 is not always true. For example, if \(x = -1\), \(a = 2\), and \(b
    = \frac{1}{2}\), then \((x^a)^b = {\left((-1)^2\right)}^{1/2} = \sqrt{1} = 1\)
    and \(x^{ab} = (-1)^{2\cdot1/2} = (-1)^1 = -1\). However, identity 3 is true when
    \(b\) is an integer (again, it may also hold in other cases as well). Two common
    consequences of the failure of identity 3 are that \(\sqrt{x^2}\neq x\) and that
    \(\sqrt{\frac{1}{x}} \neq \frac{1}{\sqrt{x}}\).
  prefs: []
  type: TYPE_NORMAL
- en: To summarize
  prefs: []
  type: TYPE_NORMAL
- en: '| Identity | Sufficient conditions to hold | Counterexample when conditions
    are not met | Important consequences |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: \(x^ax^b = x^{a + b}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Always true | None | None |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: \(x^ay^a = (xy)^a\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| \(x, y \geq 0\) and \(a \in \mathbb{R}\) | \((-1)^{1/2}(-1)^{1/2} \neq (-1\cdot-1)^{1/2}\)
    | \(\sqrt{x}\sqrt{y} \neq \sqrt{xy}\) in general |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: \((x^a)^b = x^{ab}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| \(b \in \mathbb{Z}\) | \({\left((-1)^2\right)}^{1/2} \neq (-1)^{2\cdot1/2}\)
    | \(\sqrt{x^2}\neq x\) and \(\sqrt{\frac{1}{x}}\neq\frac{1}{\sqrt{x}}\) in general
    |'
  prefs: []
  type: TYPE_TB
- en: This is important to remember, because by default, SymPy will not perform simplifications
    if they are not true in general.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make SymPy perform simplifications involving identities that are
    only true under certain assumptions, we need to put assumptions on our Symbols.
    We will undertake a full discussion of the assumptions system later, but for now,
    all we need to know are the following.
  prefs: []
  type: TYPE_NORMAL
- en: By default, SymPy Symbols are assumed to be complex (elements of \(\mathbb{C}\)).
    That is, a simplification will not be applied to an expression with a given Symbol
    unless it holds for all complex numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbols can be given different assumptions by passing the assumption to `symbols()`.
    For the rest of this section, we will be assuming that `x` and `y` are positive,
    and that `a` and `b` are real. We will leave `z`, `t`, and `c` as arbitrary complex
    Symbols to demonstrate what happens in that case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In SymPy, `sqrt(x)` is just a shortcut to `x**Rational(1, 2)`. They are exactly
    the same object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: powsimp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`powsimp()` applies identities 1 and 2 from above, from left to right.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `powsimp()` refuses to do the simplification if it is not valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you know that you want to apply this simplification, but you don’t want to
    mess with assumptions, you can pass the `force=True` flag. This will force the
    simplification to take place, regardless of assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that in some instances, in particular, when the exponents are integers
    or rational numbers, and identity 2 holds, it will be applied automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This means that it will be impossible to undo this identity with `powsimp()`,
    because even if `powsimp()` were to put the bases together, they would be automatically
    split apart again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: expand_power_exp / expand_power_base
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`expand_power_exp()` and `expand_power_base()` apply identities 1 and 2 from
    right to left, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As with `powsimp()`, identity 2 is not applied if it is not valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: And as with `powsimp()`, you can force the expansion to happen without fiddling
    with assumptions by using `force=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As with identity 2, identity 1 is applied automatically if the power is a number,
    and hence cannot be undone with `expand_power_exp()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: powdenest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`powdenest()` applies identity 3, from left to right.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As before, the identity is not applied if it is not true under the given assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: And as before, this can be manually overridden with `force=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Exponentials and logarithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In SymPy, as in Python and most programming languages, `log` is the natural
    logarithm, also known as `ln`. SymPy automatically provides an alias `ln = log`
    in case you forget this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Logarithms have similar issues as powers. There are two main identities
  prefs: []
  type: TYPE_NORMAL
- en: \(\log{(xy)} = \log{(x)} + \log{(y)}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\log{(x^n)} = n\log{(x)}\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Neither identity is true for arbitrary complex \(x\) and \(y\), due to the branch
    cut in the complex plane for the complex logarithm. However, sufficient conditions
    for the identities to hold are if \(x\) and \(y\) are positive and \(n\) is real.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As before, `z` and `t` will be Symbols with no additional assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the identity \(\log{\left(\frac{x}{y}\right)} = \log(x) - \log(y)\)
    is a special case of identities 1 and 2 by \(\log{\left(\frac{x}{y}\right)} =\)
    \(\log{\left(x\cdot\frac{1}{y}\right)} =\) \(\log(x) + \log{\left( y^{-1}\right)}
    =\) \(\log(x) - \log(y)\), and thus it also holds if \(x\) and \(y\) are positive,
    but may not hold in general.
  prefs: []
  type: TYPE_NORMAL
- en: We also see that \(\log{\left( e^x \right)} = x\) comes from \(\log{\left( e^x
    \right)} = x\log(e) = x\), and thus holds when \(x\) is real (and it can be verified
    that it does not hold in general for arbitrary complex \(x\), for example, \(\log{\left(e^{x
    + 2\pi i}\right)} = \log{\left(e^x\right)} = x \neq x + 2\pi i\)).
  prefs: []
  type: TYPE_NORMAL
- en: expand_log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To apply identities 1 and 2 from left to right, use `expand_log()`. As always,
    the identities will not be applied unless they are valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As with `powsimp()` and `powdenest()`, `expand_log()` has a `force` option that
    can be used to ignore assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: logcombine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To apply identities 1 and 2 from right to left, use `logcombine()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`logcombine()` also has a `force` option that can be used to ignore assumptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Special Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SymPy implements dozens of special functions, ranging from functions in combinatorics
    to mathematical physics.
  prefs: []
  type: TYPE_NORMAL
- en: An extensive list of the special functions included with SymPy and their documentation
    is at the [Functions Module](../../modules/functions/index.html#functions-contents)
    page.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this tutorial, let’s introduce a few special functions in
    SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define `x`, `y`, and `z` as regular, complex Symbols, removing any assumptions
    we put on them in the previous section. We will also define `k`, `m`, and `n`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The [factorial](https://en.wikipedia.org/wiki/Factorial) function is `factorial`.
    `factorial(n)` represents \(n!= 1\cdot2\cdots(n - 1)\cdot n\). \(n!\) represents
    the number of permutations of \(n\) distinct items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The [binomial coefficient](https://en.wikipedia.org/wiki/Binomial_coefficient)
    function is `binomial`. `binomial(n, k)` represents \(\binom{n}{k}\), the number
    of ways to choose \(k\) items from a set of \(n\) distinct items. It is also often
    written as \(nCk\), and is pronounced “\(n\) choose \(k\)”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The factorial function is closely related to the [gamma function](https://en.wikipedia.org/wiki/Gamma_function),
    `gamma`. `gamma(z)` represents \(\Gamma(z) = \int_0^\infty t^{z - 1}e^{-t}\,dt\),
    which for positive integer \(z\) is the same as \((z - 1)!\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The [generalized hypergeometric function](https://en.wikipedia.org/wiki/Generalized_hypergeometric_function)
    is `hyper`. `hyper([a_1, ..., a_p], [b_1, ..., b_q], z)` represents \({}_pF_q\left(\begin{matrix}
    a_1, \cdots, a_p \\ b_1, \cdots, b_q \end{matrix} \middle| z \right)\). The most
    common case is \({}_2F_1\), which is often referred to as the [ordinary hypergeometric
    function](https://en.wikipedia.org/wiki/Hypergeometric_function).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: rewrite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common way to deal with special functions is to rewrite them in terms of one
    another. This works for any function in SymPy, not just special functions. To
    rewrite an expression in terms of a function, use `expr.rewrite(function)`. For
    example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: For some tips on applying more targeted rewriting, see the [Advanced Expression
    Manipulation](manipulation.html#tutorial-manipulation) section.
  prefs: []
  type: TYPE_NORMAL
- en: expand_func
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To expand special functions in terms of some identities, use `expand_func()`.
    For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: hyperexpand
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To rewrite `hyper` in terms of more standard functions, use `hyperexpand()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`hyperexpand()` also works on the more general Meijer G-function (see [`its
    documentation`](../../modules/functions/special.html#sympy.functions.special.hyper.meijerg
    "sympy.functions.special.hyper.meijerg") for more information).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: combsimp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To simplify combinatorial expressions, use `combsimp()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: gammasimp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To simplify expressions with gamma functions or combinatorial functions with
    non-integer argument, use `gammasimp()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Example: Continued Fractions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use SymPy to explore continued fractions. A [continued fraction](https://en.wikipedia.org/wiki/Continued_fraction)
    is an expression of the form
  prefs: []
  type: TYPE_NORMAL
- en: \[a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 + \cfrac{1}{ \ddots + \cfrac{1}{a_n} }}}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(a_0, \ldots, a_n\) are integers, and \(a_1, \ldots, a_n\) are positive.
    A continued fraction can also be infinite, but infinite objects are more difficult
    to represent in computers, so we will only examine the finite case here.
  prefs: []
  type: TYPE_NORMAL
- en: A continued fraction of the above form is often represented as a list \([a_0;
    a_1, \ldots, a_n]\). Let’s write a simple function that converts such a list to
    its continued fraction form. The easiest way to construct a continued fraction
    from a list is to work backwards. Note that despite the apparent symmetry of the
    definition, the first element, \(a_0\), must usually be handled differently from
    the rest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We use `Integer(0)` in `list_to_frac` so that the result will always be a SymPy
    object, even if we only pass in Python ints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Every finite continued fraction is a rational number, but we are interested
    in symbolics here, so let’s create a symbolic continued fraction. The `symbols()`
    function that we have been using has a shortcut to create numbered symbols. `symbols('a0:5')`
    will create the symbols `a0`, `a1`, …, `a4`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This form is useful for understanding continued fractions, but lets put it into
    standard rational function form using `cancel()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Now suppose we were given `frac` in the above canceled form. In fact, we might
    be given the fraction in any form, but we can always put it into the above canonical
    form with `cancel()`. Suppose that we knew that it could be rewritten as a continued
    fraction. How could we do this with SymPy? A continued fraction is recursively
    \(c + \frac{1}{f}\), where \(c\) is an integer and \(f\) is a (smaller) continued
    fraction. If we could write the expression in this form, we could pull out each
    \(c\) recursively and add it to a list. We could then get a continued fraction
    with our `list_to_frac()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The key observation here is that we can convert an expression to the form \(c
    + \frac{1}{f}\) by doing a partial fraction decomposition with respect to \(c\).
    This is because \(f\) does not contain \(c\). This means we need to use the `apart()`
    function. We use `apart()` to pull the term out, then subtract it from the expression,
    and take the reciprocal to get the \(f\) part.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now we repeat this process
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Of course, this exercise seems pointless, because we already know that our `frac`
    is `list_to_frac([a0, a1, a2, a3, a4])`. So try the following exercise. Take a
    list of symbols and randomize them, and create the canceled continued fraction,
    and see if you can reproduce the original list. For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In SymPy, on the above example, try to reproduce `l` from `frac`. I have deleted
    `l` at the end to remove the temptation for peeking (you can check your answer
    at the end by calling `cancel(list_to_frac(l))` on the list that you generate
    at the end, and comparing it to `orig_frac`.
  prefs: []
  type: TYPE_NORMAL
- en: 'See if you can think of a way to figure out what symbol to pass to `apart()`
    at each stage (hint: think of what happens to \(a_0\) in the formula \(a_0 + \frac{1}{a_1
    + \cdots}\) when it is canceled).'
  prefs: []
  type: TYPE_NORMAL
