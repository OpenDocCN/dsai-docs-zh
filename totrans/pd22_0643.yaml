- en: pandas.Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.Index.html](https://pandas.pydata.org/docs/reference/api/pandas.Index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Immutable sequence used for indexing and alignment.
  prefs: []
  type: TYPE_NORMAL
- en: The basic object storing axis labels for all pandas objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: Index can hold all numpy numeric dtypes (except float16).
    Previously only int64/uint64/float64 dtypes were accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array-like (1-dimensional)'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str, numpy.dtype, or ExtensionDtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data type for the output Index. If not specified, this will be inferred from
    data. See the [user guide](../../user_guide/basics.html#basics-dtypes) for more
    usages.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Copy input data.
  prefs: []
  type: TYPE_NORMAL
- en: '**name**object'
  prefs: []
  type: TYPE_NORMAL
- en: Name to be stored in the index.
  prefs: []
  type: TYPE_NORMAL
- en: '**tupleize_cols**bool (default: True)'
  prefs: []
  type: TYPE_NORMAL
- en: When True, attempt to create a MultiIndex if possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`RangeIndex`](pandas.RangeIndex.html#pandas.RangeIndex "pandas.RangeIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Index implementing a monotonic integer range.
  prefs: []
  type: TYPE_NORMAL
- en: '[`CategoricalIndex`](pandas.CategoricalIndex.html#pandas.CategoricalIndex "pandas.CategoricalIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Index of [`Categorical`](pandas.Categorical.html#pandas.Categorical "pandas.Categorical")
    s.
  prefs: []
  type: TYPE_NORMAL
- en: '[`MultiIndex`](pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: A multi-level, or hierarchical Index.
  prefs: []
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](pandas.IntervalIndex.html#pandas.IntervalIndex "pandas.IntervalIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: An Index of [`Interval`](pandas.Interval.html#pandas.Interval "pandas.Interval")
    s.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Index of datetime64 data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`TimedeltaIndex`](pandas.TimedeltaIndex.html#pandas.TimedeltaIndex "pandas.TimedeltaIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Index of timedelta64 data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PeriodIndex`](pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Index of Period data.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: An Index instance can **only** contain hashable objects. An Index instance *can
    not* hold numpy float16 dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`T`](pandas.Index.T.html#pandas.Index.T "pandas.Index.T") | Return the transpose,
    which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| `array` | The ExtensionArray of the data backing this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype`](pandas.Index.dtype.html#pandas.Index.dtype "pandas.Index.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`empty`](pandas.Index.empty.html#pandas.Index.empty "pandas.Index.empty")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`has_duplicates`](pandas.Index.has_duplicates.html#pandas.Index.has_duplicates
    "pandas.Index.has_duplicates") | Check if the Index has duplicate values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hasnans`](pandas.Index.hasnans.html#pandas.Index.hasnans "pandas.Index.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`inferred_type`](pandas.Index.inferred_type.html#pandas.Index.inferred_type
    "pandas.Index.inferred_type") | Return a string of the type inferred from the
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_monotonic_decreasing`](pandas.Index.is_monotonic_decreasing.html#pandas.Index.is_monotonic_decreasing
    "pandas.Index.is_monotonic_decreasing") | Return a boolean if the values are equal
    or decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_monotonic_increasing`](pandas.Index.is_monotonic_increasing.html#pandas.Index.is_monotonic_increasing
    "pandas.Index.is_monotonic_increasing") | Return a boolean if the values are equal
    or increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_unique`](pandas.Index.is_unique.html#pandas.Index.is_unique "pandas.Index.is_unique")
    | Return if the index has unique values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`name`](pandas.Index.name.html#pandas.Index.name "pandas.Index.name") |
    Return Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`names`](pandas.Index.names.html#pandas.Index.names "pandas.Index.names")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbytes`](pandas.Index.nbytes.html#pandas.Index.nbytes "pandas.Index.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndim`](pandas.Index.ndim.html#pandas.Index.ndim "pandas.Index.ndim") |
    Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| `nlevels` | Number of levels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shape`](pandas.Index.shape.html#pandas.Index.shape "pandas.Index.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`size`](pandas.Index.size.html#pandas.Index.size "pandas.Index.size") |
    Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`values`](pandas.Index.values.html#pandas.Index.values "pandas.Index.values")
    | Return an array representing the data in the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`all`](pandas.Index.all.html#pandas.Index.all "pandas.Index.all")(*args, **kwargs)
    | Return whether all elements are Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](pandas.Index.any.html#pandas.Index.any "pandas.Index.any")(*args, **kwargs)
    | Return whether any element is Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`append`](pandas.Index.append.html#pandas.Index.append "pandas.Index.append")(other)
    | Append a collection of Index options together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](pandas.Index.argmax.html#pandas.Index.argmax "pandas.Index.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](pandas.Index.argmin.html#pandas.Index.argmin "pandas.Index.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](pandas.Index.argsort.html#pandas.Index.argsort "pandas.Index.argsort")(*args, **kwargs)
    | Return the integer indices that would sort the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asof`](pandas.Index.asof.html#pandas.Index.asof "pandas.Index.asof")(label)
    | Return the label from the index, or, if not present, the previous one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asof_locs`](pandas.Index.asof_locs.html#pandas.Index.asof_locs "pandas.Index.asof_locs")(where, mask)
    | Return the locations (indices) of labels in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](pandas.Index.astype.html#pandas.Index.astype "pandas.Index.astype")(dtype[, copy])
    | Create an Index with values cast to dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](pandas.Index.copy.html#pandas.Index.copy "pandas.Index.copy")([name, deep])
    | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`delete`](pandas.Index.delete.html#pandas.Index.delete "pandas.Index.delete")(loc)
    | Make new Index with passed location(-s) deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| `diff`([periods]) | Computes the difference between consecutive values in
    the Index object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`difference`](pandas.Index.difference.html#pandas.Index.difference "pandas.Index.difference")(other[, sort])
    | Return a new Index with elements of index not in other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`drop`](pandas.Index.drop.html#pandas.Index.drop "pandas.Index.drop")(labels[, errors])
    | Make new Index with passed list of labels deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`drop_duplicates`](pandas.Index.drop_duplicates.html#pandas.Index.drop_duplicates
    "pandas.Index.drop_duplicates")(*[, keep]) | Return Index with duplicate values
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`droplevel`](pandas.Index.droplevel.html#pandas.Index.droplevel "pandas.Index.droplevel")([level])
    | Return index with requested level(s) removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dropna`](pandas.Index.dropna.html#pandas.Index.dropna "pandas.Index.dropna")([how])
    | Return Index without NA/NaN values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`duplicated`](pandas.Index.duplicated.html#pandas.Index.duplicated "pandas.Index.duplicated")([keep])
    | Indicate duplicate index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`equals`](pandas.Index.equals.html#pandas.Index.equals "pandas.Index.equals")(other)
    | Determine if two Index object are equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`factorize`](pandas.Index.factorize.html#pandas.Index.factorize "pandas.Index.factorize")([sort, use_na_sentinel])
    | Encode the object as an enumerated type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fillna`](pandas.Index.fillna.html#pandas.Index.fillna "pandas.Index.fillna")([value, downcast])
    | Fill NA/NaN values with the specified value. |'
  prefs: []
  type: TYPE_TB
- en: '| `format`([name, formatter, na_rep]) | Render a string representation of the
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_indexer`](pandas.Index.get_indexer.html#pandas.Index.get_indexer "pandas.Index.get_indexer")(target[, method, limit, tolerance])
    | Compute indexer and mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_indexer_for`](pandas.Index.get_indexer_for.html#pandas.Index.get_indexer_for
    "pandas.Index.get_indexer_for")(target) | Guaranteed return of an indexer even
    when non-unique. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_indexer_non_unique`](pandas.Index.get_indexer_non_unique.html#pandas.Index.get_indexer_non_unique
    "pandas.Index.get_indexer_non_unique")(target) | Compute indexer and mask for
    new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_level_values`](pandas.Index.get_level_values.html#pandas.Index.get_level_values
    "pandas.Index.get_level_values")(level) | Return an Index of values for requested
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_loc`](pandas.Index.get_loc.html#pandas.Index.get_loc "pandas.Index.get_loc")(key)
    | Get integer location, slice or boolean mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_slice_bound`](pandas.Index.get_slice_bound.html#pandas.Index.get_slice_bound
    "pandas.Index.get_slice_bound")(label, side) | Calculate slice bound that corresponds
    to given label. |'
  prefs: []
  type: TYPE_TB
- en: '| `groupby`(values) | Group the index labels by a given array of values. |'
  prefs: []
  type: TYPE_TB
- en: '| `holds_integer`() | (DEPRECATED) Whether the type is an integer type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`identical`](pandas.Index.identical.html#pandas.Index.identical "pandas.Index.identical")(other)
    | Similar to equals, but checks that object attributes and types are also equal.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `infer_objects`([copy]) | If we have an object dtype, try to infer a non-object
    dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`insert`](pandas.Index.insert.html#pandas.Index.insert "pandas.Index.insert")(loc, item)
    | Make new Index inserting new item at location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`intersection`](pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection")(other[, sort]) | Form the intersection of two Index
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_`](pandas.Index.is_.html#pandas.Index.is_ "pandas.Index.is_")(other)
    | More flexible, faster check like `is` but that works through views. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_boolean`](pandas.Index.is_boolean.html#pandas.Index.is_boolean "pandas.Index.is_boolean")()
    | (DEPRECATED) Check if the Index only consists of booleans. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_categorical`](pandas.Index.is_categorical.html#pandas.Index.is_categorical
    "pandas.Index.is_categorical")() | (DEPRECATED) Check if the Index holds categorical
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_floating`](pandas.Index.is_floating.html#pandas.Index.is_floating "pandas.Index.is_floating")()
    | (DEPRECATED) Check if the Index is a floating type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_integer`](pandas.Index.is_integer.html#pandas.Index.is_integer "pandas.Index.is_integer")()
    | (DEPRECATED) Check if the Index only consists of integers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_interval`](pandas.Index.is_interval.html#pandas.Index.is_interval "pandas.Index.is_interval")()
    | (DEPRECATED) Check if the Index holds Interval objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_numeric`](pandas.Index.is_numeric.html#pandas.Index.is_numeric "pandas.Index.is_numeric")()
    | (DEPRECATED) Check if the Index only consists of numeric data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_object`](pandas.Index.is_object.html#pandas.Index.is_object "pandas.Index.is_object")()
    | (DEPRECATED) Check if the Index is of the object dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isin`](pandas.Index.isin.html#pandas.Index.isin "pandas.Index.isin")(values[, level])
    | Return a boolean array where the index values are in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isna`](pandas.Index.isna.html#pandas.Index.isna "pandas.Index.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| `isnull`() | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`item`](pandas.Index.item.html#pandas.Index.item "pandas.Index.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`join`](pandas.Index.join.html#pandas.Index.join "pandas.Index.join")(other, *[, how, level, ...])
    | Compute join_index and indexers to conform data structures to the new index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`map`](pandas.Index.map.html#pandas.Index.map "pandas.Index.map")(mapper[, na_action])
    | Map values using an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](pandas.Index.max.html#pandas.Index.max "pandas.Index.max")([axis, skipna])
    | Return the maximum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`memory_usage`](pandas.Index.memory_usage.html#pandas.Index.memory_usage
    "pandas.Index.memory_usage")([deep]) | Memory usage of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](pandas.Index.min.html#pandas.Index.min "pandas.Index.min")([axis, skipna])
    | Return the minimum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`notna`](pandas.Index.notna.html#pandas.Index.notna "pandas.Index.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| `notnull`() | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nunique`](pandas.Index.nunique.html#pandas.Index.nunique "pandas.Index.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`putmask`](pandas.Index.putmask.html#pandas.Index.putmask "pandas.Index.putmask")(mask, value)
    | Return a new Index of the values set with the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](pandas.Index.ravel.html#pandas.Index.ravel "pandas.Index.ravel")([order])
    | Return a view on self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reindex`](pandas.Index.reindex.html#pandas.Index.reindex "pandas.Index.reindex")(target[, method, level, limit, ...])
    | Create index with target''s values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rename`](pandas.Index.rename.html#pandas.Index.rename "pandas.Index.rename")(name, *[, inplace])
    | Alter Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](pandas.Index.repeat.html#pandas.Index.repeat "pandas.Index.repeat")(repeats[, axis])
    | Repeat elements of a Index. |'
  prefs: []
  type: TYPE_TB
- en: '| `round`([decimals]) | Round each value in the Index to the given number of
    decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_names`](pandas.Index.set_names.html#pandas.Index.set_names "pandas.Index.set_names")(names, *[, level, inplace])
    | Set Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shift`](pandas.Index.shift.html#pandas.Index.shift "pandas.Index.shift")([periods, freq])
    | Shift index by desired number of time frequency increments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`slice_indexer`](pandas.Index.slice_indexer.html#pandas.Index.slice_indexer
    "pandas.Index.slice_indexer")([start, end, step]) | Compute the slice indexer
    for input labels and step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`slice_locs`](pandas.Index.slice_locs.html#pandas.Index.slice_locs "pandas.Index.slice_locs")([start, end, step])
    | Compute slice locations for input labels. |'
  prefs: []
  type: TYPE_TB
- en: '| `sort`(*args, **kwargs) | Use sort_values instead. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort_values`](pandas.Index.sort_values.html#pandas.Index.sort_values "pandas.Index.sort_values")(*[, return_indexer, ascending, ...])
    | Return a sorted copy of the index. |'
  prefs: []
  type: TYPE_TB
- en: '| `sortlevel`([level, ascending, ...]) | For internal compatibility with the
    Index API. |'
  prefs: []
  type: TYPE_TB
- en: '| [`symmetric_difference`](pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference")(other[, result_name, sort]) | Compute the
    symmetric difference of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take`](pandas.Index.take.html#pandas.Index.take "pandas.Index.take")(indices[, axis, allow_fill, fill_value])
    | Return a new Index of the values selected by the indices. |'
  prefs: []
  type: TYPE_TB
- en: '| `to_flat_index`() | Identity method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_frame`](pandas.Index.to_frame.html#pandas.Index.to_frame "pandas.Index.to_frame")([index, name])
    | Create a DataFrame with a column containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_list`](pandas.Index.to_list.html#pandas.Index.to_list "pandas.Index.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| `to_numpy`([dtype, copy, na_value]) | A NumPy ndarray representing the values
    in this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_series`](pandas.Index.to_series.html#pandas.Index.to_series "pandas.Index.to_series")([index, name])
    | Create a Series with both index and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| `tolist`() | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| `transpose`(*args, **kwargs) | Return the transpose, which is by definition
    self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`union`](pandas.Index.union.html#pandas.Index.union "pandas.Index.union")(other[, sort])
    | Form the union of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unique`](pandas.Index.unique.html#pandas.Index.unique "pandas.Index.unique")([level])
    | Return unique values in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`value_counts`](pandas.Index.value_counts.html#pandas.Index.value_counts
    "pandas.Index.value_counts")([normalize, sort, ascending, ...]) | Return a Series
    containing counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`view`](pandas.Index.view.html#pandas.Index.view "pandas.Index.view")([cls])
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`where`](pandas.Index.where.html#pandas.Index.where "pandas.Index.where")(cond[, other])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
