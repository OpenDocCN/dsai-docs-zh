- en: scipy.optimize.linear_sum_assignment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.linear_sum_assignment
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.linear_sum_assignment.html#scipy.optimize.linear_sum_assignment)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Solve the linear sum assignment problem.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 解决线性和分配问题。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**cost_matrix**array'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**cost_matrix**数组'
- en: The cost matrix of the bipartite graph.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 二分图的成本矩阵。
- en: '**maximize**bool (default: False)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**maximize**布尔值（默认为False）'
- en: Calculates a maximum weight matching if true.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 计算最大权重匹配是否为真。
- en: 'Returns:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**row_ind, col_ind**array'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**row_ind, col_ind**数组'
- en: An array of row indices and one of corresponding column indices giving the optimal
    assignment. The cost of the assignment can be computed as `cost_matrix[row_ind,
    col_ind].sum()`. The row indices will be sorted; in the case of a square cost
    matrix they will be equal to `numpy.arange(cost_matrix.shape[0])`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含行索引和相应列索引的数组，给出最优分配。可以计算分配的成本为`cost_matrix[row_ind, col_ind].sum()`。行索引将被排序；在方形成本矩阵的情况下，它们将等于`numpy.arange(cost_matrix.shape[0])`。
- en: See also
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`scipy.sparse.csgraph.min_weight_full_bipartite_matching`](scipy.sparse.csgraph.min_weight_full_bipartite_matching.html#scipy.sparse.csgraph.min_weight_full_bipartite_matching
    "scipy.sparse.csgraph.min_weight_full_bipartite_matching")'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.sparse.csgraph.min_weight_full_bipartite_matching`](scipy.sparse.csgraph.min_weight_full_bipartite_matching.html#scipy.sparse.csgraph.min_weight_full_bipartite_matching
    "scipy.sparse.csgraph.min_weight_full_bipartite_matching")'
- en: for sparse inputs
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用于稀疏输入
- en: Notes
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The linear sum assignment problem [[1]](#rc35ed51944ec-1) is also known as minimum
    weight matching in bipartite graphs. A problem instance is described by a matrix
    C, where each C[i,j] is the cost of matching vertex i of the first partite set
    (a ‘worker’) and vertex j of the second set (a ‘job’). The goal is to find a complete
    assignment of workers to jobs of minimal cost.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 线性和分配问题[[1]](#rc35ed51944ec-1)也称为双分图中的最小权重匹配。问题实例由矩阵C描述，其中每个C[i,j]是第一部分集合的顶点i（一个“工作者”）和第二部分集合的顶点j（一个“工作”）匹配的成本。目标是找到最小成本的工作者与工作的完全分配。
- en: Formally, let X be a boolean matrix where \(X[i,j] = 1\) iff row i is assigned
    to column j. Then the optimal assignment has cost
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 形式上，设X是一个布尔矩阵，其中\(X[i,j] = 1\)当且仅当第i行分配给第j列。然后，最优分配的成本为
- en: \[\min \sum_i \sum_j C_{i,j} X_{i,j}\]
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: \[\min \sum_i \sum_j C_{i,j} X_{i,j}\]
- en: where, in the case where the matrix X is square, each row is assigned to exactly
    one column, and each column to exactly one row.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在矩阵X是方形的情况下，每行被分配给恰好一个列，每列被分配给恰好一个行。
- en: This function can also solve a generalization of the classic assignment problem
    where the cost matrix is rectangular. If it has more rows than columns, then not
    every row needs to be assigned to a column, and vice versa.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可以解决经典分配问题的一般化，其中成本矩阵是矩形的。如果它的行数多于列数，则不需要将每行都分配给列，反之亦然。
- en: This implementation is a modified Jonker-Volgenant algorithm with no initialization,
    described in ref. [[2]](#rc35ed51944ec-2).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现是一个修改的Jonker-Volgenant算法，没有初始化，描述在参考文献中。[[2]](#rc35ed51944ec-2)。
- en: New in version 0.17.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 0.17.0版中的新功能。
- en: References
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[1](#id1)]'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: '[https://en.wikipedia.org/wiki/Assignment_problem](https://en.wikipedia.org/wiki/Assignment_problem)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Assignment_problem](https://en.wikipedia.org/wiki/Assignment_problem)'
- en: '[[2](#id2)]'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id2)]'
- en: DF Crouse. On implementing 2D rectangular assignment algorithms. *IEEE Transactions
    on Aerospace and Electronic Systems*, 52(4):1679-1696, August 2016, [DOI:10.1109/TAES.2016.140952](https://doi.org/10.1109/TAES.2016.140952)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: DF Crouse. On implementing 2D rectangular assignment algorithms. *IEEE Transactions
    on Aerospace and Electronic Systems*, 52(4):1679-1696, August 2016, [DOI:10.1109/TAES.2016.140952](https://doi.org/10.1109/TAES.2016.140952)
- en: Examples
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
