- en: N-dim array
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: N维数组
- en: Original text：[https://docs.sympy.org/latest/modules/tensor/array.html](https://docs.sympy.org/latest/modules/tensor/array.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/tensor/array.html](https://docs.sympy.org/latest/modules/tensor/array.html)
- en: N-dim array module for SymPy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy的N维数组模块。
- en: Four classes are provided to handle N-dim arrays, given by the combinations
    dense/sparse (i.e. whether to store all elements or only the non-zero ones in
    memory) and mutable/immutable (immutable classes are SymPy objects, but cannot
    change after they have been created).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了四个类来处理N维数组，根据稠密/稀疏（即是否将所有元素或仅非零元素存储在内存中）和可变/不可变的组合（不可变类是SymPy对象，但在创建后不能更改）。
- en: Examples
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: The following examples show the usage of `Array`. This is an abbreviation for
    `ImmutableDenseNDimArray`, that is an immutable and dense N-dim array, the other
    classes are analogous. For mutable classes it is also possible to change element
    values after the object has been constructed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了`Array`的使用。这是`ImmutableDenseNDimArray`的缩写，即一个不可变的稠密N维数组，其他类似。
- en: 'Array construction can detect the shape of nested lists and tuples:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可以检测嵌套列表和元组的形状来构造数组
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Otherwise one could pass a 1-dim array followed by a shape tuple:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以传递一个1维数组，然后是一个形状元组：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Slice support:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 切片支持：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Elementwise derivative:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按元素求导：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Multiplication with other SymPy expressions is applied elementwisely:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他SymPy表达式的乘法是按元素应用的：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To apply a function to each element of the N-dim array, use `applyfunc`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 若要对N维数组的每个元素应用函数，请使用`applyfunc`：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'N-dim arrays can be converted to nested lists by the `tolist()` method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: N维数组可以通过`tolist()`方法转换为嵌套列表：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the rank is 2, it is possible to convert them to matrices with `tomatrix()`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果秩为2，可以用`tomatrix()`将它们转换为矩阵：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Products and contractions
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 乘积和收缩
- en: Tensor product between arrays \(A_{i_1,\ldots,i_n}\) and \(B_{j_1,\ldots,j_m}\)
    creates the combined array \(P = A \otimes B\) defined as
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数组\(A_{i_1,\ldots,i_n}\)和\(B_{j_1,\ldots,j_m}\)之间的张量积创建定义为组合数组\(P = A \otimes
    B\)的张量积，定义为
- en: \(P_{i_1,\ldots,i_n,j_1,\ldots,j_m} := A_{i_1,\ldots,i_n}\cdot B_{j_1,\ldots,j_m}.\)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: \(P_{i_1,\ldots,i_n,j_1,\ldots,j_m} := A_{i_1,\ldots,i_n}\cdot B_{j_1,\ldots,j_m}.\)
- en: 'It is available through `tensorproduct(...)`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过`tensorproduct(...)`获得：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In case you don’t want to evaluate the tensor product immediately, you can
    use `ArrayTensorProduct`, which creates an unevaluated tensor product expression:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不想立即计算张量积，可以使用`ArrayTensorProduct`，它创建一个未评估的张量积表达式：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Calling `.as_explicit()` on `ArrayTensorProduct` is equivalent to just calling
    `tensorproduct(...)`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ArrayTensorProduct`上调用`.as_explicit()`相当于直接调用`tensorproduct(...)`：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Tensor product between a rank-1 array and a matrix creates a rank-3 array:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 秩为1的数组与矩阵的张量积创建一个秩为3的数组：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, to get back \(A_0 \otimes \mathbf{1}\) one can access \(p_{0,m,n}\) by
    slicing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要获取\(A_0 \otimes \mathbf{1}\)，可以通过切片访问\(p_{0,m,n}\)：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tensor contraction sums over the specified axes, for example contracting positions
    \(a\) and \(b\) means
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 张量收缩对指定的轴求和，例如收缩位置\(a\)和\(b\)意味着
- en: \(A_{i_1,\ldots,i_a,\ldots,i_b,\ldots,i_n} \implies \sum_k A_{i_1,\ldots,k,\ldots,k,\ldots,i_n}\)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: \(A_{i_1,\ldots,i_a,\ldots,i_b,\ldots,i_n} \implies \sum_k A_{i_1,\ldots,k,\ldots,k,\ldots,i_n}\)
- en: Remember that Python indexing is zero starting, to contract the a-th and b-th
    axes it is therefore necessary to specify \(a-1\) and \(b-1\)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Python索引从零开始，因此要收缩第a和第b个轴，需要指定\(a-1\)和\(b-1\)
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The matrix trace is equivalent to the contraction of a rank-2 array:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的迹等价于一个秩为2的数组的收缩：
- en: \(A_{m,n} \implies \sum_k A_{k,k}\)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: \(A_{m,n} \implies \sum_k A_{k,k}\)
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To create an expression representing a tensor contraction that does not get
    evaluated immediately, use `ArrayContraction`, which is equivalent to `tensorcontraction(...)`
    if it is followed by `.as_explicit()`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个表示不立即评估的张量收缩的表达式，请使用`ArrayContraction`，如果跟随`.as_explicit()`，则等效于`tensorcontraction(...)`：
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Matrix product is equivalent to a tensor product of two rank-2 arrays, followed
    by a contraction of the 2nd and 3rd axes (in Python indexing axes number 1, 2).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵乘积等价于两个秩为2的数组的张量积，然后收缩第2和第3个轴（在Python中索引轴号为1、2）。
- en: \(A_{m,n}\cdot B_{i,j} \implies \sum_k A_{m, k}\cdot B_{k, j}\)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: \(A_{m,n}\cdot B_{i,j} \implies \sum_k A_{m, k}\cdot B_{k, j}\)
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'One may verify that the matrix product is equivalent:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以验证矩阵乘积是等价的：
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: or equivalently
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者等价地
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Diagonal operator
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对角线操作符
- en: The `tensordiagonal` function acts in a similar manner as `tensorcontraction`,
    but the joined indices are not summed over, for example diagonalizing positions
    \(a\) and \(b\) means
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`tensordiagonal` 函数的行为方式与 `tensorcontraction` 类似，但连接的索引不进行求和，例如对位置 \(a\) 和
    \(b\) 进行对角化意味着'
- en: \(A_{i_1,\ldots,i_a,\ldots,i_b,\ldots,i_n} \implies A_{i_1,\ldots,k,\ldots,k,\ldots,i_n}
    \implies \tilde{A}_{i_1,\ldots,i_{a-1},i_{a+1},\ldots,i_{b-1},i_{b+1},\ldots,i_n,k}\)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: \(A_{i_1,\ldots,i_a,\ldots,i_b,\ldots,i_n} \implies A_{i_1,\ldots,k,\ldots,k,\ldots,i_n}
    \implies \tilde{A}_{i_1,\ldots,i_{a-1},i_{a+1},\ldots,i_{b-1},i_{b+1},\ldots,i_n,k}\)
- en: where \(\tilde{A}\) is the array equivalent to the diagonal of \(A\) at positions
    \(a\) and \(b\) moved to the last index slot.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(\tilde{A}\) 是在位置 \(a\) 和 \(b\) 移动到最后索引位置的 \(A\) 的对角化数组等价物。
- en: 'Compare the difference between contraction and diagonal operators:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 比较收缩和对角运算符之间的差异：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In short, no summation occurs with `tensordiagonal`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`tensordiagonal` 不会对加和进行求和。
- en: Derivatives by array
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过数组导数
- en: The usual derivative operation may be extended to support derivation with respect
    to arrays, provided that all elements in the that array are symbols or expressions
    suitable for derivations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 常规的导数操作可以扩展到支持对数组进行导数，前提是该数组中的所有元素都是符号或适合导数计算的表达式。
- en: 'The definition of a derivative by an array is as follows: given the array \(A_{i_1,
    \ldots, i_N}\) and the array \(X_{j_1, \ldots, j_M}\) the derivative of arrays
    will return a new array \(B\) defined by'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由数组定义的导数如下：给定数组 \(A_{i_1, \ldots, i_N}\) 和数组 \(X_{j_1, \ldots, j_M}\)，数组的导数将返回由新数组
    \(B\) 定义的新数组
- en: \(B_{j_1,\ldots,j_M,i_1,\ldots,i_N} := \frac{\partial A_{i_1,\ldots,i_N}}{\partial
    X_{j_1,\ldots,j_M}}\)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: \(B_{j_1,\ldots,j_M,i_1,\ldots,i_N} := \frac{\partial A_{i_1,\ldots,i_N}}{\partial
    X_{j_1,\ldots,j_M}}\)
- en: 'The function `derive_by_array` performs such an operation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `derive_by_array` 执行这样的操作：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With scalars, it behaves exactly as the ordinary derivative:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对标量而言，其行为与普通导数完全相同：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Scalar derived by an array basis:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 标量由数组基础推导：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Deriving array by an array basis: \(B^{nm} := \frac{\partial A^m}{\partial
    x^n}\)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过数组基础进行的导数：\(B^{nm} := \frac{\partial A^m}{\partial x^n}\)
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Contraction of the resulting array: \(\sum_m \frac{\partial A^m}{\partial x^m}\)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 收缩结果数组：\(\sum_m \frac{\partial A^m}{\partial x^m}\)
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Classes
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类：
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Functions
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数：
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Derivative by arrays. Supports both arrays and scalars.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由数组导数。支持数组和标量。
- en: The equivalent operator for array expressions is `array_derive`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表达式的等价运算符是 `array_derive`。
- en: Explanation
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Given the array \(A_{i_1, \ldots, i_N}\) and the array \(X_{j_1, \ldots, j_M}\)
    this function will return a new array \(B\) defined by
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 给定数组 \(A_{i_1, \ldots, i_N}\) 和数组 \(X_{j_1, \ldots, j_M}\)，此函数将返回由新数组 \(B\)
    定义的新数组
- en: \(B_{j_1,\ldots,j_M,i_1,\ldots,i_N} := \frac{\partial A_{i_1,\ldots,i_N}}{\partial
    X_{j_1,\ldots,j_M}}\)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: \(B_{j_1,\ldots,j_M,i_1,\ldots,i_N} := \frac{\partial A_{i_1,\ldots,i_N}}{\partial
    X_{j_1,\ldots,j_M}}\)
- en: Examples
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Permutes the indices of an array.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组的索引进行排列。
- en: Parameter specifies the permutation of the indices.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 参数指定索引的排列。
- en: The equivalent operator for array expressions is `PermuteDims`, which can be
    used to keep the expression unevaluated.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表达式的等价运算符是 `PermuteDims`，可用于保持表达式不被求值。
- en: Examples
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE32]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If the array is of second order, `transpose` can be used:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组是二阶的，可以使用 `transpose`：
- en: '[PRE33]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Examples on higher dimensions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 高维度的示例：
- en: '[PRE34]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'An alternative way to specify the same permutations as in the previous lines
    involves passing the *old* and *new* indices, either as a list or as a string:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 指定与前几行相同排列的另一种方法是将*旧*和*新*索引作为列表或字符串传递：
- en: '[PRE35]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`Permutation` objects are also allowed:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Permutation` 对象也是允许的：'
- en: '[PRE36]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See also
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[`sympy.tensor.array.expressions.array_expressions.PermuteDims`](array_expressions.html#sympy.tensor.array.expressions.PermuteDims
    "sympy.tensor.array.expressions.array_expressions.PermuteDims")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.tensor.array.expressions.array_expressions.PermuteDims`](array_expressions.html#sympy.tensor.array.expressions.PermuteDims
    "sympy.tensor.array.expressions.array_expressions.PermuteDims")'
- en: '[PRE37]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Contraction of an array-like object on the specified axes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定轴上收缩类似数组对象。
- en: The equivalent operator for array expressions is `ArrayContraction`, which can
    be used to keep the expression unevaluated.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表达式的等价运算符是 `ArrayContraction`，可用于保持表达式不被求值。
- en: Examples
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE38]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Matrix multiplication may be emulated with a proper combination of `tensorcontraction`
    and `tensorproduct`
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过适当的 `tensorcontraction` 和 `tensorproduct` 组合来模拟矩阵乘法
- en: '[PRE39]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: See also
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[`sympy.tensor.array.expressions.array_expressions.ArrayContraction`](array_expressions.html#sympy.tensor.array.expressions.ArrayContraction
    "sympy.tensor.array.expressions.array_expressions.ArrayContraction")'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.tensor.array.expressions.array_expressions.ArrayContraction`](array_expressions.html#sympy.tensor.array.expressions.ArrayContraction
    "sympy.tensor.array.expressions.array_expressions.ArrayContraction")'
- en: '[PRE40]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tensor product among scalars or array-like objects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 标量或类数组对象之间的张量积。
- en: The equivalent operator for array expressions is `ArrayTensorProduct`, which
    can be used to keep the expression unevaluated.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表达式的等效运算符是`ArrayTensorProduct`，可以用来保持表达式不求值。
- en: Examples
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE41]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Applying this function on two matrices will result in a rank 4 array.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个矩阵上应用此函数将导致一个秩为 4 的数组。
- en: '[PRE42]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: See also
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct`](array_expressions.html#sympy.tensor.array.expressions.ArrayTensorProduct
    "sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct")'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct`](array_expressions.html#sympy.tensor.array.expressions.ArrayTensorProduct
    "sympy.tensor.array.expressions.array_expressions.ArrayTensorProduct")'
- en: '[PRE43]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Diagonalization of an array-like object on the specified axes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对指定轴上的类数组对象进行对角化。
- en: This is equivalent to multiplying the expression by Kronecker deltas uniting
    the axes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于将表达式乘以克罗内克三角形单位化的轴。
- en: The diagonal indices are put at the end of the axes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对角线索引被放在轴的末尾。
- en: The equivalent operator for array expressions is `ArrayDiagonal`, which can
    be used to keep the expression unevaluated.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表达式的等效运算符是`ArrayDiagonal`，可以用来保持表达式不求值。
- en: Examples
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '`tensordiagonal` acting on a 2-dimensional array by axes 0 and 1 is equivalent
    to the diagonal of the matrix:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`tensordiagonal`对二维数组的轴 0 和 1 的作用等效于矩阵的对角线：'
- en: '[PRE44]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In case of higher dimensional arrays, the diagonalized out dimensions are appended
    removed and appended as a single dimension at the end:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高维数组，被对角化的维度将被追加移除，并作为最后的单一维度追加：
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: See also
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.tensor.array.expressions.array_expressions.ArrayDiagonal`](array_expressions.html#sympy.tensor.array.expressions.ArrayDiagonal
    "sympy.tensor.array.expressions.array_expressions.ArrayDiagonal")'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.tensor.array.expressions.array_expressions.ArrayDiagonal`](array_expressions.html#sympy.tensor.array.expressions.ArrayDiagonal
    "sympy.tensor.array.expressions.array_expressions.ArrayDiagonal")'
