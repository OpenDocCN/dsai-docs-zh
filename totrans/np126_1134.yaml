- en: NumPy 1.19.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.19.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.19.0-notes.html](https://numpy.org/doc/1.26/release/1.19.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.19.0-notes.html](https://numpy.org/doc/1.26/release/1.19.0-notes.html)
- en: 'This NumPy release is marked by the removal of much technical debt: support
    for Python 2 has been removed, many deprecations have been expired, and documentation
    has been improved. The polishing of the random module continues apace with bug
    fixes and better usability from Cython.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个NumPy版本以大量技术债务的清除为标志：不再支持Python 2，许多弃用的功能已经过期，并且文档得到了改进。 对随机模块的优化持续进行中，包括来自Cython的错误修复和更好的可用性。
- en: The Python versions supported for this release are 3.6-3.8\. Downstream developers
    should use Cython >= 0.29.16 for Python 3.8 support and OpenBLAS >= 3.7 to avoid
    problems on the Skylake architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本支持的Python版本为3.6-3.8。 下游开发人员应该使用Cython >= 0.29.16来支持Python 3.8，并且在Skylake架构上避免使用
    OpenBLAS >= 3.7 出现问题。
- en: Highlights
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Code compatibility with Python versions < 3.6 (including Python 2) was dropped
    from both the python and C code. The shims in `numpy.compat` will remain to support
    third-party packages, but they may be deprecated in a future release. Note that
    1.19.x will *not* compile with earlier versions of Python due to the use of f-strings.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码与Python版本 < 3.6（包括Python 2）的兼容性已从python和C代码中删除。 `numpy.compat`中的兼容层将继续支持第三方包，但可能会在将来的版本中被弃用。
    请注意，由于使用了f-strings，1.19.x *不会*与早期版本的Python编译。
- en: ([gh-15233](https://github.com/numpy/numpy/pull/15233))
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-15233](https://github.com/numpy/numpy/pull/15233))
- en: Expired deprecations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用已过期
- en: '`numpy.insert` and `numpy.delete` can no longer be passed an axis on 0d arrays'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.insert` 和 `numpy.delete` 在0d数组上不能再传递axis。'
- en: This concludes a deprecation from 1.9, where when an `axis` argument was passed
    to a call to `~numpy.insert` and `~numpy.delete` on a 0d array, the `axis` and
    `obj` argument and indices would be completely ignored. In these cases, `insert(arr,
    "nonsense", 42, axis=0)` would actually overwrite the entire array, while `delete(arr,
    "nonsense", axis=0)` would be `arr.copy()`
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着从1.9开始的弃用，当`axis`参数传递给0d数组的`~numpy.insert`和`~numpy.delete`调用时，`axis`和`obj`参数以及索引将被完全忽略。
    在这些情况下，`insert(arr, "nonsense", 42, axis=0)`实际上会覆盖整个数组，而`delete(arr, "nonsense",
    axis=0)`将是`arr.copy()`
- en: Now passing `axis` on a 0d array raises `~numpy.AxisError`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在0d数组上传递`axis`会引发`~numpy.AxisError`。
- en: ([gh-15802](https://github.com/numpy/numpy/pull/15802))
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15802](https://github.com/numpy/numpy/pull/15802))
- en: '`numpy.delete` no longer ignores out-of-bounds indices'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.delete` 不再忽略超出范围的索引'
- en: This concludes deprecations from 1.8 and 1.9, where `np.delete` would ignore
    both negative and out-of-bounds items in a sequence of indices. This was at odds
    with its behavior when passed a single index.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着从1.8和1.9开始的弃用，其中 `np.delete` 将忽略负数和超出范围的索引。 这与将单个索引传递时的行为相矛盾。
- en: Now out-of-bounds items throw `IndexError`, and negative items index from the
    end.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在超出范围的项会抛出 `IndexError`，负数项从末尾索引。
- en: ([gh-15804](https://github.com/numpy/numpy/pull/15804))
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15804](https://github.com/numpy/numpy/pull/15804))
- en: '`numpy.insert` and `numpy.delete` no longer accept non-integral indices'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.insert` 和 `numpy.delete` 不再接受非整数索引'
- en: This concludes a deprecation from 1.9, where sequences of non-integers indices
    were allowed and cast to integers. Now passing sequences of non-integral indices
    raises `IndexError`, just like it does when passing a single non-integral scalar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了从1.9开始的弃用，允许非整数索引序列并将其转换为整数。 现在传递非整数索引的序列会引发 `IndexError`，就像传递单个非整数标量时一样。
- en: ([gh-15805](https://github.com/numpy/numpy/pull/15805))
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15805](https://github.com/numpy/numpy/pull/15805))
- en: '`numpy.delete` no longer casts boolean indices to integers'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.delete`不再将布尔索引转换为整数'
- en: This concludes a deprecation from 1.8, where `np.delete` would cast boolean
    arrays and scalars passed as an index argument into integer indices. The behavior
    now is to treat boolean arrays as a mask, and to raise an error on boolean scalars.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了从1.8开始的弃用，`np.delete` 将布尔数组和标量转换为整数索引。 现在的行为是将布尔数组视为掩码，并在布尔标量上引发错误。
- en: ([gh-15815](https://github.com/numpy/numpy/pull/15815))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15815](https://github.com/numpy/numpy/pull/15815))
- en: Compatibility notes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Changed random variate stream from `numpy.random.Generator.dirichlet`
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从`numpy.random.Generator.dirichlet`更改随机变量流
- en: A bug in the generation of random variates for the Dirichlet distribution with
    small ‘alpha’ values was fixed by using a different algorithm when `max(alpha)
    < 0.1`. Because of the change, the stream of variates generated by `dirichlet`
    in this case will be different from previous releases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`max(alpha) < 0.1`时使用不同的算法，修复了对Dirichlet分布的小“alpha”值的随机变量生成中的错误。由于更改，此情况下由`dirichlet`生成的变量流将与先前的版本不同。
- en: ([gh-14924](https://github.com/numpy/numpy/pull/14924))
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14924](https://github.com/numpy/numpy/pull/14924))
- en: Scalar promotion in `PyArray_ConvertToCommonType`
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`PyArray_ConvertToCommonType`中的标量提升
- en: The promotion of mixed scalars and arrays in `PyArray_ConvertToCommonType` has
    been changed to adhere to those used by `np.result_type`. This means that input
    such as `(1000, np.array([1], dtype=np.uint8)))` will now return `uint16` dtypes.
    In most cases the behaviour is unchanged. Note that the use of this C-API function
    is generally discouraged. This also fixes `np.choose` to behave the same way as
    the rest of NumPy in this respect.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 混合标量和数组在`PyArray_ConvertToCommonType`中的提升已更改为遵循`np.result_type`使用的规则。这意味着类似`(1000,
    np.array([1], dtype=np.uint8)))`的输入现在将返回`uint16`数据类型。在大多数情况下，这不会改变行为。请注意，通常不建议使用此C-API函数。这也修复了`np.choose`在这方面与NumPy的其他部分的行为相同。
- en: ([gh-14933](https://github.com/numpy/numpy/pull/14933))
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14933](https://github.com/numpy/numpy/pull/14933))
- en: Fasttake and fastputmask slots are deprecated and NULL’ed
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fasttake和fastputmask插槽已经被弃用并且设为NULL
- en: The fasttake and fastputmask slots are now never used and must always be set
    to NULL. This will result in no change in behaviour. However, if a user dtype
    should set one of these a DeprecationWarning will be given.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在永远不会使用fasttake和fastputmask插槽，必须始终设置为NULL。这不会导致行为上的任何改变。但是，如果用户dtype应该设置其中之一，将会给出DeprecationWarning。
- en: ([gh-14942](https://github.com/numpy/numpy/pull/14942))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14942](https://github.com/numpy/numpy/pull/14942))
- en: '`np.ediff1d` casting behaviour with `to_end` and `to_begin`'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ediff1d` 通过使用 `to_end` 和 `to_begin` 参数的转换行为'
- en: '`np.ediff1d` now uses the `"same_kind"` casting rule for its additional `to_end`
    and `to_begin` arguments. This ensures type safety except when the input array
    has a smaller integer type than `to_begin` or `to_end`. In rare cases, the behaviour
    will be more strict than it was previously in 1.16 and 1.17\. This is necessary
    to solve issues with floating point NaN.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ediff1d`现在对其额外的`to_end`和`to_begin`参数使用`"same_kind"`转换规则。这确保了除非输入数组的整数类型小于`to_begin`或`to_end`，否则会遵循类型安全性。在少数情况下，行为将比1.16和1.17中以前更严格。这是解决浮点NaN问题所必需的。'
- en: ([gh-14981](https://github.com/numpy/numpy/pull/14981))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14981](https://github.com/numpy/numpy/pull/14981))
- en: Converting of empty array-like objects to NumPy arrays
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将空数组对象转换为NumPy数组
- en: Objects with `len(obj) == 0` which implement an “array-like” interface, meaning
    an object implementing `obj.__array__()`, `obj.__array_interface__`, `obj.__array_struct__`,
    or the python buffer interface and which are also sequences (i.e. Pandas objects)
    will now always retain there shape correctly when converted to an array. If such
    an object has a shape of `(0, 1)` previously, it could be converted into an array
    of shape `(0,)` (losing all dimensions after the first 0).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`len(obj) == 0`并且实现“数组样式”接口的对象（即实现 `obj.__array__()`, `obj.__array_interface__`,
    `obj.__array_struct__` 或Python buffer接口的对象，并且也是序列（即Pandas对象）），当转换为数组时，现在将始终正确地保留其形状。如果此类对象先前的形状为`(0,
    1)`，则可以转换为形状为`(0,)`的数组（在第一个0后丢失所有维度）。
- en: ([gh-14995](https://github.com/numpy/numpy/pull/14995))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14995](https://github.com/numpy/numpy/pull/14995))
- en: Removed `multiarray.int_asbuffer`
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除 `multiarray.int_asbuffer`
- en: As part of the continued removal of Python 2 compatibility, `multiarray.int_asbuffer`
    was removed. On Python 3, it threw a `NotImplementedError` and was unused internally.
    It is expected that there are no downstream use cases for this method with Python
    3.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为持续删除Python 2兼容性的一部分，移除了 `multiarray.int_asbuffer`。在Python 3上，它抛出了一个 `NotImplementedError`
    并在内部未使用。预计在Python 3中不会有使用此方法的下游用例。
- en: ([gh-15229](https://github.com/numpy/numpy/pull/15229))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15229](https://github.com/numpy/numpy/pull/15229))
- en: '`numpy.distutils.compat` has been removed'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已移除 `numpy.distutils.compat`
- en: 'This module contained only the function `get_exception()`, which was used as:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块仅包含一个名为 `get_exception()` 的函数，用法如下：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Its purpose was to handle the change in syntax introduced in Python 2.6, from
    `except Exception, e:` to `except Exception as e:`, meaning it was only necessary
    for codebases supporting Python 2.5 and older.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其目的是处理在Python 2.6中引入的语法更改，即从`except Exception, e：`到`except Exception as e：`，这意味着它仅适用于支持Python
    2.5及更早版本的代码库。
- en: ([gh-15255](https://github.com/numpy/numpy/pull/15255))
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '`issubdtype` no longer interprets `float` as `np.floating`'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.issubdtype` had a FutureWarning since NumPy 1.14 which has expired now.
    This means that certain input where the second argument was neither a datatype
    nor a NumPy scalar type (such as a string or a python type like `int` or `float`)
    will now be consistent with passing in `np.dtype(arg2).type`. This makes the result
    consistent with expectations and leads to a false result in some cases which previously
    returned true.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15773](https://github.com/numpy/numpy/pull/15773))
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Change output of `round` on scalars to be consistent with Python
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been changed to be a Python `int` to be consistent with calling it
    on Python `float` objects when called with no arguments. Previously, it would
    return a scalar of the `np.dtype` that was passed in.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The `numpy.ndarray` constructor no longer interprets `strides=()` as `strides=None`
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The former has changed to have the expected meaning of setting `numpy.ndarray.strides`
    to `()`, while the latter continues to result in strides being chosen automatically.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15882](https://github.com/numpy/numpy/pull/15882))
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: C-Level string to datetime casts changed
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The C-level casts from strings were simplified. This changed also fixes string
    to datetime and timedelta casts to behave correctly (i.e. like Python casts using
    `string_arr.astype("M8")` while previously the cast would behave like `string_arr.astype(np.int_).astype("M8")`.
    This only affects code using low-level C-API to do manual casts (not full array
    casts) of single scalar values or using e.g. `PyArray_GetCastFunc`, and should
    thus not affect the vast majority of users.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16068](https://github.com/numpy/numpy/pull/16068))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`SeedSequence` with small seeds no longer conflicts with spawning'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Small seeds (less than `2**96`) were previously implicitly 0-padded out to 128
    bits, the size of the internal entropy pool. When spawned, the spawn key was concatenated
    before the 0-padding. Since the first spawn key is `(0,)`, small seeds before
    the spawn created the same states as the first spawned `SeedSequence`. Now, the
    seed is explicitly 0-padded out to the internal pool size before concatenating
    the spawn key. Spawned `SeedSequences` will produce different results than in
    the previous release. Unspawned `SeedSequences` will still produce the same results.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16551](https://github.com/numpy/numpy/pull/16551))
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecate automatic `dtype=object` for ragged input
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `np.array([[1, [1, 2, 3]])` will issue a `DeprecationWarning` as per
    [NEP 34](https://numpy.org/neps/nep-0034.html). Users should explicitly use `dtype=object`
    to avoid the warning.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15119](https://github.com/numpy/numpy/pull/15119))
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Passing `shape=0` to factory functions in `numpy.rec` is deprecated
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`0` is treated as a special case and is aliased to `None` in the functions:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromarrays`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromrecords`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromstring`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromfile`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In future, `0` will not be special cased, and will be treated as an array length
    like any other integer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15217](https://github.com/numpy/numpy/pull/15217))
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of probably unused C-API functions
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C-API functions are probably unused and have been deprecated:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_GetArrayParamsFromObject`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_GenericFunction`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_SetUsesArraysAsData`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases `PyArray_GetArrayParamsFromObject` should be replaced by converting
    to an array, while `PyUFunc_GenericFunction` can be replaced with `PyObject_Call`
    (see documentation for details).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15427](https://github.com/numpy/numpy/pull/15427))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Converting certain types to dtypes is Deprecated
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The super classes of scalar types, such as `np.integer`, `np.generic`, or `np.inexact`
    will now give a deprecation warning when converted to a dtype (or used in a dtype
    keyword argument). The reason for this is that `np.integer` is converted to `np.int_`,
    while it would be expected to represent *any* integer (e.g. also `int8`, `int16`,
    etc. For example, `dtype=np.floating` is currently identical to `dtype=np.float64`,
    even though also `np.float32` is a subclass of `np.floating`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15534](https://github.com/numpy/numpy/pull/15534))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of `round` for `np.complexfloating` scalars
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been deprecated on complex scalars. This does not affect `np.round`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.ndarray.tostring()` is deprecated in favor of `tobytes()`'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`~numpy.ndarray.tobytes` has existed since the 1.9 release, but until this
    release `~numpy.ndarray.tostring` emitted no warning. The change to emit a warning
    brings NumPy in line with the builtin `array.array` methods of the same name.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15867](https://github.com/numpy/numpy/pull/15867))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Better support for `const` dimensions in API functions
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions now accept a constant array of `npy_intp`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_BroadcastToShape`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_IntTupleFromIntp`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_OverflowMultiplyList`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously the caller would have to cast away the const-ness to call these functions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15251](https://github.com/numpy/numpy/pull/15251))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Const qualify UFunc inner loops
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UFuncGenericFunction` now expects pointers to const `dimension` and `strides`
    as arguments. This means inner loops may no longer modify either `dimension` or
    `strides`. This change leads to an `incompatible-pointer-types` warning forcing
    users to either ignore the compiler warnings or to const qualify their own loop
    signatures.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15355](https://github.com/numpy/numpy/pull/15355))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`numpy.frompyfunc` now accepts an identity argument'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows the [`numpy.ufunc.identity`](../reference/generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") attribute to be set on the resulting ufunc, meaning it
    can be used for empty and multi-dimensional calls to [`numpy.ufunc.reduce`](../reference/generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce").
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-8255](https://github.com/numpy/numpy/pull/8255))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`np.str_` scalars now support the buffer protocol'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.str_` arrays are always stored as UCS4, so the corresponding scalars now
    expose this through the buffer interface, meaning `memoryview(np.str_(''test''))`
    now works.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15385](https://github.com/numpy/numpy/pull/15385))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '`subok` option for `numpy.copy`'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new kwarg, `subok`, was added to `numpy.copy` to allow users to toggle the
    behavior of `numpy.copy` with respect to array subclasses. The default value is
    `False` which is consistent with the behavior of `numpy.copy` for previous numpy
    versions. To create a copy that preserves an array subclass with `numpy.copy`,
    call `np.copy(arr, subok=True)`. This addition better documents that the default
    behavior of `numpy.copy` differs from the `numpy.ndarray.copy` method which respects
    array subclasses by default.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15685](https://github.com/numpy/numpy/pull/15685))
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.multi_dot` now accepts an `out` argument'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`out` can be used to avoid creating unnecessary copies of the final product
    computed by `numpy.linalg.multidot`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15715](https://github.com/numpy/numpy/pull/15715))
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `numpy.count_nonzero`'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to `numpy.count_nonzero`. The parameter has
    the same meaning as it does in reduction functions such as `numpy.sum` or `numpy.mean`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15870](https://github.com/numpy/numpy/pull/15870))
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`equal_nan` parameter for `numpy.array_equal`'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `equal_nan` was added to `numpy.array_equal`. `equal_nan`
    is a boolean value that toggles whether or not `nan` values are considered equal
    in comparison (default is `False`). This matches API used in related functions
    such as `numpy.isclose` and `numpy.allclose`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16128](https://github.com/numpy/numpy/pull/16128))
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improve detection of CPU features
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replace `npy_cpu_supports` which was a gcc specific mechanism to test support
    of AVX with more general functions `npy_cpu_init` and `npy_cpu_have`, and expose
    the results via a `NPY_CPU_HAVE` c-macro as well as a python-level `__cpu_features__`
    dictionary.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13421](https://github.com/numpy/numpy/pull/13421))
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in fallback lapack_lite
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in the fallback LAPACK library,
    which is used when the system has no LAPACK installed, allowing it to deal with
    linear algebra for large arrays.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15218](https://github.com/numpy/numpy/pull/15218))
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`, which
    can improve the performance of `np.exp` with `np.float64` input 5-7x faster than
    before. The `_multiarray_umath.so` module has grown about 63 KB on linux64.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15648](https://github.com/numpy/numpy/pull/15648))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Ability to disable madvise hugepages
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On Linux NumPy has previously added support for madavise hugepages which can
    improve performance for very large arrays. Unfortunately, on older Kernel versions
    this led to performance regressions, thus by default the support has been disabled
    on kernels before version 4.6\. To override the default, you can use the environment
    variable:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or set it to 1 to force enabling support. Note that this only makes a difference
    if the operating system is set up to use madvise transparent hugepage.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15769](https://github.com/numpy/numpy/pull/15769))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.einsum` accepts NumPy `int64` type in subscript list'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no longer a type error thrown when `numpy.einsum` is passed a NumPy
    `int64` array as its subscript list.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16080](https://github.com/numpy/numpy/pull/16080))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '`np.logaddexp2.identity` changed to `-inf`'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc `~numpy.logaddexp2` now has an identity of `-inf`, allowing it to
    be called on empty sequences. This matches the identity of `~numpy.logaddexp`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16102](https://github.com/numpy/numpy/pull/16102))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remove handling of extra argument to `__array__`
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A code path and test have been in the code since NumPy 0.4 for a two-argument
    variant of `__array__(dtype=None, context=None)`. It was activated when calling
    `ufunc(op)` or `ufunc.reduce(op)` if `op.__array__` existed. However that variant
    is not documented, and it is not clear what the intention was for its use. It
    has been removed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15118](https://github.com/numpy/numpy/pull/15118))
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.random._bit_generator` moved to `numpy.random.bit_generator`'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to expose `numpy.random.BitGenerator` and `numpy.random.SeedSequence`
    to Cython, the `_bitgenerator` module is now public as `numpy.random.bit_generator`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Cython access to the random distributions is provided via a `pxd` file
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`c_distributions.pxd` provides access to the c functions behind many of the
    random distributions from Cython, making it convenient to use and extend them.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15463](https://github.com/numpy/numpy/pull/15463))
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Fixed `eigh` and `cholesky` methods in `numpy.random.multivariate_normal`
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, when passing `method='eigh'` or `method='cholesky'`, `numpy.random.multivariate_normal`
    produced samples from the wrong distribution. This is now fixed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15872](https://github.com/numpy/numpy/pull/15872))
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Fixed the jumping implementation in `MT19937.jumped`
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fix changes the stream produced from jumped MT19937 generators. It does
    not affect the stream produced using `RandomState` or `MT19937` that are directly
    seeded.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: The translation of the jumping code for the MT19937 contained a reversed loop
    ordering. `MT19937.jumped` matches the Makoto Matsumoto’s original implementation
    of the Horner and Sliding Window jump methods.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16153](https://github.com/numpy/numpy/pull/16153))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code compatibility with Python versions < 3.6 (including Python 2) was dropped
    from both the python and C code. The shims in `numpy.compat` will remain to support
    third-party packages, but they may be deprecated in a future release. Note that
    1.19.x will *not* compile with earlier versions of Python due to the use of f-strings.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-15233](https://github.com/numpy/numpy/pull/15233))
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Expired deprecations
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`numpy.insert` and `numpy.delete` can no longer be passed an axis on 0d arrays'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.9, where when an `axis` argument was passed
    to a call to `~numpy.insert` and `~numpy.delete` on a 0d array, the `axis` and
    `obj` argument and indices would be completely ignored. In these cases, `insert(arr,
    "nonsense", 42, axis=0)` would actually overwrite the entire array, while `delete(arr,
    "nonsense", axis=0)` would be `arr.copy()`
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Now passing `axis` on a 0d array raises `~numpy.AxisError`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15802](https://github.com/numpy/numpy/pull/15802))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.delete` no longer ignores out-of-bounds indices'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes deprecations from 1.8 and 1.9, where `np.delete` would ignore
    both negative and out-of-bounds items in a sequence of indices. This was at odds
    with its behavior when passed a single index.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Now out-of-bounds items throw `IndexError`, and negative items index from the
    end.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15804](https://github.com/numpy/numpy/pull/15804))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.insert` and `numpy.delete` no longer accept non-integral indices'
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.9, where sequences of non-integers indices
    were allowed and cast to integers. Now passing sequences of non-integral indices
    raises `IndexError`, just like it does when passing a single non-integral scalar.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15805](https://github.com/numpy/numpy/pull/15805))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.delete` no longer casts boolean indices to integers'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.8, where `np.delete` would cast boolean
    arrays and scalars passed as an index argument into integer indices. The behavior
    now is to treat boolean arrays as a mask, and to raise an error on boolean scalars.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15815](https://github.com/numpy/numpy/pull/15815))
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.insert` and `numpy.delete` can no longer be passed an axis on 0d arrays'
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.9, where when an `axis` argument was passed
    to a call to `~numpy.insert` and `~numpy.delete` on a 0d array, the `axis` and
    `obj` argument and indices would be completely ignored. In these cases, `insert(arr,
    "nonsense", 42, axis=0)` would actually overwrite the entire array, while `delete(arr,
    "nonsense", axis=0)` would be `arr.copy()`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Now passing `axis` on a 0d array raises `~numpy.AxisError`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15802](https://github.com/numpy/numpy/pull/15802))
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.delete` no longer ignores out-of-bounds indices'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes deprecations from 1.8 and 1.9, where `np.delete` would ignore
    both negative and out-of-bounds items in a sequence of indices. This was at odds
    with its behavior when passed a single index.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Now out-of-bounds items throw `IndexError`, and negative items index from the
    end.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15804](https://github.com/numpy/numpy/pull/15804))
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.insert` and `numpy.delete` no longer accept non-integral indices'
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.9, where sequences of non-integers indices
    were allowed and cast to integers. Now passing sequences of non-integral indices
    raises `IndexError`, just like it does when passing a single non-integral scalar.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15805](https://github.com/numpy/numpy/pull/15805))
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.delete` no longer casts boolean indices to integers'
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This concludes a deprecation from 1.8, where `np.delete` would cast boolean
    arrays and scalars passed as an index argument into integer indices. The behavior
    now is to treat boolean arrays as a mask, and to raise an error on boolean scalars.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15815](https://github.com/numpy/numpy/pull/15815))
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changed random variate stream from `numpy.random.Generator.dirichlet`
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bug in the generation of random variates for the Dirichlet distribution with
    small ‘alpha’ values was fixed by using a different algorithm when `max(alpha)
    < 0.1`. Because of the change, the stream of variates generated by `dirichlet`
    in this case will be different from previous releases.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14924](https://github.com/numpy/numpy/pull/14924))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Scalar promotion in `PyArray_ConvertToCommonType`
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The promotion of mixed scalars and arrays in `PyArray_ConvertToCommonType` has
    been changed to adhere to those used by `np.result_type`. This means that input
    such as `(1000, np.array([1], dtype=np.uint8)))` will now return `uint16` dtypes.
    In most cases the behaviour is unchanged. Note that the use of this C-API function
    is generally discouraged. This also fixes `np.choose` to behave the same way as
    the rest of NumPy in this respect.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14933](https://github.com/numpy/numpy/pull/14933))
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Fasttake and fastputmask slots are deprecated and NULL’ed
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fasttake and fastputmask slots are now never used and must always be set
    to NULL. This will result in no change in behaviour. However, if a user dtype
    should set one of these a DeprecationWarning will be given.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14942](https://github.com/numpy/numpy/pull/14942))
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ediff1d` casting behaviour with `to_end` and `to_begin`'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.ediff1d` now uses the `"same_kind"` casting rule for its additional `to_end`
    and `to_begin` arguments. This ensures type safety except when the input array
    has a smaller integer type than `to_begin` or `to_end`. In rare cases, the behaviour
    will be more strict than it was previously in 1.16 and 1.17\. This is necessary
    to solve issues with floating point NaN.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14981](https://github.com/numpy/numpy/pull/14981))
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Converting of empty array-like objects to NumPy arrays
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects with `len(obj) == 0` which implement an “array-like” interface, meaning
    an object implementing `obj.__array__()`, `obj.__array_interface__`, `obj.__array_struct__`,
    or the python buffer interface and which are also sequences (i.e. Pandas objects)
    will now always retain there shape correctly when converted to an array. If such
    an object has a shape of `(0, 1)` previously, it could be converted into an array
    of shape `(0,)` (losing all dimensions after the first 0).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14995](https://github.com/numpy/numpy/pull/14995))
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Removed `multiarray.int_asbuffer`
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of the continued removal of Python 2 compatibility, `multiarray.int_asbuffer`
    was removed. On Python 3, it threw a `NotImplementedError` and was unused internally.
    It is expected that there are no downstream use cases for this method with Python
    3.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15229](https://github.com/numpy/numpy/pull/15229))
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.distutils.compat` has been removed'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This module contained only the function `get_exception()`, which was used as:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Its purpose was to handle the change in syntax introduced in Python 2.6, from
    `except Exception, e:` to `except Exception as e:`, meaning it was only necessary
    for codebases supporting Python 2.5 and older.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15255](https://github.com/numpy/numpy/pull/15255))
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`issubdtype` no longer interprets `float` as `np.floating`'
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.issubdtype` had a FutureWarning since NumPy 1.14 which has expired now.
    This means that certain input where the second argument was neither a datatype
    nor a NumPy scalar type (such as a string or a python type like `int` or `float`)
    will now be consistent with passing in `np.dtype(arg2).type`. This makes the result
    consistent with expectations and leads to a false result in some cases which previously
    returned true.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15773](https://github.com/numpy/numpy/pull/15773))
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Change output of `round` on scalars to be consistent with Python
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been changed to be a Python `int` to be consistent with calling it
    on Python `float` objects when called with no arguments. Previously, it would
    return a scalar of the `np.dtype` that was passed in.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The `numpy.ndarray` constructor no longer interprets `strides=()` as `strides=None`
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The former has changed to have the expected meaning of setting `numpy.ndarray.strides`
    to `()`, while the latter continues to result in strides being chosen automatically.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15882](https://github.com/numpy/numpy/pull/15882))
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: C-Level string to datetime casts changed
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The C-level casts from strings were simplified. This changed also fixes string
    to datetime and timedelta casts to behave correctly (i.e. like Python casts using
    `string_arr.astype("M8")` while previously the cast would behave like `string_arr.astype(np.int_).astype("M8")`.
    This only affects code using low-level C-API to do manual casts (not full array
    casts) of single scalar values or using e.g. `PyArray_GetCastFunc`, and should
    thus not affect the vast majority of users.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16068](https://github.com/numpy/numpy/pull/16068))
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`SeedSequence` with small seeds no longer conflicts with spawning'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Small seeds (less than `2**96`) were previously implicitly 0-padded out to 128
    bits, the size of the internal entropy pool. When spawned, the spawn key was concatenated
    before the 0-padding. Since the first spawn key is `(0,)`, small seeds before
    the spawn created the same states as the first spawned `SeedSequence`. Now, the
    seed is explicitly 0-padded out to the internal pool size before concatenating
    the spawn key. Spawned `SeedSequences` will produce different results than in
    the previous release. Unspawned `SeedSequences` will still produce the same results.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16551](https://github.com/numpy/numpy/pull/16551))
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Changed random variate stream from `numpy.random.Generator.dirichlet`
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bug in the generation of random variates for the Dirichlet distribution with
    small ‘alpha’ values was fixed by using a different algorithm when `max(alpha)
    < 0.1`. Because of the change, the stream of variates generated by `dirichlet`
    in this case will be different from previous releases.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14924](https://github.com/numpy/numpy/pull/14924))
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Scalar promotion in `PyArray_ConvertToCommonType`
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The promotion of mixed scalars and arrays in `PyArray_ConvertToCommonType` has
    been changed to adhere to those used by `np.result_type`. This means that input
    such as `(1000, np.array([1], dtype=np.uint8)))` will now return `uint16` dtypes.
    In most cases the behaviour is unchanged. Note that the use of this C-API function
    is generally discouraged. This also fixes `np.choose` to behave the same way as
    the rest of NumPy in this respect.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14933](https://github.com/numpy/numpy/pull/14933))
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Fasttake and fastputmask slots are deprecated and NULL’ed
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fasttake and fastputmask slots are now never used and must always be set
    to NULL. This will result in no change in behaviour. However, if a user dtype
    should set one of these a DeprecationWarning will be given.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14942](https://github.com/numpy/numpy/pull/14942))
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ediff1d` casting behaviour with `to_end` and `to_begin`'
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.ediff1d` now uses the `"same_kind"` casting rule for its additional `to_end`
    and `to_begin` arguments. This ensures type safety except when the input array
    has a smaller integer type than `to_begin` or `to_end`. In rare cases, the behaviour
    will be more strict than it was previously in 1.16 and 1.17\. This is necessary
    to solve issues with floating point NaN.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14981](https://github.com/numpy/numpy/pull/14981))
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Converting of empty array-like objects to NumPy arrays
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects with `len(obj) == 0` which implement an “array-like” interface, meaning
    an object implementing `obj.__array__()`, `obj.__array_interface__`, `obj.__array_struct__`,
    or the python buffer interface and which are also sequences (i.e. Pandas objects)
    will now always retain there shape correctly when converted to an array. If such
    an object has a shape of `(0, 1)` previously, it could be converted into an array
    of shape `(0,)` (losing all dimensions after the first 0).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14995](https://github.com/numpy/numpy/pull/14995))
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Removed `multiarray.int_asbuffer`
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of the continued removal of Python 2 compatibility, `multiarray.int_asbuffer`
    was removed. On Python 3, it threw a `NotImplementedError` and was unused internally.
    It is expected that there are no downstream use cases for this method with Python
    3.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15229](https://github.com/numpy/numpy/pull/15229))
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.distutils.compat` has been removed'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This module contained only the function `get_exception()`, which was used as:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Its purpose was to handle the change in syntax introduced in Python 2.6, from
    `except Exception, e:` to `except Exception as e:`, meaning it was only necessary
    for codebases supporting Python 2.5 and older.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15255](https://github.com/numpy/numpy/pull/15255))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '`issubdtype` no longer interprets `float` as `np.floating`'
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.issubdtype` had a FutureWarning since NumPy 1.14 which has expired now.
    This means that certain input where the second argument was neither a datatype
    nor a NumPy scalar type (such as a string or a python type like `int` or `float`)
    will now be consistent with passing in `np.dtype(arg2).type`. This makes the result
    consistent with expectations and leads to a false result in some cases which previously
    returned true.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15773](https://github.com/numpy/numpy/pull/15773))
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Change output of `round` on scalars to be consistent with Python
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been changed to be a Python `int` to be consistent with calling it
    on Python `float` objects when called with no arguments. Previously, it would
    return a scalar of the `np.dtype` that was passed in.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: The `numpy.ndarray` constructor no longer interprets `strides=()` as `strides=None`
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The former has changed to have the expected meaning of setting `numpy.ndarray.strides`
    to `()`, while the latter continues to result in strides being chosen automatically.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15882](https://github.com/numpy/numpy/pull/15882))
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: C-Level string to datetime casts changed
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The C-level casts from strings were simplified. This changed also fixes string
    to datetime and timedelta casts to behave correctly (i.e. like Python casts using
    `string_arr.astype("M8")` while previously the cast would behave like `string_arr.astype(np.int_).astype("M8")`.
    This only affects code using low-level C-API to do manual casts (not full array
    casts) of single scalar values or using e.g. `PyArray_GetCastFunc`, and should
    thus not affect the vast majority of users.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16068](https://github.com/numpy/numpy/pull/16068))
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`SeedSequence` with small seeds no longer conflicts with spawning'
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Small seeds (less than `2**96`) were previously implicitly 0-padded out to 128
    bits, the size of the internal entropy pool. When spawned, the spawn key was concatenated
    before the 0-padding. Since the first spawn key is `(0,)`, small seeds before
    the spawn created the same states as the first spawned `SeedSequence`. Now, the
    seed is explicitly 0-padded out to the internal pool size before concatenating
    the spawn key. Spawned `SeedSequences` will produce different results than in
    the previous release. Unspawned `SeedSequences` will still produce the same results.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16551](https://github.com/numpy/numpy/pull/16551))
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecate automatic `dtype=object` for ragged input
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `np.array([[1, [1, 2, 3]])` will issue a `DeprecationWarning` as per
    [NEP 34](https://numpy.org/neps/nep-0034.html). Users should explicitly use `dtype=object`
    to avoid the warning.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15119](https://github.com/numpy/numpy/pull/15119))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Passing `shape=0` to factory functions in `numpy.rec` is deprecated
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`0` is treated as a special case and is aliased to `None` in the functions:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromarrays`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromrecords`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromstring`'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromfile`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In future, `0` will not be special cased, and will be treated as an array length
    like any other integer.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15217](https://github.com/numpy/numpy/pull/15217))
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of probably unused C-API functions
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C-API functions are probably unused and have been deprecated:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_GetArrayParamsFromObject`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_GenericFunction`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_SetUsesArraysAsData`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases `PyArray_GetArrayParamsFromObject` should be replaced by converting
    to an array, while `PyUFunc_GenericFunction` can be replaced with `PyObject_Call`
    (see documentation for details).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15427](https://github.com/numpy/numpy/pull/15427))
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Converting certain types to dtypes is Deprecated
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The super classes of scalar types, such as `np.integer`, `np.generic`, or `np.inexact`
    will now give a deprecation warning when converted to a dtype (or used in a dtype
    keyword argument). The reason for this is that `np.integer` is converted to `np.int_`,
    while it would be expected to represent *any* integer (e.g. also `int8`, `int16`,
    etc. For example, `dtype=np.floating` is currently identical to `dtype=np.float64`,
    even though also `np.float32` is a subclass of `np.floating`.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15534](https://github.com/numpy/numpy/pull/15534))
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of `round` for `np.complexfloating` scalars
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been deprecated on complex scalars. This does not affect `np.round`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.ndarray.tostring()` is deprecated in favor of `tobytes()`'
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`~numpy.ndarray.tobytes` has existed since the 1.9 release, but until this
    release `~numpy.ndarray.tostring` emitted no warning. The change to emit a warning
    brings NumPy in line with the builtin `array.array` methods of the same name.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15867](https://github.com/numpy/numpy/pull/15867))
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Deprecate automatic `dtype=object` for ragged input
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `np.array([[1, [1, 2, 3]])` will issue a `DeprecationWarning` as per
    [NEP 34](https://numpy.org/neps/nep-0034.html). Users should explicitly use `dtype=object`
    to avoid the warning.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15119](https://github.com/numpy/numpy/pull/15119))
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Passing `shape=0` to factory functions in `numpy.rec` is deprecated
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`0` is treated as a special case and is aliased to `None` in the functions:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromarrays`'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromrecords`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromstring`'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy.core.records.fromfile`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In future, `0` will not be special cased, and will be treated as an array length
    like any other integer.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15217](https://github.com/numpy/numpy/pull/15217))
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of probably unused C-API functions
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following C-API functions are probably unused and have been deprecated:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_GetArrayParamsFromObject`'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_GenericFunction`'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyUFunc_SetUsesArraysAsData`'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases `PyArray_GetArrayParamsFromObject` should be replaced by converting
    to an array, while `PyUFunc_GenericFunction` can be replaced with `PyObject_Call`
    (see documentation for details).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15427](https://github.com/numpy/numpy/pull/15427))
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Converting certain types to dtypes is Deprecated
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The super classes of scalar types, such as `np.integer`, `np.generic`, or `np.inexact`
    will now give a deprecation warning when converted to a dtype (or used in a dtype
    keyword argument). The reason for this is that `np.integer` is converted to `np.int_`,
    while it would be expected to represent *any* integer (e.g. also `int8`, `int16`,
    etc. For example, `dtype=np.floating` is currently identical to `dtype=np.float64`,
    even though also `np.float32` is a subclass of `np.floating`.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15534](https://github.com/numpy/numpy/pull/15534))
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of `round` for `np.complexfloating` scalars
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Output of the `__round__` dunder method and consequently the Python built-in
    `round` has been deprecated on complex scalars. This does not affect `np.round`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15840](https://github.com/numpy/numpy/pull/15840))
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.ndarray.tostring()` is deprecated in favor of `tobytes()`'
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`~numpy.ndarray.tobytes` has existed since the 1.9 release, but until this
    release `~numpy.ndarray.tostring` emitted no warning. The change to emit a warning
    brings NumPy in line with the builtin `array.array` methods of the same name.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15867](https://github.com/numpy/numpy/pull/15867))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Better support for `const` dimensions in API functions
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions now accept a constant array of `npy_intp`:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_BroadcastToShape`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_IntTupleFromIntp`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_OverflowMultiplyList`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously the caller would have to cast away the const-ness to call these functions.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15251](https://github.com/numpy/numpy/pull/15251))
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Const qualify UFunc inner loops
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UFuncGenericFunction` now expects pointers to const `dimension` and `strides`
    as arguments. This means inner loops may no longer modify either `dimension` or
    `strides`. This change leads to an `incompatible-pointer-types` warning forcing
    users to either ignore the compiler warnings or to const qualify their own loop
    signatures.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15355](https://github.com/numpy/numpy/pull/15355))
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Better support for `const` dimensions in API functions
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions now accept a constant array of `npy_intp`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`PyArray_BroadcastToShape`'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_IntTupleFromIntp`'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PyArray_OverflowMultiplyList`'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously the caller would have to cast away the const-ness to call these functions.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15251](https://github.com/numpy/numpy/pull/15251))
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Const qualify UFunc inner loops
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UFuncGenericFunction` now expects pointers to const `dimension` and `strides`
    as arguments. This means inner loops may no longer modify either `dimension` or
    `strides`. This change leads to an `incompatible-pointer-types` warning forcing
    users to either ignore the compiler warnings or to const qualify their own loop
    signatures.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15355](https://github.com/numpy/numpy/pull/15355))
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`numpy.frompyfunc` now accepts an identity argument'
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows the [`numpy.ufunc.identity`](../reference/generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") attribute to be set on the resulting ufunc, meaning it
    can be used for empty and multi-dimensional calls to [`numpy.ufunc.reduce`](../reference/generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce").
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-8255](https://github.com/numpy/numpy/pull/8255))
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '`np.str_` scalars now support the buffer protocol'
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.str_` arrays are always stored as UCS4, so the corresponding scalars now
    expose this through the buffer interface, meaning `memoryview(np.str_(''test''))`
    now works.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15385](https://github.com/numpy/numpy/pull/15385))
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`subok` option for `numpy.copy`'
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new kwarg, `subok`, was added to `numpy.copy` to allow users to toggle the
    behavior of `numpy.copy` with respect to array subclasses. The default value is
    `False` which is consistent with the behavior of `numpy.copy` for previous numpy
    versions. To create a copy that preserves an array subclass with `numpy.copy`,
    call `np.copy(arr, subok=True)`. This addition better documents that the default
    behavior of `numpy.copy` differs from the `numpy.ndarray.copy` method which respects
    array subclasses by default.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15685](https://github.com/numpy/numpy/pull/15685))
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.multi_dot` now accepts an `out` argument'
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`out` can be used to avoid creating unnecessary copies of the final product
    computed by `numpy.linalg.multidot`.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15715](https://github.com/numpy/numpy/pull/15715))
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `numpy.count_nonzero`'
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to `numpy.count_nonzero`. The parameter has
    the same meaning as it does in reduction functions such as `numpy.sum` or `numpy.mean`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15870](https://github.com/numpy/numpy/pull/15870))
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`equal_nan` parameter for `numpy.array_equal`'
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `equal_nan` was added to `numpy.array_equal`. `equal_nan`
    is a boolean value that toggles whether or not `nan` values are considered equal
    in comparison (default is `False`). This matches API used in related functions
    such as `numpy.isclose` and `numpy.allclose`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16128](https://github.com/numpy/numpy/pull/16128))
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.frompyfunc` now accepts an identity argument'
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows the [`numpy.ufunc.identity`](../reference/generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") attribute to be set on the resulting ufunc, meaning it
    can be used for empty and multi-dimensional calls to [`numpy.ufunc.reduce`](../reference/generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce").
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-8255](https://github.com/numpy/numpy/pull/8255))
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '`np.str_` scalars now support the buffer protocol'
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.str_` arrays are always stored as UCS4, so the corresponding scalars now
    expose this through the buffer interface, meaning `memoryview(np.str_(''test''))`
    now works.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15385](https://github.com/numpy/numpy/pull/15385))
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`subok` option for `numpy.copy`'
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new kwarg, `subok`, was added to `numpy.copy` to allow users to toggle the
    behavior of `numpy.copy` with respect to array subclasses. The default value is
    `False` which is consistent with the behavior of `numpy.copy` for previous numpy
    versions. To create a copy that preserves an array subclass with `numpy.copy`,
    call `np.copy(arr, subok=True)`. This addition better documents that the default
    behavior of `numpy.copy` differs from the `numpy.ndarray.copy` method which respects
    array subclasses by default.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15685](https://github.com/numpy/numpy/pull/15685))
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.multi_dot` now accepts an `out` argument'
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`out` can be used to avoid creating unnecessary copies of the final product
    computed by `numpy.linalg.multidot`.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15715](https://github.com/numpy/numpy/pull/15715))
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` parameter for `numpy.count_nonzero`'
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `keepdims` was added to `numpy.count_nonzero`. The parameter has
    the same meaning as it does in reduction functions such as `numpy.sum` or `numpy.mean`.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15870](https://github.com/numpy/numpy/pull/15870))
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '`equal_nan` parameter for `numpy.array_equal`'
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `equal_nan` was added to `numpy.array_equal`. `equal_nan`
    is a boolean value that toggles whether or not `nan` values are considered equal
    in comparison (default is `False`). This matches API used in related functions
    such as `numpy.isclose` and `numpy.allclose`.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16128](https://github.com/numpy/numpy/pull/16128))
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improve detection of CPU features
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replace `npy_cpu_supports` which was a gcc specific mechanism to test support
    of AVX with more general functions `npy_cpu_init` and `npy_cpu_have`, and expose
    the results via a `NPY_CPU_HAVE` c-macro as well as a python-level `__cpu_features__`
    dictionary.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13421](https://github.com/numpy/numpy/pull/13421))
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in fallback lapack_lite
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in the fallback LAPACK library,
    which is used when the system has no LAPACK installed, allowing it to deal with
    linear algebra for large arrays.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15218](https://github.com/numpy/numpy/pull/15218))
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`, which
    can improve the performance of `np.exp` with `np.float64` input 5-7x faster than
    before. The `_multiarray_umath.so` module has grown about 63 KB on linux64.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15648](https://github.com/numpy/numpy/pull/15648))
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Ability to disable madvise hugepages
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On Linux NumPy has previously added support for madavise hugepages which can
    improve performance for very large arrays. Unfortunately, on older Kernel versions
    this led to performance regressions, thus by default the support has been disabled
    on kernels before version 4.6\. To override the default, you can use the environment
    variable:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: or set it to 1 to force enabling support. Note that this only makes a difference
    if the operating system is set up to use madvise transparent hugepage.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15769](https://github.com/numpy/numpy/pull/15769))
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.einsum` accepts NumPy `int64` type in subscript list'
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no longer a type error thrown when `numpy.einsum` is passed a NumPy
    `int64` array as its subscript list.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16080](https://github.com/numpy/numpy/pull/16080))
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '`np.logaddexp2.identity` changed to `-inf`'
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc `~numpy.logaddexp2` now has an identity of `-inf`, allowing it to
    be called on empty sequences. This matches the identity of `~numpy.logaddexp`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16102](https://github.com/numpy/numpy/pull/16102))
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in fallback lapack_lite
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use 64-bit integer size on 64-bit platforms in the fallback LAPACK library,
    which is used when the system has no LAPACK installed, allowing it to deal with
    linear algebra for large arrays.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15218](https://github.com/numpy/numpy/pull/15218))
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use AVX512 intrinsic to implement `np.exp` when input is `np.float64`, which
    can improve the performance of `np.exp` with `np.float64` input 5-7x faster than
    before. The `_multiarray_umath.so` module has grown about 63 KB on linux64.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15648](https://github.com/numpy/numpy/pull/15648))
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Ability to disable madvise hugepages
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On Linux NumPy has previously added support for madavise hugepages which can
    improve performance for very large arrays. Unfortunately, on older Kernel versions
    this led to performance regressions, thus by default the support has been disabled
    on kernels before version 4.6\. To override the default, you can use the environment
    variable:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: or set it to 1 to force enabling support. Note that this only makes a difference
    if the operating system is set up to use madvise transparent hugepage.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15769](https://github.com/numpy/numpy/pull/15769))
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.einsum` accepts NumPy `int64` type in subscript list'
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no longer a type error thrown when `numpy.einsum` is passed a NumPy
    `int64` array as its subscript list.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16080](https://github.com/numpy/numpy/pull/16080))
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '`np.logaddexp2.identity` changed to `-inf`'
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc `~numpy.logaddexp2` now has an identity of `-inf`, allowing it to
    be called on empty sequences. This matches the identity of `~numpy.logaddexp`.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16102](https://github.com/numpy/numpy/pull/16102))
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remove handling of extra argument to `__array__`
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A code path and test have been in the code since NumPy 0.4 for a two-argument
    variant of `__array__(dtype=None, context=None)`. It was activated when calling
    `ufunc(op)` or `ufunc.reduce(op)` if `op.__array__` existed. However that variant
    is not documented, and it is not clear what the intention was for its use. It
    has been removed.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15118](https://github.com/numpy/numpy/pull/15118))
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.random._bit_generator` moved to `numpy.random.bit_generator`'
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to expose `numpy.random.BitGenerator` and `numpy.random.SeedSequence`
    to Cython, the `_bitgenerator` module is now public as `numpy.random.bit_generator`
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Cython access to the random distributions is provided via a `pxd` file
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`c_distributions.pxd` provides access to the c functions behind many of the
    random distributions from Cython, making it convenient to use and extend them.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15463](https://github.com/numpy/numpy/pull/15463))
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Fixed `eigh` and `cholesky` methods in `numpy.random.multivariate_normal`
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, when passing `method='eigh'` or `method='cholesky'`, `numpy.random.multivariate_normal`
    produced samples from the wrong distribution. This is now fixed.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15872](https://github.com/numpy/numpy/pull/15872))
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Fixed the jumping implementation in `MT19937.jumped`
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fix changes the stream produced from jumped MT19937 generators. It does
    not affect the stream produced using `RandomState` or `MT19937` that are directly
    seeded.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: The translation of the jumping code for the MT19937 contained a reversed loop
    ordering. `MT19937.jumped` matches the Makoto Matsumoto’s original implementation
    of the Horner and Sliding Window jump methods.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16153](https://github.com/numpy/numpy/pull/16153))
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Remove handling of extra argument to `__array__`
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A code path and test have been in the code since NumPy 0.4 for a two-argument
    variant of `__array__(dtype=None, context=None)`. It was activated when calling
    `ufunc(op)` or `ufunc.reduce(op)` if `op.__array__` existed. However that variant
    is not documented, and it is not clear what the intention was for its use. It
    has been removed.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15118](https://github.com/numpy/numpy/pull/15118))
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.random._bit_generator` moved to `numpy.random.bit_generator`'
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to expose `numpy.random.BitGenerator` and `numpy.random.SeedSequence`
    to Cython, the `_bitgenerator` module is now public as `numpy.random.bit_generator`
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Cython access to the random distributions is provided via a `pxd` file
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`c_distributions.pxd` provides access to the c functions behind many of the
    random distributions from Cython, making it convenient to use and extend them.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15463](https://github.com/numpy/numpy/pull/15463))
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Fixed `eigh` and `cholesky` methods in `numpy.random.multivariate_normal`
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, when passing `method='eigh'` or `method='cholesky'`, `numpy.random.multivariate_normal`
    produced samples from the wrong distribution. This is now fixed.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15872](https://github.com/numpy/numpy/pull/15872))
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Fixed the jumping implementation in `MT19937.jumped`
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This fix changes the stream produced from jumped MT19937 generators. It does
    not affect the stream produced using `RandomState` or `MT19937` that are directly
    seeded.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: The translation of the jumping code for the MT19937 contained a reversed loop
    ordering. `MT19937.jumped` matches the Makoto Matsumoto’s original implementation
    of the Horner and Sliding Window jump methods.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16153](https://github.com/numpy/numpy/pull/16153))
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
