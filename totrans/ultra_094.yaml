- en: Troubleshooting Common YOLO Issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/guides/yolo-common-issues/`](https://docs.ultralytics.com/guides/yolo-common-issues/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![YOLO Common Issues Image](img/d3266e8e3d358bc5c4e04042366f6384.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This guide serves as a comprehensive aid for troubleshooting common issues encountered
    while working with YOLOv8 on your Ultralytics projects. Navigating through these
    issues can be a breeze with the right guidance, ensuring your projects remain
    on track without unnecessary delays.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/TG9exsBlkDE`](https://www.youtube.com/embed/TG9exsBlkDE)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Ultralytics YOLOv8 Common Issues | Installation Errors, Model Training
    Issues'
  prefs: []
  type: TYPE_NORMAL
- en: Common Issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installation Errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installation errors can arise due to various reasons, such as incompatible
    versions, missing dependencies, or incorrect environment setups. First, check
    to make sure you are doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You're using Python 3.8 or later as recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have the correct version of PyTorch (1.8 or later) installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using virtual environments to avoid conflicts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the official installation guide step by step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, here are some common installation issues users have encountered,
    along with their respective solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import Errors or Dependency Issues - If you''re getting errors during the import
    of YOLOv8, or you''re having issues related to dependencies, consider the following
    troubleshooting steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fresh Installation**: Sometimes, starting with a fresh installation can resolve
    unexpected issues. Especially with libraries like Ultralytics, where updates might
    introduce changes to the file tree structure or functionalities.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Regularly**: Ensure you''re using the latest version of the library.
    Older versions might not be compatible with recent updates, leading to potential
    conflicts or issues.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check Dependencies**: Verify that all required dependencies are correctly
    installed and are of the compatible versions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review Changes**: If you initially cloned or installed an older version,
    be aware that significant updates might affect the library''s structure or functionalities.
    Always refer to the official documentation or changelogs to understand any major
    changes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, keeping your libraries and dependencies up-to-date is crucial for
    a smooth and error-free experience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running YOLOv8 on GPU - If you''re having trouble running YOLOv8 on GPU, consider
    the following troubleshooting steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verify CUDA Compatibility and Installation**: Ensure your GPU is CUDA compatible
    and that CUDA is correctly installed. Use the `nvidia-smi` command to check the
    status of your NVIDIA GPU and CUDA version.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check PyTorch and CUDA Integration**: Ensure PyTorch can utilize CUDA by
    running `import torch; print(torch.cuda.is_available())` in a Python terminal.
    If it returns ''True'', PyTorch is set up to use CUDA.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment Activation**: Ensure you''re in the correct environment where
    all necessary packages are installed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Your Packages**: Outdated packages might not be compatible with your
    GPU. Keep them updated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program Configuration**: Check if the program or code specifies GPU usage.
    In YOLOv8, this might be in the settings or configuration.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Model Training Issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section will address common issues faced while training and their respective
    explanations and solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Verification of Configuration Settings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: You are unsure whether the configuration settings in the `.yaml`
    file are being applied correctly during model training.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: The configuration settings in the `.yaml` file should be applied
    when using the `model.train()` function. To ensure that these settings are correctly
    applied, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Confirm that the path to your `.yaml` configuration file is correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make sure you pass the path to your `.yaml` file as the `data` argument when
    calling `model.train()`, as shown below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Accelerating Training with Multiple GPUs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: Training is slow on a single GPU, and you want to speed up the process
    using multiple GPUs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Increasing the batch size can accelerate training, but it''s
    essential to consider GPU memory capacity. To speed up training with multiple
    GPUs, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have multiple GPUs available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify your .yaml configuration file to specify the number of GPUs to use,
    e.g., gpus: 4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the batch size accordingly to fully utilize the multiple GPUs without
    exceeding memory limits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify your training command to utilize multiple GPUs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Continuous Monitoring Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: You want to know which parameters should be continuously monitored
    during training, apart from loss.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: While loss is a crucial metric to monitor, it''s also essential
    to track other metrics for model performance optimization. Some key metrics to
    monitor during training include:'
  prefs: []
  type: TYPE_NORMAL
- en: Precision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean Average Precision (mAP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can access these metrics from the training logs or by using tools like TensorBoard
    or wandb for visualization. Implementing early stopping based on these metrics
    can help you achieve better results.
  prefs: []
  type: TYPE_NORMAL
- en: Tools for Tracking Training Progress
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: You are looking for recommendations on tools to track training progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: To track and visualize training progress, you can consider using
    the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[TensorBoard](https://www.tensorflow.org/tensorboard): TensorBoard is a popular
    choice for visualizing training metrics, including loss, accuracy, and more. You
    can integrate it with your YOLOv8 training process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comet](https://bit.ly/yolov8-readme-comet): Comet provides an extensive toolkit
    for experiment tracking and comparison. It allows you to track metrics, hyperparameters,
    and even model weights. Integration with YOLO models is also straightforward,
    providing you with a complete overview of your experiment cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ultralytics HUB](https://hub.ultralytics.com): Ultralytics HUB offers a specialized
    environment for tracking YOLO models, giving you a one-stop platform to manage
    metrics, datasets, and even collaborate with your team. Given its tailored focus
    on YOLO, it offers more customized tracking options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these tools offers its own set of advantages, so you may want to consider
    the specific needs of your project when making a choice.
  prefs: []
  type: TYPE_NORMAL
- en: How to Check if Training is Happening on the GPU
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: The ''device'' value in the training logs is ''null,'' and you''re
    unsure if training is happening on the GPU.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: The ''device'' value being ''null'' typically means that the
    training process is set to automatically use an available GPU, which is the default
    behavior. To ensure training occurs on a specific GPU, you can manually set the
    ''device'' value to the GPU index (e.g., ''0'' for the first GPU) in your .yaml
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will explicitly assign the training process to the specified GPU. If you
    wish to train on the CPU, set 'device' to 'cpu'.
  prefs: []
  type: TYPE_NORMAL
- en: Keep an eye on the 'runs' folder for logs and metrics to monitor training progress
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Key Considerations for Effective Model Training
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here are some things to keep in mind, if you are facing issues related to model
    training.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dataset Format and Labels**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importance: The foundation of any machine learning model lies in the quality
    and format of the data it is trained on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommendation: Ensure that your custom dataset and its associated labels adhere
    to the expected format. It''s crucial to verify that annotations are accurate
    and of high quality. Incorrect or subpar annotations can derail the model''s learning
    process, leading to unpredictable outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Convergence**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importance: Achieving model convergence ensures that the model has sufficiently
    learned from the training data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommendation: When training a model ''from scratch'', it''s vital to ensure
    that the model reaches a satisfactory level of convergence. This might necessitate
    a longer training duration, with more epochs, compared to when you''re fine-tuning
    an existing model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learning Rate and Batch Size**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importance: These hyperparameters play a pivotal role in determining how the
    model updates its weights during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommendation: Regularly evaluate if the chosen learning rate and batch size
    are optimal for your specific dataset. Parameters that are not in harmony with
    the dataset''s characteristics can hinder the model''s performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class Distribution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importance: The distribution of classes in your dataset can influence the model''s
    prediction tendencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommendation: Regularly assess the distribution of classes within your dataset.
    If there''s a class imbalance, there''s a risk that the model will develop a bias
    towards the more prevalent class. This bias can be evident in the confusion matrix,
    where the model might predominantly predict the majority class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Check with Pretrained Weights**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Importance: Leveraging pretrained weights can provide a solid starting point
    for model training, especially when data is limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recommendation: As a diagnostic step, consider training your model using the
    same data but initializing it with pretrained weights. If this approach yields
    a well-formed confusion matrix, it could suggest that the ''from scratch'' model
    might require further training or adjustments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issues Related to Model Predictions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section will address common issues faced during model prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Bounding Box Predictions With Your YOLOv8 Custom Model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: When running predictions with a custom YOLOv8 model, there are challenges
    with the format and visualization of the bounding box coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Coordinate Format: YOLOv8 provides bounding box coordinates in absolute pixel
    values. To convert these to relative coordinates (ranging from 0 to 1), you need
    to divide by the image dimensions. For example, let''s say your image size is
    640x640\. Then you would do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File Name: To obtain the file name of the image you''re predicting on, access
    the image file path directly from the result object within your prediction loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering Objects in YOLOv8 Predictions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: Facing issues with how to filter and display only specific objects
    in the prediction results when running YOLOv8 using the Ultralytics library.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: To detect specific classes use the classes argument to specify
    the classes you want to include in the output. For instance, to detect only cars
    (assuming ''cars'' have class index 2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Understanding Precision Metrics in YOLOv8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: Confusion regarding the difference between box precision, mask precision,
    and confusion matrix precision in YOLOv8.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Box precision measures the accuracy of predicted bounding boxes
    compared to the actual ground truth boxes using IoU (Intersection over Union)
    as the metric. Mask precision assesses the agreement between predicted segmentation
    masks and ground truth masks in pixel-wise object classification. Confusion matrix
    precision, on the other hand, focuses on overall classification accuracy across
    all classes and does not consider the geometric accuracy of predictions. It''s
    important to note that a bounding box can be geometrically accurate (true positive)
    even if the class prediction is wrong, leading to differences between box precision
    and confusion matrix precision. These metrics evaluate distinct aspects of a model''s
    performance, reflecting the need for different evaluation metrics in various tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Object Dimensions in YOLOv8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue**: Difficulty in retrieving the length and height of detected objects
    in YOLOv8, especially when multiple objects are detected in an image.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: To retrieve the bounding box dimensions, first use the Ultralytics
    YOLOv8 model to predict objects in an image. Then, extract the width and height
    information of bounding boxes from the prediction results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Deployment Challenges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GPU Deployment Issues
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue:** Deploying models in a multi-GPU environment can sometimes lead to
    unexpected behaviors like unexpected memory usage, inconsistent results across
    GPUs, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Check for default GPU initialization. Some frameworks, like PyTorch,
    might initialize CUDA operations on a default GPU before transitioning to the
    designated GPUs. To bypass unexpected default initializations, specify the GPU
    directly during deployment and prediction. Then, use tools to monitor GPU utilization
    and memory usage to identify any anomalies in real-time. Also, ensure you''re
    using the latest version of the framework or library.'
  prefs: []
  type: TYPE_NORMAL
- en: Model Conversion/Exporting Issues
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Issue:** During the process of converting or exporting machine learning models
    to different formats or platforms, users might encounter errors or unexpected
    behaviors.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compatibility Check: Ensure that you are using versions of libraries and frameworks
    that are compatible with each other. Mismatched versions can lead to unexpected
    errors during conversion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Environment Reset: If you''re using an interactive environment like Jupyter
    or Colab, consider restarting your environment after making significant changes
    or installations. A fresh start can sometimes resolve underlying issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Documentation: Always refer to the official documentation of the tool
    or library you are using for conversion. It often contains specific guidelines
    and best practices for model exporting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Community Support: Check the library or framework''s official repository for
    similar issues reported by other users. The maintainers or community might have
    provided solutions or workarounds in discussion threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update Regularly: Ensure that you are using the latest version of the tool
    or library. Developers frequently release updates that fix known bugs or improve
    functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test Incrementally: Before performing a full conversion, test the process with
    a smaller model or dataset to identify potential issues early on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community and Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Engaging with a community of like-minded individuals can significantly enhance
    your experience and success in working with YOLOv8\. Below are some channels and
    resources you may find helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Forums and Channels for Getting Help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**GitHub Issues:** The YOLOv8 repository on GitHub has an [Issues tab](https://github.com/ultralytics/ultralytics/issues)
    where you can ask questions, report bugs, and suggest new features. The community
    and maintainers are active here, and it''s a great place to get help with specific
    problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ultralytics Discord Server:** Ultralytics has a [Discord server](https://ultralytics.com/discord/)
    where you can interact with other users and the developers.'
  prefs: []
  type: TYPE_NORMAL
- en: Official Documentation and Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Ultralytics YOLOv8 Docs**: The official documentation provides a comprehensive
    overview of YOLOv8, along with guides on installation, usage, and troubleshooting.'
  prefs: []
  type: TYPE_NORMAL
- en: These resources should provide a solid foundation for troubleshooting and improving
    your YOLOv8 projects, as well as connecting with others in the YOLOv8 community.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Troubleshooting is an integral part of any development process, and being equipped
    with the right knowledge can significantly reduce the time and effort spent in
    resolving issues. This guide aimed to address the most common challenges faced
    by users of the YOLOv8 model within the Ultralytics ecosystem. By understanding
    and addressing these common issues, you can ensure smoother project progress and
    achieve better results with your computer vision tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the Ultralytics community is a valuable resource. Engaging with fellow
    developers and experts can provide additional insights and solutions that might
    not be covered in standard documentation. Always keep learning, experimenting,
    and sharing your experiences to contribute to the collective knowledge of the
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Happy troubleshooting!
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I resolve installation errors with YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installation errors can often be due to compatibility issues or missing dependencies.
    Ensure you use Python 3.8 or later and have PyTorch 1.8 or later installed. It's
    beneficial to use virtual environments to avoid conflicts. For a step-by-step
    installation guide, follow our official installation guide. If you encounter import
    errors, try a fresh installation or update the library to the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Why is my YOLOv8 model training slow on a single GPU?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Training on a single GPU might be slow due to large batch sizes or insufficient
    memory. To speed up training, use multiple GPUs. Ensure your system has multiple
    GPUs available and adjust your `.yaml` configuration file to specify the number
    of GPUs, e.g., `gpus: 4`. Increase the batch size accordingly to fully utilize
    the GPUs without exceeding memory limits. Example command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How can I ensure my YOLOv8 model is training on the GPU?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the ''device'' value shows ''null'' in the training logs, it generally means
    the training process is set to automatically use an available GPU. To explicitly
    assign a specific GPU, set the ''device'' value in your `.yaml` configuration
    file. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This sets the training process to the first GPU. Consult the `nvidia-smi` command
    to confirm your CUDA setup.
  prefs: []
  type: TYPE_NORMAL
- en: How can I monitor and track my YOLOv8 model training progress?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tracking and visualizing training progress can be efficiently managed through
    tools like [TensorBoard](https://www.tensorflow.org/tensorboard), [Comet](https://bit.ly/yolov8-readme-comet),
    and [Ultralytics HUB](https://hub.ultralytics.com). These tools allow you to log
    and visualize metrics such as loss, precision, recall, and mAP. Implementing early
    stopping based on these metrics can also help achieve better training outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: What should I do if YOLOv8 is not recognizing my dataset format?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure your dataset and labels conform to the expected format. Verify that annotations
    are accurate and of high quality. If you face any issues, refer to the [Data Collection
    and Annotation](https://docs.ultralytics.com/guides/data-collection-and-annotation/)
    guide for best practices. For more dataset-specific guidance, check the [Datasets](https://docs.ultralytics.com/datasets/)
    section in the documentation.
  prefs: []
  type: TYPE_NORMAL
