- en: Prufer Sequences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prufer 序列
- en: Original text：[https://docs.sympy.org/latest/modules/combinatorics/prufer.html](https://docs.sympy.org/latest/modules/combinatorics/prufer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/combinatorics/prufer.html](https://docs.sympy.org/latest/modules/combinatorics/prufer.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Prufer correspondence is an algorithm that describes the bijection between
    labeled trees and the Prufer code. A Prufer code of a labeled tree is unique up
    to isomorphism and has a length of n - 2.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Prufer 对应是一种描述标记树和 Prufer 代码之间双射的算法。标记树的 Prufer 代码在同构下是唯一的，并且长度为 n - 2。
- en: Prufer sequences were first used by Heinz Prufer to give a proof of Cayley’s
    formula.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Prufer 序列最初由 Heinz Prufer 使用，用于证明 Cayley 公式。
- en: References
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R93](#id1)]'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R93](#id1)]'
- en: '[https://mathworld.wolfram.com/LabeledTree.html](https://mathworld.wolfram.com/LabeledTree.html)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/LabeledTree.html](https://mathworld.wolfram.com/LabeledTree.html)'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Return a list of edges and the number of nodes from the given runs that connect
    nodes in an integer-labelled tree.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定运行连接整数标记的树中节点的边列表和节点数量。
- en: All node numbers will be shifted so that the minimum node is 0\. It is not a
    problem if edges are repeated in the runs; only unique edges are returned. There
    is no assumption made about what the range of the node labels should be, but all
    nodes from the smallest through the largest must be present.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有节点编号将被转移，以使最小节点为 0\. 如果在运行中重复边，不会产生问题；仅返回唯一边。对节点标签的范围没有假设，但必须包含从最小到最大的所有节点。
- en: Examples
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Duplicate edges are removed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 删除重复的边：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Generates the Prufer sequence that is delta beyond the current one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生成当前序列之后的 delta Prufer 序列。
- en: Examples
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Returns the number of nodes in the tree.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回树中节点的数量。
- en: Examples
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Generates the Prufer sequence that is -delta before the current one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 生成当前序列之前的 -delta Prufer 序列。
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Computes the rank of a Prufer sequence.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 Prufer 序列的秩。
- en: Examples
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Returns Prufer sequence for the Prufer object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Prufer 对象的 Prufer 序列。
- en: This sequence is found by removing the highest numbered vertex, recording the
    node it was attached to, and continuing until only two vertices remain. The Prufer
    sequence is the list of recorded nodes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列是通过移除编号最高的顶点、记录其连接到的节点，并继续此过程直到仅剩两个顶点为止找到的。Prufer 序列即为记录的节点列表。
- en: Examples
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`to_prufer`](#sympy.combinatorics.prufer.Prufer.to_prufer "sympy.combinatorics.prufer.Prufer.to_prufer")'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`to_prufer`](#sympy.combinatorics.prufer.Prufer.to_prufer "sympy.combinatorics.prufer.Prufer.to_prufer")'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Returns the rank of the Prufer sequence.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Prufer 序列的秩。
- en: Examples
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev"),
    [`size`](#sympy.combinatorics.prufer.Prufer.size "sympy.combinatorics.prufer.Prufer.size")'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Return the number of possible trees of this Prufer object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此Prufer对象可能的树的数量。
- en: Examples
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prufer_rank`](#sympy.combinatorics.prufer.Prufer.prufer_rank "sympy.combinatorics.prufer.Prufer.prufer_rank"),
    [`rank`](#sympy.combinatorics.prufer.Prufer.rank "sympy.combinatorics.prufer.Prufer.rank"),
    [`next`](#sympy.combinatorics.prufer.Prufer.next "sympy.combinatorics.prufer.Prufer.next"),
    [`prev`](#sympy.combinatorics.prufer.Prufer.prev "sympy.combinatorics.prufer.Prufer.prev")'
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Return the Prufer sequence for a tree given as a list of edges where `n` is
    the number of nodes in the tree.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 返回作为边列表的树的Prufer序列，其中`n`是树中的节点数。
- en: Examples
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`prufer_repr`](#sympy.combinatorics.prufer.Prufer.prufer_repr "sympy.combinatorics.prufer.Prufer.prufer_repr")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`prufer_repr`](#sympy.combinatorics.prufer.Prufer.prufer_repr "sympy.combinatorics.prufer.Prufer.prufer_repr")'
- en: returns Prufer sequence of a Prufer object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Prufer对象的Prufer序列。
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Return the tree (as a list of edges) of the given Prufer sequence.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定Prufer序列的树（作为边列表）。
- en: Examples
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: See also
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`tree_repr`](#sympy.combinatorics.prufer.Prufer.tree_repr "sympy.combinatorics.prufer.Prufer.tree_repr")'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tree_repr`](#sympy.combinatorics.prufer.Prufer.tree_repr "sympy.combinatorics.prufer.Prufer.tree_repr")'
- en: returns tree representation of a Prufer object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Prufer对象的树表示。
- en: References
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R94](#id2)]'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R94](#id2)]'
- en: '[https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html](https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html](https://hamberg.no/erlend/posts/2010-11-06-prufer-sequence-compact-tree-representation.html)'
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Returns the tree representation of the Prufer object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Prufer对象的树表示。
- en: Examples
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`to_tree`](#sympy.combinatorics.prufer.Prufer.to_tree "sympy.combinatorics.prufer.Prufer.to_tree")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`to_tree`](#sympy.combinatorics.prufer.Prufer.to_tree "sympy.combinatorics.prufer.Prufer.to_tree")'
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Finds the unranked Prufer sequence.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 找到未排序的Prufer序列。
- en: Examples
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
