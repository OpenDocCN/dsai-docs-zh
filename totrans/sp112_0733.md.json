["```py\nclass scipy.spatial.SphericalVoronoi(points, radius=1, center=None, threshold=1e-06)\n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.spatial import SphericalVoronoi, geometric_slerp\n>>> from mpl_toolkits.mplot3d import proj3d\n>>> # set input data\n>>> points = np.array([[0, 0, 1], [0, 0, -1], [1, 0, 0],\n...                    [0, 1, 0], [0, -1, 0], [-1, 0, 0], ]) \n```", "```py\n>>> radius = 1\n>>> center = np.array([0, 0, 0])\n>>> sv = SphericalVoronoi(points, radius, center) \n```", "```py\n>>> # sort vertices (optional, helpful for plotting)\n>>> sv.sort_vertices_of_regions()\n>>> t_vals = np.linspace(0, 1, 2000)\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111, projection='3d')\n>>> # plot the unit sphere for reference (optional)\n>>> u = np.linspace(0, 2 * np.pi, 100)\n>>> v = np.linspace(0, np.pi, 100)\n>>> x = np.outer(np.cos(u), np.sin(v))\n>>> y = np.outer(np.sin(u), np.sin(v))\n>>> z = np.outer(np.ones(np.size(u)), np.cos(v))\n>>> ax.plot_surface(x, y, z, color='y', alpha=0.1)\n>>> # plot generator points\n>>> ax.scatter(points[:, 0], points[:, 1], points[:, 2], c='b')\n>>> # plot Voronoi vertices\n>>> ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2],\n...                    c='g')\n>>> # indicate Voronoi regions (as Euclidean polygons)\n>>> for region in sv.regions:\n...    n = len(region)\n...    for i in range(n):\n...        start = sv.vertices[region][i]\n...        end = sv.vertices[region][(i + 1) % n]\n...        result = geometric_slerp(start, end, t_vals)\n...        ax.plot(result[..., 0],\n...                result[..., 1],\n...                result[..., 2],\n...                c='k')\n>>> ax.azim = 10\n>>> ax.elev = 40\n>>> _ = ax.set_xticks([])\n>>> _ = ax.set_yticks([])\n>>> _ = ax.set_zticks([])\n>>> fig.set_size_inches(4, 4)\n>>> plt.show() \n```"]