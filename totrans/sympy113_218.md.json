["```py\nclass sympy.physics.quantum.state.Bra(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import Bra\n>>> from sympy import symbols, I\n>>> b = Bra('psi')\n>>> b\n<psi|\n>>> b.hilbert_space\nH\n>>> b.is_commutative\nFalse \n```", "```py\n>>> b.dual\n|psi>\n>>> b.dual_class()\n<class 'sympy.physics.quantum.state.Ket'> \n```", "```py\n>>> n, m = symbols('n,m')\n>>> b = Bra(n,m) - I*Bra(m,n)\n>>> b\n-I*<mn| + <nm| \n```", "```py\n>>> b.subs(n,m)\n<mm| - I*<mm| \n```", "```py\nclass sympy.physics.quantum.state.BraBase(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.state.Ket(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import Ket\n>>> from sympy import symbols, I\n>>> k = Ket('psi')\n>>> k\n|psi>\n>>> k.hilbert_space\nH\n>>> k.is_commutative\nFalse\n>>> k.label\n(psi,) \n```", "```py\n>>> k.dual\n<psi|\n>>> k.dual_class()\n<class 'sympy.physics.quantum.state.Bra'> \n```", "```py\n>>> k0 = Ket(0)\n>>> k1 = Ket(1)\n>>> 2*I*k0 - 4*k1\n2*I*|0> - 4*|1> \n```", "```py\n>>> n, m = symbols('n,m')\n>>> k = Ket(n,m)\n>>> k\n|nm> \n```", "```py\nclass sympy.physics.quantum.state.KetBase(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.state.OrthogonalBra(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.state.OrthogonalKet(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import OrthogonalBra, OrthogonalKet\n>>> from sympy.abc import m, n\n>>> (OrthogonalBra(n)*OrthogonalKet(n)).doit()\n1\n>>> (OrthogonalBra(n)*OrthogonalKet(n+1)).doit()\n0\n>>> (OrthogonalBra(n)*OrthogonalKet(m)).doit()\n<n|m> \n```", "```py\nclass sympy.physics.quantum.state.OrthogonalState(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.state.State(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.state.StateBase(*args, **kwargs)\n```", "```py\nproperty dual\n```", "```py\nclassmethod dual_class()\n```", "```py\nproperty operators\n```", "```py\nclass sympy.physics.quantum.state.TimeDepBra(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import TimeDepBra\n>>> b = TimeDepBra('psi', 't')\n>>> b\n<psi;t|\n>>> b.time\nt\n>>> b.label\n(psi,)\n>>> b.hilbert_space\nH\n>>> b.dual\n|psi;t> \n```", "```py\nclass sympy.physics.quantum.state.TimeDepKet(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import TimeDepKet\n>>> k = TimeDepKet('psi', 't')\n>>> k\n|psi;t>\n>>> k.time\nt\n>>> k.label\n(psi,)\n>>> k.hilbert_space\nH \n```", "```py\n>>> k.dual\n<psi;t|\n>>> k.dual_class()\n<class 'sympy.physics.quantum.state.TimeDepBra'> \n```", "```py\nclass sympy.physics.quantum.state.TimeDepState(*args, **kwargs)\n```", "```py\nproperty label\n```", "```py\nproperty time\n```", "```py\nclass sympy.physics.quantum.state.Wavefunction(*args)\n```", "```py\n>>> from sympy import Symbol, Piecewise, pi, N\n>>> from sympy.functions import sqrt, sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x = Symbol('x', real=True)\n>>> n = 1\n>>> L = 1\n>>> g = Piecewise((0, x < 0), (0, x > L), (sqrt(2//L)*sin(n*pi*x/L), True))\n>>> f = Wavefunction(g, x)\n>>> f.norm\n1\n>>> f.is_normalized\nTrue\n>>> p = f.prob()\n>>> p(0)\n0\n>>> p(L)\n0\n>>> p(0.5)\n2\n>>> p(0.85*L)\n2*sin(0.85*pi)**2\n>>> N(p(0.85*L))\n0.412214747707527 \n```", "```py\n>>> from sympy import symbols, pi, diff\n>>> from sympy.functions import sqrt, sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x, L = symbols('x,L', positive=True)\n>>> n = symbols('n', integer=True, positive=True)\n>>> g = sqrt(2/L)*sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.norm\n1\n>>> f(L+1)\n0\n>>> f(L-1)\nsqrt(2)*sin(pi*n*(L - 1)/L)/sqrt(L)\n>>> f(-1)\n0\n>>> f(0.85)\nsqrt(2)*sin(0.85*pi*n/L)/sqrt(L)\n>>> f(0.85, n=1, L=1)\nsqrt(2)*sin(0.85*pi)\n>>> f.is_commutative\nFalse \n```", "```py\n>>> expr = x**2\n>>> f = Wavefunction(expr, 'x')\n>>> type(f.variables[0])\n<class 'sympy.core.symbol.Symbol'> \n```", "```py\n>>> diff(f, x)\nWavefunction(2*x, x) \n```", "```py\nproperty expr\n```", "```py\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> from sympy import symbols\n>>> x, y = symbols('x, y')\n>>> f = Wavefunction(x**2, x)\n>>> f.expr\nx**2 \n```", "```py\nproperty is_commutative\n```", "```py\nproperty is_normalized\n```", "```py\n>>> from sympy import symbols, pi\n>>> from sympy.functions import sqrt, sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x, L = symbols('x,L', positive=True)\n>>> n = symbols('n', integer=True, positive=True)\n>>> g = sqrt(2/L)*sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.is_normalized\nTrue \n```", "```py\nproperty limits\n```", "```py\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> from sympy import symbols\n>>> x, y = symbols('x, y')\n>>> f = Wavefunction(x**2, (x, 0, 1))\n>>> f.limits\n{x: (0, 1)}\n>>> f = Wavefunction(x**2, x)\n>>> f.limits\n{x: (-oo, oo)}\n>>> f = Wavefunction(x**2 + y**2, x, (y, -1, 2))\n>>> f.limits\n{x: (-oo, oo), y: (-1, 2)} \n```", "```py\nproperty norm\n```", "```py\n>>> from sympy import symbols, pi\n>>> from sympy.functions import sqrt, sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x, L = symbols('x,L', positive=True)\n>>> n = symbols('n', integer=True, positive=True)\n>>> g = sqrt(2/L)*sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.norm\n1\n>>> g = sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.norm\nsqrt(2)*sqrt(L)/2 \n```", "```py\nnormalize()\n```", "```py\n>>> from sympy import symbols, pi\n>>> from sympy.functions import sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x = symbols('x', real=True)\n>>> L = symbols('L', positive=True)\n>>> n = symbols('n', integer=True, positive=True)\n>>> g = sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.normalize()\nWavefunction(sqrt(2)*sin(pi*n*x/L)/sqrt(L), (x, 0, L)) \n```", "```py\nprob()\n```", "```py\n>>> from sympy import symbols, pi\n>>> from sympy.functions import sin\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> x, L = symbols('x,L', real=True)\n>>> n = symbols('n', integer=True)\n>>> g = sin(n*pi*x/L)\n>>> f = Wavefunction(g, (x, 0, L))\n>>> f.prob()\nWavefunction(sin(pi*n*x/L)**2, x) \n```", "```py\nproperty variables\n```", "```py\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> from sympy import symbols\n>>> x,y = symbols('x,y')\n>>> f = Wavefunction(x*y, x, y)\n>>> f.variables\n(x, y)\n>>> g = Wavefunction(x*y, x)\n>>> g.variables\n(x,) \n```"]