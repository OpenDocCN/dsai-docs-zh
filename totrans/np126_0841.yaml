- en: numpy.nansum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nansum.html](https://numpy.org/doc/1.26/reference/generated/numpy.nansum.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the sum of array elements over a given axis treating Not a Numbers (NaNs)
    as zero.
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy versions <= 1.9.0 Nan is returned for slices that are all-NaN or empty.
    In later versions zero is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing numbers whose sum is desired. If *a* is not an array, a conversion
    is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{int, tuple of int, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the sum is computed. The default is to compute the
    sum of the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of the returned array and of the accumulator in which the elements
    are summed. By default, the dtype of *a* is used. An exception is when *a* has
    an integer type with less precision than the platform (u)intp. In that case, the
    default will be either (u)int32 or (u)int64 depending on whether the platform
    is 32 or 64 bits. For inexact inputs, dtype must be inexact.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. The default is `None`.
    If provided, it must have the same shape as the expected output, but the type
    will be cast if necessary. See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details. The casting of NaN to integer can yield unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*.
  prefs: []
  type: TYPE_NORMAL
- en: If the value is anything but the default, then *keepdims* will be passed through
    to the [`mean`](numpy.mean.html#numpy.mean "numpy.mean") or [`sum`](numpy.sum.html#numpy.sum
    "numpy.sum") methods of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"). If the sub-classes methods does not implement *keepdims* any
    exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**initial**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Starting value for the sum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in the sum. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nansum**ndarray.'
  prefs: []
  type: TYPE_NORMAL
- en: A new array holding the result is returned unless *out* is specified, in which
    it is returned. The result has the same size as *a*, and the same shape as *a*
    if *axis* is not None or *a* is a 1-d array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.sum`](numpy.sum.html#numpy.sum "numpy.sum")'
  prefs: []
  type: TYPE_NORMAL
- en: Sum across array propagating NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isnan`](numpy.isnan.html#numpy.isnan "numpy.isnan")'
  prefs: []
  type: TYPE_NORMAL
- en: Show which elements are NaN.
  prefs: []
  type: TYPE_NORMAL
- en: '[`isfinite`](numpy.isfinite.html#numpy.isfinite "numpy.isfinite")'
  prefs: []
  type: TYPE_NORMAL
- en: Show which elements are not NaN or +/-inf.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If both positive and negative infinity are present, the sum will be Not A Number
    (NaN).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
