["```py\nnumpy.tensordot(a, b, axes=2)\n```", "```py\n>>> a = np.arange(60.).reshape(3,4,5)\n>>> b = np.arange(24.).reshape(4,3,2)\n>>> c = np.tensordot(a,b, axes=([1,0],[0,1]))\n>>> c.shape\n(5, 2)\n>>> c\narray([[4400., 4730.],\n [4532., 4874.],\n [4664., 5018.],\n [4796., 5162.],\n [4928., 5306.]])\n>>> # A slower but equivalent way of computing the same...\n>>> d = np.zeros((5,2))\n>>> for i in range(5):\n...   for j in range(2):\n...     for k in range(3):\n...       for n in range(4):\n...         d[i,j] += a[k,n,i] * b[n,k,j]\n>>> c == d\narray([[ True,  True],\n [ True,  True],\n [ True,  True],\n [ True,  True],\n [ True,  True]]) \n```", "```py\n>>> a = np.array(range(1, 9))\n>>> a.shape = (2, 2, 2)\n>>> A = np.array(('a', 'b', 'c', 'd'), dtype=object)\n>>> A.shape = (2, 2)\n>>> a; A\narray([[[1, 2],\n [3, 4]],\n [[5, 6],\n [7, 8]]])\narray([['a', 'b'],\n ['c', 'd']], dtype=object) \n```", "```py\n>>> np.tensordot(a, A) # third argument default is 2 for double-contraction\narray(['abbcccdddd', 'aaaaabbbbbbcccccccdddddddd'], dtype=object) \n```", "```py\n>>> np.tensordot(a, A, 1)\narray([[['acc', 'bdd'],\n ['aaacccc', 'bbbdddd']],\n [['aaaaacccccc', 'bbbbbdddddd'],\n ['aaaaaaacccccccc', 'bbbbbbbdddddddd']]], dtype=object) \n```", "```py\n>>> np.tensordot(a, A, 0) # tensor product (result too long to incl.)\narray([[[[['a', 'b'],\n ['c', 'd']],\n ... \n```", "```py\n>>> np.tensordot(a, A, (0, 1))\narray([[['abbbbb', 'cddddd'],\n ['aabbbbbb', 'ccdddddd']],\n [['aaabbbbbbb', 'cccddddddd'],\n ['aaaabbbbbbbb', 'ccccdddddddd']]], dtype=object) \n```", "```py\n>>> np.tensordot(a, A, (2, 1))\narray([[['abb', 'cdd'],\n ['aaabbbb', 'cccdddd']],\n [['aaaaabbbbbb', 'cccccdddddd'],\n ['aaaaaaabbbbbbbb', 'cccccccdddddddd']]], dtype=object) \n```", "```py\n>>> np.tensordot(a, A, ((0, 1), (0, 1)))\narray(['abbbcccccddddddd', 'aabbbbccccccdddddddd'], dtype=object) \n```", "```py\n>>> np.tensordot(a, A, ((2, 1), (1, 0)))\narray(['acccbbdddd', 'aaaaacccccccbbbbbbdddddddd'], dtype=object) \n```"]