- en: pandas.IntervalIndex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.IntervalIndex.html](https://pandas.pydata.org/docs/reference/api/pandas.IntervalIndex.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Immutable index of intervals that are closed on the same side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array-like (1-dimensional)'
  prefs: []
  type: TYPE_NORMAL
- en: Array-like (ndarray, `DateTimeArray`, `TimeDeltaArray`) containing Interval
    objects from which to build the IntervalIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '**closed**{‘left’, ‘right’, ‘both’, ‘neither’}, default ‘right’'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the intervals are closed on the left-side, right-side, both or neither.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype or None, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If None, dtype will be inferred.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the input data.
  prefs: []
  type: TYPE_NORMAL
- en: '**name**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Name to be stored in the index.
  prefs: []
  type: TYPE_NORMAL
- en: '**verify_integrity**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the IntervalIndex is valid.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Index`](pandas.Index.html#pandas.Index "pandas.Index")'
  prefs: []
  type: TYPE_NORMAL
- en: The base pandas Index type.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Interval`](pandas.Interval.html#pandas.Interval "pandas.Interval")'
  prefs: []
  type: TYPE_NORMAL
- en: A bounded slice-like interval; the elements of an IntervalIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '[`interval_range`](pandas.interval_range.html#pandas.interval_range "pandas.interval_range")'
  prefs: []
  type: TYPE_NORMAL
- en: Function to create a fixed frequency IntervalIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '[`cut`](pandas.cut.html#pandas.cut "pandas.cut")'
  prefs: []
  type: TYPE_NORMAL
- en: Bin values into discrete Intervals.
  prefs: []
  type: TYPE_NORMAL
- en: '[`qcut`](pandas.qcut.html#pandas.qcut "pandas.qcut")'
  prefs: []
  type: TYPE_NORMAL
- en: Bin values into equal-sized Intervals based on rank or sample quantiles.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See the [user guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#intervalindex)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A new `IntervalIndex` is typically constructed using [`interval_range()`](pandas.interval_range.html#pandas.interval_range
    "pandas.interval_range"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It may also be constructed using one of the constructor methods: [`IntervalIndex.from_arrays()`](pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays
    "pandas.IntervalIndex.from_arrays"), [`IntervalIndex.from_breaks()`](pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks
    "pandas.IntervalIndex.from_breaks"), and [`IntervalIndex.from_tuples()`](pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples
    "pandas.IntervalIndex.from_tuples").'
  prefs: []
  type: TYPE_NORMAL
- en: See further examples in the doc strings of `interval_range` and the mentioned
    constructor methods.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`closed`](pandas.IntervalIndex.closed.html#pandas.IntervalIndex.closed "pandas.IntervalIndex.closed")
    | String describing the inclusive side the intervals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_empty`](pandas.IntervalIndex.is_empty.html#pandas.IntervalIndex.is_empty
    "pandas.IntervalIndex.is_empty") | Indicates if an interval is empty, meaning
    it contains no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_non_overlapping_monotonic`](pandas.IntervalIndex.is_non_overlapping_monotonic.html#pandas.IntervalIndex.is_non_overlapping_monotonic
    "pandas.IntervalIndex.is_non_overlapping_monotonic") | Return a boolean whether
    the IntervalArray is non-overlapping and monotonic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_overlapping`](pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") | Return True if the IntervalIndex has
    overlapping intervals, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`values`](pandas.IntervalIndex.values.html#pandas.IntervalIndex.values "pandas.IntervalIndex.values")
    | Return an array representing the data in the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| **left** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **right** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **mid** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **length** |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`from_arrays`](pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays
    "pandas.IntervalIndex.from_arrays")(left, right[, closed, name, ...]) | Construct
    from two arrays defining the left and right bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_tuples`](pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples
    "pandas.IntervalIndex.from_tuples")(data[, closed, name, copy, dtype]) | Construct
    an IntervalIndex from an array-like of tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_breaks`](pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks
    "pandas.IntervalIndex.from_breaks")(breaks[, closed, name, copy, dtype]) | Construct
    an IntervalIndex from an array of splits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`contains`](pandas.IntervalIndex.contains.html#pandas.IntervalIndex.contains
    "pandas.IntervalIndex.contains")(*args, **kwargs) | Check elementwise if the Intervals
    contain the value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`overlaps`](pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps")(*args, **kwargs) | Check elementwise if an Interval
    overlaps the values in the IntervalArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_closed`](pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed")(*args, **kwargs) | Return an identical IntervalArray
    closed on the specified side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_tuples`](pandas.IntervalIndex.to_tuples.html#pandas.IntervalIndex.to_tuples
    "pandas.IntervalIndex.to_tuples")(*args, **kwargs) | Return an ndarray (if self
    is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left,
    right). |'
  prefs: []
  type: TYPE_TB
