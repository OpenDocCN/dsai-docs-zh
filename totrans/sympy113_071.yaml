- en: Polycyclic Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/pc_groups.html](https://docs.sympy.org/latest/modules/combinatorics/pc_groups.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This module presents the functionality designed for computing with polycyclic
    groups(PcGroup for short). The name of the corresponding SymPy object is `PolycyclicGroup`.
    The functions or classes described here are studied under **Computational Group
    Theory**.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of functionalities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The construction of PolycyclicGroup from a given PermutationGroup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation of polycyclic generating sequence(pcgs for short) and polycyclic
    series(pc_series).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation of relative order for polycyclic series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of class Collector which can be treated as a base for polycylic
    groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of polycyclic group presentation(pc_presentation for short).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation of exponent vector, depth and leading exponent for a given element
    of a polycyclic group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a description of fundamental algorithms of polycyclic groups, we often make
    use of *Handbook of Computational Group Theory*.
  prefs: []
  type: TYPE_NORMAL
- en: The Construction of Polycyclic Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given a Permutation Group, A Polycyclic Group is constructed by computing the
    corresponding polycylic generating sequence, polycyclic series and it’s relative
    order.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes of PolycyclicGroup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`pc_sequence` : Polycyclic sequence is formed by collecting all the missing
    generators between the adjacent groups in the derived series of given permutation
    group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pc_series` : Polycyclic series is formed by adding all the missing generators
    of `der[i+1]` in `der[i]`, where `der` represents derived series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relative_order` : A list, computed by the ratio of adjacent groups in pc_series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collector` : By default, it is None. Collector class provides the polycyclic
    presentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Construction of Collector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Collector is one of the attributes of class PolycyclicGroup.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes of Collector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Collector posses all the attributes of PolycyclicGroup, In addition there are
    few more attributes which are defined below:'
  prefs: []
  type: TYPE_NORMAL
- en: '`free_group` : free_group provides the mapping of polycyclic generating sequence
    with the free group elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pc_presentation` : Provides the presentation of polycyclic groups with the
    help of power and conjugate relators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Minimal Uncollected Subword
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A word `V` defined on generators in the free_group of pc_group is a minimal
    uncollected subword of the word `W` if `V` is a subword of `W` and it has one
    of the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: \(v = {x_{i+1}}^{a_j}x_i\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(v = {x_{i+1}}^{a_j}{x_i}^{-1}\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(v = {x_i}^{a_j}\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(a_j \notin \{0, \ldots \mathrm{relative\_order}[j]-1\}\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Subword Index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a given word and it’s subword, subword_index computes the starting and ending
    index of the subword in the word.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Collected Word
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A word `W` is called collected, if `W` \(= {x_{i_1}}^{a_1} \ldots {x_{i_r}}^{a_r}\)
    with \(i_1 < i_2< \ldots < i_r\) and \(a_j\) is in \(\{1 \ldots s_{j-1}\}\), where
    \(s_j\) represents the respective relative order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The two are not identical but they are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Polycyclic Presentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The computation of presentation starts from the bottom of the pcgs and polycyclic
    series. Storing all the previous generators from pcgs and then taking the last
    generator as the generator which acts as a conjugator and conjugates all the previous
    generators in the list.
  prefs: []
  type: TYPE_NORMAL
- en: To get a clear picture, start with an example of SymmetricGroup(4). For S(4)
    there are 4 generators in pcgs say \([x_0, x_1, x_2, x_3]\) and the relative_order
    vector is [2, 3, 2, 2]. Starting from bottom of this sequence the presentation
    is computed in order as below.
  prefs: []
  type: TYPE_NORMAL
- en: 'using only \([x_3]\) from `pcgs` and `pc_series[4]` compute:'
  prefs: []
  type: TYPE_NORMAL
- en: \(x_3^2\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'using only \([x_3]\) from `pcgs` and `pc_series[3]` compute:'
  prefs: []
  type: TYPE_NORMAL
- en: \(x_2^2\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_2^{-1}x_3x_2\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'using \([x_3, x_2]\) from `pcgs` and `pc_series[2]` compute:'
  prefs: []
  type: TYPE_NORMAL
- en: \(x_1^3\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_1^{-1}x_3x_1\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_1^{-1}x_2x_1\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'using \([x_3, x_2, x_1]\) from `pcgs` and `pc_series[1]` compute:'
  prefs: []
  type: TYPE_NORMAL
- en: \(x_0^2\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_0^{-1}x_3x_0\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_0^{-1}x_2x_0\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \(x_0^{-1}x_1x_0\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing to note is same group can have different pcgs due to variying derived_series
    which, results in different polycyclic presentations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Exponent Vector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any generator of the polycyclic group can be represented with the help of it’s
    polycyclic generating sequence. Hence, the length of exponent vector is equal
    to the length of the pcgs.
  prefs: []
  type: TYPE_NORMAL
- en: A given generator `g` of the polycyclic group, can be represented as \(g = x_1^{e_1}
    \ldots x_n^{e_n}\), where \(x_i\) represents polycyclic generators and `n` is
    the number of generators in the free_group equal to the length of pcgs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Depth of Polycyclic generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depth of a given polycyclic generator is defined as the index of the first non-zero
    entry in the exponent vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Computation of Leading Exponent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Leading exponent represents the exponent of polycyclic generator at the above
    depth.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Bibliography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Ho05]'
  prefs: []
  type: TYPE_NORMAL
- en: Derek F. Holt, Handbook of Computational Group Theory. In the series ‘Discrete
    Mathematics and its Applications’, [Chapman & Hall/CRC 2005, xvi + 514 p](https://www.routledge.com/Handbook-of-Computational-Group-Theory/Holt-Eick-OBrien/p/book/9781584883722).
  prefs: []
  type: TYPE_NORMAL
