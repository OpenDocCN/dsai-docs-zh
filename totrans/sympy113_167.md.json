["```py\n>>> from sympy.physics.mechanics import Particle, Point\n>>> from sympy import Symbol\n>>> m = Symbol('m')\n>>> po = Point('po')\n>>> # create a particle container\n>>> pa = Particle('pa', po, m) \n```", "```py\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, outer, Inertia\n>>> A = ReferenceFrame('A')\n>>> P = Point('P')\n>>> Inertia(P, outer(A.x, A.x))\n((A.x|A.x), P) \n```", "```py\n>>> from sympy.physics.mechanics import ReferenceFrame, inertia\n>>> N = ReferenceFrame('N')\n\nSupply a reference frame and the moments of inertia if the object\nis symmetrical:\n\n>>> inertia(N, 1, 2, 3)\n(N.x|N.x) + 2*(N.y|N.y) + 3*(N.z|N.z)\n\nSupply a reference frame along with the products and moments of inertia\nfor a general object:\n\n>>> inertia(N, 1, 2, 3, 4, 5, 6)\n(N.x|N.x) + 4*(N.x|N.y) + 6*(N.x|N.z) + 4*(N.y|N.x) + 2*(N.y|N.y) + 5*(N.y|N.z) + 6*(N.z|N.x) + 5*(N.z|N.y) + 3*(N.z|N.z) \n```", "```py\n>>> inertia(N, 1, 2, 3, 4, 5, 6).to_matrix(N)\nMatrix([\n[1, 4, 6],\n[4, 2, 5],\n[6, 5, 3]]) \n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.mechanics import ReferenceFrame, Point, RigidBody\n>>> from sympy.physics.mechanics import outer\n>>> m = Symbol('m')\n>>> A = ReferenceFrame('A')\n>>> P = Point('P')\n>>> I = outer(A.x, A.x)\n>>> # create a rigid body\n>>> B = RigidBody('B', P, A, m, (I, P)) \n```", "```py\n>>> from sympy.physics.mechanics import Point, ReferenceFrame, Force\n>>> N = ReferenceFrame('N')\n>>> Po = Point('Po')\n>>> Force(Po, N.x)\n(Po, N.x) \n```", "```py\n>>> from sympy.physics.mechanics import Torque\n>>> Torque(N, 2 * N.x)\n(N, 2*N.x) \n```", "```py\n>>> from sympy.physics.mechanics import RigidBody\n>>> rb = RigidBody('rb')\n>>> Force(rb, 3 * N.x)\n(rb_masscenter, 3*N.x)\n>>> Torque(rb, 4 * N.x)\n(rb_frame, 4*N.x) \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import dynamicsymbols, ReferenceFrame\n>>> from sympy.physics.mechanics import RigidBody, Particle, Point, outer\n>>> from sympy.physics.mechanics import linear_momentum, angular_momentum\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, M, l1 = symbols('m M l1')\n>>> q1d = dynamicsymbols('q1d')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> Ac = O.locatenew('Ac', l1 * N.x)\n>>> P = Ac.locatenew('P', l1 * N.x)\n>>> a = ReferenceFrame('a')\n>>> a.set_ang_vel(N, q1d * N.z)\n>>> Ac.v2pt_theory(O, N, a)\nl1*q1d*N.y\n>>> P.v2pt_theory(O, N, a)\n2*l1*q1d*N.y \n```", "```py\n>>> Pa = Particle('Pa', P, m)\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, M, (I, Ac)) \n```", "```py\n>>> linear_momentum(N,A)\nM*l1*q1d*N.y\n>>> angular_momentum(O, N, Pa)\n4*l1**2*m*q1d*N.z\n>>> linear_momentum(N, A, Pa)\n(M*l1*q1d + 2*l1*m*q1d)*N.y\n>>> angular_momentum(O, N, A, Pa)\n(M*l1**2*q1d + 4*l1**2*m*q1d + q1d)*N.z \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import dynamicsymbols, ReferenceFrame, outer\n>>> from sympy.physics.mechanics import RigidBody, Particle\n>>> from sympy.physics.mechanics import kinetic_energy, potential_energy, Point\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> m, M, l1, g, h, H = symbols('m M l1 g h H')\n>>> omega = dynamicsymbols('omega')\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> O.set_vel(N, 0 * N.x)\n>>> Ac = O.locatenew('Ac', l1 * N.x)\n>>> P = Ac.locatenew('P', l1 * N.x)\n>>> a = ReferenceFrame('a')\n>>> a.set_ang_vel(N, omega * N.z)\n>>> Ac.v2pt_theory(O, N, a)\nl1*omega*N.y\n>>> P.v2pt_theory(O, N, a)\n2*l1*omega*N.y\n>>> Pa = Particle('Pa', P, m)\n>>> I = outer(N.z, N.z)\n>>> A = RigidBody('A', Ac, a, M, (I, Ac)) \n```", "```py\n>>> kinetic_energy(N, Pa)\n2*l1**2*m*omega**2\n>>> kinetic_energy(N, Pa, A)\nM*l1**2*omega**2/2 + 2*l1**2*m*omega**2 + omega**2/2 \n```", "```py\n>>> Pa.potential_energy = m * g * h\n>>> A.potential_energy = M * g * H\n>>> potential_energy(A, Pa)\nH*M*g + g*h*m \n```", "```py\n>>> from sympy.physics.mechanics import Lagrangian\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> Lagrangian(N, Pa, A)\n-H*M*g + M*l1**2*omega**2/2 - g*h*m + 2*l1**2*m*omega**2 + omega**2/2 \n```"]