- en: pandas.DataFrame.interpolate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Fill NaN values using an interpolation method.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that only `method='linear'` is supported for DataFrame/Series with
    a MultiIndex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, default ‘linear’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interpolation technique to use. One of:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘linear’: Ignore the index and treat the values as equally spaced. This is
    the only method supported on MultiIndexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘time’: Works on daily and higher resolution data to interpolate given length
    of interval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘index’, ‘values’: use the actual numerical values of the index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘pad’: Fill in NaNs using existing values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘nearest’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’, ‘barycentric’, ‘polynomial’:
    Passed to scipy.interpolate.interp1d, whereas ‘spline’ is passed to scipy.interpolate.UnivariateSpline.
    These methods use the numerical values of the index. Both ‘polynomial’ and ‘spline’
    require that you also specify an order (int), e.g. `df.interpolate(method=''polynomial'',
    order=5)`. Note that, slinear method in Pandas refers to the Scipy first order
    spline instead of Pandas first order spline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘krogh’, ‘piecewise_polynomial’, ‘spline’, ‘pchip’, ‘akima’, ‘cubicspline’:
    Wrappers around the SciPy interpolation methods of similar names. See Notes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘from_derivatives’: Refers to scipy.interpolate.BPoly.from_derivatives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**{{0 or ‘index’, 1 or ‘columns’, None}}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to interpolate along. For Series this parameter is unused and defaults
    to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of consecutive NaNs to fill. Must be greater than 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Update the data in place if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_direction**{{‘forward’, ‘backward’, ‘both’}}, Optional'
  prefs: []
  type: TYPE_NORMAL
- en: Consecutive NaNs will be filled in this direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'If limit is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘method’ is ‘pad’ or ‘ffill’, ‘limit_direction’ must be ‘forward’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If ‘method’ is ‘backfill’ or ‘bfill’, ‘limit_direction’ must be ‘backwards’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If ‘limit’ is not specified:'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘method’ is ‘backfill’ or ‘bfill’, the default is ‘backward’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: else the default is ‘forward’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raises ValueError if limit_direction is ‘forward’ or ‘both’ and
  prefs: []
  type: TYPE_NORMAL
- en: method is ‘backfill’ or ‘bfill’.
  prefs: []
  type: TYPE_NORMAL
- en: raises ValueError if limit_direction is ‘backward’ or ‘both’ and
  prefs: []
  type: TYPE_NORMAL
- en: method is ‘pad’ or ‘ffill’.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit_area**{{None, ‘inside’, ‘outside’}}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If limit is specified, consecutive NaNs will be filled with this restriction.
  prefs: []
  type: TYPE_NORMAL
- en: '`None`: No fill restriction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘inside’: Only fill NaNs surrounded by valid values (interpolate).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘outside’: Only fill NaNs outside valid values (extrapolate).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**downcast**optional, ‘infer’ or None, defaults to None'
  prefs: []
  type: TYPE_NORMAL
- en: Downcast dtypes if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**``**kwargs``**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments to pass on to the interpolating function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame or None
  prefs: []
  type: TYPE_NORMAL
- en: Returns the same object type as the caller, interpolated at some or all `NaN`
    values or None if `inplace=True`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill missing values using different methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.Akima1DInterpolator`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.Akima1DInterpolator.html#scipy.interpolate.Akima1DInterpolator
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise cubic polynomials (Akima interpolator).
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.BPoly.from_derivatives`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.from_derivatives.html#scipy.interpolate.BPoly.from_derivatives
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise polynomial in the Bernstein basis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.interp1d`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html#scipy.interpolate.interp1d
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate a 1-D function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.KroghInterpolator`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate polynomial (Krogh interpolator).
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.PchipInterpolator`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy.interpolate.PchipInterpolator
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: PCHIP 1-d monotonic cubic interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.interpolate.CubicSpline`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html#scipy.interpolate.CubicSpline
    "(in SciPy v1.13.0)")'
  prefs: []
  type: TYPE_NORMAL
- en: Cubic spline data interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The ‘krogh’, ‘piecewise_polynomial’, ‘spline’, ‘pchip’ and ‘akima’ methods are
    wrappers around the respective SciPy implementations of similar names. These use
    the actual numerical values of the index. For more information on their behavior,
    see the [SciPy documentation](https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Filling in `NaN` in a [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    via linear interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Filling in `NaN` in a Series via polynomial interpolation or splines: Both
    ‘polynomial’ and ‘spline’ methods require that you also specify an `order` (int).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Fill the DataFrame forward (that is, going down) along each column using linear
    interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the last entry in column ‘a’ is interpolated differently, because there
    is no entry after it to use for interpolation. Note how the first entry in column
    ‘b’ remains `NaN`, because there is no entry before it to use for interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using polynomial interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
