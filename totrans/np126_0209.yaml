- en: numpy.ix_
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ix_.html](https://numpy.org/doc/1.26/reference/generated/numpy.ix_.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct an open mesh from multiple sequences.
  prefs: []
  type: TYPE_NORMAL
- en: This function takes N 1-D sequences and returns N outputs with N dimensions
    each, such that the shape is 1 in all but one dimension and the dimension with
    the non-unit shape value cycles through all N dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Using [`ix_`](#numpy.ix_ "numpy.ix_") one can quickly construct index arrays
    that will index the cross product. `a[np.ix_([1,3],[2,5])]` returns the array
    `[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**1-D sequences'
  prefs: []
  type: TYPE_NORMAL
- en: Each sequence should be of integer or boolean type. Boolean sequences will be
    interpreted as boolean masks for the corresponding dimension (equivalent to passing
    in `np.nonzero(boolean_sequence)`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**tuple of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: N arrays with N dimensions each, with N the number of input sequences. Together
    these arrays form an open mesh.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ogrid`](numpy.ogrid.html#numpy.ogrid "numpy.ogrid"), [`mgrid`](numpy.mgrid.html#numpy.mgrid
    "numpy.mgrid"), [`meshgrid`](numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
