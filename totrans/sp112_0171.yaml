- en: scipy.interpolate.BPoly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BPoly.html#scipy.interpolate.BPoly](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BPoly.html#scipy.interpolate.BPoly)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Piecewise polynomial in terms of coefficients and breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'The polynomial between `x[i]` and `x[i + 1]` is written in the Bernstein polynomial
    basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'where `k` is the degree of the polynomial, and:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: with `t = (x - x[i]) / (x[i+1] - x[i])` and `binom` is the binomial coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray, shape (k, m, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial coefficients, order *k* and *m* intervals
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray, shape (m+1,)'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial breakpoints. Must be sorted in either increasing or decreasing order.
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If bool, determines whether to extrapolate to out-of-bounds points based on
    first and last intervals, or to return NaNs. If ‘periodic’, periodic extrapolation
    is used. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis. Default is zero.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly "scipy.interpolate.PPoly")'
  prefs: []
  type: TYPE_NORMAL
- en: piecewise polynomials in the power basis
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Properties of Bernstein polynomials are well documented in the literature, see
    for example [[1]](#r0da78b0816f0-1) [[2]](#r0da78b0816f0-2) [[3]](#r0da78b0816f0-3).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bernstein_polynomial](https://en.wikipedia.org/wiki/Bernstein_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Kenneth I. Joy, Bernstein polynomials, [http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf](http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: E. H. Doha, A. H. Bhrawy, and M. A. Saker, Boundary Value Problems, vol 2011,
    article ID 829546, [DOI:10.1155/2011/829543](https://doi.org/10.1155/2011/829543).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This creates a 2nd order polynomial
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}B(x) = 1 \times b_{0, 2}(x) + 2 \times b_{1, 2}(x) + 3 \times
    b_{2, 2}(x) \\ = 1 \times (1-x)^2 + 2 \times 2 x (1 - x) + 3 \times x^2\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of the polynomials. They are reshaped to a 3-D array with the last
    dimension representing the trailing dimensions of the original coefficient array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.BPoly.__call__.html#scipy.interpolate.BPoly.__call__
    "scipy.interpolate.BPoly.__call__")(x[, nu, extrapolate]) | Evaluate the piecewise
    polynomial or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`extend`](scipy.interpolate.BPoly.extend.html#scipy.interpolate.BPoly.extend
    "scipy.interpolate.BPoly.extend")(c, x) | Add additional breakpoints and coefficients
    to the polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.BPoly.derivative.html#scipy.interpolate.BPoly.derivative
    "scipy.interpolate.BPoly.derivative")([nu]) | Construct a new piecewise polynomial
    representing the derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.BPoly.antiderivative.html#scipy.interpolate.BPoly.antiderivative
    "scipy.interpolate.BPoly.antiderivative")([nu]) | Construct a new piecewise polynomial
    representing the antiderivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.interpolate.BPoly.integrate.html#scipy.interpolate.BPoly.integrate
    "scipy.interpolate.BPoly.integrate")(a, b[, extrapolate]) | Compute a definite
    integral over a piecewise polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`construct_fast`](scipy.interpolate.BPoly.construct_fast.html#scipy.interpolate.BPoly.construct_fast
    "scipy.interpolate.BPoly.construct_fast")(c, x[, extrapolate, axis]) | Construct
    the piecewise polynomial without making checks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_power_basis`](scipy.interpolate.BPoly.from_power_basis.html#scipy.interpolate.BPoly.from_power_basis
    "scipy.interpolate.BPoly.from_power_basis")(pp[, extrapolate]) | Construct a piecewise
    polynomial in Bernstein basis from a power basis polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_derivatives`](scipy.interpolate.BPoly.from_derivatives.html#scipy.interpolate.BPoly.from_derivatives
    "scipy.interpolate.BPoly.from_derivatives")(xi, yi[, orders, extrapolate]) | Construct
    a piecewise polynomial in the Bernstein basis, compatible with the specified values
    and derivatives at breakpoints. |'
  prefs: []
  type: TYPE_TB
