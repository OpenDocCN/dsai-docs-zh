- en: numpy.fft.ifft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.ifft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.ifft.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the one-dimensional inverse discrete Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the one-dimensional *n*-point discrete
    Fourier transform computed by [`fft`](../routines.fft.html#module-numpy.fft "numpy.fft").
    In other words, `ifft(fft(a)) == a` to within numerical accuracy. For a general
    description of the algorithm and definitions, see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft").
  prefs: []
  type: TYPE_NORMAL
- en: The input should be ordered in the same way as is returned by [`fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft"), i.e.,
  prefs: []
  type: TYPE_NORMAL
- en: '`a[0]` should contain the zero frequency term,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[1:n//2]` should contain the positive-frequency terms,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a[n//2 + 1:]` should contain the negative-frequency terms, in increasing order
    starting from the most negative frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an even number of input points, `A[n//2]` represents the sum of the values
    at the positive and negative Nyquist frequencies, as the two are aliased together.
    See [`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft") for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, can be complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transformed axis of the output. If *n* is smaller than the length
    of the input, the input is cropped. If it is larger, the input is padded with
    zeros. If *n* is not given, the length of the input along the axis specified by
    *axis* is used. See notes about padding issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the inverse DFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is not a valid axis of *a*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction, with definitions and general explanations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The one-dimensional (forward) FFT, of which [`ifft`](#numpy.fft.ifft "numpy.fft.ifft")
    is the inverse
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft2`](numpy.fft.ifft2.html#numpy.fft.ifft2 "numpy.fft.ifft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The two-dimensional inverse FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifftn`](numpy.fft.ifftn.html#numpy.fft.ifftn "numpy.fft.ifftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The n-dimensional inverse FFT.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the input parameter *n* is larger than the size of the input, the input is
    padded by appending zeros at the end. Even though this is the common approach,
    it might lead to surprising results. If a different padding is desired, it must
    be performed before calling [`ifft`](#numpy.fft.ifft "numpy.fft.ifft").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and plot a band-limited signal with random phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/numpy-fft-ifft-1.png](../Images/d2b359a90c78fa4de593bf145cb3269e.png)'
  prefs: []
  type: TYPE_IMG
