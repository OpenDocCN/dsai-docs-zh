- en: Gray Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/graycode.html](https://docs.sympy.org/latest/modules/combinatorics/graycode.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Gray code is essentially a Hamiltonian walk on a n-dimensional cube with edge
    length of one. The vertices of the cube are represented by vectors whose values
    are binary. The Hamilton walk visits each vertex exactly once. The Gray code for
    a 3d cube is [‘000’,’100’,’110’,’010’,’011’,’111’,’101’, ‘001’].
  prefs: []
  type: TYPE_NORMAL
- en: A Gray code solves the problem of sequentially generating all possible subsets
    of n objects in such a way that each subset is obtained from the previous one
    by either deleting or adding a single object. In the above example, 1 indicates
    that the object is present, and 0 indicates that its absent.
  prefs: []
  type: TYPE_NORMAL
- en: Gray codes have applications in statistics as well when we want to compute various
    statistics related to subsets in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R44](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Nijenhuis,A. and Wilf,H.S.(1978). Combinatorial Algorithms. Academic Press.
  prefs: []
  type: TYPE_NORMAL
- en: '[[R45](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Knuth, D. (2011). The Art of Computer Programming, Vol 4 Addison Wesley
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the currently referenced Gray code as a bit string.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Generates the sequence of bit vectors of a Gray Code.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`skip`](#sympy.combinatorics.graycode.GrayCode.skip "sympy.combinatorics.graycode.GrayCode.skip")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R46](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Knuth, D. (2011). The Art of Computer Programming, Vol 4, Addison Wesley
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the dimension of the Gray code.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Gray code a distance `delta` (default = 1) from the current value
    in canonical order.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ranks the Gray code.
  prefs: []
  type: TYPE_NORMAL
- en: A ranking algorithm determines the position (or rank) of a combinatorial object
    among all the objects w.r.t. a given order. For example, the 4 bit binary reflected
    Gray code (BRGC) ‘0101’ has a rank of 6 as it appears in the 6th position in the
    canonical ordering of the family of 4 bit Gray codes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`unrank`](#sympy.combinatorics.graycode.GrayCode.unrank "sympy.combinatorics.graycode.GrayCode.unrank")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R47](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20200224064753/http://statweb.stanford.edu/~susan/courses/s208/node12.html](https://web.archive.org/web/20200224064753/http://statweb.stanford.edu/~susan/courses/s208/node12.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of bit vectors in the Gray code.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Skips the bit generation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`generate_gray`](#sympy.combinatorics.graycode.GrayCode.generate_gray "sympy.combinatorics.graycode.GrayCode.generate_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Unranks an n-bit sized Gray code of rank k. This method exists so that a derivative
    GrayCode class can define its own code of a given rank.
  prefs: []
  type: TYPE_NORMAL
- en: The string here is generated in reverse order to allow for tail-call optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank`](#sympy.combinatorics.graycode.GrayCode.rank "sympy.combinatorics.graycode.GrayCode.rank")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Generates a random bitlist of length n.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Convert from Gray coding to binary coding.
  prefs: []
  type: TYPE_NORMAL
- en: We assume big endian encoding.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bin_to_gray`](#sympy.combinatorics.graycode.bin_to_gray "sympy.combinatorics.graycode.bin_to_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Convert from binary coding to gray coding.
  prefs: []
  type: TYPE_NORMAL
- en: We assume big endian encoding.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gray_to_bin`](#sympy.combinatorics.graycode.gray_to_bin "sympy.combinatorics.graycode.gray_to_bin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Gets the subset defined by the bitstring.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`graycode_subsets`](#sympy.combinatorics.graycode.graycode_subsets "sympy.combinatorics.graycode.graycode_subsets")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Generates the subsets as enumerated by a Gray code.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_subset_from_bitstring`](#sympy.combinatorics.graycode.get_subset_from_bitstring
    "sympy.combinatorics.graycode.get_subset_from_bitstring")'
  prefs: []
  type: TYPE_NORMAL
