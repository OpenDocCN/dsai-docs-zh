["```py\nclass sympy.sets.sets.Set(*args)\n```", "```py\nproperty boundary\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).boundary\n{0, 1}\n>>> Interval(0, 1, True, False).boundary\n{0, 1} \n```", "```py\nproperty closure\n```", "```py\n>>> from sympy import S, Interval\n>>> S.Reals.closure\nReals\n>>> Interval(0, 1).closure\nInterval(0, 1) \n```", "```py\ncomplement(universe)\n```", "```py\n>>> from sympy import Interval, S\n>>> Interval(0, 1).complement(S.Reals)\nUnion(Interval.open(-oo, 0), Interval.open(1, oo)) \n```", "```py\n>>> Interval(0, 1).complement(S.UniversalSet)\nComplement(UniversalSet, Interval(0, 1)) \n```", "```py\ncontains(other)\n```", "```py\n>>> from sympy import Interval, S\n>>> from sympy.abc import x \n```", "```py\n>>> Interval(0, 1).contains(0.5)\nTrue \n```", "```py\n>>> Interval(0, 1).contains(x)\n(0 <= x) & (x <= 1)\n>>> x in Interval(0, 1)\nTraceback (most recent call last):\n...\nTypeError: did not evaluate to a bool: None \n```", "```py\n>>> 1 in Interval(0, 2)\nTrue\n>>> _ is S.true\nFalse \n```", "```py\nproperty inf\n```", "```py\n>>> from sympy import Interval, Union\n>>> Interval(0, 1).inf\n0\n>>> Union(Interval(0, 1), Interval(2, 3)).inf\n0 \n```", "```py\nproperty interior\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).interior\nInterval.open(0, 1)\n>>> Interval(0, 1).boundary.interior\nEmptySet \n```", "```py\nintersect(other)\n```", "```py\n>>> from sympy import Interval \n```", "```py\n>>> Interval(1, 3).intersect(Interval(1, 2))\nInterval(1, 2) \n```", "```py\n>>> from sympy import imageset, Lambda, symbols, S\n>>> n, m = symbols('n m')\n>>> a = imageset(Lambda(n, 2*n), S.Integers)\n>>> a.intersect(imageset(Lambda(m, 2*m + 1), S.Integers))\nEmptySet \n```", "```py\nintersection(other)\n```", "```py\nproperty is_closed\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).is_closed\nTrue \n```", "```py\nis_disjoint(other)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 2).is_disjoint(Interval(1, 2))\nFalse\n>>> Interval(0, 2).is_disjoint(Interval(3, 4))\nTrue \n```", "```py\nproperty is_open\n```", "```py\n>>> from sympy import S\n>>> S.Reals.is_open\nTrue\n>>> S.Rationals.is_open\nFalse \n```", "```py\nis_proper_subset(other)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 0.5).is_proper_subset(Interval(0, 1))\nTrue\n>>> Interval(0, 1).is_proper_subset(Interval(0, 1))\nFalse \n```", "```py\nis_proper_superset(other)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).is_proper_superset(Interval(0, 0.5))\nTrue\n>>> Interval(0, 1).is_proper_superset(Interval(0, 1))\nFalse \n```", "```py\nis_subset(other)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 0.5).is_subset(Interval(0, 1))\nTrue\n>>> Interval(0, 1).is_subset(Interval(0, 1, left_open=True))\nFalse \n```", "```py\nis_superset(other)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 0.5).is_superset(Interval(0, 1))\nFalse\n>>> Interval(0, 1).is_superset(Interval(0, 1, left_open=True))\nTrue \n```", "```py\nisdisjoint(other)\n```", "```py\nissubset(other)\n```", "```py\nissuperset(other)\n```", "```py\nproperty kind\n```", "```py\n>>> from sympy import Interval, Matrix, FiniteSet, EmptySet, ProductSet, PowerSet \n```", "```py\n>>> FiniteSet(Matrix([1, 2])).kind\nSetKind(MatrixKind(NumberKind)) \n```", "```py\n>>> Interval(1, 2).kind\nSetKind(NumberKind) \n```", "```py\n>>> EmptySet.kind\nSetKind() \n```", "```py\n>>> PowerSet({1, 2, 3}).kind\nSetKind(SetKind(NumberKind)) \n```", "```py\n>>> p = ProductSet(FiniteSet(1, 2), FiniteSet(3, 4))\n>>> list(p)\n[(1, 3), (2, 3), (1, 4), (2, 4)]\n>>> p.kind\nSetKind(TupleKind(NumberKind, NumberKind)) \n```", "```py\n>>> FiniteSet(0, Matrix([1, 2])).kind\nSetKind(UndefinedKind) \n```", "```py\n>>> Interval(1, 2).kind.element_kind\nNumberKind \n```", "```py\nproperty measure\n```", "```py\n>>> from sympy import Interval, Union\n>>> Interval(0, 1).measure\n1\n>>> Union(Interval(0, 1), Interval(2, 3)).measure\n2 \n```", "```py\npowerset()\n```", "```py\n>>> from sympy import EmptySet, FiniteSet, Interval \n```", "```py\n>>> A = EmptySet\n>>> A.powerset()\n{EmptySet} \n```", "```py\n>>> A = FiniteSet(1, 2)\n>>> a, b, c = FiniteSet(1), FiniteSet(2), FiniteSet(1, 2)\n>>> A.powerset() == FiniteSet(a, b, c, EmptySet)\nTrue \n```", "```py\n>>> Interval(1, 2).powerset()\nPowerSet(Interval(1, 2)) \n```", "```py\nproperty sup\n```", "```py\n>>> from sympy import Interval, Union\n>>> Interval(0, 1).sup\n1\n>>> Union(Interval(0, 1), Interval(2, 3)).sup\n3 \n```", "```py\nsymmetric_difference(other)\n```", "```py\n>>> from sympy import Interval, S\n>>> Interval(1, 3).symmetric_difference(S.Reals)\nUnion(Interval.open(-oo, 1), Interval.open(3, oo))\n>>> Interval(1, 10).symmetric_difference(S.Reals)\nUnion(Interval.open(-oo, 1), Interval.open(10, oo)) \n```", "```py\n>>> from sympy import S, EmptySet\n>>> S.Reals.symmetric_difference(EmptySet)\nReals \n```", "```py\nunion(other)\n```", "```py\n>>> from sympy import Interval, FiniteSet\n>>> Interval(0, 1).union(Interval(2, 3))\nUnion(Interval(0, 1), Interval(2, 3))\n>>> Interval(0, 1) + Interval(2, 3)\nUnion(Interval(0, 1), Interval(2, 3))\n>>> Interval(1, 2, True, True) + FiniteSet(2, 3)\nUnion({3}, Interval.Lopen(1, 2)) \n```", "```py\n>>> Interval(0, 2) - Interval(0, 1)\nInterval.Lopen(1, 2)\n>>> Interval(1, 3) - FiniteSet(2)\nUnion(Interval.Ropen(1, 2), Interval.Lopen(2, 3)) \n```", "```py\nsympy.sets.sets.imageset(*args)\n```", "```py\n>>> from sympy import S, Interval, imageset, sin, Lambda\n>>> from sympy.abc import x \n```", "```py\n>>> imageset(x, 2*x, Interval(0, 2))\nInterval(0, 4) \n```", "```py\n>>> imageset(lambda x: 2*x, Interval(0, 2))\nInterval(0, 4) \n```", "```py\n>>> imageset(Lambda(x, sin(x)), Interval(-2, 1))\nImageSet(Lambda(x, sin(x)), Interval(-2, 1)) \n```", "```py\n>>> imageset(sin, Interval(-2, 1))\nImageSet(Lambda(x, sin(x)), Interval(-2, 1))\n>>> imageset(lambda y: x + y, Interval(-2, 1))\nImageSet(Lambda(y, x + y), Interval(-2, 1)) \n```", "```py\n>>> imageset(x, -2*x + 5, S.Integers)\nImageSet(Lambda(x, 2*x + 1), Integers) \n```", "```py\nclass sympy.sets.sets.Interval(start, end, left_open=False, right_open=False)\n```", "```py\n>>> from sympy import Symbol, Interval\n>>> Interval(0, 1)\nInterval(0, 1)\n>>> Interval.Ropen(0, 1)\nInterval.Ropen(0, 1)\n>>> Interval.Ropen(0, 1)\nInterval.Ropen(0, 1)\n>>> Interval.Lopen(0, 1)\nInterval.Lopen(0, 1)\n>>> Interval.open(0, 1)\nInterval.open(0, 1) \n```", "```py\n>>> a = Symbol('a', real=True)\n>>> Interval(0, a)\nInterval(0, a) \n```", "```py\nclassmethod Lopen(a, b)\n```", "```py\nclassmethod Ropen(a, b)\n```", "```py\nas_relational(x)\n```", "```py\nproperty end\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).end\n1 \n```", "```py\nproperty is_left_unbounded\n```", "```py\nproperty is_right_unbounded\n```", "```py\nproperty left_open\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1, left_open=True).left_open\nTrue\n>>> Interval(0, 1, left_open=False).left_open\nFalse \n```", "```py\nclassmethod open(a, b)\n```", "```py\nproperty right_open\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1, right_open=True).right_open\nTrue\n>>> Interval(0, 1, right_open=False).right_open\nFalse \n```", "```py\nproperty start\n```", "```py\n>>> from sympy import Interval\n>>> Interval(0, 1).start\n0 \n```", "```py\nclass sympy.sets.sets.FiniteSet(*args, **kwargs)\n```", "```py\n>>> from sympy import FiniteSet, Symbol, Interval, Naturals0\n>>> FiniteSet(1, 2, 3, 4)\n{1, 2, 3, 4}\n>>> 3 in FiniteSet(1, 2, 3, 4)\nTrue\n>>> FiniteSet(1, (1, 2), Symbol('x'))\n{1, x, (1, 2)}\n>>> FiniteSet(Interval(1, 2), Naturals0, {1, 2})\nFiniteSet({1, 2}, Interval(1, 2), Naturals0)\n>>> members = [1, 2, 3, 4]\n>>> f = FiniteSet(*members)\n>>> f\n{1, 2, 3, 4}\n>>> f - FiniteSet(2)\n{1, 3, 4}\n>>> f + FiniteSet(2, 5)\n{1, 2, 3, 4, 5} \n```", "```py\nas_relational(symbol)\n```", "```py\nclass sympy.sets.sets.Union(*args, **kwargs)\n```", "```py\n>>> from sympy import Union, Interval\n>>> Union(Interval(1, 2), Interval(3, 4))\nUnion(Interval(1, 2), Interval(3, 4)) \n```", "```py\n>>> Union(Interval(1, 2), Interval(2, 3))\nInterval(1, 3) \n```", "```py\nas_relational(symbol)\n```", "```py\nclass sympy.sets.sets.Intersection(*args, evaluate=None)\n```", "```py\n>>> from sympy import Intersection, Interval\n>>> Intersection(Interval(1, 3), Interval(2, 4))\nInterval(2, 3) \n```", "```py\n>>> Interval(1,3).intersect(Interval(2,4))\nInterval(2, 3) \n```", "```py\nas_relational(symbol)\n```", "```py\nclass sympy.sets.sets.ProductSet(*sets, **assumptions)\n```", "```py\n>>> from sympy import Interval, FiniteSet, ProductSet\n>>> I = Interval(0, 5); S = FiniteSet(1, 2, 3)\n>>> ProductSet(I, S)\nProductSet(Interval(0, 5), {1, 2, 3}) \n```", "```py\n>>> (2, 2) in ProductSet(I, S)\nTrue \n```", "```py\n>>> Interval(0, 1) * Interval(0, 1) # The unit square\nProductSet(Interval(0, 1), Interval(0, 1)) \n```", "```py\n>>> coin = FiniteSet('H', 'T')\n>>> set(coin**2)\n{(H, H), (H, T), (T, H), (T, T)} \n```", "```py\n>>> I*S == S*I\nFalse\n>>> (I*I)*I == I*(I*I)\nFalse \n```", "```py\nproperty is_iterable\n```", "```py\n>>> from sympy import FiniteSet, Interval\n>>> I = Interval(0, 1)\n>>> A = FiniteSet(1, 2, 3, 4, 5)\n>>> I.is_iterable\nFalse\n>>> A.is_iterable\nTrue \n```", "```py\nclass sympy.sets.sets.Complement(a, b, evaluate=True)\n```", "```py\n>>> from sympy import Complement, FiniteSet\n>>> Complement(FiniteSet(0, 1, 2), FiniteSet(1))\n{0, 2} \n```", "```py\nas_relational(symbol)\n```", "```py\nstatic reduce(A, B)\n```", "```py\nclass sympy.sets.sets.SymmetricDifference(a, b, evaluate=True)\n```", "```py\n>>> from sympy import SymmetricDifference, FiniteSet\n>>> SymmetricDifference(FiniteSet(1, 2, 3), FiniteSet(3, 4, 5))\n{1, 2, 4, 5} \n```", "```py\nas_relational(symbol)\n```", "```py\nclass sympy.sets.sets.DisjointUnion(*sets)\n```", "```py\n>>> from sympy import DisjointUnion, FiniteSet, Interval, Union, Symbol\n>>> A = FiniteSet(1, 2, 3)\n>>> B = Interval(0, 5)\n>>> DisjointUnion(A, B)\nDisjointUnion({1, 2, 3}, Interval(0, 5))\n>>> DisjointUnion(A, B).rewrite(Union)\nUnion(ProductSet({1, 2, 3}, {0}), ProductSet(Interval(0, 5), {1}))\n>>> C = FiniteSet(Symbol('x'), Symbol('y'), Symbol('z'))\n>>> DisjointUnion(C, C)\nDisjointUnion({x, y, z}, {x, y, z})\n>>> DisjointUnion(C, C).rewrite(Union)\nProductSet({x, y, z}, {0, 1}) \n```", "```py\nclass sympy.sets.sets.EmptySet\n```", "```py\n>>> from sympy import S, Interval\n>>> S.EmptySet\nEmptySet \n```", "```py\n>>> Interval(1, 2).intersect(S.EmptySet)\nEmptySet \n```", "```py\nclass sympy.sets.sets.UniversalSet\n```", "```py\n>>> from sympy import S, Interval\n>>> S.UniversalSet\nUniversalSet \n```", "```py\n>>> Interval(1, 2).intersect(S.UniversalSet)\nInterval(1, 2) \n```", "```py\nclass sympy.sets.fancysets.Rationals\n```", "```py\n>>> from sympy import S\n>>> S.Half in S.Rationals\nTrue\n>>> iterable = iter(S.Rationals)\n>>> [next(iterable) for i in range(12)]\n[0, 1, -1, 1/2, 2, -1/2, -2, 1/3, 3, -1/3, -3, 2/3] \n```", "```py\nclass sympy.sets.fancysets.Naturals\n```", "```py\n>>> from sympy import S, Interval, pprint\n>>> 5 in S.Naturals\nTrue\n>>> iterable = iter(S.Naturals)\n>>> next(iterable)\n1\n>>> next(iterable)\n2\n>>> next(iterable)\n3\n>>> pprint(S.Naturals.intersect(Interval(0, 10)))\n{1, 2, ..., 10} \n```", "```py\nclass sympy.sets.fancysets.Naturals0\n```", "```py\nclass sympy.sets.fancysets.Integers\n```", "```py\n>>> from sympy import S, Interval, pprint\n>>> 5 in S.Naturals\nTrue\n>>> iterable = iter(S.Integers)\n>>> next(iterable)\n0\n>>> next(iterable)\n1\n>>> next(iterable)\n-1\n>>> next(iterable)\n2 \n```", "```py\n>>> pprint(S.Integers.intersect(Interval(-4, 4)))\n{-4, -3, ..., 4} \n```", "```py\nclass sympy.sets.fancysets.Reals\n```", "```py\n>>> from sympy import S, Rational, pi, I\n>>> 5 in S.Reals\nTrue\n>>> Rational(-1, 2) in S.Reals\nTrue\n>>> pi in S.Reals\nTrue\n>>> 3*I in S.Reals\nFalse\n>>> S.Reals.contains(pi)\nTrue \n```", "```py\nclass sympy.sets.fancysets.Complexes\n```", "```py\n>>> from sympy import S, I\n>>> S.Complexes\nComplexes\n>>> 1 + I in S.Complexes\nTrue \n```", "```py\nclass sympy.sets.fancysets.ImageSet(flambda, *sets)\n```", "```py\n>>> from sympy import Symbol, S, pi, Dummy, Lambda\n>>> from sympy import FiniteSet, ImageSet, Interval \n```", "```py\n>>> x = Symbol('x')\n>>> N = S.Naturals\n>>> squares = ImageSet(Lambda(x, x**2), N) # {x**2 for x in N}\n>>> 4 in squares\nTrue\n>>> 5 in squares\nFalse \n```", "```py\n>>> FiniteSet(0, 1, 2, 3, 4, 5, 6, 7, 9, 10).intersect(squares)\n{1, 4, 9} \n```", "```py\n>>> square_iterable = iter(squares)\n>>> for i in range(4):\n...     next(square_iterable)\n1\n4\n9\n16 \n```", "```py\n>>> squares.lamda(2)\n4\n>>> squares.lamda(S(1)/2)\n1/4 \n```", "```py\n>>> n = Dummy('n')\n>>> solutions = ImageSet(Lambda(n, n*pi), S.Integers) # solutions of sin(x) = 0\n>>> dom = Interval(-1, 1)\n>>> dom.intersect(solutions)\n{0} \n```", "```py\nclass sympy.sets.fancysets.Range(*args)\n```", "```py\n>>> from sympy import Range\n>>> list(Range(3))\n[0, 1, 2] \n```", "```py\n>>> list(Range(10, 0, -2))\n[10, 8, 6, 4, 2] \n```", "```py\n>>> Range(0, 10, 3)\nRange(0, 12, 3) \n```", "```py\n>>> from sympy import oo\n>>> r = Range(-oo, 1)\n>>> r[-1]\n0\n>>> next(iter(r))\nTraceback (most recent call last):\n...\nTypeError: Cannot iterate over Range with infinite start\n>>> next(iter(r.reversed))\n0 \n```", "```py\n>>> from sympy import Interval\n>>> Range(0, 10, 2).intersect(Interval(3, 7))\nRange(4, 8, 2)\n>>> list(_)\n[4, 6] \n```", "```py\n>>> Range(3)[:0]\nRange(0, 0, 1)\n>>> Range(3).intersect(Interval(4, oo))\nEmptySet\n>>> Range(3).intersect(Range(4, oo))\nEmptySet \n```", "```py\n>>> from sympy import Symbol, pprint\n>>> from sympy.abc import i, j, k\n>>> Range(i, j, k).start\ni\n>>> Range(i, j, k).inf\nTraceback (most recent call last):\n...\nValueError: invalid method for symbolic range \n```", "```py\n>>> n = Symbol('n', integer=True)\n>>> r = Range(n, n + 20, 3)\n>>> r.inf\nn\n>>> pprint(r)\n{n, n + 3, ..., n + 18} \n```", "```py\nas_relational(x)\n```", "```py\nproperty reversed\n```", "```py\n>>> from sympy import Range\n>>> Range(10).reversed\nRange(9, -1, -1) \n```", "```py\nclass sympy.sets.fancysets.ComplexRegion(sets, polar=False)\n```", "```py\n>>> from sympy import ComplexRegion, Interval, S, I, Union\n>>> a = Interval(2, 3)\n>>> b = Interval(4, 6)\n>>> c1 = ComplexRegion(a*b)  # Rectangular Form\n>>> c1\nCartesianComplexRegion(ProductSet(Interval(2, 3), Interval(4, 6))) \n```", "```py\n>>> c = Interval(1, 8)\n>>> c2 = ComplexRegion(Union(a*b, b*c))\n>>> c2\nCartesianComplexRegion(Union(ProductSet(Interval(2, 3), Interval(4, 6)), ProductSet(Interval(4, 6), Interval(1, 8)))) \n```", "```py\n>>> 2.5 + 4.5*I in c1\nTrue\n>>> 2.5 + 6.5*I in c1\nFalse \n```", "```py\n>>> r = Interval(0, 1)\n>>> theta = Interval(0, 2*S.Pi)\n>>> c2 = ComplexRegion(r*theta, polar=True)  # Polar Form\n>>> c2  # unit Disk\nPolarComplexRegion(ProductSet(Interval(0, 1), Interval.Ropen(0, 2*pi))) \n```", "```py\n>>> 0.5 + 0.5*I in c2\nTrue\n>>> 1 + 2*I in c2\nFalse \n```", "```py\n>>> unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, 2*S.Pi), polar=True)\n>>> upper_half_unit_disk = ComplexRegion(Interval(0, 1)*Interval(0, S.Pi), polar=True)\n>>> intersection = unit_disk.intersect(upper_half_unit_disk)\n>>> intersection\nPolarComplexRegion(ProductSet(Interval(0, 1), Interval(0, pi)))\n>>> intersection == upper_half_unit_disk\nTrue \n```", "```py\nproperty a_interval\n```", "```py\n>>> from sympy import Interval, ComplexRegion, Union\n>>> a = Interval(2, 3)\n>>> b = Interval(4, 5)\n>>> c = Interval(1, 7)\n>>> C1 = ComplexRegion(a*b)\n>>> C1.a_interval\nInterval(2, 3)\n>>> C2 = ComplexRegion(Union(a*b, b*c))\n>>> C2.a_interval\nUnion(Interval(2, 3), Interval(4, 5)) \n```", "```py\nproperty b_interval\n```", "```py\n>>> from sympy import Interval, ComplexRegion, Union\n>>> a = Interval(2, 3)\n>>> b = Interval(4, 5)\n>>> c = Interval(1, 7)\n>>> C1 = ComplexRegion(a*b)\n>>> C1.b_interval\nInterval(4, 5)\n>>> C2 = ComplexRegion(Union(a*b, b*c))\n>>> C2.b_interval\nInterval(1, 7) \n```", "```py\nclassmethod from_real(sets)\n```", "```py\n>>> from sympy import Interval, ComplexRegion\n>>> unit = Interval(0,1)\n>>> ComplexRegion.from_real(unit)\nCartesianComplexRegion(ProductSet(Interval(0, 1), {0})) \n```", "```py\nproperty psets\n```", "```py\n>>> from sympy import Interval, ComplexRegion, Union\n>>> a = Interval(2, 3)\n>>> b = Interval(4, 5)\n>>> c = Interval(1, 7)\n>>> C1 = ComplexRegion(a*b)\n>>> C1.psets\n(ProductSet(Interval(2, 3), Interval(4, 5)),)\n>>> C2 = ComplexRegion(Union(a*b, b*c))\n>>> C2.psets\n(ProductSet(Interval(2, 3), Interval(4, 5)), ProductSet(Interval(4, 5), Interval(1, 7))) \n```", "```py\nproperty sets\n```", "```py\n>>> from sympy import Interval, ComplexRegion, Union\n>>> a = Interval(2, 3)\n>>> b = Interval(4, 5)\n>>> c = Interval(1, 7)\n>>> C1 = ComplexRegion(a*b)\n>>> C1.sets\nProductSet(Interval(2, 3), Interval(4, 5))\n>>> C2 = ComplexRegion(Union(a*b, b*c))\n>>> C2.sets\nUnion(ProductSet(Interval(2, 3), Interval(4, 5)), ProductSet(Interval(4, 5), Interval(1, 7))) \n```", "```py\nclass sympy.sets.fancysets.CartesianComplexRegion(sets)\n```", "```py\n>>> from sympy import ComplexRegion, I, Interval\n>>> region = ComplexRegion(Interval(1, 3) * Interval(4, 6))\n>>> 2 + 5*I in region\nTrue\n>>> 5*I in region\nFalse \n```", "```py\nclass sympy.sets.fancysets.PolarComplexRegion(sets)\n```", "```py\n>>> from sympy import ComplexRegion, Interval, oo, pi, I\n>>> rset = Interval(0, oo)\n>>> thetaset = Interval(0, pi)\n>>> upper_half_plane = ComplexRegion(rset * thetaset, polar=True)\n>>> 1 + I in upper_half_plane\nTrue\n>>> 1 - I in upper_half_plane\nFalse \n```", "```py\nsympy.sets.fancysets.normalize_theta_set(theta)\n```", "```py\n>>> from sympy.sets.fancysets import normalize_theta_set\n>>> from sympy import Interval, FiniteSet, pi\n>>> normalize_theta_set(Interval(9*pi/2, 5*pi))\nInterval(pi/2, pi)\n>>> normalize_theta_set(Interval(-3*pi/2, pi/2))\nInterval.Ropen(0, 2*pi)\n>>> normalize_theta_set(Interval(-pi/2, pi/2))\nUnion(Interval(0, pi/2), Interval.Ropen(3*pi/2, 2*pi))\n>>> normalize_theta_set(Interval(-4*pi, 3*pi))\nInterval.Ropen(0, 2*pi)\n>>> normalize_theta_set(Interval(-3*pi/2, -pi/2))\nInterval(pi/2, 3*pi/2)\n>>> normalize_theta_set(FiniteSet(0, pi, 3*pi))\n{0, pi} \n```", "```py\nclass sympy.sets.powerset.PowerSet(arg, evaluate=None)\n```", "```py\n>>> from sympy import PowerSet, S, FiniteSet \n```", "```py\n>>> PowerSet(FiniteSet(1, 2, 3))\nPowerSet({1, 2, 3}) \n```", "```py\n>>> PowerSet(S.EmptySet)\nPowerSet(EmptySet)\n>>> PowerSet(PowerSet(S.EmptySet))\nPowerSet(PowerSet(EmptySet)) \n```", "```py\n>>> PowerSet(S.Reals)\nPowerSet(Reals) \n```", "```py\n>>> PowerSet(FiniteSet(1, 2, 3)).rewrite(FiniteSet)\nFiniteSet(EmptySet, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}) \n```", "```py\nclass sympy.sets.conditionset.ConditionSet(sym, condition, base_set=UniversalSet)\n```", "```py\n>>> from sympy import Symbol, S, ConditionSet, pi, Eq, sin, Interval\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> sin_sols = ConditionSet(x, Eq(sin(x), 0), Interval(0, 2*pi))\n>>> 2*pi in sin_sols\nTrue\n>>> pi/2 in sin_sols\nFalse\n>>> 3*pi in sin_sols\nFalse\n>>> 5 in ConditionSet(x, x**2 > 4, S.Reals)\nTrue \n```", "```py\n>>> 5 in ConditionSet(x, x**2 > 4, Interval(2, 4))\nFalse \n```", "```py\n>>> n = Symbol('n', negative=True)\n>>> cond = (n > 0); cond\nFalse\n>>> ConditionSet(n, cond, S.Integers)\nEmptySet \n```", "```py\n>>> c = ConditionSet(x, x < 1, {x, z})\n>>> c.subs(x, y)\nConditionSet(x, x < 1, {y, z}) \n```", "```py\n>>> pi in c\nFalse \n```", "```py\n>>> ConditionSet(x, x < 1).base_set\nUniversalSet \n```", "```py\n>>> ConditionSet(x + 1, x + 1 < 1, S.Integers)\nTraceback (most recent call last):\n...\nValueError: non-symbol dummy not recognized in condition \n```", "```py\n>>> ConditionSet(x, x < y, ConditionSet(z, z + y < 2, S.Integers))\nConditionSet(x, (x < y) & (x + y < 2), Integers) \n```", "```py\nclass sympy.sets.conditionset.Contains(x, s, evaluate=None)\n```", "```py\n>>> from sympy import Symbol, Integer, S, Contains\n>>> Contains(Integer(2), S.Integers)\nTrue\n>>> Contains(Integer(-2), S.Naturals)\nFalse\n>>> i = Symbol('i', integer=True)\n>>> Contains(i, S.Naturals)\nContains(i, Naturals) \n```", "```py\nclass sympy.sets.conditionset.SetKind(element_kind=None)\n```", "```py\n>>> from sympy import Interval\n>>> Interval(1, 2).kind\nSetKind(NumberKind)\n>>> Interval(1,2).kind.element_kind\nNumberKind \n```"]