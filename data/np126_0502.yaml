- en: numpy.fft.irfft
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.fft.irfft
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfft.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfft.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Computes the inverse of [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")的逆。
- en: This function computes the inverse of the one-dimensional *n*-point discrete
    Fourier Transform of real input computed by [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft
    "numpy.fft.rfft"). In other words, `irfft(rfft(a), len(a)) == a` to within numerical
    accuracy. (See Notes below for why `len(a)` is necessary here.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数计算实输入的一维*n*点离散傅立叶变换的逆，该变换由[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")计算。换句话说，`irfft(rfft(a),
    len(a)) == a`在数值精度内成立。(请参阅下面的注意事项，了解为什么在此处需要`len(a)`。)
- en: The input is expected to be in the form returned by [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft
    "numpy.fft.rfft"), i.e. the real zero-frequency term followed by the complex positive
    frequency terms in order of increasing frequency. Since the discrete Fourier Transform
    of real input is Hermitian-symmetric, the negative frequency terms are taken to
    be the complex conjugates of the corresponding positive frequency terms.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输入的形式为由[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")返回的，即实零频项，后跟按频率递增顺序的复正频率项。由于实输入的离散傅立叶变换是Hermitian对称的，因此负频率项被视为相应正频率项的复共轭。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**a**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**array_like'
- en: The input array.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数组。
- en: '**n**int, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int, 可选的'
- en: Length of the transformed axis of the output. For *n* output points, `n//2+1`
    input points are necessary. If the input is longer than this, it is cropped. If
    it is shorter than this, it is padded with zeros. If *n* is not given, it is taken
    to be `2*(m-1)` where `m` is the length of the input along the axis specified
    by *axis*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的变换轴的长度。对于*n*个输出点，需要`n//2+1`个输入点。如果输入比这更长，将被裁剪。如果短于此，则填充为零。如果未给出*n*，则将其视为`2*(m-1)`，其中`m`是由*axis*指定的轴上的输入长度。
- en: '**axis**int, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**int, 可选的'
- en: Axis over which to compute the inverse FFT. If not given, the last axis is used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算逆FFT的轴。如果不给定，则使用最后一个轴。
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**norm**{“backward”, “ortho”, “forward”}, 可选的'
- en: New in version 1.10.0.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 1.10.0版本中新增。
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化模式(参见[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft"))。默认为“backward”。指示哪个方向的前向/后向变换配对被缩放，并具有什么标准化因子。
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '1.20.0版本中新增: 添加了“backward”、“forward”值。'
- en: 'Returns:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '返回:'
- en: '**out**ndarray'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**ndarray'
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is *n*, or, if *n* is not given, `2*(m-1)` where `m` is the length of the
    transformed axis of the input. To get an odd number of output points, *n* must
    be specified.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 截断或零填充的输入，沿由*axis*指示的轴变换，或者如果未指定*axis*，则使用最后一个轴。变换后轴的长度为*n*，或者如果未给出*n*，则为`2*(m-1)`，其中`m`为输入的变换后轴的长度。要获得奇数个输出点，必须指定*n*。
- en: 'Raises:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '引发:'
- en: IndexError
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: IndexError
- en: If *axis* is not a valid axis of *a*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*axis*不是*a*的有效轴。
- en: See also
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
- en: For definition of the DFT and conventions used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用于DFT的定义和约定。
- en: '[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")'
- en: The one-dimensional FFT of real input, of which [`irfft`](#numpy.fft.irfft "numpy.fft.irfft")
    is inverse.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实输入的一维FFT，其中[`irfft`](#numpy.fft.irfft "numpy.fft.irfft")是逆。
- en: '[`fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
- en: The one-dimensional FFT.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一维FFT。
- en: '[`irfft2`](numpy.fft.irfft2.html#numpy.fft.irfft2 "numpy.fft.irfft2")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`irfft2`](numpy.fft.irfft2.html#numpy.fft.irfft2 "numpy.fft.irfft2")'
- en: The inverse of the two-dimensional FFT of real input.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实输入的二维FFT的逆。
- en: '[`irfftn`](numpy.fft.irfftn.html#numpy.fft.irfftn "numpy.fft.irfftn")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`irfftn`](numpy.fft.irfftn.html#numpy.fft.irfftn "numpy.fft.irfftn")'
- en: The inverse of the *n*-dimensional FFT of real input.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实输入的*n*维FFT的逆。
- en: Notes
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Returns the real valued *n*-point inverse discrete Fourier transform of *a*,
    where *a* contains the non-negative frequency terms of a Hermitian-symmetric sequence.
    *n* is the length of the result, not the input.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 返回*a*的实值*n*点逆离散傅立叶变换，其中*a*包含共轭对称序列的非负频率项。*n*是结果的长度，而不是输入的长度。
- en: 'If you specify an *n* such that *a* must be zero-padded or truncated, the extra/removed
    values will be added/removed at high frequencies. One can thus resample a series
    to *m* points via Fourier interpolation by: `a_resamp = irfft(rfft(a), m)`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定一个*n*，使得*a*必须进行零填充或截断，额外/删除的值将被添加/删除在高频率。因此，可以通过傅里叶插值对一个系列进行* m*点重新采样：`a_resamp
    = irfft(rfft(a), m)`。
- en: The correct interpretation of the hermitian input depends on the length of the
    original data, as given by *n*. This is because each input shape could correspond
    to either an odd or even length signal. By default, [`irfft`](#numpy.fft.irfft
    "numpy.fft.irfft") assumes an even output length which puts the last entry at
    the Nyquist frequency; aliasing with its symmetric counterpart. By Hermitian symmetry,
    the value is thus treated as purely real. To avoid losing information, the correct
    length of the real input **must** be given.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正确解释共轭输入取决于原始数据的长度，即*n*给出的长度。这是因为每个输入形状可能对应奇数或偶数长度的信号。默认情况下，[`irfft`](#numpy.fft.irfft
    "numpy.fft.irfft")假设输出长度为偶数，将最后一个条目放在奈奎斯特频率上；与其对称的频率重复。根据共轭对称性，因此该值被视为纯实数。为了避免丢失信息，必须给出实际输入的正确长度。
- en: Examples
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice how the last term in the input to the ordinary [`ifft`](numpy.fft.ifft.html#numpy.fft.ifft
    "numpy.fft.ifft") is the complex conjugate of the second term, and the output
    has zero imaginary part everywhere. When calling [`irfft`](#numpy.fft.irfft "numpy.fft.irfft"),
    the negative frequencies are not specified, and the output array is purely real.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意普通[`ifft`](numpy.fft.ifft.html#numpy.fft.ifft "numpy.fft.ifft")输入中的最后一项是第二项的复共轭，并且输出在任何地方都没有虚部。调用[`irfft`](#numpy.fft.irfft
    "numpy.fft.irfft")时，未指定负频率，输出数组纯粹是实数。
