- en: DataFrame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame
- en: 原文：[https://pandas.pydata.org/docs/reference/frame.html](https://pandas.pydata.org/docs/reference/frame.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/frame.html](https://pandas.pydata.org/docs/reference/frame.html)
- en: '## Constructor'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 构造函数'
- en: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | Two-dimensional, size-mutable, potentially heterogeneous tabular data. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | 二维的、大小可变的、可能异构的表格数据。 |'
- en: Attributes and underlying data
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性和底层数据
- en: '**Axes**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**轴**'
- en: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | The index (row labels) of the DataFrame. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | DataFrame 的索引（行标签）。 |'
- en: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | The column labels of the DataFrame. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | DataFrame 的列标签。 |'
- en: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | Return the dtypes in the DataFrame. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | 返回 DataFrame 中的数据类型。 |'
- en: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | Print a concise summary of a DataFrame. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | 打印 DataFrame 的简洁摘要。 |'
- en: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | Return a subset of the
    DataFrame''s columns based on the column dtypes. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | 根据列的数据类型返回 DataFrame 的子集。
    |'
- en: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | Return a Numpy representation of the DataFrame. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | 返回 DataFrame 的 Numpy 表示。 |'
- en: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | Return a list representing the axes of the DataFrame. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | 返回表示 DataFrame 的轴的列表。 |'
- en: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | Return an int representing the number of axes / array dimensions. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | 返回表示轴数/数组维度的整数。 |'
- en: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | Return an int representing the number of elements in this object. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | 返回表示此对象中元素数量的整数。 |'
- en: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | Return a tuple representing the dimensionality of
    the DataFrame. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | 返回表示 DataFrame 维度的元组。 |'
- en: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | Return the memory usage of each
    column in bytes. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | 返回每列的内存使用量（以字节为单位）。 |'
- en: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | Indicator whether Series/DataFrame is empty. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | 指示 Series/DataFrame 是否为空。 |'
- en: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | 返回具有更新标志的新对象。 |'
- en: Conversion
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | Cast a pandas object to a
    specified dtype `dtype`. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | 将 pandas 对象转换为指定的数据类型 `dtype`。
    |'
- en: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | Convert columns to
    the best possible dtypes using dtypes supporting `pd.NA`. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | 使用支持`pd.NA`的dtype将列转换为最佳可能的dtype。
    |'
- en: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | Attempt to infer better dtypes for
    object columns. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | 尝试为对象列推断更好的dtype。 |'
- en: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | 复制此对象的索引和数据。 |'
- en: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (已弃用) 返回单个元素Series或DataFrame的布尔值。 |'
- en: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | Convert the DataFrame
    to a NumPy array. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | 将DataFrame转换为NumPy数组。
    |'
- en: Indexing, iteration
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引，迭代
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | 返回前n行。 |'
- en: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | Access a single value for a row/column label pair. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | 访问行/列标签对的单个值。 |'
- en: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | Access a single value for a row/column pair by integer position. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | 通过整数位置访问行/列对的单个值。 |'
- en: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | 通过标签或布尔数组访问一组行和列。 |'
- en: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (已弃用) 纯整数位置索引，按位置选择。 |'
- en: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | Insert column into DataFrame
    at specified location. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | 在指定位置将列插入DataFrame。 |'
- en: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | Iterate over info axis. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | 在信息轴上进行迭代。 |'
- en: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | Iterate over (column name, Series) pairs. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | 迭代(column name, Series)对。 |'
- en: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | Get the ''info axis'' (see Indexing for more). |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | 获取''信息轴''（详见索引）。 |'
- en: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | Iterate over DataFrame rows as (index, Series)
    pairs. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | 以(index, Series)对的形式迭代DataFrame行。 |'
- en: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | Iterate over DataFrame rows as
    namedtuples. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | 以命名元组形式迭代DataFrame行。 |'
- en: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | Return item and drop from frame. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | 返回项目并从框架中删除。 |'
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | 返回最后n行。 |'
- en: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | 从系列/数据帧返回横截面。 |'
- en: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | 获取给定键的对象中的项目（例如：数据帧列）。 |'
- en: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | Whether each element in the DataFrame is contained in values. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | 数据帧中的每个元素是否包含在值中。 |'
- en: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | Replace values where
    the condition is False. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | 替换条件为假的值。 |'
- en: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | Replace values where the condition is True. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | 替换条件为真的值。 |'
- en: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | Query the columns of a DataFrame
    with a boolean expression. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | 使用布尔表达式查询数据帧的列。 |'
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`.at`、`.iat`、`.loc`和`.iloc`的更多信息，请参阅[索引文档](../user_guide/indexing.html#indexing)。
- en: Binary operator functions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二元运算符函数
- en: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | Get Addition of DataFrame and other, column-wise.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | 获��数据帧和其他数据的加法，按列进行。 |'
- en: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator add). |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的加法，逐元素进行（二元运算符 add）。 |'
- en: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator sub).
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的减法，逐元素进行（二元运算符 sub）。 |'
- en: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator mul).
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的乘法，逐元素进行（二元运算符 mul）。 |'
- en: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | 获取数据帧和其他数据的浮点除法，逐元素进行（二元运算符 truediv）。 |'
- en: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator truediv). |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | 获取数据帧和其他数据的浮点除法，逐元素进行（二元运算符
    truediv）。 |'
- en: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator floordiv). |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | 获取数据帧和其他数据的整数除法，逐元素进行（二元运算符
    floordiv）。 |'
- en: '| [`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator mod). |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的模数，按元素计算（二元运算符 mod）。'
- en: '| [`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    pow). |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的指数幂，按元素计算（二元运算符 pow）。'
- en: '| [`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | Compute the matrix multiplication between the DataFrame and other. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | 计算 DataFrame 和其他对象之间的矩阵乘法。'
- en: '| [`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator radd). |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的加法，按元素计算（二元运算符 radd）。'
- en: '| [`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator rsub).
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的减法，按元素计算（二元运算符 rsub）。'
- en: '| [`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator rmul).
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的乘法，按元素计算（二元运算符 rmul）。'
- en: '| [`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的浮点数除法，按元素计算（二元运算符 rtruediv）。'
- en: '| [`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator rtruediv). |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | 获取 dataframe 和其他对象的浮点数除法，按元素计算（二元运算符
    rtruediv）。'
- en: '| [`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator rfloordiv). |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | 获取 dataframe 和其他对象的整数除法，按元素计算（二元运算符
    rfloordiv）。'
- en: '| [`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator rmod). |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的模数，按元素计算（二元运算符 rmod）。'
- en: '| [`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    rpow). |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | 获取 dataframe 和其他对象的指数幂，按元素计算（二元运算符 rpow）。'
- en: '| [`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | Get Less than of dataframe and other, element-wise (binary operator lt). |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | 获取 dataframe 和其他对象的小于，按元素计算（二元运算符 lt）。'
- en: '| [`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | Get Greater than of dataframe and other, element-wise (binary operator gt).
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | 获取 dataframe 和其他对象的大于，按元素计算（二元运算符 gt）。'
- en: '| [`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | Get Less than or equal to of dataframe and other, element-wise (binary operator
    le). |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '[`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | 获取 dataframe 和其他对象的小于或等于，按元素计算（二元运算符 le）。'
- en: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | Get Greater than or equal to of dataframe and other, element-wise (binary operator
    ge). |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | 获取 DataFrame 和其他对象的大于或等于，逐元素进行（二进制运算符 ge）。'
- en: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | Get Not equal to of dataframe and other, element-wise (binary operator ne).
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | 获取 DataFrame 和其他对象的不相等，逐元素进行（二进制运算符 ne）。'
- en: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | Get Equal to of dataframe and other, element-wise (binary operator eq). |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | 获取 DataFrame 和其他对象的相等，逐元素进行（二进制运算符 eq）。'
- en: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | Perform column-wise
    combine with another DataFrame. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | 与另一个 DataFrame 执行按列合并。'
- en: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | Update null elements with value in
    the same location in other. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | 使用其他位置的值更新空元素。'
- en: Function application, GroupBy & window
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数应用，GroupBy 和窗口
- en: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | Apply a function along an
    axis of the DataFrame. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | 沿着 DataFrame 的一个轴应用函数。'
- en: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | Apply a function to a Dataframe elementwise. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | 对 DataFrame 逐元素应用函数。'
- en: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | (DEPRECATED) Apply a function
    to a Dataframe elementwise. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | （已弃用）对 DataFrame 逐元素应用函数。'
- en: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | 应用可链式调用的函数，这些函数期望 Series 或 DataFrames。'
- en: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | 使用一个或多个操作在指定轴上进行聚合。'
- en: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | 使用一个或多个操作在指定轴上进行聚合。'
- en: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | Call `func` on self producing a
    DataFrame with the same axis shape as self. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | 对自身调用 `func`，生成一个与自身轴形状相同的 DataFrame。'
- en: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | Group DataFrame using a
    mapper or by a Series of columns. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | 使用映射器或一系列列对 DataFrame 进行分组。'
- en: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | Provide rolling window
    calculations. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | 提供滚动窗口计算。'
- en: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | Provide expanding
    window calculations. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | 提供扩展窗口计算。'
- en: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | 提供指数加权（EW）计算。 |'
- en: '## Computations / descriptive stats'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '## 计算 / 描述性统计'
- en: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | 返回每个元素的绝对数值的 Series/DataFrame。 |'
- en: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | 返回是否所有元素为 True，可能沿着一个轴。 |'
- en: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | 返回是否有任何元素为 True，可能沿着一个轴。 |'
- en: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | 在输入阈值处修剪值。 |'
- en: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | Compute pairwise correlation of columns, excluding NA/null values. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | 计算列之间的成对相关性，排除 NA/null 值。 |'
- en: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | Compute pairwise correlation.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | 计算成对相关性。 |'
- en: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | Count non-NA cells for each
    column or row. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | 计算每列或每行的非 NA 单元格数。 |'
- en: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | Compute pairwise covariance of columns, excluding NA/null values. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | 计算列之间的成对协方差，排除 NA/null 值。 |'
- en: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | Return cumulative maximum over a
    DataFrame or Series axis. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | 返回 DataFrame 或 Series 轴上的累积最大值。 |'
- en: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | Return cumulative minimum over a
    DataFrame or Series axis. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | 返回 DataFrame 或 Series 轴上的累积最小值。 |'
- en: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | Return cumulative product over a
    DataFrame or Series axis. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | 返回 DataFrame 或 Series 轴上的累积乘积。 |'
- en: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | Return cumulative sum over a DataFrame
    or Series axis. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | 返回 DataFrame 或 Series 轴上的累积和。 |'
- en: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | Generate descriptive
    statistics. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | 生成描述性统计。 |'
- en: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | First discrete difference of element. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | 元素的第一个离散差分。 |'
- en: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | Evaluate a string describing operations on DataFrame columns. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | 对描述 DataFrame 列操作的字符串进行求值。 |'
- en: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏峰度。'
- en: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | 返回请求轴上的无偏峰度。'
- en: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | 返回请求轴上值的最大值。'
- en: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | 返回请求轴上值的均值。'
- en: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | Return the median of
    the values over the requested axis. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | 返回请求轴上值的中位数。'
- en: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | 返回请求轴上值的最小值。'
- en: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | Get the mode(s) of each element along the selected axis. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | 获取沿所选轴的每个元素的众数。'
- en: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | Fractional change
    between the current and a prior element. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | 当前元素与先前元素之间的分数变化。'
- en: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | 返回请求轴上值的乘积。'
- en: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | Return the product of the values
    over the requested axis. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | 返回请求轴上值的乘积。'
- en: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | Return values at
    the given quantile over requested axis. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | 返回请求轴上给定分位数处的值。'
- en: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | 沿轴计算数值数据的排名（1到n）。'
- en: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | Round a DataFrame to a variable number
    of decimal places. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | 将DataFrame四舍五入到可变数量的小数位数。'
- en: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上均值的无偏标准误差。'
- en: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏偏度。'
- en: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | 返回请求轴上值的总和。 |'
- en: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的样本标准差。 |'
- en: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的无偏方差。 |'
- en: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | Count number of distinct elements
    in specified axis. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | 计算指定轴上不同元素的数量。 |'
- en: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | Return a Series containing
    the frequency of each distinct row in the Dataframe. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | 返回包含数据帧中每个不同行频率的Series。
    |'
- en: Reindexing / selection / label manipulation
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新索引/选择/标签操作
- en: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | 用字符串前缀给标签加前缀。 |'
- en: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | 用字符串后缀给标签加后缀。 |'
- en: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | Align two objects
    on their axes with the specified join method. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | 使用指定的连接方法在它们的轴上对齐两个对象。
    |'
- en: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | Select values at particular
    time of day (e.g., 9:30AM). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | 选择一天中特定时间的值（例如，上午9:30）。 |'
- en: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | 选择一天中特定时间段之间的值（例如，上午9:00-9:30）。
    |'
- en: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | Drop specified labels from rows or columns. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | 从行或列中删除指定标签。 |'
- en: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | Return DataFrame with
    duplicate rows removed. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | 返回删除重复行的数据帧。 |'
- en: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | Return boolean Series denoting
    duplicate rows. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | 返回表示重复行的布尔Series。 |'
- en: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | Test whether two objects contain the same
    elements. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | 测试两个对象是否包含相同的元素。 |'
- en: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | Subset the dataframe
    rows or columns according to the specified index labels. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | 根据指定的索引标签对数据帧的行或列进行子集筛选。
    |'
- en: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (DEPRECATED) Select initial periods of time
    series data based on a date offset. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (已弃用) 根据日期偏移量选择时间序列数据的初始周期。 |'
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | 返回前n行。 |'
- en: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | Return index of first
    occurrence of maximum over requested axis. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | 返回请求轴上最大值的第一次出现的索引。
    |'
- en: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | Return index of first
    occurrence of minimum over requested axis. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | 返回请求轴上最小值的第一次出现的索引。
    |'
- en: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (已弃用) 根据日期偏移量选择时间序列数据的最终周期。 |'
- en: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | Conform DataFrame
    to new index with optional filling logic. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | 将DataFrame调整为新索引，可选择填充逻辑。
    |'
- en: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | Return an object with
    matching indices as other object. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | 返回具有与其他对象匹配索引的对象。 |'
- en: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | Rename columns or
    index labels. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | 重命名列或索引标签。 |'
- en: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | Set the name of the axis
    for the index or columns. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | 为索引或列设置轴的名称。 |'
- en: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | Reset the index, or a level
    of it. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | 重置索引或其级别。 |'
- en: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | Return a random sample of
    items from an axis of object. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | 从对象的轴中返回随机样本项。 |'
- en: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | Assign desired index to
    given axis. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | 为给定轴分配所需的索引。 |'
- en: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | Set the DataFrame
    index using existing columns. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | 使用现有列设置DataFrame索引。
    |'
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | 返回最后n行。 |'
- en: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | 返回沿轴的给定*位置*索引的元素。 |'
- en: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | Truncate a Series
    or DataFrame before and after some index value. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | 在某个索引值之前和之后截断Series或DataFrame。
    |'
- en: '## Missing data handling'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '## 处理缺失数据'
- en: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (DEPRECATED) Fill NA/NaN
    values by using the next valid observation to fill the gap. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (已弃用)使用下一个有效观察结果填充NA/NaN值以填补空白。
    |'
- en: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by using the next valid observation to fill the gap. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | 通过使用下一个有效观察结果填充NA/NaN值以填补空白。
    |'
- en: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | Remove missing values.
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | 删除缺失值。 |'
- en: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by propagating the last valid observation to next valid. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | 通过将最后一个有效观察结果传播到下一个有效观察结果来填充NA/NaN值。
    |'
- en: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | Fill NA/NaN values using
    the specified method. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | 使用指定方法填充NA/NaN值。 |'
- en: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | Fill NaN values
    using an interpolation method. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | 使用插值方法填充NaN值。 |'
- en: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | Detect missing values. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | 检测缺失值。 |'
- en: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull is an alias for DataFrame.isna.
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull是DataFrame.isna的别名。 |'
- en: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | Detect existing (non-missing) values. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | 检测存在的（非缺失）值。 |'
- en: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull is an alias for DataFrame.notna.
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull是DataFrame.notna的别名。 |'
- en: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (已弃用)通过将最后一个有效观察结果传播到下一个有效观察结果来填充NA/NaN值。 |'
- en: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | Replace values given in
    to_replace with value. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | 用value替换to_replace中给定的值。
    |'
- en: Reshaping, sorting, transposing
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重塑、排序、转置
- en: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | 返回删除请求的索引/列级别的Series/DataFrame。
    |'
- en: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | Return reshaped DataFrame
    organized by given index / column values. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | 返回由给定索引/列值组织的重塑DataFrame。
    |'
- en: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | Create a spreadsheet-style
    pivot table as a DataFrame. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | 创建一个类似电子表格样式的透视表作为 DataFrame。
    |'
- en: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | Rearrange index levels using
    input order. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | 使用输入顺序重新排列索引级别。 |'
- en: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | Sort by the values along
    either axis. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | 沿着任一轴的值进行排序。 |'
- en: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | Sort object by labels
    (along an axis). |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | 按标签（沿着一个轴）对对象进行排序。 |'
- en: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in descending order. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | 按列按降序排序的方式返回前 n 行。 |'
- en: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in ascending order. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | 按列按升序排序的方式返回前 n 行。 |'
- en: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | 在 [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") 中交换级别 i 和 j。 |'
- en: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | Stack the prescribed level(s)
    from columns to index. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | 将指定级别的列堆叠到索引中。 |'
- en: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | Pivot a level of the
    (necessarily hierarchical) index labels. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | 对（必然是分层的）索引标签的级别进行透视。
    |'
- en: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | (DEPRECATED) Interchange
    axes and swap values axes appropriately. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | （已弃用）交换轴并适当交换值轴。 |'
- en: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | 将 DataFrame 从宽格式转换为长格式，可选择保留标识符设置。 |'
- en: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | Transform each element of
    a list-like to a row, replicating index values. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | 将类似列表的每个元素转换为一行，复制索引值。 |'
- en: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | Squeeze 1 dimensional axis objects into
    scalars. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | 将 1 维轴对象压缩为标量。 |'
- en: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | Return an xarray object from the pandas object.
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | 从 pandas 对象返回一个 xarray 对象。 |'
- en: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | The transpose of the DataFrame. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | DataFrame 的转置。 |'
- en: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | Transpose index and columns. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | 转置索引和列。 |'
- en: Combining / comparing / joining / merging
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并/比较/连接/合并
- en: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | Assign new columns to a DataFrame. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | 为DataFrame分配新列。 |'
- en: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | Compare to another DataFrame
    and show the differences. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | 与另一个DataFrame进行比较并显示差异。
    |'
- en: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | Join columns of another DataFrame. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | 加入另一个DataFrame的列。 |'
- en: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | Merge DataFrame or
    named Series objects with a database-style join. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | 与数据库风格的连接方式合并DataFrame或命名Series对象。
    |'
- en: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | Modify in place using
    non-NA values from another DataFrame. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | 使用另一个DataFrame中的非NA值就地修改。
    |'
- en: Time Series-related
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与时间序列相关
- en: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | Convert time series to
    specified frequency. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | 将时间序列转换为指定的频率。 |'
- en: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | 返回在where之前没有任何NaN的最后一行。 |'
- en: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | Shift index by desired
    number of periods with an optional time freq. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | 将索引按所需的周期数移动，可选择性地指定时间频率。
    |'
- en: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | Return index for first non-NA value
    or None, if no non-NA value is found. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | 返回第一个非NA值的索引，如果找不到非NA值，则返回None。 |'
- en: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | Return index for last non-NA value or
    None, if no non-NA value is found. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | 返回最后一个非NA值的索引，如果找不到非NA值，则返回None。 |'
- en: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | Resample time-series
    data. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | 对时间序列数据重新采样。 |'
- en: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | Convert DataFrame from DatetimeIndex
    to PeriodIndex. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | 将DataFrame从DatetimeIndex转换为PeriodIndex。
    |'
- en: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | Cast to DatetimeIndex
    of timestamps, at *beginning* of period. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | 转换为时间戳的DatetimeIndex，位于*周期的开始*。
    |'
- en: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis
    to target time zone. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | 将带有时区信息的轴转换为目标时区。 |'
- en: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | Localize tz-naive index
    of a Series or DataFrame to target time zone. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | 将 Series 或 DataFrame
    的 tz-naive 索引本地化到目标时区。 |'
- en: '## Flags'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '## 标志'
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs").
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 标志指的是 pandas 对象的属性。数据集的属性（如记录日期、访问的 URL 等）应存储在 [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") 中。
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |  ## Metadata'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | 适用于 pandas 对象的标志。 |  ## 元数据'
- en: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") is a dictionary for storing global metadata for this
    DataFrame.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") 是用于存储此 DataFrame 的全局元数据的字典。'
- en: Warning
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`DataFrame.attrs` is considered experimental and may change without warning.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.attrs` 被视为实验性内容，可能会在没有警告的情况下更改。'
- en: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | Dictionary of global attributes of this dataset. |  ##
    Plotting'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | 此数据集的全局属性字典。 |  ## 绘图'
- en: '`DataFrame.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `DataFrame.plot.<kind>`.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.plot` 既是一个可调用的方法，也是特定绘图方法的命名空间属性，形式为 `DataFrame.plot.<kind>`。'
- en: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame plotting accessor and method |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame 绘图访问器和方法 |'
- en: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")([x, y, stacked]) | 绘制堆叠面积图。 |'
- en: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | Vertical bar plot. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | 垂直条形图。 |'
- en: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | 绘制水平条形图。 |'
- en: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | Make a box plot of the DataFrame columns.
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | 绘制 DataFrame 列的箱线图。 |'
- en: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | 使用高斯核生成核密度估计图。 |'
- en: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | Generate a hexagonal binning
    plot. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | 生成六边形二进制图。 |'
- en: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | 绘制 DataFrame 列的直方图。 |'
- en: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | 使用高斯核生成核密度估计图。 |'
- en: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | 将 Series 或 DataFrame 绘制为线条。 |'
- en: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | Generate a pie plot. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | 生成饼图。 |'
- en: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | Create a scatter plot with varying
    marker point size and color. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | 创建一个带有不同标记点大小和颜色的散点图。 |'
- en: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | Make a box plot from DataFrame
    columns. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | 从 DataFrame 列制作箱线图。 |'
- en: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | Make a histogram of the DataFrame''s columns. |  ## Sparse accessor'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | 绘制 DataFrame 列的直方图。 |  ## 稀疏访问器'
- en: Sparse-dtype specific methods and attributes are provided under the `DataFrame.sparse`
    accessor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了特定于稀疏-dtype 的方法和属性，可以在 `DataFrame.sparse` 访问器下找到。
- en: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | Ratio of non-sparse points to total (dense)
    data points. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | 非稀疏点与总数据点（密集）的比率。 |'
- en: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | Create a new DataFrame
    from a scipy sparse matrix. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | 从 scipy 稀疏矩阵创建一个新的 DataFrame。
    |'
- en: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | Return the contents of the frame as a sparse
    SciPy COO matrix. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | 将帧的内容作为稀疏 SciPy COO 矩阵返回。 |'
- en: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | Convert a DataFrame with sparse values
    to dense. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | 将具有稀疏值的 DataFrame 转换为密集形式。 |'
- en: Serialization / IO / conversion
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列化 / IO / 转换
- en: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | Construct DataFrame
    from dict of array-like or dicts. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | 从数组样式或字典的字典构造 DataFrame。
    |'
- en: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, ...]) | Convert structured or record
    ndarray to DataFrame. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, ...]) | 将结构化或记录 ndarray 转换为 DataFrame。
    |'
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | 将 DataFrame 写入 ORC 格式。
    |'
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | 将 DataFrame 写入二进制 parquet
    格式。 |'
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | 将对象序列化为文件。 |'
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | 将对象写入逗号分隔值（csv）文件。
    |'
- en: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | Write the contained data
    to an HDF5 file using HDFStore. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | 使用 HDFStore 将包含的数据写入
    HDF5 文件。 |'
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | 将存储在 DataFrame 中的记录写入
    SQL 数据库。 |'
- en: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | Convert the DataFrame to
    a dictionary. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | 将 DataFrame 转换为字典。 |'
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | 将对象写入 Excel 表格。 |'
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | 将对象转换为 JSON 字符串。 |'
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | 将 DataFrame 呈现为
    HTML 表格。 |'
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | 将 DataFrame 写入二进制 Feather 格式。
    |'
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | 将对象呈现为 LaTeX 表格、长表格或嵌套表格。
    |'
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | 将 DataFrame 对象导出为
    Stata dta 格式。 |'
- en: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | (DEPRECATED) Write a
    DataFrame to a Google BigQuery table. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | (已弃用) 将 DataFrame 写入
    Google BigQuery 表格。 |'
- en: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | Convert DataFrame
    to a NumPy record array. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | 将 DataFrame 转换为
    NumPy 记录数组。 |'
- en: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | Render a DataFrame to a console-friendly
    tabular output. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | 将 DataFrame 呈现为适合控制台的表格输出。
    |'
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | 将对象复制到系统剪贴板。 |'
- en: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | Print DataFrame in
    Markdown-friendly format. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | 以适合 Markdown 的格式打印
    DataFrame。 |'
- en: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | Returns a Styler object. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | 返回一个 Styler 对象。 |'
- en: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | Return the dataframe interchange
    object implementing the interchange protocol. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | 返回实现交换协议的数据帧交换对象。 |'
- en: Constructor
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | Two-dimensional, size-mutable, potentially heterogeneous tabular data. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | 二维、大小可变、可能异构的表格数据。 |'
- en: Attributes and underlying data
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性和底层数据
- en: '**Axes**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**轴**'
- en: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | The index (row labels) of the DataFrame. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | DataFrame的索引（行标签）。 |'
- en: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | The column labels of the DataFrame. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | DataFrame的列标签。 |'
- en: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | Return the dtypes in the DataFrame. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | 返回DataFrame中的数据类型。 |'
- en: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | Print a concise summary of a DataFrame. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | 打印DataFrame的简明摘要。 |'
- en: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | Return a subset of the
    DataFrame''s columns based on the column dtypes. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | 根据列的数据类型返回DataFrame列的子集。
    |'
- en: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | Return a Numpy representation of the DataFrame. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | 返回DataFrame的Numpy表示。 |'
- en: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | Return a list representing the axes of the DataFrame. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | 返回表示DataFrame轴的列表。 |'
- en: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | Return an int representing the number of axes / array dimensions. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | 返回表示轴数/数组维度的整数。 |'
- en: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | Return an int representing the number of elements in this object. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | 返回表示此对象中元素数量的整数。 |'
- en: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | Return a tuple representing the dimensionality of
    the DataFrame. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | 返回表示DataFrame维度的元组。 |'
- en: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | Return the memory usage of each
    column in bytes. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | 返回每列的内存使用量（以字节为单位）。 |'
- en: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | Indicator whether Series/DataFrame is empty. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | 指示Series/DataFrame是否为空。 |'
- en: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | 返回具有更新标志的新对象。 |'
- en: Conversion
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | Cast a pandas object to a
    specified dtype `dtype`. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | 将pandas对象转换为指定的dtype `dtype`。
    |'
- en: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | Convert columns to
    the best possible dtypes using dtypes supporting `pd.NA`. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | 使用支持`pd.NA`的数据类型，将列转换为最佳数据类型。'
- en: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | Attempt to infer better dtypes for
    object columns. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | 尝试为对象列推断更好的数据类型。'
- en: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | 复制此对象的索引和数据。'
- en: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | （已弃用）返回单个元素 Series 或 DataFrame 的布尔值。'
- en: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | Convert the DataFrame
    to a NumPy array. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | 将 DataFrame 转换为 NumPy
    数组。'
- en: Indexing, iteration
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引，迭代
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | 返回前 n 行。'
- en: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | Access a single value for a row/column label pair. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | 访问行/列标签对的单个值。'
- en: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | Access a single value for a row/column pair by integer position. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | 通过整数位置访问行/列对的单个值。'
- en: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | 通过标签或布尔数组访问一组行和列。'
- en: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | （已弃用）基于纯整数位置的索引，按位置选择。'
- en: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | Insert column into DataFrame
    at specified location. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | 在指定位置将列插入 DataFrame。'
- en: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | Iterate over info axis. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | 迭代信息轴。'
- en: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | Iterate over (column name, Series) pairs. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | 以（列名，Series）对的形式迭代。'
- en: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | Get the ''info axis'' (see Indexing for more). |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | 获取“信息轴”（详见索引）。'
- en: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | Iterate over DataFrame rows as (index, Series)
    pairs. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | 以（索引，Series）对的形式迭代 DataFrame 行。'
- en: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | Iterate over DataFrame rows as
    namedtuples. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | 以命名元组形式迭代 DataFrame 行。'
- en: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | Return item and drop from frame. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | 返回项目并从框架中删除。'
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | 返回最后n行。 |'
- en: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | 从Series/DataFrame返回横截面。 |'
- en: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | 获取给定键的对象中的项目（例如：数据框列）。 |'
- en: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | Whether each element in the DataFrame is contained in values. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | 检查数据框中的每个元素是否包含在给定值中。 |'
- en: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | Replace values where
    the condition is False. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | 替换条件为False的值。 |'
- en: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | Replace values where the condition is True. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | 替换条件为True的值。 |'
- en: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | Query the columns of a DataFrame
    with a boolean expression. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | 使用布尔表达式查询数据框的列。 |'
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`.at`, `.iat`, `.loc`, 和 `.iloc`的更多信息，请参阅[索引文档](../user_guide/indexing.html#indexing)。
- en: Binary operator functions
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二元运算符函数
- en: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | Get Addition of DataFrame and other, column-wise.
    |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | 获取数据框和其他数据的加法，按列进行。 |'
- en: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator add). |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的加法，逐元素进行（二元运算符加法）。 |'
- en: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator sub).
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的减法，逐元素进行（二元运算符减法）。 |'
- en: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator mul).
    |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的乘法，逐元素进行（二元运算符乘法）。 |'
- en: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的浮点除法，逐元素进行（二元运算符真除法）。 |'
- en: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator truediv). |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | 获取数据框和其他数据的浮点除法，逐元素进行（二元运算符真除法）。
    |'
- en: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator floordiv). |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | 获取数据框和其他数据的整数除法，逐元素进行（二元运算符整数除法）。
    |'
- en: '| [`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator mod). |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的模数，逐元素计算（二元运算符 mod）。'
- en: '| [`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    pow). |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的指数幂，逐元素计算（二元运算符 pow）。'
- en: '| [`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | Compute the matrix multiplication between the DataFrame and other. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | 计算数据框和其他数据的矩阵乘法。'
- en: '| [`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator radd). |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的加法，逐元素计算（二元运算符 radd）。'
- en: '| [`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator rsub).
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的减法，逐元素计算（二元运算符 rsub）。'
- en: '| [`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator rmul).
    |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的乘法，逐元素计算（二元运算符 rmul）。'
- en: '| [`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的浮点数除法，逐元素计算（二元运算符 rtruediv）。'
- en: '| [`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator rtruediv). |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | 获取数据框和其他数据的浮点数除法，逐元素计算（二元运算符
    rtruediv）。'
- en: '| [`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator rfloordiv). |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | 获取数据框和其他数据的整数除法，逐元素计算（二元运算符
    rfloordiv）。'
- en: '| [`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator rmod). |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的模数，逐元素计算（二元运算符 rmod）。'
- en: '| [`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    rpow). |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | 获取数据框和其他数据的指数幂，逐元素计算（二元运算符 rpow）。'
- en: '| [`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | Get Less than of dataframe and other, element-wise (binary operator lt). |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | 获取数据框和其他数据的小于关系，逐元素计算（二元运算符 lt）。'
- en: '| [`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | Get Greater than of dataframe and other, element-wise (binary operator gt).
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | 获取数据框和其他数据的大于关系，逐元素计算（二元运算符 gt）。'
- en: '| [`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | Get Less than or equal to of dataframe and other, element-wise (binary operator
    le). |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | 获取数据框和其他数据的小于等于关系，逐元素计算（二元运算符 le）。'
- en: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | Get Greater than or equal to of dataframe and other, element-wise (binary operator
    ge). |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | 获取DataFrame和其他元素的大于或等于，逐元素进行（二进制运算符ge）。 |'
- en: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | Get Not equal to of dataframe and other, element-wise (binary operator ne).
    |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | 获取DataFrame和其他元素的不等于，逐元素进行（二进制运算符ne）。 |'
- en: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | Get Equal to of dataframe and other, element-wise (binary operator eq). |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | 获取DataFrame和其他元素的等于，逐元素进行（二进制运算符eq）。 |'
- en: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | Perform column-wise
    combine with another DataFrame. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | 与另一个DataFrame执行按列合并。
    |'
- en: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | Update null elements with value in
    the same location in other. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | 使用其他位置相同的值更新空元素。 |'
- en: Function application, GroupBy & window
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数应用，GroupBy和窗口
- en: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | Apply a function along an
    axis of the DataFrame. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | 沿DataFrame的轴应用函数。 |'
- en: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | Apply a function to a Dataframe elementwise. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | 对DataFrame逐元素应用函数。 |'
- en: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | (DEPRECATED) Apply a function
    to a Dataframe elementwise. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | (已弃用) 对DataFrame逐元素应用函数。 |'
- en: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | 应用可链式调用的函数，期望Series或DataFrames。 |'
- en: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | 沿指定轴使用一个或多个操作进行聚合。 |'
- en: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | 沿指定轴使用一个或多个操作进行聚合。 |'
- en: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | Call `func` on self producing a
    DataFrame with the same axis shape as self. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | 在自身上调用`func`，生成一个与自身轴形状相同的DataFrame。
    |'
- en: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | Group DataFrame using a
    mapper or by a Series of columns. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | 使用映射器或列系列对DataFrame进行分组。
    |'
- en: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | Provide rolling window
    calculations. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | 提供滚动窗口计算。 |'
- en: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | Provide expanding
    window calculations. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | 提供扩展窗口计算。 |'
- en: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | 提供指数加权（EW）计算。'
- en: '## Computations / descriptive stats'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '## 计算 / 描述性统计'
- en: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | 返回每个元素的绝对数值的Series/DataFrame。'
- en: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | 返回是否所有元素为True，可能沿着一个轴。'
- en: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | 返回是否有任何元素为True，可能沿着一个轴。'
- en: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | 在输入阈值处修剪值。'
- en: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | Compute pairwise correlation of columns, excluding NA/null values. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | 计算列的成对相关性，不包括NA/null值。'
- en: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | Compute pairwise correlation.
    |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | 计算成对的相关性。'
- en: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | Count non-NA cells for each
    column or row. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | 计算每列或每行的非NA单元格数。'
- en: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | Compute pairwise covariance of columns, excluding NA/null values. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | 计算列的成对协方差，不包括NA/null值。'
- en: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | Return cumulative maximum over a
    DataFrame or Series axis. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | 返回DataFrame或Series轴上的累积最大值。'
- en: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | Return cumulative minimum over a
    DataFrame or Series axis. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | 返回DataFrame或Series轴上的累积最小值。'
- en: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | Return cumulative product over a
    DataFrame or Series axis. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | 返回DataFrame或Series轴上的累积乘积。'
- en: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | Return cumulative sum over a DataFrame
    or Series axis. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | 返回DataFrame或Series轴上的累积和。'
- en: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | Generate descriptive
    statistics. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | 生成描述性统计。'
- en: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | First discrete difference of element. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | 元素的第一个离散差异。'
- en: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | Evaluate a string describing operations on DataFrame columns. |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | 对描述DataFrame列操作的字符串进行评估。'
- en: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏峰度。 |'
- en: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | 返回请求轴上的无偏峰度。 |'
- en: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | 返回请求轴上的最大值。 |'
- en: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | 返回请求轴上的均值。 |'
- en: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | Return the median of
    the values over the requested axis. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | 返回请求轴上的中位数。 |'
- en: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | 返回请求轴上的最小值。 |'
- en: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | Get the mode(s) of each element along the selected axis. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | 获取所选轴上每个元素的众数。 |'
- en: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | Fractional change
    between the current and a prior element. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | 当前元素与前一个元素之间的分数变化。
    |'
- en: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | 返回请求轴上值的乘积。 |'
- en: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | Return the product of the values
    over the requested axis. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | 返回请求轴上的值的乘积。 |'
- en: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | Return values at
    the given quantile over requested axis. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | 返回请求轴上给定分位数的值。 |'
- en: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | 沿轴计算数值数据排名（1 到 n）。 |'
- en: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | Round a DataFrame to a variable number
    of decimal places. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | 将 DataFrame 四舍五入到可变数量的小数位数。 |'
- en: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上均值的无偏标准误差。 |'
- en: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | 返回请求轴上的无偏偏斜。 |'
- en: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | 返回请求轴上数值的总和。 |'
- en: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的样本标准差。 |'
- en: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | 返回请求轴上的无偏方差。 |'
- en: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | Count number of distinct elements
    in specified axis. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | 计算指定轴上不同元素的数量。 |'
- en: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | Return a Series containing
    the frequency of each distinct row in the Dataframe. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | 返回一个包含数据框中每个不同行频率的Series。
    |'
- en: Reindexing / selection / label manipulation
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新索引/选择/标签操作
- en: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | 使用字符串前缀给标签加前缀。 |'
- en: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | 使用字符串后缀给标签加后缀。 |'
- en: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | Align two objects
    on their axes with the specified join method. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | 使用指定的连接方法在它们的轴上对齐两���对象。
    |'
- en: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | Select values at particular
    time of day (e.g., 9:30AM). |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | 选择一天中特定时间的值（例如，上午9:30）。 |'
- en: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | 选择一天中特定时间段之间的值（例如，上午9:00-9:30）。
    |'
- en: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | Drop specified labels from rows or columns. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | 从行或列中删除指定标签。 |'
- en: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | Return DataFrame with
    duplicate rows removed. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | 返回删除重复行的数据框。 |'
- en: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | Return boolean Series denoting
    duplicate rows. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | 返回表示重复行的布尔Series。 |'
- en: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | Test whether two objects contain the same
    elements. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | 测试两个对象是否包含相同的元素。 |'
- en: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | Subset the dataframe
    rows or columns according to the specified index labels. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | 根据指定的索引标签对数据框行或列进行子集选择。
    |'
- en: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (DEPRECATED) Select initial periods of time
    series data based on a date offset. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (已弃用) 根据日期偏移量选择时间序列数据的初始周期。 |'
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | 返回前 n 行。 |'
- en: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | Return index of first
    occurrence of maximum over requested axis. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | 返回请求轴上最大值的第一次出现的索引。
    |'
- en: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | Return index of first
    occurrence of minimum over requested axis. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | 返回请求轴上最小值的第一次出现的索引。
    |'
- en: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (已弃用) 根据日期偏移量选择时间序列数据的最终周期。 |'
- en: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | Conform DataFrame
    to new index with optional filling logic. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | 使用可选的填充逻辑使 DataFrame
    符合新索引。 |'
- en: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | Return an object with
    matching indices as other object. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | 返回具有与其他对象匹配索引的对象。 |'
- en: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | Rename columns or
    index labels. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | 重命名列或索引标签。 |'
- en: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | Set the name of the axis
    for the index or columns. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | 设置索引或列的轴的名称。 |'
- en: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | Reset the index, or a level
    of it. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | 重置索引或其级别。 |'
- en: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | Return a random sample of
    items from an axis of object. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | 从对象的轴中返回随机样本项。 |'
- en: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | Assign desired index to
    given axis. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | 将所需的索引分配给给定的轴。 |'
- en: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | Set the DataFrame
    index using existing columns. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | 使用现有列设置 DataFrame
    索引。 |'
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | 返回最后 n 行。 |'
- en: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | 返回沿轴的给定 *位置* 索引的元素。 |'
- en: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | Truncate a Series
    or DataFrame before and after some index value. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | 截断 Series 或 DataFrame，在某个索引值之前和之后。
    |'
- en: '## Missing data handling'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '## 处理缺失数据'
- en: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (DEPRECATED) Fill NA/NaN
    values by using the next valid observation to fill the gap. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (已弃用) 使用下一个有效观测值填充 NA/NaN
    值。 |'
- en: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by using the next valid observation to fill the gap. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | 使用下一个有效观测值填充 NA/NaN
    值。 |'
- en: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | Remove missing values.
    |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | 删除缺失值。 |'
- en: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by propagating the last valid observation to next valid. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | 通过将最后一个有效观测值传播到下一个有效值来填充
    NA/NaN 值。 |'
- en: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | Fill NA/NaN values using
    the specified method. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | 使用指定方法填充 NA/NaN 值。 |'
- en: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | Fill NaN values
    using an interpolation method. |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | 使用插值方法填充 NaN 值。
    |'
- en: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | Detect missing values. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | 检测缺失值。 |'
- en: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull is an alias for DataFrame.isna.
    |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull 是 DataFrame.isna 的别名。 |'
- en: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | Detect existing (non-missing) values. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | 检测存在的（非缺失）值。 |'
- en: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull is an alias for DataFrame.notna.
    |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull 是 DataFrame.notna 的别名。 |'
- en: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (已弃用) 通过将最后一个有效观测值传播到下一个有效值来填充 NA/NaN 值。 |'
- en: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | Replace values given in
    to_replace with value. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | 用给定的值替换 to_replace 中的值。
    |'
- en: Reshaping, sorting, transposing
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重塑、排序、转置
- en: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | 返回删除请求的索引/列级别的 Series/DataFrame。
    |'
- en: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | Return reshaped DataFrame
    organized by given index / column values. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | 返回按给定索引/列值组织的重塑 DataFrame。
    |'
- en: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | Create a spreadsheet-style
    pivot table as a DataFrame. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | 创建一个类似电子表格样式的透视表作为 DataFrame。
    |'
- en: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | Rearrange index levels using
    input order. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | 使用输入顺序重新排列索引级别。 |'
- en: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | Sort by the values along
    either axis. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | 沿任一轴的值排序。 |'
- en: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | Sort object by labels
    (along an axis). |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | 按标签（沿轴）对对象进行排序。 |'
- en: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in descending order. |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | 按列按降序顺序返回前 n 行。 |'
- en: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in ascending order. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | 按升序顺序返回按列排序的前 n 行。 |'
- en: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | 在 [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") 中交换级别 i 和 j。 |'
- en: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | Stack the prescribed level(s)
    from columns to index. |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | 将指定级别的列堆叠到索引中。 |'
- en: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | Pivot a level of the
    (necessarily hierarchical) index labels. |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | 透视（必然是分层的）索引标签的一个级别。
    |'
- en: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | (DEPRECATED) Interchange
    axes and swap values axes appropriately. |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | （已弃用）交换轴并适当交换值轴。 |'
- en: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set. |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | 将 DataFrame 从宽格式转换为长格式，可选择保留标识符设置。 |'
- en: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | Transform each element of
    a list-like to a row, replicating index values. |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | 将类似列表的每个元素转换为一行，复制索引值。 |'
- en: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | Squeeze 1 dimensional axis objects into
    scalars. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | 将 1 维轴对象压缩为标量。 |'
- en: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | Return an xarray object from the pandas object.
    |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | 从 pandas 对象返回一个 xarray 对象。 |'
- en: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | The transpose of the DataFrame. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | DataFrame 的转置。 |'
- en: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | Transpose index and columns. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | 转置索引和列。 |'
- en: Combining / comparing / joining / merging
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并/比较/连接/合并
- en: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | Assign new columns to a DataFrame. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | 将新列分配给DataFrame。 |'
- en: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | Compare to another DataFrame
    and show the differences. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | 与另一个DataFrame进行比较并显示差异。
    |'
- en: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | Join columns of another DataFrame. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | 加入另一个DataFrame的列。 |'
- en: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | Merge DataFrame or
    named Series objects with a database-style join. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | 与数据库风格的连接方式合并DataFrame或命名Series对象。
    |'
- en: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | Modify in place using
    non-NA values from another DataFrame. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | 使用另一个DataFrame中的非NA值就地修改。
    |'
- en: Time Series-related
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与时间序列相关
- en: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | Convert time series to
    specified frequency. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | 将时间序列转换为指定频率。 |'
- en: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | 返回在where之前没有任何NaN的最后一行。 |'
- en: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | Shift index by desired
    number of periods with an optional time freq. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | 将索引按所需的周期数移动，可选择时间频率。
    |'
- en: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | Return index for first non-NA value
    or None, if no non-NA value is found. |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | 返回第一个非NA值的索引，如果找不到非NA值，则返回None。 |'
- en: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | Return index for last non-NA value or
    None, if no non-NA value is found. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | 返回最后一个非NA值的索引，如果找不到非NA值，则返回None。 |'
- en: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | Resample time-series
    data. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | 对时间序列数据进行重新采样。 |'
- en: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | Convert DataFrame from DatetimeIndex
    to PeriodIndex. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | 将DataFrame从DatetimeIndex转换为PeriodIndex。
    |'
- en: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | Cast to DatetimeIndex
    of timestamps, at *beginning* of period. |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | 转换为时间戳的DatetimeIndex，位于*周期的开始*。
    |'
- en: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis
    to target time zone. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | 将tz-aware轴转换为目标时区。 |'
- en: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | Localize tz-naive index
    of a Series or DataFrame to target time zone. |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | 将Series或DataFrame的tz-naive索引本地化到目标时区。
    |'
- en: '## Flags'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '## 标志'
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs").
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 标志指的是pandas对象的属性。数据集的属性（如记录日期、访问的URL等）应存储在[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs")中。
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | 适用于pandas对象的标志。 |'
- en: '## Metadata'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '## 元数据'
- en: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") is a dictionary for storing global metadata for this
    DataFrame.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs")是用于存储此DataFrame全局元数据的字典。'
- en: Warning
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`DataFrame.attrs` is considered experimental and may change without warning.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.attrs`被视为实验性内容，可能会在没有警告的情况下更改。'
- en: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | Dictionary of global attributes of this dataset. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | 此数据集的全局属性字典。 |'
- en: '## Plotting'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '## 绘图'
- en: '`DataFrame.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `DataFrame.plot.<kind>`.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.plot`既是一个可调用方法，也是特定绘图方法的命名空间属性，形式为`DataFrame.plot.<kind>`。'
- en: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame plotting accessor and method |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame绘图访问器和方法 |'
- en: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area") | 绘制堆叠面积图。 |'
- en: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | Vertical bar plot. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | 垂直条形图。 |'
- en: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | 绘制水平条形图。 |'
- en: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | Make a box plot of the DataFrame columns.
    |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | 绘制数据框的箱线图。 |'
- en: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | 使用高斯核生成核密度估计图。 |'
- en: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | Generate a hexagonal binning
    plot. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | 生成六边形二进制图。 |'
- en: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | 绘制DataFrame列的直方图。 |'
- en: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | 使用高斯核生成核密度估计图。 |'
- en: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | 将Series或DataFrame绘制为线条。 |'
- en: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | Generate a pie plot. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | 生成饼图。 |'
- en: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | Create a scatter plot with varying
    marker point size and color. |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | 创建散点图，可变的标记点大小和颜色。 |'
- en: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | Make a box plot from DataFrame
    columns. |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | 从 DataFrame 列制作箱线图。 |'
- en: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | Make a histogram of the DataFrame''s columns. |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | 绘制 DataFrame 列的直方图。 |'
- en: '## Sparse accessor'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '## 稀疏访问器'
- en: Sparse-dtype specific methods and attributes are provided under the `DataFrame.sparse`
    accessor.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了特定于稀疏 dtype 的方法和属性，位于 `DataFrame.sparse` 访问器下。
- en: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | Ratio of non-sparse points to total (dense)
    data points. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | 非稀疏点与总数据点（密集）的比率。 |'
- en: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | Create a new DataFrame
    from a scipy sparse matrix. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | 从 scipy 稀疏矩阵创建新 DataFrame。
    |'
- en: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | Return the contents of the frame as a sparse
    SciPy COO matrix. |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | 将帧内容作为稀疏 SciPy COO 矩阵返回。 |'
- en: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | Convert a DataFrame with sparse values
    to dense. |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | 将具有稀疏值的 DataFrame 转换为密集。 |'
- en: Serialization / IO / conversion
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列化 / IO / 转换
- en: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | Construct DataFrame
    from dict of array-like or dicts. |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | 从数组样式或字典的字典构造 DataFrame。
    |'
- en: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, ...]) | Convert structured or record
    ndarray to DataFrame. |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records") | 将结构化或记录的 ndarray 转换为 DataFrame。 |'
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | 将 DataFrame 写入 ORC 格式。
    |'
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | 将 DataFrame 写入二进制 parquet
    格式。 |'
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | 将对象 pickle（序列化）到文件。
    |'
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | 将对象写入逗号分隔值（csv）文件。
    |'
- en: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | Write the contained data
    to an HDF5 file using HDFStore. |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | 使用 HDFStore 将包含的数据写入
    HDF5 文件。 |'
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | 将存储在 DataFrame 中的记录写入
    SQL 数据库。 |'
- en: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | Convert the DataFrame to
    a dictionary. |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | 将 DataFrame 转换为字典。 |'
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | 将对象写入 Excel 表格。 |'
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | 将对象转换为 JSON 字符串。 |'
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | 将 DataFrame 呈现为
    HTML 表格。 |'
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs**) | 将 DataFrame 写入二进制 Feather 格式。
    |'
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | 将对象呈现为 LaTeX 表格、长表格或嵌套表格。
    |'
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | 将 DataFrame 对象导出为
    Stata dta 格式。 |'
- en: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | (DEPRECATED) Write a
    DataFrame to a Google BigQuery table. |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | （已弃用）将 DataFrame 写入
    Google BigQuery 表格。 |'
- en: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | Convert DataFrame
    to a NumPy record array. |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | 将 DataFrame 转换为
    NumPy 记录数组。 |'
- en: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | Render a DataFrame to a console-friendly
    tabular output. |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | 将 DataFrame 呈现为适合控制台的表格输出。
    |'
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | 将对象复制到系统剪贴板。 |'
- en: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | Print DataFrame in
    Markdown-friendly format. |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | 以 Markdown 友好的格式打印
    DataFrame。 |'
- en: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | Returns a Styler object. |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | 返回一个 Styler 对象。 |'
- en: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | Return the dataframe interchange
    object implementing the interchange protocol. |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | 返回实现交换协议的数据框交换对象。 |'
