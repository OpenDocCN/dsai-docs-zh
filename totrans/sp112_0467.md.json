["```py\nscipy.optimize.quadratic_assignment(A, B, method='faq', options=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.optimize import quadratic_assignment\n>>> A = np.array([[0, 80, 150, 170], [80, 0, 130, 100],\n...               [150, 130, 0, 120], [170, 100, 120, 0]])\n>>> B = np.array([[0, 5, 2, 7], [0, 0, 3, 8],\n...               [0, 0, 0, 3], [0, 0, 0, 0]])\n>>> res = quadratic_assignment(A, B)\n>>> print(res)\n fun: 3260\n col_ind: [0 3 2 1]\n nit: 9 \n```", "```py\n>>> perm = res['col_ind']\n>>> P = np.eye(len(A), dtype=int)[perm]\n>>> fun = np.trace(A.T @ P @ B @ P.T)\n>>> print(fun)\n3260 \n```", "```py\n>>> fun = np.trace(A.T @ B[perm][:, perm])\n>>> print(fun)\n3260 \n```", "```py\n>>> from itertools import permutations\n>>> perm_opt, fun_opt = None, np.inf\n>>> for perm in permutations([0, 1, 2, 3]):\n...     perm = np.array(perm)\n...     fun = np.trace(A.T @ B[perm][:, perm])\n...     if fun < fun_opt:\n...         fun_opt, perm_opt = fun, perm\n>>> print(np.array_equal(perm_opt, res['col_ind']))\nTrue \n```", "```py\n>>> A = np.array([[0, 5, 8, 6], [5, 0, 5, 1],\n...               [8, 5, 0, 2], [6, 1, 2, 0]])\n>>> B = np.array([[0, 1, 8, 4], [1, 0, 5, 2],\n...               [8, 5, 0, 5], [4, 2, 5, 0]])\n>>> res = quadratic_assignment(A, B)\n>>> print(res)\n fun: 178\n col_ind: [1 0 3 2]\n nit: 13 \n```", "```py\n>>> guess = np.array([np.arange(len(A)), res.col_ind]).T\n>>> res = quadratic_assignment(A, B, method=\"2opt\",\n...                            options = {'partial_guess': guess})\n>>> print(res)\n fun: 176\n col_ind: [1 2 3 0]\n nit: 17 \n```"]