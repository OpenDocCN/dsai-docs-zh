["```py\nsympy.series.sequences.sequence(seq, limits=None)\n```", "```py\n>>> from sympy import sequence\n>>> from sympy.abc import n\n>>> sequence(n**2, (n, 0, 5))\nSeqFormula(n**2, (n, 0, 5))\n>>> sequence((1, 2, 3), (n, 0, 5))\nSeqPer((1, 2, 3), (n, 0, 5)) \n```", "```py\nclass sympy.series.sequences.SeqBase(*args)\n```", "```py\ncoeff(pt)\n```", "```py\ncoeff_mul(other)\n```", "```py\n>>> from sympy import SeqFormula\n>>> from sympy.abc import n\n>>> SeqFormula(n**2).coeff_mul(2)\nSeqFormula(2*n**2, (n, 0, oo)) \n```", "```py\nfind_linear_recurrence(n, d=None, gfvar=None)\n```", "```py\n>>> from sympy import sequence, sqrt, oo, lucas\n>>> from sympy.abc import n, x, y\n>>> sequence(n**2).find_linear_recurrence(10, 2)\n[]\n>>> sequence(n**2).find_linear_recurrence(10)\n[3, -3, 1]\n>>> sequence(2**n).find_linear_recurrence(10)\n[2]\n>>> sequence(23*n**4+91*n**2).find_linear_recurrence(10)\n[5, -10, 10, -5, 1]\n>>> sequence(sqrt(5)*(((1 + sqrt(5))/2)**n - (-(1 + sqrt(5))/2)**(-n))/5).find_linear_recurrence(10)\n[1, 1]\n>>> sequence(x+y*(-2)**(-n), (n, 0, oo)).find_linear_recurrence(30)\n[1/2, 1/2]\n>>> sequence(3*5**n + 12).find_linear_recurrence(20,gfvar=x)\n([6, -5], 3*(5 - 21*x)/((x - 1)*(5*x - 1)))\n>>> sequence(lucas(n)).find_linear_recurrence(15,gfvar=x)\n([1, 1], (x - 2)/(x**2 + x - 1)) \n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy import SeqFormula\n>>> from sympy.abc import n, m\n>>> SeqFormula(m*n**2, (n, 0, 5)).free_symbols\n{m} \n```", "```py\nproperty gen\n```", "```py\nproperty interval\n```", "```py\nproperty length\n```", "```py\nproperty start\n```", "```py\nproperty stop\n```", "```py\nproperty variables\n```", "```py\nclass sympy.series.sequences.SeqFormula(formula, limits=None)\n```", "```py\n>>> from sympy import SeqFormula, oo, Symbol\n>>> n = Symbol('n')\n>>> s = SeqFormula(n**2, (n, 0, 5))\n>>> s.formula\nn**2 \n```", "```py\n>>> s.coeff(3)\n9 \n```", "```py\n>>> s[:]\n[0, 1, 4, 9, 16, 25] \n```", "```py\n>>> list(s)\n[0, 1, 4, 9, 16, 25] \n```", "```py\n>>> SeqFormula(n**2, (-oo, 0))[0:6]\n[0, 1, 4, 9, 16, 25] \n```", "```py\ncoeff_mul(coeff)\n```", "```py\nclass sympy.series.sequences.SeqPer(periodical, limits=None)\n```", "```py\n>>> from sympy import SeqPer, oo\n>>> from sympy.abc import k \n```", "```py\n>>> s = SeqPer((1, 2, 3), (0, 5))\n>>> s.periodical\n(1, 2, 3)\n>>> s.period\n3 \n```", "```py\n>>> s.coeff(3)\n1 \n```", "```py\n>>> s[:]\n[1, 2, 3, 1, 2, 3] \n```", "```py\n>>> list(s)\n[1, 2, 3, 1, 2, 3] \n```", "```py\n>>> SeqPer((1, 2, 3), (-oo, 0))[0:6]\n[1, 2, 3, 1, 2, 3] \n```", "```py\n>>> SeqPer((k, k**2, k**3), (k, 0, oo))[0:6]\n[0, 1, 8, 3, 16, 125] \n```", "```py\ncoeff_mul(coeff)\n```", "```py\nclass sympy.series.sequences.EmptySequence\n```", "```py\n>>> from sympy import EmptySequence, SeqPer\n>>> from sympy.abc import x\n>>> EmptySequence\nEmptySequence\n>>> SeqPer((1, 2), (x, 0, 10)) + EmptySequence\nSeqPer((1, 2), (x, 0, 10))\n>>> SeqPer((1, 2)) * EmptySequence\nEmptySequence\n>>> EmptySequence.coeff_mul(-1)\nEmptySequence \n```", "```py\ncoeff_mul(coeff)\n```", "```py\nclass sympy.series.sequences.SeqAdd(*args, **kwargs)\n```", "```py\n>>> from sympy import EmptySequence, oo, SeqAdd, SeqPer, SeqFormula\n>>> from sympy.abc import n\n>>> SeqAdd(SeqPer((1, 2), (n, 0, oo)), EmptySequence)\nSeqPer((1, 2), (n, 0, oo))\n>>> SeqAdd(SeqPer((1, 2), (n, 0, 5)), SeqPer((1, 2), (n, 6, 10)))\nEmptySequence\n>>> SeqAdd(SeqPer((1, 2), (n, 0, oo)), SeqFormula(n**2, (n, 0, oo)))\nSeqAdd(SeqFormula(n**2, (n, 0, oo)), SeqPer((1, 2), (n, 0, oo)))\n>>> SeqAdd(SeqFormula(n**3), SeqFormula(n**2))\nSeqFormula(n**3 + n**2, (n, 0, oo)) \n```", "```py\nstatic reduce(args)\n```", "```py\nclass sympy.series.sequences.SeqMul(*args, **kwargs)\n```", "```py\n>>> from sympy import EmptySequence, oo, SeqMul, SeqPer, SeqFormula\n>>> from sympy.abc import n\n>>> SeqMul(SeqPer((1, 2), (n, 0, oo)), EmptySequence)\nEmptySequence\n>>> SeqMul(SeqPer((1, 2), (n, 0, 5)), SeqPer((1, 2), (n, 6, 10)))\nEmptySequence\n>>> SeqMul(SeqPer((1, 2), (n, 0, oo)), SeqFormula(n**2))\nSeqMul(SeqFormula(n**2, (n, 0, oo)), SeqPer((1, 2), (n, 0, oo)))\n>>> SeqMul(SeqFormula(n**3), SeqFormula(n**2))\nSeqFormula(n**5, (n, 0, oo)) \n```", "```py\nstatic reduce(args)\n```", "```py\nclass sympy.series.sequences.RecursiveSeq(recurrence, yn, n, initial=None, start=0)\n```", "```py\n>>> from sympy import Function, symbols\n>>> from sympy.series.sequences import RecursiveSeq\n>>> y = Function(\"y\")\n>>> n = symbols(\"n\")\n>>> fib = RecursiveSeq(y(n - 1) + y(n - 2), y(n), n, [0, 1]) \n```", "```py\n>>> fib.coeff(3) # Value at a particular point\n2 \n```", "```py\n>>> fib[:6] # supports slicing\n[0, 1, 1, 2, 3, 5] \n```", "```py\n>>> fib.recurrence # inspect recurrence\nEq(y(n), y(n - 2) + y(n - 1)) \n```", "```py\n>>> fib.degree # automatically determine degree\n2 \n```", "```py\n>>> for x in zip(range(10), fib): # supports iteration\n...     print(x)\n(0, 0)\n(1, 1)\n(2, 1)\n(3, 2)\n(4, 3)\n(5, 5)\n(6, 8)\n(7, 13)\n(8, 21)\n(9, 34) \n```", "```py\nproperty initial\n```", "```py\nproperty interval\n```", "```py\nproperty n\n```", "```py\nproperty recurrence\n```", "```py\nproperty start\n```", "```py\nproperty stop\n```", "```py\nproperty y\n```", "```py\nproperty yn\n```"]