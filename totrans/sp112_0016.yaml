- en: File IO (scipy.io)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/io.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/io.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy IO routines](https://www.numpy.org/devdocs/reference/routines.io.html)'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`loadmat`](../reference/generated/scipy.io.loadmat.html#scipy.io.loadmat
    "scipy.io.loadmat")(file_name[, mdict, appendmat]) | Load MATLAB file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savemat`](../reference/generated/scipy.io.savemat.html#scipy.io.savemat
    "scipy.io.savemat")(file_name, mdict[, appendmat, ...]) | Save a dictionary of
    names and arrays into a MATLAB-style .mat file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`whosmat`](../reference/generated/scipy.io.whosmat.html#scipy.io.whosmat
    "scipy.io.whosmat")(file_name[, appendmat]) | List variables inside a MATLAB file.
    |'
  prefs: []
  type: TYPE_TB
- en: The basic functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ll start by importing [`scipy.io`](../reference/io.html#module-scipy.io
    "scipy.io") and calling it `sio` for convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using IPython, try tab-completing on `sio`. Among the many options,
    you will find:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the high-level functions you will most likely use when working with
    MATLAB files. You’ll also find:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the package from which `loadmat`, `savemat`, and `whosmat` are imported.
    Within `sio.matlab`, you will find the `mio` module This module contains the machinery
    that `loadmat` and `savemat` use. From time to time you may find yourself re-using
    this machinery.
  prefs: []
  type: TYPE_NORMAL
- en: How do I start?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have a `.mat` file that you want to read into SciPy. Or, you want to
    pass some variables from SciPy / NumPy into MATLAB.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save us using a MATLAB license, let’s start in [Octave](https://www.gnu.org/software/octave).
    Octave has MATLAB-compatible save and load functions. Start Octave (`octave` at
    the command line for me):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s try the other way round:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then back to Octave:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to inspect the contents of a MATLAB file without reading the data
    into memory, use the `whosmat` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`whosmat` returns a list of tuples, one for each array (or other object) in
    the file. Each tuple contains the name, shape and data type of the array.'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB structs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MATLAB structs are a little bit like Python dicts, except the field names must
    be strings. Any MATLAB object can be a value of a field. As for all objects in
    MATLAB, structs are, in fact, arrays of structs, where a single struct is an array
    of shape (1, 1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can load this in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the SciPy versions from 0.12.0, MATLAB structs come back as NumPy structured
    arrays, with fields named for the struct fields. You can see the field names in
    the `dtype` output above. Note also:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'and:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So, in MATLAB, the struct array must be at least 2-D, and we replicate that
    when we read into SciPy. If you want all length 1 dimensions squeezed out, try
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, it’s more convenient to load the MATLAB structs as Python objects
    rather than NumPy structured arrays - it can make the access syntax in Python
    a bit more similar to that in MATLAB. In order to do this, use the `struct_as_record=False`
    parameter setting to `loadmat`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`struct_as_record=False` works nicely with `squeeze_me`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Saving struct arrays can be done in various ways. One simple method is to use
    dicts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'loaded as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also save structs back again to MATLAB (or Octave in our case) like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: MATLAB cell arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cell arrays in MATLAB are rather like Python lists, in the sense that the elements
    in the arrays can contain any type of MATLAB object. In fact, they are most similar
    to NumPy object arrays, and that is how we load them into NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Back to Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Saving to a MATLAB cell array just involves making a NumPy object array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: IDL files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`readsav`](../reference/generated/scipy.io.readsav.html#scipy.io.readsav
    "scipy.io.readsav")(file_name[, idict, python_dict, ...]) | Read an IDL .sav file.
    |'
  prefs: []
  type: TYPE_TB
- en: Matrix Market files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`mminfo`](../reference/generated/scipy.io.mminfo.html#scipy.io.mminfo "scipy.io.mminfo")(source)
    | Return size and storage parameters from Matrix Market file-like ''source''.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mmread`](../reference/generated/scipy.io.mmread.html#scipy.io.mmread "scipy.io.mmread")(source)
    | Reads the contents of a Matrix Market file-like ''source'' into a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mmwrite`](../reference/generated/scipy.io.mmwrite.html#scipy.io.mmwrite
    "scipy.io.mmwrite")(target, a[, comment, field, ...]) | Writes the sparse or dense
    array *a* to Matrix Market file-like *target*. |'
  prefs: []
  type: TYPE_TB
- en: Wav sound files ([`scipy.io.wavfile`](../reference/io.html#module-scipy.io.wavfile
    "scipy.io.wavfile"))
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`read`](../reference/generated/scipy.io.wavfile.read.html#scipy.io.wavfile.read
    "scipy.io.wavfile.read")(filename[, mmap]) | Open a WAV file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write`](../reference/generated/scipy.io.wavfile.write.html#scipy.io.wavfile.write
    "scipy.io.wavfile.write")(filename, rate, data) | Write a NumPy array as a WAV
    file. |'
  prefs: []
  type: TYPE_TB
- en: Arff files ([`scipy.io.arff`](../reference/io.html#module-scipy.io.arff "scipy.io.arff"))
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`loadarff`](../reference/generated/scipy.io.arff.loadarff.html#scipy.io.arff.loadarff
    "scipy.io.arff.loadarff")(f) | Read an arff file. |'
  prefs: []
  type: TYPE_TB
- en: Netcdf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`netcdf_file`](../reference/generated/scipy.io.netcdf_file.html#scipy.io.netcdf_file
    "scipy.io.netcdf_file")(filename[, mode, mmap, version, ...]) | A file object
    for NetCDF data. |'
  prefs: []
  type: TYPE_TB
- en: Allows reading of NetCDF files (version of [pupynere](https://pypi.org/project/pupynere/)
    package)
  prefs: []
  type: TYPE_NORMAL
