- en: scipy.interpolate.BSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BSpline.html#scipy.interpolate.BSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.BSpline.html#scipy.interpolate.BSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Univariate spline in the B-spline basis.
  prefs: []
  type: TYPE_NORMAL
- en: \[S(x) = \sum_{j=0}^{n-1} c_j B_{j, k; t}(x)\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(B_{j, k; t}\) are B-spline basis functions of degree *k* and knots *t*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**ndarray, shape (n+k+1,)'
  prefs: []
  type: TYPE_NORMAL
- en: knots
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray, shape (>=n, …)'
  prefs: []
  type: TYPE_NORMAL
- en: spline coefficients
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int'
  prefs: []
  type: TYPE_NORMAL
- en: B-spline degree
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**bool or ‘periodic’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: whether to extrapolate beyond the base interval, `t[k] .. t[n]`, or to return
    nans. If True, extrapolates the first and last polynomial pieces of b-spline functions
    active on the base interval. If ‘periodic’, periodic extrapolation is used. Default
    is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis. Default is zero.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: B-spline basis elements are defined via
  prefs: []
  type: TYPE_NORMAL
- en: \[ \begin{align}\begin{aligned}B_{i, 0}(x) = 1, \textrm{if $t_i \le x < t_{i+1}$,
    otherwise $0$,}\\B_{i, k}(x) = \frac{x - t_i}{t_{i+k} - t_i} B_{i, k-1}(x) + \frac{t_{i+k+1}
    - x}{t_{i+k+1} - t_{i+1}} B_{i+1, k-1}(x)\end{aligned}\end{align} \]
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementation details**'
  prefs: []
  type: TYPE_NORMAL
- en: At least `k+1` coefficients are required for a spline of degree *k*, so that
    `n >= k+1`. Additional coefficients, `c[j]` with `j > n`, are ignored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B-spline basis elements of degree *k* form a partition of unity on the *base
    interval*, `t[k] <= x <= t[n]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Tom Lyche and Knut Morken, Spline methods, [http://www.uio.no/studier/emner/matnat/ifi/INF-MAT5340/v05/undervisningsmateriale/](http://www.uio.no/studier/emner/matnat/ifi/INF-MAT5340/v05/undervisningsmateriale/)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Carl de Boor, A practical guide to splines, Springer, 2001.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Translating the recursive definition of B-splines into Python code, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is an inefficient (if straightforward) way to evaluate B-splines
    — this spline class does it in an equivalent, but much more efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we construct a quadratic spline function on the base interval `2 <= x
    <= 4` and compare with the naive way of evaluating the spline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that outside of the base interval results differ. This is because [`BSpline`](#scipy.interpolate.BSpline
    "scipy.interpolate.BSpline") extrapolates the first and last polynomial pieces
    of B-spline functions active on the base interval.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-BSpline-1.png](../Images/35974de5d7329021d7c0ef09e2988db7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: knot vector
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: spline coefficients
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int'
  prefs: []
  type: TYPE_NORMAL
- en: spline degree
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, extrapolates the first and last polynomial pieces of b-spline functions
    active on the base interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tck`](scipy.interpolate.BSpline.tck.html#scipy.interpolate.BSpline.tck "scipy.interpolate.BSpline.tck")tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `(self.t, self.c, self.k)` (read-only).
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.BSpline.__call__.html#scipy.interpolate.BSpline.__call__
    "scipy.interpolate.BSpline.__call__")(x[, nu, extrapolate]) | Evaluate a spline
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`basis_element`](scipy.interpolate.BSpline.basis_element.html#scipy.interpolate.BSpline.basis_element
    "scipy.interpolate.BSpline.basis_element")(t[, extrapolate]) | Return a B-spline
    basis element `B(x &#124; t[0], ..., t[k+1])`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.BSpline.derivative.html#scipy.interpolate.BSpline.derivative
    "scipy.interpolate.BSpline.derivative")([nu]) | Return a B-spline representing
    the derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.BSpline.antiderivative.html#scipy.interpolate.BSpline.antiderivative
    "scipy.interpolate.BSpline.antiderivative")([nu]) | Return a B-spline representing
    the antiderivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.interpolate.BSpline.integrate.html#scipy.interpolate.BSpline.integrate
    "scipy.interpolate.BSpline.integrate")(a, b[, extrapolate]) | Compute a definite
    integral of the spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`construct_fast`](scipy.interpolate.BSpline.construct_fast.html#scipy.interpolate.BSpline.construct_fast
    "scipy.interpolate.BSpline.construct_fast")(t, c, k[, extrapolate, axis]) | Construct
    a spline without making checks. |'
  prefs: []
  type: TYPE_TB
- en: '| [`design_matrix`](scipy.interpolate.BSpline.design_matrix.html#scipy.interpolate.BSpline.design_matrix
    "scipy.interpolate.BSpline.design_matrix")(x, t, k[, extrapolate]) | Returns a
    design matrix as a CSR format sparse array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_power_basis`](scipy.interpolate.BSpline.from_power_basis.html#scipy.interpolate.BSpline.from_power_basis
    "scipy.interpolate.BSpline.from_power_basis")(pp[, bc_type]) | Construct a polynomial
    in the B-spline basis from a piecewise polynomial in the power basis. |'
  prefs: []
  type: TYPE_TB
