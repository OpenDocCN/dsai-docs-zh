- en: pandas.DataFrame.fillna
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Fill NA/NaN values using the specified method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value**scalar, dict, Series, or DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Value to use to fill holes (e.g. 0), alternately a dict/Series/DataFrame of
    values specifying which value to use for each index (for a Series) or column (for
    a DataFrame). Values not in the dict/Series/DataFrame will not be filled. This
    value cannot be a list.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{‘backfill’, ‘bfill’, ‘ffill’, None}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Method to use for filling holes in reindexed Series:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ffill: propagate last valid observation forward to next valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'backfill / bfill: use next valid observation to fill gap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.1.0: Use ffill or bfill instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’} for Series, {0 or ‘index’, 1 or ‘columns’} for DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which to fill missing values. For Series this parameter is unused
    and defaults to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: 'If True, fill in-place. Note: this will modify any other views on this object
    (e.g., a no-copy slice for a column in a DataFrame).'
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: If method is specified, this is the maximum number of consecutive NaN values
    to forward/backward fill. In other words, if there is a gap with more than this
    number of consecutive NaNs, it will only be partially filled. If method is not
    specified, this is the maximum number of entries along the entire axis where NaNs
    will be filled. Must be greater than 0 if not None.
  prefs: []
  type: TYPE_NORMAL
- en: '**downcast**dict, default is None'
  prefs: []
  type: TYPE_NORMAL
- en: A dict of item->dtype of what to downcast if possible, or the string ‘infer’
    which will try to downcast to an appropriate equal type (e.g. float64 to int64
    if possible).
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series/DataFrame or None
  prefs: []
  type: TYPE_NORMAL
- en: Object with missing values filled or None if `inplace=True`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ffill`](pandas.DataFrame.ffill.html#pandas.DataFrame.ffill "pandas.DataFrame.ffill")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill values by propagating the last valid observation to next valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[`bfill`](pandas.DataFrame.bfill.html#pandas.DataFrame.bfill "pandas.DataFrame.bfill")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill values by using the next valid observation to fill the gap.
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpolate`](pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill NaN values using interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`reindex`](pandas.DataFrame.reindex.html#pandas.DataFrame.reindex "pandas.DataFrame.reindex")'
  prefs: []
  type: TYPE_NORMAL
- en: Conform object to new index.
  prefs: []
  type: TYPE_NORMAL
- en: '[`asfreq`](pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq "pandas.DataFrame.asfreq")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert TimeSeries to specified frequency.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace all NaN elements with 0s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Replace all NaN elements in column ‘A’, ‘B’, ‘C’, and ‘D’, with 0, 1, 2, and
    3 respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Only replace the first NaN element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When filling using a DataFrame, replacement happens along the same column names
    and same indices
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that column D is not affected since it is not present in df2.
  prefs: []
  type: TYPE_NORMAL
