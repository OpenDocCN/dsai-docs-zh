- en: numpy.mask_indices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.mask_indices.html](https://numpy.org/doc/1.26/reference/generated/numpy.mask_indices.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the indices to access (n, n) arrays, given a masking function.
  prefs: []
  type: TYPE_NORMAL
- en: Assume *mask_func* is a function that, for a square array a of size `(n, n)`
    with a possible offset argument *k*, when called as `mask_func(a, k)` returns
    a new array with zeros in certain locations (functions like [`triu`](numpy.triu.html#numpy.triu
    "numpy.triu") or [`tril`](numpy.tril.html#numpy.tril "numpy.tril") do precisely
    this). Then this function returns the indices where the non-zero values would
    be located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: The returned indices will be valid to access arrays of shape (n, n).
  prefs: []
  type: TYPE_NORMAL
- en: '**mask_func**callable'
  prefs: []
  type: TYPE_NORMAL
- en: A function whose call signature is similar to that of [`triu`](numpy.triu.html#numpy.triu
    "numpy.triu"), [`tril`](numpy.tril.html#numpy.tril "numpy.tril"). That is, `mask_func(x,
    k)` returns a boolean array, shaped like *x*. *k* is an optional argument to the
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: An optional argument which is passed through to *mask_func*. Functions like
    [`triu`](numpy.triu.html#numpy.triu "numpy.triu"), [`tril`](numpy.tril.html#numpy.tril
    "numpy.tril") take a second argument that is interpreted as an offset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**tuple of arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: The *n* arrays of indices corresponding to the locations where `mask_func(np.ones((n,
    n)), k)` is True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`triu`](numpy.triu.html#numpy.triu "numpy.triu"), [`tril`](numpy.tril.html#numpy.tril
    "numpy.tril"), [`triu_indices`](numpy.triu_indices.html#numpy.triu_indices "numpy.triu_indices"),
    [`tril_indices`](numpy.tril_indices.html#numpy.tril_indices "numpy.tril_indices")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the indices that would allow you to access the upper triangular part
    of any 3x3 array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if *a* is a 3x3 array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An offset can be passed also to the masking function. This gets us the indices
    starting on the first diagonal right of the main one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'with which we now extract only three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
