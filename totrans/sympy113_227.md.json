["```py\nclass sympy.physics.optics.gaussopt.BeamParameter(wavelen, z, z_r=None, w=None, n=1)\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.q\n1 + 1.88679245283019*I*pi \n```", "```py\n>>> p.q.n()\n1.0 + 5.92753330865999*I\n>>> p.w_0.n()\n0.00100000000000000\n>>> p.z_r.n()\n5.92753330865999 \n```", "```py\n>>> from sympy.physics.optics import FreeSpace\n>>> fs = FreeSpace(10)\n>>> p1 = fs*p\n>>> p.w.n()\n0.00101413072159615\n>>> p1.w.n()\n0.00210803120913829 \n```", "```py\nproperty divergence\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.divergence\n0.00053/pi \n```", "```py\nproperty gouy\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.gouy\natan(0.53/pi) \n```", "```py\nproperty q\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.q\n1 + 1.88679245283019*I*pi \n```", "```py\nproperty radius\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.radius\n1 + 3.55998576005696*pi**2 \n```", "```py\nproperty w\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.w\n0.001*sqrt(0.2809/pi**2 + 1) \n```", "```py\nproperty w_0\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.w_0\n0.00100000000000000 \n```", "```py\nproperty waist_approximation_limit\n```", "```py\n>>> from sympy.physics.optics import BeamParameter\n>>> p = BeamParameter(530e-9, 1, w=1e-3)\n>>> p.waist_approximation_limit\n1.06e-6/pi \n```", "```py\nclass sympy.physics.optics.gaussopt.CurvedMirror(R)\n```", "```py\n>>> from sympy.physics.optics import CurvedMirror\n>>> from sympy import symbols\n>>> R = symbols('R')\n>>> CurvedMirror(R)\nMatrix([\n[   1, 0],\n[-2/R, 1]]) \n```", "```py\nclass sympy.physics.optics.gaussopt.CurvedRefraction(R, n1, n2)\n```", "```py\n>>> from sympy.physics.optics import CurvedRefraction\n>>> from sympy import symbols\n>>> R, n1, n2 = symbols('R n1 n2')\n>>> CurvedRefraction(R, n1, n2)\nMatrix([\n[               1,     0],\n[(n1 - n2)/(R*n2), n1/n2]]) \n```", "```py\nclass sympy.physics.optics.gaussopt.FlatMirror\n```", "```py\n>>> from sympy.physics.optics import FlatMirror\n>>> FlatMirror()\nMatrix([\n[1, 0],\n[0, 1]]) \n```", "```py\nclass sympy.physics.optics.gaussopt.FlatRefraction(n1, n2)\n```", "```py\n>>> from sympy.physics.optics import FlatRefraction\n>>> from sympy import symbols\n>>> n1, n2 = symbols('n1 n2')\n>>> FlatRefraction(n1, n2)\nMatrix([\n[1,     0],\n[0, n1/n2]]) \n```", "```py\nclass sympy.physics.optics.gaussopt.FreeSpace(d)\n```", "```py\n>>> from sympy.physics.optics import FreeSpace\n>>> from sympy import symbols\n>>> d = symbols('d')\n>>> FreeSpace(d)\nMatrix([\n[1, d],\n[0, 1]]) \n```", "```py\nclass sympy.physics.optics.gaussopt.GeometricRay(*args)\n```", "```py\n>>> from sympy.physics.optics import GeometricRay, FreeSpace\n>>> from sympy import symbols, Matrix\n>>> d, h, angle = symbols('d, h, angle') \n```", "```py\n>>> GeometricRay(h, angle)\nMatrix([\n[    h],\n[angle]]) \n```", "```py\n>>> FreeSpace(d)*GeometricRay(h, angle)\nMatrix([\n[angle*d + h],\n[      angle]]) \n```", "```py\n>>> GeometricRay( Matrix( ((h,), (angle,)) ) )\nMatrix([\n[    h],\n[angle]]) \n```", "```py\nproperty angle\n```", "```py\n>>> from sympy.physics.optics import GeometricRay\n>>> from sympy import symbols\n>>> h, angle = symbols('h, angle')\n>>> gRay = GeometricRay(h, angle)\n>>> gRay.angle\nangle \n```", "```py\nproperty height\n```", "```py\n>>> from sympy.physics.optics import GeometricRay\n>>> from sympy import symbols\n>>> h, angle = symbols('h, angle')\n>>> gRay = GeometricRay(h, angle)\n>>> gRay.height\nh \n```", "```py\nclass sympy.physics.optics.gaussopt.RayTransferMatrix(*args)\n```", "```py\n>>> from sympy.physics.optics import RayTransferMatrix, ThinLens\n>>> from sympy import Symbol, Matrix \n```", "```py\n>>> mat = RayTransferMatrix(1, 2, 3, 4)\n>>> mat\nMatrix([\n[1, 2],\n[3, 4]]) \n```", "```py\n>>> RayTransferMatrix(Matrix([[1, 2], [3, 4]]))\nMatrix([\n[1, 2],\n[3, 4]]) \n```", "```py\n>>> mat.A\n1 \n```", "```py\n>>> f = Symbol('f')\n>>> lens = ThinLens(f)\n>>> lens\nMatrix([\n[   1, 0],\n[-1/f, 1]]) \n```", "```py\n>>> lens.C\n-1/f \n```", "```py\nproperty A\n```", "```py\n>>> from sympy.physics.optics import RayTransferMatrix\n>>> mat = RayTransferMatrix(1, 2, 3, 4)\n>>> mat.A\n1 \n```", "```py\nproperty B\n```", "```py\n>>> from sympy.physics.optics import RayTransferMatrix\n>>> mat = RayTransferMatrix(1, 2, 3, 4)\n>>> mat.B\n2 \n```", "```py\nproperty C\n```", "```py\n>>> from sympy.physics.optics import RayTransferMatrix\n>>> mat = RayTransferMatrix(1, 2, 3, 4)\n>>> mat.C\n3 \n```", "```py\nproperty D\n```", "```py\n>>> from sympy.physics.optics import RayTransferMatrix\n>>> mat = RayTransferMatrix(1, 2, 3, 4)\n>>> mat.D\n4 \n```", "```py\nclass sympy.physics.optics.gaussopt.ThinLens(f)\n```", "```py\n>>> from sympy.physics.optics import ThinLens\n>>> from sympy import symbols\n>>> f = symbols('f')\n>>> ThinLens(f)\nMatrix([\n[   1, 0],\n[-1/f, 1]]) \n```", "```py\nsympy.physics.optics.gaussopt.conjugate_gauss_beams(wavelen, waist_in, waist_out, **kwargs)\n```", "```py\n>>> from sympy.physics.optics import conjugate_gauss_beams\n>>> from sympy import symbols, factor\n>>> l, w_i, w_o, f = symbols('l w_i w_o f') \n```", "```py\n>>> conjugate_gauss_beams(l, w_i, w_o, f=f)[0]\nf*(1 - sqrt(w_i**2/w_o**2 - pi**2*w_i**4/(f**2*l**2))) \n```", "```py\n>>> factor(conjugate_gauss_beams(l, w_i, w_o, f=f)[1])\nf*w_o**2*(w_i**2/w_o**2 - sqrt(w_i**2/w_o**2 -\n pi**2*w_i**4/(f**2*l**2)))/w_i**2 \n```", "```py\n>>> conjugate_gauss_beams(l, w_i, w_o, f=f)[2]\nf \n```", "```py\nsympy.physics.optics.gaussopt.gaussian_conj(s_in, z_r_in, f)\n```", "```py\n>>> from sympy.physics.optics import gaussian_conj\n>>> from sympy import symbols\n>>> s_in, z_r_in, f = symbols('s_in z_r_in f') \n```", "```py\n>>> gaussian_conj(s_in, z_r_in, f)[0]\n1/(-1/(s_in + z_r_in**2/(-f + s_in)) + 1/f) \n```", "```py\n>>> gaussian_conj(s_in, z_r_in, f)[1]\nz_r_in/(1 - s_in**2/f**2 + z_r_in**2/f**2) \n```", "```py\n>>> gaussian_conj(s_in, z_r_in, f)[2]\n1/sqrt(1 - s_in**2/f**2 + z_r_in**2/f**2) \n```", "```py\nsympy.physics.optics.gaussopt.geometric_conj_ab(a, b)\n```", "```py\n>>> from sympy.physics.optics import geometric_conj_ab\n>>> from sympy import symbols\n>>> a, b = symbols('a b')\n>>> geometric_conj_ab(a, b)\na*b/(a + b) \n```", "```py\nsympy.physics.optics.gaussopt.geometric_conj_af(a, f)\n```", "```py\n>>> from sympy.physics.optics.gaussopt import geometric_conj_af, geometric_conj_bf\n>>> from sympy import symbols\n>>> a, b, f = symbols('a b f')\n>>> geometric_conj_af(a, f)\na*f/(a - f)\n>>> geometric_conj_bf(b, f)\nb*f/(b - f) \n```", "```py\nsympy.physics.optics.gaussopt.geometric_conj_bf(a, f)\n```", "```py\n>>> from sympy.physics.optics.gaussopt import geometric_conj_af, geometric_conj_bf\n>>> from sympy import symbols\n>>> a, b, f = symbols('a b f')\n>>> geometric_conj_af(a, f)\na*f/(a - f)\n>>> geometric_conj_bf(b, f)\nb*f/(b - f) \n```", "```py\nsympy.physics.optics.gaussopt.rayleigh2waist(z_r, wavelen)\n```", "```py\n>>> from sympy.physics.optics import rayleigh2waist\n>>> from sympy import symbols\n>>> z_r, wavelen = symbols('z_r wavelen')\n>>> rayleigh2waist(z_r, wavelen)\nsqrt(wavelen*z_r)/sqrt(pi) \n```", "```py\nsympy.physics.optics.gaussopt.waist2rayleigh(w, wavelen, n=1)\n```", "```py\n>>> from sympy.physics.optics import waist2rayleigh\n>>> from sympy import symbols\n>>> w, wavelen = symbols('w wavelen')\n>>> waist2rayleigh(w, wavelen)\npi*w**2/wavelen \n```"]