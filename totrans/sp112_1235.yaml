- en: scipy.stats.betanbinom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.betanbinom.html#scipy.stats.betanbinom](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.betanbinom.html#scipy.stats.betanbinom)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A beta-negative-binomial discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`betanbinom`](#scipy.stats.betanbinom "scipy.stats.betanbinom")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`betabinom`](scipy.stats.betabinom.html#scipy.stats.betabinom "scipy.stats.betabinom")'
  prefs: []
  type: TYPE_NORMAL
- en: Beta binomial distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The beta-negative-binomial distribution is a negative binomial distribution
    with a probability of success *p* that follows a beta distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability mass function for [`betanbinom`](#scipy.stats.betanbinom "scipy.stats.betanbinom")
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k) = \binom{n + k - 1}{k} \frac{B(a + n, b + k)}{B(a, b)}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(k \ge 0\), \(n \geq 0\), \(a > 0\), \(b > 0\), where \(B(a, b)\) is the
    beta function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`betanbinom`](#scipy.stats.betanbinom "scipy.stats.betanbinom") takes \(n\),
    \(a\), and \(b\) as shape parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Beta_negative_binomial_distribution](https://en.wikipedia.org/wiki/Beta_negative_binomial_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `betanbinom.pmf(k, n,
    a, b, loc)` is identically equivalent to `betanbinom.pmf(k - loc, n, a, b)`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-betanbinom-1_00_00.png](../Images/eb4c67d225d2ff1dc56e6d4365667a73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(n, a, b, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, n, a, b, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, n, a, b, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, n, a, b, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, n, a, b, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, n, a, b, loc=0)** | Survival function (also defined as `1 - cdf`,
    but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, n, a, b, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, n, a, b, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, n, a, b, loc=0)** | Inverse survival function (inverse of `sf`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(n, a, b, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(n, a, b, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(n, a, b), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(n, a, b, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(n, a, b, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(n, a, b, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(n, a, b, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, n, a, b, loc=0)** | Confidence interval with equal
    areas around the median. |'
  prefs: []
  type: TYPE_TB
