- en: scipy.special.jve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.jve.html#scipy.special.jve](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.jve.html#scipy.special.jve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Exponentially scaled Bessel function of the first kind of order *v*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Order (float).
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Argument (float or complex).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function values
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**J**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Value of the exponentially scaled Bessel function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jv`](scipy.special.jv.html#scipy.special.jv "scipy.special.jv")'
  prefs: []
  type: TYPE_NORMAL
- en: Unscaled Bessel function of the first kind
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For positive *v* values, the computation is carried out using the AMOS [[1]](#r36ae789cf8a8-1)
    *zbesj* routine, which exploits the connection to the modified Bessel function
    \(I_v\),
  prefs: []
  type: TYPE_NORMAL
- en: \[ \begin{align}\begin{aligned}J_v(z) = \exp(v\pi\imath/2) I_v(-\imath z)\qquad
    (\Im z > 0)\\J_v(z) = \exp(-v\pi\imath/2) I_v(\imath z)\qquad (\Im z < 0)\end{aligned}\end{align}
    \]
  prefs: []
  type: TYPE_NORMAL
- en: For negative *v* values the formula,
  prefs: []
  type: TYPE_NORMAL
- en: \[J_{-v}(z) = J_v(z) \cos(\pi v) - Y_v(z) \sin(\pi v)\]
  prefs: []
  type: TYPE_NORMAL
- en: is used, where \(Y_v(z)\) is the Bessel function of the second kind, computed
    using the AMOS routine *zbesy*. Note that the second term is exactly zero for
    integer *v*; to improve accuracy the second term is explicitly omitted for *v*
    values such that *v = floor(v)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exponentially scaled Bessel functions are useful for large arguments *z*: for
    these, the unscaled Bessel functions can easily under-or overflow.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Donald E. Amos, “AMOS, A Portable Package for Bessel Functions of a Complex
    Argument and Nonnegative Order”, [http://netlib.org/amos/](http://netlib.org/amos/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the output of [`jv`](scipy.special.jv.html#scipy.special.jv "scipy.special.jv")
    and [`jve`](#scipy.special.jve "scipy.special.jve") for large complex arguments
    for *z* by computing their values for order `v=1` at `z=1000j`. We see that [`jv`](scipy.special.jv.html#scipy.special.jv
    "scipy.special.jv") overflows but [`jve`](#scipy.special.jve "scipy.special.jve")
    returns a finite number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For real arguments for *z*, [`jve`](#scipy.special.jve "scipy.special.jve")
    returns the same as [`jv`](scipy.special.jv.html#scipy.special.jv "scipy.special.jv").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The function can be evaluated for several orders at the same time by providing
    a list or NumPy array for *v*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, the function can be evaluated at several points in one call
    by providing a list or NumPy array for *z*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to evaluate several orders at several points at the same
    time by providing arrays for *v* and *z* with compatible shapes for broadcasting.
    Compute [`jve`](#scipy.special.jve "scipy.special.jve") for two different orders
    *v* and three points *z* resulting in a 2x3 array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
