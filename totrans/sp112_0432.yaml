- en: scipy.optimize.show_options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.show_options.html#scipy.optimize.show_options](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.show_options.html#scipy.optimize.show_options)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Show documentation for additional options of optimization solvers.
  prefs: []
  type: TYPE_NORMAL
- en: These are method-specific options that can be supplied through the `options`
    dict.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**solver**str'
  prefs: []
  type: TYPE_NORMAL
- en: Type of optimization solver. One of ‘minimize’, ‘minimize_scalar’, ‘root’, ‘root_scalar’,
    ‘linprog’, or ‘quadratic_assignment’.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If not given, shows all methods of the specified solver. Otherwise, show only
    the options for the specified method. Valid values corresponds to methods’ names
    of respective solver (e.g., ‘BFGS’ for ‘minimize’).
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to print the result rather than returning it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: text
  prefs: []
  type: TYPE_NORMAL
- en: Either None (for disp=True) or the text string (disp=False)
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The solver-specific methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Nelder-Mead](../optimize.minimize-neldermead.html#optimize-minimize-neldermead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Powell](../optimize.minimize-powell.html#optimize-minimize-powell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CG](../optimize.minimize-cg.html#optimize-minimize-cg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BFGS](../optimize.minimize-bfgs.html#optimize-minimize-bfgs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Newton-CG](../optimize.minimize-newtoncg.html#optimize-minimize-newtoncg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[L-BFGS-B](../optimize.minimize-lbfgsb.html#optimize-minimize-lbfgsb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TNC](../optimize.minimize-tnc.html#optimize-minimize-tnc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[COBYLA](../optimize.minimize-cobyla.html#optimize-minimize-cobyla)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SLSQP](../optimize.minimize-slsqp.html#optimize-minimize-slsqp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dogleg](../optimize.minimize-dogleg.html#optimize-minimize-dogleg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[trust-ncg](../optimize.minimize-trustncg.html#optimize-minimize-trustncg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.root`](scipy.optimize.root.html#scipy.optimize.root "scipy.optimize.root")'
  prefs: []
  type: TYPE_NORMAL
- en: '[hybr](../optimize.root-hybr.html#optimize-root-hybr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[lm](../optimize.root-lm.html#optimize-root-lm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[broyden1](../optimize.root-broyden1.html#optimize-root-broyden1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[broyden2](../optimize.root-broyden2.html#optimize-root-broyden2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[anderson](../optimize.root-anderson.html#optimize-root-anderson)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[linearmixing](../optimize.root-linearmixing.html#optimize-root-linearmixing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[diagbroyden](../optimize.root-diagbroyden.html#optimize-root-diagbroyden)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[excitingmixing](../optimize.root-excitingmixing.html#optimize-root-excitingmixing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[krylov](../optimize.root-krylov.html#optimize-root-krylov)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[df-sane](../optimize.root-dfsane.html#optimize-root-dfsane)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[brent](../optimize.minimize_scalar-brent.html#optimize-minimize-scalar-brent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[golden](../optimize.minimize_scalar-golden.html#optimize-minimize-scalar-golden)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[bounded](../optimize.minimize_scalar-bounded.html#optimize-minimize-scalar-bounded)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.root_scalar`](scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "scipy.optimize.root_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[bisect](../optimize.root_scalar-bisect.html#optimize-root-scalar-bisect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[brentq](../optimize.root_scalar-brentq.html#optimize-root-scalar-brentq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[brenth](../optimize.root_scalar-brenth.html#optimize-root-scalar-brenth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ridder](../optimize.root_scalar-ridder.html#optimize-root-scalar-ridder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[toms748](../optimize.root_scalar-toms748.html#optimize-root-scalar-toms748)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[newton](../optimize.root_scalar-newton.html#optimize-root-scalar-newton)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[secant](../optimize.root_scalar-secant.html#optimize-root-scalar-secant)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[halley](../optimize.root_scalar-halley.html#optimize-root-scalar-halley)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.linprog`](scipy.optimize.linprog.html#scipy.optimize.linprog
    "scipy.optimize.linprog")'
  prefs: []
  type: TYPE_NORMAL
- en: '[simplex](../optimize.linprog-simplex.html#optimize-linprog-simplex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[interior-point](../optimize.linprog-interior-point.html#optimize-linprog-interior-point)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[revised simplex](../optimize.linprog-revised_simplex.html#optimize-linprog-revised-simplex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[highs](../optimize.linprog-highs.html#optimize-linprog-highs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[highs-ds](../optimize.linprog-highs-ds.html#optimize-linprog-highs-ds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[highs-ipm](../optimize.linprog-highs-ipm.html#optimize-linprog-highs-ipm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`scipy.optimize.quadratic_assignment`](scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment
    "scipy.optimize.quadratic_assignment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[faq](../optimize.qap-faq.html#optimize-qap-faq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2opt](../optimize.qap-2opt.html#optimize-qap-2opt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We can print documentations of a solver in stdout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying a method is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also get the documentations as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
