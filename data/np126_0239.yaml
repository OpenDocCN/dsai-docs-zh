- en: numpy.lib.Arrayterator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.lib.Arrayterator
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.Arrayterator.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.Arrayterator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.Arrayterator.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.Arrayterator.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Buffered iterator for big arrays.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大数组的缓冲迭代器。
- en: '[`Arrayterator`](#numpy.lib.Arrayterator "numpy.lib.Arrayterator") creates
    a buffered iterator for reading big arrays in small contiguous blocks. The class
    is useful for objects stored in the file system. It allows iteration over the
    object *without* reading everything in memory; instead, small blocks are read
    and iterated over.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Arrayterator`](#numpy.lib.Arrayterator "numpy.lib.Arrayterator")创建一个缓冲迭代器，用于以小的连续块读取大数组。该类对存储在文件系统中的对象非常有用。它允许对对象进行迭代*而不是*读取所有内存；相反，将读取和迭代小块。'
- en: '[`Arrayterator`](#numpy.lib.Arrayterator "numpy.lib.Arrayterator") can be used
    with any object that supports multidimensional slices. This includes NumPy arrays,
    but also variables from Scientific.IO.NetCDF or pynetcdf for example.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Arrayterator`](#numpy.lib.Arrayterator "numpy.lib.Arrayterator")可以与支持多维切片的任何对象一起使用。这包括NumPy数组，也包括来自Scientific.IO.NetCDF或pynetcdf的变量等。'
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**var**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**var**array_like'
- en: The object to iterate over.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要迭代的对象。
- en: '**buf_size**int, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**buf_size**int, 可选'
- en: The buffer size. If *buf_size* is supplied, the maximum amount of data that
    will be read into memory is *buf_size* elements. Default is None, which will read
    as many element as possible into memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区大小。如果提供了*buf_size*，则将读取到内存的数据的最大数量是*buf_size*元素。默认为None，将尽可能多地读取元素到内存中。
- en: See also
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '`ndenumerate`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndenumerate`'
- en: Multidimensional array iterator.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组迭代器。
- en: '`flatiter`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatiter`'
- en: Flat array iterator.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 平面数组迭代器。
- en: '`memmap`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`memmap`'
- en: Create a memory-map to an array stored in a binary file on disk.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个映射到存储在磁盘上的二进制文件中的数组的内存映射。
- en: Notes
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The algorithm works by first finding a “running dimension”, along which the
    blocks will be extracted. Given an array of dimensions `(d1, d2, ..., dn)`, e.g.
    if *buf_size* is smaller than `d1`, the first dimension will be used. If, on the
    other hand, `d1 < buf_size < d1*d2` the second dimension will be used, and so
    on. Blocks are extracted along this dimension, and when the last block is returned
    the process continues from the next dimension, until all elements have been read.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法首先找到一个“运行维度”，沿着这个维度将提取块。给定一个维度数组`(d1, d2, ..., dn)`，例如如果*buf_size*小于`d1`，则将使用第一维。另一方面，如果`d1
    < buf_size < d1*d2`，则将使用第二维，依此类推。沿着这个维度提取块，并且当返回最后一个块时，该过程将从下一个维度继续进行，直到所有元素都被读取。
- en: Examples
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can iterate over `a_itor`, and it will return arrays of size two. Since
    *buf_size* was smaller than any dimension, the first dimension will be iterated
    over first:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以对`a_itor`进行迭代，它会返回大小为二的数组。由于*buf_size*比任何维度都小，首先将迭代第一维：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Attributes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**var**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**var**'
- en: '**buf_size**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**buf_size**'
- en: '**start**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**start**'
- en: '**stop**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**stop**'
- en: '**step**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**step**'
- en: '[`shape`](numpy.lib.Arrayterator.shape.html#numpy.lib.Arrayterator.shape "numpy.lib.Arrayterator.shape")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape`](numpy.lib.Arrayterator.shape.html#numpy.lib.Arrayterator.shape "numpy.lib.Arrayterator.shape")'
- en: The shape of the array to be iterated over.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要迭代的数组的形状。
- en: '[`flat`](numpy.lib.Arrayterator.flat.html#numpy.lib.Arrayterator.flat "numpy.lib.Arrayterator.flat")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flat`](numpy.lib.Arrayterator.flat.html#numpy.lib.Arrayterator.flat "numpy.lib.Arrayterator.flat")'
- en: A 1-D flat iterator for Arrayterator objects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Arrayterator对象的一维平面迭代器。
