["```py\n>>> f32 = np.float32([1, 2])\n>>> np.linalg.norm(f32, 2).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 3)\ndtype('float64')  # numpy 1.22\ndtype('float32')  # numpy 1.23 \n```", "```py\n>>> np.result_type(np.dtype(\"i,i\"), np.dtype(\"i,d\"))\ndtype([('f0', '<i4'), ('f1', '<f8')]) \n```", "```py\nimport itertools\nlines = itertools.islice(open(\"file\"), 0, max_rows)\nresult = np.loadtxt(lines, ...) \n```", "```py\n>>> x = ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])\n>>> np.kron(x,x)\nmasked_array(\n data=[[1, --, --, --],\n [--, 4, --, --],\n [--, --, 4, --],\n [--, --, --, 16]],\n mask=[[False,  True,  True,  True],\n [ True, False,  True,  True],\n [ True,  True, False,  True],\n [ True,  True,  True, False]],\n fill_value=999999) \n```", "```py\n>>> class myarr(np.ndarray):\n>>>    __array_priority__ = -1\n>>> a = np.ones([2, 2])\n>>> ma = myarray(a.shape, a.dtype, a.data)\n>>> type(np.kron(a, ma)) == np.ndarray\nFalse # Before it was True\n>>> type(np.kron(a, ma)) == myarr\nTrue \n```", "```py\n>>> f32 = np.float32([1, 2])\n>>> np.linalg.norm(f32, 2).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 3)\ndtype('float64')  # numpy 1.22\ndtype('float32')  # numpy 1.23 \n```", "```py\n>>> np.result_type(np.dtype(\"i,i\"), np.dtype(\"i,d\"))\ndtype([('f0', '<i4'), ('f1', '<f8')]) \n```", "```py\nimport itertools\nlines = itertools.islice(open(\"file\"), 0, max_rows)\nresult = np.loadtxt(lines, ...) \n```", "```py\n>>> f32 = np.float32([1, 2])\n>>> np.linalg.norm(f32, 2).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 3)\ndtype('float64')  # numpy 1.22\ndtype('float32')  # numpy 1.23 \n```", "```py\n>>> np.result_type(np.dtype(\"i,i\"), np.dtype(\"i,d\"))\ndtype([('f0', '<i4'), ('f1', '<f8')]) \n```", "```py\nimport itertools\nlines = itertools.islice(open(\"file\"), 0, max_rows)\nresult = np.loadtxt(lines, ...) \n```", "```py\n>>> x = ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])\n>>> np.kron(x,x)\nmasked_array(\n data=[[1, --, --, --],\n [--, 4, --, --],\n [--, --, 4, --],\n [--, --, --, 16]],\n mask=[[False,  True,  True,  True],\n [ True, False,  True,  True],\n [ True,  True, False,  True],\n [ True,  True,  True, False]],\n fill_value=999999) \n```", "```py\n>>> class myarr(np.ndarray):\n>>>    __array_priority__ = -1\n>>> a = np.ones([2, 2])\n>>> ma = myarray(a.shape, a.dtype, a.data)\n>>> type(np.kron(a, ma)) == np.ndarray\nFalse # Before it was True\n>>> type(np.kron(a, ma)) == myarr\nTrue \n```", "```py\n>>> x = ma.array([[1, 2], [3, 4]], mask=[[0, 1], [1, 0]])\n>>> np.kron(x,x)\nmasked_array(\n data=[[1, --, --, --],\n [--, 4, --, --],\n [--, --, 4, --],\n [--, --, --, 16]],\n mask=[[False,  True,  True,  True],\n [ True, False,  True,  True],\n [ True,  True, False,  True],\n [ True,  True,  True, False]],\n fill_value=999999) \n```", "```py\n>>> class myarr(np.ndarray):\n>>>    __array_priority__ = -1\n>>> a = np.ones([2, 2])\n>>> ma = myarray(a.shape, a.dtype, a.data)\n>>> type(np.kron(a, ma)) == np.ndarray\nFalse # Before it was True\n>>> type(np.kron(a, ma)) == myarr\nTrue \n```"]