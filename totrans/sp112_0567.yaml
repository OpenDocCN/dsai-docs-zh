- en: scipy.signal.residue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.residue.html#scipy.signal.residue](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.residue.html#scipy.signal.residue)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute partial-fraction expansion of b(s) / a(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'If *M* is the degree of numerator *b* and *N* the degree of denominator *a*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'then the partial-fraction expansion H(s) is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are any repeated roots (closer together than *tol*), then H(s) has
    terms like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This function is used for polynomials in positive powers of s or z, such as
    analog filters or digital filters in controls engineering. For negative powers
    of z (typical for digital filters in DSP), use [`residuez`](scipy.signal.residuez.html#scipy.signal.residuez
    "scipy.signal.residuez").
  prefs: []
  type: TYPE_NORMAL
- en: See Notes for details about the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Denominator polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The tolerance for two roots to be considered equal in terms of the distance
    between them. Default is 1e-3\. See [`unique_roots`](scipy.signal.unique_roots.html#scipy.signal.unique_roots
    "scipy.signal.unique_roots") for further details.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtype**{‘avg’, ‘min’, ‘max’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Method for computing a root to represent a group of identical roots. Default
    is ‘avg’. See [`unique_roots`](scipy.signal.unique_roots.html#scipy.signal.unique_roots
    "scipy.signal.unique_roots") for further details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Residues corresponding to the poles. For repeated poles, the residues are ordered
    to correspond to ascending by power fractions.
  prefs: []
  type: TYPE_NORMAL
- en: '**p**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Poles ordered by magnitude in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of the direct polynomial term.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`invres`](scipy.signal.invres.html#scipy.signal.invres "scipy.signal.invres"),
    [`residuez`](scipy.signal.residuez.html#scipy.signal.residuez "scipy.signal.residuez"),
    [`numpy.poly`](https://numpy.org/devdocs/reference/generated/numpy.poly.html#numpy.poly
    "(in NumPy v2.0.dev0)"), [`unique_roots`](scipy.signal.unique_roots.html#scipy.signal.unique_roots
    "scipy.signal.unique_roots")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The “deflation through subtraction” algorithm is used for computations — method
    6 in [[1]](#r89d3e1bcde29-1).
  prefs: []
  type: TYPE_NORMAL
- en: The form of partial fraction expansion depends on poles multiplicity in the
    exact mathematical sense. However there is no way to exactly determine multiplicity
    of roots of a polynomial in numerical computing. Thus you should think of the
    result of [`residue`](#scipy.signal.residue "scipy.signal.residue") with given
    *tol* as partial fraction expansion computed for the denominator composed of the
    computed poles with empirically determined multiplicity. The choice of *tol* can
    drastically change the result if there are close poles.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'J. F. Mahoney, B. D. Sivazlian, “Partial fractions expansion: a review of computational
    methodology and efficiency”, Journal of Computational and Applied Mathematics,
    Vol. 9, 1983.'
  prefs: []
  type: TYPE_NORMAL
