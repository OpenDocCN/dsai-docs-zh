- en: Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/plotting.html](https://docs.sympy.org/latest/modules/plotting.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Introduction'
  prefs: []
  type: TYPE_NORMAL
- en: The plotting module allows you to make 2-dimensional and 3-dimensional plots.
    Presently the plots are rendered using [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)") as a backend. It is also possible to plot 2-dimensional
    plots using a [`TextBackend`](#sympy.plotting.plot.TextBackend "sympy.plotting.plot.TextBackend")
    if you do not have [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)").
  prefs: []
  type: TYPE_NORMAL
- en: 'The plotting module has the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`plot()`](#sympy.plotting.plot.plot "sympy.plotting.plot.plot"): Plots 2D
    line plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plot_parametric()`](#sympy.plotting.plot.plot_parametric "sympy.plotting.plot.plot_parametric"):
    Plots 2D parametric plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plot_implicit()`](#sympy.plotting.plot_implicit.plot_implicit "sympy.plotting.plot_implicit.plot_implicit"):
    Plots 2D implicit and region plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plot3d()`](#sympy.plotting.plot.plot3d "sympy.plotting.plot.plot3d"): Plots
    3D plots of functions in two variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plot3d_parametric_line()`](#sympy.plotting.plot.plot3d_parametric_line "sympy.plotting.plot.plot3d_parametric_line"):
    Plots 3D line plots, defined by a parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`plot3d_parametric_surface()`](#sympy.plotting.plot.plot3d_parametric_surface
    "sympy.plotting.plot.plot3d_parametric_surface"): Plots 3D parametric surface
    plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The above functions are only for convenience and ease of use. It is possible
    to plot any plot by passing the corresponding `Series` class to [`Plot`](#sympy.plotting.plot.Plot
    "sympy.plotting.plot.Plot") as argument.
  prefs: []
  type: TYPE_NORMAL
- en: Plot Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Base class for all backends. A backend represents the plotting library, which
    implements the necessary functionalities in order to use SymPy plotting functions.
  prefs: []
  type: TYPE_NORMAL
- en: For interactive work the function [`plot()`](#sympy.plotting.plot.plot "sympy.plotting.plot.plot")
    is better suited.
  prefs: []
  type: TYPE_NORMAL
- en: This class permits the plotting of SymPy expressions using numerous backends
    ([`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib "(in
    Matplotlib v3.9.0)"), textplot, the old pyglet module for SymPy, Google charts
    api, etc).
  prefs: []
  type: TYPE_NORMAL
- en: The figure can contain an arbitrary number of plots of SymPy expressions, lists
    of coordinates of points, etc. Plot has a private attribute _series that contains
    all data series to be plotted (expressions for lines or surfaces, lists of points,
    etc (all subclasses of BaseSeries)). Those data series are instances of classes
    not imported by `from sympy import *`.
  prefs: []
  type: TYPE_NORMAL
- en: The customization of the figure is on two levels. Global options that concern
    the figure as a whole (e.g. title, xlabel, scale, etc) and per-data series options
    (e.g. name) and aesthetics (e.g. color, point shape, line type, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between options and aesthetics is that an aesthetic can be a
    function of the coordinates (or parameters in a parametric plot). The supported
    values for an aesthetic are:'
  prefs: []
  type: TYPE_NORMAL
- en: None (the backend uses default values)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function of one variable (the first coordinate or parameter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function of two variables (the first and second coordinate or parameters)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a function of three variables (only in nonparametric 3D plots)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Their implementation depends on the backend so they may not work in some backends.
  prefs: []
  type: TYPE_NORMAL
- en: If the plot is parametric and the arity of the aesthetic function permits it
    the aesthetic is calculated over parameters and not over coordinates. If the arity
    does not permit calculation over parameters the calculation is done over coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Only cartesian coordinates are supported for the moment, but you can use the
    parametric plots to plot in polar, spherical and cylindrical coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments for the constructor Plot must be subclasses of BaseSeries.
  prefs: []
  type: TYPE_NORMAL
- en: Any global option can be specified as a keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The global options for a figure are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'title : str'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xlabel : str or Symbol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ylabel : str or Symbol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'zlabel : str or Symbol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'legend : bool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xscale : {‘linear’, ‘log’}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'yscale : {‘linear’, ‘log’}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'axis : bool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'axis_center : tuple of two floats or {‘center’, ‘auto’}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xlim : tuple of two floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ylim : tuple of two floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'aspect_ratio : tuple of two floats or {‘auto’}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'autoscale : bool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'margin : float in [0, 1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'backend : {‘default’, ‘matplotlib’, ‘text’} or a subclass of BaseBackend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'size : optional tuple of two floats, (width, height); default: None'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The per data series options and aesthetics are: There are none in the base
    series. See below for options for subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some data series support additional aesthetics or options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`LineOver1DRangeSeries`](#sympy.plotting.series.LineOver1DRangeSeries "sympy.plotting.series.LineOver1DRangeSeries"),
    [`Parametric2DLineSeries`](#sympy.plotting.series.Parametric2DLineSeries "sympy.plotting.series.Parametric2DLineSeries"),
    and [`Parametric3DLineSeries`](#sympy.plotting.series.Parametric3DLineSeries "sympy.plotting.series.Parametric3DLineSeries")
    support the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Aesthetics:'
  prefs: []
  type: TYPE_NORMAL
- en: line_colorstring, or float, or function, optional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifies the color for the plot, which depends on the backend being used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example, if `MatplotlibBackend` is being used, then Matplotlib string colors
    are acceptable (`"red"`, `"r"`, `"cyan"`, `"c"`, …). Alternatively, we can use
    a float number, 0 < color < 1, wrapped in a string (for example, `line_color="0.5"`)
    to specify grayscale colors. Alternatively, We can specify a function returning
    a single float value: this will be used to apply a color-loop (for example, `line_color=lambda
    x: math.cos(x)`).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that by setting line_color, it would be applied simultaneously to all the
    series.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'label : str'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'steps : bool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'integers_only : bool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`SurfaceOver2DRangeSeries`](#sympy.plotting.series.SurfaceOver2DRangeSeries
    "sympy.plotting.series.SurfaceOver2DRangeSeries") and [`ParametricSurfaceSeries`](#sympy.plotting.series.ParametricSurfaceSeries
    "sympy.plotting.series.ParametricSurfaceSeries") support the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Aesthetics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'surface_color : function which returns a float.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'How the plotting module works:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a plotting function is called, the provided expressions are processed
    and a list of instances of the [`BaseSeries`](#sympy.plotting.series.BaseSeries
    "sympy.plotting.series.BaseSeries") class is created, containing the necessary
    information to plot the expressions (e.g. the expression, ranges, series name,
    …). Eventually, these objects will generate the numerical data to be plotted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A subclass of [`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot")
    class is instantiaed (referred to as backend, from now on), which stores the list
    of series and the main attributes of the plot (e.g. axis labels, title, …). The
    backend implements the logic to generate the actual figure with some plotting
    library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the `show` command is executed, series are processed one by one to generate
    numerical data and add it to the figure. The backend is also going to set the
    axis labels, title, …, according to the values stored in the Plot instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backend should check if it supports the data series that it is given (e.g.
    [`TextBackend`](#sympy.plotting.plot.TextBackend "sympy.plotting.plot.TextBackend")
    supports only [`LineOver1DRangeSeries`](#sympy.plotting.series.LineOver1DRangeSeries
    "sympy.plotting.series.LineOver1DRangeSeries")).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is the backend responsibility to know how to use the class of data series
    that it’s given. Note that the current implementation of the `*Series` classes
    is “matplotlib-centric”: the numerical data returned by the `get_points` and `get_meshes`
    methods is meant to be used directly by Matplotlib. Therefore, the new backend
    will have to pre-process the numerical data to make it compatible with the chosen
    plotting library. Keep in mind that future SymPy versions may improve the `*Series`
    classes in order to return numerical data “non-matplotlib-centric”, hence if you
    code a new backend you have the responsibility to check if its working on each
    SymPy release.'
  prefs: []
  type: TYPE_NORMAL
- en: Please explore the [`MatplotlibBackend`](#sympy.plotting.plot.MatplotlibBackend
    "sympy.plotting.plot.MatplotlibBackend") source code to understand how a backend
    should be coded.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be used by SymPy plotting functions, a backend must implement the
    following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'show(self): used to loop over the data series, generate the numerical'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data, plot it and set the axis labels, title, …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'save(self, path): used to save the current plot to the specified file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: path.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'close(self): used to close the current plot backend (note: some plotting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: library does not support this functionality. In that case, just raise a warning).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Deprecated since version 1.13.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adds an element from a plot’s series to an existing plot.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider two `Plot` objects, `p1` and `p2`. To add the second plot’s first
    series object to the first, use the `append` method, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/e161fa7b96099e20c0002ab3e1766432/plotting-1.png), [`hires.png`](../_downloads/547e4b1f8424ede020b3ff1efc0c3f9f/plotting-1.hires.png),
    [`pdf`](../_downloads/2f44ee19ebd4c314ad1c408629357c53/plotting-1.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-1.png](../Images/e4b647a98066138aaae0b08c7618bdd3.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`extend`](#sympy.plotting.plot.Plot.extend "sympy.plotting.plot.Plot.extend")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adds all series from another plot.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider two `Plot` objects, `p1` and `p2`. To add the second plot to the first,
    use the `extend` method, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/54ad7be6108e855d4d28e7d1746e2d6f/plotting-2.png), [`hires.png`](../_downloads/890620b9e860e57e3838bd758c92f5cc/plotting-2.hires.png),
    [`pdf`](../_downloads/034c3ce6c53eca7932c83f9b35d14c64/plotting-2.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-2.png](../Images/fbcd2da9271711b18e5c34522b394f06.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Deprecated since version 1.13.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Deprecated since version 1.13.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Deprecated since version 1.13.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting Function Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Plots a function of a single variable as a curve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args :**'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the expression representing the function of single variable
    to be plotted.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The last argument is a 3-tuple denoting the range of the free variable. e.g.
    `(x, 0, 5)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Typical usage examples are in the following:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotting a single expression with a single range.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot(expr, range, **kwargs)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting a single expression with the default range (-10, 10).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot(expr, **kwargs)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting multiple expressions with a single range.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot(expr1, expr2, ..., range, **kwargs)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting multiple expressions with multiple ranges.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot((expr1, range1), (expr2, range2), ..., **kwargs)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is best practice to specify range explicitly because default range may change
    in the future if a more advanced default range detection algorithm is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**show** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The default value is set to `True`. Set show to `False` and the function will
    not display the plot. The returned instance of the `Plot` class can then be used
    to save or display the plot by calling the `save()` and `show()` methods respectively.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line_color** : string, or float, or function, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the color for the plot. See `Plot` to see how to set color for the
    plots. Note that by setting `line_color`, it would be applied simultaneously to
    all the series.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**title** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Title of the plot. It is set to the latex representation of the expression,
    if the plot has only one expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**label** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The label of the expression in the plot. It will be used when called with `legend`.
    Default is the name of the expression. e.g. `sin(x)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xlabel** : str or expression, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Label for the x-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ylabel** : str or expression, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Label for the y-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xscale** : ‘linear’ or ‘log’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the scaling of the x-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**yscale** : ‘linear’ or ‘log’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the scaling of the y-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis_center** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of two floats denoting the coordinates of the center or {‘center’, ‘auto’}
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xlim** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Denotes the x-axis limits, `` (min, max)` ``.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ylim** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Denotes the y-axis limits, `` (min, max)` ``.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**annotations** : list, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries specifying the type of annotation required. The keys
    in the dictionary should be equivalent to the arguments of the [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)")’s [`annotate()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html#matplotlib.axes.Axes.annotate
    "(in Matplotlib v3.9.0)") method.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**markers** : list, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries specifying the type the markers required. The keys in
    the dictionary should be equivalent to the arguments of the [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)")’s [`plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot
    "(in Matplotlib v3.9.0)") function along with the marker related keyworded arguments.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rectangles** : list, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries specifying the dimensions of the rectangles to be plotted.
    The keys in the dictionary should be equivalent to the arguments of the [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)")’s [`Rectangle`](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Rectangle.html#matplotlib.patches.Rectangle
    "(in Matplotlib v3.9.0)") class.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**fill** : dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary specifying the type of color filling required in the plot. The
    keys in the dictionary should be equivalent to the arguments of the [`matplotlib`](https://matplotlib.org/stable/index.html#module-matplotlib
    "(in Matplotlib v3.9.0)")’s [`fill_between()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.fill_between.html#matplotlib.axes.Axes.fill_between
    "(in Matplotlib v3.9.0)") method.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**adaptive** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The default value is set to `True`. Set adaptive to `False` and specify `n`
    if uniform sampling is required.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The plotting uses an adaptive algorithm which samples recursively to accurately
    plot. The adaptive algorithm uses a random point near the midpoint of two points
    that has to be further sampled. Hence the same plots can appear slightly different.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**depth** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Recursion depth of the adaptive algorithm. A depth of value \(n\) samples a
    maximum of \(2^{n}\) points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the `adaptive` flag is set to `False`, this will be ignored.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used when the `adaptive` is set to `False`. The function is uniformly sampled
    at `n` number of points. If the `adaptive` flag is set to `True`, this will be
    ignored. This keyword argument replaces `nb_of_points`, which should be considered
    deprecated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**size** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple in the form (width, height) in inches to specify the size of the overall
    figure. The default value is set to `None`, meaning the size will be set by the
    default backend.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Single Plot
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/582c011d5c51607375881beab72d36fb/plotting-4.png), [`hires.png`](../_downloads/7aa9ca245fd835ba9df87eb56017c766/plotting-4.hires.png),
    [`pdf`](../_downloads/0efc8f797e345bcc903c8f4dab4a5322/plotting-4.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-4.png](../Images/c6b8e22b178de61b1e0eae59918d2c94.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple plots with single range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/9e0d17fbd9bd9d066609a5f2f737ce21/plotting-5.png), [`hires.png`](../_downloads/c2fb51b30c351063663b346ec9eca687/plotting-5.hires.png),
    [`pdf`](../_downloads/ddddc4679201fda850a702ce6ca7ff1e/plotting-5.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-5.png](../Images/ff9bc23c50a0ec89e7c01e361971c117.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple plots with different ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/f6123a6cf855e095f8f58862db755d60/plotting-6.png), [`hires.png`](../_downloads/abfb09806836e016c20be53caf4dbdb4/plotting-6.hires.png),
    [`pdf`](../_downloads/1362531cda049d5b7f4db4abe11d4178/plotting-6.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-6.png](../Images/ecd25722317ea5df84d0249262964d88.png)'
  prefs: []
  type: TYPE_IMG
- en: No adaptive sampling.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/cbc065b1401edd3c94be5ede9811b881/plotting-7.png), [`hires.png`](../_downloads/579106f8d8fa1f12f463433a455d3fa6/plotting-7.hires.png),
    [`pdf`](../_downloads/56447441b8d8108229134a5d3454516c/plotting-7.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-7.png](../Images/0a99a341355d380c50779d2fc1407f25.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot"), [`LineOver1DRangeSeries`](#sympy.plotting.series.LineOver1DRangeSeries
    "sympy.plotting.series.LineOver1DRangeSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Plots a 2D parametric curve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common specifications are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotting a single parametric curve with a range
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot_parametric((expr_x, expr_y), range)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting multiple parametric curves with the same range
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot_parametric((expr_x, expr_y), ..., range)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Plotting multiple parametric curves with different ranges
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`plot_parametric((expr_x, expr_y, range), ...)`'
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`expr_x` is the expression representing \(x\) component of the parametric function.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`expr_y` is the expression representing \(y\) component of the parametric function.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`range` is a 3-tuple denoting the parameter symbol, start and stop. For example,
    `(u, 0, 5)`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the range is not specified, then a default range of (-10, 10) is used.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: However, if the arguments are specified as `(expr_x, expr_y, range), ...`, you
    must specify the ranges for each expressions manually.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Default range may change in the future if a more advanced algorithm is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**adaptive** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies whether to use the adaptive sampling or not.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The default value is set to `True`. Set adaptive to `False` and specify `n`
    if uniform sampling is required.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**depth** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The recursion depth of the adaptive algorithm. A depth of value \(n\) samples
    a maximum of \(2^n\) points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used when the `adaptive` flag is set to `False`. Specifies the number of the
    points used for the uniform sampling. This keyword argument replaces `nb_of_points`,
    which should be considered deprecated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line_color** : string, or float, or function, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the color for the plot. See `Plot` to see how to set color for the
    plots. Note that by setting `line_color`, it would be applied simultaneously to
    all the series.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**label** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The label of the expression in the plot. It will be used when called with `legend`.
    Default is the name of the expression. e.g. `sin(x)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xlabel** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Label for the x-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ylabel** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Label for the y-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xscale** : ‘linear’ or ‘log’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the scaling of the x-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**yscale** : ‘linear’ or ‘log’, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the scaling of the y-axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis_center** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of two floats denoting the coordinates of the center or {‘center’, ‘auto’}
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xlim** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Denotes the x-axis limits, `` (min, max)` ``.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ylim** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Denotes the y-axis limits, `` (min, max)` ``.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**size** : (float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple in the form (width, height) in inches to specify the size of the overall
    figure. The default value is set to `None`, meaning the size will be set by the
    default backend.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A parametric plot with a single expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/bba16e866fa29ce757375a1caec43d91/plotting-9.png), [`hires.png`](../_downloads/136ff87efbe8a79dbacf0a7d83a1cdc0/plotting-9.hires.png),
    [`pdf`](../_downloads/b78b32e3870f0d0ffa753084ae625ec7/plotting-9.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-9.png](../Images/ffbcc7824c663dc649f83822799ed132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A parametric plot with multiple expressions with the same range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/6f6c3e14b26c5c3afe69440fdfce7a63/plotting-10.png), [`hires.png`](../_downloads/418d48a850148667cd44193dcdf88d72/plotting-10.hires.png),
    [`pdf`](../_downloads/9728219edea47500a9403b3679a5bc09/plotting-10.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-10.png](../Images/02c58e0a6df7d827a9f3076d624ed069.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A parametric plot with multiple expressions with different ranges for each
    curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/7c8fbd1d7c71b42358ff9409e775f36a/plotting-11.png), [`hires.png`](../_downloads/7ad34dbec0b138d26f4749d88207942d/plotting-11.hires.png),
    [`pdf`](../_downloads/7bfa6a992ea402720a120fd5093741a4/plotting-11.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-11.png](../Images/1c9b8043410322f967b5a7292370fdca.png)'
  prefs: []
  type: TYPE_IMG
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The plotting uses an adaptive algorithm which samples recursively to accurately
    plot the curve. The adaptive algorithm uses a random point near the midpoint of
    two points that has to be further sampled. Hence, repeating the same plot command
    can give slightly different results because of the random sampling.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple plots, then the same optional arguments are applied to
    all the plots drawn in the same canvas. If you want to set these options separately,
    you can index the returned `Plot` object and set it.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when you specify `line_color` once, it would be applied simultaneously
    to both series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/47bacbd4a2d9e91d8180cf3b45738f9c/plotting-12.png), [`hires.png`](../_downloads/ae08c1564542549b8b8a3aff95ab5eec/plotting-12.hires.png),
    [`pdf`](../_downloads/81f16477713a2ebedd53f1c8ec85b754/plotting-12.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-12.png](../Images/cd6f666516c4a0f72199445e41fb8ff2.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to specify the line color for the specific series, you should index
    each item and apply the property manually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/4ca8084af7be8f1b403311f7745cd8fd/plotting-13.png), [`hires.png`](../_downloads/b9d4b3910ceea823f6a8be6ae0376cc0/plotting-13.hires.png),
    [`pdf`](../_downloads/90b2354acc779cd49f552b57929e55ab/plotting-13.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-13.png](../Images/795b3e00928c70fe67e5e9aecf5232b0.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot"), [`Parametric2DLineSeries`](#sympy.plotting.series.Parametric2DLineSeries
    "sympy.plotting.series.Parametric2DLineSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Plots a 3D surface plot.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs: []
  type: TYPE_NORMAL
- en: Single plot
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d(expr, range_x, range_y, **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the ranges are not specified, then a default range of (-10, 10) is used.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple plot with the same range.
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d(expr1, expr2, range_x, range_y, **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the ranges are not specified, then a default range of (-10, 10) is used.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple plots with different ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d((expr1, range_x, range_y), (expr2, range_x, range_y), ..., **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: Ranges have to be specified for every expression.
  prefs: []
  type: TYPE_NORMAL
- en: Default range may change in the future if a more advanced default range detection
    algorithm is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'expr : Expression representing the function along x.'
  prefs: []
  type: TYPE_NORMAL
- en: range_x([`Symbol`](core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    float, float)
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tuple denoting the range of the x variable, e.g. (x, 0, 5).
  prefs: []
  type: TYPE_NORMAL
- en: range_y([`Symbol`](core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    float, float)
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tuple denoting the range of the y variable, e.g. (y, 0, 5).
  prefs: []
  type: TYPE_NORMAL
- en: Keyword Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments for `SurfaceOver2DRangeSeries` class:'
  prefs: []
  type: TYPE_NORMAL
- en: n1int
  prefs: []
  type: TYPE_NORMAL
- en: The x range is sampled uniformly at `n1` of points. This keyword argument replaces
    `nb_of_points_x`, which should be considered deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: n2int
  prefs: []
  type: TYPE_NORMAL
- en: The y range is sampled uniformly at `n2` of points. This keyword argument replaces
    `nb_of_points_y`, which should be considered deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aesthetics:'
  prefs: []
  type: TYPE_NORMAL
- en: surface_colorFunction which returns a float
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the color for the surface of the plot. See [`Plot`](#sympy.plotting.plot.Plot
    "sympy.plotting.plot.Plot") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple plots, then the same series arguments are applied to all
    the plots. If you want to set these options separately, you can index the returned
    `Plot` object and set it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments for `Plot` class:'
  prefs: []
  type: TYPE_NORMAL
- en: titlestr
  prefs: []
  type: TYPE_NORMAL
- en: Title of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: size(float, float), optional
  prefs: []
  type: TYPE_NORMAL
- en: A tuple in the form (width, height) in inches to specify the size of the overall
    figure. The default value is set to `None`, meaning the size will be set by the
    default backend.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Single plot
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/b395b568c68c95dd59085322d578d50f/plotting-15.png), [`hires.png`](../_downloads/8bbe6499f8fa8a136e49e91458f71e77/plotting-15.hires.png),
    [`pdf`](../_downloads/5860560b08ead850923e530e3240b5c6/plotting-15.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-15.png](../Images/60f3be15bc6bfa1f1b2bac7726bf20e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple plots with same range
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/151e85fac084e0e3c340d9bfc07082bc/plotting-16.png), [`hires.png`](../_downloads/d1d8786814e84c7b220b5f090383b61a/plotting-16.hires.png),
    [`pdf`](../_downloads/1f24a27fa4a24f0b331e9442f61363d7/plotting-16.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-16.png](../Images/1ea495270200a679924cc23e4da8b5d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple plots with different ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/657ebf973736726d25c14f01867467cd/plotting-17.png), [`hires.png`](../_downloads/e8219c69ad9a64f6c42ea067716bee88/plotting-17.hires.png),
    [`pdf`](../_downloads/0ffd2a0f4570e502b64ad8529258801f/plotting-17.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-17.png](../Images/2d0e45e29d56ceef22cf88d086436d92.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot"), [`SurfaceOver2DRangeSeries`](#sympy.plotting.series.SurfaceOver2DRangeSeries
    "sympy.plotting.series.SurfaceOver2DRangeSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Plots a 3D parametric line plot.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs: []
  type: TYPE_NORMAL
- en: 'Single plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d_parametric_line(expr_x, expr_y, expr_z, range, **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the range is not specified, then a default range of (-10, 10) is used.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple plots.
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d_parametric_line((expr_x, expr_y, expr_z, range), ..., **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: Ranges have to be specified for every expression.
  prefs: []
  type: TYPE_NORMAL
- en: Default range may change in the future if a more advanced default range detection
    algorithm is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_x : Expression representing the function along x.'
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_y : Expression representing the function along y.'
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_z : Expression representing the function along z.'
  prefs: []
  type: TYPE_NORMAL
- en: range([`Symbol`](core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    float, float)
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tuple denoting the range of the parameter variable, e.g., (u, 0, 5).
  prefs: []
  type: TYPE_NORMAL
- en: Keyword Arguments
  prefs: []
  type: TYPE_NORMAL
- en: Arguments for `Parametric3DLineSeries` class.
  prefs: []
  type: TYPE_NORMAL
- en: nint
  prefs: []
  type: TYPE_NORMAL
- en: The range is uniformly sampled at `n` number of points. This keyword argument
    replaces `nb_of_points`, which should be considered deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aesthetics:'
  prefs: []
  type: TYPE_NORMAL
- en: line_colorstring, or float, or function, optional
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the color for the plot. See `Plot` to see how to set color for the
    plots. Note that by setting `line_color`, it would be applied simultaneously to
    all the series.
  prefs: []
  type: TYPE_NORMAL
- en: labelstr
  prefs: []
  type: TYPE_NORMAL
- en: The label to the plot. It will be used when called with `legend=True` to denote
    the function with the given label in the plot.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple plots, then the same series arguments are applied to all
    the plots. If you want to set these options separately, you can index the returned
    `Plot` object and set it.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments for `Plot` class.
  prefs: []
  type: TYPE_NORMAL
- en: titlestr
  prefs: []
  type: TYPE_NORMAL
- en: Title of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: size(float, float), optional
  prefs: []
  type: TYPE_NORMAL
- en: A tuple in the form (width, height) in inches to specify the size of the overall
    figure. The default value is set to `None`, meaning the size will be set by the
    default backend.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Single plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/559e9fac4002a2d06665bdb8d55bbb74/plotting-19.png), [`hires.png`](../_downloads/0e82fba9823ed1de9b017f198996964c/plotting-19.hires.png),
    [`pdf`](../_downloads/3af3ee18448b7a687ef6594665f932f9/plotting-19.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-19.png](../Images/aec232c5952105882f7e0079737971c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/7af2e1ee2a4706e40edd6c03d90d7087/plotting-20.png), [`hires.png`](../_downloads/43da657e03809ba184c5d38ab83984fe/plotting-20.hires.png),
    [`pdf`](../_downloads/569497501b2d3eb864ce466d19b06017/plotting-20.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-20.png](../Images/c96ef1e376a1b70ad84d9376bb3860cc.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot"), [`Parametric3DLineSeries`](#sympy.plotting.series.Parametric3DLineSeries
    "sympy.plotting.series.Parametric3DLineSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Plots a 3D parametric surface plot.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Single plot.
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d_parametric_surface(expr_x, expr_y, expr_z, range_u, range_v, **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the ranges is not specified, then a default range of (-10, 10) is used.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple plots.
  prefs: []
  type: TYPE_NORMAL
- en: '`plot3d_parametric_surface((expr_x, expr_y, expr_z, range_u, range_v), ...,
    **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: Ranges have to be specified for every expression.
  prefs: []
  type: TYPE_NORMAL
- en: Default range may change in the future if a more advanced default range detection
    algorithm is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_x : Expression representing the function along `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_y : Expression representing the function along `y`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'expr_z : Expression representing the function along `z`.'
  prefs: []
  type: TYPE_NORMAL
- en: range_u([`Symbol`](core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    float, float)
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tuple denoting the range of the u variable, e.g. (u, 0, 5).
  prefs: []
  type: TYPE_NORMAL
- en: range_v([`Symbol`](core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    float, float)
  prefs: []
  type: TYPE_NORMAL
- en: A 3-tuple denoting the range of the v variable, e.g. (v, 0, 5).
  prefs: []
  type: TYPE_NORMAL
- en: Keyword Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments for `ParametricSurfaceSeries` class:'
  prefs: []
  type: TYPE_NORMAL
- en: n1int
  prefs: []
  type: TYPE_NORMAL
- en: The `u` range is sampled uniformly at `n1` of points. This keyword argument
    replaces `nb_of_points_u`, which should be considered deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: n2int
  prefs: []
  type: TYPE_NORMAL
- en: The `v` range is sampled uniformly at `n2` of points. This keyword argument
    replaces `nb_of_points_v`, which should be considered deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aesthetics:'
  prefs: []
  type: TYPE_NORMAL
- en: surface_colorFunction which returns a float
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the color for the surface of the plot. See [`Plot`](#sympy.plotting.plot.Plot
    "sympy.plotting.plot.Plot") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: If there are multiple plots, then the same series arguments are applied for
    all the plots. If you want to set these options separately, you can index the
    returned `Plot` object and set it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arguments for `Plot` class:'
  prefs: []
  type: TYPE_NORMAL
- en: titlestr
  prefs: []
  type: TYPE_NORMAL
- en: Title of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: size(float, float), optional
  prefs: []
  type: TYPE_NORMAL
- en: A tuple in the form (width, height) in inches to specify the size of the overall
    figure. The default value is set to `None`, meaning the size will be set by the
    default backend.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Single plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/2b8ce97dc73ef00309c47b99969fae30/plotting-22.png), [`hires.png`](../_downloads/e7adcd5231b8a36626ee8c5950d70261/plotting-22.hires.png),
    [`pdf`](../_downloads/ca52fc8f0db47908fb8d38cc335d5c1a/plotting-22.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-22.png](../Images/f6db0badea6c5188d2dda5736789f964.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Plot`](#sympy.plotting.plot.Plot "sympy.plotting.plot.Plot"), [`ParametricSurfaceSeries`](#sympy.plotting.series.ParametricSurfaceSeries
    "sympy.plotting.series.ParametricSurfaceSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: A plot function to plot implicit equations / inequalities.
  prefs: []
  type: TYPE_NORMAL
- en: Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'expr : The equation / inequality that is to be plotted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'x_var (optional) : symbol to plot on x-axis or tuple giving symbol and range
    as `(symbol, xmin, xmax)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'y_var (optional) : symbol to plot on y-axis or tuple giving symbol and range
    as `(symbol, ymin, ymax)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If neither `x_var` nor `y_var` are given then the free symbols in the expression
    will be assigned in the order they are sorted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following keyword arguments can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`adaptive` Boolean. The default value is set to True. It has to be'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set to False if you want to use a mesh grid.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`depth` integer. The depth of recursion for adaptive mesh grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default value is 0\. Takes value in the range (0, 4).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`n` integer. The number of points if adaptive mesh grid is not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used. Default value is 300\. This keyword argument replaces `points`, which
    should be considered deprecated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`show` Boolean. Default value is True. If set to False, the plot will'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: not be shown. See `Plot` for further information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`title` string. The title for the plot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlabel` string. The label for the x-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ylabel` string. The label for the y-axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Aesthetics options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_color`: float or string. Specifies the color for the plot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See `Plot` to see how to set color for the plots. Default value is “Blue”
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: plot_implicit, by default, uses interval arithmetic to plot functions. If the
    expression cannot be plotted using interval arithmetic, it defaults to a generating
    a contour using a mesh grid of fixed number of points. By setting adaptive to
    False, you can force plot_implicit to use the mesh grid. The mesh grid method
    can be effective when adaptive plotting using interval arithmetic, fails to plot
    with small line width.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Without any ranges for the symbols in the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/950e4c42a3beff8bac74d47e0f8d8516/plotting-24.png), [`hires.png`](../_downloads/db76a3db1d29ef7f72c47b067c360357/plotting-24.hires.png),
    [`pdf`](../_downloads/f0b1ed1309beacf065f53d41a069ebe1/plotting-24.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-24.png](../Images/8c9b9c031b12a238f801ea372bfbf02c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the range for the symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/76c597139b65debdf0e125c15cd040ca/plotting-25.png), [`hires.png`](../_downloads/4f8a4d280007c46440ecb7e279e1d3cb/plotting-25.hires.png),
    [`pdf`](../_downloads/e07f3720dbc2048eb106de8a904dcfa9/plotting-25.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-25.png](../Images/10de86cd085d7e9edb582ab9527f3b09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With depth of recursion as argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/81a43cb7598cbbe880e19146241abe5f/plotting-26.png), [`hires.png`](../_downloads/2019cb6b524d1d6351bac9c894de42dd/plotting-26.hires.png),
    [`pdf`](../_downloads/2acde0fab574588f4a28670019a75bf9/plotting-26.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-26.png](../Images/3d0befc4bf974478d699c935c3263054.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using mesh grid and not using adaptive meshing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/15834c8a5b2fcbba4bf0ca917701020a/plotting-27.png), [`hires.png`](../_downloads/d757e063e8de9f504b4c51fbc3f520ed/plotting-27.hires.png),
    [`pdf`](../_downloads/6236456dc31640e622c3f943842d9925/plotting-27.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-27.png](../Images/d96fd45f1fe4eb741b7950081aa36b49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using mesh grid without using adaptive meshing with number of points specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/b0900d9fcf581620fd4e610aebbf63ac/plotting-28.png), [`hires.png`](../_downloads/cf8a93b148c1b9c8fe415b7023417719/plotting-28.hires.png),
    [`pdf`](../_downloads/5815ed289d6d66d90e420fd31330fef7/plotting-28.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-28.png](../Images/3748b17bba084aee853335fc91296cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/cb44a32b25833934efb3a9d4adfe400c/plotting-29.png), [`hires.png`](../_downloads/2fe7ddde63c7b986288bcf42780219f7/plotting-29.hires.png),
    [`pdf`](../_downloads/8f6a7c938e347f134c67566d5aef740d/plotting-29.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-29.png](../Images/e2788bea04288350c3cf019dc2cbdacc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting Using boolean conjunctions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/68597f1bcbf2528fdc041a5c14e53f0f/plotting-30.png), [`hires.png`](../_downloads/ce89ed58fdb41bf7840cc83d6e6a1ba6/plotting-30.hires.png),
    [`pdf`](../_downloads/a3a06dbcaf4cb9dbce7fe53c37ec22a8/plotting-30.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-30.png](../Images/05f9cc0106bb04cd48334330c4814712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When plotting an expression with a single variable (y - 1, for example), specify
    the x or the y variable explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/plotting-31_00.png](../Images/65e148bf7a2c86188ab4cbea826080c9.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/ee4a1fe30dc3412a032f2b5e568f5900/plotting-31_00.png),
    [`hires.png`](../_downloads/f5b1763a48dbcdf900b6e9211da63429/plotting-31_00.hires.png),
    [`pdf`](../_downloads/fd8f37f13aecb42027ed8c23548b8132/plotting-31_00.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-31_01.png](../Images/b197e6c83eb4543b0aa391beb07eef61.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/14cf345fabb585d0d33b87b583874348/plotting-31_01.png),
    [`hires.png`](../_downloads/fe613b0745b52fdeccb470150258aa3c/plotting-31_01.hires.png),
    [`pdf`](../_downloads/fd7d64e97562f1e8bfd34628ef58f000/plotting-31_01.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: PlotGrid Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This class helps to plot subplots from already created SymPy plots in a single
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/plotting-32_00.png](../Images/6c33e684b3dd7dd50e501b708246706b.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/68972f84b0db087f1a5dfb2b62c9664f/plotting-32_00.png),
    [`hires.png`](../_downloads/6919f0a739fa0c99e3afb7c26b84bad1/plotting-32_00.hires.png),
    [`pdf`](../_downloads/26aeb23613c82467dc9ad9bdc328ab32/plotting-32_00.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-32_01.png](../Images/467961d368016a3904379c0d3420ab0d.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/86b5ae362e7b44e12f5667662335c143/plotting-32_01.png),
    [`hires.png`](../_downloads/9f7fc14b7dad5bc5df04c7ba772bd29a/plotting-32_01.hires.png),
    [`pdf`](../_downloads/0616d85a2c2e5a070fd791bdcdb1e35e/plotting-32_01.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-32_02.png](../Images/c8d9188706a6783b240e6fc359df02fe.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/47684ac059156fd8cd47d417d76c274d/plotting-32_02.png),
    [`hires.png`](../_downloads/036b08a02bee6ae6089124b4d45625b1/plotting-32_02.hires.png),
    [`pdf`](../_downloads/aa497c934ec12bc50f842dac34beeab7/plotting-32_02.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-32_03.png](../Images/10d58009bc9159c283ee40cfd4a076ce.png)'
  prefs: []
  type: TYPE_IMG
- en: ([`png`](../_downloads/f60800563cf7694b4f06edfc60039856/plotting-32_03.png),
    [`hires.png`](../_downloads/2003a700abf37d416b730f6e77195452/plotting-32_03.hires.png),
    [`pdf`](../_downloads/d8f4bbfa41aeb33459953469d86ea8b1/plotting-32_03.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting vertically in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/00b8551a3717430a899630b9d2838c73/plotting-33.png), [`hires.png`](../_downloads/dc3a45f8e1cf89ae3a265397b11568ea/plotting-33.hires.png),
    [`pdf`](../_downloads/4c9cbd846f69df68795ea4e2cdf667e9/plotting-33.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-33.png](../Images/003def1aa6bcc4f3ea4b10bdc8f0aafa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting horizontally in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/802a4224b2620f5accd6a874e02b2025/plotting-34.png), [`hires.png`](../_downloads/a3a5024db578b77ab9f28f148a7b2e28/plotting-34.hires.png),
    [`pdf`](../_downloads/ac472fec5b32a66f329e9328277c64b3/plotting-34.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-34.png](../Images/2fdf5c6fdae670f0e112558c78eb062c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting in a grid form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: ([`png`](../_downloads/d91fec103e89202308f4b17a90268ebf/plotting-35.png), [`hires.png`](../_downloads/d1fce4afaa495b73d5ee7943fdbe0a03/plotting-35.hires.png),
    [`pdf`](../_downloads/9ba0a373644e3b8e75cb2f2d1a46ac33/plotting-35.pdf))
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/plotting-35.png](../Images/aea2bd56a94f4db1d37076404443d0a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Series Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Base class for the data objects containing stuff to be plotted.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The backend should check if it supports the data series that is given. (e.g.
    TextBackend supports only LineOver1DRangeSeries). It is the backend responsibility
    to know how to use the class of data series that is given.
  prefs: []
  type: TYPE_NORMAL
- en: Some data series classes are grouped (using a class attribute like is_2Dline)
    according to the api they present (based only on convention). The backend is not
    obliged to use that api (e.g. LineOver1DRangeSeries belongs to the is_2Dline group
    and presents the get_points method, but the TextBackend does not use the get_points
    method).
  prefs: []
  type: TYPE_NORMAL
- en: BaseSeries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the color function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Arguments to be passed to the coloring function. Can be coordinates or parameters
    or both.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The backend will request the data series to generate the numerical data. Depending
    on the data series, either the data series itself or the backend will eventually
    execute this function to generate the appropriate coloring value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Return the expression (or expressions) of the series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Compute and returns the numerical data.
  prefs: []
  type: TYPE_NORMAL
- en: The number of parameters returned by this method depends on the specific instance.
    If `s` is the series, make sure to read `help(s.get_data)` to understand what
    it returns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Return the label to be used to display the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**use_latex** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If False, the string representation of the expression is returned. If True,
    the latex representation is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**wrapper** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The backend might need the latex representation to be wrapped by some characters.
    Default to `"$%s$"`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : str'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list [n1, n2, n3] of numbers of discratization points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Get or set the current parameters dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : dict'
  prefs: []
  type: TYPE_NORMAL
- en: 'key: symbol associated to the parameter'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'val: the numeric value'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: A base class for 2D lines.
  prefs: []
  type: TYPE_NORMAL
- en: adding the label, steps and only_integers options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: making is_2Dline true
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining get_segments and get_color_array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Return coordinates for plotting the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'x: np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: x-coordinates
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'y: np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: y-coordinates
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'z: np.ndarray (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: z-coordinates in case of Parametric3DLineSeries, Parametric3DLineInteractiveSeries
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**param** : np.ndarray (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter in case of Parametric2DLineSeries, Parametric3DLineSeries or AbsArgLineSeries
    (and their corresponding interactive series).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Representation for a line consisting of a SymPy expression over a range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Return lists of coordinates for plotting. Depending on the `adaptive` option,
    this function will either use an adaptive algorithm or it will uniformly sample
    the expression over the provided range.
  prefs: []
  type: TYPE_NORMAL
- en: This function is available for back-compatibility purposes. Consider using `get_data()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : list'
  prefs: []
  type: TYPE_NORMAL
- en: List of x-coordinates
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ylist
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: List of y-coordinates
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Representation for a line consisting of two parametric SymPy expressions over
    a range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: A base class for 3D lines.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the stuff is derived from Line2DBaseSeries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Representation for a 3D line consisting of three parametric SymPy expressions
    and a range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: A base class for 3D surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Representation for a 3D surface consisting of a SymPy expression and 2D range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Return arrays of coordinates for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**mesh_x** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Discretized x-domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mesh_y** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Discretized y-domain.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mesh_z** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Results of the evaluation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return the x,y,z coordinates for plotting the surface. This function is available
    for back-compatibility purposes. Consider using `get_data()` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Representation for a 3D surface consisting of three parametric SymPy expressions
    and a range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Return arrays of coordinates for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : np.ndarray [n2 x n1]'
  prefs: []
  type: TYPE_NORMAL
- en: x-coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**y** : np.ndarray [n2 x n1]'
  prefs: []
  type: TYPE_NORMAL
- en: y-coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**z** : np.ndarray [n2 x n1]'
  prefs: []
  type: TYPE_NORMAL
- en: z-coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mesh_u** : np.ndarray [n2 x n1]'
  prefs: []
  type: TYPE_NORMAL
- en: Discretized u range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mesh_v** : np.ndarray [n2 x n1]'
  prefs: []
  type: TYPE_NORMAL
- en: Discretized v range.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Return the x,y,z coordinates for plotting the surface. This function is available
    for back-compatibility purposes. Consider using `get_data()` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Representation for 2D Implicit plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerical data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the series is evaluated with the \(adaptive=True\) it returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**interval_list** : list'
  prefs: []
  type: TYPE_NORMAL
- en: List of bounding rectangular intervals to be postprocessed and eventually used
    with Matplotlib’s `fill` command.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dummy** : str'
  prefs: []
  type: TYPE_NORMAL
- en: A string containing `"fill"`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Otherwise, it returns 2D numpy arrays to be used with Matplotlib’s
  prefs: []
  type: TYPE_NORMAL
- en: '`contour` or `contourf` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x_array** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '**y_array** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '**z_array** : np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '**plot_type** : str'
  prefs: []
  type: TYPE_NORMAL
- en: A string specifying which plot command to use, `"contour"` or `"contourf"`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Return the label to be used to display the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**use_latex** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If False, the string representation of the expression is returned. If True,
    the latex representation is returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**wrapper** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The backend might need the latex representation to be wrapped by some characters.
    Default to `"$%s$"`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Backends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This class implements the functionalities to use Matplotlib with SymPy plotting
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Convert two list of coordinates to a list of segments to be used with Matplotlib’s
    [`LineCollection`](https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.LineCollection
    "(in Matplotlib v3.9.0)").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : list'
  prefs: []
  type: TYPE_NORMAL
- en: List of x-coordinates
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ylist
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: List of y-coordinates
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: zlist
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: List of z-coordinates for a 3D line.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Iterates over every `Plot` object and further calls _process_series()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '## Pyglet Plotting'
  prefs: []
  type: TYPE_NORMAL
- en: This is the documentation for the old plotting module that uses pyglet. This
    module has some limitations and is not actively developed anymore. For an alternative
    you can look at the new plotting module.
  prefs: []
  type: TYPE_NORMAL
- en: The pyglet plotting module can do nice 2D and 3D plots that can be controlled
    by console commands as well as keyboard and mouse, with the only dependency being
    [pyglet](https://pyglet.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the simplest usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'To see lots of plotting examples, see `examples/pyglet_plotting.py` and try
    running it in interactive mode (`python -i plotting.py`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: And type for instance `example(7)` or `example(11)`.
  prefs: []
  type: TYPE_NORMAL
- en: See also the [Plotting Module](https://github.com/sympy/sympy/wiki/Plotting-capabilities)
    wiki page for screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Plot Window Controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Camera | Keys |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Sensitivity Modifier | SHIFT |'
  prefs: []
  type: TYPE_TB
- en: '| Zoom | R and F, Page Up and Down, Numpad + and - |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate View X,Y axis | Arrow Keys, A,S,D,W, Numpad 4,6,8,2 |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate View Z axis | Q and E, Numpad 7 and 9 |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate Ordinate Z axis | Z and C, Numpad 1 and 3 |'
  prefs: []
  type: TYPE_TB
- en: '| View XY | F1 |'
  prefs: []
  type: TYPE_TB
- en: '| View XZ | F2 |'
  prefs: []
  type: TYPE_TB
- en: '| View YZ | F3 |'
  prefs: []
  type: TYPE_TB
- en: '| View Perspective | F4 |'
  prefs: []
  type: TYPE_TB
- en: '| Reset | X, Numpad 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Axes | Keys |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Toggle Visible | F5 |'
  prefs: []
  type: TYPE_TB
- en: '| Toggle Colors | F6 |'
  prefs: []
  type: TYPE_TB
- en: '| Window | Keys |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Close | ESCAPE |'
  prefs: []
  type: TYPE_TB
- en: '| Screenshot | F8 |'
  prefs: []
  type: TYPE_TB
- en: The mouse can be used to rotate, zoom, and translate by dragging the left, middle,
    and right mouse buttons respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Coordinate Modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Plot` supports several curvilinear coordinate modes, and they are independent
    for each plotted function. You can specify a coordinate mode explicitly with the
    ‘mode’ named argument, but it can be automatically determined for cartesian or
    parametric plots, and therefore must only be specified for polar, cylindrical,
    and spherical modes.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, `Plot(function arguments)` and `Plot.__setitem__(i, function arguments)`
    (accessed using array-index syntax on the `Plot` instance) will interpret your
    arguments as a cartesian plot if you provide one function and a parametric plot
    if you provide two or three functions. Similarly, the arguments will be interpreted
    as a curve is one variable is used, and a surface if two are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Supported mode names by number of variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '1 (curves): parametric, cartesian, polar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2 (surfaces): parametric, cartesian, cylindrical, spherical'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Note that function parameters are given as option strings of the form `"key1=value1;
    key2 = value2"` (spaces are truncated). Keyword arguments given directly to plot
    apply to the plot itself.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Intervals for Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic format for variable intervals is [var, min, max, steps]. However,
    the syntax is quite flexible, and arguments not specified are taken from the defaults
    for the current coordinate mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Using the Interactive Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Using Custom Color Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code plots a saddle and color it by the magnitude of its gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The coloring algorithm works like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate the color function(s) across the curve or surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the minimum and maximum value of each component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale each component to the color gradient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When not specified explicitly, the default color gradient is \(f(0.0)=(0.4,0.4,0.4)
    \rightarrow f(1.0)=(0.9,0.9,0.9)\). In our case, everything is gray-scale because
    we have applied the default color gradient uniformly for each color component.
    When defining a color scheme in this way, you might want to supply a color gradient
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a color gradient with four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The other way to specify a color scheme is to give a separate function for
    each component r, g, b. With this syntax, the default color scheme is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'This maps z->red, y->green, and x->blue. In some cases, you might prefer to
    use the following alternative syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: You can still use multi-step gradients with three-function color schemes.
  prefs: []
  type: TYPE_NORMAL
- en: '## Plotting Geometric Entities'
  prefs: []
  type: TYPE_NORMAL
- en: The plotting module is capable of plotting some 2D geometric entities like line,
    circle and ellipse. The following example plots a circle centred at origin and
    of radius 2 units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, [`plot_implicit()`](#sympy.plotting.plot_implicit.plot_implicit "sympy.plotting.plot_implicit.plot_implicit")
    may be used to plot any 2-D geometric structure from its implicit equation.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting polygons (Polygon, RegularPolygon, Triangle) are not supported directly.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with ASCII art
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Print a crude ASCII art plot of the SymPy expression ‘expr’ (which should contain
    a single symbol, e.g. x or something else) over the interval [a, b].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
