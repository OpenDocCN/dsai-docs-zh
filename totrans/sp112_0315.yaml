- en: scipy.linalg.clarkson_woodruff_transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.clarkson_woodruff_transform.html#scipy.linalg.clarkson_woodruff_transform](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.clarkson_woodruff_transform.html#scipy.linalg.clarkson_woodruff_transform)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Applies a Clarkson-Woodruff Transform/sketch to the input matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Given an input_matrix `A` of size `(n, d)`, compute a matrix `A'` of size (sketch_size,
    d) so that
  prefs: []
  type: TYPE_NORMAL
- en: \[\|Ax\| \approx \|A'x\|\]
  prefs: []
  type: TYPE_NORMAL
- en: with high probability via the Clarkson-Woodruff Transform, otherwise known as
    the CountSketch matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input_matrix**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input matrix, of shape `(n, d)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**sketch_size**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows for the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A’**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Sketch of the input matrix `A`, of size `(sketch_size, d)`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: To make the statement
  prefs: []
  type: TYPE_NORMAL
- en: \[\|Ax\| \approx \|A'x\|\]
  prefs: []
  type: TYPE_NORMAL
- en: precise, observe the following result which is adapted from the proof of Theorem
    14 of [[2]](#rc781ce4e1ea0-2) via Markov’s Inequality. If we have a sketch size
    `sketch_size=k` which is at least
  prefs: []
  type: TYPE_NORMAL
- en: \[k \geq \frac{2}{\epsilon^2\delta}\]
  prefs: []
  type: TYPE_NORMAL
- en: Then for any fixed vector `x`,
  prefs: []
  type: TYPE_NORMAL
- en: \[\|Ax\| = (1\pm\epsilon)\|A'x\|\]
  prefs: []
  type: TYPE_NORMAL
- en: with probability at least one minus delta.
  prefs: []
  type: TYPE_NORMAL
- en: 'This implementation takes advantage of sparsity: computing a sketch takes time
    proportional to `A.nnz`. Data `A` which is in `scipy.sparse.csc_matrix` format
    gives the quickest computation time for sparse input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That said, this method does perform well on dense inputs, just slower on a relative
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Kenneth L. Clarkson and David P. Woodruff. Low rank approximation and regression
    in input sparsity time. In STOC, 2013.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: David P. Woodruff. Sketching as a tool for numerical linear algebra. In Foundations
    and Trends in Theoretical Computer Science, 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a big dense matrix `A` for the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the transform to create a new matrix with 200 rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now with high probability, the true norm is close to the sketched norm in absolute
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, applying our sketch preserves the solution to a linear regression
    of \(\min \|Ax - b\|\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As with the matrix norm example, `linalg.norm(A @ x - b)` is close to `linalg.norm(A
    @ x_sketched - b)` with high probability.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
