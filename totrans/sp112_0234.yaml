- en: Linear algebra (scipy.linalg)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/linalg.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/linalg.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Linear algebra functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[numpy.linalg](https://www.numpy.org/devdocs/reference/routines.linalg.html)
    for more linear algebra functions. Note that although [`scipy.linalg`](#module-scipy.linalg
    "scipy.linalg") imports most of them, identically named functions from [`scipy.linalg`](#module-scipy.linalg
    "scipy.linalg") may offer more or slightly differing functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`inv`](generated/scipy.linalg.inv.html#scipy.linalg.inv "scipy.linalg.inv")(a[, overwrite_a, check_finite])
    | Compute the inverse of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve`](generated/scipy.linalg.solve.html#scipy.linalg.solve "scipy.linalg.solve")(a, b[, lower, overwrite_a, ...])
    | Solves the linear equation set `a @ x == b` for the unknown `x` for square *a*
    matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_banded`](generated/scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded")(l_and_u, ab, b[, overwrite_ab, ...]) | Solve the
    equation a x = b for x, assuming a is banded matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solveh_banded`](generated/scipy.linalg.solveh_banded.html#scipy.linalg.solveh_banded
    "scipy.linalg.solveh_banded")(ab, b[, overwrite_ab, ...]) | Solve equation a x
    = b. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_circulant`](generated/scipy.linalg.solve_circulant.html#scipy.linalg.solve_circulant
    "scipy.linalg.solve_circulant")(c, b[, singular, tol, ...]) | Solve C x = b for
    x, where C is a circulant matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_triangular`](generated/scipy.linalg.solve_triangular.html#scipy.linalg.solve_triangular
    "scipy.linalg.solve_triangular")(a, b[, trans, lower, ...]) | Solve the equation
    *a x = b* for *x*, assuming a is a triangular matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_toeplitz`](generated/scipy.linalg.solve_toeplitz.html#scipy.linalg.solve_toeplitz
    "scipy.linalg.solve_toeplitz")(c_or_cr, b[, check_finite]) | Solve a Toeplitz
    system using Levinson Recursion |'
  prefs: []
  type: TYPE_TB
- en: '| [`matmul_toeplitz`](generated/scipy.linalg.matmul_toeplitz.html#scipy.linalg.matmul_toeplitz
    "scipy.linalg.matmul_toeplitz")(c_or_cr, x[, check_finite, ...]) | Efficient Toeplitz
    Matrix-Matrix Multiplication using FFT |'
  prefs: []
  type: TYPE_TB
- en: '| [`det`](generated/scipy.linalg.det.html#scipy.linalg.det "scipy.linalg.det")(a[, overwrite_a, check_finite])
    | Compute the determinant of a matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`norm`](generated/scipy.linalg.norm.html#scipy.linalg.norm "scipy.linalg.norm")(a[, ord, axis, keepdims, check_finite])
    | Matrix or vector norm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lstsq`](generated/scipy.linalg.lstsq.html#scipy.linalg.lstsq "scipy.linalg.lstsq")(a, b[, cond, overwrite_a, ...])
    | Compute least-squares solution to equation Ax = b. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pinv`](generated/scipy.linalg.pinv.html#scipy.linalg.pinv "scipy.linalg.pinv")(a, *[, atol, rtol, return_rank, ...])
    | Compute the (Moore-Penrose) pseudo-inverse of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pinvh`](generated/scipy.linalg.pinvh.html#scipy.linalg.pinvh "scipy.linalg.pinvh")(a[, atol, rtol, lower, return_rank, ...])
    | Compute the (Moore-Penrose) pseudo-inverse of a Hermitian matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kron`](generated/scipy.linalg.kron.html#scipy.linalg.kron "scipy.linalg.kron")(a, b)
    | Kronecker product. |'
  prefs: []
  type: TYPE_TB
- en: '| [`khatri_rao`](generated/scipy.linalg.khatri_rao.html#scipy.linalg.khatri_rao
    "scipy.linalg.khatri_rao")(a, b) | Khatri-rao product |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril`](generated/scipy.linalg.tril.html#scipy.linalg.tril "scipy.linalg.tril")(m[, k])
    |'
  prefs: []
  type: TYPE_TB
- en: Deprecated since version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`triu`](generated/scipy.linalg.triu.html#scipy.linalg.triu "scipy.linalg.triu")(m[, k])
    |'
  prefs: []
  type: TYPE_TB
- en: Deprecated since version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`orthogonal_procrustes`](generated/scipy.linalg.orthogonal_procrustes.html#scipy.linalg.orthogonal_procrustes
    "scipy.linalg.orthogonal_procrustes")(A, B[, check_finite]) | Compute the matrix
    solution of the orthogonal Procrustes problem. |'
  prefs: []
  type: TYPE_TB
- en: '| [`matrix_balance`](generated/scipy.linalg.matrix_balance.html#scipy.linalg.matrix_balance
    "scipy.linalg.matrix_balance")(A[, permute, scale, ...]) | Compute a diagonal
    similarity transformation for row/column balancing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`subspace_angles`](generated/scipy.linalg.subspace_angles.html#scipy.linalg.subspace_angles
    "scipy.linalg.subspace_angles")(A, B) | Compute the subspace angles between two
    matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bandwidth`](generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth
    "scipy.linalg.bandwidth")(a) | Return the lower and upper bandwidth of a 2D numeric
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`issymmetric`](generated/scipy.linalg.issymmetric.html#scipy.linalg.issymmetric
    "scipy.linalg.issymmetric")(a[, atol, rtol]) | Check if a square 2D array is symmetric.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ishermitian`](generated/scipy.linalg.ishermitian.html#scipy.linalg.ishermitian
    "scipy.linalg.ishermitian")(a[, atol, rtol]) | Check if a square 2D array is Hermitian.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`LinAlgError`](generated/scipy.linalg.LinAlgError.html#scipy.linalg.LinAlgError
    "scipy.linalg.LinAlgError") | Generic Python-exception-derived object raised by
    linalg functions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`LinAlgWarning`](generated/scipy.linalg.LinAlgWarning.html#scipy.linalg.LinAlgWarning
    "scipy.linalg.LinAlgWarning") | The warning emitted when a linear algebra related
    operation is close to fail conditions of the algorithm or loss of accuracy is
    expected. |'
  prefs: []
  type: TYPE_TB
- en: Eigenvalue Problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`eig`](generated/scipy.linalg.eig.html#scipy.linalg.eig "scipy.linalg.eig")(a[, b, left, right, overwrite_a, ...])
    | Solve an ordinary or generalized eigenvalue problem of a square matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigvals`](generated/scipy.linalg.eigvals.html#scipy.linalg.eigvals "scipy.linalg.eigvals")(a[, b, overwrite_a, check_finite, ...])
    | Compute eigenvalues from an ordinary or generalized eigenvalue problem. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigh`](generated/scipy.linalg.eigh.html#scipy.linalg.eigh "scipy.linalg.eigh")(a[, b, lower, eigvals_only, ...])
    | Solve a standard or generalized eigenvalue problem for a complex Hermitian or
    real symmetric matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigvalsh`](generated/scipy.linalg.eigvalsh.html#scipy.linalg.eigvalsh "scipy.linalg.eigvalsh")(a[, b, lower, overwrite_a, ...])
    | Solves a standard or generalized eigenvalue problem for a complex Hermitian
    or real symmetric matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eig_banded`](generated/scipy.linalg.eig_banded.html#scipy.linalg.eig_banded
    "scipy.linalg.eig_banded")(a_band[, lower, eigvals_only, ...]) | Solve real symmetric
    or complex Hermitian band matrix eigenvalue problem. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigvals_banded`](generated/scipy.linalg.eigvals_banded.html#scipy.linalg.eigvals_banded
    "scipy.linalg.eigvals_banded")(a_band[, lower, ...]) | Solve real symmetric or
    complex Hermitian band matrix eigenvalue problem. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigh_tridiagonal`](generated/scipy.linalg.eigh_tridiagonal.html#scipy.linalg.eigh_tridiagonal
    "scipy.linalg.eigh_tridiagonal")(d, e[, eigvals_only, ...]) | Solve eigenvalue
    problem for a real symmetric tridiagonal matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eigvalsh_tridiagonal`](generated/scipy.linalg.eigvalsh_tridiagonal.html#scipy.linalg.eigvalsh_tridiagonal
    "scipy.linalg.eigvalsh_tridiagonal")(d, e[, select, ...]) | Solve eigenvalue problem
    for a real symmetric tridiagonal matrix. |'
  prefs: []
  type: TYPE_TB
- en: Decompositions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`lu`](generated/scipy.linalg.lu.html#scipy.linalg.lu "scipy.linalg.lu")(a[, permute_l, overwrite_a, ...])
    | Compute LU decomposition of a matrix with partial pivoting. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lu_factor`](generated/scipy.linalg.lu_factor.html#scipy.linalg.lu_factor
    "scipy.linalg.lu_factor")(a[, overwrite_a, check_finite]) | Compute pivoted LU
    decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lu_solve`](generated/scipy.linalg.lu_solve.html#scipy.linalg.lu_solve "scipy.linalg.lu_solve")(lu_and_piv, b[, trans, ...])
    | Solve an equation system, a x = b, given the LU factorization of a |'
  prefs: []
  type: TYPE_TB
- en: '| [`svd`](generated/scipy.linalg.svd.html#scipy.linalg.svd "scipy.linalg.svd")(a[, full_matrices, compute_uv, ...])
    | Singular Value Decomposition. |'
  prefs: []
  type: TYPE_TB
- en: '| [`svdvals`](generated/scipy.linalg.svdvals.html#scipy.linalg.svdvals "scipy.linalg.svdvals")(a[, overwrite_a, check_finite])
    | Compute singular values of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagsvd`](generated/scipy.linalg.diagsvd.html#scipy.linalg.diagsvd "scipy.linalg.diagsvd")(s, M, N)
    | Construct the sigma matrix in SVD from singular values and size M, N. |'
  prefs: []
  type: TYPE_TB
- en: '| [`orth`](generated/scipy.linalg.orth.html#scipy.linalg.orth "scipy.linalg.orth")(A[, rcond])
    | Construct an orthonormal basis for the range of A using SVD |'
  prefs: []
  type: TYPE_TB
- en: '| [`null_space`](generated/scipy.linalg.null_space.html#scipy.linalg.null_space
    "scipy.linalg.null_space")(A[, rcond]) | Construct an orthonormal basis for the
    null space of A using SVD |'
  prefs: []
  type: TYPE_TB
- en: '| [`ldl`](generated/scipy.linalg.ldl.html#scipy.linalg.ldl "scipy.linalg.ldl")(A[, lower, hermitian, overwrite_a, ...])
    | Computes the LDLt or Bunch-Kaufman factorization of a symmetric/ hermitian matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`cholesky`](generated/scipy.linalg.cholesky.html#scipy.linalg.cholesky "scipy.linalg.cholesky")(a[, lower, overwrite_a, check_finite])
    | Compute the Cholesky decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cholesky_banded`](generated/scipy.linalg.cholesky_banded.html#scipy.linalg.cholesky_banded
    "scipy.linalg.cholesky_banded")(ab[, overwrite_ab, lower, ...]) | Cholesky decompose
    a banded Hermitian positive-definite matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`cho_factor`](generated/scipy.linalg.cho_factor.html#scipy.linalg.cho_factor
    "scipy.linalg.cho_factor")(a[, lower, overwrite_a, check_finite]) | Compute the
    Cholesky decomposition of a matrix, to use in cho_solve |'
  prefs: []
  type: TYPE_TB
- en: '| [`cho_solve`](generated/scipy.linalg.cho_solve.html#scipy.linalg.cho_solve
    "scipy.linalg.cho_solve")(c_and_lower, b[, overwrite_b, ...]) | Solve the linear
    equations A x = b, given the Cholesky factorization of A. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cho_solve_banded`](generated/scipy.linalg.cho_solve_banded.html#scipy.linalg.cho_solve_banded
    "scipy.linalg.cho_solve_banded")(cb_and_lower, b[, ...]) | Solve the linear equations
    `A x = b`, given the Cholesky factorization of the banded Hermitian `A`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polar`](generated/scipy.linalg.polar.html#scipy.linalg.polar "scipy.linalg.polar")(a[, side])
    | Compute the polar decomposition. |'
  prefs: []
  type: TYPE_TB
- en: '| [`qr`](generated/scipy.linalg.qr.html#scipy.linalg.qr "scipy.linalg.qr")(a[, overwrite_a, lwork, mode, pivoting, ...])
    | Compute QR decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`qr_multiply`](generated/scipy.linalg.qr_multiply.html#scipy.linalg.qr_multiply
    "scipy.linalg.qr_multiply")(a, c[, mode, pivoting, ...]) | Calculate the QR decomposition
    and multiply Q with a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`qr_update`](generated/scipy.linalg.qr_update.html#scipy.linalg.qr_update
    "scipy.linalg.qr_update")(Q, R, u, v[, overwrite_qruv, ...]) | Rank-k QR update
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`qr_delete`](generated/scipy.linalg.qr_delete.html#scipy.linalg.qr_delete
    "scipy.linalg.qr_delete")(Q, R, k, int p=1[, which, ...]) | QR downdate on row
    or column deletions |'
  prefs: []
  type: TYPE_TB
- en: '| [`qr_insert`](generated/scipy.linalg.qr_insert.html#scipy.linalg.qr_insert
    "scipy.linalg.qr_insert")(Q, R, u, k[, which, rcond, ...]) | QR update on row
    or column insertions |'
  prefs: []
  type: TYPE_TB
- en: '| [`rq`](generated/scipy.linalg.rq.html#scipy.linalg.rq "scipy.linalg.rq")(a[, overwrite_a, lwork, mode, check_finite])
    | Compute RQ decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`qz`](generated/scipy.linalg.qz.html#scipy.linalg.qz "scipy.linalg.qz")(A, B[, output, lwork, sort, overwrite_a, ...])
    | QZ decomposition for generalized eigenvalues of a pair of matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ordqz`](generated/scipy.linalg.ordqz.html#scipy.linalg.ordqz "scipy.linalg.ordqz")(A, B[, sort, output, overwrite_a, ...])
    | QZ decomposition for a pair of matrices with reordering. |'
  prefs: []
  type: TYPE_TB
- en: '| [`schur`](generated/scipy.linalg.schur.html#scipy.linalg.schur "scipy.linalg.schur")(a[, output, lwork, overwrite_a, sort, ...])
    | Compute Schur decomposition of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rsf2csf`](generated/scipy.linalg.rsf2csf.html#scipy.linalg.rsf2csf "scipy.linalg.rsf2csf")(T, Z[, check_finite])
    | Convert real Schur form to complex Schur form. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hessenberg`](generated/scipy.linalg.hessenberg.html#scipy.linalg.hessenberg
    "scipy.linalg.hessenberg")(a[, calc_q, overwrite_a, ...]) | Compute Hessenberg
    form of a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cdf2rdf`](generated/scipy.linalg.cdf2rdf.html#scipy.linalg.cdf2rdf "scipy.linalg.cdf2rdf")(w, v)
    | Converts complex eigenvalues `w` and eigenvectors `v` to real eigenvalues in
    a block diagonal form `wr` and the associated real eigenvectors `vr`, such that.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`cossin`](generated/scipy.linalg.cossin.html#scipy.linalg.cossin "scipy.linalg.cossin")(X[, p, q, separate, swap_sign, ...])
    | Compute the cosine-sine (CS) decomposition of an orthogonal/unitary matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.interpolative`](linalg.interpolative.html#module-scipy.linalg.interpolative
    "scipy.linalg.interpolative") – Interpolative matrix decompositions'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`expm`](generated/scipy.linalg.expm.html#scipy.linalg.expm "scipy.linalg.expm")(A)
    | Compute the matrix exponential of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logm`](generated/scipy.linalg.logm.html#scipy.linalg.logm "scipy.linalg.logm")(A[, disp])
    | Compute matrix logarithm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosm`](generated/scipy.linalg.cosm.html#scipy.linalg.cosm "scipy.linalg.cosm")(A)
    | Compute the matrix cosine. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinm`](generated/scipy.linalg.sinm.html#scipy.linalg.sinm "scipy.linalg.sinm")(A)
    | Compute the matrix sine. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanm`](generated/scipy.linalg.tanm.html#scipy.linalg.tanm "scipy.linalg.tanm")(A)
    | Compute the matrix tangent. |'
  prefs: []
  type: TYPE_TB
- en: '| [`coshm`](generated/scipy.linalg.coshm.html#scipy.linalg.coshm "scipy.linalg.coshm")(A)
    | Compute the hyperbolic matrix cosine. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinhm`](generated/scipy.linalg.sinhm.html#scipy.linalg.sinhm "scipy.linalg.sinhm")(A)
    | Compute the hyperbolic matrix sine. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanhm`](generated/scipy.linalg.tanhm.html#scipy.linalg.tanhm "scipy.linalg.tanhm")(A)
    | Compute the hyperbolic matrix tangent. |'
  prefs: []
  type: TYPE_TB
- en: '| [`signm`](generated/scipy.linalg.signm.html#scipy.linalg.signm "scipy.linalg.signm")(A[, disp])
    | Matrix sign function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrtm`](generated/scipy.linalg.sqrtm.html#scipy.linalg.sqrtm "scipy.linalg.sqrtm")(A[, disp, blocksize])
    | Matrix square root. |'
  prefs: []
  type: TYPE_TB
- en: '| [`funm`](generated/scipy.linalg.funm.html#scipy.linalg.funm "scipy.linalg.funm")(A, func[, disp])
    | Evaluate a matrix function specified by a callable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm_frechet`](generated/scipy.linalg.expm_frechet.html#scipy.linalg.expm_frechet
    "scipy.linalg.expm_frechet")(A, E[, method, compute_expm, ...]) | Frechet derivative
    of the matrix exponential of A in the direction E. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm_cond`](generated/scipy.linalg.expm_cond.html#scipy.linalg.expm_cond
    "scipy.linalg.expm_cond")(A[, check_finite]) | Relative condition number of the
    matrix exponential in the Frobenius norm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fractional_matrix_power`](generated/scipy.linalg.fractional_matrix_power.html#scipy.linalg.fractional_matrix_power
    "scipy.linalg.fractional_matrix_power")(A, t) | Compute the fractional power of
    a matrix. |'
  prefs: []
  type: TYPE_TB
- en: Matrix Equation Solvers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`solve_sylvester`](generated/scipy.linalg.solve_sylvester.html#scipy.linalg.solve_sylvester
    "scipy.linalg.solve_sylvester")(a, b, q) | Computes a solution (X) to the Sylvester
    equation \(AX + XB = Q\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_continuous_are`](generated/scipy.linalg.solve_continuous_are.html#scipy.linalg.solve_continuous_are
    "scipy.linalg.solve_continuous_are")(a, b, q, r[, e, s, ...]) | Solves the continuous-time
    algebraic Riccati equation (CARE). |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_discrete_are`](generated/scipy.linalg.solve_discrete_are.html#scipy.linalg.solve_discrete_are
    "scipy.linalg.solve_discrete_are")(a, b, q, r[, e, s, balanced]) | Solves the
    discrete-time algebraic Riccati equation (DARE). |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_continuous_lyapunov`](generated/scipy.linalg.solve_continuous_lyapunov.html#scipy.linalg.solve_continuous_lyapunov
    "scipy.linalg.solve_continuous_lyapunov")(a, q) | Solves the continuous Lyapunov
    equation \(AX + XA^H = Q\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`solve_discrete_lyapunov`](generated/scipy.linalg.solve_discrete_lyapunov.html#scipy.linalg.solve_discrete_lyapunov
    "scipy.linalg.solve_discrete_lyapunov")(a, q[, method]) | Solves the discrete
    Lyapunov equation \(AXA^H - X + Q = 0\). |'
  prefs: []
  type: TYPE_TB
- en: Sketches and Random Projections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`clarkson_woodruff_transform`](generated/scipy.linalg.clarkson_woodruff_transform.html#scipy.linalg.clarkson_woodruff_transform
    "scipy.linalg.clarkson_woodruff_transform")(input_matrix, ...) | Applies a Clarkson-Woodruff
    Transform/sketch to the input matrix. |'
  prefs: []
  type: TYPE_TB
- en: Special Matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`block_diag`](generated/scipy.linalg.block_diag.html#scipy.linalg.block_diag
    "scipy.linalg.block_diag")(*arrs) | Create a block diagonal matrix from provided
    arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`circulant`](generated/scipy.linalg.circulant.html#scipy.linalg.circulant
    "scipy.linalg.circulant")(c) | Construct a circulant matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`companion`](generated/scipy.linalg.companion.html#scipy.linalg.companion
    "scipy.linalg.companion")(a) | Create a companion matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`convolution_matrix`](generated/scipy.linalg.convolution_matrix.html#scipy.linalg.convolution_matrix
    "scipy.linalg.convolution_matrix")(a, n[, mode]) | Construct a convolution matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dft`](generated/scipy.linalg.dft.html#scipy.linalg.dft "scipy.linalg.dft")(n[, scale])
    | Discrete Fourier transform matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fiedler`](generated/scipy.linalg.fiedler.html#scipy.linalg.fiedler "scipy.linalg.fiedler")(a)
    | Returns a symmetric Fiedler matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`fiedler_companion`](generated/scipy.linalg.fiedler_companion.html#scipy.linalg.fiedler_companion
    "scipy.linalg.fiedler_companion")(a) | Returns a Fiedler companion matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`hadamard`](generated/scipy.linalg.hadamard.html#scipy.linalg.hadamard "scipy.linalg.hadamard")(n[, dtype])
    | Construct an Hadamard matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hankel`](generated/scipy.linalg.hankel.html#scipy.linalg.hankel "scipy.linalg.hankel")(c[, r])
    | Construct a Hankel matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`helmert`](generated/scipy.linalg.helmert.html#scipy.linalg.helmert "scipy.linalg.helmert")(n[, full])
    | Create an Helmert matrix of order *n*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hilbert`](generated/scipy.linalg.hilbert.html#scipy.linalg.hilbert "scipy.linalg.hilbert")(n)
    | Create a Hilbert matrix of order *n*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invhilbert`](generated/scipy.linalg.invhilbert.html#scipy.linalg.invhilbert
    "scipy.linalg.invhilbert")(n[, exact]) | Compute the inverse of the Hilbert matrix
    of order *n*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`leslie`](generated/scipy.linalg.leslie.html#scipy.linalg.leslie "scipy.linalg.leslie")(f, s)
    | Create a Leslie matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pascal`](generated/scipy.linalg.pascal.html#scipy.linalg.pascal "scipy.linalg.pascal")(n[, kind, exact])
    | Returns the n x n Pascal matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invpascal`](generated/scipy.linalg.invpascal.html#scipy.linalg.invpascal
    "scipy.linalg.invpascal")(n[, kind, exact]) | Returns the inverse of the n x n
    Pascal matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`toeplitz`](generated/scipy.linalg.toeplitz.html#scipy.linalg.toeplitz "scipy.linalg.toeplitz")(c[, r])
    | Construct a Toeplitz matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tri`](generated/scipy.linalg.tri.html#scipy.linalg.tri "scipy.linalg.tri")(N[, M, k, dtype])
    |'
  prefs: []
  type: TYPE_TB
- en: Deprecated since version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Low-level routines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`get_blas_funcs`](generated/scipy.linalg.get_blas_funcs.html#scipy.linalg.get_blas_funcs
    "scipy.linalg.get_blas_funcs")(names[, arrays, dtype, ilp64]) | Return available
    BLAS function objects from names. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_lapack_funcs`](generated/scipy.linalg.get_lapack_funcs.html#scipy.linalg.get_lapack_funcs
    "scipy.linalg.get_lapack_funcs")(names[, arrays, dtype, ilp64]) | Return available
    LAPACK function objects from names. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_best_blas_type`](generated/scipy.linalg.find_best_blas_type.html#scipy.linalg.find_best_blas_type
    "scipy.linalg.find_best_blas_type")([arrays, dtype]) | Find best-matching BLAS/LAPACK
    type. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.blas`](linalg.blas.html#module-scipy.linalg.blas "scipy.linalg.blas")
    – Low-level BLAS functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.lapack`](linalg.lapack.html#module-scipy.linalg.lapack "scipy.linalg.lapack")
    – Low-level LAPACK functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.cython_blas`](linalg.cython_blas.html#module-scipy.linalg.cython_blas
    "scipy.linalg.cython_blas") – Low-level BLAS functions for Cython'
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.cython_lapack`](linalg.cython_lapack.html#module-scipy.linalg.cython_lapack
    "scipy.linalg.cython_lapack") – Low-level LAPACK functions for Cython'
  prefs: []
  type: TYPE_NORMAL
