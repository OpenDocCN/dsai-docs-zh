["```py\nclass sympy.plotting.plot.Plot(*args, title=None, xlabel=None, ylabel=None, zlabel=None, aspect_ratio='auto', xlim=None, ylim=None, axis_center='auto', axis=True, xscale='linear', yscale='linear', legend=False, autoscale=True, margin=0, annotations=None, markers=None, rectangles=None, fill=None, backend='default', size=None, **kwargs)\n```", "```py\nproperty annotations\n```", "```py\nappend(arg)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.plotting import plot\n>>> x = symbols('x')\n>>> p1 = plot(x*x, show=False)\n>>> p2 = plot(x, show=False)\n>>> p1.append(p2[0])\n>>> p1\nPlot object containing:\n[0]: cartesian line: x**2 for x over (-10.0, 10.0)\n[1]: cartesian line: x for x over (-10.0, 10.0)\n>>> p1.show() \n```", "```py\nextend(arg)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.plotting import plot\n>>> x = symbols('x')\n>>> p1 = plot(x**2, show=False)\n>>> p2 = plot(x, -x, show=False)\n>>> p1.extend(p2)\n>>> p1\nPlot object containing:\n[0]: cartesian line: x**2 for x over (-10.0, 10.0)\n[1]: cartesian line: x for x over (-10.0, 10.0)\n[2]: cartesian line: -x for x over (-10.0, 10.0)\n>>> p1.show() \n```", "```py\nproperty fill\n```", "```py\nproperty markers\n```", "```py\nproperty rectangles\n```", "```py\nsympy.plotting.plot.plot(*args, show=True, **kwargs)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.plotting import plot\n>>> x = symbols('x') \n```", "```py\n>>> plot(x**2, (x, -5, 5))\nPlot object containing:\n[0]: cartesian line: x**2 for x over (-5.0, 5.0) \n```", "```py\n>>> plot(x, x**2, x**3, (x, -5, 5))\nPlot object containing:\n[0]: cartesian line: x for x over (-5.0, 5.0)\n[1]: cartesian line: x**2 for x over (-5.0, 5.0)\n[2]: cartesian line: x**3 for x over (-5.0, 5.0) \n```", "```py\n>>> plot((x**2, (x, -6, 6)), (x, (x, -5, 5)))\nPlot object containing:\n[0]: cartesian line: x**2 for x over (-6.0, 6.0)\n[1]: cartesian line: x for x over (-5.0, 5.0) \n```", "```py\n>>> plot(x**2, adaptive=False, n=400)\nPlot object containing:\n[0]: cartesian line: x**2 for x over (-10.0, 10.0) \n```", "```py\nsympy.plotting.plot.plot_parametric(*args, show=True, **kwargs)\n```", "```py\n>>> from sympy import plot_parametric, symbols, cos, sin\n>>> u = symbols('u') \n```", "```py\n>>> plot_parametric((cos(u), sin(u)), (u, -5, 5))\nPlot object containing:\n[0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0) \n```", "```py\n>>> plot_parametric((cos(u), sin(u)), (u, cos(u)), (u, -10, 10))\nPlot object containing:\n[0]: parametric cartesian line: (cos(u), sin(u)) for u over (-10.0, 10.0)\n[1]: parametric cartesian line: (u, cos(u)) for u over (-10.0, 10.0) \n```", "```py\n>>> plot_parametric((cos(u), sin(u), (u, -5, 5)),\n...     (cos(u), u, (u, -5, 5)))\nPlot object containing:\n[0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0)\n[1]: parametric cartesian line: (cos(u), u) for u over (-5.0, 5.0) \n```", "```py\n>>> from sympy import pi\n>>> expr1 = (u, cos(2*pi*u)/2 + 1/2)\n>>> expr2 = (u, sin(2*pi*u)/2 + 1/2)\n>>> p = plot_parametric(expr1, expr2, (u, 0, 1), line_color='blue') \n```", "```py\n>>> p[0].line_color = 'red'\n>>> p.show() \n```", "```py\nsympy.plotting.plot.plot3d(*args, show=True, **kwargs)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.plotting import plot3d\n>>> x, y = symbols('x y') \n```", "```py\n>>> plot3d(x*y, (x, -5, 5), (y, -5, 5))\nPlot object containing:\n[0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0) \n```", "```py\n>>> plot3d(x*y, -x*y, (x, -5, 5), (y, -5, 5))\nPlot object containing:\n[0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n[1]: cartesian surface: -x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0) \n```", "```py\n>>> plot3d((x**2 + y**2, (x, -5, 5), (y, -5, 5)),\n...     (x*y, (x, -3, 3), (y, -3, 3)))\nPlot object containing:\n[0]: cartesian surface: x**2 + y**2 for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n[1]: cartesian surface: x*y for x over (-3.0, 3.0) and y over (-3.0, 3.0) \n```", "```py\nsympy.plotting.plot.plot3d_parametric_line(*args, show=True, **kwargs)\n```", "```py\n>>> from sympy import symbols, cos, sin\n>>> from sympy.plotting import plot3d_parametric_line\n>>> u = symbols('u') \n```", "```py\n>>> plot3d_parametric_line(cos(u), sin(u), u, (u, -5, 5))\nPlot object containing:\n[0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0) \n```", "```py\n>>> plot3d_parametric_line((cos(u), sin(u), u, (u, -5, 5)),\n...     (sin(u), u**2, u, (u, -5, 5)))\nPlot object containing:\n[0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0)\n[1]: 3D parametric cartesian line: (sin(u), u**2, u) for u over (-5.0, 5.0) \n```", "```py\nsympy.plotting.plot.plot3d_parametric_surface(*args, show=True, **kwargs)\n```", "```py\n>>> from sympy import symbols, cos, sin\n>>> from sympy.plotting import plot3d_parametric_surface\n>>> u, v = symbols('u v') \n```", "```py\n>>> plot3d_parametric_surface(cos(u + v), sin(u - v), u - v,\n...     (u, -5, 5), (v, -5, 5))\nPlot object containing:\n[0]: parametric cartesian surface: (cos(u + v), sin(u - v), u - v) for u over (-5.0, 5.0) and v over (-5.0, 5.0) \n```", "```py\nsympy.plotting.plot_implicit.plot_implicit(expr, x_var=None, y_var=None, adaptive=True, depth=0, n=300, line_color='blue', show=True, **kwargs)\n```", "```py\n>>> from sympy import plot_implicit, symbols, Eq, And\n>>> x, y = symbols('x y') \n```", "```py\n>>> p1 = plot_implicit(Eq(x**2 + y**2, 5)) \n```", "```py\n>>> p2 = plot_implicit(\n...     Eq(x**2 + y**2, 3), (x, -3, 3), (y, -3, 3)) \n```", "```py\n>>> p3 = plot_implicit(\n...     Eq(x**2 + y**2, 5), (x, -4, 4), (y, -4, 4), depth = 2) \n```", "```py\n>>> p4 = plot_implicit(\n...     Eq(x**2 + y**2, 5), (x, -5, 5), (y, -2, 2),\n...     adaptive=False) \n```", "```py\n>>> p5 = plot_implicit(\n...     Eq(x**2 + y**2, 5), (x, -5, 5), (y, -2, 2),\n...     adaptive=False, n=400) \n```", "```py\n>>> p6 = plot_implicit(y > x**2) \n```", "```py\n>>> p7 = plot_implicit(And(y > x, y > -x)) \n```", "```py\n>>> p8 = plot_implicit(y - 1, y_var=y)\n>>> p9 = plot_implicit(x - 1, x_var=x) \n```", "```py\nclass sympy.plotting.plot.PlotGrid(nrows, ncolumns, *args, show=True, size=None, **kwargs)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.plotting import plot, plot3d, PlotGrid\n>>> x, y = symbols('x, y')\n>>> p1 = plot(x, x**2, x**3, (x, -5, 5))\n>>> p2 = plot((x**2, (x, -6, 6)), (x, (x, -5, 5)))\n>>> p3 = plot(x**3, (x, -5, 5))\n>>> p4 = plot3d(x*y, (x, -5, 5), (y, -5, 5)) \n```", "```py\n>>> PlotGrid(2, 1, p1, p2)\nPlotGrid object containing:\nPlot[0]:Plot object containing:\n[0]: cartesian line: x for x over (-5.0, 5.0)\n[1]: cartesian line: x**2 for x over (-5.0, 5.0)\n[2]: cartesian line: x**3 for x over (-5.0, 5.0)\nPlot[1]:Plot object containing:\n[0]: cartesian line: x**2 for x over (-6.0, 6.0)\n[1]: cartesian line: x for x over (-5.0, 5.0) \n```", "```py\n>>> PlotGrid(1, 3, p2, p3, p4)\nPlotGrid object containing:\nPlot[0]:Plot object containing:\n[0]: cartesian line: x**2 for x over (-6.0, 6.0)\n[1]: cartesian line: x for x over (-5.0, 5.0)\nPlot[1]:Plot object containing:\n[0]: cartesian line: x**3 for x over (-5.0, 5.0)\nPlot[2]:Plot object containing:\n[0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0) \n```", "```py\n>>> PlotGrid(2, 2, p1, p2, p3, p4)\nPlotGrid object containing:\nPlot[0]:Plot object containing:\n[0]: cartesian line: x for x over (-5.0, 5.0)\n[1]: cartesian line: x**2 for x over (-5.0, 5.0)\n[2]: cartesian line: x**3 for x over (-5.0, 5.0)\nPlot[1]:Plot object containing:\n[0]: cartesian line: x**2 for x over (-6.0, 6.0)\n[1]: cartesian line: x for x over (-5.0, 5.0)\nPlot[2]:Plot object containing:\n[0]: cartesian line: x**3 for x over (-5.0, 5.0)\nPlot[3]:Plot object containing:\n[0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0) \n```", "```py\nclass sympy.plotting.series.BaseSeries(*args, **kwargs)\n```", "```py\neval_color_func(*args)\n```", "```py\nproperty expr\n```", "```py\nget_data()\n```", "```py\nget_label(use_latex=False, wrapper='$%s$')\n```", "```py\nproperty n\n```", "```py\nproperty params\n```", "```py\nclass sympy.plotting.series.Line2DBaseSeries(**kwargs)\n```", "```py\nget_data()\n```", "```py\nclass sympy.plotting.series.LineOver1DRangeSeries(expr, var_start_end, label='', **kwargs)\n```", "```py\nget_points()\n```", "```py\nclass sympy.plotting.series.Parametric2DLineSeries(expr_x, expr_y, var_start_end, label='', **kwargs)\n```", "```py\nclass sympy.plotting.series.Line3DBaseSeries\n```", "```py\nclass sympy.plotting.series.Parametric3DLineSeries(expr_x, expr_y, expr_z, var_start_end, label='', **kwargs)\n```", "```py\nclass sympy.plotting.series.SurfaceBaseSeries(*args, **kwargs)\n```", "```py\nclass sympy.plotting.series.SurfaceOver2DRangeSeries(expr, var_start_end_x, var_start_end_y, label='', **kwargs)\n```", "```py\nget_data()\n```", "```py\nget_meshes()\n```", "```py\nclass sympy.plotting.series.ParametricSurfaceSeries(expr_x, expr_y, expr_z, var_start_end_u, var_start_end_v, label='', **kwargs)\n```", "```py\nget_data()\n```", "```py\nget_meshes()\n```", "```py\nclass sympy.plotting.series.ImplicitSeries(expr, var_start_end_x, var_start_end_y, label='', **kwargs)\n```", "```py\nget_data()\n```", "```py\nget_label(use_latex=False, wrapper='$%s$')\n```", "```py\nclass sympy.plotting.plot.MatplotlibBackend(*series, **kwargs)\n```", "```py\nstatic get_segments(x, y, z=None)\n```", "```py\nprocess_series()\n```", "```py\nclass sympy.plotting.plot.TextBackend(*args, **kwargs)\n```", "```py\n>>> from sympy import var\n>>> from sympy.plotting.pygletplot import PygletPlot as Plot\n>>> var('x y z')\n>>> Plot(x*y**3-y*x**3) \n```", "```py\n$ python -i examples/pyglet_plotting.py \n```", "```py\n>>> Plot(1, 'mode=spherical; color=zfade4') \n```", "```py\n>>> Plot(x**2) # implies [x,-5,5,100]\n>>> Plot(x**2, [], []) # [x,-1,1,40], [y,-1,1,40]\n>>> Plot(x**2-y**2, [100], [100]) # [x,-1,1,100], [y,-1,1,100]\n>>> Plot(x**2, [x,-13,13,100])\n>>> Plot(x**2, [-13,13]) # [x,-13,13,100]\n>>> Plot(x**2, [x,-13,13]) # [x,-13,13,100]\n>>> Plot(1*x, [], [x], 'mode=cylindrical') # [unbound_theta,0,2*Pi,40], [x,-1,1,20] \n```", "```py\n>>> p = Plot(visible=False)\n>>> f = x**2\n>>> p[1] = f\n>>> p[2] = f.diff(x)\n>>> p[3] = f.diff(x).diff(x)\n>>> p\n[1]: x**2, 'mode=cartesian'\n[2]: 2*x, 'mode=cartesian'\n[3]: 2, 'mode=cartesian'\n>>> p.show()\n>>> p.clear()\n>>> p\n<blank plot>\n>>> p[1] =  x**2+y**2\n>>> p[1].style = 'solid'\n>>> p[2] = -x**2-y**2\n>>> p[2].style = 'wireframe'\n>>> p[1].color = z, (0.4,0.4,0.9), (0.9,0.4,0.4)\n>>> p[1].style = 'both'\n>>> p[2].style = 'both'\n>>> p.close() \n```", "```py\n>>> fz = x**2-y**2\n>>> Fx, Fy, Fz = fz.diff(x), fz.diff(y), 0\n>>> p[1] = fz, 'style=solid'\n>>> p[1].color = (Fx**2 + Fy**2 + Fz**2)**(0.5) \n```", "```py\n>>> p[1].color = (Fx**2 + Fy**2 + Fz**2)**(0.5), (0.1,0.1,0.9), (0.9,0.1,0.1) \n```", "```py\n>>> gradient = [ 0.0, (0.1,0.1,0.9), 0.3, (0.1,0.9,0.1),\n...              0.7, (0.9,0.9,0.1), 1.0, (1.0,0.0,0.0) ]\n>>> p[1].color = (Fx**2 + Fy**2 + Fz**2)**(0.5), gradient \n```", "```py\n>>> p[1].color = z,y,x, (0.4,0.4,0.4), (0.9,0.9,0.9) \n```", "```py\n>>> p[1].color = z,(0.4,0.9), y,(0.4,0.9), x,(0.4,0.9) \n```", "```py\n>>> from sympy import *\n>>> x,y = symbols('x y')\n>>> plot_implicit(Eq(x**2+y**2, 4)) \n```", "```py\nsympy.plotting.textplot.textplot(expr, a, b, W=55, H=21)\n```", "```py\n>>> from sympy import Symbol, sin\n>>> from sympy.plotting import textplot\n>>> t = Symbol('t')\n>>> textplot(sin(t)*t, 0, 15)\n 14 |                                                  ...\n |                                                     .\n |                                                 .\n |                                                      .\n |                                                .\n |                            ...\n |                           /   .               .\n |                          /\n |                         /      .\n |                        .        .            .\n1.5 |----.......--------------------------------------------\n |....       \\           .          .\n |            \\         /                      .\n |             ..      /             .\n |               \\    /                       .\n |                ....\n |                                    .\n |                                     .     .\n |\n |                                      .   .\n-11 |_______________________________________________________\n 0                          7.5                        15 \n```"]