["```py\nsympy.physics.vector.fieldfunctions.curl(vect, frame)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import curl\n>>> R = ReferenceFrame('R')\n>>> v1 = R[1]*R[2]*R.x + R[0]*R[2]*R.y + R[0]*R[1]*R.z\n>>> curl(v1, R)\n0\n>>> v2 = R[0]*R[1]*R[2]*R.x\n>>> curl(v2, R)\nR_x*R_y*R.y - R_x*R_z*R.z \n```", "```py\nsympy.physics.vector.fieldfunctions.divergence(vect, frame)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import divergence\n>>> R = ReferenceFrame('R')\n>>> v1 = R[0]*R[1]*R[2] * (R.x+R.y+R.z)\n>>> divergence(v1, R)\nR_x*R_y + R_x*R_z + R_y*R_z\n>>> v2 = 2*R[1]*R[2]*R.y\n>>> divergence(v2, R)\n2*R_z \n```", "```py\nsympy.physics.vector.fieldfunctions.gradient(scalar, frame)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import gradient\n>>> R = ReferenceFrame('R')\n>>> s1 = R[0]*R[1]*R[2]\n>>> gradient(s1, R)\nR_y*R_z*R.x + R_x*R_z*R.y + R_x*R_y*R.z\n>>> s2 = 5*R[0]**2*R[2]\n>>> gradient(s2, R)\n10*R_x*R_z*R.x + 5*R_x**2*R.z \n```", "```py\nsympy.physics.vector.fieldfunctions.scalar_potential(field, frame)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import scalar_potential, gradient\n>>> R = ReferenceFrame('R')\n>>> scalar_potential(R.z, R) == R[2]\nTrue\n>>> scalar_field = 2*R[0]**2*R[1]*R[2]\n>>> grad_field = gradient(scalar_field, R)\n>>> scalar_potential(grad_field, R)\n2*R_x**2*R_y*R_z \n```", "```py\nsympy.physics.vector.fieldfunctions.scalar_potential_difference(field, frame, point1, point2, origin)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, Point\n>>> from sympy.physics.vector import scalar_potential_difference\n>>> R = ReferenceFrame('R')\n>>> O = Point('O')\n>>> P = O.locatenew('P', R[0]*R.x + R[1]*R.y + R[2]*R.z)\n>>> vectfield = 4*R[0]*R[1]*R.x + 2*R[0]**2*R.y\n>>> scalar_potential_difference(vectfield, R, O, P, O)\n2*R_x**2*R_y\n>>> Q = O.locatenew('O', 3*R.x + R.y + 2*R.z)\n>>> scalar_potential_difference(vectfield, R, P, Q, O)\n-2*R_x**2*R_y + 18 \n```", "```py\nsympy.physics.vector.fieldfunctions.is_conservative(field)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import is_conservative\n>>> R = ReferenceFrame('R')\n>>> is_conservative(R[1]*R[2]*R.x + R[0]*R[2]*R.y + R[0]*R[1]*R.z)\nTrue\n>>> is_conservative(R[2] * R.y)\nFalse \n```", "```py\nsympy.physics.vector.fieldfunctions.is_solenoidal(field)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame\n>>> from sympy.physics.vector import is_solenoidal\n>>> R = ReferenceFrame('R')\n>>> is_solenoidal(R[1]*R[2]*R.x + R[0]*R[2]*R.y + R[0]*R[1]*R.z)\nTrue\n>>> is_solenoidal(R[1] * R.y)\nFalse \n```"]