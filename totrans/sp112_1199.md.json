["```py\nscipy.stats.studentized_range = <scipy.stats._continuous_distns.studentized_range_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import studentized_range\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> k, df = 3, 10\n>>> mean, var, skew, kurt = studentized_range.stats(k, df, moments='mvsk') \n```", "```py\n>>> x = np.linspace(studentized_range.ppf(0.01, k, df),\n...                 studentized_range.ppf(0.99, k, df), 100)\n>>> ax.plot(x, studentized_range.pdf(x, k, df),\n...         'r-', lw=5, alpha=0.6, label='studentized_range pdf') \n```", "```py\n>>> rv = studentized_range(k, df)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf') \n```", "```py\n>>> vals = studentized_range.ppf([0.001, 0.5, 0.999], k, df)\n>>> np.allclose([0.001, 0.5, 0.999], studentized_range.cdf(vals, k, df))\nTrue \n```", "```py\n>>> a, b = studentized_range.ppf([0, .999], k, df)\n>>> a, b\n0, 7.41058083802274 \n```", "```py\n>>> from scipy.interpolate import interp1d\n>>> rng = np.random.default_rng()\n>>> xs = np.linspace(a, b, 50)\n>>> cdf = studentized_range.cdf(xs, k, df)\n# Create an interpolant of the inverse CDF\n>>> ppf = interp1d(cdf, xs, fill_value='extrapolate')\n# Perform inverse transform sampling using the interpolant\n>>> r = ppf(rng.uniform(size=1000)) \n```", "```py\n>>> ax.hist(r, density=True, histtype='stepfilled', alpha=0.2)\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```"]