- en: scipy.signal.dlsim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.dlsim.html#scipy.signal.dlsim](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.dlsim.html#scipy.signal.dlsim)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Simulate output of a discrete-time linear system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system**tuple of array_like or instance of [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti")'
  prefs: []
  type: TYPE_NORMAL
- en: 'A tuple describing the system. The following gives the number of elements in
    the tuple and the interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: (instance of [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti"))'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '3: (num, den, dt)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '4: (zeros, poles, gain, dt)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '5: (A, B, C, D, dt)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**u**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An input array describing the input at each time *t* (interpolation is assumed
    between given times). If there are multiple inputs, then each column of the rank-2
    array represents an input.
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The time steps at which the input is defined. If *t* is given, it must be the
    same length as *u*, and the final value in *t* determines the number of steps
    returned in the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**x0**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The initial conditions on the state vector (zero by default).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Time values for the output, as a 1-D array.
  prefs: []
  type: TYPE_NORMAL
- en: '**yout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: System response, as a 1-D array.
  prefs: []
  type: TYPE_NORMAL
- en: '**xout**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Time-evolution of the state-vector. Only generated if the input is a [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace") system.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lsim`](scipy.signal.lsim.html#scipy.signal.lsim "scipy.signal.lsim"), [`dstep`](scipy.signal.dstep.html#scipy.signal.dstep
    "scipy.signal.dstep"), [`dimpulse`](scipy.signal.dimpulse.html#scipy.signal.dimpulse
    "scipy.signal.dimpulse"), [`cont2discrete`](scipy.signal.cont2discrete.html#scipy.signal.cont2discrete
    "scipy.signal.cont2discrete")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple integrator transfer function with a discrete time step of 1.0 could
    be implemented as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
