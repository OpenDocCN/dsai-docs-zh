- en: Object Blurring using Ultralytics YOLOv8 ðŸš€
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[`docs.ultralytics.com/guides/object-blurring/`](https://docs.ultralytics.com/guides/object-blurring/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is Object Blurring?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Object blurring with [Ultralytics YOLOv8](https://github.com/ultralytics/ultralytics/)
    involves applying a blurring effect to specific detected objects in an image or
    video. This can be achieved using the YOLOv8 model capabilities to identify and
    manipulate objects within a given scene.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/ydGdibB5Mds`](https://www.youtube.com/embed/ydGdibB5Mds)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Object Blurring using Ultralytics YOLOv8'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Object Blurring?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Privacy Protection**: Object blurring is an effective tool for safeguarding
    privacy by concealing sensitive or personally identifiable information in images
    or videos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selective Focus**: YOLOv8 allows for selective blurring, enabling users to
    target specific objects, ensuring a balance between privacy and retaining relevant
    visual information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time Processing**: YOLOv8''s efficiency enables object blurring in real-time,
    making it suitable for applications requiring on-the-fly privacy enhancements
    in dynamic environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object Blurring using YOLOv8 Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Arguments `model.predict`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `source` | `str` | `''ultralytics/assets''` | source directory for images
    or videos |'
  prefs: []
  type: TYPE_TB
- en: '| `conf` | `float` | `0.25` | object confidence threshold for detection |'
  prefs: []
  type: TYPE_TB
- en: '| `iou` | `float` | `0.7` | intersection over union (IoU) threshold for NMS
    |'
  prefs: []
  type: TYPE_TB
- en: '| `imgsz` | `int or tuple` | `640` | image size as scalar or (h, w) list, i.e.
    (640, 480) |'
  prefs: []
  type: TYPE_TB
- en: '| `half` | `bool` | `False` | use half precision (FP16) |'
  prefs: []
  type: TYPE_TB
- en: '| `device` | `None or str` | `None` | device to run on, i.e. cuda device=0/1/2/3
    or device=cpu |'
  prefs: []
  type: TYPE_TB
- en: '| `max_det` | `int` | `300` | maximum number of detections per image |'
  prefs: []
  type: TYPE_TB
- en: '| `vid_stride` | `bool` | `False` | video frame-rate stride |'
  prefs: []
  type: TYPE_TB
- en: '| `stream_buffer` | `bool` | `False` | buffer all streaming frames (True) or
    return the most recent frame (False) |'
  prefs: []
  type: TYPE_TB
- en: '| `visualize` | `bool` | `False` | visualize model features |'
  prefs: []
  type: TYPE_TB
- en: '| `augment` | `bool` | `False` | apply image augmentation to prediction sources
    |'
  prefs: []
  type: TYPE_TB
- en: '| `agnostic_nms` | `bool` | `False` | class-agnostic NMS |'
  prefs: []
  type: TYPE_TB
- en: '| `classes` | `list[int]` | `None` | filter results by class, i.e. classes=0,
    or classes=[0,2,3] |'
  prefs: []
  type: TYPE_TB
- en: '| `retina_masks` | `bool` | `False` | use high-resolution segmentation masks
    |'
  prefs: []
  type: TYPE_TB
- en: '| `embed` | `list[int]` | `None` | return feature vectors/embeddings from given
    layers |'
  prefs: []
  type: TYPE_TB
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is object blurring with Ultralytics YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Object blurring with [Ultralytics YOLOv8](https://github.com/ultralytics/ultralytics/)
    involves automatically detecting and applying a blurring effect to specific objects
    in images or videos. This technique enhances privacy by concealing sensitive information
    while retaining relevant visual data. YOLOv8's real-time processing capabilities
    make it suitable for applications requiring immediate privacy protection and selective
    focus adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: How can I implement real-time object blurring using YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To implement real-time object blurring with YOLOv8, follow the provided Python
    example. This involves using YOLOv8 for object detection and OpenCV for applying
    the blur effect. Here''s a simplified version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What are the benefits of using Ultralytics YOLOv8 for object blurring?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ultralytics YOLOv8 offers several advantages for object blurring:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Privacy Protection**: Effectively obscure sensitive or identifiable information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selective Focus**: Target specific objects for blurring, maintaining essential
    visual content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time Processing**: Execute object blurring efficiently in dynamic environments,
    suitable for instant privacy enhancements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more detailed applications, check the advantages of object blurring section.
  prefs: []
  type: TYPE_NORMAL
- en: Can I use Ultralytics YOLOv8 to blur faces in a video for privacy reasons?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes, Ultralytics YOLOv8 can be configured to detect and blur faces in videos
    to protect privacy. By training or using a pre-trained model to specifically recognize
    faces, the detection results can be processed with OpenCV to apply a blur effect.
    Refer to our guide on [object detection with YOLOv8](https://docs.ultralytics.com/models/yolov8)
    and modify the code to target face detection.
  prefs: []
  type: TYPE_NORMAL
- en: How does YOLOv8 compare to other object detection models like Faster R-CNN for
    object blurring?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8 typically outperforms models like Faster R-CNN in terms of
    speed, making it more suitable for real-time applications. While both models offer
    accurate detection, YOLOv8's architecture is optimized for rapid inference, which
    is critical for tasks like real-time object blurring. Learn more about the technical
    differences and performance metrics in our [YOLOv8 documentation](https://docs.ultralytics.com/models/yolov8).
  prefs: []
  type: TYPE_NORMAL
