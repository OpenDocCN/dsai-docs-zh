["```py\nscipy.stats.levy_l = <scipy.stats._continuous_distns.levy_l_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import levy_l\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> mean, var, skew, kurt = levy_l.stats(moments='mvsk') \n```", "```py\n>>> # `levy_l` is very heavy-tailed.\n>>> # To show a nice plot, let's cut off the lower 40 percent.\n>>> a, b = levy_l.ppf(0.4), levy_l.ppf(1)\n>>> x = np.linspace(a, b, 100)\n>>> ax.plot(x, levy_l.pdf(x),\n...        'r-', lw=5, alpha=0.6, label='levy_l pdf') \n```", "```py\n>>> rv = levy_l()\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf') \n```", "```py\n>>> vals = levy_l.ppf([0.001, 0.5, 0.999])\n>>> np.allclose([0.001, 0.5, 0.999], levy_l.cdf(vals))\nTrue \n```", "```py\n>>> r = levy_l.rvs(size=1000) \n```", "```py\n>>> # manual binning to ignore the tail\n>>> bins = np.concatenate(([np.min(r)], np.linspace(a, b, 20)))\n>>> ax.hist(r, bins=bins, density=True, histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim([x[0], x[-1]])\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```"]