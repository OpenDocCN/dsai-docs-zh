- en: pandas.pivot_table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html](https://pandas.pydata.org/docs/reference/api/pandas.pivot_table.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a spreadsheet-style pivot table as a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The levels in the pivot table will be stored in MultiIndex objects (hierarchical
    indexes) on the index and columns of the result DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: '**values**list-like or scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Column or columns to aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: '**index**column, Grouper, array, or list of the previous'
  prefs: []
  type: TYPE_NORMAL
- en: Keys to group by on the pivot table index. If a list is passed, it can contain
    any of the other types (except list). If an array is passed, it must be the same
    length as the data and will be used in the same manner as column values.
  prefs: []
  type: TYPE_NORMAL
- en: '**columns**column, Grouper, array, or list of the previous'
  prefs: []
  type: TYPE_NORMAL
- en: Keys to group by on the pivot table column. If a list is passed, it can contain
    any of the other types (except list). If an array is passed, it must be the same
    length as the data and will be used in the same manner as column values.
  prefs: []
  type: TYPE_NORMAL
- en: '**aggfunc**function, list of functions, dict, default “mean”'
  prefs: []
  type: TYPE_NORMAL
- en: If a list of functions is passed, the resulting pivot table will have hierarchical
    columns whose top level are the function names (inferred from the function objects
    themselves). If a dict is passed, the key is column to aggregate and the value
    is function or list of functions. If `margin=True`, aggfunc will be used to calculate
    the partial aggregates.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**scalar, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Value to replace missing values with (in the resulting pivot table, after aggregation).
  prefs: []
  type: TYPE_NORMAL
- en: '**margins**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If `margins=True`, special `All` columns and rows will be added with partial
    group aggregates across the categories on the rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**dropna**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Do not include columns whose entries are all NaN. If True, rows with a NaN value
    in any column will be omitted before computing margins.
  prefs: []
  type: TYPE_NORMAL
- en: '**margins_name**str, default ‘All’'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the row / column that will contain the totals when margins is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**observed**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: 'This only applies if any of the groupers are Categoricals. If True: only show
    observed values for categorical groupers. If False: show all values for categorical
    groupers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.2.0: The default value of `False` is deprecated
    and will change to `True` in a future version of pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies if the result should be sorted.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: An Excel style pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.pivot`](pandas.DataFrame.pivot.html#pandas.DataFrame.pivot "pandas.DataFrame.pivot")'
  prefs: []
  type: TYPE_NORMAL
- en: Pivot without aggregation that can handle non-numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.melt`](pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")'
  prefs: []
  type: TYPE_NORMAL
- en: Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set.
  prefs: []
  type: TYPE_NORMAL
- en: '[`wide_to_long`](pandas.wide_to_long.html#pandas.wide_to_long "pandas.wide_to_long")'
  prefs: []
  type: TYPE_NORMAL
- en: Wide panel to long format. Less flexible but more user-friendly than melt.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Reference [the user guide](../../user_guide/reshaping.html#reshaping-pivot)
    for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This first example aggregates values by taking the sum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also fill missing values using the fill_value parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The next example aggregates by taking the mean across multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also calculate multiple types of aggregations for any given value column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
