["```py\nclass sympy.functions.combinatorial.numbers.bell(n, k_sym=None, symbols=None)\n```", "```py\n>>> from sympy import bell, Symbol, symbols \n```", "```py\n>>> [bell(n) for n in range(11)]\n[1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]\n>>> bell(30)\n846749014511809332450147\n>>> bell(4, Symbol('t'))\nt**4 + 6*t**3 + 7*t**2 + t\n>>> bell(6, 2, symbols('x:6')[1:])\n6*x1*x5 + 15*x2*x4 + 10*x3**2 \n```", "```py\nclass sympy.functions.combinatorial.numbers.bernoulli(n, x=None)\n```", "```py\n>>> from sympy import bernoulli\n>>> from sympy.abc import x\n>>> [bernoulli(n) for n in range(11)]\n[1, 1/2, 1/6, 0, -1/30, 0, 1/42, 0, -1/30, 0, 5/66]\n>>> bernoulli(1000001)\n0\n>>> bernoulli(3, x)\nx**3 - 3*x**2/2 + x/2 \n```", "```py\nclass sympy.functions.combinatorial.factorials.binomial(n, k)\n```", "```py\n>>> from sympy import Symbol, Rational, binomial, expand_func\n>>> n = Symbol('n', integer=True, positive=True) \n```", "```py\n>>> binomial(15, 8)\n6435 \n```", "```py\n>>> binomial(n, -1)\n0 \n```", "```py\n>>> for N in range(8):\n...     print([binomial(N, i) for i in range(N + 1)])\n...\n[1]\n[1, 1]\n[1, 2, 1]\n[1, 3, 3, 1]\n[1, 4, 6, 4, 1]\n[1, 5, 10, 10, 5, 1]\n[1, 6, 15, 20, 15, 6, 1]\n[1, 7, 21, 35, 35, 21, 7, 1] \n```", "```py\n>>> N = -4\n>>> [binomial(N, i) for i in range(1 - N)]\n[1, -4, 10, -20, 35] \n```", "```py\n>>> binomial(Rational(5, 4), 3)\n-5/128\n>>> binomial(Rational(-5, 4), 3)\n-195/128 \n```", "```py\n>>> binomial(n, 3)\nbinomial(n, 3) \n```", "```py\n>>> binomial(n, 3).expand(func=True)\nn**3/6 - n**2/2 + n/3 \n```", "```py\n>>> expand_func(binomial(n, 3))\nn*(n - 2)*(n - 1)/6 \n```", "```py\n>>> from sympy import Mod\n>>> Mod(binomial(156675, 4433, evaluate=False), 10**5 + 3)\n28625 \n```", "```py\n>>> Mod(binomial(10**18, 10**12, evaluate=False), (10**5 + 3)**2)\n3744312326 \n```", "```py\nclass sympy.functions.combinatorial.numbers.catalan(n)\n```", "```py\n>>> from sympy import (Symbol, binomial, gamma, hyper,\n...     catalan, diff, combsimp, Rational, I) \n```", "```py\n>>> [catalan(i) for i in range(1,10)]\n[1, 2, 5, 14, 42, 132, 429, 1430, 4862] \n```", "```py\n>>> n = Symbol(\"n\", integer=True) \n```", "```py\n>>> catalan(n)\ncatalan(n) \n```", "```py\n>>> catalan(n).rewrite(binomial)\nbinomial(2*n, n)/(n + 1) \n```", "```py\n>>> catalan(n).rewrite(gamma)\n4**n*gamma(n + 1/2)/(sqrt(pi)*gamma(n + 2)) \n```", "```py\n>>> catalan(n).rewrite(hyper)\nhyper((-n, 1 - n), (2,), 1) \n```", "```py\n>>> catalan(Rational(1, 2)).rewrite(gamma)\n8/(3*pi) \n```", "```py\n>>> diff(catalan(n), n)\n(polygamma(0, n + 1/2) - polygamma(0, n + 2) + log(4))*catalan(n) \n```", "```py\n>>> combsimp((catalan(n + 1)/catalan(n)).rewrite(binomial))\n2*(2*n + 1)/(n + 2) \n```", "```py\n>>> catalan(I).rewrite(gamma)\n4**I*gamma(1/2 + I)/(sqrt(pi)*gamma(2 + I)) \n```", "```py\n>>> catalan(I).evalf(20)\n0.39764993382373624267 - 0.020884341620842555705*I \n```", "```py\nclass sympy.functions.combinatorial.numbers.euler(n, x=None)\n```", "```py\n>>> from sympy import euler, Symbol, S\n>>> [euler(n) for n in range(10)]\n[1, 0, -1, 0, 5, 0, -61, 0, 1385, 0]\n>>> [2**n*euler(n,1) for n in range(10)]\n[1, 1, 0, -2, 0, 16, 0, -272, 0, 7936]\n>>> n = Symbol(\"n\")\n>>> euler(n + 2*n)\neuler(3*n) \n```", "```py\n>>> x = Symbol(\"x\")\n>>> euler(n, x)\neuler(n, x) \n```", "```py\n>>> euler(0, x)\n1\n>>> euler(1, x)\nx - 1/2\n>>> euler(2, x)\nx**2 - x\n>>> euler(3, x)\nx**3 - 3*x**2/2 + 1/4\n>>> euler(4, x)\nx**4 - 2*x**3 + x \n```", "```py\n>>> euler(12, S.Half)\n2702765/4096\n>>> euler(12)\n2702765 \n```", "```py\nclass sympy.functions.combinatorial.factorials.factorial(n)\n```", "```py\n>>> from sympy import Symbol, factorial, S\n>>> n = Symbol('n', integer=True) \n```", "```py\n>>> factorial(0)\n1 \n```", "```py\n>>> factorial(7)\n5040 \n```", "```py\n>>> factorial(-2)\nzoo \n```", "```py\n>>> factorial(n)\nfactorial(n) \n```", "```py\n>>> factorial(2*n)\nfactorial(2*n) \n```", "```py\n>>> factorial(S(1)/2)\nfactorial(1/2) \n```", "```py\nclass sympy.functions.combinatorial.factorials.subfactorial(arg)\n```", "```py\n>>> from sympy import subfactorial\n>>> from sympy.abc import n\n>>> subfactorial(n + 1)\nsubfactorial(n + 1)\n>>> subfactorial(5)\n44 \n```", "```py\nclass sympy.functions.combinatorial.factorials.factorial2(arg)\n```", "```py\n>>> from sympy import factorial2, var\n>>> n = var('n')\n>>> n\nn\n>>> factorial2(n + 1)\nfactorial2(n + 1)\n>>> factorial2(5)\n15\n>>> factorial2(-1)\n1\n>>> factorial2(-5)\n1/3 \n```", "```py\nclass sympy.functions.combinatorial.factorials.FallingFactorial(x, k)\n```", "```py\n>>> from sympy import ff, Poly, Symbol\n>>> from sympy.abc import x\n>>> n = Symbol('n', integer=True) \n```", "```py\n>>> ff(x, 0)\n1\n>>> ff(5, 5)\n120\n>>> ff(x, 5) == x*(x - 1)*(x - 2)*(x - 3)*(x - 4)\nTrue\n>>> ff(Poly(x**2, x), 2)\nPoly(x**4 - 2*x**3 + x**2, x, domain='ZZ')\n>>> ff(n, n)\nfactorial(n) \n```", "```py\n>>> from sympy import factorial, rf, gamma, binomial, Symbol\n>>> n = Symbol('n', integer=True, positive=True)\n>>> F = ff(n, n - 2)\n>>> for i in (rf, ff, factorial, binomial, gamma):\n...  F.rewrite(i)\n...\nRisingFactorial(3, n - 2)\nFallingFactorial(n, n - 2)\nfactorial(n)/2\nbinomial(n, n - 2)*factorial(n - 2)\ngamma(n + 1)/2 \n```", "```py\nclass sympy.functions.combinatorial.numbers.fibonacci(n, sym=None)\n```", "```py\n>>> from sympy import fibonacci, Symbol \n```", "```py\n>>> [fibonacci(x) for x in range(11)]\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fibonacci(5, Symbol('t'))\nt**4 + 3*t**2 + 1 \n```", "```py\nclass sympy.functions.combinatorial.numbers.tribonacci(n, sym=None)\n```", "```py\n>>> from sympy import tribonacci, Symbol \n```", "```py\n>>> [tribonacci(x) for x in range(11)]\n[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149]\n>>> tribonacci(5, Symbol('t'))\nt**8 + 3*t**5 + 3*t**2 \n```", "```py\nclass sympy.functions.combinatorial.numbers.harmonic(n, m=None)\n```", "```py\n>>> from sympy import harmonic, oo \n```", "```py\n>>> [harmonic(n) for n in range(6)]\n[0, 1, 3/2, 11/6, 25/12, 137/60]\n>>> [harmonic(n, 2) for n in range(6)]\n[0, 1, 5/4, 49/36, 205/144, 5269/3600]\n>>> harmonic(oo, 2)\npi**2/6 \n```", "```py\n>>> from sympy import Symbol, Sum\n>>> n = Symbol(\"n\") \n```", "```py\n>>> harmonic(n).rewrite(Sum)\nSum(1/_k, (_k, 1, n)) \n```", "```py\n>>> from sympy import S, expand_func, simplify\n>>> harmonic(8)\n761/280\n>>> harmonic(11)\n83711/27720 \n```", "```py\n>>> H = harmonic(1/S(3))\n>>> H\nharmonic(1/3)\n>>> He = expand_func(H)\n>>> He\n-log(6) - sqrt(3)*pi/6 + 2*Sum(log(sin(_k*pi/3))*cos(2*_k*pi/3), (_k, 1, 1))\n + 3*Sum(1/(3*_k + 1), (_k, 0, 0))\n>>> He.doit()\n-log(6) - sqrt(3)*pi/6 - log(sqrt(3)/2) + 3\n>>> H = harmonic(25/S(7))\n>>> He = simplify(expand_func(H).doit())\n>>> He\nlog(sin(2*pi/7)**(2*cos(16*pi/7))/(14*sin(pi/7)**(2*cos(pi/7))*cos(pi/14)**(2*sin(pi/14)))) + pi*tan(pi/14)/2 + 30247/9900\n>>> He.n(40)\n1.983697455232980674869851942390639915940\n>>> harmonic(25/S(7)).n(40)\n1.983697455232980674869851942390639915940 \n```", "```py\n>>> from sympy import digamma, polygamma\n>>> m = Symbol(\"m\", integer=True, positive=True) \n```", "```py\n>>> harmonic(n).rewrite(digamma)\npolygamma(0, n + 1) + EulerGamma \n```", "```py\n>>> harmonic(n).rewrite(polygamma)\npolygamma(0, n + 1) + EulerGamma \n```", "```py\n>>> harmonic(n,3).rewrite(polygamma)\npolygamma(2, n + 1)/2 + zeta(3) \n```", "```py\n>>> simplify(harmonic(n,m).rewrite(polygamma))\nPiecewise((polygamma(0, n + 1) + EulerGamma, Eq(m, 1)),\n(-(-1)**m*polygamma(m - 1, n + 1)/factorial(m - 1) + zeta(m), True)) \n```", "```py\n>>> from sympy import expand_func \n```", "```py\n>>> expand_func(harmonic(n+4))\nharmonic(n) + 1/(n + 4) + 1/(n + 3) + 1/(n + 2) + 1/(n + 1) \n```", "```py\n>>> expand_func(harmonic(n-4))\nharmonic(n) - 1/(n - 1) - 1/(n - 2) - 1/(n - 3) - 1/n \n```", "```py\n>>> from sympy import limit, oo \n```", "```py\n>>> limit(harmonic(n), n, oo)\noo \n```", "```py\n>>> limit(harmonic(n, 2), n, oo)\npi**2/6 \n```", "```py\n>>> limit(harmonic(n, 3), n, oo)\nzeta(3) \n```", "```py\n>>> m = Symbol(\"m\", positive=True)\n>>> limit(harmonic(n, m+1), n, oo)\nzeta(m + 1) \n```", "```py\nclass sympy.functions.combinatorial.numbers.lucas(n)\n```", "```py\n>>> from sympy import lucas \n```", "```py\n>>> [lucas(x) for x in range(11)]\n[2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123] \n```", "```py\nclass sympy.functions.combinatorial.numbers.genocchi(n, x=None)\n```", "```py\n>>> from sympy import genocchi, Symbol\n>>> [genocchi(n) for n in range(9)]\n[0, -1, -1, 0, 1, 0, -3, 0, 17]\n>>> n = Symbol('n', integer=True, positive=True)\n>>> genocchi(2*n + 1)\n0\n>>> x = Symbol('x')\n>>> genocchi(4, x)\n-4*x**3 + 6*x**2 - 1 \n```", "```py\nclass sympy.functions.combinatorial.numbers.andre(n)\n```", "```py\n>>> from sympy import andre, euler, bernoulli\n>>> [andre(n) for n in range(11)]\n[1, 1, 1, 2, 5, 16, 61, 272, 1385, 7936, 50521]\n>>> [(-1)**k * andre(2*k) for k in range(7)]\n[1, -1, 5, -61, 1385, -50521, 2702765]\n>>> [euler(2*k) for k in range(7)]\n[1, -1, 5, -61, 1385, -50521, 2702765]\n>>> [andre(2*k-1) * (2*k) / ((-4)**k - (-16)**k) for k in range(1, 8)]\n[1/6, -1/30, 1/42, -1/30, 5/66, -691/2730, 7/6]\n>>> [bernoulli(2*k) for k in range(1, 8)]\n[1/6, -1/30, 1/42, -1/30, 5/66, -691/2730, 7/6] \n```", "```py\nclass sympy.functions.combinatorial.numbers.partition(n)\n```", "```py\n>>> from sympy import partition, Symbol\n>>> [partition(n) for n in range(9)]\n[1, 1, 2, 3, 5, 7, 11, 15, 22]\n>>> n = Symbol('n', integer=True, negative=True)\n>>> partition(n)\n0 \n```", "```py\nclass sympy.functions.combinatorial.numbers.divisor_sigma(n, k=1)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import divisor_sigma\n>>> divisor_sigma(18, 0)\n6\n>>> divisor_sigma(39, 1)\n56\n>>> divisor_sigma(12, 2)\n210\n>>> divisor_sigma(37)\n38 \n```", "```py\nclass sympy.functions.combinatorial.numbers.udivisor_sigma(n, k=1)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import udivisor_sigma\n>>> udivisor_sigma(18, 0)\n4\n>>> udivisor_sigma(74, 1)\n114\n>>> udivisor_sigma(36, 3)\n47450\n>>> udivisor_sigma(111)\n152 \n```", "```py\nclass sympy.functions.combinatorial.numbers.legendre_symbol(a, p)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import legendre_symbol\n>>> [legendre_symbol(i, 7) for i in range(7)]\n[0, 1, 1, -1, 1, -1, -1]\n>>> sorted(set([i**2 % 7 for i in range(7)]))\n[0, 1, 2, 4] \n```", "```py\nclass sympy.functions.combinatorial.numbers.jacobi_symbol(m, n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import jacobi_symbol, legendre_symbol\n>>> from sympy import S\n>>> jacobi_symbol(45, 77)\n-1\n>>> jacobi_symbol(60, 121)\n1 \n```", "```py\n>>> L = legendre_symbol\n>>> S(45).factors()\n{3: 2, 5: 1}\n>>> jacobi_symbol(7, 45) == L(7, 3)**2 * L(7, 5)**1\nTrue \n```", "```py\nclass sympy.functions.combinatorial.numbers.kronecker_symbol(a, n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import kronecker_symbol\n>>> kronecker_symbol(45, 77)\n-1\n>>> kronecker_symbol(13, -120)\n1 \n```", "```py\nclass sympy.functions.combinatorial.numbers.mobius(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import mobius\n>>> mobius(13*7)\n1\n>>> mobius(1)\n1\n>>> mobius(13*7*5)\n-1\n>>> mobius(13**2)\n0 \n```", "```py\n>>> from sympy import Symbol\n>>> n = Symbol(\"n\", integer=True, positive=True)\n>>> mobius(4*n)\n0\n>>> mobius(n**2)\n0 \n```", "```py\nclass sympy.functions.combinatorial.numbers.primenu(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import primenu\n>>> primenu(1)\n0\n>>> primenu(30)\n3 \n```", "```py\nclass sympy.functions.combinatorial.numbers.primeomega(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import primeomega\n>>> primeomega(1)\n0\n>>> primeomega(20)\n3 \n```", "```py\nclass sympy.functions.combinatorial.numbers.totient(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import totient\n>>> totient(1)\n1\n>>> totient(25)\n20\n>>> totient(45) == totient(5)*totient(9)\nTrue \n```", "```py\nclass sympy.functions.combinatorial.numbers.reduced_totient(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import reduced_totient\n>>> reduced_totient(1)\n1\n>>> reduced_totient(8)\n2\n>>> reduced_totient(30)\n4 \n```", "```py\nclass sympy.functions.combinatorial.numbers.primepi(n)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import primepi\n>>> from sympy import prime, prevprime, isprime\n>>> primepi(25)\n9 \n```", "```py\n>>> isprime(25)\nFalse \n```", "```py\n>>> prevprime(25) == prime(9)\nTrue \n```", "```py\nclass sympy.functions.combinatorial.factorials.MultiFactorial(*args)\n```", "```py\nclass sympy.functions.combinatorial.factorials.RisingFactorial(x, k)\n```", "```py\n>>> from sympy import rf, Poly\n>>> from sympy.abc import x\n>>> rf(x, 0)\n1\n>>> rf(1, 5)\n120\n>>> rf(x, 5) == x*(1 + x)*(2 + x)*(3 + x)*(4 + x)\nTrue\n>>> rf(Poly(x**3, x), 2)\nPoly(x**6 + 3*x**5 + 3*x**4 + x**3, x, domain='ZZ') \n```", "```py\n>>> from sympy import Symbol, factorial, ff, binomial, gamma\n>>> n = Symbol('n', integer=True, positive=True)\n>>> R = rf(n, n + 2)\n>>> for i in (rf, ff, factorial, binomial, gamma):\n...  R.rewrite(i)\n...\nRisingFactorial(n, n + 2)\nFallingFactorial(2*n + 1, n + 2)\nfactorial(2*n + 1)/factorial(n - 1)\nbinomial(2*n + 1, n + 2)*factorial(n + 2)\ngamma(2*n + 2)/gamma(n) \n```", "```py\nsympy.functions.combinatorial.numbers.stirling(n, k, d=None, kind=2, signed=False)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import stirling, bell\n>>> from sympy.combinatorics import Permutation\n>>> from sympy.utilities.iterables import multiset_partitions, permutations \n```", "```py\n>>> [stirling(6, i, kind=1) for i in range(7)]\n[0, 120, 274, 225, 85, 15, 1]\n>>> perms = list(permutations(range(4)))\n>>> [sum(Permutation(p).cycles == i for p in perms) for i in range(5)]\n[0, 6, 11, 6, 1]\n>>> [stirling(4, i, kind=1) for i in range(5)]\n[0, 6, 11, 6, 1] \n```", "```py\n>>> [stirling(4, i, signed=True) for i in range(5)]\n[0, -6, 11, -6, 1] \n```", "```py\n>>> [stirling(10, i) for i in range(12)]\n[0, 1, 511, 9330, 34105, 42525, 22827, 5880, 750, 45, 1, 0]\n>>> sum(_) == bell(10)\nTrue\n>>> len(list(multiset_partitions(range(4), 2))) == stirling(4, 2)\nTrue \n```", "```py\n>>> from sympy import subsets, oo\n>>> def delta(p):\n...    if len(p) == 1:\n...        return oo\n...    return min(abs(i[0] - i[1]) for i in subsets(p, 2))\n>>> parts = multiset_partitions(range(5), 3)\n>>> d = 2\n>>> sum(1 for p in parts if all(delta(i) >= d for i in p))\n7\n>>> stirling(5, 3, 2)\n7 \n```", "```py\n>>> from sympy.functions.combinatorial.numbers import nC, nP, nT\n>>> items = 'baby' \n```", "```py\nsympy.functions.combinatorial.numbers.nC(n, k=None, replacement=False)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import nC\n>>> from sympy.utilities.iterables import multiset_combinations\n>>> nC(3, 2)\n3\n>>> nC('abc', 2)\n3\n>>> nC('aab', 2)\n2 \n```", "```py\n>>> nC('aabc', replacement=True)\n35\n>>> [len(list(multiset_combinations('aaaabbbbcccc', i))) for i in range(5)]\n[1, 3, 6, 10, 15]\n>>> sum(_)\n35 \n```", "```py\n>>> sum(nC(4, i) for i in range(5))\n16 \n```", "```py\nsympy.functions.combinatorial.numbers.nP(n, k=None, replacement=False)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import nP\n>>> from sympy.utilities.iterables import multiset_permutations, multiset\n>>> nP(3, 2)\n6\n>>> nP('abc', 2) == nP(multiset('abc'), 2) == 6\nTrue\n>>> nP('aab', 2)\n3\n>>> nP([1, 2, 2], 2)\n3\n>>> [nP(3, i) for i in range(4)]\n[1, 3, 6, 6]\n>>> nP(3) == sum(_)\nTrue \n```", "```py\n>>> nP('aabc', replacement=True)\n121\n>>> [len(list(multiset_permutations('aaaabbbbcccc', i))) for i in range(5)]\n[1, 3, 9, 27, 81]\n>>> sum(_)\n121 \n```", "```py\nsympy.functions.combinatorial.numbers.nT(n, k=None)\n```", "```py\n>>> from sympy.functions.combinatorial.numbers import nT \n```", "```py\n>>> [nT('aabbc', i) for i in range(1, 7)]\n[1, 8, 11, 5, 1, 0]\n>>> nT('aabbc') == sum(_)\nTrue \n```", "```py\n>>> [nT(\"mississippi\", i) for i in range(1, 12)]\n[1, 74, 609, 1521, 1768, 1224, 579, 197, 50, 9, 1] \n```", "```py\n>>> [nT(5, i) for i in range(1, 6)]\n[1, 2, 2, 1, 1]\n>>> nT('1'*5) == sum(_)\nTrue \n```", "```py\n>>> [nT(range(5), i) for i in range(1, 6)]\n[1, 15, 25, 10, 1]\n>>> nT(range(5)) == sum(_)\nTrue \n```", "```py\n>>> from sympy import partition\n>>> partition(4)\n5\n>>> nT(4, 1) + nT(4, 2) + nT(4, 3) + nT(4, 4)\n5\n>>> nT('1'*4)\n5 \n```"]