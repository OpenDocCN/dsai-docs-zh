- en: numpy.memmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html](https://numpy.org/doc/1.26/reference/generated/numpy.memmap.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a memory-map to an array stored in a *binary* file on disk.
  prefs: []
  type: TYPE_NORMAL
- en: Memory-mapped files are used for accessing small segments of large files on
    disk, without reading the entire file into memory. NumPy’s memmap’s are array-like
    objects. This differs from Python’s `mmap` module, which uses file-like objects.
  prefs: []
  type: TYPE_NORMAL
- en: This subclass of ndarray has some unpleasant interactions with some operations,
    because it doesn’t quite fit properly as a subclass. An alternative to using this
    subclass is to create the `mmap` object yourself, then create an ndarray with
    ndarray.__new__ directly, passing the object created in its ‘buffer=’ parameter.
  prefs: []
  type: TYPE_NORMAL
- en: This class may at some point be turned into a factory function which returns
    a view into an mmap buffer.
  prefs: []
  type: TYPE_NORMAL
- en: Flush the memmap instance to write the changes to the file. Currently there
    is no API to close the underlying `mmap`. It is tricky to ensure the resource
    is actually closed, since it may be shared between different memmap instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename**str, file-like object, or pathlib.Path instance'
  prefs: []
  type: TYPE_NORMAL
- en: The file name or file object to be used as the array data buffer.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The data-type used to interpret the file contents. Default is [`uint8`](../arrays.scalars.html#numpy.uint8
    "numpy.uint8").
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘r+’, ‘r’, ‘w+’, ‘c’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file is opened in this mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ‘r’ | Open existing file for reading only. |'
  prefs: []
  type: TYPE_TB
- en: '| ‘r+’ | Open existing file for reading and writing. |'
  prefs: []
  type: TYPE_TB
- en: '| ‘w+’ | Create or overwrite existing file for reading and writing. If `mode
    == ''w+''` then [`shape`](numpy.shape.html#numpy.shape "numpy.shape") must also
    be specified. |'
  prefs: []
  type: TYPE_TB
- en: '| ‘c’ | Copy-on-write: assignments affect data in memory, but changes are not
    saved to disk. The file on disk is read-only. |'
  prefs: []
  type: TYPE_TB
- en: Default is ‘r+’.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: In the file, array data starts at this offset. Since *offset* is measured in
    bytes, it should normally be a multiple of the byte-size of [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype"). When `mode != 'r'`, even positive offsets beyond end of file are
    valid; The file will be extended to accommodate the additional data. By default,
    `memmap` will start at the beginning of the file, even if `filename` is a file
    pointer `fp` and `fp.tell() != 0`.
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The desired shape of the array. If `mode == 'r'` and the number of remaining
    bytes after *offset* is not a multiple of the byte-size of [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype"), you must specify [`shape`](numpy.shape.html#numpy.shape "numpy.shape").
    By default, the returned array will be 1-D with the number of elements determined
    by file size and data-type.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the order of the ndarray memory layout: [row-major](../../glossary.html#term-row-major),
    C-style or [column-major](../../glossary.html#term-column-major), Fortran-style.
    This only has an effect if the shape is greater than 1-D. The default order is
    ‘C’.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lib.format.open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")'
  prefs: []
  type: TYPE_NORMAL
- en: Create or load a memory-mapped `.npy` file.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The memmap object can be used anywhere an ndarray is accepted. Given a memmap
    `fp`, `isinstance(fp, numpy.ndarray)` returns `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Memory-mapped files cannot be larger than 2GB on 32-bit systems.
  prefs: []
  type: TYPE_NORMAL
- en: When a memmap causes a file to be created or extended beyond its current size
    in the filesystem, the contents of the new part are unspecified. On systems with
    POSIX filesystem semantics, the extended part will be filled with zero bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This example uses a temporary file so that doctest doesn’t write files to your
    directory. You would use a ‘normal’ filename.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a memmap with dtype and shape that matches our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Write data to memmap array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Flushes memory changes to disk in order to read them back
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the memmap and verify data was stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Read-only memmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy-on-write memmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s possible to assign to copy-on-write array, but values are only written
    into the memory copy of the array, and not written to disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File on disk is unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Offset into a memmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filename**str or pathlib.Path instance'
  prefs: []
  type: TYPE_NORMAL
- en: Path to the mapped file.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int'
  prefs: []
  type: TYPE_NORMAL
- en: Offset position in the file.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str'
  prefs: []
  type: TYPE_NORMAL
- en: File mode.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`flush`](numpy.memmap.flush.html#numpy.memmap.flush "numpy.memmap.flush")()
    | Write any changes in the array to the file on disk. |'
  prefs: []
  type: TYPE_TB
