["```py\nIn [1]: s = pd.Series(range(5))\n\nIn [2]: s.rolling(window=2).sum()\nOut[2]: \n0    NaN\n1    1.0\n2    3.0\n3    5.0\n4    7.0\ndtype: float64 \n```", "```py\nIn [3]: for window in s.rolling(window=2):\n ...:    print(window)\n ...: \n0    0\ndtype: int64\n0    0\n1    1\ndtype: int64\n1    1\n2    2\ndtype: int64\n2    2\n3    3\ndtype: int64\n3    3\n4    4\ndtype: int64 \n```", "```py\nIn [4]: s = pd.Series(range(5), index=pd.date_range('2020-01-01', periods=5, freq='1D'))\n\nIn [5]: s.rolling(window='2D').sum()\nOut[5]: \n2020-01-01    0.0\n2020-01-02    1.0\n2020-01-03    3.0\n2020-01-04    5.0\n2020-01-05    7.0\nFreq: D, dtype: float64 \n```", "```py\nIn [6]: df = pd.DataFrame({'A': ['a', 'b', 'a', 'b', 'a'], 'B': range(5)})\n\nIn [7]: df.groupby('A').expanding().sum()\nOut[7]: \n B\nA \na 0  0.0\n 2  2.0\n 4  6.0\nb 1  1.0\n 3  4.0 \n```", "```py\nIn [8]: def weighted_mean(x):\n ...:    arr = np.ones((1, x.shape[1]))\n ...:    arr[:, :2] = (x[:, :2] * x[:, 2]).sum(axis=0) / x[:, 2].sum()\n ...:    return arr\n ...: \n\nIn [9]: df = pd.DataFrame([[1, 2, 0.6], [2, 3, 0.4], [3, 4, 0.2], [4, 5, 0.7]])\n\nIn [10]: df.rolling(2, method=\"table\", min_periods=0).apply(weighted_mean, raw=True, engine=\"numba\")  # noqa: E501\nOut[10]: \n 0         1    2\n0  1.000000  2.000000  1.0\n1  1.800000  2.000000  1.0\n2  3.333333  2.333333  1.0\n3  1.555556  7.000000  1.0 \n```", "```py\nIn [11]: df = pd.DataFrame([[1, 2, 0.6], [2, 3, 0.4], [3, 4, 0.2], [4, 5, 0.7]])\n\nIn [12]: df.ewm(0.5).mean()\nOut[12]: \n 0         1         2\n0  1.000000  2.000000  0.600000\n1  1.750000  2.750000  0.450000\n2  2.615385  3.615385  0.276923\n3  3.550000  4.550000  0.562500 \n```", "```py\nIn [13]: online_ewm = df.head(2).ewm(0.5).online()\n\nIn [14]: online_ewm.mean()\nOut[14]: \n 0     1     2\n0  1.00  2.00  0.60\n1  1.75  2.75  0.45\n\nIn [15]: online_ewm.mean(update=df.tail(1))\nOut[15]: \n 0         1         2\n3  3.307692  4.307692  0.623077 \n```", "```py\nIn [16]: s = pd.Series([np.nan, 1, 2, np.nan, np.nan, 3])\n\nIn [17]: s.rolling(window=3, min_periods=1).sum()\nOut[17]: \n0    NaN\n1    1.0\n2    3.0\n3    3.0\n4    2.0\n5    3.0\ndtype: float64\n\nIn [18]: s.rolling(window=3, min_periods=2).sum()\nOut[18]: \n0    NaN\n1    NaN\n2    3.0\n3    3.0\n4    NaN\n5    NaN\ndtype: float64\n\n# Equivalent to min_periods=3\nIn [19]: s.rolling(window=3, min_periods=None).sum()\nOut[19]: \n0   NaN\n1   NaN\n2   NaN\n3   NaN\n4   NaN\n5   NaN\ndtype: float64 \n```", "```py\nIn [20]: df = pd.DataFrame({\"A\": range(5), \"B\": range(10, 15)})\n\nIn [21]: df.expanding().agg([\"sum\", \"mean\", \"std\"])\nOut[21]: \n A                    B \n sum mean       std   sum  mean       std\n0   0.0  0.0       NaN  10.0  10.0       NaN\n1   1.0  0.5  0.707107  21.0  10.5  0.707107\n2   3.0  1.0  1.000000  33.0  11.0  1.000000\n3   6.0  1.5  1.290994  46.0  11.5  1.290994\n4  10.0  2.0  1.581139  60.0  12.0  1.581139 \n```", "```py\nIn [22]: times = ['2020-01-01', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-29']\n\nIn [23]: s = pd.Series(range(5), index=pd.DatetimeIndex(times))\n\nIn [24]: s\nOut[24]: \n2020-01-01    0\n2020-01-03    1\n2020-01-04    2\n2020-01-05    3\n2020-01-29    4\ndtype: int64\n\n# Window with 2 observations\nIn [25]: s.rolling(window=2).sum()\nOut[25]: \n2020-01-01    NaN\n2020-01-03    1.0\n2020-01-04    3.0\n2020-01-05    5.0\n2020-01-29    7.0\ndtype: float64\n\n# Window with 2 days worth of observations\nIn [26]: s.rolling(window='2D').sum()\nOut[26]: \n2020-01-01    0.0\n2020-01-03    1.0\n2020-01-04    3.0\n2020-01-05    5.0\n2020-01-29    4.0\ndtype: float64 \n```", "```py\nIn [27]: s = pd.Series(range(10))\n\nIn [28]: s.rolling(window=5).mean()\nOut[28]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\nIn [29]: s.rolling(window=5, center=True).mean()\nOut[29]: \n0    NaN\n1    NaN\n2    2.0\n3    3.0\n4    4.0\n5    5.0\n6    6.0\n7    7.0\n8    NaN\n9    NaN\ndtype: float64 \n```", "```py\nIn [30]: df = pd.DataFrame(\n ....:    {\"A\": [0, 1, 2, 3, 4]}, index=pd.date_range(\"2020\", periods=5, freq=\"1D\")\n ....: )\n ....: \n\nIn [31]: df\nOut[31]: \n A\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n\nIn [32]: df.rolling(\"2D\", center=False).mean()\nOut[32]: \n A\n2020-01-01  0.0\n2020-01-02  0.5\n2020-01-03  1.5\n2020-01-04  2.5\n2020-01-05  3.5\n\nIn [33]: df.rolling(\"2D\", center=True).mean()\nOut[33]: \n A\n2020-01-01  0.5\n2020-01-02  1.5\n2020-01-03  2.5\n2020-01-04  3.5\n2020-01-05  4.0 \n```", "```py\nIn [34]: df = pd.DataFrame(\n ....:    {\"x\": 1},\n ....:    index=[\n ....:        pd.Timestamp(\"20130101 09:00:01\"),\n ....:        pd.Timestamp(\"20130101 09:00:02\"),\n ....:        pd.Timestamp(\"20130101 09:00:03\"),\n ....:        pd.Timestamp(\"20130101 09:00:04\"),\n ....:        pd.Timestamp(\"20130101 09:00:06\"),\n ....:    ],\n ....: )\n ....: \n\nIn [35]: df[\"right\"] = df.rolling(\"2s\", closed=\"right\").x.sum()  # default\n\nIn [36]: df[\"both\"] = df.rolling(\"2s\", closed=\"both\").x.sum()\n\nIn [37]: df[\"left\"] = df.rolling(\"2s\", closed=\"left\").x.sum()\n\nIn [38]: df[\"neither\"] = df.rolling(\"2s\", closed=\"neither\").x.sum()\n\nIn [39]: df\nOut[39]: \n x  right  both  left  neither\n2013-01-01 09:00:01  1    1.0   1.0   NaN      NaN\n2013-01-01 09:00:02  1    2.0   2.0   1.0      1.0\n2013-01-01 09:00:03  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:04  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:06  1    1.0   2.0   1.0      NaN \n```", "```py\nIn [40]: use_expanding = [True, False, True, False, True]\n\nIn [41]: use_expanding\nOut[41]: [True, False, True, False, True]\n\nIn [42]: df = pd.DataFrame({\"values\": range(5)})\n\nIn [43]: df\nOut[43]: \n values\n0       0\n1       1\n2       2\n3       3\n4       4 \n```", "```py\nIn [44]: from pandas.api.indexers import BaseIndexer\n\nIn [45]: class CustomIndexer(BaseIndexer):\n ....:     def get_window_bounds(self, num_values, min_periods, center, closed, step):\n ....:         start = np.empty(num_values, dtype=np.int64)\n ....:         end = np.empty(num_values, dtype=np.int64)\n ....:         for i in range(num_values):\n ....:             if self.use_expanding[i]:\n ....:                 start[i] = 0\n ....:                 end[i] = i + 1\n ....:             else:\n ....:                 start[i] = i\n ....:                 end[i] = i + self.window_size\n ....:         return start, end\n ....: \n\nIn [46]: indexer = CustomIndexer(window_size=1, use_expanding=use_expanding)\n\nIn [47]: df.rolling(indexer).sum()\nOut[47]: \n values\n0     0.0\n1     1.0\n2     3.0\n3     3.0\n4    10.0 \n```", "```py\nIn [48]: from pandas.api.indexers import VariableOffsetWindowIndexer\n\nIn [49]: df = pd.DataFrame(range(10), index=pd.date_range(\"2020\", periods=10))\n\nIn [50]: offset = pd.offsets.BDay(1)\n\nIn [51]: indexer = VariableOffsetWindowIndexer(index=df.index, offset=offset)\n\nIn [52]: df\nOut[52]: \n 0\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n2020-01-06  5\n2020-01-07  6\n2020-01-08  7\n2020-01-09  8\n2020-01-10  9\n\nIn [53]: df.rolling(indexer).sum()\nOut[53]: \n 0\n2020-01-01   0.0\n2020-01-02   1.0\n2020-01-03   2.0\n2020-01-04   3.0\n2020-01-05   7.0\n2020-01-06  12.0\n2020-01-07   6.0\n2020-01-08   7.0\n2020-01-09   8.0\n2020-01-10   9.0 \n```", "```py\nIn [54]: from pandas.api.indexers import FixedForwardWindowIndexer\n\nIn [55]: indexer = FixedForwardWindowIndexer(window_size=2)\n\nIn [56]: df.rolling(indexer, min_periods=1).sum()\nOut[56]: \n 0\n2020-01-01   1.0\n2020-01-02   3.0\n2020-01-03   5.0\n2020-01-04   7.0\n2020-01-05   9.0\n2020-01-06  11.0\n2020-01-07  13.0\n2020-01-08  15.0\n2020-01-09  17.0\n2020-01-10   9.0 \n```", "```py\nIn [57]: df = pd.DataFrame(\n ....:    data=[\n ....:        [pd.Timestamp(\"2018-01-01 00:00:00\"), 100],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:01\"), 101],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:03\"), 103],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:04\"), 111],\n ....:    ],\n ....:    columns=[\"time\", \"value\"],\n ....: ).set_index(\"time\")\n ....: \n\nIn [58]: df\nOut[58]: \n value\ntime \n2018-01-01 00:00:00    100\n2018-01-01 00:00:01    101\n2018-01-01 00:00:03    103\n2018-01-01 00:00:04    111\n\nIn [59]: reversed_df = df[::-1].rolling(\"2s\").sum()[::-1]\n\nIn [60]: reversed_df\nOut[60]: \n value\ntime \n2018-01-01 00:00:00  201.0\n2018-01-01 00:00:01  101.0\n2018-01-01 00:00:03  214.0\n2018-01-01 00:00:04  111.0 \n```", "```py\nIn [61]: def mad(x):\n ....:    return np.fabs(x - x.mean()).mean()\n ....: \n\nIn [62]: s = pd.Series(range(10))\n\nIn [63]: s.rolling(window=4).apply(mad, raw=True)\nOut[63]: \n0    NaN\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    1.0\n6    1.0\n7    1.0\n8    1.0\n9    1.0\ndtype: float64 \n```", "```py\nIn [64]: df = pd.DataFrame(\n ....:    np.random.randn(10, 4),\n ....:    index=pd.date_range(\"2020-01-01\", periods=10),\n ....:    columns=[\"A\", \"B\", \"C\", \"D\"],\n ....: )\n ....: \n\nIn [65]: df = df.cumsum()\n\nIn [66]: df2 = df[:4]\n\nIn [67]: df2.rolling(window=2).corr(df2[\"B\"])\nOut[67]: \n A    B    C    D\n2020-01-01  NaN  NaN  NaN  NaN\n2020-01-02 -1.0  1.0 -1.0  1.0\n2020-01-03  1.0  1.0  1.0 -1.0\n2020-01-04 -1.0  1.0  1.0 -1.0 \n```", "```py\nIn [68]: covs = (\n ....:    df[[\"B\", \"C\", \"D\"]]\n ....:    .rolling(window=4)\n ....:    .cov(df[[\"A\", \"B\", \"C\"]], pairwise=True)\n ....: )\n ....: \n\nIn [69]: covs\nOut[69]: \n B         C         D\n2020-01-01 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n C       NaN       NaN       NaN\n2020-01-02 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n...                ...       ...       ...\n2020-01-09 B  0.342006  0.230190  0.052849\n C  0.230190  1.575251  0.082901\n2020-01-10 A -0.333945  0.006871 -0.655514\n B  0.649711  0.430860  0.469271\n C  0.430860  0.829721  0.055300\n\n[30 rows x 3 columns] \n```", "```py\nIn [70]: s = pd.Series(range(10))\n\nIn [71]: s.rolling(window=5).mean()\nOut[71]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\nIn [72]: s.rolling(window=5, win_type=\"triang\").mean()\nOut[72]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\n# Supplementary Scipy arguments passed in the aggregation function\nIn [73]: s.rolling(window=5, win_type=\"gaussian\").mean(std=0.1)\nOut[73]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64 \n```", "```py\nIn [74]: df = pd.DataFrame(range(5))\n\nIn [75]: df.rolling(window=len(df), min_periods=1).mean()\nOut[75]: \n 0\n0  0.0\n1  0.5\n2  1.0\n3  1.5\n4  2.0\n\nIn [76]: df.expanding(min_periods=1).mean()\nOut[76]: \n 0\n0  0.0\n1  0.5\n2  1.0\n3  1.5\n4  2.0 \n```", "```py\nIn [77]: df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n\nIn [78]: df\nOut[78]: \n B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\nIn [79]: times = [\"2020-01-01\", \"2020-01-03\", \"2020-01-10\", \"2020-01-15\", \"2020-01-17\"]\n\nIn [80]: df.ewm(halflife=\"4 days\", times=pd.DatetimeIndex(times)).mean()\nOut[80]: \n B\n0  0.000000\n1  0.585786\n2  1.523889\n3  1.523889\n4  3.233686 \n```", "```py\nIn [4]: s = pd.Series(range(5), index=pd.date_range('2020-01-01', periods=5, freq='1D'))\n\nIn [5]: s.rolling(window='2D').sum()\nOut[5]: \n2020-01-01    0.0\n2020-01-02    1.0\n2020-01-03    3.0\n2020-01-04    5.0\n2020-01-05    7.0\nFreq: D, dtype: float64 \n```", "```py\nIn [6]: df = pd.DataFrame({'A': ['a', 'b', 'a', 'b', 'a'], 'B': range(5)})\n\nIn [7]: df.groupby('A').expanding().sum()\nOut[7]: \n B\nA \na 0  0.0\n 2  2.0\n 4  6.0\nb 1  1.0\n 3  4.0 \n```", "```py\nIn [8]: def weighted_mean(x):\n ...:    arr = np.ones((1, x.shape[1]))\n ...:    arr[:, :2] = (x[:, :2] * x[:, 2]).sum(axis=0) / x[:, 2].sum()\n ...:    return arr\n ...: \n\nIn [9]: df = pd.DataFrame([[1, 2, 0.6], [2, 3, 0.4], [3, 4, 0.2], [4, 5, 0.7]])\n\nIn [10]: df.rolling(2, method=\"table\", min_periods=0).apply(weighted_mean, raw=True, engine=\"numba\")  # noqa: E501\nOut[10]: \n 0         1    2\n0  1.000000  2.000000  1.0\n1  1.800000  2.000000  1.0\n2  3.333333  2.333333  1.0\n3  1.555556  7.000000  1.0 \n```", "```py\nIn [11]: df = pd.DataFrame([[1, 2, 0.6], [2, 3, 0.4], [3, 4, 0.2], [4, 5, 0.7]])\n\nIn [12]: df.ewm(0.5).mean()\nOut[12]: \n 0         1         2\n0  1.000000  2.000000  0.600000\n1  1.750000  2.750000  0.450000\n2  2.615385  3.615385  0.276923\n3  3.550000  4.550000  0.562500 \n```", "```py\nIn [13]: online_ewm = df.head(2).ewm(0.5).online()\n\nIn [14]: online_ewm.mean()\nOut[14]: \n 0     1     2\n0  1.00  2.00  0.60\n1  1.75  2.75  0.45\n\nIn [15]: online_ewm.mean(update=df.tail(1))\nOut[15]: \n 0         1         2\n3  3.307692  4.307692  0.623077 \n```", "```py\nIn [16]: s = pd.Series([np.nan, 1, 2, np.nan, np.nan, 3])\n\nIn [17]: s.rolling(window=3, min_periods=1).sum()\nOut[17]: \n0    NaN\n1    1.0\n2    3.0\n3    3.0\n4    2.0\n5    3.0\ndtype: float64\n\nIn [18]: s.rolling(window=3, min_periods=2).sum()\nOut[18]: \n0    NaN\n1    NaN\n2    3.0\n3    3.0\n4    NaN\n5    NaN\ndtype: float64\n\n# Equivalent to min_periods=3\nIn [19]: s.rolling(window=3, min_periods=None).sum()\nOut[19]: \n0   NaN\n1   NaN\n2   NaN\n3   NaN\n4   NaN\n5   NaN\ndtype: float64 \n```", "```py\nIn [20]: df = pd.DataFrame({\"A\": range(5), \"B\": range(10, 15)})\n\nIn [21]: df.expanding().agg([\"sum\", \"mean\", \"std\"])\nOut[21]: \n A                    B \n sum mean       std   sum  mean       std\n0   0.0  0.0       NaN  10.0  10.0       NaN\n1   1.0  0.5  0.707107  21.0  10.5  0.707107\n2   3.0  1.0  1.000000  33.0  11.0  1.000000\n3   6.0  1.5  1.290994  46.0  11.5  1.290994\n4  10.0  2.0  1.581139  60.0  12.0  1.581139 \n```", "```py\nIn [22]: times = ['2020-01-01', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-29']\n\nIn [23]: s = pd.Series(range(5), index=pd.DatetimeIndex(times))\n\nIn [24]: s\nOut[24]: \n2020-01-01    0\n2020-01-03    1\n2020-01-04    2\n2020-01-05    3\n2020-01-29    4\ndtype: int64\n\n# Window with 2 observations\nIn [25]: s.rolling(window=2).sum()\nOut[25]: \n2020-01-01    NaN\n2020-01-03    1.0\n2020-01-04    3.0\n2020-01-05    5.0\n2020-01-29    7.0\ndtype: float64\n\n# Window with 2 days worth of observations\nIn [26]: s.rolling(window='2D').sum()\nOut[26]: \n2020-01-01    0.0\n2020-01-03    1.0\n2020-01-04    3.0\n2020-01-05    5.0\n2020-01-29    4.0\ndtype: float64 \n```", "```py\nIn [27]: s = pd.Series(range(10))\n\nIn [28]: s.rolling(window=5).mean()\nOut[28]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\nIn [29]: s.rolling(window=5, center=True).mean()\nOut[29]: \n0    NaN\n1    NaN\n2    2.0\n3    3.0\n4    4.0\n5    5.0\n6    6.0\n7    7.0\n8    NaN\n9    NaN\ndtype: float64 \n```", "```py\nIn [30]: df = pd.DataFrame(\n ....:    {\"A\": [0, 1, 2, 3, 4]}, index=pd.date_range(\"2020\", periods=5, freq=\"1D\")\n ....: )\n ....: \n\nIn [31]: df\nOut[31]: \n A\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n\nIn [32]: df.rolling(\"2D\", center=False).mean()\nOut[32]: \n A\n2020-01-01  0.0\n2020-01-02  0.5\n2020-01-03  1.5\n2020-01-04  2.5\n2020-01-05  3.5\n\nIn [33]: df.rolling(\"2D\", center=True).mean()\nOut[33]: \n A\n2020-01-01  0.5\n2020-01-02  1.5\n2020-01-03  2.5\n2020-01-04  3.5\n2020-01-05  4.0 \n```", "```py\nIn [34]: df = pd.DataFrame(\n ....:    {\"x\": 1},\n ....:    index=[\n ....:        pd.Timestamp(\"20130101 09:00:01\"),\n ....:        pd.Timestamp(\"20130101 09:00:02\"),\n ....:        pd.Timestamp(\"20130101 09:00:03\"),\n ....:        pd.Timestamp(\"20130101 09:00:04\"),\n ....:        pd.Timestamp(\"20130101 09:00:06\"),\n ....:    ],\n ....: )\n ....: \n\nIn [35]: df[\"right\"] = df.rolling(\"2s\", closed=\"right\").x.sum()  # default\n\nIn [36]: df[\"both\"] = df.rolling(\"2s\", closed=\"both\").x.sum()\n\nIn [37]: df[\"left\"] = df.rolling(\"2s\", closed=\"left\").x.sum()\n\nIn [38]: df[\"neither\"] = df.rolling(\"2s\", closed=\"neither\").x.sum()\n\nIn [39]: df\nOut[39]: \n x  right  both  left  neither\n2013-01-01 09:00:01  1    1.0   1.0   NaN      NaN\n2013-01-01 09:00:02  1    2.0   2.0   1.0      1.0\n2013-01-01 09:00:03  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:04  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:06  1    1.0   2.0   1.0      NaN \n```", "```py\nIn [40]: use_expanding = [True, False, True, False, True]\n\nIn [41]: use_expanding\nOut[41]: [True, False, True, False, True]\n\nIn [42]: df = pd.DataFrame({\"values\": range(5)})\n\nIn [43]: df\nOut[43]: \n values\n0       0\n1       1\n2       2\n3       3\n4       4 \n```", "```py\nIn [44]: from pandas.api.indexers import BaseIndexer\n\nIn [45]: class CustomIndexer(BaseIndexer):\n ....:     def get_window_bounds(self, num_values, min_periods, center, closed, step):\n ....:         start = np.empty(num_values, dtype=np.int64)\n ....:         end = np.empty(num_values, dtype=np.int64)\n ....:         for i in range(num_values):\n ....:             if self.use_expanding[i]:\n ....:                 start[i] = 0\n ....:                 end[i] = i + 1\n ....:             else:\n ....:                 start[i] = i\n ....:                 end[i] = i + self.window_size\n ....:         return start, end\n ....: \n\nIn [46]: indexer = CustomIndexer(window_size=1, use_expanding=use_expanding)\n\nIn [47]: df.rolling(indexer).sum()\nOut[47]: \n values\n0     0.0\n1     1.0\n2     3.0\n3     3.0\n4    10.0 \n```", "```py\nIn [48]: from pandas.api.indexers import VariableOffsetWindowIndexer\n\nIn [49]: df = pd.DataFrame(range(10), index=pd.date_range(\"2020\", periods=10))\n\nIn [50]: offset = pd.offsets.BDay(1)\n\nIn [51]: indexer = VariableOffsetWindowIndexer(index=df.index, offset=offset)\n\nIn [52]: df\nOut[52]: \n 0\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n2020-01-06  5\n2020-01-07  6\n2020-01-08  7\n2020-01-09  8\n2020-01-10  9\n\nIn [53]: df.rolling(indexer).sum()\nOut[53]: \n 0\n2020-01-01   0.0\n2020-01-02   1.0\n2020-01-03   2.0\n2020-01-04   3.0\n2020-01-05   7.0\n2020-01-06  12.0\n2020-01-07   6.0\n2020-01-08   7.0\n2020-01-09   8.0\n2020-01-10   9.0 \n```", "```py\nIn [54]: from pandas.api.indexers import FixedForwardWindowIndexer\n\nIn [55]: indexer = FixedForwardWindowIndexer(window_size=2)\n\nIn [56]: df.rolling(indexer, min_periods=1).sum()\nOut[56]: \n 0\n2020-01-01   1.0\n2020-01-02   3.0\n2020-01-03   5.0\n2020-01-04   7.0\n2020-01-05   9.0\n2020-01-06  11.0\n2020-01-07  13.0\n2020-01-08  15.0\n2020-01-09  17.0\n2020-01-10   9.0 \n```", "```py\nIn [57]: df = pd.DataFrame(\n ....:    data=[\n ....:        [pd.Timestamp(\"2018-01-01 00:00:00\"), 100],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:01\"), 101],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:03\"), 103],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:04\"), 111],\n ....:    ],\n ....:    columns=[\"time\", \"value\"],\n ....: ).set_index(\"time\")\n ....: \n\nIn [58]: df\nOut[58]: \n value\ntime \n2018-01-01 00:00:00    100\n2018-01-01 00:00:01    101\n2018-01-01 00:00:03    103\n2018-01-01 00:00:04    111\n\nIn [59]: reversed_df = df[::-1].rolling(\"2s\").sum()[::-1]\n\nIn [60]: reversed_df\nOut[60]: \n value\ntime \n2018-01-01 00:00:00  201.0\n2018-01-01 00:00:01  101.0\n2018-01-01 00:00:03  214.0\n2018-01-01 00:00:04  111.0 \n```", "```py\nIn [61]: def mad(x):\n ....:    return np.fabs(x - x.mean()).mean()\n ....: \n\nIn [62]: s = pd.Series(range(10))\n\nIn [63]: s.rolling(window=4).apply(mad, raw=True)\nOut[63]: \n0    NaN\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    1.0\n6    1.0\n7    1.0\n8    1.0\n9    1.0\ndtype: float64 \n```", "```py\nIn [64]: df = pd.DataFrame(\n ....:    np.random.randn(10, 4),\n ....:    index=pd.date_range(\"2020-01-01\", periods=10),\n ....:    columns=[\"A\", \"B\", \"C\", \"D\"],\n ....: )\n ....: \n\nIn [65]: df = df.cumsum()\n\nIn [66]: df2 = df[:4]\n\nIn [67]: df2.rolling(window=2).corr(df2[\"B\"])\nOut[67]: \n A    B    C    D\n2020-01-01  NaN  NaN  NaN  NaN\n2020-01-02 -1.0  1.0 -1.0  1.0\n2020-01-03  1.0  1.0  1.0 -1.0\n2020-01-04 -1.0  1.0  1.0 -1.0 \n```", "```py\nIn [68]: covs = (\n ....:    df[[\"B\", \"C\", \"D\"]]\n ....:    .rolling(window=4)\n ....:    .cov(df[[\"A\", \"B\", \"C\"]], pairwise=True)\n ....: )\n ....: \n\nIn [69]: covs\nOut[69]: \n B         C         D\n2020-01-01 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n C       NaN       NaN       NaN\n2020-01-02 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n...                ...       ...       ...\n2020-01-09 B  0.342006  0.230190  0.052849\n C  0.230190  1.575251  0.082901\n2020-01-10 A -0.333945  0.006871 -0.655514\n B  0.649711  0.430860  0.469271\n C  0.430860  0.829721  0.055300\n\n[30 rows x 3 columns] \n```", "```py\nIn [27]: s = pd.Series(range(10))\n\nIn [28]: s.rolling(window=5).mean()\nOut[28]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\nIn [29]: s.rolling(window=5, center=True).mean()\nOut[29]: \n0    NaN\n1    NaN\n2    2.0\n3    3.0\n4    4.0\n5    5.0\n6    6.0\n7    7.0\n8    NaN\n9    NaN\ndtype: float64 \n```", "```py\nIn [30]: df = pd.DataFrame(\n ....:    {\"A\": [0, 1, 2, 3, 4]}, index=pd.date_range(\"2020\", periods=5, freq=\"1D\")\n ....: )\n ....: \n\nIn [31]: df\nOut[31]: \n A\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n\nIn [32]: df.rolling(\"2D\", center=False).mean()\nOut[32]: \n A\n2020-01-01  0.0\n2020-01-02  0.5\n2020-01-03  1.5\n2020-01-04  2.5\n2020-01-05  3.5\n\nIn [33]: df.rolling(\"2D\", center=True).mean()\nOut[33]: \n A\n2020-01-01  0.5\n2020-01-02  1.5\n2020-01-03  2.5\n2020-01-04  3.5\n2020-01-05  4.0 \n```", "```py\nIn [34]: df = pd.DataFrame(\n ....:    {\"x\": 1},\n ....:    index=[\n ....:        pd.Timestamp(\"20130101 09:00:01\"),\n ....:        pd.Timestamp(\"20130101 09:00:02\"),\n ....:        pd.Timestamp(\"20130101 09:00:03\"),\n ....:        pd.Timestamp(\"20130101 09:00:04\"),\n ....:        pd.Timestamp(\"20130101 09:00:06\"),\n ....:    ],\n ....: )\n ....: \n\nIn [35]: df[\"right\"] = df.rolling(\"2s\", closed=\"right\").x.sum()  # default\n\nIn [36]: df[\"both\"] = df.rolling(\"2s\", closed=\"both\").x.sum()\n\nIn [37]: df[\"left\"] = df.rolling(\"2s\", closed=\"left\").x.sum()\n\nIn [38]: df[\"neither\"] = df.rolling(\"2s\", closed=\"neither\").x.sum()\n\nIn [39]: df\nOut[39]: \n x  right  both  left  neither\n2013-01-01 09:00:01  1    1.0   1.0   NaN      NaN\n2013-01-01 09:00:02  1    2.0   2.0   1.0      1.0\n2013-01-01 09:00:03  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:04  1    2.0   3.0   2.0      1.0\n2013-01-01 09:00:06  1    1.0   2.0   1.0      NaN \n```", "```py\nIn [40]: use_expanding = [True, False, True, False, True]\n\nIn [41]: use_expanding\nOut[41]: [True, False, True, False, True]\n\nIn [42]: df = pd.DataFrame({\"values\": range(5)})\n\nIn [43]: df\nOut[43]: \n values\n0       0\n1       1\n2       2\n3       3\n4       4 \n```", "```py\nIn [44]: from pandas.api.indexers import BaseIndexer\n\nIn [45]: class CustomIndexer(BaseIndexer):\n ....:     def get_window_bounds(self, num_values, min_periods, center, closed, step):\n ....:         start = np.empty(num_values, dtype=np.int64)\n ....:         end = np.empty(num_values, dtype=np.int64)\n ....:         for i in range(num_values):\n ....:             if self.use_expanding[i]:\n ....:                 start[i] = 0\n ....:                 end[i] = i + 1\n ....:             else:\n ....:                 start[i] = i\n ....:                 end[i] = i + self.window_size\n ....:         return start, end\n ....: \n\nIn [46]: indexer = CustomIndexer(window_size=1, use_expanding=use_expanding)\n\nIn [47]: df.rolling(indexer).sum()\nOut[47]: \n values\n0     0.0\n1     1.0\n2     3.0\n3     3.0\n4    10.0 \n```", "```py\nIn [48]: from pandas.api.indexers import VariableOffsetWindowIndexer\n\nIn [49]: df = pd.DataFrame(range(10), index=pd.date_range(\"2020\", periods=10))\n\nIn [50]: offset = pd.offsets.BDay(1)\n\nIn [51]: indexer = VariableOffsetWindowIndexer(index=df.index, offset=offset)\n\nIn [52]: df\nOut[52]: \n 0\n2020-01-01  0\n2020-01-02  1\n2020-01-03  2\n2020-01-04  3\n2020-01-05  4\n2020-01-06  5\n2020-01-07  6\n2020-01-08  7\n2020-01-09  8\n2020-01-10  9\n\nIn [53]: df.rolling(indexer).sum()\nOut[53]: \n 0\n2020-01-01   0.0\n2020-01-02   1.0\n2020-01-03   2.0\n2020-01-04   3.0\n2020-01-05   7.0\n2020-01-06  12.0\n2020-01-07   6.0\n2020-01-08   7.0\n2020-01-09   8.0\n2020-01-10   9.0 \n```", "```py\nIn [54]: from pandas.api.indexers import FixedForwardWindowIndexer\n\nIn [55]: indexer = FixedForwardWindowIndexer(window_size=2)\n\nIn [56]: df.rolling(indexer, min_periods=1).sum()\nOut[56]: \n 0\n2020-01-01   1.0\n2020-01-02   3.0\n2020-01-03   5.0\n2020-01-04   7.0\n2020-01-05   9.0\n2020-01-06  11.0\n2020-01-07  13.0\n2020-01-08  15.0\n2020-01-09  17.0\n2020-01-10   9.0 \n```", "```py\nIn [57]: df = pd.DataFrame(\n ....:    data=[\n ....:        [pd.Timestamp(\"2018-01-01 00:00:00\"), 100],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:01\"), 101],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:03\"), 103],\n ....:        [pd.Timestamp(\"2018-01-01 00:00:04\"), 111],\n ....:    ],\n ....:    columns=[\"time\", \"value\"],\n ....: ).set_index(\"time\")\n ....: \n\nIn [58]: df\nOut[58]: \n value\ntime \n2018-01-01 00:00:00    100\n2018-01-01 00:00:01    101\n2018-01-01 00:00:03    103\n2018-01-01 00:00:04    111\n\nIn [59]: reversed_df = df[::-1].rolling(\"2s\").sum()[::-1]\n\nIn [60]: reversed_df\nOut[60]: \n value\ntime \n2018-01-01 00:00:00  201.0\n2018-01-01 00:00:01  101.0\n2018-01-01 00:00:03  214.0\n2018-01-01 00:00:04  111.0 \n```", "```py\nIn [61]: def mad(x):\n ....:    return np.fabs(x - x.mean()).mean()\n ....: \n\nIn [62]: s = pd.Series(range(10))\n\nIn [63]: s.rolling(window=4).apply(mad, raw=True)\nOut[63]: \n0    NaN\n1    NaN\n2    NaN\n3    1.0\n4    1.0\n5    1.0\n6    1.0\n7    1.0\n8    1.0\n9    1.0\ndtype: float64 \n```", "```py\nIn [64]: df = pd.DataFrame(\n ....:    np.random.randn(10, 4),\n ....:    index=pd.date_range(\"2020-01-01\", periods=10),\n ....:    columns=[\"A\", \"B\", \"C\", \"D\"],\n ....: )\n ....: \n\nIn [65]: df = df.cumsum()\n\nIn [66]: df2 = df[:4]\n\nIn [67]: df2.rolling(window=2).corr(df2[\"B\"])\nOut[67]: \n A    B    C    D\n2020-01-01  NaN  NaN  NaN  NaN\n2020-01-02 -1.0  1.0 -1.0  1.0\n2020-01-03  1.0  1.0  1.0 -1.0\n2020-01-04 -1.0  1.0  1.0 -1.0 \n```", "```py\nIn [68]: covs = (\n ....:    df[[\"B\", \"C\", \"D\"]]\n ....:    .rolling(window=4)\n ....:    .cov(df[[\"A\", \"B\", \"C\"]], pairwise=True)\n ....: )\n ....: \n\nIn [69]: covs\nOut[69]: \n B         C         D\n2020-01-01 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n C       NaN       NaN       NaN\n2020-01-02 A       NaN       NaN       NaN\n B       NaN       NaN       NaN\n...                ...       ...       ...\n2020-01-09 B  0.342006  0.230190  0.052849\n C  0.230190  1.575251  0.082901\n2020-01-10 A -0.333945  0.006871 -0.655514\n B  0.649711  0.430860  0.469271\n C  0.430860  0.829721  0.055300\n\n[30 rows x 3 columns] \n```", "```py\nIn [70]: s = pd.Series(range(10))\n\nIn [71]: s.rolling(window=5).mean()\nOut[71]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\nIn [72]: s.rolling(window=5, win_type=\"triang\").mean()\nOut[72]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64\n\n# Supplementary Scipy arguments passed in the aggregation function\nIn [73]: s.rolling(window=5, win_type=\"gaussian\").mean(std=0.1)\nOut[73]: \n0    NaN\n1    NaN\n2    NaN\n3    NaN\n4    2.0\n5    3.0\n6    4.0\n7    5.0\n8    6.0\n9    7.0\ndtype: float64 \n```", "```py\nIn [74]: df = pd.DataFrame(range(5))\n\nIn [75]: df.rolling(window=len(df), min_periods=1).mean()\nOut[75]: \n 0\n0  0.0\n1  0.5\n2  1.0\n3  1.5\n4  2.0\n\nIn [76]: df.expanding(min_periods=1).mean()\nOut[76]: \n 0\n0  0.0\n1  0.5\n2  1.0\n3  1.5\n4  2.0 \n```", "```py\nIn [77]: df = pd.DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n\nIn [78]: df\nOut[78]: \n B\n0  0.0\n1  1.0\n2  2.0\n3  NaN\n4  4.0\n\nIn [79]: times = [\"2020-01-01\", \"2020-01-03\", \"2020-01-10\", \"2020-01-15\", \"2020-01-17\"]\n\nIn [80]: df.ewm(halflife=\"4 days\", times=pd.DatetimeIndex(times)).mean()\nOut[80]: \n B\n0  0.000000\n1  0.585786\n2  1.523889\n3  1.523889\n4  3.233686 \n```"]