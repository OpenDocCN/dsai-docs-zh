- en: scipy.stats.skellam
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.skellam.html#scipy.stats.skellam](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.skellam.html#scipy.stats.skellam)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Skellam discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`skellam`](#scipy.stats.skellam "scipy.stats.skellam")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Probability distribution of the difference of two correlated or uncorrelated
    Poisson random variables.
  prefs: []
  type: TYPE_NORMAL
- en: Let \(k_1\) and \(k_2\) be two Poisson-distributed r.v. with expected values
    \(\lambda_1\) and \(\lambda_2\). Then, \(k_1 - k_2\) follows a Skellam distribution
    with parameters \(\mu_1 = \lambda_1 - \rho \sqrt{\lambda_1 \lambda_2}\) and \(\mu_2
    = \lambda_2 - \rho \sqrt{\lambda_1 \lambda_2}\), where \(\rho\) is the correlation
    coefficient between \(k_1\) and \(k_2\). If the two Poisson-distributed r.v. are
    independent then \(\rho = 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Parameters \(\mu_1\) and \(\mu_2\) must be strictly positive.
  prefs: []
  type: TYPE_NORMAL
- en: 'For details see: [https://en.wikipedia.org/wiki/Skellam_distribution](https://en.wikipedia.org/wiki/Skellam_distribution)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`skellam`](#scipy.stats.skellam "scipy.stats.skellam") takes \(\mu_1\) and
    \(\mu_2\) as shape parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `skellam.pmf(k, mu1,
    mu2, loc)` is identically equivalent to `skellam.pmf(k - loc, mu1, mu2)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-skellam-1_00_00.png](../Images/735c71ca97dbbf1f28dcab8444495d74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(mu1, mu2, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, mu1, mu2, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, mu1, mu2, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, mu1, mu2, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, mu1, mu2, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, mu1, mu2, loc=0)** | Survival function (also defined as `1 - cdf`,
    but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, mu1, mu2, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, mu1, mu2, loc=0)** | Percent point function (inverse of `cdf` —
    percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, mu1, mu2, loc=0)** | Inverse survival function (inverse of `sf`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(mu1, mu2, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(mu1, mu2, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(mu1, mu2), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(mu1, mu2, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(mu1, mu2, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(mu1, mu2, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(mu1, mu2, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, mu1, mu2, loc=0)** | Confidence interval with equal
    areas around the median. |'
  prefs: []
  type: TYPE_TB
