- en: scipy.integrate.Radau
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.Radau
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.Radau.html#scipy.integrate.Radau](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.Radau.html#scipy.integrate.Radau)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.Radau.html#scipy.integrate.Radau](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.Radau.html#scipy.integrate.Radau)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Implicit Runge-Kutta method of Radau IIA family of order 5.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式龙格库塔方法，Radau IIA 5阶族。
- en: The implementation follows [[1]](#r04c194a64501-1). The error is controlled
    with a third-order accurate embedded formula. A cubic polynomial which satisfies
    the collocation conditions is used for the dense output.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实现遵循 [[1]](#r04c194a64501-1)。误差由三阶准确嵌入式公式控制。用于密集输出的满足配点条件的立方多项式。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun**callable'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun**callable'
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. `fun` must return an array of the same shape
    as `y`. See *vectorized* for more information.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的右手边：状态 `y` 在时间 `t` 的时间导数。调用签名为 `fun(t, y)`，其中 `t` 是标量，`y` 是形状为 `len(y0)`
    的 ndarray。`fun` 必须返回与 `y` 相同形状的数组。有关更多信息，请参见 *vectorized*。
- en: '**t0**float'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**t0**float'
- en: Initial time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时间。
- en: '**y0**array_like, shape (n,)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**y0**array_like，形状为 (n,)'
- en: Initial state.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态。
- en: '**t_bound**float'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound**float'
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间 - 集成不会超出此时间。它还决定了集成的方向。
- en: '**first_step**float or None, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**first_step**float 或 None，可选'
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 初始步长。默认为 `None`，表示算法应该选择。
- en: '**max_step**float, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_step**float，可选'
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最大允许步长。默认为 np.inf，即步长不受限制，完全由求解器确定。
- en: '**rtol, atol**float and array_like, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol, atol**float 和 array_like，可选'
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. HHere *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 相对和绝对容差。求解器保持局部误差估计小于 `atol + rtol * abs(y)`。这里 *rtol* 控制相对精度（正确数字的数量），而 *atol*
    控制绝对精度（正确小数位的数量）。为了实现期望的 *rtol*，将 *atol* 设置为小于从 `rtol * abs(y)` 可预期的最小值，以使 *rtol*
    主导允许的误差。如果 *atol* 大于 `rtol * abs(y)`，则不能保证正确数字的数量。反之，为了实现期望的 *atol*，设置 *rtol*，使得
    `rtol * abs(y)` 总是小于 *atol*。如果 `y` 的分量具有不同的比例，可能有利于通过传递形状为 (n,) 的 array_like 为
    *atol* 的不同分量设置不同的 *atol* 值。默认值为 *rtol* 为 1e-3，*atol* 为 1e-6。
- en: '**jac**{None, array_like, sparse_matrix, callable}, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**jac**{None, array_like, sparse_matrix, callable}，可选'
- en: 'Jacobian matrix of the right-hand side of the system with respect to y, required
    by this method. The Jacobian matrix has shape (n, n) and its element (i, j) is
    equal to `d f_i / d y_j`. There are three ways to define the Jacobian:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 系统右手边的雅可比矩阵相对于 y，该方法所需。雅可比矩阵的形状为 (n, n)，其元素 (i, j) 等于 `d f_i / d y_j`。有三种定义雅可比矩阵的方法：
- en: If array_like or sparse_matrix, the Jacobian is assumed to be constant.
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是 array_like 或 sparse_matrix，则假定雅可比矩阵是恒定的。
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If callable, the Jacobian is assumed to depend on both t and y; it will be called
    as `jac(t, y)` as necessary. For the ‘Radau’ and ‘BDF’ methods, the return value
    might be a sparse matrix.
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果为 callable，则假定雅可比矩阵依赖于 t 和 y；将按需调用为 `jac(t, y)`。对于 'Radau' 和 'BDF' 方法，返回值可能是稀疏矩阵。
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If None (default), the Jacobian will be approximated by finite differences.
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果为 None（默认），则雅可比矩阵将通过有限差分近似。
- en: It is generally recommended to provide the Jacobian rather than relying on a
    finite-difference approximation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常建议提供雅可比矩阵，而不是依赖有限差分近似。
- en: '**jac_sparsity**{None, array_like, sparse matrix}, optional'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**jac_sparsity**{None, array_like, sparse matrix}，可选'
- en: Defines a sparsity structure of the Jacobian matrix for a finite-difference
    approximation. Its shape must be (n, n). This argument is ignored if *jac* is
    not *None*. If the Jacobian has only few non-zero elements in *each* row, providing
    the sparsity structure will greatly speed up the computations [[2]](#r04c194a64501-2).
    A zero entry means that a corresponding element in the Jacobian is always zero.
    If None (default), the Jacobian is assumed to be dense.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为有限差分近似的雅可比矩阵定义稀疏结构。其形状必须为(n, n)。如果*jac*不是*None*，则忽略此参数。如果雅可比矩阵在每行中只有少量非零元素，提供稀疏结构将极大地加快计算速度[[2]](#r04c194a64501-2)。零条目表示雅可比矩阵中相应元素始终为零。如果为None（默认），则假定雅可比矩阵是密集的。
- en: '**vectorized**bool, optional'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**vectorized**bool，可选'
- en: Whether *fun* can be called in a vectorized fashion. Default is False.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*fun*是否可以以向量化方式调用的能力。默认为False。'
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为False，则*fun*将始终使用形状为`(n,)`的`y`调用，其中`n = len(y0)`。
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`vectorized`为True，则可以用形状为`(n, k)`的`y`调用*fun*，其中`k`是整数。在这种情况下，*fun*必须表现出`fun(t,
    y)[:, i] == fun(t, y[:, i])`（即返回数组的每一列都是与`y`的一列对应的状态的时间导数）。
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by this method, but may result in slower execution overall in
    some circumstances (e.g. small `len(y0)`).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`vectorized=True`允许通过此方法更快地进行雅可比矩阵的有限差分近似，但在某些情况下可能会导致整体执行速度较慢（例如，`len(y0)`较小）。
- en: References
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id1)]'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: 'E. Hairer, G. Wanner, “Solving Ordinary Differential Equations II: Stiff and
    Differential-Algebraic Problems”, Sec. IV.8.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: E. Hairer, G. Wanner，“解常微分方程 II：刚性和微分代数问题”，第IV.8节。
- en: '[[2](#id2)]'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id2)]'
- en: A. Curtis, M. J. D. Powell, and J. Reid, “On the estimation of sparse Jacobian
    matrices”, Journal of the Institute of Mathematics and its Applications, 13, pp.
    117-120, 1974.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: A. Curtis, M. J. D. Powell, and J. Reid，“关于稀疏雅可比矩阵估计的研究”，应用数学研究院杂志，13，pp. 117-120，1974。
- en: 'Attributes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**n**int'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**n**int'
- en: Number of equations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 方程数量。
- en: '**status**string'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**status**string'
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器的当前状态：‘running’、‘finished’或‘failed’。
- en: '**t_bound**float'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound**float'
- en: Boundary time.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间。
- en: '**direction**float'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**direction**float'
- en: 'Integration direction: +1 or -1.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 积分方向：+1或-1。
- en: '**t**float'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**t**float'
- en: Current time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当前时间。
- en: '**y**ndarray'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**y**ndarray'
- en: Current state.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当前状态。
- en: '**t_old**float'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_old**float'
- en: Previous time. None if no steps were made yet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个时间。如果尚未执行任何步骤，则为None。
- en: '**step_size**float'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**step_size**float'
- en: Size of the last successful step. None if no steps were made yet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次成功步长的大小。如果尚未执行任何步骤，则为None。
- en: '**nfev**int'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**nfev**int'
- en: Number of evaluations of the right-hand side.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 右手边函数评估次数。
- en: '**njev**int'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**njev**int'
- en: Number of evaluations of the Jacobian.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 雅可比矩阵的评估次数。
- en: '**nlu**int'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**nlu**int'
- en: Number of LU decompositions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: LU分解次数。
- en: Methods
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`dense_output`](scipy.integrate.Radau.dense_output.html#scipy.integrate.Radau.dense_output
    "scipy.integrate.Radau.dense_output")() | Compute a local interpolant over the
    last successful step. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`dense_output`](scipy.integrate.Radau.dense_output.html#scipy.integrate.Radau.dense_output
    "scipy.integrate.Radau.dense_output")() | 计算上一次成功步骤的局部插值。 |'
- en: '| [`step`](scipy.integrate.Radau.step.html#scipy.integrate.Radau.step "scipy.integrate.Radau.step")()
    | Perform one integration step. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`step`](scipy.integrate.Radau.step.html#scipy.integrate.Radau.step "scipy.integrate.Radau.step")()
    | 执行一次积分步骤。 |'
