- en: scipy.signal.spectrogram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.spectrogram.html#scipy.signal.spectrogram)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a spectrogram with consecutive Fourier transforms.
  prefs: []
  type: TYPE_NORMAL
- en: Spectrograms can be used as a way of visualizing the change of a nonstationary
    signal’s frequency content over time.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy
  prefs: []
  type: TYPE_NORMAL
- en: This function is considered legacy and will no longer receive updates. This
    could also mean it will be removed in future SciPy versions. [`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT") is a newer STFT / ISTFT implementation with more
    features also including a [`spectrogram`](scipy.signal.ShortTimeFFT.spectrogram.html#scipy.signal.ShortTimeFFT.spectrogram
    "scipy.signal.ShortTimeFFT.spectrogram") method. A [comparison](../../tutorial/signal.html#tutorial-stft-legacy-stft)
    between the implementations can be found in the [Short-Time Fourier Transform](../../tutorial/signal.html#tutorial-stft)
    section of the [SciPy User Guide](../../tutorial/index.html#user-guide).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of the *x* time series. Defaults to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
    Defaults to a Tukey window with shape parameter of 0.25.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment. Defaults to None, but if window is str or tuple, is
    set to 256, and if window is array_like, is set to the length of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments. If *None*, `noverlap = nperseg
    // 8`. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfft**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used, if a zero padded FFT is desired. If *None*, the FFT
    length is *nperseg*. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**detrend**str or function or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies how to detrend each segment. If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend
    "scipy.signal.detrend") is a string, it is passed as the *type* argument to the
    [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    function. If it is a function, it takes a segment and returns a detrended segment.
    If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    is *False*, no detrending is done. Defaults to ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_onesided**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, return a one-sided spectrum for real data. If *False* return a two-sided
    spectrum. Defaults to *True*, but for complex data, a two-sided spectrum is always
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**scaling**{ ‘density’, ‘spectrum’ }, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Selects between computing the power spectral density (‘density’) where *Sxx*
    has units of V**2/Hz and computing the power spectrum (‘spectrum’) where *Sxx*
    has units of V**2, if *x* is measured in V and *fs* is measured in Hz. Defaults
    to ‘density’.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the spectrogram is computed; the default is over the last axis
    (i.e. `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Defines what kind of return values are expected. Options are [‘psd’, ‘complex’,
    ‘magnitude’, ‘angle’, ‘phase’]. ‘complex’ is equivalent to the output of [`stft`](scipy.signal.stft.html#scipy.signal.stft
    "scipy.signal.stft") with no padding or boundary extension. ‘magnitude’ returns
    the absolute magnitude of the STFT. ‘angle’ and ‘phase’ return the complex angle
    of the STFT, with and without unwrapping, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of sample frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**t**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of segment times.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sxx**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Spectrogram of x. By default, the last axis of Sxx corresponds to the segment
    times.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`periodogram`](scipy.signal.periodogram.html#scipy.signal.periodogram "scipy.signal.periodogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Simple, optionally modified periodogram
  prefs: []
  type: TYPE_NORMAL
- en: '[`lombscargle`](scipy.signal.lombscargle.html#scipy.signal.lombscargle "scipy.signal.lombscargle")'
  prefs: []
  type: TYPE_NORMAL
- en: Lomb-Scargle periodogram for unevenly sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`welch`](scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")'
  prefs: []
  type: TYPE_NORMAL
- en: Power spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`csd`](scipy.signal.csd.html#scipy.signal.csd "scipy.signal.csd")'
  prefs: []
  type: TYPE_NORMAL
- en: Cross spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT "scipy.signal.ShortTimeFFT")'
  prefs: []
  type: TYPE_NORMAL
- en: Newer STFT/ISTFT implementation providing more features, which also includes
    a [`spectrogram`](scipy.signal.ShortTimeFFT.spectrogram.html#scipy.signal.ShortTimeFFT.spectrogram
    "scipy.signal.ShortTimeFFT.spectrogram") method.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: An appropriate amount of overlap will depend on the choice of window and on
    your requirements. In contrast to welch’s method, where the entire data stream
    is averaged over, one may wish to use a smaller overlap (or perhaps none at all)
    when computing a spectrogram, to maintain some statistical independence between
    individual segments. It is for this reason that the default window is a Tukey
    window with 1/8th of a window’s length overlap at each end.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Oppenheim, Alan V., Ronald W. Schafer, John R. Buck “Discrete-Time Signal Processing”,
    Prentice Hall, 1999.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate a test signal, a 2 Vrms sine wave whose frequency is slowly modulated
    around 3kHz, corrupted by white noise of exponentially decreasing magnitude sampled
    at 10 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute and plot the spectrogram.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-spectrogram-1_00_00.png](../Images/47c57e0af15b401645e91dfd48baf21f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note, if using output that is not one sided, then use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-spectrogram-1_01_00.png](../Images/e183f1b3a457f736785edd8209e221f1.png)'
  prefs: []
  type: TYPE_IMG
