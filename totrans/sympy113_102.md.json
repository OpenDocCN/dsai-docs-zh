["```py\n>>> from sympy import *\n>>> from sympy.abc import x\n>>> expr = sin(x)/x\n>>> expr.evalf(subs={x: 3.14})\n0.000507214304613640 \n```", "```py\n>>> from sympy import *\n>>> from sympy.abc import x\n>>> expr = sin(x)/x\n>>> f = lambdify(x, expr)\n>>> f(3.14)\n0.000507214304614 \n```", "```py\n>>> from sympy import *\n>>> from sympy.abc import x\n>>> expr = sin(x)/x\n>>> f = lambdify(x, expr, \"numpy\") \n```", "```py\n>>> import numpy\n>>> data = numpy.linspace(1, 10, 10000)\n>>> f(data)\n[ 0.84147098  0.84119981  0.84092844 ... -0.05426074 -0.05433146\n -0.05440211] \n```", "```py\n>>> f = lambdify(x, expr, \"cupy\")\n>>> import cupy as cp\n>>> data = cp.linspace(1, 10, 10000)\n>>> y = f(data) # perform the computation\n>>> cp.asnumpy(y) # explicitly copy from GPU to CPU / numpy array\n[ 0.84147098  0.84119981  0.84092844 ... -0.05426074 -0.05433146\n -0.05440211] \n```", "```py\n>>> f = lambdify(x, expr, \"jax\")\n>>> import jax.numpy as jnp\n>>> data = jnp.linspace(1, 10, 10000)\n>>> y = f(data) # perform the computation\n>>> numpy.asarray(y) # explicitly copy to CPU / numpy array\narray([ 0.84147096,  0.8411998 ,  0.84092844, ..., -0.05426079,\n -0.05433151, -0.05440211], dtype=float32) \n```", "```py\n>>> from sympy import *\n>>> from sympy.abc import x\n>>> expr = sin(x)/x \n```", "```py\n>>> from sympy.printing.aesaracode import aesara_function\n>>> f = aesara_function([x], [expr]) \n```", "```py\n>>> f = aesara_function([x], [expr], dims={x: 1}, dtypes={x: 'float64'}) \n```"]