- en: Lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/geometry/lines.html](https://docs.sympy.org/latest/modules/geometry/lines.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A base class for all linear entities (Line, Ray and Segment) in n-dimensional
    Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is an abstract class and is not meant to be instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.entity.GeometryEntity`](entities.html#sympy.geometry.entity.GeometryEntity
    "sympy.geometry.entity.GeometryEntity")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| ambient_dimension |  |'
  prefs: []
  type: TYPE_TB
- en: '| direction |  |'
  prefs: []
  type: TYPE_TB
- en: '| length |  |'
  prefs: []
  type: TYPE_TB
- en: '| p1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| p2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| points |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A property method that returns the dimension of LinearEntity object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dimension** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Return the non-reflex angle formed by rays emanating from the origin with directions
    the same as the direction vectors of the linear entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l1** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: '**l2** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle** : angle in radians'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'From the dot product of vectors v1 and v2 it is known that:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dot(v1, v2) = |v1|*|v2|*cos(A)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where A is the angle formed between the two vectors. We can get the directional
    vectors of the two lines and readily find the angle between the two using the
    above formula.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain the non-obtuse angle at the intersection of lines, use the `smallest_angle_between`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_perpendicular`](#sympy.geometry.line.LinearEntity.is_perpendicular "sympy.geometry.line.LinearEntity.is_perpendicular"),
    [`Ray2D.closing_angle`](#sympy.geometry.line.Ray2D.closing_angle "sympy.geometry.line.Ray2D.closing_angle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A parameterized point on the Line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the parameter which will be used for the parametric point. The default
    value is ‘t’. When this parameter is 0, the first point used to define the line
    will be returned, and when it is 1 the second point will be returned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: When `parameter` already appears in the Line’s definition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Is a sequence of linear entities concurrent?
  prefs: []
  type: TYPE_NORMAL
- en: Two or more linear entities are concurrent if they all intersect at a single
    point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lines**'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of linear entities.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if the set of linear entities intersect in one point'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.util.intersection`](utils.html#sympy.geometry.util.intersection
    "sympy.geometry.util.intersection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns the perpendicular lines which pass through the intersections of self
    and other that are in the same plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**line** : Line3D'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'list: two Line instances'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Subclasses should implement this method and should return True if other is on
    the boundaries of self; False if not on the boundaries of self; None if a determination
    cannot be made.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The direction vector of the LinearEntity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : a Point; the ray from the origin to this point is the'
  prefs: []
  type: TYPE_NORMAL
- en: direction of \(self\)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be reported so the distance from the origin is 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.unit`](points.html#sympy.geometry.point.Point.unit
    "sympy.geometry.point.Point.unit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The intersection with another geometrical entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**o** : Point or LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** : list of geometrical entities'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Are two linear entities parallel?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l1** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: '**l2** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if l1 and l2 are parallel,'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`coefficients`](#sympy.geometry.line.Line2D.coefficients "sympy.geometry.line.Line2D.coefficients")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Are two linear entities perpendicular?
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l1** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: '**l2** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**True** : if l1 and l2 are perpendicular,'
  prefs: []
  type: TYPE_NORMAL
- en: '**False** : otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`coefficients`](#sympy.geometry.line.Line2D.coefficients "sympy.geometry.line.Line2D.coefficients")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Return True if self and other are contained in the same line.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The length of the line.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The first defining point of a linear entity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The second defining point of a linear entity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Create a new Line parallel to this linear entity which passes through the point
    \(p\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**line** : Line'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_parallel`](#sympy.geometry.line.LinearEntity.is_parallel "sympy.geometry.line.LinearEntity.is_parallel")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Create a new Line perpendicular to this linear entity which passes through the
    point \(p\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**line** : Line'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In 3D the, the first point used to define the line is the point through which
    the perpendicular was required to pass; the second point is (arbitrarily) contained
    in the given line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.is_perpendicular`](#sympy.geometry.line.LinearEntity.is_perpendicular
    "sympy.geometry.line.LinearEntity.is_perpendicular"), [`perpendicular_segment`](#sympy.geometry.line.LinearEntity.perpendicular_segment
    "sympy.geometry.line.LinearEntity.perpendicular_segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Create a perpendicular line segment from \(p\) to this line.
  prefs: []
  type: TYPE_NORMAL
- en: The endpoints of the segment are `p` and the closest point in the line containing
    self. (If self is not a line, the point might not be in self.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**segment** : Segment'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Returns \(p\) itself if \(p\) is on this linear entity.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`perpendicular_line`](#sympy.geometry.line.LinearEntity.perpendicular_line
    "sympy.geometry.line.LinearEntity.perpendicular_line")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The two points used to define this linear entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** : tuple of Points'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Project a point, line, ray, or segment onto this linear entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Point or LinearEntity (Line, Ray, Segment)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**projection** : Point or LinearEntity (Line, Ray, Segment)'
  prefs: []
  type: TYPE_NORMAL
- en: The return type matches the type of the parameter `other`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GeometryError**'
  prefs: []
  type: TYPE_NORMAL
- en: When method is unable to perform projection.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: A projection involves taking the two points that define the linear entity and
    projecting those points onto a Line and then reforming the linear entity using
    these projections. A point P is projected onto a line L by finding the point on
    L that is closest to P. This point is the intersection of L and the line perpendicular
    to L that passes through P.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`perpendicular_line`](#sympy.geometry.line.LinearEntity.perpendicular_line "sympy.geometry.line.LinearEntity.perpendicular_line")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: A random point on a LinearEntity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Return the smallest angle formed at the intersection of the lines containing
    the linear entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l1** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: '**l2** : LinearEntity'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle** : angle in radians'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`angle_between`](#sympy.geometry.line.LinearEntity.angle_between "sympy.geometry.line.LinearEntity.angle_between"),
    [`is_perpendicular`](#sympy.geometry.line.LinearEntity.is_perpendicular "sympy.geometry.line.LinearEntity.is_perpendicular"),
    [`Ray2D.closing_angle`](#sympy.geometry.line.Ray2D.closing_angle "sympy.geometry.line.Ray2D.closing_angle")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: An infinite line in space.
  prefs: []
  type: TYPE_NORMAL
- en: A 2D line is declared with two distinct points, point and slope, or an equation.
    A 3D line may be defined with a point and a direction ratio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**p2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**slope** : SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: '**direction_ratio** : list'
  prefs: []
  type: TYPE_NORMAL
- en: '**equation** : equation of a line'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: \(Line\) will automatically subclass to \(Line2D\) or \(Line3D\) based on the
    dimension of \(p1\). The \(slope\) argument is only relevant for \(Line2D\) and
    the \(direction_ratio\) argument is only relevant for \(Line3D\).
  prefs: []
  type: TYPE_NORMAL
- en: The order of the points will define the direction of the line which is used
    when calculating the angle between lines.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate with keyword `slope`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate with another linear object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The line corresponding to an equation in the for \(ax + by + c = 0\), can be
    entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If \(x\) or \(y\) has a different name, then they can be specified, too, as
    a string (to match the name) or symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Line2D`](#sympy.geometry.line.Line2D "sympy.geometry.line.Line2D"),
    [`sympy.geometry.line.Line3D`](#sympy.geometry.line.Line3D "sympy.geometry.line.Line3D")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Return True if \(other\) is on this Line, or False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Finds the shortest distance between a line and a point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError is raised if `other` is not a Point**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if self and other are the same mathematical entities
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The plot interval for the default geometric plot of line. Gives values that
    will produce a line that is +/- 5 units long (where a unit is the distance between
    the two points that define the line).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default value is ‘t’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**plot_interval** : list (plot interval)'
  prefs: []
  type: TYPE_NORMAL
- en: '[parameter, lower_bound, upper_bound]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: A Ray is a semi-line in the space with a source point and a direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The source of the Ray
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p2** : Point or radian value'
  prefs: []
  type: TYPE_NORMAL
- en: This point determines the direction in which the Ray propagates. If given as
    an angle it is interpreted in radians with the positive direction being ccw.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: \(Ray\) will automatically subclass to \(Ray2D\) or \(Ray3D\) based on the dimension
    of \(p1\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Ray2D`](#sympy.geometry.line.Ray2D "sympy.geometry.line.Ray2D"),
    [`sympy.geometry.line.Ray3D`](#sympy.geometry.line.Ray3D "sympy.geometry.line.Ray3D"),
    [`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Line`](#sympy.geometry.line.Line "sympy.geometry.line.Line")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| source |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Is other GeometryEntity contained in this Ray?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Finds the shortest distance between the ray and a point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError is raised if `other` is not a Point**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if self and other are the same mathematical entities
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The plot interval for the default geometric plot of the Ray. Gives values that
    will produce a ray that is 10 units long (where a unit is the distance between
    the two points that define the ray).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default value is ‘t’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**plot_interval** : list'
  prefs: []
  type: TYPE_NORMAL
- en: '[parameter, lower_bound, upper_bound]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The point from which the ray emanates.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: A line segment in space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**p2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If 2D or 3D points are used to define \(Segment\), it will be automatically
    subclassed to \(Segment2D\) or \(Segment3D\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment2D`](#sympy.geometry.line.Segment2D "sympy.geometry.line.Segment2D"),
    [`sympy.geometry.line.Segment3D`](#sympy.geometry.line.Segment3D "sympy.geometry.line.Segment3D"),
    [`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`sympy.geometry.line.Line`](#sympy.geometry.line.Line "sympy.geometry.line.Line")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| length | (number or SymPy expression) |'
  prefs: []
  type: TYPE_TB
- en: '| midpoint | (Point) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Is the other GeometryEntity contained within this Segment?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Finds the shortest distance between a line segment and a point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError is raised if `other` is not a Point**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if self and other are the same mathematical entities
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The length of the line segment.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.distance`](points.html#sympy.geometry.point.Point.distance
    "sympy.geometry.point.Point.distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The midpoint of the line segment.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.midpoint`](points.html#sympy.geometry.point.Point.midpoint
    "sympy.geometry.point.Point.midpoint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The perpendicular bisector of this segment.
  prefs: []
  type: TYPE_NORMAL
- en: If no point is specified or the point specified is not on the bisector then
    the bisector is returned as a Line. Otherwise a Segment is returned that joins
    the point specified and the intersection of the bisector and the segment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bisector** : Line or Segment'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearEntity.perpendicular_segment`](#sympy.geometry.line.LinearEntity.perpendicular_segment
    "sympy.geometry.line.LinearEntity.perpendicular_segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The plot interval for the default geometric plot of the Segment gives values
    that will produce the full segment in a plot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**parameter** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default value is ‘t’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**plot_interval** : list'
  prefs: []
  type: TYPE_NORMAL
- en: '[parameter, lower_bound, upper_bound]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: A base class for all linear entities (line, ray and segment) in a 2-dimensional
    Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is an abstract class and is not meant to be instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.entity.GeometryEntity`](entities.html#sympy.geometry.entity.GeometryEntity
    "sympy.geometry.entity.GeometryEntity")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| p1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| p2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| coefficients |  |'
  prefs: []
  type: TYPE_TB
- en: '| slope |  |'
  prefs: []
  type: TYPE_TB
- en: '| points |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple (xmin, ymin, xmax, ymax) representing the bounding rectangle
    for the geometric figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Create a new Line perpendicular to this linear entity which passes through the
    point \(p\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**line** : Line'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'In 2D, the first point of the perpendicular line is the point through which
    was required to pass; the second point is arbitrarily chosen. To get a line that
    explicitly uses a point in the line, create a line from the perpendicular segment
    from the line to the point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.is_perpendicular`](#sympy.geometry.line.LinearEntity.is_perpendicular
    "sympy.geometry.line.LinearEntity.is_perpendicular"), [`perpendicular_segment`](#sympy.geometry.line.LinearEntity.perpendicular_segment
    "sympy.geometry.line.LinearEntity.perpendicular_segment")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The slope of this linear entity, or infinity if vertical.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**slope** : number or SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`coefficients`](#sympy.geometry.line.Line2D.coefficients "sympy.geometry.line.Line2D.coefficients")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: An infinite line in space 2D.
  prefs: []
  type: TYPE_NORMAL
- en: A line is declared with two distinct points or a point and slope as defined
    using keyword \(slope\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**pt** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**slope** : SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate with keyword `slope`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate with another linear object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The coefficients (\(a\), \(b\), \(c\)) for \(ax + by + c = 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line2D.equation`](#sympy.geometry.line.Line2D.equation
    "sympy.geometry.line.Line2D.equation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'The equation of the line: ax + by + c.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name to use for the x-axis, default value is ‘x’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**y** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name to use for the y-axis, default value is ‘y’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equation** : SymPy expression'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line2D.coefficients`](#sympy.geometry.line.Line2D.coefficients
    "sympy.geometry.line.Line2D.coefficients")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: A Ray is a semi-line in the space with a source point and a direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The source of the Ray
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p2** : Point or radian value'
  prefs: []
  type: TYPE_NORMAL
- en: This point determines the direction in which the Ray propagates. If given as
    an angle it is interpreted in radians with the positive direction being ccw.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`Line`](#sympy.geometry.line.Line "sympy.geometry.line.Line")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| source |  |'
  prefs: []
  type: TYPE_TB
- en: '| xdirection |  |'
  prefs: []
  type: TYPE_TB
- en: '| ydirection |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Return the angle by which r2 must be rotated so it faces the same direction
    as r1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r1** : Ray2D'
  prefs: []
  type: TYPE_NORMAL
- en: '**r2** : Ray2D'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**angle** : angle in radians (ccw angle is positive)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearEntity.angle_between`](#sympy.geometry.line.LinearEntity.angle_between
    "sympy.geometry.line.LinearEntity.angle_between")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: The x direction of the ray.
  prefs: []
  type: TYPE_NORMAL
- en: Positive infinity if the ray points in the positive x direction, negative infinity
    if the ray points in the negative x direction, or 0 if the ray is vertical.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ydirection`](#sympy.geometry.line.Ray2D.ydirection "sympy.geometry.line.Ray2D.ydirection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The y direction of the ray.
  prefs: []
  type: TYPE_NORMAL
- en: Positive infinity if the ray points in the positive y direction, negative infinity
    if the ray points in the negative y direction, or 0 if the ray is horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`xdirection`](#sympy.geometry.line.Ray2D.xdirection "sympy.geometry.line.Ray2D.xdirection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: A line segment in 2D space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**p2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point`](points.html#sympy.geometry.point.Point "sympy.geometry.point.Point"),
    [`Line`](#sympy.geometry.line.Line "sympy.geometry.line.Line")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| length | (number or SymPy expression) |'
  prefs: []
  type: TYPE_TB
- en: '| midpoint | (Point) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: An base class for all linear entities (line, ray and segment) in a 3-dimensional
    Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is a base class and is not meant to be instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| p1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| p2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| direction_ratio |  |'
  prefs: []
  type: TYPE_TB
- en: '| direction_cosine |  |'
  prefs: []
  type: TYPE_TB
- en: '| points |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The normalized direction ratio of a given line in 3D.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line3D.equation`](#sympy.geometry.line.Line3D.equation
    "sympy.geometry.line.Line3D.equation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The direction ratio of a given line in 3D.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line3D.equation`](#sympy.geometry.line.Line3D.equation
    "sympy.geometry.line.Line3D.equation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: An infinite 3D line in space.
  prefs: []
  type: TYPE_NORMAL
- en: A line is declared with two distinct points or a point and direction_ratio as
    defined using keyword \(direction_ratio\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: '**pt** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: '**direction_ratio** : list'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point3D`](points.html#sympy.geometry.point.Point3D "sympy.geometry.point.Point3D"),
    [`sympy.geometry.line.Line`](#sympy.geometry.line.Line "sympy.geometry.line.Line"),
    [`sympy.geometry.line.Line2D`](#sympy.geometry.line.Line2D "sympy.geometry.line.Line2D")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Finds the shortest distance between a line and another object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Point3D, Line3D, Plane, tuple, list**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: distance
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This method accepts only 3D entities as it’s parameter
  prefs: []
  type: TYPE_NORMAL
- en: Tuples and lists are converted to Point3D and therefore must be of length 3,
    2 or 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'NotImplementedError is raised if \(other\) is not an instance of one of the
    specified classes: Point3D, Line3D, or Plane.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'The computed distance may be symbolic, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Return the equations that define the line in 3D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name to use for the x-axis, default value is ‘x’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**y** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name to use for the y-axis, default value is ‘y’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**z** : str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name to use for the z-axis, default value is ‘z’.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**equation** : Tuple of simultaneous equations'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: A Ray is a semi-line in the space with a source point and a direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: The source of the Ray
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p2** : Point or a direction vector'
  prefs: []
  type: TYPE_NORMAL
- en: '**direction_ratio: Determines the direction in which the Ray propagates.**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point3D`](points.html#sympy.geometry.point.Point3D "sympy.geometry.point.Point3D"),
    [`Line3D`](#sympy.geometry.line.Line3D "sympy.geometry.line.Line3D")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| source |  |'
  prefs: []
  type: TYPE_TB
- en: '| xdirection |  |'
  prefs: []
  type: TYPE_TB
- en: '| ydirection |  |'
  prefs: []
  type: TYPE_TB
- en: '| zdirection |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: The x direction of the ray.
  prefs: []
  type: TYPE_NORMAL
- en: Positive infinity if the ray points in the positive x direction, negative infinity
    if the ray points in the negative x direction, or 0 if the ray is vertical.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ydirection`](#sympy.geometry.line.Ray3D.ydirection "sympy.geometry.line.Ray3D.ydirection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: The y direction of the ray.
  prefs: []
  type: TYPE_NORMAL
- en: Positive infinity if the ray points in the positive y direction, negative infinity
    if the ray points in the negative y direction, or 0 if the ray is horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`xdirection`](#sympy.geometry.line.Ray3D.xdirection "sympy.geometry.line.Ray3D.xdirection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: The z direction of the ray.
  prefs: []
  type: TYPE_NORMAL
- en: Positive infinity if the ray points in the positive z direction, negative infinity
    if the ray points in the negative z direction, or 0 if the ray is horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`xdirection`](#sympy.geometry.line.Ray3D.xdirection "sympy.geometry.line.Ray3D.xdirection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: A line segment in a 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: '**p2** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point3D`](points.html#sympy.geometry.point.Point3D "sympy.geometry.point.Point3D"),
    [`Line3D`](#sympy.geometry.line.Line3D "sympy.geometry.line.Line3D")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| length | (number or SymPy expression) |'
  prefs: []
  type: TYPE_TB
- en: '| midpoint | (Point3D) |'
  prefs: []
  type: TYPE_TB
