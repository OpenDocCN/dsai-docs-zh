- en: Term Rewriting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项重写
- en: Original text：[https://docs.sympy.org/latest/modules/rewriting.html](https://docs.sympy.org/latest/modules/rewriting.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/rewriting.html](https://docs.sympy.org/latest/modules/rewriting.html)
- en: Term rewriting is a very general class of functionalities which are used to
    convert expressions of one type in terms of expressions of different kind. For
    example expanding, combining and converting expressions apply to term rewriting,
    and also simplification routines can be included here. Currently SymPy has several
    functions and basic built-in methods for performing various types of rewriting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 术语重写是一种非常一般化的功能类，用于将一种类型的表达式转换为不同种类的表达式。例如，展开、组合和转换表达式适用于术语重写，同时还可以包括简化例程。目前
    SymPy 具有多个函数和基本内置方法，用于执行各种类型的重写。
- en: Expanding
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开
- en: The simplest rewrite rule is expanding expressions into a _sparse_ form. Expanding
    has several flavors and include expanding complex valued expressions, arithmetic
    expand of products and powers but also expanding functions in terms of more general
    functions is possible. Below are listed all currently available expand rules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的重写规则是将表达式展开成稀疏形式。展开有几种类型，包括复值表达式的展开，乘积和幂的算术展开，以及将函数展开为更一般的函数。以下列出了所有当前可用的展开规则。
- en: 'Expanding of arithmetic expressions involving products and powers:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对涉及乘积和幂的算术表达式的展开：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Arithmetic expand is done by default in `expand()` so the keyword `basic` can
    be omitted. However you can set `basic=False` to avoid this type of expand if
    you use rules described below. This give complete control on what is done with
    the expression.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在 `expand()` 中进行算术展开，因此可以省略关键字 `basic`。但是，如果使用下面描述的规则，可以设置 `basic=False`
    来避免这种类型的展开。这样可以完全控制表达式的处理方式。
- en: 'Another type of expand rule is expanding complex valued expressions and putting
    them into a normal form. For this `complex` keyword is used. Note that it will
    always perform arithmetic expand to obtain the desired normal form:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种展开规则是将复值表达式展开并将其放入正常形式。可以使用 `complex` 关键字来实现这一点。请注意，它将始终执行算术展开以获得所需的正常形式：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note also that the same behavior can be obtained by using `as_real_imag()`
    method. However it will return a tuple containing the real part in the first place
    and the imaginary part in the other. This can be also done in a two step process
    by using `collect` function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，可以使用 `as_real_imag()` 方法来获得相同的行为。但是，它会返回一个包含实部在第一位和虚部在其他位置的元组。可以通过使用 `collect`
    函数进行两步处理来完成这个过程：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There is also possibility for expanding expressions in terms of expressions
    of different kind. This is very general type of expanding and usually you would
    use `rewrite()` to do specific type of rewrite:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以按不同种类的表达式展开表达式。这是一种非常一般化的展开类型，通常会使用 `rewrite()` 来进行特定类型的重写：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Common Subexpression Detection and Collection
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共子表达式检测和收集
- en: 'Before evaluating a large expression, it is often useful to identify common
    subexpressions, collect them and evaluate them at once. This is implemented in
    the `cse` function. Examples:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估大型表达式之前，通常有助于识别公共子表达式，收集它们并一次性评估它们。这在 `cse` 函数中实现。例如：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Optimizations to be performed before and after common subexpressions elimination
    can be passed in the `optimizations` optional argument. A set of predefined basic
    optimizations can be applied by passing `optimizations=''basic''`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 `optimizations` 可选参数中传递公共子表达式消除之前和之后要执行的优化。可以通过传递 `optimizations='basic'`
    应用一组预定义的基本优化：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, these optimizations can be very slow for large expressions. Moreover,
    if speed is a concern, one can pass the option `order='none'`. Order of terms
    will then be dependent on hashing algorithm implementation, but speed will be
    greatly improved.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于大型表达式来说，这些优化可能会非常缓慢。此外，如果速度是一个问题，可以传递选项 `order='none'`。然后，术语的顺序将取决于哈希算法的实现，但速度将得到极大的改善。
- en: 'More information:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Perform common subexpression elimination on an expression.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对表达式进行公共子表达式消除。
- en: 'Parameters:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**exprs** : list of SymPy expressions, or a single SymPy expression'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**exprs**：SymPy 表达式列表，或单个 SymPy 表达式'
- en: The expressions to reduce.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 待减少的表达式。
- en: '**symbols** : infinite iterator yielding unique Symbols'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**symbols**：产生唯一符号的无限迭代器'
- en: The symbols used to label the common subexpressions which are pulled out. The
    `numbered_symbols` generator is useful. The default is a stream of symbols of
    the form “x0”, “x1”, etc. This must be an infinite iterator.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于标记被提取的共同子表达式的符号。 `numbered_symbols` 生成器非常有用。默认情况下是形式为 "x0"、"x1" 等的符号流。这必须是一个无限迭代器。
- en: '**optimizations** : list of (callable, callable) pairs'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**optimizations**：（可调用，可调用）对列表'
- en: The (preprocessor, postprocessor) pairs of external optimization functions.
    Optionally ‘basic’ can be passed for a set of predefined basic optimizations.
    Such ‘basic’ optimizations were used by default in old implementation, however
    they can be really slow on larger expressions. Now, no pre or post optimizations
    are made by default.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 外部优化函数的（预处理器，后处理器）对。可选地，可以传递 'basic' 以获得一组预定义的基本优化。这些“basic”优化在旧实现中默认使用，但在较大的表达式上可能非常慢。现在，默认情况下不进行预处理或后处理优化。
- en: '**postprocess** : a function which accepts the two return values of cse and'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**postprocess**：接受 cse 的两个返回值的函数和'
- en: 'returns the desired form of output from cse, e.g. if you want the replacements
    reversed the function might be the following lambda: lambda r, e: return reversed(r),
    e'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '返回从 cse 中的期望输出形式，例如如果您希望替换反转，则函数可能是以下 lambda：lambda r, e: return reversed(r),
    e'
- en: '**order** : string, ‘none’ or ‘canonical’'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**：字符串，''none'' 或 ''canonical'''
- en: The order by which Mul and Add arguments are processed. If set to ‘canonical’,
    arguments will be canonically ordered. If set to ‘none’, ordering will be faster
    but dependent on expressions hashes, thus machine dependent and variable. For
    large expressions where speed is a concern, use the setting order=’none’.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 处理 Mul 和 Add 参数的顺序。如果设置为 'canonical'，参数将按照规范顺序排列。如果设置为 'none'，排序将更快但依赖于表达式哈希，因此是机器相关和可变的。对于速度是关键问题的大型表达式，请使用
    order='none'。
- en: '**ignore** : iterable of Symbols'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**ignore**：符号的可迭代集合'
- en: Substitutions containing any Symbol from `ignore` will be ignored.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 包含任何 `ignore` 中符号的替换将被忽略。
- en: '**list** : bool, (default True)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**list**：布尔值，（默认为 True）'
- en: Returns expression in list or else with same type as input (when False).
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 返回表达式列表或者具有与输入相同类型的输出（当为 False 时）。
- en: 'Returns:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**replacements** : list of (Symbol, expression) pairs'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**replacements**：（符号，表达式）对列表'
- en: All of the common subexpressions that were replaced. Subexpressions earlier
    in this list might show up in subexpressions later in this list.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有被替换的共同子表达式。此列表中较早的子表达式可能会出现在此列表较晚的子表达式中。
- en: '**reduced_exprs** : list of SymPy expressions'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**reduced_exprs**：SymPy 表达式的列表'
- en: The reduced expressions with all of the replacements above.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 具有上述所有替换的减少表达式。
- en: Examples
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'List of expressions with recursive substitutions:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用递归替换的表达式列表：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note: the type and mutability of input matrices is retained.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：输入矩阵的类型和可变性保留。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The user may disallow substitutions containing certain symbols:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能禁止包含特定符号的替换：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The default return value for the reduced expression(s) is a list, even if there
    is only one expression. The \(list\) flag preserves the type of the input in the
    output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 即使只有一个表达式，默认情况下减少后的返回值也是一个列表。 `list` 标志保留输出中输入的类型：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
