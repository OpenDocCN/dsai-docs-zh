- en: scipy.stats.random_table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.random_table.html#scipy.stats.random_table](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.random_table.html#scipy.stats.random_table)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Contingency tables from independent samples with fixed marginal sums.
  prefs: []
  type: TYPE_NORMAL
- en: This is the distribution of random tables with given row and column vector sums.
    This distribution represents the set of random tables under the null hypothesis
    that rows and columns are independent. It is used in hypothesis tests of independence.
  prefs: []
  type: TYPE_NORMAL
- en: Because of assumed independence, the expected frequency of each table element
    can be computed from the row and column sums, so that the distribution is completely
    determined by these two vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**row**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Sum of table entries in each row.
  prefs: []
  type: TYPE_NORMAL
- en: '**col**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Sum of table entries in each column.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, np.random.RandomState, np.random.Generator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used for drawing random variates. If *seed* is *None*, the *RandomState* singleton
    is used. If *seed* is an int, a new `RandomState` instance is used, seeded with
    seed. If *seed* is already a `RandomState` or `Generator` instance, then that
    object is used. Default is *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The row and column vectors must be one-dimensional, not empty, and each sum
    up to the same value. They cannot contain negative or noninteger entries.
  prefs: []
  type: TYPE_NORMAL
- en: Random elements from the distribution are generated either with Boyett’s [[1]](#r46006bb0839b-1)
    or Patefield’s algorithm [[2]](#r46006bb0839b-2). Boyett’s algorithm has O(N)
    time and space complexity, where N is the total sum of entries in the table. Patefield’s
    algorithm has O(K x log(N)) time complexity, where K is the number of cells in
    the table and requires only a small constant work space. By default, the *rvs*
    method selects the fastest algorithm based on the input, but you can specify the
    algorithm with the keyword *method*. Allowed values are “boyett” and “patefield”.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Boyett, AS 144 Appl. Statist. 28 (1979) 329-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: W.M. Patefield, AS 159 Appl. Statist. 30 (1981) 91-97
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the object may be called (as a function) to fix the row and column
    vector sums, returning a “frozen” distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **logpmf(x)** | Log-probability of table *x* to occur in the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(x)** | Probability of table *x* to occur in the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(row, col)** | Mean table. |'
  prefs: []
  type: TYPE_TB
- en: '| **rvs(row, col, size=None, method=None, random_state=None)** | Draw random
    tables with given row and column vector sums. |'
  prefs: []
  type: TYPE_TB
