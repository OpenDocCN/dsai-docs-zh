- en: scipy.optimize.basinhopping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.basinhopping
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find the global minimum of a function using the basin-hopping algorithm.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用盆地跳跃算法寻找函数的全局最小值。
- en: Basin-hopping is a two-phase method that combines a global stepping algorithm
    with local minimization at each step. Designed to mimic the natural process of
    energy minimization of clusters of atoms, it works well for similar problems with
    “funnel-like, but rugged” energy landscapes [[5]](#r7bc5d3316b4a-5).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 盆地跳跃是一种两阶段方法，结合了全局步进算法和每步的局部最小化。设计用于模仿原子簇能量最小化的自然过程，适用于具有“漏斗形但崎岖”的能量景观的类似问题
    [[5]](#r7bc5d3316b4a-5)。
- en: As the step-taking, step acceptance, and minimization methods are all customizable,
    this function can also be used to implement other two-phase methods.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于步骤采取、步骤接受和最小化方法都是可定制的，因此该函数也可以用于实现其他两阶段方法。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable `f(x, *args)`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**func**callable `f(x, *args)`'
- en: Function to be optimized. `args` can be passed as an optional item in the dict
    *minimizer_kwargs*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要优化的函数。`args` 可以作为字典 *minimizer_kwargs* 的可选项传递。
- en: '**x0**array_like'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**array_like'
- en: Initial guess.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 初始猜测。
- en: '**niter**integer, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**niter**整数，可选'
- en: The number of basin-hopping iterations. There will be a total of `niter + 1`
    runs of the local minimizer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 盆地跳跃迭代次数。将有 `niter + 1` 次局部最小化运行。
- en: '**T**float, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**T**浮点数，可选'
- en: The “temperature” parameter for the acceptance or rejection criterion. Higher
    “temperatures” mean that larger jumps in function value will be accepted. For
    best results *T* should be comparable to the separation (in function value) between
    local minima.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接受或拒绝标准的“温度”参数。较高的“温度”意味着将接受更大的函数值跳跃。为了获得最佳结果，*T* 应与局部最小值之间的分离（在函数值上）相当。
- en: '**stepsize**float, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**stepsize**浮点数，可选'
- en: Maximum step size for use in the random displacement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于随机位移的最大步长。
- en: '**minimizer_kwargs**dict, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**minimizer_kwargs**dict，可选'
- en: 'Extra keyword arguments to be passed to the local minimizer [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") Some important options could be:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递给本地最小化器 [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") 的额外关键字参数。一些重要的选项可能包括：
- en: methodstr
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: methodstr
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The minimization method (e.g. `"L-BFGS-B"`)
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最小化方法（例如 `"L-BFGS-B"`）
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: argstuple
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: argstuple
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extra arguments passed to the objective function (*func*) and its derivatives
    (Jacobian, Hessian).
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递给目标函数 (*func*) 及其导数（Jacobian、Hessian）的额外参数。
- en: '**take_step**callable `take_step(x)`, optional'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**take_step**callable `take_step(x)`，可选'
- en: Replace the default step-taking routine with this routine. The default step-taking
    routine is a random displacement of the coordinates, but other step-taking algorithms
    may be better for some systems. *take_step* can optionally have the attribute
    `take_step.stepsize`. If this attribute exists, then [`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") will adjust `take_step.stepsize` in order to try
    to optimize the global minimum search.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用此例程替换默认的步进例程。默认的步进例程是坐标的随机位移，但其他步进算法可能对某些系统更好。*take_step* 可以选择具有属性 `take_step.stepsize`。如果存在此属性，则
    [`basinhopping`](#scipy.optimize.basinhopping "scipy.optimize.basinhopping") 将调整
    `take_step.stepsize` 以尝试优化全局最小搜索。
- en: '**accept_test**callable, `accept_test(f_new=f_new, x_new=x_new, f_old=fold,
    x_old=x_old)`, optional'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**accept_test**callable，`accept_test(f_new=f_new, x_new=x_new, f_old=fold,
    x_old=x_old)`，可选'
- en: Define a test which will be used to judge whether to accept the step. This will
    be used in addition to the Metropolis test based on “temperature” *T*. The acceptable
    return values are True, False, or `"force accept"`. If any of the tests return
    False then the step is rejected. If the latter, then this will override any other
    tests in order to accept the step. This can be used, for example, to forcefully
    escape from a local minimum that [`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") is trapped in.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个测试，用于判断是否接受该步骤。这将与基于“温度”*T*的Metropolis测试一起使用。可以接受的返回值为True、False或`"force
    accept"`。如果任何测试返回False，则拒绝该步骤。如果是后者，则这将覆盖任何其他测试以接受该步骤。例如，可以强制性地从[`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping")被困住的局部最小值中逃脱。
- en: '**callback**callable, `callback(x, f, accept)`, optional'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**callback**可调用对象，`callback(x, f, accept)`，可选'
- en: A callback function which will be called for all minima found. `x` and `f` are
    the coordinates and function value of the trial minimum, and `accept` is whether
    that minimum was accepted. This can be used, for example, to save the lowest N
    minima found. Also, *callback* can be used to specify a user defined stop criterion
    by optionally returning True to stop the [`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") routine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个回调函数，将为找到的所有最小值调用。*x*和*f*是试探最小值的坐标和函数值，*accept*表示是否接受该最小值。例如，可以使用此功能保存找到的最低的N个最小值。此外，*callback*可以用于通过可选地返回True来指定用户定义的停止标准，以停止[`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping")程序运行。
- en: '**interval**integer, optional'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**interval**整数，可选'
- en: interval for how often to update the *stepsize*
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定期更新*stepsize*的间隔
- en: '**disp**bool, optional'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**布尔值，可选'
- en: Set to True to print status messages
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为True以打印状态消息
- en: '**niter_success**integer, optional'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**niter_success**整数，可选'
- en: Stop the run if the global minimum candidate remains the same for this number
    of iterations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果全局最小候选在此迭代次数内保持不变，则停止运行。
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**seed**{None, 整数, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(在 NumPy v2.0.dev0 中)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(在 NumPy v2.0.dev0 中")}，可选'
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used. Specify *seed* for repeatable minimizations.
    The random numbers generated with this seed only affect the default Metropolis
    *accept_test* and the default *take_step*. If you supply your own *take_step*
    and *accept_test*, and these functions use random number generation, then those
    functions are responsible for the state of their random number generator.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*seed*为None（或*np.random*），则使用[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(在 NumPy v2.0.dev0 中)")单例。如果*seed*是整数，则使用一个新的`RandomState`实例，并使用*seed*进行种子化。如果*seed*已经是`Generator`或`RandomState`实例，则直接使用该实例。指定*seed*以进行可重复的最小化。使用此种子生成的随机数仅影响默认的Metropolis
    *accept_test*和默认的*take_step*。如果您提供自己的*take_step*和*accept_test*，并且这些函数使用随机数生成，则这些函数负责其随机数生成器的状态。
- en: '**target_accept_rate**float, optional'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**target_accept_rate**浮点数，可选'
- en: The target acceptance rate that is used to adjust the *stepsize*. If the current
    acceptance rate is greater than the target, then the *stepsize* is increased.
    Otherwise, it is decreased. Range is (0, 1). Default is 0.5.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用于调整*stepsize*的目标接受率。如果当前接受率大于目标，则增加*stepsize*。否则，减少*stepsize*。范围为(0, 1)。默认值为0.5。
- en: New in version 1.8.0.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.8.0新增。
- en: '**stepwise_factor**float, optional'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**stepwise_factor**浮点数，可选'
- en: The *stepsize* is multiplied or divided by this stepwise factor upon each update.
    Range is (0, 1). Default is 0.9.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*stepsize*在每次更新时乘以或除以此步进因子。范围为(0, 1)。默认值为0.9。'
- en: New in version 1.8.0.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.8.0新增。
- en: 'Returns:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**res**OptimizeResult'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**res**OptimizeResult'
- en: 'The optimization result represented as a [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") object. Important attributes are: `x` the solution
    array, `fun` the value of the function at the solution, and `message` which describes
    the cause of the termination. The `OptimizeResult` object returned by the selected
    minimizer at the lowest minimum is also contained within this object and can be
    accessed through the `lowest_optimization_result` attribute. See [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") for a description of other attributes.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 优化结果表示为[`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult")对象。重要属性包括：`x` 解数组，`fun` 解处函数值，以及 `message` 描述终止原因。所选最小化器在最低最小值处返回的`OptimizeResult`对象也包含在此对象中，并可通过`lowest_optimization_result`属性访问。参见[`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult")获取其他属性的描述。
- en: See also
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
- en: The local minimization function called once for each basinhopping step. *minimizer_kwargs*
    is passed to this routine.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 局部最小化函数对每个basinhopping步骤调用。*minimizer_kwargs* 被传递给此例程。
- en: Notes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Basin-hopping is a stochastic algorithm which attempts to find the global minimum
    of a smooth scalar function of one or more variables [[1]](#r7bc5d3316b4a-1) [[2]](#r7bc5d3316b4a-2)
    [[3]](#r7bc5d3316b4a-3) [[4]](#r7bc5d3316b4a-4). The algorithm in its current
    form was described by David Wales and Jonathan Doye [[2]](#r7bc5d3316b4a-2) [http://www-wales.ch.cam.ac.uk/](http://www-wales.ch.cam.ac.uk/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Basin-hopping是一种随机算法，旨在找到一个或多个变量的光滑标量函数的全局最小值[[1]](#r7bc5d3316b4a-1) [[2]](#r7bc5d3316b4a-2)
    [[3]](#r7bc5d3316b4a-3) [[4]](#r7bc5d3316b4a-4)。该算法在目前的形式下由David Wales和Jonathan
    Doye描述[[2]](#r7bc5d3316b4a-2) [http://www-wales.ch.cam.ac.uk/](http://www-wales.ch.cam.ac.uk/)。
- en: The algorithm is iterative with each cycle composed of the following features
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 算法是迭代的，每个周期由以下特征组成
- en: random perturbation of the coordinates
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 坐标的随机扰动
- en: local minimization
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 局部最小化
- en: accept or reject the new coordinates based on the minimized function value
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于最小化函数值接受或拒绝新坐标
- en: The acceptance test used here is the Metropolis criterion of standard Monte
    Carlo algorithms, although there are many other possibilities [[3]](#r7bc5d3316b4a-3).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的接受测试是标准Monte Carlo算法的Metropolis标准，尽管还有许多其他可能性[[3]](#r7bc5d3316b4a-3)。
- en: This global minimization method has been shown to be extremely efficient for
    a wide variety of problems in physics and chemistry. It is particularly useful
    when the function has many minima separated by large barriers. See the [Cambridge
    Cluster Database](https://www-wales.ch.cam.ac.uk/CCD.html) for databases of molecular
    systems that have been optimized primarily using basin-hopping. This database
    includes minimization problems exceeding 300 degrees of freedom.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 已证明该全局最小化方法对物理和化学中的各种问题非常高效。当函数具有由大障碍物分隔的多个极小值时特别有用。请参见[Cambridge Cluster Database](https://www-wales.ch.cam.ac.uk/CCD.html)以获取主要使用basin-hopping优化的分子系统数据库。该数据库包括超过300个自由度的最小化问题。
- en: See the free software program [GMIN](https://www-wales.ch.cam.ac.uk/GMIN) for
    a Fortran implementation of basin-hopping. This implementation has many variations
    of the procedure described above, including more advanced step taking algorithms
    and alternate acceptance criterion.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关basin-hopping的Fortran实现请参见自由软件程序[GMIN](https://www-wales.ch.cam.ac.uk/GMIN)。该实现包括上述过程的许多变体，包括更高级的步骤算法和替代接受标准。
- en: For stochastic global optimization there is no way to determine if the true
    global minimum has actually been found. Instead, as a consistency check, the algorithm
    can be run from a number of different random starting points to ensure the lowest
    minimum found in each example has converged to the global minimum. For this reason,
    [`basinhopping`](#scipy.optimize.basinhopping "scipy.optimize.basinhopping") will
    by default simply run for the number of iterations *niter* and return the lowest
    minimum found. It is left to the user to ensure that this is in fact the global
    minimum.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于随机全局优化，无法确定是否实际上找到了真正的全局最小值。作为一致性检查，可以从多个不同的随机起始点运行算法，以确保每个示例中找到的最低最小值已收敛到全局最小值。因此，默认情况下，[`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") 将仅运行 *niter* 次迭代，并返回找到的最低最小值。用户需要确保这实际上是全局最小值。
- en: 'Choosing *stepsize*: This is a crucial parameter in [`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") and depends on the problem being solved. The step
    is chosen uniformly in the region from x0-stepsize to x0+stepsize, in each dimension.
    Ideally, it should be comparable to the typical separation (in argument values)
    between local minima of the function being optimized. [`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") will, by default, adjust *stepsize* to find an
    optimal value, but this may take many iterations. You will get quicker results
    if you set a sensible initial value for `stepsize`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 *stepsize*：这是 [`basinhopping`](#scipy.optimize.basinhopping "scipy.optimize.basinhopping")
    中的关键参数，取决于正在解决的问题。步长在每个维度中均匀选择，从 x0-stepsize 到 x0+stepsize 的区域内。理想情况下，它应与被优化函数的局部极小值之间（在参数值上的）典型分离可比较。[`basinhopping`](#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping") 将默认调整 *stepsize* 以找到最优值，但这可能需要多次迭代。如果设置一个合理的初始值给
    `stepsize`，则可以更快地获得结果。
- en: 'Choosing *T*: The parameter *T* is the “temperature” used in the Metropolis
    criterion. Basinhopping steps are always accepted if `func(xnew) < func(xold)`.
    Otherwise, they are accepted with probability:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 *T*：参数 *T* 是 Metropolis 准则中使用的“温度”。如果 `func(xnew) < func(xold)`，则 Basin-hopping
    步骤始终被接受。否则，它们将以以下概率被接受：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, for best results, *T* should to be comparable to the typical difference
    (in function values) between local minima. (The height of “walls” between local
    minima is irrelevant.)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了获得最佳结果，*T* 应与局部极小值之间（在函数值上的）典型差异可比较。（“墙”高度对局部极小值无关紧要。）
- en: If *T* is 0, the algorithm becomes Monotonic Basin-Hopping, in which all steps
    that increase energy are rejected.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *T* 为 0，则算法变为单调 Basin-Hopping，其中所有增加能量的步骤都被拒绝。
- en: New in version 0.12.0.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 0.12.0 版本中的新内容。
- en: References
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id2)]'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id2)]'
- en: Wales, David J. 2003, Energy Landscapes, Cambridge University Press, Cambridge,
    UK.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Wales, David J. 2003, 能量景观，剑桥大学出版社，剑桥，英国。
- en: '[2] ([1](#id3),[2](#id6))'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] ([1](#id3),[2](#id6))'
- en: Wales, D J, and Doye J P K, Global Optimization by Basin-Hopping and the Lowest
    Energy Structures of Lennard-Jones Clusters Containing up to 110 Atoms. Journal
    of Physical Chemistry A, 1997, 101, 5111.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Wales, D J 和 Doye J P K, Lennard-Jones 簇的基态结构的全局优化：通过 Basin-Hopping 和包含多达 110
    个原子的结构。《物理化学学报》，1997 年，101，5111。
- en: '[3] ([1](#id4),[2](#id7))'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] ([1](#id4),[2](#id7))'
- en: Li, Z. and Scheraga, H. A., Monte Carlo-minimization approach to the multiple-minima
    problem in protein folding, Proc. Natl. Acad. Sci. USA, 1987, 84, 6611.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Li, Z. 和 Scheraga, H. A., 蛋白质折叠中的多极小问题的蒙特卡洛-最小化方法，《美国国家科学院院刊》，1987 年，84，6611。
- en: '[[4](#id5)]'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[[4](#id5)]'
- en: Wales, D. J. and Scheraga, H. A., Global optimization of clusters, crystals,
    and biomolecules, Science, 1999, 285, 1368.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Wales, D. J. 和 Scheraga, H. A., 簇、晶体和生物分子的全局优化，《科学》，1999 年，285，1368。
- en: '[[5](#id1)]'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[[5](#id1)]'
- en: Olson, B., Hashmi, I., Molloy, K., and Shehu1, A., Basin Hopping as a General
    and Versatile Optimization Framework for the Characterization of Biological Macromolecules,
    Advances in Artificial Intelligence, Volume 2012 (2012), Article ID 674832, [DOI:10.1155/2012/674832](https://doi.org/10.1155/2012/674832)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Olson, B., Hashmi, I., Molloy, K., 和 Shehu1, A., Basin Hopping 作为生物大分子特征化的一般和多功能优化框架，《人工智能进展》，2012
    年卷（2012），文章 ID 674832，[DOI:10.1155/2012/674832](https://doi.org/10.1155/2012/674832)
- en: Examples
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: The following example is a 1-D minimization problem, with many local minima
    superimposed on a parabola.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子是一个一维最小化问题，在抛物线上叠加了许多局部极小值。
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Basinhopping, internally, uses a local minimization algorithm. We will use the
    parameter *minimizer_kwargs* to tell basinhopping which algorithm to use and how
    to set up that minimizer. This parameter will be passed to [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize").
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 盆地跳跃内部使用局部最小化算法。我们将使用参数*minimizer_kwargs*告诉盆地跳跃使用哪种算法以及如何设置该最小化器。此参数将传递给[`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize")。
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next consider a 2-D minimization problem. Also, this time, we will use gradient
    information to significantly speed up the search.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来考虑一个二维最小化问题。此外，这次我们将使用梯度信息来显著加速搜索。
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ll also use a different local minimization algorithm. Also, we must tell
    the minimizer that our function returns both energy and gradient (Jacobian).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用不同的局部最小化算法。此外，我们必须告诉最小化器，我们的函数同时返回能量和梯度（雅可比矩阵）。
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is an example using a custom step-taking routine. Imagine you want the
    first coordinate to take larger steps than the rest of the coordinates. This can
    be implemented like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用自定义步进例程的示例。想象一下，你希望第一个坐标采取比其他坐标更大的步骤。可以这样实现：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since `MyTakeStep.stepsize` exists basinhopping will adjust the magnitude of
    *stepsize* to optimize the search. We’ll use the same 2-D function as before
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`MyTakeStep.stepsize`存在，盆地跳跃将调整*stepsize*的大小以优化搜索。我们将使用与之前相同的二维函数。
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let’s do an example using a custom callback function which prints the value
    of every minimum found
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用一个自定义回调函数的示例，该函数打印出每个找到的最小值的值。
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ll run it for only 10 basinhopping steps this time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们只运行10次盆地跳步。
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The minimum at -1.0109 is actually the global minimum, found already on the
    8th iteration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8次迭代中已经找到的最小值为-1.0109，实际上是全局最小值。
