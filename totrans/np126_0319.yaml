- en: numpy.meshgrid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.meshgrid.html](https://numpy.org/doc/1.26/reference/generated/numpy.meshgrid.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of coordinate matrices from coordinate vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Make N-D coordinate arrays for vectorized evaluations of N-D scalar/vector fields
    over N-D grids, given one-dimensional coordinate arrays x1, x2,…, xn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.9: 1-D and 0-D cases are allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1, x2,…, xn**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D arrays representing the coordinates of a grid.
  prefs: []
  type: TYPE_NORMAL
- en: '**indexing**{‘xy’, ‘ij’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Cartesian (‘xy’, default) or matrix (‘ij’) indexing of output. See Notes for
    more details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**sparse**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True the shape of the returned coordinate array for dimension *i* is reduced
    from `(N1, ..., Ni, ... Nn)` to `(1, ..., 1, Ni, 1, ..., 1)`. These sparse coordinate
    grids are intended to be use with [Broadcasting](../../user/basics.broadcasting.html#basics-broadcasting).
    When all coordinates are used in an expression, broadcasting still leads to a
    fully-dimensonal result array.
  prefs: []
  type: TYPE_NORMAL
- en: Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If False, a view into the original arrays are returned in order to conserve
    memory. Default is True. Please note that `sparse=False, copy=False` will likely
    return non-contiguous arrays. Furthermore, more than one element of a broadcast
    array may refer to a single memory location. If you need to write to the arrays,
    make copies first.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X1, X2,…, XN**list of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: For vectors *x1*, *x2*,…, *xn* with lengths `Ni=len(xi)`, returns `(N1, N2,
    N3,..., Nn)` shaped arrays if indexing=’ij’ or `(N2, N1, N3,..., Nn)` shaped arrays
    if indexing=’xy’ with the elements of *xi* repeated to fill the matrix along the
    first dimension for *x1*, the second for *x2* and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mgrid`](numpy.mgrid.html#numpy.mgrid "numpy.mgrid")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a multi-dimensional “meshgrid” using indexing notation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ogrid`](numpy.ogrid.html#numpy.ogrid "numpy.ogrid")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct an open multi-dimensional “meshgrid” using indexing notation.
  prefs: []
  type: TYPE_NORMAL
- en: '`how-to-index`'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function supports both indexing conventions through the indexing keyword
    argument. Giving the string ‘ij’ returns a meshgrid with matrix indexing, while
    ‘xy’ returns a meshgrid with Cartesian indexing. In the 2-D case with inputs of
    length M and N, the outputs are of shape (N, M) for ‘xy’ indexing and (M, N) for
    ‘ij’ indexing. In the 3-D case with inputs of length M, N and P, outputs are of
    shape (N, M, P) for ‘xy’ indexing and (M, N, P) for ‘ij’ indexing. The difference
    is illustrated by the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the 1-D and 0-D case, the indexing and sparse keywords have no effect.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of [`meshgrid`](#numpy.meshgrid "numpy.meshgrid") is a coordinate
    grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/numpy-meshgrid-1_00_00.png](../Images/f77edb9313db215a503300c785951127.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create sparse output arrays to save memory and computation time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[`meshgrid`](#numpy.meshgrid "numpy.meshgrid") is very useful to evaluate functions
    on a grid. If the function depends on all coordinates, both dense and sparse outputs
    can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/numpy-meshgrid-1_01_00.png](../Images/4138ec295c16fb3a9dc3f3194b323b1a.png)'
  prefs: []
  type: TYPE_IMG
