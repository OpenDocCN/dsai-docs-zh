- en: pandas.DataFrame.describe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generate descriptive statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Descriptive statistics include those that summarize the central tendency, dispersion
    and shape of a dataset’s distribution, excluding `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzes both numeric and object series, as well as `DataFrame` column sets
    of mixed data types. The output will vary depending on what is provided. Refer
    to the notes below for more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**percentiles**list-like of numbers, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The percentiles to include in the output. All should fall between 0 and 1\.
    The default is `[.25, .5, .75]`, which returns the 25th, 50th, and 75th percentiles.
  prefs: []
  type: TYPE_NORMAL
- en: '**include**‘all’, list-like of dtypes or None (default), optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A white list of data types to include in the result. Ignored for `Series`.
    Here are the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘all’ : All columns of the input will be included in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list-like of dtypes : Limits the results to the provided data types. To limit
    the result to numeric types submit `numpy.number`. To limit it instead to object
    columns submit the `numpy.object` data type. Strings can also be used in the style
    of `select_dtypes` (e.g. `df.describe(include=[''O''])`). To select pandas categorical
    columns, use `''category''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None (default) : The result will include all numeric columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**exclude**list-like of dtypes or None (default), optional,'
  prefs: []
  type: TYPE_NORMAL
- en: 'A black list of data types to omit from the result. Ignored for `Series`. Here
    are the options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list-like of dtypes : Excludes the provided data types from the result. To
    exclude numeric types submit `numpy.number`. To exclude object columns submit
    the data type `numpy.object`. Strings can also be used in the style of `select_dtypes`
    (e.g. `df.describe(exclude=[''O''])`). To exclude pandas categorical columns,
    use `''category''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None (default) : The result will exclude nothing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Summary statistics of the Series or Dataframe provided.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.count`](pandas.DataFrame.count.html#pandas.DataFrame.count "pandas.DataFrame.count")'
  prefs: []
  type: TYPE_NORMAL
- en: Count number of non-NA/null observations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.max`](pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum of the values in the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.min`](pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum of the values in the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.mean`](pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")'
  prefs: []
  type: TYPE_NORMAL
- en: Mean of the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.std`](pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")'
  prefs: []
  type: TYPE_NORMAL
- en: Standard deviation of the observations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.select_dtypes`](pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")'
  prefs: []
  type: TYPE_NORMAL
- en: Subset of a DataFrame including/excluding columns based on their dtype.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For numeric data, the result’s index will include `count`, `mean`, `std`, `min`,
    `max` as well as lower, `50` and upper percentiles. By default the lower percentile
    is `25` and the upper percentile is `75`. The `50` percentile is the same as the
    median.
  prefs: []
  type: TYPE_NORMAL
- en: For object data (e.g. strings or timestamps), the result’s index will include
    `count`, `unique`, `top`, and `freq`. The `top` is the most common value. The
    `freq` is the most common value’s frequency. Timestamps also include the `first`
    and `last` items.
  prefs: []
  type: TYPE_NORMAL
- en: If multiple object values have the highest count, then the `count` and `top`
    results will be arbitrarily chosen from among those with the highest count.
  prefs: []
  type: TYPE_NORMAL
- en: For mixed data types provided via a `DataFrame`, the default is to return only
    an analysis of numeric columns. If the dataframe consists only of object and categorical
    data without any numeric columns, the default is to return an analysis of both
    the object and categorical columns. If `include='all'` is provided as an option,
    the result will include a union of attributes of each type.
  prefs: []
  type: TYPE_NORMAL
- en: The include and exclude parameters can be used to limit which columns in a `DataFrame`
    are analyzed for the output. The parameters are ignored when analyzing a `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Describing a numeric `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Describing a categorical `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Describing a timestamp `Series`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Describing a `DataFrame`. By default only numeric fields are returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Describing all columns of a `DataFrame` regardless of data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Describing a column from a `DataFrame` by accessing it as an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Including only numeric columns in a `DataFrame` description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Including only string columns in a `DataFrame` description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Including only categorical columns from a `DataFrame` description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Excluding numeric columns from a `DataFrame` description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Excluding object columns from a `DataFrame` description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
