- en: scipy.linalg.convolution_matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.convolution_matrix.html#scipy.linalg.convolution_matrix](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.convolution_matrix.html#scipy.linalg.convolution_matrix)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct a convolution matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Constructs the Toeplitz matrix representing one-dimensional convolution [[1]](#r8b920faad2e4-1).
    See the notes below for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(m,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D array to convolve.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of columns in the resulting matrix. It gives the length of the input
    to be convolved with *a*. This is analogous to the length of *v* in `numpy.convolve(a,
    v)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str'
  prefs: []
  type: TYPE_NORMAL
- en: This is analogous to *mode* in `numpy.convolve(v, a, mode)`. It must be one
    of (‘full’, ‘valid’, ‘same’). See below for how *mode* determines the shape of
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**(k, n) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: 'The convolution matrix whose row count *k* depends on *mode*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`toeplitz`](scipy.linalg.toeplitz.html#scipy.linalg.toeplitz "scipy.linalg.toeplitz")'
  prefs: []
  type: TYPE_NORMAL
- en: Toeplitz matrix
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: creates a Toeplitz matrix *A* such that `A @ v` is equivalent to using `convolve(a,
    v, mode)`. The returned array always has *n* columns. The number of rows depends
    on the specified *mode*, as explained above.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the default ‘full’ mode, the entries of *A* are given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'where `m = len(a)`. Suppose, for example, the input array is `[x, y, z]`. The
    convolution matrix has the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In ‘valid’ mode, the entries of *A* are given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This corresponds to a matrix whose rows are the subset of those from the ‘full’
    case where all the coefficients in *a* are contained in the row. For input `[x,
    y, z]`, this array looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the ‘same’ mode, the entries of *A* are given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The typical application of the ‘same’ mode is when one has a signal of length
    *n* (with *n* greater than `len(a)`), and the desired output is a filtered signal
    that is still of length *n*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For input `[x, y, z]`, this array looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Convolution”, [https://en.wikipedia.org/wiki/Convolution](https://en.wikipedia.org/wiki/Convolution)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Compare multiplication by *A* with the use of [`numpy.convolve`](https://numpy.org/devdocs/reference/generated/numpy.convolve.html#numpy.convolve
    "(in NumPy v2.0.dev0)").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Verify that `A @ x` produced the same result as applying the convolution function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For comparison to the case `mode='same'` shown above, here are the matrices
    produced by `mode='full'` and `mode='valid'` for the same coefficients and size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
