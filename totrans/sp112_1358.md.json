["```py\nscipy.stats.yeojohnson_llf(lmb, data)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> import matplotlib.pyplot as plt\n>>> from mpl_toolkits.axes_grid1.inset_locator import inset_axes \n```", "```py\n>>> x = stats.loggamma.rvs(5, loc=10, size=1000)\n>>> lmbdas = np.linspace(-2, 10)\n>>> llf = np.zeros(lmbdas.shape, dtype=float)\n>>> for ii, lmbda in enumerate(lmbdas):\n...     llf[ii] = stats.yeojohnson_llf(lmbda, x) \n```", "```py\n>>> x_most_normal, lmbda_optimal = stats.yeojohnson(x) \n```", "```py\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111)\n>>> ax.plot(lmbdas, llf, 'b.-')\n>>> ax.axhline(stats.yeojohnson_llf(lmbda_optimal, x), color='r')\n>>> ax.set_xlabel('lmbda parameter')\n>>> ax.set_ylabel('Yeo-Johnson log-likelihood') \n```", "```py\n>>> locs = [3, 10, 4]  # 'lower left', 'center', 'lower right'\n>>> for lmbda, loc in zip([-1, lmbda_optimal, 9], locs):\n...     xt = stats.yeojohnson(x, lmbda=lmbda)\n...     (osm, osr), (slope, intercept, r_sq) = stats.probplot(xt)\n...     ax_inset = inset_axes(ax, width=\"20%\", height=\"20%\", loc=loc)\n...     ax_inset.plot(osm, osr, 'c.', osm, slope*osm + intercept, 'k-')\n...     ax_inset.set_xticklabels([])\n...     ax_inset.set_yticklabels([])\n...     ax_inset.set_title(r'$\\lambda=%1.2f$' % lmbda) \n```", "```py\n>>> plt.show() \n```"]