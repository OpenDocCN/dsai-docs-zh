- en: SciPy API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy API
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/index.html)
- en: '## Importing from SciPy'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 从 SciPy 导入'
- en: 'In Python, the distinction between what is the public API of a library and
    what are private implementation details is not always clear. Unlike in other languages
    like Java, it is possible in Python to access “private” functions or objects.
    Occasionally this may be convenient, but be aware that if you do so your code
    may break without warning in future releases. Some widely understood rules for
    what is and isn’t public in Python are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，库的公共 API 和私有实现细节之间的区分并不总是清晰的。与 Java 等其他语言不同，Python 中可以访问“私有”函数或对象。偶尔这可能很方便，但请注意，如果这样做，您的代码在未来版本中可能会无预警地中断。一些广泛认可的
    Python 公共 API 规则包括：
- en: Methods / functions / classes and module attributes whose names begin with a
    leading underscore are private.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法/函数/类和模块属性名称以下划线开头的是私有的。
- en: If a class name begins with a leading underscore, none of its members are public,
    whether or not they begin with a leading underscore.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类名以下划线开头，则其所有成员都不是公共的，无论它们是否以下划线开头。
- en: If a module name in a package begins with a leading underscore none of its members
    are public, whether or not they begin with a leading underscore.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包中的模块名称以下划线开头，则其所有成员都不是公共的，无论它们是否以下划线开头。
- en: If a module or package defines `__all__`, that authoritatively defines the public
    interface.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果模块或包定义了`__all__`，则这是官方定义的公共接口。
- en: If a module or package doesn’t define `__all__`, then all names that don’t start
    with a leading underscore are public.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果模块或包没有定义`__all__`，则所有不以下划线开头的名称都是公共的。
- en: Note
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Reading the above guidelines one could draw the conclusion that every private
    module or object starts with an underscore. This is not the case; the presence
    of underscores do mark something as private, but the absence of underscores do
    not mark something as public.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读上述指南，可以得出结论，每个私有模块或对象都以下划线开头。但事实并非如此；下划线的存在确实标志着某些内容为私有，但缺少下划线并不意味着某些内容为公共的。
- en: In SciPy there are modules whose names don’t start with an underscore, but that
    should be considered private. To clarify which modules these are, we define below
    what the public API is for SciPy, and give some recommendations for how to import
    modules/functions/objects from SciPy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SciPy 中，有些模块的名称不以下划线开头，但应视为私有。为了澄清这些模块是哪些，我们在下面定义了 SciPy 的公共 API，并提供了一些关于如何从
    SciPy 导入模块/函数/对象的建议。
- en: Guidelines for importing functions from SciPy
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 SciPy 导入函数的指南
- en: 'Everything in the namespaces of SciPy submodules is public. In general in Python,
    it is recommended to make use of namespaces. For example, the function `curve_fit`
    (defined in `scipy/optimize/_minpack_py.py`) should be imported like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 子模块的命名空间中的所有内容都是公共的。通常在 Python 中建议使用命名空间。例如，函数 `curve_fit`（在 `scipy/optimize/_minpack_py.py`
    中定义）应该这样导入：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or alternatively one could use the submodule as a namespace like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以像这样使用子模块作为命名空间：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For `scipy.io` prefer the use of `import scipy` because `io` is also the name
    of a module in the Python stdlib.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `scipy.io`，推荐使用 `import scipy`，因为 `io` 也是 Python 标准库中的模块名称。
- en: 'In some cases, the public API is one level deeper. For example, the `scipy.sparse.linalg`
    module is public, and the functions it contains are not available in the `scipy.sparse`
    namespace. Sometimes it may result in more easily understandable code if functions
    are imported from one level deeper. For example, in the following it is immediately
    clear that `lomax` is a distribution if the second form is chosen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，公共 API 是更深层次的。例如，`scipy.sparse.linalg` 模块是公共的，它包含的函数在 `scipy.sparse`
    命名空间中不可用。如果选择第二种形式，则代码更容易理解，例如，以下代码立即清楚地表明 `lomax` 是一个分布：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In that case, the second form can be chosen **if** it is documented in the
    next section that the submodule in question is public. Of course you can still
    use:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果文档中指明该子模块是公共的，则可以选择第二种形式。当然，您仍然可以使用：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy is using a lazy loading mechanism which means that modules are only loaded
    in memory when you first try to access them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 使用延迟加载机制，这意味着只有在首次尝试访问模块时才会将其加载到内存中。
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `scipy` namespace itself also contains functions imported from `numpy`.
    These functions still exist for backwards compatibility, but should be imported
    from `numpy` directly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy` 命名空间本身还包含从 `numpy` 导入的函数。这些函数仍然存在以保持向后兼容性，但应直接从 `numpy` 导入。'
- en: API definition
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 定义
- en: Every submodule listed below is public. That means that these submodules are
    unlikely to be renamed or changed in an incompatible way, and if that is necessary,
    a deprecation warning will be raised for one SciPy release before the change is
    made.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出的每个子模块都是公共的。这意味着这些子模块不太可能被重命名或以不兼容的方式进行更改，如果必须更改，将在 SciPy 的一个版本中引发弃用警告。
- en: '[`scipy`](../index.html#module-scipy "scipy")'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy`](../index.html#module-scipy "scipy")'
- en: '[`scipy.cluster`](cluster.html#module-scipy.cluster "scipy.cluster")'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.cluster`](cluster.html#module-scipy.cluster "scipy.cluster")'
- en: '[`scipy.cluster.vq`](cluster.vq.html#module-scipy.cluster.vq "scipy.cluster.vq")'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.cluster.vq`](cluster.vq.html#module-scipy.cluster.vq "scipy.cluster.vq")'
- en: '[`scipy.cluster.hierarchy`](cluster.hierarchy.html#module-scipy.cluster.hierarchy
    "scipy.cluster.hierarchy")'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.cluster.hierarchy`](cluster.hierarchy.html#module-scipy.cluster.hierarchy
    "scipy.cluster.hierarchy")'
- en: '[`scipy.constants`](constants.html#module-scipy.constants "scipy.constants")'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.constants`](constants.html#module-scipy.constants "scipy.constants")'
- en: '[`scipy.datasets`](datasets.html#module-scipy.datasets "scipy.datasets")'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.datasets`](datasets.html#module-scipy.datasets "scipy.datasets")'
- en: '[`scipy.fft`](fft.html#module-scipy.fft "scipy.fft")'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.fft`](fft.html#module-scipy.fft "scipy.fft")'
- en: '[`scipy.fftpack`](fftpack.html#module-scipy.fftpack "scipy.fftpack")'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.fftpack`](fftpack.html#module-scipy.fftpack "scipy.fftpack")'
- en: '[`scipy.integrate`](integrate.html#module-scipy.integrate "scipy.integrate")'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.integrate`](integrate.html#module-scipy.integrate "scipy.integrate")'
- en: '[`scipy.interpolate`](interpolate.html#module-scipy.interpolate "scipy.interpolate")'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.interpolate`](interpolate.html#module-scipy.interpolate "scipy.interpolate")'
- en: '[`scipy.io`](io.html#module-scipy.io "scipy.io")'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io`](io.html#module-scipy.io "scipy.io")'
- en: '[`scipy.io.arff`](io.html#module-scipy.io.arff "scipy.io.arff")'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io.arff`](io.html#module-scipy.io.arff "scipy.io.arff")'
- en: '[`scipy.io.matlab`](io.matlab.html#module-scipy.io.matlab "scipy.io.matlab")'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io.matlab`](io.matlab.html#module-scipy.io.matlab "scipy.io.matlab")'
- en: '[`scipy.io.wavfile`](io.html#module-scipy.io.wavfile "scipy.io.wavfile")'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io.wavfile`](io.html#module-scipy.io.wavfile "scipy.io.wavfile")'
- en: '[`scipy.linalg`](linalg.html#module-scipy.linalg "scipy.linalg")'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg`](linalg.html#module-scipy.linalg "scipy.linalg")'
- en: '[`scipy.linalg.blas`](linalg.blas.html#module-scipy.linalg.blas "scipy.linalg.blas")'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg.blas`](linalg.blas.html#module-scipy.linalg.blas "scipy.linalg.blas")'
- en: '[`scipy.linalg.cython_blas`](linalg.cython_blas.html#module-scipy.linalg.cython_blas
    "scipy.linalg.cython_blas")'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg.cython_blas`](linalg.cython_blas.html#module-scipy.linalg.cython_blas
    "scipy.linalg.cython_blas")'
- en: '[`scipy.linalg.lapack`](linalg.lapack.html#module-scipy.linalg.lapack "scipy.linalg.lapack")'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg.lapack`](linalg.lapack.html#module-scipy.linalg.lapack "scipy.linalg.lapack")'
- en: '[`scipy.linalg.cython_lapack`](linalg.cython_lapack.html#module-scipy.linalg.cython_lapack
    "scipy.linalg.cython_lapack")'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg.cython_lapack`](linalg.cython_lapack.html#module-scipy.linalg.cython_lapack
    "scipy.linalg.cython_lapack")'
- en: '[`scipy.linalg.interpolative`](linalg.interpolative.html#module-scipy.linalg.interpolative
    "scipy.linalg.interpolative")'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.linalg.interpolative`](linalg.interpolative.html#module-scipy.linalg.interpolative
    "scipy.linalg.interpolative")'
- en: '[`scipy.misc`](misc.html#module-scipy.misc "scipy.misc")'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.misc`](misc.html#module-scipy.misc "scipy.misc")'
- en: '[`scipy.ndimage`](ndimage.html#module-scipy.ndimage "scipy.ndimage")'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.ndimage`](ndimage.html#module-scipy.ndimage "scipy.ndimage")'
- en: '[`scipy.odr`](odr.html#module-scipy.odr "scipy.odr")'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.odr`](odr.html#module-scipy.odr "scipy.odr")'
- en: '[`scipy.optimize`](optimize.html#module-scipy.optimize "scipy.optimize")'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.optimize`](optimize.html#module-scipy.optimize "scipy.optimize")'
- en: '[`scipy.optimize.cython_optimize`](optimize.cython_optimize.html#module-scipy.optimize.cython_optimize
    "scipy.optimize.cython_optimize")'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.optimize.cython_optimize`](optimize.cython_optimize.html#module-scipy.optimize.cython_optimize
    "scipy.optimize.cython_optimize")'
- en: '[`scipy.signal`](signal.html#module-scipy.signal "scipy.signal")'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.signal`](signal.html#module-scipy.signal "scipy.signal")'
- en: '[`scipy.signal.windows`](signal.windows.html#module-scipy.signal.windows "scipy.signal.windows")'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.signal.windows`](signal.windows.html#module-scipy.signal.windows "scipy.signal.windows")'
- en: '[`scipy.sparse`](sparse.html#module-scipy.sparse "scipy.sparse")'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.sparse`](sparse.html#module-scipy.sparse "scipy.sparse")'
- en: '[`scipy.sparse.linalg`](sparse.linalg.html#module-scipy.sparse.linalg "scipy.sparse.linalg")'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.sparse.linalg`](sparse.linalg.html#module-scipy.sparse.linalg "scipy.sparse.linalg")'
- en: '[`scipy.sparse.csgraph`](sparse.csgraph.html#module-scipy.sparse.csgraph "scipy.sparse.csgraph")'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.sparse.csgraph`](sparse.csgraph.html#module-scipy.sparse.csgraph "scipy.sparse.csgraph")'
- en: '[`scipy.spatial`](spatial.html#module-scipy.spatial "scipy.spatial")'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.spatial`](spatial.html#module-scipy.spatial "scipy.spatial")'
- en: '[`scipy.spatial.distance`](spatial.distance.html#module-scipy.spatial.distance
    "scipy.spatial.distance")'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.spatial.distance`](spatial.distance.html#module-scipy.spatial.distance
    "scipy.spatial.distance")'
- en: '[`scipy.spatial.transform`](spatial.transform.html#module-scipy.spatial.transform
    "scipy.spatial.transform")'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.spatial.transform`](spatial.transform.html#module-scipy.spatial.transform
    "scipy.spatial.transform")'
- en: '[`scipy.special`](special.html#module-scipy.special "scipy.special")'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.special`](special.html#module-scipy.special "scipy.special")'
- en: '[`scipy.stats`](stats.html#module-scipy.stats "scipy.stats")'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.stats`](stats.html#module-scipy.stats "scipy.stats")'
- en: '[`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency")'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency")'
- en: '`scipy.stats.distributions`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scipy.stats.distributions`'
- en: '[`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats "scipy.stats.mstats")'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats "scipy.stats.mstats")'
- en: '[`scipy.stats.qmc`](stats.qmc.html#module-scipy.stats.qmc "scipy.stats.qmc")'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.stats.qmc`](stats.qmc.html#module-scipy.stats.qmc "scipy.stats.qmc")'
- en: '[`scipy.stats.sampling`](stats.sampling.html#module-scipy.stats.sampling "scipy.stats.sampling")'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.stats.sampling`](stats.sampling.html#module-scipy.stats.sampling "scipy.stats.sampling")'
- en: SciPy structure
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciPy 结构
- en: All SciPy modules should follow the following conventions. In the following,
    a *SciPy module* is defined as a Python package, say `yyy`, that is located in
    the scipy/ directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SciPy 模块应遵循以下约定。在此处，*SciPy 模块* 定义为位于 scipy/ 目录中的 Python 包，比如 `yyy`。
- en: Ideally, each SciPy module should be as self-contained as possible. That is,
    it should have minimal dependencies on other packages or modules. Even dependencies
    on other SciPy modules should be kept to a minimum. A dependency on NumPy is of
    course assumed.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想情况下，每个 SciPy 模块应尽可能自包含。即应最小化对其他包或模块的依赖。当然，假定对 NumPy 的依赖。
- en: 'Directory `yyy/` contains:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录 `yyy/` 包含：
- en: A file `meson.build` with build configuration for the submodule.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件 `meson.build` 包含子模块的构建配置。
- en: A directory `tests/` that contains files `test_<name>.py` corresponding to modules
    `yyy/<name>{.py,.so,/}`.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录 `tests/` 包含文件 `test_<name>.py`，对应模块 `yyy/<name>{.py,.so,/}`。
- en: Private modules should be prefixed with an underscore `_`, for instance `yyy/_somemodule.py`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有模块应以下划线 `_` 前缀，例如 `yyy/_somemodule.py`。
- en: User-visible functions should have good documentation following the [NumPy documentation
    style](https://numpydoc.readthedocs.io/en/latest/format.html).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可见的函数应遵循 [NumPy 文档风格](https://numpydoc.readthedocs.io/en/latest/format.html)。
- en: The `__init__.py` of the module should contain the main reference documentation
    in its docstring. This is connected to the Sphinx documentation under `doc/` via
    Sphinx’s automodule directive.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的 `__init__.py` 应包含其主要参考文档，位于其 docstring 中。这与 Sphinx 文档在 `doc/` 下的连接通过 Sphinx
    的 automodule 指令。
- en: The reference documentation should first give a categorized list of the contents
    of the module using `autosummary::` directives, and after that explain points
    essential for understanding the use of the module.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文档应首先使用 `autosummary::` 指令列出模块内容的分类列表，随后解释了解模块使用的重要点。
- en: Tutorial-style documentation with extensive examples should be separate and
    put under `doc/source/tutorial/`.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 教程风格的文档应详细示例，需单独放置于 `doc/source/tutorial/`。
- en: See the existing SciPy submodules for guidance.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 参见现有的 SciPy 子模块以获取指导。
