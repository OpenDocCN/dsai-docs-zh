- en: scipy.sparse.random
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.random.html#scipy.sparse.random](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.random.html#scipy.sparse.random)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generate a sparse matrix of the given shape and density with randomly distributed
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Since numpy 1.17, passing a `np.random.Generator` (e.g. `np.random.default_rng`)
    for `random_state` will lead to much faster execution times.
  prefs: []
  type: TYPE_NORMAL
- en: A much slower implementation is used by default for backwards compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a sparse matrix – not a sparse array. You are encouraged
    to use `random_array` to take advantage of the sparse array functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m, n**int'
  prefs: []
  type: TYPE_NORMAL
- en: shape of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**density**real, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'density of the generated matrix: density equal to one means a full matrix,
    density of 0 means a matrix with no non-zero items.'
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: sparse matrix format.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: type of the returned matrix values.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *seed* is an int, a new `RandomState` instance is used, seeded with *seed*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *seed* is already a `Generator` or `RandomState` instance then that instance
    is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This random state will be used for sampling the sparsity structure, but not
    necessarily for sampling the values of the structurally nonzero entries of the
    matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**data_rvs**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Samples a requested number of random values. This function should take a single
    argument specifying the length of the ndarray that it will return. The structurally
    nonzero entries of the sparse random matrix will be taken from the array sampled
    by this function. By default, uniform [0, 1) random values will be sampled using
    the same random state as is used for sampling the sparsity structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**sparse matrix'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`random_array`](scipy.sparse.random_array.html#scipy.sparse.random_array "scipy.sparse.random_array")'
  prefs: []
  type: TYPE_NORMAL
- en: constructs sparse arrays instead of sparse matrices
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing a `np.random.Generator` instance for better performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Providing a sampler for the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Building a custom distribution. This example builds a squared normal from np.random:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can build it from sp.stats style rvs functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or we can subclass sp.stats rv_continous or rv_discrete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
