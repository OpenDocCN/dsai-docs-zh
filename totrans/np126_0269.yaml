- en: Universal functions (ufunc)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用函数（ufunc）
- en: 原文：[https://numpy.org/doc/1.26/reference/ufuncs.html](https://numpy.org/doc/1.26/reference/ufuncs.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/ufuncs.html](https://numpy.org/doc/1.26/reference/ufuncs.html)
- en: See also
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Universal functions (ufunc) basics](../user/basics.ufuncs.html#ufuncs-basics)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[通用函数（ufunc）基础知识](../user/basics.ufuncs.html#ufuncs-basics)'
- en: A universal function (or [ufunc](../glossary.html#term-ufunc) for short) is
    a function that operates on [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") in an element-by-element fashion, supporting [array broadcasting](../user/basics.ufuncs.html#ufuncs-broadcasting),
    [type casting](../user/basics.ufuncs.html#ufuncs-casting), and several other standard
    features. That is, a ufunc is a “[vectorized](../glossary.html#term-vectorization)”
    wrapper for a function that takes a fixed number of specific inputs and produces
    a fixed number of specific outputs. For detailed information on universal functions,
    see [Universal functions (ufunc) basics](../user/basics.ufuncs.html#ufuncs-basics).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数（或简称为[ufunc](../glossary.html#term-ufunc)）是一种以逐元素方式在[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")上操作的函数，支持[数组广播](../user/basics.ufuncs.html#ufuncs-broadcasting)、[类型转换](../user/basics.ufuncs.html#ufuncs-casting)和其他几个标准功能。换句话说，ufunc是一个为接受固定数量特定输入并产生固定数量特定输出的函数提供“矢量化”包装器。有关通用函数的详细信息，请参阅[通用函数（ufunc）基础知识](../user/basics.ufuncs.html#ufuncs-basics)。
- en: '[`ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")'
- en: '| [`numpy.ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")() |
    Functions that operate element by element on whole arrays. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`numpy.ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")() |
    在整个数组上逐元素操作的函数。 |'
- en: '### Optional keyword arguments'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '### 可选关键字参数'
- en: All ufuncs take optional keyword arguments. Most of these represent advanced
    usage and will not typically be used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有ufunc都接受可选关键字参数。其中大多数代表高级用法，通常不会被使用。
- en: '*out*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*out*'
- en: New in version 1.6.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.6中新增。
- en: The first output can be provided as either a positional or a keyword parameter.
    Keyword ‘out’ arguments are incompatible with positional ones.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个输出可以作为位置参数或关键字参数提供。关键字‘out’参数与位置参数不兼容。
- en: New in version 1.10.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.10中新增。
- en: The ‘out’ keyword argument is expected to be a tuple with one entry per output
    (which can be None for arrays to be allocated by the ufunc). For ufuncs with a
    single output, passing a single array (instead of a tuple holding a single array)
    is also valid.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 预计‘out’关键字参数将是一个元组，每个输出一个条目（对于由ufunc分配的数组，可以为None）。对于具有单个输出的ufunc，传递单个数组（而不是包含单个数组的元组）也是有效的。
- en: Passing a single array in the ‘out’ keyword argument to a ufunc with multiple
    outputs is deprecated, and will raise a warning in numpy 1.10, and an error in
    a future release.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个数组传递给具有多个输出的ufunc的‘out’关键字参数已被弃用，在numpy 1.10中将会发出警告，并在将来的版本中引发错误。
- en: If ‘out’ is None (the default), a uninitialized return array is created. The
    output array is then filled with the results of the ufunc in the places that the
    broadcast ‘where’ is True. If ‘where’ is the scalar True (the default), then this
    corresponds to the entire output being filled. Note that outputs not explicitly
    filled are left with their uninitialized values.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘out’为None（默认值），则会创建一个未初始化的返回数组。然后，输出数组将用ufunc的结果填充在广播‘where’为True的位置。如果‘where’是标量True（默认值），则这对应于整个输出被填充。请注意，未明确填充的输出将保留其未初始化的值。
- en: New in version 1.13.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.13中新增。
- en: Operations where ufunc input and output operands have memory overlap are defined
    to be the same as for equivalent operations where there is no memory overlap.
    Operations affected make temporary copies as needed to eliminate data dependency.
    As detecting these cases is computationally expensive, a heuristic is used, which
    may in rare cases result in needless temporary copies. For operations where the
    data dependency is simple enough for the heuristic to analyze, temporary copies
    will not be made even if the arrays overlap, if it can be deduced copies are not
    necessary. As an example, `np.add(a, b, out=a)` will not involve copies.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在ufunc输入和输出操作数存在内存重叠的操作被定义为与没有内存重叠的等效操作相同。受影响的操作根据需要进行临时复制以消除数据依赖性。由于检测这些情况在计算上是昂贵的，因此使用了一种启发式方法，这可能在极少数情况下导致不必要的临时复制。对于启发式分析足够简单的操作，即使数组重叠，也不会进行临时复制，如果可以推断不需要复制。例如，`np.add(a,
    b, out=a)`不会涉及复制。
- en: '*where*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*where*'
- en: New in version 1.7.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.7中新增。
- en: Accepts a boolean array which is broadcast together with the operands. Values
    of True indicate to calculate the ufunc at that position, values of False indicate
    to leave the value in the output alone. This argument cannot be used for generalized
    ufuncs as those take non-scalar input.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接受一个布尔数组，该数组与操作数一起广播。True值表示在该位置计算ufunc，False值表示保持输出中的值不变。此参数不能用于通用ufunc，因为这些ufunc接受非标量输入。
- en: Note that if an uninitialized return array is created, values of False will
    leave those values **uninitialized**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果创建了一个未初始化的返回数组，False值将使这些值**未初始化**。
- en: '*axes*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*axes*'
- en: New in version 1.15.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中新增。
- en: A list of tuples with indices of axes a generalized ufunc should operate on.
    For instance, for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. For simplicity, for generalized ufuncs that
    operate on 1-dimensional arrays (vectors), a single integer is accepted instead
    of a single-element tuple, and for generalized ufuncs for which all outputs are
    scalars, the output tuples can be omitted.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含轴索引的元组列表，通用ufunc应该在这些轴上操作。例如，对于一个适用于矩阵乘法的签名`(i,j),(j,k)->(i,k)`，基本元素是二维矩阵，这些矩阵被认为存储在每个参数的最后两个轴中。相应的轴关键字将是`[(-2,
    -1), (-2, -1), (-2, -1)]`。为简单起见，对于操作在1维数组（向量）上的通用ufunc，可以接受一个整数而不是单个元素元组，对于所有输出都是标量的通用ufunc，可以省略输出元组。
- en: '*axis*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*axis*'
- en: New in version 1.15.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中新增。
- en: A single axis over which a generalized ufunc should operate. This is a short-cut
    for ufuncs that operate over a single, shared core dimension, equivalent to passing
    in `axes` with entries of `(axis,)` for each single-core-dimension argument and
    `()` for all others. For instance, for a signature `(i),(i)->()`, it is equivalent
    to passing in `axes=[(axis,), (axis,), ()]`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通用ufunc应该操作的单个轴。这是对操作在单个共享核心维度上的ufunc的快捷方式，相当于为每个单核心维度参数传入`(axis,)`的条目和对于所有其他参数传入`()`。例如，对于签名`(i),(i)->()`，相当于传入`axes=[(axis,),
    (axis,), ()]`。
- en: '*keepdims*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*keepdims*'
- en: New in version 1.15.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中新增。
- en: If this is set to *True*, axes which are reduced over will be left in the result
    as a dimension with size one, so that the result will broadcast correctly against
    the inputs. This option can only be used for generalized ufuncs that operate on
    inputs that all have the same number of core dimensions and with outputs that
    have no core dimensions, i.e., with signatures like `(i),(i)->()` or `(m,m)->()`.
    If used, the location of the dimensions in the output can be controlled with `axes`
    and `axis`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为*True*，那些被减少的轴将保留在结果中作为一个大小为一的维度，以便结果能正确地广播到输入。此选项仅适用于操作具有相同核心维度数量的输入和没有核心维度的输出的通用ufunc，即具有类似`(i),(i)->()`或`(m,m)->()`的签名。如果使用，可以通过`axes`和`axis`来控制输出中维度的位置。
- en: '*casting*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*casting*'
- en: New in version 1.6.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: May be ‘no’, ‘equiv’, ‘safe’, ‘same_kind’, or ‘unsafe’. See [`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast") for explanations of the parameter values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是‘no’、‘equiv’、‘safe’、‘same_kind’或‘unsafe’。请参阅[`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast")以了解参数值的解释。
- en: Provides a policy for what kind of casting is permitted. For compatibility with
    previous versions of NumPy, this defaults to ‘unsafe’ for numpy < 1.7. In numpy
    1.7 a transition to ‘same_kind’ was begun where ufuncs produce a DeprecationWarning
    for calls which are allowed under the ‘unsafe’ rules, but not under the ‘same_kind’
    rules. From numpy 1.10 and onwards, the default is ‘same_kind’.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个关于允许何种类型转换的策略。为了与NumPy之前版本的兼容性，默认为numpy < 1.7时为‘unsafe’。在numpy 1.7中开始了向‘same_kind’的过渡，其中ufunc对于在‘unsafe’规则下允许的调用会产生DeprecationWarning，但在‘same_kind’规则下不允许。从numpy
    1.10开始，默认为‘same_kind’。
- en: '*order*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*order*'
- en: New in version 1.6.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Specifies the calculation iteration order/memory layout of the output array.
    Defaults to ‘K’. ‘C’ means the output should be C-contiguous, ‘F’ means F-contiguous,
    ‘A’ means F-contiguous if the inputs are F-contiguous and not also not C-contiguous,
    C-contiguous otherwise, and ‘K’ means to match the element ordering of the inputs
    as closely as possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 指定输出数组的计算迭代顺序/内存布局。默认为‘K’。‘C’表示输出应为C连续，‘F’表示F连续，‘A’表示如果输入是F连续且不是C连续，则为F连续，否则为C连续，‘K’表示尽可能与输入的元素顺序匹配。
- en: '*dtype*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*dtype*'
- en: New in version 1.6.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Overrides the DType of the output arrays the same way as the *signature*. This
    should ensure a matching precision of the calculation. The exact calculation DTypes
    chosen may depend on the ufunc and the inputs may be cast to this DType to perform
    the calculation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖输出数组的DType，方式与*signature*相同。这应该确保计算的精度匹配。所选的确切计算DTypes可能取决于ufunc，输入可能被转换为此DType以执行计算。
- en: '*subok*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*subok*'
- en: New in version 1.6.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Defaults to true. If set to false, the output will always be a strict array,
    not a subtype.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为true。如果设置为false，则输出将始终是严格的数组，而不是子类型。
- en: '*signature*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*signature*'
- en: Either a Dtype, a tuple of DTypes, or a special signature string indicating
    the input and output types of a ufunc.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是Dtype、DTypes元组或特殊的签名字符串，指示ufunc的输入和输出类型。
- en: This argument allows the user to specify exact DTypes to be used for the calculation.
    Casting will be used as necessary. The actual DType of the input arrays is not
    considered unless `signature` is `None` for that array.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数允许用户指定用于计算的确切DTypes。必要时将使用转换。除非`signature`为该数组为`None`，否则不考虑输入数组的实际DType。
- en: When all DTypes are fixed, a specific loop is chosen or an error raised if no
    matching loop exists. If some DTypes are not specified and left `None`, the behaviour
    may depend on the ufunc. At this time, a list of available signatures is provided
    by the **types** attribute of the ufunc. (This list may be missing DTypes not
    defined by NumPy.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有DTypes都固定时，选择特定的循环或者如果没有匹配的循环存在则引发错误。如果某些DTypes未指定并且保留为`None`，则行为可能取决于ufunc。此时，ufunc的**types**属性提供了可用签名的列表。（此列表可能缺少NumPy未定义的DTypes。）
- en: The `signature` only specifies the DType class/type. For example, it can specify
    that the operation should be `datetime64` or `float64` operation. It does not
    specify the `datetime64` time-unit or the `float64` byte-order.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`signature`仅指定DType类/类型。例如，它可以指定操作应为`datetime64`或`float64`操作。它不指定`datetime64`时间单位或`float64`字节顺序。'
- en: For backwards compatibility this argument can also be provided as *sig*, although
    the long form is preferred. Note that this should not be confused with the generalized
    ufunc [signature](c-api/generalized-ufuncs.html#details-of-signature) that is
    stored in the **signature** attribute of the of the ufunc object.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，此参数也可以提供为*sig*，尽管更倾向于使用长格式。请注意，这不应与存储在ufunc对象的**signature**属性中的广义ufunc
    [signature](c-api/generalized-ufuncs.html#details-of-signature)混淆。
- en: '*extobj*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*extobj*'
- en: A list of length 3 specifying the ufunc buffer-size, the error mode integer,
    and the error call-back function. Normally, these values are looked up in a thread-specific
    dictionary. Passing them here circumvents that look up and uses the low-level
    specification provided for the error mode. This may be useful, for example, as
    an optimization for calculations requiring many ufunc calls on small arrays in
    a loop.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 长度为3的列表，指定ufunc缓冲区大小、错误模式整数和错误回调函数。通常，这些值在特定线程的字典中查找。在此传递它们可以绕过该查找并使用为错误模式提供的低级规范。例如，在需要在循环中对小数组进行多次ufunc调用的计算中，这可能很有用作为优化。
- en: Attributes
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: There are some informational attributes that universal functions possess. None
    of the attributes can be set.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有一些信息性属性。这些属性都不能被设置。
- en: '| **__doc__** | A docstring for each ufunc. The first part of the docstring
    is dynamically generated from the number of outputs, the name, and the number
    of inputs. The second part of the docstring is provided at creation time and stored
    with the ufunc. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **__doc__** | 每个ufunc的文档字符串。文档字符串的第一部分是根据输出数量、名称和输入数量动态生成的。文档字符串的第二部分是在创建时提供的，并与ufunc一起存储。'
- en: '| **__name__** | The name of the ufunc. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **__name__** | ufunc的名称。 |'
- en: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | The number of inputs. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | 输入的数量。 |'
- en: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | The number of outputs. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | 输出的数量。 |'
- en: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | The number of arguments. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | 参数的数量。 |'
- en: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | The number of types. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | 类型的数量。 |'
- en: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | Returns a list with types grouped input->output. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | 返回一个按输入->输出分组的类型列表。 |'
- en: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | The identity value. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | 标识值。 |'
- en: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | Definition of the core elements a generalized ufunc
    operates on. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | 通用ufunc操作的核心元素的定义。 |'
- en: '### Methods'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '### 方法'
- en: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | Reduces [`array`](generated/numpy.array.html#numpy.array "numpy.array")''s dimension
    by one, by applying ufunc along one axis. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | 通过沿一个轴应用ufunc，将[`array`](generated/numpy.array.html#numpy.array "numpy.array")的维度减少一个。
    |'
- en: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | Accumulate the result of
    applying the operator to all elements. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | 对所有元素应用运算符的结果进行累积。 |'
- en: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | Performs a (local) reduce
    with specified slices over a single axis. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | 在单个轴上执行指定切片的（局部）归约。 |'
- en: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | 将ufunc *op* 应用于所有(a, b)对，其中a在*A*中，b在*B*中。 |'
- en: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | Performs unbuffered in place operation on operand ''a'' for elements specified
    by ''indices''. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | 对由''indices''指定的元素在操作数''a''上执行无缓冲区的原地操作。 |'
- en: Warning
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: A reduce-like operation on an array with a data-type that has a range “too small”
    to handle the result will silently wrap. One should use [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") to increase the size of the data-type over which reduction takes
    place.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有处理结果的范围“太小”的数据类型的数组进行类似归约的操作将悄悄地包装。应使用[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")来增加进行减少的数据类型的大小。
- en: Available ufuncs
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的ufunc
- en: There are currently more than 60 universal functions defined in [`numpy`](index.html#module-numpy
    "numpy") on one or more types, covering a wide variety of operations. Some of
    these ufuncs are called automatically on arrays when the relevant infix notation
    is used (*e.g.*, [`add(a, b)`](generated/numpy.add.html#numpy.add "numpy.add")
    is called internally when `a + b` is written and *a* or *b* is an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")). Nevertheless, you may still want to use the ufunc call in order
    to use the optional output argument(s) to place the output(s) in an object (or
    objects) of your choice.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在[`numpy`](index.html#module-numpy "numpy")中定义了60多个通用函数，涵盖了多种操作类型。当使用相关的中缀符号时（*例如*，当写入`a
    + b`时，如果*a*或*b*是[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")，则内部会自动调用[`add(a,
    b)`](generated/numpy.add.html#numpy.add "numpy.add")），一些ufunc将自动在数组上调用。尽管如此，您可能仍希望使用ufunc调用，以使用可选的输出参数将输出放置在您选择的对象（或对象）中。
- en: Recall that each ufunc operates element-by-element. Therefore, each scalar ufunc
    will be described as if acting on a set of scalar inputs to return a set of scalar
    outputs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每个ufunc都是逐元素操作。因此，每个标量ufunc将被描述为在一组标量输入上操作以返回一组标量输出。
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The ufunc still returns its output(s) even if you use the optional output argument(s).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用了可选的输出参数，ufunc仍会返回其输出。
- en: Math operations
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | 逐元素相加参数。 |'
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相减。'
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相乘。'
- en: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | Matrix product of two arrays. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | 两个数组的矩阵乘积。'
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相除。'
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | 计算输入指数之和的对数。'
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | 以2为底，计算输入指数之和的对数。'
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | 逐元素相除。'
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | 返回输入的商的最大整数，小于或等于该商。'
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | 数值取负，逐元素操作。'
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | 数值取正，逐元素操作。'
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | 第一个数组元素按第二个数组元素的幂逐元素计算。'
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | 第一个数组元素按第二个数组元素的幂逐元素计算。'
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。'
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | 返回除法的逐元素余数。'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。'
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | 同时返回逐元素商和余数。'
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。'
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | 将数组中的元素四舍五入到最近的整数。 |'
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | 返回数字的逐元素符号指示。 |'
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | 计算 Heaviside 阶跃函数。 |'
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | 返回复共轭，逐元素计算。 |'
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | 返回复共轭，逐元素计算。 |'
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有元素的指数。 |'
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有*p*的*2**p*。 |'
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | 自然对数，逐元素计算。 |'
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | *x* 的以 2 为底的对数。 |'
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | 返回输入数组的以 10 为底的对数，逐元素计算。 |'
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | 计算数组中所有元素的`exp(x) - 1`。 |'
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | 返回输入数组加一后的自然对数，逐元素计算。 |'
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的非负平方根，逐元素计算。 |'
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | 返回输入的逐元素平方。 |'
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的立方根，逐元素计算。 |'
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | 返回参数的倒数，逐元素计算。 |'
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最大公约数。 |'
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最小公倍数。 |'
- en: Tip
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Tip
- en: The optional output arguments can be used to help you save memory for large
    calculations. If your arrays are large, complicated expressions can take longer
    than absolutely necessary due to the creation and (later) destruction of temporary
    calculation spaces. For example, the expression `G = A * B + C` is equivalent
    to `T1 = A * B; G = T1 + C; del T1`. It will be more quickly executed as `G =
    A * B; add(G, C, G)` which is the same as `G = A * B; G += C`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的输出参数可用于帮助您在大型计算中节省内存。如果您的数组很大，复杂的表达式可能需要比绝对必要的时间更长，因为会创建和（稍后）销毁临时计算空间。例如，表达式
    `G = A * B + C` 等同于 `T1 = A * B; G = T1 + C; del T1`。将更快地执行为 `G = A * B; add(G,
    C, G)`，这与 `G = A * B; G += C` 相同。
- en: Trigonometric functions
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三角函数
- en: All trigonometric functions use radians when an angle is called for. The ratio
    of degrees to radians is \(180^{\circ}/\pi.\)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三角函数在需要角度时使用弧度。度数与弧度的比率为 \(180^{\circ}/\pi\)。
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | 逐元素计算正弦函数。 |'
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | 逐元素计算余弦函数。 |'
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | 逐元素计算正切函数。 |'
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反正弦函数。 |'
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反余弦函数。 |'
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反正切函数。 |'
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | 逐元素计算 `x1/x2` 的反正切值，并正确选择象限。 |'
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | 给定直角三角形的“腿”，返回其斜边。 |'
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算双曲正弦函数。 |'
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算双曲余弦函数。 |'
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算双曲正切函数。 |'
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲正弦函数。 |'
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲余弦函数。 |'
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲正切函数。 |'
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | 将弧度转换为角度。 |'
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`角度转弧度`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。'
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`度转弧度`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。'
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`弧度转角度`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度。'
- en: Bit-twiddling functions
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位操作函数
- en: These function all require integer arguments and they manipulate the bit-pattern
    of those arguments.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数都需要整数参数，并且它们操作这些参数的位模式。
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`按位与`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | 逐元素计算两个数组的按位与。'
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`按位或`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | 逐元素计算两个数组的按位或。'
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`按位异或`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | 逐元素计算两个数组的按位异或。'
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`按位取反`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | 计算逐元素的按位取反或按位非。'
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`左移`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | 将整数的位向左移动。'
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`右移`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | 将整数的位向右移动。'
- en: Comparison functions
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较函数
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`大于`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素的(x1 > x2)的真值。'
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`大于等于`](generated/numpy.greater_equal.html#numpy.greater_equal "numpy.greater_equal")(x1, x2, /[, out, where, ...])
    | 返回逐元素的(x1 >= x2)的真值。'
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`小于`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素的(x1 < x2)的真值。'
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`小于等于`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素的(x1 <= x2)的真值。'
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`不等于`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素的(x1 != x2)。'
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`相等`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | 返回逐元素的(x1 == x2)。'
- en: Warning
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use the Python keywords `and` and `or` to combine logical array expressions.
    These keywords will test the truth value of the entire array (not element-by-element
    as you might expect). Use the bitwise operators & and | instead.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用Python关键字`and`和`or`来组合逻辑数组表达式。这些关键字将测试整个数组的真值（而不是你可能期望的逐元素）。请使用按位运算符&和|代替。
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | 计算 x1 与 x2 的逻辑与值，逐元素进行。 |'
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | 计算 x1 或 x2 的逻辑或值，逐元素进行。 |'
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | 计算 x1 与 x2 的逻辑异或值，逐元素进行。 |'
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | 计算 x 的逻辑非值，逐元素进行。 |'
- en: Warning
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The bit-wise operators & and | are the proper way to perform element-by-element
    array comparisons. Be sure you understand the operator precedence: `(a > 2) &
    (a < 5)` is the proper syntax because `a > 2 & a < 5` will result in an error
    due to the fact that `2 & a` is evaluated first.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符 & 和 | 是执行逐元素数组比较的正确方式。请确保您理解运算符的优先级：`(a > 2) & (a < 5)` 是正确的语法，因为 `a >
    2 & a < 5` 会导致错误，因为首先评估 `2 & a`。
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: Tip
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The Python function `max()` will find the maximum over a one-dimensional array,
    but it will do so using a slower sequence interface. The reduce method of the
    maximum ufunc is much faster. Also, the `max()` method will not give answers you
    might expect for arrays with greater than one dimension. The reduce method of
    minimum also allows you to compute a total minimum over an array.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数 `max()` 可以在一维数组上找到最大值，但是使用较慢的序列接口。最大 ufunc 的 reduce 方法要快得多。此外，`max()`
    方法对于大于一维的数组可能不会给出您期望的答案。最小值的 reduce 方法还允许您计算数组的总最小值。
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Warning
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the behavior of `maximum(a, b)` is different than that of `max(a, b)`. As a
    ufunc, `maximum(a, b)` performs an element-by-element comparison of *a* and *b*
    and chooses each element of the result according to which element in the two arrays
    is larger. In contrast, `max(a, b)` treats the objects *a* and *b* as a whole,
    looks at the (total) truth value of `a > b` and uses it to return either *a* or
    *b* (as a whole). A similar difference exists between `minimum(a, b)` and `min(a,
    b)`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximum(a, b)` 的行为与 `max(a, b)` 不同。作为一个 ufunc，`maximum(a, b)` 对 *a* 和 *b*
    进行逐元素比较，并根据两个数组中的哪个元素较大来选择结果的每个元素。相反，`max(a, b)` 将对象 *a* 和 *b* 视为一个整体，查看 `a >
    b` 的（总体）真值，并使用它来返回 *a* 或 *b*（作为一个整体）。`minimum(a, b)` 和 `min(a, b)` 之间也存在类似的差异。'
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Floating functions
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点函数
- en: Recall that all of these functions work element-by-element over an array, returning
    an array output. The description details only a single operation.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有这些函数都是在数组上逐元素进行操作，返回一个数组输出。描述仅详细说明了单个操作。
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting,��order, ...])
    | 逐元素测试是否为有限值（既不是无穷大也不是非数字）。 |'
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为正无穷或负无穷。 |'
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaN，并将结果作为布尔数组返回。 |'
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaT（不是时间），并将结果作为布尔数组返回。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。 |'
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | 返回元素为 True 的位置，其中 signbit 被设置（小于零）。 |'
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | 将 x1 的符号更改为 x2 的符号，逐元素操作。 |'
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 朝向 x2 的下一个浮点值，逐元素操作。 |'
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | 返回 x 与最近相邻数字之间的距离。 |'
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | 返回数组的小数部分和整数部分，逐元素操作。 |'
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 * 2**x2，逐元素操作。 |'
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | 将 x 的元素分解为尾数和二次指数。 |'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的元素余数。 |'
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | 返回输入的下限，逐元素操作。 |'
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | 返回输入的上限，逐元素操作。 |'
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order,��...])
    | 返回输入的截断值，逐元素操作。 |'
- en: '[`ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")'
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[`ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")'
- en: '| [`numpy.ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")() |
    Functions that operate element by element on whole arrays. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`numpy.ufunc`](generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")() |
    逐元素在整个数组上操作的函数。 |'
- en: '### Optional keyword arguments'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '### 可选关键字参数'
- en: All ufuncs take optional keyword arguments. Most of these represent advanced
    usage and will not typically be used.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 ufuncs 都接受可选的关键字参数。其中大多数代表高级用法，通常不会被使用。
- en: '*out*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*out*'
- en: New in version 1.6.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.6 新增。
- en: The first output can be provided as either a positional or a keyword parameter.
    Keyword ‘out’ arguments are incompatible with positional ones.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个输出可以作为位置参数或关键字参数提供。关键字‘out’参数与位置参数不兼容。
- en: New in version 1.10.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.10中的新内容。
- en: The ‘out’ keyword argument is expected to be a tuple with one entry per output
    (which can be None for arrays to be allocated by the ufunc). For ufuncs with a
    single output, passing a single array (instead of a tuple holding a single array)
    is also valid.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 预期‘out’关键字参数是一个元组，每个输出一个条目（对于由ufunc分配的数组，可以为None）。对于具有单个输出的ufunc，传递单个数组（而不是包含单个数组的元组）也是有效的。
- en: Passing a single array in the ‘out’ keyword argument to a ufunc with multiple
    outputs is deprecated, and will raise a warning in numpy 1.10, and an error in
    a future release.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个数组传递给具有多个输出的ufunc的‘out’关键字参数已被弃用，并将在numpy 1.10中引发警告，并在将来的版本中引发错误。
- en: If ‘out’ is None (the default), a uninitialized return array is created. The
    output array is then filled with the results of the ufunc in the places that the
    broadcast ‘where’ is True. If ‘where’ is the scalar True (the default), then this
    corresponds to the entire output being filled. Note that outputs not explicitly
    filled are left with their uninitialized values.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘out’为None（默认值），则创建一个未初始化的返回数组。然后，输出数组将用ufunc的结果填充在广播‘where’为True的位置。如果‘where’是标量True（默认值），则这对应于整个输出被填充。请注意，未明确填充的输出将保留其未初始化的值。
- en: New in version 1.13.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.13中的新内容。
- en: Operations where ufunc input and output operands have memory overlap are defined
    to be the same as for equivalent operations where there is no memory overlap.
    Operations affected make temporary copies as needed to eliminate data dependency.
    As detecting these cases is computationally expensive, a heuristic is used, which
    may in rare cases result in needless temporary copies. For operations where the
    data dependency is simple enough for the heuristic to analyze, temporary copies
    will not be made even if the arrays overlap, if it can be deduced copies are not
    necessary. As an example, `np.add(a, b, out=a)` will not involve copies.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有内存重叠的ufunc输入和输出操作，其定义与没有内存重叠的等效操作相同。受影响的操作根据需要制作临时副本以消除数据依赖性。由于检测这些情况在计算上是昂贵的，因此使用启发式方法，这可能在罕见情况下导致不必要的临时副本。对于启发式分析足够简单以分析的数据依赖性的操作，即使数组重叠，也不会制作临时副本，如果可以推断不需要副本。例如，`np.add(a,
    b, out=a)`不会涉及副本。
- en: '*where*'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*where*'
- en: New in version 1.7.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.7中的新内容。
- en: Accepts a boolean array which is broadcast together with the operands. Values
    of True indicate to calculate the ufunc at that position, values of False indicate
    to leave the value in the output alone. This argument cannot be used for generalized
    ufuncs as those take non-scalar input.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接受与操作数一起广播的布尔数组。True的值表示在该位置计算ufunc，False的值表示保持输出中的值不变。此参数不能用于通用ufunc，因为这些ufunc接受非标量输入。
- en: Note that if an uninitialized return array is created, values of False will
    leave those values **uninitialized**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果创建了一个未初始化的返回数组，则False的值将使这些值保持**未初始化**。
- en: '*axes*'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '*轴*'
- en: New in version 1.15.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中的新内容。
- en: A list of tuples with indices of axes a generalized ufunc should operate on.
    For instance, for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. For simplicity, for generalized ufuncs that
    operate on 1-dimensional arrays (vectors), a single integer is accepted instead
    of a single-element tuple, and for generalized ufuncs for which all outputs are
    scalars, the output tuples can be omitted.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含轴的索引元组列表，通用ufunc应该在其上操作。例如，对于适用于矩阵乘法的签名`(i,j),(j,k)->(i,k)`，基本元素是二维矩阵，这些矩阵被认为存储在每个参数的最后两个轴中。相应的轴关键字将是`[(-2,
    -1), (-2, -1), (-2, -1)]`。为简单起见，对于操作在1维数组（向量）上的通用ufunc，可以接受单个整数而不是单个元素元组，并且对于所有输出都是标量的通用ufunc，可以省略输出元组。
- en: '*axis*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*轴*'
- en: New in version 1.15.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中的新内容。
- en: A single axis over which a generalized ufunc should operate. This is a short-cut
    for ufuncs that operate over a single, shared core dimension, equivalent to passing
    in `axes` with entries of `(axis,)` for each single-core-dimension argument and
    `()` for all others. For instance, for a signature `(i),(i)->()`, it is equivalent
    to passing in `axes=[(axis,), (axis,), ()]`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个广义ufunc应该操作的单个轴。这是对于操作在单个共享核心维度上的ufunc的快捷方式，相当于为每个单核心维度参数传递`(axis,)`的`axes`条目和对于所有其他参数传递`()`。例如，对于签名`(i),(i)->()`，等效于传递`axes=[(axis,),
    (axis,), ()]`。
- en: '*keepdims*'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*keepdims*'
- en: New in version 1.15.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中新增。
- en: If this is set to *True*, axes which are reduced over will be left in the result
    as a dimension with size one, so that the result will broadcast correctly against
    the inputs. This option can only be used for generalized ufuncs that operate on
    inputs that all have the same number of core dimensions and with outputs that
    have no core dimensions, i.e., with signatures like `(i),(i)->()` or `(m,m)->()`.
    If used, the location of the dimensions in the output can be controlled with `axes`
    and `axis`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为*True*，则将被减少的轴保留在结果中作为大小为一的维度，以便结果正确地广播到输入。此选项仅适用于对所有具有相同核心维度数量的输入进行操作并且输出没有核心维度的广义ufunc，即具有类似`(i),(i)->()`或`(m,m)->()`的签名。如果使用，可以使用`axes`和`axis`来控制输出中的维度位置。
- en: '*casting*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*casting*'
- en: New in version 1.6.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: May be ‘no’, ‘equiv’, ‘safe’, ‘same_kind’, or ‘unsafe’. See [`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast") for explanations of the parameter values.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是‘no’、‘equiv’、‘safe’、‘same_kind’或‘unsafe’。有关参数值的解释，请参见[`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast")。
- en: Provides a policy for what kind of casting is permitted. For compatibility with
    previous versions of NumPy, this defaults to ‘unsafe’ for numpy < 1.7. In numpy
    1.7 a transition to ‘same_kind’ was begun where ufuncs produce a DeprecationWarning
    for calls which are allowed under the ‘unsafe’ rules, but not under the ‘same_kind’
    rules. From numpy 1.10 and onwards, the default is ‘same_kind’.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了允许的转换类型的策略。为了与NumPy的先前版本兼容，对于numpy < 1.7，默认为‘unsafe’。在numpy 1.7中，开始过渡到‘same_kind’，其中ufunc对于在‘unsafe’规则下允许的调用会产生DeprecationWarning，但在‘same_kind’规则下不允许。从numpy
    1.10开始，默认为‘same_kind’。
- en: '*order*'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*order*'
- en: New in version 1.6.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Specifies the calculation iteration order/memory layout of the output array.
    Defaults to ‘K’. ‘C’ means the output should be C-contiguous, ‘F’ means F-contiguous,
    ‘A’ means F-contiguous if the inputs are F-contiguous and not also not C-contiguous,
    C-contiguous otherwise, and ‘K’ means to match the element ordering of the inputs
    as closely as possible.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 指定输出数组的计算迭代顺序/内存布局。默认为‘K’。‘C’表示输出应为C连续，‘F’表示F连续，‘A’表示如果输入是F连续且不是C连续，则为F连续，否则为C连续，‘K’表示尽可能与输入的元素顺序匹配。
- en: '*dtype*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*dtype*'
- en: New in version 1.6.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Overrides the DType of the output arrays the same way as the *signature*. This
    should ensure a matching precision of the calculation. The exact calculation DTypes
    chosen may depend on the ufunc and the inputs may be cast to this DType to perform
    the calculation.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖输出数组的DType，方式与*signature*相同。这应该确保计算的精度匹配。所选的确切计算DTypes可能取决于ufunc，输入可能被转换为此DType以执行计算。
- en: '*subok*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*subok*'
- en: New in version 1.6.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中新增。
- en: Defaults to true. If set to false, the output will always be a strict array,
    not a subtype.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为true。如果设置为false，则输出将始终是严格的数组，而不是子类型。
- en: '*signature*'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*signature*'
- en: Either a Dtype, a tuple of DTypes, or a special signature string indicating
    the input and output types of a ufunc.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是Dtype、DTypes元组或指示ufunc的输入和输出类型的特殊签名字符串。
- en: This argument allows the user to specify exact DTypes to be used for the calculation.
    Casting will be used as necessary. The actual DType of the input arrays is not
    considered unless `signature` is `None` for that array.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数允许用户指定用于计算的确切DTypes。必要时将进行强制转换。除非`signature`为该数组的`None`，否则不考虑输入数组的实际DType。
- en: When all DTypes are fixed, a specific loop is chosen or an error raised if no
    matching loop exists. If some DTypes are not specified and left `None`, the behaviour
    may depend on the ufunc. At this time, a list of available signatures is provided
    by the **types** attribute of the ufunc. (This list may be missing DTypes not
    defined by NumPy.)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有DTypes都固定时，将选择特定的循环或者如果没有匹配的循环存在则引发错误。如果某些DTypes未指定并且保留为`None`，则行为可能取决于ufunc。此时，ufunc的**types**属性提供了可用签名列表。（此列表可能缺少NumPy未定义的DTypes。）
- en: The `signature` only specifies the DType class/type. For example, it can specify
    that the operation should be `datetime64` or `float64` operation. It does not
    specify the `datetime64` time-unit or the `float64` byte-order.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`signature`仅指定DType类/类型。例如，它可以指定操作应为`datetime64`或`float64`操作。它不指定`datetime64`时间单位或`float64`字节顺序。'
- en: For backwards compatibility this argument can also be provided as *sig*, although
    the long form is preferred. Note that this should not be confused with the generalized
    ufunc [signature](c-api/generalized-ufuncs.html#details-of-signature) that is
    stored in the **signature** attribute of the of the ufunc object.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，此参数也可以提供为*sig*，尽管长格式更受推荐。请注意，这不应与存储在ufunc对象的**signature**属性中的广义ufunc
    [signature](c-api/generalized-ufuncs.html#details-of-signature)混淆。
- en: '*extobj*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*extobj*'
- en: A list of length 3 specifying the ufunc buffer-size, the error mode integer,
    and the error call-back function. Normally, these values are looked up in a thread-specific
    dictionary. Passing them here circumvents that look up and uses the low-level
    specification provided for the error mode. This may be useful, for example, as
    an optimization for calculations requiring many ufunc calls on small arrays in
    a loop.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长度为3的列表，指定了ufunc缓冲区大小、错误模式整数和错误回调函数。通常，这些值在线程特定的字典中查找。在这里传递它们可以避免该查找，并使用提供的错误模式的低级规范。例如，这可能对在循环中对小数组进行多次ufunc调用的计算进行优化。
- en: Attributes
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: There are some informational attributes that universal functions possess. None
    of the attributes can be set.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有一些信��属性。这些属性都不能被设置。
- en: '| **__doc__** | A docstring for each ufunc. The first part of the docstring
    is dynamically generated from the number of outputs, the name, and the number
    of inputs. The second part of the docstring is provided at creation time and stored
    with the ufunc. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| **__doc__** | 每个ufunc的文档字符串。文档字符串的第一部分是根据输出数量、名称和输入数量动态生成的。文档字符串的第二部分是在创建时提供的，并与ufunc一起存储。'
- en: '| **__name__** | The name of the ufunc. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| **__name__** | ufunc的名称。'
- en: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | The number of inputs. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | 输入的数量。'
- en: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | The number of outputs. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | 输出的数量。'
- en: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | The number of arguments. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | 参数的数量。'
- en: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | The number of types. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | 类型的数量。'
- en: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | Returns a list with types grouped input->output. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | 返回一个按输入->输出分组的类型列表。'
- en: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | The identity value. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | 标识值。'
- en: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | Definition of the core elements a generalized ufunc
    operates on. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | 一个广义ufunc操作的核心元素的定义。'
- en: '### Methods'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '### 方法'
- en: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | Reduces [`array`](generated/numpy.array.html#numpy.array "numpy.array")''s dimension
    by one, by applying ufunc along one axis. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | 通过沿一个轴应用ufunc，将[`array`](generated/numpy.array.html#numpy.array "numpy.array")的维度减少一个。'
- en: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | Accumulate the result of
    applying the operator to all elements. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | 累积应用操作符到所有元素的结果。'
- en: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | Performs a (local) reduce
    with specified slices over a single axis. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | 在单个轴上执行（局部）指定切片的reduce。'
- en: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | 将ufunc *op* 应用于所有(a, b)对，其中a在*A*中，b在*B*中。 |'
- en: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | Performs unbuffered in place operation on operand ''a'' for elements specified
    by ''indices''. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | 对由''indices''指定的元素在操作数''a''上执行非缓冲区内操作。 |'
- en: Warning
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'A reduce-like operation on an array with a data-type that has a range “too
    small” to handle the result will silently wrap. One should use [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") to increase the size of the data-type over which reduction takes
    place.  ### Optional keyword arguments'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '对于具有范围“太小”以处理结果的数据类型的数组上的类似减少操作将静默包装。应该使用[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")来增加进行减少操作的数据类型的大小。  ### 可选关键字参数'
- en: All ufuncs take optional keyword arguments. Most of these represent advanced
    usage and will not typically be used.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 所有ufunc都接受可选的关键字参数。其中大多数代表高级用法，通常不会被使用。
- en: '*out*'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*out*'
- en: New in version 1.6.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.6中引入。
- en: The first output can be provided as either a positional or a keyword parameter.
    Keyword ‘out’ arguments are incompatible with positional ones.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个输出可以作为位置参数或关键字参数提供。关键字‘out’参数与位置参数不兼容。
- en: New in version 1.10.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.10中引入。
- en: The ‘out’ keyword argument is expected to be a tuple with one entry per output
    (which can be None for arrays to be allocated by the ufunc). For ufuncs with a
    single output, passing a single array (instead of a tuple holding a single array)
    is also valid.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: “out”关键字参数应该是一个元组，每个输出对应一个条目（对于需要由ufunc分配的数组，可以为None）。对于只有一个输出的ufunc，传递单个数组（而不是包含单个数组的元组）也是有效的。
- en: Passing a single array in the ‘out’ keyword argument to a ufunc with multiple
    outputs is deprecated, and will raise a warning in numpy 1.10, and an error in
    a future release.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在‘out’关键字参数中传递单个数组给具有多个输出的ufunc已被弃用，在numpy 1.10中会引发警告，在将来的版本中会引发错误。
- en: If ‘out’ is None (the default), a uninitialized return array is created. The
    output array is then filled with the results of the ufunc in the places that the
    broadcast ‘where’ is True. If ‘where’ is the scalar True (the default), then this
    corresponds to the entire output being filled. Note that outputs not explicitly
    filled are left with their uninitialized values.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘out’为None（默认值），则创建一个未初始化的返回数组。然后，输出数组将用广播“where”为True的位置中的ufunc结果填充。如果‘where’是标量True（默认值），则对应���整个输出被填充。请注意，未明确填充的输出将保留其未初始化的值。
- en: New in version 1.13.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.13中引入。
- en: Operations where ufunc input and output operands have memory overlap are defined
    to be the same as for equivalent operations where there is no memory overlap.
    Operations affected make temporary copies as needed to eliminate data dependency.
    As detecting these cases is computationally expensive, a heuristic is used, which
    may in rare cases result in needless temporary copies. For operations where the
    data dependency is simple enough for the heuristic to analyze, temporary copies
    will not be made even if the arrays overlap, if it can be deduced copies are not
    necessary. As an example, `np.add(a, b, out=a)` will not involve copies.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当ufunc输入和输出操作数具有内存重叠时，定义为与没有内存重叠的等效操作相同。受影响的操作根据需要进行临时复制以消除数据依赖性。由于检测这些情况的计算成本很高，因此使用了一种启发式方法，这可能在极少数情况下导致不必要的临时复制。对于启发式分析可以分析的数据依赖性简单到足以消除临时复制的操作，即使数组重叠，也不会进行复制。例如，`np.add(a,
    b, out=a)`将不涉及复制。
- en: '*where*'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*where*'
- en: New in version 1.7.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.7中引入。
- en: Accepts a boolean array which is broadcast together with the operands. Values
    of True indicate to calculate the ufunc at that position, values of False indicate
    to leave the value in the output alone. This argument cannot be used for generalized
    ufuncs as those take non-scalar input.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接受一个布尔数组，该数组与操作数一起进行广播。True值指示在该位置计算ufunc，False值指示保持输出中的值不变。此参数不能用于广义ufunc，因为这些ufunc接受非标量输入。
- en: Note that if an uninitialized return array is created, values of False will
    leave those values **uninitialized**.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果创建了一个未初始化的返回数组，False的值将使这些值保持**未初始化**。
- en: '*axes*'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*axes*'
- en: New in version 1.15.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本1.15中引入。
- en: A list of tuples with indices of axes a generalized ufunc should operate on.
    For instance, for a signature of `(i,j),(j,k)->(i,k)` appropriate for matrix multiplication,
    the base elements are two-dimensional matrices and these are taken to be stored
    in the two last axes of each argument. The corresponding axes keyword would be
    `[(-2, -1), (-2, -1), (-2, -1)]`. For simplicity, for generalized ufuncs that
    operate on 1-dimensional arrays (vectors), a single integer is accepted instead
    of a single-element tuple, and for generalized ufuncs for which all outputs are
    scalars, the output tuples can be omitted.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含广义ufunc应该操作的轴索引的元组列表。例如，对于适用于矩阵乘法的签名`(i,j),(j,k)->(i,k)`，基本元素是二维矩阵，这些矩阵被认为存储在每个参数的最后两个轴中。相应的轴关键字将是`[(-2,
    -1), (-2, -1), (-2, -1)]`。为简单起见，对于操作1维数组（向量）的广义ufunc，可以接受单个整数而不是单个元素元组，并且对于所有输出都是标量的广义ufunc，可以省略输出元组。
- en: '*axis*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*axis*'
- en: New in version 1.15.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中的新功能。
- en: A single axis over which a generalized ufunc should operate. This is a short-cut
    for ufuncs that operate over a single, shared core dimension, equivalent to passing
    in `axes` with entries of `(axis,)` for each single-core-dimension argument and
    `()` for all others. For instance, for a signature `(i),(i)->()`, it is equivalent
    to passing in `axes=[(axis,), (axis,), ()]`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 广义ufunc应该操作的单个轴。这是一个快捷方式，用于操作一个单一共享核心维度的ufunc，相当于为每个单一核心维度参数传递`(axis,)`的`axes`条目和对于所有其他参数传递`()`。例如，对于签名`(i),(i)->()`，等效于传递`axes=[(axis,),
    (axis,), ()]`。
- en: '*keepdims*'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*keepdims*'
- en: New in version 1.15.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.15中的新功能。
- en: If this is set to *True*, axes which are reduced over will be left in the result
    as a dimension with size one, so that the result will broadcast correctly against
    the inputs. This option can only be used for generalized ufuncs that operate on
    inputs that all have the same number of core dimensions and with outputs that
    have no core dimensions, i.e., with signatures like `(i),(i)->()` or `(m,m)->()`.
    If used, the location of the dimensions in the output can be controlled with `axes`
    and `axis`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为*True*，则被减少的轴将保留在结果中作为一个大小为一的维度，以便结果正确地广播到输入。此选项仅适用于操作所有具有相同核心维度数量的输入和没有核心维度的输出的广义ufunc，即具有类似`(i),(i)->()`或`(m,m)->()`的签名。如果使用，可以使用`axes`和`axis`来控制输出中维度的位置。
- en: '*casting*'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*casting*'
- en: New in version 1.6.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中的新功能。
- en: May be ‘no’, ‘equiv’, ‘safe’, ‘same_kind’, or ‘unsafe’. See [`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast") for explanations of the parameter values.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是‘no’、‘equiv’、‘safe’、‘same_kind’或‘unsafe’。有关参数值的解释，请参见[`can_cast`](generated/numpy.can_cast.html#numpy.can_cast
    "numpy.can_cast")。
- en: Provides a policy for what kind of casting is permitted. For compatibility with
    previous versions of NumPy, this defaults to ‘unsafe’ for numpy < 1.7. In numpy
    1.7 a transition to ‘same_kind’ was begun where ufuncs produce a DeprecationWarning
    for calls which are allowed under the ‘unsafe’ rules, but not under the ‘same_kind’
    rules. From numpy 1.10 and onwards, the default is ‘same_kind’.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 提供允许的转换类型的策略。为了与NumPy先前版本的兼容性，默认情况下为numpy < 1.7为‘unsafe’。在numpy 1.7中，开始过渡到‘same_kind’，其中ufunc对于在‘unsafe’规则下允许的调用会产生DeprecationWarning，但在‘same_kind’规则下不允许。从numpy
    1.10开始，默认为‘same_kind’。
- en: '*order*'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '*order*'
- en: New in version 1.6.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中的新功能。
- en: Specifies the calculation iteration order/memory layout of the output array.
    Defaults to ‘K’. ‘C’ means the output should be C-contiguous, ‘F’ means F-contiguous,
    ‘A’ means F-contiguous if the inputs are F-contiguous and not also not C-contiguous,
    C-contiguous otherwise, and ‘K’ means to match the element ordering of the inputs
    as closely as possible.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 指定输出数组的计算迭代顺序/内存布局。默认为‘K’。‘C’表示输出应为C连续，‘F’表示F连续，‘A’表示如果输入为F连续且不是C连续，则为F连续，否则为C连续，‘K’表示尽可能与输入的元素顺序匹配。
- en: '*dtype*'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '*dtype*'
- en: New in version 1.6.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中的新功能。
- en: Overrides the DType of the output arrays the same way as the *signature*. This
    should ensure a matching precision of the calculation. The exact calculation DTypes
    chosen may depend on the ufunc and the inputs may be cast to this DType to perform
    the calculation.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 重写输出数组的数据类型，方式与*signature*相同。这应该确保计算的精度匹配。所选的确切计算数据类型可能取决于ufunc，输入可能会转换为此数据类型以执行计算。
- en: '*subok*'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*subok*'
- en: New in version 1.6.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6中的新功能。
- en: Defaults to true. If set to false, the output will always be a strict array,
    not a subtype.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为true。如果设置为false，则输出将始终是严格的数组，而不是子类型。
- en: '*signature*'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '*signature*'
- en: Either a Dtype, a tuple of DTypes, or a special signature string indicating
    the input and output types of a ufunc.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是一个Dtype、一个DTypes元组或一个指示ufunc的输入和输出类型的特殊签名字符串。
- en: This argument allows the user to specify exact DTypes to be used for the calculation.
    Casting will be used as necessary. The actual DType of the input arrays is not
    considered unless `signature` is `None` for that array.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数允许用户指定用于计算的确切DTypes。必要时将使用强制转换。除非`signature`为该数组的`None`，否则不考虑输入数组的实际DType。
- en: When all DTypes are fixed, a specific loop is chosen or an error raised if no
    matching loop exists. If some DTypes are not specified and left `None`, the behaviour
    may depend on the ufunc. At this time, a list of available signatures is provided
    by the **types** attribute of the ufunc. (This list may be missing DTypes not
    defined by NumPy.)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有的DTypes都是固定的时，会选择特定的循环，或者如果没有匹配的循环存在则会引发错误。如果某些DTypes未指定并且保持为`None`，则行为可能取决于ufunc。此时，ufunc的**types**属性提供了可用签名的列表。（此列表可能缺少NumPy未定义的DTypes。）
- en: The `signature` only specifies the DType class/type. For example, it can specify
    that the operation should be `datetime64` or `float64` operation. It does not
    specify the `datetime64` time-unit or the `float64` byte-order.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`signature`仅指定DType类/类型。例如，它可以指定操作应该是`datetime64`或`float64`操作。它不指定`datetime64`时间单位或`float64`字节顺序。'
- en: For backwards compatibility this argument can also be provided as *sig*, although
    the long form is preferred. Note that this should not be confused with the generalized
    ufunc [signature](c-api/generalized-ufuncs.html#details-of-signature) that is
    stored in the **signature** attribute of the of the ufunc object.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，此参数也可以提供为*sig*，尽管更倾向于使用长形式。请注意，这不应与存储在ufunc对象的**signature**属性中的广义ufunc
    [signature](c-api/generalized-ufuncs.html#details-of-signature)混淆。
- en: '*extobj*'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '*extobj*'
- en: A list of length 3 specifying the ufunc buffer-size, the error mode integer,
    and the error call-back function. Normally, these values are looked up in a thread-specific
    dictionary. Passing them here circumvents that look up and uses the low-level
    specification provided for the error mode. This may be useful, for example, as
    an optimization for calculations requiring many ufunc calls on small arrays in
    a loop.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长度为3的列表，指定了ufunc缓冲区大小、错误模式整数和错误回调函数。通常，这些值在特定线程的字典中查找。在此处传递它们可以避免该查找并使用为错误模式提供的低级规范。例如，对于在循环中对小数组进行多次ufunc调用的计算，这可能是有用的优化。
- en: Attributes
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: There are some informational attributes that universal functions possess. None
    of the attributes can be set.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有一些信息属性。这些属性都不能被设置。
- en: '| **__doc__** | A docstring for each ufunc. The first part of the docstring
    is dynamically generated from the number of outputs, the name, and the number
    of inputs. The second part of the docstring is provided at creation time and stored
    with the ufunc. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| **__doc__** | 每个ufunc的文档字符串。文档字符串的第一部分是根据输出的数量、名称和输入的数量动态生成的。文档字符串的第二部分在创建时提供并与ufunc一起存储。
    |'
- en: '| **__name__** | The name of the ufunc. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| **__name__** | ufunc的名称。 |'
- en: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | The number of inputs. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nin`](generated/numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")
    | 输入的数量。 |'
- en: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | The number of outputs. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nout`](generated/numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")
    | 输出的数量。 |'
- en: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | The number of arguments. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.nargs`](generated/numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")
    | 参数的数量。 |'
- en: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | The number of types. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.ntypes`](generated/numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")
    | 类型的数量。 |'
- en: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | Returns a list with types grouped input->output. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.types`](generated/numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")
    | 返回一个按输入->输出分组的类型列表。 |'
- en: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | The identity value. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.identity`](generated/numpy.ufunc.identity.html#numpy.ufunc.identity
    "numpy.ufunc.identity") | 标识值。 |'
- en: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | Definition of the core elements a generalized ufunc
    operates on. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.signature`](generated/numpy.ufunc.signature.html#numpy.ufunc.signature
    "numpy.ufunc.signature") | 定义广义ufunc操作的核心元素。 |'
- en: '### Methods'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '### 方法'
- en: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | Reduces [`array`](generated/numpy.array.html#numpy.array "numpy.array")''s dimension
    by one, by applying ufunc along one axis. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduce`](generated/numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, ...])
    | 通过沿一个轴应用ufunc来减少[`array`](generated/numpy.array.html#numpy.array "numpy.array")的维度。
    |'
- en: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | Accumulate the result of
    applying the operator to all elements. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.accumulate`](generated/numpy.ufunc.accumulate.html#numpy.ufunc.accumulate
    "numpy.ufunc.accumulate")(array[, axis, dtype, out]) | 对所有元素应用运算符的结果进行累积。 |'
- en: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | Performs a (local) reduce
    with specified slices over a single axis. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.reduceat`](generated/numpy.ufunc.reduceat.html#numpy.ufunc.reduceat
    "numpy.ufunc.reduceat")(array, indices[, axis, ...]) | 在单个轴上执行指定切片的（局部）缩减。 |'
- en: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.outer`](generated/numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | 将ufunc *op*应用于所有(a, b)对，其中a在*A*中，b在*B*中。 |'
- en: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | Performs unbuffered in place operation on operand ''a'' for elements specified
    by ''indices''. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`ufunc.at`](generated/numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | 对由''indices''指定的操作数''a''执行无缓冲区的原地操作。 |'
- en: Warning
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: A reduce-like operation on an array with a data-type that has a range “too small”
    to handle the result will silently wrap. One should use [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") to increase the size of the data-type over which reduction takes
    place.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有范围“太小”以处理结果的数据类型的数组进行类似于`reduce`的操作将会静默地进行包装。应该使用[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")来增加进行缩减的数据类型的大小。
- en: Available ufuncs
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的ufuncs
- en: There are currently more than 60 universal functions defined in [`numpy`](index.html#module-numpy
    "numpy") on one or more types, covering a wide variety of operations. Some of
    these ufuncs are called automatically on arrays when the relevant infix notation
    is used (*e.g.*, [`add(a, b)`](generated/numpy.add.html#numpy.add "numpy.add")
    is called internally when `a + b` is written and *a* or *b* is an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")). Nevertheless, you may still want to use the ufunc call in order
    to use the optional output argument(s) to place the output(s) in an object (or
    objects) of your choice.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在[`numpy`](index.html#module-numpy "numpy")中定义了60多个通用函数，涵盖了一系列各种操作的一个或多个类型。当使用相关的中缀符号时，一些ufuncs会自动在数组上调用（例如，当写入`a
    + b`时，内部会调用[`add(a, b)`](generated/numpy.add.html#numpy.add "numpy.add")，当*a*或*b*是[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")时）。然而，您可能仍然希望使用ufunc调用，以使用可选的输出参数将输出放置在您选择的对象（或对象）中。
- en: Recall that each ufunc operates element-by-element. Therefore, each scalar ufunc
    will be described as if acting on a set of scalar inputs to return a set of scalar
    outputs.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每个ufunc都是逐元素操作。因此，每个标量ufunc将被描述为在一组标量输入上操作以返回一组标量输出。
- en: Note
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The ufunc still returns its output(s) even if you use the optional output argument(s).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用可选的输出参数，ufunc仍会返回其输出。
- en: Math operations
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | 逐元素相加参数。 |'
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相减。 |'
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相乘参数。 |'
- en: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | Matrix product of two arrays. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | 两个数组的矩阵乘积。 |'
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相除参数。 |'
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | 输入指数之和的对数。'
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | 以2为底输入指数之和的对数。'
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | 逐元素相除。'
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | 返回输入除法的最大整数小于或等于。'
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | 数值负数，逐元素。'
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | 数值正数，逐元素。'
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | 第一个数组元素按第二个数组的幂逐元素提升。'
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | 第一个数组元素按第二个数组的幂逐元素提升。'
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。'
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | 返回除法的逐元素余数。'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。'
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | 同时返回逐元素商和余数。'
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 逐元素计算绝对值。'
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | 将数组元素四舍五入到最接近的整数。'
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | 返回一个数字的逐元素符号指示。'
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | 计算海维赛德阶跃函数。'
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | 返回复共轭，逐元素操作。 |'
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | 返回复共轭，逐元素操作。 |'
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有元素的指数。 |'
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有*p*的*2**p*。 |'
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | 自然对数，逐元素操作。 |'
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | *x*的以2为底的对数。 |'
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | 返回输入数组的以10为底的对数，逐元素操作。 |'
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | 计算数组中所有元素的`exp(x) - 1`。 |'
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | 返回输入数组加1后的自然对数，逐元素操作。 |'
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的非负平方根，逐元素操作。 |'
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | 返回输入的逐元素平方。 |'
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的立方根，逐元素操作。 |'
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | 返回参数的倒数，逐元素操作。 |'
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最大公约数 |'
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最小公倍数 |'
- en: Tip
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The optional output arguments can be used to help you save memory for large
    calculations. If your arrays are large, complicated expressions can take longer
    than absolutely necessary due to the creation and (later) destruction of temporary
    calculation spaces. For example, the expression `G = A * B + C` is equivalent
    to `T1 = A * B; G = T1 + C; del T1`. It will be more quickly executed as `G =
    A * B; add(G, C, G)` which is the same as `G = A * B; G += C`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的输出参数可用于帮助您节省大型计算的内存。如果您的数组很大，复杂的表达式可能需要比绝对必要的更长的时间，因为会创建和（稍后）销毁临时计算空间。例如，表达式`G
    = A * B + C`等同于`T1 = A * B; G = T1 + C; del T1`。将更快地执行为`G = A * B; add(G, C, G)`，这与`G
    = A * B; G += C`相同。
- en: Trigonometric functions
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三角函数
- en: All trigonometric functions use radians when an angle is called for. The ratio
    of degrees to radians is \(180^{\circ}/\pi.\)
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三角函数在需要角度时都使用弧度。度与弧度的比值为 \(180^{\circ}/\pi\)。
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | 正弦，逐元素计算。 |'
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where,��casting, order, ...])
    | 余弦，逐元素计算。 |'
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | 计算正切，逐元素计算。 |'
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | 逆正弦，逐元素计算。 |'
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | 逆三角余弦，逐元素计算。 |'
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | 逆正切，逐元素计算。 |'
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | 对`x1/x2`进行元素级别的反正切运算，正确选择象限。 |'
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | 给定直角三角形的“腿”，返回其斜边。 |'
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | 双曲正弦，逐元素计算。 |'
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | 双曲余弦，逐元素计算。 |'
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | 计算双曲正切，逐元素计算。 |'
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | 逆双曲正弦，逐元素计算。 |'
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | 逆双曲余弦，逐元素计算。 |'
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | 逆双曲正切，逐元素计算。 |'
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度。 |'
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。 |'
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | 将角度从度转换为弧度。 |'
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | 将角度从弧度转换为度。 |'
- en: Bit-twiddling functions
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位操作函数
- en: These function all require integer arguments and they manipulate the bit-pattern
    of those arguments.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数都需要整数参数，并且会操作这些参数的位模式。
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位AND。 |'
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | 计算两个数组的按位OR。 |'
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位异或。 |'
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | 计算按位取反，或按位NOT，逐元素进行。 |'
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | 将整数的位向左移动。 |'
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | 将整数的位向右移动。 |'
- en: Comparison functions
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较函数
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 > x2）的逐元素真值。 |'
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | 返回（x1 >= x2）的逐元素真值。 |'
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 < x2）的逐元素真值。 |'
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 <= x2）的逐元素真值。 |'
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 != x2）的逐元素真值。 |'
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | 返回（x1 == x2）的逐元素真值。 |'
- en: Warning
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use the Python keywords `and` and `or` to combine logical array expressions.
    These keywords will test the truth value of the entire array (not element-by-element
    as you might expect). Use the bitwise operators & and | instead.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用Python关键字`and`和`or`来组合逻辑数组表达式。这些关键字将测试整个数组的真值（而不是逐元素如您所期望的）。请使用按位运算符&和|代替。
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | 计算x1 AND x2的逐元素真值。 |'
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | 计算x1 OR x2的逐元素真值。 |'
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | 计算x1 XOR x2的逐元素真值。 |'
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | 计算逐元素的NOT x的真值。 |'
- en: Warning
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The bit-wise operators & and | are the proper way to perform element-by-element
    array comparisons. Be sure you understand the operator precedence: `(a > 2) &
    (a < 5)` is the proper syntax because `a > 2 & a < 5` will result in an error
    due to the fact that `2 & a` is evaluated first.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符 & 和 | 是执行逐元素数组比较的正确方式。确保你理解运算符优先级：`(a > 2) & (a < 5)` 是正确的语法，因为 `a > 2
    & a < 5` 会导致错误，因为 `2 & a` 首先被计算。
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: Tip
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The Python function `max()` will find the maximum over a one-dimensional array,
    but it will do so using a slower sequence interface. The reduce method of the
    maximum ufunc is much faster. Also, the `max()` method will not give answers you
    might expect for arrays with greater than one dimension. The reduce method of
    minimum also allows you to compute a total minimum over an array.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数 `max()` 会在一维数组上找到最大值，但是会使用较慢的序列接口。最大值 ufunc 的 reduce 方法要快得多。此外，`max()`
    方法对于维数大于一的数组不会给出你可能期望的答案。最小值的 reduce 方法也允许你计算数组的总最小值。
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Warning
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the behavior of `maximum(a, b)` is different than that of `max(a, b)`. As a
    ufunc, `maximum(a, b)` performs an element-by-element comparison of *a* and *b*
    and chooses each element of the result according to which element in the two arrays
    is larger. In contrast, `max(a, b)` treats the objects *a* and *b* as a whole,
    looks at the (total) truth value of `a > b` and uses it to return either *a* or
    *b* (as a whole). A similar difference exists between `minimum(a, b)` and `min(a,
    b)`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximum(a, b)` 的行为与 `max(a, b)` 不同。作为 ufunc，`maximum(a, b)` 对 *a* 和 *b* 执行逐元素比较，并根据两个数组中的哪个元素较大选择结果的每个元素。相反，`max(a,
    b)` 将对象 *a* 和 *b* 视为一个整体，查看 `a > b` 的（总体）真值，并使用它来返回 *a* 或 *b*（作为一个整体）。`minimum(a,
    b)` 和 `min(a, b)` 之间也存在类似的差异。'
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Floating functions
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点函数
- en: Recall that all of these functions work element-by-element over an array, returning
    an array output. The description details only a single operation.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有这些函数都是在数组上逐元素操作，返回一个数组输出。描述仅详细说明了单个操作。
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为有限值（既不是无穷大��不是非数字）。 |'
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为正无穷或负无穷。 |'
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaN，并将结果作为布尔数组返回。 |'
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaT（不是时间），并将结果作为布尔数组返回。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 计算逐元素的绝对值。 |'
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | 返回元素为 True 的位置，其中 signbit 被设置（小于零）。 |'
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | 将 x1 的符号更改为 x2 的符号，���元素操作。'
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 朝向 x2 的下一个浮点值，逐元素操作。'
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | 返回 x 与最近相邻数字之间的距离。'
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | 返回数组的小数部分和整数部分，逐元素操作。'
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 * 2**x2，逐元素操作。'
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | 将 x 的元素分解为尾数和二次幂。'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。'
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | 返回输入的下限，逐元素操作。'
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | 返回输入的上限，逐元素操作。'
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | 返回输入的截断值，逐元素操作。'
- en: Math operations
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算
- en: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | Add arguments element-wise. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.add.html#numpy.add "numpy.add")(x1, x2, /[, out, where, casting, order, ...])
    | 逐元素相加。'
- en: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | Subtract arguments, element-wise. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| [`subtract`](generated/numpy.subtract.html#numpy.subtract "numpy.subtract")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相减。'
- en: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | Multiply arguments element-wise. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.multiply.html#numpy.multiply "numpy.multiply")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相乘。'
- en: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | Matrix product of two arrays. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| [`matmul`](generated/numpy.matmul.html#numpy.matmul "numpy.matmul")(x1, x2, /[, out, casting, order, ...])
    | 两个数组的矩阵乘积。'
- en: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | Divide arguments element-wise. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| [`divide`](generated/numpy.divide.html#numpy.divide "numpy.divide")(x1, x2, /[, out, where, casting, ...])
    | 逐元素相除。'
- en: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp`](generated/numpy.logaddexp.html#numpy.logaddexp "numpy.logaddexp")(x1, x2, /[, out, where, casting, ...])
    | 对输入的指数求和的对数。'
- en: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | Logarithm of the sum of exponentiations of the inputs in base-2. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| [`logaddexp2`](generated/numpy.logaddexp2.html#numpy.logaddexp2 "numpy.logaddexp2")(x1, x2, /[, out, where, casting, ...])
    | 以2为底对输入的指数求和的对数。'
- en: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | Divide arguments element-wise. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| [`true_divide`](generated/numpy.true_divide.html#numpy.true_divide "numpy.true_divide")(x1, x2, /[, out, where, ...])
    | 逐元素相除。'
- en: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | Return the largest integer smaller or equal to the division of the inputs. |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| [`floor_divide`](generated/numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")(x1, x2, /[, out, where, ...])
    | 返回输入的除法结果的最大整数部分。 |'
- en: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | Numerical negative, element-wise. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [`negative`](generated/numpy.negative.html#numpy.negative "numpy.negative")(x, /[, out, where, casting, order, ...])
    | 数值负数，逐元素操作。 |'
- en: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | Numerical positive, element-wise. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [`positive`](generated/numpy.positive.html#numpy.positive "numpy.positive")(x, /[, out, where, casting, order, ...])
    | 数值正数，逐元素操作。 |'
- en: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.power.html#numpy.power "numpy.power")(x1, x2, /[, out, where, casting, ...])
    | 将第一个数组的元素分别提升到第二个数组的幂，逐元素操作。 |'
- en: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | First array elements raised to powers from second array, element-wise. |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| [`float_power`](generated/numpy.float_power.html#numpy.float_power "numpy.float_power")(x1, x2, /[, out, where, ...])
    | 将第一个数组的元素分别提升到第二个数组的幂，逐元素操作。 |'
- en: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| [`remainder`](generated/numpy.remainder.html#numpy.remainder "numpy.remainder")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。 |'
- en: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.mod.html#numpy.mod "numpy.mod")(x1, x2, /[, out, where, casting, order, ...])
    | 返回除法的逐元素余数。 |'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。 |'
- en: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | Return element-wise quotient and remainder simultaneously. |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| [`divmod`](generated/numpy.divmod.html#numpy.divmod "numpy.divmod")(x1, x2[, out1, out2], / [[, out, ...])
    | 同时返回逐元素商和余数。 |'
- en: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | Calculate the absolute value element-wise. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| [`absolute`](generated/numpy.absolute.html#numpy.absolute "numpy.absolute")(x, /[, out, where, casting, order, ...])
    | 计算逐元素的绝对值。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 计算逐元素的绝对值。 |'
- en: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | Round elements of the array to the nearest integer. |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| [`rint`](generated/numpy.rint.html#numpy.rint "numpy.rint")(x, /[, out, where, casting, order, ...])
    | 将数组元素四舍五入到最接近的整数。 |'
- en: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | Returns an element-wise indication of the sign of a number. |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| [`sign`](generated/numpy.sign.html#numpy.sign "numpy.sign")(x, /[, out, where, casting, order, ...])
    | 返回数值的逐元素符号指示。 |'
- en: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | Compute the Heaviside step function. |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| [`heaviside`](generated/numpy.heaviside.html#numpy.heaviside "numpy.heaviside")(x1, x2, /[, out, where, casting, ...])
    | 计算 Heaviside 阶跃函数。 |'
- en: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| [`conj`](generated/numpy.conj.html#numpy.conj "numpy.conj")(x, /[, out, where, casting, order, ...])
    | 返回逐元素的复共轭。 |'
- en: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| [`conjugate`](generated/numpy.conjugate.html#numpy.conjugate "numpy.conjugate")(x, /[, out, where, casting, ...])
    | 返回逐元素的复共轭。 |'
- en: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | Calculate the exponential of all elements in the input array. |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| [`exp`](generated/numpy.exp.html#numpy.exp "numpy.exp")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有元素的指数。 |'
- en: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | Calculate *2**p* for all *p* in the input array. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| [`exp2`](generated/numpy.exp2.html#numpy.exp2 "numpy.exp2")(x, /[, out, where, casting, order, ...])
    | 计算输入数组中所有 *p* 的 *2**p*。 |'
- en: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | Natural logarithm, element-wise. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| [`log`](generated/numpy.log.html#numpy.log "numpy.log")(x, /[, out, where, casting, order, ...])
    | 自然对数，逐元素操作。 |'
- en: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | Base-2 logarithm of *x*. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| [`log2`](generated/numpy.log2.html#numpy.log2 "numpy.log2")(x, /[, out, where, casting, order, ...])
    | *x* 的以 2 为底的对数。 |'
- en: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | Return the base 10 logarithm of the input array, element-wise. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| [`log10`](generated/numpy.log10.html#numpy.log10 "numpy.log10")(x, /[, out, where, casting, order, ...])
    | 返回输入数组的以 10 为底的对数，逐元素操作。 |'
- en: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | Calculate `exp(x) - 1` for all elements in the array. |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| [`expm1`](generated/numpy.expm1.html#numpy.expm1 "numpy.expm1")(x, /[, out, where, casting, order, ...])
    | 计算数组中所有元素的`exp(x) - 1`。 |'
- en: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | Return the natural logarithm of one plus the input array, element-wise. |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| [`log1p`](generated/numpy.log1p.html#numpy.log1p "numpy.log1p")(x, /[, out, where, casting, order, ...])
    | 返回输入数组加一的自然对数，逐元素操作。 |'
- en: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | Return the non-negative square-root of an array, element-wise. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| [`sqrt`](generated/numpy.sqrt.html#numpy.sqrt "numpy.sqrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的非负平方根，逐元素操作。 |'
- en: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | Return the element-wise square of the input. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| [`square`](generated/numpy.square.html#numpy.square "numpy.square")(x, /[, out, where, casting, order, ...])
    | 返回输入的逐元素平方。 |'
- en: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | Return the cube-root of an array, element-wise. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| [`cbrt`](generated/numpy.cbrt.html#numpy.cbrt "numpy.cbrt")(x, /[, out, where, casting, order, ...])
    | 返回数组的立方根，逐元素操作。 |'
- en: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | Return the reciprocal of the argument, element-wise. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| [`reciprocal`](generated/numpy.reciprocal.html#numpy.reciprocal "numpy.reciprocal")(x, /[, out, where, casting, ...])
    | 返回参数的倒数，逐元素操作。 |'
- en: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the greatest common divisor of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| [`gcd`](generated/numpy.gcd.html#numpy.gcd "numpy.gcd")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最大公约数 |'
- en: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | Returns the lowest common multiple of `&#124;x1&#124;` and `&#124;x2&#124;`
    |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| [`lcm`](generated/numpy.lcm.html#numpy.lcm "numpy.lcm")(x1, x2, /[, out, where, casting, order, ...])
    | 返回`&#124;x1&#124;`和`&#124;x2&#124;`的最小公倍数 |'
- en: Tip
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The optional output arguments can be used to help you save memory for large
    calculations. If your arrays are large, complicated expressions can take longer
    than absolutely necessary due to the creation and (later) destruction of temporary
    calculation spaces. For example, the expression `G = A * B + C` is equivalent
    to `T1 = A * B; G = T1 + C; del T1`. It will be more quickly executed as `G =
    A * B; add(G, C, G)` which is the same as `G = A * B; G += C`.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的输出参数可用于帮助您节省大型计算的内存。如果您的数组很大，复杂的表达式可能会因为创建和（后来）销毁临时计算��间而比绝对必要的时间长。例如，表达式
    `G = A * B + C` 等同于 `T1 = A * B; G = T1 + C; del T1`。将更快地执行为 `G = A * B; add(G,
    C, G)`，这与 `G = A * B; G += C` 相同。
- en: Trigonometric functions
  id: totrans-468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三角函数
- en: All trigonometric functions use radians when an angle is called for. The ratio
    of degrees to radians is \(180^{\circ}/\pi.\)
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三角函数在需要角度时使用弧度。度与弧度的比值为 \(180^{\circ}/\pi\)。
- en: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | Trigonometric sine, element-wise. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| [`sin`](generated/numpy.sin.html#numpy.sin "numpy.sin")(x, /[, out, where, casting, order, ...])
    | 正弦，逐元素操作。 |'
- en: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | Cosine element-wise. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| [`cos`](generated/numpy.cos.html#numpy.cos "numpy.cos")(x, /[, out, where, casting, order, ...])
    | 余弦，逐元素操作。 |'
- en: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | Compute tangent element-wise. |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| [`tan`](generated/numpy.tan.html#numpy.tan "numpy.tan")(x, /[, out, where, casting, order, ...])
    | 计算正切，逐元素操作。 |'
- en: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | Inverse sine, element-wise. |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsin`](generated/numpy.arcsin.html#numpy.arcsin "numpy.arcsin")(x, /[, out, where, casting, order, ...])
    | 反正弦，逐元素操作。 |'
- en: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse cosine, element-wise. |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| [`arccos`](generated/numpy.arccos.html#numpy.arccos "numpy.arccos")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反余弦。'
- en: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | Trigonometric inverse tangent, element-wise. |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan`](generated/numpy.arctan.html#numpy.arctan "numpy.arctan")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反正切。'
- en: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | Element-wise arc tangent of `x1/x2` choosing the quadrant correctly. |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| [`arctan2`](generated/numpy.arctan2.html#numpy.arctan2 "numpy.arctan2")(x1, x2, /[, out, where, casting, ...])
    | 计算`x1/x2`的反正切，正确选择象限。'
- en: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | Given the "legs" of a right triangle, return its hypotenuse. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`hypot`](generated/numpy.hypot.html#numpy.hypot "numpy.hypot")(x1, x2, /[, out, where, casting, ...])
    | 给定直角三角形的“腿”，返回其斜边。'
- en: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic sine, element-wise. |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| [`sinh`](generated/numpy.sinh.html#numpy.sinh "numpy.sinh")(x, /[, out, where, casting, order, ...])
    | 双曲正弦，逐��素操作。'
- en: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | Hyperbolic cosine, element-wise. |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| [`cosh`](generated/numpy.cosh.html#numpy.cosh "numpy.cosh")(x, /[, out, where, casting, order, ...])
    | 双曲余弦，逐元素操作。'
- en: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | Compute hyperbolic tangent element-wise. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`tanh`](generated/numpy.tanh.html#numpy.tanh "numpy.tanh")(x, /[, out, where, casting, order, ...])
    | 计算双曲正切，逐元素操作。'
- en: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic sine element-wise. |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsinh`](generated/numpy.arcsinh.html#numpy.arcsinh "numpy.arcsinh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲正弦。'
- en: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic cosine, element-wise. |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`arccosh`](generated/numpy.arccosh.html#numpy.arccosh "numpy.arccosh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲余弦。'
- en: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | Inverse hyperbolic tangent element-wise. |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`arctanh`](generated/numpy.arctanh.html#numpy.arctanh "numpy.arctanh")(x, /[, out, where, casting, order, ...])
    | 逐元素计算反双曲正切。'
- en: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`degrees`](generated/numpy.degrees.html#numpy.degrees "numpy.degrees")(x, /[, out, where, casting, order, ...])
    | 将弧度转换为角度。'
- en: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [`radians`](generated/numpy.radians.html#numpy.radians "numpy.radians")(x, /[, out, where, casting, order, ...])
    | 将角度转换为弧度。'
- en: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | Convert angles from degrees to radians. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`deg2rad`](generated/numpy.deg2rad.html#numpy.deg2rad "numpy.deg2rad")(x, /[, out, where, casting, order, ...])
    | 将角度转换为弧度。'
- en: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | Convert angles from radians to degrees. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`rad2deg`](generated/numpy.rad2deg.html#numpy.rad2deg "numpy.rad2deg")(x, /[, out, where, casting, order, ...])
    | 将弧度转换为角度。'
- en: Bit-twiddling functions
  id: totrans-488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位操作函数
- en: These function all require integer arguments and they manipulate the bit-pattern
    of those arguments.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数都需要整数参数，并操作这些参数的位模式。
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位与。'
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | 计算两个数组的按位或。'
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位异或。'
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | 计算按位反转，或按位NOT，逐元素。 |'
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | 将整数的位向左移动。 |'
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | 将整数的位向右移动。 |'
- en: Comparison functions
  id: totrans-496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较函数
- en: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 > x2) element-wise. |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.greater.html#numpy.greater "numpy.greater")(x1, x2, /[, out, where, casting, ...])
    | 返回(x1 > x2)的逐元素真值。 |'
- en: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | Return the truth value
    of (x1 >= x2) element-wise. |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal")(x1, x2, /[, out, where, ...]) | 返回(x1 >= x2)的逐元素真值。 |'
- en: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 < x2) element-wise. |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
  zh: '| [`less`](generated/numpy.less.html#numpy.less "numpy.less")(x1, x2, /[, out, where, casting, ...])
    | 返回(x1 < x2)的逐元素真值。 |'
- en: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | Return the truth value of (x1 <= x2) element-wise. |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.less_equal.html#numpy.less_equal "numpy.less_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回(x1 <= x2)的逐元素真值。 |'
- en: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 != x2) element-wise. |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.not_equal.html#numpy.not_equal "numpy.not_equal")(x1, x2, /[, out, where, casting, ...])
    | 返回(x1 != x2)的逐元素真值。 |'
- en: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | Return (x1 == x2) element-wise. |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| [`equal`](generated/numpy.equal.html#numpy.equal "numpy.equal")(x1, x2, /[, out, where, casting, ...])
    | 返回(x1 == x2)的逐元素真值。 |'
- en: Warning
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use the Python keywords `and` and `or` to combine logical array expressions.
    These keywords will test the truth value of the entire array (not element-by-element
    as you might expect). Use the bitwise operators & and | instead.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用Python关键字`and`和`or`来组合逻辑数组表达式。这些关键字将测试整个数组的真值（而不是你可能期望的逐个元素）。请使用按位运算符`&`和`|`代替。
- en: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 AND x2 element-wise. |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_and`](generated/numpy.logical_and.html#numpy.logical_and "numpy.logical_and")(x1, x2, /[, out, where, ...])
    | 计算x1和x2的逐元素真值。 |'
- en: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the truth value of x1 OR x2 element-wise. |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_or`](generated/numpy.logical_or.html#numpy.logical_or "numpy.logical_or")(x1, x2, /[, out, where, casting, ...])
    | 计算x1或x2的逐元素真值。 |'
- en: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | Compute the truth value of x1 XOR x2, element-wise. |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_xor`](generated/numpy.logical_xor.html#numpy.logical_xor "numpy.logical_xor")(x1, x2, /[, out, where, ...])
    | 计算x1 XOR x2的逐元素真值。 |'
- en: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | Compute the truth value of NOT x element-wise. |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| [`logical_not`](generated/numpy.logical_not.html#numpy.logical_not "numpy.logical_not")(x, /[, out, where, casting, ...])
    | 计算逐元素的NOT x的真值。 |'
- en: Warning
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The bit-wise operators & and | are the proper way to perform element-by-element
    array comparisons. Be sure you understand the operator precedence: `(a > 2) &
    (a < 5)` is the proper syntax because `a > 2 & a < 5` will result in an error
    due to the fact that `2 & a` is evaluated first.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符`&`和`|`是执行逐元素数组比较的正确方式。确保您理解运算符优先级：`(a > 2) & (a < 5)`是正确的语法，因为`a > 2 &
    a < 5`会导致错误，因为`2 & a`首先被计算。
- en: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| [`maximum`](generated/numpy.maximum.html#numpy.maximum "numpy.maximum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: Tip
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The Python function `max()` will find the maximum over a one-dimensional array,
    but it will do so using a slower sequence interface. The reduce method of the
    maximum ufunc is much faster. Also, the `max()` method will not give answers you
    might expect for arrays with greater than one dimension. The reduce method of
    minimum also allows you to compute a total minimum over an array.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数 `max()` 将在一维数组上找到最大值，但是它将使用较慢的序列接口来执行。通用函数的 reduce 方法要快得多。此外，`max()`
    方法对于维数大于一的数组不会给出您可能期望的答案。最小值的 reduce 方法还允许您计算数组的总最小值。
- en: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
  zh: '| [`minimum`](generated/numpy.minimum.html#numpy.minimum "numpy.minimum")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Warning
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the behavior of `maximum(a, b)` is different than that of `max(a, b)`. As a
    ufunc, `maximum(a, b)` performs an element-by-element comparison of *a* and *b*
    and chooses each element of the result according to which element in the two arrays
    is larger. In contrast, `max(a, b)` treats the objects *a* and *b* as a whole,
    looks at the (total) truth value of `a > b` and uses it to return either *a* or
    *b* (as a whole). A similar difference exists between `minimum(a, b)` and `min(a,
    b)`.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximum(a, b)` 的行为与 `max(a, b)` 不同。作为一个通用函数，`maximum(a, b)` 对 *a* 和 *b* 进行逐元素比较，并根据两个数组中的哪个元素较大来选择结果的每个元素。相反，`max(a,
    b)` 将对象 *a* 和 *b* 视为一个整体，查看 `a > b` 的（总体）真值，并使用它来返回 *a* 或 *b*（作为一个整体）。`minimum(a,
    b)` 和 `min(a, b)` 之间也存在类似的差异。'
- en: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | Element-wise maximum of array elements. |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| [`fmax`](generated/numpy.fmax.html#numpy.fmax "numpy.fmax")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最大值。 |'
- en: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | Element-wise minimum of array elements. |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| [`fmin`](generated/numpy.fmin.html#numpy.fmin "numpy.fmin")(x1, x2, /[, out, where, casting, ...])
    | 数组元素的逐元素最小值。 |'
- en: Floating functions
  id: totrans-519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点函数
- en: Recall that all of these functions work element-by-element over an array, returning
    an array output. The description details only a single operation.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些函数都是对数组进行逐元素操作，返回一个数组输出。描述细节仅涉及单个操作。
- en: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | Test element-wise for finiteness (not infinity and not Not a Number). |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| [`isfinite`](generated/numpy.isfinite.html#numpy.isfinite "numpy.isfinite")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为有限数（既不是无穷大也不是非数）。 |'
- en: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | Test element-wise for positive or negative infinity. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| [`isinf`](generated/numpy.isinf.html#numpy.isinf "numpy.isinf")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为正无穷或负无穷。 |'
- en: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaN and return result as a boolean array. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| [`isnan`](generated/numpy.isnan.html#numpy.isnan "numpy.isnan")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaN，并将结果作为布尔数组返回。 |'
- en: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | Test element-wise for NaT (not a time) and return result as a boolean array.
    |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| [`isnat`](generated/numpy.isnat.html#numpy.isnat "numpy.isnat")(x, /[, out, where, casting, order, ...])
    | 逐元素测试是否为 NaT（不是时间），并将结果作为布尔数组返回。 |'
- en: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | Compute the absolute values element-wise. |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| [`fabs`](generated/numpy.fabs.html#numpy.fabs "numpy.fabs")(x, /[, out, where, casting, order, ...])
    | 计算元素的绝对值。 |'
- en: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | Returns element-wise True where signbit is set (less than zero). |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| [`signbit`](generated/numpy.signbit.html#numpy.signbit "numpy.signbit")(x, /[, out, where, casting, order, ...])
    | 返回元素为 True 的逐元素位置，其中符号位设置为负（小于零）。 |'
- en: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | Change the sign of x1 to that of x2, element-wise. |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| [`copysign`](generated/numpy.copysign.html#numpy.copysign "numpy.copysign")(x1, x2, /[, out, where, casting, ...])
    | 将 x1 的符号更改为 x2 的符号，逐元素进行。 |'
- en: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | Return the next floating-point value after x1 towards x2, element-wise. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| [`nextafter`](generated/numpy.nextafter.html#numpy.nextafter "numpy.nextafter")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 朝向 x2 的下一个浮点值，逐元素进行。 |'
- en: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | Return the distance between x and the nearest adjacent number. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| [`spacing`](generated/numpy.spacing.html#numpy.spacing "numpy.spacing")(x, /[, out, where, casting, order, ...])
    | 返回 x 与最近相邻数之间的距离。 |'
- en: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | Return the fractional and integral parts of an array, element-wise. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| [`modf`](generated/numpy.modf.html#numpy.modf "numpy.modf")(x[, out1, out2], / [[, out, where, ...])
    | 返回数组的小数部分和整数部分，逐元素操作。 |'
- en: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | Returns x1 * 2**x2, element-wise. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| [`ldexp`](generated/numpy.ldexp.html#numpy.ldexp "numpy.ldexp")(x1, x2, /[, out, where, casting, ...])
    | 返回 x1 * 2**x2，逐元素操作。 |'
- en: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | Decompose the elements of x into mantissa and twos exponent. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| [`frexp`](generated/numpy.frexp.html#numpy.frexp "numpy.frexp")(x[, out1, out2], / [[, out, where, ...])
    | 将 x 的元素分解为尾数和二次指数。 |'
- en: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | Returns the element-wise remainder of division. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| [`fmod`](generated/numpy.fmod.html#numpy.fmod "numpy.fmod")(x1, x2, /[, out, where, casting, ...])
    | 返回除法的逐元素余数。 |'
- en: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | Return the floor of the input, element-wise. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| [`floor`](generated/numpy.floor.html#numpy.floor "numpy.floor")(x, /[, out, where, casting, order, ...])
    | 返回输入的向下取整值，逐元素操作。 |'
- en: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | Return the ceiling of the input, element-wise. |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| [`ceil`](generated/numpy.ceil.html#numpy.ceil "numpy.ceil")(x, /[, out, where, casting, order, ...])
    | 返回输入的向上取整值，逐元素操作。 |'
- en: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | Return the truncated value of the input, element-wise. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| [`trunc`](generated/numpy.trunc.html#numpy.trunc "numpy.trunc")(x, /[, out, where, casting, order, ...])
    | 返回输入的截断值，逐元素操作。 |'
