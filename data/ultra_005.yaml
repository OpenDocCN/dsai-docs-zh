- en: Model Validation with Ultralytics YOLO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ultralytics YOLO 进行模型验证
- en: 原文：[`docs.ultralytics.com/modes/val/`](https://docs.ultralytics.com/modes/val/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/modes/val/`](https://docs.ultralytics.com/modes/val/)
- en: '![Ultralytics YOLO ecosystem and integrations](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Ultralytics YOLO 生态系统和集成](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: Validation is a critical step in the machine learning pipeline, allowing you
    to assess the quality of your trained models. Val mode in Ultralytics YOLOv8 provides
    a robust suite of tools and metrics for evaluating the performance of your object
    detection models. This guide serves as a complete resource for understanding how
    to effectively use the Val mode to ensure that your models are both accurate and
    reliable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是机器学习流程中的关键步骤，允许您评估训练模型的质量。Ultralytics YOLOv8 的 Val 模式提供了一套强大的工具和指标，用于评估您的目标检测模型的性能。本指南作为一个完整的资源，帮助您有效地使用
    Val 模式，确保您的模型既准确又可靠。
- en: '[`www.youtube.com/embed/j8uQc0qB91s?start=47`](https://www.youtube.com/embed/j8uQc0qB91s?start=47)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/j8uQc0qB91s?start=47`](https://www.youtube.com/embed/j8uQc0qB91s?start=47)'
- en: '**Watch:** Ultralytics Modes Tutorial: Validation'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** Ultralytics 模式教程：验证'
- en: Why Validate with Ultralytics YOLO?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用 Ultralytics YOLO 进行验证？
- en: 'Here''s why using YOLOv8''s Val mode is advantageous:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 YOLOv8 的 Val 模式的优势如下：
- en: '**Precision:** Get accurate metrics like mAP50, mAP75, and mAP50-95 to comprehensively
    evaluate your model.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精度：** 获取像 mAP50、mAP75 和 mAP50-95 这样的准确度指标，全面评估您的模型。'
- en: '**Convenience:** Utilize built-in features that remember training settings,
    simplifying the validation process.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便利性：** 利用内置功能记住训练设置，简化验证流程。'
- en: '**Flexibility:** Validate your model with the same or different datasets and
    image sizes.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性：** 使用相同或不同的数据集和图像大小验证您的模型。'
- en: '**Hyperparameter Tuning:** Use validation metrics to fine-tune your model for
    better performance.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数调整：** 使用验证指标对模型进行微调，以提高性能。'
- en: Key Features of Val Mode
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Val 模式的主要特性
- en: 'These are the notable functionalities offered by YOLOv8''s Val mode:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 YOLOv8 的 Val 模式提供的显著功能：
- en: '**Automated Settings:** Models remember their training configurations for straightforward
    validation.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动设置：** 模型记住其训练配置，使验证过程简单直接。'
- en: '**Multi-Metric Support:** Evaluate your model based on a range of accuracy
    metrics.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多指标支持：** 基于一系列准确度指标评估您的模型。'
- en: '**CLI and Python API:** Choose from command-line interface or Python API based
    on your preference for validation.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLI 和 Python API：** 根据您的喜好选择命令行界面或 Python API 进行验证。'
- en: '**Data Compatibility:** Works seamlessly with datasets used during the training
    phase as well as custom datasets.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据兼容性：** 与训练阶段使用的数据集以及自定义数据集无缝配合。'
- en: Tip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: YOLOv8 models automatically remember their training settings, so you can validate
    a model at the same image size and on the original dataset easily with just `yolo
    val model=yolov8n.pt` or `model('yolov8n.pt').val()`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YOLOv8 模型自动记住其训练设置，因此您可以轻松地以相同的图像大小和原始数据集验证模型，只需执行 `yolo val model=yolov8n.pt`
    或 `model('yolov8n.pt').val()`
- en: Usage Examples
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用示例
- en: Validate trained YOLOv8n model accuracy on the COCO8 dataset. No argument need
    to passed as the `model` retains its training `data` and arguments as model attributes.
    See Arguments section below for a full list of export arguments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 COCO8 数据集上验证训练后的 YOLOv8n 模型的准确性。不需要传递任何参数，因为 `model` 保留其训练 `data` 和参数作为模型属性。请参阅下面的参数部分，了解完整的导出参数列表。
- en: Example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Arguments for YOLO Model Validation
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YOLO 模型验证参数
- en: When validating YOLO models, several arguments can be fine-tuned to optimize
    the evaluation process. These arguments control aspects such as input image size,
    batch processing, and performance thresholds. Below is a detailed breakdown of
    each argument to help you customize your validation settings effectively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证 YOLO 模型时，可以调整多个参数以优化评估过程。这些参数控制诸如输入图像大小、批处理和性能阈值等方面。以下是每个参数的详细说明，帮助您有效地定制验证设置。
- en: '| Argument | Type | Default | Description |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `data` | `str` | `None` | Specifies the path to the dataset configuration
    file (e.g., `coco8.yaml`). This file includes paths to validation data, class
    names, and number of classes. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `str` | `None` | 指定数据集配置文件的路径（例如 `coco8.yaml`）。该文件包含验证数据的路径、类名以及类的数量。
    |'
- en: '| `imgsz` | `int` | `640` | Defines the size of input images. All images are
    resized to this dimension before processing. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `imgsz` | `int` | `640` | 定义输入图像的大小。所有图像在处理之前都会被调整到这个尺寸。 |'
- en: '| `batch` | `int` | `16` | Sets the number of images per batch. Use `-1` for
    AutoBatch, which automatically adjusts based on GPU memory availability. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `batch` | `int` | `16` | 设置每批图像的数量。使用 `-1` 进行自动批处理，根据 GPU 内存的可用性自动调整。'
- en: '| `save_json` | `bool` | `False` | If `True`, saves the results to a JSON file
    for further analysis or integration with other tools. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `save_json` | `bool` | `False` | 如果为 `True`，将结果保存到 JSON 文件，以便进一步分析或与其他工具集成。
    |'
- en: '| `save_hybrid` | `bool` | `False` | If `True`, saves a hybrid version of labels
    that combines original annotations with additional model predictions. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `save_hybrid` | `bool` | `False` | 如果为 `True`，保存一个混合版本的标签，将原始注释与额外的模型预测结合起来。
    |'
- en: '| `conf` | `float` | `0.001` | Sets the minimum confidence threshold for detections.
    Detections with confidence below this threshold are discarded. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `conf` | `float` | `0.001` | 设置检测的最小置信度阈值。置信度低于此阈值的检测结果将被丢弃。 |'
- en: '| `iou` | `float` | `0.6` | Sets the Intersection Over Union (IoU) threshold
    for Non-Maximum Suppression (NMS). Helps in reducing duplicate detections. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `iou` | `float` | `0.6` | 设置非极大值抑制（NMS）的交并比（IoU）阈值。有助于减少重复检测结果。'
- en: '| `max_det` | `int` | `300` | Limits the maximum number of detections per image.
    Useful in dense scenes to prevent excessive detections. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `max_det` | `int` | `300` | 限制每个图像的最大检测数。在密集场景中有助于防止过多的检测结果。'
- en: '| `half` | `bool` | `True` | Enables half-precision (FP16) computation, reducing
    memory usage and potentially increasing speed with minimal impact on accuracy.
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `half` | `bool` | `True` | 启用半精度（FP16）计算，减少内存使用量，可能提高速度，对精度影响最小。 |'
- en: '| `device` | `str` | `None` | Specifies the device for validation (`cpu`, `cuda:0`,
    etc.). Allows flexibility in utilizing CPU or GPU resources. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `device` | `str` | `None` | 指定用于验证的设备（`cpu`、`cuda:0` 等）。允许在 CPU 或 GPU 资源中灵活选择。
    |'
- en: '| `dnn` | `bool` | `False` | If `True`, uses the OpenCV DNN module for ONNX
    model inference, offering an alternative to PyTorch inference methods. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `dnn` | `bool` | `False` | 如果为 `True`，使用 OpenCV 的 DNN 模块进行 ONNX 模型推理，提供了
    PyTorch 推理方法的替代方案。'
- en: '| `plots` | `bool` | `False` | When set to `True`, generates and saves plots
    of predictions versus ground truth for visual evaluation of the model''s performance.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `plots` | `bool` | `False` | 当设置为 `True` 时，生成并保存预测与地面真实值的图表，以视觉方式评估模型性能。
    |'
- en: '| `rect` | `bool` | `False` | If `True`, uses rectangular inference for batching,
    reducing padding and potentially increasing speed and efficiency. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `rect` | `bool` | `False` | 如果为 `True`，使用矩形推理进行批处理，减少填充，可能提高速度和效率。 |'
- en: '| `split` | `str` | `val` | Determines the dataset split to use for validation
    (`val`, `test`, or `train`). Allows flexibility in choosing the data segment for
    performance evaluation. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `split` | `str` | `val` | 确定用于验证的数据集拆分（`val`、`test` 或 `train`）。允许在选择数据段进行性能评估时灵活选择。'
- en: Each of these settings plays a vital role in the validation process, allowing
    for a customizable and efficient evaluation of YOLO models. Adjusting these parameters
    according to your specific needs and resources can help achieve the best balance
    between accuracy and performance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置在验证过程中各自扮演重要角色，允许定制化和高效的 YOLO 模型评估。根据您的特定需求和资源调整这些参数可以帮助实现精度和性能的最佳平衡。
- en: Example Validation with Arguments
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用参数进行示例验证
- en: The below examples showcase YOLO model validation with custom arguments in Python
    and CLI.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了在 Python 和 CLI 中使用自定义参数进行 YOLO 模型验证。
- en: Example
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: FAQ
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: How do I validate my YOLOv8 model with Ultralytics?
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何验证我的 YOLOv8 模型使用 Ultralytics？
- en: 'To validate your YOLOv8 model, you can use the Val mode provided by Ultralytics.
    For example, using the Python API, you can load a model and run validation with:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证您的 YOLOv8 模型，可以使用 Ultralytics 提供的 Val 模式。例如，使用 Python API，您可以加载模型并运行验证：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, you can use the command-line interface (CLI):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用命令行界面（CLI）：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For further customization, you can adjust various arguments like `imgsz`, `batch`,
    and `conf` in both Python and CLI modes. Check the Arguments for YOLO Model Validation
    section for the full list of parameters.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 若要进行进一步定制，可以在 Python 和 CLI 模式下调整诸如 `imgsz`、`batch` 和 `conf` 等各种参数。请查看 YOLO 模型验证参数部分以获取完整的参数列表。
- en: What metrics can I get from YOLOv8 model validation?
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: YOLOv8 模型验证可以得到哪些指标？
- en: 'YOLOv8 model validation provides several key metrics to assess model performance.
    These include:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8 模型验证提供了几个关键指标，用于评估模型性能。这些包括：
- en: mAP50 (mean Average Precision at IoU threshold 0.5)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mAP50（IoU 阈值为 0.5 的平均精度）
- en: mAP75 (mean Average Precision at IoU threshold 0.75)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mAP75（IoU 阈值为 0.75 的平均精度）
- en: mAP50-95 (mean Average Precision across multiple IoU thresholds from 0.5 to
    0.95)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mAP50-95（跨多个 IoU 阈值从 0.5 到 0.95 的平均精度）
- en: 'Using the Python API, you can access these metrics as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python API，您可以按以下方式访问这些指标：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For a complete performance evaluation, it's crucial to review all these metrics.
    For more details, refer to the Key Features of Val Mode.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的性能评估，审查所有这些指标至关重要。有关更多详细信息，请参阅 Val Mode 的关键功能。
- en: What are the advantages of using Ultralytics YOLO for validation?
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ultralytics YOLO 进行验证的优势有哪些？
- en: 'Using Ultralytics YOLO for validation provides several advantages:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ultralytics YOLO 进行验证提供了多个优势：
- en: '**Precision:** YOLOv8 offers accurate performance metrics including mAP50,
    mAP75, and mAP50-95.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精确性：** YOLOv8 提供准确的性能指标，包括 mAP50、mAP75 和 mAP50-95。'
- en: '**Convenience:** The models remember their training settings, making validation
    straightforward.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便捷性：** 模型记住它们的训练设置，使验证变得简单直接。'
- en: '**Flexibility:** You can validate against the same or different datasets and
    image sizes.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性：** 您可以针对相同或不同的数据集和图像尺寸进行验证。'
- en: '**Hyperparameter Tuning:** Validation metrics help in fine-tuning models for
    better performance.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数调整：** 验证指标有助于优化模型以获得更好的性能。'
- en: These benefits ensure that your models are evaluated thoroughly and can be optimized
    for superior results. Learn more about these advantages in the Why Validate with
    Ultralytics YOLO section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些优势确保您的模型经过全面评估，并可以优化以获得卓越的结果。详细了解这些优势，请参阅为什么要使用 Ultralytics YOLO 进行验证部分。
- en: Can I validate my YOLOv8 model using a custom dataset?
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以使用自定义数据集验证我的 YOLOv8 模型吗？
- en: Yes, you can validate your YOLOv8 model using a custom dataset. Specify the
    `data` argument with the path to your dataset configuration file. This file should
    include paths to the validation data, class names, and other relevant details.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，您可以使用自定义数据集验证您的 YOLOv8 模型。请使用`data`参数指定您的数据集配置文件的路径。该文件应包括验证数据的路径、类名和其他相关详细信息。
- en: 'Example in Python:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python 示例：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Example using CLI:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 示例：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more customizable options during validation, see the Example Validation
    with Arguments section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在验证过程中更可定制的选项，请参阅示例验证参数部分。
- en: How do I save validation results to a JSON file in YOLOv8?
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在 YOLOv8 中将验证结果保存到 JSON 文件？
- en: To save the validation results to a JSON file, you can set the `save_json` argument
    to `True` when running validation. This can be done in both the Python API and
    CLI.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要将验证结果保存到 JSON 文件中，在运行验证时，可以将`save_json`参数设置为`True`。无论是在 Python API 还是 CLI 中均可完成此操作。
- en: 'Example in Python:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python 示例：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Example using CLI:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 示例：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This functionality is particularly useful for further analysis or integration
    with other tools. Check the Arguments for YOLO Model Validation for more details.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能特别适用于进一步分析或与其他工具集成。有关更多详细信息，请查看 YOLO 模型验证参数部分。
