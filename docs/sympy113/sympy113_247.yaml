- en: Autowrap Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Autowrap 模块
- en: Original text：[https://docs.sympy.org/latest/modules/utilities/autowrap.html](https://docs.sympy.org/latest/modules/utilities/autowrap.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/utilities/autowrap.html](https://docs.sympy.org/latest/modules/utilities/autowrap.html)
- en: The autowrap module works very well in tandem with the Indexed classes of the
    [Tensor](../tensor/index.html#tensor-module). Here is a simple example that shows
    how to setup a binary routine that calculates a matrix-vector product.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`autowrap` 模块与 [Tensor](../tensor/index.html#tensor-module) 的 Indexed 类协同工作非常出色。以下是一个简单的示例，展示如何设置计算矩阵-向量乘积的二进制例程。'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Because the code printers treat Indexed objects with repeated indices as a
    summation, the above equality instance will be translated to low-level code for
    a matrix vector product. This is how you tell SymPy to generate the code, compile
    it and wrap it as a python function:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因为代码打印程序将具有重复索引的 Indexed 对象视为求和，上述相等实例将转换为矩阵向量乘积的低级代码。这是告诉 SymPy 生成代码、编译它并将其封装为
    Python 函数的方法：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That’s it. Now let’s test it with some numpy arrays. The default wrapper backend
    is f2py. The wrapper function it provides is set up to accept python lists, which
    it will silently convert to numpy arrays. So we can test the matrix vector product
    like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在让我们用一些 numpy 数组来测试它。默认的封装器后端是 f2py。它提供的封装函数设置为接受 Python 列表，它会悄悄地将其转换为
    numpy 数组。所以我们可以像这样测试矩阵向量乘积：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Implementation details
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现细节
- en: The autowrap module is implemented with a backend consisting of CodeWrapper
    objects. The base class `CodeWrapper` takes care of details about module name,
    filenames and options. It also contains the driver routine, which runs through
    all steps in the correct order, and also takes care of setting up and removing
    the temporary working directory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`autowrap` 模块是由 `CodeWrapper` 对象组成的后端实现。基类 `CodeWrapper` 处理模块名称、文件名和选项的详细信息。它还包含驱动程序例程，按正确顺序执行所有步骤，并负责设置和移除临时工作目录。'
- en: The actual compilation and wrapping is done by external resources, such as the
    system installed f2py command. The Cython backend runs a distutils setup script
    in a subprocess. Subclasses of CodeWrapper takes care of these backend-dependent
    details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的编译和封装由外部资源完成，例如系统安装的 f2py 命令。Cython 后端在子进程中运行 distutils 设置脚本。`CodeWrapper`
    的子类负责这些依赖于后端的细节。
- en: '## API Reference'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '## API 参考'
- en: Module for compiling codegen output, and wrap the binary for use in python.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译 codegen 输出并封装二进制以供 Python 使用的模块。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To use the autowrap module it must first be imported
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `autowrap` 模块，必须先导入它。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This module provides a common interface for different external backends, such
    as f2py, fwrap, Cython, SWIG(?) etc. (Currently only f2py and Cython are implemented)
    The goal is to provide access to compiled binaries of acceptable performance with
    a one-button user interface, e.g.,
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块为不同的外部后端（如 f2py、fwrap、Cython、SWIG(?) 等）提供了一个通用接口。（目前仅实现了 f2py 和 Cython）目标是通过单按钮用户界面提供性能可接受的编译二进制访问。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Although a SymPy user might primarily be interested in working with mathematical
    expressions and not in the details of wrapping tools needed to evaluate such expressions
    efficiently in numerical form, the user cannot do so without some understanding
    of the limits in the target language. For example, the expanded expression contains
    large coefficients which result in loss of precision when computing the expression:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SymPy 用户主要关注与数学表达式的工作，而不是在数值形式下有效评估这些表达式所需的封装工具的细节，但用户在没有对目标语言的限制有一定理解的情况下无法实现。例如，扩展表达式包含大系数，计算该表达式时会导致精度损失：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wrapping the unexpanded expression gives the expected behavior:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 封装未扩展的表达式会产生预期的行为：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The callable returned from autowrap() is a binary Python function, not a SymPy
    object. If it is desired to use the compiled function in symbolic expressions,
    it is better to use binary_function() which returns a SymPy Function object. The
    binary callable is attached as the _imp_ attribute and invoked when a numerical
    evaluation is requested with evalf(), or with lambdify().
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`autowrap()` 返回的可调用对象是一个二进制的 Python 函数，而不是 SymPy 对象。如果希望在符号表达式中使用编译后的函数，最好使用
    `binary_function()`，它返回一个 SymPy 函数对象。二进制可调用对象附加在 `_imp_` 属性上，当使用 `evalf()` 或 `lambdify()`
    请求数值评估时被调用。'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When is this useful?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这在什么情况下有用？
- en: For computations on large arrays, Python iterations may be too slow, and depending
    on the mathematical expression, it may be difficult to exploit the advanced index
    operations provided by NumPy.
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于大型数组的计算，Python迭代可能太慢，根据数学表达式，可能难以利用NumPy提供的高级索引操作。
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For *really* long expressions that will be called repeatedly, the compiled binary
    should be significantly faster than SymPy’s .evalf()
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于*真正*长的将被重复调用的表达式，编译后的二进制文件应比SymPy的.evalf()显著更快。
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are generating code with the codegen utility in order to use it in another
    project, the automatic Python wrappers let you test the binaries immediately from
    within SymPy.
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用codegen实用程序生成代码以在另一个项目中使用它，则自动的Python包装器可以让您立即从SymPy内部测试二进制文件。
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: To create customized ufuncs for use with numpy arrays. See *ufuncify*.
  id: totrans-34
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建用于numpy数组的定制ufuncs。参见*ufuncify*。
- en: When is this module NOT the best approach?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 何时此模块不是最佳方法？
- en: If you are really concerned about speed or memory optimizations, you will probably
    get better results by working directly with the wrapper tools and the low level
    code. However, the files generated by this utility may provide a useful starting
    point and reference code. Temporary files will be left intact if you supply the
    keyword tempdir=”path/to/files/”.
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您真的关心速度或内存优化，可能直接使用包装工具和低级代码会有更好的效果。但是，此实用程序生成的文件可能提供一个有用的起点和参考代码。如果提供了关键字tempdir="path/to/files/"，则临时文件将保持不变。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the array computation can be handled easily by numpy, and you do not need
    the binaries for another project.
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数组计算可以很容易地由numpy处理，并且您不需要为另一个项目的二进制文件。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Base Class for code wrappers
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码包装器的基类
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wrapper that uses Cython
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cython的包装器
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Write a Cython file with Python wrappers
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个带有Python包装的Cython文件
- en: This file contains all the definitions of the routines in c code and refers
    to the header file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含c代码中所有例程的定义，并引用头文件。
- en: Arguments
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: routines
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: routines
- en: List of Routine instances
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例程列表
- en: f
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: f
- en: File-like object to write the file to
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入文件的类文件对象
- en: prefix
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀
- en: The filename prefix, used to refer to the proper header file. Only the basename
    of the prefix is used.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用于引用适当头文件的文件名前缀。仅使用前缀的基本名称。
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Class used for testing independent of backends
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用于独立于后端测试的类
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Wrapper that uses f2py
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用f2py的包装器
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wrapper for Ufuncify
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ufuncify的包装器
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Write a C file with Python wrappers
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个带有Python包装的C文件
- en: This file contains all the definitions of the routines in c code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含c代码中所有例程的定义。
- en: Arguments
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: routines
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: routines
- en: List of Routine instances
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例程列表
- en: f
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: f
- en: File-like object to write the file to
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入文件的类文件对象
- en: prefix
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀
- en: The filename prefix, used to name the imported module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用于命名导入模块的文件名前缀。
- en: funcname
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: funcname
- en: Name of the main function to be returned.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回的主函数的名称。
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Generates Python callable binaries based on the math expression.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 基于数学表达式生成Python可调用二进制文件。
- en: 'Parameters:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**expr**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**'
- en: The SymPy expression that should be wrapped as a binary routine.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 应包装为二进制例程的SymPy表达式。
- en: '**language** : string, optional'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**language**：字符串，可选的'
- en: 'If supplied, (options: ‘C’ or ‘F95’), specifies the language of the generated
    code. If `None` [default], the language is inferred based upon the specified backend.'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供（选项：'C'或'F95'），则指定生成代码的语言。如果`None`（默认），则根据指定的后端推断语言。
- en: '**backend** : string, optional'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**backend**：字符串，可选的'
- en: Backend used to wrap the generated code. Either ‘f2py’ [default], or ‘cython’.
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于包装生成代码的后端。可以是'f2py' [默认]或'cython'。
- en: '**tempdir** : string, optional'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**tempdir**：字符串，可选的'
- en: Path to directory for temporary files. If this argument is supplied, the generated
    code and the wrapper input files are left intact in the specified path.
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于临时文件的目录路径。如果提供了此参数，则在指定路径中保留生成的代码和包装器输入文件。
- en: '**args** : iterable, optional'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**：可迭代的，可选的'
- en: An ordered iterable of symbols. Specifies the argument sequence for the function.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有序的符号可迭代对象。指定函数的参数序列。
- en: '**flags** : iterable, optional'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**flags**：可迭代的，可选的'
- en: Additional option flags that will be passed to the backend.
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 附加选项标志，将传递给后端。
- en: '**verbose** : bool, optional'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**：布尔值，可选的'
- en: If True, autowrap will not mute the command line backends. This can be helpful
    for debugging.
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为True，则autowrap将不会静音命令行后端。这对于调试可能很有帮助。
- en: '**helpers** : 3-tuple or iterable of 3-tuples, optional'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**helpers**：3元组或3元组的可迭代对象，可选的'
- en: Used to define auxiliary expressions needed for the main expr. If the main expression
    needs to call a specialized function it should be passed in via `helpers`. Autowrap
    will then make sure that the compiled main expression can link to the helper routine.
    Items should be 3-tuples with (<function_name>, <sympy_expression>, <argument_tuple>).
    It is mandatory to supply an argument sequence to helper routines.
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于定义主表达式所需的辅助表达式。如果主表达式需要调用特殊函数，则应通过`helpers`传递。Autowrap然后确保编译的主表达式可以链接到辅助例程。项目应该是3元组（<function_name>，<sympy_expression>，<argument_tuple>）。必须向辅助例程提供参数序列。
- en: '**code_gen** : CodeGen instance'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**code_gen**：CodeGen实例'
- en: An instance of a CodeGen subclass. Overrides `language`.
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CodeGen子类的实例。覆盖`language`。
- en: '**include_dirs** : [string]'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**：[字符串]'
- en: A list of directories to search for C/C++ header files (in Unix form for portability).
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于搜索C/C++头文件的目录列表（以Unix格式以保证可移植性）。
- en: '**library_dirs** : [string]'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**library_dirs**：[字符串]'
- en: A list of directories to search for C/C++ libraries at link time.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于在链接时搜索C/C++库的目录列表。
- en: '**libraries** : [string]'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**libraries**：[字符串]'
- en: A list of library names (not filenames or paths) to link against.
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个库名称列表（不是文件名或路径），用于链接。
- en: '**extra_compile_args** : [string]'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_compile_args**：[字符串]'
- en: Any extra platform- and compiler-specific information to use when compiling
    the source files in ‘sources’. For platforms and compilers where “command line”
    makes sense, this is typically a list of command-line arguments, but for other
    platforms it could be anything.
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编译源文件时使用的任何额外的平台和编译器特定信息在‘sources’中。对于“命令行”有意义的平台和编译器，这通常是一系列命令行参数，但对于其他平台，它可能是任何内容。
- en: '**extra_link_args** : [string]'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_link_args**：[字符串]'
- en: Any extra platform- and compiler-specific information to use when linking object
    files together to create the extension (or to create a new static Python interpreter).
    Similar interpretation as for ‘extra_compile_args’.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于将对象文件链接在一起创建扩展（或创建新的静态Python解释器）时使用的任何额外的平台和编译器特定信息。与'extra_compile_args'的类似解释。
- en: Examples
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Returns a SymPy function with expr as binary implementation
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有expr作为二进制实现的SymPy函数。
- en: This is a convenience function that automates the steps needed to autowrap the
    SymPy expression and attaching it to a Function object with implemented_function().
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个便利函数，自动完成将SymPy表达式包装到Function对象中并用implemented_function()实现的步骤。
- en: 'Parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**symfunc** : SymPy Function'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**symfunc**：SymPy函数'
- en: The function to bind the callable to.
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 绑定可调用对象的函数。
- en: '**expr** : SymPy Expression'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**：SymPy表达式'
- en: The expression used to generate the function.
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于生成函数的表达式。
- en: '**kwargs** : dict'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**kwargs**：字典'
- en: Any kwargs accepted by autowrap.
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: autowrap接受的任何kwargs。
- en: Examples
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Generates a binary function that supports broadcasting on numpy arrays.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个在numpy数组上支持广播的二进制函数。
- en: 'Parameters:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**args** : iterable'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**：可迭代'
- en: Either a Symbol or an iterable of symbols. Specifies the argument sequence for
    the function.
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 符号或符号的可迭代。指定函数的参数序列。
- en: '**expr**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**'
- en: A SymPy expression that defines the element wise operation.
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义逐元素操作的SymPy表达式。
- en: '**language** : string, optional'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**language**：字符串，可选的'
- en: 'If supplied, (options: ‘C’ or ‘F95’), specifies the language of the generated
    code. If `None` [default], the language is inferred based upon the specified backend.'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供（选项：'C'或'F95'），则指定生成代码的语言。如果为`None`[默认]，则根据指定的后端推断语言。
- en: '**backend** : string, optional'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**backend**：字符串，可选的'
- en: Backend used to wrap the generated code. Either ‘numpy’ [default], ‘cython’,
    or ‘f2py’.
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于包装生成的代码的后端。要么是'numpy' [默认]，'cython'或'f2py'。
- en: '**tempdir** : string, optional'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**tempdir**：字符串，可选的'
- en: Path to directory for temporary files. If this argument is supplied, the generated
    code and the wrapper input files are left intact in the specified path.
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 临时文件目录的路径。如果提供了此参数，则生成的代码和包装器输入文件将保留在指定的路径中。
- en: '**flags** : iterable, optional'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**flags**：可迭代的，可选的'
- en: Additional option flags that will be passed to the backend.
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将传递给后端的额外选项标志。
- en: '**verbose** : bool, optional'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**verbose**：布尔值，可选的'
- en: If True, autowrap will not mute the command line backends. This can be helpful
    for debugging.
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为True，autowrap将不会将命令行后端静音。这对于调试很有帮助。
- en: '**helpers** : iterable, optional'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**helpers**：可迭代的，可选的'
- en: Used to define auxiliary expressions needed for the main expr. If the main expression
    needs to call a specialized function it should be put in the `helpers` iterable.
    Autowrap will then make sure that the compiled main expression can link to the
    helper routine. Items should be tuples with (<funtion_name>, <sympy_expression>,
    <arguments>). It is mandatory to supply an argument sequence to helper routines.
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于定义主表达式所需的辅助表达式。如果主表达式需要调用特定函数，则应将其放入`helpers`可迭代对象中。Autowrap将确保编译的主表达式可以链接到辅助例程。项目应为元组（<函数名>，<sympy表达式>，<参数>）。向辅助例程提供参数序列是强制性的。
- en: '**kwargs** : dict'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**kwargs**：dict'
- en: These kwargs will be passed to autowrap if the \(f2py\) or \(cython\) backend
    is used and ignored if the \(numpy\) backend is used.
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果使用‘f2py’或‘cython’后端，这些kwargs将传递给autowrap，并且如果使用‘numpy’后端，则会被忽略。
- en: Notes
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The default backend (‘numpy’) will create actual instances of `numpy.ufunc`.
    These support ndimensional broadcasting, and implicit type conversion. Use of
    the other backends will result in a “ufunc-like” function, which requires equal
    length 1-dimensional arrays for all arguments, and will not perform any type conversions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 默认后端（‘numpy’）将创建实际的`numpy.ufunc`实例。这些支持n维广播和隐式类型转换。使用其他后端将导致“ufunc-like”函数，它要求所有参数都是相等长度的一维数组，并且不会执行任何类型转换。
- en: Examples
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For the ‘f2py’ and ‘cython’ backends, inputs are required to be equal length
    1-dimensional arrays. The ‘f2py’ backend will perform type conversion, but the
    Cython backend will error if the inputs are not of the expected type.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于‘f2py’和‘cython’后端，输入必须是相等长度的一维数组。‘f2py’后端将执行类型转换，但如果输入类型不符合预期，Cython后端将报错。
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: References
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R1052](#id1)]'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R1052](#id1)]'
- en: '[https://numpy.org/doc/stable/reference/ufuncs.html](https://numpy.org/doc/stable/reference/ufuncs.html)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://numpy.org/doc/stable/reference/ufuncs.html](https://numpy.org/doc/stable/reference/ufuncs.html)'
