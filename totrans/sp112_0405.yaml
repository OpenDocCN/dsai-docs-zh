- en: scipy.ndimage.distance_transform_cdt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.distance_transform_cdt.html#scipy.ndimage.distance_transform_cdt](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.distance_transform_cdt.html#scipy.ndimage.distance_transform_cdt)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Distance transform for chamfer type of transforms.
  prefs: []
  type: TYPE_NORMAL
- en: This function calculates the distance transform of the *input*, by replacing
    each foreground (non-zero) element, with its shortest distance to the background
    (any zero-valued element).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the distance transform, the feature transform can be calculated.
    In this case the index of the closest background element to each foreground element
    is returned in a separate array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input. Values of 0 are treated as background.
  prefs: []
  type: TYPE_NORMAL
- en: '**metric**{‘chessboard’, ‘taxicab’} or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The *metric* determines the type of chamfering that is done. If the *metric*
    is equal to ‘taxicab’ a structure is generated using [`generate_binary_structure`](scipy.ndimage.generate_binary_structure.html#scipy.ndimage.generate_binary_structure
    "scipy.ndimage.generate_binary_structure") with a squared distance equal to 1\.
    If the *metric* is equal to ‘chessboard’, a *metric* is generated using [`generate_binary_structure`](scipy.ndimage.generate_binary_structure.html#scipy.ndimage.generate_binary_structure
    "scipy.ndimage.generate_binary_structure") with a squared distance equal to the
    dimensionality of the array. These choices correspond to the common interpretations
    of the ‘taxicab’ and the ‘chessboard’ distance metrics in two dimensions. A custom
    metric may be provided, in the form of a matrix where each dimension has a length
    of three. ‘cityblock’ and ‘manhattan’ are also valid, and map to ‘taxicab’. The
    default is ‘chessboard’.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_distances**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to calculate the distance transform. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_indices**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to calculate the feature transform. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**distances**int32 ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An output array to store the calculated distance transform, instead of returning
    it. *return_distances* must be True. It must be the same shape as *input*.
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**int32 ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An output array to store the calculated feature transform, instead of returning
    it. *return_indicies* must be True. Its shape must be *(input.ndim,) + input.shape*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**distances**int32 ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The calculated distance transform. Returned only when *return_distances* is
    True, and *distances* is not supplied. It will have the same shape as the input
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**int32 ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The calculated feature transform. It has an input-shaped array for each dimension
    of the input. See distance_transform_edt documentation for an example. Returned
    only when *return_indices* is True, and *indices* is not supplied.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`distance_transform_edt`](scipy.ndimage.distance_transform_edt.html#scipy.ndimage.distance_transform_edt
    "scipy.ndimage.distance_transform_edt")'
  prefs: []
  type: TYPE_NORMAL
- en: Fast distance transform for euclidean metric
  prefs: []
  type: TYPE_NORMAL
- en: '[`distance_transform_bf`](scipy.ndimage.distance_transform_bf.html#scipy.ndimage.distance_transform_bf
    "scipy.ndimage.distance_transform_bf")'
  prefs: []
  type: TYPE_NORMAL
- en: Distance transform for different metrics using a slower brute force algorithm
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Import the necessary modules.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, we create a toy binary image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we set up the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The top image contains the original binary image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The middle image contains the distance transform using the `taxicab` metric.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The bottom image contains the distance transform using the `chessboard` metric.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-ndimage-distance_transform_cdt-1.png](../Images/15babeac83d803664db42532249c3cfe.png)'
  prefs: []
  type: TYPE_IMG
