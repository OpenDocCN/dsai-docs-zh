- en: numpy.vectorize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html](https://numpy.org/doc/1.26/reference/generated/numpy.vectorize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns an object that acts like pyfunc, but takes arrays as input.
  prefs: []
  type: TYPE_NORMAL
- en: Define a vectorized function which takes a nested sequence of objects or numpy
    arrays as inputs and returns a single numpy array or a tuple of numpy arrays.
    The vectorized function evaluates *pyfunc* over successive tuples of the input
    arrays like the python map function, except it uses the broadcasting rules of
    numpy.
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the output of *vectorized* is determined by calling the function
    with the first element of the input. This can be avoided by specifying the *otypes*
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pyfunc**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A python function or method. Can be omitted to produce a decorator with keyword
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**otypes**str or list of dtypes, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The output data type. It must be specified as either a string of typecode characters
    or a list of data type specifiers. There should be one data type specifier for
    each output.
  prefs: []
  type: TYPE_NORMAL
- en: '**doc**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The docstring for the function. If None, the docstring will be the `pyfunc.__doc__`.
  prefs: []
  type: TYPE_NORMAL
- en: '**excluded**set, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set of strings or integers representing the positional or keyword arguments
    for which the function will not be vectorized. These will be passed directly to
    *pyfunc* unmodified.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**cache**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, then cache the first function call that determines the number of
    outputs if *otypes* is not provided.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**signature**string, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Generalized universal function signature, e.g., `(m,n),(n)->(m)` for vectorized
    matrix-vector multiplication. If provided, `pyfunc` will be called with (and expected
    to return) arrays with shapes given by the size of corresponding core dimensions.
    By default, `pyfunc` is assumed to take scalars as input and output.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**callable'
  prefs: []
  type: TYPE_NORMAL
- en: A vectorized function if `pyfunc` was provided, a decorator otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`frompyfunc`](numpy.frompyfunc.html#numpy.frompyfunc "numpy.frompyfunc")'
  prefs: []
  type: TYPE_NORMAL
- en: Takes an arbitrary Python function and returns a ufunc
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The [`vectorize`](#numpy.vectorize "numpy.vectorize") function is provided primarily
    for convenience, not for performance. The implementation is essentially a for
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: If *otypes* is not specified, then a call to the function with the first argument
    will be used to determine the number of outputs. The results of this call will
    be cached if *cache* is *True* to prevent calling the function twice. However,
    to implement the cache, the original function must be wrapped which will slow
    down subsequent calls, so only do this if your function is expensive.
  prefs: []
  type: TYPE_NORMAL
- en: The new keyword argument interface and *excluded* argument support further degrades
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Generalized Universal Function API](../c-api/generalized-ufuncs.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The docstring is taken from the input function to [`vectorize`](#numpy.vectorize
    "numpy.vectorize") unless it is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output type is determined by evaluating the first element of the input,
    unless it is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The *excluded* argument can be used to prevent vectorizing over certain arguments.
    This can be useful for array-like arguments of a fixed length such as the coefficients
    for a polynomial as in [`polyval`](numpy.polyval.html#numpy.polyval "numpy.polyval"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Positional arguments may also be excluded by specifying their position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The *signature* argument allows for vectorizing functions that act on non-scalar
    arrays of fixed length. For example, you can use it for a vectorized calculation
    of Pearson correlation coefficient and its p-value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or for a vectorized convolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Decorator syntax is supported. The decorator can be called as a function to
    provide keyword arguments. >>>@np.vectorize …def identity(x): … return x … >>>identity([0,
    1, 2]) array([0, 1, 2]) >>>@np.vectorize(otypes=[float]) …def as_float(x): … return
    x … >>>as_float([0, 1, 2]) array([0., 1., 2.])'
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](numpy.vectorize.__call__.html#numpy.vectorize.__call__ "numpy.vectorize.__call__")(*args, **kwargs)
    | Call self as a function. |'
  prefs: []
  type: TYPE_TB
