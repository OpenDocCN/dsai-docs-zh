- en: scipy.optimize.fmin_cobyla
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.fmin_cobyla
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Minimize a function using the Constrained Optimization By Linear Approximation
    (COBYLA) method. This method wraps a FORTRAN implementation of the algorithm.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用约束优化线性逼近（COBYLA）方法最小化函数。该方法封装了算法的FORTRAN实现。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**func**callable'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**func**可调用对象'
- en: Function to minimize. In the form func(x, *args).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要最小化的函数。形式为 func(x, *args)。
- en: '**x0**ndarray'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**数组'
- en: Initial guess.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 初始猜测。
- en: '**cons**sequence'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**cons**序列'
- en: Constraint functions; must all be `>=0` (a single function if only 1 constraint).
    Each function takes the parameters *x* as its first argument, and it can return
    either a single number or an array or list of numbers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 约束函数；必须全部`>=0`（如果只有一个约束，则为单个函数）。每个函数将参数 *x* 作为其第一个参数，并可以返回单个数字或数字的数组或列表。
- en: '**args**tuple, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**元组，可选'
- en: Extra arguments to pass to function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给函数的额外参数。
- en: '**consargs**tuple, optional'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**consargs**元组，可选'
- en: Extra arguments to pass to constraint functions (default of None means use same
    extra arguments as those passed to func). Use `()` for no extra arguments.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给约束函数的额外参数（默认为 None 意味着使用与传递给 func 相同的额外参数）。使用 `()` 表示无额外参数。
- en: '**rhobeg**float, optional'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**rhobeg**浮点数，可选'
- en: Reasonable initial changes to the variables.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的合理初始更改。
- en: '**rhoend**float, optional'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**rhoend**浮点数，可选'
- en: Final accuracy in the optimization (not precisely guaranteed). This is a lower
    bound on the size of the trust region.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 优化中的最终精度（不能完全保证）。这是信任域大小的下界。
- en: '**disp**{0, 1, 2, 3}, optional'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**{0, 1, 2, 3}，可选'
- en: Controls the frequency of output; 0 implies no output.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 控制输出频率；0 表示无输出。
- en: '**maxfun**int, optional'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxfun**整数，可选'
- en: Maximum number of function evaluations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最大函数评估次数。
- en: '**catol**float, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**catol**浮点数，可选'
- en: Absolute tolerance for constraint violations.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对容忍约束违规。
- en: '**callback**callable, optional'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**callback**可调用对象，可选'
- en: Called after each iteration, as `callback(x)`, where `x` is the current parameter
    vector.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代后调用，格式为 `callback(x)`，其中 `x` 是当前参数向量。
- en: 'Returns:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**x**ndarray'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**数组'
- en: The argument that minimises *f*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化 *f* 的参数。
- en: See also
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
- en: Interface to minimization algorithms for multivariate functions. See the ‘COBYLA’
    *method* in particular.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 多元函数最小化算法的界面。特别参见‘COBYLA’ *方法*。
- en: Notes
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: This algorithm is based on linear approximations to the objective function and
    each constraint. We briefly describe the algorithm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此算法基于目标函数和每个约束的线性逼近。我们简要描述算法。
- en: Suppose the function is being minimized over k variables. At the jth iteration
    the algorithm has k+1 points v_1, …, v_(k+1), an approximate solution x_j, and
    a radius RHO_j. (i.e., linear plus a constant) approximations to the objective
    function and constraint functions such that their function values agree with the
    linear approximation on the k+1 points v_1,.., v_(k+1). This gives a linear program
    to solve (where the linear approximations of the constraint functions are constrained
    to be non-negative).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设正在对 k 个变量进行最小化函数。在第 j 次迭代中，算法具有 k+1 点 v_1, …, v_(k+1)，一个近似解 x_j，和一个半径 RHO_j。
    (即线性加一个常数) 目标函数和约束函数的近似值使得它们在 k+1 点 v_1,.., v_(k+1) 上的函数值与线性逼近一致。这提供了一个要解决的线性程序（其中约束函数的线性逼近被限制为非负）。
- en: However, the linear approximations are likely only good approximations near
    the current simplex, so the linear program is given the further requirement that
    the solution, which will become x_(j+1), must be within RHO_j from x_j. RHO_j
    only decreases, never increases. The initial RHO_j is rhobeg and the final RHO_j
    is rhoend. In this way COBYLA’s iterations behave like a trust region algorithm.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，线性逼近可能仅在当前单纯形附近是良好的近似，因此线性程序还有进一步的要求，即解决方案，即将成为 x_(j+1)，必须在从 x_j 到 RHO_j
    的范围内。 RHO_j 只会减少，不会增加。初始 RHO_j 是 rhobeg，最终 RHO_j 是 rhoend。通过这种方式，COBYLA 的迭代表现得像一个信任域算法。
- en: Additionally, the linear program may be inconsistent, or the approximation may
    give poor improvement. For details about how these issues are resolved, as well
    as how the points v_i are updated, refer to the source code or the references
    below.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，线性程序可能不一致，或者近似可能带来很差的改进。有关这些问题如何解决的详细信息，以及点 v_i 如何更新，请参考下面的源代码或参考资料。
- en: References
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: Powell M.J.D. (1994), “A direct search optimization method that models the objective
    and constraint functions by linear interpolation.”, in Advances in Optimization
    and Numerical Analysis, eds. S. Gomez and J-P Hennart, Kluwer Academic (Dordrecht),
    pp. 51-67
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Powell M.J.D. (1994), “一种通过线性插值模拟目标和约束函数的直接搜索优化方法”, 在《优化与数值分析进展》中，主编 S. Gomez
    和 J-P Hennart，Kluwer Academic（多德雷赫特），pp. 51-67
- en: Powell M.J.D. (1998), “Direct search algorithms for optimization calculations”,
    Acta Numerica 7, 287-336
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Powell M.J.D. (1998), “用于优化计算的直接搜索算法”, Acta Numerica 7, 287-336
- en: Powell M.J.D. (2007), “A view of algorithms for optimization without derivatives”,
    Cambridge University Technical Report DAMTP 2007/NA03
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Powell M.J.D. (2007), “无导数优化算法的一种观点”, 剑桥大学技术报告 DAMTP 2007/NA03
- en: Examples
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Minimize the objective function f(x,y) = x*y subject to the constraints x**2
    + y**2 < 1 and y > 0:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化目标函数 f(x,y) = x*y，受限于约束 x**2 + y**2 < 1 且 y > 0：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The exact solution is (-sqrt(2)/2, sqrt(2)/2).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 精确解是 (-sqrt(2)/2, sqrt(2)/2)。
