- en: Binary operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.bitwise.html](https://numpy.org/doc/1.26/reference/routines.bitwise.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Elementwise bit operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  prefs: []
  type: TYPE_TB
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  prefs: []
  type: TYPE_TB
- en: Bit packing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | Packs the elements of a binary-valued array into bits in a uint8 array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | Unpacks elements of a uint8 array into a binary-valued output array. |'
  prefs: []
  type: TYPE_TB
- en: Output formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  prefs: []
  type: TYPE_TB
- en: Elementwise bit operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  prefs: []
  type: TYPE_TB
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  prefs: []
  type: TYPE_TB
- en: Bit packing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | Packs the elements of a binary-valued array into bits in a uint8 array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | Unpacks elements of a uint8 array into a binary-valued output array. |'
  prefs: []
  type: TYPE_TB
- en: Output formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  prefs: []
  type: TYPE_TB
