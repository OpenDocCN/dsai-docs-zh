- en: Bit Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特生成器
- en: 原文：[https://numpy.org/doc/1.26/reference/random/bit_generators/index.html](https://numpy.org/doc/1.26/reference/random/bit_generators/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/bit_generators/index.html](https://numpy.org/doc/1.26/reference/random/bit_generators/index.html)
- en: The random values produced by [`Generator`](../generator.html#numpy.random.Generator
    "numpy.random.Generator") originate in a BitGenerator. The BitGenerators do not
    directly provide random numbers and only contains methods used for seeding, getting
    or setting the state, jumping or advancing the state, and for accessing low-level
    wrappers for consumption by code that can efficiently access the functions provided,
    e.g., [numba](https://numba.pydata.org).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`Generator`](../generator.html#numpy.random.Generator "numpy.random.Generator")生成的随机值源自一个比特生成器。比特生成器不直接提供随机数，仅包含用于播种、获取或设置状态、跳转或前进状态以及访问低级包装器的方法，以供能够高效访问提供的函数的代码使用，例如
    [numba](https://numba.pydata.org)。
- en: Supported BitGenerators
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的比特生成器
- en: 'The included BitGenerators are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的比特生成器有：
- en: PCG-64 - The default. A fast generator that can be advanced by an arbitrary
    amount. See the documentation for [`advance`](generated/numpy.random.PCG64.advance.html#numpy.random.PCG64.advance
    "numpy.random.PCG64.advance"). PCG-64 has a period of \(2^{128}\). See the [PCG
    author’s page](http://www.pcg-random.org/) for more details about this class of
    PRNG.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCG-64 - 默认值。一种快速生成器，可以通过任意数量进行推进。请参阅 [`advance`](generated/numpy.random.PCG64.advance.html#numpy.random.PCG64.advance)
    的文档。PCG-64 的周期为 \(2^{128}\)。有关此类 PRNG 的更多详细信息，请参阅 [PCG 作者页面](http://www.pcg-random.org/)。
- en: PCG-64 DXSM - An upgraded version of PCG-64 with better statistical properties
    in parallel contexts. See [Upgrading PCG64 with PCG64DXSM](../upgrading-pcg64.html#upgrading-pcg64)
    for more information on these improvements.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCG-64 DXSM - PCG-64 的升级版本，在并行环境中具有更好的统计特性。有关这些改进的更多信息，请参阅 [使用 PCG64DXSM 升级
    PCG64](../upgrading-pcg64.html#upgrading-pcg64)。
- en: MT19937 - The standard Python BitGenerator. Adds a [`MT19937.jumped`](generated/numpy.random.MT19937.jumped.html#numpy.random.MT19937.jumped
    "numpy.random.MT19937.jumped") function that returns a new generator with state
    as-if \(2^{128}\) draws have been made.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MT19937 - 标准的 Python 比特生成器。添加了一个 [`MT19937.jumped`](generated/numpy.random.MT19937.jumped.html#numpy.random.MT19937.jumped
    "numpy.random.MT19937.jumped") 函数，返回一个新的生成器，其状态就像已经进行了 \(2^{128}\) 次抽样。
- en: Philox - A counter-based generator capable of being advanced an arbitrary number
    of steps or generating independent streams. See the [Random123](https://www.deshawresearch.com/resources_random123.html)
    page for more details about this class of bit generators.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菲洛克斯 - 一种基于计数器的生成器，可以通过任意数量的步骤进行推进或生成独立流。查看 [Random123](https://www.deshawresearch.com/resources_random123.html)
    页面以获取有关这类比特生成器的更多详细信息。
- en: SFC64 - A fast generator based on random invertible mappings. Usually the fastest
    generator of the four. See the [SFC author’s page](http://pracrand.sourceforge.net/RNG_engines.txt)
    for (a little) more detail.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFC64 - 基于随机可逆映射的快速生成器。通常是这四种生成器中最快的。查看 [SFC 作者页面](http://pracrand.sourceforge.net/RNG_engines.txt)
    以获取（一点）更多关于这类比特生成器的详细信息。
- en: '| [`BitGenerator`](generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")([seed]) | Base Class for generic BitGenerators, which
    provide a stream of random bits based on different algorithms. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`BitGenerator`](generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")([seed]) | 通用比特生成器的基类，基于不同的算法提供随机比特流。 |'
- en: '[MT19937](mt19937.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MT19937](mt19937.html)'
- en: '[PCG64](pcg64.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PCG64](pcg64.html)'
- en: '[PCG64DXSM](pcg64dxsm.html)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PCG64DXSM](pcg64dxsm.html)'
- en: '[Philox](philox.html)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[菲洛克斯](philox.html)'
- en: '[SFC64](sfc64.html)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SFC64](sfc64.html)'
- en: Supported BitGenerators
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的比特生成器
- en: 'The included BitGenerators are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的比特生成器有：
- en: PCG-64 - The default. A fast generator that can be advanced by an arbitrary
    amount. See the documentation for [`advance`](generated/numpy.random.PCG64.advance.html#numpy.random.PCG64.advance
    "numpy.random.PCG64.advance"). PCG-64 has a period of \(2^{128}\). See the [PCG
    author’s page](http://www.pcg-random.org/) for more details about this class of
    PRNG.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCG-64 - 默认值。一种快速生成器，可以通过任意数量进行推进。请参阅 [`advance`](generated/numpy.random.PCG64.advance.html#numpy.random.PCG64.advance
    "numpy.random.PCG64.advance") 的文档。PCG-64 的周期为 \(2^{128}\)。有关此类 PRNG 的更多详细信息，请参阅
    [PCG 作者页面](http://www.pcg-random.org/)。
- en: PCG-64 DXSM - An upgraded version of PCG-64 with better statistical properties
    in parallel contexts. See [Upgrading PCG64 with PCG64DXSM](../upgrading-pcg64.html#upgrading-pcg64)
    for more information on these improvements.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCG-64 DXSM - PCG-64 的升级版本，在并行环境中具有更好的统计特性。有关这些改进的更多信息，请参阅 [使用 PCG64DXSM 升级
    PCG64](../upgrading-pcg64.html#upgrading-pcg64)。
- en: MT19937 - The standard Python BitGenerator. Adds a [`MT19937.jumped`](generated/numpy.random.MT19937.jumped.html#numpy.random.MT19937.jumped
    "numpy.random.MT19937.jumped") function that returns a new generator with state
    as-if \(2^{128}\) draws have been made.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MT19937 - 标准的 Python 比特生成器。添加了一个[`MT19937.jumped`](generated/numpy.random.MT19937.jumped.html#numpy.random.MT19937.jumped
    "numpy.random.MT19937.jumped")函数，它返回一个具有与假设 \(2^{128}\) 次抽取相同状态的新生成器。
- en: Philox - A counter-based generator capable of being advanced an arbitrary number
    of steps or generating independent streams. See the [Random123](https://www.deshawresearch.com/resources_random123.html)
    page for more details about this class of bit generators.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Philox - 一个基于计数器的生成器，能够被任意数量的步骤推进或生成独立流。关于这类比特生成器的更多详情，请参见[Random123](https://www.deshawresearch.com/resources_random123.html)页面。
- en: SFC64 - A fast generator based on random invertible mappings. Usually the fastest
    generator of the four. See the [SFC author’s page](http://pracrand.sourceforge.net/RNG_engines.txt)
    for (a little) more detail.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFC64 - 一种基于随机可逆映射的快速生成器。通常是四种中最快的生成器。关于这个生成器的（少许）更多细节，请参见[SFC作者页面](http://pracrand.sourceforge.net/RNG_engines.txt)。
- en: '| [`BitGenerator`](generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")([seed]) | Base Class for generic BitGenerators, which
    provide a stream of random bits based on different algorithms. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`BitGenerator`](generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")([seed]) | 泛型比特生成器的基类，根据不同的算法提供一系列基于不同算法的随机比特流。 |'
- en: '[MT19937](mt19937.html)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MT19937](mt19937.html)'
- en: '[PCG64](pcg64.html)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PCG64](pcg64.html)'
- en: '[PCG64DXSM](pcg64dxsm.html)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PCG64DXSM](pcg64dxsm.html)'
- en: '[Philox](philox.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Philox](philox.html)'
- en: '[SFC64](sfc64.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SFC64](sfc64.html)'
- en: '# Seeding and Entropy'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '# 种子和熵'
- en: A BitGenerator provides a stream of random values. In order to generate reproducible
    streams, BitGenerators support setting their initial state via a seed. All of
    the provided BitGenerators will take an arbitrary-sized non-negative integer,
    or a list of such integers, as a seed. BitGenerators need to take those inputs
    and process them into a high-quality internal state for the BitGenerator. All
    of the BitGenerators in numpy delegate that task to [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence"), which uses hashing techniques to ensure that even
    low-quality seeds generate high-quality initial states.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个比特生成器（BitGenerator）提供一系列随机值。为了生成可复现的流，比特生成器支持通过种子设置其初始状态。所有提供的比特生成器都将任意大小的非负整数或此类整数列表作为种子。比特生成器需要获取这些输入并将它们处理成高质量的内部状态以供比特生成器使用。numpy中的所有比特生成器都将该任务委托给[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")，后者使用哈希技术确保即使是低质量的种子也能生成高质量的初始状态。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") is designed to be convenient for implementing best
    practices. We recommend that a stochastic program defaults to using entropy from
    the OS so that each run is different. The program should print out or log that
    entropy. In order to reproduce a past value, the program should allow the user
    to provide that value through some mechanism, a command-line argument is common,
    so that the user can then re-enter that entropy to reproduce the result. [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") can take care of everything except for communicating
    with the user, which is up to you.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")被设计为实现最佳实践的便利工具。我们建议一个随机程序默认使用操作系统提供的熵，以确保每次运行都不同。该程序应该打印或记录该熵。为了重现过去的值，程序应该允许用户通过某种机制提供该值，通常是命令行参数，以便用户可以重新输入该熵以重现结果。[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")可以处理除了与用户通信之外的所有内容，这取决于你。'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We default to using a 128-bit integer using entropy gathered from the OS. This
    is a good amount of entropy to initialize all of the generators that we have in
    numpy. We do not recommend using small seeds below 32 bits for general use. Using
    just a small set of seeds to instantiate larger state spaces means that there
    are some initial states that are impossible to reach. This creates some biases
    if everyone uses such values.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们默认使用从操作系统收集的 128 位整数作为熵。这是初始化 numpy 中所有生成器所需的良好熵量。我们不建议在一般情况下使用小于 32 位的小种子。只使用少量种子来实例化较大的状态空间意味着有些初始状态是不可能到达的。如果每个人都使用这样的值，这会产生一些偏差。
- en: There will not be anything *wrong* with the results, per se; even a seed of
    0 is perfectly fine thanks to the processing that [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") does. If you just need *some* fixed value for unit
    tests or debugging, feel free to use whatever seed you like. But if you want to
    make inferences from the results or publish them, drawing from a larger set of
    seeds is good practice.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结果本身不会有任何*问题*，即使种子为0也可以，这要归功于[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")的处理。 如果您只是需要一些固定值进行单元测试或调试，可以随意使用任何种子。 但如果您希望从结果中推断或发布结果，则从更大的种子集中抽取是一种良好的做法。
- en: If you need to generate a good seed “offline”, then `SeedSequence().entropy`
    or using `secrets.randbits(128)` from the standard library are both convenient
    ways.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要“离线”生成一个好的种子，则`SeedSequence().entropy`或使用标准库中的`secrets.randbits(128)`都是方便的方法。
- en: 'If you need to run several stochastic simulations in parallel, best practice
    is to construct a random generator instance for each simulation. To make sure
    that the random streams have distinct initial states, you can use the *spawn*
    method of [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence"). For instance, here we construct a list of 12 instances:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要并行运行几次随机模拟，最佳实践是为每个模拟构建一个随机生成器实例。 确保随机流具有不同的初始状态，您可以使用[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")的*spawn*方法。 例如，这里我们构造了12个实例的列表：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you already have an initial random generator instance, you can shorten the
    above by using the [`spawn`](generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有了初始的随机生成器实例，您可以使用[`spawn`](generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn")方法简化以上操作：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An alternative way is to use the fact that a [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") can be initialized by a tuple of elements. Here we
    use a base entropy value and an integer `worker_id`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是利用事实，即[`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")可以通过一组元素进行初始化。 这里我们使用基础熵值和整数`worker_id`
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the sequences produced by the latter method will be distinct from
    those constructed via [`spawn`](generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn").
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过后一种方法产生的序列将与通过[`spawn`](generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn")构造的序列不同。
- en: '| [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")([entropy, spawn_key, pool_size]) | SeedSequence mixes
    sources of entropy in a reproducible way to set the initial state for independent
    and very probably non-overlapping BitGenerators. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`SeedSequence`](generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")([entropy, spawn_key, pool_size]) | SeedSequence以可复现的方式混合熵源，为独立且很可能不重叠的BitGenerators设置初始状态。'
