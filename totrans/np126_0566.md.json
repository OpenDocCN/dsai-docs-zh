["```py\nlinalg.eigh(a, UPLO='L')\n```", "```py\n>>> from numpy import linalg as LA\n>>> a = np.array([[1, -2j], [2j, 5]])\n>>> a\narray([[ 1.+0.j, -0.-2.j],\n [ 0.+2.j,  5.+0.j]])\n>>> eigenvalues, eigenvectors = LA.eigh(a)\n>>> eigenvalues\narray([0.17157288, 5.82842712])\n>>> eigenvectors\narray([[-0.92387953+0.j        , -0.38268343+0.j        ], # may vary\n [ 0\\.        +0.38268343j,  0\\.        -0.92387953j]]) \n```", "```py\n>>> np.dot(a, eigenvectors[:, 0]) - eigenvalues[0] * eigenvectors[:, 0] # verify 1st eigenval/vec pair\narray([5.55111512e-17+0.0000000e+00j, 0.00000000e+00+1.2490009e-16j])\n>>> np.dot(a, eigenvectors[:, 1]) - eigenvalues[1] * eigenvectors[:, 1] # verify 2nd eigenval/vec pair\narray([0.+0.j, 0.+0.j]) \n```", "```py\n>>> A = np.matrix(a) # what happens if input is a matrix object\n>>> A\nmatrix([[ 1.+0.j, -0.-2.j],\n [ 0.+2.j,  5.+0.j]])\n>>> eigenvalues, eigenvectors = LA.eigh(A)\n>>> eigenvalues\narray([0.17157288, 5.82842712])\n>>> eigenvectors\nmatrix([[-0.92387953+0.j        , -0.38268343+0.j        ], # may vary\n [ 0\\.        +0.38268343j,  0\\.        -0.92387953j]]) \n```", "```py\n>>> # demonstrate the treatment of the imaginary part of the diagonal\n>>> a = np.array([[5+2j, 9-2j], [0+2j, 2-1j]])\n>>> a\narray([[5.+2.j, 9.-2.j],\n [0.+2.j, 2.-1.j]])\n>>> # with UPLO='L' this is numerically equivalent to using LA.eig() with:\n>>> b = np.array([[5.+0.j, 0.-2.j], [0.+2.j, 2.-0.j]])\n>>> b\narray([[5.+0.j, 0.-2.j],\n [0.+2.j, 2.+0.j]])\n>>> wa, va = LA.eigh(a)\n>>> wb, vb = LA.eig(b)\n>>> wa; wb\narray([1., 6.])\narray([6.+0.j, 1.+0.j])\n>>> va; vb\narray([[-0.4472136 +0.j        , -0.89442719+0.j        ], # may vary\n [ 0\\.        +0.89442719j,  0\\.        -0.4472136j ]])\narray([[ 0.89442719+0.j       , -0\\.        +0.4472136j],\n [-0\\.        +0.4472136j,  0.89442719+0.j       ]]) \n```"]