- en: scipy.sparse.bsr_matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.bsr_matrix.html#scipy.sparse.bsr_matrix](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.bsr_matrix.html#scipy.sparse.bsr_matrix)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Block Sparse Row format sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be instantiated in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: bsr_matrix(D, [blocksize=(R,C)])
  prefs: []
  type: TYPE_NORMAL
- en: where D is a 2-D ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: bsr_matrix(S, [blocksize=(R,C)])
  prefs: []
  type: TYPE_NORMAL
- en: with another sparse array or matrix S (equivalent to S.tobsr())
  prefs: []
  type: TYPE_NORMAL
- en: bsr_matrix((M, N), [blocksize=(R,C), dtype])
  prefs: []
  type: TYPE_NORMAL
- en: to construct an empty sparse matrix with shape (M, N) dtype is optional, defaulting
    to dtype=’d’.
  prefs: []
  type: TYPE_NORMAL
- en: bsr_matrix((data, ij), [blocksize=(R,C), shape=(M, N)])
  prefs: []
  type: TYPE_NORMAL
- en: where `data` and `ij` satisfy `a[ij[0, k], ij[1, k]] = data[k]`
  prefs: []
  type: TYPE_NORMAL
- en: bsr_matrix((data, indices, indptr), [shape=(M, N)])
  prefs: []
  type: TYPE_NORMAL
- en: 'is the standard BSR representation where the block column indices for row i
    are stored in `indices[indptr[i]:indptr[i+1]]` and their corresponding block values
    are stored in `data[ indptr[i]: indptr[i+1] ]`. If the shape parameter is not
    supplied, the matrix dimensions are inferred from the index arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Sparse matrices can be used in arithmetic operations: they support addition,
    subtraction, multiplication, division, and matrix power.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary of BSR format**'
  prefs: []
  type: TYPE_NORMAL
- en: The Block Sparse Row (BSR) format is very similar to the Compressed Sparse Row
    (CSR) format. BSR is appropriate for sparse matrices with dense sub matrices like
    the last example below. Such sparse block matrices often arise in vector-valued
    finite element discretizations. In such cases, BSR is considerably more efficient
    than CSR and CSC for many sparse arithmetic operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Blocksize**'
  prefs: []
  type: TYPE_NORMAL
- en: The blocksize (R,C) must evenly divide the shape of the sparse matrix (M,N).
    That is, R and C must satisfy the relationship `M % R = 0` and `N % C = 0`.
  prefs: []
  type: TYPE_NORMAL
- en: If no blocksize is specified, a simple heuristic is applied to determine an
    appropriate blocksize.
  prefs: []
  type: TYPE_NORMAL
- en: '**Canonical Format**'
  prefs: []
  type: TYPE_NORMAL
- en: In canonical format, there are no duplicate blocks and indices are sorted per
    row.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](scipy.sparse.bsr_matrix.shape.html#scipy.sparse.bsr_matrix.shape
    "scipy.sparse.bsr_matrix.shape")2-tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions (this is always 2)
  prefs: []
  type: TYPE_NORMAL
- en: '[`nnz`](scipy.sparse.bsr_matrix.nnz.html#scipy.sparse.bsr_matrix.nnz "scipy.sparse.bsr_matrix.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values, including explicit zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](scipy.sparse.bsr_matrix.size.html#scipy.sparse.bsr_matrix.size "scipy.sparse.bsr_matrix.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values.
  prefs: []
  type: TYPE_NORMAL
- en: '**data**'
  prefs: []
  type: TYPE_NORMAL
- en: BSR format data array of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**'
  prefs: []
  type: TYPE_NORMAL
- en: BSR format index array of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**indptr**'
  prefs: []
  type: TYPE_NORMAL
- en: BSR format index pointer array of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '[`blocksize`](scipy.sparse.bsr_matrix.blocksize.html#scipy.sparse.bsr_matrix.blocksize
    "scipy.sparse.bsr_matrix.blocksize")'
  prefs: []
  type: TYPE_NORMAL
- en: Block size of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[`has_sorted_indices`](scipy.sparse.bsr_matrix.has_sorted_indices.html#scipy.sparse.bsr_matrix.has_sorted_indices
    "scipy.sparse.bsr_matrix.has_sorted_indices")bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the indices are sorted
  prefs: []
  type: TYPE_NORMAL
- en: '[`has_canonical_format`](scipy.sparse.bsr_matrix.has_canonical_format.html#scipy.sparse.bsr_matrix.has_canonical_format
    "scipy.sparse.bsr_matrix.has_canonical_format")bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the array/matrix has sorted indices and no duplicates
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](scipy.sparse.bsr_matrix.T.html#scipy.sparse.bsr_matrix.T "scipy.sparse.bsr_matrix.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Transpose.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__len__`](scipy.sparse.bsr_matrix.__len__.html#scipy.sparse.bsr_matrix.__len__
    "scipy.sparse.bsr_matrix.__len__")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`__mul__`](scipy.sparse.bsr_matrix.__mul__.html#scipy.sparse.bsr_matrix.__mul__
    "scipy.sparse.bsr_matrix.__mul__")(other) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsin`](scipy.sparse.bsr_matrix.arcsin.html#scipy.sparse.bsr_matrix.arcsin
    "scipy.sparse.bsr_matrix.arcsin")() | Element-wise arcsin. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsinh`](scipy.sparse.bsr_matrix.arcsinh.html#scipy.sparse.bsr_matrix.arcsinh
    "scipy.sparse.bsr_matrix.arcsinh")() | Element-wise arcsinh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan`](scipy.sparse.bsr_matrix.arctan.html#scipy.sparse.bsr_matrix.arctan
    "scipy.sparse.bsr_matrix.arctan")() | Element-wise arctan. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctanh`](scipy.sparse.bsr_matrix.arctanh.html#scipy.sparse.bsr_matrix.arctanh
    "scipy.sparse.bsr_matrix.arctanh")() | Element-wise arctanh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](scipy.sparse.bsr_matrix.argmax.html#scipy.sparse.bsr_matrix.argmax
    "scipy.sparse.bsr_matrix.argmax")([axis, out]) | Return indices of maximum elements
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](scipy.sparse.bsr_matrix.argmin.html#scipy.sparse.bsr_matrix.argmin
    "scipy.sparse.bsr_matrix.argmin")([axis, out]) | Return indices of minimum elements
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asformat`](scipy.sparse.bsr_matrix.asformat.html#scipy.sparse.bsr_matrix.asformat
    "scipy.sparse.bsr_matrix.asformat")(format[, copy]) | Return this array/matrix
    in the passed format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfptype`](scipy.sparse.bsr_matrix.asfptype.html#scipy.sparse.bsr_matrix.asfptype
    "scipy.sparse.bsr_matrix.asfptype")() | Upcast matrix to a floating point format
    (if necessary) |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](scipy.sparse.bsr_matrix.astype.html#scipy.sparse.bsr_matrix.astype
    "scipy.sparse.bsr_matrix.astype")(dtype[, casting, copy]) | Cast the array/matrix
    elements to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](scipy.sparse.bsr_matrix.ceil.html#scipy.sparse.bsr_matrix.ceil "scipy.sparse.bsr_matrix.ceil")()
    | Element-wise ceil. |'
  prefs: []
  type: TYPE_TB
- en: '| [`check_format`](scipy.sparse.bsr_matrix.check_format.html#scipy.sparse.bsr_matrix.check_format
    "scipy.sparse.bsr_matrix.check_format")([full_check]) | Check whether the array/matrix
    respects the BSR format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](scipy.sparse.bsr_matrix.conj.html#scipy.sparse.bsr_matrix.conj "scipy.sparse.bsr_matrix.conj")([copy])
    | Element-wise complex conjugation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](scipy.sparse.bsr_matrix.conjugate.html#scipy.sparse.bsr_matrix.conjugate
    "scipy.sparse.bsr_matrix.conjugate")([copy]) | Element-wise complex conjugation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](scipy.sparse.bsr_matrix.copy.html#scipy.sparse.bsr_matrix.copy "scipy.sparse.bsr_matrix.copy")()
    | Returns a copy of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`count_nonzero`](scipy.sparse.bsr_matrix.count_nonzero.html#scipy.sparse.bsr_matrix.count_nonzero
    "scipy.sparse.bsr_matrix.count_nonzero")() | Number of non-zero entries, equivalent
    to |'
  prefs: []
  type: TYPE_TB
- en: '| [`deg2rad`](scipy.sparse.bsr_matrix.deg2rad.html#scipy.sparse.bsr_matrix.deg2rad
    "scipy.sparse.bsr_matrix.deg2rad")() | Element-wise deg2rad. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](scipy.sparse.bsr_matrix.diagonal.html#scipy.sparse.bsr_matrix.diagonal
    "scipy.sparse.bsr_matrix.diagonal")([k]) | Returns the kth diagonal of the array/matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dot`](scipy.sparse.bsr_matrix.dot.html#scipy.sparse.bsr_matrix.dot "scipy.sparse.bsr_matrix.dot")(other)
    | Ordinary dot product |'
  prefs: []
  type: TYPE_TB
- en: '| [`eliminate_zeros`](scipy.sparse.bsr_matrix.eliminate_zeros.html#scipy.sparse.bsr_matrix.eliminate_zeros
    "scipy.sparse.bsr_matrix.eliminate_zeros")() | Remove zero elements in-place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](scipy.sparse.bsr_matrix.expm1.html#scipy.sparse.bsr_matrix.expm1
    "scipy.sparse.bsr_matrix.expm1")() | Element-wise expm1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](scipy.sparse.bsr_matrix.floor.html#scipy.sparse.bsr_matrix.floor
    "scipy.sparse.bsr_matrix.floor")() | Element-wise floor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getH`](scipy.sparse.bsr_matrix.getH.html#scipy.sparse.bsr_matrix.getH "scipy.sparse.bsr_matrix.getH")()
    | Return the Hermitian transpose of this matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_shape`](scipy.sparse.bsr_matrix.get_shape.html#scipy.sparse.bsr_matrix.get_shape
    "scipy.sparse.bsr_matrix.get_shape")() | Get the shape of the matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`getcol`](scipy.sparse.bsr_matrix.getcol.html#scipy.sparse.bsr_matrix.getcol
    "scipy.sparse.bsr_matrix.getcol")(j) | Returns a copy of column j of the matrix,
    as an (m x 1) sparse matrix (column vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`getformat`](scipy.sparse.bsr_matrix.getformat.html#scipy.sparse.bsr_matrix.getformat
    "scipy.sparse.bsr_matrix.getformat")() | Matrix storage format |'
  prefs: []
  type: TYPE_TB
- en: '| [`getmaxprint`](scipy.sparse.bsr_matrix.getmaxprint.html#scipy.sparse.bsr_matrix.getmaxprint
    "scipy.sparse.bsr_matrix.getmaxprint")() | Maximum number of elements to display
    when printed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getnnz`](scipy.sparse.bsr_matrix.getnnz.html#scipy.sparse.bsr_matrix.getnnz
    "scipy.sparse.bsr_matrix.getnnz")([axis]) | Number of stored values, including
    explicit zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getrow`](scipy.sparse.bsr_matrix.getrow.html#scipy.sparse.bsr_matrix.getrow
    "scipy.sparse.bsr_matrix.getrow")(i) | Returns a copy of row i of the matrix,
    as a (1 x n) sparse matrix (row vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](scipy.sparse.bsr_matrix.log1p.html#scipy.sparse.bsr_matrix.log1p
    "scipy.sparse.bsr_matrix.log1p")() | Element-wise log1p. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](scipy.sparse.bsr_matrix.max.html#scipy.sparse.bsr_matrix.max "scipy.sparse.bsr_matrix.max")([axis, out])
    | Return the maximum of the array/matrix or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](scipy.sparse.bsr_matrix.maximum.html#scipy.sparse.bsr_matrix.maximum
    "scipy.sparse.bsr_matrix.maximum")(other) | Element-wise maximum between this
    and another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.sparse.bsr_matrix.mean.html#scipy.sparse.bsr_matrix.mean "scipy.sparse.bsr_matrix.mean")([axis, dtype, out])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](scipy.sparse.bsr_matrix.min.html#scipy.sparse.bsr_matrix.min "scipy.sparse.bsr_matrix.min")([axis, out])
    | Return the minimum of the array/matrix or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](scipy.sparse.bsr_matrix.minimum.html#scipy.sparse.bsr_matrix.minimum
    "scipy.sparse.bsr_matrix.minimum")(other) | Element-wise minimum between this
    and another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](scipy.sparse.bsr_matrix.multiply.html#scipy.sparse.bsr_matrix.multiply
    "scipy.sparse.bsr_matrix.multiply")(other) | Point-wise multiplication by another
    array/matrix, vector, or scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmax`](scipy.sparse.bsr_matrix.nanmax.html#scipy.sparse.bsr_matrix.nanmax
    "scipy.sparse.bsr_matrix.nanmax")([axis, out]) | Return the maximum of the array/matrix
    or maximum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmin`](scipy.sparse.bsr_matrix.nanmin.html#scipy.sparse.bsr_matrix.nanmin
    "scipy.sparse.bsr_matrix.nanmin")([axis, out]) | Return the minimum of the array/matrix
    or minimum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](scipy.sparse.bsr_matrix.nonzero.html#scipy.sparse.bsr_matrix.nonzero
    "scipy.sparse.bsr_matrix.nonzero")() | Nonzero indices of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](scipy.sparse.bsr_matrix.power.html#scipy.sparse.bsr_matrix.power
    "scipy.sparse.bsr_matrix.power")(n[, dtype]) | This function performs element-wise
    power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prune`](scipy.sparse.bsr_matrix.prune.html#scipy.sparse.bsr_matrix.prune
    "scipy.sparse.bsr_matrix.prune")() | Remove empty space after all non-zero elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`rad2deg`](scipy.sparse.bsr_matrix.rad2deg.html#scipy.sparse.bsr_matrix.rad2deg
    "scipy.sparse.bsr_matrix.rad2deg")() | Element-wise rad2deg. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](scipy.sparse.bsr_matrix.reshape.html#scipy.sparse.bsr_matrix.reshape
    "scipy.sparse.bsr_matrix.reshape")(self, shape[, order, copy]) | Gives a new shape
    to a sparse array/matrix without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](scipy.sparse.bsr_matrix.resize.html#scipy.sparse.bsr_matrix.resize
    "scipy.sparse.bsr_matrix.resize")(*shape) | Resize the array/matrix in-place to
    dimensions given by `shape` |'
  prefs: []
  type: TYPE_TB
- en: '| [`rint`](scipy.sparse.bsr_matrix.rint.html#scipy.sparse.bsr_matrix.rint "scipy.sparse.bsr_matrix.rint")()
    | Element-wise rint. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_shape`](scipy.sparse.bsr_matrix.set_shape.html#scipy.sparse.bsr_matrix.set_shape
    "scipy.sparse.bsr_matrix.set_shape")(shape) | Set the shape of the matrix in-place
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiag`](scipy.sparse.bsr_matrix.setdiag.html#scipy.sparse.bsr_matrix.setdiag
    "scipy.sparse.bsr_matrix.setdiag")(values[, k]) | Set diagonal or off-diagonal
    elements of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sign`](scipy.sparse.bsr_matrix.sign.html#scipy.sparse.bsr_matrix.sign "scipy.sparse.bsr_matrix.sign")()
    | Element-wise sign. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sin`](scipy.sparse.bsr_matrix.sin.html#scipy.sparse.bsr_matrix.sin "scipy.sparse.bsr_matrix.sin")()
    | Element-wise sin. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinh`](scipy.sparse.bsr_matrix.sinh.html#scipy.sparse.bsr_matrix.sinh "scipy.sparse.bsr_matrix.sinh")()
    | Element-wise sinh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort_indices`](scipy.sparse.bsr_matrix.sort_indices.html#scipy.sparse.bsr_matrix.sort_indices
    "scipy.sparse.bsr_matrix.sort_indices")() | Sort the indices of this array/matrix
    *in place* |'
  prefs: []
  type: TYPE_TB
- en: '| [`sorted_indices`](scipy.sparse.bsr_matrix.sorted_indices.html#scipy.sparse.bsr_matrix.sorted_indices
    "scipy.sparse.bsr_matrix.sorted_indices")() | Return a copy of this array/matrix
    with sorted indices |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrt`](scipy.sparse.bsr_matrix.sqrt.html#scipy.sparse.bsr_matrix.sqrt "scipy.sparse.bsr_matrix.sqrt")()
    | Element-wise sqrt. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](scipy.sparse.bsr_matrix.sum.html#scipy.sparse.bsr_matrix.sum "scipy.sparse.bsr_matrix.sum")([axis, dtype, out])
    | Sum the array/matrix elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum_duplicates`](scipy.sparse.bsr_matrix.sum_duplicates.html#scipy.sparse.bsr_matrix.sum_duplicates
    "scipy.sparse.bsr_matrix.sum_duplicates")() | Eliminate duplicate array/matrix
    entries by adding them together |'
  prefs: []
  type: TYPE_TB
- en: '| [`tan`](scipy.sparse.bsr_matrix.tan.html#scipy.sparse.bsr_matrix.tan "scipy.sparse.bsr_matrix.tan")()
    | Element-wise tan. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanh`](scipy.sparse.bsr_matrix.tanh.html#scipy.sparse.bsr_matrix.tanh "scipy.sparse.bsr_matrix.tanh")()
    | Element-wise tanh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`toarray`](scipy.sparse.bsr_matrix.toarray.html#scipy.sparse.bsr_matrix.toarray
    "scipy.sparse.bsr_matrix.toarray")([order, out]) | Return a dense ndarray representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobsr`](scipy.sparse.bsr_matrix.tobsr.html#scipy.sparse.bsr_matrix.tobsr
    "scipy.sparse.bsr_matrix.tobsr")([blocksize, copy]) | Convert this array/matrix
    into Block Sparse Row Format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocoo`](scipy.sparse.bsr_matrix.tocoo.html#scipy.sparse.bsr_matrix.tocoo
    "scipy.sparse.bsr_matrix.tocoo")([copy]) | Convert this array/matrix to COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsc`](scipy.sparse.bsr_matrix.tocsc.html#scipy.sparse.bsr_matrix.tocsc
    "scipy.sparse.bsr_matrix.tocsc")([copy]) | Convert this array/matrix to Compressed
    Sparse Column format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsr`](scipy.sparse.bsr_matrix.tocsr.html#scipy.sparse.bsr_matrix.tocsr
    "scipy.sparse.bsr_matrix.tocsr")([copy]) | Convert this array/matrix to Compressed
    Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todense`](scipy.sparse.bsr_matrix.todense.html#scipy.sparse.bsr_matrix.todense
    "scipy.sparse.bsr_matrix.todense")([order, out]) | Return a dense representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todia`](scipy.sparse.bsr_matrix.todia.html#scipy.sparse.bsr_matrix.todia
    "scipy.sparse.bsr_matrix.todia")([copy]) | Convert this array/matrix to sparse
    DIAgonal format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todok`](scipy.sparse.bsr_matrix.todok.html#scipy.sparse.bsr_matrix.todok
    "scipy.sparse.bsr_matrix.todok")([copy]) | Convert this array/matrix to Dictionary
    Of Keys format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolil`](scipy.sparse.bsr_matrix.tolil.html#scipy.sparse.bsr_matrix.tolil
    "scipy.sparse.bsr_matrix.tolil")([copy]) | Convert this array/matrix to List of
    Lists format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](scipy.sparse.bsr_matrix.trace.html#scipy.sparse.bsr_matrix.trace
    "scipy.sparse.bsr_matrix.trace")([offset]) | Returns the sum along diagonals of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](scipy.sparse.bsr_matrix.transpose.html#scipy.sparse.bsr_matrix.transpose
    "scipy.sparse.bsr_matrix.transpose")([axes, copy]) | Reverses the dimensions of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trunc`](scipy.sparse.bsr_matrix.trunc.html#scipy.sparse.bsr_matrix.trunc
    "scipy.sparse.bsr_matrix.trunc")() | Element-wise trunc. |'
  prefs: []
  type: TYPE_TB
- en: '| **__getitem__** |  |'
  prefs: []
  type: TYPE_TB
