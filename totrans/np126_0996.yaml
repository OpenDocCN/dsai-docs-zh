- en: numpy.ptp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ptp.html](https://numpy.org/doc/1.26/reference/generated/numpy.ptp.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Range of values (maximum - minimum) along an axis.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the function comes from the acronym for ‘peak to peak’.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`ptp`](#numpy.ptp "numpy.ptp") preserves the data type of the array. This
    means the return value for an input of signed integers with n bits (e.g. *np.int8*,
    *np.int16*, etc) is also a signed integer with n bits. In that case, peak-to-peak
    values greater than `2**(n-1)-1` will be returned as negative values. An example
    with a work-around is shown below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input values.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which to find the peaks. By default, flatten the array. *axis* may
    be negative, in which case it counts from the last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: If this is a tuple of ints, a reduction is performed on multiple axes, instead
    of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. It must have the same
    shape and buffer length as the expected output, but the type of the output values
    will be cast if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If the default value is passed, then *keepdims* will not be passed through to
    the [`ptp`](#numpy.ptp "numpy.ptp") method of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), however any non-default value will be. If the sub-class’ method
    does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ptp**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The range of a given array - *scalar* if array is one-dimensional or a new array
    holding the result along the given axis
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This example shows that a negative value can be returned when the input is an
    array of signed integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A work-around is to use the *view()* method to view the result as unsigned
    integers with the same bit width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
