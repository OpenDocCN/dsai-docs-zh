- en: Second Quantization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/secondquant.html](https://docs.sympy.org/latest/modules/physics/secondquant.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second quantization operators and states for bosons.
  prefs: []
  type: TYPE_NORMAL
- en: This follow the formulation of Fetter and Welecka, “Quantum Theory of Many-Particle
    Systems.”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bosonic annihilation operator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Apply state to self if self is not symbolic and state is a FockStateKet, else
    multiply self by state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Fermionic annihilation operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Apply state to self if self is not symbolic and state is a FockStateKet, else
    multiply self by state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Always destroy a quasi-particle? (annihilate hole or annihilate particle)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Always create a quasi-particle? (create hole or create particle)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Can we destroy a quasi-particle? (annihilate hole or annihilate particle) If
    so, would that be above or below the fermi surface?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Can we create a quasi-particle? (create hole or create particle) If so, would
    that be above or below the fermi surface?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Stores upper and lower indices in separate Tuple’s.
  prefs: []
  type: TYPE_NORMAL
- en: Each group of indices is assumed to be antisymmetric.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the indices are automatically sorted to a canonical form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns the lower indices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Returns the symbol of the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the upper indices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`AnnihilateBoson`](#sympy.physics.secondquant.AnnihilateBoson "sympy.physics.secondquant.AnnihilateBoson")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`FockStateBosonBra`](#sympy.physics.secondquant.FockStateBosonBra
    "sympy.physics.secondquant.FockStateBosonBra")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`FockStateBosonKet`](#sympy.physics.secondquant.FockStateBosonKet
    "sympy.physics.secondquant.FockStateBosonKet")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`CreateBoson`](#sympy.physics.secondquant.CreateBoson "sympy.physics.secondquant.CreateBoson")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Base class for a basis set of bosonic Fock states.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The Commutator: [A, B] = A*B - B*A'
  prefs: []
  type: TYPE_NORMAL
- en: The arguments are ordered according to .__cmp__()
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the commutator with .doit()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For two second quantization operators the commutator is evaluated immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: But for more complicated expressions, the evaluation is triggered by a call
    to .doit()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Enables the computation of complex expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The Commutator [A,B] is on canonical form if A < B.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Bosonic creation operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Apply state to self if self is not symbolic and state is a FockStateKet, else
    multiply self by state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Fermionic creation operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Apply state to self if self is not symbolic and state is a FockStateKet, else
    multiply self by state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Always destroy a quasi-particle? (annihilate hole or annihilate particle)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Always create a quasi-particle? (create hole or create particle)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Can we destroy a quasi-particle? (annihilate hole or annihilate particle) If
    so, would that be above or below the fermi surface?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Can we create a quasi-particle? (create hole or create particle) If so, would
    that be above or below the fermi surface?
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Hermitian conjugate of creation/annihilation operators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Evaluates the Dagger instance.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The eval() method is called automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`AnnihilateFermion`](#sympy.physics.secondquant.AnnihilateFermion
    "sympy.physics.secondquant.AnnihilateFermion")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`FockStateFermionBra`](#sympy.physics.secondquant.FockStateFermionBra
    "sympy.physics.secondquant.FockStateFermionBra")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`FockStateFermionKet`](#sympy.physics.secondquant.FockStateFermionKet
    "sympy.physics.secondquant.FockStateFermionKet")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`CreateFermion`](#sympy.physics.secondquant.CreateFermion "sympy.physics.secondquant.CreateFermion")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Fixed particle number basis set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index of state in basis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Returns the state that lies at index i of the basis
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Many particle Fock state with a sequence of occupation numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Anywhere you can have a FockState, you can also have S.Zero. All code must check
    for this!
  prefs: []
  type: TYPE_NORMAL
- en: Base class to represent FockStates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Describes a collection of BosonBra particles.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Many particle Fock state with a sequence of occupation numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Occupation numbers can be any integer >= 0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Representation of a bra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`FockStateFermionKet`](#sympy.physics.secondquant.FockStateFermionKet "sympy.physics.secondquant.FockStateFermionKet")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Many-particle Fock state with a sequence of occupied orbits.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Each state can only have one particle, so we choose to store a list of occupied
    orbits rather than a tuple with occupation numbers (zeros and ones).
  prefs: []
  type: TYPE_NORMAL
- en: states below fermi level are holes, and are represented by negative labels in
    the occupation list.
  prefs: []
  type: TYPE_NORMAL
- en: For symbolic state labels, the fermi_level caps the number of allowed hole-
    states.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Representation of a ket.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: An unevaluated inner product between a bra and ket.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Currently this class just reduces things to a product of Kronecker Deltas. In
    the future, we could introduce abstract states like `|a>` and `|b>`, and leave
    the inner product unevaluated as `<a|b>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Returns the bra part of the state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Returns the ket part of the state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The discrete, or Kronecker, delta function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**i** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The first index of the delta function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**j** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The second index of the delta function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A function that takes in two integers \(i\) and \(j\). It returns \(0\) if \(i\)
    and \(j\) are not equal, or it returns \(1\) if \(i\) and \(j\) are equal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'An example with integer indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbolic indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval`](#sympy.physics.secondquant.KroneckerDelta.eval "sympy.physics.secondquant.KroneckerDelta.eval"),
    [`DiracDelta`](../functions/special.html#sympy.functions.special.delta_functions.DiracDelta
    "sympy.functions.special.delta_functions.DiracDelta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R771](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Kronecker_delta](https://en.wikipedia.org/wiki/Kronecker_delta)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Evaluates the discrete delta function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: indirect doctest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if indices are either both above or below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta can be non-zero above fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"), [`is_only_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"), [`is_only_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta can be non-zero below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"), [`is_only_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"), [`is_only_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta is restricted to above fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"), [`is_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"), [`is_only_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta is restricted to below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"), [`is_below_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_below_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"), [`is_only_above_fermi`](#sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi
    "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index which is preferred to substitute in the final expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The index to substitute is the index with less information regarding fermi level.
    If indices contain the same information, ‘a’ is preferred before ‘b’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`preferred_index`](#sympy.physics.secondquant.KroneckerDelta.preferred_index
    "sympy.physics.secondquant.KroneckerDelta.preferred_index")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index which is preferred to keep in the final expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The preferred index is the index with more information regarding fermi level.
    If indices contain the same information, ‘a’ is preferred before ‘b’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`killable_index`](#sympy.physics.secondquant.KroneckerDelta.killable_index
    "sympy.physics.secondquant.KroneckerDelta.killable_index")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: This Object is used to represent normal ordering brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'i.e. {abcd} sometimes written :abcd:'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Applying the function NO(arg) to an argument means that all operators in the
    argument will be assumed to anticommute, and have vanishing contractions. This
    allows an immediate reordering to canonical form upon object creation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to generate a normal ordered equivalent of an expression, you should
    use the function wicks(). This class only indicates that all operators inside
    the brackets anticommute, and have vanishing contractions. Nothing more, nothing
    less.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Either removes the brackets or enables complex computations in its arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Returns a NO() without FermionicOperator at index i.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Return 0 if the rightmost argument of the first argument is a not a q_annihilator,
    else 1 if it is above fermi or -1 if it is below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Return 0 if the leftmost argument of the first argument is a not a q_creator,
    else 1 if it is above fermi or -1 if it is below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Iterates over the annihilation operators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Iterates over the creation operators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Represents the index permutation operator P(ij).
  prefs: []
  type: TYPE_NORMAL
- en: P(ij)*f(i)*g(j) = f(i)*g(j) - f(j)*g(i)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Returns -expr with permuted indices.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: A single state, variable particle number basis set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index of state in basis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: The state of a single basis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Take a SymPy expression with operators and states and apply the operators.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Calculates contraction of Fermionic operators a and b.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'A contraction is non-zero only if a quasi-creator is to the right of a quasi-annihilator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'For general indices a non-zero result restricts the indices to below/above
    the fermi surface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Two creators or two annihilators always vanishes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: We evaluate KroneckerDelta symbols in the expression assuming Einstein summation.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If one index is repeated it is summed over and in effect substituted with the
    other one. If both indices are repeated we substitute according to what is the
    preferred index. this is determined by KroneckerDelta.preferred_index and KroneckerDelta.killable_index.
  prefs: []
  type: TYPE_NORMAL
- en: In case there are no possible substitutions or if a substitution would imply
    a loss of information, nothing is done.
  prefs: []
  type: TYPE_NORMAL
- en: In case an index appears in more than one KroneckerDelta, the resulting substitution
    depends on the order of the factors. Since the ordering is platform dependent,
    the literal expression resulting from this function may be hard to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: The order of preference for these indices according to KroneckerDelta is (a,
    b, i, j, p, q).
  prefs: []
  type: TYPE_NORMAL
- en: 'Trivial cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'More interesting cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here are some cases where nothing is done, because that would imply
    a loss of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Find the representation of an operator in a basis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Performs simplification by introducing PermutationOperators where appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Schematically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[abij] - [abji] - [baij] + [baji] -> P(ab)*P(ij)*[abij]'
  prefs: []
  type: TYPE_NORMAL
- en: permutation_operators is a list of PermutationOperators to consider.
  prefs: []
  type: TYPE_NORMAL
- en: If permutation_operators=[P(ab),P(ij)] we will try to introduce the permutation
    operators P(ij) and P(ab) in the expression. If there are other possible simplifications,
    we ignore them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Collect terms by substitution of dummy variables.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This routine allows simplification of Add expressions containing terms which
    differ only due to dummy variables.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to substitute all dummy variables consistently depending on the
    structure of the term. For each term, we obtain a sequence of all dummy variables,
    where the order is determined by the index range, what factors the index belongs
    to and its position in each factor. See _get_ordered_dummies() for more information
    about the sorting of dummies. The index sequence is then substituted consistently
    in each term.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Since a, b, c and d are equivalent summation indices, the expression can be
    simplified to a single term (for which the dummy indices are still summed over)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Controlling output:'
  prefs: []
  type: TYPE_NORMAL
- en: By default the dummy symbols that are already present in the expression will
    be reused in a different permutation. However, if new_indices=True, new dummies
    will be generated and inserted. The keyword ‘pretty_indices’ can be used to control
    this generation of new symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default the new dummies will be generated on the form i_1, i_2, a_1, etc.
    If you supply a dictionary with key:value pairs in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '{ index_group: string_of_letters }'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The letters will be used as labels for the new dummy symbols. The index_groups
    must be one of ‘above’, ‘below’ or ‘general’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run out of letters, or if there is no keyword for some index_group the
    default dummy generator will be used as a fallback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Returns the normal ordered equivalent of an expression using Wicks Theorem.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the expression is expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: With the keyword ‘keep_only_fully_contracted=True’, only fully contracted terms
    are returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'By request, the result can be simplified in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: – KroneckerDelta functions are evaluated – Dummy variables are substituted consistently
    across terms
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
