- en: Subsets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/subsets.html](https://docs.sympy.org/latest/modules/combinatorics/subsets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represents a basic subset object.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: We generate subsets using essentially two techniques, binary enumeration and
    lexicographic enumeration. The Subset class takes two arguments, the first one
    describes the initial subset to consider and the second describes the superset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Gets the bitlist corresponding to a subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`subset_from_bitlist`](#sympy.combinatorics.subsets.Subset.subset_from_bitlist
    "sympy.combinatorics.subsets.Subset.subset_from_bitlist")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of all possible subsets.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`subset`](#sympy.combinatorics.subsets.Subset.subset "sympy.combinatorics.subsets.Subset.subset"),
    [`superset`](#sympy.combinatorics.subsets.Subset.superset "sympy.combinatorics.subsets.Subset.superset"),
    [`size`](#sympy.combinatorics.subsets.Subset.size "sympy.combinatorics.subsets.Subset.size"),
    [`superset_size`](#sympy.combinatorics.subsets.Subset.superset_size "sympy.combinatorics.subsets.Subset.superset_size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a helper function. It iterates over the binary subsets by `k` steps.
    This variable can be both positive or negative.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_binary`](#sympy.combinatorics.subsets.Subset.next_binary "sympy.combinatorics.subsets.Subset.next_binary"),
    [`prev_binary`](#sympy.combinatorics.subsets.Subset.prev_binary "sympy.combinatorics.subsets.Subset.prev_binary")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Helper function used for prev_gray and next_gray. It performs `k` step overs
    to get the respective Gray codes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_gray`](#sympy.combinatorics.subsets.Subset.next_gray "sympy.combinatorics.subsets.Subset.next_gray"),
    [`prev_gray`](#sympy.combinatorics.subsets.Subset.prev_gray "sympy.combinatorics.subsets.Subset.prev_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Generates the next binary ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prev_binary`](#sympy.combinatorics.subsets.Subset.prev_binary "sympy.combinatorics.subsets.Subset.prev_binary"),
    [`iterate_binary`](#sympy.combinatorics.subsets.Subset.iterate_binary "sympy.combinatorics.subsets.Subset.iterate_binary")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Generates the next Gray code ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_graycode`](#sympy.combinatorics.subsets.Subset.iterate_graycode "sympy.combinatorics.subsets.Subset.iterate_graycode"),
    [`prev_gray`](#sympy.combinatorics.subsets.Subset.prev_gray "sympy.combinatorics.subsets.Subset.prev_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Generates the next lexicographically ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prev_lexicographic`](#sympy.combinatorics.subsets.Subset.prev_lexicographic
    "sympy.combinatorics.subsets.Subset.prev_lexicographic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Generates the previous binary ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_binary`](#sympy.combinatorics.subsets.Subset.next_binary "sympy.combinatorics.subsets.Subset.next_binary"),
    [`iterate_binary`](#sympy.combinatorics.subsets.Subset.iterate_binary "sympy.combinatorics.subsets.Subset.iterate_binary")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Generates the previous Gray code ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_graycode`](#sympy.combinatorics.subsets.Subset.iterate_graycode "sympy.combinatorics.subsets.Subset.iterate_graycode"),
    [`next_gray`](#sympy.combinatorics.subsets.Subset.next_gray "sympy.combinatorics.subsets.Subset.next_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Generates the previous lexicographically ordered subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_lexicographic`](#sympy.combinatorics.subsets.Subset.next_lexicographic
    "sympy.combinatorics.subsets.Subset.next_lexicographic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Computes the binary ordered rank.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_binary`](#sympy.combinatorics.subsets.Subset.iterate_binary "sympy.combinatorics.subsets.Subset.iterate_binary"),
    [`unrank_binary`](#sympy.combinatorics.subsets.Subset.unrank_binary "sympy.combinatorics.subsets.Subset.unrank_binary")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Gray code ranking of the subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_graycode`](#sympy.combinatorics.subsets.Subset.iterate_graycode "sympy.combinatorics.subsets.Subset.iterate_graycode"),
    [`unrank_gray`](#sympy.combinatorics.subsets.Subset.unrank_gray "sympy.combinatorics.subsets.Subset.unrank_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Computes the lexicographic ranking of the subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Gets the size of the subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`subset`](#sympy.combinatorics.subsets.Subset.subset "sympy.combinatorics.subsets.Subset.subset"),
    [`superset`](#sympy.combinatorics.subsets.Subset.superset "sympy.combinatorics.subsets.Subset.superset"),
    [`superset_size`](#sympy.combinatorics.subsets.Subset.superset_size "sympy.combinatorics.subsets.Subset.superset_size"),
    [`cardinality`](#sympy.combinatorics.subsets.Subset.cardinality "sympy.combinatorics.subsets.Subset.cardinality")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Gets the subset represented by the current instance.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`superset`](#sympy.combinatorics.subsets.Subset.superset "sympy.combinatorics.subsets.Subset.superset"),
    [`size`](#sympy.combinatorics.subsets.Subset.size "sympy.combinatorics.subsets.Subset.size"),
    [`superset_size`](#sympy.combinatorics.subsets.Subset.superset_size "sympy.combinatorics.subsets.Subset.superset_size"),
    [`cardinality`](#sympy.combinatorics.subsets.Subset.cardinality "sympy.combinatorics.subsets.Subset.cardinality")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Gets the subset defined by the bitlist.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bitlist_from_subset`](#sympy.combinatorics.subsets.Subset.bitlist_from_subset
    "sympy.combinatorics.subsets.Subset.bitlist_from_subset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return indices of subset in superset in a list; the list is empty if all elements
    of `subset` are not in `superset`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Gets the superset of the subset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`subset`](#sympy.combinatorics.subsets.Subset.subset "sympy.combinatorics.subsets.Subset.subset"),
    [`size`](#sympy.combinatorics.subsets.Subset.size "sympy.combinatorics.subsets.Subset.size"),
    [`superset_size`](#sympy.combinatorics.subsets.Subset.superset_size "sympy.combinatorics.subsets.Subset.superset_size"),
    [`cardinality`](#sympy.combinatorics.subsets.Subset.cardinality "sympy.combinatorics.subsets.Subset.cardinality")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the size of the superset.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`subset`](#sympy.combinatorics.subsets.Subset.subset "sympy.combinatorics.subsets.Subset.subset"),
    [`superset`](#sympy.combinatorics.subsets.Subset.superset "sympy.combinatorics.subsets.Subset.superset"),
    [`size`](#sympy.combinatorics.subsets.Subset.size "sympy.combinatorics.subsets.Subset.size"),
    [`cardinality`](#sympy.combinatorics.subsets.Subset.cardinality "sympy.combinatorics.subsets.Subset.cardinality")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Gets the binary ordered subset of the specified rank.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_binary`](#sympy.combinatorics.subsets.Subset.iterate_binary "sympy.combinatorics.subsets.Subset.iterate_binary"),
    [`rank_binary`](#sympy.combinatorics.subsets.Subset.rank_binary "sympy.combinatorics.subsets.Subset.rank_binary")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Gets the Gray code ordered subset of the specified rank.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`iterate_graycode`](#sympy.combinatorics.subsets.Subset.iterate_graycode "sympy.combinatorics.subsets.Subset.iterate_graycode"),
    [`rank_gray`](#sympy.combinatorics.subsets.Subset.rank_gray "sympy.combinatorics.subsets.Subset.rank_gray")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Finds the subsets of size `k` in lexicographic order.
  prefs: []
  type: TYPE_NORMAL
- en: This uses the itertools generator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Subset`](#sympy.combinatorics.subsets.Subset "sympy.combinatorics.subsets.Subset")'
  prefs: []
  type: TYPE_NORMAL
