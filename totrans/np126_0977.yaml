- en: numpy.sort
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.sort
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.sort.html](https://numpy.org/doc/1.26/reference/generated/numpy.sort.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.sort.html](https://numpy.org/doc/1.26/reference/generated/numpy.sort.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Return a sorted copy of an array.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数组的排序副本。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**a**array_like'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**类似数组'
- en: Array to be sorted.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要排序的数组。
- en: '**axis**int or None, optional'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**axis**int或None，可选'
- en: Axis along which to sort. If None, the array is flattened before sorting. The
    default is -1, which sorts along the last axis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用于排序的轴。如果为None，则在排序之前将数组扁平化。默认值为-1，表示沿着最后一个轴排序。
- en: '**kind**{‘quicksort’, ‘mergesort’, ‘heapsort’, ‘stable’}, optional'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind**{‘quicksort’, ‘mergesort’, ‘heapsort’, ‘stable’}，可选'
- en: Sorting algorithm. The default is ‘quicksort’. Note that both ‘stable’ and ‘mergesort’
    use timsort or radix sort under the covers and, in general, the actual implementation
    will vary with data type. The ‘mergesort’ option is retained for backwards compatibility.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 排序算法。默认为‘quicksort’。请注意，‘stable’和‘mergesort’都在底层使用timsort或基数排序，一般情况下，实际实现会根据数据类型而有所不同。‘mergesort’选项保留供向后兼容使用。
- en: 'Changed in version 1.15.0.: The ‘stable’ option was added.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1.15.0 版更改：增加了‘stable’选项。
- en: '**order**str or list of str, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**str或str列表，可选'
- en: When *a* is an array with fields defined, this argument specifies which fields
    to compare first, second, etc. A single field can be specified as a string, and
    not all fields need be specified, but unspecified fields will still be used, in
    the order in which they come up in the dtype, to break ties.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *a* 是已定义字段的数组时，此参数指定首选比较的字段顺序，第一、第二等。可以将单个字段指定为字符串，不需要指定所有字段，但未指定字段仍将按照它们在dtype中出现的顺序用于打破关系。
- en: 'Returns:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**sorted_array**ndarray'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**sorted_array**ndarray'
- en: Array of the same type and shape as *a*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *a* 类型和形状相同的数组。
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ndarray.sort`](numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndarray.sort`](numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")'
- en: Method to sort an array in-place.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在原位对数组进行排序的方法。
- en: '[`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort")'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort")'
- en: Indirect sort.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 间接排序。
- en: '[`lexsort`](numpy.lexsort.html#numpy.lexsort "numpy.lexsort")'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lexsort`](numpy.lexsort.html#numpy.lexsort "numpy.lexsort")'
- en: Indirect stable sort on multiple keys.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 多个键的间接稳定排序。
- en: '[`searchsorted`](numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`searchsorted`](numpy.searchsorted.html#numpy.searchsorted "numpy.searchsorted")'
- en: Find elements in a sorted array.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在排序数组中查找元素。
- en: '[`partition`](numpy.partition.html#numpy.partition "numpy.partition")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`partition`](numpy.partition.html#numpy.partition "numpy.partition")'
- en: Partial sort.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 部分排序。
- en: Notes
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'The various sorting algorithms are characterized by their average speed, worst
    case performance, work space size, and whether they are stable. A stable sort
    keeps items with the same key in the same relative order. The four algorithms
    implemented in NumPy have the following properties:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 各种排序算法的特点在于它们的平均速度、最坏情况性能、工作空间大小以及它们是否稳定。稳定排序会保持具有相同键的项在相对顺序中保持一致。NumPy中实现的四种算法具有以下属性：
- en: '| kind | speed | worst case | work space | stable |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 速度 | 最坏情况 | 工作空间 | 稳定 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| ‘quicksort’ | 1 | O(n^2) | 0 | no |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| ‘quicksort’ | 1 | O(n^2) | 0 | no |'
- en: '| ‘heapsort’ | 3 | O(n*log(n)) | 0 | no |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| ‘heapsort’ | 3 | O(n*log(n)) | 0 | no |'
- en: '| ‘mergesort’ | 2 | O(n*log(n)) | ~n/2 | yes |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| ‘mergesort’ | 2 | O(n*log(n)) | ~n/2 | yes |'
- en: '| ‘timsort’ | 2 | O(n*log(n)) | ~n/2 | yes |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ‘timsort’ | 2 | O(n*log(n)) | ~n/2 | yes |'
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The datatype determines which of ‘mergesort’ or ‘timsort’ is actually used,
    even if ‘mergesort’ is specified. User selection at a finer scale is not currently
    available.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型确定实际使用的是‘mergesort’还是‘timsort’，即使指定了‘mergesort’。目前不提供更细粒度的用户选择。
- en: All the sort algorithms make temporary copies of the data when sorting along
    any but the last axis. Consequently, sorting along the last axis is faster and
    uses less space than sorting along any other axis.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有排序算法在除了最后一个轴之外的任何轴上排序时都会对数据进行临时复制。因此，沿着最后一个轴排序比沿着其他任何轴排序更快，并且使用的空间更少。
- en: The sort order for complex numbers is lexicographic. If both the real and imaginary
    parts are non-nan then the order is determined by the real parts except when they
    are equal, in which case the order is determined by the imaginary parts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复数，排序顺序是词典序。如果实部和虚部都不是NaN，则顺序由实部确定，除非它们相等，在这种情况下，顺序由虚部确定。
- en: 'Previous to numpy 1.4.0 sorting real and complex arrays containing nan values
    led to undefined behaviour. In numpy versions >= 1.4.0 nan values are sorted to
    the end. The extended sort order is:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在numpy 1.4.0之前，对包含nan值的实数和复数数组进行排序会导致未定义的行为。在numpy版本>= 1.4.0中，nan值被排序到末尾。扩展的排序顺序是：
- en: 'Real: [R, nan]'
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实数：[R, nan]
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Complex: [R + Rj, R + nanj, nan + Rj, nan + nanj]'
  id: totrans-44
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数：[R + Rj, R + nanj, nan + Rj, nan + nanj]
- en: where R is a non-nan real value. Complex values with the same nan placements
    are sorted according to the non-nan part if it exists. Non-nan values are sorted
    as before.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其中R是一个非nan实数值。具有相同nan位置的复数值根据非nan部分（如果存在）进行排序。非nan值按照以前的方式进行排序。
- en: New in version 1.12.0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.12.0中新增。
- en: quicksort has been changed to [introsort](https://en.wikipedia.org/wiki/Introsort).
    When sorting does not make enough progress it switches to [heapsort](https://en.wikipedia.org/wiki/Heapsort).
    This implementation makes quicksort O(n*log(n)) in the worst case.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: quicksort已更改为[introsort](https://en.wikipedia.org/wiki/Introsort)。当排序没有足够的进展时，它会切换到[heapsort](https://en.wikipedia.org/wiki/Heapsort)。这种实现使得quicksort在最坏情况下为O(n*log(n))。
- en: ‘stable’ automatically chooses the best stable sorting algorithm for the data
    type being sorted. It, along with ‘mergesort’ is currently mapped to [timsort](https://en.wikipedia.org/wiki/Timsort)
    or [radix sort](https://en.wikipedia.org/wiki/Radix_sort) depending on the data
    type. API forward compatibility currently limits the ability to select the implementation
    and it is hardwired for the different data types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ‘stable’会自动选择最适合数据类型的稳定排序算法。它，以及‘mergesort’目前映射到[timsort](https://en.wikipedia.org/wiki/Timsort)或[基数排序](https://en.wikipedia.org/wiki/Radix_sort)，具体取决于数据类型。API向前兼容性目前限制了选择实现的能力，并且对于不同的数据类型是硬编码的。
- en: New in version 1.17.0.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.17.0中新增。
- en: Timsort is added for better performance on already or nearly sorted data. On
    random data timsort is almost identical to mergesort. It is now used for stable
    sort while quicksort is still the default sort if none is chosen. For timsort
    details, refer to [CPython listsort.txt](https://github.com/python/cpython/blob/3.7/Objects/listsort.txt).
    ‘mergesort’ and ‘stable’ are mapped to radix sort for integer data types. Radix
    sort is an O(n) sort instead of O(n log n).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Timsort用于在已经或几乎排序的数据上获得更好的性能。在随机数据上，timsort几乎与mergesort相同。现在它用于稳定排序，而quicksort仍然是默认排序（如果没有选择）。有关timsort的详细信息，请参考[CPython
    listsort.txt](https://github.com/python/cpython/blob/3.7/Objects/listsort.txt)。‘mergesort’和‘stable’映射到基数排序以用于整数数据类型。基数排序是O(n)排序，而不是O(n
    log n)。
- en: Changed in version 1.18.0.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.18.0中更改。
- en: NaT now sorts to the end of arrays for consistency with NaN.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: NaT现在为了与NaN一致性而排序到数组末尾。
- en: Examples
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Use the *order* keyword to specify a field to use when sorting a structured
    array:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*order*关键字指定在对结构化数组进行排序时要使用的字段：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Sort by age, then height if ages are equal:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按年龄排序，如果年龄相等，则按身高排序：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
