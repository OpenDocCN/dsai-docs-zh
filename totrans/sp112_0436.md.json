["```py\nscipy.optimize.minimize(fun, x0, args=(), method=None, jac=None, hess=None, hessp=None, bounds=None, constraints=(), tol=None, callback=None, options=None)\n```", "```py\n>>> from scipy.optimize import minimize, rosen, rosen_der \n```", "```py\n>>> x0 = [1.3, 0.7, 0.8, 1.9, 1.2]\n>>> res = minimize(rosen, x0, method='Nelder-Mead', tol=1e-6)\n>>> res.x\narray([ 1.,  1.,  1.,  1.,  1.]) \n```", "```py\n>>> res = minimize(rosen, x0, method='BFGS', jac=rosen_der,\n...                options={'gtol': 1e-6, 'disp': True})\nOptimization terminated successfully.\n Current function value: 0.000000\n Iterations: 26\n Function evaluations: 31\n Gradient evaluations: 31\n>>> res.x\narray([ 1.,  1.,  1.,  1.,  1.])\n>>> print(res.message)\nOptimization terminated successfully.\n>>> res.hess_inv\narray([\n [ 0.00749589,  0.01255155,  0.02396251,  0.04750988,  0.09495377],  # may vary\n [ 0.01255155,  0.02510441,  0.04794055,  0.09502834,  0.18996269],\n [ 0.02396251,  0.04794055,  0.09631614,  0.19092151,  0.38165151],\n [ 0.04750988,  0.09502834,  0.19092151,  0.38341252,  0.7664427 ],\n [ 0.09495377,  0.18996269,  0.38165151,  0.7664427,   1.53713523]\n]) \n```", "```py\n>>> fun = lambda x: (x[0] - 1)**2 + (x[1] - 2.5)**2 \n```", "```py\n>>> cons = ({'type': 'ineq', 'fun': lambda x:  x[0] - 2 * x[1] + 2},\n...         {'type': 'ineq', 'fun': lambda x: -x[0] - 2 * x[1] + 6},\n...         {'type': 'ineq', 'fun': lambda x: -x[0] + 2 * x[1] + 2}) \n```", "```py\n>>> bnds = ((0, None), (0, None)) \n```", "```py\n>>> res = minimize(fun, (2, 0), method='SLSQP', bounds=bnds,\n...                constraints=cons) \n```"]