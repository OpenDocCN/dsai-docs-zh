["```py\nIn [1]: import matplotlib.pyplot as plt\n\nIn [2]: plt.close(\"all\") \n```", "```py\nIn [3]: np.random.seed(123456)\n\nIn [4]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [5]: ts = ts.cumsum()\n\nIn [6]: ts.plot(); \n```", "```py\nIn [7]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [8]: df = df.cumsum()\n\nIn [9]: plt.figure();\n\nIn [10]: df.plot(); \n```", "```py\nIn [11]: df3 = pd.DataFrame(np.random.randn(1000, 2), columns=[\"B\", \"C\"]).cumsum()\n\nIn [12]: df3[\"A\"] = pd.Series(list(range(len(df))))\n\nIn [13]: df3.plot(x=\"A\", y=\"B\"); \n```", "```py\nIn [14]: plt.figure();\n\nIn [15]: df.iloc[5].plot(kind=\"bar\"); \n```", "```py\nIn [16]: df = pd.DataFrame()\n\nIn [17]: df.plot.<TAB>  # noqa: E225, E999\ndf.plot.area     df.plot.barh     df.plot.density  df.plot.hist     df.plot.line     df.plot.scatter\ndf.plot.bar      df.plot.box      df.plot.hexbin   df.plot.kde      df.plot.pie \n```", "```py\nIn [18]: plt.figure();\n\nIn [19]: df.iloc[5].plot.bar();\n\nIn [20]: plt.axhline(0, color=\"k\"); \n```", "```py\nIn [21]: df2 = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [22]: df2.plot.bar(); \n```", "```py\nIn [23]: df2.plot.bar(stacked=True); \n```", "```py\nIn [24]: df2.plot.barh(stacked=True); \n```", "```py\nIn [25]: df4 = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.randn(1000) + 1,\n ....:        \"b\": np.random.randn(1000),\n ....:        \"c\": np.random.randn(1000) - 1,\n ....:    },\n ....:    columns=[\"a\", \"b\", \"c\"],\n ....: )\n ....: \n\nIn [26]: plt.figure();\n\nIn [27]: df4.plot.hist(alpha=0.5); \n```", "```py\nIn [28]: plt.figure();\n\nIn [29]: df4.plot.hist(stacked=True, bins=20); \n```", "```py\nIn [30]: plt.figure();\n\nIn [31]: df4[\"a\"].plot.hist(orientation=\"horizontal\", cumulative=True); \n```", "```py\nIn [32]: plt.figure();\n\nIn [33]: df[\"A\"].diff().hist(); \n```", "```py\nIn [34]: plt.figure();\n\nIn [35]: df.diff().hist(color=\"k\", alpha=0.5, bins=50); \n```", "```py\nIn [36]: data = pd.Series(np.random.randn(1000))\n\nIn [37]: data.hist(by=np.random.randint(0, 4, 1000), figsize=(6, 4)); \n```", "```py\nIn [38]: data = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.choice([\"x\", \"y\", \"z\"], 1000),\n ....:        \"b\": np.random.choice([\"e\", \"f\", \"g\"], 1000),\n ....:        \"c\": np.random.randn(1000),\n ....:        \"d\": np.random.randn(1000) - 1,\n ....:    },\n ....: )\n ....: \n\nIn [39]: data.plot.hist(by=[\"a\", \"b\"], figsize=(10, 5)); \n```", "```py\nIn [40]: df = pd.DataFrame(np.random.rand(10, 5), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\nIn [41]: df.plot.box(); \n```", "```py\nIn [42]: color = {\n ....:    \"boxes\": \"DarkGreen\",\n ....:    \"whiskers\": \"DarkOrange\",\n ....:    \"medians\": \"DarkBlue\",\n ....:    \"caps\": \"Gray\",\n ....: }\n ....: \n\nIn [43]: df.plot.box(color=color, sym=\"r+\"); \n```", "```py\nIn [44]: df.plot.box(vert=False, positions=[1, 4, 5, 6, 8]); \n```", "```py\nIn [45]: df = pd.DataFrame(np.random.rand(10, 5))\n\nIn [46]: plt.figure();\n\nIn [47]: bp = df.boxplot() \n```", "```py\nIn [48]: df = pd.DataFrame(np.random.rand(10, 2), columns=[\"Col1\", \"Col2\"])\n\nIn [49]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [50]: plt.figure();\n\nIn [51]: bp = df.boxplot(by=\"X\") \n```", "```py\nIn [52]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [53]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [54]: df[\"Y\"] = pd.Series([\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\"])\n\nIn [55]: plt.figure();\n\nIn [56]: bp = df.boxplot(column=[\"Col1\", \"Col2\"], by=[\"X\", \"Y\"]) \n```", "```py\nIn [57]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [58]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [59]: plt.figure();\n\nIn [60]: bp = df.plot.box(column=[\"Col1\", \"Col2\"], by=\"X\") \n```", "```py\nIn [61]: np.random.seed(1234)\n\nIn [62]: df_box = pd.DataFrame(np.random.randn(50, 2))\n\nIn [63]: df_box[\"g\"] = np.random.choice([\"A\", \"B\"], size=50)\n\nIn [64]: df_box.loc[df_box[\"g\"] == \"B\", 1] += 3\n\nIn [65]: bp = df_box.boxplot(by=\"g\") \n```", "```py\nIn [66]: bp = df_box.groupby(\"g\").boxplot() \n```", "```py\nIn [67]: df = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [68]: df.plot.area(); \n```", "```py\nIn [69]: df.plot.area(stacked=False); \n```", "```py\nIn [70]: df = pd.DataFrame(np.random.rand(50, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [71]: df[\"species\"] = pd.Categorical(\n ....:    [\"setosa\"] * 20 + [\"versicolor\"] * 20 + [\"virginica\"] * 10\n ....: )\n ....: \n\nIn [72]: df.plot.scatter(x=\"a\", y=\"b\"); \n```", "```py\nIn [73]: ax = df.plot.scatter(x=\"a\", y=\"b\", color=\"DarkBlue\", label=\"Group 1\")\n\nIn [74]: df.plot.scatter(x=\"c\", y=\"d\", color=\"DarkGreen\", label=\"Group 2\", ax=ax); \n```", "```py\nIn [75]: df.plot.scatter(x=\"a\", y=\"b\", c=\"c\", s=50); \n```", "```py\nIn [76]: df.plot.scatter(x=\"a\", y=\"b\", c=\"species\", cmap=\"viridis\", s=50); \n```", "```py\nIn [77]: df.plot.scatter(x=\"a\", y=\"b\", s=df[\"c\"] * 200); \n```", "```py\nIn [78]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [79]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [80]: df.plot.hexbin(x=\"a\", y=\"b\", gridsize=25); \n```", "```py\nIn [81]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [82]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [83]: df[\"z\"] = np.random.uniform(0, 3, 1000)\n\nIn [84]: df.plot.hexbin(x=\"a\", y=\"b\", C=\"z\", reduce_C_function=np.max, gridsize=25); \n```", "```py\nIn [85]: series = pd.Series(3 * np.random.rand(4), index=[\"a\", \"b\", \"c\", \"d\"], name=\"series\")\n\nIn [86]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [87]: df = pd.DataFrame(\n ....:    3 * np.random.rand(4, 2), index=[\"a\", \"b\", \"c\", \"d\"], columns=[\"x\", \"y\"]\n ....: )\n ....: \n\nIn [88]: df.plot.pie(subplots=True, figsize=(8, 4)); \n```", "```py\nIn [89]: series.plot.pie(\n ....:    labels=[\"AA\", \"BB\", \"CC\", \"DD\"],\n ....:    colors=[\"r\", \"g\", \"b\", \"c\"],\n ....:    autopct=\"%.2f\",\n ....:    fontsize=20,\n ....:    figsize=(6, 6),\n ....: );\n ....: \n```", "```py\nIn [90]: series = pd.Series([0.1] * 4, index=[\"a\", \"b\", \"c\", \"d\"], name=\"series2\")\n\nIn [91]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [92]: from pandas.plotting import scatter_matrix\n\nIn [93]: df = pd.DataFrame(np.random.randn(1000, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [94]: scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal=\"kde\"); \n```", "```py\nIn [95]: ser = pd.Series(np.random.randn(1000))\n\nIn [96]: ser.plot.kde(); \n```", "```py\nIn [97]: from pandas.plotting import andrews_curves\n\nIn [98]: data = pd.read_csv(\"data/iris.data\")\n\nIn [99]: plt.figure();\n\nIn [100]: andrews_curves(data, \"Name\"); \n```", "```py\nIn [101]: from pandas.plotting import parallel_coordinates\n\nIn [102]: data = pd.read_csv(\"data/iris.data\")\n\nIn [103]: plt.figure();\n\nIn [104]: parallel_coordinates(data, \"Name\"); \n```", "```py\nIn [105]: from pandas.plotting import lag_plot\n\nIn [106]: plt.figure();\n\nIn [107]: spacing = np.linspace(-99 * np.pi, 99 * np.pi, num=1000)\n\nIn [108]: data = pd.Series(0.1 * np.random.rand(1000) + 0.9 * np.sin(spacing))\n\nIn [109]: lag_plot(data); \n```", "```py\nIn [110]: from pandas.plotting import autocorrelation_plot\n\nIn [111]: plt.figure();\n\nIn [112]: spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)\n\nIn [113]: data = pd.Series(0.7 * np.random.rand(1000) + 0.3 * np.sin(spacing))\n\nIn [114]: autocorrelation_plot(data); \n```", "```py\nIn [115]: from pandas.plotting import bootstrap_plot\n\nIn [116]: data = pd.Series(np.random.rand(1000))\n\nIn [117]: bootstrap_plot(data, size=50, samples=500, color=\"grey\"); \n```", "```py\nIn [118]: from pandas.plotting import radviz\n\nIn [119]: data = pd.read_csv(\"data/iris.data\")\n\nIn [120]: plt.figure();\n\nIn [121]: radviz(data, \"Name\"); \n```", "```py\nIn [122]: plt.figure();\n\nIn [123]: ts.plot(style=\"k--\", label=\"Series\"); \n```", "```py\nIn [124]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [125]: df = df.cumsum()\n\nIn [126]: df.plot(legend=False); \n```", "```py\nIn [127]: df.plot();\n\nIn [128]: df.plot(xlabel=\"new x\", ylabel=\"new y\"); \n```", "```py\nIn [129]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [130]: ts = np.exp(ts.cumsum())\n\nIn [131]: ts.plot(logy=True); \n```", "```py\nIn [132]: df[\"A\"].plot();\n\nIn [133]: df[\"B\"].plot(secondary_y=True, style=\"g\"); \n```", "```py\nIn [134]: plt.figure();\n\nIn [135]: ax = df.plot(secondary_y=[\"A\", \"B\"])\n\nIn [136]: ax.set_ylabel(\"CD scale\");\n\nIn [137]: ax.right_ax.set_ylabel(\"AB scale\"); \n```", "```py\nIn [138]: plt.figure();\n\nIn [139]: df.plot(secondary_y=[\"A\", \"B\"], mark_right=False); \n```", "```py\nIn [140]: plt.figure();\n\nIn [141]: df[\"A\"].plot(); \n```", "```py\nIn [142]: plt.figure();\n\nIn [143]: df[\"A\"].plot(x_compat=True); \n```", "```py\nIn [144]: plt.figure();\n\nIn [145]: with pd.plotting.plot_params.use(\"x_compat\", True):\n .....:    df[\"A\"].plot(color=\"r\")\n .....:    df[\"B\"].plot(color=\"g\")\n .....:    df[\"C\"].plot(color=\"b\")\n .....: \n```", "```py\nIn [146]: df.plot(subplots=True, figsize=(6, 6)); \n```", "```py\nIn [147]: df.plot(subplots=True, layout=(2, 3), figsize=(6, 6), sharex=False); \n```", "```py\nIn [148]: df.plot(subplots=True, layout=(2, -1), figsize=(6, 6), sharex=False); \n```", "```py\nIn [149]: fig, axes = plt.subplots(4, 4, figsize=(9, 9))\n\nIn [150]: plt.subplots_adjust(wspace=0.5, hspace=0.5)\n\nIn [151]: target1 = [axes[0][0], axes[1][1], axes[2][2], axes[3][3]]\n\nIn [152]: target2 = [axes[3][0], axes[2][1], axes[1][2], axes[0][3]]\n\nIn [153]: df.plot(subplots=True, ax=target1, legend=False, sharex=False, sharey=False);\n\nIn [154]: (-df).plot(subplots=True, ax=target2, legend=False, sharex=False, sharey=False); \n```", "```py\nIn [155]: np.random.seed(123456)\n\nIn [156]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [157]: ts = ts.cumsum()\n\nIn [158]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [159]: df = df.cumsum() \n```", "```py\nIn [160]: fig, axes = plt.subplots(nrows=2, ncols=2)\n\nIn [161]: plt.subplots_adjust(wspace=0.2, hspace=0.5)\n\nIn [162]: df[\"A\"].plot(ax=axes[0, 0]);\n\nIn [163]: axes[0, 0].set_title(\"A\");\n\nIn [164]: df[\"B\"].plot(ax=axes[0, 1]);\n\nIn [165]: axes[0, 1].set_title(\"B\");\n\nIn [166]: df[\"C\"].plot(ax=axes[1, 0]);\n\nIn [167]: axes[1, 0].set_title(\"C\");\n\nIn [168]: df[\"D\"].plot(ax=axes[1, 1]);\n\nIn [169]: axes[1, 1].set_title(\"D\"); \n```", "```py\n# Generate the data\nIn [170]: ix3 = pd.MultiIndex.from_arrays(\n .....:    [\n .....:        [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\"],\n .....:        [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"],\n .....:    ],\n .....:    names=[\"letter\", \"word\"],\n .....: )\n .....: \n\nIn [171]: df3 = pd.DataFrame(\n .....:    {\n .....:        \"data1\": [9, 3, 2, 4, 3, 2, 4, 6, 3, 2],\n .....:        \"data2\": [9, 6, 5, 7, 5, 4, 5, 6, 5, 1],\n .....:    },\n .....:    index=ix3,\n .....: )\n .....: \n\n# Group by index labels and take the means and standard deviations\n# for each group\nIn [172]: gp3 = df3.groupby(level=(\"letter\", \"word\"))\n\nIn [173]: means = gp3.mean()\n\nIn [174]: errors = gp3.std()\n\nIn [175]: means\nOut[175]: \n data1     data2\nletter word \na      bar   3.500000  6.000000\n foo   4.666667  6.666667\nb      bar   3.666667  4.000000\n foo   3.000000  4.500000\n\nIn [176]: errors\nOut[176]: \n data1     data2\nletter word \na      bar   0.707107  1.414214\n foo   3.785939  2.081666\nb      bar   2.081666  2.645751\n foo   1.414214  0.707107\n\n# Plot\nIn [177]: fig, ax = plt.subplots()\n\nIn [178]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [179]: mins = gp3.min()\n\nIn [180]: maxs = gp3.max()\n\n# errors should be positive, and defined in the order of lower, upper\nIn [181]: errors = [[means[c] - mins[c], maxs[c] - means[c]] for c in df3.columns]\n\n# Plot\nIn [182]: fig, ax = plt.subplots()\n\nIn [183]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [184]: np.random.seed(123456)\n\nIn [185]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.5))\n\nIn [186]: df = pd.DataFrame(np.random.rand(5, 3), columns=[\"a\", \"b\", \"c\"])\n\nIn [187]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [188]: df.plot(table=True, ax=ax); \n```", "```py\nIn [189]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.75))\n\nIn [190]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [191]: df.plot(table=np.round(df.T, 2), ax=ax); \n```", "```py\nIn [192]: from pandas.plotting import table\n\nIn [193]: fig, ax = plt.subplots(1, 1)\n\nIn [194]: table(ax, np.round(df.describe(), 2), loc=\"upper right\", colWidths=[0.2, 0.2, 0.2]);\n\nIn [195]: df.plot(ax=ax, ylim=(0, 2), legend=None); \n```", "```py\nIn [196]: np.random.seed(123456)\n\nIn [197]: df = pd.DataFrame(np.random.randn(1000, 10), index=ts.index)\n\nIn [198]: df = df.cumsum()\n\nIn [199]: plt.figure();\n\nIn [200]: df.plot(colormap=\"cubehelix\"); \n```", "```py\nIn [201]: from matplotlib import cm\n\nIn [202]: plt.figure();\n\nIn [203]: df.plot(colormap=cm.cubehelix); \n```", "```py\nIn [204]: np.random.seed(123456)\n\nIn [205]: dd = pd.DataFrame(np.random.randn(10, 10)).map(abs)\n\nIn [206]: dd = dd.cumsum()\n\nIn [207]: plt.figure();\n\nIn [208]: dd.plot.bar(colormap=\"Greens\"); \n```", "```py\nIn [209]: plt.figure();\n\nIn [210]: parallel_coordinates(data, \"Name\", colormap=\"gist_rainbow\"); \n```", "```py\nIn [211]: plt.figure();\n\nIn [212]: andrews_curves(data, \"Name\", colormap=\"winter\"); \n```", "```py\nIn [213]: np.random.seed(123456)\n\nIn [214]: price = pd.Series(\n .....:    np.random.randn(150).cumsum(),\n .....:    index=pd.date_range(\"2000-1-1\", periods=150, freq=\"B\"),\n .....: )\n .....: \n\nIn [215]: ma = price.rolling(20).mean()\n\nIn [216]: mstd = price.rolling(20).std()\n\nIn [217]: plt.figure();\n\nIn [218]: plt.plot(price.index, price, \"k\");\n\nIn [219]: plt.plot(ma.index, ma, \"b\");\n\nIn [220]: plt.fill_between(mstd.index, ma - 2 * mstd, ma + 2 * mstd, color=\"b\", alpha=0.2); \n```", "```py\n>>> Series([1, 2, 3]).plot(backend=\"backend.module\") \n```", "```py\n>>> pd.set_option(\"plotting.backend\", \"backend.module\")\n>>> pd.Series([1, 2, 3]).plot() \n```", "```py\n>>> pd.options.plotting.backend = \"backend.module\"\n>>> pd.Series([1, 2, 3]).plot() \n```", "```py\n>>> import backend.module\n>>> backend.module.plot(pd.Series([1, 2, 3])) \n```", "```py\nIn [3]: np.random.seed(123456)\n\nIn [4]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [5]: ts = ts.cumsum()\n\nIn [6]: ts.plot(); \n```", "```py\nIn [7]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [8]: df = df.cumsum()\n\nIn [9]: plt.figure();\n\nIn [10]: df.plot(); \n```", "```py\nIn [11]: df3 = pd.DataFrame(np.random.randn(1000, 2), columns=[\"B\", \"C\"]).cumsum()\n\nIn [12]: df3[\"A\"] = pd.Series(list(range(len(df))))\n\nIn [13]: df3.plot(x=\"A\", y=\"B\"); \n```", "```py\nIn [14]: plt.figure();\n\nIn [15]: df.iloc[5].plot(kind=\"bar\"); \n```", "```py\nIn [16]: df = pd.DataFrame()\n\nIn [17]: df.plot.<TAB>  # noqa: E225, E999\ndf.plot.area     df.plot.barh     df.plot.density  df.plot.hist     df.plot.line     df.plot.scatter\ndf.plot.bar      df.plot.box      df.plot.hexbin   df.plot.kde      df.plot.pie \n```", "```py\nIn [18]: plt.figure();\n\nIn [19]: df.iloc[5].plot.bar();\n\nIn [20]: plt.axhline(0, color=\"k\"); \n```", "```py\nIn [21]: df2 = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [22]: df2.plot.bar(); \n```", "```py\nIn [23]: df2.plot.bar(stacked=True); \n```", "```py\nIn [24]: df2.plot.barh(stacked=True); \n```", "```py\nIn [25]: df4 = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.randn(1000) + 1,\n ....:        \"b\": np.random.randn(1000),\n ....:        \"c\": np.random.randn(1000) - 1,\n ....:    },\n ....:    columns=[\"a\", \"b\", \"c\"],\n ....: )\n ....: \n\nIn [26]: plt.figure();\n\nIn [27]: df4.plot.hist(alpha=0.5); \n```", "```py\nIn [28]: plt.figure();\n\nIn [29]: df4.plot.hist(stacked=True, bins=20); \n```", "```py\nIn [30]: plt.figure();\n\nIn [31]: df4[\"a\"].plot.hist(orientation=\"horizontal\", cumulative=True); \n```", "```py\nIn [32]: plt.figure();\n\nIn [33]: df[\"A\"].diff().hist(); \n```", "```py\nIn [34]: plt.figure();\n\nIn [35]: df.diff().hist(color=\"k\", alpha=0.5, bins=50); \n```", "```py\nIn [36]: data = pd.Series(np.random.randn(1000))\n\nIn [37]: data.hist(by=np.random.randint(0, 4, 1000), figsize=(6, 4)); \n```", "```py\nIn [38]: data = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.choice([\"x\", \"y\", \"z\"], 1000),\n ....:        \"b\": np.random.choice([\"e\", \"f\", \"g\"], 1000),\n ....:        \"c\": np.random.randn(1000),\n ....:        \"d\": np.random.randn(1000) - 1,\n ....:    },\n ....: )\n ....: \n\nIn [39]: data.plot.hist(by=[\"a\", \"b\"], figsize=(10, 5)); \n```", "```py\nIn [40]: df = pd.DataFrame(np.random.rand(10, 5), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\nIn [41]: df.plot.box(); \n```", "```py\nIn [42]: color = {\n ....:    \"boxes\": \"DarkGreen\",\n ....:    \"whiskers\": \"DarkOrange\",\n ....:    \"medians\": \"DarkBlue\",\n ....:    \"caps\": \"Gray\",\n ....: }\n ....: \n\nIn [43]: df.plot.box(color=color, sym=\"r+\"); \n```", "```py\nIn [44]: df.plot.box(vert=False, positions=[1, 4, 5, 6, 8]); \n```", "```py\nIn [45]: df = pd.DataFrame(np.random.rand(10, 5))\n\nIn [46]: plt.figure();\n\nIn [47]: bp = df.boxplot() \n```", "```py\nIn [48]: df = pd.DataFrame(np.random.rand(10, 2), columns=[\"Col1\", \"Col2\"])\n\nIn [49]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [50]: plt.figure();\n\nIn [51]: bp = df.boxplot(by=\"X\") \n```", "```py\nIn [52]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [53]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [54]: df[\"Y\"] = pd.Series([\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\"])\n\nIn [55]: plt.figure();\n\nIn [56]: bp = df.boxplot(column=[\"Col1\", \"Col2\"], by=[\"X\", \"Y\"]) \n```", "```py\nIn [57]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [58]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [59]: plt.figure();\n\nIn [60]: bp = df.plot.box(column=[\"Col1\", \"Col2\"], by=\"X\") \n```", "```py\nIn [61]: np.random.seed(1234)\n\nIn [62]: df_box = pd.DataFrame(np.random.randn(50, 2))\n\nIn [63]: df_box[\"g\"] = np.random.choice([\"A\", \"B\"], size=50)\n\nIn [64]: df_box.loc[df_box[\"g\"] == \"B\", 1] += 3\n\nIn [65]: bp = df_box.boxplot(by=\"g\") \n```", "```py\nIn [66]: bp = df_box.groupby(\"g\").boxplot() \n```", "```py\nIn [67]: df = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [68]: df.plot.area(); \n```", "```py\nIn [69]: df.plot.area(stacked=False); \n```", "```py\nIn [70]: df = pd.DataFrame(np.random.rand(50, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [71]: df[\"species\"] = pd.Categorical(\n ....:    [\"setosa\"] * 20 + [\"versicolor\"] * 20 + [\"virginica\"] * 10\n ....: )\n ....: \n\nIn [72]: df.plot.scatter(x=\"a\", y=\"b\"); \n```", "```py\nIn [73]: ax = df.plot.scatter(x=\"a\", y=\"b\", color=\"DarkBlue\", label=\"Group 1\")\n\nIn [74]: df.plot.scatter(x=\"c\", y=\"d\", color=\"DarkGreen\", label=\"Group 2\", ax=ax); \n```", "```py\nIn [75]: df.plot.scatter(x=\"a\", y=\"b\", c=\"c\", s=50); \n```", "```py\nIn [76]: df.plot.scatter(x=\"a\", y=\"b\", c=\"species\", cmap=\"viridis\", s=50); \n```", "```py\nIn [77]: df.plot.scatter(x=\"a\", y=\"b\", s=df[\"c\"] * 200); \n```", "```py\nIn [78]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [79]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [80]: df.plot.hexbin(x=\"a\", y=\"b\", gridsize=25); \n```", "```py\nIn [81]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [82]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [83]: df[\"z\"] = np.random.uniform(0, 3, 1000)\n\nIn [84]: df.plot.hexbin(x=\"a\", y=\"b\", C=\"z\", reduce_C_function=np.max, gridsize=25); \n```", "```py\nIn [85]: series = pd.Series(3 * np.random.rand(4), index=[\"a\", \"b\", \"c\", \"d\"], name=\"series\")\n\nIn [86]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [87]: df = pd.DataFrame(\n ....:    3 * np.random.rand(4, 2), index=[\"a\", \"b\", \"c\", \"d\"], columns=[\"x\", \"y\"]\n ....: )\n ....: \n\nIn [88]: df.plot.pie(subplots=True, figsize=(8, 4)); \n```", "```py\nIn [89]: series.plot.pie(\n ....:    labels=[\"AA\", \"BB\", \"CC\", \"DD\"],\n ....:    colors=[\"r\", \"g\", \"b\", \"c\"],\n ....:    autopct=\"%.2f\",\n ....:    fontsize=20,\n ....:    figsize=(6, 6),\n ....: );\n ....: \n```", "```py\nIn [90]: series = pd.Series([0.1] * 4, index=[\"a\", \"b\", \"c\", \"d\"], name=\"series2\")\n\nIn [91]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [18]: plt.figure();\n\nIn [19]: df.iloc[5].plot.bar();\n\nIn [20]: plt.axhline(0, color=\"k\"); \n```", "```py\nIn [21]: df2 = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [22]: df2.plot.bar(); \n```", "```py\nIn [23]: df2.plot.bar(stacked=True); \n```", "```py\nIn [24]: df2.plot.barh(stacked=True); \n```", "```py\nIn [25]: df4 = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.randn(1000) + 1,\n ....:        \"b\": np.random.randn(1000),\n ....:        \"c\": np.random.randn(1000) - 1,\n ....:    },\n ....:    columns=[\"a\", \"b\", \"c\"],\n ....: )\n ....: \n\nIn [26]: plt.figure();\n\nIn [27]: df4.plot.hist(alpha=0.5); \n```", "```py\nIn [28]: plt.figure();\n\nIn [29]: df4.plot.hist(stacked=True, bins=20); \n```", "```py\nIn [30]: plt.figure();\n\nIn [31]: df4[\"a\"].plot.hist(orientation=\"horizontal\", cumulative=True); \n```", "```py\nIn [32]: plt.figure();\n\nIn [33]: df[\"A\"].diff().hist(); \n```", "```py\nIn [34]: plt.figure();\n\nIn [35]: df.diff().hist(color=\"k\", alpha=0.5, bins=50); \n```", "```py\nIn [36]: data = pd.Series(np.random.randn(1000))\n\nIn [37]: data.hist(by=np.random.randint(0, 4, 1000), figsize=(6, 4)); \n```", "```py\nIn [38]: data = pd.DataFrame(\n ....:    {\n ....:        \"a\": np.random.choice([\"x\", \"y\", \"z\"], 1000),\n ....:        \"b\": np.random.choice([\"e\", \"f\", \"g\"], 1000),\n ....:        \"c\": np.random.randn(1000),\n ....:        \"d\": np.random.randn(1000) - 1,\n ....:    },\n ....: )\n ....: \n\nIn [39]: data.plot.hist(by=[\"a\", \"b\"], figsize=(10, 5)); \n```", "```py\nIn [40]: df = pd.DataFrame(np.random.rand(10, 5), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n\nIn [41]: df.plot.box(); \n```", "```py\nIn [42]: color = {\n ....:    \"boxes\": \"DarkGreen\",\n ....:    \"whiskers\": \"DarkOrange\",\n ....:    \"medians\": \"DarkBlue\",\n ....:    \"caps\": \"Gray\",\n ....: }\n ....: \n\nIn [43]: df.plot.box(color=color, sym=\"r+\"); \n```", "```py\nIn [44]: df.plot.box(vert=False, positions=[1, 4, 5, 6, 8]); \n```", "```py\nIn [45]: df = pd.DataFrame(np.random.rand(10, 5))\n\nIn [46]: plt.figure();\n\nIn [47]: bp = df.boxplot() \n```", "```py\nIn [48]: df = pd.DataFrame(np.random.rand(10, 2), columns=[\"Col1\", \"Col2\"])\n\nIn [49]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [50]: plt.figure();\n\nIn [51]: bp = df.boxplot(by=\"X\") \n```", "```py\nIn [52]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [53]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [54]: df[\"Y\"] = pd.Series([\"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\", \"A\", \"B\"])\n\nIn [55]: plt.figure();\n\nIn [56]: bp = df.boxplot(column=[\"Col1\", \"Col2\"], by=[\"X\", \"Y\"]) \n```", "```py\nIn [57]: df = pd.DataFrame(np.random.rand(10, 3), columns=[\"Col1\", \"Col2\", \"Col3\"])\n\nIn [58]: df[\"X\"] = pd.Series([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\"])\n\nIn [59]: plt.figure();\n\nIn [60]: bp = df.plot.box(column=[\"Col1\", \"Col2\"], by=\"X\") \n```", "```py\nIn [61]: np.random.seed(1234)\n\nIn [62]: df_box = pd.DataFrame(np.random.randn(50, 2))\n\nIn [63]: df_box[\"g\"] = np.random.choice([\"A\", \"B\"], size=50)\n\nIn [64]: df_box.loc[df_box[\"g\"] == \"B\", 1] += 3\n\nIn [65]: bp = df_box.boxplot(by=\"g\") \n```", "```py\nIn [66]: bp = df_box.groupby(\"g\").boxplot() \n```", "```py\nIn [67]: df = pd.DataFrame(np.random.rand(10, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [68]: df.plot.area(); \n```", "```py\nIn [69]: df.plot.area(stacked=False); \n```", "```py\nIn [70]: df = pd.DataFrame(np.random.rand(50, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [71]: df[\"species\"] = pd.Categorical(\n ....:    [\"setosa\"] * 20 + [\"versicolor\"] * 20 + [\"virginica\"] * 10\n ....: )\n ....: \n\nIn [72]: df.plot.scatter(x=\"a\", y=\"b\"); \n```", "```py\nIn [73]: ax = df.plot.scatter(x=\"a\", y=\"b\", color=\"DarkBlue\", label=\"Group 1\")\n\nIn [74]: df.plot.scatter(x=\"c\", y=\"d\", color=\"DarkGreen\", label=\"Group 2\", ax=ax); \n```", "```py\nIn [75]: df.plot.scatter(x=\"a\", y=\"b\", c=\"c\", s=50); \n```", "```py\nIn [76]: df.plot.scatter(x=\"a\", y=\"b\", c=\"species\", cmap=\"viridis\", s=50); \n```", "```py\nIn [77]: df.plot.scatter(x=\"a\", y=\"b\", s=df[\"c\"] * 200); \n```", "```py\nIn [78]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [79]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [80]: df.plot.hexbin(x=\"a\", y=\"b\", gridsize=25); \n```", "```py\nIn [81]: df = pd.DataFrame(np.random.randn(1000, 2), columns=[\"a\", \"b\"])\n\nIn [82]: df[\"b\"] = df[\"b\"] + np.arange(1000)\n\nIn [83]: df[\"z\"] = np.random.uniform(0, 3, 1000)\n\nIn [84]: df.plot.hexbin(x=\"a\", y=\"b\", C=\"z\", reduce_C_function=np.max, gridsize=25); \n```", "```py\nIn [85]: series = pd.Series(3 * np.random.rand(4), index=[\"a\", \"b\", \"c\", \"d\"], name=\"series\")\n\nIn [86]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [87]: df = pd.DataFrame(\n ....:    3 * np.random.rand(4, 2), index=[\"a\", \"b\", \"c\", \"d\"], columns=[\"x\", \"y\"]\n ....: )\n ....: \n\nIn [88]: df.plot.pie(subplots=True, figsize=(8, 4)); \n```", "```py\nIn [89]: series.plot.pie(\n ....:    labels=[\"AA\", \"BB\", \"CC\", \"DD\"],\n ....:    colors=[\"r\", \"g\", \"b\", \"c\"],\n ....:    autopct=\"%.2f\",\n ....:    fontsize=20,\n ....:    figsize=(6, 6),\n ....: );\n ....: \n```", "```py\nIn [90]: series = pd.Series([0.1] * 4, index=[\"a\", \"b\", \"c\", \"d\"], name=\"series2\")\n\nIn [91]: series.plot.pie(figsize=(6, 6)); \n```", "```py\nIn [92]: from pandas.plotting import scatter_matrix\n\nIn [93]: df = pd.DataFrame(np.random.randn(1000, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [94]: scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal=\"kde\"); \n```", "```py\nIn [95]: ser = pd.Series(np.random.randn(1000))\n\nIn [96]: ser.plot.kde(); \n```", "```py\nIn [97]: from pandas.plotting import andrews_curves\n\nIn [98]: data = pd.read_csv(\"data/iris.data\")\n\nIn [99]: plt.figure();\n\nIn [100]: andrews_curves(data, \"Name\"); \n```", "```py\nIn [101]: from pandas.plotting import parallel_coordinates\n\nIn [102]: data = pd.read_csv(\"data/iris.data\")\n\nIn [103]: plt.figure();\n\nIn [104]: parallel_coordinates(data, \"Name\"); \n```", "```py\nIn [105]: from pandas.plotting import lag_plot\n\nIn [106]: plt.figure();\n\nIn [107]: spacing = np.linspace(-99 * np.pi, 99 * np.pi, num=1000)\n\nIn [108]: data = pd.Series(0.1 * np.random.rand(1000) + 0.9 * np.sin(spacing))\n\nIn [109]: lag_plot(data); \n```", "```py\nIn [110]: from pandas.plotting import autocorrelation_plot\n\nIn [111]: plt.figure();\n\nIn [112]: spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)\n\nIn [113]: data = pd.Series(0.7 * np.random.rand(1000) + 0.3 * np.sin(spacing))\n\nIn [114]: autocorrelation_plot(data); \n```", "```py\nIn [115]: from pandas.plotting import bootstrap_plot\n\nIn [116]: data = pd.Series(np.random.rand(1000))\n\nIn [117]: bootstrap_plot(data, size=50, samples=500, color=\"grey\"); \n```", "```py\nIn [118]: from pandas.plotting import radviz\n\nIn [119]: data = pd.read_csv(\"data/iris.data\")\n\nIn [120]: plt.figure();\n\nIn [121]: radviz(data, \"Name\"); \n```", "```py\nIn [92]: from pandas.plotting import scatter_matrix\n\nIn [93]: df = pd.DataFrame(np.random.randn(1000, 4), columns=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [94]: scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal=\"kde\"); \n```", "```py\nIn [95]: ser = pd.Series(np.random.randn(1000))\n\nIn [96]: ser.plot.kde(); \n```", "```py\nIn [97]: from pandas.plotting import andrews_curves\n\nIn [98]: data = pd.read_csv(\"data/iris.data\")\n\nIn [99]: plt.figure();\n\nIn [100]: andrews_curves(data, \"Name\"); \n```", "```py\nIn [101]: from pandas.plotting import parallel_coordinates\n\nIn [102]: data = pd.read_csv(\"data/iris.data\")\n\nIn [103]: plt.figure();\n\nIn [104]: parallel_coordinates(data, \"Name\"); \n```", "```py\nIn [105]: from pandas.plotting import lag_plot\n\nIn [106]: plt.figure();\n\nIn [107]: spacing = np.linspace(-99 * np.pi, 99 * np.pi, num=1000)\n\nIn [108]: data = pd.Series(0.1 * np.random.rand(1000) + 0.9 * np.sin(spacing))\n\nIn [109]: lag_plot(data); \n```", "```py\nIn [110]: from pandas.plotting import autocorrelation_plot\n\nIn [111]: plt.figure();\n\nIn [112]: spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)\n\nIn [113]: data = pd.Series(0.7 * np.random.rand(1000) + 0.3 * np.sin(spacing))\n\nIn [114]: autocorrelation_plot(data); \n```", "```py\nIn [115]: from pandas.plotting import bootstrap_plot\n\nIn [116]: data = pd.Series(np.random.rand(1000))\n\nIn [117]: bootstrap_plot(data, size=50, samples=500, color=\"grey\"); \n```", "```py\nIn [118]: from pandas.plotting import radviz\n\nIn [119]: data = pd.read_csv(\"data/iris.data\")\n\nIn [120]: plt.figure();\n\nIn [121]: radviz(data, \"Name\"); \n```", "```py\nIn [122]: plt.figure();\n\nIn [123]: ts.plot(style=\"k--\", label=\"Series\"); \n```", "```py\nIn [124]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [125]: df = df.cumsum()\n\nIn [126]: df.plot(legend=False); \n```", "```py\nIn [127]: df.plot();\n\nIn [128]: df.plot(xlabel=\"new x\", ylabel=\"new y\"); \n```", "```py\nIn [129]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [130]: ts = np.exp(ts.cumsum())\n\nIn [131]: ts.plot(logy=True); \n```", "```py\nIn [132]: df[\"A\"].plot();\n\nIn [133]: df[\"B\"].plot(secondary_y=True, style=\"g\"); \n```", "```py\nIn [134]: plt.figure();\n\nIn [135]: ax = df.plot(secondary_y=[\"A\", \"B\"])\n\nIn [136]: ax.set_ylabel(\"CD scale\");\n\nIn [137]: ax.right_ax.set_ylabel(\"AB scale\"); \n```", "```py\nIn [138]: plt.figure();\n\nIn [139]: df.plot(secondary_y=[\"A\", \"B\"], mark_right=False); \n```", "```py\nIn [140]: plt.figure();\n\nIn [141]: df[\"A\"].plot(); \n```", "```py\nIn [142]: plt.figure();\n\nIn [143]: df[\"A\"].plot(x_compat=True); \n```", "```py\nIn [144]: plt.figure();\n\nIn [145]: with pd.plotting.plot_params.use(\"x_compat\", True):\n .....:    df[\"A\"].plot(color=\"r\")\n .....:    df[\"B\"].plot(color=\"g\")\n .....:    df[\"C\"].plot(color=\"b\")\n .....: \n```", "```py\nIn [146]: df.plot(subplots=True, figsize=(6, 6)); \n```", "```py\nIn [147]: df.plot(subplots=True, layout=(2, 3), figsize=(6, 6), sharex=False); \n```", "```py\nIn [148]: df.plot(subplots=True, layout=(2, -1), figsize=(6, 6), sharex=False); \n```", "```py\nIn [149]: fig, axes = plt.subplots(4, 4, figsize=(9, 9))\n\nIn [150]: plt.subplots_adjust(wspace=0.5, hspace=0.5)\n\nIn [151]: target1 = [axes[0][0], axes[1][1], axes[2][2], axes[3][3]]\n\nIn [152]: target2 = [axes[3][0], axes[2][1], axes[1][2], axes[0][3]]\n\nIn [153]: df.plot(subplots=True, ax=target1, legend=False, sharex=False, sharey=False);\n\nIn [154]: (-df).plot(subplots=True, ax=target2, legend=False, sharex=False, sharey=False); \n```", "```py\nIn [155]: np.random.seed(123456)\n\nIn [156]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [157]: ts = ts.cumsum()\n\nIn [158]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [159]: df = df.cumsum() \n```", "```py\nIn [160]: fig, axes = plt.subplots(nrows=2, ncols=2)\n\nIn [161]: plt.subplots_adjust(wspace=0.2, hspace=0.5)\n\nIn [162]: df[\"A\"].plot(ax=axes[0, 0]);\n\nIn [163]: axes[0, 0].set_title(\"A\");\n\nIn [164]: df[\"B\"].plot(ax=axes[0, 1]);\n\nIn [165]: axes[0, 1].set_title(\"B\");\n\nIn [166]: df[\"C\"].plot(ax=axes[1, 0]);\n\nIn [167]: axes[1, 0].set_title(\"C\");\n\nIn [168]: df[\"D\"].plot(ax=axes[1, 1]);\n\nIn [169]: axes[1, 1].set_title(\"D\"); \n```", "```py\n# Generate the data\nIn [170]: ix3 = pd.MultiIndex.from_arrays(\n .....:    [\n .....:        [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\"],\n .....:        [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"],\n .....:    ],\n .....:    names=[\"letter\", \"word\"],\n .....: )\n .....: \n\nIn [171]: df3 = pd.DataFrame(\n .....:    {\n .....:        \"data1\": [9, 3, 2, 4, 3, 2, 4, 6, 3, 2],\n .....:        \"data2\": [9, 6, 5, 7, 5, 4, 5, 6, 5, 1],\n .....:    },\n .....:    index=ix3,\n .....: )\n .....: \n\n# Group by index labels and take the means and standard deviations\n# for each group\nIn [172]: gp3 = df3.groupby(level=(\"letter\", \"word\"))\n\nIn [173]: means = gp3.mean()\n\nIn [174]: errors = gp3.std()\n\nIn [175]: means\nOut[175]: \n data1     data2\nletter word \na      bar   3.500000  6.000000\n foo   4.666667  6.666667\nb      bar   3.666667  4.000000\n foo   3.000000  4.500000\n\nIn [176]: errors\nOut[176]: \n data1     data2\nletter word \na      bar   0.707107  1.414214\n foo   3.785939  2.081666\nb      bar   2.081666  2.645751\n foo   1.414214  0.707107\n\n# Plot\nIn [177]: fig, ax = plt.subplots()\n\nIn [178]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [179]: mins = gp3.min()\n\nIn [180]: maxs = gp3.max()\n\n# errors should be positive, and defined in the order of lower, upper\nIn [181]: errors = [[means[c] - mins[c], maxs[c] - means[c]] for c in df3.columns]\n\n# Plot\nIn [182]: fig, ax = plt.subplots()\n\nIn [183]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [184]: np.random.seed(123456)\n\nIn [185]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.5))\n\nIn [186]: df = pd.DataFrame(np.random.rand(5, 3), columns=[\"a\", \"b\", \"c\"])\n\nIn [187]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [188]: df.plot(table=True, ax=ax); \n```", "```py\nIn [189]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.75))\n\nIn [190]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [191]: df.plot(table=np.round(df.T, 2), ax=ax); \n```", "```py\nIn [192]: from pandas.plotting import table\n\nIn [193]: fig, ax = plt.subplots(1, 1)\n\nIn [194]: table(ax, np.round(df.describe(), 2), loc=\"upper right\", colWidths=[0.2, 0.2, 0.2]);\n\nIn [195]: df.plot(ax=ax, ylim=(0, 2), legend=None); \n```", "```py\nIn [196]: np.random.seed(123456)\n\nIn [197]: df = pd.DataFrame(np.random.randn(1000, 10), index=ts.index)\n\nIn [198]: df = df.cumsum()\n\nIn [199]: plt.figure();\n\nIn [200]: df.plot(colormap=\"cubehelix\"); \n```", "```py\nIn [201]: from matplotlib import cm\n\nIn [202]: plt.figure();\n\nIn [203]: df.plot(colormap=cm.cubehelix); \n```", "```py\nIn [204]: np.random.seed(123456)\n\nIn [205]: dd = pd.DataFrame(np.random.randn(10, 10)).map(abs)\n\nIn [206]: dd = dd.cumsum()\n\nIn [207]: plt.figure();\n\nIn [208]: dd.plot.bar(colormap=\"Greens\"); \n```", "```py\nIn [209]: plt.figure();\n\nIn [210]: parallel_coordinates(data, \"Name\", colormap=\"gist_rainbow\"); \n```", "```py\nIn [211]: plt.figure();\n\nIn [212]: andrews_curves(data, \"Name\", colormap=\"winter\"); \n```", "```py\nIn [122]: plt.figure();\n\nIn [123]: ts.plot(style=\"k--\", label=\"Series\"); \n```", "```py\nIn [124]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [125]: df = df.cumsum()\n\nIn [126]: df.plot(legend=False); \n```", "```py\nIn [127]: df.plot();\n\nIn [128]: df.plot(xlabel=\"new x\", ylabel=\"new y\"); \n```", "```py\nIn [129]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [130]: ts = np.exp(ts.cumsum())\n\nIn [131]: ts.plot(logy=True); \n```", "```py\nIn [132]: df[\"A\"].plot();\n\nIn [133]: df[\"B\"].plot(secondary_y=True, style=\"g\"); \n```", "```py\nIn [134]: plt.figure();\n\nIn [135]: ax = df.plot(secondary_y=[\"A\", \"B\"])\n\nIn [136]: ax.set_ylabel(\"CD scale\");\n\nIn [137]: ax.right_ax.set_ylabel(\"AB scale\"); \n```", "```py\nIn [138]: plt.figure();\n\nIn [139]: df.plot(secondary_y=[\"A\", \"B\"], mark_right=False); \n```", "```py\nIn [140]: plt.figure();\n\nIn [141]: df[\"A\"].plot(); \n```", "```py\nIn [142]: plt.figure();\n\nIn [143]: df[\"A\"].plot(x_compat=True); \n```", "```py\nIn [144]: plt.figure();\n\nIn [145]: with pd.plotting.plot_params.use(\"x_compat\", True):\n .....:    df[\"A\"].plot(color=\"r\")\n .....:    df[\"B\"].plot(color=\"g\")\n .....:    df[\"C\"].plot(color=\"b\")\n .....: \n```", "```py\nIn [146]: df.plot(subplots=True, figsize=(6, 6)); \n```", "```py\nIn [147]: df.plot(subplots=True, layout=(2, 3), figsize=(6, 6), sharex=False); \n```", "```py\nIn [148]: df.plot(subplots=True, layout=(2, -1), figsize=(6, 6), sharex=False); \n```", "```py\nIn [149]: fig, axes = plt.subplots(4, 4, figsize=(9, 9))\n\nIn [150]: plt.subplots_adjust(wspace=0.5, hspace=0.5)\n\nIn [151]: target1 = [axes[0][0], axes[1][1], axes[2][2], axes[3][3]]\n\nIn [152]: target2 = [axes[3][0], axes[2][1], axes[1][2], axes[0][3]]\n\nIn [153]: df.plot(subplots=True, ax=target1, legend=False, sharex=False, sharey=False);\n\nIn [154]: (-df).plot(subplots=True, ax=target2, legend=False, sharex=False, sharey=False); \n```", "```py\nIn [155]: np.random.seed(123456)\n\nIn [156]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [157]: ts = ts.cumsum()\n\nIn [158]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list(\"ABCD\"))\n\nIn [159]: df = df.cumsum() \n```", "```py\nIn [160]: fig, axes = plt.subplots(nrows=2, ncols=2)\n\nIn [161]: plt.subplots_adjust(wspace=0.2, hspace=0.5)\n\nIn [162]: df[\"A\"].plot(ax=axes[0, 0]);\n\nIn [163]: axes[0, 0].set_title(\"A\");\n\nIn [164]: df[\"B\"].plot(ax=axes[0, 1]);\n\nIn [165]: axes[0, 1].set_title(\"B\");\n\nIn [166]: df[\"C\"].plot(ax=axes[1, 0]);\n\nIn [167]: axes[1, 0].set_title(\"C\");\n\nIn [168]: df[\"D\"].plot(ax=axes[1, 1]);\n\nIn [169]: axes[1, 1].set_title(\"D\"); \n```", "```py\n# Generate the data\nIn [170]: ix3 = pd.MultiIndex.from_arrays(\n .....:    [\n .....:        [\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\"],\n .....:        [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"],\n .....:    ],\n .....:    names=[\"letter\", \"word\"],\n .....: )\n .....: \n\nIn [171]: df3 = pd.DataFrame(\n .....:    {\n .....:        \"data1\": [9, 3, 2, 4, 3, 2, 4, 6, 3, 2],\n .....:        \"data2\": [9, 6, 5, 7, 5, 4, 5, 6, 5, 1],\n .....:    },\n .....:    index=ix3,\n .....: )\n .....: \n\n# Group by index labels and take the means and standard deviations\n# for each group\nIn [172]: gp3 = df3.groupby(level=(\"letter\", \"word\"))\n\nIn [173]: means = gp3.mean()\n\nIn [174]: errors = gp3.std()\n\nIn [175]: means\nOut[175]: \n data1     data2\nletter word \na      bar   3.500000  6.000000\n foo   4.666667  6.666667\nb      bar   3.666667  4.000000\n foo   3.000000  4.500000\n\nIn [176]: errors\nOut[176]: \n data1     data2\nletter word \na      bar   0.707107  1.414214\n foo   3.785939  2.081666\nb      bar   2.081666  2.645751\n foo   1.414214  0.707107\n\n# Plot\nIn [177]: fig, ax = plt.subplots()\n\nIn [178]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [179]: mins = gp3.min()\n\nIn [180]: maxs = gp3.max()\n\n# errors should be positive, and defined in the order of lower, upper\nIn [181]: errors = [[means[c] - mins[c], maxs[c] - means[c]] for c in df3.columns]\n\n# Plot\nIn [182]: fig, ax = plt.subplots()\n\nIn [183]: means.plot.bar(yerr=errors, ax=ax, capsize=4, rot=0); \n```", "```py\nIn [184]: np.random.seed(123456)\n\nIn [185]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.5))\n\nIn [186]: df = pd.DataFrame(np.random.rand(5, 3), columns=[\"a\", \"b\", \"c\"])\n\nIn [187]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [188]: df.plot(table=True, ax=ax); \n```", "```py\nIn [189]: fig, ax = plt.subplots(1, 1, figsize=(7, 6.75))\n\nIn [190]: ax.xaxis.tick_top()  # Display x-axis ticks on top.\n\nIn [191]: df.plot(table=np.round(df.T, 2), ax=ax); \n```", "```py\nIn [192]: from pandas.plotting import table\n\nIn [193]: fig, ax = plt.subplots(1, 1)\n\nIn [194]: table(ax, np.round(df.describe(), 2), loc=\"upper right\", colWidths=[0.2, 0.2, 0.2]);\n\nIn [195]: df.plot(ax=ax, ylim=(0, 2), legend=None); \n```", "```py\nIn [196]: np.random.seed(123456)\n\nIn [197]: df = pd.DataFrame(np.random.randn(1000, 10), index=ts.index)\n\nIn [198]: df = df.cumsum()\n\nIn [199]: plt.figure();\n\nIn [200]: df.plot(colormap=\"cubehelix\"); \n```", "```py\nIn [201]: from matplotlib import cm\n\nIn [202]: plt.figure();\n\nIn [203]: df.plot(colormap=cm.cubehelix); \n```", "```py\nIn [204]: np.random.seed(123456)\n\nIn [205]: dd = pd.DataFrame(np.random.randn(10, 10)).map(abs)\n\nIn [206]: dd = dd.cumsum()\n\nIn [207]: plt.figure();\n\nIn [208]: dd.plot.bar(colormap=\"Greens\"); \n```", "```py\nIn [209]: plt.figure();\n\nIn [210]: parallel_coordinates(data, \"Name\", colormap=\"gist_rainbow\"); \n```", "```py\nIn [211]: plt.figure();\n\nIn [212]: andrews_curves(data, \"Name\", colormap=\"winter\"); \n```", "```py\nIn [213]: np.random.seed(123456)\n\nIn [214]: price = pd.Series(\n .....:    np.random.randn(150).cumsum(),\n .....:    index=pd.date_range(\"2000-1-1\", periods=150, freq=\"B\"),\n .....: )\n .....: \n\nIn [215]: ma = price.rolling(20).mean()\n\nIn [216]: mstd = price.rolling(20).std()\n\nIn [217]: plt.figure();\n\nIn [218]: plt.plot(price.index, price, \"k\");\n\nIn [219]: plt.plot(ma.index, ma, \"b\");\n\nIn [220]: plt.fill_between(mstd.index, ma - 2 * mstd, ma + 2 * mstd, color=\"b\", alpha=0.2); \n```", "```py\n>>> Series([1, 2, 3]).plot(backend=\"backend.module\") \n```", "```py\n>>> pd.set_option(\"plotting.backend\", \"backend.module\")\n>>> pd.Series([1, 2, 3]).plot() \n```", "```py\n>>> pd.options.plotting.backend = \"backend.module\"\n>>> pd.Series([1, 2, 3]).plot() \n```", "```py\n>>> import backend.module\n>>> backend.module.plot(pd.Series([1, 2, 3])) \n```"]