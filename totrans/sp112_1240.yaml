- en: scipy.stats.hypergeom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.hypergeom.html#scipy.stats.hypergeom](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.hypergeom.html#scipy.stats.hypergeom)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A hypergeometric discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: The hypergeometric distribution models drawing objects from a bin. *M* is the
    total number of objects, *n* is total number of Type I objects. The random variate
    represents the number of Type I objects in *N* drawn without replacement from
    the total population.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`hypergeom`](#scipy.stats.hypergeom "scipy.stats.hypergeom")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nhypergeom`](scipy.stats.nhypergeom.html#scipy.stats.nhypergeom "scipy.stats.nhypergeom"),
    [`binom`](scipy.stats.binom.html#scipy.stats.binom "scipy.stats.binom"), [`nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The symbols used to denote the shape parameters (*M*, *n*, and *N*) are not
    universally accepted. See the Examples for a clarification of the definitions
    used here.
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function is defined as,
  prefs: []
  type: TYPE_NORMAL
- en: \[p(k, M, n, N) = \frac{\binom{n}{k} \binom{M - n}{N - k}} {\binom{M}{N}}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(k \in [\max(0, N - M + n), \min(n, N)]\), where the binomial coefficients
    are defined as,
  prefs: []
  type: TYPE_NORMAL
- en: \[\binom{n}{k} \equiv \frac{n!}{k! (n - k)!}.\]
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `hypergeom.pmf(k, M,
    n, N, loc)` is identically equivalent to `hypergeom.pmf(k - loc, M, n, N)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we have a collection of 20 animals, of which 7 are dogs. Then if we
    want to know the probability of finding a given number of dogs if we choose at
    random 12 of the 20 animals, we can initialize a frozen distribution and plot
    the probability mass function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-hypergeom-1_00_00.png](../Images/8cd2f1013fa2672b92aef5e7e3069339.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of using a frozen distribution we can also use [`hypergeom`](#scipy.stats.hypergeom
    "scipy.stats.hypergeom") methods directly. To for example obtain the cumulative
    distribution function, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And to generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(M, n, N, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, M, n, N, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, M, n, N, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, M, n, N, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, M, n, N, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, M, n, N, loc=0)** | Survival function (also defined as `1 - cdf`,
    but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, M, n, N, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, M, n, N, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, M, n, N, loc=0)** | Inverse survival function (inverse of `sf`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(M, n, N, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(M, n, N, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(M, n, N), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(M, n, N, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(M, n, N, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(M, n, N, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(M, n, N, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, M, n, N, loc=0)** | Confidence interval with equal
    areas around the median. |'
  prefs: []
  type: TYPE_TB
