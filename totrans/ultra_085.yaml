- en: 'Advanced Data Visualization: Heatmaps using Ultralytics YOLOv8 ðŸš€'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[`docs.ultralytics.com/guides/heatmaps/`](https://docs.ultralytics.com/guides/heatmaps/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction to Heatmaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A heatmap generated with [Ultralytics YOLOv8](https://github.com/ultralytics/ultralytics/)
    transforms complex data into a vibrant, color-coded matrix. This visual tool employs
    a spectrum of colors to represent varying data values, where warmer hues indicate
    higher intensities and cooler tones signify lower values. Heatmaps excel in visualizing
    intricate data patterns, correlations, and anomalies, offering an accessible and
    engaging approach to data interpretation across diverse domains.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/4ezde5-nZZw`](https://www.youtube.com/embed/4ezde5-nZZw)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Heatmaps using Ultralytics YOLOv8'
  prefs: []
  type: TYPE_NORMAL
- en: Why Choose Heatmaps for Data Analysis?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Intuitive Data Distribution Visualization:** Heatmaps simplify the comprehension
    of data concentration and distribution, converting complex datasets into easy-to-understand
    visual formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Efficient Pattern Detection:** By visualizing data in heatmap format, it
    becomes easier to spot trends, clusters, and outliers, facilitating quicker analysis
    and insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhanced Spatial Analysis and Decision-Making:** Heatmaps are instrumental
    in illustrating spatial relationships, aiding in decision-making processes in
    sectors such as business intelligence, environmental studies, and urban planning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real World Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Transportation | Retail |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![Ultralytics YOLOv8 Transportation Heatmap](img/3dc380f421075e20a64d17898ae5016d.png)
    | ![Ultralytics YOLOv8 Retail Heatmap](img/e4cc193d64bbbb75cfee32089a9b9045.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Ultralytics YOLOv8 Transportation Heatmap | Ultralytics YOLOv8 Retail Heatmap
    |'
  prefs: []
  type: TYPE_TB
- en: Heatmap Configuration
  prefs: []
  type: TYPE_NORMAL
- en: '`heatmap_alpha`: Ensure this value is within the range (0.0 - 1.0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decay_factor`: Used for removing heatmap after an object is no longer in the
    frame, its value should also be in the range (0.0 - 1.0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmaps using Ultralytics YOLOv8 Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Arguments `Heatmap()`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `names` | `list` | `None` | Dictionary of class names. |'
  prefs: []
  type: TYPE_TB
- en: '| `imw` | `int` | `0` | Image width. |'
  prefs: []
  type: TYPE_TB
- en: '| `imh` | `int` | `0` | Image height. |'
  prefs: []
  type: TYPE_TB
- en: '| `colormap` | `int` | `cv2.COLORMAP_JET` | Colormap to use for the heatmap.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `heatmap_alpha` | `float` | `0.5` | Alpha blending value for heatmap overlay.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `view_img` | `bool` | `False` | Whether to display the image with the heatmap
    overlay. |'
  prefs: []
  type: TYPE_TB
- en: '| `view_in_counts` | `bool` | `True` | Whether to display the count of objects
    entering the region. |'
  prefs: []
  type: TYPE_TB
- en: '| `view_out_counts` | `bool` | `True` | Whether to display the count of objects
    exiting the region. |'
  prefs: []
  type: TYPE_TB
- en: '| `count_reg_pts` | `list` or `None` | `None` | Points defining the counting
    region (either a line or a polygon). |'
  prefs: []
  type: TYPE_TB
- en: '| `count_txt_color` | `tuple` | `(0, 0, 0)` | Text color for displaying counts.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `count_bg_color` | `tuple` | `(255, 255, 255)` | Background color for displaying
    counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `count_reg_color` | `tuple` | `(255, 0, 255)` | Color for the counting region.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `region_thickness` | `int` | `5` | Thickness of the region line. |'
  prefs: []
  type: TYPE_TB
- en: '| `line_dist_thresh` | `int` | `15` | Distance threshold for line-based counting.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `line_thickness` | `int` | `2` | Thickness of the lines used in drawing.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `decay_factor` | `float` | `0.99` | Decay factor for the heatmap to reduce
    intensity over time. |'
  prefs: []
  type: TYPE_TB
- en: '| `shape` | `str` | `"circle"` | Shape of the heatmap blobs (''circle'' or
    ''rect''). |'
  prefs: []
  type: TYPE_TB
- en: Arguments `model.track`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `source` | `im0` | `None` | source directory for images or videos |'
  prefs: []
  type: TYPE_TB
- en: '| `persist` | `bool` | `False` | persisting tracks between frames |'
  prefs: []
  type: TYPE_TB
- en: '| `tracker` | `str` | `botsort.yaml` | Tracking method ''bytetrack'' or ''botsort''
    |'
  prefs: []
  type: TYPE_TB
- en: '| `conf` | `float` | `0.3` | Confidence Threshold |'
  prefs: []
  type: TYPE_TB
- en: '| `iou` | `float` | `0.5` | IOU Threshold |'
  prefs: []
  type: TYPE_TB
- en: '| `classes` | `list` | `None` | filter results by class, i.e. classes=0, or
    classes=[0,2,3] |'
  prefs: []
  type: TYPE_TB
- en: Heatmap COLORMAPs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Colormap Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_AUTUMN` | Autumn color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_BONE` | Bone color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_JET` | Jet color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_WINTER` | Winter color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_RAINBOW` | Rainbow color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_OCEAN` | Ocean color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_SUMMER` | Summer color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_SPRING` | Spring color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_COOL` | Cool color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_HSV` | HSV (Hue, Saturation, Value) color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_PINK` | Pink color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_HOT` | Hot color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_PARULA` | Parula color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_MAGMA` | Magma color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_INFERNO` | Inferno color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_PLASMA` | Plasma color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_VIRIDIS` | Viridis color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_CIVIDIS` | Cividis color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_TWILIGHT` | Twilight color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_TWILIGHT_SHIFTED` | Shifted Twilight color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_TURBO` | Turbo color map |'
  prefs: []
  type: TYPE_TB
- en: '| `cv::COLORMAP_DEEPGREEN` | Deep Green color map |'
  prefs: []
  type: TYPE_TB
- en: These colormaps are commonly used for visualizing data with different color
    representations.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How does Ultralytics YOLOv8 generate heatmaps and what are their benefits?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8 generates heatmaps by transforming complex data into a color-coded
    matrix where different hues represent data intensities. Heatmaps make it easier
    to visualize patterns, correlations, and anomalies in the data. Warmer hues indicate
    higher values, while cooler tones represent lower values. The primary benefits
    include intuitive visualization of data distribution, efficient pattern detection,
    and enhanced spatial analysis for decision-making. For more details and configuration
    options, refer to the Heatmap Configuration section.
  prefs: []
  type: TYPE_NORMAL
- en: Can I use Ultralytics YOLOv8 to perform object tracking and generate a heatmap
    simultaneously?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yes, Ultralytics YOLOv8 supports object tracking and heatmap generation concurrently.
    This can be achieved through its `Heatmap` solution integrated with object tracking
    models. To do so, you need to initialize the heatmap object and use YOLOv8''s
    tracking capabilities. Here''s a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For further guidance, check the Tracking Mode page.
  prefs: []
  type: TYPE_NORMAL
- en: What makes Ultralytics YOLOv8 heatmaps different from other data visualization
    tools like those from OpenCV or Matplotlib?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8 heatmaps are specifically designed for integration with its
    object detection and tracking models, providing an end-to-end solution for real-time
    data analysis. Unlike generic visualization tools like OpenCV or Matplotlib, YOLOv8
    heatmaps are optimized for performance and automated processing, supporting features
    like persistent tracking, decay factor adjustment, and real-time video overlay.
    For more information on YOLOv8's unique features, visit the [Ultralytics YOLOv8
    Introduction](https://www.ultralytics.com/blog/introducing-ultralytics-yolov8).
  prefs: []
  type: TYPE_NORMAL
- en: How can I visualize only specific object classes in heatmaps using Ultralytics
    YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can visualize specific object classes by specifying the desired classes
    in the `track()` method of the YOLO model. For instance, if you only want to visualize
    cars and persons (assuming their class indices are 0 and 2), you can set the `classes`
    parameter accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Why should businesses choose Ultralytics YOLOv8 for heatmap generation in data
    analysis?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8 offers seamless integration of advanced object detection
    and real-time heatmap generation, making it an ideal choice for businesses looking
    to visualize data more effectively. The key advantages include intuitive data
    distribution visualization, efficient pattern detection, and enhanced spatial
    analysis for better decision-making. Additionally, YOLOv8's cutting-edge features
    such as persistent tracking, customizable colormaps, and support for various export
    formats make it superior to other tools like TensorFlow and OpenCV for comprehensive
    data analysis. Learn more about business applications at [Ultralytics Plans](https://www.ultralytics.com/plans).
  prefs: []
  type: TYPE_NORMAL
