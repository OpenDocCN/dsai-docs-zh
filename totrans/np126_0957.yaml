- en: Legacy Random Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/random/legacy.html](https://numpy.org/doc/1.26/reference/random/legacy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") provides
    access to legacy generators. This generator is considered frozen and will have
    no further improvements. It is guaranteed to produce the same values as the final
    point release of NumPy v1.16\. These all depend on Box-Muller normals or inverse
    CDF exponentials or gammas. This class should only be used if it is essential
    to have randoms that are identical to what would have been produced by previous
    versions of NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") adds
    additional information to the state which is required when using Box-Muller normals
    since these are produced in pairs. It is important to use [`RandomState.get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state"), and not the underlying bit generators *state*,
    when accessing the state so that these extra values are saved.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we provide the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") BitGenerator for use independent of [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"), note that its default seeding uses [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") rather than the legacy seeding algorithm. [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") will use the legacy seeding algorithm. The methods
    to use the legacy seeding algorithm are currently private as the main reason to
    use them is just to implement [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState").
    However, one can reset the state of [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") using the state of the [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Container for the slow Mersenne Twister pseudo-random number generator. Consider
    using a different BitGenerator with the Generator container instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") and [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") expose a number of methods for generating random numbers
    drawn from a variety of probability distributions. In addition to the distribution-specific
    arguments, each method takes a keyword argument *size* that defaults to `None`.
    If *size* is `None`, then a single value is generated and returned. If *size*
    is an integer, then a 1-D array filled with generated values is returned. If *size*
    is a tuple, then an array with that shape is filled and returned.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compatibility Guarantee**'
  prefs: []
  type: TYPE_NORMAL
- en: A fixed bit generator using a fixed seed and a fixed series of calls to ‘RandomState’
    methods using the same parameters will always produce the same results up to roundoff
    error except when the values were incorrect. [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") is effectively frozen and will only receive updates
    that are required by changes in the internals of Numpy. More substantial changes,
    including algorithmic improvements, are reserved for [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, array_like, BitGenerator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Random seed used to initialize the pseudo-random number generator or an instantized
    BitGenerator. If an integer or array, used as a seed for the MT19937 BitGenerator.
    Values can be any integer between 0 and 2**32 - 1 inclusive, an array (or other
    sequence) of such integers, or `None` (the default). If [`seed`](generated/numpy.random.seed.html#numpy.random.seed
    "numpy.random.seed") is `None`, then the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") BitGenerator is initialized by reading data from `/dev/urandom`
    (or the Windows analogue) if available or seed from the clock otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The Python stdlib module “random” also contains a Mersenne Twister pseudo-random
    number generator with a number of methods that are similar to the ones available
    in [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState"). [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"), besides being NumPy-aware, has the advantage that
    it provides a much larger number of probability distributions to choose from.
  prefs: []
  type: TYPE_NORMAL
- en: Seeding and State
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | Return a tuple representing
    the internal state of the generator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | Set the internal state of the generator
    from a tuple. |'
  prefs: []
  type: TYPE_TB
- en: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | Reseed a legacy MT19937 BitGenerator
    |'
  prefs: []
  type: TYPE_TB
- en: Simple random data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | Random values in a given shape.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | Return a sample (or samples)
    from the "standard normal" distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | Return random
    integers from *low* (inclusive) to *high* (exclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | Random integers
    of type *np.int_* between *low* and *high*, inclusive. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | Return random floats in the
    half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | Generates a random
    sample from a given 1-D array |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: Permutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | Modify a sequence in-place by shuffling
    its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | Randomly permute a sequence, or return
    a permuted range. |'
  prefs: []
  type: TYPE_TB
- en: Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | Draw samples from an
    exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | Draw samples from an F distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | Draw samples from a
    Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | Draw samples from a
    logistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | Draw samples from
    a log-normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | Draw samples from
    a multinomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | Draw
    random samples from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | Draw samples from a Pareto II
    or Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | Draw samples from a Poisson
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | Draws samples in [0, 1] from a
    power distribution with positive exponent a - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | Draw samples from the
    standard exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | Draw samples from
    a standard Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | Draw samples from a standard
    Normal distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | Draw samples from a
    von Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '## Functions in [`numpy.random`](index.html#module-numpy.random "numpy.random")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the RandomState methods above are exported as functions in [`numpy.random`](index.html#module-numpy.random
    "numpy.random") This usage is discouraged, as it is implemented via a global [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") instance which is not advised on two counts:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses global state, which means results will change as the code changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses a [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")
    rather than the more modern [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For backward compatible legacy reasons, we will not change this.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a, b[, size])
    | Draw samples from a Beta distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n, p[, size])
    | Draw samples from a binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)
    | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size]) | Draw samples from a chi-square distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[, size, replace, p])
    | Generates a random sample from a given 1-D array |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[, scale, size])
    | Draw samples from a Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size]) | Draw samples from the geometric distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy]) | Return a tuple representing the internal
    state of the generator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc, scale, size])
    | Draw samples from a Gumbel distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size]) | Draw samples from
    a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | Draw samples from the Laplace or double exponential distribution with specified
    location (or mean) and scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | Draw samples from a logistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | Draw samples from a log-normal
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | Draw samples from a logarithmic series
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | Draw samples from a multinomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | Draw random samples
    from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | Draw samples from a negative
    binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | Draw samples from a noncentral
    chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples from the
    noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal "numpy.random.normal")([loc, scale, size])
    | Draw random samples from a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | Draw samples from a Pareto II or Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | Randomly permute a sequence, or return a permuted
    range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | Draw samples from a Poisson distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | Draws samples in [0, 1] from a power distribution with positive exponent a -
    1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | Random values in a given shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | Return random integers from *low* (inclusive) to *high* (exclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`randn`](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | Return a sample (or samples) from the "standard normal" distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random`](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | Return random floats in the half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_integers`](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | Random integers of type *np.int_*
    between *low* and *high*, inclusive. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | Return random floats in the half-open
    interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | Draw samples from a Rayleigh distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sample`](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`seed`](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | Reseed the singleton RandomState instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_state`](generated/numpy.random.set_state.html#numpy.random.set_state
    "numpy.random.set_state")(state) | Set the internal state of the generator from
    a tuple. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shuffle`](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | Modify a sequence in-place by shuffling its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | Draw samples from a standard Cauchy
    distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential
    "numpy.random.standard_exponential")([size]) | Draw samples from the standard
    exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | Draw samples from a standard Gamma
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | Draw samples from a standard Normal
    distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.standard_t.html#numpy.random.standard_t
    "numpy.random.standard_t")(df[, size]) | Draw samples from a standard Student''s
    t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.triangular.html#numpy.random.triangular
    "numpy.random.triangular")(left, mode, right[, size]) | Draw samples from the
    triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | Draw samples from a uniform distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | Draw samples from a von Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | Draw samples from a Wald, or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | Draw samples from a Weibull distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | Draw samples from a Zipf distribution. |'
  prefs: []
  type: TYPE_TB
- en: Seeding and State
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | Return a tuple representing
    the internal state of the generator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | Set the internal state of the generator
    from a tuple. |'
  prefs: []
  type: TYPE_TB
- en: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | Reseed a legacy MT19937 BitGenerator
    |'
  prefs: []
  type: TYPE_TB
- en: Simple random data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | Random values in a given shape.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | Return a sample (or samples)
    from the "standard normal" distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | Return random
    integers from *low* (inclusive) to *high* (exclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | Random integers
    of type *np.int_* between *low* and *high*, inclusive. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | Return random floats in the
    half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | Generates a random
    sample from a given 1-D array |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: Permutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | Modify a sequence in-place by shuffling
    its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | Randomly permute a sequence, or return
    a permuted range. |'
  prefs: []
  type: TYPE_TB
- en: Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | Draw samples from an
    exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | Draw samples from an F distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | Draw samples from a
    Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | Draw samples from a
    logistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | Draw samples from
    a log-normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | Draw samples from
    a multinomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | Draw
    random samples from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | Draw samples from a Pareto II
    or Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | Draw samples from a Poisson
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | Draws samples in [0, 1] from a
    power distribution with positive exponent a - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | Draw samples from the
    standard exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | Draw samples from
    a standard Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | Draw samples from a standard
    Normal distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | Draw samples from a
    von Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '## Functions in [`numpy.random`](index.html#module-numpy.random "numpy.random")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the RandomState methods above are exported as functions in [`numpy.random`](index.html#module-numpy.random
    "numpy.random") This usage is discouraged, as it is implemented via a global [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") instance which is not advised on two counts:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses global state, which means results will change as the code changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses a [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")
    rather than the more modern [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For backward compatible legacy reasons, we will not change this.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a, b[, size])
    | Draw samples from a Beta distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n, p[, size])
    | Draw samples from a binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)
    | Return random bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size]) | Draw samples from a chi-square distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[, size, replace, p])
    | Generates a random sample from a given 1-D array |'
  prefs: []
  type: TYPE_TB
- en: '| [`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[, scale, size])
    | Draw samples from a Gamma distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size]) | Draw samples from the geometric distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy]) | Return a tuple representing the internal
    state of the generator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc, scale, size])
    | Draw samples from a Gumbel distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size]) | Draw samples from
    a Hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | Draw samples from the Laplace or double exponential distribution with specified
    location (or mean) and scale (decay). |'
  prefs: []
  type: TYPE_TB
- en: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | Draw samples from a logistic distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | Draw samples from a log-normal
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | Draw samples from a logarithmic series
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | Draw samples from a multinomial
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | Draw random samples
    from a multivariate normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | Draw samples from a negative
    binomial distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | Draw samples from a noncentral
    chi-square distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples from the
    noncentral F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal "numpy.random.normal")([loc, scale, size])
    | Draw random samples from a normal (Gaussian) distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | Draw samples from a Pareto II or Lomax distribution with specified shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | Randomly permute a sequence, or return a permuted
    range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | Draw samples from a Poisson distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | Draws samples in [0, 1] from a power distribution with positive exponent a -
    1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | Random values in a given shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | Return random integers from *low* (inclusive) to *high* (exclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`randn`](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | Return a sample (or samples) from the "standard normal" distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random`](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | Return random floats in the half-open interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_integers`](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | Random integers of type *np.int_*
    between *low* and *high*, inclusive. |'
  prefs: []
  type: TYPE_TB
- en: '| [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | Return random floats in the half-open
    interval [0.0, 1.0). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`rayleigh`](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | Draw samples from a Rayleigh distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sample`](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`seed`](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | Reseed the singleton RandomState instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_state`](generated/numpy.random.set_state.html#numpy.random.set_state
    "numpy.random.set_state")(state) | Set the internal state of the generator from
    a tuple. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shuffle`](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | Modify a sequence in-place by shuffling its contents. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_cauchy`](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | Draw samples from a standard Cauchy
    distribution with mode = 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_exponential`](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential
    "numpy.random.standard_exponential")([size]) | Draw samples from the standard
    exponential distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_gamma`](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | Draw samples from a standard Gamma
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_normal`](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | Draw samples from a standard Normal
    distribution (mean=0, stdev=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_t`](generated/numpy.random.standard_t.html#numpy.random.standard_t
    "numpy.random.standard_t")(df[, size]) | Draw samples from a standard Student''s
    t distribution with *df* degrees of freedom. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triangular`](generated/numpy.random.triangular.html#numpy.random.triangular
    "numpy.random.triangular")(left, mode, right[, size]) | Draw samples from the
    triangular distribution over the interval `[left, right]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | Draw samples from a uniform distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | Draw samples from a von Mises distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | Draw samples from a Wald, or inverse Gaussian, distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | Draw samples from a Weibull distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | Draw samples from a Zipf distribution. |'
  prefs: []
  type: TYPE_TB
