- en: pandas.core.groupby.DataFrameGroupBy.sample
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.sample.html](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.DataFrameGroupBy.sample.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a random sample of items from each group.
  prefs: []
  type: TYPE_NORMAL
- en: You can use random_state for reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of items to return for each group. Cannot be used with frac and must
    be no larger than the smallest group unless replace is True. Default is one if
    frac is None.
  prefs: []
  type: TYPE_NORMAL
- en: '**frac**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Fraction of items to return. Cannot be used with n.
  prefs: []
  type: TYPE_NORMAL
- en: '**replace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Allow or disallow sampling of the same row more than once.
  prefs: []
  type: TYPE_NORMAL
- en: '**weights**list-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default None results in equal probability weighting. If passed a list-like then
    values must have the same length as the underlying DataFrame or Series object
    and will be used as sampling probabilities after normalization within each group.
    Values must be non-negative with at least one positive element within each group.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**int, array-like, BitGenerator, np.random.RandomState, np.random.Generator,
    optional'
  prefs: []
  type: TYPE_NORMAL
- en: If int, array-like, or BitGenerator, seed for random number generator. If np.random.RandomState
    or np.random.Generator, use as given.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.0: np.random.Generator objects now accepted'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: A new object of same type as caller containing items randomly sampled within
    each group from the caller object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.sample`'
  prefs: []
  type: TYPE_NORMAL
- en: Generate random samples from a DataFrame object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.choice`](https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html#numpy.random.choice
    "(in NumPy v1.26)")'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a random sample from a given 1-D numpy array.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Select one row at random for each distinct value in column a. The random_state
    argument can be used to guarantee reproducibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Set frac to sample fixed proportions rather than counts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Control sample probabilities within groups by setting weights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
