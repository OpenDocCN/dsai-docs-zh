- en: SciPy Roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This roadmap page contains only the most important ideas and needs for SciPy
    going forward. For a more detailed roadmap, including per-subpackage status, many
    more ideas, API stability and more, see [Detailed SciPy Roadmap](roadmap-detailed.html#scipy-roadmap-detailed).
  prefs: []
  type: TYPE_NORMAL
- en: Support for distributed arrays and GPU arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy has split its API from its execution engine with `__array_function__`
    and `__array_ufunc__`. This will enable parts of SciPy to accept distributed arrays
    (e.g. `dask.array.Array`) and GPU arrays (e.g. `cupy.ndarray`) that implement
    the `ndarray` interface. At the moment it is not yet clear which algorithms will
    work out of the box, and if there are significant performance gains when they
    do. We want to create a map of which parts of the SciPy API work, and improve
    support over time.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to making use of NumPy protocols like `__array_function__`, we can
    make use of these protocols in SciPy as well. That will make it possible to (re)implement
    SciPy functions like, e.g., those in `scipy.signal` for Dask or GPU arrays (see
    [NEP 18 - use outside of NumPy](http://www.numpy.org/neps/nep-0018-array-function-protocol.html#use-outside-of-numpy)).
    NumPy’s features in this areas are still evolving, see e.g. [NEP 37 - A dispatch
    protocol for NumPy-like modules](https://numpy.org/neps/nep-0037-array-module.html),
    and SciPy is an important “client” for those features.
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Speed improvements, lower memory usage and the ability to parallelize algorithms
    are beneficial to most science domains and use cases. We have established an API
    design pattern for multiprocessing - using the `workers` keyword - that can be
    adopted in many more functions.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the use of an accelerator like Pythran, possibly via Transonic, and
    making it easier for users to use Numba’s `@njit` in their code that relies on
    SciPy functionality would unlock a lot of performance gain. That needs a strategy
    though, all solutions are still maturing (see for example [this overview](https://fluiddyn.netlify.app/transonic-vision.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, many individual functions can be optimized for performance. `scipy.optimize`
    and `scipy.interpolate` functions are particularly often requested in this respect.
  prefs: []
  type: TYPE_NORMAL
- en: Statistics enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following [`scipy.stats`](../reference/stats.html#module-scipy.stats "scipy.stats")
    enhancements and those listed in the [Detailed SciPy Roadmap](roadmap-detailed.html#scipy-roadmap-detailed)
    are of particularly high importance to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Overhaul the univariate distribution infrastructure to address longstanding
    issues (e.g. see [gh-15928](https://github.com/scipy/scipy/issues/15928).)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistently handle `nan_policy`, `axis` arguments, and masked arrays in `stats`
    functions (where appropriate).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for more hardware platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SciPy now has continuous integration for ARM64 (or `aarch64`) and POWER8/9 (or
    `ppc64le`), and binaries are available via [Miniforge](https://github.com/conda-forge/miniforge).
    Wheels on PyPI for these platforms are now also possible (with the `manylinux2014`
    standard), and requests for those are becoming more frequent.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, having IBM Z (or `s390x`) in CI is now possible with TravisCI
    but not yet done - and `manylinux2014` wheels for that platform are also possible
    then. Finally, resolving open AIX build issues would help users.
  prefs: []
  type: TYPE_NORMAL
- en: Implement sparse arrays in addition to sparse matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sparse matrix formats are mostly feature-complete, however the main issue
    is that they act like `numpy.matrix` (which will be deprecated in NumPy at some
    point). What we want is sparse *arrays* that act like `numpy.ndarray`. This is
    being worked on in [https://github.com/pydata/sparse](https://github.com/pydata/sparse),
    which is quite far along. The tentative plan is:'
  prefs: []
  type: TYPE_NORMAL
- en: Start depending on `pydata/sparse` once it’s feature-complete enough (it still
    needs a CSC/CSR equivalent) and okay performance-wise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indicate in the documentation that for new code users should prefer `pydata/sparse`
    over sparse matrices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When NumPy deprecates `numpy.matrix`, vendor that or maintain it as a stand-alone
    package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
