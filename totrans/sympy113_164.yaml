- en: Essential Functions (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/vector/api/functions.html](https://docs.sympy.org/latest/modules/physics/vector/api/functions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Uses symbols and Function for functions of time.
  prefs: []
  type: TYPE_NORMAL
- en: Creates a SymPy UndefinedFunction, which is then initialized as a function of
    a variable, the default being Symbol(‘t’).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**names** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Names of the dynamic symbols you want to create; works the same way as inputs
    to symbols
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**level** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Level of differentiation of the returned function; d/dt once of t, twice of
    t, etc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**assumptions :**'
  prefs: []
  type: TYPE_NORMAL
- en: real(bool)This is used to set the dynamicsymbol as real,
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: by default is False.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: positive(bool)This is used to set the dynamicsymbol as positive,
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: by default is False.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: commutative(bool)This is used to set the commutative property of
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: a dynamicsymbol, by default is True.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: integer(bool)This is used to set the dynamicsymbol as integer,
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: by default is False.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Dot product convenience wrapper for Vector.dot(): Dot product of two vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a scalar, the dot product of the two Vectors
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector which we are dotting with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Cross product convenience wrapper for Vector.cross(): The cross product operator
    for two Vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a Vector, expressed in the same ReferenceFrames as self.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector which we are crossing with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Outer product convenience wrapper for Vector.outer(): Outer product between
    two Vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: A rank increasing operation, which returns a Dyadic from two Vectors
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The Vector to take the outer product with
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Global function for ‘express’ functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Re-expresses a Vector, scalar(sympyfiable) or Dyadic in given frame.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the local methods of Vector and Dyadic for details. If ‘variables’
    is True, then the coordinate variables (CoordinateSym instances) of other frames
    present in the vector/scalar field or dyadic expression are also substituted in
    terms of the base scalars of this frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Vector/Dyadic/scalar(sympyfiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The expression to re-express in ReferenceFrame ‘frame’
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame: ReferenceFrame**'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame to express expr in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame2** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The other frame required for re-expression(only for Dyadic expr)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**variables** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies whether to substitute the coordinate variables present in expr, in
    terms of those of frame
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the time derivative of a vector/scalar field function or dyadic expression
    in given frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Vector/Dyadic/sympifyable'
  prefs: []
  type: TYPE_NORMAL
- en: The expression whose time derivative is to be calculated
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**frame** : ReferenceFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The reference frame to calculate the time derivative in
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the derivative to be calculated
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Rotating_reference_frame#Time_derivatives_in_the_two_frames](https://en.wikipedia.org/wiki/Rotating_reference_frame#Time_derivatives_in_the_two_frames)'
  prefs: []
  type: TYPE_NORMAL
