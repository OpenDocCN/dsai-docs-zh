["```py\ngit fetch upstream \n```", "```py\ngit checkout -b my-new-feature upstream/main \n```", "```py\n# hack hack\ngit status # Optional\ngit diff # Optional\ngit add modified_file\ngit commit\n# push the branch to your own Github repo\ngit push origin my-new-feature \n```", "```py\n    # On branch my-new-feature\n    # Changed but not updated:\n    #   (use \"git add <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #  modified:   README\n    #\n    # Untracked files:\n    #   (use \"git add <file>...\" to include in what will be committed)\n    #\n    #  INSTALL\n    no changes added to commit (use \"git add\" and/or \"git commit -a\") \n    ```", "```py\n    git push origin my-new-feature \n    ```", "```py\ngit push --set-upstream origin my-new-feature \n```", "```py\ngit push \n```", "```py\nENH: add functionality X to numpy.<submodule>.\n\nThe first line of the commit message starts with a capitalized acronym\n(options listed below) indicating what type of commit this is.  Then a blank\nline, then more text if needed.  Lines shouldn't be longer than 72\ncharacters.  If the commit is related to a ticket, indicate that with\n\"See #3456\", \"See ticket 3456\", \"Closes #3456\" or similar. \n```", "```py\nAPI: an (incompatible) API change\nBENCH: changes to the benchmark suite\nBLD: change related to building numpy\nBUG: bug fix\nDEP: deprecate something, or remove a deprecated object\nDEV: development tool or utility\nDOC: documentation\nENH: enhancement\nMAINT: maintenance commit (refactoring, typos, etc.)\nREV: revert an earlier commit\nSTY: style fix (whitespace, PEP8)\nTST: addition or modification of tests\nTYP: static typing\nREL: related to releasing numpy \n```", "```py\ngit fetch upstream \n```", "```py\n# go to the feature branch\ngit checkout my-new-feature\n# make a backup in case you mess up\ngit branch tmp my-new-feature\n# rebase on upstream main branch\ngit rebase upstream/main \n```", "```py\ngit branch -D tmp \n```", "```py\ngit rebase --abort \n```", "```py\n# reset branch back to the saved point\ngit reset --hard tmp \n```", "```py\n# look at the reflog of the branch\ngit reflog show my-feature-branch\n\n8630830 my-feature-branch@{0}: commit: BUG: io: close file handles immediately\n278dd2a my-feature-branch@{1}: rebase finished: refs/heads/my-feature-branch onto 11ee694744f2552d\n26aa21a my-feature-branch@{2}: commit: BUG: lib: make seek_gzip_factory not leak gzip obj\n...\n\n# reset the branch to where it was before the botched rebase\ngit reset --hard my-feature-branch@{2} \n```", "```py\ngit log --oneline\neadc391 Fix some remaining bugs\na815645 Modify it so that it works\n2dec1ac Fix a few bugs + disable\n13d7934 First implementation\n6ad92e5 * masked is now an instance of a new object, MaskedConstant\n29001ed Add pre-nep for a couple of structured_array_extensions.\n... \n```", "```py\n# make a backup of the current state\ngit branch tmp HEAD\n# interactive rebase\ngit rebase -i 6ad92e5 \n```", "```py\npick 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\npick a815645 Modify it so that it works\npick eadc391 Fix some remaining bugs\n\n# Rebase 6ad92e5..eadc391 onto 6ad92e5\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n# \n```", "```py\nr 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\nf a815645 Modify it so that it works\nf eadc391 Fix some remaining bugs \n```", "```py\n[detached HEAD 721fc64] FOO: First implementation\n 2 files changed, 199 insertions(+), 66 deletions(-)\n[detached HEAD 0f22701] Fix a few bugs + disable\n 1 files changed, 79 insertions(+), 61 deletions(-)\nSuccessfully rebased and updated refs/heads/my-feature-branch. \n```", "```py\n0f22701 Fix a few bugs + disable\n721fc64 ENH: Sophisticated feature\n6ad92e5 * masked is now an instance of a new object, MaskedConstant \n```", "```py\ngit checkout main\n# delete branch locally\ngit branch -D my-unwanted-branch\n# delete branch on github\ngit push origin --delete my-unwanted-branch \n```", "```py\ngit clone git@github.com:your-user-name/numpy.git \n```", "```py\ngit commit -am 'ENH - much better code'\ngit push origin my-feature-branch # pushes directly into your repo \n```", "```py\ngit fetch upstream pull/$ID/head:$BRANCHNAME \n```", "```py\ngit checkout $BRANCHNAME \n```", "```py\ngitk --all \n```", "```py\ngit log \n```", "```py\n    # Make a new branch based on numpy/maintenance/1.8.x,\n    # backport-3324 is our new name for the branch.\n    git checkout -b backport-3324 upstream/maintenance/1.8.x \n    ```", "```py\n    # Update remote\n    git fetch upstream\n    # Check the commit log for commits to cherry pick\n    git log upstream/main\n    # This pull request included commits aa7a047 to c098283 (inclusive)\n    # so you use the .. syntax (for a range of commits), the ^ makes the\n    # range inclusive.\n    git cherry-pick aa7a047^..c098283\n    ...\n    # Fix any conflicts, then if needed:\n    git cherry-pick --continue \n    ```", "```py\n    git push -u origin backport-3324 \n    ```", "```py\n        git fetch upstream\n        git rebase upstream/main \n        ```", "```py\n        git fetch upstream\n        git merge --no-ff upstream/main \n        ```", "```py\n    git log -p upstream/main..\n    git log --oneline --graph \n    ```", "```py\n    git push upstream my-feature-branch:main \n    ```", "```py\ngit fetch upstream \n```", "```py\ngit checkout -b my-new-feature upstream/main \n```", "```py\n# hack hack\ngit status # Optional\ngit diff # Optional\ngit add modified_file\ngit commit\n# push the branch to your own Github repo\ngit push origin my-new-feature \n```", "```py\n    # On branch my-new-feature\n    # Changed but not updated:\n    #   (use \"git add <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #  modified:   README\n    #\n    # Untracked files:\n    #   (use \"git add <file>...\" to include in what will be committed)\n    #\n    #  INSTALL\n    no changes added to commit (use \"git add\" and/or \"git commit -a\") \n    ```", "```py\n    git push origin my-new-feature \n    ```", "```py\ngit push --set-upstream origin my-new-feature \n```", "```py\ngit push \n```", "```py\nENH: add functionality X to numpy.<submodule>.\n\nThe first line of the commit message starts with a capitalized acronym\n(options listed below) indicating what type of commit this is.  Then a blank\nline, then more text if needed.  Lines shouldn't be longer than 72\ncharacters.  If the commit is related to a ticket, indicate that with\n\"See #3456\", \"See ticket 3456\", \"Closes #3456\" or similar. \n```", "```py\nAPI: an (incompatible) API change\nBENCH: changes to the benchmark suite\nBLD: change related to building numpy\nBUG: bug fix\nDEP: deprecate something, or remove a deprecated object\nDEV: development tool or utility\nDOC: documentation\nENH: enhancement\nMAINT: maintenance commit (refactoring, typos, etc.)\nREV: revert an earlier commit\nSTY: style fix (whitespace, PEP8)\nTST: addition or modification of tests\nTYP: static typing\nREL: related to releasing numpy \n```", "```py\ngit fetch upstream \n```", "```py\n# go to the feature branch\ngit checkout my-new-feature\n# make a backup in case you mess up\ngit branch tmp my-new-feature\n# rebase on upstream main branch\ngit rebase upstream/main \n```", "```py\ngit branch -D tmp \n```", "```py\ngit rebase --abort \n```", "```py\n# reset branch back to the saved point\ngit reset --hard tmp \n```", "```py\n# look at the reflog of the branch\ngit reflog show my-feature-branch\n\n8630830 my-feature-branch@{0}: commit: BUG: io: close file handles immediately\n278dd2a my-feature-branch@{1}: rebase finished: refs/heads/my-feature-branch onto 11ee694744f2552d\n26aa21a my-feature-branch@{2}: commit: BUG: lib: make seek_gzip_factory not leak gzip obj\n...\n\n# reset the branch to where it was before the botched rebase\ngit reset --hard my-feature-branch@{2} \n```", "```py\ngit fetch upstream \n```", "```py\ngit checkout -b my-new-feature upstream/main \n```", "```py\n# hack hack\ngit status # Optional\ngit diff # Optional\ngit add modified_file\ngit commit\n# push the branch to your own Github repo\ngit push origin my-new-feature \n```", "```py\n    # On branch my-new-feature\n    # Changed but not updated:\n    #   (use \"git add <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #  modified:   README\n    #\n    # Untracked files:\n    #   (use \"git add <file>...\" to include in what will be committed)\n    #\n    #  INSTALL\n    no changes added to commit (use \"git add\" and/or \"git commit -a\") \n    ```", "```py\n    git push origin my-new-feature \n    ```", "```py\ngit push --set-upstream origin my-new-feature \n```", "```py\ngit push \n```", "```py\nENH: add functionality X to numpy.<submodule>.\n\nThe first line of the commit message starts with a capitalized acronym\n(options listed below) indicating what type of commit this is.  Then a blank\nline, then more text if needed.  Lines shouldn't be longer than 72\ncharacters.  If the commit is related to a ticket, indicate that with\n\"See #3456\", \"See ticket 3456\", \"Closes #3456\" or similar. \n```", "```py\nAPI: an (incompatible) API change\nBENCH: changes to the benchmark suite\nBLD: change related to building numpy\nBUG: bug fix\nDEP: deprecate something, or remove a deprecated object\nDEV: development tool or utility\nDOC: documentation\nENH: enhancement\nMAINT: maintenance commit (refactoring, typos, etc.)\nREV: revert an earlier commit\nSTY: style fix (whitespace, PEP8)\nTST: addition or modification of tests\nTYP: static typing\nREL: related to releasing numpy \n```", "```py\n# hack hack\ngit status # Optional\ngit diff # Optional\ngit add modified_file\ngit commit\n# push the branch to your own Github repo\ngit push origin my-new-feature \n```", "```py\n    # On branch my-new-feature\n    # Changed but not updated:\n    #   (use \"git add <file>...\" to update what will be committed)\n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)\n    #\n    #  modified:   README\n    #\n    # Untracked files:\n    #   (use \"git add <file>...\" to include in what will be committed)\n    #\n    #  INSTALL\n    no changes added to commit (use \"git add\" and/or \"git commit -a\") \n    ```", "```py\n    git push origin my-new-feature \n    ```", "```py\ngit push --set-upstream origin my-new-feature \n```", "```py\ngit push \n```", "```py\nENH: add functionality X to numpy.<submodule>.\n\nThe first line of the commit message starts with a capitalized acronym\n(options listed below) indicating what type of commit this is.  Then a blank\nline, then more text if needed.  Lines shouldn't be longer than 72\ncharacters.  If the commit is related to a ticket, indicate that with\n\"See #3456\", \"See ticket 3456\", \"Closes #3456\" or similar. \n```", "```py\nAPI: an (incompatible) API change\nBENCH: changes to the benchmark suite\nBLD: change related to building numpy\nBUG: bug fix\nDEP: deprecate something, or remove a deprecated object\nDEV: development tool or utility\nDOC: documentation\nENH: enhancement\nMAINT: maintenance commit (refactoring, typos, etc.)\nREV: revert an earlier commit\nSTY: style fix (whitespace, PEP8)\nTST: addition or modification of tests\nTYP: static typing\nREL: related to releasing numpy \n```", "```py\ngit fetch upstream \n```", "```py\n# go to the feature branch\ngit checkout my-new-feature\n# make a backup in case you mess up\ngit branch tmp my-new-feature\n# rebase on upstream main branch\ngit rebase upstream/main \n```", "```py\ngit branch -D tmp \n```", "```py\ngit rebase --abort \n```", "```py\n# reset branch back to the saved point\ngit reset --hard tmp \n```", "```py\n# look at the reflog of the branch\ngit reflog show my-feature-branch\n\n8630830 my-feature-branch@{0}: commit: BUG: io: close file handles immediately\n278dd2a my-feature-branch@{1}: rebase finished: refs/heads/my-feature-branch onto 11ee694744f2552d\n26aa21a my-feature-branch@{2}: commit: BUG: lib: make seek_gzip_factory not leak gzip obj\n...\n\n# reset the branch to where it was before the botched rebase\ngit reset --hard my-feature-branch@{2} \n```", "```py\ngit log --oneline\neadc391 Fix some remaining bugs\na815645 Modify it so that it works\n2dec1ac Fix a few bugs + disable\n13d7934 First implementation\n6ad92e5 * masked is now an instance of a new object, MaskedConstant\n29001ed Add pre-nep for a couple of structured_array_extensions.\n... \n```", "```py\n# make a backup of the current state\ngit branch tmp HEAD\n# interactive rebase\ngit rebase -i 6ad92e5 \n```", "```py\npick 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\npick a815645 Modify it so that it works\npick eadc391 Fix some remaining bugs\n\n# Rebase 6ad92e5..eadc391 onto 6ad92e5\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n# \n```", "```py\nr 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\nf a815645 Modify it so that it works\nf eadc391 Fix some remaining bugs \n```", "```py\n[detached HEAD 721fc64] FOO: First implementation\n 2 files changed, 199 insertions(+), 66 deletions(-)\n[detached HEAD 0f22701] Fix a few bugs + disable\n 1 files changed, 79 insertions(+), 61 deletions(-)\nSuccessfully rebased and updated refs/heads/my-feature-branch. \n```", "```py\n0f22701 Fix a few bugs + disable\n721fc64 ENH: Sophisticated feature\n6ad92e5 * masked is now an instance of a new object, MaskedConstant \n```", "```py\ngit checkout main\n# delete branch locally\ngit branch -D my-unwanted-branch\n# delete branch on github\ngit push origin --delete my-unwanted-branch \n```", "```py\ngit clone git@github.com:your-user-name/numpy.git \n```", "```py\ngit commit -am 'ENH - much better code'\ngit push origin my-feature-branch # pushes directly into your repo \n```", "```py\ngit fetch upstream pull/$ID/head:$BRANCHNAME \n```", "```py\ngit checkout $BRANCHNAME \n```", "```py\ngitk --all \n```", "```py\ngit log \n```", "```py\n    # Make a new branch based on numpy/maintenance/1.8.x,\n    # backport-3324 is our new name for the branch.\n    git checkout -b backport-3324 upstream/maintenance/1.8.x \n    ```", "```py\n    # Update remote\n    git fetch upstream\n    # Check the commit log for commits to cherry pick\n    git log upstream/main\n    # This pull request included commits aa7a047 to c098283 (inclusive)\n    # so you use the .. syntax (for a range of commits), the ^ makes the\n    # range inclusive.\n    git cherry-pick aa7a047^..c098283\n    ...\n    # Fix any conflicts, then if needed:\n    git cherry-pick --continue \n    ```", "```py\n    git push -u origin backport-3324 \n    ```", "```py\n        git fetch upstream\n        git rebase upstream/main \n        ```", "```py\n        git fetch upstream\n        git merge --no-ff upstream/main \n        ```", "```py\n    git log -p upstream/main..\n    git log --oneline --graph \n    ```", "```py\n    git push upstream my-feature-branch:main \n    ```", "```py\ngit log --oneline\neadc391 Fix some remaining bugs\na815645 Modify it so that it works\n2dec1ac Fix a few bugs + disable\n13d7934 First implementation\n6ad92e5 * masked is now an instance of a new object, MaskedConstant\n29001ed Add pre-nep for a couple of structured_array_extensions.\n... \n```", "```py\n# make a backup of the current state\ngit branch tmp HEAD\n# interactive rebase\ngit rebase -i 6ad92e5 \n```", "```py\npick 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\npick a815645 Modify it so that it works\npick eadc391 Fix some remaining bugs\n\n# Rebase 6ad92e5..eadc391 onto 6ad92e5\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n# \n```", "```py\nr 13d7934 First implementation\npick 2dec1ac Fix a few bugs + disable\nf a815645 Modify it so that it works\nf eadc391 Fix some remaining bugs \n```", "```py\n[detached HEAD 721fc64] FOO: First implementation\n 2 files changed, 199 insertions(+), 66 deletions(-)\n[detached HEAD 0f22701] Fix a few bugs + disable\n 1 files changed, 79 insertions(+), 61 deletions(-)\nSuccessfully rebased and updated refs/heads/my-feature-branch. \n```", "```py\n0f22701 Fix a few bugs + disable\n721fc64 ENH: Sophisticated feature\n6ad92e5 * masked is now an instance of a new object, MaskedConstant \n```", "```py\ngit checkout main\n# delete branch locally\ngit branch -D my-unwanted-branch\n# delete branch on github\ngit push origin --delete my-unwanted-branch \n```", "```py\ngit clone git@github.com:your-user-name/numpy.git \n```", "```py\ngit commit -am 'ENH - much better code'\ngit push origin my-feature-branch # pushes directly into your repo \n```", "```py\ngit fetch upstream pull/$ID/head:$BRANCHNAME \n```", "```py\ngit checkout $BRANCHNAME \n```", "```py\ngitk --all \n```", "```py\ngit log \n```", "```py\n    # Make a new branch based on numpy/maintenance/1.8.x,\n    # backport-3324 is our new name for the branch.\n    git checkout -b backport-3324 upstream/maintenance/1.8.x \n    ```", "```py\n    # Update remote\n    git fetch upstream\n    # Check the commit log for commits to cherry pick\n    git log upstream/main\n    # This pull request included commits aa7a047 to c098283 (inclusive)\n    # so you use the .. syntax (for a range of commits), the ^ makes the\n    # range inclusive.\n    git cherry-pick aa7a047^..c098283\n    ...\n    # Fix any conflicts, then if needed:\n    git cherry-pick --continue \n    ```", "```py\n    git push -u origin backport-3324 \n    ```", "```py\n        git fetch upstream\n        git rebase upstream/main \n        ```", "```py\n        git fetch upstream\n        git merge --no-ff upstream/main \n        ```", "```py\n    git log -p upstream/main..\n    git log --oneline --graph \n    ```", "```py\n    git push upstream my-feature-branch:main \n    ```"]