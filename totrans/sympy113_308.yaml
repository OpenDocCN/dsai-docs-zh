- en: Deprecation Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/contributing/deprecations.html](https://docs.sympy.org/latest/contributing/deprecations.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This page outlines SymPy’s policy on doing deprecations, and describes the steps
    developers should take to properly deprecate code.
  prefs: []
  type: TYPE_NORMAL
- en: A list of all currently active deprecations in SymPy can be found at [List of
    active deprecations](../explanation/active-deprecations.html#active-deprecations).
  prefs: []
  type: TYPE_NORMAL
- en: What is a deprecation?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A deprecation is a way to make backwards incompatible changes in a way that
    allows users to update their code. Deprecated code continues to work as it used
    to, but whenever someone uses it, it prints a warning to the screen indicating
    that it will be removed in a future version of SymPy, and indicating what the
    user should be using instead.
  prefs: []
  type: TYPE_NORMAL
- en: This allows users a chance to update their code without it completely breaking.
    It also gives SymPy an opportunity to give users an informative message on how
    to update their code, rather than making their code simply error or start giving
    wrong answers.
  prefs: []
  type: TYPE_NORMAL
- en: Try to avoid backwards incompatible changes in the first place
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backwards incompatible API changes should not be made lightly. Any backwards
    compatibility break means that users will need to fix their code. Whenever you
    want to make a breaking change, you should consider whether this is worth the
    pain for users. Users who have to update their code to match new APIs with every
    SymPy release will become frustrated with the library, and may go seek a more
    stable alternative. Consider whether the behavior you want can be done in a way
    that is compatible with existing APIs. New APIs do not necessarily need to completely
    supplant old ones. It is sometimes possible for old APIs to exist alongside newer,
    better designed ones without removing them. For example, the newer [solveset](../modules/solvers/solveset.html#solveset)
    API was designed to be a superior replacement for the older [solve](../modules/solvers/solvers.html#solvers-docs)
    API. But the older `solve()` function remains intact and is still supported.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to try to be cognizant of API design whenever adding new functionality.
    Try to consider what a function may do in the future, and design the API in a
    way that it can do so without having to make a breaking change. For example, if
    you add a property to an object `A.attr`, it is impossible to later convert that
    property into a method `A.attr()` so that it can take arguments, except by doing
    so in a backwards incompatible way. If you are unsure about your API design for
    a new functionality, one option is to mark the new functionality as explicitly
    private or as experimental.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that being said, it may be decided that the API of SymPy must change in
    some incompatible way. Some reasons APIs are changed can include:'
  prefs: []
  type: TYPE_NORMAL
- en: The existing API is confusing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is unnecessary redundancy in the API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The existing API limits what is possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because one of the core use-cases of SymPy is to be usable as a library, we
    take API breakage very seriously. Whenever an API breakage is necessary, the following
    steps should be taken:'
  prefs: []
  type: TYPE_NORMAL
- en: Discuss the API change with the community. Be sure that the improved API is
    indeed better, and worth a breakage. It is important to get API right so that
    we will not need to break the API again to “fix” it a second time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is possible, deprecate the old API. The technical steps for doing this
    are described [below](#deprecation-how-to).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document the change so that users know how to update their code. The documentation
    that should added is described [below](#deprecation-documentation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When does a change require deprecation?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When considering whether a change requires a deprecation, two things must be
    considered:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the change backwards incompatible?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the behavior changing public API?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A change is backwards incompatible if user code making use of it would stop
    working after the change.
  prefs: []
  type: TYPE_NORMAL
- en: What counts as “public API” needs to be considered on a case-by-case basis.
    The exact rules for what does and doesn’t constitute public API for SymPy are
    still not yet fully codified. Cleaning up the distinction between public and private
    APIs, as well as the categorization in the reference documentation is currently
    an [open issue for SymPy](https://github.com/sympy/sympy/issues/23037).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some thing that constitute public API. *Note: these are just general
    guidelines. This list is not exhaustive, and there are always exceptions to the
    rules.*'
  prefs: []
  type: TYPE_NORMAL
- en: Public API
  prefs: []
  type: TYPE_NORMAL
- en: Function names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyword argument names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyword argument default values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Positional argument order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submodule names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mathematical conventions used to define a function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And here are some things that generally aren’t public API, and therefore don’t
    require deprecations to change (again, this list is only a general set of guidelines).
  prefs: []
  type: TYPE_NORMAL
- en: Not Public API
  prefs: []
  type: TYPE_NORMAL
- en: The precise form of an expression. In general, functions may be changed to return
    a different but mathematically equivalent form of the same expression. This includes
    a function returning a value which it was not able to compute previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions and methods that are private, i.e., for internal use only. Such things
    should generally be prefixed with an underscore `_`, although this convention
    is not currently universally adhered to in the SymPy codebase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything explicitly marked as “experimental”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to behavior that were mathematically incorrect previously (in general,
    bug fixes are not considered breaking changes, because despite the saying, bugs
    in SymPy are not features).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything that was added before the most recent release. Code that has not yet
    made it into a release does not need to be deprecated. If you are going to change
    the API of new code, it is best to do it before a release is made so that no deprecations
    are necessary for future releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: both public and private API functions are included in the [reference
    documentation](../reference/index.html#reference), and many functions are not
    included there which should be, or are not documented at all which should be,
    so this should not be used to determine whether something public or not.'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re unsure, there is no harm in deprecating something even if it might
    not actually be “public API”.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of deprecation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deprecation has several purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: To allow existing code to continue to work for a while, giving people a chance
    to upgrade SymPy without fixing all deprecation issues immediately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To warn users that their code will break in a future version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To inform users how to fix their code so that it will continue work in future
    versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All deprecation warnings should be something that users can remove by updating
    their code. Deprecation warnings that fire unconditionally, even when using the
    “correct” newer APIs, should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: This also means all deprecated code must have a completely functioning replacement.
    If there is no way for users to update their code, then this means API in question
    is not yet read to be deprecated. The deprecation warning should inform users
    of a way to change their code so that it works in the same version of SymPy, as
    well as all future versions, and, if possible, previous versions of SymPy as well.
    See [below](#deprecation-documentation).
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations should always
  prefs: []
  type: TYPE_NORMAL
- en: Allow users to continue to use the existing APIs unchanged during the deprecation
    period (with a warning, which can be [silenced](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)
    with `warnings.filterwarnings`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow users to always fix their code so that it stops giving the warning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After users fix their code, it should continue to work after the deprecated
    code is removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third point is important. We do not want the “new” method to itself cause
    another API break when the deprecation period is over. Doing this would completely
    defeat the purpose of doing a deprecation.
  prefs: []
  type: TYPE_NORMAL
- en: When it is not technically possible to deprecate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, this is not technically possible to make a deprecation that follows
    the above three rules. API changes of this nature should be considered the most
    heavily, as they will break people’s code immediately without warning. Consideration
    into how easy it will be for users to support multiple versions of SymPy, one
    with the change and one without, should also be taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you decide that the change is nonetheless worth making, there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the non-deprecatable change immediately, with no warnings. This will break
    user code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warn that the code will change in the future. There won’t be a way for users
    to fix their code until a version is released with the breaking change, but they
    will at least be aware that changes are coming.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of the two to make should decided on a case-by-case basis.
  prefs: []
  type: TYPE_NORMAL
- en: How long should deprecations last?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deprecations should remain intact for **at least 1 year** after the first major
    release is made with the deprecation. This is only a minimum period: deprecations
    are allowed to remain intact for longer than this. If a change is especially hard
    for users to migrate, the deprecation period should be lengthened. The period
    may also be lengthened for deprecated features that do not impose a significant
    maintenance burden to keep around.'
  prefs: []
  type: TYPE_NORMAL
- en: The deprecation period policy is time-based rather than release-based for a
    few reasons. Firstly, SymPy does not have a regular release schedule. Sometimes
    multiple releases will be made in a year, and some years only a single release
    will be made. Being time-based assures that users have sufficient opportunity
    to update their code regardless of how often releases happen to be made.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, SymPy does not make use of a rigorous versioning scheme like semantic
    versioning. The API surface of SymPy and number of contributions are both large
    enough that virtually every major release has some deprecations and backwards
    incompatible changes made in some submodule. Encoding this into the version number
    would be virtually impossible. The development team also does not backport changes
    to prior major releases, except in extreme cases. Thus a time-based deprecation
    scheme is more accurate to SymPy’s releasing model than a version-based one would
    be.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a time-based scheme removes any temptation to “fudge” a deprecation
    period down by releasing early. The best way for the developers to accelerate
    the removal of deprecated functionality is to make a release containing the deprecation
    as early as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '## How to deprecate code'
  prefs: []
  type: TYPE_NORMAL
- en: Checklist
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a checklist for doing a deprecation. See below for details on each step.
  prefs: []
  type: TYPE_NORMAL
- en: Discuss the backwards incompatible change with the community. Ensure the change
    is really worth making as per the discussion above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove all instance of the deprecated code from everywhere in the codebase (including
    doctest examples).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") to the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a descriptive message for the [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). Make sure the message
    explains both what is deprecated and what to replace it with. The message may
    be a multiline string and contain examples.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `deprecated_since_version` to the version in [`sympy/release.py`](https://github.com/sympy/sympy/blob/master/sympy/release.py)
    (without the `.dev`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `active_deprecations_target` to the target used in the `active-deprecations.md`
    file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure `stacklevel` is set to the right value so that the deprecation warning
    shows the user line of code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Visually confirm the deprecation warning looks good in the console.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a `.. deprecated:: <version>` note to the top of the relevant docstring(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a section to the `doc/src/explanation/active-deprecations.md` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a cross-reference target `(deprecation-xyz)=` before the section header
    (this is the same reference used by `active_deprecations_target` above).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain what is deprecated and what to replace it with.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain *why* the given thing is deprecated.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a test using [`warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy") that tests that the deprecation
    warning is issued properly. This test should be the only place in the code that
    actually uses the deprecated functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the test suite to ensure the above test works and that no other code uses
    the deprecated code, which will cause the tests to fail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In your PR, add a `BREAKING CHANGE` entry to the release notes for the deprecation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the PR is merged, manually add the change to the “Backwards compatibility
    breaks and deprecations” section of the release notes on the wiki.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the deprecation to the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All deprecations should use [`sympy.utilities.exceptions.sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). If an entire function
    or method is deprecated, you can use the [`sympy.utilities.decorator.deprecated()`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated") decorator. The `deprecated_since_version`
    and `active_deprecations_target` flags are required. Do not use the `SymPyDeprecationWarning`
    class directly to issue a deprecation warning. Please see the docstring of [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") for more information.
    See [below](#deprecation-documentation) for an example.
  prefs: []
  type: TYPE_NORMAL
- en: Add a test for the deprecated behavior. Use the [`sympy.testing.pytest.warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy") context manager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`warns_deprecated_sympy` is only intended to be used internally by the SymPy
    test suite. Users of SymPy should use the [warnings](https://docs.python.org/3/library/warnings.html)
    module directly to filter SymPy deprecation warnings. See [Silencing SymPy Deprecation
    Warnings](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This has two purposes: to test that the warning is emitted correctly, and to
    test that the deprecated behavior still actually functions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test multiple things and assert that each emits a warning then
    use separate with blocks for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should be the only part of the codebase and test suite that uses the deprecated
    behavior. Everything else should be changed to use the new, non-deprecated behavior.
    The SymPy test suite is configured to fail if a `SymPyDeprecationWarning` is issued
    anywhere except in a `warns_deprecated_sympy()` block. You should not use this
    function or a `warnings.filterwarnings(SymPyDeprecationWarning)` anywhere except
    in the test for the deprecation. This includes the documentation examples. The
    documentation for a deprecated function should just have a note pointing to the
    non-deprecated alternative. If you want to show a deprecated function in a doctest
    use `# doctest: +SKIP`. The only exception to this rule is that you may use `ignore_warnings(SymPyDeprecationWarning)`
    to prevent the exact same warning from triggering twice, i.e., if a deprecated
    function calls another function that issues the same or a similar warning.'
  prefs: []
  type: TYPE_NORMAL
- en: If it is not possible to remove the deprecated behavior somewhere, that is a
    sign that it is not ready to be deprecated yet. Consider that users may not be
    able to replace the deprecated behavior for exact same reason.
  prefs: []
  type: TYPE_NORMAL
- en: '### Documenting a deprecation'
  prefs: []
  type: TYPE_NORMAL
- en: 'All deprecations should be documented. Every deprecation needs to be documented
    in three primary places:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") warning text. This text
    is allowed to be long enough to describe the deprecation, but it should not be
    more than one paragraph. The primary purpose of the warning text should be *to
    inform users how to update their code*. The warning text should *not* discuss
    why a feature was deprecated or unnecessary internal technical details. This discussion
    can go in the other sections mentioned below. Do not include information in the
    message that is already part of the metadata provided to the keyword arguments
    to `sympy_deprecation_warning()`, like the version number or a link to the active
    deprecations document. Remember that the warning text will be shown in plain-text,
    so do not use RST or Markdown markup in the text. Code blocks should be clearly
    delineated with newlines so that they are easy to read. All text in the warning
    message should be wrapped to 80 characters, except for code examples that cannot
    be wrapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always include full context of what is deprecated in the message. For example,
    write “the abc keyword to func() is deprecated” instead of just “the abc keyword
    is deprecated”. That way if a user has a larger line of code that is using the
    deprecated functionality, it will be easier for them to see exactly which part
    is causing the warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A deprecation note in the relevant docstring(s). This should use the [`deprecated`](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated)
    Sphinx directive. This uses the syntax `.. deprecated:: <version>`. If the entire
    function is deprecated, this should be placed at the top of the docstring, right
    below the first line. Otherwise, if only part of a function is deprecated (e.g.,
    a single keyword argument), it should be placed near the part of the docstring
    that discusses that feature, e.g., in the parameters list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The text in the deprecation should be short (no more than a paragraph), explaining
    what is deprecated and what users should use instead. If you want, you may use
    the same text here as in the [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). Be sure to use RST formatting,
    including cross-references to the new function if relevant, and a cross-reference
    to the longer description in the `active-deprecations.md` document (see [below](#deprecations-longer-description)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the documentation for the feature is otherwise the same as the replaced feature
    (i.e., the deprecation is just a renaming of a function or argument), you may
    replace the rest of the documentation with a note like “see the documentation
    for <new feature>”. Otherwise, the documentation for the deprecated functionality
    should be left intact.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here are some (imaginary) examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A longer description of the deprecation should be added to [the page listing
    all currently active deprecations](../explanation/active-deprecations.html#active-deprecations)
    in the documentation (in `doc/src/explanation/active-deprecations.md`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This page is where you can go into more detail about the technical details of
    a deprecation. Here you should also list *why* a feature was deprecated. You may
    link to relevant issues, pull requests, and mailing list discussions about the
    deprecation, but these discussion should be summarized so that users can get the
    basic idea of why the deprecation without having to read through pages of old
    discussions. You may also give longer examples here that would not fit in the
    [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") message or `.. deprecated::`
    text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Every deprecation should have a cross-reference target (using `(target-name)=`
    above the section header) so that the `.. deprecated::` note in the relevant docstring
    can refer to it. This target should also be passed to the `active_deprecations_target`
    option of [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") or [`@deprecated`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated"). This will automatically put a link to
    the page in the documentation in the warning message. The target name should include
    the word “deprecation” or “deprecated” (target names are global in Sphinx, so
    the target name needs to be unique across the entire documentation).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The section header name should be the thing that is deprecated, and should be
    a level 3 header under the corresponding version (typically it should be added
    to the top of the file).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If multiple deprecations are related to one another, they can all share a single
    section on this page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the deprecated function is not included in the top-level `sympy/__init__.py`
    be sure to clearly indicate which submodule the object is referring to. If you
    refer to anything that is documented in the Sphinx module reference, cross-reference
    it, like `` {func}`~.func_name` ``.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that examples here are helpful, but you generally should not use doctests
    to show the deprecated functionality, as this will itself raise the deprecation
    warning and fail the doctest. Instead you may use `# doctest: +SKIP`, or just
    show the example as a code block instead of a doctest.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here are examples corresponding to the (imaginary) examples above:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]py'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is_this_zero(expr1, expr2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]py'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is_this_zero(expr1 - expr2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In addition to the above examples, there are dozens of examples of existing
    deprecations which can be found by searching for `sympy_deprecation_warning` in
    the SymPy codebase
  prefs: []
  type: TYPE_NORMAL
- en: Release notes entry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the pull request, document the breaking change in the release notes section
    with `BREAKING CHANGE`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the PR is merged, you should also add it to the “Backwards compatibility
    breaks and deprecations” section of the release notes for the upcoming release.
    This needs to be done manually, in addition to the change from the bot. See [https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations](https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations)
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a deprecated functionality is removed entirely after its deprecation
    period, this also needs to be marked as a `BREAKING CHANGE` and added to the “Backwards
    compatibility breaks and deprecations” section of the release notes.
  prefs: []
  type: TYPE_NORMAL
