- en: pandas.cut
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.cut.html](https://pandas.pydata.org/docs/reference/api/pandas.cut.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bin values into discrete intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Use cut when you need to segment and sort data values into bins. This function
    is also useful for going from a continuous variable to a categorical variable.
    For example, cut could convert ages to groups of age ranges. Supports binning
    into an equal number of bins, or a pre-specified array of bins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array-like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array to be binned. Must be 1-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '**bins**int, sequence of scalars, or IntervalIndex'
  prefs: []
  type: TYPE_NORMAL
- en: The criteria to bin by.
  prefs: []
  type: TYPE_NORMAL
- en: 'int : Defines the number of equal-width bins in the range of x. The range of
    x is extended by .1% on each side to include the minimum and maximum values of
    x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sequence of scalars : Defines the bin edges allowing for non-uniform width.
    No extension of the range of x is done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IntervalIndex : Defines the exact bins to be used. Note that IntervalIndex
    for bins must be non-overlapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates whether bins includes the rightmost edge or not. If `right == True`
    (the default), then the bins `[1, 2, 3, 4]` indicate (1,2], (2,3], (3,4]. This
    argument is ignored when bins is an IntervalIndex.
  prefs: []
  type: TYPE_NORMAL
- en: '**labels**array or False, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the labels for the returned bins. Must be the same length as the resulting
    bins. If False, returns only integer indicators of the bins. This affects the
    type of the output container (see below). This argument is ignored when bins is
    an IntervalIndex. If True, raises an error. When ordered=False, labels must be
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: '**retbins**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to return the bins or not. Useful when bins is provided as a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int, default 3'
  prefs: []
  type: TYPE_NORMAL
- en: The precision at which to store and display the bins labels.
  prefs: []
  type: TYPE_NORMAL
- en: '**include_lowest**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the first interval should be left-inclusive or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**duplicates**{default ‘raise’, ‘drop’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If bin edges are not unique, raise ValueError or drop non-uniques.
  prefs: []
  type: TYPE_NORMAL
- en: '**ordered**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the labels are ordered or not. Applies to returned types Categorical
    and Series (with Categorical dtype). If True, the resulting categorical will be
    ordered. If False, the resulting categorical will be unordered (labels must be
    provided).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**Categorical, Series, or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array-like object representing the respective bin for each value of x. The
    type depends on the value of labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'None (default) : returns a Series for Series x or a Categorical for all other
    inputs. The values stored within are Interval dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sequence of scalars : returns a Series for Series x or a Categorical for all
    other inputs. The values stored within are whatever the type in the sequence is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'False : returns an ndarray of integers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bins**numpy.ndarray or IntervalIndex.'
  prefs: []
  type: TYPE_NORMAL
- en: The computed or specified bins. Only returned when retbins=True. For scalar
    or sequence bins, this is an ndarray with the computed bins. If set duplicates=drop,
    bins will drop non-unique bin. For an IntervalIndex bins, this is equal to bins.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`qcut`](pandas.qcut.html#pandas.qcut "pandas.qcut")'
  prefs: []
  type: TYPE_NORMAL
- en: Discretize variable into equal-sized buckets based on rank or based on sample
    quantiles.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Categorical`](pandas.Categorical.html#pandas.Categorical "pandas.Categorical")'
  prefs: []
  type: TYPE_NORMAL
- en: Array type for storing data that come from a fixed set of values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series`](pandas.Series.html#pandas.Series "pandas.Series")'
  prefs: []
  type: TYPE_NORMAL
- en: One-dimensional array with axis labels (including time series).
  prefs: []
  type: TYPE_NORMAL
- en: '[`IntervalIndex`](pandas.IntervalIndex.html#pandas.IntervalIndex "pandas.IntervalIndex")'
  prefs: []
  type: TYPE_NORMAL
- en: Immutable Index implementing an ordered, sliceable set.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Any NA values will be NA in the result. Out of bounds values will be NA in the
    resulting Series or Categorical object.
  prefs: []
  type: TYPE_NORMAL
- en: Reference [the user guide](../../user_guide/reshaping.html#reshaping-tile-cut)
    for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Discretize into three equal-sized bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Discovers the same bins, but assign them specific labels. Notice that the returned
    Categorical’s categories are labels and is ordered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`ordered=False` will result in unordered categories when labels are passed.
    This parameter can be used to allow non-unique labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`labels=False` implies you just want the bins back.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Passing a Series as an input returns a Series with categorical dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Passing a Series as an input returns a Series with mapping value. It is used
    to map numerically to intervals based on bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use drop optional when bins is not unique
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Passing an IntervalIndex for bins results in those categories exactly. Notice
    that values not covered by the IntervalIndex are set to NaN. 0 is to the left
    of the first bin (which is closed on the right), and 1.5 falls between two bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
