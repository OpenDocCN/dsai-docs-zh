- en: scipy.stats.gaussian_kde
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Representation of a kernel-density estimate using Gaussian kernels.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel density estimation is a way to estimate the probability density function
    (PDF) of a random variable in a non-parametric way. [`gaussian_kde`](#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde") works for both uni-variate and multi-variate data.
    It includes automatic bandwidth determination. The estimation works best for a
    unimodal distribution; bimodal or multi-modal distributions tend to be oversmoothed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 'Datapoints to estimate from. In case of univariate data this is a 1-D array,
    otherwise a 2-D array with shape (# of dims, # of data).'
  prefs: []
  type: TYPE_NORMAL
- en: '**bw_method**str, scalar or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The method used to calculate the estimator bandwidth. This can be ‘scott’, ‘silverman’,
    a scalar constant or a callable. If a scalar, this will be used directly as *kde.factor*.
    If a callable, it should take a [`gaussian_kde`](#scipy.stats.gaussian_kde "scipy.stats.gaussian_kde")
    instance as only parameter and return a scalar. If None (default), ‘scott’ is
    used. See Notes for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**weights**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: weights of datapoints. This must be the same shape as dataset. If None (default),
    the samples are assumed to be equally weighted
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Bandwidth selection strongly influences the estimate obtained from the KDE (much
    more so than the actual shape of the kernel). Bandwidth selection can be done
    by a “rule of thumb”, by cross-validation, by “plug-in methods” or by other means;
    see [[3]](#ra3a8695506c7-3), [[4]](#ra3a8695506c7-4) for reviews. [`gaussian_kde`](#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde") uses a rule of thumb, the default is Scott’s Rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scott’s Rule [[1]](#ra3a8695506c7-1), implemented as [`scotts_factor`](scipy.stats.gaussian_kde.scotts_factor.html#scipy.stats.gaussian_kde.scotts_factor
    "scipy.stats.gaussian_kde.scotts_factor"), is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'with `n` the number of data points and `d` the number of dimensions. In the
    case of unequally weighted points, [`scotts_factor`](scipy.stats.gaussian_kde.scotts_factor.html#scipy.stats.gaussian_kde.scotts_factor
    "scipy.stats.gaussian_kde.scotts_factor") becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'with `neff` the effective number of datapoints. Silverman’s Rule [[2]](#ra3a8695506c7-2),
    implemented as [`silverman_factor`](scipy.stats.gaussian_kde.silverman_factor.html#scipy.stats.gaussian_kde.silverman_factor
    "scipy.stats.gaussian_kde.silverman_factor"), is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or in the case of unequally weighted points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Good general descriptions of kernel density estimation can be found in [[1]](#ra3a8695506c7-1)
    and [[2]](#ra3a8695506c7-2), the mathematics for this multi-dimensional implementation
    can be found in [[1]](#ra3a8695506c7-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'With a set of weighted samples, the effective number of datapoints `neff` is
    defined by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: as detailed in [[5]](#ra3a8695506c7-5).
  prefs: []
  type: TYPE_NORMAL
- en: '[`gaussian_kde`](#scipy.stats.gaussian_kde "scipy.stats.gaussian_kde") does
    not currently support data that lies in a lower-dimensional subspace of the space
    in which it is expressed. For such data, consider performing principle component
    analysis / dimensionality reduction and using [`gaussian_kde`](#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde") with the transformed data.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1] ([1](#id3),[2](#id5),[3](#id7))'
  prefs: []
  type: TYPE_NORMAL
- en: 'D.W. Scott, “Multivariate Density Estimation: Theory, Practice, and Visualization”,
    John Wiley & Sons, New York, Chicester, 1992.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] ([1](#id4),[2](#id6))'
  prefs: []
  type: TYPE_NORMAL
- en: B.W. Silverman, “Density Estimation for Statistics and Data Analysis”, Vol.
    26, Monographs on Statistics and Applied Probability, Chapman and Hall, London,
    1986.
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'B.A. Turlach, “Bandwidth Selection in Kernel Density Estimation: A Review”,
    CORE and Institut de Statistique, Vol. 19, pp. 1-33, 1993.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: D.M. Bashtannyk and R.J. Hyndman, “Bandwidth selection for kernel conditional
    density estimation”, Computational Statistics & Data Analysis, Vol. 36, pp. 279-298,
    2001.
  prefs: []
  type: TYPE_NORMAL
- en: '[[5](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: Gray P. G., 1969, Journal of the Royal Statistical Society. Series A (General),
    132, 272
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate some random two-dimensional data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform a kernel density estimate on the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-gaussian_kde-1.png](../Images/51d34ff3abee541760e769e28612ba62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dataset**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The dataset with which [`gaussian_kde`](#scipy.stats.gaussian_kde "scipy.stats.gaussian_kde")
    was initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '**d**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of datapoints.
  prefs: []
  type: TYPE_NORMAL
- en: '**neff**int'
  prefs: []
  type: TYPE_NORMAL
- en: Effective number of datapoints.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**factor**float'
  prefs: []
  type: TYPE_NORMAL
- en: The bandwidth factor, obtained from *kde.covariance_factor*. The square of *kde.factor*
    multiplies the covariance matrix of the data in the kde estimation.
  prefs: []
  type: TYPE_NORMAL
- en: '**covariance**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The covariance matrix of *dataset*, scaled by the calculated bandwidth (*kde.factor*).
  prefs: []
  type: TYPE_NORMAL
- en: '**inv_cov**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of *covariance*.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`evaluate`](scipy.stats.gaussian_kde.evaluate.html#scipy.stats.gaussian_kde.evaluate
    "scipy.stats.gaussian_kde.evaluate")(points) | Evaluate the estimated pdf on a
    set of points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`__call__`](scipy.stats.gaussian_kde.__call__.html#scipy.stats.gaussian_kde.__call__
    "scipy.stats.gaussian_kde.__call__")(points) | Evaluate the estimated pdf on a
    set of points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate_gaussian`](scipy.stats.gaussian_kde.integrate_gaussian.html#scipy.stats.gaussian_kde.integrate_gaussian
    "scipy.stats.gaussian_kde.integrate_gaussian")(mean, cov) | Multiply estimated
    density by a multivariate Gaussian and integrate over the whole space. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate_box_1d`](scipy.stats.gaussian_kde.integrate_box_1d.html#scipy.stats.gaussian_kde.integrate_box_1d
    "scipy.stats.gaussian_kde.integrate_box_1d")(low, high) | Computes the integral
    of a 1D pdf between two bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate_box`](scipy.stats.gaussian_kde.integrate_box.html#scipy.stats.gaussian_kde.integrate_box
    "scipy.stats.gaussian_kde.integrate_box")(low_bounds, high_bounds[, maxpts]) |
    Computes the integral of a pdf over a rectangular interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate_kde`](scipy.stats.gaussian_kde.integrate_kde.html#scipy.stats.gaussian_kde.integrate_kde
    "scipy.stats.gaussian_kde.integrate_kde")(other) | Computes the integral of the
    product of this kernel density estimate with another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdf`](scipy.stats.gaussian_kde.pdf.html#scipy.stats.gaussian_kde.pdf "scipy.stats.gaussian_kde.pdf")(x)
    | Evaluate the estimated pdf on a provided set of points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logpdf`](scipy.stats.gaussian_kde.logpdf.html#scipy.stats.gaussian_kde.logpdf
    "scipy.stats.gaussian_kde.logpdf")(x) | Evaluate the log of the estimated pdf
    on a provided set of points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resample`](scipy.stats.gaussian_kde.resample.html#scipy.stats.gaussian_kde.resample
    "scipy.stats.gaussian_kde.resample")([size, seed]) | Randomly sample a dataset
    from the estimated pdf. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_bandwidth`](scipy.stats.gaussian_kde.set_bandwidth.html#scipy.stats.gaussian_kde.set_bandwidth
    "scipy.stats.gaussian_kde.set_bandwidth")([bw_method]) | Compute the estimator
    bandwidth with given method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`covariance_factor`](scipy.stats.gaussian_kde.covariance_factor.html#scipy.stats.gaussian_kde.covariance_factor
    "scipy.stats.gaussian_kde.covariance_factor")() | Computes the coefficient (*kde.factor*)
    that multiplies the data covariance matrix to obtain the kernel covariance matrix.
    |'
  prefs: []
  type: TYPE_TB
