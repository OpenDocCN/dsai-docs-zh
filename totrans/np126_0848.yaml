- en: numpy.gradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.gradient.html](https://numpy.org/doc/1.26/reference/generated/numpy.gradient.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the gradient of an N-dimensional array.
  prefs: []
  type: TYPE_NORMAL
- en: The gradient is computed using second order accurate central differences in
    the interior points and either first or second order accurate one-sides (forward
    or backwards) differences at the boundaries. The returned gradient hence has the
    same shape as the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An N-dimensional array containing samples of a scalar function.
  prefs: []
  type: TYPE_NORMAL
- en: '**varargs**list of scalar or array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Spacing between f values. Default unitary spacing for all dimensions. Spacing
    can be specified using:'
  prefs: []
  type: TYPE_NORMAL
- en: single scalar to specify a sample distance for all dimensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: N scalars to specify a constant sample distance for each dimension. i.e. *dx*,
    *dy*, *dz*, …
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: N arrays to specify the coordinates of the values along each dimension of F.
    The length of the array must match the size of the corresponding dimension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any combination of N scalars/arrays with the meaning of 2\. and 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If *axis* is given, the number of varargs must equal the number of axes. Default:
    1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**edge_order**{1, 2}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradient is calculated using N-th order accurate differences at the boundaries.
    Default: 1.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.1.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient is calculated only along the given axis or axes The default (axis =
    None) is to calculate the gradient for all the axes of the input array. axis may
    be negative, in which case it counts from the last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**gradient**ndarray or list of ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A list of ndarrays (or a single ndarray if there is only one dimension) corresponding
    to the derivatives of f with respect to each dimension. Each derivative has the
    same shape as f.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that \(f\in C^{3}\) (i.e., \(f\) has at least 3 continuous derivatives)
    and let \(h_{*}\) be a non-homogeneous stepsize, we minimize the “consistency
    error” \(\eta_{i}\) between the true gradient and its estimate from a linear combination
    of the neighboring grid-points:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\eta_{i} = f_{i}^{\left(1\right)} - \left[ \alpha f\left(x_{i}\right) + \beta
    f\left(x_{i} + h_{d}\right) + \gamma f\left(x_{i}-h_{s}\right) \right]\]
  prefs: []
  type: TYPE_NORMAL
- en: 'By substituting \(f(x_{i} + h_{d})\) and \(f(x_{i} - h_{s})\) with their Taylor
    series expansion, this translates into solving the following the linear system:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\left\{ \begin{array}{r} \alpha+\beta+\gamma=0 \\ \beta h_{d}-\gamma
    h_{s}=1 \\ \beta h_{d}^{2}+\gamma h_{s}^{2}=0 \end{array} \right.\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting approximation of \(f_{i}^{(1)}\) is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\hat f_{i}^{(1)} = \frac{ h_{s}^{2}f\left(x_{i} + h_{d}\right) + \left(h_{d}^{2}
    - h_{s}^{2}\right)f\left(x_{i}\right) - h_{d}^{2}f\left(x_{i}-h_{s}\right)} {
    h_{s}h_{d}\left(h_{d} + h_{s}\right)} + \mathcal{O}\left(\frac{h_{d}h_{s}^{2}
    + h_{s}h_{d}^{2}}{h_{d} + h_{s}}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth noting that if \(h_{s}=h_{d}\) (i.e., data are evenly spaced) we
    find the standard second order approximation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\hat f_{i}^{(1)}= \frac{f\left(x_{i+1}\right) - f\left(x_{i-1}\right)}{2h}
    + \mathcal{O}\left(h^{2}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: With a similar procedure the forward/backward approximations used for boundaries
    can be derived.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarteroni A., Sacco R., Saleri F. (2007) Numerical Mathematics (Texts in Applied
    Mathematics). New York: Springer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Durran D. R. (1999) Numerical Methods for Wave Equations in Geophysical Fluid
    Dynamics. New York: Springer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fornberg B. (1988) Generation of Finite Difference Formulas on Arbitrarily
    Spaced Grids, Mathematics of Computation 51, no. 184 : 699-706. [PDF](http://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Spacing can be also specified with an array that represents the coordinates
    of the values F along the dimensions. For instance a uniform spacing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Or a non uniform one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For two dimensional arrays, the return will be two arrays ordered by axis.
    In this example the first array stands for the gradient in rows and the second
    one in columns direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example the spacing is also specified: uniform for axis=0 and non uniform
    for axis=1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to specify how boundaries are treated using *edge_order*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The *axis* keyword can be used to specify a subset of axes of which the gradient
    is calculated
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
