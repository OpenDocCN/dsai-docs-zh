["```py\nsympy.physics.wigner.clebsch_gordan(j_1, j_2, j_3, m_1, m_2, m_3)\n```", "```py\n>>> from sympy import S\n>>> from sympy.physics.wigner import clebsch_gordan\n>>> clebsch_gordan(S(3)/2, S(1)/2, 2, S(3)/2, S(1)/2, 2)\n1\n>>> clebsch_gordan(S(3)/2, S(1)/2, 1, S(3)/2, -S(1)/2, 1)\nsqrt(3)/2\n>>> clebsch_gordan(S(3)/2, S(1)/2, 1, -S(1)/2, S(1)/2, 0)\n-sqrt(2)/2 \n```", "```py\nsympy.physics.wigner.dot_rot_grad_Ynm(j, p, l, m, theta, phi)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.wigner import dot_rot_grad_Ynm\n>>> theta, phi = symbols(\"theta phi\")\n>>> dot_rot_grad_Ynm(3, 2, 2, 0, theta, phi).doit()\n3*sqrt(55)*Ynm(5, 2, theta, phi)/(11*sqrt(pi)) \n```", "```py\nsympy.physics.wigner.gaunt(l_1, l_2, l_3, m_1, m_2, m_3, prec=None)\n```", "```py\n>>> from sympy.physics.wigner import gaunt\n>>> gaunt(1,0,1,1,0,-1)\n-1/(2*sqrt(pi))\n>>> gaunt(1000,1000,1200,9,3,-12).n(64)\n0.006895004219221134484332976156744208248842039317638217822322799675 \n```", "```py\nsage: gaunt(1.2,0,1.2,0,0,0)\nTraceback (most recent call last):\n...\nValueError: l values must be integer\nsage: gaunt(1,0,1,1.1,0,-1.1)\nTraceback (most recent call last):\n...\nValueError: m values must be integer \n```", "```py\nsympy.physics.wigner.racah(aa, bb, cc, dd, ee, ff, prec=None)\n```", "```py\n>>> from sympy.physics.wigner import racah\n>>> racah(3,3,3,3,3,3)\n-1/14 \n```", "```py\nsympy.physics.wigner.real_gaunt(l_1, l_2, l_3, m_1, m_2, m_3, prec=None)\n```", "```py\n>>> from sympy.physics.wigner import real_gaunt\n>>> real_gaunt(2,2,4,-1,-1,0)\n-2/(7*sqrt(pi))\n>>> real_gaunt(10,10,20,-9,-9,0).n(64)\n-0.00002480019791932209313156167176797577821140084216297395518482071448 \n```", "```py\nsympy.physics.wigner.wigner_3j(j_1, j_2, j_3, m_1, m_2, m_3)\n```", "```py\n>>> from sympy.physics.wigner import wigner_3j\n>>> wigner_3j(2, 6, 4, 0, 0, 0)\nsqrt(715)/143\n>>> wigner_3j(2, 6, 4, 0, 0, 1)\n0 \n```", "```py\nsage: wigner_3j(2.1, 6, 4, 0, 0, 0)\nTraceback (most recent call last):\n...\nValueError: j values must be integer or half integer\nsage: wigner_3j(2, 6, 4, 1, 0, -1.1)\nTraceback (most recent call last):\n...\nValueError: m values must be integer or half integer \n```", "```py\nsympy.physics.wigner.wigner_6j(j_1, j_2, j_3, j_4, j_5, j_6, prec=None)\n```", "```py\n>>> from sympy.physics.wigner import wigner_6j\n>>> wigner_6j(3,3,3,3,3,3)\n-1/14\n>>> wigner_6j(5,5,5,5,5,5)\n1/52 \n```", "```py\nsage: wigner_6j(2.5,2.5,2.5,2.5,2.5,2.5)\nTraceback (most recent call last):\n...\nValueError: j values must be integer or half integer and fulfill the triangle relation\nsage: wigner_6j(0.5,0.5,1.1,0.5,0.5,1.1)\nTraceback (most recent call last):\n...\nValueError: j values must be integer or half integer and fulfill the triangle relation \n```", "```py\nsympy.physics.wigner.wigner_9j(j_1, j_2, j_3, j_4, j_5, j_6, j_7, j_8, j_9, prec=None)\n```", "```py\n>>> from sympy.physics.wigner import wigner_9j\n>>> wigner_9j(1,1,1, 1,1,1, 1,1,0, prec=64)\n0.05555555555555555555555555555555555555555555555555555555555555555 \n```", "```py\n>>> wigner_9j(1/2,1/2,0, 1/2,3/2,1, 0,1,1, prec=64)\n0.1666666666666666666666666666666666666666666666666666666666666667 \n```", "```py\nsage: wigner_9j(0.5,0.5,0.5, 0.5,0.5,0.5, 0.5,0.5,0.5,prec=64)\nTraceback (most recent call last):\n...\nValueError: j values must be integer or half integer and fulfill the triangle relation\nsage: wigner_9j(1,1,1, 0.5,1,1.5, 0.5,1,2.5,prec=64)\nTraceback (most recent call last):\n...\nValueError: j values must be integer or half integer and fulfill the triangle relation \n```", "```py\nsympy.physics.wigner.wigner_d(J, alpha, beta, gamma)\n```", "```py\n>>> from sympy.physics.wigner import wigner_d\n>>> from sympy import Integer, symbols, pprint\n>>> half = 1/Integer(2)\n>>> alpha, beta, gamma = symbols(\"alpha, beta, gamma\", real=True)\n>>> pprint(wigner_d(half, alpha, beta, gamma), use_unicode=True)\n⎡  ⅈ⋅α  ⅈ⋅γ             ⅈ⋅α  -ⅈ⋅γ         ⎤\n⎢  ───  ───             ───  ─────        ⎥\n⎢   2    2     ⎛β⎞       2     2      ⎛β⎞ ⎥\n⎢ ℯ   ⋅ℯ   ⋅cos⎜─⎟     ℯ   ⋅ℯ     ⋅sin⎜─⎟ ⎥\n⎢              ⎝2⎠                    ⎝2⎠ ⎥\n⎢                                         ⎥\n⎢  -ⅈ⋅α   ⅈ⋅γ          -ⅈ⋅α   -ⅈ⋅γ        ⎥\n⎢  ─────  ───          ─────  ─────       ⎥\n⎢    2     2     ⎛β⎞     2      2      ⎛β⎞⎥\n⎢-ℯ     ⋅ℯ   ⋅sin⎜─⎟  ℯ     ⋅ℯ     ⋅cos⎜─⎟⎥\n⎣                ⎝2⎠                   ⎝2⎠⎦ \n```", "```py\nsympy.physics.wigner.wigner_d_small(J, beta)\n```", "```py\n>>> from sympy import Integer, symbols, pi, pprint\n>>> from sympy.physics.wigner import wigner_d_small\n>>> half = 1/Integer(2)\n>>> beta = symbols(\"beta\", real=True)\n>>> pprint(wigner_d_small(half, beta), use_unicode=True)\n⎡   ⎛β⎞      ⎛β⎞⎤\n⎢cos⎜─⎟   sin⎜─⎟⎥\n⎢   ⎝2⎠      ⎝2⎠⎥\n⎢               ⎥\n⎢    ⎛β⎞     ⎛β⎞⎥\n⎢-sin⎜─⎟  cos⎜─⎟⎥\n⎣    ⎝2⎠     ⎝2⎠⎦ \n```", "```py\n>>> pprint(wigner_d_small(2*half, beta), use_unicode=True)\n⎡        2⎛β⎞              ⎛β⎞    ⎛β⎞           2⎛β⎞     ⎤\n⎢     cos ⎜─⎟        √2⋅sin⎜─⎟⋅cos⎜─⎟        sin ⎜─⎟     ⎥\n⎢         ⎝2⎠              ⎝2⎠    ⎝2⎠            ⎝2⎠     ⎥\n⎢                                                        ⎥\n⎢       ⎛β⎞    ⎛β⎞       2⎛β⎞      2⎛β⎞        ⎛β⎞    ⎛β⎞⎥\n⎢-√2⋅sin⎜─⎟⋅cos⎜─⎟  - sin ⎜─⎟ + cos ⎜─⎟  √2⋅sin⎜─⎟⋅cos⎜─⎟⎥\n⎢       ⎝2⎠    ⎝2⎠        ⎝2⎠       ⎝2⎠        ⎝2⎠    ⎝2⎠⎥\n⎢                                                        ⎥\n⎢        2⎛β⎞               ⎛β⎞    ⎛β⎞          2⎛β⎞     ⎥\n⎢     sin ⎜─⎟        -√2⋅sin⎜─⎟⋅cos⎜─⎟       cos ⎜─⎟     ⎥\n⎣         ⎝2⎠               ⎝2⎠    ⎝2⎠           ⎝2⎠     ⎦ \n```", "```py\n>>> pprint(wigner_d_small(half, beta).subs({beta:pi/2}), use_unicode=True)\n⎡ √2   √2⎤\n⎢ ──   ──⎥\n⎢ 2    2 ⎥\n⎢        ⎥\n⎢-√2   √2⎥\n⎢────  ──⎥\n⎣ 2    2 ⎦ \n```", "```py\n>>> pprint(wigner_d_small(2*half, beta).subs({beta:pi/2}),\n... use_unicode=True)\n⎡       √2      ⎤\n⎢1/2    ──   1/2⎥\n⎢       2       ⎥\n⎢               ⎥\n⎢-√2         √2 ⎥\n⎢────   0    ── ⎥\n⎢ 2          2  ⎥\n⎢               ⎥\n⎢      -√2      ⎥\n⎢1/2   ────  1/2⎥\n⎣       2       ⎦ \n```", "```py\n>>> pprint(wigner_d_small(3*half, beta).subs({beta:pi/2}),\n... use_unicode=True)\n⎡ √2    √6    √6   √2⎤\n⎢ ──    ──    ──   ──⎥\n⎢ 4     4     4    4 ⎥\n⎢                    ⎥\n⎢-√6   -√2    √2   √6⎥\n⎢────  ────   ──   ──⎥\n⎢ 4     4     4    4 ⎥\n⎢                    ⎥\n⎢ √6   -√2   -√2   √6⎥\n⎢ ──   ────  ────  ──⎥\n⎢ 4     4     4    4 ⎥\n⎢                    ⎥\n⎢-√2    √6   -√6   √2⎥\n⎢────   ──   ────  ──⎥\n⎣ 4     4     4    4 ⎦ \n```", "```py\n>>> pprint(wigner_d_small(4*half, beta).subs({beta:pi/2}),\n... use_unicode=True)\n⎡             √6            ⎤\n⎢1/4   1/2    ──   1/2   1/4⎥\n⎢             4             ⎥\n⎢                           ⎥\n⎢-1/2  -1/2   0    1/2   1/2⎥\n⎢                           ⎥\n⎢ √6                     √6 ⎥\n⎢ ──    0    -1/2   0    ── ⎥\n⎢ 4                      4  ⎥\n⎢                           ⎥\n⎢-1/2  1/2    0    -1/2  1/2⎥\n⎢                           ⎥\n⎢             √6            ⎥\n⎢1/4   -1/2   ──   -1/2  1/4⎥\n⎣             4             ⎦ \n```"]