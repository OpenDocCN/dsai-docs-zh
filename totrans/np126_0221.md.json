["```py\nnumpy.take_along_axis(arr, indices, axis)\n```", "```py\nNi, M, Nk = a.shape[:axis], a.shape[axis], a.shape[axis+1:]\nJ = indices.shape[axis]  # Need not equal M\nout = np.empty(Ni + (J,) + Nk)\n\nfor ii in ndindex(Ni):\n    for kk in ndindex(Nk):\n        a_1d       = a      [ii + s_[:,] + kk]\n        indices_1d = indices[ii + s_[:,] + kk]\n        out_1d     = out    [ii + s_[:,] + kk]\n        for j in range(J):\n            out_1d[j] = a_1d[indices_1d[j]] \n```", "```py\nout_1d[:] = a_1d[indices_1d] \n```", "```py\n>>> a = np.array([[10, 30, 20], [60, 40, 50]]) \n```", "```py\n>>> np.sort(a, axis=1)\narray([[10, 20, 30],\n [40, 50, 60]])\n>>> ai = np.argsort(a, axis=1)\n>>> ai\narray([[0, 2, 1],\n [1, 2, 0]])\n>>> np.take_along_axis(a, ai, axis=1)\narray([[10, 20, 30],\n [40, 50, 60]]) \n```", "```py\n>>> np.max(a, axis=1, keepdims=True)\narray([[30],\n [60]])\n>>> ai = np.argmax(a, axis=1, keepdims=True)\n>>> ai\narray([[1],\n [0]])\n>>> np.take_along_axis(a, ai, axis=1)\narray([[30],\n [60]]) \n```", "```py\n>>> ai_min = np.argmin(a, axis=1, keepdims=True)\n>>> ai_max = np.argmax(a, axis=1, keepdims=True)\n>>> ai = np.concatenate([ai_min, ai_max], axis=1)\n>>> ai\narray([[0, 1],\n [1, 0]])\n>>> np.take_along_axis(a, ai, axis=1)\narray([[10, 30],\n [40, 60]]) \n```"]