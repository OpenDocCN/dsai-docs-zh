- en: Parsing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析
- en: Original text：[https://docs.sympy.org/latest/modules/parsing.html](https://docs.sympy.org/latest/modules/parsing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.sympy.org/latest/modules/parsing.html](https://docs.sympy.org/latest/modules/parsing.html)
- en: '## Parsing Functions Reference'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 解析函数参考'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Converts the string `s` to a SymPy expression, in `local_dict`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串`s`转换为SymPy表达式，在`local_dict`中。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**s** : str'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**s** : str'
- en: The string to parse.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要解析的字符串。
- en: '**local_dict** : dict, optional'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**local_dict** : dict, optional'
- en: A dictionary of local variables to use when parsing.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于解析时使用的局部变量字典。
- en: '**global_dict** : dict, optional'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**global_dict** : dict, optional'
- en: A dictionary of global variables. By default, this is initialized with `from
    sympy import *`; provide this parameter to override this behavior (for instance,
    to parse `"Q & S"`).
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 全局变量的字典。默认情况下，这是通过`from sympy import *`初始化的；提供此参数以覆盖此行为（例如，解析`"Q & S"`）。
- en: '**transformations** : tuple or str'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**transformations** : tuple or str'
- en: A tuple of transformation functions used to modify the tokens of the parsed
    expression before evaluation. The default transformations convert numeric literals
    into their SymPy equivalents, convert undefined variables into SymPy symbols,
    and allow the use of standard mathematical factorial notation (e.g. `x!`). Selection
    via string is available (see below).
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于修改解析表达式中的令牌以进行评估之前的转换函数元组。默认转换将数值文字转换为它们的SymPy等效项，将未定义的变量转换为SymPy符号，并允许使用标准数学阶乘符号表示法（例如，`x!`）。可以通过字符串选择（请参见下文）。
- en: '**evaluate** : bool, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**evaluate** : bool, optional'
- en: When False, the order of the arguments will remain as they were in the string
    and automatic simplification that would normally occur is suppressed. (see examples)
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当设置为False时，参数的顺序将保持在字符串中的原样，并且将抑制通常会发生的自动简化。（参见示例）
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When evaluate=False, some automatic simplifications will not occur:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当evaluate=False时，某些自动简化将不会发生：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In addition the order of the arguments will not be made canonical. This feature
    allows one to tell exactly how the expression was entered:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，参数的顺序不会变得规范化。此功能允许精确了解表达式的输入方式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note, however, that when these expressions are printed they will appear the
    same:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，但是，当打印这些表达式时，它们看起来将是相同的：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As a convenience, transformations can be seen by printing `transformations`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为便利，可以通过打印`transformations`查看转换：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `T` object provides a way to select these transformations:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`T`对象提供了一种选择这些转换的方法：'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you print it, you will see the same list as shown above.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打印它，您将看到与上面显示的相同列表。
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Standard slicing will return a tuple of transformations:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 标准切片将返回转换的元组：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So `T` can be used to specify the parsing transformations:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`T`可用于指定解析转换：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As a further convenience, strings ‘implicit’ and ‘all’ can be used to select
    0-5 and all the transformations, respectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步方便起见，可以使用字符串'implicit'和'all'来选择0-5个和所有转换，分别。
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`stringify_expr`](#sympy.parsing.sympy_parser.stringify_expr "sympy.parsing.sympy_parser.stringify_expr"),
    [`eval_expr`](#sympy.parsing.sympy_parser.eval_expr "sympy.parsing.sympy_parser.eval_expr"),
    [`standard_transformations`](#sympy.parsing.sympy_parser.standard_transformations
    "sympy.parsing.sympy_parser.standard_transformations"), [`implicit_multiplication_application`](#sympy.parsing.sympy_parser.implicit_multiplication_application
    "sympy.parsing.sympy_parser.implicit_multiplication_application")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`stringify_expr`](#sympy.parsing.sympy_parser.stringify_expr "sympy.parsing.sympy_parser.stringify_expr"),
    [`eval_expr`](#sympy.parsing.sympy_parser.eval_expr "sympy.parsing.sympy_parser.eval_expr"),
    [`standard_transformations`](#sympy.parsing.sympy_parser.standard_transformations
    "sympy.parsing.sympy_parser.standard_transformations"), [`implicit_multiplication_application`](#sympy.parsing.sympy_parser.implicit_multiplication_application
    "sympy.parsing.sympy_parser.implicit_multiplication_application")'
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Converts the string `s` to Python code, in `local_dict`
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串`s`转换为Python代码，在`local_dict`中
- en: Generally, `parse_expr` should be used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应使用`parse_expr`。
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Evaluate Python code generated by `stringify_expr`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 评估由`stringify_expr`生成的Python代码。
- en: Generally, `parse_expr` should be used.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应使用`parse_expr`。
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Translate a string containing a Wolfram Mathematica expression to a SymPy expression.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含Wolfram Mathematica表达式的字符串转换为SymPy表达式。
- en: If the translator is unable to find a suitable SymPy expression, the `FullForm`
    of the Mathematica expression will be output, using SymPy `Function` objects as
    nodes of the syntax tree.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果转换器无法找到合适的SymPy表达式，则将输出Mathematica表达式的`FullForm`，使用SymPy `Function` 对象作为语法树的节点。
- en: Examples
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Both standard input form and Mathematica full form are supported:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 支持标准输入形式和Mathematica完整形式：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To get a matrix from Wolfram’s code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从Wolfram的代码中获取矩阵：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the translation into equivalent SymPy expressions fails, an SymPy expression
    equivalent to Wolfram Mathematica’s “FullForm” will be created:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果翻译成相应的 SymPy 表达式失败，则将创建一个类似于 Wolfram Mathematica 的“FullForm”的 SymPy 表达式：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Parsing Transformations Reference
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析转换参考
- en: A transformation is a function that accepts the arguments `tokens, local_dict,
    global_dict` and returns a list of transformed tokens. They can be used by passing
    a list of functions to [`parse_expr()`](#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr") and are applied in the order given.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 转换是一个接受参数`tokens, local_dict, global_dict`的函数，返回一个转换后的令牌列表。它们可以通过将函数列表传递给[`parse_expr()`](#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr")来使用，并按给定顺序应用。
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Standard transformations for [`parse_expr()`](#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr"). Inserts calls to [`Symbol`](core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol"), [`Integer`](core.html#sympy.core.numbers.Integer
    "sympy.core.numbers.Integer"), and other SymPy datatypes and allows the use of
    standard factorial notation (e.g. `x!`).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`parse_expr()`](#sympy.parsing.sympy_parser.parse_expr "sympy.parsing.sympy_parser.parse_expr")的标准转换。插入对[`Symbol`](core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol")、[`Integer`](core.html#sympy.core.numbers.Integer "sympy.core.numbers.Integer")和其他
    SymPy 数据类型的调用，并允许使用标准阶乘符号（例如`x!`）。'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Splits symbol names for implicit multiplication.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为隐式乘法分割符号名称。
- en: Intended to let expressions like `xyz` be parsed as `x*y*z`. Does not split
    Greek character names, so `theta` will *not* become `t*h*e*t*a`. Generally this
    should be used with `implicit_multiplication`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在使表达式如`xyz`被解析为`x*y*z`。不会分割希腊字符名称，因此`theta`不会变成`t*h*e*t*a`。通常与`implicit_multiplication`一起使用。
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creates a transformation that splits symbol names.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个能分割符号名称的转换。
- en: '`predicate` should return True if the symbol name is to be split.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果符号名称应分割，则`predicate`应返回True。
- en: 'For instance, to retain the default behavior but avoid splitting certain symbol
    names, a predicate like this would work:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为保留默认行为但避免分割某些符号名称，可以使用类似这样的谓词：
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Makes the multiplication operator optional in most cases.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下使乘法运算符可选。
- en: Use this before [`implicit_application()`](#sympy.parsing.sympy_parser.implicit_application
    "sympy.parsing.sympy_parser.implicit_application"), otherwise expressions like
    `sin 2x` will be parsed as `x * sin(2)` rather than `sin(2*x)`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`implicit_application()`](#sympy.parsing.sympy_parser.implicit_application
    "sympy.parsing.sympy_parser.implicit_application")之前使用此转换，否则类似`sin 2x`的表达式将被解析为`x
    * sin(2)`而不是`sin(2*x)`。
- en: Examples
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Makes parentheses optional in some cases for function calls.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下使括号对函数调用可选。
- en: Use this after [`implicit_multiplication()`](#sympy.parsing.sympy_parser.implicit_multiplication
    "sympy.parsing.sympy_parser.implicit_multiplication"), otherwise expressions like
    `sin 2x` will be parsed as `x * sin(2)` rather than `sin(2*x)`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`implicit_multiplication()`](#sympy.parsing.sympy_parser.implicit_multiplication
    "sympy.parsing.sympy_parser.implicit_multiplication")之后使用此转换，否则类似`sin 2x`的表达式将被解析为`x
    * sin(2)`而不是`sin(2*x)`。
- en: Examples
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Allows functions to be exponentiated, e.g. `cos**2(x)`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 允许对函数进行指数化，例如`cos**2(x)`。
- en: Examples
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE29]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Allows a slightly relaxed syntax.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 允许稍微宽松的语法。
- en: Parentheses for single-argument method calls are optional.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对单参数方法调用的括号是可选的。
- en: Multiplication is implicit.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法是隐式的。
- en: Symbol names can be split (i.e. spaces are not needed between symbols).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号名称可以被分割（即符号之间不需要空格）。
- en: Functions can be exponentiated.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以被指数化。
- en: Examples
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Converts floats into `Rational`. Run AFTER `auto_number`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将浮点数转换为`Rational`。在`auto_number`之后运行。
- en: '[PRE33]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Treats XOR, `^`, as exponentiation, `**`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将XOR `^`视为指数运算`**`。
- en: These are included in [`sympy.parsing.sympy_parser.standard_transformations`](#sympy.parsing.sympy_parser.standard_transformations
    "sympy.parsing.sympy_parser.standard_transformations") and generally don’t need
    to be manually added by the user.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包含在[`sympy.parsing.sympy_parser.standard_transformations`](#sympy.parsing.sympy_parser.standard_transformations
    "sympy.parsing.sympy_parser.standard_transformations")中，通常不需要用户手动添加。
- en: '[PRE34]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Substitutes “lambda” with its SymPy equivalent Lambda(). However, the conversion
    does not take place if only “lambda” is passed because that is a syntax error.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将“lambda”替换为其 SymPy 等效的 Lambda()。但是，如果仅传递“lambda”，则不会进行转换，因为那是语法错误。
- en: '[PRE35]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Inserts calls to `Symbol`/`Function` for undefined variables.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 插入对未定义变量的`Symbol`/`Function`调用。
- en: '[PRE36]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Allows 0.2[1] notation to represent the repeated decimal 0.2111… (19/90)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 允许0.2[1]表示重复的十进制数0.2111...（19/90）。
- en: Run this before auto_number.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`auto_number`之前运行。
- en: '[PRE37]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Converts numeric literals to use SymPy equivalents.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将数值文字转换为SymPy的等价物。
- en: Complex numbers use `I`, integer literals use `Integer`, and float literals
    use `Float`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 复数使用 `I`，整数文字使用 `Integer`，浮点文字使用 `Float`。
- en: '[PRE38]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Allows standard notation for factorial.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 允许阶乘的标准表示法。
- en: Experimental \(\mathrm{\LaTeX}\) Parsing
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验性的 \(\mathrm{\LaTeX}\) 解析
- en: The current implementations are experimental. The behavior, parser backend(s)
    and API might change in the future. Unlike some of the other parsers, \(\mathrm{\LaTeX}\)
    is designed as a *type-setting* language, not a *computer algebra system* and
    so can contain typographical conventions that might be interpreted multiple ways.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当前实现是实验性的。行为、解析器后端和API可能会在未来发生变化。与其他一些解析器不同，\(\mathrm{\LaTeX}\) 设计为*排版*语言，而不是*计算代数系统*，因此可能包含可被多种方式解释的排版约定。
- en: \(\mathrm{\LaTeX}\) Parsing Functions Reference
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: \(\mathrm{\LaTeX}\) 解析函数参考
- en: '[PRE39]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Converts the input LaTeX string `s` to a SymPy `Expr`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将输入的LaTeX字符串 `s` 转换为SymPy的 `Expr`。
- en: 'Parameters:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**s** : str'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**s**：str'
- en: The LaTeX string to parse. In Python source containing LaTeX, *raw strings*
    (denoted with `r"`, like this one) are preferred, as LaTeX makes liberal use of
    the `\` character, which would trigger escaping in normal Python strings.
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要解析的LaTeX字符串。在包含LaTeX的Python源代码中，推荐使用*原始字符串*（用`r"`表示，像这样），因为LaTeX大量使用`\`字符，这会触发正常Python字符串中的转义。
- en: '**backend** : str, optional'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**后端**：str，可选'
- en: 'Currently, there are two backends supported: ANTLR, and Lark. The default setting
    is to use the ANTLR backend, which can be changed to Lark if preferred.'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 目前支持两种后端：ANTLR 和 Lark。默认设置为使用ANTLR后端，可以根据需要更改为Lark。
- en: ''
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use `backend="antlr"` for the ANTLR-based parser, and `backend="lark"` for the
    Lark-based parser.
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 `backend="antlr"` 选择基于ANTLR的解析器，使用 `backend="lark"` 选择基于Lark的解析器。
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `backend` option is case-sensitive, and must be in all lowercase.
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`backend` 选项区分大小写，必须全部小写。'
- en: '**strict** : bool, optional'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**严格模式**：bool，可选'
- en: This option is only available with the ANTLR backend.
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项仅在ANTLR后端可用。
- en: ''
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If True, raise an exception if the string cannot be parsed as valid LaTeX. If
    False, try to recover gracefully from common mistakes.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为True，如果字符串无法解析为有效的LaTeX，则引发异常。如果为False，则尝试从常见错误中恢复。
- en: Examples
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE40]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: ANTLR Backend
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ANTLR 后端
- en: The ANTLR-based \(\mathrm{\LaTeX}\) parser was ported from [latex2sympy](https://github.com/augustt198/latex2sympy).
    While functional and its API should remain stable, the parsing behavior or backend
    may change in future releases.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基于ANTLR的 \(\mathrm{\LaTeX}\) 解析器是从[latex2sympy](https://github.com/augustt198/latex2sympy)移植过来的。虽然功能齐备，其API应保持稳定，但解析行为或后端可能会在未来版本中更改。
- en: '#### ANTLR \(\mathrm{\LaTeX}\) Parser Caveats'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '#### ANTLR \(\mathrm{\LaTeX}\) 解析器注意事项'
- en: 'In its current definition, the parser may fail to fully parse an expression,
    yet not throw a warning:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前定义中，解析器可能无法完全解析表达式，但不会发出警告：
- en: '[PRE41]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: will simply find `x`. What is covered by this behavior will almost certainly
    change between releases, and become stricter, more relaxed, or some mix.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地找到 `x`。这种行为的覆盖范围几乎肯定会在版本之间发生变化，并变得更严格、更宽松或者两者兼而有之。
- en: Lark Backend
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lark 后端
- en: The Lark-based LaTeX parser is newer, and is intended to eventually completely
    replace the ANTLR-based parser. It has most of the features that the ANTLR-based
    parser provides, with some extras.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Lark的LaTeX解析器是更新的，旨在最终完全取代基于ANTLR的解析器。它具有大多数基于ANTLR的解析器提供的功能，并添加了一些额外功能。
- en: Lark \(\mathrm{\LaTeX}\) Parser Features
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lark \(\mathrm{\LaTeX}\) 解析器特性
- en: 'One thing to note is that the Lark backend does not support ill-formed expressions,
    and it does not try to fix any sort of common mistakes that may have occured.
    For example, as mentioned in [the earlier section](#antlr-parser-caveats), the
    ANTLR-based parser would simply find `x` if we run:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Lark后端不支持格式不正确的表达式，并且不会尝试修复任何可能发生的常见错误。例如，如在[前一节](#antlr-parser-caveats)中提到的，ANTLR基础的解析器将简单地找到
    `x` 如果我们运行：
- en: '[PRE42]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'However, running:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，运行：
- en: '[PRE43]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: will raise an `lark.exceptions.UnexpectedEOF` exception.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将引发一个 `lark.exceptions.UnexpectedEOF` 异常。
- en: 'Apart from that, there are a couple of extra things that the Lark-based parser
    supports that the ANTLR-based parser does not. They are:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Lark基础的解析器支持一些ANTLR基础的解析器不支持的额外功能。它们包括：
- en: Detecting ambiguous expressions, and
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测模棱两可的表达式，以及
- en: Allowing user-customization of the \(\mathrm{\LaTeX}\) grammar at runtime.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许在运行时定制LaTeX语法。
- en: Expressions like \(f(x)\) are technically ambiguous \(\mathrm{\LaTeX}\) expressions
    because the \(f\) might be a function or a variable name. Lark has the capability
    to point out these ambiguities and notify the user, or even return all possible
    interpretations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 像 \(f(x)\) 这样的表达式在技术上是模棱两可的 \(\mathrm{\LaTeX}\) 表达式，因为 \(f\) 可能是一个函数或变量名。Lark
    具有指出这些模棱两可性并通知用户的能力，甚至可以返回所有可能的解释。
- en: The Lark-based parser exposes a number of internals which allow the user to
    customize the parser’s behavior. For example, the user can specify their own \(\mathrm{\LaTeX}\)
    grammar by passing the path to the grammar file to the `LarkLaTeXParser` while
    instantiating the parser.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Lark 的解析器公开了多个内部功能，允许用户自定义解析器的行为。例如，用户可以在实例化解析器时通过传递语法文件的路径来指定自己的 \(\mathrm{\LaTeX}\)
    语法。
- en: The user can also specify their own custom transformer class to the \(LarkLaTeXParser\)
    class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以为 `LarkLaTeXParser` 类指定自定义的转换器类。
- en: The two examples mentioned above can be found in the [test_custom_latex.py](https://github.com/sympy/sympy/blob/395e820b114d2b169483354f1f4ee2f439faa292/sympy/parsing/tests/test_custom_latex.py)
    file.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个示例可以在 [test_custom_latex.py](https://github.com/sympy/sympy/blob/395e820b114d2b169483354f1f4ee2f439faa292/sympy/parsing/tests/test_custom_latex.py)
    文件中找到。
- en: Lark \(\mathrm{\LaTeX}\) Parser Capabilities
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lark \(\mathrm{\LaTeX}\) 解析器的能力
- en: In order to use the Lark-based LaTeX parser, it is important to know what it
    can and cannot do. As the parser is still experimental, it supports many things,
    but some features are still only partially implemented, or not available.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用基于 Lark 的 LaTeX 解析器，了解它能做什么和不能做什么是非常重要的。由于解析器仍处于实验阶段，它支持许多功能，但某些功能仍然只部分实现或者不可用。
- en: As such, we will list the types of expressions that it can parse, and then list
    some expression types of interest where it may fail.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将列出它能解析的表达式类型，然后列出一些可能失败的表达式类型。
- en: 'Here is a list of the things which are supported:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是支持的事物列表：
- en: Symbols which consist of one letter, e.g., `a`, `b`, `x`, etc. Greek symbols
    and symbols with subscripts are also supported. Numbers are also supported, as
    is `\infty`.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个字母符号，例如 `a`, `b`, `x` 等。希腊符号和带下标的符号也被支持。数字也被支持，以及 `\infty`。
- en: Symbols with multiple letters are supported, as long as they are wrapped in
    `\mathit`.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多个字母符号，只要它们包含在 `\mathit` 中。
- en: Expressions with \(+\), \(-\), \(*\), \(/\), and alternative operators like
    `\cdot`, `\times`, `\div`, etc. If two expressions are next to each other, like
    \(xy\) or \((\sin x)(\cos t)\), then it is treated as implicit multiplication.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括 \(+\), \(-\), \(*\), \(/\) 和 `\cdot`, `\times`, `\div` 等替代运算符的表达式。如果两个表达式挨在一起，例如
    \(xy\) 或者 \((\sin x)(\cos t)\)，则被视为隐式乘法。
- en: Relations with \(<\), \(>\), \(\le\), \(\ge\), \(=\), and \(\ne\).
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系运算符 \(<\), \(>\), \(\le\), \(\ge\), \(=\), 和 \(\ne\).
- en: Commonly used functions like
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用的函数如
- en: Square roots,
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平方根,
- en: ''
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: factorials,
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阶乘,
- en: ''
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: complex conjugation (like \(\overline{z}\))
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复共轭（例如 \(\overline{z}\)）
- en: ''
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\log\),
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(\log\),
- en: ''
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\ln\),
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(\ln\),
- en: ''
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\exp\),
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(\exp\),
- en: ''
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: absolute value (e.g., \(|x|\)). Note that \(||x||\) is parsed as `Abs(Abs(x))`.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对值（例如 \(|x|\)）。注意 \(||x||\) 被解析为 `Abs(Abs(x))`。
- en: ''
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: floor (e.g., \(\lfloor x \rfloor\)) and ceiling (e.g., \(\lceil x \rceil\)),
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: floor（例如 \(\lfloor x \rfloor\)）和 ceiling（例如 \(\lceil x \rceil\)）函数,
- en: ''
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\min\) and \(\max\).
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(\min\) 和 \(\max\) 函数。
- en: All the trigonometric functions and their inverses trigonometric functions.
    Powers like `\sin^4` are also supported. The power \(-1\) is interpreted as the
    inverse function (i.e., `\sin^{-1} x` is interpreted as `\arcsin x`).
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有三角函数及其反三角函数。支持类似 `\sin^4` 的幂运算。幂 \(-1\) 被解释为反函数（例如 `\sin^{-1} x` 被解释为 `\arcsin
    x`）。
- en: Hyperbolic trigonometric functions (currently only \(\sinh\), \(\cosh\), and
    \(\tanh\)) and their inverses. As mentioned in the previous point, powers like
    `\tanh^2` are also supported, and \(-1\) is interpreted as the inverse function
    (i.e., `\tanh^{-1} x` is interpreted as `\arctanh x`).
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双曲三角函数（目前仅有 \(\sinh\), \(\cosh\), 和 \(\tanh\)）及其反函数。如前所述，支持类似 `\tanh^2` 的幂运算，且
    \(-1\) 被解释为反函数（例如 `\tanh^{-1} x` 被解释为 `\arctanh x`）。
- en: '`AppliedFunctions`, like \(f(x, y, z)\).'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppliedFunctions`，例如 \(f(x, y, z)\).'
- en: All types of fractions (`\frac`, `\tfrac`, `\dfrac`, `\nicefrac`) and binomials
    (`\binom`, `\tbinom`, `\dbinom`) are supported.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有类型的分数（`\frac`, `\tfrac`, `\dfrac`, `\nicefrac`）和二项式（`\binom`, `\tbinom`, `\dbinom`）都被支持。
- en: Integrals, both definite and indefinite. When the integrand is a fraction, having
    the differential in the numerator is allowed. The differential is allowed to be
    `d`, `\text{d}`, or `\mathrm{d}`.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定积分和不定积分。当被积函数是分数时，允许分母中有微分项。微分符号可以是`d`、`\text{d}`或`\mathrm{d}`。
- en: Derivatives in one variable. I.e., things like \(\dfrac{d}{dx} (\sin x)\). Higher
    order derivatives and partial derivatives are not supported yet.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单变量的导数。例如，\(\dfrac{d}{dx} (\sin x)\)。高阶导数和偏导数目前尚不支持。
- en: Limits in one variable. E.g., \(\lim\limits_{t\to 3^{+}} \sin t\).
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单变量的极限。例如，\(\lim\limits_{t\to 3^{+}} \sin t\)。
- en: Sums and products with simple conditions. For example, \(\sum\limits_{k=0}^n
    k^2\) is allowed because the condition on \(k\) is simple. An expression like
    \(\sum\limits_{d \mid n} d^2\) is not allowed because the condition on \(d\) in
    the subscript is complicated. Expressions with the index variable specified in
    the superscript are also allowed. For example, \(\prod\limits_{k=0}^{k=n} k^2\)
    is parsed correctly.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单条件下的求和与乘积。例如，允许\(\sum\limits_{k=0}^n k^2\)，因为\(k\)的条件简单。类似\(\sum\limits_{d
    \mid n} d^2\)的表达式不允许，因为下标\(d\)的条件复杂。指数变量在上标中指定的表达式也是允许的。例如，\(\prod\limits_{k=0}^{k=n}
    k^2\)可以被正确解析。
- en: Bra (e.g., \(| x \rangle\)), and Ket (e.g., \(\langle p |\)) notation. Parsing
    Inner (e.g., \(\langle x | y \rangle\)) and Outer Products (e.g., \(| y \rangle
    \langle x |\)) is also supported.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bra（例如，\(| x \rangle\)），以及Ket（例如，\(\langle p |\)）符号。解析内积（例如，\(\langle x | y
    \rangle\)）和外积（例如，\( | y \rangle \langle x |\)）也受支持。
- en: 'Here is a(n incomplete) list of things which are currently not supported, which
    may be added in the future:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当前不支持但可能在未来添加的事物的（不完整）列表：
- en: Matrices. Stuff like `\begin{env}...\end{env}`, where `env` is any of `matrix`,
    `bmatrix`, `pmatrix`, `smallmatrix`, and `array`.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵。如`\begin{env}...\end{env}`，其中`env`可以是`matrix`、`bmatrix`、`pmatrix`、`smallmatrix`和`array`之一。
- en: Matrix operations like matrix-matrix addition, scalar-matrix multiplication,
    matrix-matrix multiplication.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵操作，如矩阵加法、标量与矩阵乘法、矩阵与矩阵乘法。
- en: Higher order derivatives and partial derivatives.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶导数和偏导数。
- en: Double and triple integrals.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双重和三重积分。
- en: Lark \(\mathrm{\LaTeX}\) Parser Functions
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lark（\(\mathrm{\LaTeX}\)解析器函数）
- en: '[PRE44]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Experimental LaTeX parser using Lark.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Lark的实验性\(\mathrm{\LaTeX}\)解析器。
- en: This function is still under development and its API may change with the next
    releases of SymPy.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数仍在开发中，其API可能会在未来的SymPy版本中更改。
- en: Lark \(\mathrm{\LaTeX}\) Parser Classes
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Lark \(\mathrm{\LaTeX}\)解析器类
- en: '[PRE45]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Class for converting input \(\mathrm{\LaTeX}\) strings into SymPy Expressions.
    It holds all the necessary internal data for doing so, and exposes hooks for customizing
    its behavior.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将输入的\(\mathrm{\LaTeX}\)字符串转换为SymPy表达式的类。它包含进行此操作所需的所有内部数据，并公开了用于自定义其行为的挂钩。
- en: 'Parameters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**print_debug_output** : bool, optional'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**print_debug_output**：布尔值，可选'
- en: If set to `True`, prints debug output to the logger. Defaults to `False`.
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果设置为`True`，将调试输出打印到日志记录器。默认为`False`。
- en: '**transform** : bool, optional'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**transform**：布尔值，可选'
- en: If set to `True`, the class runs the Transformer class on the parse tree generated
    by running `Lark.parse` on the input string. Defaults to `True`.
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果设置为`True`，该类将在输入字符串上运行`Lark.parse`生成的解析树上运行Transformer类。默认为`True`。
- en: ''
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Setting it to `False` can help with debugging the \(\mathrm{\LaTeX}\) grammar.
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将其设置为`False`可以帮助调试\(\mathrm{\LaTeX}\)语法。
- en: '**grammar_file** : str, optional'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**grammar_file**：字符串，可选'
- en: The path to the grammar file that the parser should use. If set to `None`, it
    uses the default grammar, which is in `grammar/latex.lark`, relative to the `sympy/parsing/latex/lark/`
    directory.
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 解析器应使用的语法文件路径。如果设置为`None`，将使用默认语法，位于`grammar/latex.lark`，相对于`sympy/parsing/latex/lark/`目录。
- en: '**transformer** : str, optional'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**transformer**：字符串，可选'
- en: The name of the Transformer class to use. If set to `None`, it uses the default
    transformer class, which is [`TransformToSymPyExpr()`](#sympy.parsing.latex.lark.TransformToSymPyExpr
    "sympy.parsing.latex.lark.TransformToSymPyExpr").
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 用于指定要使用的Transformer类的名称。如果设置为`None`，将使用默认的Transformer类，即[`TransformToSymPyExpr()`](#sympy.parsing.latex.lark.TransformToSymPyExpr
    "sympy.parsing.latex.lark.TransformToSymPyExpr")。
- en: '[PRE46]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Returns a SymPy expression that is generated by traversing the `lark.Tree` passed
    to the `.transform()` function.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 返回通过遍历传递给`.transform()`函数的`lark.Tree`生成的SymPy表达式。
- en: 'Parameters:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**visit_tokens** : bool, optional'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**visit_tokens**：布尔值，可选'
- en: For information about what this option does, see [here](https://lark-parser.readthedocs.io/en/latest/visitors.html#lark.visitors.Transformer).
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关此选项的详细信息，请参见[这里](https://lark-parser.readthedocs.io/en/latest/visitors.html#lark.visitors.Transformer)。
- en: ''
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that the option must be set to `True` for the default parser to work.
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，选项必须设置为`True`才能使默认解析器工作。
- en: Notes
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: '**This class is never supposed to be used directly.**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个类不应该直接使用。**'
- en: In order to tweak the behavior of this class, it has to be subclassed and then
    after the required modifications are made, the name of the new class should be
    passed to the [`LarkLaTeXParser`](#sympy.parsing.latex.lark.LarkLaTeXParser "sympy.parsing.latex.lark.LarkLaTeXParser")
    class by using the `transformer` argument in the constructor.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调整此类的行为，必须对其进行子类化，然后在完成所需修改后，通过使用构造函数中的`transformer`参数将新类的名称传递给[`LarkLaTeXParser`](#sympy.parsing.latex.lark.LarkLaTeXParser
    "sympy.parsing.latex.lark.LarkLaTeXParser")类。
- en: \(\mathrm{\LaTeX}\) Parsing Exceptions Reference
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: \(\mathrm{\LaTeX}\)解析异常参考
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '## SymPy Expression Reference'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '## SymPy表达式参考'
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Class to store and handle SymPy expressions
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储和处理SymPy表达式的类
- en: This class will hold SymPy Expressions and handle the API for the conversion
    to and from different languages.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此类将保存SymPy表达式并处理其API，以便进行不同语言的转换。
- en: It works with the C and the Fortran Parser to generate SymPy expressions which
    are stored here and which can be converted to multiple language’s source code.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 它与C和Fortran解析器一起工作，生成存储在此处的SymPy表达式，并且可以转换为多种语言的源代码。
- en: Notes
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The module and its API are currently under development and experimental and
    can be changed during development.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块及其API目前正在开发和试验阶段，可能在开发过程中进行更改。
- en: The Fortran parser does not support numeric assignments, so all the variables
    have been Initialized to zero.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Fortran解析器不支持数字赋值，因此所有变量都已初始化为零。
- en: 'The module also depends on external dependencies:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块还依赖于外部依赖项：
- en: LFortran which is required to use the Fortran parser
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LFortran是使用Fortran解析器所必需的
- en: Clang which is required for the C parser
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C解析器所需的Clang
- en: Examples
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Example of parsing C code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 解析C代码示例：
- en: '[PRE49]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'An example of variable definition:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 变量定义示例：
- en: '[PRE50]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'An example of Assignment:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 分配示例：
- en: '[PRE51]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'An example of function definition:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义示例：
- en: '[PRE52]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Returns a list with the c source code for the SymPy expressions
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含SymPy表达式的C源代码列表
- en: Examples
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE54]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Converts the given source code to SymPy Expressions
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的源代码转换为SymPy表达式
- en: Examples
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE56]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Attributes
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 属性
- en: '| src_code | (String) the source code or filename of the source code that is
    to be converted |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| src_code | (String) 要转换的源代码或源代码的文件名 |'
- en: '| mode: String | the mode to determine which parser is to be used according
    to the language of the source code f or F for Fortran c or C for C/C++ |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| mode: String | 用于根据源代码的语言确定要使用的解析器的模式，f 或 F 用于Fortran，c 或 C 用于C/C++ |'
- en: '[PRE57]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Returns a list with the fortran source code for the SymPy expressions
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含SymPy表达式的Fortran源代码列表
- en: Examples
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE58]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Returns a list with Python code for the SymPy expressions
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含SymPy表达式的Python代码列表
- en: Examples
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE60]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Returns the expression list
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表达式列表
- en: Examples
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE62]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Runtime Installation
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时安装
- en: The currently-packaged LaTeX parser backend is partially generated with [ANTLR4](https://www.antlr.org/),
    but to use the parser, you only need the `antlr4` Python package available.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当前打包的LaTeX解析器后端部分由[ANTLR4](https://www.antlr.org/)生成，但是为了使用解析器，您只需要安装`antlr4`
    Python软件包即可。
- en: 'Depending on your package manager, you can install the right package with,
    for example, `pip`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的包管理器，例如`pip`，您可以安装正确的软件包：
- en: '[PRE63]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'or `conda`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 或者`conda`：
- en: '[PRE64]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The C parser depends on `clang` and the Fortran parser depends on `LFortran`.
    You can install these packages using:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: C解析器依赖于`clang`，Fortran解析器依赖于`LFortran`。您可以使用以下命令安装这些软件包：
- en: '[PRE65]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
