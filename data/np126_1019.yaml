- en: Test Support (numpy.testing)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试支持（numpy.testing）
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.testing.html](https://numpy.org/doc/1.26/reference/routines.testing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.testing.html](https://numpy.org/doc/1.26/reference/routines.testing.html)
- en: Common test support for all numpy test scripts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 numpy 测试脚本的通用测试支持。
- en: This single module should provide all the common functionality for numpy tests
    in a single location, so that [test scripts](../dev/development_environment.html#development-environment)
    can just import it and work right away. For background, see the [Testing Guidelines](testing.html#testing-guidelines)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单一模块应该在一个位置提供所有 numpy 测试的通用功能，因此[test scripts](../dev/development_environment.html#development-environment)可以直接导入它并立即运行。更多背景信息，请参阅[测试指南](testing.html#testing-guidelines)
- en: Asserts
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | Raises an AssertionError
    if two objects are not equal up to desired tolerance. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | 如果两个对象不等到期望的公差，将引发
    AssertionError。 |'
- en: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | Compare two arrays
    relatively to their spacing. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | 相对于它们的间距比较两个数组。
    |'
- en: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | Check that all
    items of arrays differ in at most N Units in the Last Place. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | 检查所有数组项在最后位置上的单位最多相差
    N 个单位。'
- en: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | Raises an
    AssertionError if two array_like objects are not equal. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | 如果两个 array_like
    对象不相等，则引发 AssertionError。 |'
- en: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | Raises an AssertionError
    if two array_like objects are not ordered by less than. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | 如果两个 array_like
    对象不按顺序排列，则引发 AssertionError。 |'
- en: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | Raises an
    AssertionError if two objects are not equal. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | 如果两个对象不等，则引发
    AssertionError。 |'
- en: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | Fail unless an exception of class
    exception_class is thrown by callable when invoked with arguments args and keyword
    arguments kwargs. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | 除非在使用参数 args 和关键字参数 kwargs 调用可调用函数时抛出
    exception_class 类的异常，否则将失败。 |'
- en: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | Fail unless an exception
    of class exception_class and with message that matches expected_regexp is thrown
    by callable when invoked with arguments args and keyword arguments kwargs. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | 除非在使用参数 args 和关键字参数
    kwargs 调用可调用函数时抛出类为 exception_class 并且带有匹配预期正则表达式的消息的异常，否则将失败。 |'
- en: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | Fail unless the
    given callable throws the specified warning. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | 除非给定的可调用函数引发指定的警告，否则将失败。
    |'
- en: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | Fail if the given callable
    produces any warnings. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | 如果给定的可调用对象产生任何警告，则失败。'
- en: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | Fail if the given callable
    produces any reference cycles. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | 如果给定的可调用对象产生任何引用循环，则失败。'
- en: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | Test if two strings are
    equal. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | 测试两个字符串是否相等。'
- en: Asserts (not recommended)
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言（不建议使用）
- en: It is recommended to use one of [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of these functions for more consistent
    floating point comparisons.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用 [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")、[`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") 或 [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") 替代这些函数，以进行更一致的浮点数比较。
- en: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | Assert that works in release mode. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | 在发布模式下运行的断言。'
- en: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to desired precision. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | 如果两个项目在所需精度上不相等，则引发
    AssertionError。'
- en: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to significant digits. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | 如果两个项目在有效数字上不相等，则引发
    AssertionError。'
- en: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | Raises an AssertionError
    if two objects are not equal up to desired precision. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | 如果两个对象在所需精度上不相等，则引发
    AssertionError。'
- en: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | Test if two
    objects are equal, and print an error message if test fails. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | 测试两个对象是否相等，如果测试失败则打印错误消息。'
- en: Decorators
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器
- en: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | Apply a decorator
    to all methods in a class matching a regular expression. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | 将装饰器应用于类中所有与正则表达式匹配的方法。'
- en: Test Running
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试运行
- en: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | Context manager
    that resets warning registry for catching warnings |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | 重置警告注册表以捕获警告的上下文管理器。'
- en: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | Return elapsed time for executing code in the namespace of the caller. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | 返回在调用者命名空间中执行代码的经过时间。'
- en: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | Run doctests found in the given file. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | 运行给定文件中的doctests。'
- en: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | Context manager and decorator
    doing much the same as `warnings.catch_warnings`. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | 上下文管理器和装饰器的作用与`warnings.catch_warnings`相似。'
- en: Guidelines
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指南
- en: '[Testing Guidelines](testing.html)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试指南](testing.html)'
- en: '[Introduction](testing.html#introduction)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](testing.html#introduction)'
- en: '[Testing NumPy](testing.html#testing-numpy)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试NumPy](testing.html#testing-numpy)'
- en: '[Running tests from inside Python](testing.html#running-tests-from-inside-python)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从Python内部运行测试](testing.html#running-tests-from-inside-python)'
- en: '[Running tests from the command line](testing.html#running-tests-from-the-command-line)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从命令行运行测试](testing.html#running-tests-from-the-command-line)'
- en: '[Other methods of running tests](testing.html#other-methods-of-running-tests)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行测试的其他方法](testing.html#other-methods-of-running-tests)'
- en: '[Writing your own tests](testing.html#writing-your-own-tests)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写自己的测试](testing.html#writing-your-own-tests)'
- en: '[Using C code in tests](testing.html#using-c-code-in-tests)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在测试中使用C代码](testing.html#using-c-code-in-tests)'
- en: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
- en: '[Labeling tests](testing.html#labeling-tests)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试标记](testing.html#labeling-tests)'
- en: '[Easier setup and teardown functions / methods](testing.html#easier-setup-and-teardown-functions-methods)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更简单的设置和拆卸函数/方法](testing.html#easier-setup-and-teardown-functions-methods)'
- en: '[Parametric tests](testing.html#parametric-tests)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参数化测试](testing.html#parametric-tests)'
- en: '[Doctests](testing.html#doctests)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Doctests(文档测试)](testing.html#doctests)'
- en: '[`tests/`](testing.html#tests)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tests/`](testing.html#tests)'
- en: '[`__init__.py` and `setup.py`](testing.html#init-py-and-setup-py)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`__init__.py`和`setup.py`](testing.html#init-py-and-setup-py)'
- en: '[Tips & Tricks](testing.html#tips-tricks)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[技巧和窍门](testing.html#tips-tricks)'
- en: '[Creating many similar tests](testing.html#creating-many-similar-tests)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建许多相似的测试](testing.html#creating-many-similar-tests)'
- en: '[Known failures & skipping tests](testing.html#known-failures-skipping-tests)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[已知失败和跳过测试](testing.html#known-failures-skipping-tests)'
- en: '[Tests on random data](testing.html#tests-on-random-data)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对随机数据进行测试](testing.html#tests-on-random-data)'
- en: '[Documentation for `numpy.test`](testing.html#documentation-for-numpy-test)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.test`的文档](testing.html#documentation-for-numpy-test)'
- en: '[`test`](testing.html#numpy.test)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`test`](testing.html#numpy.test)'
- en: Asserts
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言
- en: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | Raises an AssertionError
    if two objects are not equal up to desired tolerance. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | 如果两个对象在期望的容差范围内不相等，则引发AssertionError。'
- en: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | Compare two arrays
    relatively to their spacing. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | 相对于它们的间距比较两个数组。'
- en: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | Check that all
    items of arrays differ in at most N Units in the Last Place. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | 检查数组的所有元素在最后一位单位内的差异最多为N个单位。'
- en: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | Raises an
    AssertionError if two array_like objects are not equal. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | 如果两个类似数组对象不相等，则引发AssertionError。'
- en: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | Raises an AssertionError
    if two array_like objects are not ordered by less than. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | 如果两个类似数组对象的顺序不是按照小于来排列，则引发
    AssertionError。'
- en: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | Raises an
    AssertionError if two objects are not equal. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | 如果两个对象不相等，则引发
    AssertionError。'
- en: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | Fail unless an exception of class
    exception_class is thrown by callable when invoked with arguments args and keyword
    arguments kwargs. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | 除非在调用参数为 args 和关键字参数为 kwargs 的可调用函数时抛出
    exception_class 类的异常，则不通过。'
- en: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | Fail unless an exception
    of class exception_class and with message that matches expected_regexp is thrown
    by callable when invoked with arguments args and keyword arguments kwargs. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | 除非在调用参数为 args 和关键字参数为
    kwargs 的可调用函数时抛出的消息与预期的正则表达式匹配的类为 exception_class 的异常，则不通过。'
- en: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | Fail unless the
    given callable throws the specified warning. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | 除非给定的可调用函数引发指定的警告，否则不通过。'
- en: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | Fail if the given callable
    produces any warnings. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | 如果给定的可调用函数产生任何警告，则不通过。'
- en: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | Fail if the given callable
    produces any reference cycles. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | 如果给定的可调用函数产生任何引用循环，则不通过。'
- en: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | Test if two strings are
    equal. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | 测试两个字符串是否相等。'
- en: Asserts (not recommended)
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言（不推荐使用）
- en: It is recommended to use one of [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of these functions for more consistent
    floating point comparisons.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用 [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")、[`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") 或 [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") 中的一个，而不是使用这些函数进行更一致的浮点数比较。
- en: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | Assert that works in release mode. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | 在发布模式下工作的断言。'
- en: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to desired precision. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | 如果两个项目不在期望的精度范围内相等，则引发
    AssertionError。'
- en: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to significant digits. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | 如果两个项目不符合预期的有效位数，则引发
    AssertionError。 |'
- en: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | Raises an AssertionError
    if two objects are not equal up to desired precision. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | 如果两个对象不符合期望精度，则引发
    AssertionError。 |'
- en: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | Test if two
    objects are equal, and print an error message if test fails. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | 测试两个对象是否相等，如果测试失败则打印错误信息。
    |'
- en: Decorators
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器
- en: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | Apply a decorator
    to all methods in a class matching a regular expression. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | 对类中匹配正则表达式的所有方法应用装饰器。
    |'
- en: Test Running
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试运行
- en: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | Context manager
    that resets warning registry for catching warnings |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | 上下文管理器，用于捕获警告的情况下重置警告注册表
    |'
- en: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | Return elapsed time for executing code in the namespace of the caller. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | 返回在调用者命名空间中执行代码的经过时间。 |'
- en: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | Run doctests found in the given file. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | 运行给定文件中的 doctests。 |'
- en: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | Context manager and decorator
    doing much the same as `warnings.catch_warnings`. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | 上下文管理器和装饰器，做了类似于 `warnings.catch_warnings`
    的事情。 |'
- en: Guidelines
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指南
- en: '[Testing Guidelines](testing.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试指南](testing.html)'
- en: '[Introduction](testing.html#introduction)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍](testing.html#introduction)'
- en: '[Testing NumPy](testing.html#testing-numpy)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试 NumPy](testing.html#testing-numpy)'
- en: '[Running tests from inside Python](testing.html#running-tests-from-inside-python)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从 Python 中运行测试](testing.html#running-tests-from-inside-python)'
- en: '[Running tests from the command line](testing.html#running-tests-from-the-command-line)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从命令行运行测试](testing.html#running-tests-from-the-command-line)'
- en: '[Other methods of running tests](testing.html#other-methods-of-running-tests)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行测试的其他方法](testing.html#other-methods-of-running-tests)'
- en: '[Writing your own tests](testing.html#writing-your-own-tests)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写自己的测试](testing.html#writing-your-own-tests)'
- en: '[Using C code in tests](testing.html#using-c-code-in-tests)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在测试中使用 C 代码](testing.html#using-c-code-in-tests)'
- en: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
- en: '[Labeling tests](testing.html#labeling-tests)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为测试打标签](testing.html#labeling-tests)'
- en: '[Easier setup and teardown functions / methods](testing.html#easier-setup-and-teardown-functions-methods)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更容易的设置和拆卸功能/方法](testing.html#easier-setup-and-teardown-functions-methods)'
- en: '[Parametric tests](testing.html#parametric-tests)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参数化测试](testing.html#parametric-tests)'
- en: '[Doctests](testing.html#doctests)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Doctests](testing.html#doctests)'
- en: '[`tests/`](testing.html#tests)'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tests/`](testing.html#tests)'
- en: '[`__init__.py` and `setup.py`](testing.html#init-py-and-setup-py)'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`__init__.py` 和 `setup.py`](testing.html#init-py-and-setup-py)'
- en: '[Tips & Tricks](testing.html#tips-tricks)'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[技巧](testing.html#tips-tricks)'
- en: '[Creating many similar tests](testing.html#creating-many-similar-tests)'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建许多相似的测试](testing.html#creating-many-similar-tests)'
- en: '[Known failures & skipping tests](testing.html#known-failures-skipping-tests)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[已知失败 & 跳过测试](testing.html#known-failures-skipping-tests)'
- en: '[Tests on random data](testing.html#tests-on-random-data)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机数据上的测试](testing.html#tests-on-random-data)'
- en: '[Documentation for `numpy.test`](testing.html#documentation-for-numpy-test)'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.test`的文档](testing.html#documentation-for-numpy-test)'
- en: '[`test`](testing.html#numpy.test)'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`test`](testing.html#numpy.test)'
