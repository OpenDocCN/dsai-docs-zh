["```py\nclass sympy.physics.quantum.qubit.IntQubit(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum.qubit import IntQubit\n>>> from sympy.physics.quantum.qubit import Qubit\n>>> q = IntQubit(5)\n>>> q\n|5> \n```", "```py\n>>> q = IntQubit(Qubit('101'))\n>>> q\n|5>\n>>> q.as_int()\n5\n>>> q.nqubits\n3\n>>> q.qubit_values\n(1, 0, 1) \n```", "```py\n>>> Qubit(q)\n|101> \n```", "```py\n>>> IntQubit(1, 1)\n|3> \n```", "```py\n>>> IntQubit(1, nqubits=1)\n|1>\n>>> a = 1\n>>> IntQubit(a, nqubits=1)\n|1> \n```", "```py\nclass sympy.physics.quantum.qubit.IntQubitBra(*args, **kwargs)\n```", "```py\nclass sympy.physics.quantum.qubit.Qubit(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum.qubit import Qubit\n>>> Qubit(0,0,0)\n|000>\n>>> q = Qubit('0101')\n>>> q\n|0101> \n```", "```py\n>>> q.nqubits\n4\n>>> len(q)\n4\n>>> q.dimension\n4\n>>> q.qubit_values\n(0, 1, 0, 1) \n```", "```py\n>>> q.flip(1)\n|0111> \n```", "```py\n>>> from sympy.physics.quantum.dagger import Dagger\n>>> Dagger(q)\n<0101|\n>>> type(Dagger(q))\n<class 'sympy.physics.quantum.qubit.QubitBra'> \n```", "```py\n>>> ip = Dagger(q)*q\n>>> ip\n<0101|0101>\n>>> ip.doit()\n1 \n```", "```py\nclass sympy.physics.quantum.qubit.QubitBra(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.qubit.matrix_to_density(mat)\n```", "```py\nsympy.physics.quantum.qubit.matrix_to_qubit(matrix)\n```", "```py\n>>> from sympy.physics.quantum.qubit import matrix_to_qubit, Qubit\n>>> from sympy.physics.quantum.represent import represent\n>>> q = Qubit('01')\n>>> matrix_to_qubit(represent(q))\n|01> \n```", "```py\nsympy.physics.quantum.qubit.measure_all(qubit, format='sympy', normalize=True)\n```", "```py\n>>> from sympy.physics.quantum.qubit import Qubit, measure_all\n>>> from sympy.physics.quantum.gate import H\n>>> from sympy.physics.quantum.qapply import qapply \n```", "```py\n>>> c = H(0)*H(1)*Qubit('00')\n>>> c\nH(0)*H(1)*|00>\n>>> q = qapply(c)\n>>> measure_all(q)\n[(|00>, 1/4), (|01>, 1/4), (|10>, 1/4), (|11>, 1/4)] \n```", "```py\nsympy.physics.quantum.qubit.measure_all_oneshot(qubit, format='sympy')\n```", "```py\nsympy.physics.quantum.qubit.measure_partial(qubit, bits, format='sympy', normalize=True)\n```", "```py\n>>> from sympy.physics.quantum.qubit import Qubit, measure_partial\n>>> from sympy.physics.quantum.gate import H\n>>> from sympy.physics.quantum.qapply import qapply \n```", "```py\n>>> c = H(0)*H(1)*Qubit('00')\n>>> c\nH(0)*H(1)*|00>\n>>> q = qapply(c)\n>>> measure_partial(q, (0,))\n[(sqrt(2)*|00>/2 + sqrt(2)*|10>/2, 1/2), (sqrt(2)*|01>/2 + sqrt(2)*|11>/2, 1/2)] \n```", "```py\nsympy.physics.quantum.qubit.measure_partial_oneshot(qubit, bits, format='sympy')\n```", "```py\nsympy.physics.quantum.qubit.qubit_to_matrix(qubit, format='sympy')\n```"]