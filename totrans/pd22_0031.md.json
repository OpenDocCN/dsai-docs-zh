["```py\nIn [1]: df1 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ...:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ...:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ...:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ...:    },\n ...:    index=[0, 1, 2, 3],\n ...: )\n ...: \n\nIn [2]: df2 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A4\", \"A5\", \"A6\", \"A7\"],\n ...:        \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"],\n ...:        \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"],\n ...:        \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"],\n ...:    },\n ...:    index=[4, 5, 6, 7],\n ...: )\n ...: \n\nIn [3]: df3 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A8\", \"A9\", \"A10\", \"A11\"],\n ...:        \"B\": [\"B8\", \"B9\", \"B10\", \"B11\"],\n ...:        \"C\": [\"C8\", \"C9\", \"C10\", \"C11\"],\n ...:        \"D\": [\"D8\", \"D9\", \"D10\", \"D11\"],\n ...:    },\n ...:    index=[8, 9, 10, 11],\n ...: )\n ...: \n\nIn [4]: frames = [df1, df2, df3]\n\nIn [5]: result = pd.concat(frames)\n\nIn [6]: result\nOut[6]: \n A    B    C    D\n0    A0   B0   C0   D0\n1    A1   B1   C1   D1\n2    A2   B2   C2   D2\n3    A3   B3   C3   D3\n4    A4   B4   C4   D4\n5    A5   B5   C5   D5\n6    A6   B6   C6   D6\n7    A7   B7   C7   D7\n8    A8   B8   C8   D8\n9    A9   B9   C9   D9\n10  A10  B10  C10  D10\n11  A11  B11  C11  D11 \n```", "```py\nframes = [process_your_file(f) for f in files]\nresult = pd.concat(frames) \n```", "```py\nIn [7]: df4 = pd.DataFrame(\n ...:    {\n ...:        \"B\": [\"B2\", \"B3\", \"B6\", \"B7\"],\n ...:        \"D\": [\"D2\", \"D3\", \"D6\", \"D7\"],\n ...:        \"F\": [\"F2\", \"F3\", \"F6\", \"F7\"],\n ...:    },\n ...:    index=[2, 3, 6, 7],\n ...: )\n ...: \n\nIn [8]: result = pd.concat([df1, df4], axis=1)\n\nIn [9]: result\nOut[9]: \n A    B    C    D    B    D    F\n0   A0   B0   C0   D0  NaN  NaN  NaN\n1   A1   B1   C1   D1  NaN  NaN  NaN\n2   A2   B2   C2   D2   B2   D2   F2\n3   A3   B3   C3   D3   B3   D3   F3\n6  NaN  NaN  NaN  NaN   B6   D6   F6\n7  NaN  NaN  NaN  NaN   B7   D7   F7 \n```", "```py\nIn [10]: result = pd.concat([df1, df4], axis=1, join=\"inner\")\n\nIn [11]: result\nOut[11]: \n A   B   C   D   B   D   F\n2  A2  B2  C2  D2  B2  D2  F2\n3  A3  B3  C3  D3  B3  D3  F3 \n```", "```py\nIn [12]: result = pd.concat([df1, df4], axis=1).reindex(df1.index)\n\nIn [13]: result\nOut[13]: \n A   B   C   D    B    D    F\n0  A0  B0  C0  D0  NaN  NaN  NaN\n1  A1  B1  C1  D1  NaN  NaN  NaN\n2  A2  B2  C2  D2   B2   D2   F2\n3  A3  B3  C3  D3   B3   D3   F3 \n```", "```py\nIn [14]: result = pd.concat([df1, df4], ignore_index=True, sort=False)\n\nIn [15]: result\nOut[15]: \n A   B    C   D    F\n0   A0  B0   C0  D0  NaN\n1   A1  B1   C1  D1  NaN\n2   A2  B2   C2  D2  NaN\n3   A3  B3   C3  D3  NaN\n4  NaN  B2  NaN  D2   F2\n5  NaN  B3  NaN  D3   F3\n6  NaN  B6  NaN  D6   F6\n7  NaN  B7  NaN  D7   F7 \n```", "```py\nIn [16]: s1 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], name=\"X\")\n\nIn [17]: result = pd.concat([df1, s1], axis=1)\n\nIn [18]: result\nOut[18]: \n A   B   C   D   X\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [19]: s2 = pd.Series([\"_0\", \"_1\", \"_2\", \"_3\"])\n\nIn [20]: result = pd.concat([df1, s2, s2, s2], axis=1)\n\nIn [21]: result\nOut[21]: \n A   B   C   D   0   1   2\n0  A0  B0  C0  D0  _0  _0  _0\n1  A1  B1  C1  D1  _1  _1  _1\n2  A2  B2  C2  D2  _2  _2  _2\n3  A3  B3  C3  D3  _3  _3  _3 \n```", "```py\nIn [22]: result = pd.concat([df1, s1], axis=1, ignore_index=True)\n\nIn [23]: result\nOut[23]: \n 0   1   2   3   4\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [24]: result = pd.concat(frames, keys=[\"x\", \"y\", \"z\"])\n\nIn [25]: result\nOut[25]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\n\nIn [26]: result.loc[\"y\"]\nOut[26]: \n A   B   C   D\n4  A4  B4  C4  D4\n5  A5  B5  C5  D5\n6  A6  B6  C6  D6\n7  A7  B7  C7  D7 \n```", "```py\nIn [27]: s3 = pd.Series([0, 1, 2, 3], name=\"foo\")\n\nIn [28]: s4 = pd.Series([0, 1, 2, 3])\n\nIn [29]: s5 = pd.Series([0, 1, 4, 5])\n\nIn [30]: pd.concat([s3, s4, s5], axis=1)\nOut[30]: \n foo  0  1\n0    0  0  0\n1    1  1  1\n2    2  2  4\n3    3  3  5\n\nIn [31]: pd.concat([s3, s4, s5], axis=1, keys=[\"red\", \"blue\", \"yellow\"])\nOut[31]: \n red  blue  yellow\n0    0     0       0\n1    1     1       1\n2    2     2       4\n3    3     3       5 \n```", "```py\nIn [32]: pieces = {\"x\": df1, \"y\": df2, \"z\": df3}\n\nIn [33]: result = pd.concat(pieces)\n\nIn [34]: result\nOut[34]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [35]: result = pd.concat(pieces, keys=[\"z\", \"y\"])\n\nIn [36]: result\nOut[36]: \n A    B    C    D\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7 \n```", "```py\nIn [37]: result.index.levels\nOut[37]: FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [38]: result = pd.concat(\n ....:    pieces, keys=[\"x\", \"y\", \"z\"], levels=[[\"z\", \"y\", \"x\", \"w\"]], names=[\"group_key\"]\n ....: )\n ....: \n\nIn [39]: result\nOut[39]: \n A    B    C    D\ngroup_key \nx         0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny         4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz         8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [40]: result.index.levels\nOut[40]: FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [41]: s2 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], index=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [42]: result = pd.concat([df1, s2.to_frame().T], ignore_index=True)\n\nIn [43]: result\nOut[43]: \n A   B   C   D\n0  A0  B0  C0  D0\n1  A1  B1  C1  D1\n2  A2  B2  C2  D2\n3  A3  B3  C3  D3\n4  X0  X1  X2  X3 \n```", "```py\nIn [44]: left = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:    }\n ....: )\n ....: \n\nIn [45]: right = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:    }\n ....: )\n ....: \n\nIn [46]: result = pd.merge(left, right, on=\"key\")\n\nIn [47]: result\nOut[47]: \n key   A   B   C   D\n0  K0  A0  B0  C0  D0\n1  K1  A1  B1  C1  D1\n2  K2  A2  B2  C2  D2\n3  K3  A3  B3  C3  D3 \n```", "```py\nIn [48]: left = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:      \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:      \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:   }\n ....: )\n ....: \n\nIn [49]: right = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K1\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K0\", \"K0\", \"K0\"],\n ....:      \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:      \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:   }\n ....: )\n ....: \n\nIn [50]: result = pd.merge(left, right, how=\"left\", on=[\"key1\", \"key2\"])\n\nIn [51]: result\nOut[51]: \n key1 key2   A   B    C    D\n0   K0   K0  A0  B0   C0   D0\n1   K0   K1  A1  B1  NaN  NaN\n2   K1   K0  A2  B2   C1   D1\n3   K1   K0  A2  B2   C2   D2\n4   K2   K1  A3  B3  NaN  NaN \n```", "```py\nIn [52]: result = pd.merge(left, right, how=\"right\", on=[\"key1\", \"key2\"])\n\nIn [53]: result\nOut[53]: \n key1 key2    A    B   C   D\n0   K0   K0   A0   B0  C0  D0\n1   K1   K0   A2   B2  C1  D1\n2   K1   K0   A2   B2  C2  D2\n3   K2   K0  NaN  NaN  C3  D3 \n```", "```py\nIn [54]: result = pd.merge(left, right, how=\"outer\", on=[\"key1\", \"key2\"])\n\nIn [55]: result\nOut[55]: \n key1 key2    A    B    C    D\n0   K0   K0   A0   B0   C0   D0\n1   K0   K1   A1   B1  NaN  NaN\n2   K1   K0   A2   B2   C1   D1\n3   K1   K0   A2   B2   C2   D2\n4   K2   K0  NaN  NaN   C3   D3\n5   K2   K1   A3   B3  NaN  NaN \n```", "```py\nIn [56]: result = pd.merge(left, right, how=\"inner\", on=[\"key1\", \"key2\"])\n\nIn [57]: result\nOut[57]: \n key1 key2   A   B   C   D\n0   K0   K0  A0  B0  C0  D0\n1   K1   K0  A2  B2  C1  D1\n2   K1   K0  A2  B2  C2  D2 \n```", "```py\nIn [58]: result = pd.merge(left, right, how=\"cross\")\n\nIn [59]: result\nOut[59]: \n key1_x key2_x   A   B key1_y key2_y   C   D\n0      K0     K0  A0  B0     K0     K0  C0  D0\n1      K0     K0  A0  B0     K1     K0  C1  D1\n2      K0     K0  A0  B0     K1     K0  C2  D2\n3      K0     K0  A0  B0     K2     K0  C3  D3\n4      K0     K1  A1  B1     K0     K0  C0  D0\n..    ...    ...  ..  ..    ...    ...  ..  ..\n11     K1     K0  A2  B2     K2     K0  C3  D3\n12     K2     K1  A3  B3     K0     K0  C0  D0\n13     K2     K1  A3  B3     K1     K0  C1  D1\n14     K2     K1  A3  B3     K1     K0  C2  D2\n15     K2     K1  A3  B3     K2     K0  C3  D3\n\n[16 rows x 8 columns] \n```", "```py\nIn [60]: df = pd.DataFrame({\"Let\": [\"A\", \"B\", \"C\"], \"Num\": [1, 2, 3]})\n\nIn [61]: df\nOut[61]: \n Let  Num\n0   A    1\n1   B    2\n2   C    3\n\nIn [62]: ser = pd.Series(\n ....:    [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n ....:    index=pd.MultiIndex.from_arrays(\n ....:        [[\"A\", \"B\", \"C\"] * 2, [1, 2, 3, 4, 5, 6]], names=[\"Let\", \"Num\"]\n ....:    ),\n ....: )\n ....: \n\nIn [63]: ser\nOut[63]: \nLet  Num\nA    1      a\nB    2      b\nC    3      c\nA    4      d\nB    5      e\nC    6      f\ndtype: object\n\nIn [64]: pd.merge(df, ser.reset_index(), on=[\"Let\", \"Num\"])\nOut[64]: \n Let  Num  0\n0   A    1  a\n1   B    2  b\n2   C    3  c \n```", "```py\nIn [65]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [2, 2]})\n\nIn [66]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [67]: result = pd.merge(left, right, on=\"B\", how=\"outer\")\n\nIn [68]: result\nOut[68]: \n A_x  B  A_y\n0    1  2    4\n1    1  2    5\n2    1  2    6\n3    2  2    4\n4    2  2    5\n5    2  2    6 \n```", "```py\nIn [69]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [1, 2]})\n\nIn [70]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [71]: result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n---------------------------------------------------------------------------\nMergeError  Traceback (most recent call last)\nCell In[71], line 1\n----> 1 result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:170, in merge(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\n  155     return _cross_merge(\n  156         left_df,\n  157         right_df,\n   (...)\n  167         copy=copy,\n  168     )\n  169 else:\n--> 170     op = _MergeOperation(\n  171         left_df,\n  172         right_df,\n  173         how=how,\n  174         on=on,\n  175         left_on=left_on,\n  176         right_on=right_on,\n  177         left_index=left_index,\n  178         right_index=right_index,\n  179         sort=sort,\n  180         suffixes=suffixes,\n  181         indicator=indicator,\n  182         validate=validate,\n  183     )\n  184     return op.get_result(copy=copy)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:813, in _MergeOperation.__init__(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\n  809 # If argument passed to validate,\n  810 # check if columns specified as unique\n  811 # are in fact unique.\n  812 if validate is not None:\n--> 813     self._validate_validate_kwd(validate)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:1657, in _MergeOperation._validate_validate_kwd(self, validate)\n  1653         raise MergeError(\n  1654             \"Merge keys are not unique in left dataset; not a one-to-one merge\"\n  1655         )\n  1656     if not right_unique:\n-> 1657         raise MergeError(\n  1658             \"Merge keys are not unique in right dataset; not a one-to-one merge\"\n  1659         )\n  1661 elif validate in [\"one_to_many\", \"1:m\"]:\n  1662     if not left_unique:\n\nMergeError: Merge keys are not unique in right dataset; not a one-to-one merge \n```", "```py\nIn [72]: pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_many\")\nOut[72]: \n A_x  B  A_y\n0    1  1  NaN\n1    2  2  4.0\n2    2  2  5.0\n3    2  2  6.0 \n```", "```py\nIn [73]: df1 = pd.DataFrame({\"col1\": [0, 1], \"col_left\": [\"a\", \"b\"]})\n\nIn [74]: df2 = pd.DataFrame({\"col1\": [1, 2, 2], \"col_right\": [2, 2, 2]})\n\nIn [75]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=True)\nOut[75]: \n col1 col_left  col_right      _merge\n0     0        a        NaN   left_only\n1     1        b        2.0        both\n2     2      NaN        2.0  right_only\n3     2      NaN        2.0  right_only \n```", "```py\nIn [76]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=\"indicator_column\")\nOut[76]: \n col1 col_left  col_right indicator_column\n0     0        a        NaN        left_only\n1     1        b        2.0             both\n2     2      NaN        2.0       right_only\n3     2      NaN        2.0       right_only \n```", "```py\nIn [77]: left = pd.DataFrame({\"k\": [\"K0\", \"K1\", \"K2\"], \"v\": [1, 2, 3]})\n\nIn [78]: right = pd.DataFrame({\"k\": [\"K0\", \"K0\", \"K3\"], \"v\": [4, 5, 6]})\n\nIn [79]: result = pd.merge(left, right, on=\"k\")\n\nIn [80]: result\nOut[80]: \n k  v_x  v_y\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [81]: result = pd.merge(left, right, on=\"k\", suffixes=(\"_l\", \"_r\"))\n\nIn [82]: result\nOut[82]: \n k  v_l  v_r\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [83]: left = pd.DataFrame(\n ....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]}, index=[\"K0\", \"K1\", \"K2\"]\n ....: )\n ....: \n\nIn [84]: right = pd.DataFrame(\n ....:    {\"C\": [\"C0\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D2\", \"D3\"]}, index=[\"K0\", \"K2\", \"K3\"]\n ....: )\n ....: \n\nIn [85]: result = left.join(right)\n\nIn [86]: result\nOut[86]: \n A   B    C    D\nK0  A0  B0   C0   D0\nK1  A1  B1  NaN  NaN\nK2  A2  B2   C2   D2 \n```", "```py\nIn [87]: result = left.join(right, how=\"outer\")\n\nIn [88]: result\nOut[88]: \n A    B    C    D\nK0   A0   B0   C0   D0\nK1   A1   B1  NaN  NaN\nK2   A2   B2   C2   D2\nK3  NaN  NaN   C3   D3 \n```", "```py\nIn [89]: result = left.join(right, how=\"inner\")\n\nIn [90]: result\nOut[90]: \n A   B   C   D\nK0  A0  B0  C0  D0\nK2  A2  B2  C2  D2 \n```", "```py\nIn [91]: left = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:        \"key\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:    }\n ....: )\n ....: \n\nIn [92]: right = pd.DataFrame({\"C\": [\"C0\", \"C1\"], \"D\": [\"D0\", \"D1\"]}, index=[\"K0\", \"K1\"])\n\nIn [93]: result = left.join(right, on=\"key\")\n\nIn [94]: result\nOut[94]: \n A   B key   C   D\n0  A0  B0  K0  C0  D0\n1  A1  B1  K1  C1  D1\n2  A2  B2  K0  C0  D0\n3  A3  B3  K1  C1  D1 \n```", "```py\nIn [95]: result = pd.merge(\n ....:    left, right, left_on=\"key\", right_index=True, how=\"left\", sort=False\n ....: )\n ....: \n\nIn [96]: result\nOut[96]: \n A   B key   C   D\n0  A0  B0  K0  C0  D0\n1  A1  B1  K1  C1  D1\n2  A2  B2  K0  C0  D0\n3  A3  B3  K1  C1  D1 \n```", "```py\nIn [97]: left = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:        \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n ....:        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:    }\n ....: )\n ....: \n\nIn [98]: index = pd.MultiIndex.from_tuples(\n ....:    [(\"K0\", \"K0\"), (\"K1\", \"K0\"), (\"K2\", \"K0\"), (\"K2\", \"K1\")]\n ....: )\n ....: \n\nIn [99]: right = pd.DataFrame(\n ....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=index\n ....: )\n ....: \n\nIn [100]: result = left.join(right, on=[\"key1\", \"key2\"])\n\nIn [101]: result\nOut[101]: \n A   B key1 key2    C    D\n0  A0  B0   K0   K0   C0   D0\n1  A1  B1   K0   K1  NaN  NaN\n2  A2  B2   K1   K0   C1   D1\n3  A3  B3   K2   K1   C3   D3 \n```", "```py\nIn [102]: result = left.join(right, on=[\"key1\", \"key2\"], how=\"inner\")\n\nIn [103]: result\nOut[103]: \n A   B key1 key2   C   D\n0  A0  B0   K0   K0  C0  D0\n2  A2  B2   K1   K0  C1  D1\n3  A3  B3   K2   K1  C3  D3 \n```", "```py\nIn [104]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]},\n .....:    index=pd.Index([\"K0\", \"K1\", \"K2\"], name=\"key\"),\n .....: )\n .....: \n\nIn [105]: index = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")],\n .....:    names=[\"key\", \"Y\"],\n .....: )\n .....: \n\nIn [106]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]},\n .....:    index=index,\n .....: )\n .....: \n\nIn [107]: result = left.join(right, how=\"inner\")\n\nIn [108]: result\nOut[108]: \n A   B   C   D\nkey Y \nK0  Y0  A0  B0  C0  D0\nK1  Y1  A1  B1  C1  D1\nK2  Y2  A2  B2  C2  D2\n Y3  A2  B2  C3  D3 \n```", "```py\nIn [109]: leftindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\"), [1, 2]], names=[\"abc\", \"xy\", \"num\"]\n .....: )\n .....: \n\nIn [110]: left = pd.DataFrame({\"v1\": range(12)}, index=leftindex)\n\nIn [111]: left\nOut[111]: \n v1\nabc xy num \na   x  1     0\n 2     1\n y  1     2\n 2     3\nb   x  1     4\n 2     5\n y  1     6\n 2     7\nc   x  1     8\n 2     9\n y  1    10\n 2    11\n\nIn [112]: rightindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\")], names=[\"abc\", \"xy\"]\n .....: )\n .....: \n\nIn [113]: right = pd.DataFrame({\"v2\": [100 * i for i in range(1, 7)]}, index=rightindex)\n\nIn [114]: right\nOut[114]: \n v2\nabc xy \na   x   100\n y   200\nb   x   300\n y   400\nc   x   500\n y   600\n\nIn [115]: left.join(right, on=[\"abc\", \"xy\"], how=\"inner\")\nOut[115]: \n v1   v2\nabc xy num \na   x  1     0  100\n 2     1  100\n y  1     2  200\n 2     3  200\nb   x  1     4  300\n 2     5  300\n y  1     6  400\n 2     7  400\nc   x  1     8  500\n 2     9  500\n y  1    10  600\n 2    11  600 \n```", "```py\nIn [116]: leftindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"X0\"), (\"K0\", \"X1\"), (\"K1\", \"X2\")], names=[\"key\", \"X\"]\n .....: )\n .....: \n\nIn [117]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]}, index=leftindex\n .....: )\n .....: \n\nIn [118]: rightindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")], names=[\"key\", \"Y\"]\n .....: )\n .....: \n\nIn [119]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=rightindex\n .....: )\n .....: \n\nIn [120]: result = pd.merge(\n .....:    left.reset_index(), right.reset_index(), on=[\"key\"], how=\"inner\"\n .....: ).set_index([\"key\", \"X\", \"Y\"])\n .....: \n\nIn [121]: result\nOut[121]: \n A   B   C   D\nkey X  Y \nK0  X0 Y0  A0  B0  C0  D0\n X1 Y0  A1  B1  C0  D0\nK1  X2 Y1  A2  B2  C1  D1 \n```", "```py\nIn [122]: left_index = pd.Index([\"K0\", \"K0\", \"K1\", \"K2\"], name=\"key1\")\n\nIn [123]: left = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n .....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n .....:        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=left_index,\n .....: )\n .....: \n\nIn [124]: right_index = pd.Index([\"K0\", \"K1\", \"K2\", \"K2\"], name=\"key1\")\n\nIn [125]: right = pd.DataFrame(\n .....:    {\n .....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n .....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n .....:        \"key2\": [\"K0\", \"K0\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=right_index,\n .....: )\n .....: \n\nIn [126]: result = left.merge(right, on=[\"key1\", \"key2\"])\n\nIn [127]: result\nOut[127]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3 \n```", "```py\nIn [128]: right2 = pd.DataFrame({\"v\": [7, 8, 9]}, index=[\"K1\", \"K1\", \"K2\"])\n\nIn [129]: result = left.join([right, right2]) \n```", "```py\nIn [130]: df1 = pd.DataFrame(\n .....:    [[np.nan, 3.0, 5.0], [-4.6, np.nan, np.nan], [np.nan, 7.0, np.nan]]\n .....: )\n .....: \n\nIn [131]: df2 = pd.DataFrame([[-42.6, np.nan, -8.2], [-5.0, 1.6, 4]], index=[1, 2])\n\nIn [132]: result = df1.combine_first(df2)\n\nIn [133]: result\nOut[133]: \n 0    1    2\n0  NaN  3.0  5.0\n1 -4.6  NaN -8.2\n2 -5.0  7.0  4.0 \n```", "```py\nIn [134]: left = pd.DataFrame(\n .....:    {\"k\": [\"K0\", \"K1\", \"K1\", \"K2\"], \"lv\": [1, 2, 3, 4], \"s\": [\"a\", \"b\", \"c\", \"d\"]}\n .....: )\n .....: \n\nIn [135]: right = pd.DataFrame({\"k\": [\"K1\", \"K2\", \"K4\"], \"rv\": [1, 2, 3]})\n\nIn [136]: pd.merge_ordered(left, right, fill_method=\"ffill\", left_by=\"s\")\nOut[136]: \n k   lv  s   rv\n0   K0  1.0  a  NaN\n1   K1  1.0  a  1.0\n2   K2  1.0  a  2.0\n3   K4  1.0  a  3.0\n4   K1  2.0  b  1.0\n5   K2  2.0  b  2.0\n6   K4  2.0  b  3.0\n7   K1  3.0  c  1.0\n8   K2  3.0  c  2.0\n9   K4  3.0  c  3.0\n10  K1  NaN  d  1.0\n11  K2  4.0  d  2.0\n12  K4  4.0  d  3.0 \n```", "```py\nIn [137]: trades = pd.DataFrame(\n .....:    {\n .....:        \"time\": pd.to_datetime(\n .....:            [\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.038\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.048\",\n .....:            ]\n .....:        ),\n .....:        \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n .....:        \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n .....:        \"quantity\": [75, 155, 100, 100, 100],\n .....:    },\n .....:    columns=[\"time\", \"ticker\", \"price\", \"quantity\"],\n .....: )\n .....: \n\nIn [138]: quotes = pd.DataFrame(\n .....:    {\n .....:        \"time\": pd.to_datetime(\n .....:            [\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.030\",\n .....:                \"20160525 13:30:00.041\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.049\",\n .....:                \"20160525 13:30:00.072\",\n .....:                \"20160525 13:30:00.075\",\n .....:            ]\n .....:        ),\n .....:        \"ticker\": [\"GOOG\", \"MSFT\", \"MSFT\", \"MSFT\", \"GOOG\", \"AAPL\", \"GOOG\", \"MSFT\"],\n .....:        \"bid\": [720.50, 51.95, 51.97, 51.99, 720.50, 97.99, 720.50, 52.01],\n .....:        \"ask\": [720.93, 51.96, 51.98, 52.00, 720.93, 98.01, 720.88, 52.03],\n .....:    },\n .....:    columns=[\"time\", \"ticker\", \"bid\", \"ask\"],\n .....: )\n .....: \n\nIn [139]: trades\nOut[139]: \n time ticker   price  quantity\n0 2016-05-25 13:30:00.023   MSFT   51.95        75\n1 2016-05-25 13:30:00.038   MSFT   51.95       155\n2 2016-05-25 13:30:00.048   GOOG  720.77       100\n3 2016-05-25 13:30:00.048   GOOG  720.92       100\n4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\nIn [140]: quotes\nOut[140]: \n time ticker     bid     ask\n0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\nIn [141]: pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\nOut[141]: \n time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN \n```", "```py\nIn [142]: pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\", tolerance=pd.Timedelta(\"2ms\"))\nOut[142]: \n time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN \n```", "```py\nIn [143]: pd.merge_asof(\n .....:    trades,\n .....:    quotes,\n .....:    on=\"time\",\n .....:    by=\"ticker\",\n .....:    tolerance=pd.Timedelta(\"10ms\"),\n .....:    allow_exact_matches=False,\n .....: )\n .....: \nOut[143]: \n time ticker   price  quantity    bid    ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75    NaN    NaN\n1 2016-05-25 13:30:00.038   MSFT   51.95       155  51.97  51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100    NaN    NaN\n3 2016-05-25 13:30:00.048   GOOG  720.92       100    NaN    NaN\n4 2016-05-25 13:30:00.048   AAPL   98.00       100    NaN    NaN \n```", "```py\nIn [144]: df = pd.DataFrame(\n .....:    {\n .....:        \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n .....:        \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n .....:        \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0],\n .....:    },\n .....:    columns=[\"col1\", \"col2\", \"col3\"],\n .....: )\n .....: \n\nIn [145]: df\nOut[145]: \n col1  col2  col3\n0    a   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   3.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nIn [146]: df2 = df.copy()\n\nIn [147]: df2.loc[0, \"col1\"] = \"c\"\n\nIn [148]: df2.loc[2, \"col3\"] = 4.0\n\nIn [149]: df2\nOut[149]: \n col1  col2  col3\n0    c   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   4.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nIn [150]: df.compare(df2)\nOut[150]: \n col1       col3 \n self other self other\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0 \n```", "```py\nIn [151]: df.compare(df2, align_axis=0)\nOut[151]: \n col1  col3\n0 self     a   NaN\n other    c   NaN\n2 self   NaN   3.0\n other  NaN   4.0 \n```", "```py\nIn [152]: df.compare(df2, keep_shape=True)\nOut[152]: \n col1       col2       col3 \n self other self other self other\n0    a     c  NaN   NaN  NaN   NaN\n1  NaN   NaN  NaN   NaN  NaN   NaN\n2  NaN   NaN  NaN   NaN  3.0   4.0\n3  NaN   NaN  NaN   NaN  NaN   NaN\n4  NaN   NaN  NaN   NaN  NaN   NaN \n```", "```py\nIn [153]: df.compare(df2, keep_shape=True, keep_equal=True)\nOut[153]: \n col1       col2       col3 \n self other self other self other\n0    a     c  1.0   1.0  1.0   1.0\n1    a     a  2.0   2.0  2.0   2.0\n2    b     b  3.0   3.0  3.0   4.0\n3    b     b  NaN   NaN  4.0   4.0\n4    a     a  5.0   5.0  5.0   5.0 \n```", "```py\nIn [1]: df1 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ...:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ...:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ...:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ...:    },\n ...:    index=[0, 1, 2, 3],\n ...: )\n ...: \n\nIn [2]: df2 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A4\", \"A5\", \"A6\", \"A7\"],\n ...:        \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"],\n ...:        \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"],\n ...:        \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"],\n ...:    },\n ...:    index=[4, 5, 6, 7],\n ...: )\n ...: \n\nIn [3]: df3 = pd.DataFrame(\n ...:    {\n ...:        \"A\": [\"A8\", \"A9\", \"A10\", \"A11\"],\n ...:        \"B\": [\"B8\", \"B9\", \"B10\", \"B11\"],\n ...:        \"C\": [\"C8\", \"C9\", \"C10\", \"C11\"],\n ...:        \"D\": [\"D8\", \"D9\", \"D10\", \"D11\"],\n ...:    },\n ...:    index=[8, 9, 10, 11],\n ...: )\n ...: \n\nIn [4]: frames = [df1, df2, df3]\n\nIn [5]: result = pd.concat(frames)\n\nIn [6]: result\nOut[6]: \n A    B    C    D\n0    A0   B0   C0   D0\n1    A1   B1   C1   D1\n2    A2   B2   C2   D2\n3    A3   B3   C3   D3\n4    A4   B4   C4   D4\n5    A5   B5   C5   D5\n6    A6   B6   C6   D6\n7    A7   B7   C7   D7\n8    A8   B8   C8   D8\n9    A9   B9   C9   D9\n10  A10  B10  C10  D10\n11  A11  B11  C11  D11 \n```", "```py\nframes = [process_your_file(f) for f in files]\nresult = pd.concat(frames) \n```", "```py\nIn [7]: df4 = pd.DataFrame(\n ...:    {\n ...:        \"B\": [\"B2\", \"B3\", \"B6\", \"B7\"],\n ...:        \"D\": [\"D2\", \"D3\", \"D6\", \"D7\"],\n ...:        \"F\": [\"F2\", \"F3\", \"F6\", \"F7\"],\n ...:    },\n ...:    index=[2, 3, 6, 7],\n ...: )\n ...: \n\nIn [8]: result = pd.concat([df1, df4], axis=1)\n\nIn [9]: result\nOut[9]: \n A    B    C    D    B    D    F\n0   A0   B0   C0   D0  NaN  NaN  NaN\n1   A1   B1   C1   D1  NaN  NaN  NaN\n2   A2   B2   C2   D2   B2   D2   F2\n3   A3   B3   C3   D3   B3   D3   F3\n6  NaN  NaN  NaN  NaN   B6   D6   F6\n7  NaN  NaN  NaN  NaN   B7   D7   F7 \n```", "```py\nIn [10]: result = pd.concat([df1, df4], axis=1, join=\"inner\")\n\nIn [11]: result\nOut[11]: \n A   B   C   D   B   D   F\n2  A2  B2  C2  D2  B2  D2  F2\n3  A3  B3  C3  D3  B3  D3  F3 \n```", "```py\nIn [12]: result = pd.concat([df1, df4], axis=1).reindex(df1.index)\n\nIn [13]: result\nOut[13]: \n A   B   C   D    B    D    F\n0  A0  B0  C0  D0  NaN  NaN  NaN\n1  A1  B1  C1  D1  NaN  NaN  NaN\n2  A2  B2  C2  D2   B2   D2   F2\n3  A3  B3  C3  D3   B3   D3   F3 \n```", "```py\nIn [14]: result = pd.concat([df1, df4], ignore_index=True, sort=False)\n\nIn [15]: result\nOut[15]: \n A   B    C   D    F\n0   A0  B0   C0  D0  NaN\n1   A1  B1   C1  D1  NaN\n2   A2  B2   C2  D2  NaN\n3   A3  B3   C3  D3  NaN\n4  NaN  B2  NaN  D2   F2\n5  NaN  B3  NaN  D3   F3\n6  NaN  B6  NaN  D6   F6\n7  NaN  B7  NaN  D7   F7 \n```", "```py\nIn [16]: s1 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], name=\"X\")\n\nIn [17]: result = pd.concat([df1, s1], axis=1)\n\nIn [18]: result\nOut[18]: \n A   B   C   D   X\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [19]: s2 = pd.Series([\"_0\", \"_1\", \"_2\", \"_3\"])\n\nIn [20]: result = pd.concat([df1, s2, s2, s2], axis=1)\n\nIn [21]: result\nOut[21]: \n A   B   C   D   0   1   2\n0  A0  B0  C0  D0  _0  _0  _0\n1  A1  B1  C1  D1  _1  _1  _1\n2  A2  B2  C2  D2  _2  _2  _2\n3  A3  B3  C3  D3  _3  _3  _3 \n```", "```py\nIn [22]: result = pd.concat([df1, s1], axis=1, ignore_index=True)\n\nIn [23]: result\nOut[23]: \n 0   1   2   3   4\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [24]: result = pd.concat(frames, keys=[\"x\", \"y\", \"z\"])\n\nIn [25]: result\nOut[25]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\n\nIn [26]: result.loc[\"y\"]\nOut[26]: \n A   B   C   D\n4  A4  B4  C4  D4\n5  A5  B5  C5  D5\n6  A6  B6  C6  D6\n7  A7  B7  C7  D7 \n```", "```py\nIn [27]: s3 = pd.Series([0, 1, 2, 3], name=\"foo\")\n\nIn [28]: s4 = pd.Series([0, 1, 2, 3])\n\nIn [29]: s5 = pd.Series([0, 1, 4, 5])\n\nIn [30]: pd.concat([s3, s4, s5], axis=1)\nOut[30]: \n foo  0  1\n0    0  0  0\n1    1  1  1\n2    2  2  4\n3    3  3  5\n\nIn [31]: pd.concat([s3, s4, s5], axis=1, keys=[\"red\", \"blue\", \"yellow\"])\nOut[31]: \n red  blue  yellow\n0    0     0       0\n1    1     1       1\n2    2     2       4\n3    3     3       5 \n```", "```py\nIn [32]: pieces = {\"x\": df1, \"y\": df2, \"z\": df3}\n\nIn [33]: result = pd.concat(pieces)\n\nIn [34]: result\nOut[34]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [35]: result = pd.concat(pieces, keys=[\"z\", \"y\"])\n\nIn [36]: result\nOut[36]: \n A    B    C    D\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7 \n```", "```py\nIn [37]: result.index.levels\nOut[37]: FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [38]: result = pd.concat(\n ....:    pieces, keys=[\"x\", \"y\", \"z\"], levels=[[\"z\", \"y\", \"x\", \"w\"]], names=[\"group_key\"]\n ....: )\n ....: \n\nIn [39]: result\nOut[39]: \n A    B    C    D\ngroup_key \nx         0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny         4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz         8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [40]: result.index.levels\nOut[40]: FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [41]: s2 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], index=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [42]: result = pd.concat([df1, s2.to_frame().T], ignore_index=True)\n\nIn [43]: result\nOut[43]: \n A   B   C   D\n0  A0  B0  C0  D0\n1  A1  B1  C1  D1\n2  A2  B2  C2  D2\n3  A3  B3  C3  D3\n4  X0  X1  X2  X3 \n```", "```py\nIn [7]: df4 = pd.DataFrame(\n ...:    {\n ...:        \"B\": [\"B2\", \"B3\", \"B6\", \"B7\"],\n ...:        \"D\": [\"D2\", \"D3\", \"D6\", \"D7\"],\n ...:        \"F\": [\"F2\", \"F3\", \"F6\", \"F7\"],\n ...:    },\n ...:    index=[2, 3, 6, 7],\n ...: )\n ...: \n\nIn [8]: result = pd.concat([df1, df4], axis=1)\n\nIn [9]: result\nOut[9]: \n A    B    C    D    B    D    F\n0   A0   B0   C0   D0  NaN  NaN  NaN\n1   A1   B1   C1   D1  NaN  NaN  NaN\n2   A2   B2   C2   D2   B2   D2   F2\n3   A3   B3   C3   D3   B3   D3   F3\n6  NaN  NaN  NaN  NaN   B6   D6   F6\n7  NaN  NaN  NaN  NaN   B7   D7   F7 \n```", "```py\nIn [10]: result = pd.concat([df1, df4], axis=1, join=\"inner\")\n\nIn [11]: result\nOut[11]: \n A   B   C   D   B   D   F\n2  A2  B2  C2  D2  B2  D2  F2\n3  A3  B3  C3  D3  B3  D3  F3 \n```", "```py\nIn [12]: result = pd.concat([df1, df4], axis=1).reindex(df1.index)\n\nIn [13]: result\nOut[13]: \n A   B   C   D    B    D    F\n0  A0  B0  C0  D0  NaN  NaN  NaN\n1  A1  B1  C1  D1  NaN  NaN  NaN\n2  A2  B2  C2  D2   B2   D2   F2\n3  A3  B3  C3  D3   B3   D3   F3 \n```", "```py\nIn [14]: result = pd.concat([df1, df4], ignore_index=True, sort=False)\n\nIn [15]: result\nOut[15]: \n A   B    C   D    F\n0   A0  B0   C0  D0  NaN\n1   A1  B1   C1  D1  NaN\n2   A2  B2   C2  D2  NaN\n3   A3  B3   C3  D3  NaN\n4  NaN  B2  NaN  D2   F2\n5  NaN  B3  NaN  D3   F3\n6  NaN  B6  NaN  D6   F6\n7  NaN  B7  NaN  D7   F7 \n```", "```py\nIn [16]: s1 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], name=\"X\")\n\nIn [17]: result = pd.concat([df1, s1], axis=1)\n\nIn [18]: result\nOut[18]: \n A   B   C   D   X\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [19]: s2 = pd.Series([\"_0\", \"_1\", \"_2\", \"_3\"])\n\nIn [20]: result = pd.concat([df1, s2, s2, s2], axis=1)\n\nIn [21]: result\nOut[21]: \n A   B   C   D   0   1   2\n0  A0  B0  C0  D0  _0  _0  _0\n1  A1  B1  C1  D1  _1  _1  _1\n2  A2  B2  C2  D2  _2  _2  _2\n3  A3  B3  C3  D3  _3  _3  _3 \n```", "```py\nIn [22]: result = pd.concat([df1, s1], axis=1, ignore_index=True)\n\nIn [23]: result\nOut[23]: \n 0   1   2   3   4\n0  A0  B0  C0  D0  X0\n1  A1  B1  C1  D1  X1\n2  A2  B2  C2  D2  X2\n3  A3  B3  C3  D3  X3 \n```", "```py\nIn [24]: result = pd.concat(frames, keys=[\"x\", \"y\", \"z\"])\n\nIn [25]: result\nOut[25]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\n\nIn [26]: result.loc[\"y\"]\nOut[26]: \n A   B   C   D\n4  A4  B4  C4  D4\n5  A5  B5  C5  D5\n6  A6  B6  C6  D6\n7  A7  B7  C7  D7 \n```", "```py\nIn [27]: s3 = pd.Series([0, 1, 2, 3], name=\"foo\")\n\nIn [28]: s4 = pd.Series([0, 1, 2, 3])\n\nIn [29]: s5 = pd.Series([0, 1, 4, 5])\n\nIn [30]: pd.concat([s3, s4, s5], axis=1)\nOut[30]: \n foo  0  1\n0    0  0  0\n1    1  1  1\n2    2  2  4\n3    3  3  5\n\nIn [31]: pd.concat([s3, s4, s5], axis=1, keys=[\"red\", \"blue\", \"yellow\"])\nOut[31]: \n red  blue  yellow\n0    0     0       0\n1    1     1       1\n2    2     2       4\n3    3     3       5 \n```", "```py\nIn [32]: pieces = {\"x\": df1, \"y\": df2, \"z\": df3}\n\nIn [33]: result = pd.concat(pieces)\n\nIn [34]: result\nOut[34]: \n A    B    C    D\nx 0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [35]: result = pd.concat(pieces, keys=[\"z\", \"y\"])\n\nIn [36]: result\nOut[36]: \n A    B    C    D\nz 8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11\ny 4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7 \n```", "```py\nIn [37]: result.index.levels\nOut[37]: FrozenList([['z', 'y'], [4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [38]: result = pd.concat(\n ....:    pieces, keys=[\"x\", \"y\", \"z\"], levels=[[\"z\", \"y\", \"x\", \"w\"]], names=[\"group_key\"]\n ....: )\n ....: \n\nIn [39]: result\nOut[39]: \n A    B    C    D\ngroup_key \nx         0    A0   B0   C0   D0\n 1    A1   B1   C1   D1\n 2    A2   B2   C2   D2\n 3    A3   B3   C3   D3\ny         4    A4   B4   C4   D4\n 5    A5   B5   C5   D5\n 6    A6   B6   C6   D6\n 7    A7   B7   C7   D7\nz         8    A8   B8   C8   D8\n 9    A9   B9   C9   D9\n 10  A10  B10  C10  D10\n 11  A11  B11  C11  D11 \n```", "```py\nIn [40]: result.index.levels\nOut[40]: FrozenList([['z', 'y', 'x', 'w'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]) \n```", "```py\nIn [41]: s2 = pd.Series([\"X0\", \"X1\", \"X2\", \"X3\"], index=[\"A\", \"B\", \"C\", \"D\"])\n\nIn [42]: result = pd.concat([df1, s2.to_frame().T], ignore_index=True)\n\nIn [43]: result\nOut[43]: \n A   B   C   D\n0  A0  B0  C0  D0\n1  A1  B1  C1  D1\n2  A2  B2  C2  D2\n3  A3  B3  C3  D3\n4  X0  X1  X2  X3 \n```", "```py\nIn [44]: left = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:    }\n ....: )\n ....: \n\nIn [45]: right = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:    }\n ....: )\n ....: \n\nIn [46]: result = pd.merge(left, right, on=\"key\")\n\nIn [47]: result\nOut[47]: \n key   A   B   C   D\n0  K0  A0  B0  C0  D0\n1  K1  A1  B1  C1  D1\n2  K2  A2  B2  C2  D2\n3  K3  A3  B3  C3  D3 \n```", "```py\nIn [48]: left = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:      \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:      \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:   }\n ....: )\n ....: \n\nIn [49]: right = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K1\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K0\", \"K0\", \"K0\"],\n ....:      \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:      \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:   }\n ....: )\n ....: \n\nIn [50]: result = pd.merge(left, right, how=\"left\", on=[\"key1\", \"key2\"])\n\nIn [51]: result\nOut[51]: \n key1 key2   A   B    C    D\n0   K0   K0  A0  B0   C0   D0\n1   K0   K1  A1  B1  NaN  NaN\n2   K1   K0  A2  B2   C1   D1\n3   K1   K0  A2  B2   C2   D2\n4   K2   K1  A3  B3  NaN  NaN \n```", "```py\nIn [52]: result = pd.merge(left, right, how=\"right\", on=[\"key1\", \"key2\"])\n\nIn [53]: result\nOut[53]: \n key1 key2    A    B   C   D\n0   K0   K0   A0   B0  C0  D0\n1   K1   K0   A2   B2  C1  D1\n2   K1   K0   A2   B2  C2  D2\n3   K2   K0  NaN  NaN  C3  D3 \n```", "```py\nIn [54]: result = pd.merge(left, right, how=\"outer\", on=[\"key1\", \"key2\"])\n\nIn [55]: result\nOut[55]: \n key1 key2    A    B    C    D\n0   K0   K0   A0   B0   C0   D0\n1   K0   K1   A1   B1  NaN  NaN\n2   K1   K0   A2   B2   C1   D1\n3   K1   K0   A2   B2   C2   D2\n4   K2   K0  NaN  NaN   C3   D3\n5   K2   K1   A3   B3  NaN  NaN \n```", "```py\nIn [56]: result = pd.merge(left, right, how=\"inner\", on=[\"key1\", \"key2\"])\n\nIn [57]: result\nOut[57]: \n key1 key2   A   B   C   D\n0   K0   K0  A0  B0  C0  D0\n1   K1   K0  A2  B2  C1  D1\n2   K1   K0  A2  B2  C2  D2 \n```", "```py\nIn [58]: result = pd.merge(left, right, how=\"cross\")\n\nIn [59]: result\nOut[59]: \n key1_x key2_x   A   B key1_y key2_y   C   D\n0      K0     K0  A0  B0     K0     K0  C0  D0\n1      K0     K0  A0  B0     K1     K0  C1  D1\n2      K0     K0  A0  B0     K1     K0  C2  D2\n3      K0     K0  A0  B0     K2     K0  C3  D3\n4      K0     K1  A1  B1     K0     K0  C0  D0\n..    ...    ...  ..  ..    ...    ...  ..  ..\n11     K1     K0  A2  B2     K2     K0  C3  D3\n12     K2     K1  A3  B3     K0     K0  C0  D0\n13     K2     K1  A3  B3     K1     K0  C1  D1\n14     K2     K1  A3  B3     K1     K0  C2  D2\n15     K2     K1  A3  B3     K2     K0  C3  D3\n\n[16 rows x 8 columns] \n```", "```py\nIn [60]: df = pd.DataFrame({\"Let\": [\"A\", \"B\", \"C\"], \"Num\": [1, 2, 3]})\n\nIn [61]: df\nOut[61]: \n Let  Num\n0   A    1\n1   B    2\n2   C    3\n\nIn [62]: ser = pd.Series(\n ....:    [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n ....:    index=pd.MultiIndex.from_arrays(\n ....:        [[\"A\", \"B\", \"C\"] * 2, [1, 2, 3, 4, 5, 6]], names=[\"Let\", \"Num\"]\n ....:    ),\n ....: )\n ....: \n\nIn [63]: ser\nOut[63]: \nLet  Num\nA    1      a\nB    2      b\nC    3      c\nA    4      d\nB    5      e\nC    6      f\ndtype: object\n\nIn [64]: pd.merge(df, ser.reset_index(), on=[\"Let\", \"Num\"])\nOut[64]: \n Let  Num  0\n0   A    1  a\n1   B    2  b\n2   C    3  c \n```", "```py\nIn [65]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [2, 2]})\n\nIn [66]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [67]: result = pd.merge(left, right, on=\"B\", how=\"outer\")\n\nIn [68]: result\nOut[68]: \n A_x  B  A_y\n0    1  2    4\n1    1  2    5\n2    1  2    6\n3    2  2    4\n4    2  2    5\n5    2  2    6 \n```", "```py\nIn [69]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [1, 2]})\n\nIn [70]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [71]: result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n---------------------------------------------------------------------------\nMergeError  Traceback (most recent call last)\nCell In[71], line 1\n----> 1 result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:170, in merge(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\n  155     return _cross_merge(\n  156         left_df,\n  157         right_df,\n   (...)\n  167         copy=copy,\n  168     )\n  169 else:\n--> 170     op = _MergeOperation(\n  171         left_df,\n  172         right_df,\n  173         how=how,\n  174         on=on,\n  175         left_on=left_on,\n  176         right_on=right_on,\n  177         left_index=left_index,\n  178         right_index=right_index,\n  179         sort=sort,\n  180         suffixes=suffixes,\n  181         indicator=indicator,\n  182         validate=validate,\n  183     )\n  184     return op.get_result(copy=copy)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:813, in _MergeOperation.__init__(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\n  809 # If argument passed to validate,\n  810 # check if columns specified as unique\n  811 # are in fact unique.\n  812 if validate is not None:\n--> 813     self._validate_validate_kwd(validate)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:1657, in _MergeOperation._validate_validate_kwd(self, validate)\n  1653         raise MergeError(\n  1654             \"Merge keys are not unique in left dataset; not a one-to-one merge\"\n  1655         )\n  1656     if not right_unique:\n-> 1657         raise MergeError(\n  1658             \"Merge keys are not unique in right dataset; not a one-to-one merge\"\n  1659         )\n  1661 elif validate in [\"one_to_many\", \"1:m\"]:\n  1662     if not left_unique:\n\nMergeError: Merge keys are not unique in right dataset; not a one-to-one merge \n```", "```py\nIn [72]: pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_many\")\nOut[72]: \n A_x  B  A_y\n0    1  1  NaN\n1    2  2  4.0\n2    2  2  5.0\n3    2  2  6.0 \n```", "```py\nIn [73]: df1 = pd.DataFrame({\"col1\": [0, 1], \"col_left\": [\"a\", \"b\"]})\n\nIn [74]: df2 = pd.DataFrame({\"col1\": [1, 2, 2], \"col_right\": [2, 2, 2]})\n\nIn [75]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=True)\nOut[75]: \n col1 col_left  col_right      _merge\n0     0        a        NaN   left_only\n1     1        b        2.0        both\n2     2      NaN        2.0  right_only\n3     2      NaN        2.0  right_only \n```", "```py\nIn [76]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=\"indicator_column\")\nOut[76]: \n col1 col_left  col_right indicator_column\n0     0        a        NaN        left_only\n1     1        b        2.0             both\n2     2      NaN        2.0       right_only\n3     2      NaN        2.0       right_only \n```", "```py\nIn [77]: left = pd.DataFrame({\"k\": [\"K0\", \"K1\", \"K2\"], \"v\": [1, 2, 3]})\n\nIn [78]: right = pd.DataFrame({\"k\": [\"K0\", \"K0\", \"K3\"], \"v\": [4, 5, 6]})\n\nIn [79]: result = pd.merge(left, right, on=\"k\")\n\nIn [80]: result\nOut[80]: \n k  v_x  v_y\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [81]: result = pd.merge(left, right, on=\"k\", suffixes=(\"_l\", \"_r\"))\n\nIn [82]: result\nOut[82]: \n k  v_l  v_r\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [44]: left = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:    }\n ....: )\n ....: \n\nIn [45]: right = pd.DataFrame(\n ....:    {\n ....:        \"key\": [\"K0\", \"K1\", \"K2\", \"K3\"],\n ....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:    }\n ....: )\n ....: \n\nIn [46]: result = pd.merge(left, right, on=\"key\")\n\nIn [47]: result\nOut[47]: \n key   A   B   C   D\n0  K0  A0  B0  C0  D0\n1  K1  A1  B1  C1  D1\n2  K2  A2  B2  C2  D2\n3  K3  A3  B3  C3  D3 \n```", "```py\nIn [48]: left = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:      \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:      \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:   }\n ....: )\n ....: \n\nIn [49]: right = pd.DataFrame(\n ....:   {\n ....:      \"key1\": [\"K0\", \"K1\", \"K1\", \"K2\"],\n ....:      \"key2\": [\"K0\", \"K0\", \"K0\", \"K0\"],\n ....:      \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n ....:      \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n ....:   }\n ....: )\n ....: \n\nIn [50]: result = pd.merge(left, right, how=\"left\", on=[\"key1\", \"key2\"])\n\nIn [51]: result\nOut[51]: \n key1 key2   A   B    C    D\n0   K0   K0  A0  B0   C0   D0\n1   K0   K1  A1  B1  NaN  NaN\n2   K1   K0  A2  B2   C1   D1\n3   K1   K0  A2  B2   C2   D2\n4   K2   K1  A3  B3  NaN  NaN \n```", "```py\nIn [52]: result = pd.merge(left, right, how=\"right\", on=[\"key1\", \"key2\"])\n\nIn [53]: result\nOut[53]: \n key1 key2    A    B   C   D\n0   K0   K0   A0   B0  C0  D0\n1   K1   K0   A2   B2  C1  D1\n2   K1   K0   A2   B2  C2  D2\n3   K2   K0  NaN  NaN  C3  D3 \n```", "```py\nIn [54]: result = pd.merge(left, right, how=\"outer\", on=[\"key1\", \"key2\"])\n\nIn [55]: result\nOut[55]: \n key1 key2    A    B    C    D\n0   K0   K0   A0   B0   C0   D0\n1   K0   K1   A1   B1  NaN  NaN\n2   K1   K0   A2   B2   C1   D1\n3   K1   K0   A2   B2   C2   D2\n4   K2   K0  NaN  NaN   C3   D3\n5   K2   K1   A3   B3  NaN  NaN \n```", "```py\nIn [56]: result = pd.merge(left, right, how=\"inner\", on=[\"key1\", \"key2\"])\n\nIn [57]: result\nOut[57]: \n key1 key2   A   B   C   D\n0   K0   K0  A0  B0  C0  D0\n1   K1   K0  A2  B2  C1  D1\n2   K1   K0  A2  B2  C2  D2 \n```", "```py\nIn [58]: result = pd.merge(left, right, how=\"cross\")\n\nIn [59]: result\nOut[59]: \n key1_x key2_x   A   B key1_y key2_y   C   D\n0      K0     K0  A0  B0     K0     K0  C0  D0\n1      K0     K0  A0  B0     K1     K0  C1  D1\n2      K0     K0  A0  B0     K1     K0  C2  D2\n3      K0     K0  A0  B0     K2     K0  C3  D3\n4      K0     K1  A1  B1     K0     K0  C0  D0\n..    ...    ...  ..  ..    ...    ...  ..  ..\n11     K1     K0  A2  B2     K2     K0  C3  D3\n12     K2     K1  A3  B3     K0     K0  C0  D0\n13     K2     K1  A3  B3     K1     K0  C1  D1\n14     K2     K1  A3  B3     K1     K0  C2  D2\n15     K2     K1  A3  B3     K2     K0  C3  D3\n\n[16 rows x 8 columns] \n```", "```py\nIn [60]: df = pd.DataFrame({\"Let\": [\"A\", \"B\", \"C\"], \"Num\": [1, 2, 3]})\n\nIn [61]: df\nOut[61]: \n Let  Num\n0   A    1\n1   B    2\n2   C    3\n\nIn [62]: ser = pd.Series(\n ....:    [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n ....:    index=pd.MultiIndex.from_arrays(\n ....:        [[\"A\", \"B\", \"C\"] * 2, [1, 2, 3, 4, 5, 6]], names=[\"Let\", \"Num\"]\n ....:    ),\n ....: )\n ....: \n\nIn [63]: ser\nOut[63]: \nLet  Num\nA    1      a\nB    2      b\nC    3      c\nA    4      d\nB    5      e\nC    6      f\ndtype: object\n\nIn [64]: pd.merge(df, ser.reset_index(), on=[\"Let\", \"Num\"])\nOut[64]: \n Let  Num  0\n0   A    1  a\n1   B    2  b\n2   C    3  c \n```", "```py\nIn [65]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [2, 2]})\n\nIn [66]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [67]: result = pd.merge(left, right, on=\"B\", how=\"outer\")\n\nIn [68]: result\nOut[68]: \n A_x  B  A_y\n0    1  2    4\n1    1  2    5\n2    1  2    6\n3    2  2    4\n4    2  2    5\n5    2  2    6 \n```", "```py\nIn [69]: left = pd.DataFrame({\"A\": [1, 2], \"B\": [1, 2]})\n\nIn [70]: right = pd.DataFrame({\"A\": [4, 5, 6], \"B\": [2, 2, 2]})\n\nIn [71]: result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n---------------------------------------------------------------------------\nMergeError  Traceback (most recent call last)\nCell In[71], line 1\n----> 1 result = pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_one\")\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:170, in merge(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\n  155     return _cross_merge(\n  156         left_df,\n  157         right_df,\n   (...)\n  167         copy=copy,\n  168     )\n  169 else:\n--> 170     op = _MergeOperation(\n  171         left_df,\n  172         right_df,\n  173         how=how,\n  174         on=on,\n  175         left_on=left_on,\n  176         right_on=right_on,\n  177         left_index=left_index,\n  178         right_index=right_index,\n  179         sort=sort,\n  180         suffixes=suffixes,\n  181         indicator=indicator,\n  182         validate=validate,\n  183     )\n  184     return op.get_result(copy=copy)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:813, in _MergeOperation.__init__(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\n  809 # If argument passed to validate,\n  810 # check if columns specified as unique\n  811 # are in fact unique.\n  812 if validate is not None:\n--> 813     self._validate_validate_kwd(validate)\n\nFile ~/work/pandas/pandas/pandas/core/reshape/merge.py:1657, in _MergeOperation._validate_validate_kwd(self, validate)\n  1653         raise MergeError(\n  1654             \"Merge keys are not unique in left dataset; not a one-to-one merge\"\n  1655         )\n  1656     if not right_unique:\n-> 1657         raise MergeError(\n  1658             \"Merge keys are not unique in right dataset; not a one-to-one merge\"\n  1659         )\n  1661 elif validate in [\"one_to_many\", \"1:m\"]:\n  1662     if not left_unique:\n\nMergeError: Merge keys are not unique in right dataset; not a one-to-one merge \n```", "```py\nIn [72]: pd.merge(left, right, on=\"B\", how=\"outer\", validate=\"one_to_many\")\nOut[72]: \n A_x  B  A_y\n0    1  1  NaN\n1    2  2  4.0\n2    2  2  5.0\n3    2  2  6.0 \n```", "```py\nIn [73]: df1 = pd.DataFrame({\"col1\": [0, 1], \"col_left\": [\"a\", \"b\"]})\n\nIn [74]: df2 = pd.DataFrame({\"col1\": [1, 2, 2], \"col_right\": [2, 2, 2]})\n\nIn [75]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=True)\nOut[75]: \n col1 col_left  col_right      _merge\n0     0        a        NaN   left_only\n1     1        b        2.0        both\n2     2      NaN        2.0  right_only\n3     2      NaN        2.0  right_only \n```", "```py\nIn [76]: pd.merge(df1, df2, on=\"col1\", how=\"outer\", indicator=\"indicator_column\")\nOut[76]: \n col1 col_left  col_right indicator_column\n0     0        a        NaN        left_only\n1     1        b        2.0             both\n2     2      NaN        2.0       right_only\n3     2      NaN        2.0       right_only \n```", "```py\nIn [77]: left = pd.DataFrame({\"k\": [\"K0\", \"K1\", \"K2\"], \"v\": [1, 2, 3]})\n\nIn [78]: right = pd.DataFrame({\"k\": [\"K0\", \"K0\", \"K3\"], \"v\": [4, 5, 6]})\n\nIn [79]: result = pd.merge(left, right, on=\"k\")\n\nIn [80]: result\nOut[80]: \n k  v_x  v_y\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [81]: result = pd.merge(left, right, on=\"k\", suffixes=(\"_l\", \"_r\"))\n\nIn [82]: result\nOut[82]: \n k  v_l  v_r\n0  K0    1    4\n1  K0    1    5 \n```", "```py\nIn [83]: left = pd.DataFrame(\n ....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]}, index=[\"K0\", \"K1\", \"K2\"]\n ....: )\n ....: \n\nIn [84]: right = pd.DataFrame(\n ....:    {\"C\": [\"C0\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D2\", \"D3\"]}, index=[\"K0\", \"K2\", \"K3\"]\n ....: )\n ....: \n\nIn [85]: result = left.join(right)\n\nIn [86]: result\nOut[86]: \n A   B    C    D\nK0  A0  B0   C0   D0\nK1  A1  B1  NaN  NaN\nK2  A2  B2   C2   D2 \n```", "```py\nIn [87]: result = left.join(right, how=\"outer\")\n\nIn [88]: result\nOut[88]: \n A    B    C    D\nK0   A0   B0   C0   D0\nK1   A1   B1  NaN  NaN\nK2   A2   B2   C2   D2\nK3  NaN  NaN   C3   D3 \n```", "```py\nIn [89]: result = left.join(right, how=\"inner\")\n\nIn [90]: result\nOut[90]: \n A   B   C   D\nK0  A0  B0  C0  D0\nK2  A2  B2  C2  D2 \n```", "```py\nIn [91]: left = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:        \"key\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:    }\n ....: )\n ....: \n\nIn [92]: right = pd.DataFrame({\"C\": [\"C0\", \"C1\"], \"D\": [\"D0\", \"D1\"]}, index=[\"K0\", \"K1\"])\n\nIn [93]: result = left.join(right, on=\"key\")\n\nIn [94]: result\nOut[94]: \n A   B key   C   D\n0  A0  B0  K0  C0  D0\n1  A1  B1  K1  C1  D1\n2  A2  B2  K0  C0  D0\n3  A3  B3  K1  C1  D1 \n```", "```py\nIn [95]: result = pd.merge(\n ....:    left, right, left_on=\"key\", right_index=True, how=\"left\", sort=False\n ....: )\n ....: \n\nIn [96]: result\nOut[96]: \n A   B key   C   D\n0  A0  B0  K0  C0  D0\n1  A1  B1  K1  C1  D1\n2  A2  B2  K0  C0  D0\n3  A3  B3  K1  C1  D1 \n```", "```py\nIn [97]: left = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n ....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n ....:        \"key1\": [\"K0\", \"K0\", \"K1\", \"K2\"],\n ....:        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n ....:    }\n ....: )\n ....: \n\nIn [98]: index = pd.MultiIndex.from_tuples(\n ....:    [(\"K0\", \"K0\"), (\"K1\", \"K0\"), (\"K2\", \"K0\"), (\"K2\", \"K1\")]\n ....: )\n ....: \n\nIn [99]: right = pd.DataFrame(\n ....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=index\n ....: )\n ....: \n\nIn [100]: result = left.join(right, on=[\"key1\", \"key2\"])\n\nIn [101]: result\nOut[101]: \n A   B key1 key2    C    D\n0  A0  B0   K0   K0   C0   D0\n1  A1  B1   K0   K1  NaN  NaN\n2  A2  B2   K1   K0   C1   D1\n3  A3  B3   K2   K1   C3   D3 \n```", "```py\nIn [102]: result = left.join(right, on=[\"key1\", \"key2\"], how=\"inner\")\n\nIn [103]: result\nOut[103]: \n A   B key1 key2   C   D\n0  A0  B0   K0   K0  C0  D0\n2  A2  B2   K1   K0  C1  D1\n3  A3  B3   K2   K1  C3  D3 \n```", "```py\nIn [104]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]},\n .....:    index=pd.Index([\"K0\", \"K1\", \"K2\"], name=\"key\"),\n .....: )\n .....: \n\nIn [105]: index = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")],\n .....:    names=[\"key\", \"Y\"],\n .....: )\n .....: \n\nIn [106]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]},\n .....:    index=index,\n .....: )\n .....: \n\nIn [107]: result = left.join(right, how=\"inner\")\n\nIn [108]: result\nOut[108]: \n A   B   C   D\nkey Y \nK0  Y0  A0  B0  C0  D0\nK1  Y1  A1  B1  C1  D1\nK2  Y2  A2  B2  C2  D2\n Y3  A2  B2  C3  D3 \n```", "```py\nIn [109]: leftindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\"), [1, 2]], names=[\"abc\", \"xy\", \"num\"]\n .....: )\n .....: \n\nIn [110]: left = pd.DataFrame({\"v1\": range(12)}, index=leftindex)\n\nIn [111]: left\nOut[111]: \n v1\nabc xy num \na   x  1     0\n 2     1\n y  1     2\n 2     3\nb   x  1     4\n 2     5\n y  1     6\n 2     7\nc   x  1     8\n 2     9\n y  1    10\n 2    11\n\nIn [112]: rightindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\")], names=[\"abc\", \"xy\"]\n .....: )\n .....: \n\nIn [113]: right = pd.DataFrame({\"v2\": [100 * i for i in range(1, 7)]}, index=rightindex)\n\nIn [114]: right\nOut[114]: \n v2\nabc xy \na   x   100\n y   200\nb   x   300\n y   400\nc   x   500\n y   600\n\nIn [115]: left.join(right, on=[\"abc\", \"xy\"], how=\"inner\")\nOut[115]: \n v1   v2\nabc xy num \na   x  1     0  100\n 2     1  100\n y  1     2  200\n 2     3  200\nb   x  1     4  300\n 2     5  300\n y  1     6  400\n 2     7  400\nc   x  1     8  500\n 2     9  500\n y  1    10  600\n 2    11  600 \n```", "```py\nIn [116]: leftindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"X0\"), (\"K0\", \"X1\"), (\"K1\", \"X2\")], names=[\"key\", \"X\"]\n .....: )\n .....: \n\nIn [117]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]}, index=leftindex\n .....: )\n .....: \n\nIn [118]: rightindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")], names=[\"key\", \"Y\"]\n .....: )\n .....: \n\nIn [119]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=rightindex\n .....: )\n .....: \n\nIn [120]: result = pd.merge(\n .....:    left.reset_index(), right.reset_index(), on=[\"key\"], how=\"inner\"\n .....: ).set_index([\"key\", \"X\", \"Y\"])\n .....: \n\nIn [121]: result\nOut[121]: \n A   B   C   D\nkey X  Y \nK0  X0 Y0  A0  B0  C0  D0\n X1 Y0  A1  B1  C0  D0\nK1  X2 Y1  A2  B2  C1  D1 \n```", "```py\nIn [122]: left_index = pd.Index([\"K0\", \"K0\", \"K1\", \"K2\"], name=\"key1\")\n\nIn [123]: left = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n .....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n .....:        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=left_index,\n .....: )\n .....: \n\nIn [124]: right_index = pd.Index([\"K0\", \"K1\", \"K2\", \"K2\"], name=\"key1\")\n\nIn [125]: right = pd.DataFrame(\n .....:    {\n .....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n .....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n .....:        \"key2\": [\"K0\", \"K0\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=right_index,\n .....: )\n .....: \n\nIn [126]: result = left.merge(right, on=[\"key1\", \"key2\"])\n\nIn [127]: result\nOut[127]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3 \n```", "```py\nIn [128]: right2 = pd.DataFrame({\"v\": [7, 8, 9]}, index=[\"K1\", \"K1\", \"K2\"])\n\nIn [129]: result = left.join([right, right2]) \n```", "```py\nIn [130]: df1 = pd.DataFrame(\n .....:    [[np.nan, 3.0, 5.0], [-4.6, np.nan, np.nan], [np.nan, 7.0, np.nan]]\n .....: )\n .....: \n\nIn [131]: df2 = pd.DataFrame([[-42.6, np.nan, -8.2], [-5.0, 1.6, 4]], index=[1, 2])\n\nIn [132]: result = df1.combine_first(df2)\n\nIn [133]: result\nOut[133]: \n 0    1    2\n0  NaN  3.0  5.0\n1 -4.6  NaN -8.2\n2 -5.0  7.0  4.0 \n```", "```py\nIn [104]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]},\n .....:    index=pd.Index([\"K0\", \"K1\", \"K2\"], name=\"key\"),\n .....: )\n .....: \n\nIn [105]: index = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")],\n .....:    names=[\"key\", \"Y\"],\n .....: )\n .....: \n\nIn [106]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]},\n .....:    index=index,\n .....: )\n .....: \n\nIn [107]: result = left.join(right, how=\"inner\")\n\nIn [108]: result\nOut[108]: \n A   B   C   D\nkey Y \nK0  Y0  A0  B0  C0  D0\nK1  Y1  A1  B1  C1  D1\nK2  Y2  A2  B2  C2  D2\n Y3  A2  B2  C3  D3 \n```", "```py\nIn [109]: leftindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\"), [1, 2]], names=[\"abc\", \"xy\", \"num\"]\n .....: )\n .....: \n\nIn [110]: left = pd.DataFrame({\"v1\": range(12)}, index=leftindex)\n\nIn [111]: left\nOut[111]: \n v1\nabc xy num \na   x  1     0\n 2     1\n y  1     2\n 2     3\nb   x  1     4\n 2     5\n y  1     6\n 2     7\nc   x  1     8\n 2     9\n y  1    10\n 2    11\n\nIn [112]: rightindex = pd.MultiIndex.from_product(\n .....:    [list(\"abc\"), list(\"xy\")], names=[\"abc\", \"xy\"]\n .....: )\n .....: \n\nIn [113]: right = pd.DataFrame({\"v2\": [100 * i for i in range(1, 7)]}, index=rightindex)\n\nIn [114]: right\nOut[114]: \n v2\nabc xy \na   x   100\n y   200\nb   x   300\n y   400\nc   x   500\n y   600\n\nIn [115]: left.join(right, on=[\"abc\", \"xy\"], how=\"inner\")\nOut[115]: \n v1   v2\nabc xy num \na   x  1     0  100\n 2     1  100\n y  1     2  200\n 2     3  200\nb   x  1     4  300\n 2     5  300\n y  1     6  400\n 2     7  400\nc   x  1     8  500\n 2     9  500\n y  1    10  600\n 2    11  600 \n```", "```py\nIn [116]: leftindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"X0\"), (\"K0\", \"X1\"), (\"K1\", \"X2\")], names=[\"key\", \"X\"]\n .....: )\n .....: \n\nIn [117]: left = pd.DataFrame(\n .....:    {\"A\": [\"A0\", \"A1\", \"A2\"], \"B\": [\"B0\", \"B1\", \"B2\"]}, index=leftindex\n .....: )\n .....: \n\nIn [118]: rightindex = pd.MultiIndex.from_tuples(\n .....:    [(\"K0\", \"Y0\"), (\"K1\", \"Y1\"), (\"K2\", \"Y2\"), (\"K2\", \"Y3\")], names=[\"key\", \"Y\"]\n .....: )\n .....: \n\nIn [119]: right = pd.DataFrame(\n .....:    {\"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=rightindex\n .....: )\n .....: \n\nIn [120]: result = pd.merge(\n .....:    left.reset_index(), right.reset_index(), on=[\"key\"], how=\"inner\"\n .....: ).set_index([\"key\", \"X\", \"Y\"])\n .....: \n\nIn [121]: result\nOut[121]: \n A   B   C   D\nkey X  Y \nK0  X0 Y0  A0  B0  C0  D0\n X1 Y0  A1  B1  C0  D0\nK1  X2 Y1  A2  B2  C1  D1 \n```", "```py\nIn [122]: left_index = pd.Index([\"K0\", \"K0\", \"K1\", \"K2\"], name=\"key1\")\n\nIn [123]: left = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"A0\", \"A1\", \"A2\", \"A3\"],\n .....:        \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"],\n .....:        \"key2\": [\"K0\", \"K1\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=left_index,\n .....: )\n .....: \n\nIn [124]: right_index = pd.Index([\"K0\", \"K1\", \"K2\", \"K2\"], name=\"key1\")\n\nIn [125]: right = pd.DataFrame(\n .....:    {\n .....:        \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"],\n .....:        \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"],\n .....:        \"key2\": [\"K0\", \"K0\", \"K0\", \"K1\"],\n .....:    },\n .....:    index=right_index,\n .....: )\n .....: \n\nIn [126]: result = left.merge(right, on=[\"key1\", \"key2\"])\n\nIn [127]: result\nOut[127]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3 \n```", "```py\nIn [128]: right2 = pd.DataFrame({\"v\": [7, 8, 9]}, index=[\"K1\", \"K1\", \"K2\"])\n\nIn [129]: result = left.join([right, right2]) \n```", "```py\nIn [130]: df1 = pd.DataFrame(\n .....:    [[np.nan, 3.0, 5.0], [-4.6, np.nan, np.nan], [np.nan, 7.0, np.nan]]\n .....: )\n .....: \n\nIn [131]: df2 = pd.DataFrame([[-42.6, np.nan, -8.2], [-5.0, 1.6, 4]], index=[1, 2])\n\nIn [132]: result = df1.combine_first(df2)\n\nIn [133]: result\nOut[133]: \n 0    1    2\n0  NaN  3.0  5.0\n1 -4.6  NaN -8.2\n2 -5.0  7.0  4.0 \n```", "```py\nIn [134]: left = pd.DataFrame(\n .....:    {\"k\": [\"K0\", \"K1\", \"K1\", \"K2\"], \"lv\": [1, 2, 3, 4], \"s\": [\"a\", \"b\", \"c\", \"d\"]}\n .....: )\n .....: \n\nIn [135]: right = pd.DataFrame({\"k\": [\"K1\", \"K2\", \"K4\"], \"rv\": [1, 2, 3]})\n\nIn [136]: pd.merge_ordered(left, right, fill_method=\"ffill\", left_by=\"s\")\nOut[136]: \n k   lv  s   rv\n0   K0  1.0  a  NaN\n1   K1  1.0  a  1.0\n2   K2  1.0  a  2.0\n3   K4  1.0  a  3.0\n4   K1  2.0  b  1.0\n5   K2  2.0  b  2.0\n6   K4  2.0  b  3.0\n7   K1  3.0  c  1.0\n8   K2  3.0  c  2.0\n9   K4  3.0  c  3.0\n10  K1  NaN  d  1.0\n11  K2  4.0  d  2.0\n12  K4  4.0  d  3.0 \n```", "```py\nIn [137]: trades = pd.DataFrame(\n .....:    {\n .....:        \"time\": pd.to_datetime(\n .....:            [\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.038\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.048\",\n .....:            ]\n .....:        ),\n .....:        \"ticker\": [\"MSFT\", \"MSFT\", \"GOOG\", \"GOOG\", \"AAPL\"],\n .....:        \"price\": [51.95, 51.95, 720.77, 720.92, 98.00],\n .....:        \"quantity\": [75, 155, 100, 100, 100],\n .....:    },\n .....:    columns=[\"time\", \"ticker\", \"price\", \"quantity\"],\n .....: )\n .....: \n\nIn [138]: quotes = pd.DataFrame(\n .....:    {\n .....:        \"time\": pd.to_datetime(\n .....:            [\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.023\",\n .....:                \"20160525 13:30:00.030\",\n .....:                \"20160525 13:30:00.041\",\n .....:                \"20160525 13:30:00.048\",\n .....:                \"20160525 13:30:00.049\",\n .....:                \"20160525 13:30:00.072\",\n .....:                \"20160525 13:30:00.075\",\n .....:            ]\n .....:        ),\n .....:        \"ticker\": [\"GOOG\", \"MSFT\", \"MSFT\", \"MSFT\", \"GOOG\", \"AAPL\", \"GOOG\", \"MSFT\"],\n .....:        \"bid\": [720.50, 51.95, 51.97, 51.99, 720.50, 97.99, 720.50, 52.01],\n .....:        \"ask\": [720.93, 51.96, 51.98, 52.00, 720.93, 98.01, 720.88, 52.03],\n .....:    },\n .....:    columns=[\"time\", \"ticker\", \"bid\", \"ask\"],\n .....: )\n .....: \n\nIn [139]: trades\nOut[139]: \n time ticker   price  quantity\n0 2016-05-25 13:30:00.023   MSFT   51.95        75\n1 2016-05-25 13:30:00.038   MSFT   51.95       155\n2 2016-05-25 13:30:00.048   GOOG  720.77       100\n3 2016-05-25 13:30:00.048   GOOG  720.92       100\n4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\nIn [140]: quotes\nOut[140]: \n time ticker     bid     ask\n0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\nIn [141]: pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\")\nOut[141]: \n time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN \n```", "```py\nIn [142]: pd.merge_asof(trades, quotes, on=\"time\", by=\"ticker\", tolerance=pd.Timedelta(\"2ms\"))\nOut[142]: \n time ticker   price  quantity     bid     ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN \n```", "```py\nIn [143]: pd.merge_asof(\n .....:    trades,\n .....:    quotes,\n .....:    on=\"time\",\n .....:    by=\"ticker\",\n .....:    tolerance=pd.Timedelta(\"10ms\"),\n .....:    allow_exact_matches=False,\n .....: )\n .....: \nOut[143]: \n time ticker   price  quantity    bid    ask\n0 2016-05-25 13:30:00.023   MSFT   51.95        75    NaN    NaN\n1 2016-05-25 13:30:00.038   MSFT   51.95       155  51.97  51.98\n2 2016-05-25 13:30:00.048   GOOG  720.77       100    NaN    NaN\n3 2016-05-25 13:30:00.048   GOOG  720.92       100    NaN    NaN\n4 2016-05-25 13:30:00.048   AAPL   98.00       100    NaN    NaN \n```", "```py\nIn [144]: df = pd.DataFrame(\n .....:    {\n .....:        \"col1\": [\"a\", \"a\", \"b\", \"b\", \"a\"],\n .....:        \"col2\": [1.0, 2.0, 3.0, np.nan, 5.0],\n .....:        \"col3\": [1.0, 2.0, 3.0, 4.0, 5.0],\n .....:    },\n .....:    columns=[\"col1\", \"col2\", \"col3\"],\n .....: )\n .....: \n\nIn [145]: df\nOut[145]: \n col1  col2  col3\n0    a   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   3.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nIn [146]: df2 = df.copy()\n\nIn [147]: df2.loc[0, \"col1\"] = \"c\"\n\nIn [148]: df2.loc[2, \"col3\"] = 4.0\n\nIn [149]: df2\nOut[149]: \n col1  col2  col3\n0    c   1.0   1.0\n1    a   2.0   2.0\n2    b   3.0   4.0\n3    b   NaN   4.0\n4    a   5.0   5.0\n\nIn [150]: df.compare(df2)\nOut[150]: \n col1       col3 \n self other self other\n0    a     c  NaN   NaN\n2  NaN   NaN  3.0   4.0 \n```", "```py\nIn [151]: df.compare(df2, align_axis=0)\nOut[151]: \n col1  col3\n0 self     a   NaN\n other    c   NaN\n2 self   NaN   3.0\n other  NaN   4.0 \n```", "```py\nIn [152]: df.compare(df2, keep_shape=True)\nOut[152]: \n col1       col2       col3 \n self other self other self other\n0    a     c  NaN   NaN  NaN   NaN\n1  NaN   NaN  NaN   NaN  NaN   NaN\n2  NaN   NaN  NaN   NaN  3.0   4.0\n3  NaN   NaN  NaN   NaN  NaN   NaN\n4  NaN   NaN  NaN   NaN  NaN   NaN \n```", "```py\nIn [153]: df.compare(df2, keep_shape=True, keep_equal=True)\nOut[153]: \n col1       col2       col3 \n self other self other self other\n0    a     c  1.0   1.0  1.0   1.0\n1    a     a  2.0   2.0  2.0   2.0\n2    b     b  3.0   3.0  3.0   4.0\n3    b     b  NaN   NaN  4.0   4.0\n4    a     a  5.0   5.0  5.0   5.0 \n```"]