["```py\nIn [1]: pd.Series([1, 2], dtype=np.int64).reindex([0, 1, 2])\nOut[1]: \n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\nIn [2]: pd.Series([True, False], dtype=np.bool_).reindex([0, 1, 2])\nOut[2]: \n0     True\n1    False\n2      NaN\ndtype: object \n```", "```py\nIn [3]: pd.Series([1, 2], dtype=np.dtype(\"timedelta64[ns]\")).reindex([0, 1, 2])\nOut[3]: \n0   0 days 00:00:00.000000001\n1   0 days 00:00:00.000000002\n2                         NaT\ndtype: timedelta64[ns]\n\nIn [4]: pd.Series([1, 2], dtype=np.dtype(\"datetime64[ns]\")).reindex([0, 1, 2])\nOut[4]: \n0   1970-01-01 00:00:00.000000001\n1   1970-01-01 00:00:00.000000002\n2                             NaT\ndtype: datetime64[ns]\n\nIn [5]: pd.Series([\"2020\", \"2020\"], dtype=pd.PeriodDtype(\"D\")).reindex([0, 1, 2])\nOut[5]: \n0    2020-01-01\n1    2020-01-01\n2           NaT\ndtype: period[D] \n```", "```py\nIn [6]: pd.Series([1, 2], dtype=\"Int64\").reindex([0, 1, 2])\nOut[6]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [7]: pd.Series([True, False], dtype=\"boolean[pyarrow]\").reindex([0, 1, 2])\nOut[7]: \n0     True\n1    False\n2     <NA>\ndtype: bool[pyarrow] \n```", "```py\nIn [8]: ser = pd.Series([pd.Timestamp(\"2020-01-01\"), pd.NaT])\n\nIn [9]: ser\nOut[9]: \n0   2020-01-01\n1          NaT\ndtype: datetime64[ns]\n\nIn [10]: pd.isna(ser)\nOut[10]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [11]: ser = pd.Series([1, None], dtype=object)\n\nIn [12]: ser\nOut[12]: \n0       1\n1    None\ndtype: object\n\nIn [13]: pd.isna(ser)\nOut[13]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [14]: None == None  # noqa: E711\nOut[14]: True\n\nIn [15]: np.nan == np.nan\nOut[15]: False\n\nIn [16]: pd.NaT == pd.NaT\nOut[16]: False\n\nIn [17]: pd.NA == pd.NA\nOut[17]: <NA> \n```", "```py\nIn [18]: ser = pd.Series([True, None], dtype=\"boolean[pyarrow]\")\n\nIn [19]: ser == pd.NA\nOut[19]: \n0    <NA>\n1    <NA>\ndtype: bool[pyarrow]\n\nIn [20]: pd.isna(ser)\nOut[20]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [21]: s = pd.Series([1, 2, None], dtype=\"Int64\")\n\nIn [22]: s\nOut[22]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [23]: s[2]\nOut[23]: <NA>\n\nIn [24]: s[2] is pd.NA\nOut[24]: True \n```", "```py\nIn [25]: pd.NA + 1\nOut[25]: <NA>\n\nIn [26]: \"a\" * pd.NA\nOut[26]: <NA> \n```", "```py\nIn [27]: pd.NA ** 0\nOut[27]: 1\n\nIn [28]: 1 ** pd.NA\nOut[28]: 1 \n```", "```py\nIn [29]: pd.NA == 1\nOut[29]: <NA>\n\nIn [30]: pd.NA == pd.NA\nOut[30]: <NA>\n\nIn [31]: pd.NA < 2.5\nOut[31]: <NA> \n```", "```py\nIn [32]: pd.isna(pd.NA)\nOut[32]: True \n```", "```py\nIn [33]: True | False\nOut[33]: True\n\nIn [34]: True | pd.NA\nOut[34]: True\n\nIn [35]: pd.NA | True\nOut[35]: True \n```", "```py\nIn [36]: False | True\nOut[36]: True\n\nIn [37]: False | False\nOut[37]: False\n\nIn [38]: False | pd.NA\nOut[38]: <NA> \n```", "```py\nIn [39]: False & True\nOut[39]: False\n\nIn [40]: False & False\nOut[40]: False\n\nIn [41]: False & pd.NA\nOut[41]: False \n```", "```py\nIn [42]: True & True\nOut[42]: True\n\nIn [43]: True & False\nOut[43]: False\n\nIn [44]: True & pd.NA\nOut[44]: <NA> \n```", "```py\nIn [45]: bool(pd.NA)\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[45], line 1\n----> 1 bool(pd.NA)\n\nFile missing.pyx:392, in pandas._libs.missing.NAType.__bool__()\n\nTypeError: boolean value of NA is ambiguous \n```", "```py\nIn [46]: np.log(pd.NA)\nOut[46]: <NA>\n\nIn [47]: np.add(pd.NA, 1)\nOut[47]: <NA> \n```", "```py\nIn [48]: a = np.array([1, 2, 3])\n\nIn [49]: np.greater(a, pd.NA)\nOut[49]: array([<NA>, <NA>, <NA>], dtype=object) \n```", "```py\nIn [50]: import io\n\nIn [51]: data = io.StringIO(\"a,b\\n,True\\n2,\")\n\nIn [52]: df = pd.read_csv(data)\n\nIn [53]: df.dtypes\nOut[53]: \na    float64\nb     object\ndtype: object\n\nIn [54]: df_conv = df.convert_dtypes()\n\nIn [55]: df_conv\nOut[55]: \n a     b\n0  <NA>  True\n1     2  <NA>\n\nIn [56]: df_conv.dtypes\nOut[56]: \na      Int64\nb    boolean\ndtype: object \n```", "```py\nIn [57]: ser = pd.Series([1., 2., 3.])\n\nIn [58]: ser.loc[0] = None\n\nIn [59]: ser\nOut[59]: \n0    NaN\n1    2.0\n2    3.0\ndtype: float64\n\nIn [60]: ser = pd.Series([pd.Timestamp(\"2021\"), pd.Timestamp(\"2021\")])\n\nIn [61]: ser.iloc[0] = np.nan\n\nIn [62]: ser\nOut[62]: \n0          NaT\n1   2021-01-01\ndtype: datetime64[ns]\n\nIn [63]: ser = pd.Series([True, False], dtype=\"boolean[pyarrow]\")\n\nIn [64]: ser.iloc[0] = None\n\nIn [65]: ser\nOut[65]: \n0     <NA>\n1    False\ndtype: bool[pyarrow] \n```", "```py\nIn [66]: s = pd.Series([\"a\", \"b\", \"c\"], dtype=object)\n\nIn [67]: s.loc[0] = None\n\nIn [68]: s.loc[1] = np.nan\n\nIn [69]: s\nOut[69]: \n0    None\n1     NaN\n2       c\ndtype: object \n```", "```py\nIn [70]: ser1 = pd.Series([np.nan, np.nan, 2, 3])\n\nIn [71]: ser2 = pd.Series([np.nan, 1, np.nan, 4])\n\nIn [72]: ser1\nOut[72]: \n0    NaN\n1    NaN\n2    2.0\n3    3.0\ndtype: float64\n\nIn [73]: ser2\nOut[73]: \n0    NaN\n1    1.0\n2    NaN\n3    4.0\ndtype: float64\n\nIn [74]: ser1 + ser2\nOut[74]: \n0    NaN\n1    NaN\n2    NaN\n3    7.0\ndtype: float64 \n```", "```py\nIn [75]: pd.Series([np.nan]).sum()\nOut[75]: 0.0\n\nIn [76]: pd.Series([], dtype=\"float64\").sum()\nOut[76]: 0.0 \n```", "```py\nIn [77]: pd.Series([np.nan]).prod()\nOut[77]: 1.0\n\nIn [78]: pd.Series([], dtype=\"float64\").prod()\nOut[78]: 1.0 \n```", "```py\nIn [79]: ser = pd.Series([1, np.nan, 3, np.nan])\n\nIn [80]: ser\nOut[80]: \n0    1.0\n1    NaN\n2    3.0\n3    NaN\ndtype: float64\n\nIn [81]: ser.cumsum()\nOut[81]: \n0    1.0\n1    NaN\n2    4.0\n3    NaN\ndtype: float64\n\nIn [82]: ser.cumsum(skipna=False)\nOut[82]: \n0    1.0\n1    NaN\n2    NaN\n3    NaN\ndtype: float64 \n```", "```py\nIn [83]: df = pd.DataFrame([[np.nan, 1, 2], [1, 2, np.nan], [1, 2, 3]])\n\nIn [84]: df\nOut[84]: \n 0  1    2\n0  NaN  1  2.0\n1  1.0  2  NaN\n2  1.0  2  3.0\n\nIn [85]: df.dropna()\nOut[85]: \n 0  1    2\n2  1.0  2  3.0\n\nIn [86]: df.dropna(axis=1)\nOut[86]: \n 1\n0  1\n1  2\n2  2\n\nIn [87]: ser = pd.Series([1, pd.NA], dtype=\"int64[pyarrow]\")\n\nIn [88]: ser.dropna()\nOut[88]: \n0    1\ndtype: int64[pyarrow] \n```", "```py\nIn [89]: data = {\"np\": [1.0, np.nan, np.nan, 2], \"arrow\": pd.array([1.0, pd.NA, pd.NA, 2], dtype=\"float64[pyarrow]\")}\n\nIn [90]: df = pd.DataFrame(data)\n\nIn [91]: df\nOut[91]: \n np  arrow\n0  1.0    1.0\n1  NaN   <NA>\n2  NaN   <NA>\n3  2.0    2.0\n\nIn [92]: df.fillna(0)\nOut[92]: \n np  arrow\n0  1.0    1.0\n1  0.0    0.0\n2  0.0    0.0\n3  2.0    2.0 \n```", "```py\nIn [93]: df.ffill()\nOut[93]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  1.0    1.0\n3  2.0    2.0\n\nIn [94]: df.bfill()\nOut[94]: \n np  arrow\n0  1.0    1.0\n1  2.0    2.0\n2  2.0    2.0\n3  2.0    2.0 \n```", "```py\nIn [95]: df.ffill(limit=1)\nOut[95]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  NaN   <NA>\n3  2.0    2.0 \n```", "```py\nIn [96]: dff = pd.DataFrame(np.arange(30, dtype=np.float64).reshape(10, 3), columns=list(\"ABC\"))\n\nIn [97]: dff.iloc[3:5, 0] = np.nan\n\nIn [98]: dff.iloc[4:6, 1] = np.nan\n\nIn [99]: dff.iloc[5:8, 2] = np.nan\n\nIn [100]: dff\nOut[100]: \n A     B     C\n0   0.0   1.0   2.0\n1   3.0   4.0   5.0\n2   6.0   7.0   8.0\n3   NaN  10.0  11.0\n4   NaN   NaN  14.0\n5  15.0   NaN   NaN\n6  18.0  19.0   NaN\n7  21.0  22.0   NaN\n8  24.0  25.0  26.0\n9  27.0  28.0  29.0\n\nIn [101]: dff.fillna(dff.mean())\nOut[101]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [102]: dff.where(pd.notna(dff), dff.mean(), axis=\"columns\")\nOut[102]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [103]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:        \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:    }\n .....: )\n .....: \n\nIn [104]: df\nOut[104]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [105]: df.interpolate()\nOut[105]: \n A      B\n0  1.0   0.25\n1  2.1   1.50\n2  3.4   2.75\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [106]: idx = pd.date_range(\"2020-01-01\", periods=10, freq=\"D\")\n\nIn [107]: data = np.random.default_rng(2).integers(0, 10, 10).astype(np.float64)\n\nIn [108]: ts = pd.Series(data, index=idx)\n\nIn [109]: ts.iloc[[1, 2, 5, 6, 9]] = np.nan\n\nIn [110]: ts\nOut[110]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-03    NaN\n2020-01-04    2.0\n2020-01-05    4.0\n2020-01-06    NaN\n2020-01-07    NaN\n2020-01-08    0.0\n2020-01-09    3.0\n2020-01-10    NaN\nFreq: D, dtype: float64\n\nIn [111]: ts.plot()\nOut[111]: <Axes: > \n```", "```py\nIn [112]: ts.interpolate()\nOut[112]: \n2020-01-01    8.000000\n2020-01-02    6.000000\n2020-01-03    4.000000\n2020-01-04    2.000000\n2020-01-05    4.000000\n2020-01-06    2.666667\n2020-01-07    1.333333\n2020-01-08    0.000000\n2020-01-09    3.000000\n2020-01-10    3.000000\nFreq: D, dtype: float64\n\nIn [113]: ts.interpolate().plot()\nOut[113]: <Axes: > \n```", "```py\nIn [114]: ts2 = ts.iloc[[0, 1, 3, 7, 9]]\n\nIn [115]: ts2\nOut[115]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    NaN\ndtype: float64\n\nIn [116]: ts2.interpolate()\nOut[116]: \n2020-01-01    8.0\n2020-01-02    5.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64\n\nIn [117]: ts2.interpolate(method=\"time\")\nOut[117]: \n2020-01-01    8.0\n2020-01-02    6.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64 \n```", "```py\nIn [118]: idx = [0.0, 1.0, 10.0]\n\nIn [119]: ser = pd.Series([0.0, np.nan, 10.0], idx)\n\nIn [120]: ser\nOut[120]: \n0.0      0.0\n1.0      NaN\n10.0    10.0\ndtype: float64\n\nIn [121]: ser.interpolate()\nOut[121]: \n0.0      0.0\n1.0      5.0\n10.0    10.0\ndtype: float64\n\nIn [122]: ser.interpolate(method=\"values\")\nOut[122]: \n0.0      0.0\n1.0      1.0\n10.0    10.0\ndtype: float64 \n```", "```py\nIn [123]: df = pd.DataFrame(\n .....:   {\n .....:      \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:      \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:   }\n .....: )\n .....: \n\nIn [124]: df\nOut[124]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [125]: df.interpolate(method=\"barycentric\")\nOut[125]: \n A       B\n0  1.00   0.250\n1  2.10  -7.660\n2  3.53  -4.515\n3  4.70   4.000\n4  5.60  12.200\n5  6.80  14.400\n\nIn [126]: df.interpolate(method=\"pchip\")\nOut[126]: \n A          B\n0  1.00000   0.250000\n1  2.10000   0.672808\n2  3.43454   1.928950\n3  4.70000   4.000000\n4  5.60000  12.200000\n5  6.80000  14.400000\n\nIn [127]: df.interpolate(method=\"akima\")\nOut[127]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.873316\n2  3.406667   0.320034\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [128]: df.interpolate(method=\"spline\", order=2)\nOut[128]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.428598\n2  3.404545   1.206900\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000\n\nIn [129]: df.interpolate(method=\"polynomial\", order=2)\nOut[129]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -2.703846\n2  3.451351  -1.453846\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [130]: np.random.seed(2)\n\nIn [131]: ser = pd.Series(np.arange(1, 10.1, 0.25) ** 2 + np.random.randn(37))\n\nIn [132]: missing = np.array([4, 13, 14, 15, 16, 17, 18, 20, 29])\n\nIn [133]: ser.iloc[missing] = np.nan\n\nIn [134]: methods = [\"linear\", \"quadratic\", \"cubic\"]\n\nIn [135]: df = pd.DataFrame({m: ser.interpolate(method=m) for m in methods})\n\nIn [136]: df.plot()\nOut[136]: <Axes: > \n```", "```py\nIn [137]: ser = pd.Series(np.sort(np.random.uniform(size=100)))\n\n# interpolate at new_index\nIn [138]: new_index = ser.index.union(pd.Index([49.25, 49.5, 49.75, 50.25, 50.5, 50.75]))\n\nIn [139]: interp_s = ser.reindex(new_index).interpolate(method=\"pchip\")\n\nIn [140]: interp_s.loc[49:51]\nOut[140]: \n49.00    0.471410\n49.25    0.476841\n49.50    0.481780\n49.75    0.485998\n50.00    0.489266\n50.25    0.491814\n50.50    0.493995\n50.75    0.495763\n51.00    0.497074\ndtype: float64 \n```", "```py\nIn [141]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan, np.nan, 13, np.nan, np.nan])\n\nIn [142]: ser\nOut[142]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [143]: ser.interpolate()\nOut[143]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64\n\nIn [144]: ser.interpolate(limit=1)\nOut[144]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8     NaN\ndtype: float64 \n```", "```py\nIn [145]: ser.interpolate(limit=1, limit_direction=\"backward\")\nOut[145]: \n0     NaN\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [146]: ser.interpolate(limit=1, limit_direction=\"both\")\nOut[146]: \n0     NaN\n1     5.0\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7    13.0\n8     NaN\ndtype: float64\n\nIn [147]: ser.interpolate(limit_direction=\"both\")\nOut[147]: \n0     5.0\n1     5.0\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\n# fill one consecutive inside value in both directions\nIn [148]: ser.interpolate(limit_direction=\"both\", limit_area=\"inside\", limit=1)\nOut[148]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values backward\nIn [149]: ser.interpolate(limit_direction=\"backward\", limit_area=\"outside\")\nOut[149]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values in both directions\nIn [150]: ser.interpolate(limit_direction=\"both\", limit_area=\"outside\")\nOut[150]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\nIn [151]: df = pd.DataFrame(np.eye(3))\n\nIn [152]: df\nOut[152]: \n 0    1    2\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0\n\nIn [153]: df_missing = df.replace(0, np.nan)\n\nIn [154]: df_missing\nOut[154]: \n 0    1    2\n0  1.0  NaN  NaN\n1  NaN  1.0  NaN\n2  NaN  NaN  1.0\n\nIn [155]: df_filled = df_missing.replace(np.nan, 2)\n\nIn [156]: df_filled\nOut[156]: \n 0    1    2\n0  1.0  2.0  2.0\n1  2.0  1.0  2.0\n2  2.0  2.0  1.0 \n```", "```py\nIn [157]: df_filled.replace([1, 44], [2, 28])\nOut[157]: \n 0    1    2\n0  2.0  2.0  2.0\n1  2.0  2.0  2.0\n2  2.0  2.0  2.0 \n```", "```py\nIn [158]: df_filled.replace({1: 44, 2: 28})\nOut[158]: \n 0     1     2\n0  44.0  28.0  28.0\n1  28.0  44.0  28.0\n2  28.0  28.0  44.0 \n```", "```py\nIn [159]: d = {\"a\": list(range(4)), \"b\": list(\"ab..\"), \"c\": [\"a\", \"b\", np.nan, \"d\"]}\n\nIn [160]: df = pd.DataFrame(d)\n\nIn [161]: df.replace(\".\", np.nan)\nOut[161]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [162]: df.replace(r\"\\s*\\.\\s*\", np.nan, regex=True)\nOut[162]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [163]: df.replace([r\"\\.\", r\"(a)\"], [\"dot\", r\"\\1stuff\"], regex=True)\nOut[163]: \n a       b       c\n0  0  astuff  astuff\n1  1       b       b\n2  2     dot     NaN\n3  3     dot       d \n```", "```py\nIn [164]: df.replace({\"b\": r\"\\s*\\.\\s*\"}, {\"b\": np.nan}, regex=True)\nOut[164]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [165]: df.replace({\"b\": {\"b\": r\"\"}}, regex=True)\nOut[165]: \n a  b    c\n0  0  a    a\n1  1       b\n2  2  .  NaN\n3  3  .    d\n\nIn [166]: df.replace(regex={\"b\": {r\"\\s*\\.\\s*\": np.nan}})\nOut[166]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d\n\nIn [167]: df.replace({\"b\": r\"\\s*(\\.)\\s*\"}, {\"b\": r\"\\1ty\"}, regex=True)\nOut[167]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  .ty  NaN\n3  3  .ty    d \n```", "```py\nIn [168]: df.replace([r\"\\s*\\.\\s*\", r\"a|b\"], \"placeholder\", regex=True)\nOut[168]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [169]: df.replace(regex=[r\"\\s*\\.\\s*\", r\"a|b\"], value=\"placeholder\")\nOut[169]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [1]: pd.Series([1, 2], dtype=np.int64).reindex([0, 1, 2])\nOut[1]: \n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\nIn [2]: pd.Series([True, False], dtype=np.bool_).reindex([0, 1, 2])\nOut[2]: \n0     True\n1    False\n2      NaN\ndtype: object \n```", "```py\nIn [3]: pd.Series([1, 2], dtype=np.dtype(\"timedelta64[ns]\")).reindex([0, 1, 2])\nOut[3]: \n0   0 days 00:00:00.000000001\n1   0 days 00:00:00.000000002\n2                         NaT\ndtype: timedelta64[ns]\n\nIn [4]: pd.Series([1, 2], dtype=np.dtype(\"datetime64[ns]\")).reindex([0, 1, 2])\nOut[4]: \n0   1970-01-01 00:00:00.000000001\n1   1970-01-01 00:00:00.000000002\n2                             NaT\ndtype: datetime64[ns]\n\nIn [5]: pd.Series([\"2020\", \"2020\"], dtype=pd.PeriodDtype(\"D\")).reindex([0, 1, 2])\nOut[5]: \n0    2020-01-01\n1    2020-01-01\n2           NaT\ndtype: period[D] \n```", "```py\nIn [6]: pd.Series([1, 2], dtype=\"Int64\").reindex([0, 1, 2])\nOut[6]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [7]: pd.Series([True, False], dtype=\"boolean[pyarrow]\").reindex([0, 1, 2])\nOut[7]: \n0     True\n1    False\n2     <NA>\ndtype: bool[pyarrow] \n```", "```py\nIn [8]: ser = pd.Series([pd.Timestamp(\"2020-01-01\"), pd.NaT])\n\nIn [9]: ser\nOut[9]: \n0   2020-01-01\n1          NaT\ndtype: datetime64[ns]\n\nIn [10]: pd.isna(ser)\nOut[10]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [11]: ser = pd.Series([1, None], dtype=object)\n\nIn [12]: ser\nOut[12]: \n0       1\n1    None\ndtype: object\n\nIn [13]: pd.isna(ser)\nOut[13]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [14]: None == None  # noqa: E711\nOut[14]: True\n\nIn [15]: np.nan == np.nan\nOut[15]: False\n\nIn [16]: pd.NaT == pd.NaT\nOut[16]: False\n\nIn [17]: pd.NA == pd.NA\nOut[17]: <NA> \n```", "```py\nIn [18]: ser = pd.Series([True, None], dtype=\"boolean[pyarrow]\")\n\nIn [19]: ser == pd.NA\nOut[19]: \n0    <NA>\n1    <NA>\ndtype: bool[pyarrow]\n\nIn [20]: pd.isna(ser)\nOut[20]: \n0    False\n1     True\ndtype: bool \n```", "```py\nIn [21]: s = pd.Series([1, 2, None], dtype=\"Int64\")\n\nIn [22]: s\nOut[22]: \n0       1\n1       2\n2    <NA>\ndtype: Int64\n\nIn [23]: s[2]\nOut[23]: <NA>\n\nIn [24]: s[2] is pd.NA\nOut[24]: True \n```", "```py\nIn [25]: pd.NA + 1\nOut[25]: <NA>\n\nIn [26]: \"a\" * pd.NA\nOut[26]: <NA> \n```", "```py\nIn [27]: pd.NA ** 0\nOut[27]: 1\n\nIn [28]: 1 ** pd.NA\nOut[28]: 1 \n```", "```py\nIn [29]: pd.NA == 1\nOut[29]: <NA>\n\nIn [30]: pd.NA == pd.NA\nOut[30]: <NA>\n\nIn [31]: pd.NA < 2.5\nOut[31]: <NA> \n```", "```py\nIn [32]: pd.isna(pd.NA)\nOut[32]: True \n```", "```py\nIn [33]: True | False\nOut[33]: True\n\nIn [34]: True | pd.NA\nOut[34]: True\n\nIn [35]: pd.NA | True\nOut[35]: True \n```", "```py\nIn [36]: False | True\nOut[36]: True\n\nIn [37]: False | False\nOut[37]: False\n\nIn [38]: False | pd.NA\nOut[38]: <NA> \n```", "```py\nIn [39]: False & True\nOut[39]: False\n\nIn [40]: False & False\nOut[40]: False\n\nIn [41]: False & pd.NA\nOut[41]: False \n```", "```py\nIn [42]: True & True\nOut[42]: True\n\nIn [43]: True & False\nOut[43]: False\n\nIn [44]: True & pd.NA\nOut[44]: <NA> \n```", "```py\nIn [45]: bool(pd.NA)\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[45], line 1\n----> 1 bool(pd.NA)\n\nFile missing.pyx:392, in pandas._libs.missing.NAType.__bool__()\n\nTypeError: boolean value of NA is ambiguous \n```", "```py\nIn [46]: np.log(pd.NA)\nOut[46]: <NA>\n\nIn [47]: np.add(pd.NA, 1)\nOut[47]: <NA> \n```", "```py\nIn [48]: a = np.array([1, 2, 3])\n\nIn [49]: np.greater(a, pd.NA)\nOut[49]: array([<NA>, <NA>, <NA>], dtype=object) \n```", "```py\nIn [50]: import io\n\nIn [51]: data = io.StringIO(\"a,b\\n,True\\n2,\")\n\nIn [52]: df = pd.read_csv(data)\n\nIn [53]: df.dtypes\nOut[53]: \na    float64\nb     object\ndtype: object\n\nIn [54]: df_conv = df.convert_dtypes()\n\nIn [55]: df_conv\nOut[55]: \n a     b\n0  <NA>  True\n1     2  <NA>\n\nIn [56]: df_conv.dtypes\nOut[56]: \na      Int64\nb    boolean\ndtype: object \n```", "```py\nIn [25]: pd.NA + 1\nOut[25]: <NA>\n\nIn [26]: \"a\" * pd.NA\nOut[26]: <NA> \n```", "```py\nIn [27]: pd.NA ** 0\nOut[27]: 1\n\nIn [28]: 1 ** pd.NA\nOut[28]: 1 \n```", "```py\nIn [29]: pd.NA == 1\nOut[29]: <NA>\n\nIn [30]: pd.NA == pd.NA\nOut[30]: <NA>\n\nIn [31]: pd.NA < 2.5\nOut[31]: <NA> \n```", "```py\nIn [32]: pd.isna(pd.NA)\nOut[32]: True \n```", "```py\nIn [33]: True | False\nOut[33]: True\n\nIn [34]: True | pd.NA\nOut[34]: True\n\nIn [35]: pd.NA | True\nOut[35]: True \n```", "```py\nIn [36]: False | True\nOut[36]: True\n\nIn [37]: False | False\nOut[37]: False\n\nIn [38]: False | pd.NA\nOut[38]: <NA> \n```", "```py\nIn [39]: False & True\nOut[39]: False\n\nIn [40]: False & False\nOut[40]: False\n\nIn [41]: False & pd.NA\nOut[41]: False \n```", "```py\nIn [42]: True & True\nOut[42]: True\n\nIn [43]: True & False\nOut[43]: False\n\nIn [44]: True & pd.NA\nOut[44]: <NA> \n```", "```py\nIn [45]: bool(pd.NA)\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[45], line 1\n----> 1 bool(pd.NA)\n\nFile missing.pyx:392, in pandas._libs.missing.NAType.__bool__()\n\nTypeError: boolean value of NA is ambiguous \n```", "```py\nIn [46]: np.log(pd.NA)\nOut[46]: <NA>\n\nIn [47]: np.add(pd.NA, 1)\nOut[47]: <NA> \n```", "```py\nIn [48]: a = np.array([1, 2, 3])\n\nIn [49]: np.greater(a, pd.NA)\nOut[49]: array([<NA>, <NA>, <NA>], dtype=object) \n```", "```py\nIn [50]: import io\n\nIn [51]: data = io.StringIO(\"a,b\\n,True\\n2,\")\n\nIn [52]: df = pd.read_csv(data)\n\nIn [53]: df.dtypes\nOut[53]: \na    float64\nb     object\ndtype: object\n\nIn [54]: df_conv = df.convert_dtypes()\n\nIn [55]: df_conv\nOut[55]: \n a     b\n0  <NA>  True\n1     2  <NA>\n\nIn [56]: df_conv.dtypes\nOut[56]: \na      Int64\nb    boolean\ndtype: object \n```", "```py\nIn [50]: import io\n\nIn [51]: data = io.StringIO(\"a,b\\n,True\\n2,\")\n\nIn [52]: df = pd.read_csv(data)\n\nIn [53]: df.dtypes\nOut[53]: \na    float64\nb     object\ndtype: object\n\nIn [54]: df_conv = df.convert_dtypes()\n\nIn [55]: df_conv\nOut[55]: \n a     b\n0  <NA>  True\n1     2  <NA>\n\nIn [56]: df_conv.dtypes\nOut[56]: \na      Int64\nb    boolean\ndtype: object \n```", "```py\nIn [57]: ser = pd.Series([1., 2., 3.])\n\nIn [58]: ser.loc[0] = None\n\nIn [59]: ser\nOut[59]: \n0    NaN\n1    2.0\n2    3.0\ndtype: float64\n\nIn [60]: ser = pd.Series([pd.Timestamp(\"2021\"), pd.Timestamp(\"2021\")])\n\nIn [61]: ser.iloc[0] = np.nan\n\nIn [62]: ser\nOut[62]: \n0          NaT\n1   2021-01-01\ndtype: datetime64[ns]\n\nIn [63]: ser = pd.Series([True, False], dtype=\"boolean[pyarrow]\")\n\nIn [64]: ser.iloc[0] = None\n\nIn [65]: ser\nOut[65]: \n0     <NA>\n1    False\ndtype: bool[pyarrow] \n```", "```py\nIn [66]: s = pd.Series([\"a\", \"b\", \"c\"], dtype=object)\n\nIn [67]: s.loc[0] = None\n\nIn [68]: s.loc[1] = np.nan\n\nIn [69]: s\nOut[69]: \n0    None\n1     NaN\n2       c\ndtype: object \n```", "```py\nIn [70]: ser1 = pd.Series([np.nan, np.nan, 2, 3])\n\nIn [71]: ser2 = pd.Series([np.nan, 1, np.nan, 4])\n\nIn [72]: ser1\nOut[72]: \n0    NaN\n1    NaN\n2    2.0\n3    3.0\ndtype: float64\n\nIn [73]: ser2\nOut[73]: \n0    NaN\n1    1.0\n2    NaN\n3    4.0\ndtype: float64\n\nIn [74]: ser1 + ser2\nOut[74]: \n0    NaN\n1    NaN\n2    NaN\n3    7.0\ndtype: float64 \n```", "```py\nIn [75]: pd.Series([np.nan]).sum()\nOut[75]: 0.0\n\nIn [76]: pd.Series([], dtype=\"float64\").sum()\nOut[76]: 0.0 \n```", "```py\nIn [77]: pd.Series([np.nan]).prod()\nOut[77]: 1.0\n\nIn [78]: pd.Series([], dtype=\"float64\").prod()\nOut[78]: 1.0 \n```", "```py\nIn [79]: ser = pd.Series([1, np.nan, 3, np.nan])\n\nIn [80]: ser\nOut[80]: \n0    1.0\n1    NaN\n2    3.0\n3    NaN\ndtype: float64\n\nIn [81]: ser.cumsum()\nOut[81]: \n0    1.0\n1    NaN\n2    4.0\n3    NaN\ndtype: float64\n\nIn [82]: ser.cumsum(skipna=False)\nOut[82]: \n0    1.0\n1    NaN\n2    NaN\n3    NaN\ndtype: float64 \n```", "```py\nIn [83]: df = pd.DataFrame([[np.nan, 1, 2], [1, 2, np.nan], [1, 2, 3]])\n\nIn [84]: df\nOut[84]: \n 0  1    2\n0  NaN  1  2.0\n1  1.0  2  NaN\n2  1.0  2  3.0\n\nIn [85]: df.dropna()\nOut[85]: \n 0  1    2\n2  1.0  2  3.0\n\nIn [86]: df.dropna(axis=1)\nOut[86]: \n 1\n0  1\n1  2\n2  2\n\nIn [87]: ser = pd.Series([1, pd.NA], dtype=\"int64[pyarrow]\")\n\nIn [88]: ser.dropna()\nOut[88]: \n0    1\ndtype: int64[pyarrow] \n```", "```py\nIn [89]: data = {\"np\": [1.0, np.nan, np.nan, 2], \"arrow\": pd.array([1.0, pd.NA, pd.NA, 2], dtype=\"float64[pyarrow]\")}\n\nIn [90]: df = pd.DataFrame(data)\n\nIn [91]: df\nOut[91]: \n np  arrow\n0  1.0    1.0\n1  NaN   <NA>\n2  NaN   <NA>\n3  2.0    2.0\n\nIn [92]: df.fillna(0)\nOut[92]: \n np  arrow\n0  1.0    1.0\n1  0.0    0.0\n2  0.0    0.0\n3  2.0    2.0 \n```", "```py\nIn [93]: df.ffill()\nOut[93]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  1.0    1.0\n3  2.0    2.0\n\nIn [94]: df.bfill()\nOut[94]: \n np  arrow\n0  1.0    1.0\n1  2.0    2.0\n2  2.0    2.0\n3  2.0    2.0 \n```", "```py\nIn [95]: df.ffill(limit=1)\nOut[95]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  NaN   <NA>\n3  2.0    2.0 \n```", "```py\nIn [96]: dff = pd.DataFrame(np.arange(30, dtype=np.float64).reshape(10, 3), columns=list(\"ABC\"))\n\nIn [97]: dff.iloc[3:5, 0] = np.nan\n\nIn [98]: dff.iloc[4:6, 1] = np.nan\n\nIn [99]: dff.iloc[5:8, 2] = np.nan\n\nIn [100]: dff\nOut[100]: \n A     B     C\n0   0.0   1.0   2.0\n1   3.0   4.0   5.0\n2   6.0   7.0   8.0\n3   NaN  10.0  11.0\n4   NaN   NaN  14.0\n5  15.0   NaN   NaN\n6  18.0  19.0   NaN\n7  21.0  22.0   NaN\n8  24.0  25.0  26.0\n9  27.0  28.0  29.0\n\nIn [101]: dff.fillna(dff.mean())\nOut[101]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [102]: dff.where(pd.notna(dff), dff.mean(), axis=\"columns\")\nOut[102]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [103]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:        \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:    }\n .....: )\n .....: \n\nIn [104]: df\nOut[104]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [105]: df.interpolate()\nOut[105]: \n A      B\n0  1.0   0.25\n1  2.1   1.50\n2  3.4   2.75\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [106]: idx = pd.date_range(\"2020-01-01\", periods=10, freq=\"D\")\n\nIn [107]: data = np.random.default_rng(2).integers(0, 10, 10).astype(np.float64)\n\nIn [108]: ts = pd.Series(data, index=idx)\n\nIn [109]: ts.iloc[[1, 2, 5, 6, 9]] = np.nan\n\nIn [110]: ts\nOut[110]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-03    NaN\n2020-01-04    2.0\n2020-01-05    4.0\n2020-01-06    NaN\n2020-01-07    NaN\n2020-01-08    0.0\n2020-01-09    3.0\n2020-01-10    NaN\nFreq: D, dtype: float64\n\nIn [111]: ts.plot()\nOut[111]: <Axes: > \n```", "```py\nIn [112]: ts.interpolate()\nOut[112]: \n2020-01-01    8.000000\n2020-01-02    6.000000\n2020-01-03    4.000000\n2020-01-04    2.000000\n2020-01-05    4.000000\n2020-01-06    2.666667\n2020-01-07    1.333333\n2020-01-08    0.000000\n2020-01-09    3.000000\n2020-01-10    3.000000\nFreq: D, dtype: float64\n\nIn [113]: ts.interpolate().plot()\nOut[113]: <Axes: > \n```", "```py\nIn [114]: ts2 = ts.iloc[[0, 1, 3, 7, 9]]\n\nIn [115]: ts2\nOut[115]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    NaN\ndtype: float64\n\nIn [116]: ts2.interpolate()\nOut[116]: \n2020-01-01    8.0\n2020-01-02    5.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64\n\nIn [117]: ts2.interpolate(method=\"time\")\nOut[117]: \n2020-01-01    8.0\n2020-01-02    6.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64 \n```", "```py\nIn [118]: idx = [0.0, 1.0, 10.0]\n\nIn [119]: ser = pd.Series([0.0, np.nan, 10.0], idx)\n\nIn [120]: ser\nOut[120]: \n0.0      0.0\n1.0      NaN\n10.0    10.0\ndtype: float64\n\nIn [121]: ser.interpolate()\nOut[121]: \n0.0      0.0\n1.0      5.0\n10.0    10.0\ndtype: float64\n\nIn [122]: ser.interpolate(method=\"values\")\nOut[122]: \n0.0      0.0\n1.0      1.0\n10.0    10.0\ndtype: float64 \n```", "```py\nIn [123]: df = pd.DataFrame(\n .....:   {\n .....:      \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:      \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:   }\n .....: )\n .....: \n\nIn [124]: df\nOut[124]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [125]: df.interpolate(method=\"barycentric\")\nOut[125]: \n A       B\n0  1.00   0.250\n1  2.10  -7.660\n2  3.53  -4.515\n3  4.70   4.000\n4  5.60  12.200\n5  6.80  14.400\n\nIn [126]: df.interpolate(method=\"pchip\")\nOut[126]: \n A          B\n0  1.00000   0.250000\n1  2.10000   0.672808\n2  3.43454   1.928950\n3  4.70000   4.000000\n4  5.60000  12.200000\n5  6.80000  14.400000\n\nIn [127]: df.interpolate(method=\"akima\")\nOut[127]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.873316\n2  3.406667   0.320034\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [128]: df.interpolate(method=\"spline\", order=2)\nOut[128]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.428598\n2  3.404545   1.206900\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000\n\nIn [129]: df.interpolate(method=\"polynomial\", order=2)\nOut[129]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -2.703846\n2  3.451351  -1.453846\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [130]: np.random.seed(2)\n\nIn [131]: ser = pd.Series(np.arange(1, 10.1, 0.25) ** 2 + np.random.randn(37))\n\nIn [132]: missing = np.array([4, 13, 14, 15, 16, 17, 18, 20, 29])\n\nIn [133]: ser.iloc[missing] = np.nan\n\nIn [134]: methods = [\"linear\", \"quadratic\", \"cubic\"]\n\nIn [135]: df = pd.DataFrame({m: ser.interpolate(method=m) for m in methods})\n\nIn [136]: df.plot()\nOut[136]: <Axes: > \n```", "```py\nIn [137]: ser = pd.Series(np.sort(np.random.uniform(size=100)))\n\n# interpolate at new_index\nIn [138]: new_index = ser.index.union(pd.Index([49.25, 49.5, 49.75, 50.25, 50.5, 50.75]))\n\nIn [139]: interp_s = ser.reindex(new_index).interpolate(method=\"pchip\")\n\nIn [140]: interp_s.loc[49:51]\nOut[140]: \n49.00    0.471410\n49.25    0.476841\n49.50    0.481780\n49.75    0.485998\n50.00    0.489266\n50.25    0.491814\n50.50    0.493995\n50.75    0.495763\n51.00    0.497074\ndtype: float64 \n```", "```py\nIn [141]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan, np.nan, 13, np.nan, np.nan])\n\nIn [142]: ser\nOut[142]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [143]: ser.interpolate()\nOut[143]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64\n\nIn [144]: ser.interpolate(limit=1)\nOut[144]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8     NaN\ndtype: float64 \n```", "```py\nIn [145]: ser.interpolate(limit=1, limit_direction=\"backward\")\nOut[145]: \n0     NaN\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [146]: ser.interpolate(limit=1, limit_direction=\"both\")\nOut[146]: \n0     NaN\n1     5.0\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7    13.0\n8     NaN\ndtype: float64\n\nIn [147]: ser.interpolate(limit_direction=\"both\")\nOut[147]: \n0     5.0\n1     5.0\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\n# fill one consecutive inside value in both directions\nIn [148]: ser.interpolate(limit_direction=\"both\", limit_area=\"inside\", limit=1)\nOut[148]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values backward\nIn [149]: ser.interpolate(limit_direction=\"backward\", limit_area=\"outside\")\nOut[149]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values in both directions\nIn [150]: ser.interpolate(limit_direction=\"both\", limit_area=\"outside\")\nOut[150]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\nIn [151]: df = pd.DataFrame(np.eye(3))\n\nIn [152]: df\nOut[152]: \n 0    1    2\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0\n\nIn [153]: df_missing = df.replace(0, np.nan)\n\nIn [154]: df_missing\nOut[154]: \n 0    1    2\n0  1.0  NaN  NaN\n1  NaN  1.0  NaN\n2  NaN  NaN  1.0\n\nIn [155]: df_filled = df_missing.replace(np.nan, 2)\n\nIn [156]: df_filled\nOut[156]: \n 0    1    2\n0  1.0  2.0  2.0\n1  2.0  1.0  2.0\n2  2.0  2.0  1.0 \n```", "```py\nIn [157]: df_filled.replace([1, 44], [2, 28])\nOut[157]: \n 0    1    2\n0  2.0  2.0  2.0\n1  2.0  2.0  2.0\n2  2.0  2.0  2.0 \n```", "```py\nIn [158]: df_filled.replace({1: 44, 2: 28})\nOut[158]: \n 0     1     2\n0  44.0  28.0  28.0\n1  28.0  44.0  28.0\n2  28.0  28.0  44.0 \n```", "```py\nIn [159]: d = {\"a\": list(range(4)), \"b\": list(\"ab..\"), \"c\": [\"a\", \"b\", np.nan, \"d\"]}\n\nIn [160]: df = pd.DataFrame(d)\n\nIn [161]: df.replace(\".\", np.nan)\nOut[161]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [162]: df.replace(r\"\\s*\\.\\s*\", np.nan, regex=True)\nOut[162]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [163]: df.replace([r\"\\.\", r\"(a)\"], [\"dot\", r\"\\1stuff\"], regex=True)\nOut[163]: \n a       b       c\n0  0  astuff  astuff\n1  1       b       b\n2  2     dot     NaN\n3  3     dot       d \n```", "```py\nIn [164]: df.replace({\"b\": r\"\\s*\\.\\s*\"}, {\"b\": np.nan}, regex=True)\nOut[164]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [165]: df.replace({\"b\": {\"b\": r\"\"}}, regex=True)\nOut[165]: \n a  b    c\n0  0  a    a\n1  1       b\n2  2  .  NaN\n3  3  .    d\n\nIn [166]: df.replace(regex={\"b\": {r\"\\s*\\.\\s*\": np.nan}})\nOut[166]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d\n\nIn [167]: df.replace({\"b\": r\"\\s*(\\.)\\s*\"}, {\"b\": r\"\\1ty\"}, regex=True)\nOut[167]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  .ty  NaN\n3  3  .ty    d \n```", "```py\nIn [168]: df.replace([r\"\\s*\\.\\s*\", r\"a|b\"], \"placeholder\", regex=True)\nOut[168]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [169]: df.replace(regex=[r\"\\s*\\.\\s*\", r\"a|b\"], value=\"placeholder\")\nOut[169]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [89]: data = {\"np\": [1.0, np.nan, np.nan, 2], \"arrow\": pd.array([1.0, pd.NA, pd.NA, 2], dtype=\"float64[pyarrow]\")}\n\nIn [90]: df = pd.DataFrame(data)\n\nIn [91]: df\nOut[91]: \n np  arrow\n0  1.0    1.0\n1  NaN   <NA>\n2  NaN   <NA>\n3  2.0    2.0\n\nIn [92]: df.fillna(0)\nOut[92]: \n np  arrow\n0  1.0    1.0\n1  0.0    0.0\n2  0.0    0.0\n3  2.0    2.0 \n```", "```py\nIn [93]: df.ffill()\nOut[93]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  1.0    1.0\n3  2.0    2.0\n\nIn [94]: df.bfill()\nOut[94]: \n np  arrow\n0  1.0    1.0\n1  2.0    2.0\n2  2.0    2.0\n3  2.0    2.0 \n```", "```py\nIn [95]: df.ffill(limit=1)\nOut[95]: \n np  arrow\n0  1.0    1.0\n1  1.0    1.0\n2  NaN   <NA>\n3  2.0    2.0 \n```", "```py\nIn [96]: dff = pd.DataFrame(np.arange(30, dtype=np.float64).reshape(10, 3), columns=list(\"ABC\"))\n\nIn [97]: dff.iloc[3:5, 0] = np.nan\n\nIn [98]: dff.iloc[4:6, 1] = np.nan\n\nIn [99]: dff.iloc[5:8, 2] = np.nan\n\nIn [100]: dff\nOut[100]: \n A     B     C\n0   0.0   1.0   2.0\n1   3.0   4.0   5.0\n2   6.0   7.0   8.0\n3   NaN  10.0  11.0\n4   NaN   NaN  14.0\n5  15.0   NaN   NaN\n6  18.0  19.0   NaN\n7  21.0  22.0   NaN\n8  24.0  25.0  26.0\n9  27.0  28.0  29.0\n\nIn [101]: dff.fillna(dff.mean())\nOut[101]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [102]: dff.where(pd.notna(dff), dff.mean(), axis=\"columns\")\nOut[102]: \n A     B          C\n0   0.00   1.0   2.000000\n1   3.00   4.0   5.000000\n2   6.00   7.0   8.000000\n3  14.25  10.0  11.000000\n4  14.25  14.5  14.000000\n5  15.00  14.5  13.571429\n6  18.00  19.0  13.571429\n7  21.00  22.0  13.571429\n8  24.00  25.0  26.000000\n9  27.00  28.0  29.000000 \n```", "```py\nIn [103]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:        \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:    }\n .....: )\n .....: \n\nIn [104]: df\nOut[104]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [105]: df.interpolate()\nOut[105]: \n A      B\n0  1.0   0.25\n1  2.1   1.50\n2  3.4   2.75\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [106]: idx = pd.date_range(\"2020-01-01\", periods=10, freq=\"D\")\n\nIn [107]: data = np.random.default_rng(2).integers(0, 10, 10).astype(np.float64)\n\nIn [108]: ts = pd.Series(data, index=idx)\n\nIn [109]: ts.iloc[[1, 2, 5, 6, 9]] = np.nan\n\nIn [110]: ts\nOut[110]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-03    NaN\n2020-01-04    2.0\n2020-01-05    4.0\n2020-01-06    NaN\n2020-01-07    NaN\n2020-01-08    0.0\n2020-01-09    3.0\n2020-01-10    NaN\nFreq: D, dtype: float64\n\nIn [111]: ts.plot()\nOut[111]: <Axes: > \n```", "```py\nIn [112]: ts.interpolate()\nOut[112]: \n2020-01-01    8.000000\n2020-01-02    6.000000\n2020-01-03    4.000000\n2020-01-04    2.000000\n2020-01-05    4.000000\n2020-01-06    2.666667\n2020-01-07    1.333333\n2020-01-08    0.000000\n2020-01-09    3.000000\n2020-01-10    3.000000\nFreq: D, dtype: float64\n\nIn [113]: ts.interpolate().plot()\nOut[113]: <Axes: > \n```", "```py\nIn [114]: ts2 = ts.iloc[[0, 1, 3, 7, 9]]\n\nIn [115]: ts2\nOut[115]: \n2020-01-01    8.0\n2020-01-02    NaN\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    NaN\ndtype: float64\n\nIn [116]: ts2.interpolate()\nOut[116]: \n2020-01-01    8.0\n2020-01-02    5.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64\n\nIn [117]: ts2.interpolate(method=\"time\")\nOut[117]: \n2020-01-01    8.0\n2020-01-02    6.0\n2020-01-04    2.0\n2020-01-08    0.0\n2020-01-10    0.0\ndtype: float64 \n```", "```py\nIn [118]: idx = [0.0, 1.0, 10.0]\n\nIn [119]: ser = pd.Series([0.0, np.nan, 10.0], idx)\n\nIn [120]: ser\nOut[120]: \n0.0      0.0\n1.0      NaN\n10.0    10.0\ndtype: float64\n\nIn [121]: ser.interpolate()\nOut[121]: \n0.0      0.0\n1.0      5.0\n10.0    10.0\ndtype: float64\n\nIn [122]: ser.interpolate(method=\"values\")\nOut[122]: \n0.0      0.0\n1.0      1.0\n10.0    10.0\ndtype: float64 \n```", "```py\nIn [123]: df = pd.DataFrame(\n .....:   {\n .....:      \"A\": [1, 2.1, np.nan, 4.7, 5.6, 6.8],\n .....:      \"B\": [0.25, np.nan, np.nan, 4, 12.2, 14.4],\n .....:   }\n .....: )\n .....: \n\nIn [124]: df\nOut[124]: \n A      B\n0  1.0   0.25\n1  2.1    NaN\n2  NaN    NaN\n3  4.7   4.00\n4  5.6  12.20\n5  6.8  14.40\n\nIn [125]: df.interpolate(method=\"barycentric\")\nOut[125]: \n A       B\n0  1.00   0.250\n1  2.10  -7.660\n2  3.53  -4.515\n3  4.70   4.000\n4  5.60  12.200\n5  6.80  14.400\n\nIn [126]: df.interpolate(method=\"pchip\")\nOut[126]: \n A          B\n0  1.00000   0.250000\n1  2.10000   0.672808\n2  3.43454   1.928950\n3  4.70000   4.000000\n4  5.60000  12.200000\n5  6.80000  14.400000\n\nIn [127]: df.interpolate(method=\"akima\")\nOut[127]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.873316\n2  3.406667   0.320034\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [128]: df.interpolate(method=\"spline\", order=2)\nOut[128]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -0.428598\n2  3.404545   1.206900\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000\n\nIn [129]: df.interpolate(method=\"polynomial\", order=2)\nOut[129]: \n A          B\n0  1.000000   0.250000\n1  2.100000  -2.703846\n2  3.451351  -1.453846\n3  4.700000   4.000000\n4  5.600000  12.200000\n5  6.800000  14.400000 \n```", "```py\nIn [130]: np.random.seed(2)\n\nIn [131]: ser = pd.Series(np.arange(1, 10.1, 0.25) ** 2 + np.random.randn(37))\n\nIn [132]: missing = np.array([4, 13, 14, 15, 16, 17, 18, 20, 29])\n\nIn [133]: ser.iloc[missing] = np.nan\n\nIn [134]: methods = [\"linear\", \"quadratic\", \"cubic\"]\n\nIn [135]: df = pd.DataFrame({m: ser.interpolate(method=m) for m in methods})\n\nIn [136]: df.plot()\nOut[136]: <Axes: > \n```", "```py\nIn [137]: ser = pd.Series(np.sort(np.random.uniform(size=100)))\n\n# interpolate at new_index\nIn [138]: new_index = ser.index.union(pd.Index([49.25, 49.5, 49.75, 50.25, 50.5, 50.75]))\n\nIn [139]: interp_s = ser.reindex(new_index).interpolate(method=\"pchip\")\n\nIn [140]: interp_s.loc[49:51]\nOut[140]: \n49.00    0.471410\n49.25    0.476841\n49.50    0.481780\n49.75    0.485998\n50.00    0.489266\n50.25    0.491814\n50.50    0.493995\n50.75    0.495763\n51.00    0.497074\ndtype: float64 \n```", "```py\nIn [141]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan, np.nan, 13, np.nan, np.nan])\n\nIn [142]: ser\nOut[142]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [143]: ser.interpolate()\nOut[143]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64\n\nIn [144]: ser.interpolate(limit=1)\nOut[144]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8     NaN\ndtype: float64 \n```", "```py\nIn [145]: ser.interpolate(limit=1, limit_direction=\"backward\")\nOut[145]: \n0     NaN\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [146]: ser.interpolate(limit=1, limit_direction=\"both\")\nOut[146]: \n0     NaN\n1     5.0\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7    13.0\n8     NaN\ndtype: float64\n\nIn [147]: ser.interpolate(limit_direction=\"both\")\nOut[147]: \n0     5.0\n1     5.0\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\n# fill one consecutive inside value in both directions\nIn [148]: ser.interpolate(limit_direction=\"both\", limit_area=\"inside\", limit=1)\nOut[148]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values backward\nIn [149]: ser.interpolate(limit_direction=\"backward\", limit_area=\"outside\")\nOut[149]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values in both directions\nIn [150]: ser.interpolate(limit_direction=\"both\", limit_area=\"outside\")\nOut[150]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\nIn [141]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan, np.nan, 13, np.nan, np.nan])\n\nIn [142]: ser\nOut[142]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [143]: ser.interpolate()\nOut[143]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64\n\nIn [144]: ser.interpolate(limit=1)\nOut[144]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8     NaN\ndtype: float64 \n```", "```py\nIn [145]: ser.interpolate(limit=1, limit_direction=\"backward\")\nOut[145]: \n0     NaN\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\nIn [146]: ser.interpolate(limit=1, limit_direction=\"both\")\nOut[146]: \n0     NaN\n1     5.0\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7    13.0\n8     NaN\ndtype: float64\n\nIn [147]: ser.interpolate(limit_direction=\"both\")\nOut[147]: \n0     5.0\n1     5.0\n2     5.0\n3     7.0\n4     9.0\n5    11.0\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\n# fill one consecutive inside value in both directions\nIn [148]: ser.interpolate(limit_direction=\"both\", limit_area=\"inside\", limit=1)\nOut[148]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values backward\nIn [149]: ser.interpolate(limit_direction=\"backward\", limit_area=\"outside\")\nOut[149]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\ndtype: float64\n\n# fill all consecutive outside values in both directions\nIn [150]: ser.interpolate(limit_direction=\"both\", limit_area=\"outside\")\nOut[150]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\ndtype: float64 \n```", "```py\nIn [151]: df = pd.DataFrame(np.eye(3))\n\nIn [152]: df\nOut[152]: \n 0    1    2\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0\n\nIn [153]: df_missing = df.replace(0, np.nan)\n\nIn [154]: df_missing\nOut[154]: \n 0    1    2\n0  1.0  NaN  NaN\n1  NaN  1.0  NaN\n2  NaN  NaN  1.0\n\nIn [155]: df_filled = df_missing.replace(np.nan, 2)\n\nIn [156]: df_filled\nOut[156]: \n 0    1    2\n0  1.0  2.0  2.0\n1  2.0  1.0  2.0\n2  2.0  2.0  1.0 \n```", "```py\nIn [157]: df_filled.replace([1, 44], [2, 28])\nOut[157]: \n 0    1    2\n0  2.0  2.0  2.0\n1  2.0  2.0  2.0\n2  2.0  2.0  2.0 \n```", "```py\nIn [158]: df_filled.replace({1: 44, 2: 28})\nOut[158]: \n 0     1     2\n0  44.0  28.0  28.0\n1  28.0  44.0  28.0\n2  28.0  28.0  44.0 \n```", "```py\nIn [159]: d = {\"a\": list(range(4)), \"b\": list(\"ab..\"), \"c\": [\"a\", \"b\", np.nan, \"d\"]}\n\nIn [160]: df = pd.DataFrame(d)\n\nIn [161]: df.replace(\".\", np.nan)\nOut[161]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [162]: df.replace(r\"\\s*\\.\\s*\", np.nan, regex=True)\nOut[162]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [163]: df.replace([r\"\\.\", r\"(a)\"], [\"dot\", r\"\\1stuff\"], regex=True)\nOut[163]: \n a       b       c\n0  0  astuff  astuff\n1  1       b       b\n2  2     dot     NaN\n3  3     dot       d \n```", "```py\nIn [164]: df.replace({\"b\": r\"\\s*\\.\\s*\"}, {\"b\": np.nan}, regex=True)\nOut[164]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [165]: df.replace({\"b\": {\"b\": r\"\"}}, regex=True)\nOut[165]: \n a  b    c\n0  0  a    a\n1  1       b\n2  2  .  NaN\n3  3  .    d\n\nIn [166]: df.replace(regex={\"b\": {r\"\\s*\\.\\s*\": np.nan}})\nOut[166]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d\n\nIn [167]: df.replace({\"b\": r\"\\s*(\\.)\\s*\"}, {\"b\": r\"\\1ty\"}, regex=True)\nOut[167]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  .ty  NaN\n3  3  .ty    d \n```", "```py\nIn [168]: df.replace([r\"\\s*\\.\\s*\", r\"a|b\"], \"placeholder\", regex=True)\nOut[168]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [169]: df.replace(regex=[r\"\\s*\\.\\s*\", r\"a|b\"], value=\"placeholder\")\nOut[169]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [159]: d = {\"a\": list(range(4)), \"b\": list(\"ab..\"), \"c\": [\"a\", \"b\", np.nan, \"d\"]}\n\nIn [160]: df = pd.DataFrame(d)\n\nIn [161]: df.replace(\".\", np.nan)\nOut[161]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [162]: df.replace(r\"\\s*\\.\\s*\", np.nan, regex=True)\nOut[162]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [163]: df.replace([r\"\\.\", r\"(a)\"], [\"dot\", r\"\\1stuff\"], regex=True)\nOut[163]: \n a       b       c\n0  0  astuff  astuff\n1  1       b       b\n2  2     dot     NaN\n3  3     dot       d \n```", "```py\nIn [164]: df.replace({\"b\": r\"\\s*\\.\\s*\"}, {\"b\": np.nan}, regex=True)\nOut[164]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d \n```", "```py\nIn [165]: df.replace({\"b\": {\"b\": r\"\"}}, regex=True)\nOut[165]: \n a  b    c\n0  0  a    a\n1  1       b\n2  2  .  NaN\n3  3  .    d\n\nIn [166]: df.replace(regex={\"b\": {r\"\\s*\\.\\s*\": np.nan}})\nOut[166]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  NaN  NaN\n3  3  NaN    d\n\nIn [167]: df.replace({\"b\": r\"\\s*(\\.)\\s*\"}, {\"b\": r\"\\1ty\"}, regex=True)\nOut[167]: \n a    b    c\n0  0    a    a\n1  1    b    b\n2  2  .ty  NaN\n3  3  .ty    d \n```", "```py\nIn [168]: df.replace([r\"\\s*\\.\\s*\", r\"a|b\"], \"placeholder\", regex=True)\nOut[168]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```", "```py\nIn [169]: df.replace(regex=[r\"\\s*\\.\\s*\", r\"a|b\"], value=\"placeholder\")\nOut[169]: \n a            b            c\n0  0  placeholder  placeholder\n1  1  placeholder  placeholder\n2  2  placeholder          NaN\n3  3  placeholder            d \n```"]