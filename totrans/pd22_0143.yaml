- en: Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/series.html](https://pandas.pydata.org/docs/reference/series.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Constructor'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")([data, index, dtype, name, copy, ...])
    | One-dimensional ndarray with axis labels (including time series). |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Axes**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.index`](api/pandas.Series.index.html#pandas.Series.index "pandas.Series.index")
    | The index (axis labels) of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.array`](api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")
    | The ExtensionArray of the data backing this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.values`](api/pandas.Series.values.html#pandas.Series.values "pandas.Series.values")
    | Return Series as ndarray or ndarray-like depending on the dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dtype`](api/pandas.Series.dtype.html#pandas.Series.dtype "pandas.Series.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.shape`](api/pandas.Series.shape.html#pandas.Series.shape "pandas.Series.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nbytes`](api/pandas.Series.nbytes.html#pandas.Series.nbytes "pandas.Series.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ndim`](api/pandas.Series.ndim.html#pandas.Series.ndim "pandas.Series.ndim")
    | Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.size`](api/pandas.Series.size.html#pandas.Series.size "pandas.Series.size")
    | Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.T`](api/pandas.Series.T.html#pandas.Series.T "pandas.Series.T")
    | Return the transpose, which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.memory_usage`](api/pandas.Series.memory_usage.html#pandas.Series.memory_usage
    "pandas.Series.memory_usage")([index, deep]) | Return the memory usage of the
    Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.hasnans`](api/pandas.Series.hasnans.html#pandas.Series.hasnans "pandas.Series.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.empty`](api/pandas.Series.empty.html#pandas.Series.empty "pandas.Series.empty")
    | Indicator whether Series/DataFrame is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dtypes`](api/pandas.Series.dtypes.html#pandas.Series.dtypes "pandas.Series.dtypes")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.name`](api/pandas.Series.name.html#pandas.Series.name "pandas.Series.name")
    | Return the name of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.flags`](api/pandas.Series.flags.html#pandas.Series.flags "pandas.Series.flags")
    | Get the properties associated with this pandas object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.set_flags`](api/pandas.Series.set_flags.html#pandas.Series.set_flags
    "pandas.Series.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.astype`](api/pandas.Series.astype.html#pandas.Series.astype "pandas.Series.astype")(dtype[, copy, errors])
    | Cast a pandas object to a specified dtype `dtype`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.convert_dtypes`](api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes")([infer_objects, ...]) | Convert columns to the
    best possible dtypes using dtypes supporting `pd.NA`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.infer_objects`](api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects")([copy]) | Attempt to infer better dtypes for object
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.copy`](api/pandas.Series.copy.html#pandas.Series.copy "pandas.Series.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.bool`](api/pandas.Series.bool.html#pandas.Series.bool "pandas.Series.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_numpy`](api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")([dtype, copy, na_value]) | A NumPy ndarray representing
    the values in this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_period`](api/pandas.Series.to_period.html#pandas.Series.to_period
    "pandas.Series.to_period")([freq, copy]) | Convert Series from DatetimeIndex to
    PeriodIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_timestamp`](api/pandas.Series.to_timestamp.html#pandas.Series.to_timestamp
    "pandas.Series.to_timestamp")([freq, how, copy]) | Cast to DatetimeIndex of Timestamps,
    at *beginning* of period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_list`](api/pandas.Series.to_list.html#pandas.Series.to_list "pandas.Series.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.__array__`](api/pandas.Series.__array__.html#pandas.Series.__array__
    "pandas.Series.__array__")([dtype, copy]) | Return the values as a NumPy array.
    |'
  prefs: []
  type: TYPE_TB
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.get`](api/pandas.Series.get.html#pandas.Series.get "pandas.Series.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.at`](api/pandas.Series.at.html#pandas.Series.at "pandas.Series.at")
    | Access a single value for a row/column label pair. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.iat`](api/pandas.Series.iat.html#pandas.Series.iat "pandas.Series.iat")
    | Access a single value for a row/column pair by integer position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.loc`](api/pandas.Series.loc.html#pandas.Series.loc "pandas.Series.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.iloc`](api/pandas.Series.iloc.html#pandas.Series.iloc "pandas.Series.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.__iter__`](api/pandas.Series.__iter__.html#pandas.Series.__iter__
    "pandas.Series.__iter__")() | Return an iterator of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.items`](api/pandas.Series.items.html#pandas.Series.items "pandas.Series.items")()
    | Lazily iterate over (index, value) tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.keys`](api/pandas.Series.keys.html#pandas.Series.keys "pandas.Series.keys")()
    | Return alias for index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pop`](api/pandas.Series.pop.html#pandas.Series.pop "pandas.Series.pop")(item)
    | Return item and drops from series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.item`](api/pandas.Series.item.html#pandas.Series.item "pandas.Series.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.xs`](api/pandas.Series.xs.html#pandas.Series.xs "pandas.Series.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
- en: Binary operator functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.add`](api/pandas.Series.add.html#pandas.Series.add "pandas.Series.add")(other[, level, fill_value, axis])
    | Return Addition of series and other, element-wise (binary operator add). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sub`](api/pandas.Series.sub.html#pandas.Series.sub "pandas.Series.sub")(other[, level, fill_value, axis])
    | Return Subtraction of series and other, element-wise (binary operator sub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mul`](api/pandas.Series.mul.html#pandas.Series.mul "pandas.Series.mul")(other[, level, fill_value, axis])
    | Return Multiplication of series and other, element-wise (binary operator mul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.div`](api/pandas.Series.div.html#pandas.Series.div "pandas.Series.div")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.truediv`](api/pandas.Series.truediv.html#pandas.Series.truediv "pandas.Series.truediv")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.floordiv`](api/pandas.Series.floordiv.html#pandas.Series.floordiv
    "pandas.Series.floordiv")(other[, level, fill_value, axis]) | Return Integer division
    of series and other, element-wise (binary operator floordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mod`](api/pandas.Series.mod.html#pandas.Series.mod "pandas.Series.mod")(other[, level, fill_value, axis])
    | Return Modulo of series and other, element-wise (binary operator mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pow`](api/pandas.Series.pow.html#pandas.Series.pow "pandas.Series.pow")(other[, level, fill_value, axis])
    | Return Exponential power of series and other, element-wise (binary operator
    pow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.radd`](api/pandas.Series.radd.html#pandas.Series.radd "pandas.Series.radd")(other[, level, fill_value, axis])
    | Return Addition of series and other, element-wise (binary operator radd). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rsub`](api/pandas.Series.rsub.html#pandas.Series.rsub "pandas.Series.rsub")(other[, level, fill_value, axis])
    | Return Subtraction of series and other, element-wise (binary operator rsub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rmul`](api/pandas.Series.rmul.html#pandas.Series.rmul "pandas.Series.rmul")(other[, level, fill_value, axis])
    | Return Multiplication of series and other, element-wise (binary operator rmul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rdiv`](api/pandas.Series.rdiv.html#pandas.Series.rdiv "pandas.Series.rdiv")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rtruediv`](api/pandas.Series.rtruediv.html#pandas.Series.rtruediv
    "pandas.Series.rtruediv")(other[, level, fill_value, axis]) | Return Floating
    division of series and other, element-wise (binary operator rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rfloordiv`](api/pandas.Series.rfloordiv.html#pandas.Series.rfloordiv
    "pandas.Series.rfloordiv")(other[, level, fill_value, ...]) | Return Integer division
    of series and other, element-wise (binary operator rfloordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rmod`](api/pandas.Series.rmod.html#pandas.Series.rmod "pandas.Series.rmod")(other[, level, fill_value, axis])
    | Return Modulo of series and other, element-wise (binary operator rmod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rpow`](api/pandas.Series.rpow.html#pandas.Series.rpow "pandas.Series.rpow")(other[, level, fill_value, axis])
    | Return Exponential power of series and other, element-wise (binary operator
    rpow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.combine`](api/pandas.Series.combine.html#pandas.Series.combine "pandas.Series.combine")(other, func[, fill_value])
    | Combine the Series with a Series or scalar according to func. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.combine_first`](api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first")(other) | Update null elements with value in the
    same location in ''other''. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.round`](api/pandas.Series.round.html#pandas.Series.round "pandas.Series.round")([decimals])
    | Round each value in a Series to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.lt`](api/pandas.Series.lt.html#pandas.Series.lt "pandas.Series.lt")(other[, level, fill_value, axis])
    | Return Less than of series and other, element-wise (binary operator lt). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.gt`](api/pandas.Series.gt.html#pandas.Series.gt "pandas.Series.gt")(other[, level, fill_value, axis])
    | Return Greater than of series and other, element-wise (binary operator gt).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.le`](api/pandas.Series.le.html#pandas.Series.le "pandas.Series.le")(other[, level, fill_value, axis])
    | Return Less than or equal to of series and other, element-wise (binary operator
    le). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ge`](api/pandas.Series.ge.html#pandas.Series.ge "pandas.Series.ge")(other[, level, fill_value, axis])
    | Return Greater than or equal to of series and other, element-wise (binary operator
    ge). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ne`](api/pandas.Series.ne.html#pandas.Series.ne "pandas.Series.ne")(other[, level, fill_value, axis])
    | Return Not equal to of series and other, element-wise (binary operator ne).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.eq`](api/pandas.Series.eq.html#pandas.Series.eq "pandas.Series.eq")(other[, level, fill_value, axis])
    | Return Equal to of series and other, element-wise (binary operator eq). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.product`](api/pandas.Series.product.html#pandas.Series.product "pandas.Series.product")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dot`](api/pandas.Series.dot.html#pandas.Series.dot "pandas.Series.dot")(other)
    | Compute the dot product between the Series and the columns of other. |'
  prefs: []
  type: TYPE_TB
- en: Function application, GroupBy & window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.apply`](api/pandas.Series.apply.html#pandas.Series.apply "pandas.Series.apply")(func[, convert_dtype, args, by_row])
    | Invoke function on values of Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.agg`](api/pandas.Series.agg.html#pandas.Series.agg "pandas.Series.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.aggregate`](api/pandas.Series.aggregate.html#pandas.Series.aggregate
    "pandas.Series.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.transform`](api/pandas.Series.transform.html#pandas.Series.transform
    "pandas.Series.transform")(func[, axis]) | Call `func` on self producing a Series
    with the same axis shape as self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.map`](api/pandas.Series.map.html#pandas.Series.map "pandas.Series.map")(arg[, na_action])
    | Map values of Series according to an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.groupby`](api/pandas.Series.groupby.html#pandas.Series.groupby "pandas.Series.groupby")([by, axis, level, as_index, ...])
    | Group Series using a mapper or by a Series of columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rolling`](api/pandas.Series.rolling.html#pandas.Series.rolling "pandas.Series.rolling")(window[, min_periods, ...])
    | Provide rolling window calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.expanding`](api/pandas.Series.expanding.html#pandas.Series.expanding
    "pandas.Series.expanding")([min_periods, axis, method]) | Provide expanding window
    calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ewm`](api/pandas.Series.ewm.html#pandas.Series.ewm "pandas.Series.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pipe`](api/pandas.Series.pipe.html#pandas.Series.pipe "pandas.Series.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  prefs: []
  type: TYPE_TB
- en: '## Computations / descriptive stats'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.abs`](api/pandas.Series.abs.html#pandas.Series.abs "pandas.Series.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.all`](api/pandas.Series.all.html#pandas.Series.all "pandas.Series.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.any`](api/pandas.Series.any.html#pandas.Series.any "pandas.Series.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.autocorr`](api/pandas.Series.autocorr.html#pandas.Series.autocorr
    "pandas.Series.autocorr")([lag]) | Compute the lag-N autocorrelation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.between`](api/pandas.Series.between.html#pandas.Series.between "pandas.Series.between")(left, right[, inclusive])
    | Return boolean Series equivalent to left <= series <= right. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.clip`](api/pandas.Series.clip.html#pandas.Series.clip "pandas.Series.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.corr`](api/pandas.Series.corr.html#pandas.Series.corr "pandas.Series.corr")(other[, method, min_periods])
    | Compute correlation with other Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.count`](api/pandas.Series.count.html#pandas.Series.count "pandas.Series.count")()
    | Return number of non-NA/null observations in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cov`](api/pandas.Series.cov.html#pandas.Series.cov "pandas.Series.cov")(other[, min_periods, ddof])
    | Compute covariance with Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cummax`](api/pandas.Series.cummax.html#pandas.Series.cummax "pandas.Series.cummax")([axis, skipna])
    | Return cumulative maximum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cummin`](api/pandas.Series.cummin.html#pandas.Series.cummin "pandas.Series.cummin")([axis, skipna])
    | Return cumulative minimum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cumprod`](api/pandas.Series.cumprod.html#pandas.Series.cumprod "pandas.Series.cumprod")([axis, skipna])
    | Return cumulative product over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cumsum`](api/pandas.Series.cumsum.html#pandas.Series.cumsum "pandas.Series.cumsum")([axis, skipna])
    | Return cumulative sum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.describe`](api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe")([percentiles, include, exclude]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.diff`](api/pandas.Series.diff.html#pandas.Series.diff "pandas.Series.diff")([periods])
    | First discrete difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.factorize`](api/pandas.Series.factorize.html#pandas.Series.factorize
    "pandas.Series.factorize")([sort, use_na_sentinel]) | Encode the object as an
    enumerated type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.kurt`](api/pandas.Series.kurt.html#pandas.Series.kurt "pandas.Series.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.max`](api/pandas.Series.max.html#pandas.Series.max "pandas.Series.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mean`](api/pandas.Series.mean.html#pandas.Series.mean "pandas.Series.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.median`](api/pandas.Series.median.html#pandas.Series.median "pandas.Series.median")([axis, skipna, numeric_only])
    | Return the median of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.min`](api/pandas.Series.min.html#pandas.Series.min "pandas.Series.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mode`](api/pandas.Series.mode.html#pandas.Series.mode "pandas.Series.mode")([dropna])
    | Return the mode(s) of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nlargest`](api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest")([n, keep]) | Return the largest n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nsmallest`](api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest")([n, keep]) | Return the smallest n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pct_change`](api/pandas.Series.pct_change.html#pandas.Series.pct_change
    "pandas.Series.pct_change")([periods, fill_method, ...]) | Fractional change between
    the current and a prior element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.prod`](api/pandas.Series.prod.html#pandas.Series.prod "pandas.Series.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.quantile`](api/pandas.Series.quantile.html#pandas.Series.quantile
    "pandas.Series.quantile")([q, interpolation]) | Return value at the given quantile.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rank`](api/pandas.Series.rank.html#pandas.Series.rank "pandas.Series.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sem`](api/pandas.Series.sem.html#pandas.Series.sem "pandas.Series.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.skew`](api/pandas.Series.skew.html#pandas.Series.skew "pandas.Series.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.std`](api/pandas.Series.std.html#pandas.Series.std "pandas.Series.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sum`](api/pandas.Series.sum.html#pandas.Series.sum "pandas.Series.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.var`](api/pandas.Series.var.html#pandas.Series.var "pandas.Series.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.kurtosis`](api/pandas.Series.kurtosis.html#pandas.Series.kurtosis
    "pandas.Series.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.unique`](api/pandas.Series.unique.html#pandas.Series.unique "pandas.Series.unique")()
    | Return unique values of Series object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nunique`](api/pandas.Series.nunique.html#pandas.Series.nunique "pandas.Series.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_unique`](api/pandas.Series.is_unique.html#pandas.Series.is_unique
    "pandas.Series.is_unique") | Return boolean if values in the object are unique.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_monotonic_increasing`](api/pandas.Series.is_monotonic_increasing.html#pandas.Series.is_monotonic_increasing
    "pandas.Series.is_monotonic_increasing") | Return boolean if values in the object
    are monotonically increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_monotonic_decreasing`](api/pandas.Series.is_monotonic_decreasing.html#pandas.Series.is_monotonic_decreasing
    "pandas.Series.is_monotonic_decreasing") | Return boolean if values in the object
    are monotonically decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.value_counts`](api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts")([normalize, sort, ...]) | Return a Series containing
    counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: Reindexing / selection / label manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.align`](api/pandas.Series.align.html#pandas.Series.align "pandas.Series.align")(other[, join, axis, level, ...])
    | Align two objects on their axes with the specified join method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.case_when`](api/pandas.Series.case_when.html#pandas.Series.case_when
    "pandas.Series.case_when")(caselist) | Replace values where the conditions are
    True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.drop`](api/pandas.Series.drop.html#pandas.Series.drop "pandas.Series.drop")([labels, axis, index, columns, ...])
    | Return Series with specified index labels removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.droplevel`](api/pandas.Series.droplevel.html#pandas.Series.droplevel
    "pandas.Series.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.drop_duplicates`](api/pandas.Series.drop_duplicates.html#pandas.Series.drop_duplicates
    "pandas.Series.drop_duplicates")(*[, keep, inplace, ...]) | Return Series with
    duplicate values removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.duplicated`](api/pandas.Series.duplicated.html#pandas.Series.duplicated
    "pandas.Series.duplicated")([keep]) | Indicate duplicate Series values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.equals`](api/pandas.Series.equals.html#pandas.Series.equals "pandas.Series.equals")(other)
    | Test whether two objects contain the same elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.first`](api/pandas.Series.first.html#pandas.Series.first "pandas.Series.first")(offset)
    | (DEPRECATED) Select initial periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.head`](api/pandas.Series.head.html#pandas.Series.head "pandas.Series.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.idxmax`](api/pandas.Series.idxmax.html#pandas.Series.idxmax "pandas.Series.idxmax")([axis, skipna])
    | Return the row label of the maximum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.idxmin`](api/pandas.Series.idxmin.html#pandas.Series.idxmin "pandas.Series.idxmin")([axis, skipna])
    | Return the row label of the minimum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isin`](api/pandas.Series.isin.html#pandas.Series.isin "pandas.Series.isin")(values)
    | Whether elements in Series are contained in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.last`](api/pandas.Series.last.html#pandas.Series.last "pandas.Series.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reindex`](api/pandas.Series.reindex.html#pandas.Series.reindex "pandas.Series.reindex")([index, axis, method, copy, ...])
    | Conform Series to new index with optional filling logic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reindex_like`](api/pandas.Series.reindex_like.html#pandas.Series.reindex_like
    "pandas.Series.reindex_like")(other[, method, copy, ...]) | Return an object with
    matching indices as other object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rename`](api/pandas.Series.rename.html#pandas.Series.rename "pandas.Series.rename")([index, axis, copy, inplace, ...])
    | Alter Series index labels or name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rename_axis`](api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis")([mapper, index, axis, ...]) | Set the name of the
    axis for the index or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reset_index`](api/pandas.Series.reset_index.html#pandas.Series.reset_index
    "pandas.Series.reset_index")([level, drop, name, ...]) | Generate a new DataFrame
    or Series with the index reset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sample`](api/pandas.Series.sample.html#pandas.Series.sample "pandas.Series.sample")([n, frac, replace, weights, ...])
    | Return a random sample of items from an axis of object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.set_axis`](api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis")(labels, *[, axis, copy]) | Assign desired index to given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.take`](api/pandas.Series.take.html#pandas.Series.take "pandas.Series.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tail`](api/pandas.Series.tail.html#pandas.Series.tail "pandas.Series.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.truncate`](api/pandas.Series.truncate.html#pandas.Series.truncate
    "pandas.Series.truncate")([before, after, axis, copy]) | Truncate a Series or
    DataFrame before and after some index value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.where`](api/pandas.Series.where.html#pandas.Series.where "pandas.Series.where")(cond[, other, inplace, axis, level])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mask`](api/pandas.Series.mask.html#pandas.Series.mask "pandas.Series.mask")(cond[, other, inplace, axis, level])
    | Replace values where the condition is True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.add_prefix`](api/pandas.Series.add_prefix.html#pandas.Series.add_prefix
    "pandas.Series.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.add_suffix`](api/pandas.Series.add_suffix.html#pandas.Series.add_suffix
    "pandas.Series.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.filter`](api/pandas.Series.filter.html#pandas.Series.filter "pandas.Series.filter")([items, like, regex, axis])
    | Subset the dataframe rows or columns according to the specified index labels.
    |'
  prefs: []
  type: TYPE_TB
- en: Missing data handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.backfill`](api/pandas.Series.backfill.html#pandas.Series.backfill
    "pandas.Series.backfill")(*[, axis, inplace, limit, ...]) | (DEPRECATED) Fill
    NA/NaN values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.bfill`](api/pandas.Series.bfill.html#pandas.Series.bfill "pandas.Series.bfill")(*[, axis, inplace, limit, ...])
    | Fill NA/NaN values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dropna`](api/pandas.Series.dropna.html#pandas.Series.dropna "pandas.Series.dropna")(*[, axis, inplace, how, ...])
    | Return a new Series with missing values removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ffill`](api/pandas.Series.ffill.html#pandas.Series.ffill "pandas.Series.ffill")(*[, axis, inplace, limit, ...])
    | Fill NA/NaN values by propagating the last valid observation to next valid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.fillna`](api/pandas.Series.fillna.html#pandas.Series.fillna "pandas.Series.fillna")([value, method, axis, ...])
    | Fill NA/NaN values using the specified method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.interpolate`](api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate")([method, axis, limit, ...]) | Fill NaN values using
    an interpolation method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isna`](api/pandas.Series.isna.html#pandas.Series.isna "pandas.Series.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isnull`](api/pandas.Series.isnull.html#pandas.Series.isnull "pandas.Series.isnull")()
    | Series.isnull is an alias for Series.isna. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.notna`](api/pandas.Series.notna.html#pandas.Series.notna "pandas.Series.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.notnull`](api/pandas.Series.notnull.html#pandas.Series.notnull "pandas.Series.notnull")()
    | Series.notnull is an alias for Series.notna. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pad`](api/pandas.Series.pad.html#pandas.Series.pad "pandas.Series.pad")(*[, axis, inplace, limit, downcast])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.replace`](api/pandas.Series.replace.html#pandas.Series.replace "pandas.Series.replace")([to_replace, value, inplace, ...])
    | Replace values given in to_replace with value. |'
  prefs: []
  type: TYPE_TB
- en: Reshaping, sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.argsort`](api/pandas.Series.argsort.html#pandas.Series.argsort "pandas.Series.argsort")([axis, kind, order, stable])
    | Return the integer indices that would sort the Series values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.argmin`](api/pandas.Series.argmin.html#pandas.Series.argmin "pandas.Series.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.argmax`](api/pandas.Series.argmax.html#pandas.Series.argmax "pandas.Series.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reorder_levels`](api/pandas.Series.reorder_levels.html#pandas.Series.reorder_levels
    "pandas.Series.reorder_levels")(order) | Rearrange index levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sort_values`](api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values")(*[, axis, ascending, ...]) | Sort by the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sort_index`](api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index")(*[, axis, level, ...]) | Sort Series by index labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.swaplevel`](api/pandas.Series.swaplevel.html#pandas.Series.swaplevel
    "pandas.Series.swaplevel")([i, j, copy]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.unstack`](api/pandas.Series.unstack.html#pandas.Series.unstack "pandas.Series.unstack")([level, fill_value, sort])
    | Unstack, also known as pivot, Series with MultiIndex to produce DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.explode`](api/pandas.Series.explode.html#pandas.Series.explode "pandas.Series.explode")([ignore_index])
    | Transform each element of a list-like to a row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.searchsorted`](api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ravel`](api/pandas.Series.ravel.html#pandas.Series.ravel "pandas.Series.ravel")([order])
    | (DEPRECATED) Return the flattened underlying data as an ndarray or ExtensionArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.repeat`](api/pandas.Series.repeat.html#pandas.Series.repeat "pandas.Series.repeat")(repeats[, axis])
    | Repeat elements of a Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.squeeze`](api/pandas.Series.squeeze.html#pandas.Series.squeeze "pandas.Series.squeeze")([axis])
    | Squeeze 1 dimensional axis objects into scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.view`](api/pandas.Series.view.html#pandas.Series.view "pandas.Series.view")([dtype])
    | (DEPRECATED) Create a new view of the Series. |'
  prefs: []
  type: TYPE_TB
- en: Combining / comparing / joining / merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.compare`](api/pandas.Series.compare.html#pandas.Series.compare "pandas.Series.compare")(other[, align_axis, ...])
    | Compare to another Series and show the differences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.update`](api/pandas.Series.update.html#pandas.Series.update "pandas.Series.update")(other)
    | Modify Series in place using values from passed Series. |'
  prefs: []
  type: TYPE_TB
- en: Time Series-related
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.asfreq`](api/pandas.Series.asfreq.html#pandas.Series.asfreq "pandas.Series.asfreq")(freq[, method, how, ...])
    | Convert time series to specified frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.asof`](api/pandas.Series.asof.html#pandas.Series.asof "pandas.Series.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.shift`](api/pandas.Series.shift.html#pandas.Series.shift "pandas.Series.shift")([periods, freq, axis, ...])
    | Shift index by desired number of periods with an optional time freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.first_valid_index`](api/pandas.Series.first_valid_index.html#pandas.Series.first_valid_index
    "pandas.Series.first_valid_index")() | Return index for first non-NA value or
    None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.last_valid_index`](api/pandas.Series.last_valid_index.html#pandas.Series.last_valid_index
    "pandas.Series.last_valid_index")() | Return index for last non-NA value or None,
    if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.resample`](api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample")(rule[, axis, closed, label, ...]) | Resample time-series
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tz_convert`](api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis to
    target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tz_localize`](api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize")(tz[, axis, level, copy, ...]) | Localize tz-naive
    index of a Series or DataFrame to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.at_time`](api/pandas.Series.at_time.html#pandas.Series.at_time "pandas.Series.at_time")(time[, asof, axis])
    | Select values at particular time of day (e.g., 9:30AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.between_time`](api/pandas.Series.between_time.html#pandas.Series.between_time
    "pandas.Series.between_time")(start_time, end_time[, ...]) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  prefs: []
  type: TYPE_TB
- en: Accessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas provides dtype-specific methods under various accessors. These are separate
    namespaces within [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    that only apply to specific data types.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.str`](api/pandas.Series.str.html#pandas.Series.str "pandas.Series.str")
    | alias of `StringMethods` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat`](api/pandas.Series.cat.html#pandas.Series.cat "pandas.Series.cat")
    | alias of `CategoricalAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt`](api/pandas.Series.dt.html#pandas.Series.dt "pandas.Series.dt")
    | alias of `CombinedDatetimelikeProperties` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse`](api/pandas.Series.sparse.html#pandas.Series.sparse "pandas.Series.sparse")
    | alias of `SparseAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse`](api/pandas.DataFrame.sparse.html#pandas.DataFrame.sparse
    "pandas.DataFrame.sparse") | alias of `SparseFrameAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.str`](api/pandas.Index.str.html#pandas.Index.str "pandas.Index.str")
    | alias of `StringMethods` |'
  prefs: []
  type: TYPE_TB
- en: '| Data Type | Accessor |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Datetime, Timedelta, Period | [dt](#api-series-dt) |'
  prefs: []
  type: TYPE_TB
- en: '| String | [str](#api-series-str) |'
  prefs: []
  type: TYPE_TB
- en: '| Categorical | [cat](#api-series-cat) |'
  prefs: []
  type: TYPE_TB
- en: '| Sparse | [sparse](#api-series-sparse) |'
  prefs: []
  type: TYPE_TB
- en: '### Datetimelike properties'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.dt` can be used to access the values of the series as datetimelike
    and return several properties. These can be accessed like `Series.dt.<property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Datetime properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.date`](api/pandas.Series.dt.date.html#pandas.Series.dt.date "pandas.Series.dt.date")
    | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.time`](api/pandas.Series.dt.time.html#pandas.Series.dt.time "pandas.Series.dt.time")
    | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.timetz`](api/pandas.Series.dt.timetz.html#pandas.Series.dt.timetz
    "pandas.Series.dt.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.year`](api/pandas.Series.dt.year.html#pandas.Series.dt.year "pandas.Series.dt.year")
    | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month`](api/pandas.Series.dt.month.html#pandas.Series.dt.month
    "pandas.Series.dt.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day`](api/pandas.Series.dt.day.html#pandas.Series.dt.day "pandas.Series.dt.day")
    | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.hour`](api/pandas.Series.dt.hour.html#pandas.Series.dt.hour "pandas.Series.dt.hour")
    | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.minute`](api/pandas.Series.dt.minute.html#pandas.Series.dt.minute
    "pandas.Series.dt.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.second`](api/pandas.Series.dt.second.html#pandas.Series.dt.second
    "pandas.Series.dt.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microsecond`](api/pandas.Series.dt.microsecond.html#pandas.Series.dt.microsecond
    "pandas.Series.dt.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanosecond`](api/pandas.Series.dt.nanosecond.html#pandas.Series.dt.nanosecond
    "pandas.Series.dt.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofweek`](api/pandas.Series.dt.dayofweek.html#pandas.Series.dt.dayofweek
    "pandas.Series.dt.dayofweek") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_week`](api/pandas.Series.dt.day_of_week.html#pandas.Series.dt.day_of_week
    "pandas.Series.dt.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.weekday`](api/pandas.Series.dt.weekday.html#pandas.Series.dt.weekday
    "pandas.Series.dt.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofyear`](api/pandas.Series.dt.dayofyear.html#pandas.Series.dt.dayofyear
    "pandas.Series.dt.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_year`](api/pandas.Series.dt.day_of_year.html#pandas.Series.dt.day_of_year
    "pandas.Series.dt.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.quarter`](api/pandas.Series.dt.quarter.html#pandas.Series.dt.quarter
    "pandas.Series.dt.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_start`](api/pandas.Series.dt.is_month_start.html#pandas.Series.dt.is_month_start
    "pandas.Series.dt.is_month_start") | Indicates whether the date is the first day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_end`](api/pandas.Series.dt.is_month_end.html#pandas.Series.dt.is_month_end
    "pandas.Series.dt.is_month_end") | Indicates whether the date is the last day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_start`](api/pandas.Series.dt.is_quarter_start.html#pandas.Series.dt.is_quarter_start
    "pandas.Series.dt.is_quarter_start") | Indicator for whether the date is the first
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_end`](api/pandas.Series.dt.is_quarter_end.html#pandas.Series.dt.is_quarter_end
    "pandas.Series.dt.is_quarter_end") | Indicator for whether the date is the last
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_start`](api/pandas.Series.dt.is_year_start.html#pandas.Series.dt.is_year_start
    "pandas.Series.dt.is_year_start") | Indicate whether the date is the first day
    of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_end`](api/pandas.Series.dt.is_year_end.html#pandas.Series.dt.is_year_end
    "pandas.Series.dt.is_year_end") | Indicate whether the date is the last day of
    the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_leap_year`](api/pandas.Series.dt.is_leap_year.html#pandas.Series.dt.is_leap_year
    "pandas.Series.dt.is_leap_year") | Boolean indicator if the date belongs to a
    leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.daysinmonth`](api/pandas.Series.dt.daysinmonth.html#pandas.Series.dt.daysinmonth
    "pandas.Series.dt.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz`](api/pandas.Series.dt.tz.html#pandas.Series.dt.tz "pandas.Series.dt.tz")
    | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.freq`](api/pandas.Series.dt.freq.html#pandas.Series.dt.freq "pandas.Series.dt.freq")
    | Return the frequency object for this PeriodArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Datetime methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.isocalendar`](api/pandas.Series.dt.isocalendar.html#pandas.Series.dt.isocalendar
    "pandas.Series.dt.isocalendar")() | Calculate year, week, and day according to
    the ISO 8601 standard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_period`](api/pandas.Series.dt.to_period.html#pandas.Series.dt.to_period
    "pandas.Series.dt.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_pydatetime`](api/pandas.Series.dt.to_pydatetime.html#pandas.Series.dt.to_pydatetime
    "pandas.Series.dt.to_pydatetime")() | (DEPRECATED) Return the data as an array
    of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_localize`](api/pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize
    "pandas.Series.dt.tz_localize")(*args, **kwargs) | Localize tz-naive Datetime
    Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_convert`](api/pandas.Series.dt.tz_convert.html#pandas.Series.dt.tz_convert
    "pandas.Series.dt.tz_convert")(*args, **kwargs) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.normalize`](api/pandas.Series.dt.normalize.html#pandas.Series.dt.normalize
    "pandas.Series.dt.normalize")(*args, **kwargs) | Convert times to midnight. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.strftime`](api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.round`](api/pandas.Series.dt.round.html#pandas.Series.dt.round
    "pandas.Series.dt.round")(*args, **kwargs) | Perform round operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.floor`](api/pandas.Series.dt.floor.html#pandas.Series.dt.floor
    "pandas.Series.dt.floor")(*args, **kwargs) | Perform floor operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.ceil`](api/pandas.Series.dt.ceil.html#pandas.Series.dt.ceil "pandas.Series.dt.ceil")(*args, **kwargs)
    | Perform ceil operation on the data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month_name`](api/pandas.Series.dt.month_name.html#pandas.Series.dt.month_name
    "pandas.Series.dt.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_name`](api/pandas.Series.dt.day_name.html#pandas.Series.dt.day_name
    "pandas.Series.dt.day_name")(*args, **kwargs) | Return the day names with specified
    locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: Period properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.qyear`](api/pandas.Series.dt.qyear.html#pandas.Series.dt.qyear
    "pandas.Series.dt.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.start_time`](api/pandas.Series.dt.start_time.html#pandas.Series.dt.start_time
    "pandas.Series.dt.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.end_time`](api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: Timedelta properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.days`](api/pandas.Series.dt.days.html#pandas.Series.dt.days "pandas.Series.dt.days")
    | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.seconds`](api/pandas.Series.dt.seconds.html#pandas.Series.dt.seconds
    "pandas.Series.dt.seconds") | Number of seconds (>= 0 and less than 1 day) for
    each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microseconds`](api/pandas.Series.dt.microseconds.html#pandas.Series.dt.microseconds
    "pandas.Series.dt.microseconds") | Number of microseconds (>= 0 and less than
    1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanoseconds`](api/pandas.Series.dt.nanoseconds.html#pandas.Series.dt.nanoseconds
    "pandas.Series.dt.nanoseconds") | Number of nanoseconds (>= 0 and less than 1
    microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.components`](api/pandas.Series.dt.components.html#pandas.Series.dt.components
    "pandas.Series.dt.components") | Return a Dataframe of the components of the Timedeltas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Timedelta methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.to_pytimedelta`](api/pandas.Series.dt.to_pytimedelta.html#pandas.Series.dt.to_pytimedelta
    "pandas.Series.dt.to_pytimedelta")() | Return an array of native [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.total_seconds`](api/pandas.Series.dt.total_seconds.html#pandas.Series.dt.total_seconds
    "pandas.Series.dt.total_seconds")(*args, **kwargs) | Return total duration of
    each element expressed in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |  ### String handling'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.str` can be used to access the values of the series as strings and
    apply several methods to it. These can be accessed like `Series.str.<function/property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.str.capitalize`](api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize")() | Convert strings in the Series/Index to be
    capitalized. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.casefold`](api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold")() | Convert strings in the Series/Index to be casefolded.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.cat`](api/pandas.Series.str.cat.html#pandas.Series.str.cat "pandas.Series.str.cat")([others, sep, na_rep, join])
    | Concatenate strings in the Series/Index with given separator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.center`](api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center")(width[, fillchar]) | Pad left and right side of strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.contains`](api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains")(pat[, case, flags, na, ...]) | Test if pattern or
    regex is contained within a string of a Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.count`](api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count")(pat[, flags]) | Count occurrences of pattern in each
    string of the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.decode`](api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")(encoding[, errors]) | Decode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.encode`](api/pandas.Series.str.encode.html#pandas.Series.str.encode
    "pandas.Series.str.encode")(encoding[, errors]) | Encode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.endswith`](api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith")(pat[, na]) | Test if the end of each string element
    matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extract`](api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract")(pat[, flags, expand]) | Extract capture groups in
    the regex pat as columns in a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extractall`](api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall")(pat[, flags]) | Extract capture groups in the
    regex pat as columns in DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.find`](api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find")(sub[, start, end]) | Return lowest indexes in each strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.findall`](api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall")(pat[, flags]) | Find all occurrences of pattern or
    regular expression in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.fullmatch`](api/pandas.Series.str.fullmatch.html#pandas.Series.str.fullmatch
    "pandas.Series.str.fullmatch")(pat[, case, flags, na]) | Determine if each string
    entirely matches a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get`](api/pandas.Series.str.get.html#pandas.Series.str.get "pandas.Series.str.get")(i)
    | Extract element from each component at specified position or with specified
    key. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.index`](api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index")(sub[, start, end]) | Return lowest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.join`](api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join")(sep) | Join lists contained as elements in the Series/Index
    with passed delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.len`](api/pandas.Series.str.len.html#pandas.Series.str.len "pandas.Series.str.len")()
    | Compute the length of each element in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.ljust`](api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust")(width[, fillchar]) | Pad right side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lower`](api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower")() | Convert strings in the Series/Index to lowercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lstrip`](api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip")([to_strip]) | Remove leading characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.match`](api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match")(pat[, case, flags, na]) | Determine if each string
    starts with a match of a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.normalize`](api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize")(form) | Return the Unicode normal form for the
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.pad`](api/pandas.Series.str.pad.html#pandas.Series.str.pad "pandas.Series.str.pad")(width[, side, fillchar])
    | Pad strings in the Series/Index up to width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.partition`](api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition")([sep, expand]) | Split the string at the first
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removeprefix`](api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix")(prefix) | Remove a prefix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removesuffix`](api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix")(suffix) | Remove a suffix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.repeat`](api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat")(repeats) | Duplicate each string in the Series or
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.replace`](api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")(pat, repl[, n, case, ...]) | Replace each occurrence
    of pattern/regex in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rfind`](api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind")(sub[, start, end]) | Return highest indexes in each
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rindex`](api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex")(sub[, start, end]) | Return highest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rjust`](api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust")(width[, fillchar]) | Pad left side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rpartition`](api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition")([sep, expand]) | Split the string at the last
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rstrip`](api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip")([to_strip]) | Remove trailing characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice`](api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice")([start, stop, step]) | Slice substrings from each element
    in the Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice_replace`](api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace")([start, stop, repl]) | Replace a positional
    slice of a string with another value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.split`](api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split")([pat, n, expand, regex]) | Split strings around given
    separator/delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rsplit`](api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit")([pat, n, expand]) | Split strings around given separator/delimiter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.startswith`](api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith")(pat[, na]) | Test if the start of each string
    element matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.strip`](api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip")([to_strip]) | Remove leading and trailing characters.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.swapcase`](api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase")() | Convert strings in the Series/Index to be swapcased.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.title`](api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title")() | Convert strings in the Series/Index to titlecase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.translate`](api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate")(table) | Map all characters in the string through
    the given mapping table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.upper`](api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper")() | Convert strings in the Series/Index to uppercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.wrap`](api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap")(width, **kwargs) | Wrap strings in Series/Index at specified
    line width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.zfill`](api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill")(width) | Pad strings in the Series/Index by prepending
    ''0'' characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalnum`](api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum")() | Check whether all characters in each string are
    alphanumeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalpha`](api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha")() | Check whether all characters in each string are
    alphabetic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdigit`](api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit")() | Check whether all characters in each string are
    digits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isspace`](api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace")() | Check whether all characters in each string are
    whitespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.islower`](api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower")() | Check whether all characters in each string are
    lowercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isupper`](api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper")() | Check whether all characters in each string are
    uppercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.istitle`](api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle")() | Check whether all characters in each string are
    titlecase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isnumeric`](api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric")() | Check whether all characters in each string
    are numeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdecimal`](api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal")() | Check whether all characters in each string
    are decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get_dummies`](api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies")([sep]) | Return DataFrame of dummy/indicator
    variables for Series. |  ### Categorical accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Categorical-dtype specific methods and attributes are available under the `Series.cat`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.cat.categories`](api/pandas.Series.cat.categories.html#pandas.Series.cat.categories
    "pandas.Series.cat.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.ordered`](api/pandas.Series.cat.ordered.html#pandas.Series.cat.ordered
    "pandas.Series.cat.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.codes`](api/pandas.Series.cat.codes.html#pandas.Series.cat.codes
    "pandas.Series.cat.codes") | Return Series of codes as well as the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.rename_categories`](api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories")(*args, **kwargs) | Rename categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.reorder_categories`](api/pandas.Series.cat.reorder_categories.html#pandas.Series.cat.reorder_categories
    "pandas.Series.cat.reorder_categories")(*args, **kwargs) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.add_categories`](api/pandas.Series.cat.add_categories.html#pandas.Series.cat.add_categories
    "pandas.Series.cat.add_categories")(*args, **kwargs) | Add new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_categories`](api/pandas.Series.cat.remove_categories.html#pandas.Series.cat.remove_categories
    "pandas.Series.cat.remove_categories")(*args, **kwargs) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_unused_categories`](api/pandas.Series.cat.remove_unused_categories.html#pandas.Series.cat.remove_unused_categories
    "pandas.Series.cat.remove_unused_categories")(*args, ...) | Remove categories
    which are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.set_categories`](api/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories
    "pandas.Series.cat.set_categories")(*args, **kwargs) | Set the categories to the
    specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_ordered`](api/pandas.Series.cat.as_ordered.html#pandas.Series.cat.as_ordered
    "pandas.Series.cat.as_ordered")(*args, **kwargs) | Set the Categorical to be ordered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_unordered`](api/pandas.Series.cat.as_unordered.html#pandas.Series.cat.as_unordered
    "pandas.Series.cat.as_unordered")(*args, **kwargs) | Set the Categorical to be
    unordered. |  ### Sparse accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse-dtype specific methods and attributes are provided under the `Series.sparse`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.sparse.npoints`](api/pandas.Series.sparse.npoints.html#pandas.Series.sparse.npoints
    "pandas.Series.sparse.npoints") | The number of non- `fill_value` points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.density`](api/pandas.Series.sparse.density.html#pandas.Series.sparse.density
    "pandas.Series.sparse.density") | The percent of non- `fill_value` points, as
    decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.fill_value`](api/pandas.Series.sparse.fill_value.html#pandas.Series.sparse.fill_value
    "pandas.Series.sparse.fill_value") | Elements in data that are fill_value are
    not stored. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.sp_values`](api/pandas.Series.sparse.sp_values.html#pandas.Series.sparse.sp_values
    "pandas.Series.sparse.sp_values") | An ndarray containing the non- `fill_value`
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.from_coo`](api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo")(A[, dense_index]) | Create a Series with sparse
    values from a scipy.sparse.coo_matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.to_coo`](api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo")([row_levels, ...]) | Create a scipy.sparse.coo_matrix
    from a Series with MultiIndex. |  ### List accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow list-dtype specific methods and attributes are provided under the `Series.list`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.list.flatten`](api/pandas.Series.list.flatten.html#pandas.Series.list.flatten
    "pandas.Series.list.flatten")() | Flatten list values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.len`](api/pandas.Series.list.len.html#pandas.Series.list.len
    "pandas.Series.list.len")() | Return the length of each list in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.__getitem__`](api/pandas.Series.list.__getitem__.html#pandas.Series.list.__getitem__
    "pandas.Series.list.__getitem__")(key) | Index or slice lists in the Series. |  ###
    Struct accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow struct-dtype specific methods and attributes are provided under the `Series.struct`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.struct.dtypes`](api/pandas.Series.struct.dtypes.html#pandas.Series.struct.dtypes
    "pandas.Series.struct.dtypes") | Return the dtype object of each child field of
    the struct. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.field`](api/pandas.Series.struct.field.html#pandas.Series.struct.field
    "pandas.Series.struct.field")(name_or_index) | Extract a child field of a struct
    as a Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.explode`](api/pandas.Series.struct.explode.html#pandas.Series.struct.explode
    "pandas.Series.struct.explode")() | Extract all child fields of a struct as a
    DataFrame. |  ### Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |  ### Metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    is a dictionary for storing global metadata for this Series.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.attrs` is considered experimental and may change without warning.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    | Dictionary of global attributes of this dataset. |'
  prefs: []
  type: TYPE_TB
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Series.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `Series.plot.<kind>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.plot`](api/pandas.Series.plot.html#pandas.Series.plot "pandas.Series.plot")([kind, ax, figsize, ....])
    | Series plotting accessor and method |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.area`](api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.bar`](api/pandas.Series.plot.bar.html#pandas.Series.plot.bar
    "pandas.Series.plot.bar")([x, y]) | Vertical bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.barh`](api/pandas.Series.plot.barh.html#pandas.Series.plot.barh
    "pandas.Series.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.box`](api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box")([by]) | Make a box plot of the DataFrame columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.density`](api/pandas.Series.plot.density.html#pandas.Series.plot.density
    "pandas.Series.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.hist`](api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.kde`](api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.line`](api/pandas.Series.plot.line.html#pandas.Series.plot.line
    "pandas.Series.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.pie`](api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie")(**kwargs) | Generate a pie plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.hist`](api/pandas.Series.hist.html#pandas.Series.hist "pandas.Series.hist")([by, ax, grid, xlabelsize, ...])
    | Draw histogram of the input series using matplotlib. |'
  prefs: []
  type: TYPE_TB
- en: Serialization / IO / conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.to_pickle`](api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle")(path, *[, compression, ...]) | Pickle (serialize) object
    to file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_csv`](api/pandas.Series.to_csv.html#pandas.Series.to_csv "pandas.Series.to_csv")([path_or_buf, sep, na_rep, ...])
    | Write object to a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_dict`](api/pandas.Series.to_dict.html#pandas.Series.to_dict "pandas.Series.to_dict")(*[, into])
    | Convert Series to {label -> value} dict or dict-like object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_excel`](api/pandas.Series.to_excel.html#pandas.Series.to_excel
    "pandas.Series.to_excel")(excel_writer, *[, ...]) | Write object to an Excel sheet.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_frame`](api/pandas.Series.to_frame.html#pandas.Series.to_frame
    "pandas.Series.to_frame")([name]) | Convert Series to DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_xarray`](api/pandas.Series.to_xarray.html#pandas.Series.to_xarray
    "pandas.Series.to_xarray")() | Return an xarray object from the pandas object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_hdf`](api/pandas.Series.to_hdf.html#pandas.Series.to_hdf "pandas.Series.to_hdf")(path_or_buf, *, key[, mode, ...])
    | Write the contained data to an HDF5 file using HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_sql`](api/pandas.Series.to_sql.html#pandas.Series.to_sql "pandas.Series.to_sql")(name, con, *[, schema, ...])
    | Write records stored in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_json`](api/pandas.Series.to_json.html#pandas.Series.to_json "pandas.Series.to_json")([path_or_buf, orient, ...])
    | Convert the object to a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_string`](api/pandas.Series.to_string.html#pandas.Series.to_string
    "pandas.Series.to_string")([buf, na_rep, ...]) | Render a string representation
    of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_clipboard`](api/pandas.Series.to_clipboard.html#pandas.Series.to_clipboard
    "pandas.Series.to_clipboard")(*[, excel, sep]) | Copy object to the system clipboard.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_latex`](api/pandas.Series.to_latex.html#pandas.Series.to_latex
    "pandas.Series.to_latex")([buf, columns, header, ...]) | Render object to a LaTeX
    tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_markdown`](api/pandas.Series.to_markdown.html#pandas.Series.to_markdown
    "pandas.Series.to_markdown")([buf, mode, index, ...]) | Print Series in Markdown-friendly
    format. |'
  prefs: []
  type: TYPE_TB
- en: Constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")([data, index, dtype, name, copy, ...])
    | One-dimensional ndarray with axis labels (including time series). |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Axes**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.index`](api/pandas.Series.index.html#pandas.Series.index "pandas.Series.index")
    | The index (axis labels) of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.array`](api/pandas.Series.array.html#pandas.Series.array "pandas.Series.array")
    | The ExtensionArray of the data backing this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.values`](api/pandas.Series.values.html#pandas.Series.values "pandas.Series.values")
    | Return Series as ndarray or ndarray-like depending on the dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dtype`](api/pandas.Series.dtype.html#pandas.Series.dtype "pandas.Series.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.shape`](api/pandas.Series.shape.html#pandas.Series.shape "pandas.Series.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nbytes`](api/pandas.Series.nbytes.html#pandas.Series.nbytes "pandas.Series.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ndim`](api/pandas.Series.ndim.html#pandas.Series.ndim "pandas.Series.ndim")
    | Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.size`](api/pandas.Series.size.html#pandas.Series.size "pandas.Series.size")
    | Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.T`](api/pandas.Series.T.html#pandas.Series.T "pandas.Series.T")
    | Return the transpose, which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.memory_usage`](api/pandas.Series.memory_usage.html#pandas.Series.memory_usage
    "pandas.Series.memory_usage")([index, deep]) | Return the memory usage of the
    Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.hasnans`](api/pandas.Series.hasnans.html#pandas.Series.hasnans "pandas.Series.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.empty`](api/pandas.Series.empty.html#pandas.Series.empty "pandas.Series.empty")
    | Indicator whether Series/DataFrame is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dtypes`](api/pandas.Series.dtypes.html#pandas.Series.dtypes "pandas.Series.dtypes")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.name`](api/pandas.Series.name.html#pandas.Series.name "pandas.Series.name")
    | Return the name of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.flags`](api/pandas.Series.flags.html#pandas.Series.flags "pandas.Series.flags")
    | Get the properties associated with this pandas object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.set_flags`](api/pandas.Series.set_flags.html#pandas.Series.set_flags
    "pandas.Series.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.astype`](api/pandas.Series.astype.html#pandas.Series.astype "pandas.Series.astype")(dtype[, copy, errors])
    | Cast a pandas object to a specified dtype `dtype`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.convert_dtypes`](api/pandas.Series.convert_dtypes.html#pandas.Series.convert_dtypes
    "pandas.Series.convert_dtypes")([infer_objects, ...]) | Convert columns to the
    best possible dtypes using dtypes supporting `pd.NA`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.infer_objects`](api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects")([copy]) | Attempt to infer better dtypes for object
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.copy`](api/pandas.Series.copy.html#pandas.Series.copy "pandas.Series.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.bool`](api/pandas.Series.bool.html#pandas.Series.bool "pandas.Series.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_numpy`](api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")([dtype, copy, na_value]) | A NumPy ndarray representing
    the values in this Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_period`](api/pandas.Series.to_period.html#pandas.Series.to_period
    "pandas.Series.to_period")([freq, copy]) | Convert Series from DatetimeIndex to
    PeriodIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_timestamp`](api/pandas.Series.to_timestamp.html#pandas.Series.to_timestamp
    "pandas.Series.to_timestamp")([freq, how, copy]) | Cast to DatetimeIndex of Timestamps,
    at *beginning* of period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_list`](api/pandas.Series.to_list.html#pandas.Series.to_list "pandas.Series.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.__array__`](api/pandas.Series.__array__.html#pandas.Series.__array__
    "pandas.Series.__array__")([dtype, copy]) | Return the values as a NumPy array.
    |'
  prefs: []
  type: TYPE_TB
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.get`](api/pandas.Series.get.html#pandas.Series.get "pandas.Series.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.at`](api/pandas.Series.at.html#pandas.Series.at "pandas.Series.at")
    | Access a single value for a row/column label pair. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.iat`](api/pandas.Series.iat.html#pandas.Series.iat "pandas.Series.iat")
    | Access a single value for a row/column pair by integer position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.loc`](api/pandas.Series.loc.html#pandas.Series.loc "pandas.Series.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.iloc`](api/pandas.Series.iloc.html#pandas.Series.iloc "pandas.Series.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.__iter__`](api/pandas.Series.__iter__.html#pandas.Series.__iter__
    "pandas.Series.__iter__")() | Return an iterator of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.items`](api/pandas.Series.items.html#pandas.Series.items "pandas.Series.items")()
    | Lazily iterate over (index, value) tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.keys`](api/pandas.Series.keys.html#pandas.Series.keys "pandas.Series.keys")()
    | Return alias for index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pop`](api/pandas.Series.pop.html#pandas.Series.pop "pandas.Series.pop")(item)
    | Return item and drops from series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.item`](api/pandas.Series.item.html#pandas.Series.item "pandas.Series.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.xs`](api/pandas.Series.xs.html#pandas.Series.xs "pandas.Series.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
- en: Binary operator functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.add`](api/pandas.Series.add.html#pandas.Series.add "pandas.Series.add")(other[, level, fill_value, axis])
    | Return Addition of series and other, element-wise (binary operator add). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sub`](api/pandas.Series.sub.html#pandas.Series.sub "pandas.Series.sub")(other[, level, fill_value, axis])
    | Return Subtraction of series and other, element-wise (binary operator sub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mul`](api/pandas.Series.mul.html#pandas.Series.mul "pandas.Series.mul")(other[, level, fill_value, axis])
    | Return Multiplication of series and other, element-wise (binary operator mul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.div`](api/pandas.Series.div.html#pandas.Series.div "pandas.Series.div")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.truediv`](api/pandas.Series.truediv.html#pandas.Series.truediv "pandas.Series.truediv")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.floordiv`](api/pandas.Series.floordiv.html#pandas.Series.floordiv
    "pandas.Series.floordiv")(other[, level, fill_value, axis]) | Return Integer division
    of series and other, element-wise (binary operator floordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mod`](api/pandas.Series.mod.html#pandas.Series.mod "pandas.Series.mod")(other[, level, fill_value, axis])
    | Return Modulo of series and other, element-wise (binary operator mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pow`](api/pandas.Series.pow.html#pandas.Series.pow "pandas.Series.pow")(other[, level, fill_value, axis])
    | Return Exponential power of series and other, element-wise (binary operator
    pow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.radd`](api/pandas.Series.radd.html#pandas.Series.radd "pandas.Series.radd")(other[, level, fill_value, axis])
    | Return Addition of series and other, element-wise (binary operator radd). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rsub`](api/pandas.Series.rsub.html#pandas.Series.rsub "pandas.Series.rsub")(other[, level, fill_value, axis])
    | Return Subtraction of series and other, element-wise (binary operator rsub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rmul`](api/pandas.Series.rmul.html#pandas.Series.rmul "pandas.Series.rmul")(other[, level, fill_value, axis])
    | Return Multiplication of series and other, element-wise (binary operator rmul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rdiv`](api/pandas.Series.rdiv.html#pandas.Series.rdiv "pandas.Series.rdiv")(other[, level, fill_value, axis])
    | Return Floating division of series and other, element-wise (binary operator
    rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rtruediv`](api/pandas.Series.rtruediv.html#pandas.Series.rtruediv
    "pandas.Series.rtruediv")(other[, level, fill_value, axis]) | Return Floating
    division of series and other, element-wise (binary operator rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rfloordiv`](api/pandas.Series.rfloordiv.html#pandas.Series.rfloordiv
    "pandas.Series.rfloordiv")(other[, level, fill_value, ...]) | Return Integer division
    of series and other, element-wise (binary operator rfloordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rmod`](api/pandas.Series.rmod.html#pandas.Series.rmod "pandas.Series.rmod")(other[, level, fill_value, axis])
    | Return Modulo of series and other, element-wise (binary operator rmod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rpow`](api/pandas.Series.rpow.html#pandas.Series.rpow "pandas.Series.rpow")(other[, level, fill_value, axis])
    | Return Exponential power of series and other, element-wise (binary operator
    rpow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.combine`](api/pandas.Series.combine.html#pandas.Series.combine "pandas.Series.combine")(other, func[, fill_value])
    | Combine the Series with a Series or scalar according to func. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.combine_first`](api/pandas.Series.combine_first.html#pandas.Series.combine_first
    "pandas.Series.combine_first")(other) | Update null elements with value in the
    same location in ''other''. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.round`](api/pandas.Series.round.html#pandas.Series.round "pandas.Series.round")([decimals])
    | Round each value in a Series to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.lt`](api/pandas.Series.lt.html#pandas.Series.lt "pandas.Series.lt")(other[, level, fill_value, axis])
    | Return Less than of series and other, element-wise (binary operator lt). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.gt`](api/pandas.Series.gt.html#pandas.Series.gt "pandas.Series.gt")(other[, level, fill_value, axis])
    | Return Greater than of series and other, element-wise (binary operator gt).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.le`](api/pandas.Series.le.html#pandas.Series.le "pandas.Series.le")(other[, level, fill_value, axis])
    | Return Less than or equal to of series and other, element-wise (binary operator
    le). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ge`](api/pandas.Series.ge.html#pandas.Series.ge "pandas.Series.ge")(other[, level, fill_value, axis])
    | Return Greater than or equal to of series and other, element-wise (binary operator
    ge). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ne`](api/pandas.Series.ne.html#pandas.Series.ne "pandas.Series.ne")(other[, level, fill_value, axis])
    | Return Not equal to of series and other, element-wise (binary operator ne).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.eq`](api/pandas.Series.eq.html#pandas.Series.eq "pandas.Series.eq")(other[, level, fill_value, axis])
    | Return Equal to of series and other, element-wise (binary operator eq). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.product`](api/pandas.Series.product.html#pandas.Series.product "pandas.Series.product")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dot`](api/pandas.Series.dot.html#pandas.Series.dot "pandas.Series.dot")(other)
    | Compute the dot product between the Series and the columns of other. |'
  prefs: []
  type: TYPE_TB
- en: Function application, GroupBy & window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.apply`](api/pandas.Series.apply.html#pandas.Series.apply "pandas.Series.apply")(func[, convert_dtype, args, by_row])
    | Invoke function on values of Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.agg`](api/pandas.Series.agg.html#pandas.Series.agg "pandas.Series.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.aggregate`](api/pandas.Series.aggregate.html#pandas.Series.aggregate
    "pandas.Series.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.transform`](api/pandas.Series.transform.html#pandas.Series.transform
    "pandas.Series.transform")(func[, axis]) | Call `func` on self producing a Series
    with the same axis shape as self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.map`](api/pandas.Series.map.html#pandas.Series.map "pandas.Series.map")(arg[, na_action])
    | Map values of Series according to an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.groupby`](api/pandas.Series.groupby.html#pandas.Series.groupby "pandas.Series.groupby")([by, axis, level, as_index, ...])
    | Group Series using a mapper or by a Series of columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rolling`](api/pandas.Series.rolling.html#pandas.Series.rolling "pandas.Series.rolling")(window[, min_periods, ...])
    | Provide rolling window calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.expanding`](api/pandas.Series.expanding.html#pandas.Series.expanding
    "pandas.Series.expanding")([min_periods, axis, method]) | Provide expanding window
    calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ewm`](api/pandas.Series.ewm.html#pandas.Series.ewm "pandas.Series.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pipe`](api/pandas.Series.pipe.html#pandas.Series.pipe "pandas.Series.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  prefs: []
  type: TYPE_TB
- en: '## Computations / descriptive stats'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.abs`](api/pandas.Series.abs.html#pandas.Series.abs "pandas.Series.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.all`](api/pandas.Series.all.html#pandas.Series.all "pandas.Series.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.any`](api/pandas.Series.any.html#pandas.Series.any "pandas.Series.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.autocorr`](api/pandas.Series.autocorr.html#pandas.Series.autocorr
    "pandas.Series.autocorr")([lag]) | Compute the lag-N autocorrelation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.between`](api/pandas.Series.between.html#pandas.Series.between "pandas.Series.between")(left, right[, inclusive])
    | Return boolean Series equivalent to left <= series <= right. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.clip`](api/pandas.Series.clip.html#pandas.Series.clip "pandas.Series.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.corr`](api/pandas.Series.corr.html#pandas.Series.corr "pandas.Series.corr")(other[, method, min_periods])
    | Compute correlation with other Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.count`](api/pandas.Series.count.html#pandas.Series.count "pandas.Series.count")()
    | Return number of non-NA/null observations in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cov`](api/pandas.Series.cov.html#pandas.Series.cov "pandas.Series.cov")(other[, min_periods, ddof])
    | Compute covariance with Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cummax`](api/pandas.Series.cummax.html#pandas.Series.cummax "pandas.Series.cummax")([axis, skipna])
    | Return cumulative maximum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cummin`](api/pandas.Series.cummin.html#pandas.Series.cummin "pandas.Series.cummin")([axis, skipna])
    | Return cumulative minimum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cumprod`](api/pandas.Series.cumprod.html#pandas.Series.cumprod "pandas.Series.cumprod")([axis, skipna])
    | Return cumulative product over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cumsum`](api/pandas.Series.cumsum.html#pandas.Series.cumsum "pandas.Series.cumsum")([axis, skipna])
    | Return cumulative sum over a DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.describe`](api/pandas.Series.describe.html#pandas.Series.describe
    "pandas.Series.describe")([percentiles, include, exclude]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.diff`](api/pandas.Series.diff.html#pandas.Series.diff "pandas.Series.diff")([periods])
    | First discrete difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.factorize`](api/pandas.Series.factorize.html#pandas.Series.factorize
    "pandas.Series.factorize")([sort, use_na_sentinel]) | Encode the object as an
    enumerated type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.kurt`](api/pandas.Series.kurt.html#pandas.Series.kurt "pandas.Series.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.max`](api/pandas.Series.max.html#pandas.Series.max "pandas.Series.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mean`](api/pandas.Series.mean.html#pandas.Series.mean "pandas.Series.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.median`](api/pandas.Series.median.html#pandas.Series.median "pandas.Series.median")([axis, skipna, numeric_only])
    | Return the median of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.min`](api/pandas.Series.min.html#pandas.Series.min "pandas.Series.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mode`](api/pandas.Series.mode.html#pandas.Series.mode "pandas.Series.mode")([dropna])
    | Return the mode(s) of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nlargest`](api/pandas.Series.nlargest.html#pandas.Series.nlargest
    "pandas.Series.nlargest")([n, keep]) | Return the largest n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nsmallest`](api/pandas.Series.nsmallest.html#pandas.Series.nsmallest
    "pandas.Series.nsmallest")([n, keep]) | Return the smallest n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pct_change`](api/pandas.Series.pct_change.html#pandas.Series.pct_change
    "pandas.Series.pct_change")([periods, fill_method, ...]) | Fractional change between
    the current and a prior element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.prod`](api/pandas.Series.prod.html#pandas.Series.prod "pandas.Series.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.quantile`](api/pandas.Series.quantile.html#pandas.Series.quantile
    "pandas.Series.quantile")([q, interpolation]) | Return value at the given quantile.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rank`](api/pandas.Series.rank.html#pandas.Series.rank "pandas.Series.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sem`](api/pandas.Series.sem.html#pandas.Series.sem "pandas.Series.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.skew`](api/pandas.Series.skew.html#pandas.Series.skew "pandas.Series.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.std`](api/pandas.Series.std.html#pandas.Series.std "pandas.Series.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sum`](api/pandas.Series.sum.html#pandas.Series.sum "pandas.Series.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.var`](api/pandas.Series.var.html#pandas.Series.var "pandas.Series.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.kurtosis`](api/pandas.Series.kurtosis.html#pandas.Series.kurtosis
    "pandas.Series.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.unique`](api/pandas.Series.unique.html#pandas.Series.unique "pandas.Series.unique")()
    | Return unique values of Series object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.nunique`](api/pandas.Series.nunique.html#pandas.Series.nunique "pandas.Series.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_unique`](api/pandas.Series.is_unique.html#pandas.Series.is_unique
    "pandas.Series.is_unique") | Return boolean if values in the object are unique.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_monotonic_increasing`](api/pandas.Series.is_monotonic_increasing.html#pandas.Series.is_monotonic_increasing
    "pandas.Series.is_monotonic_increasing") | Return boolean if values in the object
    are monotonically increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.is_monotonic_decreasing`](api/pandas.Series.is_monotonic_decreasing.html#pandas.Series.is_monotonic_decreasing
    "pandas.Series.is_monotonic_decreasing") | Return boolean if values in the object
    are monotonically decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.value_counts`](api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts")([normalize, sort, ...]) | Return a Series containing
    counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: Reindexing / selection / label manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.align`](api/pandas.Series.align.html#pandas.Series.align "pandas.Series.align")(other[, join, axis, level, ...])
    | Align two objects on their axes with the specified join method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.case_when`](api/pandas.Series.case_when.html#pandas.Series.case_when
    "pandas.Series.case_when")(caselist) | Replace values where the conditions are
    True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.drop`](api/pandas.Series.drop.html#pandas.Series.drop "pandas.Series.drop")([labels, axis, index, columns, ...])
    | Return Series with specified index labels removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.droplevel`](api/pandas.Series.droplevel.html#pandas.Series.droplevel
    "pandas.Series.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.drop_duplicates`](api/pandas.Series.drop_duplicates.html#pandas.Series.drop_duplicates
    "pandas.Series.drop_duplicates")(*[, keep, inplace, ...]) | Return Series with
    duplicate values removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.duplicated`](api/pandas.Series.duplicated.html#pandas.Series.duplicated
    "pandas.Series.duplicated")([keep]) | Indicate duplicate Series values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.equals`](api/pandas.Series.equals.html#pandas.Series.equals "pandas.Series.equals")(other)
    | Test whether two objects contain the same elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.first`](api/pandas.Series.first.html#pandas.Series.first "pandas.Series.first")(offset)
    | (DEPRECATED) Select initial periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.head`](api/pandas.Series.head.html#pandas.Series.head "pandas.Series.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.idxmax`](api/pandas.Series.idxmax.html#pandas.Series.idxmax "pandas.Series.idxmax")([axis, skipna])
    | Return the row label of the maximum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.idxmin`](api/pandas.Series.idxmin.html#pandas.Series.idxmin "pandas.Series.idxmin")([axis, skipna])
    | Return the row label of the minimum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isin`](api/pandas.Series.isin.html#pandas.Series.isin "pandas.Series.isin")(values)
    | Whether elements in Series are contained in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.last`](api/pandas.Series.last.html#pandas.Series.last "pandas.Series.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reindex`](api/pandas.Series.reindex.html#pandas.Series.reindex "pandas.Series.reindex")([index, axis, method, copy, ...])
    | Conform Series to new index with optional filling logic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reindex_like`](api/pandas.Series.reindex_like.html#pandas.Series.reindex_like
    "pandas.Series.reindex_like")(other[, method, copy, ...]) | Return an object with
    matching indices as other object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rename`](api/pandas.Series.rename.html#pandas.Series.rename "pandas.Series.rename")([index, axis, copy, inplace, ...])
    | Alter Series index labels or name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.rename_axis`](api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis")([mapper, index, axis, ...]) | Set the name of the
    axis for the index or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reset_index`](api/pandas.Series.reset_index.html#pandas.Series.reset_index
    "pandas.Series.reset_index")([level, drop, name, ...]) | Generate a new DataFrame
    or Series with the index reset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sample`](api/pandas.Series.sample.html#pandas.Series.sample "pandas.Series.sample")([n, frac, replace, weights, ...])
    | Return a random sample of items from an axis of object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.set_axis`](api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis")(labels, *[, axis, copy]) | Assign desired index to given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.take`](api/pandas.Series.take.html#pandas.Series.take "pandas.Series.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tail`](api/pandas.Series.tail.html#pandas.Series.tail "pandas.Series.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.truncate`](api/pandas.Series.truncate.html#pandas.Series.truncate
    "pandas.Series.truncate")([before, after, axis, copy]) | Truncate a Series or
    DataFrame before and after some index value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.where`](api/pandas.Series.where.html#pandas.Series.where "pandas.Series.where")(cond[, other, inplace, axis, level])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.mask`](api/pandas.Series.mask.html#pandas.Series.mask "pandas.Series.mask")(cond[, other, inplace, axis, level])
    | Replace values where the condition is True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.add_prefix`](api/pandas.Series.add_prefix.html#pandas.Series.add_prefix
    "pandas.Series.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.add_suffix`](api/pandas.Series.add_suffix.html#pandas.Series.add_suffix
    "pandas.Series.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.filter`](api/pandas.Series.filter.html#pandas.Series.filter "pandas.Series.filter")([items, like, regex, axis])
    | Subset the dataframe rows or columns according to the specified index labels.
    |'
  prefs: []
  type: TYPE_TB
- en: Missing data handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.backfill`](api/pandas.Series.backfill.html#pandas.Series.backfill
    "pandas.Series.backfill")(*[, axis, inplace, limit, ...]) | (DEPRECATED) Fill
    NA/NaN values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.bfill`](api/pandas.Series.bfill.html#pandas.Series.bfill "pandas.Series.bfill")(*[, axis, inplace, limit, ...])
    | Fill NA/NaN values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dropna`](api/pandas.Series.dropna.html#pandas.Series.dropna "pandas.Series.dropna")(*[, axis, inplace, how, ...])
    | Return a new Series with missing values removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ffill`](api/pandas.Series.ffill.html#pandas.Series.ffill "pandas.Series.ffill")(*[, axis, inplace, limit, ...])
    | Fill NA/NaN values by propagating the last valid observation to next valid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.fillna`](api/pandas.Series.fillna.html#pandas.Series.fillna "pandas.Series.fillna")([value, method, axis, ...])
    | Fill NA/NaN values using the specified method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.interpolate`](api/pandas.Series.interpolate.html#pandas.Series.interpolate
    "pandas.Series.interpolate")([method, axis, limit, ...]) | Fill NaN values using
    an interpolation method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isna`](api/pandas.Series.isna.html#pandas.Series.isna "pandas.Series.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.isnull`](api/pandas.Series.isnull.html#pandas.Series.isnull "pandas.Series.isnull")()
    | Series.isnull is an alias for Series.isna. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.notna`](api/pandas.Series.notna.html#pandas.Series.notna "pandas.Series.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.notnull`](api/pandas.Series.notnull.html#pandas.Series.notnull "pandas.Series.notnull")()
    | Series.notnull is an alias for Series.notna. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.pad`](api/pandas.Series.pad.html#pandas.Series.pad "pandas.Series.pad")(*[, axis, inplace, limit, downcast])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.replace`](api/pandas.Series.replace.html#pandas.Series.replace "pandas.Series.replace")([to_replace, value, inplace, ...])
    | Replace values given in to_replace with value. |'
  prefs: []
  type: TYPE_TB
- en: Reshaping, sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.argsort`](api/pandas.Series.argsort.html#pandas.Series.argsort "pandas.Series.argsort")([axis, kind, order, stable])
    | Return the integer indices that would sort the Series values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.argmin`](api/pandas.Series.argmin.html#pandas.Series.argmin "pandas.Series.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.argmax`](api/pandas.Series.argmax.html#pandas.Series.argmax "pandas.Series.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.reorder_levels`](api/pandas.Series.reorder_levels.html#pandas.Series.reorder_levels
    "pandas.Series.reorder_levels")(order) | Rearrange index levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sort_values`](api/pandas.Series.sort_values.html#pandas.Series.sort_values
    "pandas.Series.sort_values")(*[, axis, ascending, ...]) | Sort by the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sort_index`](api/pandas.Series.sort_index.html#pandas.Series.sort_index
    "pandas.Series.sort_index")(*[, axis, level, ...]) | Sort Series by index labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.swaplevel`](api/pandas.Series.swaplevel.html#pandas.Series.swaplevel
    "pandas.Series.swaplevel")([i, j, copy]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.unstack`](api/pandas.Series.unstack.html#pandas.Series.unstack "pandas.Series.unstack")([level, fill_value, sort])
    | Unstack, also known as pivot, Series with MultiIndex to produce DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.explode`](api/pandas.Series.explode.html#pandas.Series.explode "pandas.Series.explode")([ignore_index])
    | Transform each element of a list-like to a row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.searchsorted`](api/pandas.Series.searchsorted.html#pandas.Series.searchsorted
    "pandas.Series.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.ravel`](api/pandas.Series.ravel.html#pandas.Series.ravel "pandas.Series.ravel")([order])
    | (DEPRECATED) Return the flattened underlying data as an ndarray or ExtensionArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.repeat`](api/pandas.Series.repeat.html#pandas.Series.repeat "pandas.Series.repeat")(repeats[, axis])
    | Repeat elements of a Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.squeeze`](api/pandas.Series.squeeze.html#pandas.Series.squeeze "pandas.Series.squeeze")([axis])
    | Squeeze 1 dimensional axis objects into scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.view`](api/pandas.Series.view.html#pandas.Series.view "pandas.Series.view")([dtype])
    | (DEPRECATED) Create a new view of the Series. |'
  prefs: []
  type: TYPE_TB
- en: Combining / comparing / joining / merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.compare`](api/pandas.Series.compare.html#pandas.Series.compare "pandas.Series.compare")(other[, align_axis, ...])
    | Compare to another Series and show the differences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.update`](api/pandas.Series.update.html#pandas.Series.update "pandas.Series.update")(other)
    | Modify Series in place using values from passed Series. |'
  prefs: []
  type: TYPE_TB
- en: Time Series-related
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.asfreq`](api/pandas.Series.asfreq.html#pandas.Series.asfreq "pandas.Series.asfreq")(freq[, method, how, ...])
    | Convert time series to specified frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.asof`](api/pandas.Series.asof.html#pandas.Series.asof "pandas.Series.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.shift`](api/pandas.Series.shift.html#pandas.Series.shift "pandas.Series.shift")([periods, freq, axis, ...])
    | Shift index by desired number of periods with an optional time freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.first_valid_index`](api/pandas.Series.first_valid_index.html#pandas.Series.first_valid_index
    "pandas.Series.first_valid_index")() | Return index for first non-NA value or
    None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.last_valid_index`](api/pandas.Series.last_valid_index.html#pandas.Series.last_valid_index
    "pandas.Series.last_valid_index")() | Return index for last non-NA value or None,
    if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.resample`](api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample")(rule[, axis, closed, label, ...]) | Resample time-series
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tz_convert`](api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis to
    target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.tz_localize`](api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize")(tz[, axis, level, copy, ...]) | Localize tz-naive
    index of a Series or DataFrame to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.at_time`](api/pandas.Series.at_time.html#pandas.Series.at_time "pandas.Series.at_time")(time[, asof, axis])
    | Select values at particular time of day (e.g., 9:30AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.between_time`](api/pandas.Series.between_time.html#pandas.Series.between_time
    "pandas.Series.between_time")(start_time, end_time[, ...]) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  prefs: []
  type: TYPE_TB
- en: Accessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas provides dtype-specific methods under various accessors. These are separate
    namespaces within [`Series`](api/pandas.Series.html#pandas.Series "pandas.Series")
    that only apply to specific data types.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.str`](api/pandas.Series.str.html#pandas.Series.str "pandas.Series.str")
    | alias of `StringMethods` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat`](api/pandas.Series.cat.html#pandas.Series.cat "pandas.Series.cat")
    | alias of `CategoricalAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt`](api/pandas.Series.dt.html#pandas.Series.dt "pandas.Series.dt")
    | alias of `CombinedDatetimelikeProperties` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse`](api/pandas.Series.sparse.html#pandas.Series.sparse "pandas.Series.sparse")
    | alias of `SparseAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse`](api/pandas.DataFrame.sparse.html#pandas.DataFrame.sparse
    "pandas.DataFrame.sparse") | alias of `SparseFrameAccessor` |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.str`](api/pandas.Index.str.html#pandas.Index.str "pandas.Index.str")
    | alias of `StringMethods` |'
  prefs: []
  type: TYPE_TB
- en: '| Data Type | Accessor |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Datetime, Timedelta, Period | [dt](#api-series-dt) |'
  prefs: []
  type: TYPE_TB
- en: '| String | [str](#api-series-str) |'
  prefs: []
  type: TYPE_TB
- en: '| Categorical | [cat](#api-series-cat) |'
  prefs: []
  type: TYPE_TB
- en: '| Sparse | [sparse](#api-series-sparse) |'
  prefs: []
  type: TYPE_TB
- en: '### Datetimelike properties'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.dt` can be used to access the values of the series as datetimelike
    and return several properties. These can be accessed like `Series.dt.<property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Datetime properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.date`](api/pandas.Series.dt.date.html#pandas.Series.dt.date "pandas.Series.dt.date")
    | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.time`](api/pandas.Series.dt.time.html#pandas.Series.dt.time "pandas.Series.dt.time")
    | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.timetz`](api/pandas.Series.dt.timetz.html#pandas.Series.dt.timetz
    "pandas.Series.dt.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.year`](api/pandas.Series.dt.year.html#pandas.Series.dt.year "pandas.Series.dt.year")
    | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month`](api/pandas.Series.dt.month.html#pandas.Series.dt.month
    "pandas.Series.dt.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day`](api/pandas.Series.dt.day.html#pandas.Series.dt.day "pandas.Series.dt.day")
    | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.hour`](api/pandas.Series.dt.hour.html#pandas.Series.dt.hour "pandas.Series.dt.hour")
    | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.minute`](api/pandas.Series.dt.minute.html#pandas.Series.dt.minute
    "pandas.Series.dt.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.second`](api/pandas.Series.dt.second.html#pandas.Series.dt.second
    "pandas.Series.dt.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microsecond`](api/pandas.Series.dt.microsecond.html#pandas.Series.dt.microsecond
    "pandas.Series.dt.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanosecond`](api/pandas.Series.dt.nanosecond.html#pandas.Series.dt.nanosecond
    "pandas.Series.dt.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofweek`](api/pandas.Series.dt.dayofweek.html#pandas.Series.dt.dayofweek
    "pandas.Series.dt.dayofweek") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_week`](api/pandas.Series.dt.day_of_week.html#pandas.Series.dt.day_of_week
    "pandas.Series.dt.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.weekday`](api/pandas.Series.dt.weekday.html#pandas.Series.dt.weekday
    "pandas.Series.dt.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofyear`](api/pandas.Series.dt.dayofyear.html#pandas.Series.dt.dayofyear
    "pandas.Series.dt.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_year`](api/pandas.Series.dt.day_of_year.html#pandas.Series.dt.day_of_year
    "pandas.Series.dt.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.quarter`](api/pandas.Series.dt.quarter.html#pandas.Series.dt.quarter
    "pandas.Series.dt.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_start`](api/pandas.Series.dt.is_month_start.html#pandas.Series.dt.is_month_start
    "pandas.Series.dt.is_month_start") | Indicates whether the date is the first day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_end`](api/pandas.Series.dt.is_month_end.html#pandas.Series.dt.is_month_end
    "pandas.Series.dt.is_month_end") | Indicates whether the date is the last day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_start`](api/pandas.Series.dt.is_quarter_start.html#pandas.Series.dt.is_quarter_start
    "pandas.Series.dt.is_quarter_start") | Indicator for whether the date is the first
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_end`](api/pandas.Series.dt.is_quarter_end.html#pandas.Series.dt.is_quarter_end
    "pandas.Series.dt.is_quarter_end") | Indicator for whether the date is the last
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_start`](api/pandas.Series.dt.is_year_start.html#pandas.Series.dt.is_year_start
    "pandas.Series.dt.is_year_start") | Indicate whether the date is the first day
    of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_end`](api/pandas.Series.dt.is_year_end.html#pandas.Series.dt.is_year_end
    "pandas.Series.dt.is_year_end") | Indicate whether the date is the last day of
    the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_leap_year`](api/pandas.Series.dt.is_leap_year.html#pandas.Series.dt.is_leap_year
    "pandas.Series.dt.is_leap_year") | Boolean indicator if the date belongs to a
    leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.daysinmonth`](api/pandas.Series.dt.daysinmonth.html#pandas.Series.dt.daysinmonth
    "pandas.Series.dt.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz`](api/pandas.Series.dt.tz.html#pandas.Series.dt.tz "pandas.Series.dt.tz")
    | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.freq`](api/pandas.Series.dt.freq.html#pandas.Series.dt.freq "pandas.Series.dt.freq")
    | Return the frequency object for this PeriodArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Datetime methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.isocalendar`](api/pandas.Series.dt.isocalendar.html#pandas.Series.dt.isocalendar
    "pandas.Series.dt.isocalendar")() | Calculate year, week, and day according to
    the ISO 8601 standard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_period`](api/pandas.Series.dt.to_period.html#pandas.Series.dt.to_period
    "pandas.Series.dt.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_pydatetime`](api/pandas.Series.dt.to_pydatetime.html#pandas.Series.dt.to_pydatetime
    "pandas.Series.dt.to_pydatetime")() | (DEPRECATED) Return the data as an array
    of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_localize`](api/pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize
    "pandas.Series.dt.tz_localize")(*args, **kwargs) | Localize tz-naive Datetime
    Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_convert`](api/pandas.Series.dt.tz_convert.html#pandas.Series.dt.tz_convert
    "pandas.Series.dt.tz_convert")(*args, **kwargs) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.normalize`](api/pandas.Series.dt.normalize.html#pandas.Series.dt.normalize
    "pandas.Series.dt.normalize")(*args, **kwargs) | Convert times to midnight. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.strftime`](api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.round`](api/pandas.Series.dt.round.html#pandas.Series.dt.round
    "pandas.Series.dt.round")(*args, **kwargs) | Perform round operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.floor`](api/pandas.Series.dt.floor.html#pandas.Series.dt.floor
    "pandas.Series.dt.floor")(*args, **kwargs) | Perform floor operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.ceil`](api/pandas.Series.dt.ceil.html#pandas.Series.dt.ceil "pandas.Series.dt.ceil")(*args, **kwargs)
    | Perform ceil operation on the data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month_name`](api/pandas.Series.dt.month_name.html#pandas.Series.dt.month_name
    "pandas.Series.dt.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_name`](api/pandas.Series.dt.day_name.html#pandas.Series.dt.day_name
    "pandas.Series.dt.day_name")(*args, **kwargs) | Return the day names with specified
    locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: Period properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.qyear`](api/pandas.Series.dt.qyear.html#pandas.Series.dt.qyear
    "pandas.Series.dt.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.start_time`](api/pandas.Series.dt.start_time.html#pandas.Series.dt.start_time
    "pandas.Series.dt.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.end_time`](api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: Timedelta properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.days`](api/pandas.Series.dt.days.html#pandas.Series.dt.days "pandas.Series.dt.days")
    | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.seconds`](api/pandas.Series.dt.seconds.html#pandas.Series.dt.seconds
    "pandas.Series.dt.seconds") | Number of seconds (>= 0 and less than 1 day) for
    each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microseconds`](api/pandas.Series.dt.microseconds.html#pandas.Series.dt.microseconds
    "pandas.Series.dt.microseconds") | Number of microseconds (>= 0 and less than
    1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanoseconds`](api/pandas.Series.dt.nanoseconds.html#pandas.Series.dt.nanoseconds
    "pandas.Series.dt.nanoseconds") | Number of nanoseconds (>= 0 and less than 1
    microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.components`](api/pandas.Series.dt.components.html#pandas.Series.dt.components
    "pandas.Series.dt.components") | Return a Dataframe of the components of the Timedeltas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Timedelta methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.to_pytimedelta`](api/pandas.Series.dt.to_pytimedelta.html#pandas.Series.dt.to_pytimedelta
    "pandas.Series.dt.to_pytimedelta")() | Return an array of native [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.total_seconds`](api/pandas.Series.dt.total_seconds.html#pandas.Series.dt.total_seconds
    "pandas.Series.dt.total_seconds")(*args, **kwargs) | Return total duration of
    each element expressed in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |  ### String handling'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.str` can be used to access the values of the series as strings and
    apply several methods to it. These can be accessed like `Series.str.<function/property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.str.capitalize`](api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize")() | Convert strings in the Series/Index to be
    capitalized. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.casefold`](api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold")() | Convert strings in the Series/Index to be casefolded.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.cat`](api/pandas.Series.str.cat.html#pandas.Series.str.cat "pandas.Series.str.cat")([others, sep, na_rep, join])
    | Concatenate strings in the Series/Index with given separator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.center`](api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center")(width[, fillchar]) | Pad left and right side of strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.contains`](api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains")(pat[, case, flags, na, ...]) | Test if pattern or
    regex is contained within a string of a Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.count`](api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count")(pat[, flags]) | Count occurrences of pattern in each
    string of the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.decode`](api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")(encoding[, errors]) | Decode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.encode`](api/pandas.Series.str.encode.html#pandas.Series.str.encode
    "pandas.Series.str.encode")(encoding[, errors]) | Encode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.endswith`](api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith")(pat[, na]) | Test if the end of each string element
    matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extract`](api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract")(pat[, flags, expand]) | Extract capture groups in
    the regex pat as columns in a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extractall`](api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall")(pat[, flags]) | Extract capture groups in the
    regex pat as columns in DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.find`](api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find")(sub[, start, end]) | Return lowest indexes in each strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.findall`](api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall")(pat[, flags]) | Find all occurrences of pattern or
    regular expression in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.fullmatch`](api/pandas.Series.str.fullmatch.html#pandas.Series.str.fullmatch
    "pandas.Series.str.fullmatch")(pat[, case, flags, na]) | Determine if each string
    entirely matches a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get`](api/pandas.Series.str.get.html#pandas.Series.str.get "pandas.Series.str.get")(i)
    | Extract element from each component at specified position or with specified
    key. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.index`](api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index")(sub[, start, end]) | Return lowest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.join`](api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join")(sep) | Join lists contained as elements in the Series/Index
    with passed delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.len`](api/pandas.Series.str.len.html#pandas.Series.str.len "pandas.Series.str.len")()
    | Compute the length of each element in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.ljust`](api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust")(width[, fillchar]) | Pad right side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lower`](api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower")() | Convert strings in the Series/Index to lowercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lstrip`](api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip")([to_strip]) | Remove leading characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.match`](api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match")(pat[, case, flags, na]) | Determine if each string
    starts with a match of a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.normalize`](api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize")(form) | Return the Unicode normal form for the
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.pad`](api/pandas.Series.str.pad.html#pandas.Series.str.pad "pandas.Series.str.pad")(width[, side, fillchar])
    | Pad strings in the Series/Index up to width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.partition`](api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition")([sep, expand]) | Split the string at the first
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removeprefix`](api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix")(prefix) | Remove a prefix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removesuffix`](api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix")(suffix) | Remove a suffix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.repeat`](api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat")(repeats) | Duplicate each string in the Series or
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.replace`](api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")(pat, repl[, n, case, ...]) | Replace each occurrence
    of pattern/regex in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rfind`](api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind")(sub[, start, end]) | Return highest indexes in each
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rindex`](api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex")(sub[, start, end]) | Return highest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rjust`](api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust")(width[, fillchar]) | Pad left side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rpartition`](api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition")([sep, expand]) | Split the string at the last
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rstrip`](api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip")([to_strip]) | Remove trailing characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice`](api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice")([start, stop, step]) | Slice substrings from each element
    in the Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice_replace`](api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace")([start, stop, repl]) | Replace a positional
    slice of a string with another value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.split`](api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split")([pat, n, expand, regex]) | Split strings around given
    separator/delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rsplit`](api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit")([pat, n, expand]) | Split strings around given separator/delimiter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.startswith`](api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith")(pat[, na]) | Test if the start of each string
    element matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.strip`](api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip")([to_strip]) | Remove leading and trailing characters.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.swapcase`](api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase")() | Convert strings in the Series/Index to be swapcased.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.title`](api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title")() | Convert strings in the Series/Index to titlecase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.translate`](api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate")(table) | Map all characters in the string through
    the given mapping table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.upper`](api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper")() | Convert strings in the Series/Index to uppercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.wrap`](api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap")(width, **kwargs) | Wrap strings in Series/Index at specified
    line width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.zfill`](api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill")(width) | Pad strings in the Series/Index by prepending
    ''0'' characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalnum`](api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum")() | Check whether all characters in each string are
    alphanumeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalpha`](api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha")() | Check whether all characters in each string are
    alphabetic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdigit`](api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit")() | Check whether all characters in each string are
    digits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isspace`](api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace")() | Check whether all characters in each string are
    whitespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.islower`](api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower")() | Check whether all characters in each string are
    lowercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isupper`](api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper")() | Check whether all characters in each string are
    uppercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.istitle`](api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle")() | Check whether all characters in each string are
    titlecase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isnumeric`](api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric")() | Check whether all characters in each string
    are numeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdecimal`](api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal")() | Check whether all characters in each string
    are decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get_dummies`](api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies")([sep]) | Return DataFrame of dummy/indicator
    variables for Series. |  ### Categorical accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Categorical-dtype specific methods and attributes are available under the `Series.cat`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.cat.categories`](api/pandas.Series.cat.categories.html#pandas.Series.cat.categories
    "pandas.Series.cat.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.ordered`](api/pandas.Series.cat.ordered.html#pandas.Series.cat.ordered
    "pandas.Series.cat.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.codes`](api/pandas.Series.cat.codes.html#pandas.Series.cat.codes
    "pandas.Series.cat.codes") | Return Series of codes as well as the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.rename_categories`](api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories")(*args, **kwargs) | Rename categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.reorder_categories`](api/pandas.Series.cat.reorder_categories.html#pandas.Series.cat.reorder_categories
    "pandas.Series.cat.reorder_categories")(*args, **kwargs) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.add_categories`](api/pandas.Series.cat.add_categories.html#pandas.Series.cat.add_categories
    "pandas.Series.cat.add_categories")(*args, **kwargs) | Add new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_categories`](api/pandas.Series.cat.remove_categories.html#pandas.Series.cat.remove_categories
    "pandas.Series.cat.remove_categories")(*args, **kwargs) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_unused_categories`](api/pandas.Series.cat.remove_unused_categories.html#pandas.Series.cat.remove_unused_categories
    "pandas.Series.cat.remove_unused_categories")(*args, ...) | Remove categories
    which are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.set_categories`](api/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories
    "pandas.Series.cat.set_categories")(*args, **kwargs) | Set the categories to the
    specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_ordered`](api/pandas.Series.cat.as_ordered.html#pandas.Series.cat.as_ordered
    "pandas.Series.cat.as_ordered")(*args, **kwargs) | Set the Categorical to be ordered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_unordered`](api/pandas.Series.cat.as_unordered.html#pandas.Series.cat.as_unordered
    "pandas.Series.cat.as_unordered")(*args, **kwargs) | Set the Categorical to be
    unordered. |  ### Sparse accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse-dtype specific methods and attributes are provided under the `Series.sparse`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.sparse.npoints`](api/pandas.Series.sparse.npoints.html#pandas.Series.sparse.npoints
    "pandas.Series.sparse.npoints") | The number of non- `fill_value` points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.density`](api/pandas.Series.sparse.density.html#pandas.Series.sparse.density
    "pandas.Series.sparse.density") | The percent of non- `fill_value` points, as
    decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.fill_value`](api/pandas.Series.sparse.fill_value.html#pandas.Series.sparse.fill_value
    "pandas.Series.sparse.fill_value") | Elements in data that are fill_value are
    not stored. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.sp_values`](api/pandas.Series.sparse.sp_values.html#pandas.Series.sparse.sp_values
    "pandas.Series.sparse.sp_values") | An ndarray containing the non- `fill_value`
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.from_coo`](api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo")(A[, dense_index]) | Create a Series with sparse
    values from a scipy.sparse.coo_matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.to_coo`](api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo")([row_levels, ...]) | Create a scipy.sparse.coo_matrix
    from a Series with MultiIndex. |  ### List accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow list-dtype specific methods and attributes are provided under the `Series.list`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.list.flatten`](api/pandas.Series.list.flatten.html#pandas.Series.list.flatten
    "pandas.Series.list.flatten")() | Flatten list values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.len`](api/pandas.Series.list.len.html#pandas.Series.list.len
    "pandas.Series.list.len")() | Return the length of each list in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.__getitem__`](api/pandas.Series.list.__getitem__.html#pandas.Series.list.__getitem__
    "pandas.Series.list.__getitem__")(key) | Index or slice lists in the Series. |  ###
    Struct accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow struct-dtype specific methods and attributes are provided under the `Series.struct`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.struct.dtypes`](api/pandas.Series.struct.dtypes.html#pandas.Series.struct.dtypes
    "pandas.Series.struct.dtypes") | Return the dtype object of each child field of
    the struct. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.field`](api/pandas.Series.struct.field.html#pandas.Series.struct.field
    "pandas.Series.struct.field")(name_or_index) | Extract a child field of a struct
    as a Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.explode`](api/pandas.Series.struct.explode.html#pandas.Series.struct.explode
    "pandas.Series.struct.explode")() | Extract all child fields of a struct as a
    DataFrame. |  ### Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |  ### Metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    is a dictionary for storing global metadata for this Series.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.attrs` is considered experimental and may change without warning.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    | Dictionary of global attributes of this dataset. |  ### Datetimelike properties'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.dt` can be used to access the values of the series as datetimelike
    and return several properties. These can be accessed like `Series.dt.<property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Datetime properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.date`](api/pandas.Series.dt.date.html#pandas.Series.dt.date "pandas.Series.dt.date")
    | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.time`](api/pandas.Series.dt.time.html#pandas.Series.dt.time "pandas.Series.dt.time")
    | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.timetz`](api/pandas.Series.dt.timetz.html#pandas.Series.dt.timetz
    "pandas.Series.dt.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.year`](api/pandas.Series.dt.year.html#pandas.Series.dt.year "pandas.Series.dt.year")
    | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month`](api/pandas.Series.dt.month.html#pandas.Series.dt.month
    "pandas.Series.dt.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day`](api/pandas.Series.dt.day.html#pandas.Series.dt.day "pandas.Series.dt.day")
    | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.hour`](api/pandas.Series.dt.hour.html#pandas.Series.dt.hour "pandas.Series.dt.hour")
    | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.minute`](api/pandas.Series.dt.minute.html#pandas.Series.dt.minute
    "pandas.Series.dt.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.second`](api/pandas.Series.dt.second.html#pandas.Series.dt.second
    "pandas.Series.dt.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microsecond`](api/pandas.Series.dt.microsecond.html#pandas.Series.dt.microsecond
    "pandas.Series.dt.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanosecond`](api/pandas.Series.dt.nanosecond.html#pandas.Series.dt.nanosecond
    "pandas.Series.dt.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofweek`](api/pandas.Series.dt.dayofweek.html#pandas.Series.dt.dayofweek
    "pandas.Series.dt.dayofweek") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_week`](api/pandas.Series.dt.day_of_week.html#pandas.Series.dt.day_of_week
    "pandas.Series.dt.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.weekday`](api/pandas.Series.dt.weekday.html#pandas.Series.dt.weekday
    "pandas.Series.dt.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofyear`](api/pandas.Series.dt.dayofyear.html#pandas.Series.dt.dayofyear
    "pandas.Series.dt.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_year`](api/pandas.Series.dt.day_of_year.html#pandas.Series.dt.day_of_year
    "pandas.Series.dt.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.quarter`](api/pandas.Series.dt.quarter.html#pandas.Series.dt.quarter
    "pandas.Series.dt.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_start`](api/pandas.Series.dt.is_month_start.html#pandas.Series.dt.is_month_start
    "pandas.Series.dt.is_month_start") | Indicates whether the date is the first day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_end`](api/pandas.Series.dt.is_month_end.html#pandas.Series.dt.is_month_end
    "pandas.Series.dt.is_month_end") | Indicates whether the date is the last day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_start`](api/pandas.Series.dt.is_quarter_start.html#pandas.Series.dt.is_quarter_start
    "pandas.Series.dt.is_quarter_start") | Indicator for whether the date is the first
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_end`](api/pandas.Series.dt.is_quarter_end.html#pandas.Series.dt.is_quarter_end
    "pandas.Series.dt.is_quarter_end") | Indicator for whether the date is the last
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_start`](api/pandas.Series.dt.is_year_start.html#pandas.Series.dt.is_year_start
    "pandas.Series.dt.is_year_start") | Indicate whether the date is the first day
    of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_end`](api/pandas.Series.dt.is_year_end.html#pandas.Series.dt.is_year_end
    "pandas.Series.dt.is_year_end") | Indicate whether the date is the last day of
    the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_leap_year`](api/pandas.Series.dt.is_leap_year.html#pandas.Series.dt.is_leap_year
    "pandas.Series.dt.is_leap_year") | Boolean indicator if the date belongs to a
    leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.daysinmonth`](api/pandas.Series.dt.daysinmonth.html#pandas.Series.dt.daysinmonth
    "pandas.Series.dt.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz`](api/pandas.Series.dt.tz.html#pandas.Series.dt.tz "pandas.Series.dt.tz")
    | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.freq`](api/pandas.Series.dt.freq.html#pandas.Series.dt.freq "pandas.Series.dt.freq")
    | Return the frequency object for this PeriodArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Datetime methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.isocalendar`](api/pandas.Series.dt.isocalendar.html#pandas.Series.dt.isocalendar
    "pandas.Series.dt.isocalendar")() | Calculate year, week, and day according to
    the ISO 8601 standard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_period`](api/pandas.Series.dt.to_period.html#pandas.Series.dt.to_period
    "pandas.Series.dt.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_pydatetime`](api/pandas.Series.dt.to_pydatetime.html#pandas.Series.dt.to_pydatetime
    "pandas.Series.dt.to_pydatetime")() | (DEPRECATED) Return the data as an array
    of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_localize`](api/pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize
    "pandas.Series.dt.tz_localize")(*args, **kwargs) | Localize tz-naive Datetime
    Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_convert`](api/pandas.Series.dt.tz_convert.html#pandas.Series.dt.tz_convert
    "pandas.Series.dt.tz_convert")(*args, **kwargs) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.normalize`](api/pandas.Series.dt.normalize.html#pandas.Series.dt.normalize
    "pandas.Series.dt.normalize")(*args, **kwargs) | Convert times to midnight. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.strftime`](api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.round`](api/pandas.Series.dt.round.html#pandas.Series.dt.round
    "pandas.Series.dt.round")(*args, **kwargs) | Perform round operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.floor`](api/pandas.Series.dt.floor.html#pandas.Series.dt.floor
    "pandas.Series.dt.floor")(*args, **kwargs) | Perform floor operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.ceil`](api/pandas.Series.dt.ceil.html#pandas.Series.dt.ceil "pandas.Series.dt.ceil")(*args, **kwargs)
    | Perform ceil operation on the data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month_name`](api/pandas.Series.dt.month_name.html#pandas.Series.dt.month_name
    "pandas.Series.dt.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_name`](api/pandas.Series.dt.day_name.html#pandas.Series.dt.day_name
    "pandas.Series.dt.day_name")(*args, **kwargs) | Return the day names with specified
    locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: Period properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.qyear`](api/pandas.Series.dt.qyear.html#pandas.Series.dt.qyear
    "pandas.Series.dt.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.start_time`](api/pandas.Series.dt.start_time.html#pandas.Series.dt.start_time
    "pandas.Series.dt.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.end_time`](api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: Timedelta properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.days`](api/pandas.Series.dt.days.html#pandas.Series.dt.days "pandas.Series.dt.days")
    | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.seconds`](api/pandas.Series.dt.seconds.html#pandas.Series.dt.seconds
    "pandas.Series.dt.seconds") | Number of seconds (>= 0 and less than 1 day) for
    each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microseconds`](api/pandas.Series.dt.microseconds.html#pandas.Series.dt.microseconds
    "pandas.Series.dt.microseconds") | Number of microseconds (>= 0 and less than
    1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanoseconds`](api/pandas.Series.dt.nanoseconds.html#pandas.Series.dt.nanoseconds
    "pandas.Series.dt.nanoseconds") | Number of nanoseconds (>= 0 and less than 1
    microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.components`](api/pandas.Series.dt.components.html#pandas.Series.dt.components
    "pandas.Series.dt.components") | Return a Dataframe of the components of the Timedeltas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Timedelta methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.to_pytimedelta`](api/pandas.Series.dt.to_pytimedelta.html#pandas.Series.dt.to_pytimedelta
    "pandas.Series.dt.to_pytimedelta")() | Return an array of native [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.total_seconds`](api/pandas.Series.dt.total_seconds.html#pandas.Series.dt.total_seconds
    "pandas.Series.dt.total_seconds")(*args, **kwargs) | Return total duration of
    each element expressed in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: Datetime properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.date`](api/pandas.Series.dt.date.html#pandas.Series.dt.date "pandas.Series.dt.date")
    | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.time`](api/pandas.Series.dt.time.html#pandas.Series.dt.time "pandas.Series.dt.time")
    | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.timetz`](api/pandas.Series.dt.timetz.html#pandas.Series.dt.timetz
    "pandas.Series.dt.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.year`](api/pandas.Series.dt.year.html#pandas.Series.dt.year "pandas.Series.dt.year")
    | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month`](api/pandas.Series.dt.month.html#pandas.Series.dt.month
    "pandas.Series.dt.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day`](api/pandas.Series.dt.day.html#pandas.Series.dt.day "pandas.Series.dt.day")
    | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.hour`](api/pandas.Series.dt.hour.html#pandas.Series.dt.hour "pandas.Series.dt.hour")
    | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.minute`](api/pandas.Series.dt.minute.html#pandas.Series.dt.minute
    "pandas.Series.dt.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.second`](api/pandas.Series.dt.second.html#pandas.Series.dt.second
    "pandas.Series.dt.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microsecond`](api/pandas.Series.dt.microsecond.html#pandas.Series.dt.microsecond
    "pandas.Series.dt.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanosecond`](api/pandas.Series.dt.nanosecond.html#pandas.Series.dt.nanosecond
    "pandas.Series.dt.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofweek`](api/pandas.Series.dt.dayofweek.html#pandas.Series.dt.dayofweek
    "pandas.Series.dt.dayofweek") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_week`](api/pandas.Series.dt.day_of_week.html#pandas.Series.dt.day_of_week
    "pandas.Series.dt.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.weekday`](api/pandas.Series.dt.weekday.html#pandas.Series.dt.weekday
    "pandas.Series.dt.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.dayofyear`](api/pandas.Series.dt.dayofyear.html#pandas.Series.dt.dayofyear
    "pandas.Series.dt.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_of_year`](api/pandas.Series.dt.day_of_year.html#pandas.Series.dt.day_of_year
    "pandas.Series.dt.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.quarter`](api/pandas.Series.dt.quarter.html#pandas.Series.dt.quarter
    "pandas.Series.dt.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_start`](api/pandas.Series.dt.is_month_start.html#pandas.Series.dt.is_month_start
    "pandas.Series.dt.is_month_start") | Indicates whether the date is the first day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_month_end`](api/pandas.Series.dt.is_month_end.html#pandas.Series.dt.is_month_end
    "pandas.Series.dt.is_month_end") | Indicates whether the date is the last day
    of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_start`](api/pandas.Series.dt.is_quarter_start.html#pandas.Series.dt.is_quarter_start
    "pandas.Series.dt.is_quarter_start") | Indicator for whether the date is the first
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_quarter_end`](api/pandas.Series.dt.is_quarter_end.html#pandas.Series.dt.is_quarter_end
    "pandas.Series.dt.is_quarter_end") | Indicator for whether the date is the last
    day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_start`](api/pandas.Series.dt.is_year_start.html#pandas.Series.dt.is_year_start
    "pandas.Series.dt.is_year_start") | Indicate whether the date is the first day
    of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_year_end`](api/pandas.Series.dt.is_year_end.html#pandas.Series.dt.is_year_end
    "pandas.Series.dt.is_year_end") | Indicate whether the date is the last day of
    the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.is_leap_year`](api/pandas.Series.dt.is_leap_year.html#pandas.Series.dt.is_leap_year
    "pandas.Series.dt.is_leap_year") | Boolean indicator if the date belongs to a
    leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.daysinmonth`](api/pandas.Series.dt.daysinmonth.html#pandas.Series.dt.daysinmonth
    "pandas.Series.dt.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.days_in_month`](api/pandas.Series.dt.days_in_month.html#pandas.Series.dt.days_in_month
    "pandas.Series.dt.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz`](api/pandas.Series.dt.tz.html#pandas.Series.dt.tz "pandas.Series.dt.tz")
    | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.freq`](api/pandas.Series.dt.freq.html#pandas.Series.dt.freq "pandas.Series.dt.freq")
    | Return the frequency object for this PeriodArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Datetime methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.isocalendar`](api/pandas.Series.dt.isocalendar.html#pandas.Series.dt.isocalendar
    "pandas.Series.dt.isocalendar")() | Calculate year, week, and day according to
    the ISO 8601 standard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_period`](api/pandas.Series.dt.to_period.html#pandas.Series.dt.to_period
    "pandas.Series.dt.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.to_pydatetime`](api/pandas.Series.dt.to_pydatetime.html#pandas.Series.dt.to_pydatetime
    "pandas.Series.dt.to_pydatetime")() | (DEPRECATED) Return the data as an array
    of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_localize`](api/pandas.Series.dt.tz_localize.html#pandas.Series.dt.tz_localize
    "pandas.Series.dt.tz_localize")(*args, **kwargs) | Localize tz-naive Datetime
    Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.tz_convert`](api/pandas.Series.dt.tz_convert.html#pandas.Series.dt.tz_convert
    "pandas.Series.dt.tz_convert")(*args, **kwargs) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.normalize`](api/pandas.Series.dt.normalize.html#pandas.Series.dt.normalize
    "pandas.Series.dt.normalize")(*args, **kwargs) | Convert times to midnight. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.strftime`](api/pandas.Series.dt.strftime.html#pandas.Series.dt.strftime
    "pandas.Series.dt.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.round`](api/pandas.Series.dt.round.html#pandas.Series.dt.round
    "pandas.Series.dt.round")(*args, **kwargs) | Perform round operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.floor`](api/pandas.Series.dt.floor.html#pandas.Series.dt.floor
    "pandas.Series.dt.floor")(*args, **kwargs) | Perform floor operation on the data
    to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.ceil`](api/pandas.Series.dt.ceil.html#pandas.Series.dt.ceil "pandas.Series.dt.ceil")(*args, **kwargs)
    | Perform ceil operation on the data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.month_name`](api/pandas.Series.dt.month_name.html#pandas.Series.dt.month_name
    "pandas.Series.dt.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.day_name`](api/pandas.Series.dt.day_name.html#pandas.Series.dt.day_name
    "pandas.Series.dt.day_name")(*args, **kwargs) | Return the day names with specified
    locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: Period properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.qyear`](api/pandas.Series.dt.qyear.html#pandas.Series.dt.qyear
    "pandas.Series.dt.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.start_time`](api/pandas.Series.dt.start_time.html#pandas.Series.dt.start_time
    "pandas.Series.dt.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.end_time`](api/pandas.Series.dt.end_time.html#pandas.Series.dt.end_time
    "pandas.Series.dt.end_time") | Get the Timestamp for the end of the period. |'
  prefs: []
  type: TYPE_TB
- en: Timedelta properties
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.days`](api/pandas.Series.dt.days.html#pandas.Series.dt.days "pandas.Series.dt.days")
    | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.seconds`](api/pandas.Series.dt.seconds.html#pandas.Series.dt.seconds
    "pandas.Series.dt.seconds") | Number of seconds (>= 0 and less than 1 day) for
    each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.microseconds`](api/pandas.Series.dt.microseconds.html#pandas.Series.dt.microseconds
    "pandas.Series.dt.microseconds") | Number of microseconds (>= 0 and less than
    1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.nanoseconds`](api/pandas.Series.dt.nanoseconds.html#pandas.Series.dt.nanoseconds
    "pandas.Series.dt.nanoseconds") | Number of nanoseconds (>= 0 and less than 1
    microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.components`](api/pandas.Series.dt.components.html#pandas.Series.dt.components
    "pandas.Series.dt.components") | Return a Dataframe of the components of the Timedeltas.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.unit`](api/pandas.Series.dt.unit.html#pandas.Series.dt.unit "pandas.Series.dt.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Timedelta methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`Series.dt.to_pytimedelta`](api/pandas.Series.dt.to_pytimedelta.html#pandas.Series.dt.to_pytimedelta
    "pandas.Series.dt.to_pytimedelta")() | Return an array of native [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.total_seconds`](api/pandas.Series.dt.total_seconds.html#pandas.Series.dt.total_seconds
    "pandas.Series.dt.total_seconds")(*args, **kwargs) | Return total duration of
    each element expressed in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.dt.as_unit`](api/pandas.Series.dt.as_unit.html#pandas.Series.dt.as_unit
    "pandas.Series.dt.as_unit")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: '### String handling'
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.str` can be used to access the values of the series as strings and
    apply several methods to it. These can be accessed like `Series.str.<function/property>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.str.capitalize`](api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize")() | Convert strings in the Series/Index to be
    capitalized. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.casefold`](api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold")() | Convert strings in the Series/Index to be casefolded.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.cat`](api/pandas.Series.str.cat.html#pandas.Series.str.cat "pandas.Series.str.cat")([others, sep, na_rep, join])
    | Concatenate strings in the Series/Index with given separator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.center`](api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center")(width[, fillchar]) | Pad left and right side of strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.contains`](api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains")(pat[, case, flags, na, ...]) | Test if pattern or
    regex is contained within a string of a Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.count`](api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count")(pat[, flags]) | Count occurrences of pattern in each
    string of the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.decode`](api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")(encoding[, errors]) | Decode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.encode`](api/pandas.Series.str.encode.html#pandas.Series.str.encode
    "pandas.Series.str.encode")(encoding[, errors]) | Encode character string in the
    Series/Index using indicated encoding. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.endswith`](api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith")(pat[, na]) | Test if the end of each string element
    matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extract`](api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract")(pat[, flags, expand]) | Extract capture groups in
    the regex pat as columns in a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.extractall`](api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall")(pat[, flags]) | Extract capture groups in the
    regex pat as columns in DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.find`](api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find")(sub[, start, end]) | Return lowest indexes in each strings
    in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.findall`](api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall")(pat[, flags]) | Find all occurrences of pattern or
    regular expression in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.fullmatch`](api/pandas.Series.str.fullmatch.html#pandas.Series.str.fullmatch
    "pandas.Series.str.fullmatch")(pat[, case, flags, na]) | Determine if each string
    entirely matches a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get`](api/pandas.Series.str.get.html#pandas.Series.str.get "pandas.Series.str.get")(i)
    | Extract element from each component at specified position or with specified
    key. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.index`](api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index")(sub[, start, end]) | Return lowest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.join`](api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join")(sep) | Join lists contained as elements in the Series/Index
    with passed delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.len`](api/pandas.Series.str.len.html#pandas.Series.str.len "pandas.Series.str.len")()
    | Compute the length of each element in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.ljust`](api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust")(width[, fillchar]) | Pad right side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lower`](api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower")() | Convert strings in the Series/Index to lowercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.lstrip`](api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip")([to_strip]) | Remove leading characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.match`](api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match")(pat[, case, flags, na]) | Determine if each string
    starts with a match of a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.normalize`](api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize")(form) | Return the Unicode normal form for the
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.pad`](api/pandas.Series.str.pad.html#pandas.Series.str.pad "pandas.Series.str.pad")(width[, side, fillchar])
    | Pad strings in the Series/Index up to width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.partition`](api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition")([sep, expand]) | Split the string at the first
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removeprefix`](api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix")(prefix) | Remove a prefix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.removesuffix`](api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix")(suffix) | Remove a suffix from an object series.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.repeat`](api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat")(repeats) | Duplicate each string in the Series or
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.replace`](api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")(pat, repl[, n, case, ...]) | Replace each occurrence
    of pattern/regex in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rfind`](api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind")(sub[, start, end]) | Return highest indexes in each
    strings in the Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rindex`](api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex")(sub[, start, end]) | Return highest indexes in each
    string in Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rjust`](api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust")(width[, fillchar]) | Pad left side of strings in the
    Series/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rpartition`](api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition")([sep, expand]) | Split the string at the last
    occurrence of sep. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rstrip`](api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip")([to_strip]) | Remove trailing characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice`](api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice")([start, stop, step]) | Slice substrings from each element
    in the Series or Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.slice_replace`](api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace")([start, stop, repl]) | Replace a positional
    slice of a string with another value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.split`](api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split")([pat, n, expand, regex]) | Split strings around given
    separator/delimiter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.rsplit`](api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit")([pat, n, expand]) | Split strings around given separator/delimiter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.startswith`](api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith")(pat[, na]) | Test if the start of each string
    element matches a pattern. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.strip`](api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip")([to_strip]) | Remove leading and trailing characters.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.swapcase`](api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase")() | Convert strings in the Series/Index to be swapcased.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.title`](api/pandas.Series.str.title.html#pandas.Series.str.title
    "pandas.Series.str.title")() | Convert strings in the Series/Index to titlecase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.translate`](api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate")(table) | Map all characters in the string through
    the given mapping table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.upper`](api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper")() | Convert strings in the Series/Index to uppercase.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.wrap`](api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap")(width, **kwargs) | Wrap strings in Series/Index at specified
    line width. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.zfill`](api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill")(width) | Pad strings in the Series/Index by prepending
    ''0'' characters. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalnum`](api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum")() | Check whether all characters in each string are
    alphanumeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isalpha`](api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha")() | Check whether all characters in each string are
    alphabetic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdigit`](api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit")() | Check whether all characters in each string are
    digits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isspace`](api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace")() | Check whether all characters in each string are
    whitespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.islower`](api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower")() | Check whether all characters in each string are
    lowercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isupper`](api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper")() | Check whether all characters in each string are
    uppercase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.istitle`](api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle")() | Check whether all characters in each string are
    titlecase. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isnumeric`](api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric")() | Check whether all characters in each string
    are numeric. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.isdecimal`](api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal")() | Check whether all characters in each string
    are decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.str.get_dummies`](api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies")([sep]) | Return DataFrame of dummy/indicator
    variables for Series. |'
  prefs: []
  type: TYPE_TB
- en: '### Categorical accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Categorical-dtype specific methods and attributes are available under the `Series.cat`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.cat.categories`](api/pandas.Series.cat.categories.html#pandas.Series.cat.categories
    "pandas.Series.cat.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.ordered`](api/pandas.Series.cat.ordered.html#pandas.Series.cat.ordered
    "pandas.Series.cat.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.codes`](api/pandas.Series.cat.codes.html#pandas.Series.cat.codes
    "pandas.Series.cat.codes") | Return Series of codes as well as the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.rename_categories`](api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories")(*args, **kwargs) | Rename categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.reorder_categories`](api/pandas.Series.cat.reorder_categories.html#pandas.Series.cat.reorder_categories
    "pandas.Series.cat.reorder_categories")(*args, **kwargs) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.add_categories`](api/pandas.Series.cat.add_categories.html#pandas.Series.cat.add_categories
    "pandas.Series.cat.add_categories")(*args, **kwargs) | Add new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_categories`](api/pandas.Series.cat.remove_categories.html#pandas.Series.cat.remove_categories
    "pandas.Series.cat.remove_categories")(*args, **kwargs) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.remove_unused_categories`](api/pandas.Series.cat.remove_unused_categories.html#pandas.Series.cat.remove_unused_categories
    "pandas.Series.cat.remove_unused_categories")(*args, ...) | Remove categories
    which are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.set_categories`](api/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories
    "pandas.Series.cat.set_categories")(*args, **kwargs) | Set the categories to the
    specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_ordered`](api/pandas.Series.cat.as_ordered.html#pandas.Series.cat.as_ordered
    "pandas.Series.cat.as_ordered")(*args, **kwargs) | Set the Categorical to be ordered.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.cat.as_unordered`](api/pandas.Series.cat.as_unordered.html#pandas.Series.cat.as_unordered
    "pandas.Series.cat.as_unordered")(*args, **kwargs) | Set the Categorical to be
    unordered. |'
  prefs: []
  type: TYPE_TB
- en: '### Sparse accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse-dtype specific methods and attributes are provided under the `Series.sparse`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.sparse.npoints`](api/pandas.Series.sparse.npoints.html#pandas.Series.sparse.npoints
    "pandas.Series.sparse.npoints") | The number of non- `fill_value` points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.density`](api/pandas.Series.sparse.density.html#pandas.Series.sparse.density
    "pandas.Series.sparse.density") | The percent of non- `fill_value` points, as
    decimal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.fill_value`](api/pandas.Series.sparse.fill_value.html#pandas.Series.sparse.fill_value
    "pandas.Series.sparse.fill_value") | Elements in data that are fill_value are
    not stored. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.sp_values`](api/pandas.Series.sparse.sp_values.html#pandas.Series.sparse.sp_values
    "pandas.Series.sparse.sp_values") | An ndarray containing the non- `fill_value`
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.from_coo`](api/pandas.Series.sparse.from_coo.html#pandas.Series.sparse.from_coo
    "pandas.Series.sparse.from_coo")(A[, dense_index]) | Create a Series with sparse
    values from a scipy.sparse.coo_matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.sparse.to_coo`](api/pandas.Series.sparse.to_coo.html#pandas.Series.sparse.to_coo
    "pandas.Series.sparse.to_coo")([row_levels, ...]) | Create a scipy.sparse.coo_matrix
    from a Series with MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '### List accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow list-dtype specific methods and attributes are provided under the `Series.list`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.list.flatten`](api/pandas.Series.list.flatten.html#pandas.Series.list.flatten
    "pandas.Series.list.flatten")() | Flatten list values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.len`](api/pandas.Series.list.len.html#pandas.Series.list.len
    "pandas.Series.list.len")() | Return the length of each list in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.list.__getitem__`](api/pandas.Series.list.__getitem__.html#pandas.Series.list.__getitem__
    "pandas.Series.list.__getitem__")(key) | Index or slice lists in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '### Struct accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Arrow struct-dtype specific methods and attributes are provided under the `Series.struct`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.struct.dtypes`](api/pandas.Series.struct.dtypes.html#pandas.Series.struct.dtypes
    "pandas.Series.struct.dtypes") | Return the dtype object of each child field of
    the struct. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.field`](api/pandas.Series.struct.field.html#pandas.Series.struct.field
    "pandas.Series.struct.field")(name_or_index) | Extract a child field of a struct
    as a Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.struct.explode`](api/pandas.Series.struct.explode.html#pandas.Series.struct.explode
    "pandas.Series.struct.explode")() | Extract all child fields of a struct as a
    DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '### Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: '### Metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    is a dictionary for storing global metadata for this Series.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.attrs` is considered experimental and may change without warning.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.attrs`](api/pandas.Series.attrs.html#pandas.Series.attrs "pandas.Series.attrs")
    | Dictionary of global attributes of this dataset. |'
  prefs: []
  type: TYPE_TB
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Series.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `Series.plot.<kind>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Series.plot`](api/pandas.Series.plot.html#pandas.Series.plot "pandas.Series.plot")([kind, ax, figsize, ....])
    | Series plotting accessor and method |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.area`](api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.bar`](api/pandas.Series.plot.bar.html#pandas.Series.plot.bar
    "pandas.Series.plot.bar")([x, y]) | Vertical bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.barh`](api/pandas.Series.plot.barh.html#pandas.Series.plot.barh
    "pandas.Series.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.box`](api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box")([by]) | Make a box plot of the DataFrame columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.density`](api/pandas.Series.plot.density.html#pandas.Series.plot.density
    "pandas.Series.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.hist`](api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.kde`](api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.line`](api/pandas.Series.plot.line.html#pandas.Series.plot.line
    "pandas.Series.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.plot.pie`](api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie")(**kwargs) | Generate a pie plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.hist`](api/pandas.Series.hist.html#pandas.Series.hist "pandas.Series.hist")([by, ax, grid, xlabelsize, ...])
    | Draw histogram of the input series using matplotlib. |'
  prefs: []
  type: TYPE_TB
- en: Serialization / IO / conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Series.to_pickle`](api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle")(path, *[, compression, ...]) | Pickle (serialize) object
    to file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_csv`](api/pandas.Series.to_csv.html#pandas.Series.to_csv "pandas.Series.to_csv")([path_or_buf, sep, na_rep, ...])
    | Write object to a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_dict`](api/pandas.Series.to_dict.html#pandas.Series.to_dict "pandas.Series.to_dict")(*[, into])
    | Convert Series to {label -> value} dict or dict-like object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_excel`](api/pandas.Series.to_excel.html#pandas.Series.to_excel
    "pandas.Series.to_excel")(excel_writer, *[, ...]) | Write object to an Excel sheet.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_frame`](api/pandas.Series.to_frame.html#pandas.Series.to_frame
    "pandas.Series.to_frame")([name]) | Convert Series to DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_xarray`](api/pandas.Series.to_xarray.html#pandas.Series.to_xarray
    "pandas.Series.to_xarray")() | Return an xarray object from the pandas object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_hdf`](api/pandas.Series.to_hdf.html#pandas.Series.to_hdf "pandas.Series.to_hdf")(path_or_buf, *, key[, mode, ...])
    | Write the contained data to an HDF5 file using HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_sql`](api/pandas.Series.to_sql.html#pandas.Series.to_sql "pandas.Series.to_sql")(name, con, *[, schema, ...])
    | Write records stored in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_json`](api/pandas.Series.to_json.html#pandas.Series.to_json "pandas.Series.to_json")([path_or_buf, orient, ...])
    | Convert the object to a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_string`](api/pandas.Series.to_string.html#pandas.Series.to_string
    "pandas.Series.to_string")([buf, na_rep, ...]) | Render a string representation
    of the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_clipboard`](api/pandas.Series.to_clipboard.html#pandas.Series.to_clipboard
    "pandas.Series.to_clipboard")(*[, excel, sep]) | Copy object to the system clipboard.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_latex`](api/pandas.Series.to_latex.html#pandas.Series.to_latex
    "pandas.Series.to_latex")([buf, columns, header, ...]) | Render object to a LaTeX
    tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Series.to_markdown`](api/pandas.Series.to_markdown.html#pandas.Series.to_markdown
    "pandas.Series.to_markdown")([buf, mode, index, ...]) | Print Series in Markdown-friendly
    format. |'
  prefs: []
  type: TYPE_TB
