- en: Joints Framework in Physics/Mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/joints.html](https://docs.sympy.org/latest/modules/physics/mechanics/joints.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")
    provides a joints framework. This system consists of two parts. The first are
    the [`joints`](api/joint.html#module-sympy.physics.mechanics.joint "sympy.physics.mechanics.joint")
    themselves, which are used to create connections between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody"). The second part is the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System"), which is used to form the equations
    of motion. Both of these parts are doing what we can call “book-keeping”: keeping
    track of the relationships between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody").'
  prefs: []
  type: TYPE_NORMAL
- en: Joints in Physics/Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The general task of the [`joints`](api/joint.html#module-sympy.physics.mechanics.joint
    "sympy.physics.mechanics.joint") is creating kinematic relationships between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody"). A joint is generally described
    as shown in the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '[![../../../_images/joint_explanation.svg](../Images/87632518439056224e13d474ebbe991d.png)](../../../_images/joint_explanation.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As can be seen in this image, each joint needs several objects in order to
    define the relationships. First off it needs two bodies: the parent body (shown
    in green) and the child body (shown in blue). The transformation made by the joint
    is defined between the joint attachments of both bodies. A joint attachment of
    a body consists of a point and a body-fixed frame. In the parent body the point
    is called `parent_point` and the frame `parent_interframe`. For the child body
    these are called `child_point` and `child_interframe`. For most joints it is the
    case that when the generalized coordinates are zero, that there is no rotation
    or translation between the parent and child joint attachments. So the `child_point`
    is at the same location as the `parent_point` and the `child_interframe` is in
    the same orientation as the `parent_interframe`.'
  prefs: []
  type: TYPE_NORMAL
- en: For describing the joint transformation the joint generally needs [`dynamicsymbols()`](../vector/api/functions.html#sympy.physics.vector.dynamicsymbols
    "sympy.physics.vector.dynamicsymbols") for the generalized coordinates and speeds.
    Some joints like the [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint"), [`PrismaticJoint`](api/joint.html#sympy.physics.mechanics.joint.PrismaticJoint
    "sympy.physics.mechanics.joint.PrismaticJoint") also require a `joint_axis`, which
    consists of the same components in the `parent_interframe` and `child_interframe`.
    This means that if for example the joint axis is defined in the `parent_interframe`
    as \(2\hat{p}_x + 4\hat{p}_y + 3\hat{p}_z\), then this will also be \(2\hat{c}_x
    + 4\hat{c}_y + 3\hat{c}_z\) in the `child_interframe`. Practically this means
    that in the case of the [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint"), also shown below, the `joint_axis`
    is the axis of rotation, with the generalized coordinate \(q\) as the angle of
    rotation and the generalized speed \(u\) as the angular velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[![../../../_images/PinJoint.svg](../Images/0bd3c23b3b27b0d6b9db374e8f79bd9a.png)](../../../_images/PinJoint.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: With the information listed above, the joint defines the following relationships.
    It first defines the kinematic differential equations, which relate the generalized
    coordinates to the generalized speeds. Next, it orients the parent and child body
    with respect to each other. After which it also defines their velocity relationships.
  prefs: []
  type: TYPE_NORMAL
- en: The code below shows the creation of a [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint") as shown above with arbitrary linked
    position vectors. In this code the attachment points are set using vectors, which
    define the attachment point with respect to the body’s mass center. The intermediate
    frames are not set, so those are the same as the body’s frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: System in Physics/Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After defining the entire system you can use the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System") to parse the system and form the equations
    of motion. In this process the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System") only does the “book-keeping” of the joints.
    It uses another method, like the [`KanesMethod`](api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod"), as its backend for forming the equations
    of motion.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below we form the equations of motion of the single [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint") shown previously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
