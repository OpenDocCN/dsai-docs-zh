["```py\nscipy.integrate.solve_bvp(fun, bc, x, y, p=None, S=None, fun_jac=None, bc_jac=None, tol=0.001, max_nodes=1000, verbose=0, bc_tol=None)\n```", "```py\ndy / dx = f(x, y, p) + S * y / (x - a), a <= x <= b\nbc(y(a), y(b), p) = 0 \n```", "```py\ny'' + k * exp(y) = 0\ny(0) = y(1) = 0 \n```", "```py\ny1' = y2\ny2' = -exp(y1) \n```", "```py\n>>> import numpy as np\n>>> def fun(x, y):\n...     return np.vstack((y[1], -np.exp(y[0]))) \n```", "```py\n>>> def bc(ya, yb):\n...     return np.array([ya[0], yb[0]]) \n```", "```py\n>>> x = np.linspace(0, 1, 5) \n```", "```py\n>>> y_a = np.zeros((2, x.size))\n>>> y_b = np.zeros((2, x.size))\n>>> y_b[0] = 3 \n```", "```py\n>>> from scipy.integrate import solve_bvp\n>>> res_a = solve_bvp(fun, bc, x, y_a)\n>>> res_b = solve_bvp(fun, bc, x, y_b) \n```", "```py\n>>> x_plot = np.linspace(0, 1, 100)\n>>> y_plot_a = res_a.sol(x_plot)[0]\n>>> y_plot_b = res_b.sol(x_plot)[0]\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(x_plot, y_plot_a, label='y_a')\n>>> plt.plot(x_plot, y_plot_b, label='y_b')\n>>> plt.legend()\n>>> plt.xlabel(\"x\")\n>>> plt.ylabel(\"y\")\n>>> plt.show() \n```", "```py\ny'' + k**2 * y = 0\ny(0) = y(1) = 0 \n```", "```py\ny'(0) = k \n```", "```py\ny1' = y2\ny2' = -k**2 * y1 \n```", "```py\n>>> def fun(x, y, p):\n...     k = p[0]\n...     return np.vstack((y[1], -k**2 * y[0])) \n```", "```py\n>>> def bc(ya, yb, p):\n...     k = p[0]\n...     return np.array([ya[0], yb[0], ya[1] - k]) \n```", "```py\n>>> x = np.linspace(0, 1, 5)\n>>> y = np.zeros((2, x.size))\n>>> y[0, 1] = 1\n>>> y[0, 3] = -1 \n```", "```py\n>>> sol = solve_bvp(fun, bc, x, y, p=[6]) \n```", "```py\n>>> sol.p[0]\n6.28329460046 \n```", "```py\n>>> x_plot = np.linspace(0, 1, 100)\n>>> y_plot = sol.sol(x_plot)[0]\n>>> plt.plot(x_plot, y_plot)\n>>> plt.xlabel(\"x\")\n>>> plt.ylabel(\"y\")\n>>> plt.show() \n```"]