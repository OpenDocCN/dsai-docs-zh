- en: scipy.signal.ZerosPolesGain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ZerosPolesGain.html#scipy.signal.ZerosPolesGain)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Linear Time Invariant system class in zeros, poles, gain form.
  prefs: []
  type: TYPE_NORMAL
- en: Represents the system as the continuous- or discrete-time transfer function
    \(H(s)=k \prod_i (s - z[i]) / \prod_j (s - p[j])\), where \(k\) is the [`gain`](scipy.signal.ZerosPolesGain.gain.html#scipy.signal.ZerosPolesGain.gain
    "scipy.signal.ZerosPolesGain.gain"), \(z\) are the [`zeros`](scipy.signal.ZerosPolesGain.zeros.html#scipy.signal.ZerosPolesGain.zeros
    "scipy.signal.ZerosPolesGain.zeros") and \(p\) are the [`poles`](scipy.signal.ZerosPolesGain.poles.html#scipy.signal.ZerosPolesGain.poles
    "scipy.signal.ZerosPolesGain.poles"). [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain") systems inherit additional functionality from the
    [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"), respectively
    the [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti") classes,
    depending on which system representation is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***system**arguments'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain "scipy.signal.ZerosPolesGain")
    class can be instantiated with 1 or 3 arguments. The following gives the number
    of input arguments and their interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti") or [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti
    "scipy.signal.dlti") system: ([`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction") or [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain"))'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '3: array_like: (zeros, poles, gain)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dt: float, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling time [s] of the discrete-time systems. Defaults to *None* (continuous-time).
    Must be specified as a keyword argument, for example, `dt=0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"), [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"), [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"),
    [`dlti`](scipy.signal.dlti.html#scipy.signal.dlti "scipy.signal.dlti")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`zpk2ss`](scipy.signal.zpk2ss.html#scipy.signal.zpk2ss "scipy.signal.zpk2ss"),
    [`zpk2tf`](scipy.signal.zpk2tf.html#scipy.signal.zpk2tf "scipy.signal.zpk2tf"),
    [`zpk2sos`](scipy.signal.zpk2sos.html#scipy.signal.zpk2sos "scipy.signal.zpk2sos")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of properties that are not part of the [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain
    "scipy.signal.ZerosPolesGain") system representation (such as the *A*, *B*, *C*,
    *D* state-space matrices) is very inefficient and may lead to numerical inaccuracies.
    It is better to convert to the specific system representation first. For example,
    call `sys = sys.to_ss()` before accessing/changing the A, B, C, D system matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Construct the transfer function \(H(s) = \frac{5(s - 1)(s - 2)}{(s - 3)(s -
    4)}\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Construct the transfer function \(H(z) = \frac{5(z - 1)(z - 2)}{(z - 3)(z -
    4)}\) with a sampling time of 0.1 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`dt`](scipy.signal.ZerosPolesGain.dt.html#scipy.signal.ZerosPolesGain.dt "scipy.signal.ZerosPolesGain.dt")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the sampling time of the system, *None* for [`lti`](scipy.signal.lti.html#scipy.signal.lti
    "scipy.signal.lti") systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[`gain`](scipy.signal.ZerosPolesGain.gain.html#scipy.signal.ZerosPolesGain.gain
    "scipy.signal.ZerosPolesGain.gain")'
  prefs: []
  type: TYPE_NORMAL
- en: Gain of the [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain "scipy.signal.ZerosPolesGain")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`poles`](scipy.signal.ZerosPolesGain.poles.html#scipy.signal.ZerosPolesGain.poles
    "scipy.signal.ZerosPolesGain.poles")'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of the [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain "scipy.signal.ZerosPolesGain")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](scipy.signal.ZerosPolesGain.zeros.html#scipy.signal.ZerosPolesGain.zeros
    "scipy.signal.ZerosPolesGain.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros of the [`ZerosPolesGain`](#scipy.signal.ZerosPolesGain "scipy.signal.ZerosPolesGain")
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`to_ss`](scipy.signal.ZerosPolesGain.to_ss.html#scipy.signal.ZerosPolesGain.to_ss
    "scipy.signal.ZerosPolesGain.to_ss")() | Convert system representation to [`StateSpace`](scipy.signal.StateSpace.html#scipy.signal.StateSpace
    "scipy.signal.StateSpace"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_tf`](scipy.signal.ZerosPolesGain.to_tf.html#scipy.signal.ZerosPolesGain.to_tf
    "scipy.signal.ZerosPolesGain.to_tf")() | Convert system representation to [`TransferFunction`](scipy.signal.TransferFunction.html#scipy.signal.TransferFunction
    "scipy.signal.TransferFunction"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_zpk`](scipy.signal.ZerosPolesGain.to_zpk.html#scipy.signal.ZerosPolesGain.to_zpk
    "scipy.signal.ZerosPolesGain.to_zpk")() | Return a copy of the current ''ZerosPolesGain''
    system. |'
  prefs: []
  type: TYPE_TB
