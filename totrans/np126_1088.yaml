- en: Setting up and using your development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/development_environment.html](https://numpy.org/doc/1.26/dev/development_environment.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Recommended development setup'
  prefs: []
  type: TYPE_NORMAL
- en: Since NumPy contains parts written in C and Cython that need to be compiled
    before use, make sure you have the necessary compilers and Python development
    headers installed - see [Building from source](../user/building.html#building-from-source).
    Building NumPy as of version `1.17` requires a C99 compliant compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Having compiled code also means that importing NumPy from the development sources
    needs some additional steps, which are explained below. For the rest of this chapter
    we assume that you have set up your git repo as described in [Git for development](gitwash/index.html#using-git).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are having trouble building NumPy from source or setting up your local
    development environment, you can try to build NumPy with GitHub Codespaces. It
    allows you to create the correct development environment right in your browser,
    reducing the need to install local development environments and deal with incompatible
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If you have good internet connectivity and want a temporary set-up, it is often
    faster to work on NumPy in a Codespaces environment. For documentation on how
    to get started with Codespaces, see [the Codespaces docs](https://docs.github.com/en/codespaces).
    When creating a codespace for the `numpy/numpy` repository, the default 2-core
    machine type works; 4-core will build and work a bit faster (but of course at
    a cost of halving your number of free usage hours). Once your codespace has started,
    you can run `conda activate numpy-dev` and your development environment is completely
    set up - you can then follow the relevant parts of the NumPy documentation to
    build, test, develop, write docs, and contribute to NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: Using virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A frequently asked question is “How do I set up a development version of NumPy
    in parallel to a released version that I use to do my job/research?”.
  prefs: []
  type: TYPE_NORMAL
- en: One simple way to achieve this is to install the released version in site-packages,
    by using pip or conda for example, and set up the development version in a virtual
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use conda, we recommend creating a separate virtual environment for
    numpy development using the `environment.yml` file in the root of the repo (this
    will create the environment and install all development dependencies at once):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you installed Python some other way than conda, first install [virtualenv](http://www.virtualenv.org/)
    (optionally use [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)),
    then create your virtualenv (named `numpy-dev` here) with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever you want to switch to the virtual environment, you can use the
    command `source numpy-dev/bin/activate`, and `deactivate` to exit from the virtual
    environment and back to your previous shell.
  prefs: []
  type: TYPE_NORMAL
- en: '## Testing builds'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the tests, first install the test dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the development version of NumPy and run tests, spawn interactive
    shells with the Python import paths properly set up etc., use the [spin](https://github.com/scientific-python/spin)
    utility. To run tests, do one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This builds NumPy first, so the first time it may take a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use `spin bench` for benchmarking. See `spin --help` for more command
    line options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If the above commands result in `RuntimeError: Cannot parse version 0+untagged.xxxxx`,
    run `git pull upstream main --tags`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional arguments may be forwarded to `pytest` by passing the extra arguments
    after a bare `--`. For example, to run a test method with the `--pdb` flag forwarded
    to the target, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also [match test names using python operators](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)
    by passing the `-k` argument to pytest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all tests of NumPy should pass before committing your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some of the tests in the test suite require a large amount of memory, and are
    skipped if your system does not have enough.
  prefs: []
  type: TYPE_NORMAL
- en: Other build options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation.)
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides using `spin`, there are various ways to run the tests. Inside the interpreter,
    tests can be run like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or a similar way from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tests can also be run with `pytest numpy`, however then the NumPy-specific plugin
    is not found which causes strange side effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running individual test files can be useful; it’s much faster than running
    the whole test suite or that of a whole module (example: `np.random.test()`).
    This can be done with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That also takes extra arguments, like `--pdb` which drops you into the Python
    debugger when a test fails or an exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running tests with [tox](https://tox.readthedocs.io/) is also supported. For
    example, to build NumPy and run the test suite with Python 3.9, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For more extensive information, see [Testing Guidelines](../reference/testing.html#testing-guidelines).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: do not run the tests from the root directory of your numpy git repo without
    `spin`, that will result in strange test errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Running Linting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lint checks can be performed on newly added lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install all dependent packages using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To run lint checks before committing new code, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To check all changes in newly added Python code of current branch with target
    branch, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no errors, the script exits with no message. In case of errors,
    check the error message for details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It is advisable to run lint checks before pushing commits to a remote branch
    since the linter runs as part of the CI pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on Style Guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Style Guide](https://www.python.org/dev/peps/pep-0008/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[C Style Guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding & cleaning the workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rebuilding NumPy after making changes to compiled code can be done with the
    same build command as you used previously - only the changed files will be re-built.
    Doing a full build, which sometimes is necessary, requires cleaning the workspace
    first. The standard way of doing this is (*note: deletes any uncommitted files!*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When you want to discard all changes and go back to the last commit in the
    repo, use one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '## Debugging'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another frequently asked question is “How do I debug C code inside NumPy?”.
    First, ensure that you have gdb installed on your system with the Python extensions
    (often the default on Linux). You can see which version of Python is running inside
    gdb to verify your setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Most python builds do not include debug symbols and are built with compiler
    optimizations enabled. To get the best debugging experience using a debug build
    of Python is encouraged, see [Advanced debugging tools](development_advanced_debugging.html#advanced-debugging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next you need to write a Python script that invokes the C code whose execution
    you want to debug. For instance `mytest.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And then in the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution will now stop at the corresponding C function and you can step
    through it as usual. A number of useful Python-specific commands are available.
    For example to see where in the Python code you are, use `py-list`, to see the
    python traceback, use `py-bt`. For more details, see [DebuggingWithGdb](https://wiki.python.org/moin/DebuggingWithGdb).
    Here are some commonly used commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list`: List specified function or line.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`next`: Step program, proceeding through subroutine calls.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`step`: Continue program being debugged, after signal or breakpoint.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`print`: Print value of expression EXP.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rich support for Python debugging requires that the `python-gdb.py` script
    distributed with Python is installed in a path where gdb can find it. If you installed
    your Python build from your system package manager, you likely do not need to
    manually do anything. However, if you built Python from source, you will likely
    need to create a `.gdbinit` file in your home directory pointing gdb at the location
    of your Python installation. For example, a version of python installed via [pyenv](https://github.com/pyenv/pyenv)
    needs a `.gdbinit` file with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Building NumPy with a Python built with debug support (on Linux distributions
    typically packaged as `python-dbg`) is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the code & getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best strategy to better understand the code base is to pick something you
    want to change and start reading the code to figure out how it works. When in
    doubt, you can ask questions on the mailing list. It is perfectly okay if your
    pull requests aren’t perfect, the community is always happy to help. As a volunteer
    project, things do sometimes get dropped and it’s totally fine to ping us if something
    has sat without a response for about two to four weeks.
  prefs: []
  type: TYPE_NORMAL
- en: So go ahead and pick something that annoys or confuses you about NumPy, experiment
    with the code, hang around for discussions or go through the reference documents
    to try to fix it. Things will fall in place and soon you’ll have a pretty good
    understanding of the project as a whole. Good Luck!
  prefs: []
  type: TYPE_NORMAL
- en: '## Recommended development setup'
  prefs: []
  type: TYPE_NORMAL
- en: Since NumPy contains parts written in C and Cython that need to be compiled
    before use, make sure you have the necessary compilers and Python development
    headers installed - see [Building from source](../user/building.html#building-from-source).
    Building NumPy as of version `1.17` requires a C99 compliant compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Having compiled code also means that importing NumPy from the development sources
    needs some additional steps, which are explained below. For the rest of this chapter
    we assume that you have set up your git repo as described in [Git for development](gitwash/index.html#using-git).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are having trouble building NumPy from source or setting up your local
    development environment, you can try to build NumPy with GitHub Codespaces. It
    allows you to create the correct development environment right in your browser,
    reducing the need to install local development environments and deal with incompatible
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If you have good internet connectivity and want a temporary set-up, it is often
    faster to work on NumPy in a Codespaces environment. For documentation on how
    to get started with Codespaces, see [the Codespaces docs](https://docs.github.com/en/codespaces).
    When creating a codespace for the `numpy/numpy` repository, the default 2-core
    machine type works; 4-core will build and work a bit faster (but of course at
    a cost of halving your number of free usage hours). Once your codespace has started,
    you can run `conda activate numpy-dev` and your development environment is completely
    set up - you can then follow the relevant parts of the NumPy documentation to
    build, test, develop, write docs, and contribute to NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: Using virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A frequently asked question is “How do I set up a development version of NumPy
    in parallel to a released version that I use to do my job/research?”.
  prefs: []
  type: TYPE_NORMAL
- en: One simple way to achieve this is to install the released version in site-packages,
    by using pip or conda for example, and set up the development version in a virtual
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use conda, we recommend creating a separate virtual environment for
    numpy development using the `environment.yml` file in the root of the repo (this
    will create the environment and install all development dependencies at once):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you installed Python some other way than conda, first install [virtualenv](http://www.virtualenv.org/)
    (optionally use [virtualenvwrapper](http://www.doughellmann.com/projects/virtualenvwrapper/)),
    then create your virtualenv (named `numpy-dev` here) with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever you want to switch to the virtual environment, you can use the
    command `source numpy-dev/bin/activate`, and `deactivate` to exit from the virtual
    environment and back to your previous shell.
  prefs: []
  type: TYPE_NORMAL
- en: '## Testing builds'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the tests, first install the test dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the development version of NumPy and run tests, spawn interactive
    shells with the Python import paths properly set up etc., use the [spin](https://github.com/scientific-python/spin)
    utility. To run tests, do one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This builds NumPy first, so the first time it may take a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use `spin bench` for benchmarking. See `spin --help` for more command
    line options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If the above commands result in `RuntimeError: Cannot parse version 0+untagged.xxxxx`,
    run `git pull upstream main --tags`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional arguments may be forwarded to `pytest` by passing the extra arguments
    after a bare `--`. For example, to run a test method with the `--pdb` flag forwarded
    to the target, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also [match test names using python operators](https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests)
    by passing the `-k` argument to pytest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that all tests of NumPy should pass before committing your changes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some of the tests in the test suite require a large amount of memory, and are
    skipped if your system does not have enough.
  prefs: []
  type: TYPE_NORMAL
- en: Other build options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation.)
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides using `spin`, there are various ways to run the tests. Inside the interpreter,
    tests can be run like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Or a similar way from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tests can also be run with `pytest numpy`, however then the NumPy-specific plugin
    is not found which causes strange side effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running individual test files can be useful; it’s much faster than running
    the whole test suite or that of a whole module (example: `np.random.test()`).
    This can be done with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: That also takes extra arguments, like `--pdb` which drops you into the Python
    debugger when a test fails or an exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running tests with [tox](https://tox.readthedocs.io/) is also supported. For
    example, to build NumPy and run the test suite with Python 3.9, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: For more extensive information, see [Testing Guidelines](../reference/testing.html#testing-guidelines).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: do not run the tests from the root directory of your numpy git repo without
    `spin`, that will result in strange test errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Running Linting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lint checks can be performed on newly added lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install all dependent packages using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To run lint checks before committing new code, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To check all changes in newly added Python code of current branch with target
    branch, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no errors, the script exits with no message. In case of errors,
    check the error message for details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: It is advisable to run lint checks before pushing commits to a remote branch
    since the linter runs as part of the CI pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on Style Guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Style Guide](https://www.python.org/dev/peps/pep-0008/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[C Style Guide](https://numpy.org/neps/nep-0045-c_style_guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding & cleaning the workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rebuilding NumPy after making changes to compiled code can be done with the
    same build command as you used previously - only the changed files will be re-built.
    Doing a full build, which sometimes is necessary, requires cleaning the workspace
    first. The standard way of doing this is (*note: deletes any uncommitted files!*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'When you want to discard all changes and go back to the last commit in the
    repo, use one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '## Debugging'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another frequently asked question is “How do I debug C code inside NumPy?”.
    First, ensure that you have gdb installed on your system with the Python extensions
    (often the default on Linux). You can see which version of Python is running inside
    gdb to verify your setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Most python builds do not include debug symbols and are built with compiler
    optimizations enabled. To get the best debugging experience using a debug build
    of Python is encouraged, see [Advanced debugging tools](development_advanced_debugging.html#advanced-debugging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next you need to write a Python script that invokes the C code whose execution
    you want to debug. For instance `mytest.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And then in the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution will now stop at the corresponding C function and you can step
    through it as usual. A number of useful Python-specific commands are available.
    For example to see where in the Python code you are, use `py-list`, to see the
    python traceback, use `py-bt`. For more details, see [DebuggingWithGdb](https://wiki.python.org/moin/DebuggingWithGdb).
    Here are some commonly used commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list`: List specified function or line.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`next`: Step program, proceeding through subroutine calls.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`step`: Continue program being debugged, after signal or breakpoint.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`print`: Print value of expression EXP.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rich support for Python debugging requires that the `python-gdb.py` script
    distributed with Python is installed in a path where gdb can find it. If you installed
    your Python build from your system package manager, you likely do not need to
    manually do anything. However, if you built Python from source, you will likely
    need to create a `.gdbinit` file in your home directory pointing gdb at the location
    of your Python installation. For example, a version of python installed via [pyenv](https://github.com/pyenv/pyenv)
    needs a `.gdbinit` file with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Building NumPy with a Python built with debug support (on Linux distributions
    typically packaged as `python-dbg`) is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the code & getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best strategy to better understand the code base is to pick something you
    want to change and start reading the code to figure out how it works. When in
    doubt, you can ask questions on the mailing list. It is perfectly okay if your
    pull requests aren’t perfect, the community is always happy to help. As a volunteer
    project, things do sometimes get dropped and it’s totally fine to ping us if something
    has sat without a response for about two to four weeks.
  prefs: []
  type: TYPE_NORMAL
- en: So go ahead and pick something that annoys or confuses you about NumPy, experiment
    with the code, hang around for discussions or go through the reference documents
    to try to fix it. Things will fall in place and soon you’ll have a pretty good
    understanding of the project as a whole. Good Luck!
  prefs: []
  type: TYPE_NORMAL
