- en: Spatial data structures and algorithms (scipy.spatial)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 此外，它包含了[`KDTree`](../reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree")用于最近邻点查询的实现，以及在各种度量中进行距离计算的实用程序。
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/spatial.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/spatial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/spatial.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/spatial.html)
- en: '[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")
    can compute triangulations, Voronoi diagrams, and convex hulls of a set of points,
    by leveraging the [Qhull](http://qhull.org/) library.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，这个三角形有三角形＃0作为邻居，但没有其他邻居。此外，它告诉我们，邻居0位于三角形的顶点1的对面：
- en: Moreover, it contains [`KDTree`](../reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree") implementations for nearest-neighbor point queries, and
    utilities for distance computations in various metrics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Qhull还可以对更高维度点集（例如，在3D中划分成四面体）执行简单化到简单形。
- en: Delaunay triangulations
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 凸包
- en: The Delaunay triangulation is a subdivision of a set of points into a non-overlapping
    set of triangles, such that no point is inside the circumcircle of any triangle.
    In practice, such triangulations tend to avoid triangles with small angles.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 出现了两个新的三角形。但我们看到它们是退化的，面积为零。
- en: 'Delaunay triangulation can be computed using [`scipy.spatial`](../reference/spatial.html#module-scipy.spatial
    "scipy.spatial") as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以可视化它：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can visualize it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '!["此代码生成一个X-Y图，带有四个绿色点，注释为0到3，大致呈矩形。矩形由连接点0和3形成的对角线线条轮廓。顶部三角形注释为＃1，底部三角形注释为＃0。"](../Images/efe3ae6111fcc5d1261ade4a241a7ae4.png)'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And add some further decorations:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Qhull提供了“QJ”选项，指示它随机扰动输入数据直到去除退化情况：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '!["This code generates an X-Y plot with four green points annotated 0 through
    3 roughly in the shape of a box. The box is outlined with a diagonal line between
    points 0 and 3 forming two adjacent triangles. The top triangle is annotated as
    #1 and the bottom triangle is annotated as #0."](../Images/efe3ae6111fcc5d1261ade4a241a7ae4.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: Delaunay三角化是将一组点分割成一组不重叠的三角形的过程，使得任何点都不在任何三角形的外接圆内。在实践中，这种三角化倾向于避免具有小角度的三角形。
- en: 'The structure of the triangulation is encoded in the following way: the `simplices`
    attribute contains the indices of the points in the `points` array that make up
    the triangle. For instance:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")计算Delaunay三角化，如下所示：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Moreover, neighboring triangles can also be found:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这种退化情况不仅可能因为重复点而发生，甚至在乍一看似乎行为良好的点集中，也可能因更复杂的几何原因而发生。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What this tells us is that this triangle has triangle #0 as a neighbor, but
    no other neighbors. Moreover, it tells us that neighbor 0 is opposite the vertex
    1 of the triangle:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并且添加一些进一步的装饰：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Indeed, from the figure, we see that this is the case.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以找到相邻的三角形：
- en: Qhull can also perform tessellations to simplices for higher-dimensional point
    sets (for instance, subdivision into tetrahedra in 3-D).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，从图中我们看到这种情况。
- en: Coplanar points
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观察到点＃4是一个重复的点，并未出现在三角化的顶点中。这种情况已记录：
- en: 'It is important to note that not *all* points necessarily appear as vertices
    of the triangulation, due to numerical precision issues in forming the triangulation.
    Consider the above with a duplicated point:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意，并非*所有*的点都必然出现在三角化的顶点中，这是由于在形成三角化过程中的数值精度问题。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Observe that point #4, which is a duplicate, does not occur as a vertex of
    the triangulation. That this happened is recorded:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着点4位于三角形0和顶点3附近，但未包含在三角化中。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This means that point 4 resides near triangle 0 and vertex 3, but is not included
    in the triangulation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Delaunay三角化
- en: Note that such degeneracies can occur not only because of duplicated points,
    but also for more complicated geometrical reasons, even in point sets that at
    first sight seem well-behaved.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")可以通过利用[Qhull](http://qhull.org/)库来计算一组点的三角化、Voronoi图和凸包。'
- en: 'However, Qhull has the “QJ” option, which instructs it to perturb the input
    data randomly until degeneracies are resolved:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到上述的重复点：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Two new triangles appeared. However, we see that they are degenerate and have
    zero area.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 共面点
- en: Convex hulls
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空间数据结构和算法（scipy.spatial）
- en: A convex hull is the smallest convex object containing all points in a given
    point set.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 凸包是包含给定点集中所有点的最小凸对象。
- en: 'These can be computed via the Qhull wrappers in [`scipy.spatial`](../reference/spatial.html#module-scipy.spatial
    "scipy.spatial") as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")中的Qhull包装器计算如下：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The convex hull is represented as a set of N 1-D simplices, which in 2-D means
    line segments. The storage scheme is exactly the same as for the simplices in
    the Delaunay triangulation discussed above.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 凸包表示为N个1维简单形式的集合，在二维中意味着线段。存储方案与上面讨论的Delaunay三角剖分中的简单形式完全相同。
- en: 'We can illustrate the above result:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说明上述结果：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '!["This code generates an X-Y plot with a few dozen random blue markers randomly
    distributed throughout. A single black line forms a convex hull around the boundary
    of the markers."](../Images/4644ff52c591af38bc509ce694d46ca1.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '!["此代码生成一个X-Y图，其中有几十个随机蓝色标记随机分布在整个区域。一条黑线形成了标记边界周围的凸包。"](../Images/4644ff52c591af38bc509ce694d46ca1.png)'
- en: The same can be achieved with [`scipy.spatial.convex_hull_plot_2d`](../reference/generated/scipy.spatial.convex_hull_plot_2d.html#scipy.spatial.convex_hull_plot_2d
    "scipy.spatial.convex_hull_plot_2d").
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`scipy.spatial.convex_hull_plot_2d`](../reference/generated/scipy.spatial.convex_hull_plot_2d.html#scipy.spatial.convex_hull_plot_2d
    "scipy.spatial.convex_hull_plot_2d")也可以实现同样的效果。
- en: Voronoi diagrams
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Voronoi图
- en: A Voronoi diagram is a subdivision of the space into the nearest neighborhoods
    of a given set of points.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Voronoi图是将空间分割为给定一组点的最近邻域的子集。
- en: 'There are two ways to approach this object using [`scipy.spatial`](../reference/spatial.html#module-scipy.spatial
    "scipy.spatial"). First, one can use the [`KDTree`](../reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree") to answer the question “which of the points is closest
    to this one”, and define the regions that way:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")有两种方法来处理此对象。首先，可以使用[`KDTree`](../reference/generated/scipy.spatial.KDTree.html#scipy.spatial.KDTree
    "scipy.spatial.KDTree")回答“这个点最接近哪些点”的问题，并以此定义区域：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So the point `(0.1, 0.1)` belongs to region `0`. In color:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，点`(0.1, 0.1)`属于区域`0`。以颜色显示：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![" "](../Images/699be600124eb4b27c351c4151122604.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![" "](../Images/699be600124eb4b27c351c4151122604.png)'
- en: This does not, however, give the Voronoi diagram as a geometrical object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不会将Voronoi图作为几何对象给出。
- en: 'The representation in terms of lines and points can be again obtained via the
    Qhull wrappers in [`scipy.spatial`](../reference/spatial.html#module-scipy.spatial
    "scipy.spatial"):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 用[`scipy.spatial`](../reference/spatial.html#module-scipy.spatial "scipy.spatial")中的Qhull包装器再次以线段和点的形式表示：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The Voronoi vertices denote the set of points forming the polygonal edges of
    the Voronoi regions. In this case, there are 9 different regions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Voronoi顶点表示形成Voronoi区域多边形边缘的点集。在这种情况下，有9个不同的区域：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Negative value `-1` again indicates a point at infinity. Indeed, only one of
    the regions, `[0, 1, 3, 2]`, is bounded. Note here that due to similar numerical
    precision issues as in Delaunay triangulation above, there may be fewer Voronoi
    regions than input points.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 负值`-1`再次表示无穷远点。事实上，只有一个区域 `[0, 1, 3, 2]` 是有界的。请注意，由于与上述Delaunay三角剖分中类似的数值精度问题，Voronoi区域可能少于输入点。
- en: 'The ridges (lines in 2-D) separating the regions are described as a similar
    collection of simplices as the convex hull pieces:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 区域之间的脊（二维中的线）被描述为凸包部分的简单形式集合：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These numbers present the indices of the Voronoi vertices making up the line
    segments. `-1` is again a point at infinity — only 4 of the 12 lines are a bounded
    line segment, while others extend to infinity.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字表示组成线段的Voronoi顶点的索引。`-1`再次表示无穷远点 —— 只有12条线中的4条是有界线段，其他的延伸到无穷远。
- en: 'The Voronoi ridges are perpendicular to the lines drawn between the input points.
    To which two points each ridge corresponds is also recorded:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Voronoi脊是在输入点之间绘制的线段的垂直线。每个脊对应的两个点也记录在案：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This information, taken together, is enough to construct the full diagram.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息综合起来足以构建完整的图表。
- en: 'We can plot it as follows. First, the points and the Voronoi vertices:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式绘制它。首先是点和Voronoi顶点：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Plotting the finite line segments goes as for the convex hull, but now we have
    to guard for the infinite edges:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制有限线段的方式与凸包类似，但现在我们必须防范无限边：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The ridges extending to infinity require a bit more care:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 延伸到无限的脊需要更多的注意：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![" "](../Images/db15ab05ee8e254afda9811ffa95768f.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![" "](../Images/db15ab05ee8e254afda9811ffa95768f.png)'
- en: This plot can also be created using [`scipy.spatial.voronoi_plot_2d`](../reference/generated/scipy.spatial.voronoi_plot_2d.html#scipy.spatial.voronoi_plot_2d
    "scipy.spatial.voronoi_plot_2d").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`scipy.spatial.voronoi_plot_2d`](../reference/generated/scipy.spatial.voronoi_plot_2d.html#scipy.spatial.voronoi_plot_2d
    "scipy.spatial.voronoi_plot_2d")也可以创建此图。
- en: Voronoi diagrams can be used to create interesting generative art. Try playing
    with the settings of this `mandala` function to create your own!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Voronoi 图可以用来创建有趣的生成艺术。尝试调整`mandala`函数的设置，创作属于你自己的作品！
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![" "](../Images/dfb5ab45b804f39d0027feea66b6b7a9.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![" "](../Images/dfb5ab45b804f39d0027feea66b6b7a9.png)'
