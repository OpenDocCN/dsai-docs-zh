["```py\nscipy.optimize.fmin_bfgs(f, x0, fprime=None, args=(), gtol=1e-05, norm=inf, epsilon=1.4901161193847656e-08, maxiter=None, full_output=0, disp=1, retall=0, callback=None, xrtol=0, c1=0.0001, c2=0.9, hess_inv0=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.optimize import fmin_bfgs\n>>> def quadratic_cost(x, Q):\n...     return x @ Q @ x\n...\n>>> x0 = np.array([-3, -4])\n>>> cost_weight =  np.diag([1., 10.])\n>>> # Note that a trailing comma is necessary for a tuple with single element\n>>> fmin_bfgs(quadratic_cost, x0, args=(cost_weight,))\nOptimization terminated successfully.\n Current function value: 0.000000\n Iterations: 7                   # may vary\n Function evaluations: 24        # may vary\n Gradient evaluations: 8         # may vary\narray([ 2.85169950e-06, -4.61820139e-07]) \n```", "```py\n>>> def quadratic_cost_grad(x, Q):\n...     return 2 * Q @ x\n...\n>>> fmin_bfgs(quadratic_cost, x0, quadratic_cost_grad, args=(cost_weight,))\nOptimization terminated successfully.\n Current function value: 0.000000\n Iterations: 7\n Function evaluations: 8\n Gradient evaluations: 8\narray([ 2.85916637e-06, -4.54371951e-07]) \n```"]