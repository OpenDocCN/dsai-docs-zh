- en: Permutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/permutations.html](https://docs.sympy.org/latest/modules/combinatorics/permutations.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A permutation, alternatively known as an ‘arrangement number’ or ‘ordering’
    is an arrangement of the elements of an ordered list into a one-to-one mapping
    with itself. The permutation of a given arrangement is given by indicating the
    positions of the elements after re-arrangement [[R80]](#r80). For example, if
    one started with elements `[x, y, a, b]` (in that order) and they were reordered
    as `[x, y, b, a]` then the permutation would be `[0, 1, 3, 2]`. Notice that (in
    SymPy) the first element is always referred to as 0 and the permutation uses the
    indices of the elements in the original ordering, not the elements `(a, b, ...)`
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Permutations Notation
  prefs: []
  type: TYPE_NORMAL
- en: Permutations are commonly represented in disjoint cycle or array forms.
  prefs: []
  type: TYPE_NORMAL
- en: Array Notation And 2-line Form
  prefs: []
  type: TYPE_NORMAL
- en: 'In the 2-line form, the elements and their final positions are shown as a matrix
    with 2 rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[0 1 2 … n-1] [p(0) p(1) p(2) … p(n-1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the first line is always `range(n)`, where n is the size of p, it is
    sufficient to represent the permutation by the second line, referred to as the
    “array form” of the permutation. This is entered in brackets as the argument to
    the Permutation class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Given i in range(p.size), the permutation maps i to i^p
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The composite of two permutations p*q means first apply p, then q, so i^(p*q)
    = (i^p)^q which is i^p^q according to Python precedence rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One can use also the notation p(i) = i^p, but then the composition rule is
    (p*q)(i) = q(p(i)), not p(q(i)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Disjoint Cycle Notation
  prefs: []
  type: TYPE_NORMAL
- en: In disjoint cycle notation, only the elements that have shifted are indicated.
  prefs: []
  type: TYPE_NORMAL
- en: For example, [1, 3, 2, 0] can be represented as (0, 1, 3)(2). This can be understood
    from the 2 line format of the given permutation. In the 2-line form, [0 1 2 3]
    [1 3 2 0]
  prefs: []
  type: TYPE_NORMAL
- en: 'The element in the 0th position is 1, so 0 -> 1\. The element in the 1st position
    is three, so 1 -> 3\. And the element in the third position is again 0, so 3 ->
    0\. Thus, 0 -> 1 -> 3 -> 0, and 2 -> 2\. Thus, this can be represented as 2 cycles:
    (0, 1, 3)(2). In common notation, singular cycles are not explicitly written as
    they can be inferred implicitly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Only the relative ordering of elements in a cycle matter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The disjoint cycle notation is convenient when representing permutations that
    have several cycles in them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It also provides some economy in entry when computing products of permutations
    that are written in disjoint cycle notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Caution: when the cycles have common elements between them then the order in
    which the permutations are applied matters. This module applies the permutations
    from *left to right*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the above case, (1,2) is computed before (2,3). As 0 -> 0, 0 -> 0, element
    in position 0 is 0. As 1 -> 2, 2 -> 3, element in position 1 is 3. As 2 -> 1,
    1 -> 1, element in position 2 is 1. As 3 -> 3, 3 -> 2, element in position 3 is
    2.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If the first and second elements had been swapped first, followed by the swapping
    of the second and third, the result would have been [0, 2, 3, 1]. If, you want
    to apply the cycles in the conventional right to left order, call the function
    with arguments in reverse order as demonstrated below:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Entering a singleton in a permutation is a way to indicate the size of the permutation.
    The `size` keyword can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Array-form entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Cyclic-form entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Caution: no singleton containing an element larger than the largest in any
    previous cycle can be entered. This is an important difference in how Permutation
    and Cycle handle the `__call__` syntax. A singleton argument at the start of a
    Permutation performs instantiation of the Permutation and is permitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A singleton entered after instantiation is a call to the permutation – a function
    call – and if the argument is out of range it will trigger an error. For this
    reason, it is better to start the cycle with the singleton:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following fails because there is no element 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is ok: only the call to an out of range singleton is prohibited; otherwise
    the permutation autosizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Equality Testing
  prefs: []
  type: TYPE_NORMAL
- en: 'The array forms must be the same in order for permutations to be equal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Identity Permutation
  prefs: []
  type: TYPE_NORMAL
- en: 'The identity permutation is a permutation in which no element is out of place.
    It can be entered in a variety of ways. All the following create an identity permutation
    of size 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Watch out for entering the range *inside* a set of brackets (which is cycle
    notation):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Permutation Printing
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things to note about how Permutations are printed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.6: Configuring Permutation printing by setting `Permutation.print_cyclic`
    is deprecated. Users should use the `perm_cyclic` flag to the printers, as described
    below.'
  prefs: []
  type: TYPE_NORMAL
- en: 1) If you prefer one form (array or cycle) over another, you can set `init_printing`
    with the `perm_cyclic` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '2) Regardless of the setting, a list of elements in the array for cyclic form
    can be obtained and either of those can be copied and supplied as the argument
    to Permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '3) Printing is economical in that as little as possible is printed while retaining
    all information about the size of the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The 2 was not printed but it is still there as can be seen with the array_form
    and size methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Short Introduction To Other Methods
  prefs: []
  type: TYPE_NORMAL
- en: The permutation can act as a bijective function, telling what element is located
    at a given position
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The full cyclic form (including singletons) can be obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Any permutation can be factored into transpositions of pairs of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The number of permutations on a set of n elements is given by n! and is called
    the cardinality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A given permutation has a rank among all the possible permutations of the same
    elements, but what that rank is depends on how the permutations are enumerated.
    (There are a number of different methods of doing so.) The lexicographic rank
    is given by the rank method and this rank is used to increment a permutation with
    addition/subtraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The product of two permutations p and q is defined as their composition as functions,
    (p*q)(i) = q(p(i)) [[R84]](#r84).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The permutation can be ‘applied’ to any list-like object, not only Permutations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a list of arbitrary elements, the corresponding permutation can
    be found with the from_sequence method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Checking If A Permutation Is Contained In A Group
  prefs: []
  type: TYPE_NORMAL
- en: Generally if you have a group of permutations G on n symbols, and you’re checking
    if a permutation on less than n symbols is part of that group, the check will
    fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example for n=5 and we check if the cycle (1,2,3) is in G:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The check for p2 above will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Checking if p1 is in G works because SymPy knows G is a group on 5 symbols,
    and p1 is also on 5 symbols (its largest element is 5).
  prefs: []
  type: TYPE_NORMAL
- en: For `a1`, the `.list(6)` call will extend the permutation to 5 symbols, so the
    test will work as well. In the case of `a2` the permutation is being extended
    to 5 symbols by using a singleton, and in the case of `a3` it’s extended through
    the constructor argument `size=6`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another way to do this, which is to tell the `contains` method that
    the number of symbols the group is on does not need to match perfectly the number
    of symbols for the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This can be via the `strict` argument to the `contains` method, and SymPy will
    try to extend the permutation on its own and then perform the containment check.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Cycle`](#sympy.combinatorics.permutations.Cycle "sympy.combinatorics.permutations.Cycle")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R79](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Skiena, S. ‘Permutations.’ 1.1 in Implementing Discrete Mathematics Combinatorics
    and Graph Theory with Mathematica. Reading, MA: Addison-Wesley, pp. 3-16, 1990.'
  prefs: []
  type: TYPE_NORMAL
- en: '[R80] ([1](#id1),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knuth, D. E. The Art of Computer Programming, Vol. 4: Combinatorial Algorithms,
    1st ed. Reading, MA: Addison-Wesley, 2011.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R81](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wendy Myrvold and Frank Ruskey. 2001\. Ranking and unranking permutations in
    linear time. Inf. Process. Lett. 79, 6 (September 2001), 281-284\. DOI=10.1016/S0020-0190(01)00141-7
  prefs: []
  type: TYPE_NORMAL
- en: '[[R82](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: D. L. Kreher, D. R. Stinson ‘Combinatorial Algorithms’ CRC Press, 1999
  prefs: []
  type: TYPE_NORMAL
- en: '[[R83](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Graham, R. L.; Knuth, D. E.; and Patashnik, O. Concrete Mathematics: A Foundation
    for Computer Science, 2nd ed. Reading, MA: Addison-Wesley, 1994.'
  prefs: []
  type: TYPE_NORMAL
- en: '[R84] ([1](#id2),[2](#id8))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse](https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R85](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lehmer_code](https://en.wikipedia.org/wiki/Lehmer_code)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Apply the permutation to an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**i** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: It should be an integer between \(0\) and \(n-1\) where \(n\) is the size of
    the permutation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If it is a symbol or a symbolic expression that can have integer values, an
    `AppliedPermutation` object will be returned which can represent an unevaluated
    function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Any permutation can be defined as a bijective function \(\sigma : \{ 0, 1,
    \dots, n-1 \} \rightarrow \{ 0, 1, \dots, n-1 \}\) where \(n\) denotes the size
    of the permutation.'
  prefs: []
  type: TYPE_NORMAL
- en: The definition may even be extended for any set with distinctive elements, such
    that the permutation can even be applied for real numbers or such, however, it
    is not implemented for now for computational reasons and the integrity with the
    group theory module.
  prefs: []
  type: TYPE_NORMAL
- en: This function is similar to the `__call__` magic, however, `__call__` magic
    already has some other applications like permuting an array or attaching new cycles,
    which would not always be mathematically consistent.
  prefs: []
  type: TYPE_NORMAL
- en: This also guarantees that the return type is a SymPy integer, which guarantees
    the safety to use assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of the attribute _array_form Examples ========
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the positions of ascents in a permutation, ie, the location where p[i]
    < p[i+1]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns all the elements of a permutation
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of all possible permutations.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the commutator of `self` and `x`: `~x*~self*x*self`'
  prefs: []
  type: TYPE_NORMAL
- en: If f and g are part of a group, G, then the commutator of f and g is the group
    identity iff f and g commute, i.e. fg == gf.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R86](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Commutator](https://en.wikipedia.org/wiki/Commutator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Checks if the elements are commuting.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Return the cycle structure of the permutation as a dictionary indicating the
    multiplicity of each cycle length.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of cycles contained in the permutation (including singletons).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.stirling`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.stirling
    "sympy.functions.combinatorial.numbers.stirling")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This is used to convert to the cyclic notation from the canonical notation.
    Singletons are omitted.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_form`](#sympy.combinatorics.permutations.Permutation.array_form "sympy.combinatorics.permutations.Permutation.array_form"),
    [`full_cyclic_form`](#sympy.combinatorics.permutations.Permutation.full_cyclic_form
    "sympy.combinatorics.permutations.Permutation.full_cyclic_form")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Returns the positions of descents in a permutation, ie, the location where p[i]
    > p[i+1]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the permutation from the inversion vector.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Return the permutation needed to obtain `i` from the sorted elements of `i`.
    If custom sorting is desired, a key can be given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Return permutation in cyclic form including singletons.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Computes the adjacency distance between two permutations.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This metric counts the number of times a pair i,j of jobs is adjacent in both
    p and p’. If n_adj is this quantity then the adjacency distance is n - n_adj -
    1 [1]
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Reeves, Colin R. Landscapes, Operators and Heuristic search, Annals of
    Operational Research, 86, pp 473-490\. (1999)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Computes the adjacency matrix of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If job i is adjacent to job j in a permutation p then we set m[i, j] = 1 where
    m is the adjacency matrix of p.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Computes the positional distance between two permutations.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Computes the precedence distance between two permutations.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Suppose p and p’ represent n jobs. The precedence metric counts the number of
    times a job j is preceded by job i in both p and p’. This metric is commutative.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Gets the precedence matrix. This is used for computing the distance between
    two permutations.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: The index of a permutation is the sum of all subscripts j such that p[j] is
    greater than p[j+1].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Return the inversion vector of the permutation.
  prefs: []
  type: TYPE_NORMAL
- en: The inversion vector consists of elements whose value indicates the number of
    elements in the permutation that are lesser than it and lie on its right hand
    side.
  prefs: []
  type: TYPE_NORMAL
- en: The inversion vector is the same as the Lehmer encoding of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The inversion vector increases lexicographically with the rank of the permutation,
    the -ith element cycling through 0..i.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_inversion_vector`](#sympy.combinatorics.permutations.Permutation.from_inversion_vector
    "sympy.combinatorics.permutations.Permutation.from_inversion_vector")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Computes the number of inversions of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: An inversion is where i > j but p[i] < p[j].
  prefs: []
  type: TYPE_NORMAL
- en: For small length of p, it iterates over all i and j values and calculates the
    number of inversions. For large length of p, it uses a variation of merge sort
    to calculate the number of inversions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R87](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm](https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Checks to see if the permutation is a set with zero elements
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_Singleton`](#sympy.combinatorics.permutations.Permutation.is_Singleton
    "sympy.combinatorics.permutations.Permutation.is_Singleton")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if the Permutation is an identity permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Checks to see if the permutation contains only one number and is thus the only
    possible permutation of this set of numbers
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_Empty`](#sympy.combinatorics.permutations.Permutation.is_Empty "sympy.combinatorics.permutations.Permutation.is_Empty")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Checks if a permutation is even.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_odd`](#sympy.combinatorics.permutations.Permutation.is_odd "sympy.combinatorics.permutations.Permutation.is_odd")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Checks if a permutation is odd.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_even`](#sympy.combinatorics.permutations.Permutation.is_even "sympy.combinatorics.permutations.Permutation.is_even")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Return as a permutation the shuffling of range(n) using the Josephus scheme
    in which every m-th item is selected until all have been chosen. The returned
    permutation has elements listed by the order in which they were selected.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter `s` stops the selection process when there are `s` items remaining
    and these are selected by continuing the selection, counting by 1 rather than
    by `m`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider selecting every 3rd item from 6 until only 2 remain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R88](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Flavius_Josephus](https://en.wikipedia.org/wiki/Flavius_Josephus)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R89](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Josephus_problem](https://en.wikipedia.org/wiki/Josephus_problem)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R90](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html](https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of integers moved by a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`support`](#sympy.combinatorics.permutations.Permutation.support "sympy.combinatorics.permutations.Permutation.support"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Return the permutation as an explicit list, possibly trimming unmoved elements
    if size is less than the maximum element in the permutation; if this is desired,
    setting `size=-1` will guarantee such trimming.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Passing a length too small will trim trailing, unchanged elements in the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: The maximum element moved by the permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The minimum element moved by the permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: other*~self, self and other have _array_form
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next permutation in lexicographical order. If self is the last permutation
    in lexicographical order it returns None. See [4] section 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next permutation in nonlex order [3]. If self is the last permutation
    in this order it returns None.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next permutation in Trotter-Johnson order. If self is the last permutation
    it returns None. See [4] section 2.4\. If it is desired to generate all such permutations,
    they can be generated in order more quickly with the `generate_bell` function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`sympy.utilities.iterables.generate_bell`](../utilities/iterables.html#sympy.utilities.iterables.generate_bell
    "sympy.utilities.iterables.generate_bell")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Computes the order of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: When the permutation is raised to the power of its order it equals the identity
    permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`identity`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.identity
    "sympy.combinatorics.perm_groups.PermutationGroup.identity"), [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality
    "sympy.combinatorics.permutations.Permutation.cardinality"), [`length`](#sympy.combinatorics.permutations.Permutation.length
    "sympy.combinatorics.permutations.Permutation.length"), [`rank`](#sympy.combinatorics.permutations.Permutation.rank
    "sympy.combinatorics.permutations.Permutation.rank"), [`size`](#sympy.combinatorics.permutations.Permutation.size
    "sympy.combinatorics.permutations.Permutation.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Computes the parity of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The parity of a permutation reflects the parity of the number of inversions
    in the permutation, i.e., the number of pairs of x and y such that `x > y` but
    `p[x] < p[y]`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_af_parity`](#sympy.combinatorics.permutations._af_parity "sympy.combinatorics.permutations._af_parity")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Generates a random permutation of length `n`.
  prefs: []
  type: TYPE_NORMAL
- en: Uses the underlying Python pseudo-random number generator.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Returns the lexicographic rank of the permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: This is a linear time ranking algorithm that does not enforce lexicographic
    order [3].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Trotter Johnson rank, which we get from the minimal change algorithm.
    See [4] section 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Resize the permutation to the new size `n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The new size of the permutation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: If the permutation cannot be resized to the given size. This may only happen
    when resized to a smaller size than the original.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Increasing the size of a permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Decreasing the size of the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'If resizing to the specific size breaks the cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Return product of Permutations [a, b, c, …] as the Permutation whose ith value
    is a(b(c(i))).
  prefs: []
  type: TYPE_NORMAL
- en: a, b, c, … can be Permutation objects or tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'This handles the operands in reverse order compared to the `*` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'All items in the sequence will be parsed by Permutation as necessary as long
    as the first item is a Permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: The reverse order of arguments will raise a TypeError.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: same as rmul, but the elements of args are Permutation objects which have _array_form
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Returns the runs of a permutation.
  prefs: []
  type: TYPE_NORMAL
- en: An ascending sequence in a permutation is called a run [5].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Gives the signature of the permutation needed to place the elements of the permutation
    in canonical order.
  prefs: []
  type: TYPE_NORMAL
- en: The signature is calculated as (-1)^<number of inversions>
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of elements in the permutation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Return the elements in permutation, P, for which P[i] != i.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Return the permutation decomposed into a list of transpositions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: It is always possible to express a permutation as the product of transpositions,
    see [1]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R91](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties](https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Lexicographic permutation unranking.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: This is a linear time unranking algorithm that does not respect lexicographic
    order [3].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Trotter Johnson permutation unranking. See [4] section 2.4.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Wrapper around dict which provides the functionality of a disjoint cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'A cycle shows the rule to use to move subsets of elements to obtain a permutation.
    The Cycle class is more flexible than Permutation in that 1) all elements need
    not be present in order to investigate how multiple cycles act in sequence and
    2) it can contain singletons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'A Cycle will automatically parse a cycle given as a tuple on the rhs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The identity cycle, Cycle(), can be used to start a product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'The array form of a Cycle can be obtained by calling the list method (or passing
    it to the list function) and all elements from 0 will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'If a larger (or smaller) range is desired use the list method and provide the
    desired size – but the Cycle cannot be truncated to a size smaller than the largest
    element that is out of place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Singletons are not shown when printing with one exception: the largest element
    is always shown – as a singleton if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'The array form can be used to instantiate a Permutation so other properties
    of the permutation can be investigated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying structure of the Cycle is a dictionary and although the __iter__
    method has been redefined to give the array form of the cycle, the underlying
    dictionary items are still available with the such methods as items():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Return the cycles as an explicit list starting from 0 up to the greater of the
    largest value in the cycles and size.
  prefs: []
  type: TYPE_NORMAL
- en: Truncation of trailing unmoved items will occur when size is less than the maximum
    element in the cycle; if this is desired, setting `size=-1` will guarantee such
    trimming.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Passing a length too small will trim trailing, unchanged elements in the permutation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Computes the parity of a permutation in array form.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The parity of a permutation reflects the parity of the number of inversions
    in the permutation, i.e., the number of pairs of x and y such that x > y but p[x]
    < p[y].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
  prefs: []
  type: TYPE_NORMAL
- en: '## Generators'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Generates the symmetric group of order n, Sn.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Generates the cyclic group of order n, Cn.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dihedral`](#sympy.combinatorics.generators.dihedral "sympy.combinatorics.generators.dihedral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Generates the alternating group of order n, An.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Generates the dihedral group of order 2n, Dn.
  prefs: []
  type: TYPE_NORMAL
- en: The result is given as a subgroup of Sn, except for the special cases n=1 (the
    group S2) and n=2 (the Klein 4-group) where that’s not possible and embeddings
    in S2 and S4 respectively are given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`cyclic`](#sympy.combinatorics.generators.cyclic "sympy.combinatorics.generators.cyclic")'
  prefs: []
  type: TYPE_NORMAL
