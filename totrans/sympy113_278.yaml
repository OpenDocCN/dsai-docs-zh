- en: Lie Algebra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/liealgebras/index.html](https://docs.sympy.org/latest/modules/liealgebras/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represent the root system of a simple Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: 'Every simple Lie algebra has a unique root system. To find the root system,
    we first consider the Cartan subalgebra of g, which is the maximal abelian subalgebra,
    and consider the adjoint action of g on this subalgebra. There is a root system
    associated with this action. Now, a root system over a vector space V is a set
    of finite vectors Phi (called roots), which satisfy:'
  prefs: []
  type: TYPE_NORMAL
- en: The roots span V
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The only scalar multiples of x in Phi are x and -x
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For every x in Phi, the set Phi is closed under reflection through the hyperplane
    perpendicular to x.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If x and y are roots in Phi, then the projection of y onto the line through
    x is a half-integral multiple of x.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, there is a subset of Phi, which we will call Delta, such that: 1\. Delta
    is a basis of V 2\. Each root x in Phi can be written x = sum k_y y for y in Delta'
  prefs: []
  type: TYPE_NORMAL
- en: The elements of Delta are called the simple roots. Therefore, we see that the
    simple roots span the root space of a given simple Lie algebra.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R598](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Root_system](https://en.wikipedia.org/wiki/Root_system)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R599](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Lie Algebras and Representation Theory - Humphreys
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Add two roots together if and only if their sum is also a root
  prefs: []
  type: TYPE_NORMAL
- en: It takes as input two vectors which should be roots. It then computes their
    sum and checks if it is in the list of all possible roots. If it is, it returns
    the sum. Otherwise it returns a string saying that the sum is not a root.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Add two simple roots together
  prefs: []
  type: TYPE_NORMAL
- en: The function takes as input two integers, root1 and root2\. It then uses these
    integers as keys in the dictionary of simple roots, and gets the corresponding
    simple roots, and then adds them together.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Generate all the roots of a given root system
  prefs: []
  type: TYPE_NORMAL
- en: The result is a dictionary where the keys are integer numbers. It generates
    the roots by getting the dictionary of all positive roots from the bases classes,
    and then taking each root, and multiplying it by -1 and adding it to the dictionary.
    In this way all the negative roots are generated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Cartan matrix of Lie algebra associated with this root system
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Dynkin diagram of the Lie algebra associated with this root system
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return the span of the simple roots
  prefs: []
  type: TYPE_NORMAL
- en: The root space is the vector space spanned by the simple roots, i.e. it is a
    vector space with a distinguished basis, the simple roots. This method returns
    a string that represents the root space as the span of the simple roots, alpha[1],….,
    alpha[n].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Generate the simple roots of the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: The rank of the Lie algebra determines the number of simple roots that it has.
    This method obtains the rank of the Lie algebra, and then uses the simple_root
    method from the Lie algebra classes to generate all the simple roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This class contains the information about the A series of simple Lie algebras.
    ====
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is a method just to generate roots with a 1 iin the ith position and a
    -1 in the jth position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of A_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Cartan matrix for A_n. The Cartan matrix matrix for a Lie algebra
    is generated by assigning an ordering to the simple roots, (alpha[1], …., alpha[l]).
    Then the ijth entry of the Cartan matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns the highest weight root for A_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Lie algebra associated with A_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This method generates all the positive roots of A_n. This is half of all of
    the roots of A_n; by multiplying all the positive roots by -1 we get the negative
    roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots for A_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: In A_n the ith simple root is the root which has a 1 in the ith position, a
    -1 in the (i+1)th position, and zeroes elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the ith simple root for the A series.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is a method just to generate roots with a 1 iin the ith position and a
    -1 in the jth position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of B_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Cartan matrix for B_n. The Cartan matrix matrix for a Lie algebra
    is generated by assigning an ordering to the simple roots, (alpha[1], …., alpha[l]).
    Then the ijth entry of the Cartan matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Lie algebra associated with B_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This method generates all the positive roots of A_n. This is half of all of
    the roots of B_n; by multiplying all the positive roots by -1 we get the negative
    roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots for B_n”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: In B_n the first n-1 simple roots are the same as the roots in A_(n-1) (a 1
    in the ith position, a -1 in the (i+1)th position, and zeroes elsewhere). The
    n-th simple root is the root with a 1 in the nth position and zeroes elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the ith simple root for the B series.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Generate roots with 1 in ith position and a -1 in jth position
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of C_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The Cartan matrix for C_n
  prefs: []
  type: TYPE_NORMAL
- en: The Cartan matrix matrix for a Lie algebra is generated by assigning an ordering
    to the simple roots, (alpha[1], …., alpha[l]). Then the ijth entry of the Cartan
    matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Lie algebra associated with C_n”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Generates all the positive roots of A_n
  prefs: []
  type: TYPE_NORMAL
- en: This is half of all of the roots of C_n; by multiplying all the positive roots
    by -1 we get the negative roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots for C_n”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The ith simple root for the C series
  prefs: []
  type: TYPE_NORMAL
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: In C_n, the first n-1 simple roots are the same as the roots in A_(n-1) (a 1
    in the ith position, a -1 in the (i+1)th position, and zeroes elsewhere). The
    nth simple root is the root in which there is a 2 in the nth position and zeroes
    elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This is a method just to generate roots with a 1 iin the ith position and a
    -1 in the jth position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of D_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Cartan matrix for D_n. The Cartan matrix matrix for a Lie algebra
    is generated by assigning an ordering to the simple roots, (alpha[1], …., alpha[l]).
    Then the ijth entry of the Cartan matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Dmension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Lie algebra associated with D_n”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This method generates all the positive roots of A_n. This is half of all of
    the roots of D_n by multiplying all the positive roots by -1 we get the negative
    roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots for D_n”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: In D_n, the first n-1 simple roots are the same as the roots in A_(n-1) (a 1
    in the ith position, a -1 in the (i+1)th position, and zeroes elsewhere). The
    nth simple root is the root in which there 1s in the nth and (n-1)th positions,
    and zeroes elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the ith simple root for the D series.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is a method just to generate roots with a -1 in the ith position and a
    1 in the jth position.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of E_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Cartan matrix for G_2 The Cartan matrix matrix for a Lie algebra
    is generated by assigning an ordering to the simple roots, (alpha[1], …., alpha[l]).
    Then the ijth entry of the Cartan matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This method generates all the positive roots of A_n. This is half of all of
    the roots of E_n; by multiplying all the positive roots by -1 we get the negative
    roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots of E_n
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: This method returns the ith simple root for E_n.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Generate roots with 1 in ith position and -1 in jth position
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of F_4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The Cartan matrix for F_4
  prefs: []
  type: TYPE_NORMAL
- en: The Cartan matrix matrix for a Lie algebra is generated by assigning an ordering
    to the simple roots, (alpha[1], …., alpha[l]). Then the ijth entry of the Cartan
    matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Generate all the positive roots of A_n
  prefs: []
  type: TYPE_NORMAL
- en: This is half of all of the roots of F_4; by multiplying all the positive roots
    by -1 we get the negative roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots for F_4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The ith simple root of F_4
  prefs: []
  type: TYPE_NORMAL
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Returns the number of independent generators of G_2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The Cartan matrix for G_2
  prefs: []
  type: TYPE_NORMAL
- en: The Cartan matrix matrix for a Lie algebra is generated by assigning an ordering
    to the simple roots, (alpha[1], …., alpha[l]). Then the ijth entry of the Cartan
    matrix is (<alpha[i],alpha[j]>).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Dimension of the vector space V underlying the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Generate all the positive roots of A_n
  prefs: []
  type: TYPE_NORMAL
- en: This is half of all of the roots of A_n; by multiplying all the positive roots
    by -1 we get the negative roots.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total number of roots of G_2”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The ith simple root of G_2
  prefs: []
  type: TYPE_NORMAL
- en: Every lie algebra has a unique root system. Given a root system Q, there is
    a subset of the roots such that an element of Q is called a simple root if it
    cannot be written as the sum of two elements in Q. If we let D denote the set
    of simple roots, then it is clear that every element of Q can be written as a
    linear combination of elements of D with all coefficients non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: For each semisimple Lie group, we have a Weyl group. It is a subgroup of the
    isometry group of the root system. Specifically, it’s the subgroup that is generated
    by reflections through the hyperplanes orthogonal to the roots. Therefore, Weyl
    groups are reflection groups, and so a Weyl group is a finite Coxeter group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the Coxeter diagram corresponding to a Weyl group. The Coxeter
    diagram can be obtained from a Lie algebra’s Dynkin diagram by deleting all arrows;
    the Coxeter diagram is the undirected graph. The vertices of the Coxeter diagram
    represent the generating reflections of the Weyl group, \(s_i\). An edge is drawn
    between \(s_i\) and \(s_j\) if the order \(m(i, j)\) of \(s_is_j\) is greater
    than two. If there is one edge, the order \(m(i, j)\) is 3\. If there are two
    edges, the order \(m(i, j)\) is 4, and if there are three edges, the order \(m(i,
    j)\) is 6.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: This is a helper method for determining the order of an element in the Weyl
    group of G2\. It takes a Weyl element and if repeated simple reflections in it,
    it deletes them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the order of a given Weyl group element, which should be
    specified by the user in the form of products of the generating reflections, i.e.
    of the form r1*r2 etc.
  prefs: []
  type: TYPE_NORMAL
- en: For types A-F, this method current works by taking the matrix form of the specified
    element, and then finding what power of the matrix is the identity. It then returns
    this power.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: This method creates the generating reflections of the Weyl group for a given
    Lie algebra. For a Lie algebra of rank n, there are n different generating reflections.
    This function returns them as a list.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: This method returns some general information about the Weyl group for a given
    Lie algebra. It returns the name of the group and the elements it acts on, if
    relevant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the order of the Weyl group. For types A, B, C, D, and E
    the order depends on the rank of the Lie algebra. For types F and G, the order
    is fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: This method takes input from the user in the form of products of the generating
    reflections, and returns the matrix corresponding to the element of the Weyl group.
    Since each element of the Weyl group is a reflection of some type, there is a
    corresponding matrix representation. This method uses the standard representation
    for all the generating reflections.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Constructor for actually creating things
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Concrete base class for Cartan types such as A4, etc
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Returns the rank of the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Returns the type of the Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Display the Dynkin diagram of a given Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Works by generating the CartanType for the input, t, and then returning the
    Dynkin diagram method from the individual classes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Access the Cartan matrix of a specific Lie algebra
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: This method works by returning the Cartan matrix which corresponds to Cartan
    type t.
  prefs: []
  type: TYPE_NORMAL
