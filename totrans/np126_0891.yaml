- en: numpy.maximum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.maximum.html](https://numpy.org/doc/1.26/reference/generated/numpy.maximum.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Element-wise maximum of array elements.
  prefs: []
  type: TYPE_NORMAL
- en: Compare two arrays and return a new array containing the element-wise maxima.
    If one of the elements being compared is a NaN, then that element is returned.
    If both elements are NaNs then the first is returned. The latter distinction is
    important for complex NaNs, which are defined as at least one of the real or imaginary
    parts being a NaN. The net effect is that NaNs are propagated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1, x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays holding the elements to be compared. If `x1.shape != x2.shape`, they
    must be broadcastable to a common shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum of *x1* and *x2*, element-wise. This is a scalar if both *x1* and
    *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum`](numpy.minimum.html#numpy.minimum "numpy.minimum")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise minimum of two arrays, propagates NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fmax`](numpy.fmax.html#numpy.fmax "numpy.fmax")'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise maximum of two arrays, ignores NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`amax`](numpy.amax.html#numpy.amax "numpy.amax")'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an array along a given axis, propagates NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nanmax`](numpy.nanmax.html#numpy.nanmax "numpy.nanmax")'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum value of an array along a given axis, ignores NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fmin`](numpy.fmin.html#numpy.fmin "numpy.fmin"), [`amin`](numpy.amin.html#numpy.amin
    "numpy.amin"), [`nanmin`](numpy.nanmin.html#numpy.nanmin "numpy.nanmin")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The maximum is equivalent to `np.where(x1 >= x2, x1, x2)` when neither x1 nor
    x2 are nans, but it is faster and does proper broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
