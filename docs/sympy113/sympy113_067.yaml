- en: Group constructors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 群构造器
- en: Original text：[https://docs.sympy.org/latest/modules/combinatorics/group_constructs.html](https://docs.sympy.org/latest/modules/combinatorics/group_constructs.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/combinatorics/group_constructs.html](https://docs.sympy.org/latest/modules/combinatorics/group_constructs.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Returns the direct product of several groups as a permutation group.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回几个群的直积作为一个置换群。
- en: Explanation
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This is implemented much like the __mul__ procedure for taking the direct product
    of two permutation groups, but the idea of shifting the generators is realized
    in the case of an arbitrary number of groups. A call to DirectProduct(G1, G2,
    …, Gn) is generally expected to be faster than a call to G1*G2*…*Gn (and thus
    the need for this algorithm).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这与取两个置换群的直积的__mul__过程实现方式非常相似，但在任意数量的群的情况下实现了生成器的移位思想。一般预期调用 DirectProduct(G1,
    G2, …, Gn) 比调用 G1*G2*…*Gn 更快（因此需要此算法）。
- en: Examples
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.combinatorics.perm_groups.PermutationGroup.__mul__`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.__mul__
    "sympy.combinatorics.perm_groups.PermutationGroup.__mul__")'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.combinatorics.perm_groups.PermutationGroup.__mul__`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.__mul__
    "sympy.combinatorics.perm_groups.PermutationGroup.__mul__")'
