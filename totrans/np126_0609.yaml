- en: numpy.equal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.equal.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return (x1 == x2) element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1, x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input arrays. If `x1.shape != x2.shape`, they must be broadcastable to a common
    shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Output array, element-wise comparison of *x1* and *x2*. Typically of type bool,
    unless `dtype=object` is passed. This is a scalar if both *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`not_equal`](numpy.not_equal.html#numpy.not_equal "numpy.not_equal"), [`greater_equal`](numpy.greater_equal.html#numpy.greater_equal
    "numpy.greater_equal"), [`less_equal`](numpy.less_equal.html#numpy.less_equal
    "numpy.less_equal"), [`greater`](numpy.greater.html#numpy.greater "numpy.greater"),
    [`less`](numpy.less.html#numpy.less "numpy.less")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What is compared are values, not types. So an int (1) and an array of length
    one can evaluate as True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `==` operator can be used as a shorthand for `np.equal` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
