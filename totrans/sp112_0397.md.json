["```py\nscipy.ndimage.binary_dilation(input, structure=None, iterations=1, mask=None, output=None, border_value=0, origin=0, brute_force=False)\n```", "```py\n>>> from scipy import ndimage\n>>> import numpy as np\n>>> a = np.zeros((5, 5))\n>>> a[2, 2] = 1\n>>> a\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> ndimage.binary_dilation(a)\narray([[False, False, False, False, False],\n [False, False,  True, False, False],\n [False,  True,  True,  True, False],\n [False, False,  True, False, False],\n [False, False, False, False, False]], dtype=bool)\n>>> ndimage.binary_dilation(a).astype(a.dtype)\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> # 3x3 structuring element with connectivity 1, used by default\n>>> struct1 = ndimage.generate_binary_structure(2, 1)\n>>> struct1\narray([[False,  True, False],\n [ True,  True,  True],\n [False,  True, False]], dtype=bool)\n>>> # 3x3 structuring element with connectivity 2\n>>> struct2 = ndimage.generate_binary_structure(2, 2)\n>>> struct2\narray([[ True,  True,  True],\n [ True,  True,  True],\n [ True,  True,  True]], dtype=bool)\n>>> ndimage.binary_dilation(a, structure=struct1).astype(a.dtype)\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> ndimage.binary_dilation(a, structure=struct2).astype(a.dtype)\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> ndimage.binary_dilation(a, structure=struct1,\\\n... iterations=2).astype(a.dtype)\narray([[ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 1.,  1.,  1.,  1.,  1.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  1.,  0.,  0.]]) \n```"]